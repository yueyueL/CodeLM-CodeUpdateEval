public String getCurrentTimeStamp ( ) { return new SimpleDateFormat ( "HH : mm : ss" ) . format ( new Date ( ) ) ; }
public void onClick ( View v ) { String url = mTrailers . get ( getAdapterPosition ( ) ) . second ; mTrailerClickListener . onTrailerClicked ( url ) ; }
private double sqfootTohectare ( double num ) { return num * 0 . 00000929 ; }
public void setOnSearchMode ( ) { currentStatus = StatusEnum . ADD_ON_SEARCH ; }
public String getNature ( ) { if ( germination ) return ( "germination" ) ; else return ( "sowing" ) ; }
public MyMusicPagerAdapter ( FragmentManager fm ) { super ( fm ) ; mRegisteredFragments = new SparseArray <> ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . fragment_theme_editor , menu ) ; return true ; }
private void finaliseTransactionLoad ( Map < BigInteger , Transaction > newTransactions , int newDisplayedItems ) { displayedItems += newDisplayedItems ; transactions . putAll ( newTransactions ) ; transactionsData . postValue ( transactions ) ; loading = false ; transactionsLabel . postValue ( R . string . transactions ) ; }
public void onSingleClick ( View view ) { Reddit . appRestart . edit ( ) . putBoolean ( "forceoffline" , true ) . commit ( ) ; Reddit . forceRestart ( MainActivity . this ) ; }
public void getIdBLACKTest ( ) throws Exception { int index = 3 ; AppTheme apptheme = AppTheme . getTheme ( index ) ; assertEquals ( index , apptheme . getId ( ) ) ; }
public void scale ( double factor ) { x * = factor ; y * = factor ; }
public ArrayList < TimeTableDay > getAllDays ( ) { return this . timeTableDays ; }
public void onScrubMove ( TimeBar timeBar , long position ) { mVideoPlayer . seekTo ( position ) ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { TupleAttachment a1 = prev . get ( oldItemPosition ) ; TupleAttachment a2 = next . get ( newItemPosition ) ; return a1 . equals ( a2 ) ; }
public int damage ( int damage , NamedEntityKind src ) { return damage ; }
private void showSettings ( ) { startActivity ( new Intent ( MainActivity . this , PreferencesActivity . class ) ) ; }
public void cancelRunnable ( Runnable runnable ) { try { syncLatch . await ( ) ; handler . removeCallbacks ( runnable ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public String getColumnName ( ) { return columnName ; }
public IPresenterFactory < RequestExecutePresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new RequestExecutePresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , saveInstanceState ) ; }
public void setHost ( @ CinemaHost String host ) { mHost = host ; }
public ShortOfLengthException ( String inputField , int minimumCharacters ) { this . minimumCharacters = minimumCharacters ; this . inputField = inputField ; }
public boolean onMenuItemActionCollapse ( MenuItem item ) { onBackPressed ( ) ; return false ; }
public boolean attachTo ( Char target ) { return target . hasBuff ( Hunger . class ) || super . attachTo ( target ) ; }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new AboutScreen ( game ) ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; if ( ! recyclerView . canScrollVertically ( 1 ) ) { mPresenter . loadMorePatients ( ) ; } }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = mLayoutInflater . inflate ( R . layout . plugin_list_row , parent , false ) ; return new PluginViewHolder ( view ) ; }
public HorizontalAlbumAdapter ( @ NonNull AppCompatActivity activity , ArrayList < Album > dataSet , @ Nullable CabHolder cabHolder ) { super ( activity , dataSet , HorizontalAdapterHelper . LAYOUT_RES , cabHolder ) ; usePalette = false ; }
public static void remove ( String name , Context context ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . remove ( name ) . commit ( ) ; }
public ColorChooserDialog show ( ) { ColorChooserDialog dialog = build ( ) ; dialog . show ( context ) ; return dialog ; }
public void swapCursor ( Cursor cursor ) { if ( mCursor != null ) mCursor . close ( ) ; mCursor = cursor ; if ( cursor != null ) this . notifyDataSetChanged ( ) ; }
public PrivateKey getPrivate ( ) throws IOException { return privateKey . getPrivate ( ) ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Metabolism_Txt ) , weaponName ) ; }
private void initIncreasingLoudnessPrefs ( ) { binding . increasePrefs . setOnClickListener ( mIncreaseClick ) ; binding . increasePrefs . setChecked ( mPrefs . isIncreasingLoudnessEnabled ( ) ) ; }
public void makeUploadRequest ( ) { WorkManager . getInstance ( getApplicationContext ( ) ) . enqueueUniqueWork ( UploadWorker . class . getSimpleName ( ) , ExistingWorkPolicy . KEEP , OneTimeWorkRequest . from ( UploadWorker . class ) ) ; }
public Item getItemAtPosition ( final int position ) { return getItemInternal ( position ) ; }
private static < K , V > void setColor ( Entry < K , V > p , boolean c ) { if ( p != null ) p . color = c ; }
public void setFirstTimeLaunch ( ) { getStore ( ) . setFirstTimeLaunch ( ) ; }
public VeiculoAno ( String name , String marca , String key , String id , String veiculo ) { this . name = name ; this . marca = marca ; this . key = key ; this . id = id ; this . veiculo = veiculo ; }
public void onMenuResetClicked ( MenuItem item ) { AlertDialog dialog = buildResetDialog ( ) ; dialog . show ( ) ; }
public void goToAddingScreen ( ) { PlaceFactory . getProxyAddPlace ( ) . tryOpenWith ( getActivity ( ) ) ; }
public String getTagsString ( boolean cryptedValue ) { return ( cryptedValue ) ? tagsString : decryptedTagsString ; }
public void testValidateInputPasswordMismatch ( ) throws Throwable { assertThat ( validateInput ( "user" , "password" , "passw0rd" , "" ) , is ( ValidateResult . PASSWORD_MISMATCH ) ) ; }
private static String getPersistedData ( Context context , String defaultLanguage ) { final SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return preferences . getString ( "language" , defaultLanguage ) ; }
public com . coinomi . core . protos . Protos . KeyOrBuilder getSeedOrBuilder ( ) { return seed_ ; }
public boolean hasPointerEvents ( ) { return overlay == null ; }
public int deleteAll ( ) { int rowsAffected = db . delete ( table . getTableName ( ) , "1" ) ; Timber . d ( "Rows deleted : %d" , rowsAffected ) ; return rowsAffected ; }
public Object getSettingValue ( Id settingId ) { return getSetting ( settingId ) . getValue ( ) ; }
public static int getForegroundColor ( Activity a ) { SharedPreferences sharedPref = a . getPreferences ( Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "fgColor" , 1 ) ; }
private void loadProvider ( RestResponseHandler handler ) { log . v ( TAG , "loadProvider" ) ; ifmoRestClient . get ( activity , "building_map" , null , handler ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . contactsDidLoaded ) ; NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . closeChats ) ; return true ; }
public void onClick ( ProjectDataIntra projectData ) { BottomSheetProjectsGalaxyFragment . openIt ( getActivity ( ) , projectData , activity . user . id ) ; }
public String getTime ( ) { return DateUtils . convert ( getDate ( ) ) ; }
public void goToSourceCode ( ) { try { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . app_sourceCodeURL ) ) ) ) ; } catch ( Exception e ) { showUnknownError ( ) ; } }
public AlphabeticalAdapter ( Context context , ArrayList < Brother > brothers ) { super ( context , R . layout . item_brother , R . id . txt_name , brothers ) ; init ( brothers ) ; }
public BookCardEventsCallback ( Context context ) { this . context = context ; }
public void onClick ( View v ) { mData . remove ( name ) ; }
public double getPercentage ( ) { return ( double ) progress / goal * 100 ; }
public void pause ( ) { if ( ! supposedToBePlaying ) { return ; } supposedToBePlaying = false ; pausePlayer ( player ) ; }
public void update ( GLViewport v ) { if ( ! mInitialized ) { init ( ) ; show ( ) ; mInitialized = true ; } setReady ( isEnabled ( ) ) ; }
private void refreshUI ( ) { mProgressBar . setVisibility ( View . VISIBLE ) ; mSyncedPatientRecyclerView . setVisibility ( View . GONE ) ; mPresenter . updateLocalPatientsList ( ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof BottomNavController ) { mBottomNavController = ( BottomNavController ) context ; } }
public Builder ( @ NonNull final Fragment fragment , int themeResId ) { this ( fragment . requireActivity ( ) , themeResId ) ; }
private void setExcise ( ) { Views . setTV ( this , R . id . tv_excise , getString ( R . string . kwota_akcyzy , Display . toPay ( bill . getExcise ( ) ) ) ) ; }
private void setSortModeSummary ( ) { int sortValue = new Integer ( appPreferences . getSortMode ( ) ) - 1 ; prefSortMode . setSummary ( getResources ( ) . getStringArray ( R . array . sortEntries ) [ sortValue ] ) ; }
public boolean needsUploading ( ) { return isFileOrImage ( ) && getImageParams ( ) . url == null ; }
public BleLruHashMap ( int saveSize ) { super ( ( int ) Math . ceil ( saveSize / 0 . 75 ) + 1 , 0 . 75f , true ) ; MAX_SAVE_SIZE = saveSize ; }
public SavedOrganization getSavedOrganization ( ) { return _savedOrganization ; }
public void titleChanged ( String oldTitle , String newTitle ) { mChangeCallback . onTitleChanged ( this ) ; }
public static void swipeRight ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . swipe_right_enter , R . anim . swipe_right_exit ) ; }
public boolean setEnabled ( Context context ) { return setEnabled ( context , storagePref . get ( context , "pref_allow_send_reports" , true ) ) ; }
public void getDefaultMediaUrlWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "1" ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "droiddevelopers254 . droidconke" , appContext . getPackageName ( ) ) ; }
public void setStatuses ( List < StatusViewData > statuses ) { this . statuses . clear ( ) ; this . statuses . addAll ( statuses ) ; notifyDataSetChanged ( ) ; }
private File getVaultBackupFile ( ) { return new File ( new File ( getFilesDir ( ) , "backup" ) , VaultManager . FILENAME ) ; }
public FeedItemsViewModel ( @ NonNull Application application ) { super ( application ) ; repo = FeedRepository . getInstance ( application ) ; feedId = - 1 ; }
public void onClick ( View v ) { startActivity ( new Intent ( HomeActivity . this , WriteActivity . class ) ) ; }
public boolean getBoolPref ( int id , boolean defaultValue ) { return sharedPrefs . getBoolean ( getString ( id ) , defaultValue ) ; }
private void openTemplatePasswordGeneration ( boolean useBackStack ) { Fragment f = new PresetPasswordGenerationFragment ( ) ; startFragment ( f , useBackStack ) ; selectNavigationDrawerItem ( R . id . nav_preset_password_generation ) ; }
private void setupEmotions ( View rootView ) { if ( ! remoteConfig . getBoolean ( getActivity ( ) , R . string . rc_show_extra_emoji ) ) { findById ( rootView , R . id . emotions2_linear_layout ) . setVisibility ( View . GONE ) ; } }
public void testMinimalEncoder26 ( ) throws Exception { verifyMinimalEncoding ( "AB12" , "ALPHANUMERIC ( AB12 ) , TERMINATOR ( ) " , null , false ) ; }
public void onCompletion ( MediaPlayer mp ) { play_pause . setText ( R . string . play_symbol ) ; isPlaying = false ; }
public void run ( ) { Theme . loadRecources ( context ) ; }
public int getUnitCost ( ) { return FACTORY_TANK_UNIT_COST ; }
public static @ NonNull UndoAction revertCardToProvidedState ( @ StringRes int undoNameId , Card card ) { return revertToProvidedState ( undoNameId , card , Arrays . asList ( card . clone ( ) ) ) ; }
public static boolean isQuickMenuEnabledForAccount ( Context context ) { return getBoolean ( context , "quick_menu_account_enabled" , true ) && isGreenDroidSupported ( ) ; }
public void onPositive ( MaterialDialog materialDialog ) { noteTmp . setAlarm ( null ) ; reminderIcon . setImageResource ( R . drawable . ic_reminder_add ) ; datetime . setText ( "" ) ; }
public long getItemId ( int position ) { FilesAdapterDisplayObject filesAdapterDisplayObject = displayList . get ( position ) ; if ( filesAdapterDisplayObject instanceof FilesAdapterDisplayFile ) { FilesAdapterDisplayFile dof = ( FilesAdapterDisplayFile ) filesAdapterDisplayObject ; return dof . fileIndex ; } return - position ; }
public SmartTexture ( @ NotNull Bitmap bitmap , int filtering , int wrapping ) { super ( ) ; bitmap ( bitmap ) ; filter ( filtering , filtering ) ; wrap ( wrapping , wrapping ) ; }
public void testMinimalEncoder12 ( ) throws Exception { verifyMinimalEncoding ( "12345" , "NUMERIC ( 12345 ) , TERMINATOR ( ) " , null , false ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . admin . bruinfeed" , appContext . getPackageName ( ) ) ; }
public void clearAllText ( ) { the_tree . empty ( ) ; }
public static void delete ( String key ) { book ( ) . delete ( key ) ; }
private void hideEmptyView ( ) { if ( isAdded ( ) && mEmptyView != null ) { mEmptyView . setVisibility ( View . GONE ) ; } }
public EighthActivityBuilder sponsors ( String [ ] sponsors ) { this . sponsors = sponsors ; return this ; }
public void run ( ) { int pos = mp . getCurrentPosition ( ) ; seek . setProgress ( pos ) ; current_duration . setText ( getFormattedTimeDuration ( pos ) ) ; handler . postDelayed ( this , 1000 ) ; }
public PrimaryEditTextView ( Context context ) { super ( context ) ; defineUi ( context , null , 0 ) ; }
public static boolean notEmpty ( String string ) { return ! string . isEmpty ( ) ; }
public List < ReadingElement > getReadingElements ( ) { return mReadingElements ; }
private Setting setSetting ( Id settingId , Setting setting ) { return _managedSettings . put ( settingId , setting ) ; }
public void onError ( @ NonNull Throwable t ) { }
public String getLocation ( ) { return mapPath + fileName ; }
public void setTracks ( List < NamedDTO > tracks ) { trackListAdapter . clear ( ) ; trackListAdapter . addAll ( tracks ) ; }
public void onCancel ( final DialogInterface dialog ) { TranslationExecution . cancelLastTranslation ( ) ; Toast . makeText ( activity , R . string . msg_translation_cancelled , Toast . LENGTH_SHORT ) . show ( ) ; }
public int getItemCount ( ) { return stickers != null ? stickers . size ( ) : 0 ; }
public String visit ( Artist artist ) { return artist . getName ( ) ; }
public void whenPromptHasAnswer_recaptureOsmButtonIsDisplayed ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) ; assertThat ( widget . launchOpenMapKitButton . getText ( ) , is ( widgetActivity . getString ( R . string . recapture_osm ) ) ) ; }
private void voltageInit ( List < RecyclerViewItem > items ) { mVoltage = new DescriptionView ( ) ; mVoltage . setTitle ( getString ( R . string . voltage ) ) ; items . add ( mVoltage ) ; }
public synchronized void start ( ) { internalWraperRunnable . run ( ) ; }
public static boolean getNotificationsAllow ( SharedPreferences settings ) { return settings . getBoolean ( ALLOW , true ) ; }
public void setCurrentMap ( SquadMap currentMap ) { MortarCalculatorApplication . currentMap = currentMap ; }
public void showSuccessMessage ( ) { Toast . makeText ( this , "Update was Successful ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public int getmDrawableImage ( ) { return mDrawableImage ; }
private BlurTransformation ( Builder builder , BitmapPool bitmapPool ) { super ( bitmapPool ) ; init ( builder ) ; }
public void testIllegalArgumentThrownOnInvalidIPaddress ( ) throws Exception { WakeOnLan . sendWakeOnLan ( null , "00 : 04 : 20 : 06 : 55 : 1a" , 9 , 10000 , 5 ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; Activity activity = getActivity ( ) ; if ( activity instanceof BaseActivity ) ( ( BaseActivity ) activity ) . addMusicServiceEventListener ( this ) ; }
private Long insertForm ( ContentValues values ) { SQLiteDatabase writeableDatabase = formsDatabaseProvider . getWriteableDatabase ( ) ; return writeableDatabase . insertOrThrow ( FORMS_TABLE_NAME , null , values ) ; }
public void onLoadFinished ( Loader < DataWrapper > loader , DataWrapper data ) { allData = data ; loadCallback . onDataLoaded ( ) ; }
public static String getDate ( Element item ) { Elements elements = item . select ( "pubDate" ) ; if ( elements . size ( ) > 0 ) return elements . get ( 0 ) . text ( ) ; else return "" ; }
public Maybe < Tag > create ( Tag entity ) { return Maybe . just ( entity ) ; }
private static void setBallAngle ( double angle ) { double _ballVelocity = getBallVelocity ( ) ; ball . setXVel ( _ballVelocity*Math . cos ( angle ) ) ; ball . setYVel ( _ballVelocity*Math . sin ( angle ) ) ; }
public String getSelectedLicense ( ) { return localDataSource . getSelectedLicense ( ) ; }
public void onDestroy ( ) { Lg . i ( LOGTAG , "onDestroy" ) ; super . onDestroy ( ) ; }
public void onBackPressed ( ) { U . sendBroadcast ( this , Constants . ACTION_HIDE_START_MENU ) ; }
private void addBottomPaddingForFastActions ( WebView view ) { if ( mPrefs . getBoolean ( SettingsActivity . CB_SHOW_FAST_ACTIONS , false ) ) { view . loadUrl ( "javascript : document . body . style . marginBottom = \"100px\" ; void 0" ) ; } }
public void onReceive ( final Context context , final Intent intent ) { emitter . onNext ( intent ) ; }
public void selectAll ( ) { for ( int i = 0 ; i < mItems . size ( ) ; i ++ ) { selectedPatientPositions . add ( i ) ; } isAllSelected = true ; notifyDataSetChanged ( ) ; }
public long getList ( ) { return listId ; }
public Builder setFavouritesCount ( String favouritesCount ) { this . favouritesCount = favouritesCount ; return this ; }
public void execute ( MenuListActivity mainActivity ) { Intent intent = new Intent ( mainActivity , QifExportActivity . class ) ; mainActivity . startActivityForResult ( intent , ACTIVITY_QIF_EXPORT ) ; }
public long getItemId ( int parPosition ) { return parPosition ; }
public LinesViewModel ( ) { compositeDisposable = new CompositeDisposable ( ) ; repository = new ZtmApiRepository ( ) ; isResult = new MutableLiveData <> ( true ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . disclaimer ) ; }
private DateWidget createWidget ( FormEntryPrompt prompt ) { return new DateWidget ( widgetActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) , widgetUtils ) ; }
public RectF getGridClippingRect ( ) { mGridClippingRect . set ( mViewPortHandler . getContentRect ( ) ) ; mGridClippingRect . inset ( 0 . f , - mAxis . getGridLineWidth ( ) / 2 . f ) ; return mGridClippingRect ; }
public void onDestroy ( ) { super . onDestroy ( ) ; viewModel . onDestroy ( ) ; adHelper . onDestroy ( ) ; }
public void onRefresh ( ) { queryIssues ( mainView ) ; }
private static Integer getDefaultDensity ( int displayID ) throws Exception { return ( Integer ) Class . forName ( "android . view . IWindowManager" ) . getMethod ( "getInitialDisplayDensity" , int . class ) . invoke ( getWindowManagerService ( ) , displayID ) ; }
public List < T > getGraphics ( ) { synchronized ( mLock ) { return new Vector ( mGraphics ) ; } }
public int getCount ( ) { return mDataSource . size ( ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitAndComparison ( this ) ; else return visitor . visitChildren ( this ) ; }
public static boolean isLoading ( ) { return hero == null || level == null || loading . get ( ) > 0 ; }
public HistoryComponent prepareComponent ( ) { return Dependencies . getApplicationComponent ( ) . getHistoryComponent ( ) ; }
private static String stripSpace ( String s ) { return SPACES . matcher ( s ) . replaceAll ( "" ) ; }
public void remove ( MyWalletEntry object ) { items . remove ( object ) ; }
public AboutBuilder addGoogleLink ( int url ) { return addGoogleLink ( context . getString ( url ) ) ; }
private void cancelCheckAnimator ( ) { if ( checkAnimator != null ) { checkAnimator . cancel ( ) ; } }
private void fireNewQuery ( String query ) { Fragment fragment = getChildFragmentManager ( ) . findFragmentById ( R . id . child_container ) ; if ( fragment instanceof BaseSearchFragment ) { ( ( BaseSearchFragment ) fragment ) . fireTextQueryEdit ( query ) ; } }
public LoadData < InputStream > buildLoadData ( @ NonNull AudioFileCover audioFileCover , int width , int height , @ NonNull Options options ) { return new LoadData < InputStream > ( new ObjectKey ( audioFileCover . filePath ) , new AudioFileCoverFetcher ( audioFileCover ) ) ; }
private void userDeletesQuery ( ) { user . types ( ) . searchQuery ( "" ) ; }
public ChangeStateFloatingActionButton ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public Order < TARGET > getOrder ( ) { return order ; }
public static void setRecorderMode ( Context context , boolean mode ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putBoolean ( PREFERENCES_TAG_START_RECORDER , mode ) . commit ( ) ; }
public float getTemperature ( ) { return temperature ; }
public String name ( ) { return Dungeon . level . tileName ( Terrain . SIGN ) ; }
public IMessage getLastMessage ( ) { return lastMessage ; }
private void setFollowStatusForBlog ( PostFollowStatusChanged readerData ) { if ( ! hasPostAdapter ( ) ) { return ; } getPostAdapter ( ) . setFollowStatusForBlog ( readerData . getBlogId ( ) , readerData . getFollowing ( ) ) ; }
public JSONObject post ( String resource , Map < String , Object > queryParams ) throws IOException { return send ( POST_REQUEST , resource , queryParams ) ; }
public PrefListItem getFirstSelectedItem ( ) { for ( PrefListItem item : this ) { if ( item . mIsChecked ) { return item ; } } return null ; }
public void setNoteList ( ArrayAdapter < Note > nl ) { this . noteList = nl ; }
public String info ( ) { return Game . getVar ( R . string . Pickaxe_Info ) ; }
public String desc ( ) { return Game . getVar ( R . string . LeatherArmor_Desc ) ; }
public Attachment getDefaultInstanceForType ( ) { return defaultInstance ; }
public void onResume ( ) { Log . w ( "myApp" , " [ # ] SettingsActivity . java - onResume ( ) " ) ; super . onResume ( ) ; }
public static void setupToolbar ( AppCompatActivity activity , String imageUrl , String title , boolean showHomeEnabled ) { ImageView iconView = setupCustomToolbar ( activity , title , showHomeEnabled ) ; FeedUtils . iconLoader . displayImage ( imageUrl , iconView , false ) ; }
public Boolean asBoolean ( ) { switch ( type ) { case NULL : return null ; default : return ( Boolean ) value ; } }
private void updateVersionInPreferences ( ) { SharedPreferences sp = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = sp . edit ( ) ; editor . putString ( VERSION_KEY , thisVersion ) ; editor . commit ( ) ; }
public boolean animationDisabled ( ) { SharedPreferences preferences = AnkiDroidApp . getSharedPrefs ( this ) ; return preferences . getBoolean ( "eInkDisplay" , false ) ; }
public boolean isShowFitMessage ( ) { return showFitMessage ; }
public void run ( ) { long elapsed = ( SystemClock . uptimeMillis ( ) - startMillisec ) / 1000 ; if ( isRunning ) { update ( elapsed ) ; invalidate ( ) ; handler . postDelayed ( this , delay ) ; } }
public ClusterQuery select ( String . . . columns ) { mColumns = columns ; return this ; }
public void setSettingGroup ( SettingGroup settingGroup ) { GraphicalAdapter . instance . setMenu ( new SettingsMenu ( settingGroup ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; this . dataManager = new SpUtils ( getApplicationContext ( ) ) ; this . boosterModeManager = new BoosterModeManager ( getApplicationContext ( ) ) ; performOnBackgroundThread ( ) . start ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { if ( finalIsRow ) deleteRow ( wrapper . y ) ; else deleteColumn ( wrapper . x ) ; buildMap ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_11 . class ) ; startActivity ( i ) ; }
public static boolean getAscending ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( PREFS_ASCENDING , true ) ; }
public String toString ( ) { return String . format ( "%1$s - %2$s - %3$s - %4$s - %5$s" , transactionId , title , ( int ) value , date . toEpochDay ( ) , deleted ) ; }
public void unburyCardsForDeck ( UnburyType type ) { unburyCardsForDeck ( type , null ) ; }
public void onCreateView ( @ Nullable Run runToEdit ) { if ( runToEdit != null ) { this . runToEdit = runToEdit ; editMode = true ; setViewEditMode ( ) ; } }
public static void verbose ( String tag , boolean debug , String msg , Throwable t ) { if ( ! debug || dev ) { Log . v ( tag , msg , t ) ; } }
public com . google . protobuf . Any getNewPublicKey ( ) { if ( newPublicKeyBuilder_ == null ) { return newPublicKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : newPublicKey_ ; } else { return newPublicKeyBuilder_ . getMessage ( ) ; } }
private void handleAddAttachment ( ) { if ( attachmentTypeSelector == null ) { attachmentTypeSelector = new AttachmentTypeSelector ( this , getSupportLoaderManager ( ) , new AttachmentTypeListener ( ) ) ; } attachmentTypeSelector . show ( this , attachButton ) ; }
public void onResume ( ) { super . onResume ( ) ; mailPollHandler . postDelayed ( emailPollRunnable , General . EMAIL_REFRESH_DELAY ) ; }
public void addComment ( ) { mCommentView . showCommentDialog ( 0 ) ; }
public boolean onItemLongClick ( AdapterView < ? > av , View v , int pos , long id ) { return onLongRecentConsistsListItemClick ( v , pos , id ) ; }
public void onChange ( boolean selfChange ) { super . onChange ( selfChange ) ; Logger . debug ( "MainService registerSpringBoardMonitor onChange" ) ; if ( ! wasSpringboardSaved ) WidgetsUtil . syncWidgets ( context ) ; else wasSpringboardSaved = false ; }
public void fireButtonDocClick ( ) { getView ( ) . startAddDocumentActivity ( getAccountId ( ) ) ; }
public float units ( ) { return Convert . metric? Convert . KPHf : Convert . MPHf ; }
public void onSessionFinished ( final TerminalSession finishedSession ) { }
private void refresh ( ) { IntentUtils . removeCompressedExtra ( getIntent ( ) , "comments" ) ; setResult ( RESULT_OK ) ; mCommitComments . clear ( ) ; loadComments ( false , true ) ; setContentShown ( false ) ; }
public boolean mustLogin ( ) { return ! api ( ) . isLoggedIn ( ) ; }
public void setTimeLimit ( long seconds ) { mConf . put ( "timeLim" , seconds ) ; }
public void disableViewPager ( boolean disable ) { mIsViewPagerDisabled = disable ; }
private GithubDbConfigResponse getDbConfig ( ) { if ( dbConfig != null ) return dbConfig ; if ( ! isOnline ( ) ) return null ; dbConfig = githubDbRequest . getConfig ( ) . blockingGet ( ) ; return dbConfig ; }
private void effectivelyDeleteTrip ( final int parPosition ) { Trip selectedTrip = ( Trip ) mTripListView . getItemAtPosition ( parPosition ) ; mSavingModule . deleteTrip ( selectedTrip . getUUID ( ) ) ; mActionMode . finish ( ) ; populateList ( ) ; }
public int getItemCount ( ) { return courses . size ( ) ; }
public void onItemSelected_Fragment_LocationNear ( int id , int jahr ) { detailItemChosen ( id , jahr , Fragment_LocationNear . TAG ) ; }
public void tick ( float delta ) { transform . translate ( tempVector . set ( velocity ) . scl ( delta ) ) ; super . tick ( delta ) ; age += delta ; if ( age > lifetime ) destroy ( ) ; }
public AboutBuilder setBrief ( @ Nullable String text ) { this . brief = text ; return this ; }
public void onError ( SystemException e ) { setText ( context , null ) ; }
private void onMediaDownsizeFailure ( QueuedMedia item ) { displayTransientError ( R . string . error_media_upload_size ) ; removeMediaFromQueue ( item ) ; }
private void handleConnectionResponse ( boolean granted ) { mResponseTimeoutTimer . cancel ( ) ; mConnectionProgressDialog . dismiss ( ) ; if ( granted ) { UiUtil . showToast ( this , getString ( R . string . send_activity_connection_success ) ) ; } else closeActivity ( RESULT_SERVER_REFUSED ) ; }
public Dictionary ( String abbreviation , Preferences . DictionaryType type , String path , LanguageSelectionSet languageSelectionSet ) { this . file = null ; this . type = type ; this . path = path ; this . abbreviation = abbreviation ; this . languageSelectionSet = languageSelectionSet ; }
public static String getPrimary ( ) { return String . valueOf ( DNSServerHelper . checkServerId ( Integer . parseInt ( Daedalus . getPrefs ( ) . getString ( "primary_server" , "0" ) ) ) ) ; }
public String getRating ( ) { return rating ; }
public void thanks ( ) { PrefUtils . appRated ( ) ; dismiss ( ) ; }
public String defenseVerb ( ) { return Game . getVar ( R . string . Ghost_Defense ) ; }
public void onDelete ( ) { Dialogs . delete ( getContext ( ) , adapter , this : : deleteSelected ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; getStickers ( ) ; updateRows ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . needReloadArchivedStickers ) ; return true ; }
public void run ( ) { Toast . makeText ( context , "sending : " + s , Toast . LENGTH_SHORT ) . show ( ) ; }
public LeakGuardHandlerWrapper ( @ NonNull final T ownerInstance , final Looper looper ) { super ( looper ) ; mOwnerInstanceRef = new WeakReference <> ( ownerInstance ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { FirebaseHelper . deleteTipWithId ( mTipId ) ; }
private void decorateFavorite ( boolean isFavorite ) { mBookmark . setImageResource ( isFavorite ? R . drawable . ic_bookmark_white_24dp : R . drawable . ic_bookmark_outline_white_24dp ) ; }
private void initVibratePrefs ( ) { binding . vibrationOptionPrefs . setOnClickListener ( mVibrateClick ) ; binding . vibrationOptionPrefs . setChecked ( mPrefs . isVibrateEnabled ( ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mActionBar = ( ( AppCompatActivity ) getActivity ( ) ) . getSupportActionBar ( ) ; mActionBar . setTitle ( R . string . player_playlist ) ; }
public final void update ( ) { mWeekBar . onWeekStartChange ( mDelegate . getWeekStart ( ) ) ; mSelectLayout . update ( ) ; mMonthPager . updateScheme ( ) ; mWeekPager . updateScheme ( ) ; }
public void addTestbedMapImage ( TestbedMapImage image ) { if ( testbedMapImages == null ) { testbedMapImages = new ArrayList < TestbedMapImage > ( ) ; } testbedMapImages . add ( image ) ; }
public synchronized static FileSystemFacade getFileSystemFacade ( @ NonNull Context appContext ) { if ( fileSystemFacade == null ) fileSystemFacade = new FileSystemFacadeImpl ( new SysCallImpl ( ) , new FsModuleResolverImpl ( appContext ) ) ; return fileSystemFacade ; }
public ThumbnailView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
private LXCInstance ( ) { Random r = new Random ( ) ; r . setSeed ( System . currentTimeMillis ( ) ) ; this . id = r . nextInt ( ) ; name = "localhost" ; isLocal = true ; }
public void showPeek ( final PeekView view , float origY ) { peekView = view ; peekView . show ( ) ; this . origY = origY ; }
public String getEnergyUnit ( ) { return this . energyUnit ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . teester . whatsnearby" , appContext . getPackageName ( ) ) ; }
public synchronized void destroy ( ) { lastState = LastState . CONNECT_IDLE ; disconnectGatt ( ) ; refreshDeviceCache ( ) ; closeBluetoothGatt ( ) ; removeConnectGattCallback ( ) ; removeRssiCallback ( ) ; removeMtuChangedCallback ( ) ; clearCharacterCallback ( ) ; mainHandler . removeCallbacksAndMessages ( this ) ; }
public UserPostListingURL after ( String newAfter ) { return new UserPostListingURL ( type , user , order , limit , before , newAfter ) ; }
public ShadowLordLevel ( ) { color1 = 0x801500 ; color2 = 0xa68521 ; viewDistance = 3 ; }
public void setResultType ( QoSTestResultEnum resultType ) { this . resultType = resultType ; }
public Map < ? , ? > getKeyboard ( String name ) { if ( ! presetKeyboards . containsKey ( name ) ) name = "default" ; return ( Map < ? , ? > ) presetKeyboards . get ( name ) ; }
public void setFragmentList ( List < OpenHABWidgetListFragment > fragments ) { fragmentList = fragments ; notifyDataSetChanged ( ) ; }
public Events createFromParcel ( Parcel source ) { return new Events ( source ) ; }
public String getGooglePlaceId ( ) { return this . _google_place_id ; }
private void setAdapter ( ) { mRecyclerViewFavorites . setLayoutManager ( new LinearLayoutManager ( mContext , LinearLayoutManager . VERTICAL , false ) ) ; mRecyclerViewFavorites . setAdapter ( mMyQuestionsAdapter ) ; }
public void onDownloads ( List < Download > downloads ) { adapter = new DirectDownloadsAdapter ( this , helper , downloads , new RestartListener ( ) ) ; rmv . loadListData ( adapter ) ; countUpdated ( ) ; }
public void onEvent ( Events . WaypointUpdated e ) { publishWaypointMessage ( e . getWaypointModel ( ) ) ; removeGeofences ( ) ; setupGeofences ( ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_with_button , parent , false ) ; return new ViewHolder ( v ) ; }
public Single < List < QuranAyah >> getTranslationFromDatabase ( VerseRange verses , String db ) { return getVersesFromDatabase ( verses , db , DatabaseHandler . TextType . TRANSLATION ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_9 . getText ( ) . toString ( ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { String text = getDownload . getText ( ) . toString ( ) ; text = DownloadHandler . addNecessarySlashes ( text ) ; mPreferenceManager . setDownloadDirectory ( text ) ; downloadloc . setSummary ( text ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . toolbar , menu ) ; toolbar = menu ; presenter . onToolbarSetup ( ) ; return true ; }
public static int getIconLightThemeColor ( @ NonNull Context context ) { return ContextCompat . getColor ( context , R . color . icon_light_theme ) ; }
public Node ( Node parent , int depth , User user ) { mParent = parent ; mUser = user ; mDepth = depth ; }
public void onDetachedFromRecyclerView ( @ NonNull RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; database . close ( ) ; }
private void applyKeepScreenOn ( ) { if ( isKeepScreenOn ) { getWindow ( ) . addFlags ( WindowManager . LayoutParams . FLAG_KEEP_SCREEN_ON ) ; } else { getWindow ( ) . clearFlags ( WindowManager . LayoutParams . FLAG_KEEP_SCREEN_ON ) ; } }
public CheapSoundFile create ( ) { return new CheapWAV ( ) ; }
public long getBatchSize ( ) { return batchSize ; }
private boolean isDateNull ( ) { return binding . dateWidget . widgetAnswerText . getText ( ) . equals ( getContext ( ) . getString ( R . string . no_date_selected ) ) ; }
public void clean ( ) { slpActivity . unregisterReceiver ( p2pReceiver ) ; wdAutoAccept . intercept ( false ) ; }
public void setContactJid ( String jid ) { this . contactJid = jid ; }
private void loadActions ( ) { list = new ArrayList <> ( ) ; list . addAll ( Arrays . asList ( itemListSelector , autostartSelector , themeSelector , searchbarHiderSelector , sizeSelector , alignmentSelector , keyboardHiderSelector , wikiAction , clearHistoryAndRestart ) ) ; loadNames ( ) ; }
public void setData ( List < Tag > data ) { showTags ( data ) ; }
public void onPlayerStart ( ) { Log . d ( TAG , "onPlayerStart" ) ; updateStartStopMenuItem ( ) ; }
public int getGroupCount ( ) { return _cbsData . size ( ) ; }
public synchronized void cancelAllTasks ( ) { cancelPositionSaver ( ) ; cancelWidgetUpdater ( ) ; disableSleepTimer ( ) ; cancelQueueLoader ( ) ; if ( chapterLoaderFuture != null ) { chapterLoaderFuture . dispose ( ) ; chapterLoaderFuture = null ; } }
public void onClick ( View v ) { verifyMnemonic ( ) ; }
public Address getReceiveAddress ( boolean isManualAddressManagement ) { return getAddress ( RECEIVE_FUNDS , isManualAddressManagement ) ; }
public org . thoughtcrime . securesms . backup . BackupProtos . Attachment getDefaultInstanceForType ( ) { return org . thoughtcrime . securesms . backup . BackupProtos . Attachment . getDefaultInstance ( ) ; }
public void testLocationTrackerLifecycle ( ) { ActivityScenario < GeoPolyActivity > scenario = ActivityScenario . launch ( GeoPolyActivity . class ) ; scenario . moveToState ( Lifecycle . State . DESTROYED ) ; verify ( locationTracker ) . stop ( ) ; }
public AboutBuilder addFiveStarsAction ( String appId ) { return addAction ( R . mipmap . star , R . string . rate_five_stars , util . openPlayStoreAppPage ( appId ) ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfIcebolt_Info ) ; }
public void onResume ( ) { super . onResume ( ) ; mPresenter . subscribe ( ) ; }
public static void unlockScreenOrientation ( Activity currentActivity ) { currentActivity . setRequestedOrientation ( ActivityInfo . SCREEN_ORIENTATION_USER ) ; }
public void onErrorResponse ( VolleyError error ) { Log . d ( "SpotifyQueuer" , "error : " + error ) ; }
private void selectImageFromCamera ( ) { imageActivityHelper . getImageFromCamera ( this . geocode , false ) ; }
public void setValue ( Money value ) { mValue = value ; }
public void onClick ( View v ) { if ( moreListener != null ) { moreListener . executeFileAudioModel ( file , v ) ; } }
public int getCount ( ) { if ( comments == null ) return 0 ; else return comments . size ( ) ; }
public void onResponse ( JSONObject response ) { note . setRead ( ) ; NotificationsTable . putNote ( note ) ; }
public void requestLayout ( ) { if ( chatListViewIgnoreLayout ) { return ; } super . requestLayout ( ) ; }
public com . coinomi . core . protos . Protos . WalletPocket getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . WalletPocket . getDefaultInstance ( ) ; }
public void onClick ( View v ) { recenterMap ( mapFriendItem . getCoords ( ) ) ; googleMap . setMapStyle ( MapStyleOptions . loadRawResourceStyle ( context , R . raw . google_map_color ) ) ; }
private void launchVideoLibrary ( ) { WPMediaUtils . launchVideoLibrary ( this , ! mShowGutenbergEditor ) ; }
public Integer [ ] getPcSizeArray ( ) { return pc_sizes ; }
public String getDeviceLang ( ) { deviceLang = appPrefs . getString ( "device_lang" , "en" ) ; return deviceLang ; }
public int getItemCount ( ) { return mNotes . size ( ) ; }
private void thenTempShouldBe ( double expected ) { assertEquals ( expected , mForecastData . getTemp ( ) , 0 . 1 ) ; }
public void run ( ) { MantraDatabase . getDatabase ( MantraDetailsActivity . this ) . mantraDao ( ) . updateMalas ( position , totalMalasCompleted + malasCompleted ) ; }
public void testQueryBySQL ( ) { Cursor cursor = DataSupport . findBySQL ( "select * from " + bookTable ) ; assertTrue ( cursor . getCount ( ) > 0 ) ; cursor . close ( ) ; }
public void testIsNOTWPCOM2 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( notWpcomAddress2 ) ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { serverTime = dataInputStream . readLong ( ) ; }
public void removeBookmark ( Integer id ) { removeFromWords ( id , BOOKMARK_KEY ) ; }
public final void startRender ( final RRGLMatrixStack stack , final long time ) { if ( mVisible ) renderInternal ( stack , time ) ; }
public JsonCommand downloadCommand ( ) { return downloadCommand ; }
public void consumeAsync ( List < Purchase > purchases , OnConsumeMultiFinishedListener listener ) { checkNotDisposed ( ) ; checkSetupDone ( "consume" ) ; consumeAsyncInternal ( purchases , null , listener ) ; }
public NotFilter ( Filter < I > filter ) { this . filter = filter ; }
public RankerViewHolder ( View itemView ) { super ( itemView ) ; name_TextView = ( TextView ) itemView . findViewById ( R . id . country_name ) ; iso_TextView = ( TextView ) itemView . findViewById ( R . id . country_iso ) ; }
private static Long getLong ( Cursor cursor , int index ) { return cursor . isNull ( index ) ? null : cursor . getLong ( index ) ; }
public static boolean isDoubleBuffered ( ) { return true ; }
public void acquireWakeLock ( ) { mWakeLock . acquire ( ) ; }
private double acreTosqm ( double num ) { return num * 4046 . 856 ; }
public void onBindViewHolder ( final NoteHolder holder , final int position ) { holder . setData ( getItem ( position ) ) ; }
public static boolean isLoadFavoritesOnly ( ) { return getBoolean ( R . string . pref_key_is_load_favorites , false ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_contacts_resolvedPeer . TLdeserialize ( stream , constructor , exception ) ; }
public AboutBuilder addMoreFromMeAction ( int userName ) { return addMoreFromMeAction ( context . getString ( userName ) ) ; }
public boolean hasPendingData ( ) { return isInitialized ( ) && ( getSubmittedFrames ( ) > audioTrackUtil . getPlaybackHeadPosition ( ) || overrideHasPendingData ( ) ) ; }
public void run ( ) { refreshed = false ; if ( autoRefresh ( ) && ! paused ) { runOnUiThread ( ( ) -> { if ( ! needKey && radarFragment != null ) radarFragment . refreshRadar ( ) ; scheduleRefresh ( ) ; } ) ; } }
public void update ( ) { super . update ( ) ; }
private void initSwipeControl ( ) { ItemTouchHelper . Callback callback = new SimpleItemTouchHelperCallback ( mContext , mMyQuestionsAdapter ) ; ItemTouchHelper mItemTouchHelper = new ItemTouchHelper ( callback ) ; mItemTouchHelper . attachToRecyclerView ( mRecyclerViewMyQuestions ) ; }
public void onClick ( View v ) { mKdSeekBar . setProgress ( mKdSeekBar . getProgress ( ) - 10 ) ; }
public static TopicChange create ( final String oldTopic , final String newTopic ) { return new AutoValue_TopicChange ( oldTopic , newTopic ) ; }
public boolean isNightMode ( ) { return mPrefs . getBoolean ( Constants . PREF_NIGHT_MODE , false ) ; }
private void refreshMyToursView ( ) { MyToursFragment myToursFragment = ( MyToursFragment ) homePageAdapter . getFragment ( POSITION_MY_TOURS ) ; if ( myToursFragment != null ) { myToursFragment . updateAdapter ( ) ; } }
public double getBtcDoubleValue ( ) { return balance . equals ( "0" ) ? 0 : ( getBalanceNumeric ( ) . divide ( BtcWallet . DIVISOR , 3 , BigDecimal . ROUND_FLOOR ) ) . doubleValue ( ) ; }
public boolean onLongClick ( View v ) { currentCalculation += "#" ; displayCalculation += "%" ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; return true ; }
private void showRatingProgress ( boolean show ) { if ( show ) { starInfo . setVisibility ( GONE ) ; ratingProgress . setVisibility ( VISIBLE ) ; } else { starInfo . setVisibility ( VISIBLE ) ; ratingProgress . setVisibility ( GONE ) ; } }
public void echoAsync ( final String chaine ) { executeAsync ( new Functions . IFunc < String > ( ) { public String Func ( ) throws java . lang . Exception { return echo ( chaine ) ; } } ) ; }
public DistrictViewHolder ( View districtItemLayout , OnDistrictSelectedListener onDistrictSelectedListener ) { super ( districtItemLayout ) ; this . districtItemLayout = districtItemLayout ; this . onDistrictSelectedListener = onDistrictSelectedListener ; textViewName = ( TextView ) districtItemLayout . findViewById ( R . id . textView_item_district_name ) ; }
public Notification getSearchingAndTrackingNotification ( ) { return mTrackingAndSearchingNotificationBuilder . getNotification ( ) ; }
public double getLatitude ( ) { return latitute ; }
public void onPrepared ( MediaPlayer mp ) { listener . onEvent ( ) ; startProgressLoop ( ) ; mNativeMediaPlayer = mp ; }
public FileViewModel ( @ NonNull final Application application , final FileModel directory ) { super ( application ) ; mCurrentDirectory = directory ; }
public void onViewAttachedToWindow ( RecyclerView . ViewHolder holder ) { onViewAttachedToWindow ( holder , holder . getItemViewType ( ) ) ; }
public static String getLogPath ( ) { return getString ( R . string . pref_key_log_path , null ) ; }
public void setWindowTitle ( ) { getManagedComponent ( ) . getWindow ( ) . setTitle ( getWindowTitle ( ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { Fragment target = getTargetFragment ( ) ; if ( target != null ) { target . onActivityResult ( getTargetRequestCode ( ) , Activity . RESULT_OK , null ) ; } dismiss ( ) ; }
public void updateVolume ( ) { setVolume ( mVolume ) ; }
public List < Comment > apply ( CnBetaApi . Result < List < Comment >> listResult ) { if ( ! listResult . isSuccess ( ) ) { throw new RequestFailedException ( ) ; } return listResult . result ; }
public int update ( Uri uri , ContentValues values , String selection , String [ ] selectionArgs ) { return 0 ; }
public void onClick ( DialogInterface dialog , int whichButton ) { Editor edit = PreferenceManager . getDefaultSharedPreferences ( mContext ) . edit ( ) ; edit . putBoolean ( Settings . PREF_MESSAGE , true ) ; edit . commit ( ) ; }
private void saveLimit ( int progress ) { int repeatLimit = progress ; if ( progress == 0 ) repeatLimit = - 1 ; mInterface . setRepeatLimit ( repeatLimit ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . in_app_aria2_conf , menu ) ; return true ; }
public static final GpsSimpleViewFragment newInstance ( ) { GpsSimpleViewFragment fragment = new GpsSimpleViewFragment ( ) ; Bundle bundle = new Bundle ( 1 ) ; bundle . putInt ( "a_number" , 1 ) ; fragment . setArguments ( bundle ) ; return fragment ; }
public Long getPaid ( ) { return paid ; }
public synchronized boolean deleteAll ( Integer appId ) { boolean success = this . requester . deleteAll ( appId ) ; this . state . deleteAll ( appId ) ; return success ; }
private void restoreStatus ( ) { mSwitchSystem . setChecked ( PreferenceManager . getInstance ( ) . getBoolean ( PreferenceManager . PREF_SETTINGS_HIDE_SYSTEM_APPS ) ) ; mSwitchUninstall . setChecked ( PreferenceManager . getInstance ( ) . getBoolean ( PreferenceManager . PREF_SETTINGS_HIDE_UNINSTALL_APPS ) ) ; }
public static ArrayList < String > fromString ( String value ) { Type listType = new TypeToken < ArrayList < String >> ( ) { } . getType ( ) ; return new Gson ( ) . fromJson ( value , listType ) ; }
public boolean isAutoConnection ( ) { return ENUM_Boolean . BOOLEAN_AUTO_CONNECTION . value ; }
public void clearHistory ( ) { mEditHistory . clear ( ) ; }
private void assertFK ( Teacher t , IdCard i ) { Assert . assertTrue ( isFKInsertCorrect ( getTableName ( t ) , getTableName ( i ) , t . getId ( ) , i . getId ( ) ) ) ; }
public void onAnimationEnd ( Animator animation ) { mMapsButton . setVisibility ( View . INVISIBLE ) ; mAPB . setVisibility ( View . INVISIBLE ) ; }
private boolean inputFieldsCompleted ( ) { for ( int id : inputFieldResourceIds ) { if ( getValueOfInputField ( this , id ) . isEmpty ( ) ) { return false ; } } return true ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { Log . d ( TAG , "onViewCreated" ) ; super . onViewCreated ( view , savedInstanceState ) ; initPullToRefresh ( ) ; loadStations ( ) ; initListAdapter ( ) ; initListViewListeners ( ) ; }
public void onResume ( ) { super . onResume ( ) ; updateActiveChannelsList ( ) ; updateInactiveChannelsList ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { startLookup ( history . get ( which ) ) ; }
public void onStart ( ) { super . onStart ( ) ; EventBus . getDefault ( ) . register ( this ) ; mDispatcher . register ( this ) ; showComment ( ) ; }
public ActionEditText ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; }
public void preAttack ( Char hero , Char tgt ) { script . runOptionalNoRet ( "preAttack" , tgt ) ; }
public void deleteThread ( long threadId ) { Set < Long > singleThreadSet = new HashSet < Long > ( ) ; singleThreadSet . add ( threadId ) ; deleteThreads ( singleThreadSet ) ; }
private Builder getBuilder ( ) { if ( getArguments ( ) == null || ! getArguments ( ) . containsKey ( "builder" ) ) return null ; return ( Builder ) getArguments ( ) . getSerializable ( "builder" ) ; }
public void notifyOptionChange ( ) { optionAdapter . notifyDataSetChanged ( ) ; }
public void setId ( @ NonNull int id ) { this . id = id ; }
public void onCookieProgressDialogCancelled ( ) { WPSnackbar . make ( findViewById ( R . id . snackbar_anchor ) , R . string . media_accessing_failed , Snackbar . LENGTH_LONG ) . show ( ) ; loadWebContent ( ) ; }
public void notifyIdAdded ( int id , boolean isPercentage ) { requery ( ) ; notifyItemInserted ( isPercentage ? convertPercentageIdToPosition ( id ) : convertCounterIdToPosition ( id ) ) ; }
public static InputStream getInputStream ( URI uri ) throws IOException { return getInputStream ( Uri . parse ( uri . toString ( ) ) ) ; }
public boolean hasResponseLyrics ( ) { return ( ( bitField0_ & 0x01000000 ) == 0x01000000 ) ; }
public void onDataChange ( final DataSnapshot dataSnapshot ) { if ( dataSnapshot . getValue ( ) == null ) { subtitle . setVisibility ( View . GONE ) ; } else { subtitle . setVisibility ( View . VISIBLE ) ; } }
public void notifyItemRangeInserted ( int positionStart , int itemCount ) { updateRows ( ) ; try { super . notifyItemRangeInserted ( positionStart , itemCount ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void showItems ( Cursor items ) { mAdapter . swapCursor ( items , true ) ; }
public boolean shouldOverrideUrlLoading ( WebView view , String url ) { url = AppUtils . pathJoin ( blogUrl , url ) ; Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( url ) ) ; startActivity ( intent ) ; return true ; }
public int getPosition ( int identifier ) { return DrawerUtils . getPositionByIdentifier ( mDrawerBuilder , identifier ) ; }
public void addItem ( FileModel name , int position ) { this . mFiles . add ( position , name ) ; this . notifyItemInserted ( position ) ; }
public RichObject searchObjectByName ( ArrayList < RichObject > richObjectList , String name ) { for ( RichObject richObject : richObjectList ) { if ( richObject . getTag ( ) . equalsIgnoreCase ( name ) ) return richObject ; } return null ; }
public void onEventMainThread ( @ SuppressWarnings ( "unused" ) RegisterSqueezeNetwork event ) { PluginListActivity . register ( mActivity ) ; }
private boolean saveRecord ( ResultObj obj ) { boolean runBeforeSaving = SettingsManager . isFixEmptyParagraphs ( ) ; if ( runBeforeSaving ) { this . mResultObj = obj ; } return saveRecord ( runBeforeSaving , obj ) || runBeforeSaving ; }
public void checkServerTrusted ( X509Certificate [ ] certs , String arg1 ) throws CertificateException { Date today = new Date ( ) ; for ( X509Certificate certificate : certs ) { certificate . checkValidity ( today ) ; } }
public void setOnLongClickListener ( OnLongClickListener l ) { this . _longClick = l ; }
public void showSnack ( @ NonNull final String message , final int length ) { showSnack ( getWindow ( ) . getDecorView ( ) , message , length ) ; }
public void tearDown ( ) { colorMockedStatic . close ( ) ; }
private void markItemAsReadOrUnread ( RssItem item , boolean read ) { NewsReaderListActivity . stayUnreadItems . add ( item . getId ( ) ) ; item . setRead_temp ( read ) ; dbConn . updateRssItem ( item ) ; UpdateActionBarIcons ( ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mNameEditText . setText ( "" ) ; mQuantityEditText . setText ( "" ) ; mTotalUnitTextView . setText ( getString ( R . string . reset_total_unit ) ) ; }
public void onClick ( View view ) { mentionsPopup . setExpansionPointForAnim ( view ) ; mentionsPopup . show ( ) ; }
public void onClick ( ) { updateTile ( ) ; }
public void run ( ) { new Provider ( DietProductSearchActivity . this , DietProductSearchActivity . this , listView ) . load ( s . toString ( ) ) ; }
public void run ( ) { updateDialogsWithReadMessagesInternal ( null , inbox , outbox ) ; }
public void setData ( ScatterData data ) { mScatterData = data ; init ( ) ; }
public static String irc_to_html ( String msg ) { return irc_to_html ( msg , null , 0 , null , 0 ) ; }
public void setItemID ( Integer itemID ) { this . itemID = itemID ; }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , Fblist . class ) ; i . putExtra ( "firstTime" , true ) ; startActivityForResult ( i , PAGE_SELECTED ) ; return ; }
public ShareUtil ( Context context ) { mContext = context ; }
public void onClick ( DialogInterface dialogInterface , int i ) { MessagesController . getInstance ( ) . deleteDialog ( dialog_id , 0 , false ) ; finishFragment ( ) ; }
public final int getCellWidth ( ) { return this . _cellWidth ; }
public void apply ( View view , int index ) { TextView tv = ( TextView ) view ; tv . setTypeface ( typeface ) ; tv . setText ( tv . getText ( ) . toString ( ) . toLowerCase ( ) ) ; }
private int deleteCascade ( DataSupport baseObj ) { int rowsAffected ; rowsAffected = deleteAssociatedForeignKeyRows ( baseObj ) ; rowsAffected += deleteAssociatedJoinTableRows ( baseObj ) ; return rowsAffected ; }
public static MessageFragment newInstance ( int message_id ) { MessageFragment f = new MessageFragment ( ) ; Bundle args = new Bundle ( ) ; args . putInt ( "message_id" , message_id ) ; f . setArguments ( args ) ; return f ; }
public void openAlbum ( int accountId , int ownerId , int albumId , String action , String title ) { PlaceFactory . getVideoAlbumPlace ( accountId , ownerId , albumId , action , title ) . tryOpenWith ( getActivity ( ) ) ; }
private void processPhoneListenerPermission ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { requestPermissions ( new String [ ] { Manifest . permission . READ_PHONE_STATE } , READ_PHONE_STATE_REQUEST_CODE ) ; } }
private double getAmount ( Record record ) { switch ( record . getType ( ) ) { case Record . TYPE_INCOME : return record . getPrice ( ) ; case Record . TYPE_EXPENSE : return - record . getPrice ( ) ; default : return 0 ; } }
public static int toInt ( Enumerations . Arcana arcana ) { if ( arcana == null ) { return 0 ; } return arcana . ordinal ( ) ; }
public static int getFinishLength ( ) { return get ( FINISH_LENGTH , Constants . Task . FINISH_IN_METERS ) ; }
private void setAdapter ( ArrayList < EventDetails > eventList ) { recyclerView . setLayoutManager ( new LinearLayoutManager ( getActivity ( ) ) ) ; recyclerView . setAdapter ( new EventsAdapter ( eventList , context ) ) ; }
public boolean onDoubleTap ( @ NonNull MotionEvent e ) { return false ; }
public DataSource getDataSource ( ) { return DataSource . LOCAL ; }
public boolean canDeleteMessage ( TLRPC . Chat chat ) { return eventId == 0 && canDeleteMessage ( messageOwner , chat ) ; }
public long getHighScore ( ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return settings . getLong ( HIGH_SCORE , - 1 ) ; }
public ScrollAwareFloatingActionButtonBehavior ( Context context , AttributeSet attrs ) { super ( ) ; }
public static synchronized BitcoinMain get ( ) { return instance ; }
public TestViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { throw new IllegalStateException ( "not implemented" ) ; }
public ItemHolder onCreateViewHolder ( @ NotNull ViewGroup viewGroup , int i ) { View v = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . item_playlists_recycler_view , viewGroup , false ) ; return new ItemHolder ( v ) ; }
public AboutView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void onClick ( View v ) { ExternalAppUtils . openBrowserIntent ( MainFragment . this , ( getString ( R . string . website_va ) ) ) ; }
public long getCategoryId ( ) { return categoryId ; }
public void setFomattedAddress ( String [ ] fomattedAddress ) { this . fomattedAddress = fomattedAddress ; }
public CodecDocument openDocument ( final String fileName , final String password ) { setExternalFonts ( ) ; return new MuPdfDocument ( this , MuPdfDocument . FORMAT_PDF , fileName , password ) ; }
public static boolean cubesSetup ( ) { return setup ; }
public String getIdentifierType ( ) { return identifierType ; }
public int priority ( ) { return 3 ; }
public void onFailure ( Call < LastFmAlbum > call , Throwable t ) { toastLoadingFailed ( ) ; }
public Locale getLocale ( ) { String localeCode = prefs . getString ( PREF_LOCALE , LocalizationUtil . getDefaultLocale ( ) . getLanguage ( ) ) ; return LocalizationUtil . getLocale ( localeCode ) ; }
public void setSize ( String size ) { this . size = size ; }
public boolean hasAttachments ( ) { return ! TextUtils . isEmpty ( attachmentsJson ) ; }
public String getAdr_street ( ) { return this . _adr_street ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser ) { try { PatientDashboardActivity . hideFABs ( true ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
public void onDestroyView ( ) { super . onDestroyView ( ) ; viewModel . getSelectListAdapter ( ) . getProps ( ) . getAudioHelper ( ) . stop ( ) ; binding = null ; }
public void stopListeningToLoggerStatus ( ) { DataLogger . get ( ) . unregisterStatusListener ( dataListener ) ; loggerStatusListener = false ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . Shuffle . Builder getShuffleBuilder ( ) { bitField0_ | = 0x00008000 ; onChanged ( ) ; return getShuffleFieldBuilder ( ) . getBuilder ( ) ; }
public void testTakePhotoPreviewPausedTrash ( ) throws InterruptedException { Log . d ( TAG , "testTakePhotoPreviewPausedTrash" ) ; setToDefault ( ) ; subTestTakePhotoPreviewPausedTrash ( false ) ; }
public int getCount ( ) { return this . fragments . size ( ) ; }
public boolean setModifier ( int mask , boolean value ) { boolean b = hasModifier ( mask ) ; if ( b == value ) return false ; if ( value ) mMetaState | = mask ; else mMetaState &= ~mask ; return true ; }
public Observable < Station > getCurrentStationObs ( ) { return stationsRepository . getCurrentStationObs ( ) . distinctUntilChanged ( ) ; }
public WordViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View layout = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . element_word , parent , false ) ; return new WordViewHolder ( layout ) ; }
public boolean nonPassable ( Char ch ) { return false ; }
public static String format ( int StringFormatId , Object . . . args ) { return String . format ( Locale . ENGLISH , StringsManager . getVar ( StringFormatId ) , args ) ; }
public boolean isUserSignedIn ( ) { return mFirebaseAuth . getCurrentUser ( ) != null ; }
public void removeListener ( ValueAnimator . AnimatorListener listener ) { listeners . remove ( listener ) ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; editTopic ( ) ; }
public void formatsBasic ( ) { assertThat ( formatURL ( "https : }
public int getItemViewType ( int position ) { if ( position == mPostList . posts . size ( ) + ( mHasHeader ? 1 : 0 ) ) return TYPE_FOOTER ; if ( position == 0 && mHasHeader ) return TYPE_HEADER ; return TYPE_ITEM ; }
public CharacterComicDataContainer getEvents ( ) { return mEvents ; }
public MovieAdapter . MovieViewHolder onCreateViewHolder ( ViewGroup viewGroup , int position ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . movie_cards , viewGroup , false ) ; return new MovieViewHolder ( view ) ; }
public void setChecked ( boolean checked ) { checkBox . setOnCheckedChangeListener ( null ) ; checkBox . setChecked ( checked ) ; checkBox . setOnCheckedChangeListener ( onCheckedChangeListener ) ; }
public void onDismiss ( final DialogInterface dialog ) { finish ( ) ; }
public void setDomainStepMode ( XYStepMode domainStepMode ) { domainStepModel . setMode ( domainStepMode ) ; }
private void setLabelColor ( int color ) { mLabelTextView . setTextColor ( color ) ; }
public void run ( ) { loadUrl ( DtubeAPI . DTUBE_UPLOAD_URL ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_5 . getText ( ) . toString ( ) ) ; }
public void afterTextChanged ( Editable editable ) { avatarDrawable . setInfo ( 5 , firstNameField . getText ( ) . toString ( ) , lastNameField . getText ( ) . toString ( ) , false ) ; avatarImage . invalidate ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putBoolean ( SAVE_MP_AND_NOTIF_IS_HIDDEN , mpAndNotifNumberIsHidden ) ; }
public void handleNewPostAction ( PagePostCreationSourcesDetail source ) { if ( ! mSiteStore . hasSite ( ) ) { mBottomNav . setCurrentSelectedPage ( PageType . MY_SITE ) ; return ; } ActivityLauncher . addNewPostForResult ( this , getSelectedSite ( ) , false , source ) ; }
private void uncaughtRxException ( Throwable e ) { Crashlytics . logException ( new UncaughtRxException ( e ) ) ; }
public void doStartPlay ( int contentId , MediaPlayer . OnCompletionListener completionListener ) { if ( this . reflectionManager . getIsPlayingStatus ( ) == false ) { playReflectionIfExists ( contentId , completionListener ) ; } }
private void handOverActivityContext ( ) { rpsGame . start ( this ) ; }
public void onFailure ( Call < FileUploadReponse > call , Throwable t ) { if ( uid == COVER_IMAGE_UID ) { newCoverImageDownloadUrl = null ; } else { newProfileImageDownloadUrl = null ; } hideCoverImageProgress ( ) ; }
public Builder setView ( View view ) { P . mView = view ; P . mViewLayoutResId = 0 ; P . mViewSpacingSpecified = false ; return this ; }
private boolean isWordCharacter ( char c ) { return Character . isLetter ( c ) || c == ' - ' || c == '\'' ; }
public void onClick ( View v ) { ActivityCompat . requestPermissions ( MainMapActivity . this , new String [ ] { Manifest . permission . ACCESS_FINE_LOCATION } , PERMISSIONS_REQUEST_FINE_LOCATION ) ; }
private LogItemListener mItemListener = new LogItemListener ( ) { @ Override public void onLogItemClicked ( HabitatLog clickedLogEntry ) { } @ Override public void onLogDeleteClicked ( HabitatLog clickedLogEntry ) { mActionsListener . deleteLog ( clickedLogEntry ) ; } } ;
public void run ( ) { Toast . makeText ( PastebinEditorActivity . this , "Unable to save pastebin , please try again shortly . " , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onSortSelected ( final PostListingController . Sort order ) { controller . setSort ( order ) ; requestRefresh ( RefreshableFragment . POSTS , false ) ; }
public void onImageCapture ( @ NonNull final byte [ ] imageBytes ) { setMedia ( PersistentBlobProvider . getInstance ( this ) . create ( masterSecret , imageBytes , MediaUtil . IMAGE_JPEG , null ) , MediaType . IMAGE ) ; quickAttachmentDrawer . hide ( false ) ; }
public World ( String saveWorldFileName , String avatarName ) { super ( true , true , saveWorldFileName , 15 , true ) ; initializeWorld ( ) ; }
private void thenBuilderShouldSetCategory ( final HitBuilders . EventBuilder eventBuilder ) { new Verifications ( ) { { eventBuilder . setCategory ( withEqual ( mAnalyticsEvent . name ) ) ; } } ; }
public void openFontDetails ( String fontName ) { Bundle params = new Bundle ( ) ; params . putString ( FirebaseAnalytics . Param . ITEM_NAME , fontName ) ; appTracker . trackEvent ( EventExtendedParamValue . EVENT_FONT_DETAILS . getName ( ) , params ) ; }
public FeedChannel ( String url ) { this . url = url ; }
public void setQuestionId ( Integer questionId ) { this . idIntrebare = questionId ; }
public void onFragmentDestroy ( ) { NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded ) ; super . onFragmentDestroy ( ) ; }
public void testFormatDoodleCaptionRemovesAsterisks ( ) throws Exception { String unFormattedText = "this *text* need *caption*" ; String formattedText = "this text need caption" ; SpannableString actual = nameFormatHelper . formatDoodleCaption ( unFormattedText ) ; assertEquals ( formattedText , actual . toString ( ) ) ; }
public void onFilterCriteriasLoaded ( List < FilterCriteria > criteriaList ) { if ( criteriaList != null ) { mFilterCriteriaOptions = new ArrayList <> ( ) ; mFilterCriteriaOptions . addAll ( criteriaList ) ; initSpinnerAdapter ( ) ; setCurrentFilter ( mFilterListener . onRecallSelection ( ) ) ; } }
public void destroyVideoWindows ( ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . destroyVideoWindows ( ) ; }
public PostCommentListingURL . Sort getSort ( ) { if ( mUrl . pathType ( ) == RedditURLParser . PathType . PostCommentListingURL ) { return mUrl . asPostCommentListURL ( ) . order ; } return null ; }
public boolean getRemoveIdentifyingHeadersEnabled ( ) { return mPrefs . getBoolean ( Name . INVASIVE_HEADERS , false ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . wojciechkrzywiec . wawa_tabor" , appContext . getPackageName ( ) ) ; }
public void notifyChildItemRangeInserted ( int groupPosition , int childPositionStart , int itemCount ) { mAdapter . notifyChildItemRangeInserted ( groupPosition , childPositionStart , itemCount ) ; }
public String process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return obj . getString ( "result" ) ; }
public static Uri getIndexUri ( ) { return new Uri . Builder ( ) . scheme ( "https" ) . authority ( "maptrek . mobi" ) . appendPath ( "maps" ) . appendPath ( "index" ) . build ( ) ; }
public ServiceHandler ( AudioService service ) { mServiceRef = new WeakReference <> ( service ) ; }
public void onFailure ( @ NonNull Call < ResponseBody > call , @ NonNull Throwable t ) { t . printStackTrace ( ) ; setRegistrationStatus ( context , STATUS_FAILED ) ; }
public AlbumImageRunner ( AlbumModel album , int width , int height ) { mAlbum = album ; mWidth = width ; mHeight = height ; }
public Context provideApplicationContext ( ) { return this . mApplication ; }
public void openTopics ( int accoundId , int ownerId , @ Nullable Owner owner ) { PlaceFactory . getTopicsPlace ( accoundId , ownerId ) . withParcelableExtra ( Extra . OWNER , owner ) . tryOpenWith ( getActivity ( ) ) ; }
private void directionLeftDelete ( ) { deleteItemConfirmationDialog ( ) ; }
public void show ( ) { pack ( ) ; addAction ( showAction . get ( ) ) ; DrawContext . scene . add ( this ) ; }
public void removeComment ( Comment comment ) { int index = searchCommentById ( comment . id ) ; if ( index >= 0 ) { mPost . comments . remove ( index ) ; notifyItemRemoved ( index ) ; } }
public void onItemsChanged ( RecyclerView recyclerView ) { currentPosition = Math . min ( Math . max ( 0 , currentPosition ) , recyclerViewProxy . getItemCount ( ) - 1 ) ; dataSetChangeShiftedPosition = true ; }
public TourDownloadAction ( Button button , TourDetailPresenter presenter ) { super ( button ) ; Injector . instance ( ) . inject ( this ) ; this . presenter = presenter ; text = "Download Tour" ; enable = true ; init ( ) ; }
private void updateAdditionalSettings ( ) { SharedPreferences pref = U . getSharedPreferences ( getActivity ( ) ) ; updateAdditionalSettings ( pref . getBoolean ( "desktop_mode" , false ) ) ; }
public void setColorEditTextColor ( int argb ) { this . pickerTextColor = argb ; if ( colorEdit != null ) colorEdit . setTextColor ( argb ) ; }
public void setBoolean ( String key , boolean value ) { pref . edit ( ) . putBoolean ( key , value ) . commit ( ) ; }
public @ Nullable Card undo ( ) { Undoable lastUndo = mUndo . removeLast ( ) ; Timber . d ( "undo ( ) of type %s" , lastUndo . getClass ( ) ) ; return lastUndo . undo ( this ) ; }
public ArrayList < String > actions ( Hero hero ) { ArrayList < String > actions = super . actions ( hero ) ; if ( level > 0 ) { actions . add ( AC_DISENCHANT ) ; } return actions ; }
public void goToSearch ( int accountId ) { DialogsSearchCriteria criteria = new DialogsSearchCriteria ( "" ) ; PlaceFactory . getSingleTabSearchPlace ( accountId , SearchContentType . DIALOGS , criteria ) . tryOpenWith ( getActivity ( ) ) ; }
public void removeConvertCurrency ( String code ) { Set < String > convertCurrencies = getConvertCurrencies ( ) ; convertCurrencies . remove ( code ) ; setConvertCurrencies ( convertCurrencies ) ; }
public void setLastSuccessful ( Timestamp lastSuccessful ) { this . lastSuccessful = lastSuccessful ; }
public static void setDefaultDPI ( ) { setDPITarget ( jLatexMath . getContext ( ) . getResources ( ) . getDisplayMetrics ( ) . xdpi ) ; }
public void onProgressChanged ( DiscreteSeekBar seekBar , int value , boolean fromUser ) { fadingTextView . setTimeout ( value , SECONDS ) ; fadingTextView . forceRefresh ( ) ; }
private Intent getExperienceUpgradeIntent ( ) { return getRoutedIntent ( ExperienceUpgradeActivity . class , getIntent ( ) , null ) ; }
public Loader < List < Object >> onCreateLoader ( int id , Bundle args ) { return new AsyncSearchResultLoader ( this ) ; }
public boolean isChangeScheduleButtonVisible ( ) { return isShowingScheduleOfGroup ; }
public long copyFile ( String source , OutputStream target ) throws IOException { return Files . copy ( Paths . get ( source ) , target ) ; }
public void update ( int dx , int dy , int duration , Interpolator interpolator ) { mDx = dx ; mDy = dy ; mDuration = duration ; mInterpolator = interpolator ; changed = true ; }
public void onDrawerClosed ( View drawerView ) { if ( fragmentClass != null ) { try { instanceFragment = ( Fragment ) fragmentClass . newInstance ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } replaceFragment ( ) ; } }
private boolean isInHardwareKeystore ( ) throws KeyChainException , InterruptedException { String algorithm = KeyChain . getPrivateKey ( getActivity ( ) , mProfile . mAlias ) . getAlgorithm ( ) ; return KeyChain . isBoundKeyAlgorithm ( algorithm ) ; }
private void thenDelegateShouldPostCreate ( ) { new Verifications ( ) { { mAppCompatDelegate . onPostCreate ( withAny ( new Bundle ( ) ) ) ; } } ; }
public void notifyGroupItemChanged ( int groupPosition , Object payload ) { mAdapter . notifyGroupItemChanged ( groupPosition , payload ) ; }
public static DebugOverlayTree getInstance ( ) { if ( INSTANCE . overlayView == null ) { throw new IllegalStateException ( "DebugOverlayTree is not initialized . Please call init ( Context ) . " ) ; } return INSTANCE ; }
public CreationData ( String key , long timestamp ) { this . key = key ; this . timestamp = timestamp ; }
private void addCoins ( ) { closeDrawer ( ) ; if ( mCallbacks != null ) { mCallbacks . onAddCoinsSelected ( ) ; } }
public String tileDesc ( ) { return Game . getVar ( R . string . ToxicGas_Info ) ; }
public ThemeManager getInstance ( ) { if ( instance == null ) { instance = new ThemeManager ( ) ; } return instance ; }
public void onResult ( List < DictionarySearchResultItem > results ) { adapter . swapItems ( results ) ; showSwitchSearchSnackbar ( ) ; }
public void onCreate ( ) { super . onCreate ( ) ; initializeInjector ( ) ; }
public boolean onQueryTextChange ( String newText ) { fabBtn . hide ( ) ; cleanList ( ) ; loadListWithTags ( newText ) ; return false ; }
public static void informFolderDeleted ( Context c , File parentFile ) { List < String > paths = new ArrayList < String > ( ) ; getPathsOfFolder ( paths , parentFile ) ; informPathsDeleted ( c , paths ) ; }
public void setImageMatrix ( Matrix matrix ) { transformMatrix . set ( matrix ) ; setMinWidth ( bounds , new Matrix ( ) ) ; fitMatrix ( transformMatrix , getDrawableRect ( ) , bounds ) ; super . setImageMatrix ( transformMatrix ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_target_select , menu ) ; return true ; }
public BadgeStyle withTextColor ( int textColor ) { this . mTextColor = ColorHolder . fromColor ( textColor ) ; return this ; }
public void enqueue ( Callback < T > callback ) { callback . onFailure ( this , throwable ) ; }
public void onSupportActionModeFinished ( ActionMode mode ) { supportActionMode = null ; super . onSupportActionModeFinished ( mode ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . getMenuInflater ( ) . inflate ( R . menu . action_run_calculation_save , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public com . google . protobuf . Any . Builder getMisbehaviourBuilder ( ) { onChanged ( ) ; return getMisbehaviourFieldBuilder ( ) . getBuilder ( ) ; }
public static boolean isURLAlive ( String URLName ) { if ( isURLAlive ( URLName , 1000 , 1000 ) ) { return true ; } if ( isURLAlive ( URLName , 10000 , 5000 ) ) { return true ; } return false ; }
public static IStores provideStores ( ) { return AppStores . getInstance ( App . getInstance ( ) ) ; }
public static List < String > getFoodVideosLink ( final String foodName ) { return foodVideos . containsKey ( foodName ) ? foodVideos . get ( foodName ) : new ArrayList < String > ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { images . remove ( position ) ; notifyDataSetChanged ( ) ; }
private void putEnumInt ( String key , int value ) { putString ( key , String . valueOf ( value ) ) ; }
public void setUserInfo ( @ NonNull UserInfo userInfo ) { sharedPreferences . edit ( ) . putString ( USER_INFO , gson . toJson ( userInfo ) ) . apply ( ) ; this . cachedUserInfo = userInfo ; }
public ScheduleBuilder times ( String times ) { this . times = times ; return this ; }
public void onBindViewHolder ( @ NonNull Holder holder , int position ) { PingItem item = mItems . get ( position ) ; holder . update ( item , item == null ? mOnPlaceholderClick : null ) ; }
public void run ( ) { openVideoEditor ( startVideoEdit , false ) ; startVideoEdit = null ; }
private void shutdown ( ) { mediaPlayer . stop ( ) ; mediaPlayer . release ( ) ; }
public void didFinishEdit ( Bitmap bitmap , Bundle args ) { processBitmap ( bitmap ) ; }
public void onDestroyActionMode ( ActionMode mode ) { ( ( ChatFragment ) getParentFragment ( ) ) . setTabsHidden ( false ) ; mAdapter . clearSelection ( mRecyclerView ) ; mActionMode = null ; }
public int getAvatarPlaceholder ( ) { return R . drawable . user_placeholder ; }
public void onSuccess ( ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Playing next song in tracklist" ) ; isTracklistEmpty = false ; }
public void highlightValue ( Highlight highlight ) { highlightValue ( highlight ) ; }
public void setId ( int id ) { Id = id ; }
private boolean isVcl ( H265NalUnitHeader nalUnitHeader ) { return nalUnitHeader . nalUnitType >= 0 && nalUnitHeader . nalUnitType <= 31 ; }
public String getBookCoverPageUrl ( ) { return FirebaseConfig . STORAGE_PREFIX + bookCoverPageUrl ; }
public void onClick ( View v ) { if ( current != 3 ) mPager . setCurrentItem ( 3 ) ; }
private void displayError ( String message ) { showProgressBar ( false ) ; recyclerView . setVisibility ( View . VISIBLE ) ; toastMessage ( message ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { Conversation . deleteAll ( ConversationsActivity . this , dialog . isPromptCheckBoxChecked ( ) ) ; MessagingNotification . updateMessagesNotification ( getApplicationContext ( ) , false ) ; }
public static int dpToPx ( Context context , int dp ) { float scale = context . getResources ( ) . getDisplayMetrics ( ) . density ; return ( int ) ( ( dp * scale ) + 0 . 5f ) ; }
public TagCreatedEvent ( Tag tag ) { this . tag = tag ; }
public PlaybackParameters getPlaybackParameters ( ) { return player . getPlaybackParameters ( ) ; }
public String getSelection ( ) { if ( mSelection != null ) { return mSelection . toString ( ) ; } else { return null ; } }
private void checkFirst ( ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ; if ( prefs . getBoolean ( "first" , true ) ) new FragmentFirst ( ) . show ( getSupportFragmentManager ( ) , "first" ) ; }
public void onClick ( View view ) { launchCustomTabsWithReferrer ( url ) ; }
private boolean isPasswordValid ( String password ) { return password . length ( ) > 4 ; }
public String getFingerprint ( ) { return PGP . getFingerprint ( mPair . signKey . getPublicKey ( ) ) ; }
public void initializeIngredients ( ) { initializeTable ( "ingredients . txt" , IngredientContract . columnName , IngredientContract . getTableName ( ) ) ; }
private void givenLatLonLocation ( ) { mLat = 1d ; mLon = 1d ; }
private void assertBatchUpdateCalled ( int timesInvocations ) throws IOException { verify ( sheetsService , times ( timesInvocations ) ) . batchUpdate ( anyString ( ) , ArgumentMatchers . < Request > anyList ( ) ) ; }
public String getDisplayPreferenceValue ( String preferenceKey , String s ) { return sInternalUserDBHelper . getDisplayPreferenceValue ( preferenceKey , s , bookId ) ; }
public LazyList < RssItem > getAllItemsWithIdHigher ( long id ) { return daoSession . getRssItemDao ( ) . queryBuilder ( ) . where ( RssItemDao . Properties . Id . ge ( id ) ) . listLazyUncached ( ) ; }
public CharSequence getHumidity ( ) { return TextUtils . concat ( String . valueOf ( this . humidity ) , PERCENT ) ; }
private void prepareTimer ( ) { try { segmentTimer . cancel ( ) ; violationTimer . cancel ( ) ; } catch ( IllegalStateException e ) { } }
private RecyclerView . LayoutManager lLM ( ) { return new LinearLayoutManager ( getContext ( ) , LinearLayoutManager . HORIZONTAL , false ) ; }
private void displayPermissionWarning ( boolean pFlag ) { if ( pFlag ) { permissionWarning . setVisibility ( View . VISIBLE ) ; } else { permissionWarning . setVisibility ( View . GONE ) ; } }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; activity = ( AppCompatActivity ) context ; }
public boolean isForegroundTab ( ) { return isForegroundTab ; }
private void showAppUpdateActivityScreen ( ) { TransitionUtil . showNextActivityWithMap ( MainActivity . this , AppUpdateActivity . class , null , R . anim . entering_screen_sliding_up , R . anim . exiting_screen_sliding_down , false ) ; }
public String getText ( ) { return StringUtils . notNullStr ( text ) ; }
private Distance . Unit getDistanceUnit ( ) { return preferencesRepository . getDistanceUnit ( ) ; }
public void onComplete ( ) { view . makeUploadRequest ( ) ; repository . cleanup ( ) ; view . finish ( ) ; compositeDisposable . clear ( ) ; }
public DataComponent getDataComponent ( ) { if ( dataComponent == null ) { dataComponent = DaggerDataComponent . create ( ) ; } return dataComponent ; }
private static String makeExpString ( int exp ) { return KcaUtils . format ( "next : %d" , exp ) ; }
public void setMicrophoneEnabled ( boolean enabled ) { audioMuteButton . setChecked ( ! enabled ) ; }
public void run ( ) { doOnDetailsLoaded ( details ) ; }
public void die ( NamedEntityKind cause ) { Badges . validateBossSlain ( Badges . Badge . SPIDER_QUEEN_SLAIN ) ; super . die ( cause ) ; }
public void goToAlbumEditing ( int accountId , @ NonNull PhotoAlbum album , @ NonNull PhotoAlbumEditor editor ) { PlaceFactory . getEditPhotoAlbumPlace ( accountId , album , editor ) . targetTo ( this , REQUEST_EDIT_ALBUM ) . tryOpenWith ( getActivity ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; userAccess = appPref . getUserAccessOcariot ( ) ; loadDataOcariot ( ) ; }
private void initializePanes ( Pane panesContainer ) throws IOException { Region sendPane = regionLoader . load ( sendPaneResource ) ; Region receivePane = regionLoader . load ( receivePaneResource ) ; panesContainer . getChildren ( ) . addAll ( sendPane , receivePane ) ; }
public void onCollision ( ) { if ( mRacer . getVehicle ( ) . getSpeed ( ) > MIN_IMPACT_SPEED ) { mJustCollided = true ; } }
public void showSaveSuccessMessage ( ) { Toast . makeText ( getContext ( ) , R . string . medical_attention_save_realm_success , Toast . LENGTH_LONG ) . show ( ) ; getActivity ( ) . onBackPressed ( ) ; }
private int getHolderViewType ( Class < ? extends CommonHolder < ? extends ViewTypeItem >> holderClass ) { return holderClass . hashCode ( ) ; }
public boolean isBreak ( ) { return isSameType ( Type . BREAK ) ; }
public void setChecked ( final boolean isChecked ) { this . isChecked = isChecked ; refreshDrawableState ( ) ; title . setChecked ( isChecked ) ; description . setChecked ( isChecked ) ; }
public void setStackedSelector ( Drawable d ) { stackedBackground = d ; if ( stacked ) setStacked ( true , true ) ; }
public void getNews ( ) { HttpGet ( NEWS_RSS_URL , "application/rss + xml" , null ) ; }
public EventListData ( ) { }
public void shouldNotInteractIfPermissionCheckerIsNull ( ) { givenPermissionResultParameters ( ) ; whenRequestingPermissionResult ( ) ; thenShouldNotInteractWith ( mPermissionChecker ) ; }
private void initConversationPrefs ( ) { binding . conversationPrefs . setOnClickListener ( view -> changeLivePrefs ( ) ) ; binding . conversationPrefs . setChecked ( mPrefs . isLiveEnabled ( ) ) ; }
public void onItem ( @ Nullable List < HistoryItem > item ) { mSuggestionsAdapter . combineResults ( item , null , null ) ; }
public void onServiceDisconnected ( ComponentName componentName ) { mSensorService = null ; }
public void testSafeToAddAuthToken6 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( notWpcomAddress1 ) ) ; }
public void enableJetpackMonitorEmailNotifications ( boolean emailNotifications ) { mSettings . emailNotifications = emailNotifications ; }
public int getCount ( ) { return _labels . size ( ) ; }
public static boolean isSmsDeliveryReportsEnabled ( Context context ) { return getBooleanPreference ( context , SMS_DELIVERY_REPORT_PREF , true ) ; }
public Authenticator ( Context context ) { super ( context ) ; mContext = context ; }
public void onEvent ( CommandEvents . LogOnce logOnce ) { LogOnce ( ) ; }
public static Artist getInfo ( String artistOrMbid , String username , String apiKey ) { return getInfo ( artistOrMbid , null , username , apiKey ) ; }
private void fetchFollowersList ( String startFrom ) { isThisInitialFetch = ( startFrom == null ) ; followersApi . requestFollowers ( username , startFrom ) ; }
public CircleImageView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public void onLogInfo ( String message ) throws RemoteException { mMessageLog . add ( new IChatMessage . InfoMessage ( IChatMessage . InfoMessage . Type . INFO , message ) ) ; }
public void clearCache ( ) { if ( BuildConfig . DEBUG ) { Log . d ( Constants . LOG_TAG , "disk cache CLEARED" ) ; } try { mDiskCache . delete ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public void getThemeBLACKTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . BLACK_INDEX ) ; assertEquals ( AppTheme . BLACK , apptheme ) ; }
public SeekParameters getSeekParameters ( ) { return player . getSeekParameters ( ) ; }
private BroadcastReceiver receiver1 = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { progressHandler . setCancelled ( true ) ; } } ;
public void sendLocalBroadcastWithStringExtra ( String action , String extra , CharSequence value ) { Intent intent = new Intent ( action ) ; intent . putExtra ( extra , value ) ; LocalBroadcastManager . getInstance ( _context ) . sendBroadcast ( intent ) ; }
public void equalsContract ( ) { EqualsVerifier . forClass ( Forecast . class ) . suppress ( Warning . NONFINAL_FIELDS , Warning . NULL_FIELDS ) . verify ( ) ; }
public String status ( Char me ) { return Utils . format ( Game . getVar ( R . string . Mob_StaAmokStatus ) , me . getName ( ) ) ; }
public static CommandResult execCommand ( List < String > commands , boolean isRoot , boolean isNeedResultMsg ) { return execCommand ( commands == null ? null : commands . toArray ( new String [ ] { } ) , isRoot , isNeedResultMsg ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitTerminalExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
public CircleImageView ( Context context ) { super ( context ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_8 . getText ( ) . toString ( ) ) ; }
public void onSuccess ( ) { Toast . makeText ( context , context . getString ( R . string . question_confirmation_message ) , Toast . LENGTH_SHORT ) . show ( ) ; Log . d ( QuestionsDetailsFragment . class . getName ( ) , "Sending new answers" ) ; }
private void actionMove ( ) { List < File > selectedItems = recyclerAdapter . getSelectedItems ( ) ; recyclerAdapter . clearSelection ( ) ; transferFiles ( selectedItems , true ) ; }
public Builder clearInputDirection ( ) { bitField0_ = ( bitField0_ & ~0x00000010 ) ; inputDirection_ = 0 ; onChanged ( ) ; return this ; }
private void loadWordSearch ( String word ) { if ( ! vocabularyList . isEmpty ( ) ) vocabularyList . clear ( ) ; vocabularyList . addAll ( vocabularyDao . searchWords ( word ) ) ; vocabularyAdapter . notifyDataSetChanged ( ) ; }
public long getItemId ( int position ) { return users . get ( position ) . id ; }
public Fragment getItem ( int i ) { switch ( i ) { case 0 : return new MoreActivity ( ) ; case 1 : return new QRCaptureActivity ( ) ; } return null ; }
public void addItem ( String titleSection , int idIcon , String description , double result ) { mData . add ( new ResultItem ( titleSection , idIcon , description , result ) ) ; notifyDataSetChanged ( ) ; }
public final int getCellSpanH ( ) { return this . _cellSpanH ; }
public DeckPreferenceHack ( ) { this . cacheValues ( ) ; }
public Builder includeConfirmationStep ( boolean includeConfirmationStep ) { style . includeConfirmationStep = includeConfirmationStep ; return this ; }
public static LottieResult < LottieComposition > fromJsonStringSync ( String json , @ Nullable String cacheKey ) { ByteArrayInputStream stream = new ByteArrayInputStream ( json . getBytes ( ) ) ; return fromJsonReaderSync ( of ( buffer ( source ( stream ) ) ) , cacheKey ) ; }
private String getKey ( int resId ) { return context . getString ( resId ) + widgetId ; }
private Integer getTrainingPhaseFromIntent ( ) { Intent i = getIntent ( ) ; Integer trainingPhase = i . getIntExtra ( ExerciseBrowserIntent . EXTRA_TRAINING_PHASE , - 1 ) ; return trainingPhase != null && trainingPhase >= 0 ? trainingPhase : null ; }
public int getCount ( ) { return locations . size ( ) ; }
public synchronized static ChannelsDataSource getInstance ( ) { if ( instance == null ) instance = new ChannelsDataSource ( ) ; return instance ; }
private void thenScreenNotEmpty ( ) { assertNotNull ( mScreen ) ; }
public ModelType . MODELS getModelType ( ) { return ModelType . MODELS . values ( ) [ modelEnum ] ; }
public void onLoadFailed ( Exception e , Drawable errorDrawable ) { super . onLoadFailed ( e , errorDrawable ) ; onColorReady ( getDefaultBarColor ( ) ) ; }
public void onItemClicked ( int position , View view ) { startActivity ( new Intent ( mContext , CreatePlaceActivity . class ) . putExtra ( Constants . INTENT_ID , mAdapter . getItem ( position ) . getKey ( ) ) ) ; }
public void playAnimation ( ) { if ( isAnimationLoading ) { playAnimationWhenCompositionSet = true ; return ; } rootLayer . playAnimation ( ) ; }
public void setCentralMap ( CentralMap centralMap ) { mCentralMap = centralMap ; }
public static ApiKeyInterceptor create ( ) { return new ApiKeyInterceptor ( ) ; }
public boolean isDeveloperOptionMoveCardsEverywhereEnabled ( ) { return isDeveloperOptionLockEnabled ( ) && savedSharedData . getBoolean ( PREF_KEY_DEVELOPER_OPTION_MOVE_CARDS_EVERYWHERE , DEFAULT_DEVELOPER_OPTION_MOVE_CARDS_EVERYWHERE ) ; }
public static boolean canGoBack ( Context context , HybridFile currentFile ) { switch ( currentFile . getMode ( ) ) { case DROPBOX : case BOX : case GDRIVE : case ONEDRIVE : case OTG : return true ; default : return true ; } }
public void write ( DataOutputStream dataOutputStream ) throws Exception { area . writeNetworking ( dataOutputStream ) ; }
public static void showEmailFailureNotification ( Context context ) { showNotification ( context , NOTIFICATION_ID_FAILED_EMAIL , R . string . warning_notification_ticker_email_failed , R . string . warning_notification_message_email_failed , EmailPreferencesActivity . class ) ; }
public boolean isSmaller_1_2 ( ) { return ( mCurrentTranslate - minPosition ) * 2 < ( getMaxPosition ( ) - minPosition ) ; }
public String getArrival_Date ( ) { return arrival_Date ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( KEY_SELTRACKTYPE , selectedTrackType ) ; outState . putInt ( KEY_TITLE , _title ) ; outState . putBoolean ( KEY_ISFINALIZATION , _isAFinalization ) ; }
public void setTitle ( String title ) { this . mTitle = ( title == null ) ? "" : title ; }
public void onClick ( View v ) { DialogHelper . showAddLessonDialog ( getFragmentManager ( ) , mAdmissionPercentageMetaId ) ; }
public Map < Integer , float [ ] [ ] [ ] > getStripImageMap ( ) { return this . stripImageMap ; }
public void onRefresh ( ) { setContentShown ( false ) ; mAdapter . clear ( ) ; forceLoaderReload ( 0 ) ; super . onRefresh ( ) ; }
public void onGoToFragment ( TransitionType transitionType , int direction ) { mViewPager . setCurrentItem ( mViewPager . getCurrentItem ( ) + direction ) ; }
public static int getInt ( Context context , String keyId , int defaultValue ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return sharedPreferences . getInt ( keyId , defaultValue ) ; }
public NotificationMessage getNotificationMessage ( ) { return notificationMessage ; }
public EventsRecyclerViewAdapter ( Context context , ArrayList < Events > eventsList ) { this . mContext = context ; this . mEventsList = eventsList ; }
public FavoriteConfig ( Context context ) { this . context = context ; }
public void onClick ( View v ) { duracao = 60 ; dialog . dismiss ( ) ; mostrarDialogTimer ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { user . userSettings . limit = AddWalletEntryActivity . convertAmountStringToLong ( editText . getText ( ) . toString ( ) ) ; saveUser ( user ) ; }
public void onDialogNegativeClick ( DialogFragment dialog ) { ToggleButton toggle = ( ToggleButton ) findViewById ( R . id . connectionToggle ) ; toggle . setChecked ( false ) ; }
public Message ( Conversation conversation , String body , int encryption ) { this ( conversation , body , encryption , STATUS_UNSEND ) ; }
public final int getCellHeight ( ) { return this . _cellHeight ; }
public void onStop ( ) { super . onStop ( ) ; mGoogleApiClient . disconnect ( ) ; }
public String getFocusMode ( ) { return mFocusMode ; }
public int getType ( ) { return R . id . material_drawer_icon_only_item ; }
public static int darkenColor ( int color ) { float [ ] hsv = new float [ 3 ] ; Color . colorToHSV ( color , hsv ) ; hsv [ 2 ] * = 0 . 9f ; return Color . HSVToColor ( hsv ) ; }
public void onActionClick ( String text ) { try { File directory = FileUtils . createDirectory ( currentDirectory , text ) ; recyclerAdapter . clearSelection ( ) ; recyclerAdapter . add ( directory ) ; } catch ( Exception e ) { showMessage ( e ) ; } }
public void onTaggedQuestionSelected ( List < TagItems > items ) { }
public OddPosItemViewHolder ( View itemView ) { super ( itemView ) ; textView = ( TextView ) itemView . findViewById ( android . R . id . text1 ) ; }
public void onClick ( DialogInterface dialog , int which ) { finishGame ( true , false ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; player . onDestroy ( ) ; waitingThread . interrupt ( ) ; waitingThread = null ; }
public static void restartNotificationThread ( ) { if ( notificationThread != null ) { notificationThread . interrupt ( ) ; NotificationController . getInstance ( ) . clearNotification ( ) ; } notificationThread = new NotificationThread ( ) ; notificationThread . start ( ) ; }
static synchronized public void stim ( ) { try { sound . pause ( ) ; sound . flush ( ) ; sound . reloadStaticData ( ) ; sound . play ( ) ; } catch ( IllegalStateException e ) { } }
public void onTouchEvent ( RecyclerView rv , MotionEvent e ) { RecyclerViewDragDropManager . this . onTouchEvent ( rv , e ) ; }
public void onClick ( View v ) { gameSingleton . getCurrent_game ( ) . addHist_jeu ( " --- \nLe personnage " + role . getNom ( ) + " est paralysé . \n\n" ) ; display_next_role ( ) ; }
private void enableWiFi ( FakeSystemFacade systemFacade ) { systemFacade . activeNetworkType = ConnectivityManager . TYPE_WIFI ; systemFacade . isMetered = false ; }
private void downloadPlaces ( ) { showTaskInProgress ( ) ; TravelerIoFacade ioFacade = new TravelerIoFacadeImpl ( getActivity ( ) ) ; ioFacade . getPlaces ( placeType , nextPageToken ) ; }
public int getTheme ( ) { return R . style . BottomSheetDialogTheme ; }
public void onAnimationEnd ( Animation animation ) { PointF pointAtStack = stack . getPosition ( offset ) ; card . view . setX ( pointAtStack . x ) ; card . view . setY ( pointAtStack . y ) ; hideCard ( card ) ; }
public int getGroupId ( ) { return groupId ; }
public void setImage ( String mImage ) { this . mImage = mImage ; }
public ChannelsList ( ) { channels = new SparseArray <> ( 100 ) ; }
public void whenManualUpdatesEnabled_getBlankFormsIsAvailable ( ) { rule . mainMenu ( ) . enableManualUpdates ( ) . assertText ( R . string . get_forms ) ; }
public void hideNoteView ( ) { ViewUtils . hideReveal ( binding . quickNoteContainer ) ; binding . quickNoteView . removeAllViewsInLayout ( ) ; if ( mCallback != null ) mCallback . onClose ( ) ; }
public void setReleaseDate ( Date releaseDate ) { this . releaseDate = releaseDate ; }
public void onViewDetachedFromWindow ( VH holder ) { }
public Maybe < T > edit ( T entity ) { return remoteRepository . edit ( entity ) . doOnSuccess ( result -> localRepository . edit ( entity ) . subscribe ( ) ) ; }
public TextLabelWidget ( LayoutManager layoutManager , Size size , TextOrientation orientation ) { super ( layoutManager , new Size ( 0 , SizeLayout . ABSOLUTE , 0 , SizeLayout . ABSOLUTE ) ) ; setSize ( size ) ; this . orientation = orientation ; }
public void run ( ) { AdsUtils . getInstance ( ) . showAds ( ) ; }
public void onStart ( ) { super . onStart ( ) ; appBarLayout . addOnOffsetChangedListener ( this ) ; scrollToTop ( ) ; hideAppBar ( ) ; appBarLayout . offsetTopAndBottom ( appBarOffset ) ; }
private int getState ( ) { return state ; }
public boolean isSuccess ( ) { return status . equals ( "success" ) ; }
private View . OnClickListener mToggleAnswerHandler = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { if ( mShowingAnswer ) { displayCardQuestion ( ) ; } else { displayCardAnswer ( ) ; } } } ;
public List < ArticleSummary > apply ( CnBetaApi . Result < List < ArticleSummary >> listResult ) { if ( ! listResult . isSuccess ( ) ) { throw new RequestFailedException ( ) ; } return listResult . result ; }
public void onClick ( View v ) { zoomIn ( ) ; }
public void onDestroy ( ) { AppLog . i ( AppLog . T . NOTIFS , "notifications action processing service > destroyed" ) ; mDispatcher . unregister ( this ) ; super . onDestroy ( ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . recordProgressChanged , System . currentTimeMillis ( ) - recordStartTime , amplitude ) ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseSongFileChunk prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void addChild ( Comment comment ) { addChild ( comment , 0 ) ; }
public void getSyncError_isNullAtFirst ( ) { SyncStatusAppState syncStatusAppState = new SyncStatusAppState ( context ) ; assertThat ( syncStatusAppState . getSyncError ( ) . getValue ( ) , is ( nullValue ( ) ) ) ; }
public void onResume ( ) { super . onResume ( ) ; Reporting . getTracker ( getContext ( ) ) . log ( new MenuEvent ( getContext ( ) , data ) ) ; }
private void showFilter ( ) { filterPanel . setVisibility ( View . VISIBLE ) ; form . getView ( App . KEY_QUERY_INPUT ) . requestFocus ( ) ; }
public boolean canDismissWithTouchOutside ( ) { return true ; }
public boolean isUrban ( ) { return esteZonaUrbana ; }
public ProfileDrawerItem withTextColor ( int textColor ) { this . textColor = ColorHolder . fromColor ( textColor ) ; return this ; }
public void resumeNetworkMaybe ( ) { native_resumeNetwork ( true ) ; }
public void setOnServiceClickListener ( OnServiceConnectionClickListener listener ) { mServiceClickListener = listener ; }
public static boolean analyticsEnabled ( ) { return ! INSTRUMENTED_TEST_RUNNING && ! BuildConfig . DEBUG ; }
public void openSearch ( ) { if ( searchContainer == null || searchContainer . getVisibility ( ) == VISIBLE || parentMenu == null ) { return ; } parentMenu . parentActionBar . onSearchFieldVisibilityChanged ( toggleSearch ( ) ) ; }
public String toString ( ) { return program == null ? categoryName : program . toString ( ) ; }
public ModelLoader < DecryptableUri , InputStream > build ( MultiModelLoaderFactory multiFactory ) { return new DecryptableStreamUriLoader ( context ) ; }
public String getDisplayName ( File file ) { String name = MbtilesFile . getName ( file ) ; return name != null ? name : file . getName ( ) ; }
public OstRecoveryManager ( String userId ) { this . userId = userId ; apiClient = new OstApiClient ( userId ) ; }
public MethodHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new MethodHolder ( parent , R . layout . item_method_card ) ; }
public void onConsoleMessageEvent ( ConsoleMessageEvent event ) { consoleLogger . setMessages ( event . getMessage ( ) ) ; }
public List < String > getPartOfSpeech ( ) { return mPartOfSpeech ; }
public EstadoGuerrero getEstado ( ) { return estado ; }
private void showSwipeRefreshLayout ( ) { mErrorTextView . setText ( "" ) ; showProgressDialog ( ) ; }
public void setSrc ( String src ) { this . src = src ; }
public void onFocusChange ( View v , boolean hasFocus ) { if ( ! hasFocus ) { Prefs . putString ( Constants . PREF_WATCHFACE_SEND_WEATHER_DATA_CITY , watchface_weather_city_input . getText ( ) . toString ( ) ) ; } }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getPgeBillDao ( ) : null ; }
public String getTagsString ( ) { return ( isCrypted && isDecrypted ) ? decryptedTagsString : tagsString ; }
private void writeNewUser ( String userId , String username , String email , String name ) { User user = new User ( username , email , name ) ; mDatabase . child ( "users" ) . child ( userId ) . setValue ( user ) ; }
public java . util . List < com . coinomi . core . protos . Protos . PeerAddress > getBroadcastByList ( ) { return broadcastBy_ ; }
public void setSecondaryProgressTintMode ( @ Nullable PorterDuff . Mode tintMode ) { logProgressBarTintWarning ( ) ; super . setSecondaryProgressTintMode ( tintMode ) ; }
public void userInputRequried ( PendingIntent pi , Account account ) { try { startIntentSenderForResult ( pi . getIntentSender ( ) , REQUEST_ANNOUNCE_PGP , null , 0 , 0 , 0 ) ; } catch ( final SendIntentException ignored ) { } }
public String getString ( Context context ) { return context . getString ( res ) ; }
public boolean onTouchEvent ( MotionEvent event ) { return this . isSwipeEnabled && super . onTouchEvent ( event ) ; }
private void setFetching ( ) { mSaveButton . setText ( getString ( R . string . fetching_keys ) ) ; }
public void onServiceDisconnected ( ComponentName arg0 ) { mRemoteLogger . i ( mActivity . getClass ( ) . getSimpleName ( ) + " disconnected from " + SERVICE . getSimpleName ( ) ) ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { mode . getMenuInflater ( ) . inflate ( R . menu . contextual_toolbar , menu ) ; return true ; }
public void render ( ShapeRenderer sr ) { }
public void stop ( ) { if ( logging ) { Log . e ( TAG , "TrackLogger . stop ( ) called , but still logging" ) ; } }
private GitTransportSetter transportSetter ( ) { return GitRepo . getTransportSetter ( preferences ) ; }
public void onClick ( View view ) { if ( mOnCommentActionClickListener != null ) { mOnCommentActionClickListener . onPostClicked ( v ) ; } }
public boolean onSurfaceTextureDestroyed ( SurfaceTexture surfaceTexture ) { if ( cameraSession != null ) { CameraController . getInstance ( ) . close ( cameraSession , null ) ; } return false ; }
public void onProgressUpdate ( BaseFileParcelable . . . val ) { if ( ! isCancelled ( ) && mCallbacks != null ) { mCallbacks . onProgressUpdate ( val [ 0 ] , mInput ) ; } }
public AboutBuilder addGoogleGamesLink ( String url ) { return addLink ( R . mipmap . google_play_games , R . string . google_play_games , url ) ; }
public static MoviesLocalDataSource provideMoviesLocalDataSource ( Context context ) { MoviesDatabase database = MoviesDatabase . getInstance ( context . getApplicationContext ( ) ) ; return MoviesLocalDataSource . getInstance ( database . moviesDao ( ) ) ; }
public static ArrayList < Genre > getGenreForArtist ( Context context , @ NonNull long artistID ) { Cursor cursor = GenreLoader . doSomething ( context , artistID ) ; return GenreLoader . getGenresFromCursor ( context , cursor ) ; }
public void addButtons ( ) { rockButton = new RockButton ( game ) ; scissorsButton = new ScissorsButton ( game ) ; scissorsButton = new ScissorsButton ( game ) ; paperButton = new PaperButton ( game ) ; resultsActor = new ResultsActor ( ) ; }
public CharArrSubstring substring ( int start , int len ) { return new CharArrSubstring ( arr , this . start + start , len ) ; }
public void setUp ( ) throws Exception { System . setProperty ( "dexmaker . dexcache" , getInstrumentation ( ) . getTargetContext ( ) . getCacheDir ( ) . getPath ( ) ) ; }
public void setClickListener ( RecyclerViewGenreAdapter . ItemClickListener itemClickListener ) { this . clickListener = itemClickListener ; }
public void start ( ) throws IOException { if ( mIncomingServer == null ) { mIncomingServer = new CommandServer ( this ) ; mIncomingServer . start ( ) ; mIncomingServer . setName ( "CommandServer for " + mRemoteHost + " : " + mRemotePort ) ; } }
private String getMarkerWithPhotoSnippet ( String lastSnippet ) { return lastSnippet + "\n" + pressToSeeThePhotoString ; }
public static void animateTopBar ( View view , boolean show ) { animateBar ( view , show , true ) ; }
public Matcher < View > getConstraints ( ) { return allOf ( withEffectiveVisibility ( ViewMatchers . Visibility . VISIBLE ) , isDescendantOfA ( anyOf ( isAssignableFrom ( ScrollView . class ) , isAssignableFrom ( HorizontalScrollView . class ) , isAssignableFrom ( NestedScrollView . class ) ) ) ) ; }
public int getItemCount ( ) { if ( trailerArrayList == null ) return 0 ; return trailerArrayList . size ( ) ; }
public void onFailure ( @ NonNull retrofit2 . Call < ResponseBody > call , @ NonNull Throwable t ) { mRemoteLogger . w ( "Failed sending response to middleware" ) ; mSipService . stopSelf ( ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . didReceivedNewMessages ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . messagesDeleted ) ; }
public void onBindGroupViewHolder ( GVH holder , int groupPosition , int viewType , List < Object > payloads ) { onBindGroupViewHolder ( holder , groupPosition , viewType ) ; }
public void onDonePressed ( Fragment currentFragment ) { Configuration . setLastSeenIntroduction ( mLastSeenIntroduction ) ; finish ( ) ; }
public void detachView ( ) { if ( mLoadContactRowsSubscription != null ) mLoadContactRowsSubscription . unsubscribe ( ) ; super . detachView ( ) ; }
public void onTorrentPaused ( @ NotNull String torrentId ) { handleInfo . run ( ) ; }
public void postInvalidate ( ) { mOverlay . postInvalidate ( ) ; }
public int dpToPixels ( float dp ) { return General . dpToPixels ( mContext , dp ) ; }
public void testShowColorMap ( ) { when ( api . fetchData ( "OMI_Aerosol_Index" ) ) . thenReturn ( Observable . just ( data ) ) ; presenter . parseColorMap ( "OMI_Aerosol_Index" ) ; verify ( view ) . setColorMapData ( data ) ; presenter . detachView ( ) ; }
public IncidentAdapterViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . incident_list_item , parent , false ) ; return new IncidentAdapterViewHolder ( view ) ; }
public static SectionDrawerItem createSectionHeaderDrawerItem ( @ StringRes int nameStringRes , boolean divider ) { return new SectionDrawerItem ( ) . withName ( nameStringRes ) . withDivider ( divider ) ; }
public boolean update ( CoNaObiadDbHelper dbHelper , String name , long ingredientId ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "name" , name ) ; dbHelper . update ( tableName , contentValues , ingredientId ) ; return true ; }
public void setPopularity ( Integer popularity ) { this . popularity = popularity ; }
public void setVisibleYRangeMinimum ( float minYRange , AxisDependency axis ) { float yScale = getDeltaY ( axis ) / minYRange ; mViewPortHandler . setMaximumScaleX ( yScale ) ; }
public int getItemCount ( ) { return mCurrentItemCount + mMenuItems . size ( ) ; }
public void onClick ( View v ) { onStartSendActivity ( ) ; }
public void cancel ( ) { if ( mRequest != null ) mRequest . cancel ( ) ; }
public Object parseObject ( String s , ParsePosition parsePosition ) { return null ; }
public void onDisabled ( Context context ) { if ( manager != null && updatePendingIntent != null ) manager . cancel ( updatePendingIntent ) ; }
private void debugLog ( String tag , String msg ) { if ( this . enableLog ) { debugLog ( tag , msg ) ; } }
public void run ( ) { EventBus . getDefault ( ) . post ( new EventBusController . UIControlEvent ( EventBusController . UIControlEvent . SCROLL_TO_TOP ) ) ; }
private static String getProgressFileName ( Difficulty difficulty ) { return String . format ( PROGRESS_FILE , difficulty . name ) ; }
public DietListAdapter ( @ NonNull Context context , int resource , @ NonNull ArrayList < Diet > objects ) { super ( context , resource , objects ) ; mContext = context ; mResource = resource ; }
public void onHistoricalRecordClicked ( HistoricalRecordModel historicalRecordModel ) { this . viewListView . viewHistoricalRecord ( historicalRecordModel ) ; }
public void attachToHuePicker ( ColorHuePicker picker ) { mHuePicker = picker ; setHue ( picker . getHueValue ( ) ) ; picker . addHueChangeListener ( this : : setHue ) ; }
public void start ( ) { try { stop ( ) ; connect ( ) ; startPingTimer ( ) ; } catch ( IOException | com . neovisionaries . ws . client . WebSocketException e ) { e . printStackTrace ( ) ; } }
public void onRequestSuccess ( WeekType wt ) { WeekTypeOption weekTypeOption = preferences . getWeekTypeOption ( ) ; currentWeek = wt ; weekType = getWeekType ( weekTypeOption ) ; view . setSubtitle ( getSubtitle ( weekTypeOption ) ) ; loadedCurrentWeek = true ; showScheduleIfLoadingDone ( ) ; }
public void onClick ( View arg0 ) { TriggerEditorDialog editor = new TriggerEditorDialog ( TriggerSelectionDialog . this . getContext ( ) , null , service , triggerEditorDoneHandler , currentPlugin ) ; editor . show ( ) ; }
public void onClickPauseResume ( View v ) { cancelEditingTheAlarmField ( ) ; timer . toggleRunPause ( ) ; updateHandler . beginScheduledUpdate ( ) ; updateUI ( ) ; if ( timer . isRunning ( ) ) { informIfNotificationAlarmsMuted ( ) ; } }
public void playNextSong ( View view ) { if ( musicService != null ) { musicService . playNext ( false ) ; } }
public void StopRecording ( ) { StopRecordMedia ( ) ; }
public void copy ( List < FileHolder > tbc ) { mOperation = Operation . COPY ; mClipboard = tbc ; }
public void onUpdateArticlesFinishedEvent ( UpdateArticlesFinishedEvent event ) { Log . d ( TAG , "onUpdateArticlesFinishedEvent" ) ; if ( event . getResult ( ) . isSuccess ( ) ) { firstSyncDone = true ; tryToUpdateOnResume = false ; } updateStateChanged ( false ) ; }
public void setProgressTintList ( @ Nullable ColorStateList tint ) { logProgressBarTintWarning ( ) ; super . setProgressTintList ( tint ) ; }
public void setViewModel ( BaseViewModel viewModel ) { this . viewModel = ( PostActivityVM ) viewModel ; PostActivityBinding binding = DataBindingUtil . setContentView ( this , R . layout . post_activity ) ; binding . setViewModel ( this . viewModel ) ; }
public String getBluetoothICFirmwareVersion ( ) { return mBluetoothIcDevice . getBluetoothIcVersion ( ) ; }
public boolean back ( ) { if ( mIsInsideFolder ) { refreshListFolders ( ) ; return true ; } return false ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { return mValues . get ( oldItemPosition ) . getId ( ) == contactList . get ( newItemPosition ) . getId ( ) ; }
public Texture ( String url ) { super ( url ) ; }
public SponsorsRecyclerView ( List < Sponsors > announcements , Context context ) { sponsorsList = announcements ; this . context = context ; }
public Builder ( @ NonNull Context context , @ BoolRes int needFocus ) { this . context = context ; bottomSheet = new BottomSheet ( context , context . getResources ( ) . getBoolean ( needFocus ) ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . niesens . morsetrainer" , appContext . getPackageName ( ) ) ; }
public SpeedWalkConfigurationDialog ( Context context , IStellarService service ) { super ( context ) ; this . service = service ; }
public void saveWeight ( ) { dbStorage . setResult ( "MyWeight" , myWeight ) ; }
public LocalDate getDateDebutEcheance ( ) { return this . dateDebutEcheance ; }
private String deleteFiltered ( String data , int id ) { return data . replace ( String . format ( "|%d|" , id ) , "|" ) ; }
public void testGetLocalMilliseconds ( ) { assertThat ( planetaryCalendar . getLocalMilliseconds ( standardMilliseconds ) , closeTo ( planetaryMilliseconds , 1e - 2 ) ) ; }
private void setPortraitValue ( ) { columnCellCount = Setup . appSettings ( ) . getDrawerColumnCount ( ) ; rowCellCount = Setup . appSettings ( ) . getDrawerRowCount ( ) ; }
public static void unregister ( ) { sleepTransporter . removeDataListener ( getInstance ( ) ) ; if ( sleepTransporter . isTransportServiceConnected ( ) ) sleepTransporter . disconnectTransportService ( ) ; sleepTransporter = null ; }
public void onClick ( View v ) { intent . putExtra ( BaseWearGridActivity . MODE , BaseWearGridActivity . FLASHLIGHT ) ; mContext . startActivity ( intent ) ; }
private ResKavaMarketPrice . Result getPrice ( ) { return getSActivity ( ) . mKavaTokenPrice ; }
public void onClick ( View v ) { DialogFragment fragment = MoreDetailsDialogFragment . newInstance ( filename ) ; fragment . show ( getChildFragmentManager ( ) , DIALOG_TAG_MORE_DETAILS ) ; }
public NavDrawerHeaderView ( Context context ) { super ( context ) ; initView ( context , null ) ; }
public WritableHashSet ( HashSet < String > data , long timestamp , String key ) { this . hashSet = data ; this . timestamp = timestamp ; this . key = key ; serialised = listToEscapedString ( hashSet ) ; }
public Cursor _getPadByUrl ( String padUrl ) { return this . _getPadFromDatabase ( PadContentProvider . URL , padUrl ) ; }
public void onClick ( View view ) { if ( mTotalUnitNumber > 1 ) { mTotalUnitNumber -- ; mTotalUnitString = Integer . toString ( mTotalUnitNumber ) ; mTotalUnitTextView . setText ( mTotalUnitString ) ; } getUnitImageButtonSrc ( ) ; }
public void onAnimationEnd ( Animator animation ) { if ( runningAnimation2 != null && runningAnimation2 . equals ( animation ) ) { attachLayout . setVisibility ( GONE ) ; } }
public Loader < ArrayList < Song >> onCreateLoader ( int id , Bundle args ) { return new AsyncPlaylistSongLoader ( this , playlist ) ; }
public void putBoolean ( String key , boolean value ) { mPreferences . edit ( ) . putBoolean ( key , value ) . commit ( ) ; }
public VisitExpandableListAdapter ( Context context , List < Encounter > encounters ) { this . mContext = context ; this . mEncounters = encounters ; this . mBitmapCache = new SparseArray < Bitmap > ( ) ; this . mChildLayouts = generateChildLayouts ( ) ; }
public ActionEditText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void onAuthStateChanged ( @ NonNull FirebaseAuth firebaseAuth ) { FirebaseUser user = firebaseAuth . getCurrentUser ( ) ; if ( user != null ) { onSignedInInitialize ( user . getDisplayName ( ) ) ; } else { onSignedOutCleanup ( ) ; } }
public void onErrorResponse ( VolleyError error ) { Log . d ( Constants . LOG_TAG , "Error : " + error . getMessage ( ) ) ; }
private void handleBluetoothChange ( Intent intent ) { this . bluetoothAvailable = intent . getBooleanExtra ( EXTRA_AVAILABLE , false ) ; if ( recipient != null ) { sendMessage ( viewModelStateFor ( callState ) , recipient , localVideoEnabled , remoteVideoEnabled , bluetoothAvailable , microphoneEnabled ) ; } }
public ServiceConfig setWeatherProvider ( @ NonNull WeatherProvider weatherProvider ) { mWeatherProvider = weatherProvider ; return this ; }
public DictionaryModel getCurrentDictionary ( ) { return editingLanguageChooserVM . getCurrentLanguage ( ) ; }
public void setUp ( ) { if ( ! initialized ) { WallpaperDatabase . init ( InstrumentationRegistry . getTargetContext ( ) ) ; initialized = true ; } }
public AppSettings provideAppSettings ( Context context ) { return new AppSettings ( context ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { setPage ( 3 , true , new Bundle ( ) , true ) ; }
public static void setLastUpdateTimeOfStravaEquipment ( String updateTime ) { cSharedPreferences . edit ( ) . putString ( SP_LAST_UPDATE_TIME_OF_STRAVA_EQUIPMENT , updateTime ) . commit ( ) ; }
public void onReceive ( Context context , Intent intent ) { startMenu . scrollToPosition ( 0 ) ; }
private void showDialog ( ) { new MaterialDialog . Builder ( this ) . title ( "Add Parse Server" ) . customView ( R . layout . add_app_dialog , true ) . positiveText ( "OK" ) . onPositive ( this ) . show ( ) ; }
private void subscribeAlertDialog ( ) { Disposable d = dialogViewModel . observeEvents ( ) . subscribe ( this : : handleAlertDialogEvent ) ; disposable . add ( d ) ; }
private final OnClickListener clearFilterClickListener = new OnClickListener ( ) { @ Override public void onClick ( View v ) { final EditText editTextFilter = ( EditText ) findViewById ( R . id . EditTextFilter ) ; editTextFilter . setText ( "" ) ; } } ;
public FingerprintDialog fingerprintSuccessColor ( int fingerprintSuccessColor ) { this . fingerprintView . fingerprintSuccessColor ( fingerprintSuccessColor ) ; return this ; }
public BgestureListener ( BaardTERMWindow reportto ) { super ( ) ; inform = reportto ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setVisibleToUser ( true ) ; info . setClassName ( "android . widget . TextView" ) ; info . setText ( text ) ; }
public String getType ( Uri uri ) { OCFile ocFile = getFile ( uri ) ; return ocFile . getMimetype ( ) ; }
private void populateList ( ArrayList < LocationGroup > Items ) { FillGroupsList ( ) ; listView . setAdapter ( new LocationsList_Adapter ( this , Items ) ) ; }
public void onClick ( View view ) { mEditFeaturesListener . onClick ( view , DetailActionListener . EDIT_FEATURES , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
public boolean pepPublishOptions ( ) { return hasDiscoFeature ( account . getJid ( ) . toBareJid ( ) , Namespace . PUBSUB_PUBLISH_OPTIONS ) ; }
public void onCreate ( ) { runStartForeground ( ) ; TermuxFloatApplication . setLogLevel ( this , false ) ; Logger . logVerbose ( LOG_TAG , "onCreate" ) ; }
public String getEscala ( ) { return mEscala ; }
private void setupActionBar ( ) { getActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; getActionBar ( ) . setTitle ( R . string . license_label ) ; }
public int getMax ( ) { return max ; }
public static ViewAction orientationPortrait ( ) { return new OrientationChangeAction ( ActivityInfo . SCREEN_ORIENTATION_PORTRAIT ) ; }
private int coordToPos ( int row , int col ) { return 3 * ( row - 1 ) + col ; }
public int getLevelOrder ( ) { return 0 ; }
public void setInfo ( TLRPC . User user ) { if ( user != null ) { setInfo ( user . id , user . first_name , user . last_name , false ) ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences_camera ) ; CheckBoxPreference cbPref = ( CheckBoxPreference ) findPreference ( "pref_motion_detection_preview" ) ; cbPref . setOnPreferenceChangeListener ( this ) ; }
public void addAll ( List < StatusViewData > statuses ) { int end = statuses . size ( ) ; this . statuses . addAll ( statuses ) ; notifyItemRangeInserted ( end , statuses . size ( ) ) ; }
public DataSource < Integer , Result > create ( ) { ResultDataSource resultDataSource = new ResultDataSource ( this . keywordsParameter , this . query , this . listRepo , this . listArch , this . flagged ) ; dataSourceMutableLiveData . postValue ( resultDataSource ) ; return resultDataSource ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . nieuws_detail , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void onRefresh ( ) { mIsFollowing = false ; loadTopRepositories ( true ) ; loadOrganizationsIfUser ( true ) ; loadOrganizationMemberCountIfOrg ( true ) ; loadIsFollowingStateIfNeeded ( true ) ; }
public static String getStackTraceAsText ( Throwable ex ) { return getStackTraceAsText ( ex , true ) ; }
public void initDaggerAppComponent ( ) { mAppComponent = DaggerAppComponent . builder ( ) . apiModule ( new TestApiModule ( this ) ) . build ( ) ; }
public void setBirthdayTtsLocale ( String locale ) { putString ( BIRTHDAY_TTS_LOCALE , locale ) ; }
public void onNestedScrollAccepted ( View child , View target , int nestedScrollAxes ) { nestedScrollingParentHelper . onNestedScrollAccepted ( child , target , nestedScrollAxes ) ; if ( dismissed ) { return ; } cancelCurrentAnimation ( ) ; }
public List < String > getAllEnabledRules ( boolean useCosmetics ) { List < Integer > filterIds = getEnabledFilterIds ( ) ; return filterRuleDao . selectRuleTexts ( filterIds , useCosmetics ) ; }
public void onViewDetachedFromWindow ( VH holder ) { onViewDetachedFromWindow ( holder , holder . getItemViewType ( ) ) ; }
public Size ( float height , SizeLayout heightLayoutType , float width , SizeLayout widthLayoutType ) { this . height = new SizeMetric ( height , heightLayoutType ) ; this . width = new SizeMetric ( width , widthLayoutType ) ; }
public void pauseAnimation ( ) { autoPlay = false ; lottieDrawable . pauseAnimation ( ) ; computeRenderMode ( ) ; }
public void onResume ( ) { super . onResume ( ) ; adapter . unlockRowClicks ( ) ; }
public void onPageSelected ( int position ) { IntroActivity . this . position = position ; updateTaskDescription ( ) ; lockSwipeIfNeeded ( ) ; }
public void storeLastKnownLocation ( final String cityName ) { mCityNamePreference . set ( cityName ) ; }
public static MessageDialogFragment newInstance ( String message ) { MessageDialogFragment fragment = new MessageDialogFragmentEx ( ) ; Bundle args = new Bundle ( ) ; args . putString ( "message" , message ) ; fragment . setArguments ( args ) ; return fragment ; }
public void onBindItemViewHolder ( ViewHolder viewHolder , @ NonNull Cursor cursor ) { viewHolder . getItem ( ) . bind ( getThreadRecord ( cursor ) , glideRequests , locale , batchSet , batchMode ) ; }
public static long get ( String key , long _default ) { return prefs . getLong ( key , _default ) ; }
public List < Kd2DicNumber > getDic_number ( ) { return dic_number ; }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . THEME ; }
public void setSearchResult ( List < Station > stations ) { this . stations . accept ( stations ) ; updateCurrentStationFromPreferences ( stations ) ; }
public SlotsGroup ( Slots s ) { beginAt = s . beginAt ; endAt = s . endAt ; group = new ArrayList <> ( ) ; group . add ( s ) ; scaleTeam = null ; isBooked = s . isBooked ; }
private static void setTextSize ( TypedArray attrs , Paint paint , int attrId ) { paint . setTextSize ( attrs . getDimension ( attrId , paint . getTextSize ( ) ) ) ; }
public void onViewThread ( int position ) { Status status = statuses . get ( position ) ; if ( thisThreadsStatusId . equals ( status . id ) ) { return ; } super . viewThread ( status ) ; }
public void testCleanSearchRealExample ( ) throws Exception { String original = " -- swidnik - zdroj9" ; String expected = "swidnik zdroj" ; String actual = corrector . cleanForSearch ( original ) ; Assert . assertEquals ( expected , actual ) ; }
public static long create ( Instance instance , JSONObject attributes ) throws JSONException , ClientProtocolException , IOException , HTTPException { JSONObject json = instance . post ( "/api/v1/crumbs" , attributes ) ; long id = json . getLong ( "id" ) ; return ( id ) ; }
public static void setStartLength ( int value ) { set ( START_LENGTH , value ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == android . R . id . home ) { dismiss ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void onMapClick ( LatLng latLng ) { Graticule g = new Graticule ( latLng ) ; removeDestinationPoint ( ) ; mPicker . setNewGraticule ( g ) ; }
private void givenNullApiKey ( ) { mServiceConfig . setApiKey ( null ) ; }
public void didFailedLoadingFile ( FileLoadOperation operation , int reason ) { checkDownloadQueue ( document , location , finalFileName ) ; if ( delegate != null ) { delegate . fileDidFailedLoad ( finalFileName , reason ) ; } }
public void flip ( int x , int y ) { int offset = y * rowSize + ( x >> 5 ) ; bits [ offset ] ^ = 1 << ( x & 0x1f ) ; }
public String getFormattedValue ( float value ) { return String . valueOf ( ( int ) value ) ; }
public void finishTutorial ( ) { kvStore . putBoolean ( "firstrun" , false ) ; finish ( ) ; }
public void run ( ) { try { getSupportFragmentManager ( ) . executePendingTransactions ( ) ; commitDiffFragment . setProgressVisibility ( false ) ; commitDiffFragment . setCommitDiffs ( commitDiffs ) ; } catch ( NullPointerException e ) { } }
private RecyclerView . Adapter datesAdapter ( final List < GarbageDay > days ) { return new TwoLineListAdapter ( days . stream ( ) . map ( this : : formatPickupDay ) . collect ( toList ( ) ) ) ; }
public void refreshListAllMusic ( ) { mCurrentPage = PAGE_ALL ; showProgressBar ( ) ; refreshCurrentList ( ) ; }
private final OnClickListener mCancelButtonClickListener = new OnClickListener ( ) { @ Override public void onClick ( final View v ) { deleteMagicCreatedAccountAndReturnIfNecessary ( ) ; finish ( ) ; } } ;
public Kusarigama ( ) { super ( 3 , 2f , 1f ) ; image = 0 ; imageFile = "items/kusarigama . png" ; range = 2 ; }
public String getAvatarUrl ( ) { return avatarUrl ; }
public static String getBootPartition ( ) { if ( boot == null ) for ( String partition : Boot ) if ( Utils . existFile ( partition ) ) { boot = partition ; return partition ; } return boot ; }
private void load ( @ TYPE String type , boolean force ) { thread . run ( ( ) -> load ( type , force , null ) ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { if ( modelClass != ComponentViewModel . class ) throw new RuntimeException ( "Invalid view model class requested" ) ; return ( T ) new ComponentViewModel ( componentSourceAndSink ) ; }
public void addSongPreviewListener ( SongPreviewListener listener ) { if ( listener != null &&! mListeners . contains ( listener ) ) mListeners . add ( listener ) ; }
public Builder allowNewFolder ( boolean allow , @ StringRes int buttonLabel ) { allowNewFolder = allow ; if ( buttonLabel == 0 ) buttonLabel = R . string . new_folder ; newFolderButton = buttonLabel ; return this ; }
public void testECIGermanCyrillic ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u00c4' , '\u042f' } , new float [ ] { 20f , 1f , 1f , 10f } , 80529 , 96007 ) ; }
private boolean hasTriggerResolver ( ) { return triggerResolver != null ; }
private List < Map > getNotificationList ( String lastDateCheck , String currentTime ) { BackendlessQueries backendlessQuery = new BackendlessQueries ( ) ; return backendlessQuery . loadNotification ( lastDateCheck , currentTime ) ; }
public OptionsMap process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return new OptionsMap ( obj . getJSONObject ( "result" ) ) ; }
public void disableDatabaseWriteAheadLogging ( SQLiteDatabase db ) { db . rawQuery ( "PRAGMA journal_mode = DELETE" , null ) ; }
public void onClick ( View v ) { mPager . getCurrentItem ( ) ; }
private TermuxBootAppSharedPreferences ( @ Nonnull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
public void onError ( @ NonNull String message ) { callback . reportError ( message ) ; }
public void setAllowReblogButton ( Boolean allowReblogButton ) { mSettings . allowReblogButton = allowReblogButton ; }
public void setSource ( MjpegInputStream stream ) { if ( ! ( stream instanceof MjpegInputStreamNative ) ) { throw new IllegalArgumentException ( "stream must be an instance of MjpegInputStreamNative" ) ; } _setSource ( ( MjpegInputStreamNative ) stream ) ; }
public boolean onLongClick ( View v ) { showSnackMessage ( R . string . actionbar_upload_from_apps ) ; return true ; }
public void unregister ( BonjourService service ) { Subscription subscription = mRegistrations . remove ( service ) ; subscription . unsubscribe ( ) ; }
private void performCallback ( String filePath , boolean needsToBeCleaned , int uid ) { if ( imageRotationOperationListner != null ) { imageRotationOperationListner . onImageRotationFixed ( filePath , needsToBeCleaned , uid ) ; } }
public void onTitleChanged ( TerminalSession updatedSession ) { }
public void attachView ( RegisterMVP . View view ) { super . attachView ( view ) ; analyticsHelper . trackPageView ( AnalyticsHelper . VIEW_REGISTRATION ) ; }
public ListFragmentC getCurrentFragment ( ) { Log . v ( Utils . getAppTag ( ) , Utils . getMethodName ( ) ) ; ListFragmentC retListFragmentC = this . getItem ( mWeakRefToViewPager . get ( ) . getCurrentItem ( ) ) ; return retListFragmentC ; }
public Long getLinkId ( ) { return linkId ; }
public DataSource < Integer , Movie > create ( ) { MoviePageKeyedDataSource movieDataSource = new MoviePageKeyedDataSource ( movieApiService , networkExecutor , sortBy ) ; sourceLiveData . postValue ( movieDataSource ) ; return movieDataSource ; }
public void setHashrate ( Integer hashrate ) { this . hashrate = hashrate ; }
public Move ( String name , int damage , int crit ) { type = 2 ; this . name = name ; minDamage = maxDamage = damage ; minHeal = maxHeal = - 1 ; this . crit = crit ; }
public void bind ( int position , @ NonNull Tag tag ) { this . position . set ( position ) ; name . setText ( tag . getName ( ) ) ; counter . setText ( viewModel . getCounterFor ( tag . getIngredientCount ( ) ) ) ; }
private void setSeparator ( View viewTitleSeparator ) { if ( viewTitleSeparator != null ) viewTitleSeparator . setBackgroundColor ( designSettings . getThemeColor ( ) ) ; }
public void onBindViewHolderCursor ( final ViewHolder holder , Cursor cursor ) { holder . bind ( cursor ) ; }
public String text ( ) { return new AraPopUps ( ) . getDialogValueBack ( MainActivity . this , "edit state value" , handler ) ; }
public void handleMessage ( Message msg ) { CustomAutoCompleteTextView . super . performFiltering ( ( CharSequence ) msg . obj , msg . arg1 ) ; }
public HashMap < String , String > getScripts ( ) { return scripts ; }
public boolean onOptionsItemSelected ( MenuItem item ) { Intent myIntent = new Intent ( getApplicationContext ( ) , DestaqueActivity . class ) ; startActivityForResult ( myIntent , 0 ) ; return true ; }
public UndoDeleteNoteMulti ( Note [ ] notesArr , List < Card > allCards ) { super ( R . string . card_browser_delete_card ) ; this . notesArr = notesArr ; this . allCards = allCards ; }
public Account create ( ) { db . em ( ) . saveAccount ( a ) ; return a ; }
public DevDesc ( String name , String desc , int Id ) { this . desc = desc ; this . name = name ; this . Id = Id ; }
public void seek ( ) { setFindingSampleState ( ) ; }
public void countriesCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "countries" ) ; }
private void onEditItem ( int position ) { editItem ( position ) ; mDataManager . reload ( ) ; mAdapter . notifyDataSetChanged ( ) ; }
public void onDraftChanged ( ) { updateDraftMenuItem ( true ) ; }
public String getIconSize ( ) { return mSharedPreferences . getString ( KEY_ICONSIZE , "medium" ) ; }
public void onCancel ( final DialogInterface dialogInterface ) { cancelled . set ( true ) ; progressDialog . dismiss ( ) ; }
public void setButton ( int whichButton , CharSequence text , Message msg ) { mAlert . setButton ( whichButton , text , null , msg ) ; }
public void update ( Observable observable , Object o ) { updateActiveDictionariesCount ( ) ; }
public void removeOption ( ) { EventBus . getDefault ( ) . post ( new EventBusController . OptionControlEvent ( option . getId ( ) , null , EventBusController . OptionControlEvent . OPTION_REMOVE , option . getCode ( ) ) ) ; }
public void testIsWPCOMURI1 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( wpcomAddress1 ) ) ) ; }
public void loggedInViaUsernamePassword ( ArrayList < Integer > oldSitesIds ) { loggedInAndFinish ( oldSitesIds ) ; }
public void setCookies ( Map < String , String > cookies ) { this . cookies = cookies ; }
public void activateAcknowledged ( String workflowId ) { FragmentUtils . goBack ( this ) ; handleCrashAnalytics ( ) ; }
public PhotosInteractor ( INetworker networker , IStores cache ) { this . networker = networker ; this . cache = cache ; }
public void postAttack ( Char user , Char tgt ) { if ( Random . Float ( 1 ) < 0 . 1f ) { Buff . prolong ( tgt , Vertigo . class , 3 ) ; } }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . user_detail : case R . id . profile_image : startActivity ( new Intent ( this , EditProfileActivity . class ) ) ; break ; } }
private void sendMessage ( final String text , final int what ) { final Message msg = new Message ( ) ; msg . obj = text ; msg . what = what ; loadingHandler . sendMessage ( msg ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "d . d . meshenger" , appContext . getPackageName ( ) ) ; }
public void movePlaneUpwards ( ) { m_PlayerBoard . movePlaneUpwards ( ) ; }
public static boolean waitToFinish ( Integer timeoutSeconds ) { return sTaskManager . waitToFinishConcrete ( timeoutSeconds ) ; } ;
public void onClick ( View v ) { hideKeyBoard ( v ) ; onSubmitButtonClicked ( ) ; }
public SingleSegmentBase ( String uri ) { this ( null , 1 , 0 , 0 , 0 ) ; }
public int getAdGroupIndexAfterPositionUs ( long positionUs ) { return adPlaybackState . getAdGroupIndexAfterPositionUs ( positionUs ) ; }
public BondingStateTask ( BaseApplication app , TaskListener listener , Account account ) { super ( app , listener ) ; this . mAccount = account ; this . mResult . taskType = BaseConstant . TASK_FETCH_BONDING_STATE ; }
private void showError ( String message ) { Dialog . info ( getParentFragmentManager ( ) , "favorite_error" , message ) ; }
public Number getMaxX ( ) { return xLineRegion . getMaxVal ( ) ; }
public long getNumLists ( ) { open ( ) ; long numLists = DatabaseUtils . queryNumEntries ( database , MySQLiteHelper . LISTS_TABLE_NAME , null , null ) ; close ( ) ; return numLists ; }
public void onStickerSetAdd ( TLRPC . StickerSetCovered stickerSet ) { DataQuery . getInstance ( currentAccount ) . removeStickersSet ( parentActivity , stickerSet . set , 2 , parentFragment , false ) ; }
public void postScale ( float scaleDiff ) { Log . w ( "Layer" , "ScaleDiff : " + scaleDiff ) ; float newVal = scale + scaleDiff ; if ( newVal >= getMinScale ( ) && newVal <= getMaxScale ( ) ) { scale = newVal ; } }
public Builder ( Context context , boolean needFocus ) { bottomSheet = new BottomSheet ( context , needFocus ) ; }
public boolean eventExist ( int id ) { SummitEvent summitEvent = summitEventDataStore . getByIdLocal ( id ) ; return summitEvent != null ; }
public static File GetPath ( Context context ) { return new File ( FileUtils . getPath ( context ) + "/dbBackup/" + DATABASE_NAME ) ; }
public void populate ( ItemManager . Item info ) { }
public String type ( ) { return XMLPrefsSave . INTEGER ; }
public void add ( String contentKey , byte [ ] value ) { if ( value != null ) { contentValues . put ( contentKey , toIsoString ( value ) ) ; } }
public void onCompleted ( Object companion ) { AppLog . i ( AppLog . T . READER , "notifications update job service > all tasks completed" ) ; jobFinished ( ( JobParameters ) companion , false ) ; }
public String getFormattedValue ( float value ) { long millis = TimeUnit . HOURS . toMillis ( ( long ) value ) ; return mFormat . format ( new Date ( millis ) ) ; }
public void onLoginDone ( String blogUrl ) { }
public void afterTextChanged ( Editable s ) { if ( passwordEditText . length ( ) == 4 && UserConfig . passcodeType == 0 ) { processDone ( false ) ; } }
public boolean shouldDisplayMarkerPopup ( ) { return mPrefs . getBoolean ( Constants . PREF_DISPLAY_MARKER_POPUP , true ) ; }
public int getLayoutRes ( ) { return R . layout . rv_circluar_textview ; }
public int getScale ( ) { return scale ; }
public void setmWinners ( List < Winners > mWinners ) { this . mWinners = mWinners ; }
public synchronized void reset ( ) throws IOException { moveTo ( markedPosition ) ; }
public static Prefs getInstance ( Context context ) { if ( instance == null ) { synchronized ( Prefs . class ) { if ( instance == null ) instance = new Prefs ( context . getApplicationContext ( ) ) ; } } return instance ; }
public int getMaxHealth ( ) { return UNIT_SPRINTER_HEALTH ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . POW_N ) ; }
public Builder ( Context context ) { bottomSheet = new BottomSheet ( context , false ) ; }
public void run ( ) { String res = Statusgo . hashTypedData ( data ) ; callback . invoke ( res ) ; }
private void makeCurrencyDefault ( long id ) { Currency c = em . get ( Currency . class , id ) ; c . isDefault = true ; em . saveOrUpdate ( c ) ; recreateCursor ( ) ; }
public static void updateGridViewEnabled ( Boolean gridView ) { isGridViewEnabled = gridView ; }
public ChatApi getApiInstance ( ) { return mApi ; }
public Station ( String name , String url ) { this . name = name ; this . url = url ; }
public ViewHolder ( View v , ItemClickListener listener ) { super ( v ) ; ButterKnife . inject ( this , v ) ; this . listener = listener ; v . setOnClickListener ( this ) ; }
public void openBanEditor ( int accountId , int groupId , Banned banned ) { PlaceFactory . getCommunityBanEditPlace ( accountId , groupId , banned ) . tryOpenWith ( getActivity ( ) ) ; }
public void onClick ( View v ) { mShapeType = Constant . ShapeType . Rectangle ; }
private void initUnlockPrefs ( ) { binding . unlockScreenPrefs . setOnClickListener ( mUnlockClick ) ; binding . unlockScreenPrefs . setChecked ( mPrefs . isDeviceUnlockEnabled ( ) ) ; }
public void shareDictionaryTest ( ) { search ( "a" ) ; swipeViewPagerLeft ( 2 ) ; openMenuItem ( R . string . share ) ; verifyShareIntentContains ( "the blood group whose red cells carry the A antigen" ) ; }
public void setExported ( boolean isExported ) { mIsExported = isExported ? 1 : 0 ; }
public void setSocialList ( ArrayList < ColorInfo > list ) { this . socialList = list ; }
private Runnable skipRunnable = new Runnable ( ) { @ Override public void run ( ) { if ( ! isPlaying ( ) ) return ; seek ( currentSkipPos ) ; currentSkipPos = 0 ; updateProgress = true ; } } ;
public void scrollRecycleViewToPosition ( int position ) { if ( mRecyclerView == null ) return ; mRecyclerView . scrollToPosition ( position ) ; }
public void onAttachedToRecyclerView ( RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; parentRecycler = recyclerView ; }
public void onClick ( View view ) { Intent intent = new Intent ( VisitsActivity . this , RegisterVisitActivity . class ) ; startActivity ( intent ) ; }
public void onReceive ( final Context context , final Intent intent ) { if ( Logger . LOG ) Logger . log ( "app updated" ) ; context . startService ( new Intent ( context , SensorListener . class ) ) ; }
private void setLocationPermissionRequested ( boolean locationPermissionRequested ) { this . locationPermissionRequested = locationPermissionRequested ; SharedPreferences . Editor editor = sharedPrefs . edit ( ) ; editor . putBoolean ( getString ( R . string . location_permission_requested_key ) , locationPermissionRequested ) ; editor . commit ( ) ; }
public boolean isUserLoggedIn ( ) { return ! ApplicationConstants . EMPTY_STRING . equals ( mOpenMRS . getSessionToken ( ) ) ; }
private File directoryForPlant ( Plant plant ) { File directory = new File ( persistentDirectory ( ) , plant . getId ( ) ) ; if ( ! directory . exists ( ) ) { directory . mkdirs ( ) ; } return directory ; }
public void sha256FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25" , HashCalculator . newInstance ( HashType . SHA_256 ) . fromString ( inputText ) ) ; }
private double foottomi ( double num ) { return num * 0 . 000189 ; }
public BookSearchResult call ( ) throws Exception { return search ( mIsbn ) ; }
public boolean onMenuItemClick ( MenuItem item ) { try { esportaodt ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return true ; }
private void renameCategory ( Category category , String newName ) { RenameCategory task = new RenameCategory ( this , category , newName , this : : reloadCategories ) ; task . execute ( ) ; }
public boolean hasImage ( ) { return true ; }
public HttpRequestBase [ ] createRequests ( String urlBase ) { return new HttpRequestBase [ ] { new HttpGet ( urlBase + "spotit/projects_logged_out" ) } ; }
private Fragment getWhichFragment ( ) { switch ( navItemIndex ) { case 0 : return new UserSelectFragment ( ) ; case 1 : return new BookmarkedFragment ( ) ; case 2 : default : return new UserSelectFragment ( ) ; } }
public void refresh ( boolean isLoadingOlderPosts ) { loadPosts ( isLoadingOlderPosts ) ; }
public Binder < TextSectionView > createBinder ( TagEntry viewObject ) { return new TextSectionBinder ( viewObject ) ; }
public int getLogLevel ( boolean readFromFfile ) { if ( readFromFfile ) return SharedPreferenceUtils . getInt ( mMultiProcessSharedPreferences , TERMUX_TASKER_APP . KEY_LOG_LEVEL , Logger . DEFAULT_LOG_LEVEL ) ; else return SharedPreferenceUtils . getInt ( mSharedPreferences , TERMUX_TASKER_APP . KEY_LOG_LEVEL , Logger . DEFAULT_LOG_LEVEL ) ; }
public final void evictAll ( ) { trimToSize ( - 1 ) ; }
public void flowInterrupt ( String workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { }
public List < Sign > read ( String whereSignNameLocaleDeLike ) { return readInternal ( whereSignNameLocaleDeLike , false , false ) ; }
public void verifyData ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity , OstVerifyDataInterface ostVerifyDataInterface ) { }
public StimulusView ( Context context ) { super ( context ) ; }
public void launchIntervention ( View v ) { if ( super . isSync ) return ; Intent intent = new Intent ( this , TrackingActivity . class ) ; intent . putExtra ( TrackingActivity . NEW , true ) ; startActivity ( intent ) ; }
public static Rect getPackedStringDimensions ( String text , Paint paint ) { Rect size = new Rect ( ) ; paint . getTextBounds ( text , 0 , text . length ( ) , size ) ; return size ; }
public void onCreate ( ) { super . onCreate ( ) ; StrictMode . enableDefaults ( ) ; appComponent = createAppComponent ( ) ; }
public com . coinomi . core . protos . Protos . WalletPocket getPockets ( int index ) { if ( pocketsBuilder_ == null ) { return pockets_ . get ( index ) ; } else { return pocketsBuilder_ . getMessage ( index ) ; } }
private void givenSharedPreferenceForCelsius ( final boolean celsiusPreferred ) { new Expectations ( ) { { PreferenceManager . getDefaultSharedPreferences ( mContext ) ; mSharedPreferences . getBoolean ( SettingsActivity . PREF_TEMPERATURE_UNITS , true ) ; result = celsiusPreferred ; } } ; }
private void actionStopService ( ) { mWantsToStop = true ; finishAllTermuxSessions ( ) ; requestStopService ( ) ; }
public void onClick ( View v ) { startVoice ( R . raw . yes ) ; newDialog . dismiss ( ) ; saveDrawing ( ) ; paintView . startNew ( ) ; saveName = setSaveName ( ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( listAdapter != null ) { listAdapter . notifyDataSetChanged ( ) ; } fixLayout ( ) ; }
private void hideSoftInput ( ) { InputMethodManager imm = ( InputMethodManager ) activity . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; View v = getCurrentFocus ( ) ; if ( v == null ) return ; imm . hideSoftInputFromWindow ( v . getWindowToken ( ) , 0 ) ; }
public void onSortSelected ( final CommentListingController . Sort order ) { commentListingController . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public int sendRequest ( TLObject object , RequestDelegate completionBlock , int flags ) { return sendRequest ( object , completionBlock , null , flags , DEFAULT_DATACENTER_ID , ConnectionTypeGeneric , true ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof FragmentNavButtonListener ) { mListener = ( FragmentNavButtonListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnFragmentInteractionListener" ) ; } }
public static void launchSqliteManager ( Context context , SqliteDataRetriever sqliteDataRetriever , String csvFileShareAuthority ) { }
private void resetActionBar ( ) { ActionBar bar = getSupportActionBar ( ) ; if ( bar != null ) { yearSelectorContainer . setVisibility ( View . GONE ) ; bar . setDisplayShowTitleEnabled ( true ) ; } }
public InterventionFertilizer ( int fertiId ) { this . quantity = 0f ; this . unit = "kilogram_per_hectare" ; this . intervention_id = - 1 ; this . ferti_id = fertiId ; }
public QuranRow build ( ) { return new QuranRow ( text , metadata , rowType , sura , ayah , page , imageResource , imageFilterColor , juzType , juzOverlayText , bookmarkId , tagId , bookmark , dateAdded ) ; }
private double sqcmTosqinch ( double num ) { return num * 0 . 155 ; }
public void onLocationChanged ( Location location ) { if ( mOsmMap != null ) { positionMarker ( location ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return account_Password . TLdeserialize ( stream , constructor , exception ) ; }
private TermuxStylingAppSharedPreferences ( @ Nonnull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
public void onUnableLocationAcquire ( ) { HashMap < String , MessageObject > waitingForLocationCopy = new HashMap <> ( waitingForLocation ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . wasUnableToFindCurrentLocation , waitingForLocationCopy ) ; waitingForLocation . clear ( ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( getContext ( ) , ActivityBilling . class ) ) ; }
public void onEndOfSpeech ( ) { mResultListener . IsListening ( VoiceResultListener . ListenState . PROCESSING ) ; }
public void onSwipeUp ( ) { playUp ( ) ; setPadColorToDefault ( ) ; }
public static Playable fromPlaylistEntry ( PlaylistEntry playlistEntry ) { return new Playable ( playlistEntry . id , playlistEntry . url , playlistEntry . title , playlistEntry . isStream , NewsStoryActivity . class , playlistEntry . storyID ) ; }
public com . coinomi . core . protos . Protos . AddressStatus getAddressStatus ( int index ) { if ( addressStatusBuilder_ == null ) { return addressStatus_ . get ( index ) ; } else { return addressStatusBuilder_ . getMessage ( index ) ; } }
public static DeleteSongsDialog create ( ArrayList < Song > songs ) { DeleteSongsDialog dialog = new DeleteSongsDialog ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "songs" , songs ) ; dialog . setArguments ( args ) ; return dialog ; }
public void setSending ( boolean isSending ) { this . isSending = isSending ; updateIcon ( ) ; }
public void disableIncomeExpenseButton ( ) { incomeExpenseEnabled = false ; toggleView . setEnabled ( false ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . oddlyspaced . np" , appContext . getPackageName ( ) ) ; }
public void disableDatabaseWriteAheadLogging ( SQLiteDatabase db ) { db . disableWriteAheadLogging ( ) ; }
public void testInitAppLanguages ( ) { Assert . assertTrue ( WikipediaApp . getInstance ( ) . getAppLanguageCode ( ) . equals ( "en" ) ) ; }
public int getCount ( ) { return photos . size ( ) ; }
public String status ( Char me ) { return Utils . format ( Game . getVar ( R . string . Mob_StaSleepingStatus ) , me . getName ( ) ) ; }
public void onActivityDestroy ( ) { super . onActivityDestroy ( ) ; if ( mDialog != null && mDialog . isShowing ( ) ) mDialog . dismiss ( ) ; }
public void setViewMode ( String viewMode ) { SharedPreferences . Editor editor = m_prefs . edit ( ) ; editor . putString ( "offline_view_mode" , viewMode ) ; editor . commit ( ) ; }
public void setBackgroundColor ( int color ) { if ( drawable == null ) drawable = new RoundDrawable ( color ) ; else drawable . setColor ( color ) ; setBackgroundDrawable ( drawable ) ; }
public ArrayList < Song > getPlayingQueueSongOnly ( ) { resetSongs ( ) ; return songs ; }
public boolean onPrepareOptionsMenu ( Menu menu ) { MenuInflater inflater = this . getSupportMenuInflater ( ) ; menu . clear ( ) ; inflater . inflate ( R . menu . log_submit , menu ) ; super . onPrepareOptionsMenu ( menu ) ; return true ; }
public void setAlbumSortOrder ( final String sortOrder ) { final SharedPreferences . Editor editor = mPreferences . edit ( ) ; editor . putString ( ALBUM_SORT_ORDER , sortOrder ) ; editor . apply ( ) ; }
public void setAdapter ( RecyclerView . Adapter < RecyclerView . ViewHolder > adapter ) { mAdapter = adapter ; mRecycler . setAdapter ( mAdapter ) ; }
public void scrollToSearch ( View view ) { slideViewPager . setCurrentItem ( 2 ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { getPresenter ( ) . fireOptionEdited ( finalI , s ) ; }
public Alarm ( Context context ) { mContext = context ; mId = 0 ; mTitle = "" ; mDate = System . currentTimeMillis ( ) ; mEnabled = true ; mOccurence = ONCE ; mDays = EVERY_DAY ; update ( ) ; }
public UserBuilder middleName ( String middle ) { if ( middle != null ) { this . name [ 1 ] = middle ; } return this ; }
private static File newFile ( File parent ) throws Exception { return File . createTempFile ( "temp" , "" , parent ) ; }
public void setRangeFramingModel ( XYFramingModel rangeFramingModel ) { this . rangeFramingModel = rangeFramingModel ; }
public Result [ ] newArray ( int size ) { return new Result [ size ] ; }
public void testSuiteFinished ( Description description ) throws Exception { super . testSuiteFinished ( description ) ; Log . i ( TAG , "Test Suite finished : " + description ) ; if ( description . toString ( ) . equals ( "null" ) ) restoreWidgets ( ) ; }
public int compare ( CardWrapper c1 , CardWrapper c2 ) { return c1 . getCard ( ) . getQuestion ( ) . compareTo ( c2 . getCard ( ) . getQuestion ( ) ) ; } ;
public void setModeBothMonthWeekView ( ) { mCalendarShowMode = CALENDAR_SHOW_MODE_BOTH_MONTH_WEEK_VIEW ; }
public void onClick ( View view ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; i . setData ( Uri . parse ( getString ( R . string . donate_other_link ) ) ) ; startActivity ( i ) ; }
public void onStickersSettingsClick ( ) { if ( parentFragment != null ) { parentFragment . presentFragment ( new StickersActivity ( DataQuery . TYPE_IMAGE ) ) ; } }
public void setup ( ) { assertThat ( "Test expects different Forms DB version" , DatabaseConstants . FORMS_DATABASE_VERSION , is ( 9 ) ) ; database = SQLiteDatabase . create ( null ) ; }
private View . OnClickListener onDialog = new View . OnClickListener ( ) { @ Override public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintDialog . class ) ) ; } } ;
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; switch ( id ) { case R . id . delete_history_button : this . clearHistory ( ) ; return true ; default : return super . onOptionsItemSelected ( item ) ; } }
private void displayLoggingInProgress ( ) { setGpsProvideButtonVisible ( false ) ; GpsRouteLoggerStatus status = GpsRouteLoggerStatus . INSTANCE ; mSpeed . setText ( getResources ( ) . getString ( R . string . title_gps_logger_logging_in_progress , status . getSpeed ( ) ) ) ; }
public String getAmountText ( ) { return amount . getText ( ) . toString ( ) . trim ( ) ; }
public Form getOneByPath ( String path ) { String selection = FORM_FILE_PATH + " = ?" ; String [ ] selectionArgs = { StoragePathProvider . getRelativeFilePath ( formsPath , path ) } ; return queryForForm ( selection , selectionArgs ) ; }
public void buryCards ( long [ ] cids ) { buryCards ( cids , false ) ; }
public boolean hasUsedSavepoint ( ) { return data != null && data . hasUsedSavepoint ( ) ; }
public static ClearSmartPlaylistDialog create ( AbsSmartPlaylist playlist ) { ClearSmartPlaylistDialog dialog = new ClearSmartPlaylistDialog ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "playlist" , playlist ) ; dialog . setArguments ( args ) ; return dialog ; }
private void setupViewPager ( ViewPager viewPager ) { viewPagerAdapter = new ViewPagerAdapter ( this ) ; viewPager . setAdapter ( viewPagerAdapter ) ; }
public OdysseyFragment getRegisteredFragment ( int position ) { return mRegisteredFragments . get ( position ) ; }
public static final TimestampBound ANY = new TimestampBound ( ) { @ Override public boolean verifyTimestamp ( long timestamp ) { return true ; } } ;
public int compare ( MoodleMember lhs , MoodleMember rhs ) { return lhs . getFullname ( ) . toLowerCase ( ) . trim ( ) . compareTo ( rhs . getFullname ( ) . toLowerCase ( ) . trim ( ) ) ; }
private void afterLoadWallet ( ) { }
public void setAddresses ( ArrayList < String > addresses ) { this . addresses = addresses ; }
public void digitsNumberShouldNotBeLimited ( ) { getActualWidget ( ) . answerText . setText ( "123456789123456789123456789123456789" ) ; assertEquals ( "123456789123456789123456789123456789" , getActualWidget ( ) . getAnswerText ( ) ) ; }
public void opponentChooseScissor ( ) { player2Entity = new ScissorHandBody ( world , ( ScissorHandModel ) MatchModel . getInstance ( ) . setOpponentChoice ( "scissor" ) ) ; player2Entity . setLinearVelocity ( 0f , - 200f ) ; }
public void onReceive ( Context inContext , Intent inIntent ) { Log . d ( Utils . getAppTag ( ) , "onReceive ( Context inContext , Intent inIntent ) " ) ; NotificationServiceC . setServiceNotificationAll ( inContext ) ; }
private String getSipTransportType ( ) { if ( ! shouldUseTls ( ) ) { LogHelper . using ( mRemoteLogger ) . logNoTlsReason ( ) ; return TRANSPORT_TYPE_STANDARD ; } return TRANSPORT_TYPE_SECURE ; }
public ArticleTagsDeleteItem setTagIds ( Iterable < String > tagIds ) { queueItem . setExtra ( TextUtils . join ( QueueItem . DELETED_TAGS_DELIMITER , tagIds ) ) ; return this ; }
private File repoDirectoryFile ( String filePath ) { return new File ( repoPath ( ) , filePath ) ; }
public void showTrackSchedule ( int position ) { NamedDTO track = tracks . get ( position ) ; wireframe . showTrackSchedule ( track , view ) ; }
public void onEmailDeveloperClicked ( View v ) { AppUtils . emailDeveloper ( this ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { EntityIdentity i1 = prev . get ( oldItemPosition ) ; EntityIdentity i2 = next . get ( newItemPosition ) ; return i1 . id . equals ( i2 . id ) ; }
public void setSingleTapEnabled ( boolean value ) { singleTapEnabled = value ; }
public void close ( ) { setControlCommand ( CDC_SET_CONTROL_LINE_STATE , CDC_CONTROL_LINE_OFF , null ) ; killWorkingThread ( ) ; killWriteThread ( ) ; connection . releaseInterface ( mInterface ) ; connection . close ( ) ; }
public void setId ( int id ) { idValue = id ; }
public void setWallet ( WalletRealmObject wallet ) { this . wallet = wallet ; }
public void getExternalBounds ( RectF out ) { if ( boundsRotation == 0f ) { out . set ( bounds ) ; } else { tmpMatrix . setRotate ( boundsRotation , boundsPivotX , boundsPivotY ) ; tmpMatrix . mapRect ( out , bounds ) ; } }
public void setNotes ( byte [ ] notes ) { this . notes = notes ; }
public void onContextualMenuItemClicked ( MenuItem item ) { for ( ActionModeChangeListener actionModeChangeListener : mActionModeChangeListener ) { actionModeChangeListener . onContextualMenuItemClicked ( item . getItemId ( ) , mPager . getCurrentItem ( ) ) ; } }
private void setSortOrder ( SortOrder sortOrder ) { data . edit ( ) . putString ( "sortorder" , sortOrder . name ( ) ) . apply ( ) ; }
public TestRoboCursor ( ) { setColumnNames ( Arrays . asList ( EventsQueryHandler . PROJECTION ) ) ; }
public void onClick ( View v ) { eventManager . fire ( new KursClickEvent ( creationTime ) ) ; }
public RangeDecimalWidget ( Context context , FormEntryPrompt prompt ) { super ( context , prompt ) ; }
public void onAnimationEnd ( Animation animation ) { card . mView . setVisibility ( View . INVISIBLE ) ; showCard ( card ) ; }
private void executeCommand ( ) { inputProcessor . executeCommand ( ( cmdLine . getText ( ) . toString ( ) + "\n" ) . getBytes ( ) ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new EventsViewModel ( burstNetworkService , burstInfoService ) ; }
public void GetListeDepartementAsync ( ) { executeAsync ( new Functions . IFunc < ArrayOfService > ( ) { public ArrayOfService Func ( ) throws java . lang . Exception { return GetListeDepartement ( ) ; } } ) ; }
private void changeManualPrefs ( ) { boolean isChecked = binding . notificationDismissPrefs . isChecked ( ) ; binding . notificationDismissPrefs . setChecked ( ! isChecked ) ; mPrefs . setManualRemoveEnabled ( ! isChecked ) ; }
public static void login ( @ NonNull Fragment fragment , int requestCode ) { Intent intent = new Intent ( fragment . getActivity ( ) , LoginActivity . class ) ; intent . setAction ( INTENT_ACTION_LOGIN ) ; fragment . startActivityForResult ( intent , requestCode ) ; }
public void markAsRead ( final Context context ) { final RedditAccount user = RedditAccountManager . getInstance ( context ) . getDefaultAccount ( ) ; RedditChangeDataManagerVolatile . getInstance ( user ) . markRead ( RRTime . utcCurrentTimeMillis ( ) , src ) ; refreshView ( context ) ; }
public long getViewDataId ( ) { return getId ( ) . hashCode ( ) ; }
public void setup ( ) { mView = mock ( ProfileView . class ) ; mPresenter = spy ( new ProfilePresenter ( getValidFriendUsername ( ) , mView ) ) ; }
public void close ( ) { mCommandConnection . close ( ) ; mDataConnection . close ( ) ; mIsConnected = false ; mConnectionWatch . close ( ) ; }
public TrimmedEditTextPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfPoison_Info ) ; }
private static Tweet tweetWithRetweetedStatus ( int i ) { Tweet retweetedStatus = tweet ( i , null , null , null , user ( i , "リツイートされた人" ) ) ; return tweet ( i , entities ( ) , retweetedStatus , null , user ( i ) ) ; }
private void showSnooze ( ) { binding . delayForPrefs . setDetailText ( String . format ( Locale . getDefault ( ) , getString ( R . string . x_minutes ) , String . valueOf ( mPrefs . getSnoozeTime ( ) ) ) ) ; }
public ArrayList < AmountUnitPhone > getQuantities ( ) { return quantities ; }
public void popAllFragments ( ) { getFragmentManagerCompat ( ) . popBackStack ( null , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public String getName ( ) { return mName ; }
public void setEnabled ( boolean enabled ) { this . isEnabled = true ; }
public Optional < File > getFile ( ) { return Optional . ofNullable ( getExistingCacheFile ( id ) ) ; }
public List < ResideMenuItem > getMenuItems ( int direction ) { if ( direction == DIRECTION_LEFT ) return leftMenuItems ; else return rightMenuItems ; }
public static void startQuery ( AsyncQueryHandler handler , int token ) { handler . cancelOperation ( token ) ; handler . startQuery ( token , null , Threads . CONTENT_URI , ALL_THREADS_PROJECTION , null , null , Threads . DEFAULT_SORT_ORDER ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . settings , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public static boolean isHighlightRecordWithAttach ( ) { return getBoolean ( R . string . pref_key_is_highlight_attach , false ) ; }
public void onSuccess ( String s ) { Toast . makeText ( StartupScreen . this , "Succesfully" , Toast . LENGTH_LONG ) . show ( ) ; if ( ! isIntermideate ) handler . sendEmptyMessage ( FFMPEG_SUCESS_MSG ) ; else progressBar . dismiss ( ) ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mMedias . get ( 0 ) ) ; }
public TimerPickerView . TimerListener getTimerListener ( ) { return mTimerListener ; }
private void init ( ) { setHasFixedSize ( true ) ; setLayoutManager ( new AgendaLinearLayoutManager ( getContext ( ) ) ) ; addItemDecoration ( new DividerItemDecoration ( getContext ( ) ) ) ; setItemAnimator ( null ) ; }
public int getThemeResource ( ) { return isTorrent ( ) ? R . style . AppTheme_NoActionBar_Torrent : R . style . AppTheme_NoActionBar_URI ; }
private void clearCurrentRequestObservable ( ) { mRxLoginCacheHelper . clear ( ) ; }
public void closeToLeft ( ) { if ( viewDragHelper . smoothSlideViewTo ( dragView , - transformer . getOriginalWidth ( ) , getHeight ( ) - transformer . getMinHeightPlusMargin ( ) ) ) { ViewCompat . postInvalidateOnAnimation ( this ) ; notifyCloseToLeftListener ( ) ; } }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mRxPermissions = RxPermissions . getInstance ( this ) ; }
public void setShowCategory ( boolean showCategory ) { isShowCategory = showCategory ; }
public static double getAvailableExternalMemorySize ( int unit ) { try { return getAvailableSpace ( XMLPrefsManager . get ( File . class , XMLPrefsManager . Behavior . external_storage_path ) , unit ) ; } catch ( Exception e ) { return - 1 ; } }
public void onResponse ( Call < Void > call , Response < Void > response ) { if ( Tools . apiIsSuccessfulNoThrow ( response ) ) { friendsRelation = null ; setButtonFriends ( 1 ) ; } else setButtonFriends ( - 1 ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; Timber . d ( "Scrolled : %d %d" , dx , dy ) ; fingerAnchorY -= dy ; }
public void onClick ( View v ) { presenter . beginOrder ( ) ; }
public int getItemCount ( ) { s = feeds . size ( ) ; return s == 0 ? 1 : s + 1 ; }
private static boolean isInC40Shift1Set ( char ch ) { return ch >= 0 && ch <= 31 ; }
public void invisible ( RecipeCreationDialogView view ) { authorsPresenter . invisible ( view . getAuthorsView ( ) ) ; categoriesPresenter . invisible ( view . getCategoriesView ( ) ) ; }
public int getVersionNumber ( ) { return 7 ; }
private void updateIfNecessary ( ) { updateNotificationState ( ) ; startService ( new Intent ( this , WidgetUpdateService . class ) ) ; }
public void getMovementArea ( State state , RectF out ) { movBounds . set ( state ) . getExternalBounds ( out ) ; }
private double ounceToton ( double num ) { return num * 0 . 0000283 ; }
public void getServerStatus ( ) { JSONObject request = jsonRequest ( "Server . GetStatus" , null ) ; tcpClient . sendMessage ( request . toString ( ) ) ; }
public int getErrorCode ( ) { return mErrorCode ; }
public Integer getApprovedPrincipal ( ) { return approvedPrincipal ; }
public static int getBestImageHeight ( int imageType ) { return 0 ; }
public static boolean checkDownloadDirExist ( byte mode ) { String downloadDirPath = getDownloadDir ( mode ) ; File downloadDir = new File ( downloadDirPath ) ; return downloadDir . exists ( ) || downloadDir . mkdir ( ) ; }
public static < T > FindExecutor findFirstAsync ( Class < T > modelClass ) { return findFirstAsync ( modelClass , false ) ; }
public void onFavoriteListClick ( ) { mSelectedList = NO_LIST ; mSelectedContent = FAVORITE_CONTENT ; updateListLayout ( ) ; updateBookmarks ( ) ; mDrawerLayout . closeDrawer ( GravityCompat . START ) ; }
public void setOnNoteClickListener ( NotificationsListFragment . OnNoteClickListener mNoteClickListener ) { mOnNoteClickListener = mNoteClickListener ; }
public String name ( ) { return name ( Game . getVar ( R . string . Armor_Glyph ) ) ; }
public static void show ( @ NonNull View anchor , @ NonNull Toast toast ) { show ( anchor , toast , ADT_ESTIMATED_TOAST_HEIGHT_DIPS ) ; }
public void onSelect ( Integer target , Char selector ) { if ( target != null ) { item . cast ( selector , target ) ; } }
public void onClick ( View v ) { Intent intent2 = new Intent ( MainActivity . this , NoticeActivity . class ) ; startActivity ( intent2 ) ; }
public ExStringWidget createWidget ( ) { return new ExStringWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) ) ; }
public String getPathExt ( ) { return Config . APP_DIR + path ; }
public void addRealmObject ( BMI BMI ) { mSubscription = mBMIInteractor . realmCreate ( BMI ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( realmBMI -> mBMIEditView . showSaveSuccessMessage ( ) , throwable -> mBMIEditView . showSaveErrorMessage ( ) ) ; }
public void onBackPressed ( ) { saveConfig ( null ) ; }
public void paintShouldDrawTwoSectorsWithGivenColors ( ) { pieChart = new PieChart ( plot , new double [ ] { 1 , 1 } , new ColorWrap [ ] { ColorWrap . RED , ColorWrap . GREEN } ) ;
public String encryptBody ( String body ) { return encryptAndEncodeBytes ( body . getBytes ( ) ) ; }
public void onFolderSelection ( @ NonNull FolderChooserDialog dialog , @ NonNull File folder ) { sendDirectoryChooserEvent ( folder . exists ( ) ? folder . getAbsolutePath ( ) : null ) ; dialog . dismiss ( ) ; }
public static PosterViewState makeViewMoviesState ( List < MoviePoster > movies , Filter filter ) { return new PosterViewState ( movies , 0 , filter , false , false ) ; }
public SingleLiveEvent < Pair < Integer , ToDo >> getOnUndo ( ) { return mOnUndo ; }
public void onNewState ( String id , long timestamp , TriState newState ) { Result result = new Result ( timestamp , newState ) ; result . setDeferUntilGuaranteed ( false ) ; DeviceClient . getInstance ( context ) . sendExpressionData ( id , result ) ; }
public void sendPresencePacket ( final PresencePacket packet ) { this . sendPacket ( packet , null ) ; }
public void onImageTapped ( @ NotNull AztecAttributes attrs , int naturalWidth , int naturalHeight ) { onMediaTapped ( attrs , naturalWidth , naturalHeight , MediaType . IMAGE ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . dummy_fragment , container , false ) ; return view ; }
public void goToFragment ( Fragment fragment , String tag ) { getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . content_frame , fragment ) . commit ( ) ; this . invalidateOptionsMenu ( ) ; }
public void testSimpleParsing ( ) { mSubscriber . onEventMatchesLoaded ( mMatchesEvent ) ; mSubscriber . onEventAwardsLoaded ( mAwardsEvent ) ; DatafeedTestDriver . testSimpleParsing ( mSubscriber , new TeamAtEventSummarySubscriber . Model ( mStatus , mEvent ) ) ; }
public Builder clearTokenId ( ) { bitField0_ = ( bitField0_ & ~0x00000800 ) ; tokenId_ = 0 ; onChanged ( ) ; return this ; }
public String toString ( ) { return "IabResult : " + getMessage ( ) ; }
public void testTakeVideoFocusArea ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideoFocusArea" ) ; setToDefault ( ) ; subTestTakeVideo ( false , true , false , false , null , 5000 , false ) ; }
public static SpannableString buildDefaultMentionMessageFormat ( Context context ) { return MessageFormatSettingsActivity . buildPresetMessageFormat ( context , 0 , true ) ; }
public Tafseer ( ) { }
public void onClick ( View v ) { presenter . onTestMessageIconPress ( ) ; }
public static int minutesUntil ( Date date ) { if ( date == null ) { return 0 ; } long diff = new Date ( ) . getTime ( ) - date . getTime ( ) ; return ( int ) ( diff / 60000 ) ; }
public int getCount ( ) { return MainActivity . webWindows . size ( ) + 1 ; }
public void setServers ( List < PublicServer > servers ) { mServers = servers ; mServerProgress . setVisibility ( View . GONE ) ; mServerAdapter = new PublicServerAdapter ( getActivity ( ) , servers ) ; mServerGrid . setAdapter ( mServerAdapter ) ; }
public void testIsWPCOMURI6 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( wpcomAddress6 ) ) ) ; }
public void selectLiquidKeyboard ( String name ) { if ( name . matches ( "\\d + " ) ) selectLiquidKeyboard ( Integer . parseInt ( name ) ) ; else selectLiquidKeyboard ( TabManager . getTagIndex ( name ) ) ; }
private void initSbIconPrefs ( ) { binding . statusIconPrefs . setOnClickListener ( mSbIconClick ) ; binding . statusIconPrefs . setChecked ( mPrefs . isSbIconEnabled ( ) ) ; binding . statusIconPrefs . setDependentView ( binding . permanentNotificationPrefs ) ; }
public static FeedItemEvent updated ( FeedItem . . . items ) { return updated ( Arrays . asList ( items ) ) ; }
public Measure ( int _number , double _abscissa , double _ordinate , double _vE , double _vN ) { this . number = _number ; this . abscissa = _abscissa ; this . ordinate = _ordinate ; this . vE = _vE ; this . vN = _vN ; }
public String getName ( @ Nullable String . . . args ) { if ( args != null && args . length > 0 ) return String . format ( name , ( Object [ ] ) args ) ; else return name ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . SqlStatement parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public static String printHeader ( ) { return "Time\tReq_Duration\tConn_Duration\tDiscovery_Duration\tSetup_Duration\tStatus" ; }
private void doLoadReddit ( String url ) { RedditItemView v = ( RedditItemView ) findViewById ( R . id . reddit_item ) ; v . loadUrl ( this , url , progress ) ; }
private BroadcastReceiver mClearSelectionReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { recentListAdapter . clearSelection ( ) ; } } ;
public String desc ( ) { return Game . getVar ( R . string . CorpseDustBuff_Info ) ; }
public void setItems ( List < PeriodSpendings > items ) { spendings . clear ( ) ; spendings . addAll ( items ) ; notifyDataSetChanged ( ) ; }
public void reloadUrl ( String url ) { if ( getProgress ( ) < 100 ) { stopLoading ( ) ; } loadUrl ( BLANK ) ; mPendingUrl = url ; }
private double mmtoyard ( double num ) { return num * 0 . 00109 ; }
public void onClick ( View v ) { Intent intent = new Intent ( MainActivity . this , EditorActivity . class ) ; intent . putExtra ( EditorActivity . THEME_ID , themesView . getSelectedThemeId ( ) ) ; startActivity ( intent ) ; }
public AccountHeader withSelectionSecondLineShown ( boolean selectionSecondLineShown ) { this . mSelectionSecondLineShown = selectionSecondLineShown ; return this ; }
public static boolean networkUnavailable ( Context context ) { return ! networkAvailable ( context ) ; }
public boolean onPreferenceChange ( Preference preference , Object o ) { boolean isEnabled = ( boolean ) o ; NotificationsService . setNotificationServiceAlarm ( getActivity ( ) , isEnabled ) ; return true ; }
public static String ip_path ( ) { return gPrefs . getString ( IPTABLES_PATH , "auto" ) ; }
public void hideResetButton ( boolean isHidden ) throws IOException { synchronized ( mClientConnections ) { for ( ClientConnection con : mClientConnections ) con . hideResetButton ( isHidden ) ; } }
public static char byte2Ascii ( byte b ) { int decAsciiCode = ( int ) b ; if ( b >= 32 && b < 127 ) { char ch = ( char ) b ; return ch ; } else return ' . ' ; }
public void setProgress ( boolean status ) { if ( status ) mProgressDialog . show ( ) ; else mProgressDialog . dismiss ( ) ; }
private Class < ? > getAsyncDialogFragmentClass ( ) { if ( dialogFragment == null ) { fail ( "No async fragment shown" ) ; } return dialogFragment . getClass ( ) ; }
public void setContent ( String content ) { this . content = content ; }
public static void openURL ( Context context , String url , String referrer ) { openURL ( context , url , referrer , false ) ; }
private static int [ ] cloneDefaultColors ( ) { int length = sXterm256Paint . length ; int [ ] clone = new int [ length ] ; System . arraycopy ( sXterm256Paint , 0 , clone , 0 , length ) ; return clone ; }
private void prepareRatingRequest ( ) { RateThisApp . Config config = new RateThisApp . Config ( 3 , 10 ) ; RateThisApp . init ( config ) ; RateThisApp . onCreate ( this ) ; RateThisApp . showRateDialogIfNeeded ( this , R . style . DialogStyle ) ; }
public void onStopListening ( ) { Log . d ( TAG , "onStopListening" ) ; updateListener = null ; }
public int getItemCount ( ) { if ( null == mCursor ) return 0 ; return mCursor . getCount ( ) ; }
public ApplicationModule ( NewmApplication application ) { this . application = application ; }
public ScheduleOfTeacherRequest ( int teacherId ) { super ( TeacherSchedule . class , ScheduleApi . class ) ; this . teacherId = teacherId ; }
public boolean getPlayWhenReady ( ) { return player . getPlayWhenReady ( ) ; }
public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( qName . equalsIgnoreCase ( "item" ) ) currentResponse . items . put ( currentKey , currentValue ) ; }
public void onHelpEntrySelected ( HelpEntry entry ) { HelpEntryFragment f = new HelpEntryFragment ( ) ; f . setArguments ( entry . toBundle ( ) ) ; startFragment ( f , true ) ; }
public static LocalDate fromTimestamp ( Integer value ) { return ( value == null ) ? null : new LocalDate ( value / 10000 , ( value % 10000 ) / 100 , value % 100 ) ; }
public FilterView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( context , attrs ) ; }
public String getCounterPart ( ) { return this . message . getCounterpart ( ) ; }
public Polyinr withOpen ( int open ) { this . open = open ; return this ; }
public void onFail ( int errorCode , String msg ) { Log . e ( "SWELL" , String . format ( "Error retrieving %s battery info" , currentPerson . getPerson ( ) . getName ( ) ) ) ; }
public NewsArticlesRetrofitService getNewsWatcherService ( ) { return retrofit . create ( NewsArticlesRetrofitService . class ) ; }
public ValueFormatter getDefaultValueFormatter ( ) { return mDefaultValueFormatter ; }
public final V get ( Object key ) { return ! inRange ( key ) ? null : m . get ( key ) ; }
public void setCustomTabColorizer ( TabColorizer tabColorizer ) { mTabStrip . setCustomTabColorizer ( tabColorizer ) ; }
private void copyRecord ( TetroidRecord record ) { TetroidClipboard . copy ( record ) ; TetroidLog . logOperRes ( TetroidLog . Objs . RECORD , TetroidLog . Opers . COPY ) ; }
public void notifyChildrenOfGroupItemChanged ( int groupPosition ) { mAdapter . notifyChildrenOfGroupItemChanged ( groupPosition , null ) ; }
public A getValue ( ) { return getValue ( getCurrentKeyframe ( ) , getCurrentKeyframeProgress ( ) ) ; }
public void accept ( Integer integer ) throws Exception { paint . setColor ( integer ) ; }
public ApplicationsItemHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ApplicationsItemHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_application , parent , false ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; DcHelper . getContext ( getActivity ( ) ) . eventCenter . removeObservers ( this ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_search , menu ) ; }
private void collapsePodcastView ( ) { sliding_layout . setPanelHeight ( 0 ) ; }
public AboutElixsrActivity ( ) { super ( URL , TITLE ) ; }
private void setUpRepeatButton ( ) { updateRepeatState ( ) ; repeatButton . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { MusicPlayerRemote . cycleRepeatMode ( ) ; } } ) ; }
private void functionToInvokeOnForceTouch ( ) { Log . e ( TAG , "Function invoked ! " ) ; }
public void setSettingValue ( Id settingId , Object value ) { getSetting ( settingId ) . setValue ( value ) ; }
public Notification toNotification ( ) { Notification notification = new Notification ( ) ; notification . setTaskId ( taskId ) ; notification . setType ( ReminderService . TYPE_ALARM ) ; notification . setTimestamp ( currentTimeMillis ( ) ) ; return notification ; }
public Builder chooseButton ( @ StringRes int text ) { mChooseButton = text ; return this ; }
private int positionToRepeat ( int position ) { if ( position > REPEAT_MAX ) { return - 1 ; } else { return position ; } }
public void reset ( ConnectedActivity activity ) { reset ( activity , true ) ; }
public void addArticleSummary ( List < ArticleSummary > summaries ) { if ( ! mAdapter . containsAll ( summaries ) ) { mAdapter . clear ( ) ; mAdapter . addAll ( 0 , summaries ) ; } else { showNoMoreContent ( ) ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; SettingsUtils . unregisterOnSharedPreferenceChangeListener ( getActivity ( ) , this ) ; }
public int addItemGetId ( AdmissionPercentageData item ) { addItem ( item ) ; return getMaxLessonIdForAp ( item . admissionPercentageMetaId ) ; }
public static void teardown ( ) throws Exception { SharedPreferences sp = InstrumentationRegistry . getTargetContext ( ) . getSharedPreferences ( Constants . PREFERENCE_FILE_NAME , Context . MODE_PRIVATE ) ; sp . edit ( ) . clear ( ) . commit ( ) ; }
public void run ( ) { enableSensorNotifications ( ) ; }
public void onActionExit ( ) { TimeManager . INSTANCE . stop ( ) ; checkStopwatchState ( ) ; stopForeground ( true ) ; stopSelf ( ) ; }
public void onConnectionFailed ( @ NonNull ConnectionResult connectionResult ) { Toast . makeText ( this , "Connection problem ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public ListElement render ( ) { return new LabelValueListItem ( key , value ) ; }
public void onCommentChanged ( CommentStore . OnCommentChanged event ) { if ( event . causeOfChange == CommentAction . FETCH_COMMENT ) { onCommentFetched ( event ) ; } if ( event . causeOfChange == CommentAction . PUSH_COMMENT ) { onCommentPushed ( event ) ; } }
public String toString ( ) { return "DrawInfo { " + "page = " + page + " , index = " + index + ' } ' ; }
public int getLoggingRetryPeriod ( ) { return ( Utilities . parseIntWithDefault ( prefs . getString ( PreferenceNames . LOGGING_RETRY_TIME , "60" ) , 60 ) ) ; }
public void onReceive ( Context context , Intent intent ) { Log . w ( TAG , "onReceive" ) ; handleBluetoothStateChange ( ) ; }
public void nullTest ( ) { try { requestSender . sendRequest ( null , null ) ; Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; Assert . fail ( ) ; } }
private static int setPressureBonus ( Resources res , ImageView icon , TextView text , JsonObject data ) { return bonusCommon ( res , icon , text , data , "kPaRankingPointAchieved" , "kPaBonusPoints" ) ; }
public void swapAdapter ( Adapter adapter , boolean removeAndRecycleExistingViews ) { setLayoutFrozen ( false ) ; setAdapterInternal ( adapter , true , removeAndRecycleExistingViews ) ; setDataSetChangedAfterLayout ( ) ; requestLayout ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_contacts_importedContacts . TLdeserialize ( stream , constructor , exception ) ; }
private String [ ] getPageTitleAndDescription ( String url ) { return NetworkManager . loadTitleAndDescription ( url ) ; }
public String getRecordAudioChannelsPref ( ) { return sharedPreferences . getString ( PreferenceKeys . getRecordAudioChannelsPreferenceKey ( ) , "audio_default" ) ; }
public void testNotIndented2 ( ) throws IOException { onBook ( "* Note 1\n : LOGBOOK : \n : END : " ) . onLoad ( ) . isWhenSaved ( "* Note 1\n : LOGBOOK : \n : END : \n\n" ) ; }
public String getAuthorName ( ) { return StringUtils . notNullStr ( authorName ) ; }
public SimplifiedChineseContactUtils ( LocaleSet locales ) { super ( locales ) ; }
private void cancelTouch ( ) { mTouchPosition = - 1 ; mTouchRect = null ; invalidate ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setStyle ( DialogFragment . STYLE_NORMAL , R . style . Theme_AppCompat_Light_Dialog ) ; }
public boolean leechActionSuspend ( @ NonNull Card card ) { JSONObject conf ; conf = _cardConf ( card ) . getJSONObject ( "lapse" ) ; return conf . getInt ( "leechAction" ) == Consts . LEECH_SUSPEND ; }
public void onAttachedToRecyclerView ( RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; }
public void showError ( String errorText ) { if ( isAdded ( ) ) { Utils . showRedTopToast ( getActivity ( ) , errorText ) ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( mReceiver != null ) { unregisterReceiver ( mReceiver ) ; } }
public void drawImage ( Image image , RectF dst ) { Bitmap bitmap = image . getBitmap ( ) ; bitmap . prepareToDraw ( ) ; canvas . drawBitmap ( bitmap , image . getBounds ( ) , dst , drawPaint ) ; }
public Bundle saveHintsState ( ) { Bundle bundle = new Bundle ( ) ; if ( mSearchTeamHintsAdapter != null ) { bundle . putParcelableArray ( BUNDLE_ADAPTER_TEAMS , mSearchTeamHintsAdapter . onSaveInstanceState ( ) ) ; } return bundle ; }
public Class < ? extends DataRenderer > getRendererClass ( ) { return StepRenderer . class ; }
public void onBackPressed ( ) { hide ( ) ; Game . addToScene ( new WndModSelect ( ) ) ; }
public void run ( ) { Matrix m = function . ComputeFunction ( SquareList . get ( ClickPos ) ) ; Message message = new Message ( ) ; message . setData ( m . GetDataBundled ( ) ) ; myHandler . sendMessage ( message ) ; }
public void addMediaToDeleteQueue ( @ NonNull MediaModel media ) { getDeleteQueue ( ) . add ( media ) ; }
public void setTitle ( String mTitle ) { this . mTitle = mTitle ; }
public void setWidth ( float width ) { mWidth = width ; mGroup . setWidth ( width ) ; }
public String getDescription ( ) { switch ( type ) { case TcpClient : return tcpClient . getDescription ( ) ; case TcpServer : return tcpServer . getDescription ( ) ; default : throw new IllegalStateException ( "Inconsistent Connection" ) ; } }
public void whenPermissionIGranted_requestGeoTrace_setsFormIndexWaitingForData ( ) { activityGeoDataRequester . requestGeoTrace ( testActivity , prompt , "" , waitingForDataRegistry ) ; assertTrue ( waitingForDataRegistry . waiting . contains ( formIndex ) ) ; }
public void finish ( ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit ( ) . putInt ( FIRST_START_LAST_VERSION_KEY , FIRST_START_LATEST_VERSION ) . apply ( ) ; super . finish ( ) ; }
private void removeMediaFromPost ( ) { mEditorImageMetaData . markAsRemoved ( ) ; Intent intent = new Intent ( ) ; intent . putExtra ( ARG_EDITOR_IMAGE_METADATA , mEditorImageMetaData ) ; this . setResult ( Activity . RESULT_OK , intent ) ; finishActivity ( ) ; }
public String getName ( ) { return block . getName ( ) ; }
private void refreshActionBarSpinner ( ) { if ( mSpinnerAdapter != null ) { mSpinnerAdapter . notifyDataSetChanged ( ) ; } else { updateActionBarSpinner ( ) ; } }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Displacement_Txt ) , weaponName ) ; }
public void setNightTime ( String time ) { putString ( TIME_NIGHT , time ) ; }
public void onClick ( View view ) { scrollToPreviousPage ( ) ; }
public void bindTo ( TvEntity tvEntity ) { Picasso . get ( ) . load ( tvEntity . getPosterPath ( ) ) . placeholder ( R . drawable . ic_placeholder_empty ) . into ( binding . image ) ; }
public void onData ( NetworkDevice networkDevice , SensorData sensorData , float userSensitivity ) { mDataSinks . forEach ( sink -> sink . onData ( networkDevice , sensorData . clone ( ) , userSensitivity ) ) ; }
public void setRangeStepMode ( XYStepMode rangeStepMode ) { rangeStepModel . setMode ( rangeStepMode ) ; }
private double mtofoot ( double num ) { return num * 3 . 281 ; }
public boolean getFullScreenEnabled ( ) { return mPrefs . getBoolean ( Name . FULL_SCREEN , false ) ; }
public Loader < MessageList > onCreateLoader ( int id , Bundle args ) { AsyncContentLoader l = new AsyncContentLoader ( getSupportActivity ( ) , mMode ) ; showLoadingAnimation ( ) ; return l ; }
private void setSettingsSwitchesChecked ( boolean isMasterChecked ) { for ( String settingValue : mSettingsValues ) { final SwitchCompat toggleSwitch = mOptionsView . findViewWithTag ( settingValue ) ; if ( toggleSwitch != null ) { toggleSwitch . setChecked ( isMasterChecked ) ; } } }
public int getCount ( ) { if ( null != mFeatures ) { return mFeatures . size ( ) ; } return 0 ; }
public VeiculoGaragemAdapter ( Context context , List < Veiculo > Veiculos ) { this . context = context ; this . data = Veiculos ; inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public void onConnectionSuspended ( int i ) { Log . d ( TAG , "GoogleApiClient connection supended" ) ; nativeNearbyStatus ( 0 ) ; }
public void onDestroy ( ) { if ( getView ( ) != null ) { unbindDrawables ( getView ( ) . findViewById ( R . id . llMain ) ) ; } super . onDestroy ( ) ; System . gc ( ) ; }
private void loadPjsip ( ) throws LibraryInitFailedException { mRemoteLogger . d ( "Loading PJSIP" ) ; try { System . loadLibrary ( "pjsua2" ) ; mRemoteLogger . e ( "" + Log . getStackTraceString ( error ) ) ; throw new LibraryInitFailedException ( ) ; } }
private void thenCallbackShouldBeError ( ) { assertEquals ( true , mIsError ) ; }
public void onLocationChanged ( Location location ) { if ( location != null ) { userLocation = new MapLocationGPS ( location . getLatitude ( ) , location . getLongitude ( ) ) ; ; userLocationXY = coordinateService . convertLocationToXyPos ( userLocation ) ; } }
public boolean isContactInRoom ( Contact contact ) { return findUserByRealJid ( contact . getJid ( ) . asBareJid ( ) ) != null ; }
public int getIndexInEntries ( int xIndex ) { for ( int i = 0 ; i < getEntryCount ( ) ; i ++ ) { if ( xIndex == getEntryForIndex ( i ) . getXIndex ( ) ) return i ; } return - 1 ; }
public AddNewRepeatDialog clickPlus ( String repeatName ) { onView ( withId ( R . id . menu_add_repeat ) ) . perform ( click ( ) ) ; return new AddNewRepeatDialog ( repeatName , rule ) . assertOnPage ( ) ; }
public String type ( ) { return XMLPrefsManager . XMLPrefsSave . BOOLEAN ; }
public RotationGestureDetector ( Context context , OnRotationGestureListener listener ) { mListener = listener ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnStatusChangeListener ) { mListener = ( OnStatusChangeListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnFragmentInteractionListener" ) ; } }
public void onCompleted ( Object companion ) { AppLog . i ( AppLog . T . READER , "notifications update service > all tasks completed" ) ; stopSelf ( ) ; }
public VolumeBar ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public Fragment fragment ( ) { return WelcomeBasicFragment . newInstance ( drawableResId , title , description , showParallax , headerTypefacePath , descriptionTypefacePath , headerColor ) ; }
public int getChildrenCount ( int groupPosition ) { return this . _listDataChild . get ( this . _listDataHeader . get ( groupPosition ) ) . size ( ) ; }
public void setSpeakerRole ( PresentationSpeakerDTO speakerRole ) { this . speakerRole = speakerRole ; }
public Node ( Node parent , int depth , Channel channel ) { mParent = parent ; mChannel = channel ; mDepth = depth ; mExpanded = true ; }
public void onEnabled ( Context context , Intent intent ) { super . onEnabled ( context , intent ) ; Log . i ( "MaxLock Device Admin" , "Device admin is now active ! " ) ; }
public static void compressTo ( Context c , final FileHolder tbc , File compressTo ) { compressTo ( c , singletonList ( tbc ) , compressTo ) ; }
public ArticleDb getItematPosition ( int position ) { return mContacts . get ( position ) ; }
public void setGlideBack ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotationY ( 90 * fraction ) ; setPivotX ( 0 ) ; setPivotY ( getHeight ( ) / 2 ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( isDialogAvailable ( ) ) { this . setBorderless ( ) ; this . setOnBackListener ( ) ; } }
public boolean openPhoto ( final TLRPC . FileLocation fileLocation , final PhotoViewerProvider provider ) { return openPhoto ( null , fileLocation , null , null , 0 , provider , null , 0 , 0 ) ; }
private double kmtoinch ( double num ) { return num * 39370 . 0787 ; }
public void selectDate ( ) { TimeUtil . showDatePicker ( mContext , this , mYear , mMonth , mDay ) ; }
public void setUp ( ) { mDistrictTeams = ModelMaker . getModelList ( DistrictTeam . class , "2015ne_rankings" ) ; mSearchTeamKey = "frc1124" ; mNotFoundTeamKey = "frc254" ; mExtractor = new DistrictTeamExtractor ( mSearchTeamKey ) ; }
public void updateAdapter ( ) { if ( mRecyclerView != null && isAdded ( ) ) { refreshFab ( ) ; mFileModelAdapter . setList ( mFilesList ) ; } mSwipeRefreshLayout . setRefreshing ( false ) ; }
public void onEvent ( OnLogEntryChanged event ) { if ( currentTracker != null && currentTracker . id == event . entry . tracker_id ) { refresh ( ) ; } }
public StringHolder getDescription ( ) { return email ; }
public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; mProviderInfoRetriever . release ( ) ; }
public void catchUpAfterPause ( long delta ) { cT += delta ; }
public void onEvent ( SwitchFragmentEvent event ) { if ( CHILDREN . equals ( event . direction ) ) { animateBurger ( ARROW ) ; } else { animateBurger ( BURGER ) ; } }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( MYMUSICFRAGMENT_SAVED_INSTANCE_SEARCH_STRING , mSearchString ) ; }
private static MultipartBody . Part createMultipart ( String name , String value ) { RequestBody requestBody = RequestBody . create ( MediaType . parse ( "multipart/form - data" ) , value ) ; return MultipartBody . Part . createFormData ( name , null , requestBody ) ; }
public static void scanFile ( @ NonNull Uri uri , @ NonNull Context c ) { Intent mediaScanIntent = new Intent ( Intent . ACTION_MEDIA_SCANNER_SCAN_FILE , uri ) ; c . sendBroadcast ( mediaScanIntent ) ; }
public void setTypeface ( @ NonNull Typeface typeface ) { typeface ( typeface ) ; invalidate ( ) ; }
public BeaconPersistence ( Context context ) { beaconDbHelper = new BeaconDbHelper ( context ) ; }
public static String getLocalisedSettingGroupName ( String notLocalised ) { return Localization . get ( "settings . " + notLocalised ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_detail , container , false ) ; ButterKnife . inject ( this , view ) ; return view ; }
public int hashCode ( ) { return Objects . hash ( scheduleType , query , type , title , timestamp , schedule ) ; }
public static String ua ( final Context context ) { final String canonicalName = RedReader . class . getCanonicalName ( ) ; return canonicalName . substring ( 0 , canonicalName . lastIndexOf ( ' . ' ) ) + " - " + version ( context ) ; }
public SharedPreferences provideSharedPrefs ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public void onBindViewHolder ( @ NonNull TimerViewHolder holder , int position ) { holder . textViewNumber . setText ( numbers [ position ] ) ; holder . setTimerListener ( timeObservable , rxSubs ) ; }
public void onEvent ( EventBusMSGNormal msg ) { switch ( msg . eventBusMSG ) { case EventBusMSG . TRACKLIST_SELECT : case EventBusMSG . TRACKLIST_DESELECT : ActivateActionModeIfNeeded ( ) ; } }
public void init ( ExtractorOutput output ) { output . seekMap ( new SeekMap . Unseekable ( C . TIME_UNSET ) ) ; trackOutput = output . track ( 0 ) ; output . endTracks ( ) ; trackOutput . format ( format ) ; }
public static boolean isSearchInIds ( ) { return getBoolean ( R . string . pref_key_search_ids , DEF_SEARCH_IN_IDS ) ; }
public GameManager ( Context context ) { this . context = context ; create ( 41 ) ; }
public void onReceivedData ( byte [ ] liveLogData ) { Settings . serialIOPorts [ Settings . USBIO_IFACE_INDEX ] . onReceivedData ( liveLogData ) ; }
public boolean isPrimary ( ) { return this . primary == 1 ; }
public int getCo ( ) { return co ; }
public void clearPhoto ( ) { currentPhotoUri = null ; photoPanelLayout . setVisibility ( View . GONE ) ; }
public ChartMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; mContent = ( TextView ) findViewById ( R . id . tvContent ) ; }
public void run ( ) { emojiBmp [ page ] [ page2 ] = bitmap ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . emojiDidLoaded ) ; }
public double getLongitude ( ) { return this . _longitude ; }
public BookCategory createFromParcel ( Parcel source ) { return new BookCategory ( source ) ; }
public void onEvent ( OnWifiUpdateCompleted event ) { if ( currentTracker == null ) return ; if ( event . success && currentTracker . equals ( event . tracker ) ) { updateStatisticalValues ( event . tracker ) ; } }
public void onBridgedAdapterItemRangeRemoved ( @ NonNull RecyclerView . Adapter source , Object tag , int positionStart , int itemCount ) { onHandleWrappedAdapterItemRangeRemoved ( source , ( List < ComposedChildAdapterTag > ) tag , positionStart , itemCount ) ; }
public void setV ( Integer v ) { this . v = v ; }
public Album loadInBackground ( ) { return AlbumLoader . getAlbum ( getContext ( ) , albumId ) ; }
public void clearAnimation ( ) { mTableLayout . clearAnimation ( ) ; }
public void onClick ( View v ) { showAboutDialog ( ) ; }
public void sha1FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "640ab2bae07bedc4c163f679a746f7ab7fb5d1fa" , HashCalculator . newInstance ( HashType . SHA_1 ) . fromString ( inputText ) ) ; }
public int getDrawerBackgroundColor ( ) { return getInt ( R . string . pref_key__drawer_background_color , rcolor ( R . color . darkTransparent ) ) ; }
public int deleteAllNonTemplateTransactions ( ) { String where = TransactionEntry . COLUMN_TEMPLATE + " != 0" ; return mDb . delete ( mTableName , where , null ) ; }
private void selectShaderAndUpdate ( long id ) { selectShader ( id ) ; getShadersAsync ( ) ; }
public int getItemCount ( ) { return REDDIT_SECTION_ITEMS + 1 ; }
public void onScrollEnd ( ForecastAdapter . ViewHolder holder , int position ) { }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . shane . smartform" , appContext . getPackageName ( ) ) ; }
public void onSingleClick ( View v ) { dataSet . loadMore ( v . getContext ( ) , ( SubmissionsView ) displayer , false , dataSet . subreddit ) ; }
public static ArrayList < Song > getArtistSongList ( @ NonNull final Context context , final int artistId ) { return SongLoader . getSongs ( makeArtistSongCursor ( context , artistId ) ) ; }
public void run ( ) { Toast . makeText ( activity , R . string . title_unexpected_error , Toast . LENGTH_LONG ) . show ( ) ; cancelled . run ( ) ; }
public void write ( List < DistrictTeam > districtTeams , Long lastModified ) { mDb . getDistrictTeamsTable ( ) . add ( ImmutableList . copyOf ( districtTeams ) , lastModified ) ; }
public boolean saveIfNotExist ( String . . . conditions ) { if ( ! LitePal . isExist ( getClass ( ) , conditions ) ) { return save ( ) ; } return false ; }
public void resumeDownloads ( ) { DownloadScheduler . runAll ( false ) ; }
private void checkBluetoothStatus ( ) { if ( ! mBleWrapper . isBtEnabled ( ) ) { Intent enableBT = new Intent ( BluetoothAdapter . ACTION_REQUEST_ENABLE ) ; startActivity ( enableBT ) ; } }
public int getItemCount ( ) { return playlists . size ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . invite ( buffer . getCid ( ) , input . getText ( ) . toString ( ) , selected_user . nick ) ; dialog . dismiss ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "gis2018 . udacity . pomodoro" , appContext . getPackageName ( ) ) ; }
public String getW ( ) { return w ; }
public String getTime ( ) { return timerSwitch ? mLeftTime : "00 : 00" ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitFileConstant ( this ) ; else return visitor . visitChildren ( this ) ; }
public static void setOnDatabaseChangedListener ( OnDatabaseChangedListener listener ) { mOnDatabaseChangedListener = listener ; }
private boolean shouldTimerBeRunning ( ) { return isVisible ( ) && ! isInAmbientMode ( ) ; }
public StopRequest checkPauseStop ( ) { if ( pause ) return new StopRequest ( STATUS_PAUSED , "Download paused" ) ; else if ( stop || Thread . currentThread ( ) . isInterrupted ( ) ) return new StopRequest ( STATUS_STOPPED , "Download cancelled" ) ; return null ; }
public boolean onTouchEvent ( MotionEvent event ) { ges . onTouchEvent ( event ) ; return false ; }
public void onResume ( ) { super . onResume ( ) ; getLoaderManager ( ) . initLoader ( 0 , null , this ) ; m_activity . invalidateOptionsMenu ( ) ; }
public Stack ( int initialCapacity ) { mData = new ArrayList <> ( initialCapacity ) ; }
private void launchApp ( ) { activityTestRule . launchActivity ( HomeActivity . Factory . getIntent ( getInstrumentation ( ) . getContext ( ) ) ) ; }
public boolean onCheckCanStartDrag ( BaseViewHolder holder , int position , int x , int y ) { return ! isHeader ( position ) ; }
public void testNoMessageText ( ) { mJsonData . get ( APIStatusDeserializer . MESSAGE_DICT ) . getAsJsonObject ( ) . remove ( APIStatusDeserializer . MESSAGE_TEXT ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public void testLoadingChineseLipsum ( ) throws IOException { onBookFile ( "lipsum/Chinese - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
private static PlantCollection getPlants ( ) { if ( plants == null ) { plants = new PersistentPlantCollection ( ) ; } return plants ; }
public void emptyDataManager_CausesOutOfBoundsException ( ) { DataManager m = new DataManager ( InstrumentationRegistry . getTargetContext ( ) . getResources ( ) , "inexisting_path" ) ; DataEntryIterator dei = new DataEntryIterator ( m ) ; dei . getNext ( ) ; }
public int onGetGroupItemSwipeReactionType ( MyGroupViewHolder holder , int groupPosition , int x , int y ) { if ( onCheckGroupCanStartDrag ( holder , groupPosition , x , y ) ) { return Swipeable . REACTION_CAN_NOT_SWIPE_BOTH_H ; } return Swipeable . REACTION_CAN_SWIPE_BOTH_H ; }
public void onFailure ( Call < ResVersionCheck > call , Throwable t ) { if ( IS_SHOWLOG ) { WLog . w ( "onCheckAppVersion onFailure " + t . getMessage ( ) ) ; } onNetworkDialog ( ) ; }
private void initDates ( Note note , NoteViewHolder holder ) { String dateText = getDateText ( mActivity , note ) ; holder . date . setText ( dateText ) ; }
private static void saveIntPreference ( Context context , String key , int value ) { SharedPreferences . Editor appPreferences = getDefaultSharedPreferences ( context . getApplicationContext ( ) ) . edit ( ) ; appPreferences . putInt ( key , value ) ; appPreferences . apply ( ) ; }
private void loginSuccessful ( ) { savePassword ( ) ; openMundraubRules ( ) ; finish ( ) ; }
public MmsNotificationAttachment ( int status , long size ) { super ( "application/mms" , getTransferStateFromStatus ( status ) , size , null , null , null , null , null , null , false , 0 , 0 , false ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; mDrawerToggle . onConfigurationChanged ( newConfig ) ; selectItem ( mLastPosition , 0 ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return modelClass . cast ( new SearchViewModel ( searchRepository ) ) ; }
public void onClick ( View view ) { MainActivity . t1 . speak ( RssAdapter . items . get ( position ) . getTitle ( ) . toString ( ) , TextToSpeech . QUEUE_FLUSH , null ) ; }
public void showNothingTipsIfNeed ( ) { mNoContentTipsView . setVisibility ( mArticleAdapter . isEmpty ( ) ? View . VISIBLE : View . GONE ) ; }
private void prepareToRestorePosition ( boolean savePosition ) { if ( savePosition ) positionToRestore = getReadingPosition ( ) ; webViewHeightBeforeUpdate = webViewContent . getHeight ( ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getRecipeFoodDbDao ( ) : null ; }
public static SongDetailDialog create ( Song song ) { SongDetailDialog dialog = new SongDetailDialog ( ) ; Bundle args = new Bundle ( ) ; args . putParcelable ( "song" , song ) ; dialog . setArguments ( args ) ; return dialog ; }
public void addSplitCategoryToTheTop ( ) { Category splitCategory = db . getCategory ( Category . SPLIT_CATEGORY_ID ) ; categories . insertAtTop ( splitCategory ) ; }
public GameHelper ( Activity activity , int clientsToUse ) { mActivity = activity ; mAppContext = activity . getApplicationContext ( ) ; mRequestedClients = clientsToUse ; mHandler = new Handler ( ) ; }
public void onClick ( View v ) { showKursDialog ( new Kurs ( Calendar . getInstance ( ) . getTimeInMillis ( ) , true , 1 , "D" ) ) ; }
public static void showFailedTestNotification ( Context context ) { if ( NetMonPreferences . getInstance ( context ) . getShowNotificationOnTestFailure ( ) ) { showNotification ( context , NOTIFICATION_ID_FAILED_TEST , R . string . warning_notification_ticker_test_failed , R . string . warning_notification_message_test_failed , LogActivity . class ) ; } }
public int hashCode ( ) { return Arrays . hashCode ( hours ) ; }
public FontSizeListPreference ( final Context context , final AttributeSet attrs , final int defStyleAttr , final int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; getDelegate ( ) . onConfigurationChanged ( newConfig ) ; }
public DrawerBuilder withSliderBackgroundColor ( int sliderBackgroundColor ) { this . mSliderBackgroundColor = sliderBackgroundColor ; return this ; }
public String getCommentAN ( ) { if ( commentAN == null ) commentAN = GGApp . deleteNonAlphanumeric ( comment ) ; return commentAN ; }
private void scrollToCommentId ( long commentId ) { int position = getCommentAdapter ( ) . positionOfCommentId ( commentId ) ; if ( position > - 1 ) { mRecyclerView . scrollToPosition ( position ) ; } }
public AnimatorBuilder setFloatValues ( float . . . values ) { this . values = values ; return this ; }
public void start ( Attributes attributes ) { mCurrentThread = new Topic ( Integer . parseInt ( attributes . getValue ( Post . Xml . IN_THREAD_ID_ATTRIBUTE ) ) ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; inTabsContainer = getArguments ( ) . getBoolean ( EXTRA_IN_TABS_CONTAINER ) ; }
public DataSource < Integer , Conversation > create ( ) { return new ConversationsDataSource ( mContext , mHandler ) ; }
public void stopped ( ) { playButton . setImageDrawable ( getResources ( ) . getDrawable ( R . drawable . play96 ) ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mBookSearchListener = null ; }
public void onTeamRequest ( int teamId ) { mTeamsLocationsMapPresenter . loadTeam ( teamId ) ; }
public static void log ( Context context , String s , int duration ) { log ( context , s , Types . INFO , duration ) ; }
public static int dpToPx ( float dp , Resources resources ) { float px = TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , dp , resources . getDisplayMetrics ( ) ) ; return ( int ) px ; }
public int [ ] getSites ( ) { return mSites ; }
public void onLocationChangedSlightly ( fr . free . nrw . commons . location . LatLng latLng ) { Timber . d ( "Location slightly changed" ) ; if ( isMapBoxReady && latLng != null &&! isUserBrowsing ( ) ) { handleLocationUpdate ( latLng , LOCATION_SLIGHTLY_CHANGED ) ; } }
public int getItemCount ( ) { return mLauncherIcons . length ; }
public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { return GestureController . this . onSingleTapConfirmed ( e ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { area = Area . readArea ( dataInputStream ) ; }
public void onBackPressed ( ) { if ( mIsSettingsPanelOpen ) { closeSettingsPanel ( ) ; return ; } super . onBackPressed ( ) ; }
private void executeTermuxTaskCommand ( ExecutionCommand executionCommand ) { if ( executionCommand == null ) return ; Logger . logDebug ( LOG_TAG , "Executing background \"" + executionCommand . getCommandIdAndLabelLogString ( ) + "\" TermuxTask command" ) ; TermuxTask newTermuxTask = createTermuxTask ( executionCommand ) ; }
public LoginRequest ( String username , String appKey ) { this . username = username ; this . appKey = appKey ; }
public FieldView dateToErrorView ( ) { return new FieldView ( R . id . date_to_error ) ; }
public void onAnimationEnd ( Animator animation ) { for ( FloatingActionButton fab : fabs ) { fab . setLayerType ( View . LAYER_TYPE_NONE , null ) ; fab . setClickable ( true ) ; } }
private void publishOpenPGPPublicKey ( Account account ) { if ( ManageAccountActivity . this . hasPgp ( ) ) { announcePgp ( selectedAccount , null , onOpenPGPKeyPublished ) ; } else { this . showInstallPgpDialog ( ) ; } }
public ViewGroup getPromptParentView ( ) { return ( ViewGroup ) getWindow ( ) . getDecorView ( ) ; }
public void onProgressFinished ( ) { if ( step == 0f ) return ; builder . setProgress ( 0 , 0 , false ) ; notificationManager . notify ( 0 , builder . build ( ) ) ; }
public void write ( byte [ ] buffer , int offset , int length ) { try { out . write ( buffer , offset , length ) ; } catch ( IOException e ) { hasErrors = true ; } }
public ArrayList < String > getDependencies ( ) { return dependencies ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { showFragmentsAt ( position ) ; }
public void onClick ( View view ) { AnswerJudge ( findViewById ( idButton [ n ] ) ) ; }
public Matches getMatchesTable ( ) { return mMatchesTable ; }
public final boolean register ( final Context context , final Class < ? extends Activity > activity ) { if ( ! SimlarService . isRunning ( ) ) { return false ; } startServiceAndRegister ( context , activity , true , null ) ; return true ; }
public boolean onStartJob ( JobParameters job ) { return false ; }
public @ NonNull HistoryPortion dataPortion ( ) { return historyPortion ; }
public void setupTest ( ) { MockitoAnnotations . initMocks ( RecentPageModelTest . this ) ; }
public List < PariyattiFeedItem > parse ( ) { return parse ( PariyattiFeedItem . class ) ; }
public DateTime ( ) { this ( DateTimeUtils . currentTimeMillis ( ) ) ; }
public int getItemCount ( ) { if ( null == categoriesList ) return 0 ; return categoriesList . size ( ) ; }
public void onShareClick ( LogEventWrapper wrapper ) { LogEvent event = wrapper . getEvent ( ) ; Utils . shareLink ( getActivity ( ) , event . getBody ( ) , event . getTag ( ) ) ; }
public void write ( byte [ ] b , int off , int len ) throws IOException { fileOutputStream . write ( b , off , len ) ; }
public void run ( ) { doHighlightedStuff ( holder , n , baseNode , false , true ) ; }
public void onLocationAcquired ( Location location ) { if ( foundContextBot != null && foundContextBot . bot_inline_geo ) { lastKnownLocation = location ; searchForContextBotResults ( foundContextBot , searchingContextQuery , "" ) ; } }
public int hashCode ( ) { int result = id ; result = 31 * result + name . hashCode ( ) ; result = 31 * result + songCount ; return result ; }
public final void drawTriangleStrip ( int vertices ) { GLES20 . glDrawArrays ( GLES20 . GL_TRIANGLE_STRIP , 0 , vertices ) ; }
public void onItemClick ( @ SuppressWarnings ( "unused" ) View view ) { navigator . navigateToSessionDetail ( mySession . session ) ; }
public NetTask setOnFinishRequest ( OnFinishRequest when ) { onFinishRequest_callback = when ; return this ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( KEY_SEARCH_TERM , searchTerm ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; fireViewCreated ( ) ; }
public void onPromptStateChanged ( final MaterialTapTargetPrompt prompt , final int state ) { if ( mPromptStateChangeListener != null ) { mPromptStateChangeListener . onPromptStateChanged ( prompt , state ) ; } }
public void show ( ) { super . show ( ) ; DrawContext . scene . setScrollFocus ( pane ) ; rebuild ( ) ; }
public void handleMessage ( Message msg ) { super . handleMessage ( msg ) ; if ( msg . what == BleMsg . MSG_SPLIT_WRITE ) { write ( ) ; } }
private void init ( View view ) { lvCurrencies = ( ListView ) view . findViewById ( R . id . ListView01 ) ; tvLastUpdate = ( TextView ) view . findViewById ( R . id . tvLastUpdate ) ; }
private void prepMap ( ) { when ( map . addTile ( any ( Layer . class ) , any ( String . class ) ) ) . thenReturn ( new TileOverlay ( new FakeZZW ( ) ) ) ; presenter . onMapReady ( null ) ; }
public HistoryPlaylist ( @ NonNull Context context ) { super ( context . getString ( R . string . history ) , R . drawable . ic_access_time_black_24dp ) ; }
private void setHotItem ( TripItem parHotItem ) { mHotItem = parHotItem ; }
public void onCreate ( SQLiteDatabase inDatabase ) { ItemTableM . createTable ( inDatabase ) ; PatternTableM . createTable ( inDatabase ) ; }
public NutrientLevelListAdapter ( Context context , ArrayList < NutrientLevelItem > navDrawerItems ) { this . context = context ; this . nutrientLevelItems = navDrawerItems ; }
public boolean hasMore ( ) { return true ; }
public void run ( ) { try { } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . PeerAddress prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onClick ( View v ) { int current = getItem ( + 1 ) ; if ( current < layouts . length ) { viewPager . setCurrentItem ( current ) ; } else { launchHomeScreen ( ) ; } }
public void shutdown ( ) { stopSpeaking ( ) ; textToSpeech . shutdown ( ) ; listener = null ; }
private AppCompatActivity getActivity ( ) { return activity ; }
public void setBufferText ( boolean bufferText ) { this . bufferText = bufferText ; }
public void onCreate ( Activity activity ) { currentLocale = getSelectedLocale ( activity ) ; setActivityLocale ( activity , currentLocale ) ; }
public void onTransitionEnd ( Transition transition ) { circularWebViewReveal ( ) ; }
private void cacheFile ( ) { if ( mFileobj == null ) { openFile ( ) ; } }
static public String getDisplayAmount ( long amount ) { return getDisplayAmount ( amount , 20 ) ; }
public void onDone ( String utteranceId ) { try { Thread . sleep ( afterAnswerDelay ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } synchronized ( trainer ) { trainer . notify ( ) ; } }
public static void addKeepAliveExtra ( Context context , Intent intent ) { Intent keepAliveIntent = new Intent ( ) . setClassName ( context . getPackageName ( ) , KeepAliveService . class . getCanonicalName ( ) ) ; intent . putExtra ( EXTRA_CUSTOM_TABS_KEEP_ALIVE , keepAliveIntent ) ; }
public String nodePublicKey ( ) { return appKit . eclairKit . nodeParams ( ) . privateKey ( ) . publicKey ( ) . toBin ( ) . toString ( ) ; }
public Maybe < Tag > edit ( Tag entity ) { return cacheManager . edit ( entity ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnCompartmentBagSelectListener ) { mListener = ( OnCompartmentBagSelectListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnCompartmentBagSelectListener" ) ; } }
public int getColumnCount ( int i ) { return 1 ; }
public CountersBinder ( TagEntry viewObject ) { this . tagEntry = viewObject ; }
public void registerAdapterDataObserver ( AdapterDataObserver observer ) { mObservable . registerObserver ( observer ) ; }
public DistrictPointBreakdown ( ) { this . qualPoints = - 1 ; this . elimPoints = - 1 ; this . alliancePoints = - 1 ; this . awardPoints = - 1 ; this . totalPoints = - 1 ; rank = - 1 ; }
public MapService ( ) { super ( "ImportService" ) ; }
public void onLoadFinished ( Loader < Artist > loader , Artist data ) { supportStartPostponedEnterTransition ( ) ; setArtist ( data ) ; }
public Loader < List < App >> onCreateLoader ( int id , Bundle args ) { return new AppsLoader ( context ) ; }
private boolean isHighlighted ( int i ) { return candidateUseCursor && i >= 0 && i == highlightIndex ; }
public Integer getFeeChargesPortion ( ) { return feeChargesPortion ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return photos_Photos . TLdeserialize ( stream , constructor , exception ) ; }
public boolean hasResponseActiveChanged ( ) { return ( ( bitField0_ & 0x00800000 ) == 0x00800000 ) ; }
public long getSourcePostId ( ) { return sourcePostId ; }
public void remplaceList ( ArrayList < UserModel > list ) { users . clear ( ) ; users . addAll ( 0 , list ) ; notifyDataSetChanged ( ) ; }
public Controller newController ( ) { return new DashboardController ( this ) ; }
private void onMultipleItemAction ( @ NonNull MenuItem menuItem , @ NonNull ArrayList < Song > selection ) { SongsMenuHelper . handleMenuClick ( activity , selection , menuItem . getItemId ( ) ) ; }
public URL getApiUrl ( ) { try { return new URL ( mPreferences . getString ( KEY_API_URL , null ) ) ; } catch ( MalformedURLException e ) { return null ; } }
public void surfaceCreated ( SurfaceHolder holder ) { Log . v ( TAG , "surface created . " ) ; setSurface ( holder . getSurface ( ) ) ; }
public void onBindViewHolder ( MyViewHolder holder , int position ) { holder . bindRecord ( records . get ( position ) , position ) ; }
public static boolean valueClicked ( ArrayList < GridCell > gridCellArrayList , int value ) { for ( GridCell gridCell : gridCellArrayList ) { if ( gridCell . getValue ( ) == value && gridCell . getIsClicked ( ) ) return true ; } return false ; }
public void loadNextItems ( ) { if ( ! isLoading && ! isError && callbacks != null && callbacks . canLoadNextItems ( ) ) { isLoading = true ; onLoadingStateChanged ( ) ; callbacks . loadNextItems ( ) ; } }
public void onEmptyCursor ( ) { updateReviewsView . updateReviewsView ( ) ; }
public static < T > void addSerializer ( Class < T > clazz , Serializer < T > serializer ) { if ( ! mCustomSerializers . containsKey ( clazz ) ) mCustomSerializers . put ( clazz , serializer ) ; }
public void setRightTarget ( double rightTarget ) { this . rightTarget = rightTarget ; }
public void dontScheduleDueDateReminderWhenFlagNotSet ( ) { service . scheduleAlarm ( null , newTask ( with ( ID , 1L ) , with ( DUE_TIME , newDateTime ( ) ) ) ) ; verify ( jobs ) . cancel ( 1 ) ; }
public void activateMatrix ( float [ ] buf , int offset ) { mProgramCurrent . activateMatrix ( buf , offset ) ; }
public void setSourceLang ( String language ) { appPrefsEditor . putString ( "translate_source_lang" , language ) ; appPrefsEditor . apply ( ) ; }
public void onCreateOptionsMenu ( MenuInflater menuInflater , Menu menu ) { menuInflater . inflate ( R . menu . settings_menu , menu ) ; }
private void showRates ( ) { AnswersProxy . get ( ) . logButton ( "Show Rates" ) ; startActivityForResult ( new Intent ( BaseDrawerActivity . this , ExchangeRatesActivity . class ) , REQUEST_RATES ) ; }
public static boolean remindersForScheduledEnabled ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_use_reminders_for_scheduled_times ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_use_reminders_for_scheduled_times ) ) ; }
public void endDocument ( ) throws SAXException { }
public void run ( ) { getInstance ( ) . connectionState = state ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . didUpdatedConnectionState ) ; }
public void replaceAnswerFile_whenAnswerFileHasAlreadyBeenReplaced_deletesPreviousReplacement ( ) { viewModel . replaceAnswerFile ( "index" , "blah1" ) ; viewModel . replaceAnswerFile ( "index" , "blah2" ) ; verify ( mediaUtils ) . deleteImageFileFromMediaProvider ( "blah1" ) ; }
private void resolveRefreshing ( ) { if ( isGuiResumed ( ) ) { getView ( ) . displayRefreshing ( actualLoadingNow ) ; } }
public void onClick ( DialogInterface dialog , int which ) { mPreferences . setTextEncoding ( Constants . TEXT_ENCODINGS [ which ] ) ; textEncoding . setSummary ( Constants . TEXT_ENCODINGS [ which ] ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( main , menu ) ; return true ; }
public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { for ( OnWelcomeScreenPageChangeListener changeListener : mItems ) { changeListener . onPageScrolled ( position , positionOffset , positionOffsetPixels ) ; } }
public static Animator createBackgroundColorTransition ( final View v , final int startColor , final int endColor ) { return createColorAnimator ( v , "backgroundColor" , startColor , endColor ) ; }
public void setColorFilter ( @ Nullable ColorFilter colorFilter ) { target . setColorFilter ( colorFilter ) ; }
public void characters ( char [ ] paramArrayOfChar , int paramInt1 , int paramInt2 ) throws SAXException { String str = new String ( paramArrayOfChar , paramInt1 , paramInt2 ) ; this . keyValue = str ; Log . d ( "PARSE" , "characters" + str ) ; }
public void onConfigurationChanged ( final Configuration config ) { super . onConfigurationChanged ( config ) ; TabUtil . setHasEmbeddedTabs ( getSupportActionBar ( ) , getWindowManager ( ) , TabUtil . MIN_SCREEN_WIDTH_FOR_PATIENTDASHBOARDACTIVITY ) ; }
public void onAuthenticated ( ) { fingerprintresult ( true ) ; }
public void format ( IRCCloudJSONObject event , Event e ) { e . from = "" ; e . msg = "⇐ You disconnected" ; e . color = colorScheme . timestampColor ; e . self = false ; }
public void onClick ( View view ) { Intent intent = new Intent ( WelcomeActivity . this , LoginActivity . class ) ; intent . putExtra ( EXTRA_USER_TYPE , getString ( R . string . teacher_user_type ) ) ; startActivity ( intent ) ; finish ( ) ; }
public void setTitle ( CharSequence title ) { getActionBar ( ) . setTitle ( title ) ; }
public float getFloat ( String key , float defValue ) { return Float . valueOf ( this . getString ( key , Float . toString ( defValue ) ) ) ; }
private void setTitle ( ) { TextView tv = ( TextView ) rootView . findViewById ( R . id . title ) ; tv . setText ( title . trim ( ) ) ; }
private void postSetup ( ) { setupTextColors ( ) ; setupRoundedSearchBarEnabled ( ) ; setupSearchBarColor ( ) ; setupIcons ( ) ; setupMenuDividerEnabled ( ) ; setupSearchEditText ( ) ; }
public ByteView . LINK_MODE getHyperLinkMode ( ) { return hyperLinkMode ; }
public void setOnBackListener ( CustomKeyboard keyboard ) { mOnBackListener = keyboard ; }
public ImportAsyncTask ( Activity context ) { this . context = context ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeString ( title ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitConditionalNumericExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
public void organizationLink_withoutName__opensBrowser ( ) throws Exception { assertRedirectsToBrowser ( parseLink ( "https : }
public void updateUI ( ) { DrinkLibrary library = new DrinkLibraryDB ( getAdapter ( ) ) ; DrinkSizes sizeProvider = library . getDrinkSizes ( ) ; loadLibraries ( sizeProvider ) ; }
public void onPrepareOptionsMenu ( Menu menu ) { menu . findItem ( R . id . menu_delete ) . setVisible ( id > 0 ) ; super . onPrepareOptionsMenu ( menu ) ; }
public SupportDarkenFrameLayout ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; addAttr ( context , attrs ) ; beforeStart ( ) ; }
public RtpEndUserState toEndUserState ( ) { switch ( this ) { case SEARCHING : return RtpEndUserState . FINDING_DEVICE ; case DISCOVERED : return RtpEndUserState . RINGING ; default : return RtpEndUserState . CONNECTIVITY_ERROR ; } }
public void onSuccess ( ) { String message = "Post added to favourites" ; if ( ! post . isFavourite ( ) ) { message = "Post removed from favourites" ; } showSnackBar ( message ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; getLoaderManager ( ) . initLoader ( LOADER_MEMBER_SPEAKING_TIME , null , mLoaderCallbacks ) ; getLoaderManager ( ) . initLoader ( LOADER_MEETING_DATES , null , mLoaderCallbacks ) ; mTeamLoader . execute ( ) ; }
public void failed ( ) { Log . d ( Config . LOGTAG , id . account . getJid ( ) . asBareJid ( ) + " : proxy activation failed" ) ; proxyActivationFailed = true ; if ( initiating ( ) ) { sendFallbackToIbb ( ) ; } }
public LiveData < List < String >> getTreasureListLiveData ( ) { if ( completedChallenges == null ) { this . completedChallenges = getLiveData ( this . getApplication ( ) ) ; } return this . completedChallenges ; }
public void cartItemAdded ( Product product ) { EventBuilder eventBuilder = new EventBuilder ( ) ; eventBuilder . setCategory ( "ADDED_PRODUCT_TO_CART" ) ; eventBuilder . setAction ( product . category ( ) . name ( ) ) ; tracker . send ( eventBuilder . build ( ) ) ; }
public boolean isTinyWindow ( ) { return mPlayerState == PLAYER_TINY_WINDOW ; }
public < T extends ViewModel > T create ( Class < T > modelClass ) { return ( T ) new BeverageDetailsViewModel ( mBeverageDetailsRepo ) ; }
public boolean containsSession ( AxolotlAddress address ) { return mXmppConnectionService . databaseBackend . containsSession ( account , address ) ; }
private void vote ( final FavoriteManager . Favorite item ) { mUserServices . voteUp ( mContext , item . getId ( ) , new VoteCallback ( this ) ) ; }
public int compare ( Subreddit c1 , Subreddit c2 ) { return c2 . getMembers ( ) . intValue ( ) - c1 . getMembers ( ) . intValue ( ) ; }
public static Boolean toBoolean ( int value ) { return value != 0 ; }
public void notifyDeletion ( Object obj ) { App . arePointsExported = false ; for ( DAO dao : this . daoList ) { dao . delete ( obj ) ; } }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingFetchNewBip ( 3 ) ; getDialog ( ) . dismiss ( ) ; }
public int getPrimaryIconResId ( ) { return - 1 ; }
public PlaceAndPlateDtoAssembler random ( ) { this . placeType = PlaceType . RANDOM ; return this ; }
private void configureNavigationDrawer ( ) { MenuFragment navigationDrawer = getNavigationDrawerFragment ( ) ; navigationDrawer . setUp ( drawerLayout ) ; drawerToggle = setupDrawerToggle ( ) ; drawerLayout . addDrawerListener ( drawerToggle ) ; }
public BBCodeHandler ( ActionBarActivity activity , EditText edittext ) { mEditText = edittext ; mActivity = activity ; }
public boolean hasContextMenu ( ) { return ( playAction != null || addAction != null || insertAction != null || moreAction != null || checkbox != null ) ; }
public void onClick ( View v ) { PickDOBDialog dialog = new PickDOBDialog ( RegistrationActivity . this ) ; dialog . show ( getSupportFragmentManager ( ) , "TAG" ) ; }
public void onDestroy ( ) { Logger . logD ( Config . TAG , CLASS_NAME , " >> onDestroy" ) ; if ( mMediaPlayer != null ) { mMediaPlayer . release ( ) ; mMediaPlayer = null ; } mState = State . Initial ; }
public PlaceholderComparison ( ImageType imageType ) { mContext = InstrumentationRegistry . getTargetContext ( ) ; mImageType = imageType ; }
public void onClick ( View view ) { Intent i = new Intent ( Settings . this , ManageOfflineContent . class ) ; startActivity ( i ) ; }
public CommentContentBinder ( Comment model ) { this . comment = model ; }
public void registerExpression ( String id , String expression , String resolvedLocation , String action ) { }
public void setUserId ( Long userId ) { this . userId = userId ; }
public void run ( ) { displayData ( timeTable1 ) ; }
public void setData ( List < FileHeader > data ) { this . data = data ; }
public synchronized List < JingleContent > getCandidates ( ) { return candidates ; }
private static void doTest ( String input , CharSequence expected ) throws WriterException { BitMatrix result = new Code93Writer ( ) . encode ( input , BarcodeFormat . CODE_93 , 0 , 0 ) ; assertEquals ( expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
public String getImageUrl ( ) { return StringUtils . notNullStr ( imageUrl ) ; }
public void onClick ( View v ) { close ( ) ; }
private void animateShowView ( View view ) { view . setVisibility ( View . VISIBLE ) ; view . animate ( ) . alpha ( 1 . 0f ) ; }
public ApiServiceCantina getApiServiceCantina ( ) { return ServiceGenerator . createService ( ApiServiceCantina . class , null , this , this , false ) ; }
public Integer getInterestWrittenOff ( ) { return interestWrittenOff ; }
public Long getWifiLinkSpeed ( ) { return wifiLinkSpeed ; }
private void showEvenRange ( ) { ListPreference preference = ( ListPreference ) findPreference ( ApplicationPreferences . PREF_EVENT_RANGE ) ; preference . setSummary ( preference . getEntry ( ) ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { EntityAccount f1 = prev . get ( oldItemPosition ) ; EntityAccount f2 = next . get ( newItemPosition ) ; return f1 . id . equals ( f2 . id ) ; }
public boolean equals ( Object o ) { if ( o instanceof AppData ) { AppData p = ( AppData ) o ; return this . getAppPackageName ( ) . equals ( p . getAppPackageName ( ) ) ; } else return false ; }
public void onClick ( View v ) { updateFirebaseUserDetails ( ) ; finish ( ) ; }
public ShareUtil setChooserTitle ( String title ) { _chooserTitle = title ; return this ; }
public Uri getParentDirUri ( @ NonNull Uri filePath ) { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . getParentDirUri ( filePath ) ; }
public void onDestroy ( ) { if ( BuildConfig . LOG_DEBUG ) LogUtils . d ( TAG ) ; super . onDestroy ( ) ; LocalBroadcastManager . getInstance ( getContext ( ) ) . unregisterReceiver ( syncServiceReceiver ) ; }
private void exitBrowser ( ) { if ( Properties . webpageProp . clearonexit ) { clearTraces ( ) ; } finish ( ) ; }
public int dataCount ( String projectId ) { Model project = ProjectManager . get ( ) . get ( projectId ) ; Model data = project . getModel ( "data" , true ) ; return data . entries ( ) . size ( ) ; }
public void onRestoreInstanceState ( Bundle savedInstanceState ) { super . onSaveInstanceState ( savedInstanceState ) ; if ( savedInstanceState != null ) { setupData = savedInstanceState . getBundle ( KEY_DATA ) ; mStepIndex = savedInstanceState . getInt ( KEY_STEP_INDEX , 0 ) ; } }
public DrawerTextIcon ( String listingTitle , @ DrawableRes int icon ) { this . title = listingTitle ; this . icon = icon ; }
public void setIdBook ( long idBook ) { this . idBook = idBook ; }
public void clearDatabase ( ) { Database database = new Database ( getTargetContext ( ) ) ; database . resetAllData ( ) ; }
public void onActivityResult ( int requestCode , int resultCode , Intent data ) { executor . submit ( ( ) -> presenter . onActivityResult ( requestCode , resultCode , data ) ) ; }
public CityViewHolder ( View cityItemLayout , OnCitySelectedListener onCitySelectedListener ) { super ( cityItemLayout ) ; this . cityItemLayout = cityItemLayout ; this . onCitySelectedListener = onCitySelectedListener ; textViewName = ( TextView ) cityItemLayout . findViewById ( R . id . textView_item_city_name ) ; }
public static long secsToMs ( long secs ) { return secs * 1000 ; }
public Recipient getRecipient ( ) { return recipient ; }
public void onBackPressed ( ) { wv . goBack ( ) ; }
public void onCreate ( SQLiteDatabase database , ConnectionSource connectionSource ) { try { TableUtils . createTable ( connectionSource , CharacterOptimized . class ) ; } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
public Servings ( ) { }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . notificationsSettingsUpdated ) { listView . invalidateViews ( ) ; } }
public void onDetails ( View owner ) { }
public void onBackPressed ( ) { if ( mIsInAyahMode ) { endAyahMode ( ) ; } else if ( mShowingTranslation ) { switchToQuran ( ) ; } else { super . onBackPressed ( ) ; } }
public ArtistImageLoader ( Context context , LastFMRestClient lastFMRestClient , ModelLoader < GlideUrl , InputStream > urlLoader ) { this . context = context ; this . lastFMRestClient = lastFMRestClient ; this . urlLoader = urlLoader ; }
public void run ( ) { if ( isUpdating == value ) { return ; } isUpdating = value ; if ( connectionState == ConnectionStateConnected ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . didUpdatedConnectionState ) ; } }
public void onDocumentsAvailable ( List < DocumentModel > documents ) { this . documentList = new ArrayList <> ( documents ) ; adapter . notifyDataSetChanged ( ) ; }
public void validateImmutability ( ) { assertEquals ( mHashcode , mMoneyInEur . hashCode ( ) ) ; assertEquals ( amountString , mMoneyInEur . toPlainString ( ) ) ; assertEquals ( CURRENCY_CODE , mMoneyInEur . getCurrency ( ) . getCurrencyCode ( ) ) ; }
public boolean isReady ( ) { return true ; }
private void changeWakePrefs ( ) { boolean isChecked = binding . wakeScreenOptionPrefs . isChecked ( ) ; binding . wakeScreenOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdayWakeEnabled ( ! isChecked ) ; }
public void setApprovedPrincipal ( Integer approvedPrincipal ) { this . approvedPrincipal = approvedPrincipal ; }
private void performAction ( View v ) { if ( fabExpanded ) { fab . toggle ( ) ; fabExpanded = false ; } else { onFabItemClickedListener . onFabItemClick ( v . getId ( ) ) ; } }
public void onRefresh ( ) { new LoadDiscussionTask ( token , forumids , this ) . execute ( "" ) ; }
public void onTextQualifierPicked ( TextQualifier textQualifier ) { mTextQualifier = textQualifier . getCharacter ( ) ; mTextViewQualifier . setText ( textQualifier . getResourceId ( ) ) ; }
public void onBackPressed ( ) { if ( NiceVideoPlayerManager . instance ( ) . onBackPressd ( ) ) { return ; } super . onBackPressed ( ) ; }
public List < LottieMask > getMasks ( ) { return masks ; }
public void setPresenter ( TeaStatContract . Presenter presenter ) { this . presenter = presenter ; }
public StimulusView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; }
public Single < Tag > getById ( String id ) { return Single . fromCallable ( ( ) -> { DbTag eventById = dao . getTagById ( id ) ; return dataMapper . toEntity ( eventById ) ; } ) ; }
public void setMicrophoneEnabled ( final boolean enabled ) { webRTCWrapper . setMicrophoneEnabled ( enabled ) ; }
public void onClick ( View view ) { setIterationToIncrement ( ) ; }
public int getCount ( ) { return 12 ; }
public int getMaxScrollAmountHorizontal ( ) { return ( int ) ( MAX_SCROLL_FACTOR * getWidth ( ) ) ; }
public SpeedWalkDirectionEditorDialog ( Context context , DirectionEditorDoneListener doneListener , IStellarService service ) { super ( context ) ; this . doneListener = doneListener ; this . service = service ; }
public void openDatabase ( String fileName , String keyFile ) { showFillUsrPwdFragment ( true , fileName , keyFile , true ) ; }
public void onGpsStatusChangeEvent ( GpsStatusChangeEvent event ) { mPostPresenter . handleLocationSettingsStatusChange ( ) ; }
public void onStop ( ) { super . onStop ( ) ; LCropImageView . setOnSetImageUriCompleteListener ( null ) ; LCropImageView . setOnCropImageCompleteListener ( null ) ; }
public void onDestroy ( ) { log . v ( TAG , "Fragment destroyed" ) ; loaded = false ; thread . interrupt ( UN ) ; }
public void onViewMedia ( int position , int attachmentIndex , View view ) { Status status = statuses . get ( position ) ; super . viewMedia ( attachmentIndex , status , view ) ; }
public View onCreateOverlayView ( ) { Log . d ( TAG , "Session onCreateOverlayView ( " + mSessionNumber + " ) " ) ; return mPlayer . getOverlayView ( mCaptioningManager . getUserStyle ( ) , mCaptioningManager . getFontScale ( ) ) ; }
public void switchCamera ( ) { if ( cameraSession != null ) { CameraController . getInstance ( ) . close ( cameraSession , null , null ) ; cameraSession = null ; } initied = false ; isFrontface = ! isFrontface ; initCamera ( isFrontface ) ; }
public static String defaultTheme ( ) { return Build . VERSION . SDK_INT >= 29 ? "system_default" : "dawn" ; }
public Thread newThread ( Runnable r ) { return new Thread ( null , r , "MoneroTask #" + mCount . getAndIncrement ( ) , MoneroHandlerThread . THREAD_STACK_SIZE ) ; }
public static Response error ( final Throwable throwable ) { return new AutoValue_Response ( CurrentStatus . error ( ) , Collections . singletonList ( Message . error ( throwable ) ) ) ; }
public static UserPostListingURL getHidden ( String username ) { return new UserPostListingURL ( Type . HIDDEN , username , null , null , null , null ) ; }
public void modifyData ( DashboardRecyclerViewItemModel item , int position ) { this . itemList . set ( position , item ) ; this . notifyItemChanged ( position ) ; }
public void evictAll ( ) { if ( wallpaperEntities != null ) { wallpaperEntities . clear ( ) ; } wallpaperEntities = null ; }
public static < N > void noErrorsAndNotCompleted ( TestSubscriber < N > testSubscriber ) { assertNotNull ( testSubscriber ) ; testSubscriber . assertNoErrors ( ) ; testSubscriber . assertNotCompleted ( ) ; }
public void setWallet ( WalletRealmObject wallet ) { this . wallet . setValue ( wallet ) ; }
public Note newNote ( boolean forDeck ) { return newNote ( getModels ( ) . current ( forDeck ) ) ; }
public boolean isZoomEnabled ( ) { return isZoomEnabled ; }
public ClockView ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; initView ( context , attrs , 0 ) ; }
public RepoViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View v = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . list_item , viewGroup , false ) ; return new RepoViewHolder ( v ) ; }
public NoticonTextView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . setTypeface ( TypefaceCache . getTypefaceForTypefaceName ( context , FONT_NAME ) ) ; }
public void onZoomIn ( float value ) { zoomIn ( value ) ; }
private CommentModel getComment ( int position ) { if ( position == getCount ( ) - 1 ) { mOnLoadMoreListener . onLoadMore ( ) ; } return mCommentList . get ( position ) ; }
public void onSurfaceChanged ( GL10 unused , int width , int height ) { GLES20 . glViewport ( 0 , 0 , width , height ) ; } } }
public List < Bitmap > getBitmaps ( ) { return bitmaps ; }
public SupportFragmentResourceFinder ( final Fragment fragment ) { this . fragment = fragment ; }
public ItemSprite . Glowing glowing ( ) { return ItemSprite . Glowing . WHITE ; }
public String getLabel ( ) { return formatter . format ( date ) ; }
public void onClick ( View v ) { dispatchOnItemLongClick ( v , position ) ; }
private void cancelUpdateDisplay ( ) { this . mHandler . removeCallbacks ( this . mDisplayUpdater ) ; }
public BookAdapter ( List < BookDetail > bookDetails , Context context , View . OnClickListener onClickListener ) { this . bookDetails = bookDetails ; this . context = context ; this . onClickListener = onClickListener ; }
public MapMarker ( String title , double latitude , double longitude , long id , EntryType entryType ) { this . title = title ; this . latitude = latitude ; this . longitude = longitude ; this . id = id ; this . entryType = entryType ; }
public TypefaceSpan ( Typeface typeface , int size , int textColor ) { mTypeface = typeface ; textSize = size ; color = textColor ; }
private void launchSettings ( ) { startActivity ( new Intent ( this , SettingsActivityHC . class ) ) ; }
public void testMealUnitType ( ) throws Exception { when ( intent . getAction ( ) ) . thenReturn ( AddIngredientType . MEAL . getAction ( ) ) ; assertThat ( AddIngredientModule . provideUnitType ( intent ) , equalTo ( AmountUnitType . MASS ) ) ; }
public int getType ( ) { return type ; }
public LiveData < TapUser > getTapUser ( ) { assertLoggedIn ( ) ; api . fetchTapUser ( user . getValue ( ) ) ; return tapUser ; }
public void setVideoWindows ( final TextureView videoView , final TextureView captureView ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . setVideoWindows ( videoView , captureView ) ; }
public GernericObject ( long Id , String Descricao ) { this . setId ( Id ) ; this . setDescricao ( Descricao ) ; }
public Boolean parseResult ( int resultCode , @ Nullable Intent intent ) { HyperLog . d ( TAG , "Received result code " + resultCode + " for action " + action ) ; return resultCode == Activity . RESULT_OK ; }
public void updateListFragment ( final List < Place > placeList ) { adapter . setItems ( placeList ) ; noResultsView . setVisibility ( placeList . isEmpty ( ) ? View . VISIBLE : View . GONE ) ; }
public boolean finishedAnimation ( ) { return currentWidth == width ; }
public static boolean isLowMemory ( Context context ) { ActivityManager activityManager = ( ActivityManager ) context . getSystemService ( Context . ACTIVITY_SERVICE ) ; return ( VERSION . SDK_INT >= VERSION_CODES . KITKAT && activityManager . isLowRamDevice ( ) ) || activityManager . getMemoryClass ( ) <= 64 ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "Attempting to reconnect to remote . " ) ; connect ( mBluetoothDeviceAddress ) ; }
public MessagePatch setDeleted ( boolean deleted ) { this . deleted = deleted ; return this ; }
public void setHeight ( float height ) { sizeMetrics . getHeightMetric ( ) . setValue ( height ) ; }
public void onResume ( ) { super . onResume ( ) ; mPresenter . start ( ) ; reload ( false ) ; }
public FingerprintDialog circleErrorColor ( int circleErrorColor ) { this . fingerprintView . circleErrorColor ( circleErrorColor ) ; return this ; }
public void onAccuracyChanged ( Sensor sensor , int accuracy ) { }
public int getMeasurePosition ( ) { return this . measurePosition ; }
public InterventionSeed ( int seedId ) { this . quantity = 0f ; this . unit = "kilogram_per_hectare" ; this . intervention_id = - 1 ; this . seed_id = seedId ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_sketch , container , false ) ; ButterKnife . inject ( this , view ) ; return view ; }
public void selectedPicture ( final String headerPopUpName ) { Runnable runnable = new Runnable ( ) { @ Override public void run ( ) { magicalCameraObject . getActionPicture ( ) . selectedPicture ( headerPopUpName ) ; } } ; askPermissions ( runnable , MagicalPermissions . READ_EXTERNAL_STORAGE ) ; }
public static String getLastChoosedFolder ( Context context ) { return getString ( context , R . string . pref_key_last_folder , null ) ; }
public int computeVerticalScrollExtent ( RecyclerView . State state ) { return computeScrollExtent ( state ) ; }
public void bind ( TagBookmarkDialog dialog ) { this . dialog = dialog ; if ( tags != null ) { this . dialog . setData ( tags , checkedTags ) ; } }
private void saveImageForRevert ( ) { if ( ! mViewModel . isPreExistingImage ) { deletePreviousImage ( ) ; mPreviousImagePath = mViewModel . mImagePath ; mPreviousImageUri = mViewModel . mImageUri ; } }
public Rep getRepAt ( int position ) { return mRep . get ( position ) ; }
public void hideDoneButton ( ) { done . show ( ) ; }
private HistoryDataManager ( ) { dataSource = HistoryDataSource . get ( ) ; listeners = new HashSet <> ( ) ; }
public boolean isConnected ( ) { return false ; }
public void run ( ) { typeSpinner . setEnabled ( true ) ; patchesSpinner . setEnabled ( true ) ; choosePhotoButton . setEnabled ( true ) ; shareCollageButton . setEnabled ( true ) ; saveCollageButton . setEnabled ( true ) ; }
private void hideStatusNavBars ( ) { View decorView = activity . getWindow ( ) . getDecorView ( ) ; int uiOptions = View . SYSTEM_UI_FLAG_HIDE_NAVIGATION | View . SYSTEM_UI_FLAG_IMMERSIVE_STICKY | View . SYSTEM_UI_FLAG_FULLSCREEN ; decorView . setSystemUiVisibility ( uiOptions ) ; }
public void onClick ( View v ) { activateNextButton ( ) ; deselectGuidedSetupConfigsView ( ) ; selectAdvancedSetupView ( ) ; }
public void insertAll ( List < Event > entities ) { }
public Double getPreferredMinPosition ( ) { LocalDate date = new LocalDate ( year , month , 1 ) ; LogUtil . INSTANCE . d ( TAG , "Preferred monthly min : %s" , date ) ; return dateToPosition ( date ) ; }
public void emptyFiltered ( ) { getCol ( ) . getDecks ( ) . select ( mContextMenuDid ) ; TaskManager . launchCollectionTask ( new CollectionTask . EmptyCram ( ) , simpleProgressListener ( ) ) ; }
private void updateSearchMenuVisibility ( ) { if ( mSearchMenuItem != null ) { mSearchMenuItem . setVisible ( mSiteCount > SITE_SEARCH_VISIBILITY_COUNT ) ; } }
private String getTOC ( ZipFile epubFile ) throws IOException { return getElement ( epubFile , "OEBPS/toc . ncx" ) ; }
public BigDecimal getVariation ( ) { return this . variation ; }
public int getDate ( int index ) { return calendarData . get ( index ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . usman . proretro" , appContext . getPackageName ( ) ) ; }
public CropAreaRenderer [ ] newArray ( int size ) { return new CropAreaRenderer [ size ] ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . featuredStickersDidLoaded ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . stickersDidLoaded ) ; }
public void onClick ( View v ) { widthSeekBar . setEnabled ( false ) ; keyboard . setKeyboardWidth ( - 1 ) ; setupWidthButtons ( - 1 ) ; }
public void onAdOpened ( ) { Log . d ( "MA Interstitial Ad Test" , "Add is Visible Now" ) ; }
public static String [ ] getBooksUrls ( ) { String [ ] urls = new String [ ] { "https : "https : "https : "https : } ; return urls ; }
private void dismissCarefullyProgressDialog ( ) { try { if ( progressDialog != null ) { if ( progressDialog . isShowing ( ) ) { progressDialog . dismiss ( ) ; } } } catch ( Exception e ) { } }
public AnyOfFilter < Record . Mode > getModeFilter ( ) { return modeFilter ; }
private void dealAssociatedModelOnOneSide ( DataSupport baseObj , DataSupport associatedModel ) { dealsAssociationsOnTheSideWithoutFK ( baseObj , associatedModel ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; initRecyclerView ( ) ; initializeAnimations ( ) ; setListeners ( ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; operationReadTemperature = true ; textViewTemperatureValue . setText ( "" ) ; readWriteOperation ( ) ; }
public void setDistanceUnit ( Distance . Unit unit ) { preferences . edit ( ) . putString ( DISTANCE_UNIT_KEY , unit . toString ( ) ) . apply ( ) ; }
public ViewHolder ( AppInfoBridge appInfoBridge , AppInfo appInfo ) { this . appInfoBridge = appInfoBridge ; this . appInfo = appInfo ; }
public void run ( ) { loadContacts ( false , true ) ; }
public boolean equals ( Object o ) { final ColorPair colorPair = ( ColorPair ) o ; if ( first != colorPair . first ) return false ; return second == colorPair . second ; }
public static boolean isVideo ( Attachment attachment ) { return ContentType . isVideoType ( attachment . getContentType ( ) ) ; }
public void onEnabled ( Context context ) { super . onEnabled ( context ) ; Log . i ( TAG , "Hello World ! " ) ; setAlarmManager ( context ) ; collectfonts ( context ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { Log . d ( "IRCCloud" , "OOB was skipped" ) ; ready = true ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( LegacySwipeableExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public void run ( ) { if ( camera_controller != null && takePictureTimerTask != null ) takePicture ( false ) ; else { if ( MyDebug . LOG ) Log . d ( TAG , "takePictureTimerTask : don't take picture , as already cancelled" ) ; } }
private void stickSelectedThread ( ) { Conversation conv = getCheckedItem ( ) ; if ( conv != null ) { conv . setSticky ( ! conv . isSticky ( ) ) ; } mListAdapter . notifyDataSetChanged ( ) ; }
public void resetComposition ( ) { animator . clearComposition ( ) ; animator . setComposition ( composition ) ; assertEquals ( 0 . 0f , animator . getMinFrame ( ) ) ; assertEquals ( 1000 . 0f , animator . getMaxFrame ( ) ) ; }
public void loadLevelChoiceSceneFromMenuScene ( ) { setScene ( loadingScene ) ; endSceneService ( menuSceneService ) ; startSceneService ( levelModeSceneService ) ; }
public void whenPromptHasAnswer_replaceBearingButtonIsShown ( ) { assertThat ( createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) . getBearingButton . getText ( ) , is ( widgetActivity . getString ( R . string . replace_bearing ) ) ) ; }
public void updateContentList ( List < ContentListItem > newlist_items ) { list_items = new ArrayList <> ( newlist_items ) ; notifyDataSetChanged ( ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new ChemUtilsFragment ( ) ; case 1 : return new ConstantsEquationsFragment ( ) ; default : return null ; } }
public Builder ( final ResourceFinder resourceFinder , int themeResId ) { super ( resourceFinder ) ; load ( themeResId ) ; }
public void onClick ( View v ) { selectContactAttachment ( ) ; toggleAttachmentView ( ) ; }
public static boolean isEmpty ( @ Nullable CharSequence str ) { return str == null || str . length ( ) == 0 ; }
public void setLanguage ( String l ) { this . language = l ; }
private void notifyChange ( @ NonNull final String what ) { notifyPrivateChange ( what ) ; sendPublicIntent ( what ) ; }
public static Cursor startQuery ( Context context , long threadId ) { return context . getContentResolver ( ) . query ( Threads . CONTENT_URI , ALL_THREADS_PROJECTION , Threads . _ID + " = " + threadId , null , null ) ; }
public NotificationController ( final Context context ) { this . context = context ; manager = ( NotificationManager ) context . getSystemService ( NOTIFICATION_SERVICE ) ; }
public TootEntity getItem ( int position ) { if ( position >= 0 && position < list . size ( ) ) { return list . get ( position ) ; } return null ; }
private static void performSync ( Context context , Account account , Bundle extras , String authority , ContentProviderClient provider , SyncResult syncResult ) throws OperationCanceledException { FileLog . d ( "telegram" , "performSync : " + account . toString ( ) ) ; }
public void selectTags ( FragmentManager fragmentManager ) { selectTagsHelper . showSelectTagsDialog ( fragmentManager , message -> view . showError ( message ) ) ; }
public void onLongClickDate ( Date date , View view ) { }
public static void setStopAppAlarm ( @ NonNull Context appContext , int time ) { setStartStopAppAlarm ( appContext , SCHEDULER_WORK_STOP_APP , time ) ; }
public void clearAdb ( ) { execCommandInternally ( ShellCommandHelper . getClearAdb ( ) ) ; snackProgressBarManager . show ( new SnackProgressBar ( SnackProgressBar . TYPE_CIRCULAR , getString ( R . string . adb_clear_command_sent ) ) , SnackProgressBarManager . LENGTH_LONG ) ; }
public void startGame ( ) { this . playScreen . initGame ( ) ; currentScreen = this . playScreen ; }
public static String getSortableDate ( ) { String result = null ; SimpleDateFormat sdf = new SimpleDateFormat ( Constants . DATE_FORMAT_SORTABLE ) ; Date now = Calendar . getInstance ( ) . getTime ( ) ; result = sdf . format ( now ) ; return result ; }
public static LauncherHelper getInstance ( ) { if ( theInstance == null ) theInstance = new LauncherHelper ( ) ; return theInstance ; }
public void onStart ( ) { super . onStart ( ) ; Log . d ( TAG , "OnStart" ) ; }
public InlineMunicipalityService ( ) { Logging . debug ( "InlineMunicipalityService instantiated" ) ; }
public static Drawable getSdCardIcon ( Context c ) { return c . getDrawable ( R . drawable . ic_item_sdcard_tinted ) ; }
private void disableTagWriteMode ( ) { isInWriteMode = false ; writeTagDialog . hide ( ) ; }
public static void setTrainingPeaksAccessToken ( String token ) { cSharedPreferences . edit ( ) . putString ( SP_TRAINING_PEAKS_ACCESS_TOKEN , token ) . commit ( ) ; }
public void setTodayColor ( int color ) { putInt ( TODAY_COLOR , color ) ; }
public void setDraggedMarkPoint ( MarkPoint draggedMarkPoint ) { MortarCalculatorApplication . draggedMarkPoint = draggedMarkPoint ; }
public void goBack ( View v ) { Intent goBack = new Intent ( Checkout . this , Cart . class ) ; startActivity ( goBack ) ; }
public void reset ( ) throws IOException { ss . moveTo ( 10 ) ; assertEquals ( text . length - 10 , ss . available ( ) ) ; ss . reset ( ) ; assertEquals ( text . length , ss . available ( ) ) ; }
public void onError ( Throwable e ) { Timber . e ( e , "modifyCount counter" ) ; }
public TeamListWriter teamListWriter ( Database db ) { return Mockito . mock ( TeamListWriter . class ) ; }
public void setLastDownloadResult ( SpeedTestResult result ) { Log . v ( TAG , "setLastDownloadResult " + result ) ; result . write ( mSharedPrefs , PREF_SPEED_TEST_LAST_DOWNLOAD_RESULT ) ; }
public static void initializeCachesOnDirectory ( File directory ) { SATELLITE = new TilesCache ( new File ( directory , "sat" ) , "https : OSM = new TilesCache ( new File ( directory , "osm" ) , "http : }
private void addTextureView ( ) { mContainer . removeView ( mTextureView ) ; LayoutParams params = new LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , ViewGroup . LayoutParams . MATCH_PARENT ) ; mContainer . addView ( mTextureView , 0 , params ) ; }
public void onError ( OpenWeatherApiError apiError ) { ErrorCode . valueOf ( "EMPTY" ) ; mIsError = true ; }
public CellInfo4G ( Integer locationId , Integer areaCode , Integer primaryScramblingCode , Integer channelNumber ) { setTac ( locationId ) ; setCi ( areaCode ) ; setPci ( primaryScramblingCode ) ; setEarfcn ( channelNumber ) ; }
public void onClearReview ( ) { title . setText ( "" ) ; text . setText ( "" ) ; ratingBar . setRating ( 1f ) ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new WidgetTodoViewsFactory ( this . getApplicationContext ( ) , intent ) ; }
public void run ( ) { populateBooks ( showStatus ) ; invalidateOptionsMenu ( ) ; }
public void onItemRemoved ( int position ) { ( ( MainActivity ) getActivity ( ) ) . onItemRemoved ( position ) ; }
public Object instantiateItem ( ViewGroup container , int position ) { Object o = super . instantiateItem ( container , position ) ; if ( currentColorReceiver != null && currentColorReceiverPosition == position ) { receiveColor ( currentColorReceiver , currentColorReceiverPosition ) ; } return o ; }
public void onBackKeyPressed ( ) { if ( ! leaveScene ) { sceneService . loadLevelChoiceSceneFromGameScene ( ) ; } }
private boolean goToReceive ( ) { return accountFragment . isVisible ( ) && accountFragment . goToReceive ( true ) ; }
public boolean features ( ) { return features . get ( ) != null ; }
public void updateToolbar ( String s , String st ) { mToolbar . setTitle ( s ) ; mToolbar . setSubtitle ( st ) ; }
public int getCoinCount ( ) { return 1000 ; }
public void onCreate ( ) { super . onCreate ( ) ; Log . i ( TAG , "onCreate" ) ; }
public void setTask ( List < Data > tasks ) { this . tasks = tasks ; }
public int delete ( Uri uri , String s , String [ ] strings ) { return 0 ; }
public void onError ( Throwable e ) { exportSubscription = null ; if ( isAdded ( ) ) { ToastCompat . makeText ( context , R . string . export_data_error , Toast . LENGTH_LONG ) . show ( ) ; } }
public static void startActivityMaximized ( Context context , Intent intent ) { Bundle bundle = launchMode2 ( context , MAXIMIZED , ApplicationType . CONTEXT_MENU , null ) ; prepareToStartActivity ( context , ( ) -> context . startActivity ( intent , bundle ) ) ; }
public boolean retainAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( ) ; }
public Set < String > getPanicResponse ( ) { return settings . getStringSet ( getResString ( R . string . settings_key_panic ) , Collections . < String > emptySet ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( ApplicationPreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . preferences__advanced ) ; }
public GroupHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card_slot , parent , false ) ; return new GroupHolder ( view ) ; }
public Integer getId ( ) { return _idValue ; }
public ArrayList < DateGridFragment > getFragments ( ) { return fragments ; }
public Stack ( int initialCapacity ) { mData = new ArrayList < E > ( initialCapacity ) ; }
public String desc ( ) { return Game . getVar ( R . string . Longsword_Info ) ; }
public boolean equals ( Dictionary dictionary ) { return this . equals ( dictionary . type , dictionary . path ) ; }
public int dpToPixels ( int dp , Context context ) { final float SCALE = context . getResources ( ) . getDisplayMetrics ( ) . density ; return ( int ) ( dp * SCALE + 0 . 5f ) ; }
public void onError ( Exception e ) { getImageByPicasso ( albumSongs , imageView , i + 1 , max ) ; }
public void setOnGesturesListener ( @ Nullable OnGestureListener listener ) { mGestureListener = listener ; }
public void setImageResource ( int resId ) { super . setImageResource ( resId ) ; updateDrawableBounds ( ) ; handleImageChange ( ) ; }
public void run ( ) { mEditor . replaceTextKeepCursor ( null , true ) ; }
private Number distanceBetween ( Number x , Number y ) { return Math . abs ( x . doubleValue ( ) - y . doubleValue ( ) ) ; }
public void syncClose ( ) { setControlCommand ( CDC_SET_CONTROL_LINE_STATE , CDC_CONTROL_LINE_OFF , null ) ; connection . releaseInterface ( mInterface ) ; connection . close ( ) ; }
public void yell ( String str , int index ) { GLog . n ( Game . getVar ( R . string . Mob_Yell ) , getName ( ) , StringsManager . maybeId ( str , index ) ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new MessageDetailsLoader ( this , getIntent ( ) . getStringExtra ( TYPE_EXTRA ) , getIntent ( ) . getLongExtra ( MESSAGE_ID_EXTRA , - 1 ) ) ; }
public void adjustRecyclerViewSize ( ) { if ( getAdapter ( ) . getItemCount ( ) > MAX_ITEMS_WITHOUT_SCREEN_BOUND ) { getLayoutParams ( ) . height = ( int ) ( ScreenUtils . getScreenHeight ( ) * 0 . 9 ) ; } else { setNestedScrollingEnabled ( false ) ; } }
public static void showSignInForResult ( Activity activity ) { showSignInForResult ( activity , false , false ) ; }
public MessageHoldersConfigurator setOutcomingImageLayout ( @ LayoutRes int layout ) { this . outcomingImageConfig . layout = layout ; return this ; }
public int getCount ( ) { return content . length ; }
private List < IUser > userSearch ( IChannel root , String str ) throws RemoteException { List < IUser > list = new LinkedList < IUser > ( ) ; userSearch ( root , str , list ) ; return list ; }
public void enable ( ) { GLES20 . glEnableVertexAttribArray ( location ) ; }
public ChatFragment openServer ( ServerConnectionInfo server , String channel ) { return openServer ( server , channel , false ) ; }
public void setOnGpsServiceUpdate ( onGpsServiceUpdate onGpsServiceUpdate ) { this . onGpsServiceUpdate = onGpsServiceUpdate ; }
public FitSystemRelativeLayout ( @ NonNull Context context ) { super ( context ) ; }
public static void setEnabledSubtypes ( @ NonNull final List < InputMethodSubtype > enabledSubtypes ) { sEnabledSubtypes = enabledSubtypes ; }
public void onFailure ( Call < StatusContext > call , Throwable t ) { onThreadRequestFailure ( id ) ; }
public void showFab ( ) { FloatingActionButton floatingActionButton = ( FloatingActionButton ) getActivity ( ) . findViewById ( R . id . button_floating_action ) ; floatingActionButton . show ( ) ; }
public Double getMobileNo ( ) { return mobileNo ; }
public void opponentChooseRock ( ) { player2Entity = new RockHandBody ( world , ( RockHandModel ) MatchModel . getInstance ( ) . setOpponentChoice ( "rock" ) ) ; player2Entity . setLinearVelocity ( 0f , - 200f ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { showData ( holder , position , itemsList ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , CC_commercialvehicleprivate . class ) ; startActivity ( inte ) ; }
public void onOptionAddNewCheck ( ) { EventBus . getDefault ( ) . post ( new EventBusController . OptionControlEvent ( option . getId ( ) , edtOptionTitle . getText ( ) . toString ( ) , EventBusController . OptionControlEvent . OPTION_ADD_CHECK , null ) ) ; }
public TranslationViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( viewType , parent , false ) ; return new TranslationViewHolder ( view , viewType ) ; }
public static HistoryDataManager get ( ) { if ( instance == null ) { instance = getSync ( ) ; } return instance ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseLibraryChunk prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public StoredItemsChecker ( IStoredItemAccess storedItemAccess , CheckForAnyStoredFiles checkForAnyStoredFiles ) { this . storedItemAccess = storedItemAccess ; this . checkForAnyStoredFiles = checkForAnyStoredFiles ; }
private void onUploadsReceived ( List < UploadObject > uploads ) { getData ( ) . addAll ( createFrom ( uploads ) ) ; safeNotifyDataSetChanged ( ) ; }
public void showCreatedTag ( Tag tag ) { adapter . addTag ( tag ) ; showSnackbarMessage ( R . string . msg_tag_created ) ; }
private void vibrate ( ) { Vibrator vibe = ( Vibrator ) context . getSystemService ( Context . VIBRATOR_SERVICE ) ; if ( vibe != null ) { vibe . vibrate ( SHORT_VIBRATION ) ; } }
public void onEditClicked ( ) { callback . onEditClicked ( position . get ( ) , this ) ; }
public int getTranslatedItemPositionBottom ( ) { return mTranslationY + mGrabbedItemHeight ; }
public void run ( ) { chat [ 0 ] = getChat ( user_id ) ; semaphore . release ( ) ; }
public void setCustomFont ( String fontFamily , int style ) { decorator . setCustomFont ( this , fontFamily , style ) ; }
public void testGetCaste_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . getCaste ( ) , is ( caste ) ) ; }
public static < E > ArrayList < E > listOfOne ( E obj ) { final ArrayList < E > result = new ArrayList <> ( 1 ) ; result . add ( obj ) ; return result ; }
public void run ( ) { TextView tvStatus = ( TextView ) findViewById ( R . id . text_status ) ; tvStatus . setText ( status ) ; }
public static void configurePeriodicSync ( Context context , int syncInterval , int flexTime ) { Account account = getSyncAccount ( context ) ; String authority = AUTHORITY ; ContentResolver . addPeriodicSync ( account , authority , new Bundle ( ) , 90 ) ; }
private boolean initTweakIcon ( ) { return Common . loadImage ( getContext ( ) , ivIcon , FoodInfo . getTweakIcon ( tweak . getName ( ) ) ) ; }
public static File getDownloadedFile ( String name , byte mode ) { return new File ( getDownloadDir ( mode ) + "/" + name ) ; }
private void buildTimeZoneList ( ) { for ( TimeZoneInfo info : TimeZoneList . TIMEZONES ) { timeZones . addItem ( info . getGMTRelative ( ) + ' ' + info . getAbreviation ( ) , String . valueOf ( info . getGmtDiff ( ) ) ) ; } }
public void onLoaderReset ( Loader < String [ ] > loader ) { recyclerView . setAdapter ( null ) ; }
private PendingIntent buildPendingIntent ( Context context , final String action , final ComponentName serviceName ) { Intent intent = new Intent ( action ) ; intent . setComponent ( serviceName ) ; return PendingIntent . getService ( context , 0 , intent , 0 ) ; }
public void run ( ) { String res = Statusgo . signMessage ( rpcParams ) ; callback . invoke ( res ) ; }
public void setPresenter ( NewGoalPresenter presenter ) { mNewGoalPresenter = presenter ; }
public void addOnPageChangeListener ( ViewPager . OnPageChangeListener listener ) { binding . miPager . addOnPageChangeListener ( listener ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; final RecyclerView listView = getListView ( ) ; listView . setFocusable ( false ) ; }
public void showRecord ( TetroidRecord record ) { mainView . openRecord ( record ) ; }
public double getY ( ) { return y ; }
public GetContactEmail ( ContentResolver cr , OnEmailLoadingListener listener ) { super ( ) ; this . cr = cr ; this . listener = listener ; }
private String getMode ( MLocation loc ) { return FlightMode . getModeString ( FlightMode . getMode ( loc ) ) ; }
public void showSpeakerProfile ( int position ) { PersonListItemDTO speaker = event . getSpeakers ( ) . get ( position ) ; wireframe . showSpeakerProfile ( speaker . getId ( ) , view ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . EQUAL ) ; }
public LiveData < Boolean > isOutOfSync ( ) { return Transformations . map ( syncRepository . getSyncError ( ) , Objects : : nonNull ) ; }
private List < Either < Placeholder , Notification >> liftNotificationList ( List < Notification > list ) { return CollectionUtil . map ( list , notificationLifter ) ; }
private void postpone ( SharedPreferences prefs , Long alarm , String recurrenceRule ) { ReminderPickers reminderPicker = new ReminderPickers ( this , this ) ; reminderPicker . pick ( alarm , recurrenceRule ) ; }
public static ZonedDateTime toLocalZonedDateTime ( String value ) { return LocalDateTime . parse ( value , DateTimeFormatter . ISO_LOCAL_DATE_TIME ) . atZone ( LocalZonedDateTime . BRUSSELS ) ; }
public static ThemeSingleton get ( boolean createIfNull ) { if ( singleton == null && createIfNull ) singleton = new ThemeSingleton ( ) ; return singleton ; }
public boolean onPrepareOptionsMenu ( Menu menu ) { deleteTrigger . setVisible ( isSelected ( ) ) ; return super . onPrepareOptionsMenu ( menu ) ; }
public String toString ( ) { return " < Proxmark3Command " + op . name ( ) + " , args " + Arrays . toString ( args ) + " , data " + Arrays . toString ( data ) + " > " ; }
public long copyFile ( InputStream source , String target ) throws IOException { return Files . copy ( source , Paths . get ( target ) , StandardCopyOption . REPLACE_EXISTING ) ; }
public void getHotVoteList ( int offset , @ NonNull User user ) { getVoteList ( offset , EventBusController . RemoteServiceEvent . GET_VOTE_LIST_HOT , user ) ; }
public void onRegisterSuccessTracking ( UserModel userModel ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsHelper . PARAM_USER_UID , userModel . getUid ( ) ) ; analyticsHelper . trackRegisterSuccess ( bundle ) ; }
private void overlayFailedMedia ( ) { for ( String localMediaId : mFailedMediaIds ) { Attributes attributes = content . getElementAttributes ( MediaPredicate . getLocalMediaIdPredicate ( localMediaId ) ) ; overlayFailedMedia ( localMediaId , attributes ) ; } }
public void setNdtUploadKbit ( Double ndtUploadKbit ) { this . ndtUploadKbit = ndtUploadKbit ; }
private AppProvider ( Context context ) { mApplicationContext = context ; NetworkClient . init ( mApplicationContext ) ; sharedPreferences = mApplicationContext . getSharedPreferences ( "CurrentEconomy" , Context . MODE_PRIVATE ) ; getCurrentEconomy ( ) ; }
private void switchEditTextToTextView ( EditText editText , TextView textView ) { editText . setVisibility ( View . INVISIBLE ) ; textView . setVisibility ( View . VISIBLE ) ; mPager . requestFocus ( ) ; }
public void onBindViewHolder ( BaseViewHolder holder , int position ) { holder . bind ( elements . get ( position ) , elements . get ( position ) . getOnClickListener ( ) ) ; }
public void onBindViewHolder ( RecyclerViewHolder holder , int position ) { holder . setData ( get ( position ) , getSelected ( position ) ) ; }
private void startDirectLogin ( ) { DirectAuthDialog . newInstance ( ) . targetTo ( this , REQEUST_DIRECT_LOGIN ) . show ( getFragmentManager ( ) , "direct - login" ) ; }
public Promise < ? > resume ( ) { return playlistPlayer . resume ( ) ; }
public static List < Tag > getAllTags ( Context context ) { return DbHelper . getInstance ( ) . getTags ( ) ; }
public void set_fdReadMem ( int addr , int len ) { macWrite ( 0x11c , addr ) ; macWrite ( 0x11d , len ) ; }
public void onClick ( View v ) { choice = 7 ; if ( selectedImageUri != null ) { executeSlowMotionVideoCommand ( ) ; } else Snackbar . make ( mainlayout , "Please upload a video" , 4000 ) . show ( ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( getApplicationContext ( ) , AddContactDetails . class ) . putExtra ( "name" , sname . getText ( ) . toString ( ) . trim ( ) ) ; startActivity ( intent ) ; }
public CachedAdMobAdManager ( ) { useInterstitialAds = false ; Logger . debug ( "CachedAdMobAdManager instantiated" ) ; }
public boolean shouldShowInlineTags ( ) { return ! mGroupByTags ; }
private DbHelper ( Context mContext ) { super ( mContext , DATABASE_NAME , null , DATABASE_VERSION ) ; this . mContext = mContext ; this . prefs = mContext . getSharedPreferences ( Constants . PREFS_NAME , mContext . MODE_MULTI_PROCESS ) ; }
public static double bitcoinsFromSatoshis ( long pSatoshis ) { return ( double ) pSatoshis / 100000000 . 0 ; }
public int getItemViewType ( int position ) { if ( position == 0 ) { return 0 ; } else { return 1 ; } }
public MarvinMeals getItem ( int position ) { return mealList . get ( position ) ; }
public boolean fileExists ( String fileName ) { return new File ( curDir . get ( ) , fileName ) . exists ( ) ; }
public void run ( ) { try { reader . close ( ) ; } catch ( Throwable t ) { } }
public void setDataAfterLoading ( LoadHistoryCompleteEvent event ) { progressListener . hideProgressBar ( ) ; Bus . loadServingsHistoryCompleteEvent ( event ) ; }
public Loader < TotalReviews > onCreateLoader ( int id , Bundle args ) { return new FetchMovieReviewsLoader ( getContext ( ) , movie . getId ( ) ) ; }
public void splitUntil ( ) { final TextParser tp = new TextParser ( "this|is||a\\|test\\\\\\ } } " ) ;
public List < Kd2Misc > getMisc ( ) { return misc ; }
public void setSec ( int sec ) { this . sec = sec ; }
public final void setValue ( @ Nullable T value ) { if ( animation != null ) { this . value = value ; animation . notifyListeners ( ) ; } }
private void getIntentFromPreviousActiity ( ) { Intent intent = getIntent ( ) ; dateFormat = intent . getStringExtra ( "dateFormat" ) ; }
public void addFirst ( ArrayList < UserModel > list ) { users . addAll ( 0 , list ) ; notifyDataSetChanged ( ) ; }
public static void setLimitCalories ( Context context , String limitCalories ) { SharedPreferences . Editor editor = getSharedPreferences ( context ) . edit ( ) ; editor . putString ( LIMIT_CALORIES , limitCalories ) ; editor . apply ( ) ; }
public void onPageSelected ( int position ) { Log . d ( TAG , "onPageSelected : " + position ) ; refreshAdapters ( position ) ; setCalendarDateTime ( currentDateTime ) ; }
public String getWhereName ( ) { return displayName . toLowerCase ( ) ; }
public void onViewStop ( ) { getView ( ) . setDisplayOptions ( DEFAULT_KEEP_SCREEN_ON_STATE , ActivityInfo . SCREEN_ORIENTATION_UNSPECIFIED ) ; countdownPresenter . onViewStop ( ) ; stopwatchPresenter . onViewStop ( ) ; }
public void onClick ( View v ) { if ( mServiceClickListener != null ) { mServiceClickListener . onServiceConnectionClicked ( service , connection ) ; } }
public void removePeek ( MotionEvent event ) { if ( peekView != null ) { if ( event != null ) peekView . checkButtons ( event ) ; peekView . hide ( ) ; peekView = null ; } }
public boolean hasEnabledAccounts ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( SETTING_ENABLED_ACCOUNTS , true ) ; }
private boolean isCurrentActivity ( Class < ? > activity ) { return activity . isInstance ( mContext ) ; }
public void onFailure ( Call < Void > call , Throwable t ) { setButtonFriends ( - 1 ) ; }
public Object instantiateItem ( ViewGroup container , int position ) { Fragment fragment = ( Fragment ) super . instantiateItem ( container , position ) ; mRegisteredFragments . put ( position , fragment ) ; return fragment ; }
public void setRole ( String role ) { this . role = role ; }
public synchronized void start ( ) { mHasRun = true ; super . start ( ) ; }
public void onStop ( LifecycleOwner owner ) { if ( MainActivity . this . settings . getRelockOnBackground ( ) ) MainActivity . this . requireAuthentication = true ; }
public void connect ( Context context , MiBand2Profile profile , NotifyListener listener ) { this . miBand = new MiBand ( context ) ; this . profile = profile ; this . listener = listener ; this . startScanAndMonitorSteps ( ) ; }
public void log ( String s ) { Timber . e ( s ) ; }
public int centerText ( ) { return ( int ) ( ( paint . descent ( ) + paint . ascent ( ) ) / 2 ) ; }
public static String getPort ( ) { return getString ( PORT , "80" ) ; }
public void stopSweeps ( ) { if ( toggleButtonDoSweep != null ) { toggleButtonDoSweep . setChecked ( false ) ; } doSweeps = false ; }
private void storeReading ( long departure ) { putValueTrimSize ( DEPARTURE_FIELD , null , System . currentTimeMillis ( ) , departure ) ; }
public boolean isItemChanged ( ) { return mViewHolder . isChanged ( ) ; }
public Filter getFilter ( ) { return new SelectFilter ( ) ; }
public void onResume ( ) { super . onResume ( ) ; isUIVisible = true ; }
public void setGameBoards ( GameBoardsAdaptor gameBoards ) { m_GameBoards = gameBoards ; }
public KeyStylesSet ( @ NonNull final KeyboardTextsSet textsSet ) { mTextsSet = textsSet ; mEmptyKeyStyle = new EmptyKeyStyle ( textsSet ) ; mStyles . put ( EMPTY_STYLE_NAME , mEmptyKeyStyle ) ; }
public String getHomepage ( ) { return mPrefs . getString ( Name . HOMEPAGE , Constants . SCHEME_HOMEPAGE ) ; }
public void whenKeyHasUnknownValue_doesNotDoAnything ( ) { initPrefs ( prefs , "colour" , "blue" ) ; translateKey ( "color" ) . toKey ( "coleur" ) . fromValue ( "red" ) . toValue ( "rouge" ) . apply ( prefs ) ; assertPrefs ( prefs , "colour" , "blue" ) ; }
private RangePickerDecimalWidget createWidget ( FormEntryPrompt prompt ) { return new RangePickerDecimalWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) ) ; }
public SettingsPresenter providePresenter ( SettingsPresenterImpl presenter ) { return presenter ; }
public void loadNote ( String uuid ) { DisplayNoteInteractor interactor = new DisplayNoteInteractorImpl ( mExecutor , mMainThread , this , mNoteRepository , uuid ) ; interactor . execute ( ) ; }
public boolean isVariable ( ) throws ExpressionFormatException { if ( atomType != Atom . AtomType . INVALID ) { return expression . isVariable ( ) ; } else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
private SimpleEvent msgSetSelection = new SimpleEvent ( ) { @ Override public void process ( ) { spinner . setSelection ( selectedIndex ) ; } } ;
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitRankConstant ( this ) ; else return visitor . visitChildren ( this ) ; }
public synchronized void closeDriver ( ) { if ( camera != null ) { camera . release ( ) ; camera = null ; framingRect = null ; framingRectInPreview = null ; } }
public DbOpenHelper open ( String dbName ) throws SQLException { mDBHelper = new DatabaseHelper ( mCtx , dbName , null , DATABASE_VERSION ) ; mDB = mDBHelper . getWritableDatabase ( ) ; return this ; }
private void resendPending ( final boolean retrying , final boolean forcePending , final String to ) { resendPendingMessages ( retrying , forcePending , to ) ; resendPendingReceipts ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { saveSettings ( ) ; return true ; }
public void onOffsetChanged ( AppBarLayout appBarLayout , int verticalOffset ) { * verticalOffset == 0说明appbar已经是展开状态 */ viewModel . canRefresh . set ( verticalOffset == 0 ) ; }
public DatabaseUtil ( Context context ) { mContext = context ; }
public void onClick ( DialogInterface dialog , int id ) { removeDialog ( DIALOG_DONATE ) ; }
public int dr ( ) { return getBelongings ( ) . getItemFromSlot ( Belongings . Slot . ARMOR ) . effectiveDr ( ) ; }
public MapCluster ( String country , long latitude , long longitude , List < Run > runs ) { this . country = country ; this . latitude = latitude ; this . longitude = longitude ; this . runs = runs ; }
public String getStepDataAsHumanReadableString ( ) { return null ; }
private static String [ ] loadGroupPeersInternal ( Context context , String groupJid ) { return MessagesProviderUtils . getGroupMembers ( context , groupJid , 0 ) ; }
public static synchronized FluentQuery offset ( int value ) { FluentQuery cQuery = new FluentQuery ( ) ; cQuery . mOffset = String . valueOf ( value ) ; return cQuery ; }
public void onSuccess ( Boolean oauth2started ) { if ( ! oauth2started ) { onLogin ( ) ; } }
public String getTagTitle ( ) { return StringUtils . notNullStr ( tagTitle ) ; }
public void testAddition ( ) { Money result = money . add ( new Money ( "5" , CURRENCY_CODE ) ) ; assertEquals ( "20 . 75" , result . toPlainString ( ) ) ; assertNotSame ( result , money ) ; validateImmutability ( ) ; }
public int getSelectedTextColor ( ) { return selectedTextColor ; }
public int getItemCount ( ) { return values . size ( ) ; }
public void setTopViewHeight ( int topFragmentHeight ) { transformer . setViewHeight ( topFragmentHeight ) ; }
public int compareTo ( FilesAdapterDisplayObject another ) { if ( ! ( another instanceof FilesAdapterDisplayFile ) ) { return super . compareTo ( another ) ; } return AndroidUtils . integerCompare ( fileIndex , ( ( FilesAdapterDisplayFile ) another ) . fileIndex ) ; }
public void onMapSelected ( int x , int y , MapIndex . ACTION action , MapIndex . IndexStats stats ) { update ( ) ; }
public void addSong ( int position , Song song ) { playingQueue . add ( position , song ) ; originalPlayingQueue . add ( position , song ) ; saveState ( ) ; }
public static boolean moveItem ( final Context context , int playlistId , int from , int to ) { return MediaStore . Audio . Playlists . Members . moveItem ( context . getContentResolver ( ) , playlistId , from , to ) ; }
public static com . coinomi . core . protos . Protos . Key parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void setDue ( int due ) { this . due = due ; }
public static void main ( String [ ] arg ) { LwjglApplicationConfiguration config = new LwjglApplicationConfiguration ( ) ; config . width = 800 ; config . height = 480 ; config . title = "Tabbed Menu" ; new LwjglApplication ( new TabbedMenu ( ) , config ) ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equal ( calendar , ( ( CaldavFilter ) other ) . calendar ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersGridView , StickerMasksView . this . getMeasuredHeight ( ) ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public static StorageChooser filePicker ( FragmentActivity activity ) { return storageChooser ( StorageChooser . FILE_PICKER , ( FragmentActivity ) activity ) ; }
public void onClick ( DialogInterface dialog , int which ) { isNetworkAvailable ( ) ; }
public void onSuccessfully ( EventViewModel event ) { EventBus . getDefault ( ) . post ( new EventModifiedEvent ( event ) ) ; finish ( ) ; }
public boolean areItemsTheSame ( @ NonNull TagData oldItem , @ NonNull TagData newItem ) { return Objects . equal ( oldItem . getId ( ) , newItem . getId ( ) ) ; }
public void onFailure ( Call < Visit > call , Throwable t ) { ToastUtil . error ( t . getMessage ( ) ) ; }
public static void setSubscriptions ( CaseInsensitiveArrayList subs ) { subscriptions . edit ( ) . putString ( Authentication . name , Reddit . arrayToString ( subs ) ) . apply ( ) ; }
public void run ( ) { BleManager . getInstance ( ) . connect ( bleDeviceList . get ( 0 ) , callback ) ; }
public FragmentAdapter ( ) { super ( getSupportFragmentManager ( ) ) ; }
public WeatherWidgetProvider4x2 ( ) { super ( 4 ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_seller_product , parent , false ) ; return new ViewHolder ( view ) ; }
public void getIdTIMEDTest ( ) throws Exception { int index = 2 ; AppTheme apptheme = AppTheme . getTheme ( index ) ; assertEquals ( index , apptheme . getId ( ) ) ; }
public String getCreditsNow ( ) { return customFields . getCreditsNow ( ) . toString ( ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; updateRows ( ) ; if ( type == 0 ) { NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . didSetPasscode ) ; } return true ; }
public int [ ] argType ( ) { return new int [ ] { CommandAbstraction . PACKAGE } ; }
private int getOrientation ( int rotation ) { return ( ORIENTATIONS . get ( rotation ) + sensorOrientation + 270 ) % 360 ; }
public int getMarkerStyle ( ) { if ( Module . isPro ( ) ) { int loaded = Prefs . getInstance ( mContext ) . getMarkerStyle ( ) ; return getMarkerStyle ( loaded ) ; } else { return R . drawable . ic_location_pointer_blue ; } }
public void onBindChildViewHolder ( CVH holder , int groupPosition , int childPosition , int viewType , List < Object > payloads ) { onBindChildViewHolder ( holder , groupPosition , childPosition , viewType ) ; }
public ExcelExportDialogFragment ( WordActivity wordActivity , long categoryId ) { this . wordActivity = wordActivity ; this . categoryId = categoryId ; }
public boolean isSolved ( ) { return isSolved ; }
public void onCheckedChanged ( RadioGroup radioGroup , int checkedId ) { switch ( radioGroup . getCheckedRadioButtonId ( ) ) { case R . id . teacher : isTeacher = true ; break ; case R . id . student : isTeacher = false ; break ; } }
public INIProperties ( String fileName ) { this . configuration = new Properties ( ) ; this . fileName = fileName ; }
public void indicateMsgInit ( ) { handler . removeMessages ( BleMsg . MSG_CHA_INDICATE_START ) ; }
public int getGroupCount ( ) { return mAdapter . getGroupCount ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { outState . putIntegerArrayList ( SAVED_SELECTION , recyclerAdapter . getSelectedPositions ( ) ) ; outState . putString ( SAVED_DIRECTORY , getPath ( currentDirectory ) ) ; super . onSaveInstanceState ( outState ) ; }
private void switchToLauncher ( ) { Intent intent = new Intent ( Match . this , Launcher . class ) ; startActivity ( intent ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( this . id ) ; dest . writeString ( this . name ) ; }
public static PostCommentListingURL forPostId ( String postId ) { return new PostCommentListingURL ( null , postId , null , null , null , null ) ; }
public Collection getMessages ( ) { return messages ; }
public void setCustomTitle ( View customTitleView ) { mAlert . setCustomTitle ( customTitleView ) ; }
private View . OnClickListener onCurrentProfileClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( final View v ) { onProfileClick ( v , true ) ; } } ;
public List < WalletAddress > getAddresses ( ) { return addresses ; }
public Championship addTrack ( String trackId , String trackName ) { Track track = new Track ( this , trackId , trackName ) ; mTracks . add ( track ) ; return this ; }
public boolean isVisible ( ) { return mVisible && ! mNode . getTankFactory ( ) . maxLevelReached ( ) && owner . getEnergy ( ) >= mNode . getTankFactory ( ) . getUpgradeCost ( ) ; }
public FrontPageListAdapter ( List < ItemListItemViewModel > myDataset , ClickListener clickListener ) { mDataset = myDataset ; mClickListener = clickListener ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { return mValues . get ( oldItemPosition ) . getId ( ) == educationList . get ( newItemPosition ) . getId ( ) ; }
public NavDrawerListAdapter ( Context context , List < NavDrawerItem > navDrawerItems ) { this . context = context ; this . navDrawerItems = navDrawerItems ; }
public String getUsername ( ) { return jid . getLocal ( ) ; }
public void end ( String body ) { opt . setValue ( body ) ; tmp . getOptions ( ) . addOption ( opt ) ; }
public PlantCollection ( ) { idToPlant = new HashMap < String , Plant > ( ) ; }
public void remove ( final K key , final V value ) { WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list != null ) { list . remove ( value ) ; } }
public static boolean syncEventCalendarNotificationDeleteOnly ( Context context , int event , EventsUsers eventsUsers ) { boolean calendarEnable = AppSettings . Notifications . getCalendarSync ( context ) ; return calendarEnable && syncEventCalendarDeleteOnly ( context , event , eventsUsers ) ; }
public synchronized Bitmap requestArtistImage ( ArtistModel artist ) { printUsage ( ) ; return mCache . get ( getArtistHash ( artist ) ) ; }
public static void unknownCommand ( CommandSender commandSender ) { commandSender . print ( Localization . get ( "commands . common . unknownCommand" ) ) ; }
public void setRailcarJson ( String jsonRailcar ) { this . railcarJson = StringUtils . notNullStr ( jsonRailcar ) ; }
public void performAction ( Context context , TimestampedValue [ ] newValues ) { if ( tag != null ) { Log . println ( priority , tag , message ) ; } else { Log . println ( priority , TAG , message ) ; } }
public NotificationsHelper show ( ) { show ( null ) ; return this ; }
public int findFirstCompletelyVisibleItemPosition ( ) { return mLayoutManager . findFirstCompletelyVisibleItemPosition ( ) ; }
public AccountHeaderBuilder withTypeface ( Typeface typeface ) { this . mTypeface = typeface ; return this ; }
public static com . coinomi . core . protos . Protos . PeerAddress parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public int getCount ( ) { log . severe ( "Widget columns count : " + cursor . getCount ( ) ) ; return cursor . getCount ( ) ; }
public static long elapsedRealTimeNanos ( ) { if ( Build . VERSION . SDK_INT >= 17 ) { return SystemClock . elapsedRealtimeNanos ( ) ; } return SystemClock . elapsedRealtime ( ) * 1000000l ; }
public Integer getItemID ( ) { return itemID ; }
public boolean isFinishEnabled ( ) { return finishEnabled ; }
private void loadVertretungsplan ( ) { VertretungsplanManager . downloadAndSave ( this , LoginManager . load ( PreferenceManager . getDefaultSharedPreferences ( this ) ) , eventManager ) ; }
public void publishProgress ( Progress value ) { if ( task != null ) { task . doProgress ( value ) ; } }
public void setCurrentAudioOutputType ( final AudioOutputType type ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . setCurrentAudioOutputType ( type ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( this . largestPage ) ; dest . writeParcelable ( this . firstPart , flags ) ; dest . writeInt ( this . lastPart ) ; }
public void setCaptionId ( String captionId ) { this . captionId = captionId ; }
public void setUid ( String uid ) { this . uid = uid ; }
public void onViewDetachedFromWindow ( RecyclerView . ViewHolder holder ) { super . onViewDetachedFromWindow ( holder ) ; clearAnimation ( holder ) ; }
public int getItemPosition ( Object object ) { if ( object != storedFragment ) return POSITION_NONE ; return POSITION_UNCHANGED ; }
public void openTransportation ( View v ) { setTitle ( "Transportation" ) ; setNavFragment ( iitbbs . iitbhubaneswar . R . layout . transport ) ; }
public static void init ( @ NonNull Context context ) { database = Room . databaseBuilder ( context . getApplicationContext ( ) , DatabaseHolder . class , "counters - database" ) . addMigrations ( MIGRATION_1_2 ) . fallbackToDestructiveMigration ( ) . build ( ) ; }
public void handleDownloadFailure ( int errId ) { String s = getString ( errId ) ; mAudioStatusBar . setProgressText ( s , true ) ; }
public static boolean checkIfItsTopicFormatedLink ( String linkToCheck ) { return linkToCheck . startsWith ( "http : linkToCheck . startsWith ( "http : }
public void onStop ( ) { super . onStop ( ) ; mContext . unregisterReceiver ( mBluetoothReceiver ) ; if ( ConnectionUtils . bluetoothIsEnabled ( ) ) mScanner . stopScan ( ) ; }
public static Book book ( String name ) { if ( name . equals ( DEFAULT_DB_NAME ) ) throw new PaperDbException ( DEFAULT_DB_NAME + " name is reserved for default library name" ) ; return getBook ( name ) ; }
public void setDTR ( boolean state ) { if ( state ) { setControlCommand ( CP210x_SET_MHS , CP210x_MHS_RTS_ON , null ) ; } else { setControlCommand ( CP210x_SET_MHS , CP210x_MHS_RTS_OFF , null ) ; } }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; LOGD ( TAG , "Attaching to activity" ) ; mActivity = activity ; }
private void processTogglePlaybackRequest ( ) { if ( mState == State . Paused || mState == State . Stopped ) { processPlayRequest ( ) ; } else { processPauseRequest ( ) ; } }
public void testFromCollection ( ) { UniqueArrayList < String > uniqueArrayList = UniqueArrayList . from ( dupData ) ; assertEquals ( noDupData , uniqueArrayList ) ; uniqueArrayList = new UniqueArrayList <> ( ) ; assertTrue ( uniqueArrayList . isEmpty ( ) ) ; }
public void setPenaltyChargesWaived ( Integer penaltyChargesWaived ) { this . penaltyChargesWaived = penaltyChargesWaived ; }
public void notifyAdapterDataSetChanged ( ) { Collections . sort ( items , String : : compareToIgnoreCase ) ; super . notifyDataSetChanged ( ) ; }
public void whenPromptHasAnswer_answerTextViewShowsCorrectAnswer ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( answer ) ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) , GeoWidgetUtils . getAnswerToDisplay ( widget . getContext ( ) , answer . getDisplayText ( ) ) ) ; }
public DeleteSelectedDialog clickDeleteSelected ( int numberSelected ) { clickOnString ( R . string . delete_file ) ; return new DeleteSelectedDialog ( numberSelected , this , rule ) . assertOnPage ( ) ; }
public void onResume ( ) { Log . w ( TAG , "onResume ( ) " ) ; super . onResume ( ) ; dynamicTheme . onResume ( this ) ; dynamicLanguage . onResume ( this ) ; }
private void closeDialoge ( ) { if ( loadingDialog != null && loadingDialog . isShowing ( ) ) { loadingDialog . dismiss ( ) ; } }
public void setName ( CharSequence name ) { if ( ! name . equals ( this . name ) ) this . name = name ; }
public boolean onClose ( ) { mSearchQuery = null ; setSearchMode ( false ) ; return true ; }
public void onClick ( View v ) { mUiController . newTabClicked ( ) ; }
public ArrayListOfJobsAdapter ( Context context , int textViewResourceId , ArrayList < Job > jobs ) { super ( context , textViewResourceId , jobs ) ; this . jobs = jobs ; this . context = context ; }
private void resetAutoSendTimersIfNecessary ( ) { if ( Session . getAutoSendDelay ( ) != preferenceHelper . getAutoSendInterval ( ) ) { Session . setAutoSendDelay ( preferenceHelper . getAutoSendInterval ( ) ) ; setupAutoSendTimers ( ) ; } }
public void onChangeFinished ( RecyclerView . ViewHolder item ) { assertTrue ( mChangeFinished . add ( item ) ) ; onFinished ( ) ; }
public boolean isValid ( ) { if ( nameError == null && timesPerDurationError == null && durationError == null ) { return true ; } else { return false ; } }
public int compare ( AppData t0 , AppData t1 ) { return t0 . getAppPackageName ( ) . compareTo ( t1 . getAppPackageName ( ) ) ; }
public String name ( ) { if ( ModdingMode . isHalloweenEvent ( ) ) { return Game . getVar ( R . string . Barrel_Pumpkin_Name ) ; } else { return Game . getVar ( R . string . Barrel_Name ) ; } }
public void clearFileOpCache ( ) { fileOpContext . setFirst ( NONE ) ; fileOpContext . setSecond ( new ArrayList <> ( ) ) ; reloadCurrentDirectory ( ) ; }
public static void doFriendsOfMain ( MainActivity main ) { doFriendsOf ( ) ; main . doFriends ( ) ; }
private TimeStampedPVCoordinates getPVCoordinates ( AbsoluteDate date ) throws OrekitException { Frame frame = FramesFactory . getTEME ( ) ; tleProp . propagate ( date ) ; return tleProp . getPVCoordinates ( date , frame ) ; }
public Socket createSocket ( InetAddress host , int port ) throws IOException { return patch ( delegate . createSocket ( host , port ) ) ; }
public void onClick ( View v ) { Log . d ( TAG , "Retry button clicked" ) ; actionsListener . loadBooksForLanguagePreference ( ) ; }
public void onBindViewHolder ( MyViewHolder holder , int position ) { Timetable timetable = timetablesList . get ( position ) ; holder . name . setText ( timetable . getName ( ) ) ; holder . key . setText ( timetable . getKey ( ) ) ; }
public View getView ( ) { return view ; }
public WallpaperUpdater ( Activity activity , WallpaperUpdaterDelegate wallpaperUpdaterDelegate ) { parentActivity = activity ; delegate = wallpaperUpdaterDelegate ; currentWallpaperPath = new File ( FileLoader . getInstance ( ) . getDirectory ( FileLoader . MEDIA_DIR_CACHE ) , Utilities . random . nextInt ( ) + " . jpg" ) ; }
public void onPreView ( ) { progressDialog = ProgressDialog . show ( ViewEmail . this , "" , getString ( R . string . dialog_fetching_content ) , true ) ; progressDialog . setCancelable ( false ) ; }
public void updateDrawState ( @ NonNull TextPaint ds ) { ds . setUnderlineText ( true ) ; ds . setColor ( UiUtils . resolveColor ( mContext , android . R . attr . textColorLink ) ) ; }
public SearchBar ( Context context ) { super ( context ) ; init ( context ) ; }
public void setOriginalImagePref ( int originalImagePref ) { editor . putInt ( "OriginalImagePref" , originalImagePref ) ; editor . commit ( ) ; }
public void loadTeam ( int teamNumber ) { getMvpView ( ) . clearCurrentTeamLocations ( ) ; rxTeamLocationsCacheHelper . cache ( locationsRepository . getTeamLocations ( teamNumber ) . toObservable ( ) . compose ( RxUtil . applyIoSchedulers ( ) ) ) ; continueCachedTeamLocationsRequest ( ) ; }
public CropImageView . CropShape getCropShape ( ) { return mCropShape ; }
public static void trigger ( @ NonNull ConversationItem conversationItem ) { triggerReplyIcon ( conversationItem . reply ) ; }
public void cancelIncrement ( ) { this . mIncrement = false ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { getPreferenceManager ( ) . setPreferenceDataStore ( adminPreferencesDataStore ) ; }
public void setDrawBackgroundBarEnabled ( boolean enabled ) { drawBackgroundBarEnabled ( enabled ) ; invalidate ( ) ; }
public Total getAccountsTotalInHomeCurrency ( ) { Currency homeCurrency = em . getHomeCurrency ( ) ; return getAccountsTotal ( homeCurrency ) ; }
public void onSetHashtags ( ArrayList < SearchAdapterHelper . HashtagObject > arrayList , HashMap < String , SearchAdapterHelper . HashtagObject > hashMap ) { if ( lastText != null ) { searchUsernameOrHashtag ( lastText , lastPosition , messages ) ; } }
public void onAttached ( ) { subscriptions . add ( loadImage ( ) . subscribe ( new SimpleSubscriber < Void > ( ) ) ) ; }
public void onClick ( View v ) { LinkHandler . onLinkClicked ( ( Activity ) context , UserPostListingURL . getSubmitted ( username ) . generateJsonUri ( ) . toString ( ) , false ) ; }
public static boolean checkWeakReference ( WeakReference weakReference ) { return weakReference != null && weakReference . get ( ) != null ; }
public NetMonSignalStrength ( Context context ) { mContext = context ; mTelephonyManager = ( TelephonyManager ) context . getSystemService ( Context . TELEPHONY_SERVICE ) ; }
public ScalingImageView ( Context context ) { super ( context ) ; init ( ) ; }
public long setNumFiles ( long numFiles ) { totalFiles = numFiles ; return 0 ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . X_INVERSE ) ; }
private DateLabel ( LocalDate date , DateFormat formatter ) { this . date = date ; this . formatter = formatter ; }
public void setBackground ( int background ) { this . background = background ; }
public AccountManager provideAccountManager ( Context context ) { return AccountManager . get ( context ) ; }
public void play ( ) { Logging . debug ( "AnimationViewPlayer isPlaying" ) ; isPlaying = true ; view . invalidate ( ) ; }
public Builder setNegativeButtonIcon ( Drawable icon ) { P . mNegativeButtonIcon = icon ; return this ; }
public void onSuccess ( ) { log . v ( TAG , "login | onSuccess" ) ; loginSetupInformation ( this , isNewUser , ( ) -> { activity . finish ( ) ; staticUtil . lockOrientation ( activity , false ) ; } ) ; }
public TestTunnelLevel ( ) { levelLimitSize = 100f ; }
public String getNewSubject ( ) { return this . newSubject ; }
public void dispose ( ) { info . dispose ( ) ; }
public void run ( ) { consoleText . append ( "\n" + text ) ; }
private void initSnoozeTimePrefs ( ) { binding . delayForPrefs . setOnClickListener ( mSnoozeClick ) ; binding . delayForPrefs . setValue ( mPrefs . getSnoozeTime ( ) ) ; showSnooze ( ) ; }
public boolean onUnbind ( Intent pIntent ) { mIsBound = false ; return super . onUnbind ( pIntent ) ; }
public Airport ( String icao , String description ) { this . icao = icao . toUpperCase ( ) ; this . description = description ; }
private void initializeSwipeUpdate ( ) { swipeLayout . setRefreshing ( false ) ; swipeLayout . setOnRefreshListener ( presenter : : reloadNewsArticles ) ; }
public void deleteProvider ( ) { providerRepository . deleteProviders ( restApi , provider . getUuid ( ) , this ) ; }
public void onBackPressed ( ) { releaseSound ( ) ; super . onBackPressed ( ) ; }
public void updateQueryDelegatesToSearcher ( ) { String newQuery = "query2" ; viewModel . init ( searchRoot ) ; viewModel . updateQuery ( newQuery ) ; verify ( mockSearcher ) . updateQuery ( refEq ( request ( searchRoot , newQuery ) ) ) ; }
public static ServerConnectionManager getInstance ( Context context ) { if ( instance == null && context != null ) instance = new ServerConnectionManager ( context . getApplicationContext ( ) ) ; return instance ; }
public void onResume ( Context context ) { mRewardedVideoAd . resume ( context ) ; }
public FormsRepositoryProvider providesFormsRepositoryProvider ( ) { return new FormsRepositoryProvider ( ) ; }
public void importWallet ( View view ) { Intent it = new Intent ( MainActivity . this , RecoverActivity . class ) ; startActivity ( it ) ; }
public Privacy setType ( int type ) { this . type = type ; return this ; }
public MessagingDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public CharSequence getPageTitle ( int position ) { return fragmentTitles [ position ] ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "za . co . dvt . android . showcase" , appContext . getPackageName ( ) ) ; }
public void onUnfolded ( UnfoldableView unfoldableView ) { mListTouchInterceptor . setClickable ( false ) ; }
public SignedMessage ( SignedMessage otherMessage , Status newStatus ) { message = otherMessage . message ; address = otherMessage . address ; signature = otherMessage . address ; status = newStatus ; }
public String addPrefix ( String column ) { return getTableName ( ) + " . " + column ; }
public KeyEvent . DispatcherState answer ( final InvocationOnMock invocation ) throws Throwable { return dispatchState ; }
private static String getLanguage ( Context context ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; return prefs . getString ( LANGUAGE_KEY , LanguageUtils . getCurrentDeviceLanguageCode ( ) ) ; }
public static void log ( Context context , String s , Types type , int duration ) { log ( context , s , type , isWriteToFile , duration ) ; }
public void destroy ( ) { world . removeCollisionObject ( body ) ; dispose ( ) ; }
public void hidePreferenceOnlyForThisGame ( ) { if ( dialogPreferenceOnlyForThisGame . canBeHidden ( ) ) { customizationPreferenceFragment . getPreferenceScreen ( ) . removePreference ( dialogPreferenceOnlyForThisGame ) ; } }
public RefreshController ( ) { mRefreshableStates = new WeakHashMap <> ( ) ; }
public void onClick ( final View view ) { ImageInfoDialog . newInstance ( mImageInfo ) . show ( ImageViewActivity . this . getFragmentManager ( ) , null ) ; }
public void run ( ) { try { database . beginTransaction ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . gophillygo . app" , appContext . getPackageName ( ) ) ; }
public void pressPlay ( View v ) { countdownPlayer . play ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { DataManager . getInstance ( CareDetailsActivity . this ) . deleteCareItem ( getIntent ( ) . getIntExtra ( "careItemPosition" , - 1 ) ) ; finish ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_stickerSet . TLdeserialize ( stream , constructor , exception ) ; }
public void load ( ) { this . tls = preferences . getTls ( ) ; this . tlsCaCrtName = preferences . getTlsCaCrtName ( ) ; this . tlsClientCrtName = preferences . getTlsClientCrtName ( ) ; this . tlsClientCrtPassword = preferences . getTlsClientCrtPassword ( ) ; }
public boolean show ( ) { mPage = PAGE_BASIC ; return super . show ( ) ; }
public void onLoaderReset ( Loader loader ) { listAdapter . swapCursor ( null ) ; }
public void setDx ( int dx ) { changed = true ; mDx = dx ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . offline_menu , menu ) ; m_menu = menu ; initMenu ( ) ; return true ; }
public boolean openPhoto ( final ArrayList < SecureDocument > documents , final int index , final PhotoViewerProvider provider ) { return openPhoto ( null , null , null , documents , null , index , provider , null , 0 , 0 , true ) ; }
public void run ( ) { MathBrainerRepository repository = ( ( ApplicationProvider ) ApplicationProvider . getsContext ( ) ) . getRepository ( ) ; repository . incrementGameResult ( gameResultsName ) ; }
public String getFullDateString ( ) { SimpleDateFormat fullDateFormat = new SimpleDateFormat ( "EEEE , dd . MM . yyyy" , Locale . GERMANY ) ; return fullDateFormat . format ( date ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_9 . getText ( ) . toString ( ) ) ; }
private void ensureCreationDate ( ) { if ( creationDate == null ) { creationDate = plants . getCreationDate ( this ) ; creationDateMillis = creationDate . getTime ( ) ; } }
public void interpretList ( List < String > enteredIngredients ) { toggleAnalyzingUI ( true ) ; List < WeightedIngredient > myIngredients = null ; findResults ( myIngredients ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { MessagesController . getInstance ( ) . convertToMegaGroup ( getParentActivity ( ) , chat_id ) ; }
public void onPause ( ) { isPaused = true ; }
public List < RideRow > getRideList ( ) { return rideRows ; }
public int getKey_hint_offset_y ( ) { return key_hint_offset_y ; }
public void onMediaStoreChanged ( ) { updateQueue ( ) ; updateIsFavorite ( ) ; }
private static String buildRegex ( String query , boolean isOnlyWholeWords ) { String boundary = ( isOnlyWholeWords ) ? "\\\\b" : "" ; return String . format ( " ( ?is ) . *%s%s%s . *" , boundary , Pattern . quote ( query ) , boundary ) ; }
public Builder setup ( StepperFormListener stepperFormListener , Step . . . steps ) { return new Builder ( this , stepperFormListener , steps ) ; }
public AboutBuilder addFiveStarsAction ( int appId ) { return addFiveStarsAction ( context . getString ( appId ) ) ; }
private void updateCanopyDate ( ) { DateFormat df = new DateFormat ( ) ; this . canopyDateInUse . setText ( df . format ( myCalendar . getTime ( ) ) ) ; }
public CameraController . Size getCurrentPictureSize ( ) { if ( current_size_index == - 1 || sizes == null ) return null ; return sizes . get ( current_size_index ) ; }
public void cancel ( ) { if ( notificationManager != null ) { notificationManager . cancel ( NOTIFICATION_ID ) ; } if ( mSession != null ) { mSession . setActive ( false ) ; } }
public void setVendor ( String vendor ) { this . vendor = vendor ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return initializeForView ( new Game ( ) ) ; }
public MaterialAboutActionItem . OnClickListener getOnClickListener ( ) { return onClickListener ; }
public WellnessRestServer getServer ( ) { if ( this . server == null ) this . server = new WellnessRestServer ( SERVER_URL , 0 , API_PATH , this . getUser ( ) ) ; return this . server ; }
public static String getComposingText ( ) { if ( mContext == null || mContext . commit_text_preview == null ) return "" ; return mContext . commit_text_preview ; }
private void setUpSongListPadding ( ) { songListView . setPadding ( 0 , artistImageViewHeight + titleViewHeight , 0 , getBottomOffset ( ) ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . game_settings ) ; }
public void setDifficulty ( long [ ] [ ] difficulty ) { Difficulty = difficulty ; }
public String desc ( ) { return Game . getVar ( R . string . LibraryBook_Description ) ; }
public void showReaderPostLikeUsers ( long blogId , long postId ) { if ( isFinishing ( ) ) return ; ReaderActivityLauncher . showReaderLikingUsers ( this , blogId , postId ) ; }
public String getVoivodeship ( ) { return nameFormatHelper . formatVoivodeship ( dto . voivodeship ( ) ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = mContext . getLayoutInflater ( ) . inflate ( R . layout . list_item_friend , parent , false ) ; return new FriendsHolder ( itemView ) ; }
public void onArticleListSelectionChange ( ArticleList m_selectedArticles ) { initMenu ( ) ; }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { activateNextButton ( ) ; deselectAdvancedSetupView ( ) ; setupConfigurationAdapter . onListItemClick ( position ) ; }
public boolean addUpdate ( WeatherRecord weather ) { return this . addUpdate ( weather , true ) ; }
public void success ( Pager < PlaylistSimple > playlistSimplePager , Response response ) { subscriber . onNext ( playlistSimplePager . items ) ; subscriber . onComplete ( ) ; }
public void onErrorResponse ( String errorMessage ) { mPatientInfoView . setProgressBarVisibility ( false ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( getContext ( ) , ActivitySetup . class ) . putExtra ( "tab" , "connection" ) ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfMending_Info ) : super . desc ( ) ; }
public boolean isEnded ( ) { return inputEnded && outputBuffer == EMPTY_BUFFER ; }
public BookDbHelper ( Context context ) { super ( context , DatabaseSchema . BOOK_DATABASE_NAME , null , DatabaseSchema . BOOK_DATABASE_VERSION ) ; }
public static boolean isSearchInWholeWords ( ) { return getBoolean ( R . string . pref_key_search_in_whole_words , DEF_SEARCH_IN_WHOLE_WORDS ) ; }
public static void enqueueWork ( Context context , Intent work ) { enqueueWork ( context , GCMRegistrationIntentService . class , GCM_REG_SERVICE_JOB_ID , work ) ; }
public void testMinimalEncoder27 ( ) throws Exception { verifyMinimalEncoding ( "AB123" , "ALPHANUMERIC ( AB123 ) , TERMINATOR ( ) " , null , false ) ; }
public int getMinLvl ( ) { return minLvl ; }
public GetBlankFormPage clickGetBlankForm ( ) { onView ( withText ( getTranslatedString ( R . string . get_forms ) ) ) . perform ( scrollTo ( ) , click ( ) ) ; return new GetBlankFormPage ( rule ) . assertOnPage ( ) ; }
public static long getPingAlarmBackoff ( Context context , long defaultValue ) { String networkType = SystemUtils . getCurrentNetworkName ( context ) ; return ( networkType != null ) ? getLong ( context , "ping_alarm_backoff_" + networkType , defaultValue ) : defaultValue ; }
public AlbumViewModelFactory ( final Application application , final long artistID ) { this ( application , artistID , false ) ; }
public void addOnColorChangedListener ( OnColorChangedListener listener ) { this . colorChangedlisteners . add ( listener ) ; }
public boolean writeConsoleOutput ( String consoleOutputLine ) { if ( consoleOutput != null ) { consoleOutput . append ( consoleOutputLine ) ; Log . i ( TAG , " >>> " + consoleOutputLine ) ; return true ; } return false ; }
public void start ( ) { getGame ( ) . pushScreen ( createSelectVehicleScreen ( ) ) ; }
public void hide ( ) { if ( mShape != null ) { mShape . destroy ( ) ; } if ( mText != null ) { mText . destroy ( ) ; } mIsShowing = false ; }
private void showStartLine ( boolean show ) { mDrawStartLine = show ; initTimeline ( ) ; }
public EditItem ( int start , CharSequence before , CharSequence after ) { this . start = start ; this . before = before ; this . after = after ; }
public PostDetail ( ) { ParentComment_ID = "" ; infringing_user_name = "" ; coment_id = "" ; comment = "" ; post_id = "" ; post_Detail = "" ; post_image = "" ; infringing_user_profile_pic = "" ; infringing_user_id = "" ; PostUrl = "" ; }
private void initRecyclerView ( ) { LinearLayoutManager layoutManager = new LinearLayoutManager ( this ) ; recyclerView . setLayoutManager ( layoutManager ) ; }
public List < Product_ > getProducts ( ) { return products ; }
public TextView getMissingImage ( ) { return missingImage ; }
public WindowInsets onApplyWindowInsets ( WindowInsets insets ) { int childCount = getChildCount ( ) ; for ( int index = 0 ; index < childCount ; index ++ ) getChildAt ( index ) . dispatchApplyWindowInsets ( insets ) ; return insets ; }
public void onChildRemoved ( DataSnapshot dataSnapshot ) { Log . d ( "Child listener" , "new child was removed from invited ! " ) ; eAdapterInvited . removeEvent ( dataSnapshot . getKey ( ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_file_chooser ) ; mGroupOfFiles = ( RadioGroup ) findViewById ( R . id . radioGroupFileChooser ) ; }
public void startOutgoingCallActivity ( SipCall sipCall , Uri number ) { startCallActivity ( number , CallingConstants . TYPE_OUTGOING_CALL , sipCall . getCallerId ( ) , sipCall . getPhoneNumber ( ) , CallActivity . class ) ; callNotification . outgoing ( sipCall ) ; }
public void execute ( long text ) { progressBar . setProgress ( ( int ) text ) ; mProgressTextView . setText ( text + "%" ) ; }
private List < TransactionInfo > getSplitsForTransaction ( long transactionId ) { Query < TransactionInfo > q = em . createQuery ( TransactionInfo . class ) ; q . where ( Expressions . eq ( "parentId" , transactionId ) ) ; return q . list ( ) ; }
public static AddressEntity newInstance ( ) { return new AddressEntity ( ) ; }
private void setupRefreshLayout ( ) { swipeRefreshLayout . setEnabled ( false ) ; swipeRefreshLayout . setOnRefreshListener ( new SwipeRefreshLayout . OnRefreshListener ( ) { @ Override public void onRefresh ( ) { mAdapter . notifyDataSetChanged ( ) ; loadNews ( ) ; } } ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . DOT_POINT ) ; }
public Intent getIntent ( Context c ) { return ViewMatchActivity . newInstance ( c , matchKey ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; BUS . unregister ( this ) ; }
public void onBillingSetupFinished ( BillingResult arg0 ) { billingClientConnected = true ; querySkuDetails ( ) ; }
public User getCurrentUser ( ) { return mPrefsHelper . getCurrentUser ( ) ; }
public void onClick ( View v ) { if ( ! isLongClicked && ( ( CheckBox ) v ) . isChecked ( ) ) { downloadPatient ( patient ) ; disableCheckBox ( holder ) ; } }
public Duration getCacheDuration ( ) { return Duration . ofSeconds ( 10 ) ; }
private void handleList ( ListCommand command ) { ListPrinter . printList ( listener . getFileList ( ) ) ; }
public void updateRowTest ( ) throws IOException { ValueRange valueRange = new ValueRange ( ) ; sheetsHelper . updateRow ( "spreadsheet_id" , "sheet_name ! A1" , valueRange ) ; verify ( sheetsService ) . updateRow ( "spreadsheet_id" , "sheet_name ! A1" , valueRange ) ; }
public void onKeyPressed ( @ NonNull final Key key , final boolean withPreview ) { key . onPressed ( ) ; invalidateKey ( key ) ; if ( withPreview && ! key . noKeyPreview ( ) ) { showKeyPreview ( key ) ; } }
public void onFailure ( ExecutionException e ) { Toast . makeText ( ConversationActivity . this , R . string . ConversationActivity_unable_to_record_audio , Toast . LENGTH_LONG ) . show ( ) ; }
public boolean isEmpty ( ) { return mArticleAdapter . isEmpty ( ) ; }
public void setAuthorUrl ( String authorUrl ) { this . authorUrl = StringUtils . notNullStr ( authorUrl ) ; }
public void start ( Attributes attributes ) { mCurrentBoard . setNumberOfThreads ( Integer . parseInt ( attributes . getValue ( Board . Xml . NUMBER_OF_THREADS_ATTRIBUTE ) ) ) ; }
public boolean supportsHDR ( ) { return ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP && this . supportsAutoStabilise ( ) && preview . supportsExpoBracketing ( ) ) ; }
public void onSuccessfully ( Tag tag ) { EventBus . getDefault ( ) . post ( new TagModifiedEvent ( tag ) ) ; finish ( ) ; }
public void musicCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "music" ) ; }
public Mp4Extractor ( ) { atomHeader = new ParsableByteArray ( Atom . LONG_HEADER_SIZE ) ; containerAtoms = new Stack <> ( ) ; nalStartCode = new ParsableByteArray ( NalUnitUtil . NAL_START_CODE ) ; nalLength = new ParsableByteArray ( 4 ) ; enterReadingAtomHeaderState ( ) ; }
public Integer get_config ( @ NonNull String key , @ Nullable Integer defaultValue ) { if ( ! mConf . has ( key ) ) { return defaultValue ; } return mConf . getInt ( key ) ; }
public static void initProps ( LinkedHashMap < String , String > p ) { properties = p ; }
public void moveFiles ( String newLocation ) { noveFilesTask = new MoveFilesAsyncTask ( getActivity ( ) , newLocation , quranFileUtils ) ; noveFilesTask . execute ( ) ; }
public void onDestroyed ( ) { cacheLoadingDisposable . dispose ( ) ; loadingHolder . dispose ( ) ; super . onDestroyed ( ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { Data . output ( write ( ) , dataOutputStream ) ; }
public void notifyItemRangeChanged ( int positionStart , int itemCount ) { updateRows ( ) ; try { super . notifyItemRangeChanged ( positionStart , itemCount ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public String getNewRoom ( ) { return this . newRoom ; }
public void testSafeToAddAuthToken17 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( wpcomAddress3 ) ) ) ; }
public void onStop ( ) { super . onStop ( ) ; unregisterPeerObserver ( ) ; stopQuery ( ) ; }
public void execute ( Realm realm ) { NoteDAO dao = realm . where ( NoteDAO . class ) . equalTo ( "uuid" , deletedNote . getUuid ( ) ) . findFirst ( ) ; if ( dao != null ) dao . deleteFromRealm ( ) ; }
public LNTagViewHolder onCreateGroupViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . biblio_tag_basic_view , parent , false ) ; return new LNTagViewHolder ( view ) ; }
public static boolean isTreeUriSaved ( Context context ) { return ! TextUtils . isEmpty ( PreferenceUtil . getInstance ( context ) . getSAFSDCardUri ( ) ) ; }
private void createNewList ( final String name ) { Intent intent = new Intent ( CalendarReminderActivity . this , TaskListActivity . class ) ; intent . putExtra ( TaskListActivity . TOKEN_CREATE_NEW_LIST_NAME , name ) ; startActivity ( intent ) ; dismissButton . performClick ( ) ; }
public void gameIsOver ( ) { AstroSmashActivity . toDebug ( "Game Over ! " ) ; AstroSmashLauncher . playGameOverSound ( ) ; this . m_bRunning = false ; this . m_gameThread = null ; }
public PageInfo createFromParcel ( Parcel source ) { return new PageInfo ( source ) ; }
public void setData ( ArrayList < Song > songs ) { mBackUp . clear ( ) ; if ( songs != null ) mBackUp . addAll ( songs ) ; randommize ( ) ; }
public Observable < Review > getMyReview ( String foodtruckId ) { return networkRepository . getMyReview ( foodtruckId ) . doOnNext ( myReview -> viewModelRepository . getViewModel ( uuid ) . setMyReview ( myReview ) ) ; }
public EventDeletedEvent ( Event event ) { this . event = event ; }
public Placeholder ( long id , boolean isLoading ) { this . id = id ; this . isLoading = isLoading ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_exportedMessageLink . TLdeserialize ( stream , constructor , exception ) ; }
public MinMax ( String minfile , String maxfile , int min , int max ) { mMinFile = minfile ; mMaxFile = maxfile ; mMin = min ; mMax = max ; }
public List < Seances > getItemList ( ) { return listSeances ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . mRowView . setData ( mColumnIndexToValuesArray . get ( position ) ) ; }
private Completable commit ( IDocsStorage storage , UploadObject upload , DocumentEntity entity ) { return storage . store ( upload . getAccountId ( ) , entity . getOwnerId ( ) , Collections . singletonList ( entity ) , false ) ; }
public long saveEncounter ( Encounter encounter , Long visitID ) { EncounterEntity encounterEntity = AppDatabaseHelper . encounterToEntity ( encounter , visitID ) ; long id = encounterRoomDAO . addEncounter ( encounterEntity ) ; return id ; }
public String toString ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSDrive o : drives ) { strOut . append ( o . toString ( ) ) ; } return strOut . toString ( ) ; }
public void addGoogleLoginFragment ( ) { addGoogleFragment ( LoginGoogleFragment . newInstance ( mIsSignupFromLoginEnabled ) , LoginGoogleFragment . TAG ) ; }
public void onColumnSeparatorPicked ( ColumnSeparator columnSeparator ) { mColumnSeparator = columnSeparator . getCharacter ( ) ; mTextViewSeparator . setText ( columnSeparator . getResourceId ( ) ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; moviesPresenter . destroy ( ) ; ButterKnife . unbind ( this ) ; }
public Builder setPositiveButtonIcon ( Drawable icon ) { P . mPositiveButtonIcon = icon ; return this ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean isChecked ) { mDefaulTransferAccountSpinner . setEnabled ( isChecked ) ; }
public void setResult ( Intent result ) { _result = result ; getActivity ( ) . setResult ( Activity . RESULT_OK , _result ) ; }
public void run ( ) { showTweets ( ) ; }
public ArrayList < Iscritto > caricaDatabase ( ) { QueryIscritto database = ( QueryIscritto ) QueryIscritto . getInstance ( this ) ; return database . caricaIscritti ( palestra ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_minimal , parent , false ) ; return new MyViewHolder ( v ) ; }
public void performToggle ( ) { fabExpanded = ! fabExpanded ; fab . toggle ( ) ; }
public void testMinimalEncoder6 ( ) throws Exception { verifyMinimalEncoding ( "ABCDEF" , "ALPHANUMERIC ( ABCDEF ) , TERMINATOR ( ) " , null , false ) ; }
public void setFromIdsToDetails ( HashMap < String , FormDetails > formIdsToDetails ) { this . formIdsToDetails = formIdsToDetails ; }
private void notifyFragmentOfBackendConnected ( @ IdRes int id ) { final Fragment fragment = getFragmentManager ( ) . findFragmentById ( id ) ; if ( fragment != null && fragment instanceof XmppFragment ) { ( ( XmppFragment ) fragment ) . onBackendConnected ( ) ; } }
public int count ( ) { return editor . getSketchFiles ( ) . size ( ) ; }
public void addBookmark ( int pageId ) { sInternalUserDBHelper . addBookmark ( pageId , bookId ) ; }
public boolean onDown ( MotionEvent event ) { isScrollDetected = false ; animator . cancel ( ) ; flingAnimation . stop ( ) ; return false ; }
public void onCreate ( ) { super . onCreate ( ) ; TermuxCrashUtils . setCrashHandler ( this ) ; setLogLevel ( getApplicationContext ( ) , true ) ; Logger . logDebug ( "Starting Application" ) ; }
public State ( ) { mItemsFrames = new SparseArray < Rect > ( ) ; mScrollDelta = 0 ; }
public static void start ( Context context ) { Intent accountsActivityIntent = new Intent ( context , AccountsActivity . class ) ; accountsActivityIntent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; accountsActivityIntent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; context . startActivity ( accountsActivityIntent ) ; }
private static String getPropertyMarkdown ( String label , Object value ) { return MarkdownUtils . getSingleLineMarkdownStringEntry ( label , value , " - " ) ; }
public Integer getTotalWrittenOff ( ) { return totalWrittenOff ; }
public GitHubRestClient provideGitHubRestClientRx ( Retrofit retrofit ) { return new GitHubRestClient ( retrofit ) ; }
private void onMenuInvite ( ) { startActivity ( getIntentInvite ( ) ) ; }
private static void writeShort ( OutputStream out , short val ) throws IOException { out . write ( val ) ; out . write ( val >> 8 ) ; }
public MapPoint getCenter ( ) { return null ; }
public boolean isLeaving ( ) { return mIsLeaving ; }
private final Runnable mDrawCube = new Runnable ( ) { public void run ( ) { drawFrame ( ) ; } } ;
public boolean getInvMatchEnable ( ) { return mRfidDevice . mRx000Device . mRx000Setting . getInvMatchEnable ( ) > 0 ? true : false ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { float value = ( float ) seekBar . getProgress ( ) /maxInt ; final ActivatorState < Float > state = activator . getState ( ) ; state . setRawState ( value ) ; executeAsyncTask ( activator , state ) ; }
public void openNewTripFragment ( UUID parTripId ) { Log . d ( TAG , "openNewTripFragment ( . . . ) faked" ) ; }
public boolean isLaunchSingleActivated ( ) { return mSharedPreferences . getBoolean ( KEY_LAUNCHSINGLE , false ) ; }
private void Create ( AlertDialog . Builder builder ) { builder . setTitle ( R . string . dialog_title_create ) ; builder . setPositiveButton ( R . string . dialog_result_ok , this ) ; }
private Cursor search ( String query , String databaseName , boolean wantSnippets ) { final DatabaseHandler handler = DatabaseHandler . getDatabaseHandler ( getContext ( ) , databaseName ) ; return handler . search ( query , wantSnippets ) ; }
public void onResume ( ) { super . onResume ( ) ; SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( getContext ( ) ) ; onSharedPreferenceChanged ( prefs , "pro" ) ; prefs . registerOnSharedPreferenceChangeListener ( this ) ; }
public final String [ ] getValuePaths ( ) { return new String [ ] { TEMPERATURE_FIELD , LEVEL_FIELD , VOLTAGE_FIELD , PLUGGED_FIELD , STATUS_TEXT_FIELD } ; }
private void updateLastReportedPlayingMediaPeriod ( ) { if ( ! activeMediaPeriods . isEmpty ( ) ) { lastReportedPlayingMediaPeriod = activeMediaPeriods . get ( 0 ) ; } }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new level5 ( game ) ) ; }
public void onReceive ( Context context , Intent intent ) { onConnectivityChange ( isConnected ( context ) ) ; }
public void unbind ( RedditPostView boundView ) { if ( mBoundView == boundView ) { mBoundView = null ; mChangeDataManager . removeListener ( src , this ) ; } }
public UrgentInfoRequest ( ) { super ( UrgentInfo . class ) ; }
public int getSpanSize ( int position ) { return mFileModelCardAdapter . isHeader ( position ) ? gridLayoutManager . getSpanCount ( ) : 1 ; }
public BackendEmulatingOpenConflict ( BackendFactory mBackend ) { super ( mBackend ) ; }
public boolean onPreferenceClick ( Preference preference ) { showLoginDialog ( getActivity ( ) , getChildFragmentManager ( ) , LoginManager . load ( PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) ) ) ; return true ; }
public void onPingBtn ( String host ) { if ( mView . get ( ) != null ) { mView . get ( ) . updateProgressBarPingVisibility ( true ) ; } mModel . ping ( host ) ; }
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE " + TABLE_BOARD + " ; " ) ; onCreate ( db ) ; }
public static Typeface getFont ( final @ Font int font ) { final String fontPath = FONTS . get ( font ) ; return TypefaceUtils . load ( sAssets , fontPath ) ; }
public boolean onTouch ( View v , MotionEvent event ) { return presenter . processTapOnGameView ( event , getView ( ) ) ; }
public void unregisterExpression ( String id , String expression , String resolvedLocation , String action ) { }
public SuggestionAutoCompleteText ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( context , attrs ) ; }
private int _previewDelay ( Card card ) { return _cardConf ( card ) . optInt ( "previewDelay" , 10 ) * 60 ; }
public View getActionView ( ) { return null ; }
public Recipients getGroupRecipient ( ) { return groupRecipient ; }
public void onCompleted ( Object companion ) { AppLog . i ( AppLog . T . READER , "reader post service > all tasks completed" ) ; jobFinished ( ( JobParameters ) companion , false ) ; }
public void getAnswerToDisplay_whenAnswerIsNotConvertible_returnsEmptyString ( ) { assertEquals ( GeoWidgetUtils . getAnswerToDisplay ( context , "blah" ) , "" ) ; }
public static synchronized < T > T min ( Class < ? > modelClass , String columnName , Class < T > columnType ) { return min ( BaseUtility . changeCase ( DBUtility . getTableNameByClassName ( modelClass . getName ( ) ) ) , columnName , columnType ) ; }
public void testRequestResponseApiError ( ) throws Throwable { enqueueFromFile ( "api_error . json" ) ; new CsrfTokenClient ( wikiSite ( ) , 1 , getApiService ( ) ) . getToken ( ) . test ( ) . await ( ) . assertError ( Exception . class ) ; }
public com . coinomi . core . protos . Protos . Key . Builder getMasterKeyBuilder ( ) { bitField0_ | = 0x00000008 ; onChanged ( ) ; return getMasterKeyFieldBuilder ( ) . getBuilder ( ) ; }
public void whenPromptIsNotReadOnly_buttonShowsCorrectText ( ) { TimeWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . widgetButton . getText ( ) , widget . getContext ( ) . getString ( R . string . select_time ) ) ; }
public FoldersAdapter ( Context context ) { super ( context , 0 ) ; }
public static String converterDate ( Date date ) { SimpleDateFormat simpleDate = new SimpleDateFormat ( "dd/MM/yyyy" , Locale . getDefault ( ) ) ; return simpleDate . format ( date ) ; }
public void outputXMLExternal ( StellarService service , XmlSerializer out ) throws IllegalArgumentException , IllegalStateException , IOException { out . startTag ( "" , "plugin" ) ; dumpPluginCommonData ( out ) ; dumpLuaData ( out ) ; out . endTag ( "" , "plugin" ) ; }
public GroupInfo ( String jid , String subject , String type , int membership ) { mJid = jid ; mSubject = subject ; mType = type ; mMembership = membership ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent event ) { hideSoftKeyBoard ( ) ; getData ( ) ; return true ; }
private void updateState ( ) { setGrantPermissionVisibility ( ) ; setInstalledVisibility ( ) ; setTaskListState ( ) ; }
public void onActivityCreated ( Activity activity , Bundle savedInstanceState ) { }
public static TLRPC . InputUser getInputUser ( int user_id ) { TLRPC . User user = getInstance ( ) . getUser ( user_id ) ; return getInputUser ( user ) ; }
public void didSetColor ( int color ) { updateUserData ( ) ; }
public JsonElement PUT ( JsonObject object , String endpoint ) throws IOException { HttpURLConnection connector = this . connectToServer ( "PUT" , endpoint ) ; this . sendToServer ( connector , object ) ; JsonElement payload = this . getPayloadFromServer ( connector ) ; return payload ; }
public GetAuthRepoSubscribersSpecificationParams ( @ NonNull String access_token , @ NonNull String subscribers_url ) { this . access_token = access_token ; this . subscribers_url = subscribers_url ; }
public BigDecimal getValeurAcquise ( ) { return this . valeurAcquise ; }
private static < T > Observable < Page < T >> evaluateError ( Observable < Response < Page < T >>> input ) { return input . map ( response -> { throwOnFailure ( response ) ; return response . body ( ) ; } ) ; }
public GncXmlHandler ( ) { init ( null ) ; }
public static com . coinomi . core . protos . Protos . ScryptParameters parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public static String fromArrayList ( ArrayList < String > list ) { Gson gson = new Gson ( ) ; String json = gson . toJson ( list ) ; return json ; }
public boolean hasResponsePlaylists ( ) { return ( ( bitField0_ & 0x00040000 ) == 0x00040000 ) ; }
public ResponseAnswer getAnswer ( ) { return new ResponseAnswer ( radioButton . getAnswer ( ) . getIdOptiune ( ) , details . getText ( ) . toString ( ) ) ; }
public static void setPostsListViewLayoutType ( @ NonNull ViewLayoutType type ) { setLong ( DeletablePrefKey . POST_LIST_VIEW_LAYOUT_TYPE , type . getId ( ) ) ; }
public void levelCompleteNext ( View view ) { finish ( ) ; LEVELS . setIndex ( LEVELS . getIndex ( ) + 1 ) ; startActivity ( new Intent ( getBaseContext ( ) , GameActivity . class ) ) ; }
public void onAddNewline ( ) { mCommandEditor . runOp ( mCommandEditor . replaceSel ( "\n" ) ) ; }
public int getScore ( ) { return 0 ; }
public void onSuccess ( Post result ) { showPostInfo ( post ) ; }
public void doneProcessAvg ( int index ) { Log . d ( TAG , "doneProcessAvg : " + index ) ; if ( index == 1 ) { assertTrue ( mActivity . getApplicationInterface ( ) . getHDRProcessor ( ) . sharp_index == 0 ) ; } }
private double sqcmTosqfoot ( double num ) { return num * 0 . 00108 ; }
public void onBackKeyPressed ( ) { leaveScene = true ; sceneService . loadLevelChoiceFromTutorial ( ) ; }
public static void del_own_avatar ( ) { delete_vfs_file ( VFS_PREFIX + VFS_OWN_AVATAR_DIR + "/" , "avatar . png" ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { txtS . setText ( String . valueOf ( progress ) ) ; if ( run ) manageSend ( "S" + ( txtS . getText ( ) . toString ( ) ) ) ; }
public AboutBuilder setSubTitle ( int text ) { return setSubTitle ( context . getString ( text ) ) ; }
public void onLoggingEvent ( LoggingEvent logging ) { updateAutoStop ( logging . started ) ; }
public static synchronized < T > T findLast ( Class < T > modelClass ) { return findLast ( modelClass , false ) ; }
public static void setItems ( List < Item > items ) { Data . items = items ; }
public InputSearchManager ( Context context , LoaderManager loaderManager ) { super ( context , loaderManager ) ; loaderManager . restartLoader ( LoaderUtils . SEARCH_LOADER , null , this ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . WalletPocket prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onClick ( View v ) { applied = true ; parentLayout . rebuildAllFragmentViews ( false ) ; Theme . applyThemeFile ( themeFile , applyingTheme . name , false ) ; finishFragment ( ) ; }
public void onMediaLibraryImageButtonClicked ( ) { mEditorFragmentListener . onTrackableEvent ( TrackableEvent . MEDIA_BUTTON_TAPPED ) ; mEditorFragmentListener . onAddMediaImageClicked ( ) ; }
private void progressError ( Object data2 ) { progressDialog . dismiss ( ) ; maybeShowConfigurationError ( this , data2 ) ; }
public ServerListAdapter ( ServerListActivity context , int resource ) { super ( context , resource ) ; mContext = context ; layout_resource = resource ; serverModel = new ServerModel ( context ) ; items = serverModel . getEnabledServerList ( ) ; }
public long readDiscontinuity ( ) { if ( notifyReset ) { notifyReset = false ; return lastSeekPositionUs ; } return C . TIME_UNSET ; }
public void appendElementSignatureSource ( String value ) { elementSignatureSource . append ( value ) . append ( "\n" ) ; }
public void shouldParseHours ( ) { int actualHour = TimePreference . parseHours ( this . parsableHour ) ; assertEquals ( expectedHour , actualHour ) ; }
public static void rateApp ( Context context ) { String appId = context . getPackageName ( ) ; openMarket ( context , "market : }
public void playOrPause ( ) { Logging . debug ( "AnimationViewPlayer playOrPause" ) ; if ( isPlaying ) { isPlaying = false ; } else { isPlaying = true ; view . next ( ) ; } view . invalidate ( ) ; }
public void onDownloadProgressChange ( TourDownloadProgress downloadProgress ) { if ( ! isAdapterNotified ) { updateAdapter ( ) ; isAdapterNotified = true ; } }
private void updateRotation ( ) { int oldRotation = rotation ; rotation = getDeviceRotation ( ) ; if ( oldRotation != rotation ) { Log . w ( TAG , "rotation changed" ) ; onKeyboardClose ( ) ; } }
public final String transformUrl ( final Matcher match , String url ) { return HS_PRÆFIX + "src/" + match . group ( 1 ) . replace ( ' . ' , '/' ) + " . java" ; }
public AccountsManager ( Context context , boolean multipleAccounts ) { super ( context , multipleAccounts ) ; }
private void givenInvalidRequestReturningEmpty ( ) throws IOException { when ( mModelConverter . getForecastModel ( ) ) . thenReturn ( new ArrayList < ForecastData > ( ) ) ; }
public RTLOnlyViewPager ( Context context ) { super ( context ) ; }
public void onRestart ( ) { super . onRestart ( ) ; Log . d ( TAG , "OnRestart" ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( Prefers . this , Ripples . class ) ) ; }
public void activatePixelMatrix ( float [ ] buf , int offset ) { mPixelMatrix = buf ; mPixelMatrixOffset = offset ; if ( mProgramCurrent != null ) { mProgramCurrent . activatePixelMatrix ( buf , offset ) ; } }
public List < TransactionOutput > getOutputs ( ) { return tx . getOutputs ( ) ; }
private PhotoPagerAdapter getAdapter ( ) { if ( mAdapter == null ) { mAdapter = new PhotoPagerAdapter ( getFragmentManager ( ) ) ; } return mAdapter ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; prepare ( ) ; }
public DeleteModel ( long modID ) { this . modID = modID ; }
public static de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseTranscoderStatus parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public String desc ( ) { return Game . getVar ( R . string . Javelin_Info ) ; }
public Meal [ ] getAllMealsArray ( SQLiteOpenHelper helper ) { ArrayList < Meal > result = getAllMeals ( helper ) ; return result . toArray ( new Meal [ result . size ( ) ] ) ; }
public boolean onLoadFailed ( @ Nullable GlideException e , Object model , Target < Bitmap > target , boolean isFirstResource ) { doAfterAnimation ( ) ; return false ; }
public List < Category > getList ( ) { return mCateGory ; }
public SingleplayerNetworking ( ) { toServer = new PacketQueue ( false ) ; toClient = new PacketQueue ( false ) ; cloneToServer = new SingleplayerNetworkingThread ( toServer , Side . Server ) ; cloneToClient = new SingleplayerNetworkingThread ( toClient , Side . Client ) ; }
public void setConversationId ( int conversationId ) { this . conversationId = conversationId ; notifyPropertyChanged ( BR . conversationId ) ; }
public void onProductSelected ( Product product ) { product . toggleSelection ( ) ; view . updateList ( ) ; UpdateProducts updateProducts = new UpdateProducts ( this ) ; updateProducts . setSelection ( product ) ; }
public void testCompareTo ( ) throws Exception { assertTrue ( mTestTrip . compareTo ( mTestTrip2 ) < 0 ) ; assertTrue ( mTestTrip2 . compareTo ( mTestTrip ) > 0 ) ; assertTrue ( mTestTrip . compareTo ( mTestTrip ) == 0 ) ; }
public void bookmark ( View view ) { ( ( ImageView ) view ) . setImageResource ( R . mipmap . bookmark_checked ) ; mGoodView . setTextInfo ( "收藏成功" , Color . parseColor ( "#ff941A" ) , 14 ) ; mGoodView . show ( view ) ; }
public boolean onInterceptTouchEvent ( @ NonNull MotionEvent event ) { return mMixin . onInterceptTouchEvent ( event ) ; }
public int compare ( CardWrapper c1 , CardWrapper c2 ) { return c1 . getCard ( ) . getAnswer ( ) . compareTo ( c2 . getCard ( ) . getAnswer ( ) ) ; } ;
private int subIndex ( ) { if ( colorsSub == null ) return - 1 ; return getArguments ( ) . getInt ( "sub_index" , - 1 ) ; }
public float getRuntimePercent ( ) { return ( ( getMaxPosition ( ) - parent . getTranslationY ( ) + mScaleDeltaTranslate ) - minPosition + 0f ) / ( getMaxPosition ( ) - minPosition + 0f ) ; }
public Builder setPlaylistId ( int value ) { bitField0_ | = 0x00000001 ; playlistId_ = value ; onChanged ( ) ; return this ; }
public Date getCreatedAt ( ) { return this . createdAt ; }
public void onItemRangeInserted ( int positionStart , int itemCount ) { if ( itemCount > 0 ) { show ( ) ; } }
private void resetText ( ) { titleText . setText ( R . string . title_image_unavailable ) ; description . setText ( "" ) ; }
public boolean onTouchEvent ( @ NonNull MotionEvent event ) { return mController . onTouch ( this , mCurrentMotionEvent ) ; }
public Object getGroup ( int groupPosition ) { return this . houses [ groupPosition ] ; }
private static int getScore ( Element el ) { int old = 0 ; try { old = Integer . parseInt ( el . attr ( "gravityScore" ) ) ; } catch ( Exception ignored ) { } return old ; }
private void unwire ( ) { itemView . setOnClickListener ( null ) ; }
public static void i ( String tag , String msg , Throwable tr ) { if ( Constants . DEBUG ) { android . util . Log . i ( tag , msg , tr ) ; } }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `operation` ADD COLUMN `error` TEXT" ) ; }
public TaskItem ( ) { this . text = "" ; this . color = null ; this . checked = false ; }
public void onAnimationCancel ( Animator animation ) { if ( currentSheetAnimation != null && currentSheetAnimation . equals ( animation ) ) { currentSheetAnimation = null ; } }
public Settings ( Context context ) { this . context = context ; this . settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; setupDeviceDependedDefaults ( ) ; migrateDeprecatedSettings ( ) ; }
public static void clearDim ( @ NonNull ViewGroup parent ) { ViewGroupOverlay overlay = parent . getOverlay ( ) ; overlay . clear ( ) ; }
public int getCount ( ) { return accounts . size ( ) ; }
public void testLoadingHebrewLipsum ( ) throws IOException { onBookFile ( "lipsum/Hebrew - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
public void goGoogleTranslate ( ) { if ( internetAvailableWatcher ) { translateInGoogleTranslate ( vocabulary ) ; } else { noInternetConnectionAlerter ( ) ; } }
public void onBindViewHolder ( RecyclerView . ViewHolder viewHolder , int position ) { TootViewHolder holder = ( TootViewHolder ) viewHolder ; holder . bind ( position , getItem ( position ) ) ; }
public String getShareSubject ( Comment comment ) { return null ; }
public Vegas ( ) { disableBonus ( ) ; setPointsInDollar ( ) ; loadData ( ) ; whichGame = 1 ; setNumberOfRecycles ( PREF_KEY_VEGAS_NUMBER_OF_RECYCLES , DEFAULT_VEGAS_NUMBER_OF_RECYCLES ) ; }
public int getAreaColor ( int area ) { if ( area < 1 || area > 5 ) area = 99 ; return KcaUtils . getId ( KcaUtils . format ( "colorExpeditionTable%d" , area ) , R . color . class ) ; }
public BrowseRowDef ( String header , ViewQuery query ) { headerText = header ; this . staticHeight = true ; this . queryType = QueryType . Views ; }
public void setCompletionCallback ( Runnable callback ) { completionCallback = callback ; }
public void onInterstitialFailedToLoad ( ) { EventCollector . logException ( "appodeal_error" ) ; AdsUtilsCommon . interstitialFailed ( AppodealInterstitialProvider . this , returnTo ) ; }
public void onViewStateRestored ( @ Nullable Bundle savedInstanceState ) { super . onViewStateRestored ( savedInstanceState ) ; if ( savedInstanceState != null && ! pageAdapter . hasDataBeenSet ( ) ) { mustBeRestored = savedInstanceState . getInt ( ARG_POSITION , - 1 ) ; } }
public void setProgressViewAttributes ( int visibility , long maxProgress , long currentProgress ) { progressView . setVisibility ( visibility ) ; progressView . setMaxProgress ( maxProgress ) ; progressView . setCurrentProgress ( currentProgress ) ; }
public void sync ( ) { mainList . clear ( ) ; albums . clear ( ) ; artists . clear ( ) ; grabData ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `mx` INTEGER" ) ; }
public void run ( ) { onWorkflowFinished ( context , null , true ) ; }
private boolean checkMergedQRCodeSetting ( ) { SharedPreferences spref = PreferenceManager . getDefaultSharedPreferences ( this ) ; boolean useMergedQRCodeSetting = spref . getBoolean ( "mergedQRCode" , false ) ; return useMergedQRCodeSetting ; }
public NoteManager ( Context context ) { this . context = context ; }
public Object getItem ( int position ) { return recipients . get ( position ) ; }
public static boolean setLastSyncTimestamp ( Context context , long timestamp ) { return sPreferences . edit ( ) . putLong ( "pref_last_sync" , timestamp ) . commit ( ) ; }
public void setFilters ( List < MyFilter > list ) { mList = list ; notifyDataSetChanged ( ) ; }
public void close ( ) { sdb . close ( ) ; }
public List < InetSocketAddress > getPeers ( ) { return peers ; }
public void setUp ( ) throws Exception { ApplicationTestComponent component = ( ApplicationTestComponent ) ( ( CaloriesCounterApplication ) getTargetContext ( ) . getApplicationContext ( ) ) . getComponent ( ) ; addExampleTags ( component . getDaoSession ( ) ) ; }
public int hashCode ( ) { return Objects . hash ( super . hashCode ( ) , city , state , address , categories , location , watershedAlliance , attributes , zipCode , distance , formattedDistance ) ; }
public void removePauseListener ( PauseListener listener ) { mListeners . remove ( listener ) ; } ;
public OnTypeChangedListener ( EditText amountEditText , TextView currencyTextView ) { this . mAmountEditText = amountEditText ; this . mCurrencyTextView = currencyTextView ; }
public void onDismiss ( DialogInterface arg0 ) { if ( MyDebug . LOG ) Log . d ( TAG , "calibration dialog dismissed" ) ; dialogs . remove ( alert ) ; }
public LocalDate getDate ( ) { return date ; }
public void onClick ( View view ) { startLogging ( ) ; }
public void setType ( Type type ) { this . type = type ; }
public static SqlBuilder insertInto ( final String tablename ) { final StringBuilder sql = new StringBuilder ( "INSERT INTO " + tablename ) ; return new SqlBuilder ( sql ) ; }
public String getLastAttemptWithTimeZone ( Context context ) { return convertDateToString ( context , lastAttempt ) ; }
public void updateDrawState ( TextPaint ds ) { ds . setColor ( ds . linkColor ) ; }
public void run ( ) { Snackbar . make ( toolbar , getString ( R . string . multi_subreddit_added ) + multiName , Snackbar . LENGTH_LONG ) . show ( ) ; }
public void destroy ( ) { super . destroy ( ) ; slots . clear ( ) ; lastItem = null ; lastTarget = null ; }
public String getTitle ( ) { return getTitle ( false ) ; }
public void connectComplete ( boolean b , String s ) { Log . w ( "mqtt" , s ) ; }
public static CharSequence relativeDateTimeString ( ZonedDateTime dateTime , Context context ) { return relativeDateTimeString ( dateTime , context , false ) ; }
private UserProfile getProfile ( ConnectivityManager connManager , WifiManager wifiManager ) { NetworkInfo activeNet = connManager . getActiveNetworkInfo ( ) ; if ( activeNet == null ) return getDefaultProfile ( ) ; return getProfile ( activeNet . getType ( ) , wifiManager ) ; }
public void onCapabilityChanged ( @ NonNull CapabilityInfo capabilityInfo ) { if ( capabilityInfo . getName ( ) . equals ( getString ( R . string . capability_smartcap_wear ) ) && capabilityInfo . getNodes ( ) . isEmpty ( ) ) this . resetWearClientConnection ( false ) ; }
public void run ( ) { loadMessages ( dialog_id , count , load_type == 2 && queryFromServer ? first_unread : max_id , false , 0 , classGuid , load_type , last_message_id , isChannel , loadIndex , first_unread , unread_count , last_date , queryFromServer ) ; }
public CustomTabsSession getSession ( ) { if ( client == null ) { customTabsSession = null ; } else if ( customTabsSession == null ) { customTabsSession = client . newSession ( null ) ; } return customTabsSession ; }
public void testWrongType ( ) { JsonArray badData = new JsonArray ( ) ; mStatus = mDeserializer . deserialize ( badData , APIStatus . class , mContext ) ; }
public void run ( ) { AppDatabase db = AppDatabase . getAppDatabase ( getActivity ( ) ) ; db . appointmentsDao ( ) . delete ( thisappointment ) ; ( ( MainActivity ) getActivity ( ) ) . switchFragment ( AppointmentsSection . newInstance ( ) ) ; }
private Cursor getSavedSearchCursor ( CancellationSignal cancellationSignal ) { return query ( false , DatabaseConstants . SAVED_SEARCH_TABLE , null , null , null , null , null , null , null , cancellationSignal ) ; }
public void unbind ( boolean unbindViews ) { super . unbind ( unbindViews ) ; if ( unbindViews && unbinder != null ) { unbinder . unbind ( ) ; mAreViewsBound = false ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_delete_all : deleteAll ( ) ; loadData ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void updateModelRenderable ( String name , File glbFile ) { sceneformFragment . setModelRenderable ( name , glbFile , ( ) -> { statusTextView . setText ( name ) ; } ) ; }
public void stopRefreshing ( ) { mSwipeRefreshLayout . setRefreshing ( false ) ; }
public static Bundle trackBundle ( @ NonNull CloudData track ) { return ABundle . of ( EXTRA_TRACK_ID , track . track_id ) ; }
private void makeSelectedItalic ( ) { applyTextStyleToSelection ( new TypefaceSpan ( AndroidUtilities . getTypeface ( "fonts/ritalic . ttf" ) ) ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_highlight , menu ) ; }
public Builder clearLength ( ) { bitField0_ = ( bitField0_ & ~0x00000004 ) ; length_ = 0 ; onChanged ( ) ; return this ; }
private final Map < String , String > REQUIRED_PERMISSIONS = new HashMap < String , String > ( ) { { put ( Manifest . permission . WRITE_CALENDAR , "activity_permissions_calendar" ) ; put ( Manifest . permission . WRITE_EXTERNAL_STORAGE , "activity_permissions_write" ) ; } } ;
public Builder stepSubtitleTextColor ( int stepSubtitleTextColor ) { style . stepSubtitleTextColor = stepSubtitleTextColor ; return this ; }
private void doNotLandStepMs ( long deltaMs ) { y -= ( PERCENT_PER_MS / 2 . 0 ) * deltaMs ; if ( y < 0 ) { dead = true ; } }
public String addressAsString ( ) { if ( getAddress ( ) == null ) { return "" ; } else { return StreamSupport . stream ( getAddress ( ) ) . collect ( Collectors . joining ( "\n" ) ) ; } }
public boolean dispatchNestedFling ( float velocityX , float velocityY , boolean consumed ) { return mScrollingChildHelper . dispatchNestedFling ( velocityX , velocityY , consumed ) ; }
private static ProgressRequestBody . UploadCallbacks wrapPercentageListener ( final PercentageListener listener ) { return percentage -> { if ( Objects . nonNull ( listener ) ) { listener . onProgressChanged ( percentage ) ; } } ; }
private void onBindTag ( @ NonNull ItemTagViewHolder viewHolder , int position ) { Tag tag = model . getTagAt ( position ) ; viewHolder . setCategoryName ( tag . getName ( ) ) ; viewHolder . setTag ( tag ) ; }
public static SoundHandler get ( ) { if ( instance == null ) initialize ( ) ; return instance ; }
public void setEnabledTransports ( final List < String > enabledTransports ) { this . enabledTransports = enabledTransports ; }
public void goToOwnerWall ( int accountId , int ownerId , @ Nullable Owner owner ) { PlaceFactory . getOwnerWallPlace ( accountId , ownerId , owner ) . tryOpenWith ( getActivity ( ) ) ; }
public void setBackgroundColor ( int color ) { setBackground ( new ColorDrawable ( color ) ) ; }
public HashMap < QoSTestResultEnum , QoSServerResultTestDesc > getTestDescMap ( ) { return testDescMap ; }
public boolean containsAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( ) ; }
public void onContentChanged ( MessageListAdapter adapter ) { if ( isVisible ( ) ) startQuery ( false ) ; }
public void setEmptyListText ( String text ) { mEmptyList . setText ( text ) ; }
public PersonaFilterArgs ( ) { minLevel = 1 ; maxLevel = 99 ; dlcPersona = true ; arcana = Enumerations . Arcana . ANY ; basePersonas = true ; rarePersonas = true ; }
public String toString ( ) { return getName ( ) ; }
public int getCount ( ) { return bulkReadCardsServiceBinder != null ? bulkReadCardsServiceBinder . getThreads ( ) . size ( ) : 0 ; }
public AudioManager ( @ ForApplication Context context ) { audioManager = ( android . media . AudioManager ) context . getSystemService ( Context . AUDIO_SERVICE ) ; }
private String orientationText ( ) { return RemixedDungeon . landscape ( ) ? Game . getVar ( R . string . WndSettings_SwitchPort ) : Game . getVar ( R . string . WndSettings_SwitchLand ) ; }
public int getTitleStringId ( ) { return R . string . calendar ; }
public boolean getPreference ( String key , boolean def ) { return PreferenceManager . getDefaultSharedPreferences ( this ) . getBoolean ( key , def ) ; }
public void loadData ( String data , String mimeType , String encoding ) { addJavascriptInterface ( ) ; super . loadData ( data , mimeType , encoding ) ; }
public void testIsNOTWPCOM1 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( notWpcomAddress1 ) ) ; }
private int findDefaultCondition ( ) { for ( int i = 0 ; i < conditions . size ( ) ; i ++ ) if ( conditions . get ( i ) . isDefault ) return i ; return 0 ; }
public NumberInput ( Context context ) { super ( context ) ; init ( ) ; }
public boolean deleteConnectionsForDrink ( Drink drink ) { DBDataObject . enforceBackedObject ( drink ) ; adapter . getDatabase ( ) . delete ( TABLE_NAME , DRINK_ID_WHERE_CLAUSE , new String [ ] { String . valueOf ( drink . getIndex ( ) ) } ) ; return true ; }
public void onUserActionRequired ( ) { Log . i ( TAG , "user action required" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_USER_ACTION_REQUIRED , new ArrayList < String > ( ) ) ; }
public void toggleHtmlMode ( ) { mHtmlModeEnabled = ! mHtmlModeEnabled ; mWPAndroidGlueCode . toggleEditorMode ( ) ; }
public void setOpenGifsTabFirst ( ) { createEmojiView ( ) ; DataQuery . getInstance ( currentAccount ) . loadRecents ( DataQuery . TYPE_IMAGE , true , true , false ) ; emojiView . switchToGifRecent ( ) ; }
private void displayNewMessage ( Message message ) { mMessages . add ( ( ParcelableMessage ) message ) ; if ( isUIVisible ) { updateMessagesView ( ) ; } }
public void run ( ) { String res = Statusgo . CallPrivateRPC ( payload ) ; callback . invoke ( res ) ; }
public int getGenero ( ) { return genero ; }
public static String random ( int length , SecureRandom random ) { final byte [ ] bytes = new byte [ length ] ; random . nextBytes ( bytes ) ; return Base64 . encodeToString ( bytes , Base64 . NO_PADDING|Base64 . NO_WRAP ) ; }
public float getCalories ( ) { return this . calories ; }
public void onClick ( View view ) { openGalleryForType ( article , holder , null ) ; }
public boolean onNestedPreFling ( View target , float velocityX , float velocityY ) { return getY ( ) != originalLocation . y || super . onNestedPreFling ( target , velocityX , velocityY ) ; }
public synchronized static ApnDatabase getInstance ( Context context ) throws IOException { if ( instance == null ) instance = new ApnDatabase ( context ) ; return instance ; }
public void increaseFontSize ( ) { setFontSize ( fontSize + FONT_SIZE_STEP ) ; }
public PointF getCenterOffsets ( ) { return mViewPortHandler . getContentCenter ( ) ; }
public < R > void batch ( AbstractClient . BatchSandbox < R > sandbox , AbstractClient . OnResult < R > listener ) { if ( current != null ) current . batch ( sandbox , listener ) ; }
public SourceParsingException ( Repository . FormatType formatType ) { mFormatType = formatType ; }
public FilePickerConfiguration setAllowMultiplePickInGallery ( boolean allowMultiple ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putBoolean ( BundleKeys . ALLOW_MULTIPLE , allowMultiple ) . commit ( ) ; return this ; }
public void run ( ) { activity . applyLayerProject ( projectsUsersList , slug , activity . layerTmpProjectStatus ) ; finishApplyLayer ( ) ; }
public boolean tryCaptureView ( View child , int pointerId ) { return child == mHeaderView ; }
public boolean hasPostAvatar ( ) { return ! TextUtils . isEmpty ( postAvatar ) ; }
public void run ( ) { completedRequestsCount = 0 ; }
public static boolean isLoaded ( ) { return ( Instance != null && Instance . mIsStorageLoaded ) ; }
public String getHeight ( ) { return height ; }
public static boolean syncEventCalendar ( Context context , Events event ) { return syncEventCalendar ( context , event , null ) ; }
public static void stopTimer ( Context context ) { Intent serviceIntent = new Intent ( context , CountDownTimerService . class ) ; context . stopService ( serviceIntent ) ; }
public void settingPreferenceEmptyValueFillZeroSummary ( ) { tester . openSettings ( ) . pickProvider ( Provider . PGNIG ) . getPreferenceAtLine ( 0 ) . changeValueTo ( "" ) . getPreferenceAtLine ( 0 ) . hasSummary ( "0 . 00" ) ; }
public void shouldMapForecastData ( ) { int expectedSize = 3 ; givenWeatherData ( expectedSize ) ; givenData ( ) ; whenMapping ( ) ; thenDataMappedShouldNotBeNull ( ) ; thenWeatherItemsExpected ( expectedSize ) ; }
public double getHumidity ( ) { for ( Measurement m : getMeasurements ( ) ) { if ( m . getType ( ) . equalsIgnoreCase ( MeasurementType . HUMIDITY ) ) return m . getValue ( ) ; } return 0 ; }
public void closeFile ( String tempFilename ) throws ConversionException { boolean error = ZipWriter . close ( ) ; if ( error ) { throw new ConversionException ( ConversionStatus . CANNOT_WRITE_EPUB ) ; } }
private void createAdapter ( ) { Comparator < EventSortable > comparator = getEventSortableComparator ( ) ; adapter = new EventListAdapter ( comparator , eventPeriodFormat , eventProgressCalculator , eventViewModelMapper , this ) ; }
public InterventionPhytosanitary ( Integer quantity , String unit , @ NonNull Integer intervention_id , @ NonNull Integer phyto_id ) { this . quantity = quantity ; this . unit = unit ; this . intervention_id = intervention_id ; this . phyto_id = phyto_id ; }
private void inputDone ( String result ) { getPresenter ( ) . postPay ( ) ; }
public boolean update ( CoNaObiadDbHelper helper , String name , long mealId ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "name" , name ) ; helper . update ( tableName , contentValues , mealId ) ; return true ; }
public void zero ( ) { assertTrue ( getHeight ( "2014 - 04 - 27" ) == 1 ) ; }
public Bookmark getSelectedItem ( ) { int itemPos = multipleSelector . getSelectedPosArray ( ) . keyAt ( 0 ) ; return getRealmBaseAdapter ( ) . getItem ( itemPos ) ; }
public Double getPreferredMinPosition ( ) { LocalDate date = getStartOfWeek ( ) ; LogUtil . INSTANCE . d ( TAG , "Preferred weekly min : %s" , date ) ; return dateToPosition ( date ) ; }
public void testLowerMaxSeason ( ) { mJsonData . addProperty ( APIStatusDeserializer . MAX_SEASON_TAG , 2013 ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; assertEquals ( mStatus . getCurrentSeason ( ) , mStatus . getMaxSeason ( ) ) ; }
public void reset ( ) { areaX = 0 ; areaY = 0 ; areaZ = 0 ; hashCode = 0 ; }
public MainMenuPage clickSave ( ) { clickOnString ( R . string . save ) ; return new MainMenuPage ( rule ) . assertOnPage ( ) ; }
public LottieConfig build ( ) { return new LottieConfig ( networkFetcher , cacheProvider ) ; }
public void setDownloadClickListener ( final @ Nullable OnClickListener listener ) { downloadButton . setOnClickListener ( listener ) ; }
private static String getTrackUri ( @ NonNull Song song ) { return MusicUtil . getSongUri ( song . id ) . toString ( ) ; }
private void changeVibrationPrefs ( ) { boolean isChecked = binding . vibrationOptionPrefs . isChecked ( ) ; binding . vibrationOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdayVibrationEnabled ( ! isChecked ) ; }
public String getStoryId ( ) { return this . getArguments ( ) . getString ( "STORY_ID" ) ; }
public static Comparator < ResultBean > getSumComparator ( ) { return new SumComparator ( ) ; }
public Integer getNumWrong ( ) { return numWrong ; }
public boolean onItemLongClick ( UserLTE item ) { return false ; }
public int getItemCount ( ) { return statisticsData . size ( ) + 1 ; }
public void onGlobalLayout ( ) { view . getViewTreeObserver ( ) . removeOnGlobalLayoutListener ( this ) ; impl . setUpPanelAndAlbumCoverHeight ( CardPlayerFragment . this ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . Key prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
private ReviewViewHolder . Callback mReviewCallback = new ReviewViewHolder . Callback ( ) { @ Override public boolean canQuote ( ) { return ! mLocked && mDisplayReviewDetails ; } @ Override public void quoteText ( CharSequence text ) { mActionCallback . quoteText ( text ) ; } } ;
public int getItemViewType ( int position ) { return items . get ( position ) . getType ( ) ; }
public void onQuickAttachment ( Uri uri ) { Intent intent = new Intent ( ) ; intent . setData ( uri ) ; onActivityResult ( PICK_IMAGE , RESULT_OK , intent ) ; }
public void onCreate ( SQLiteDatabase db ) { onUpgrade ( db , db . getVersion ( ) , DATABASE_VERSION ) ; }
public void bringToFront ( ) { if ( ! stopMovements ) { view . bringToFront ( ) ; } }
private void thenShouldNotifyOnLocationPermissionGranted ( ) { new Verifications ( ) { { mLocationRetriever . onLocationPermissionsGranted ( ) ; } } ; }
public void testPropertiesEmpty ( ) throws IOException { onBook ( "* Note 1\n" + " : PROPERTIES : \n" + " : END : " ) . onLoad ( ) . isWhenSaved ( "* Note 1\n" ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . aarole . calendartest" , appContext . getPackageName ( ) ) ; }
public void testSafeToAddAuthToken10 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( wpcomAddress3 ) ) ) ; }
private static ArrayList < ? extends Song > getPlaylistSongs ( @ NonNull Activity activity , Playlist playlist ) { return playlist instanceof AbsCustomPlaylist ? ( ( AbsCustomPlaylist ) playlist ) . getSongs ( activity ) : PlaylistSongLoader . getPlaylistSongList ( activity , playlist . id ) ; }
public MarkerRenderer ( MarkerLayer < MarkerItem > markerLayer , MarkerSymbol defaultSymbol ) { mSymbolLayer = new SymbolBucket ( ) ; mMarkerLayer = markerLayer ; mDefaultMarker = defaultSymbol ; }
public void run ( StacklrExpActivity activity , List < TasksRequest > lst ) { new AsyncExecOperationTask ( activity , lst ) . execute ( ) ; }
public static JSONArray toJson ( Set < ReadByMarker > readByMarkers ) { JSONArray jsonArray = new JSONArray ( ) ; for ( ReadByMarker marker : readByMarkers ) { jsonArray . put ( marker . toJson ( ) ) ; } return jsonArray ; }
public < T > boolean isSameModelAs ( T item ) { if ( item instanceof WordModel ) { final WordModel wordModel = ( WordModel ) item ; return wordModel . mId == mId ; } return false ; }
public void start ( ) { Callback callback = getCallback ( ) ; if ( callback instanceof View && ! ( ( View ) callback ) . isInEditMode ( ) ) { playAnimation ( ) ; } }
public boolean onCreateOptionsMenu ( Menu _menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_folder , _menu ) ; return true ; }
public ChangeSensorSensitivity ( SensorType tag , int progress ) { super ( CommandType . SensorChange ) ; sensorType = tag ; sensitivity = progress ; }
public void setArticleId ( int articleId ) { m_articleId = articleId ; int position = getArticleIdPosition ( articleId ) ; ViewPager pager = ( ViewPager ) getView ( ) . findViewById ( R . id . article_pager ) ; pager . setCurrentItem ( position ) ; }
public Animation ( int fps , boolean looped ) { this . delay = 1f / fps ; this . looped = looped ; }
public T withTintSelectedIcon ( boolean iconTinted ) { return withIconTinted ( iconTinted ) ; }
public void onDismissed ( SnackProgressBar snackProgressBar , int onDisplayId ) { }
public void setSplits ( List < Split > splitList ) { mSplitList = splitList ; for ( Split split : splitList ) { split . setTransactionUID ( mUID ) ; } }
public void setSlotType ( int slotType ) { this . slotType = slotType ; }
public AboutBuilder addAction ( @ NonNull BitmapDrawable icon , int label , String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
public int getCurrentMode ( ) { return mCurrentMode ; }
public int getCorrect ( ) { return correct ; }
public void release ( ) { if ( mCameraSource != null ) { mCameraSource . release ( ) ; mCameraSource = null ; } }
public void openConnection ( ) { Intent serviceStartIntent = new Intent ( mContext , PlaybackService . class ) ; mContext . bindService ( serviceStartIntent , this , Context . BIND_AUTO_CREATE ) ; }
private void setupMessage ( ViewHolder holder , LocationRecordItem item ) { holder . mTvLocationRecordMessage . setMaxLines ( item . isExpanded ( ) ? EXPANDED_ITEM_MESSAGE_MAX_LINES : COLLAPSED_ITEM_MESSAGE_MAX_LINES ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mBottonNavController = null ; }
public Resources getResources ( ) { return this . dialogFragment . getResources ( ) ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( Button . class . getName ( ) ) ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { if ( callBack != null ) { callBack . onFailure ( NETWORK_ERROR , t ) ; } }
public static void main ( String [ ] arg ) { LwjglApplicationConfiguration config = new LwjglApplicationConfiguration ( ) ; config . width = 576 ; config . height = 1024 ; new LwjglApplication ( new RPSParty ( ) , config ) ; }
private void starWords ( String . . . words ) { for ( String word : words ) { search ( word ) ; starQueryWord ( ) ; } }
public void onAppClicked ( MoreAppsModel appsModel ) { }
public String name ( ) { return Game . getVar ( R . string . DriedRoseBuff_Name ) ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . Switch" ) ; info . setCheckable ( true ) ; info . setChecked ( isChecked ) ; }
public String savePhotoInMemoryDevice ( Bitmap bitmap , String photoName , boolean autoIncrementNameByDate ) { return magicalCameraObject . getSaveEasyPhoto ( ) . writePhotoFile ( bitmap , photoName , "MAGICAL CAMERA" , MagicalCameraObject . PNG , autoIncrementNameByDate , magicalCameraObject . getActivity ( ) ) ; }
public MultipleLoaderManager ( Activity activity ) { this . activity = ( AMActivity ) activity ; }
public void openOrgzly ( ) throws Exception { findObject ( By . res ( HEADER_ICON ) ) . click ( ) ; assertThat ( findObject ( By . res ( ORGZLY_SEARCH ) ) , notNullValue ( ) ) ; }
public Media getMediaAtPosition ( int i ) { return depictionImagesListFragment . getImageAtPosition ( i ) ; }
public void onItemAdded ( ) { if ( taskCount == 1 ) { mView . itemSynced ( ) ; } else { taskCount ++ ; } }
public void showBackButton ( ) { appCompatActivity . getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; }
public void write ( FileOutputStream out ) { bitmap . compress ( Bitmap . CompressFormat . PNG , 90 , out ) ; }
public void resetPeekHeight ( ) { mLatestOffset = 0 ; updatePeekHeight ( isInAdvancedMode ( ) ) ; }
public String tileDesc ( int tile ) { switch ( tile ) { case Terrain . EMPTY_DECO : return Game . getVar ( R . string . Sewer_TileDescDeco ) ; default : return super . tileDesc ( tile ) ; } }
public static String parseComment ( String command ) { String comment = EMPTY ; Matcher matcher = COMMENTPARSE . matcher ( command ) ; if ( matcher . find ( ) ) comment = matcher . group ( 0 ) ; return comment ; }
public void snack ( View view , String message , int length ) { Snackbar . make ( view , message , length ) . show ( ) ; }
public void write ( byte [ ] b ) throws IOException { fileOutputStream . write ( b ) ; }
public void onStart ( ) { mShowProgress . setValue ( true ) ; }
public String getMapMarkerColor ( ) { int color = sharedPreferences . getInt ( PREF_LOCATION_MAP_MARKER_COLOR , ColorPickerPreference . convertToColorInt ( context . getString ( R . string . preference_map_marker_color_default ) ) ) ; return ColorPickerPreference . convertToARGB ( color ) ; }
public void seek ( long position ) { pendingBytes = 0 ; }
public void setMenuItems ( List < ResideMenuItem > menuItems , int direction ) { if ( direction == DIRECTION_LEFT ) this . leftMenuItems = menuItems ; else this . rightMenuItems = menuItems ; rebuildMenu ( ) ; }
public void showSensorSelectionForNextNode ( ) { String nextNodeId = getNextSensorSelectionNodeId ( ) ; if ( nextNodeId == null ) { Log . w ( TAG , "Sensors for all nodes already selected ! " ) ; return ; } showSensorSelectionForNode ( nextNodeId ) ; }
public void setFrom ( final Jid from ) { if ( from != null ) { setAttribute ( "from" , from . toEscapedString ( ) ) ; } }
private void initAutostartButton ( ) { autostartSelector = new AutostartSelector ( ) ; setField ( autostartSelector , AUTOSTART_FIELDNAME , true ) ; }
public void onClick ( Product product ) { Intent intent = new Intent ( this , RegisterProductActivity . class ) ; intent . putExtra ( "id" , product . getId ( ) ) ; startActivity ( intent ) ; }
public double getNumTotalCorrect ( ) { return numTotalCorrect ; }
public void showLoginSuccessMessage ( ) { Toast . makeText ( getContext ( ) , getString ( R . string . user_signed_up ) , Toast . LENGTH_SHORT ) . show ( ) ; }
private void start_login ( ) { Intent main_activity = new Intent ( context , main_activity . class ) ; startActivity ( main_activity ) ; finish ( ) ; }
public int getEndPositionHandle ( ) { return mEndPositionLoc ; }
public float getFillLinePosition ( ILineDataSet dataSet , LineDataProvider dataProvider ) { return mFillPos ; }
public CountingTaskExecutorIdlingResource ( CountingTaskExecutorRule rule ) { this . rule = rule ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . SharedPreference parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `partial_fetch` INTEGER NOT NULL DEFAULT 1" ) ; }
public void onResponse ( String s ) { image . setStatus ( ImageEntry . INT_STATUS_DEFAULT ) ; Photobook . getImagesDataSource ( ) . updateImage ( image ) ; if ( mAdapter != null ) mAdapter . notifyDataSetChanged ( ) ; }
public List < Lesson > getData ( ) { return mData ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `order` INTEGER" ) ; }
private void runStartForeground ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . O ) { setupNotificationChannel ( ) ; startForeground ( NOTIFICATION_ID , buildNotification ( ) ) ; } }
public void unbindFromService ( ) { mAttemptingToBind = false ; if ( mBound ) { mContext . unbindService ( this ) ; mBound = false ; } }
public int compareTo ( PositionMetrics o ) { if ( this . layerDepth < o . layerDepth ) { return - 1 ; } else if ( this . layerDepth == o . layerDepth ) { return 0 ; } else { return 1 ; } }
private int getPointerIndex ( MotionEvent ev , int id ) { int activePointerIndex = MotionEventCompat . findPointerIndex ( ev , id ) ; if ( activePointerIndex == - 1 ) { mActivePointerId = INVALID_POINTER ; } return activePointerIndex ; }
public void onClick ( View v ) { startActivity ( intent ) ; }
public AddNoteInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , PreviewRepository repository , String title ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . title = title ; }
private String formatRssi ( int rssi ) { return getString ( R . string . formatter_db , String . valueOf ( rssi ) ) ; }
public WaypointDbDataSource ( Context context , File file ) { mContext = context ; mDbHelper = new WaypointDbHelper ( context , file ) ; name = context . getString ( R . string . waypointStoreName ) ; }
public void onResume ( ) { super . onResume ( ) ; this . updateSpinners ( ) ; }
public void deleteAllHistoryItems ( ) { try { getDao ( HistoryItem . class ) . deleteBuilder ( ) . delete ( ) ; } catch ( SQLException e ) { LogTool . e ( e ) ; } }
public ModelLoader < ArtistImage , InputStream > build ( Context context , GenericLoaderFactory factories ) { return new ArtistImageLoader ( context , client , okHttpFactory . build ( context , factories ) ) ; }
public void detectsSpaceInTheBeginningOfUnderlyingValue ( ) { List < SelectChoice > items = Lists . newArrayList ( new SelectChoice ( "label" , " before" ) ) ; subject . check ( items ) ; assertEquals ( subject . hasInvalidValues ( ) , true ) ; }
public ServiceFragment ( ) { super ( R . string . title_services ) ; }
public void findAndSelect ( final int lastUsedBlogLocalId ) { int positionInSitesArray = mSites . indexOfSiteId ( lastUsedBlogLocalId ) ; if ( positionInSitesArray != NOT_DEF ) { selectSingleItem ( positionInSitesArray + getPositionOffset ( ) ) ; } }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; updateTrackInformation ( ) ; }
public DocumentModel mapFrom ( DocumentSchema source ) { return new DocumentModel ( source . id , source . title , source . content , source . dateModified , source . languageLocale , source . color , source . category ) ; }
private void returnToListFragment ( ) { if ( getFragmentManager ( ) . getBackStackEntryCount ( ) == 0 ) { return ; } String tag = getString ( R . string . fragment_tag_publicize_detail ) ; getFragmentManager ( ) . popBackStack ( tag , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public void finishWithAnimation ( int animation ) { Timber . i ( "finishWithAnimation %d" , animation ) ; super . finish ( ) ; enableActivityAnimation ( animation ) ; }
public void showSnackbar ( String message ) { UIUtils . showSnackbar ( parent , message ) ; }
public Timestamp getLastSuccessful ( ) { return lastSuccessful ; }
private void removeJetpackSecurityScreenToolbar ( ) { if ( mJpSecuritySettings == null || ! isAdded ( ) ) return ; Dialog securityDialog = mJpSecuritySettings . getDialog ( ) ; WPActivityUtils . removeToolbarFromDialog ( this , securityDialog ) ; }
public void restrict ( float x , float y , PointF out ) { restrict ( x , y , 0f , 0f , out ) ; }
public OutputFormatter appendUnlikelyPattern ( String str ) { return setUnlikelyPattern ( unlikelyPattern . toString ( ) + "|" + str ) ; }
public void onShow ( DialogInterface dialog ) { try { tintButtons ( getDialog ( ) ) ; } catch ( Exception e ) { CrashReportingManager . logException ( e ) ; } }
public void onCancel ( DialogInterface dialog ) { activity . finish ( ) ; }
public void onSkipToQueueItem ( long queueId ) { LogHelper . d ( TAG , "OnSkipToQueueItem : " + queueId ) ; mQueueManager . setCurrentQueueItem ( queueId ) ; mQueueManager . updateMetadata ( ) ; }
public String prompt ( ) { return Game . getVar ( R . string . Item_DirThrow ) ; }
public String prompt ( ) { return Game . getVar ( R . string . Spell_SelectACell ) ; }
public AccountProperty getProperty ( ) { return CUSTOM_CERTIFICATE_LOCATION ; }
public MediaListWriter mediaListWriter ( Database db ) { return Mockito . mock ( MediaListWriter . class ) ; }
public boolean onQueryTextSubmit ( String s ) { toggleKeyboard ( ) ; return true ; }
public void onTaskChecked ( int position , boolean checkState ) { taskList . get ( position ) . setChecked ( checkState ) ; }
public void set ( float x , float y ) { this . x = x ; this . y = y ; }
public EducationEntity loadSync ( int educationId ) { return mDataRepository . getDatabase ( ) . educationDao ( ) . loadSync ( educationId ) ; }
public void onClick ( View v ) { if ( isReplayIconVisible ) { homeActivity . hasQueueEnded = true ; mCallback2 . onComplete ( ) ; } else { if ( ! pauseClicked ) { pauseClicked = true ; } togglePlayPause ( ) ; } }
public BaseRecyclerAdapter ( Context context , List < RecyclerItem < Events >> projectsList ) { inflater = LayoutInflater . from ( context ) ; this . context = context ; this . eventsList = projectsList ; }
public Observable < List < Movie >> searchMovie ( String searchQuery ) { return tmdbWebService . searchMovies ( searchQuery ) . map ( MoviesWraper : : getMovieList ) ; }
public void setTlsClientCrtName ( String tlsClientCrtName ) { this . tlsClientCrtName = tlsClientCrtName ; this . tlsClientCrtNameDirty = true ; notifyChange ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "UPDATE attachment SET size = NULL WHERE size = 0" ) ; }
public void onItemDelete ( int position ) { shoppingAdapter . delete ( position ) ; RealmDb . getInstance ( ) . saveObject ( mReminder . setShoppings ( shoppingAdapter . getData ( ) ) ) ; }
public void onClick ( View v ) { showHelpDialog ( ) ; }
public void setPort ( int port ) { this . port = port ; }
public ColorPickerDialogBuilder setNegativeButton ( String text , DialogInterface . OnClickListener onClickListener ) { builder . setNegativeButton ( text , onClickListener ) ; return this ; }
public void pause ( ) throws RemoteException { mService . get ( ) . pause ( ) ; }
private void onDataChanged ( Object data ) { ODKView odkView = getCurrentViewIfODKView ( ) ; if ( odkView != null ) { QuestionWidget widgetGettingNewValue = getWidgetWaitingForBinaryData ( ) ; setBinaryWidgetData ( data ) ; widgetValueChanged ( widgetGettingNewValue ) ; } }
public static OsmObjectType getPoiType ( String type ) { getInstance ( ) ; return INSTANCE . map . get ( type ) ; }
public static boolean canRequestWriteExternalStoragePermission ( Activity activity ) { return ! QuranSettings . getInstance ( activity ) . didPresentSdcardPermissionsRationale ( ) || ActivityCompat . shouldShowRequestPermissionRationale ( activity , Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; }
public ExpandableListViewAdapter ( ) { groups = new ArrayList <> ( ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_DRINK_SAVED , null , null , null , null ) ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; listBooksPresenter = new ListBooksPresenter ( settingsRepository , bookRepository , Schedulers . immediate ( ) , Schedulers . immediate ( ) ) ; listBooksPresenter . attachView ( listBookView ) ; }
public void setPassword ( byte [ ] password ) { this . password = password ; }
public Builder setCellHeight ( int height ) { bottomSheet . cellHeight = height ; return this ; }
public boolean animateAdd ( final ViewHolder holder ) { resetAnimation ( holder ) ; ViewCompat . setAlpha ( holder . itemView , 0 ) ; mPendingAdditions . add ( holder ) ; return true ; }
public double getProb ( ) { return prob ; }
public float getxPercent ( ) { return xPercent ; }
public void onBindViewHolder ( ItemHolder holder , int position ) { holder . bind ( mEntries . get ( position ) ) ; }
public void testDrinkUnitType ( ) throws Exception { when ( intent . getAction ( ) ) . thenReturn ( AddIngredientType . DRINK . getAction ( ) ) ; assertThat ( AddIngredientModule . provideUnitType ( intent ) , equalTo ( AmountUnitType . VOLUME ) ) ; }
public ChildZoneBuilder setGeometrySource ( String geometrySource ) { mGeometrySource = geometrySource ; return this ; }
public void run ( ) { ArticlePager af = ( ArticlePager ) getSupportFragmentManager ( ) . findFragmentByTag ( FRAG_ARTICLE ) ; if ( af != null ) { af . setActiveArticle ( fArticle ) ; } }
public final int getArtistGridSize ( Context context ) { return mPreferences . getInt ( ARTIST_GRID_SIZE , context . getResources ( ) . getInteger ( R . integer . default_list_columns ) ) ; }
public String getStop_name ( ) { return stop_name ; }
public void onTaskError ( String error ) { Helpers . sendToNotificationBar ( context . getApplicationContext ( ) , error ) ; FlyveLog . e ( error ) ; }
public void alias ( String alias ) { if ( alias != null ) { xmppConnectionService . createAccountFromKey ( alias , this ) ; } }
private void resolveOptionMenu ( ) { if ( isViewHostAttached ( ) ) { getView ( ) . setupOptionMenu ( canSaveYourself ( ) , canDelete ( ) ) ; } }
public static String appLnaguage ( Context context ) { return SaveManager . get ( context ) . getstring_appINFO ( ) . get ( SaveManager . jsonAppLanguage ) ; }
public void run ( ) { slug . setEnabled ( false ) ; button . setEnabled ( false ) ; status . setText ( getString ( R . string . uploading ) + " . . . " ) ; }
public void removePlayerListener ( PlayerListener playerListener ) { checkClosed ( ) ; listeners . remove ( playerListener ) ; }
public void onScrolled ( int dx , int dy ) { loadMore ( ) ; if ( dy != 0 ) { notifyDateChange ( ) ; } }
public Observable < CryptCard > getCryptCard ( ) { return cardsRepository . getCryptCard ( cardId ) ; }
public void updatePhrasebookData ( int languagePosition , List < Phrasebook . Item > phraseItems ) { mPhrasebookAdapter . setLanguagePosition ( languagePosition ) ; mPhrasebookAdapter . setPhrasebookItems ( phraseItems ) ; mPhrasebookAdapter . notifyDataSetChanged ( ) ; }
public void onRlGridStyleClicked ( ) { paperStyleResId = R . drawable . grid_style ; paperResId = R . drawable . grid_edit_text ; setSelectedItemBackground ( rlGridStyle ) ; }
public boolean evaluate ( Vm entity ) { return entity . getCpuUsage ( ) >= getPercentageLimit ( ) ; }
public CalendarQueryRow setBegin ( Object obj ) { return setColumn ( CalendarContract . Instances . BEGIN , obj ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( TransactionsActivity ) getSherlockActivity ( ) ) . updateNavigationSelection ( ) ; refresh ( ) ; }
public int getViewTypeCount ( ) { return 2 ; }
public void updateLastViewedList ( String query ) { mQuery = query ; if ( query . isEmpty ( ) && ! mLastQuery . isEmpty ( ) ) { updateLastViewedList ( ) ; } }
public static String addMinutesToString ( String datetime , int minutes ) { Calendar calendar = convertStringDateToCalendar ( datetime , DATE_FORMAT_ISO_8601 ) ; calendar . add ( Calendar . MINUTE , minutes ) ; return formatDate ( calendar . getTimeInMillis ( ) , DATE_FORMAT_ISO_8601 ) ; }
public void setCenter ( GeoPoint center ) { MapController mMapController = getController ( ) ; mMapController . setZoom ( state . zoomLevel ) ; mMapController . setCenter ( center ) ; }
public Boolean isClosed ( ) { return mIsClosed ; }
private void logXmlError ( Exception e ) { logXmlError ( e . getMessage ( ) ) ; }
public MediaMetadataCompat getTrack ( String musicId ) { return mTrackListById . containsKey ( musicId ) ? mTrackListById . get ( musicId ) . metadata : null ; }
public Fragment getItem ( int position ) { return mFragmentList . get ( position ) ; }
public FilterSet ( Set < Filter < ? super PROJECTION >> filters ) { this . filters = new HashSet < Filter < ? super PROJECTION >> ( filters ) ; }
public void setNumberOfSatellitesUsedInFix ( int numberOfSatellites ) { _NumberOfSatellitesUsedInFix = numberOfSatellites ; }
public String formatPrecisionMath ( double amount ) { return String . format ( Locale . getDefault ( ) , "%d" , Math . round ( amount ) ) ; }
public int getStatementHandle ( ) { return preparedStatement . getStatementHandle ( ) ; }
public Typeface getRobotoBold ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/Roboto - Bold . ttf" ) ; }
public void onRecordCanceled ( float x ) { onRecordHideEvent ( x ) ; if ( listener != null ) listener . onRecorderCanceled ( ) ; }
public void toggleDebugMode ( boolean state ) { if ( state == true ) { this . debugMenuItem . setTitle ( "Debug Mode is on" ) ; } else { this . debugMenuItem . setTitle ( "Debug Mode is off" ) ; } }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseLyrics prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void setOnItemDragEventListener ( OnItemDragEventListener listener ) { mItemDragEventListener = listener ; }
public int compare ( Subreddit c1 , Subreddit c2 ) { return c2 . getNSFW ( ) . compareTo ( c1 . getNSFW ( ) ) ; }
public void onFailure ( @ NonNull Exception e ) { Toast . makeText ( InterestsActivity . this , "There Was an Issue Setting Up Your Account . Please Try Again . " , Toast . LENGTH_LONG ) . show ( ) ; }
public void setListener ( OnAdapterItemClickListener listener ) { mListener = listener ; }
public void apply ( ) { invalidate ( ) ; }
public void notifyDataSetChanged ( ) { hasHints = dialogsType == 0 && ! isOnlySelect && ! MessagesController . getInstance ( currentAccount ) . hintDialogs . isEmpty ( ) ; super . notifyDataSetChanged ( ) ; }
public World ( ) { super ( true , true , null , 15 , true ) ; initializeWorld ( ) ; }
private double gallonTocum ( double num ) { return num * 0 . 00379 ; }
public void onNotify ( int heartRate ) { Log . d ( "SWELL" , "Heart rate : " + heartRate ) ; }
public void onLocationChanged ( Location location ) { }
private void openReviewer ( ) { mCongratulationsShown = false ; Intent reviewer = new Intent ( this , Reviewer . class ) ; startActivityForResultWithAnimation ( reviewer , REQUEST_REVIEW , ActivityTransitionAnimation . LEFT ) ; getCol ( ) . startTimebox ( ) ; }
public void testTtoS ( ) { assertTrue ( "Test TtoS failed . " , strSimple . equals ( Analysis . TtoS ( strTraditional ) ) ) ; }
public ReviewRecyclerViewAdapter ( List < DummyItem > items , ReviewsFragment . OnListFragmentInteractionListener listener ) { mValues = items ; mListener = listener ; }
public void viewPreCaution ( View view ) { Intent it = new Intent ( SettingActivity . this , PreCautionOneActivity . class ) ; it . putExtra ( Constants . Invoke . SEITING , true ) ; startActivity ( it ) ; }
public GroupReceiptDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public void postFrameCallback ( ) { isRunning = true ; }
public int getTankCount ( ) { return mTankUnits . size ( ) ; }
public CascadeClassifier ( ) { nativeObj = CascadeClassifier_0 ( ) ; return ; }
public static String getVersion ( Context c ) { return BuildConfig . VERSION_NAME + " - " + BuildConfig . VERSION_CODE ; }
public String getPublished ( ) { return StringUtils . notNullStr ( published ) ; }
public ClementineConnectionHandler ( ClementinePlayerConnection c ) { mClementineConnection = new WeakReference < ClementinePlayerConnection > ( c ) ; }
public RecyclerAdapter ( Context context , List < String > dataSet ) { mContext = context ; mDataSet = dataSet ; mInflater = LayoutInflater . from ( context ) ; }
public void attachView ( AboutContract . View view ) { App . getAppComponent ( ) . inject ( this ) ; mView = view ; mView . setPresenter ( this ) ; mView . setVersionName ( mApp . getVersionName ( ) ) ; }
public void onRizonStatus ( ) { new RizonSwapStatusTask ( getBaseApplication ( ) , this , mAccount ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void onResume ( ) { super . onResume ( ) ; mThread . onResume ( ) ; }
public RegisterActivity ( OnRequestCompleted listener , int taskId , ActivityRegisterList list ) { super ( listener , taskId ) ; setUrl ( URL + API + REGISTER_ACTIVITY_FINISHED_VIEW ) ; setRequest ( list ) ; setResponse ( new RegisterActivityResponse ( ) ) ; }
private void saveDays ( int progress ) { mPrefs . setDaysToBirthday ( progress ) ; initDaysToPrefs ( ) ; }
public int getQuestCategoryColor ( int category ) { return ContextCompat . getColor ( application_context , KcaUtils . getId ( KcaUtils . format ( "colorQuestCategory%d" , category ) , R . color . class ) ) ; }
public PresentationVideoDeserializer ( IDeserializerStorage deserializerStorage ) { super ( deserializerStorage ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { checkListViewScroll ( ) ; if ( participants != null && loadMoreMembersRow != - 1 && layoutManager . findLastVisibleItemPosition ( ) > loadMoreMembersRow - 8 ) { getChannelParticipants ( false ) ; } }
public void onError ( String msg , Throwable th ) { Log . e ( TAG , msg , th ) ; mContentSwitch . setOnCheckedChangeListener ( null ) ; mContentSwitch . setChecked ( ! isChecked ) ; mContentSwitch . setOnCheckedChangeListener ( MainActivity . this ) ; }
public void openOwnerWall ( int accountId , int ownerId ) { PlaceFactory . getOwnerWallPlace ( accountId , ownerId , null ) . tryOpenWith ( getActivity ( ) ) ; }
public T withName ( int nameRes ) { this . name = new StringHolder ( nameRes ) ; return ( T ) this ; }
private String getAuthorUrl ( ) { return StringUtils . notNullStr ( authorUrl ) ; }
public void onBindViewHolder ( Holder holder , int position ) { }
public void truncate ( ) { this . deleteAll ( ) ; SQLiteDatabase db = App . dbHelper . getWritableDatabase ( ) ; db . execSQL ( String . format ( "DELETE FROM sqlite_sequence WHERE name = '%s'" , PointsTable . TABLE_NAME_POINTS ) ) ; }
public void stopStream ( StopStreamCallback callback ) { mediaPlayer . stop ( ) ; callback . onStreamStopped ( ) ; }
public void onResume ( ) { super . onResume ( ) ; super . startForegroundTokenRenewalService ( ) ; if ( hostProvilegesLoaded ) { bindPlayerService ( ) ; } }
public String getUserName ( ) { return StringUtils . notNullStr ( userName ) ; }
public void setAttribution ( String attribution ) { mAttribution = attribution ; }
public boolean onNavigateUp ( ) { deleteMagicCreatedAccountAndReturnIfNecessary ( ) ; return super . onNavigateUp ( ) ; }
public void onSuccessfully ( Tag tag ) { EventBus . getDefault ( ) . post ( new TagCreatedEvent ( tag ) ) ; finish ( ) ; }
private boolean isgameFinished ( ) { return gameFinished == 0 ; }
public int getCount ( ) { return 1 ; }
public void setValueFormatter ( ValueFormatter f ) { if ( f == null ) return ; else { for ( IDataSet set : mDataSets ) { set . setValueFormatter ( f ) ; } } }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitParenthesisNumericExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
public Member removeItem ( int position ) { final Member model = memberList . remove ( position ) ; notifyItemRemoved ( position ) ; return model ; }
public void insertList ( ArrayList < Category > list ) { empty_view . setVisibility ( View . GONE ) ; mRecyclerView . setVisibility ( View . VISIBLE ) ; adapter . insertList ( list ) ; }
public CheckPagesAsyncTask ( Context context ) { mAppContext = context . getApplicationContext ( ) ; }
public void onResume ( ) { super . onResume ( ) ; checkAnonStatus ( ) ; PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) . registerOnSharedPreferenceChangeListener ( mPrefListener ) ; }
private void savePreferences ( SharedPreferences sharedPreferences , String key , Integer value ) { SharedPreferences . Editor preferencesEditor = sharedPreferences . edit ( ) ; preferencesEditor . putInt ( key , value ) ; preferencesEditor . apply ( ) ; }
private void setInitialPositions ( ) { albumArtView . setVisibility ( View . VISIBLE ) ; albumArtView . scrollTo ( ( int ) ( type . getHorizontalShift ( ) * albumArtView . getWidth ( ) ) , 0 ) ; }
public int getSec ( ) { return sec ; }
public static File getTextFile ( String title , String tag ) { return new File ( getSavDirForTag ( tag ) , sanitize ( title ) + " . html" ) ; }
private void maybeLoadMore ( int position ) { synchronized ( list ) { if ( position > list . size ( ) - 5 ) { loadChunk ( ) ; } } }
private void buildNotification ( int favoritesAiringToday ) { if ( favoritesAiringToday > 0 ) { createNotificationChannels ( ) ; sendToAirTodayChannel ( favoritesAiringToday ) ; } }
public void startActivity ( Class < ? > activityClass ) { Intent newActivityIntent = new Intent ( this , activityClass ) ; this . startActivity ( newActivityIntent ) ; }
public String getIsSpeaker ( ) { return isSpeaker ; }
public void update ( long millis ) { mState . update ( millis ) ; }
public void setGroupTitle ( String title ) { TextView group_title = ( TextView ) findViewById ( R . id . group_title ) ; group_title . setText ( title ) ; }
public void onLogoutFailed ( String errorMessage ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_generic ) , errorMessage ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . X_TRIPLE_SQRT ) ; }
private void onRowToggled ( final View view ) { final PushNotificationRow rowClicked = ( PushNotificationRow ) view ; topicPreference . set ( rowClicked . getTopic ( ) ) ; for ( final PushNotificationRow row : toggles ) { row . setChecked ( row == rowClicked ) ; } }
public String getPublishTime ( ) { return mPublishTime ; }
public com . google . protobuf . Any getPubKey ( ) { if ( pubKeyBuilder_ == null ) { return pubKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : pubKey_ ; } else { return pubKeyBuilder_ . getMessage ( ) ; } }
public static int getMonth ( ) { return Calendar . getInstance ( ) . get ( Calendar . MONTH ) ; }
public void onBackPressed ( ) { alert . dismiss ( ) ; }
public DrawerBuilder withActivity ( Activity activity ) { this . mRootView = ( ViewGroup ) activity . findViewById ( android . R . id . content ) ; this . mActivity = activity ; this . mLayoutManager = new LinearLayoutManager ( mActivity ) ; return this ; }
public String getResult ( ) { return this . result ; }
public void run ( ) { putDialogsInternal ( dialogs ) ; loadUnreadMessages ( ) ; }
public static void setTraceEnabled ( boolean enabled ) { if ( traceEnabled == enabled ) { return ; } traceEnabled = enabled ; if ( traceEnabled ) { sections = new String [ MAX_DEPTH ] ; startTimeMillis = new long [ MAX_DEPTH ] ; } }
public int getGroupCount ( ) { return tourDownloads . size ( ) ; }
public boolean debug ( ) { return true ; }
public static Observable < CnBetaApi . Result < String >> againstComment ( int tid ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . againstComment ( timestamp , CnBetaSignUtil . againstCommentSign ( timestamp , tid ) , tid ) ; }
public static void setHelper ( @ NonNull Context context ) { if ( databaseHelper != null ) { releaseHelper ( ) ; } databaseHelper = OpenHelperManager . getHelper ( context , DatabaseHelper . class ) ; }
private Cursor dateTakenCursor ( final ContentResolver contentResolver , final Media contribution ) { return contentResolver . query ( contribution . getLocalUri ( ) , new String [ ] { MediaStore . Images . ImageColumns . DATE_TAKEN } , null , null , null ) ; }
public RedditMoreComments asMoreComments ( ) throws InstantiationException , IllegalAccessException , InterruptedException , IOException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditMoreComments . class ) ; }
private void updateCategories ( ArrayList < CategoryInfo > categories ) { if ( getSelected ( categories ) == 0 ) return ; PreferenceUtil . getInstance ( getContext ( ) ) . setLibraryCategoryInfos ( categories ) ; }
public void setOverallAlpha ( float alpha ) { throw new UnsupportedOperationException ( ) ; }
public void testEncodeText ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "ABCD" , Compaction . TEXT , StandardCharsets . UTF_8 ) ; assertEquals ( "Ο\u001A\u0001?" , encoded ) ; }
public boolean isPrefEnabled ( ) { return prefSwitch . isChecked ( ) ; }
private PitchDifference ( Parcel in ) { Tuning tuning = MainActivity . tuning ; closest = tuning . findNote ( in . readString ( ) ) ; deviation = in . readDouble ( ) ; }
public InputStream fetchForm ( String formURL ) throws FormSourceException { return new ByteArrayInputStream ( xform . getBytes ( ) ) ; }
public String savePhotoInMemoryDevice ( Bitmap bitmap , String photoName , String directoryName , boolean autoIncrementNameByDate ) { return magicalCameraObject . getSaveEasyPhoto ( ) . writePhotoFile ( bitmap , photoName , directoryName , MagicalCameraObject . PNG , autoIncrementNameByDate , magicalCameraObject . getActivity ( ) ) ; }
public IconButton getWriteButton ( ) { return mWriteButton ; }
public void setMenuTitle ( String nameString , String identifier ) { mPatientDashboardActivity . getSupportActionBar ( ) . setTitle ( nameString ) ; mPatientDashboardActivity . getSupportActionBar ( ) . setSubtitle ( "#" + identifier ) ; }
public void e ( String tag , String message , Object . . . args ) { HyperLog . e ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public void run ( ) { callback . callback ( "EXCEPTION_HTTP_" + ex . getMessage ( ) ) ; FlyveLog . e ( ex . getClass ( ) + " : " + ex . getMessage ( ) ) ; }
public WebcastListSubscriber provideWebcastListSubscriber ( EventRenderer renderer ) { return Mockito . mock ( WebcastListSubscriber . class ) ; }
public void onModified ( final Recipient recipient ) { Util . runOnMain ( ( ) -> { fromView . setText ( recipient , read ) ; contactPhotoImage . setAvatar ( glideRequests , recipient , true ) ; setRippleColor ( recipient ) ; } ) ; }
private void initRetryButton ( ) { mActionableEmptyView . button . setOnClickListener ( new OnClickListener ( ) { @ Override public void onClick ( View v ) { mViewModel . load ( ) ; } } ) ; }
public AnchorPosition getAnchor ( ) { return getPositionMetrics ( ) . getAnchor ( ) ; }
public Result doWork ( ) { startService ( ) ; Log . d ( TAG , "Finished doing work ! " ) ; return Result . success ( ) ; }
private void updateVisibleCharactersLeft ( ) { this . charactersLeft . setText ( String . format ( Locale . getDefault ( ) , "%d" , calculateRemainingCharacters ( ) ) ) ; }
public void onServiceConnected ( ) { super . onServiceConnected ( ) ; watchFlagsFromPreference ( ) ; }
public boolean verifyTimestamp ( long timestamp ) { return false ; }
public UserRepo ( ) { user = new User ( ) ; }
public int getNumberOfInstalledMods ( ) { int count = 0 ; for ( ModList list : getAllModLists ( ) ) { if ( list . type == ModList . ModListType . EMLT_PATH ) { count += list . mods . size ( ) ; } } return count ; }
public void prepare ( Uri uri ) { playbackState = STATE_IDLE ; internalPlayer . prepare ( uri ) ; }
public boolean act ( ) { if ( target . hp ( ) > target . ht ( ) * LEVEL ) { detach ( ) ; } spend ( TICK ) ; return true ; }
public com . google . protobuf . AnyOrBuilder getEvidenceOrBuilder ( ) { if ( evidenceBuilder_ != null ) { return evidenceBuilder_ . getMessageOrBuilder ( ) ; } else { return evidence_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : evidence_ ; } }
private RelativeLayout getSuggestionLayoutTemplate ( ) { LayoutInflater inflater = LayoutInflater . from ( getActivity ( ) ) ; return ( RelativeLayout ) inflater . inflate ( R . layout . recommendation_view , getViewGroup ( ) , false ) ; }
public static < S > S createService ( Class < S > serviceClass ) { String username = mOpenMRS . getUsername ( ) ; String password = mOpenMRS . getPassword ( ) ; return createService ( serviceClass , username , password ) ; }
public String toString ( ) { return String . format ( "ContentLength = %s , ContentType = %s" , contentLength ( ) , getContentType ( ) ) ; }
public void onReceive ( Context context , Intent intent ) { if ( intent . getAction ( ) . equals ( INTENT_CLOSE ) ) { finish ( ) ; } }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { Settings . chameleonDeviceNickname = s . toString ( ) ; AndroidSettingsStorage . updateValueByKey ( Settings . chameleonDeviceSerialNumber , AndroidSettingsStorage . PROFILE_NAME_PREFERENCE ) ; }
public java . util . List < com . google . protobuf . Any > getAccountsList ( ) { if ( accountsBuilder_ == null ) { return java . util . Collections . unmodifiableList ( accounts_ ) ; } else { return accountsBuilder_ . getMessageList ( ) ; } }
public FontPackage ( String name ) { mName = name ; initForDownloadableFontPack ( ) ; }
public void attach ( RecipeCreationDialogView view ) { authorsPresenter . attach ( view . getAuthorsView ( ) ) ; categoriesPresenter . attach ( view . getCategoriesView ( ) ) ; }
public String getOrientation ( Context context ) { return xml . getChild ( "application" ) . getChild ( "activity" ) . getString ( "android : screenOrientation" , context . getResources ( ) . getString ( R . string . prop_orientation_default ) ) ; }
public void kill ( ) { super . kill ( ) ; removeEmo ( ) ; }
public void unregister ( ) { if ( sensor == null || ! listening ) return ; sensorManager . unregisterListener ( this ) ; listening = false ; }
public void run ( ) { songsBackgroundView . getLayoutParams ( ) . height = contentView . getHeight ( ) ; observableScrollViewCallbacks . onScrollChanged ( - ( artistImageViewHeight + titleViewHeight ) , false , false ) ; }
public void onChanged ( PostData post ) { mAdapter . notifyItemChanged ( 0 ) ; }
public void onScrollChanged ( ) { int scrollY = scroll . getScrollY ( ) ; if ( Math . abs ( prevY - scrollY ) > 30 ) { setSuggestionsInvisible ( ) ; prevY = scrollY ; } }
public void run ( ) { mDb . pm . addEntryTo ( mEntry , mEntry . getParent ( ) ) ; SaveDB save = new SaveDB ( mDb , mFinish ) ; save . run ( ) ; }
private void onTelephonyCallStateIdle ( ) { restoreAudioStreamRing ( ) ; if ( mSimlarStatus != SimlarStatus . ONGOING_CALL ) { return ; } if ( mLinphoneThread == null ) { return ; } mSoundEffectManager . stop ( SoundEffectType . CALL_INTERRUPTION ) ; mLinphoneThread . resumeCall ( ) ; }
private int getPointX ( int cx ) { if ( cx > mEmulator . mColumns ) { cx = mEmulator . mColumns ; } return Math . round ( cx * mRenderer . mFontWidth ) ; }
public void destroy ( ) { Log . d ( Config . LOGTAG , account . getJid ( ) . toBareJid ( ) + " : destroying old axolotl service . no longer in use" ) ; mXmppConnectionService . databaseBackend . wipeAxolotlDb ( account ) ; }
public boolean registerUpdateCheckedListener ( UpdateCheckedListener updateCheckedListener ) { synchronized ( mUpdateCheckedListeners ) { if ( updateCheckedListener == null || mUpdateCheckedListeners . contains ( updateCheckedListener ) ) { return false ; } return mUpdateCheckedListeners . add ( updateCheckedListener ) ; } }
private void launchVideoLibrary ( ) { WPMediaUtils . launchVideoLibrary ( this , false ) ; }
public int eta ( int [ ] counts ) { return eta ( counts , true ) ; }
public OutputFormatter setUnlikelyPattern ( String unlikelyPattern ) { this . unlikelyPattern = Pattern . compile ( unlikelyPattern ) ; return this ; }
public static Set < ReadByMarker > fromJsonString ( String json ) { try { return fromJson ( new JSONArray ( json ) ) ; } catch ( JSONException | NullPointerException e ) { return new HashSet <> ( ) ; } }
public LitePalApplication ( ) { mContext = this ; }
public void onDisconnected ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { status . setText ( R . string . starting ) ; } } ) ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { int widgetId = intent . getIntExtra ( AppWidgetManager . EXTRA_APPWIDGET_ID , 0 ) ; return new EventRemoteViewsFactory ( getApplicationContext ( ) , widgetId ) ; }
public static int getDnsQueryMethod ( ) { return Integer . valueOf ( Daedalus . getPrefs ( ) . getString ( "settings_dns_query_method" , "0" ) ) ; }
public void onAnimationEnd ( Animator animator ) { ViewHelper . setX ( mRecordLayout , 0 ) ; }
private static String getAvatarForUser ( long userId ) { String args [ ] = { Long . toString ( userId ) } ; return SqlUtils . stringForQuery ( ReaderDatabase . getReadableDb ( ) , "SELECT avatar_url FROM tbl_users WHERE user_id = ?" , args ) ; }
public Boolean get ( ) { return isElementDisplayed ( elementID ) ; }
private void setAnnouncements ( List < Announcement > announcements ) { this . announcements = checkNotNull ( announcements ) ; }
public void setPlaceAutocompleteAdapter ( ) { AutocompleteFilter filter = new AutocompleteFilter . Builder ( ) . setTypeFilter ( AutocompleteFilter . TYPE_FILTER_CITIES ) . build ( ) ; this . adapter = new PlaceAutocompleteAdapter ( mContext , googleApiClient , null , filter ) ; }
private void displayImage ( ) { ImageLoader . loadImage ( binding . imageView , answerFile , ImageView . ScaleType . FIT_CENTER ) ; binding . imageView . setVisibility ( VISIBLE ) ; }
public String getDraft ( ) { return draft ; }
public String loadNoteDate ( String filename ) throws IOException { Date lastModified = new Date ( Long . parseLong ( filename ) ) ; return ( DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . SHORT ) . format ( lastModified ) ) ; }
public void onError ( @ NonNull String message ) { }
public void clicked ( InputEvent event , float x , float y ) { game . setScreen ( new PlayScreen ( game ) ) ; }
public boolean hasFeaturedImage ( ) { return ! TextUtils . isEmpty ( featuredImage ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; this . mActivity = ( AppCompatActivity ) context ; }
public void onClick ( View v ) { cancel ( ) ; if ( mFinish != null ) { mFinish . run ( ) ; } }
public BlankFormSearchPage searchInBar ( String query ) { onView ( withId ( R . id . search_src_text ) ) . perform ( replaceText ( query ) ) ; return new BlankFormSearchPage ( rule ) . assertOnPage ( ) ; }
public BottomBar getBottomBar ( ) { return bottomBar ; }
public void onResponse ( String s ) { mHandler . post ( new Runnable ( ) { @ Override public void run ( ) { castingVoteSuccess ( ) ; } } ) ; }
public void setEntries ( CharSequence [ ] entries ) { super . setEntries ( entries ) ; if ( mDialog != null ) mDialog . setItems ( entries ) ; }
public void onFailure ( Call < WeatherInfo > call , Throwable t ) { Toast . makeText ( MainActivity . this , "Failed to API calling . " , Toast . LENGTH_SHORT ) . show ( ) ; }
public static void close ( Cursor cursor ) { if ( cursor == null ) { return ; } try { cursor . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public Gisement ( Point _origin , Point _orientation ) { this ( "" , _origin , _orientation ) ; }
public void deletePlace ( MyPlace p ) { SQLiteDatabase db = getWritableDatabase ( ) ; db . delete ( tableName , placeIDColumn + " = " + p . getPlaceID ( ) , null ) ; db . close ( ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonEditorDialog . this . getContext ( ) , ButtonEditorDialog . this , the_button . getData ( ) . getPrimaryColor ( ) , COLOR_FIELDS . COLOR_MAIN ) ; diag . show ( ) ; }
public void setTextColor ( int color ) { dateView . setTextColor ( color ) ; secureIndicatorView . setColorFilter ( color ) ; locationIndicatorView . setColorFilter ( color ) ; deliveryStatusView . setTint ( color ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . funckyhacker . fileexplorer" , appContext . getPackageName ( ) ) ; }
public void accept ( ) throws IOException { LocalSocket conn = socket . accept ( ) ; logger . d ( "New incoming connection" ) ; new LocalSocketThread ( conn ) . start ( ) ; }
public void setText ( String text ) { label_tv . setText ( text ) ; }
public static boolean isGridViewEnabled ( @ NonNull Context context ) { return isGridViewEnabled ; }
public int computeHorizontalScrollRange ( RecyclerView . State state ) { return computeScrollRange ( state ) ; }
public void onNextPressed ( ) { startService ( AudioUtils . getAudioIntent ( this , AudioService . ACTION_SKIP ) ) ; }
public void undoSetError ( ) { listView . setAdapter ( this ) ; isError = false ; listView . setLayoutManager ( SubmissionsView . createLayoutManager ( SubmissionsView . getNumColumns ( context . getResources ( ) . getConfiguration ( ) . orientation , context ) ) ) ; }
private ODKView getCurrentViewIfODKView ( ) { if ( currentView instanceof ODKView ) { return ( ODKView ) currentView ; } return null ; }
public void registerObserver ( DefaultObserver < Void > observer ) { wallpaperObservable . registerObserver ( observer ) ; }
public void run ( ) { if ( counterCallback != null && ++ tryCounter == limit ) { counterCallback . onTryLimitReached ( ) ; } }
public void setScrollY ( Integer scrollY ) { this . scrollY = scrollY ; }
public void d ( Throwable t , String tag , String message , Object . . . args ) { HyperLog . d ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public void setup ( ) { super . setup ( ) ; if ( bot ) start = length ; }
public static void startTracking ( Context context ) { sleepStore . getInstance ( ) . setTracking ( true , context ) ; }
public void enableJetpackMonitor ( boolean monitorActive ) { mSettings . monitorActive = monitorActive ; }
public void getNewVideosFeed ( ) { queURL ( "javascript : getNewVideosFeed ( ) ; " ) ; }
public void setTopViewMarginRight ( int topFragmentMarginRight ) { transformer . setmMarginRight ( topFragmentMarginRight ) ; }
public void attachVisual ( ) { target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaRooted ) ) ; }
private static String getString ( String key , String defaultValue ) { return sPreferences . getString ( key , defaultValue ) ; }
private BroadcastReceiver appearingReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { doNotHide = true ; } } ;
public GroupActionResult ( Recipients groupRecipient , long threadId ) { this . groupRecipient = groupRecipient ; this . threadId = threadId ; }
public static void reset ( ) { instance = null ; }
public void showPicker3 ( View view ) { colorDialog . setPickerColor ( this , 3 , colourBackground ) ; colorDialog . showColorPicker ( this , 3 ) ; }
private final CompoundButton . OnCheckedChangeListener switchListener = new CompoundButton . OnCheckedChangeListener ( ) { public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { updatePreview ( ) ; } } ;
public void setDayTwoEvents ( ArrayList < Events > dayTwoEvents ) { this . dayTwoEvents = dayTwoEvents ; }
public void updatePlayer ( int position ) { inGameAdapter . notifyItemChanged ( position ) ; }
public String getTagSlug ( ) { return StringUtils . notNullStr ( tagSlug ) ; }
private void syncCheckStates ( ) { for ( int i = 0 ; i < mItems . length ; i ++ ) { mItems [ i ] . setChecked ( mOldReactionIds [ i ] != 0 ) ; } updateDrawableState ( ) ; }
public boolean pep ( ) { synchronized ( XmppConnection . this . disco ) { ServiceDiscoveryResult info = disco . get ( account . getJid ( ) . toBareJid ( ) ) ; return info != null && info . hasIdentity ( "pubsub" , "pep" ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_AllStickers . TLdeserialize ( stream , constructor , exception ) ; }
public boolean isSkipEnabled ( ) { return skipEnabled ; }
public MutableLiveData < List < WalletRealmObject >> getWallets ( ) { return wallets ; }
public void set ( MutableFloatPoint2D other ) { x = other . x ; y = other . y ; }
public Notifications getNotificationsTable ( ) { return mNotificationsTable ; }
public AboutBuilder addDribbbleLink ( int url ) { return addDribbbleLink ( context . getString ( url ) ) ; }
private static String hashKeyForPIN ( String value ) { if ( TextUtils . isEmpty ( value ) ) return null ; try { } catch ( Exception e ) { Crashlytics . logException ( e ) ; } return value ; }
public void onLoadFinished ( Loader < List < CharSequence >> loader , List < CharSequence > data ) { mDocumentProperties = data ; LoaderManager . getInstance ( this ) . destroyLoader ( DocumentPropertiesLoader . ID ) ; }
public GameView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . context = context ; holder = getHolder ( ) ; holder . addCallback ( this ) ; setFocusable ( true ) ; }
public void setHint ( @ Nullable final Monetary hint ) { this . hint = hint ; updateAppearance ( ) ; }
public static void i ( Object string ) { i ( "" , string ) ; }
public void deleteSavedInstance ( String name , Context context ) { SharedPreferences sharedPref = WellnessIO . getSharedPref ( name , context ) ; sharedPref . edit ( ) . remove ( SHAREDPREF_NAME ) . commit ( ) ; }
public void onConnectionFailed ( @ NonNull ConnectionResult connectionResult ) { useDefaultLocation ( ) ; }
public InputListener ( MainView view ) { super ( ) ; this . mView = view ; }
public static void closeQuitely ( Closeable source ) { try { if ( source != null ) source . close ( ) ; } catch ( IOException e ) { } }
private double sqyardTosqcm ( double num ) { return num * 8361 . 2736 ; }
public void onDisConnect ( BleDevice bleDevice ) { if ( BleManager . getInstance ( ) . isConnected ( bleDevice ) ) { BleManager . getInstance ( ) . disconnect ( bleDevice ) ; } }
public VideoThumbnailsView ( final Context context , final AttributeSet attrs , final int defStyleAttr , final int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; }
public void onServiceDisconnected ( ComponentName name ) { tracer . debug ( "Disconnected from GPSLoggingService from MainActivity" ) ; }
public void onError ( String error ) { view . dismissProgress ( ) ; view . showFailDialog ( error ) ; }
public void clearDAppsFromVK ( ) { SQLiteDatabase db = getWritableDatabase ( ) ; db . delete ( TABLE_PERSONAL , COLUMN_KEY + " LIKE \'dap : %\'" , null ) ; db . close ( ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( SignupActivity . this , LoginActivity . class ) ; startActivity ( intent ) ; btnLinkToLogIn . setEnabled ( false ) ; }
public ColorPreference getColorPreference ( ) { return getAppConfig ( ) . getUtilsProvider ( ) . getColorPreference ( ) ; }
private void handleAuthToken ( AuthToken token ) { mbRequestOngoing = false ; mCredentialSink . setLoggedIn ( true ) ; mListener . onNewAuthToken ( token ) ; }
public static void setConnectedVPNProfile ( String uuid ) { mLastConnectedVPNUUID = uuid ; for ( StateListener sl : stateListener ) sl . setConnectedVPN ( uuid ) ; }
public final int getXSpan ( ) { return this . _xSpan ; }
public void onReceive ( Context context , Intent intent ) { if ( ! performGlobalAction ( intent . getIntExtra ( "action" , - 1 ) ) ) U . showToast ( PowerMenuService . this , R . string . tb_lock_device_not_supported ) ; }
public EllipsisTextView ( Context context ) { super ( context ) ; }
public int getTimestamp ( ) { return timestamp ; }
public Select ( View < ? > view , SelectMethod selectMethod , Field . . . fields ) { this . sql = "SELECT " + getFieldsList ( selectMethod , fields ) + " FROM " + getTableList ( view ) ; }
public void run ( ) { SendMessagesHelper . getInstance ( ) . sendMessage ( documentFinal , null , pathFinal , dialog_id , reply_to_msg , null , params ) ; }
public Object getKey ( String nickname ) { if ( loadedKeypairs . containsKey ( nickname ) ) { KeyHolder keyHolder = loadedKeypairs . get ( nickname ) ; return keyHolder . trileadKey ; } else return null ; }
public void testLoadingJapaneseLipsum ( ) throws IOException { onBookFile ( "lipsum/Japanese - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
public EditSavedFormPage assertOnPage ( ) { checkIsStringDisplayed ( R . string . review_data ) ; return this ; }
public void notifyGroupItemInserted ( int groupPosition ) { notifyGroupItemInserted ( groupPosition , false ) ; }
public void intentViewStream ( View view ) { Intent i = new Intent ( MainMenuActivity . this , ViewStreamActivity . class ) ; startActivity ( i ) ; }
public int getFirstVisibleScrollPosition ( ) { LinearLayoutManager layoutManager = ( ( LinearLayoutManager ) recyclerView . getLayoutManager ( ) ) ; return layoutManager . findFirstVisibleItemPosition ( ) ; }
public T withDisabledTextColorRes ( int disabledTextColorRes ) { this . disabledTextColor = ColorHolder . fromColorRes ( disabledTextColorRes ) ; return ( T ) this ; }
public ProgressCountdownView ( Context context ) { this ( context , null , 0 ) ; }
public void close ( ) throws IOException { FileSystemFileConnection . this . opendInputStream = null ; super . close ( ) ; }
public void onClick ( View v ) { if ( violationDate == null ) { date . setError ( getString ( R . string . error_incorrect_date ) ) ; } else { processContent ( ) ; } }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; this . menu = menu ; mPresenter . checkIfVisitActive ( ) ; return true ; }
public void onCreate ( ) { super . onCreate ( ) ; instance = this ; Logger . init ( ) ; mResolver = new Thread ( new RulesResolver ( ) ) ; mResolver . start ( ) ; initData ( ) ; }
public void changeClickedButton ( Button button ) { button . setTextColor ( this . getResources ( ) . getColor ( R . color . colorTransparentWhite ) ) ; button . setBackgroundResource ( R . drawable . selected_option ) ; }
public void onAnimationEnd ( Animator animation ) { layout . setVisibility ( View . GONE ) ; if ( sendIntent ) { U . sendBroadcast ( context , Constants . ACTION_DASHBOARD_DISAPPEARING ) ; } }
public TeamWriter teamWriter ( Database db ) { return Mockito . mock ( TeamWriter . class ) ; }
public java . util . List < com . coinomi . core . protos . Protos . WalletPocket > getPocketsList ( ) { return pockets_ ; }
private void loginFail ( ) { getView ( ) . showBriefMessageAction ( stringResUtils . getLoginFail ( ) , stringResUtils . getActionLogin ( ) ) ; }
public String backupProviderName ( ) { return "gdrive" ; }
public int getDocumentMaxSize ( ) { return 100 * MB ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = mLayoutInflater . inflate ( R . layout . plugin_browser_row , parent , false ) ; return new PluginBrowserViewHolder ( view ) ; }
public Long getAckTime ( ) { return ackTime ; }
public CustomFragmentAdapter ( FragmentActivity context ) { super ( context . getSupportFragmentManager ( ) ) ; mTabs = new ArrayList < FragmentInfo > ( ) ; mTitleList = new ArrayList < String > ( ) ; mContext = context ; }
public void draw ( Canvas canvas ) { for ( int n = icons . size ( ) ; n -- > 0 ; ) { ( ( CanvasIcon ) icons . get ( n ) ) . draw ( canvas ) ; } }
public void run ( ) { callback . onResult ( words ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; ( ( QuranApplication ) context . getApplicationContext ( ) ) . getApplicationComponent ( ) . inject ( this ) ; setHasOptionsMenu ( true ) ; }
public static ApplicationContext getInstance ( Context context ) { return ( ApplicationContext ) context . getApplicationContext ( ) ; }
public void close ( ) { killWorkingThread ( ) ; killWriteThread ( ) ; connection . releaseInterface ( mInterface ) ; }
public int hashCode ( ) { return Objects . hash ( id , placeID , name , accessible , image , cycling , description , priority , activities , websiteUrl , wideImage , isEvent , timestamp ) ; }
public void attachView ( V mvpView ) { mMvpView = mvpView ; }
private void initLedPrefs ( ) { binding . ledPrefs . setChecked ( mPrefs . isBirthdayLedEnabled ( ) ) ; binding . ledPrefs . setOnClickListener ( view -> changeLedPrefs ( ) ) ; binding . ledPrefs . setReverseDependentView ( binding . globalOptionPrefs ) ; }
public void onLoadData ( ) { updatePeople ( false ) ; }
public static PostBody favorite ( String mediaType , int movieId , boolean favorite ) { return new PostBody ( mediaType , movieId , favorite , null ) ; }
public E set ( int index , E element ) { E prev = get ( index ) ; elements [ getRealIndex ( index ) ] = element ; return prev ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_botCallbackAnswer . TLdeserialize ( stream , constructor , exception ) ; }
public boolean isAnonymous ( ) { return username . length ( ) == 0 ; }
public void onUpOrCancel ( @ NonNull MotionEvent e ) { }
public int getSenseElementId ( ) { return mSenseElementId ; }
public void onClick ( DialogInterface dialog , int which ) { mListener . onSignResult ( e , exchangeEntry ) ; }
public void cancelDecrement ( ) { this . mDecrement = false ; }
public void onStart ( ) { super . onStart ( ) ; this . mainColor = getResources ( ) . getColor ( R . color . defaultBrand ) ; this . textColor = Color . WHITE ; }
public void onClick ( View view ) { Snackbar . make ( view , "Async Refresh Sent" , Snackbar . LENGTH_SHORT ) . setAction ( "Action" , null ) . show ( ) ; issueRefresh ( mDbHelper , builder ) ; }
public void setComments ( List < Comment > comments ) { this . comments = comments ; }
public void onAnimationStart ( Animator animation ) { for ( FloatingActionButton fab : fabs ) { fab . setLayerType ( View . LAYER_TYPE_HARDWARE , null ) ; fab . setClickable ( false ) ; } }
public void onClick ( DialogInterface dialog , int whichButton ) { JobList . this . deleteAll ( ) ; JobList . this . refreshSpinner ( ) ; }
public MediatorLiveData < List < EducationEntity >> getEducations ( ) { return mObservableEducations ; }
public String getmFileName ( ) { return cbr . toString ( ) ; }
public void setOnDrawerItemLongClickListener ( @ NonNull OnDrawerItemLongClickListener onDrawerItemLongClickListener ) { mDrawerBuilder . mOnDrawerItemLongClickListener = onDrawerItemLongClickListener ; }
public boolean isRepeat ( ) { return repeatMode ; }
private void initialize ( ) { mPresenter . setGoogleApiClient ( googleApiClientProvider . getApiClient ( ) ) ; mPresenter . setAutocompleteView ( ) ; }
private boolean isLinkExternal ( String url ) { for ( String rule : WebViewConfig . LINKS_OPENED_IN_EXTERNAL_BROWSER ) { if ( url . contains ( rule ) ) return true ; } return false ; }
public InvalidSubredditNameException ( String subredditName ) { super ( String . format ( "Invalid subreddit name '%s' . " , subredditName == null ? "NULL" : subredditName ) ) ; }
public void onError ( Throwable e ) { handleError ( errorHandler , e ) ; }
public void run ( ) { cacheSaveGif ( uri , c , subreddit , true ) ; }
public static String getCreateEntriesQuery ( ) { return "CREATE TABLE " + tableName + " ( " + _ID + " INTEGER PRIMARY KEY , " + columnName + " TEXT , " + columnRecipe + " TEXT" + " ) " ; }
public void onMediaModelCreatedForFile ( String oldId , String newId , final String oldUrl ) { mWPAndroidGlueCode . mediaIdChanged ( oldId , newId , oldUrl ) ; }
public CategoryInfoAdapter ( ArrayList < CategoryInfo > categoryInfos ) { this . categoryInfos = categoryInfos ; SwipeAndDragHelper swipeAndDragHelper = new SwipeAndDragHelper ( this ) ; touchHelper = new ItemTouchHelper ( swipeAndDragHelper ) ; }
public String getCaptionId ( ) { return captionId ; }
public static Location getPreviousLocationInfo ( ) { return previousLocationInfo ; }
public boolean onNestedPreFling ( View target , float velocityX , float velocityY ) { return false ; }
public JobList ( ) { this . mDecimalFormat = new DecimalFormat ( "0 . 00" ) ; this . mHandler = new Handler ( ) ; this . mDisplayUpdater = new DisplayUpdater ( ) ; this . mJobActivityClass = JobActivity . class ; }
private void showLastUpdateTime ( ) { NewsSharedPreferences newsSharedPreferences = NewsSharedPreferences . getInstance ( ) ; long lastUpdateTimeinMillis = newsSharedPreferences . get ( newsSharedPreferences . getStringFromResId ( R . string . pref_last_updated_key ) , 0L ) ; mNewsListView . showLastUpdateTime ( DateUtils . formatLastUpdateTime ( lastUpdateTimeinMillis ) ) ; }
public Socket createSocket ( final InetAddress host , final int port ) throws IOException { final SSLSocket socket = ( SSLSocket ) mSSLSocketFactory . createSocket ( host , port ) ; socket . setEnabledCipherSuites ( CYPHPER_SUITES ) ; socket . setEnabledProtocols ( PROTOCOLS ) ; return socket ; }
public MeleeWeapon ( Parcel source ) { name = source . readString ( ) ; damage = source . readString ( ) ; }
public void onBackPressed ( ) { try { NavUtils . navigateUpFromSameTask ( this ) ; } catch ( IllegalArgumentException ex ) { final Intent intent = new Intent ( this , MyActivity . class ) ; startActivity ( intent ) ; } }
public void setReg ( String reg ) { this . _reg = reg ; }
private long getHighScore ( ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return settings . getLong ( HIGH_SCORE , - 1 ) ; }
public Project loadProject ( String name , int layers , String id ) { Project project = new Project ( name , layers , id ) ; projects . put ( project . id , project ) ; return project ; }
public void setTestType ( QoSTestResultEnum testType ) { this . testType = testType ; }
private void tryAddExchangeRate ( ) { AnswersProxy . get ( ) . logButton ( "Done Exchange Rate" ) ; if ( addExchangeRate ( ) ) { AnswersProxy . get ( ) . logEvent ( "Done Exchange Rate" ) ; setResult ( RESULT_OK ) ; finish ( ) ; } }
public void openQueue ( @ Nullable final ArrayList < Song > playingQueue , final int startPosition , final boolean startPlaying ) { openQueue ( playingQueue , startPosition , startPlaying , shufflingQueue . getShuffleMode ( ) ) ; }
private TransactionHandler ( String name , BroadcastLogsAdapter adapter ) { super ( name ) ; this . adapter = adapter ; }
public RedditPreparedComment getComment ( ) { return mComment ; }
public void getSimpleThemeDARKTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . DARK_INDEX ) ; assertEquals ( AppTheme . DARK , apptheme . getSimpleTheme ( ) ) ; }
public Profile getItem ( int position ) { return ProfileList . get ( position ) ; }
public void onSetFailure ( String s ) { if ( alive ) { Log . e ( TAG , "SetDescription failed : " + s ) ; sendMessage ( What . SDP_SET_FAILURE , 0 , 0 , null ) ; } }
public void renameCollection ( int collectionId , String newName ) { UserDataDBHelper . getInstance ( context ) . renameCollection ( collectionId , newName ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; geo_point . serializeToStream ( stream ) ; }
public void setSelectedItems ( List < LocationClusterItem > selectedItems ) { this . selectedItems = selectedItems ; }
public static List < Song > getSongs ( @ NonNull final Context context , final int genreId ) { return SongLoader . getSongs ( makeGenreSongCursor ( context , genreId ) ) ; }
public int getCount ( ) { return headers . length ; }
public void setAutoManaged ( boolean autoManaged ) { if ( isPaused ( ) ) return ; this . autoManaged = autoManaged ; if ( autoManaged ) th . setFlags ( TorrentFlags . AUTO_MANAGED ) ; else th . unsetFlags ( TorrentFlags . AUTO_MANAGED ) ; }
public void displayImage ( @ NonNull Optional < Uri > uri ) { imageUriSubject . onNext ( uri ) ; }
public void setColour ( int colour ) { kanaPaint . setColor ( colour ) ; romanjiPaint . setColor ( colour ) ; }
public static void remove ( int featureResourceId ) { remove ( Game . getVar ( featureResourceId ) ) ; }
public int getItemCount ( ) { int size = 1 + admins . size ( ) ; size += isAdmin && ! users . isEmpty ( ) ? 1 + users . size ( ) : 0 ; return size ; }
public static synchronized < T > List < T > findAll ( Class < T > modelClass , long . . . ids ) { return findAll ( modelClass , false , ids ) ; }
public void onClick ( View v ) { finish ( ) ; startActivity ( new Intent ( BoardActivity . this , HomeActivity . class ) ) ; }
private void updatePreview ( ) { preview . setTheme ( getNewTheme ( ) ) ; }
public SimpleMessageHandler ( AbstractRecognizerIntentActivity c ) { mRef = new WeakReference <> ( c ) ; }
private void setSubtitle ( String title ) { ActionBar actionBar = getActionBar ( ) ; if ( actionBar != null ) { actionBar . setSubtitle ( title ) ; } }
public RGBPanelData ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; setupPanel ( context ) ; }
public static File getImageFile ( Context context , @ NonNull Config config , @ NonNull String url ) throws Exception { return getImageStackBlurFile ( config . getStackBlur ( ) , getImageFile ( context , url ) ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( ClearCacheEvent . UNIVERSITY ) ) { return ; } building_map = null ; }
public boolean equals ( Object obj ) { return super . equals ( obj ) || ( obj != null && obj instanceof PositionData && MapUtils . getTileId ( this ) . equals ( MapUtils . getTileId ( ( PositionData ) obj ) ) ) ; }
public int position ( ) { if ( ! mIsInitialized ) { return - 1 ; } try { return mCurrentMediaPlayer . getCurrentPosition ( ) ; } catch ( IllegalStateException e ) { return - 1 ; } }
public void setAudioId ( int audioId ) { this . audioId = audioId ; }
public FormEntryPage clickKeyboardEnter ( ) { onView ( withHint ( getTranslatedString ( R . string . identity ) ) ) . perform ( pressImeActionButton ( ) ) ; return new FormEntryPage ( formName , rule ) . assertOnPage ( ) ; }
private static void drawUnpinItem ( Canvas canvas ) { HabiticaIcons . drawUnpinItem ( canvas , new RectF ( 0f , 0f , 40f , 40f ) , ResizingBehavior . AspectFit ) ; }
public boolean canBindData ( Object item ) { return item instanceof Mail ; }
public void onClick ( View view ) { showRewardedVideo ( ) ; }
public boolean onSupportNavigateUp ( ) { if ( fm . getBackStackEntryCount ( ) > 0 ) fm . popBackStack ( ) ; else finish ( ) ; return true ; }
public void onTextChanged ( CharSequence charSequence , int i , int i1 , int i2 ) { generateAvatar ( ) ; }
public void refresh ( View v ) { setStatus ( ) ; setIp ( ) ; }
public boolean addInt ( final String key , final int value ) { checkKey ( key ) ; return mPrefs . edit ( ) . putInt ( key , value ) . commit ( ) ; }
public static boolean canRequestWriteExternalStoragePermission ( Activity activity ) { return ! StorageUtils . didPresentSdcardPermissionsDialog ( activity ) || ActivityCompat . shouldShowRequestPermissionRationale ( activity , Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; }
public void clearFeaturedImage ( ) { if ( mEditorFragment instanceof GutenbergEditorFragment ) { ( ( GutenbergEditorFragment ) mEditorFragment ) . sendFeaturedImageId ( 0 ) ; } }
public boolean onSetSurface ( Surface surface ) { Log . d ( TAG , "Session onSetSurface ( " + mSessionNumber + " ) " ) ; mPlayer . setSurface ( surface ) ; return true ; }
public void blobLink_withoutBranchAndPath__opensBrowser ( ) throws Exception { assertRedirectsToBrowser ( parseLink ( "https : }
public void refresh ( boolean hard ) { if ( hard ) { notifyDataSetChanged ( ) ; } else { for ( EntryHolder holder : _holders ) { holder . refreshCode ( ) ; } } }
public void unbind ( ) { }
public void onDriveBackupError ( DriveBackupError event ) { dissmissProgressDialog ( ) ; Toast . makeText ( this , getString ( R . string . google_drive_connection_failed , event . message ) , Toast . LENGTH_LONG ) . show ( ) ; }
public boolean trusted ( ) { Contact contact = this . getContact ( ) ; return status > STATUS_RECEIVED || ( contact != null && ( contact . showInRoster ( ) || contact . isSelf ( ) ) ) ; }
public static void log ( Context context , Exception ex ) { log ( context , getExceptionInfo ( ex ) , Types . ERROR ) ; }
public void setOnStatusChangedListener ( OnStatusChanged listener ) { this . statusListener = listener ; }
public void onClick ( DialogInterface dialog , int which ) { refreshRecyclerView ( gid , false ) ; dialog . dismiss ( ) ; }
public long lastModified ( String key ) { return mStorage . lastModified ( key ) ; }
public int getInputGravity ( ) { FrameLayout . LayoutParams layoutParams = ( FrameLayout . LayoutParams ) innerContainer . getLayoutParams ( ) ; return layoutParams . gravity ; }
public void setCurrentThread ( int currentThread ) { this . currentThreadId = currentThread ; }
public String desc ( ) { return Game . getVar ( R . string . ScaleArmor_Desc ) ; }
public static int ruleTextSize ( ) { return gPrefs . getInt ( "ruleTextSize" , 40 ) ; }
public static Job . Result synchronousProtoRequest ( Context context ) { return synchronousProtoRequest ( context , null ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . pref_general ) ; setBikeNetworkPrefSummary ( ) ; setupBitcoinButton ( ) ; setupVersionEntry ( ) ; }
public void setUserAccess ( UserAccount classUserAccess ) { this . classUserAccount = classUserAccess ; }
public ArrayList < String > getLevels ( ) { return xu . findAllElementTexts ( mInfoElement , R . string . xml2elemName_info_level ) ; }
public void onEvent ( OnWifiUpdateCompleted event ) { if ( currentTracker == null ) return ; if ( event . success && currentTracker . equals ( event . tracker ) ) { invalidate ( ) ; } }
public TelephonyManager ( @ ForApplication Context context ) { telephonyManager = ( android . telephony . TelephonyManager ) context . getSystemService ( Context . TELEPHONY_SERVICE ) ; }
private void sendSessionTerminate ( Reason reason ) { final JinglePacket packet = bootstrapPacket ( JinglePacket . Action . SESSION_TERMINATE ) ; packet . setReason ( reason ) ; this . sendJinglePacket ( packet ) ; }
public static boolean startsWithDefiniteArticle ( String string ) { return string . startsWith ( "ال" ) ; }
public void onBindViewHolder ( InquiryViewHolder inquiryViewHolder , int i ) { final Stocktake model = mFilteredList . get ( i ) ; inquiryViewHolder . bind ( model ) ; }
public GoogleRewardVideoAds ( ) { GameLoop . runOnMainThread ( this : : loadNextVideo ) ; }
private void translationViewPager ( ) { float percent = mContentView . getTranslationY ( ) * 1 . 0f / mContentViewTranslateY ; mViewPager . setTranslationY ( mViewPagerTranslateY * percent ) ; }
public void clear ( ) { items . clear ( ) ; }
public void onEventMainThread ( ServiceEvents . AnnotationStatus annotationStatus ) { if ( annotationStatus . annotationWritten ) { SetAnnotationDone ( ) ; } else { SetAnnotationReady ( ) ; } }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mDataTableRowDialogPresenter . detachView ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( DashboardActivity . this , Chat . class ) ; startActivity ( i ) ; }
public List < Debt > loadInBackground ( ) { EspressoIdlingResource . increment ( ) ; return mPersonDebtsRepository . getPersonDebts ( mPerson ) ; }
public DeviceItem ( AfhDevice . Data device ) { super ( device ) ; }
public void setCountdownTime ( long countDownMilli ) { this . countdownTimeMilli = countDownMilli ; notifyCountdownTimeChanged ( ) ; }
public Song getSong ( ) { return ( Song ) results . get ( getAdapterPosition ( ) ) ; }
public static WPLinkMovementMethod getInstance ( ) { if ( mMovementMethod == null ) mMovementMethod = new WPLinkMovementMethod ( ) ; return mMovementMethod ; }
public void setClipBoardCompare ( String str ) { String s = pattern . matcher ( str ) . replaceAll ( "\n" ) . trim ( ) ; ClipBoardCompare = s . split ( "\n" ) ; getPrefs ( ) . getOther ( ) . setClipboardCompareRules ( s ) ; }
public static String fontSize ( Context context ) { return getDefaultSharedPreferences ( context ) . getString ( context . getResources ( ) . getString ( R . string . pref_key_font_size ) , context . getResources ( ) . getString ( R . string . pref_default_value_font_size ) ) ; }
public void setUp ( ) { spyActivity = spy ( widgetTestActivity ( ) ) ; customTabHelper = mock ( CustomTabHelper . class ) ; listener = mock ( OnLongClickListener . class ) ; }
public ProfileSearchCell ( Context context ) { super ( context ) ; avatarImage = new ImageReceiver ( this ) ; avatarImage . setRoundRadius ( AndroidUtilities . dp ( 26 ) ) ; avatarDrawable = new AvatarDrawable ( ) ; }
public void notifyChildItemMoved ( int fromGroupPosition , int fromChildPosition , int toGroupPosition , int toChildPosition ) { mAdapter . notifyChildItemMoved ( fromGroupPosition , fromChildPosition , toGroupPosition , toChildPosition ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return "Info" ; case 1 : return "Videos" ; case 2 : return "Reviews" ; case 3 : return "Similar" ; } return "" ; }
public IdleConnectionHandler ( MessageCenterService service , int refCount , Looper looper ) { super ( looper ) ; s = new WeakReference < MessageCenterService > ( service ) ; mRefCount = refCount ; Looper . myQueue ( ) . addIdleHandler ( this ) ; }
public void onCancel ( ) { mShowProgress . setValue ( false ) ; }
public boolean onNestedFling ( View target , float velocityX , float velocityY , boolean consumed ) { return false ; }
public void testMinimalEncoder18 ( ) throws Exception { verifyMinimalEncoding ( "A1234" , "ALPHANUMERIC ( A1234 ) , TERMINATOR ( ) " , null , false ) ; }
public void uncheckAll ( ) { mAbstractSharedPreferences . putBoolean ( "sorting" , false ) ; new uncheckAll ( mTrackDao ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public DashWrappingSegmentIndex ( ChunkIndex chunkIndex , String uri ) { this . chunkIndex = chunkIndex ; }
public int onGetSwipeReactionType ( MyViewHolder holder , int position , int x , int y ) { if ( onCheckCanStartDrag ( holder , position , x , y ) ) { return Swipeable . REACTION_CAN_NOT_SWIPE_BOTH_H ; } else { return Swipeable . REACTION_CAN_SWIPE_BOTH_H ; } }
public void setSelection ( boolean selected ) { if ( selected ) { interestBackground . setBackgroundResource ( CommunityUtils . getFilledBackground ( mCommunity . getCommunityId ( ) ) ) ; } else { interestBackground . setBackgroundResource ( CommunityUtils . getBorder ( mCommunity . getCommunityId ( ) ) ) ; } }
public static boolean existFile ( String file ) { return Tools . existFile ( file , true ) ; }
public boolean onCreate ( ) { dbHelper = new MoviesDbHelper ( getContext ( ) ) ; return true ; }
public Uri uri ( String url ) { return Uri . parse ( url ) ; }
public void stopRingback ( ) { mRemoteLogger . d ( "onCallStopRingback" ) ; mHandler . removeCallbacks ( mRingbackRunnable ) ; }
public static Permissions makePermissionsResponse ( ) { return Permissions . create ( false , true , false , true ) ; }
public static void setStations ( RecyclerView recyclerView , List < Category > categoryList ) { if ( recyclerView != null && categoryList != null ) { recyclerView . setAdapter ( new CategoryListRecyclerAdapter ( categoryList ) ) ; } }
public void saveCapturedImage ( ) { ImageUtil . saveYuvImage ( decodeImageByteArray , FileType . TEST_IMAGE , testInfo . getName ( ) ) ; }
public CalendarView ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; mDelegate = new CustomCalendarViewDelegate ( context , attrs ) ; init ( context ) ; }
public void swapDataSet ( ArrayList < Playlist > dataSet ) { this . dataSet = dataSet ; notifyDataSetChanged ( ) ; }
public static Date convertSlot ( String startTimeString ) throws ParseException { SimpleDateFormat formatter = new SimpleDateFormat ( "hh : mm : ss" ) ; return formatter . parse ( startTimeString ) ; }
public static boolean isSet ( String str ) { return str != null && str . length ( ) > 0 ; }
public static DateTime getEpoch ( ) { return DateTime . forInstant ( 0 , TimeZone . getDefault ( ) ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeInt ( x ) ; dataOutputStream . writeInt ( y ) ; dataOutputStream . writeInt ( z ) ; dataOutputStream . writeInt ( block ) ; dataOutputStream . writeInt ( meta ) ; }
public void onAttachedToRecyclerView ( RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; this . recyclerView = recyclerView ; }
public void testGetTithe_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . getTithe ( ) , closeTo ( tithe , 1e - 7 ) ) ; }
public Bundle extraCommand ( String commandName , Bundle args ) { try { return this . mService . extraCommand ( commandName , args ) ; } catch ( RemoteException var4 ) { return null ; } }
public ProviderMapper ( Map < Provider , RestorablePrices > pricesMap ) { this . pricesMap = pricesMap ; }
public String getCreatedString ( String format ) { return ( created != null ) ? Utils . dateToString ( created , format ) : "" ; }
public void testSafeToAddAuthToken25 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( wpcomAddress6 ) ) ; }
private File folder ( ) { String folderPath = getParameter ( PARAMETER_FOLDER_PATH , "/" ) ; return new File ( folderPath ) ; }
public LoaderTask ( Activity parent , Uri uri , Callback callback ) { this . uri = uri ; this . dialog = new ProgressDialog ( parent ) ; this . callback = callback ; }
public void onClick ( View v ) { onClickListener . onClickDelete ( holder . getAdapterPosition ( ) ) ; }
private void parseLinks ( String s ) { setText ( s ) ; int mask = Linkify . WEB_URLS ; Linkify . addLinks ( this , mask ) ; }
public void onPause ( ) { super . onPause ( ) ; unregister ( wifiReceiver ) ; }
public int getCurrentThread ( ) { return currentThreadId ; }
public void onLoadFinished ( Loader < Album > loader , Album data ) { setAlbum ( data ) ; }
public void logEvent ( AuditEvent . AuditEventType eventType , boolean writeImmediatelyToDisk , long currentTime ) { logEvent ( eventType , null , writeImmediatelyToDisk , null , currentTime ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; if ( dy != 0 ) { FileUtils . hideSoftInput ( mSearchEditText ) ; } }
public void performAction ( Context context , TimestampedValue [ ] newValues ) { notificationManager . notify ( notificationId , notification ) ; }
public AboutAdapter ( Activity activity , List < Item > items ) { this . activity = activity ; this . items = items ; }
public void execute ( Realm realm ) { TodoListItemDAO dao = realm . where ( TodoListItemDAO . class ) . equalTo ( "uuid" , deletedItem . getUuid ( ) ) . findFirst ( ) ; if ( dao != null ) dao . deleteFromRealm ( ) ; }
private void onProgressChanged ( int progress ) { isLoading = true ; for ( BlackboardListener listener : listeners ) { listener . onProgressChanged ( progress ) ; } }
public void setHighlightSearchQuery ( CharSequence searchQuery ) { this . searchQuery = searchQuery ; }
private void particlesEffect ( LinearLayout button ) { new ParticleSystem ( this , 10 , getResources ( ) . getDrawable ( R . drawable . ic_star_yellow_24dp ) , 1000 ) . setSpeedRange ( 0 . 2f , 0 . 5f ) . oneShot ( button , 10 ) ; }
public ChatMessage ( boolean left , String message ) { super ( ) ; this . left = left ; this . message = message ; }
public static final Channel getChannel ( String channelName ) { for ( Channel c : Channel . values ( ) ) if ( c . toString ( ) . equals ( channelName ) ) return c ; return null ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item , parent , false ) ; return new ViewHolder ( view , listener ) ; }
public void onBackPressed ( ) { FragmentManager fm = getFragmentManager ( ) ; if ( fm . getBackStackEntryCount ( ) > 0 ) { fm . popBackStack ( ) ; } else { super . onBackPressed ( ) ; } }
public AndroidInjector < Activity > activityInjector ( ) { return dispatchingAndroidInjector ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersGridView , StickerMasksView . this . getMeasuredHeight ( ) , null ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { View rootView = inflater . inflate ( R . layout . fragment_shared_element_detail , container , false ) ; ButterKnife . bind ( this , rootView ) ; return rootView ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_5 . getText ( ) . toString ( ) ) ; }
public void setInferredLocation ( String location ) { if ( mLocation . equals ( Expression . LOCATION_INFER ) ) { mLocation = location ; return ; } throw new RuntimeException ( "Please don't use this method . For internal use only . " ) ; }
public int getOriginalId ( ) { return originalId ; }
public void putString ( String key , String value ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( key , value ) . commit ( ) ; }
public String defenseVerb ( ) { return Game . getVar ( R . string . Imp_Defense ) ; }
public void lab ( View V ) { changeView ( 5 ) ; sentence . setText ( "베타기능을 만나보세요" ) ; }
public int hashCode ( ) { return Objects . hash ( _id , name , type , address , latitude , longitude ) ; }
public int getCount ( ) { return ConfigVariable . MAX_TILE ; }
public WeatherListAdapter ( Model model , Activity activity ) { if ( this . model != null ) { this . setModel ( model ) ; } this . activity = activity ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mActivity = ( MainActivity ) getActivity ( ) ; }
public void showNetworkNotAvailableError ( ) { Toast . makeText ( this , getString ( R . string . network_not_available_error ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onViewAttachedToWindow ( VH holder ) { }
public void setARGBColor ( int argb ) { alphaComponent = ( argb >> 24 & 0xff ) ; graphics . setColor ( argb & 0xffffff ) ; }
public String getTitle ( ) { return mFile . getPath ( ) . equals ( "/" ) ? "root" : mFile . getName ( ) ; }
public static void updateState ( int newBitState , boolean newSignState ) { bitPrecision = newBitState ; isSigned = newSignState ; }
public EmojiTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public boolean getIndicateAlerts ( ) { return sharedPreferences . getBoolean ( PREF_INDICATE_ALERTS , true ) ; }
public int getCount ( ) { return projectsUsersList . size ( ) ; }
private static String format ( String first , String second ) { return Localization . get ( Localization . get ( "commands . help . format" , first , second ) ) ; }
private final MediaCheckListener mediaCheckListener ( ) { return new MediaCheckListener ( this ) ; }
public boolean isPlaying ( ) { return playback . isPlaying ( ) ; }
public void onTextInputNegativeClick ( String id ) { }
private void launchZendeskMyTickets ( ) { if ( isFinishing ( ) ) { return ; } mBottomNav . setCurrentSelectedPage ( PageType . ME ) ; initSelectedSite ( ) ; ActivityLauncher . viewZendeskTickets ( this , getSelectedSite ( ) ) ; }
public void onClick ( View view ) { showResistanceDialog ( secondColor ) ; }
public AccountHeader withTranslucentStatusBar ( boolean translucentStatusBar ) { this . mTranslucentStatusBar = translucentStatusBar ; return this ; }
private void setupHolidaySelectedListener ( ) { adapter . setOnItemSelectedListener ( new HolidayPickerAdapter . OnItemSelectedListener ( ) { @ Override public boolean selected ( final String holidayId ) { setupActionMode ( holidayId ) ; return true ; } } ) ; }
public static void e ( String tag , String message , Exception e ) { if ( D ) { Log . e ( TAG + tag , message + e . getLocalizedMessage ( ) ) ; } }
public void refreshListPlaylist ( ) { mCurrentPage = PAGE_PLAYLIST ; showProgressBar ( ) ; refreshCurrentList ( ) ; }
public void setDisplayName ( String displayName ) { this . displayName = StringUtils . notNullStr ( displayName ) ; }
public void run ( ) { Toast . makeText ( MainActivity . this , message , Toast . LENGTH_LONG ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_section_header , parent , false ) ; return new MyViewHolder ( v ) ; }
public String getDownloadDirectory ( ) { return mPrefs . getString ( Name . DOWNLOAD_DIRECTORY , DownloadHandler . DEFAULT_DOWNLOAD_PATH ) ; }
public Map < String , WebComment > getComments ( ) { return comments ; }
public SnapshotDisksFragment ( ) { super ( Disk . class ) ; }
public Observable < EmptyResponse > cancel ( long songId ) { return controlService . cancel ( songId ) ; }
public void translatesValueForKey ( ) { initPrefs ( prefs , "key" , "value" ) ; translateValue ( "value" ) . toValue ( "newValue" ) . forKey ( "key" ) . apply ( prefs ) ; assertPrefs ( prefs , "key" , "newValue" ) ; }
public FeedPoster getLostnfoundPoster ( ) { return lostnfoundPoster ; }
public void run ( ) { GifUtils . cacheSaveGif ( Uri . parse ( GifUtils . AsyncLoadGif . formatUrl ( s . getUrl ( ) ) ) , ( Activity ) context , s . getSubredditName ( ) , false ) ; }
public EventViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card_feed , parent , false ) ; return new EventViewHolder ( view ) ; }
public void onBookCollectionVisibilityChanged ( BooksCollection booksCollection , boolean isVisible ) { homeScreenRecyclerViewAdapter . onBookCollectionVisibilityChanged ( booksCollection , isVisible ) ; }
public void launchTranslationActivity ( ) { Intent i = new Intent ( this , TranslationManagerActivity . class ) ; startActivity ( i ) ; }
public void toggle ( int position ) { if ( getSelected ( position ) ) selectedItems . delete ( position ) ; else selectedItems . append ( position , true ) ; notifyItemChanged ( position ) ; onSelectionListener . onSelectionChanged ( ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . LOG_10 ) ; }
public void onFailure ( Call < SupportCommentsResponse > call , Throwable t ) { notifyGetSupportManagerCallbackFailed ( ) ; }
public PPF ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public String exec ( ExecutePack pack ) { pack . context . startActivity ( Tuils . openFile ( new File ( Tuils . getFolder ( ) , AppsManager . PATH ) ) ) ; return null ; }
public void onAnimationCancel ( Animator animation ) { if ( animation . equals ( voiceHintAnimation ) ) { voiceHintHideRunnable = null ; voiceHintHideRunnable = null ; } }
public SuraAyah getRangeEnd ( ) { return new SuraAyah ( mMaxSura , mMaxAyah ) ; }
private void playCurrentFolderAndSubFolders ( ) { try { ( ( GenericActivity ) getActivity ( ) ) . getPlaybackService ( ) . playDirectoryAndSubDirectories ( mCurrentDirectory . getPath ( ) , mSearchString ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public AveragePropagator ( StatePropagator statePropagator ) { super ( "AveragePropagator" ) ; setDaemon ( true ) ; mStatePropagator = statePropagator ; start ( ) ; }
public Boolean getBodyUserFollows ( ) { return bodyUserFollows ; }
public void onPause ( ) { super . onPause ( ) ; hideInputMethodManager ( ) ; }
public void onShow ( DialogInterface dialog ) { isDialogShowing = true ; }
public String getIdentifier ( Provider provider , int readingFrom , int readingTo , String dateFrom , String dateTo , Prices prices ) { return getIdentifier ( provider , readingFrom , readingTo , 0 , 0 , dateFrom , dateTo , prices ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { startForeground ( NOTIFY_ID , createNotification ( ) ) ; return START_STICKY ; }
private void manualUpdate ( ) { logEvent ( "manual_data_refresh" ) ; loadPlaylists ( ) ; }
public ScrollOnDraggingProcessRunnable ( RecyclerViewDragDropManager holder ) { mHolderRef = new WeakReference < RecyclerViewDragDropManager > ( holder ) ; }
public void saveCurrentUserFollowings ( ArrayList < String > follower ) { Set < String > set = new HashSet < String > ( ) ; set . addAll ( follower ) ; editor . putStringSet ( "followings" , set ) ; editor . apply ( ) ; }
public void start ( long delayMillis ) { Assertions . checkState ( currentTask == null ) ; currentTask = this ; if ( delayMillis > 0 ) { sendEmptyMessageDelayed ( MSG_START , delayMillis ) ; } else { submitToExecutor ( ) ; } }
public void clearVideoSurface ( ) { setVideoSurface ( null ) ; }
public void resetButtonNextOnClickListener ( ) { binding . miButtonNext . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { nextSlide ( ) ; } } ) ; }
private void onCloseAnimationEnd ( ) { if ( transitionAnimationInProgress && onCloseAnimationEndRunnable != null ) { transitionAnimationInProgress = false ; transitionAnimationStartTime = 0 ; onCloseAnimationEndRunnable . run ( ) ; onCloseAnimationEndRunnable = null ; checkNeedRebuild ( ) ; } }
public void onClick ( View view ) { Intent intent = new Intent ( ChooseGameActivity . this , SoundsSeqActivity . class ) ; startActivity ( intent ) ; }
public void setBlock ( TLRPC . TL_pageBlockEmbedPost block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
public CharSequence getPageTitle ( int i ) { String title = "null" ; switch ( i ) { case 0 : title = "NOTES" ; break ; case 1 : title = "CRYPT" ; break ; default : title = "CRYPT" ; break ; } return title ; }
public void writeLevel ( GameSave save ) throws IOException { writeLevel ( save . getWorldName ( ) , save . getPlayerName ( ) , save . getGameType ( ) , save . getCurrentScene ( ) ) ; }
private static Completable createNotifier ( int accountId , int peerId ) { return Apis . get ( ) . vkDefault ( accountId ) . messages ( ) . setActivity ( peerId , true ) . delay ( 5 , TimeUnit . SECONDS ) . toCompletable ( ) ; }
public void onAnimationEnd ( Object animator ) { if ( runningAnimationAudio != null && runningAnimationAudio . equals ( animator ) ) { ViewProxy . setX ( recordPanel , 0 ) ; runningAnimationAudio = null ; } }
public void bindView ( IPreferencesView view ) { this . view = view ; }
public void onAnimationCancel ( Object animation ) { if ( pinnedMessageViewAnimator != null && pinnedMessageViewAnimator . equals ( animation ) ) { pinnedMessageViewAnimator = null ; } }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) . edit ( ) . putBoolean ( LaunchVPN . CLEARLOG , isChecked ) . apply ( ) ; }
public static boolean isMarshMallowOrLater ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mMatches . get ( 0 ) ) ; }
public void run ( ) { mViewPager . setCurrentItem ( ( mViewPager . getCurrentItem ( ) + 1 ) %NUM_PAGES , true ) ; h . postDelayed ( this , 5000 ) ; }
public int getCount ( ) { return mData . size ( ) ; }
public void resume ( ) { playAgainOnFocus = true ; player . setPlayWhenReady ( true ) ; }
public void onStart ( ) { super . onStart ( ) ; linksListener = returnListener ( ) ; linksReference . addValueEventListener ( linksListener ) ; }
public boolean onTouchEvent ( MotionEvent event ) { super . onTouchEvent ( event ) ; return true ; }
public boolean isUserModified ( ) { return isUserDefined ( ) || ( isOriginalCoordsEmpty ( ) && ( getCoords ( ) != null || getCalcStateJson ( ) != null ) ) || StringUtils . isNotBlank ( getUserNote ( ) ) ; }
public int getStickyFooterPosition ( int identifier ) { return DrawerUtils . getStickyFooterPositionByIdentifier ( mDrawerBuilder , identifier ) ; }
public void saveUsePalette ( boolean usePalette ) { PreferenceUtil . getInstance ( getActivity ( ) ) . setSongColoredFooters ( usePalette ) ; }
public void setAmount ( @ NotNull BigDecimal amount ) { this . amount = amount ; }
private PluginCollection ( ) { if ( Build . VERSION . SDK_INT >= 8 ) { myExternalPlugins . add ( new DjVuPlugin ( ) ) ; myExternalPlugins . add ( new PDFPlugin ( ) ) ; myExternalPlugins . add ( new CBZPlugin ( ) ) ; } }
private void refresh ( ) { if ( this . currentTracker == null ) { return ; } logSummaryAdapter = new LogSummaryAdapter ( getData ( ) ) ; recyclerView . swapAdapter ( logSummaryAdapter , true ) ; }
public void setOnTouchListener ( OnTouchListener onTouchListener ) { this . _onTouchListener = onTouchListener ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfShadowbolt_Info ) ; }
public void fitFontSize ( int chars ) { fitChars = chars ; }
public EventAdapter ( EventPresenter p ) { super ( ) ; presenter = p ; items = new ArrayList <> ( ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnFragmentInteractionListener ) { mListener = ( OnFragmentInteractionListener ) context ; } else { throw new RuntimeException ( "Activity Launching OstVerifyDataFragment does not implements OstVerifyDataFragment . OnFragmentInteractionListener" ) ; } }
public QoSTestResultEnum getTestType ( ) { return QoSTestResultEnum . VOIP ; }
public LayoutInflater getInflater ( ) { return getSupportActivity ( ) . getLayoutInflater ( ) ; }
private void send ( String action ) { send ( action , null ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; ( ( NewsReaderApplication ) getActivity ( ) . getApplication ( ) ) . getAppComponent ( ) . injectFragment ( this ) ; setRetainInstance ( true ) ; }
public int getColour ( ) { return kanaPaint . getColor ( ) ; }
public void loadDefaultView ( ) { ActivityView activityView = new ActivityView ( MainActivity . this , getApplicationContext ( ) , this ) ; activityView . statusBarColor ( R . id . toolbarTrainingSearchExercises ) ; }
private void unblockContact ( int contactId ) { ApplicationDcContext dcContext = DcHelper . getContext ( getContext ( ) ) ; dcContext . blockContact ( contactId , 0 ) ; restartLoader ( ) ; }
public static boolean isSDCardMounted ( ) { String state = Environment . getExternalStorageState ( ) ; return state . equals ( Environment . MEDIA_MOUNTED ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { for ( DataSnapshot snapshot : dataSnapshot . getChildren ( ) ) { EventModel eventModel = snapshot . getValue ( EventModel . class ) ; eventList . add ( eventModel ) ; mAdapter . notifyDataSetChanged ( ) ; } }
public void writeToParcel ( Parcel out , int flags ) { out . writeParcelable ( mViewPagerSavedState , flags ) ; out . writeInt ( mLayoutDirection ) ; }
private File getDatabaseFile ( boolean preference ) throws Exception { boolean internal = preferencesService . isInteranalStorage ( ) ; if ( internal == preference ) { return openInternalFile ( ) ; } else { return openExtrnalFile ( ) ; } }
public String getCode ( ) { return codIntrebare ; }
public void notifyBookCollectionAdded ( BooksCollection booksCollection ) { UpdatePayload payload = new UpdatePayload ( FORCE_REFRESH_UPDATE ) ; if ( booksCollections . add ( new BookCollectionRecyclable ( booksCollection , payload ) ) ) notifyItemInserted ( booksCollection . getOrder ( ) ) ; }
public void setOverallAlpha ( float alpha ) { mOverallAlpha = alpha ; }
public int getAbsoluteTimeoutForAcquiringPosition ( ) { return ( Utilities . parseIntWithDefault ( prefs . getString ( PreferenceNames . ABSOLUTE_TIMEOUT , "120" ) , 120 ) ) ; }
public static boolean canWriteInSignalStorageDir ( ) { File storage ; try { storage = getSignalStorageDir ( ) ; } catch ( NoExternalStorageException e ) { return false ; } return storage . canWrite ( ) ; }
public SendButton ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . transportOptions = initializeTransportOptions ( false ) ; ViewUtil . mirrorIfRtl ( this , getContext ( ) ) ; }
private String getPrettyPrintValue ( String value ) { if ( TextUtils . isEmpty ( value ) ) return getContext ( ) . getString ( R . string . CustomDefaultPreference_none ) ; else return value ; }
public void delete ( Long id , CoNaObiadDbHelper helper ) { helper . delete ( tableName , id , "_ID" ) ; }
public boolean isNeeded ( PostModel model ) { return model . embedModel != null ; }
private double mtoyard ( double num ) { return num * 1 . 0936 ; }
public ManifestFile fetchManifest ( String manifestURL ) throws FormSourceException { throw new UnsupportedOperationException ( ) ; }
public static DataBundle getRemovedNotification ( String key ) { return removedNotifications . get ( key ) ; }
public boolean equals ( @ NonNull Object other ) { return other instanceof Layer && identifier . equals ( ( ( Layer ) other ) . getIdentifier ( ) ) ; }
public Ship getShip ( ) { return s ; }
private void updateUI ( ) { userManager . getUser ( getUserCallback ) ; }
public String getTransactionAmount ( ) { return transactionAmount ; }
public boolean isAnyIngredientSaved ( SQLiteOpenHelper helper ) { return isAnyRecordSaved ( helper , tableName ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { startForeground ( NOTIFY_ID , createNotification ( ) ) ; return START_STICKY ; }
public Map < String , String > getToc ( ) { return null ; }
public void get ( Matrix matrix ) { matrix . set ( this . matrix ) ; }
public VH1Text ( final View itemView ) { super ( itemView ) ; text = ( TextView ) itemView . findViewById ( R . id . recycler_item_text ) ; }
public Object getChild ( int groupPosition , int childPosition ) { Phonebook [ ] phoneBook = playerInfo . phonebooks [ groupPosition ] . phonebook ; return phoneBook [ childPosition ] ; }
private IceUdpTransportInfo ( ) { super ( "transport" , Namespace . JINGLE_TRANSPORT_ICE_UDP ) ; }
public void onPlayerStateChanged ( boolean playWhenReady , int state ) { maybeReportPlayerState ( ) ; }
public WidgetUpdater . WidgetState requestWidgetState ( ) { return new WidgetUpdater . WidgetState ( getPlayable ( ) , getStatus ( ) , getCurrentPosition ( ) , getDuration ( ) , getCurrentPlaybackSpeed ( ) , isCasting ( ) ) ; }
private int loadOpacityDefaultPref ( ) { SharedPreferences prefs = getSharedPreferences ( PREFS_NAME , MODE_PRIVATE ) ; return prefs . getInt ( PREF_OPACITY_DEFAULT_PREFIX_KEY , 155 ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( DatasActivity . this , NewData . class ) ; intent . putExtra ( "dataID" , - 1 ) ; intent . putExtra ( "userID" , userID ) ; startActivityForResult ( intent , 1 ) ; }
public CommandsPreferences ( ) { preferenceHashMap = new HashMap <> ( ) ; for ( XMLPrefsManager . XMLPrefsSave save : Cmd . values ( ) ) { preferenceHashMap . put ( save . label ( ) , XMLPrefsManager . get ( save ) ) ; } }
public void afterTextChanged ( Editable s ) { JobActivity . this . hourlyRateChanged ( ) ; }
private Sort defaultOrder ( final Context context ) { return PrefsUtility . pref_behaviour_postsort ( context , PreferenceManager . getDefaultSharedPreferences ( context ) ) ; }
public void changeSprite ( ) { sprite = new Sprite ( pickSprite ( MathUtils . random ( 9 ) ) ) ; aspectRatio = sprite . getHeight ( ) /sprite . getWidth ( ) ; sprite . setSize ( cloudWidth , cloudWidth * aspectRatio ) ; }
public StationsInteractor ( StationsRepositoryImpl stationsRepository ) { this . stationsRepository = stationsRepository ; }
public void onClick ( View v ) { Intent i = new Intent ( mContext , SubredditView . class ) ; i . putExtra ( "subreddit" , submission . getSubredditName ( ) ) ; mContext . startActivity ( i ) ; }
public void setInterestRatePerPeriod ( int interestRatePerPeriod ) { this . interestRatePerPeriod = interestRatePerPeriod ; }
public void onConnectionSuspended ( int cause ) { onConnectionEvent . onConnectedFail ( ) ; }
public void onLoaderReset ( Loader < Cursor > cursorLoader ) { }
public void run ( ) { updateAccountsList ( ) ; updateAccountsBalance ( ) ; }
public void onDetach ( ) { super . onDetach ( ) ; getActivity ( ) . getApplicationContext ( ) . unregisterComponentCallbacks ( mComponentCallback ) ; }
public void testFabOnClick ( ) { onView ( withId ( R . id . app_fab ) ) . perform ( click ( ) ) ; onView ( withText ( "Add a New Appointment" ) ) . check ( matches ( isDisplayed ( ) ) ) ; }
public void openUserWall ( int accountId , User user ) { PlaceFactory . getOwnerWallPlace ( accountId , user ) . tryOpenWith ( requireActivity ( ) ) ; }
public void onNewPostButtonClicked ( ) { handleNewPostAction ( PagePostCreationSources . POST_FROM_NAV_BAR ) ; }
public List < IdentifierType > getAllowedDocumentTypes ( ) { return allowedDocumentTypes ; }
public void onCreate ( Bundle savedInstanceState ) { Log . i ( TAG , "onCreate" ) ; super . onCreate ( savedInstanceState ) ; setListAdapter ( new PoiListAdapter ( getActivity ( ) . getApplicationContext ( ) , new ArrayList < FourSquarePoi > ( ) ) ) ; }
public final int supportsMixedMimeTypeAdaptation ( ) throws ExoPlaybackException { return ADAPTIVE_NOT_SEAMLESS ; }
private boolean isCameraLocked ( ) { return mImplementation != null && mImplementation . isCameraLocked ( ) ; }
public void noSuggestions ( ) { for ( User u : users ) { u . getWriter ( ) . print ( "No Suggestions Entered" ) ; u . getWriter ( ) . flush ( ) ; } }
public void run ( ) { recyclerView . requestFocus ( ) ; mBuilder . layoutManager . scrollToPosition ( fSelectedIndex ) ; }
public static int getVideoOptimizeWidth ( ) { int resizeWidth = getInt ( DeletablePrefKey . VIDEO_OPTIMIZE_WIDTH , 0 ) ; return resizeWidth == 0 ? WordPressMediaUtils . OPTIMIZE_VIDEO_MAX_WIDTH : resizeWidth ; }
public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { FavouriteBeverageIntentService . startFetchingFavouriteBeverage ( context ) ; }
public void setCountry ( String name ) { countryEt . setText ( name ) ; countryEt . setSelection ( name . length ( ) ) ; }
private void initContactsPrefs ( ) { binding . useContactsPrefs . setChecked ( mPrefs . isContactBirthdaysEnabled ( ) ) ; binding . useContactsPrefs . setOnClickListener ( view -> changeContactsPrefs ( ) ) ; binding . useContactsPrefs . setDependentView ( binding . birthReminderPrefs ) ; }
public void onClick ( DialogInterface dialog , int which ) { AbstractBookListFragment2 . this . deleteBook ( book ) ; }
public void testResumingMaintainsValue ( ) { animator . setFrame ( 500 ) ; animator . resumeAnimation ( ) ; assertEquals ( 500f , animator . getFrame ( ) ) ; }
public Uri getUri ( ) { return dataSource == null ? null : dataSource . getUri ( ) ; }
public static ExamWordType getTypeByKey ( int key ) { for ( ExamWordType type : values ( ) ) { if ( type . key == key ) return type ; } return null ; }
public void onAnimationCancel ( Object animation ) { if ( mentionListAnimation != null && mentionListAnimation . equals ( animation ) ) { mentionListAnimation = null ; } }
public void checkClientTrusted ( X509Certificate [ ] certs , String arg1 ) throws CertificateException { Date today = new Date ( ) ; for ( X509Certificate certificate : certs ) { certificate . checkValidity ( today ) ; } }
public static void sync ( PreferenceManager preferenceManager , String key ) { Preference pref = preferenceManager . findPreference ( key ) ; if ( pref instanceof ListPreference ) { ListPreference listPref = ( ListPreference ) pref ; pref . setSummary ( listPref . getEntry ( ) ) ; } }
public void onStopNestedScroll ( CoordinatorLayout coordinatorLayout , BottomBar bb , View target ) { if ( ! mWasNestedFlung ) { snapIfNeeded ( coordinatorLayout , bb ) ; } mSkipNestedPreScroll = false ; mWasNestedFlung = false ; }
public void setListener ( EventManagerListener listener ) { this . listener = listener ; }
private void handleEsewaBtnClicked ( ) { if ( ! Util . checkInternetConnection ( mContext ) ) { noInternetConnectionDialog ( ) ; return ; } mPaymentType = PaymentType . ESEWA ; startEsewaPayment ( ) ; }
public void onCancel ( ) { cancelAsyncTasks ( ) ; }
public List < Result > getResults ( ) { return results ; }
public FileEmojiCompatConfig getConfig ( Context context ) { return new FileEmojiCompatConfig ( context , getFont ( context ) ) ; }
public void onFilterAdded ( MyFilter filter ) { Log . d ( "TAG" , "onFilterAdded : " + filter . getName ( ) ) ; }
public int getInt ( String key , int def ) { return mPreferences . getInt ( key , def ) ; }
public void startActivity ( Intent intent , @ Nullable Bundle options ) { Notes . updateLastInteraction ( ) ; super . startActivity ( intent , options ) ; }
public void removeWallet ( int id ) { realm . executeTransaction ( realm -> { WalletRealmObject wallet = getWalletById ( id ) ; wallet . deleteFromRealm ( ) ; } ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( Cam . this , OnBoarding . class ) ; startActivity ( intent ) ; finish ( ) ; }
private PSnake ( ) { id_ = 0 ; coords_ = java . util . Collections . emptyList ( ) ; lastDirection_ = 0 ; inputId_ = 0 ; inputDirection_ = 0 ; inputTimestamp_ = 0L ; }
public void testGetTxStatusFail ( ) throws ShapeShiftException , AddressFormatException , IOException { server . enqueue ( new MockResponse ( ) . setBody ( TX_STATUS_COMPLETE_JSON ) ) ; shapeShift . getTxStatus ( BTC . address ( "18ETaXCYhJ8sxurh41vpKC3E6Tu7oJ94q8" ) ) ; }
public void setAddress ( String address , int size ) { mData = new BlockiesData ( address , size ) ; init ( ) ; }
public void setReminderColor ( int color ) { putInt ( REMINDER_COLOR , color ) ; }
public void checkUnsentMessages ( ) { MessagesStorage . getInstance ( ) . getUnsentMessages ( 1000 ) ; }
public void onStickersSettingsClick ( ) { if ( parentFragment != null ) { parentFragment . presentFragment ( new StickersActivity ( StickersQuery . TYPE_IMAGE ) ) ; } }
private List < PopupKeyCandidate > getCandidatesForJA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "ʣ" ) ) ; return candidates ; }
public boolean onPrepareOptionsMenu ( final Menu menu ) { Api . updateLanguage ( getApplicationContext ( ) , G . locale ( ) ) ; if ( menu != null ) { menuSetApplyOrSave ( menu , Api . isEnabled ( MainActivity . this ) ) ; } return true ; }
public String tileDesc ( ) { return Game . getVar ( R . string . WaterOfAwareness_Info ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'PGNIG_BILL'" ; db . execSQL ( sql ) ; }
private void addPlaceSelectedButton ( ) { final FloatingActionButton placeSelectedButton = findViewById ( R . id . location_chosen_button ) ; placeSelectedButton . setOnClickListener ( view -> placeSelected ( ) ) ; }
public void setChecked ( boolean checked ) { checkBox . setChecked ( checked ) ; }
public void onDrawerClosed ( View drawerView ) { switch ( drawerView . getId ( ) ) { case R . id . navigation_drawer : openTargetPage ( ) ; break ; } }
public void onRetryButtonClicked ( View view ) { startDownload ( ) ; }
private void hideToolPanel ( ) { ViewUtils . slideOutUp ( mContext , binding . drawTools ) ; }
public EntityPickupSpeed ( Node rootNode , Vector3f spawnPos , Skin skin , AssetManager assetManager ) { super ( rootNode , spawnPos , assetManager ) ; geom . setMaterial ( skin . getSpeedPickupMaterial ( ) ) ; node . attachChild ( geom ) ; }
public void testNegation ( ) { Money result = money . negate ( ) ; assertThat ( result . toPlainString ( ) ) . startsWith ( " - " ) ; validateImmutability ( ) ; }
private final void closeOnSuccess ( String message ) { this . listener . onMergePointsDialogSuccess ( message ) ; this . dismiss ( ) ; }
public String [ ] getRemovedMembers ( ) { return mRemoved ; }
private void onNextStep ( ) { getSActivity ( ) . mStarNameAccount = mAccountInput . getText ( ) . toString ( ) . trim ( ) ; getSActivity ( ) . mStarNameDomain = "iov" ; getSActivity ( ) . onNextStep ( ) ; }
public Drawable getStaticThumb ( ) { return staticThumb ; }
public String desc ( ) { return Game . getVar ( R . string . Firebloom_Desc ) ; }
public void warn ( String message ) { log ( message ) ; }
public static int getColorIndex ( int id ) { if ( id >= 0 && id < 7 ) { return id ; } return Math . abs ( id % Theme . keys_avatar_background . length ) ; }
public static Observable < CnBetaApi . Result < List < Topic >>> topics ( ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . topics ( timestamp , CnBetaSignUtil . topicsSign ( timestamp ) ) ; }
public boolean onPreferenceClick ( Preference preference ) { final Intent intent = new Intent ( getActivity ( ) , LogSubmitActivity . class ) ; startActivity ( intent ) ; return true ; }
public static int getAreaWidth ( ) { return get ( AREA_WIDTH , Constants . Task . AREA_WIDTH_IN_METERS ) ; }
public TimeReceiver getReceiver ( ) { return new TimeReceiver ( ) ; }
public void setCreationDate ( DateTime creationDate ) { this . creationDate = creationDate ; }
public EventEntryLayout getEventEntryLayout ( ) { return EventEntryLayout . fromPreferenceValue ( sharedPreferences . getString ( PREF_EVENT_ENTRY_LAYOUT , "" ) ) ; }
public LiveData < List < SupplierProduct >> getSupplierProduct ( int expirationDays , List < ExpirationStatus > expirationStatus , long supplierId , String barCode ) { return consultSupplierProducts ( expirationDays , expirationStatus , supplierId , barCode ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { SettingsActivity . this . updateTarget ( ) ; }
public static String pressure ( double hPa ) { if ( Double . isNaN ( hPa ) ) return "" ; else return String . format ( Locale . US , "% . 2f hPa" , hPa ) ; }
public static final int sriToRate ( int sri ) { return mSampleRates [ sri & 0xf ] ; }
public boolean onLongClick ( View v ) { imageCount = AnimusPictures . deleteOnePicFromEntry ( v , holder , context , filename , imageNum ) ; return false ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { finish ( ) ; } return true ; }
public void doDownload ( ) { if ( mCancelled ) { return ; } try { performDownload ( mRequest ) ; } catch ( Throwable t ) { BugReportActivity . handleGlobalError ( mInitiator . context , t ) ; } }
public void temporarilySetSensors ( boolean enable ) { if ( enable ) enableTemporarilyDisabledSensors ( ) ; else temporarilyDisableSensors ( ) ; }
public static long initGroupChat ( Context context , String groupJid , String subject , String [ ] members , String draft ) { return MessagesProviderUtils . createGroupThread ( context , groupJid , subject , members , draft ) ; }
public void onPreviousPressed ( ) { startService ( AudioService . getAudioIntent ( this , AudioService . ACTION_REWIND ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; restaurantMap . onSaveInstanceState ( outState ) ; if ( restaurant != null ) { outState . putParcelable ( RESTAURANT_KEY , restaurant ) ; } restaurantFetcher . persistState ( outState ) ; }
public Object textureLarge ( ) { return Assets . BUFFS_LARGE ; }
public Object getDataFromCache ( String key ) { return memoryCache . get ( key ) ; }
public String humanReadableName ( Context context , boolean shorter ) { if ( username == null ) { return name ; } else { return String . format ( Locale . US , "%s ( %s ) " , name , username ) ; } }
private void toggleChecklist2 ( ) { boolean keepChecked = prefs . getBoolean ( PREF_KEEP_CHECKED , true ) ; boolean showChecks = prefs . getBoolean ( PREF_KEEP_CHECKMARKS , true ) ; toggleChecklist2 ( keepChecked , showChecks ) ; }
public void onAnimationStart ( View view ) { dispatchMoveStarting ( holder ) ; }
public SearchView ( Context context ) { super ( context ) ; }
public void onAnimationEnd ( Animator animation ) { updateGameDeck ( ) ; invalidatePreKitkat ( ) ; }
public void onBackPressed ( ) { if ( mDrawerLayout . isDrawerOpen ( START ) ) { mDrawerLayout . closeDrawer ( START ) ; } else { if ( ! mFragment . pressBack ( ) ) { super . onBackPressed ( ) ; } } }
private void addTreeSection ( TreeSection section ) { section . setNotifier ( this ) ; section . addDecorator ( treeDecorator ) ; sections . add ( section ) ; }
private void setToolbarTitle ( long id ) { Cursor cursor = ShaderEditorApp . dataSource . getShader ( id ) ; if ( DataSource . closeIfEmpty ( cursor ) ) { return ; } setQualitySpinner ( cursor ) ; setToolbarTitle ( cursor ) ; cursor . close ( ) ; }
public void onCancelled ( List < Integer > list ) { super . onCancelled ( ) ; mDataLoader = null ; mTrackRoomDatabase = null ; }
public void setSeries ( CharacterComicDataContainer series ) { mSeries = series ; }
public void scrollToYear ( int year , boolean smoothScroll ) { if ( mSelectLayout . getVisibility ( ) != VISIBLE ) { return ; } mSelectLayout . scrollToYear ( year , smoothScroll ) ; }
public MyAltimeter ( LocationService location ) { this . location = location ; }
public void bindRequestToGuid ( int requestToken , int guid ) { native_bindRequestToGuid ( requestToken , guid ) ; }
public int getCurrentTime ( ) { return native_getCurrentTime ( ) ; }
public void confirm ( ) { if ( hasListener ( ) ) getListener ( ) . onPreference ( getPreference ( ) ) ; if ( isShowing ( ) ) dismiss ( ) ; }
public ArrayList < String > getMissingValues ( ) { return mMissingValues ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mActionBar = ( ( ActionBarActivity ) getActivity ( ) ) . getSupportActionBar ( ) ; setHasOptionsMenu ( true ) ; }
public static X509Certificate load ( InputStream certData ) throws CertificateException , NoSuchProviderException { CertificateFactory certFactory = CertificateFactory . getInstance ( "X . 509" , PGP . PROVIDER ) ; return ( X509Certificate ) certFactory . generateCertificate ( certData ) ; }
public static synchronized Pages_db_helper getInstance ( Context context ) { if ( instance == null ) instance = new Pages_db_helper ( context ) ; return instance ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mDistrictTeam ) ; verify ( mEventBus ) . post ( any ( ActionBarTitleEvent . class ) ) ; }
public String encodeToString ( byte [ ] data ) { return Base64 . encodeToString ( data , Base64 . DEFAULT ) ; }
public int getMyPosition ( @ NonNull BaseLayer l ) { return mCardLayers . indexOf ( l ) ; }
public void setBuild ( String build ) { if ( aboutBuildText == null ) aboutBuildText . setText ( build ) ; }
public LatLng latLng ( ) { if ( lazyLatLng == null ) { lazyLatLng = new LatLng ( latitude , longitude ) ; } return lazyLatLng ; }
public void onBell ( TerminalSession session ) { }
public void onPageSelected ( int position ) { }
public void onPageInflated ( ) { loadCustomState ( ) ; this . InfoTab . updateListView ( ) ; }
public void characters ( char ch [ ] , int start , int length ) { }
public com . google . protobuf . Any . Builder addNonCriticalExtensionOptionsBuilder ( ) { return getNonCriticalExtensionOptionsFieldBuilder ( ) . addBuilder ( com . google . protobuf . Any . getDefaultInstance ( ) ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_for_swipe_minimal , parent , false ) ; return new MyViewHolder ( v ) ; }
public AboutBuilder setAppIcon ( int icon ) { return setAppIcon ( IconUtil . getBitmap ( context , icon ) ) ; }
public void setPublished ( String published ) { this . published = published ; }
public PorItem ( ) { }
public void onClick ( View v ) { intent . putExtra ( BaseWearGridActivity . MODE , BaseWearGridActivity . SETTINGS ) ; mContext . startActivity ( intent ) ; }
public void submit ( ) { this . field . setValues ( getValues ( ) ) ; }
public void setText ( int resId ) { setText ( mContext . getText ( resId ) ) ; }
public String getUrl ( boolean cryptedValue ) { return ( cryptedValue ) ? url : decryptedUrl ; }
public void testMultiplicationWithDifferentCurrencies ( ) { Money addend = new Money ( "4" , "USD" ) ; money . multiply ( addend ) ; }
public boolean shouldOverrideUrlLoading ( WebView view , String url ) { openExternalLink ( view . getContext ( ) , url ) ; return true ; }
public SelectUnitViewHolder providebodyMassHolder ( UnitsViewHolder unitsViewHolder ) { return new SelectUnitViewHolder ( unitsViewHolder . getBodyMass ( ) ) ; }
public void onStart ( ) { super . onStart ( ) ; mDispatcher . register ( this ) ; }
public ClusterQuery where ( String . . . conditions ) { mConditions = conditions ; return this ; }
public EditSavedFormPage clickEditSavedForm ( ) { onView ( withId ( R . id . review_data ) ) . perform ( click ( ) ) ; return new EditSavedFormPage ( rule ) . assertOnPage ( ) ; }
public static String scaleNumber ( BigDecimal number , int n ) { return number . setScale ( n , BigDecimal . ROUND_HALF_UP ) . toPlainString ( ) ; }
public void setAllowedNotificationsDutingAnimation ( int notifications [ ] ) { allowedNotifications = notifications ; }
public Preview ( Launcher launcher , Camera . PreviewCallback callback ) { super ( launcher ) ; this . callback = callback ; mHolder = getHolder ( ) ; mHolder . addCallback ( this ) ; mHolder . setType ( SurfaceHolder . SURFACE_TYPE_PUSH_BUFFERS ) ; }
public Alarm ( String eventTitle , long eventTime ) { mEventTitle = eventTitle ; mEventTime = eventTime ; log ( ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; updateRows ( ) ; loadSessions ( false ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . newSessionReceived ) ; return true ; }
public File getKnownHostsFile ( ) { return new File ( getSshDir ( ) , KNOWN_HOSTS_FILE ) ; }
public void setRating ( String rating ) { this . rating = rating ; }
public boolean testIfMainStackTouched ( float X , float Y ) { return ( dealFromStack ( ) . isEmpty ( ) && dealFromStack ( ) . isOnLocation ( X , Y ) ) || getMainStack ( ) . isOnLocation ( X , Y ) ; }
public void onQueryInventoryFinished ( IabResult result , Inventory inv ) { if ( result . isSuccess ( ) ) sp . edit ( ) . putBoolean ( PREMIUM , inv . hasPurchase ( PREMIUM ) ) . apply ( ) ; }
public void sortedValues_Always_ReturnSortedValues ( ) { addSampleValues ( ) ; Collection < Integer > result = sut . sortedValues ( ) ; assertThat ( result , contains ( 10 , 20 , 30 , 40 ) ) ; }
public static void browsePostOrPage ( Context context , SiteModel site , PostModel post ) { browsePostOrPageEx ( context , site , post , RemotePreviewType . NOT_A_REMOTE_PREVIEW ) ; }
public void didSelectWallpaper ( File file , Bitmap bitmap , boolean gallery ) { presentFragment ( new WallpaperActivity ( new FileWallpaper ( - 1 , file ) , bitmap ) , gallery ) ; }
private void launchPictureLibrary ( ) { WPMediaUtils . launchPictureLibrary ( this , ! mShowGutenbergEditor ) ; }
private void givenAppVersion ( String appVersion ) { AnalyticsManager . sAppVersion = appVersion ; }
public void authenticateTest__failure ( ) throws Exception { BanqClient bc = new BanqClient ( ) ; bc . authenticate ( "99999999" , "88888888" ) ; }
public void setAboutOrder ( int order ) { this . aboutOrder = order ; }
public void onButtonPressed ( Uri uri ) { if ( mListener != null ) { mListener . onOverviewFragmentInteraction ( uri ) ; } }
private void setContentWarningButtonText ( boolean expanded ) { if ( expanded ) { contentWarningButton . setText ( R . string . status_content_warning_show_less ) ; } else { contentWarningButton . setText ( R . string . status_content_warning_show_more ) ; } }
public final Bundle save ( ) throws IllegalStateException { if ( ! isAdded ( ) ) throw new IllegalStateException ( ) ; if ( stateToRestore != null ) return stateToRestore ; Bundle bundle = new Bundle ( ) ; onSaveInstanceState ( bundle ) ; return bundle ; }
public boolean onOptionsItemSelected ( MenuItem item ) { pressBack ( ) ; return true ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_contacts_found . TLdeserialize ( stream , constructor , exception ) ; }
public void testIsWPCOMURL2 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( wpcomAddress2 ) ) ) ; }
private void initializeCameraPosition ( ) { mMap . moveCamera ( CameraUpdateFactory . newLatLngZoom ( OTHER_POSITION , OTHER_ZOOM ) ) ; }
public void onFailure ( @ NonNull Call < List < Recipe >> call , Throwable t ) { t . printStackTrace ( ) ; }
public void onDateRangeSet ( Date startDate , Date endDate ) { mReportStartTime = startDate . getTime ( ) ; mReportEndTime = endDate . getTime ( ) ; updateDateRangeOnFragment ( ) ; }
public static void main ( String args [ ] ) { PowerOff powerOff = new PowerOff ( ) ; powerOff . shutdown ( ) ; }
public Integer getScrollY ( ) { return scrollY ; }
public void testGetLocalYear ( ) { assertThat ( planetaryCalendar . getLocalYear ( days ) , is ( localYear ) ) ; }
public void testNull ( ) throws Exception { Grade grade = new Grade ( null ) ; assertEquals ( "5a" , grade . toString ( ) ) ; }
public void clearTape ( ) { newsTapeRecyclerViewAdapter . clear ( ) ; endlessRecyclerViewScrollListener . resetState ( ) ; }
public BackpackTfPriceHistoryInteractor ( BptfApplication application , Item item , Callback callback ) { application . getInteractorComponent ( ) . inject ( this ) ; mCallback = callback ; mItem = item ; }
public SectionsPagerAdapter ( FragmentManager fm , Application app ) { super ( fm ) ; myCoinsFragment = MyCoinsFragment . newInstance ( "My" , app ) ; allCoinsFragment = AllCoinsFragment . newInstance ( "All" , app , myCoinsFragment ) ; }
public Highlighter getHighlighter ( ) { return mHighlighter ; }
public void setBreakfast ( ArrayList < Food > breakfast ) { this . breakfast = breakfast ; }
public FontSizeListPreference ( final Context context ) { super ( context ) ; }
public void seek ( final int position ) throws IOException { mFile . seek ( position ) ; mPosition = position ; }
public FingerprintDialog cryptoObject ( FingerprintManager . CryptoObject cryptoObject ) { this . fingerprintView . cryptoObject ( cryptoObject ) ; return this ; }
public void updateDcSettings ( ) { native_updateDcSettings ( ) ; }
public boolean hasTokenId ( ) { return ( ( bitField0_ & 0x00000800 ) == 0x00000800 ) ; }
private void showGroup ( GroupItem item ) { if ( item == null ) return ; mBinding . groupButton . setText ( item . getTitle ( ) ) ; groupId = item . getUuId ( ) ; }
public SidebarRightFragment getRightSidebarFragment ( ) { return mRightSidebar ; }
public boolean onDown ( MotionEvent e ) { view . setPressed ( true ) ; return super . onDown ( e ) ; }
public void onValueChange ( ValueChangeEvent < Date > dateValueChangeEvent ) { ChangeEvent event = new ChangeEvent ( ) { @ Override public Object getSource ( ) { return timePicker2 ; } } ; handler . onChange ( event ) ; }
public void openActivityDetailsActivity ( ) { ActivityTimelineActivity . launch ( getActivity ( ) ) ; }
public RecipientDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public HDKeyChain ( DeterministicKey rootkey ) { simpleKeyChain = new SimpleKeyChain ( ) ; initializeHierarchyUnencrypted ( rootkey ) ; }
public Size pictureSize ( ) { return mPicture ; }
public String getStatus ( ) { return StringUtils . notNullStr ( status ) ; }
public Recipient ( @ NonNull Context context , @ NonNull DcChat dcChat ) { this ( context , dcChat , null ) ; }
public WeatherWidgetProvider2x3 ( ) { super ( 3 ) ; }
public String getFieldFor ( API api ) { return apiIdToField . get ( api . id ( ) ) ; }
public boolean isSeekable ( ) { return false ; }
public void setVisibleXRangeMinimum ( float minXRange ) { float xScale = mDeltaX / ( minXRange ) ; mViewPortHandler . setMaximumScaleX ( xScale ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . tv_label_misc : radixPickerDialog . show ( ) ; break ; default : break ; } }
private boolean isCustomDomainRequired ( ) { return mSite . getUrl ( ) . contains ( " . wordpress . com" ) && BuildConfig . DOMAIN_REGISTRATION_ENABLED ; }
public void decline ( ) throws Exception { hangupWithStatusCode ( pjsip_status_code . PJSIP_SC_BUSY_HERE ) ; VialerStatistics . userDeclinedIncomingCall ( this ) ; }
public boolean onClick ( RecyclerView parent , View view , int position , long id ) { mCallback . onPLaylistItemClicked ( position ) ; return true ; }
public Genre ( final int id , final String name , final int songCount ) { this . id = id ; this . name = name ; this . songCount = songCount ; }
private void endChangeAnimationIfNecessary ( ChangeInfo changeInfo ) { if ( changeInfo . oldHolder != null ) { endChangeAnimationIfNecessary ( changeInfo , changeInfo . oldHolder ) ; } if ( changeInfo . newHolder != null ) { endChangeAnimationIfNecessary ( changeInfo , changeInfo . newHolder ) ; } }
public void setData_callsValueChangeListener ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setBinaryData ( answer . getDisplayText ( ) ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
private void setFail ( ) { TextView v = ( TextView ) findViewById ( R . id . statusOutput ) ; v . setText ( "FAIL" ) ; }
public void onStopTrackingTouch ( SeekBar sb ) { limitedJump [ whichThrottle ] = false ; setAutoIncrementDecrement ( whichThrottle , AUTO_INCREMENT_DECREMENT_OFF ) ; kidsTimerActions ( KIDS_TIMER_STARTED , 0 ) ; }
public static final boolean isShowCompetitionsNumber ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; String key = context . getString ( R . string . pref_competitons_num_key ) ; return sharedPreferences . getBoolean ( key , false ) ; }
public void restoreStepData ( Object data ) { }
public static AdditionalInformationEntity newInstance ( ) { return new AdditionalInformationEntity ( ) ; }
public AddressesListAdapter ( final Context context , @ Nonnull final WalletPocketHD walletPocket ) { this . context = context ; inflater = LayoutInflater . from ( context ) ; res = context . getResources ( ) ; pocket = walletPocket ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; dateDecoration . invalidateLayouts ( ) ; }
public void run ( ) { for ( ManagerEvent e : onEvents ) { e . onCreateStation ( station ) ; } }
public void onDisconnected ( String endpointId ) { Log . d ( TAG , "We've been disconnected from this endpoint : " + endpointId ) ; connectedEndpoints . remove ( endpointId ) ; }
private void setWatchface ( int index ) { final FileData fileData = fileExplorerAdapter . getItem ( index ) ; if ( fileData != null ) { WatchfaceUtil . setWfzWatchFace ( this , fileData . getName ( ) ) ; } }
public static TBAdditionalInformationDatabase newInstance ( Context context ) { return new TBAdditionalInformationDatabase ( context ) ; }
public boolean hasResponseClementineInfo ( ) { return ( ( bitField0_ & 0x00010000 ) == 0x00010000 ) ; }
public void bind ( String text ) { mBindedText = text ; ( ( TextView ) itemView ) . setText ( text ) ; }
public void onCalendarInterceptClick ( Calendar calendar , boolean isClick ) { Toast . makeText ( this , calendar . toString ( ) + ( isClick ? "拦截不可点击" : "拦截滚动到无效日期" ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public void clear ( ) { if ( mSites . size ( ) > 0 ) { mSites . clear ( ) ; notifyDataSetChanged ( ) ; } }
public void onServicesDiscovered ( ) { sendHello ( ) ; Util . sleep ( 200 ) ; requestRangefinderService ( ) ; }
private Bitmap generateColoredLastPositionIcon ( int colorFilter ) { return generateColoredBitmap ( colorFilter , R . drawable . ic_location_on_white_48dp ) ; }
public void setNumEnemies ( int numEnemies ) { this . numEnemies = numEnemies ; }
public void displayGallery ( int accountId , int albumId , int ownerId , Integer focusToId ) { PlaceFactory . getPhotoAlbumGalleryPlace ( accountId , albumId , ownerId , focusToId ) . tryOpenWith ( getActivity ( ) ) ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent keyEvent ) { if ( actionId == EditorInfo . IME_ACTION_DONE ) { add ( ) ; return true ; } return false ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `order` INTEGER" ) ; }
public boolean isTemplate ( ) { return mIsTemplate == 1 ; }
private void createEntries ( ) { createCalendarEntries ( ) ; createTaskEntries ( ) ; }
public void onClick ( View v ) { UploadUtils . publishPost ( activity , post , site , dispatcher ) ; }
public void testIsWPCOMURL6 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( wpcomAddress6 ) ) ) ; }
public static void setUpAccount ( ) throws Exception { createFakeAccount ( TEST_USERNAME , TEST_USERID ) ; Kontalk . setServicesEnabled ( InstrumentationRegistry . getTargetContext ( ) , true ) ; }
public synchronized void addEventListener ( WallpaperSwitcherListener listener ) { mWallpaperSwitcherListeners . add ( listener ) ; }
public long getExpandablePosition ( int flatPosition ) { if ( mAdapter == null ) { return ExpandableAdapterHelper . NO_EXPANDABLE_POSITION ; } return mAdapter . getExpandablePosition ( flatPosition ) ; }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( "create table " + TABEL + " ( " + ID + " int primary key , " + KREDIT + " text , " + NAVN + " text ) " ) ; }
public void onSuccess ( ) { view . delete ( post ) ; }
public void onClick ( View v ) { startNavigate ( ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . emojiDidLoaded ) { if ( emojiTextView != null ) { emojiTextView . invalidate ( ) ; } } }
public static void setDebugFps ( boolean debug ) { sDebugFps = debug ; }
public boolean canDownloadMedia ( MessageObject messageObject ) { return canDownloadMedia ( messageObject . messageOwner ) ; }
public SelectUnitViewHolder provideMassHolder ( UnitsViewHolder unitsViewHolder ) { return new SelectUnitViewHolder ( unitsViewHolder . getMass ( ) ) ; }
public int getItemCount ( ) { return recentGifs . size ( ) ; }
public void clearAnswer_callsValueChangeListener ( ) { RangeIntegerWidget widget = createWidget ( promptWithRangeQuestionAndAnswer ( rangeQuestion , null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . clearAnswer ( ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public int getCount ( ) { if ( states != null ) return states . size ( ) ; else return 0 ; }
public ComboAdapter ( Fragment context , List < Combo > list ) { super ( context . getActivity ( ) , R . layout . list_item_combo , list ) ; this . context = context . getActivity ( ) ; this . list = list ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `receipt_request` INTEGER" ) ; }
public PlaceAndPlateDto cursorToModel ( Cursor cursor ) { return ( new DatabaseViewPlaceAndPlateFactory ( ) ) . createFromCursor ( cursor ) ; }
public void run ( ) { tracer . warn ( "Absolute timeout reached , giving up on this point" ) ; stopManagerAndResetAlarm ( ) ; }
public Fragment createFragment ( int position ) { if ( position == 0 ) { return new Onboarding1Fragment ( ) ; } else { return new Onboarding1Fragment ( ) ; } }
public void privateMsgInMuc ( Conversation conversation , String nick ) { switchToConversation ( conversation , null , nick , true , false ) ; }
public Ingredient ( String name , double baseDensity ) { this . name = name ; this . density = Amount . valueOf ( baseDensity , Kitchen . G_PER_CUP ) ; }
public Builder stepErrorMessageTextSizeInPx ( int stepErrorMessageTextSizeInPx ) { style . stepErrorMessageTextSizeInPx = stepErrorMessageTextSizeInPx ; return this ; }
private int getStartOfSequence ( DataInputStream in , byte [ ] sequence ) throws IOException { int end = getEndOfSeqeunce ( in , sequence ) ; return ( end < 0 ) ? ( - 1 ) : ( end - sequence . length ) ; }
public void run ( ) { sp . edit ( ) . putBoolean ( "THEMECHANGE" , true ) . apply ( ) ; parent . recreate ( ) ; }
public void onProgressUpdate ( Integer . . . progress ) { FileSenderListner . getInstance ( ) . setRowsInFile ( progress [ 0 ] ) ; }
public void v ( Throwable t , String tag , String message , Object . . . args ) { HyperLog . v ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . logout : onLogoutSelection ( ) ; break ; } return super . onOptionsItemSelected ( item ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; unregisterReceiver ( broadcastReceiver ) ; }
public void onBindGroupViewHolder ( MyGroupViewHolder holder , int groupPosition , int viewType ) { MyGroupItem group = mItems . get ( groupPosition ) ; holder . textView . setText ( group . text ) ; }
public TableModel ( int numColumns , int numRows ) { this ( numColumns , numRows , TableOrientation . ROW_MAJOR ) ; }
public void onData ( NetworkDevice origin , SensorData sensorData , float userSensitivity ) { filter ( sensorData . data ) ; mDataSink . onData ( origin , sensorData , userSensitivity ) ; }
public int getSpamIconColor ( ) { return 0xFFff6e00 ; }
private void thenShouldDelegateDisconnect ( ) { new Verifications ( ) { { mLocationRetriever . disconnect ( ) ; } } ; }
public boolean hasCurrentTag ( ) { return mCurrentTag != null ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . log , menu ) ; return true ; }
public StandardResponseException ( Response < ? > response ) { mResponse = response ; }
public void testECIEnglishHalfWidthKatakana ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\uff80' } , new float [ ] { 20f , 1f , 10f } , 80463 , 110914 ) ; }
public void run ( ) { if ( getActivity ( ) != null ) { getActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { updateTraffic ( ) ; } } ) ; } }
public Tag ( String name , int color ) { this . name = name ; this . color = color ; }
public void loggedInViaPassword ( ArrayList < Integer > oldSitesIds ) { loggedInAndFinish ( oldSitesIds ) ; }
private void givenSecondObserver ( ) { mSecondMockObserver = mock ( AnalyticsObserver . class ) ; uut . addObserver ( mSecondMockObserver ) ; }
public void setLinkRel ( String linkRel ) { this . linkRel = linkRel ; }
public void notifyDataSetChanged ( ) { items = populateItems ( tracks ) ; super . notifyDataSetChanged ( ) ; }
public static synchronized FluentQuery limit ( int value ) { FluentQuery cQuery = new FluentQuery ( ) ; cQuery . mLimit = String . valueOf ( value ) ; return cQuery ; }
public void run ( ) { w . setRecentColor ( w . getStringId ( "info_tapad_info_check_update" ) , R . color . colorAccent , a ) ; intent . intentLink ( a , w . getStringFromId ( "info_tapad_info_check_update_link" , a ) , 400 ) ; }
public float getSwipeThreshold ( RecyclerView . ViewHolder viewHolder ) { return 0 . 25f ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `warning` TEXT" ) ; }
private void failedFeedback ( ) { enableProgressBar ( false ) ; DialogHelper . displayAlert ( AccountActivity . this , getString ( R . string . onboarding_account_configure_failed_title ) , getString ( R . string . onboarding_account_configure_invalid_phone_number ) ) ; }
public void onResume ( ) { super . onResume ( ) ; EventBus . getDefault ( ) . register ( this ) ; getPreferences ( ) ; setupConversionSummary ( settings ) ; }
public CodecDocument openDocument ( final String fileName , final String password ) { setExternalFonts ( ) ; return new MuPdfDocument ( this , MuPdfDocument . FORMAT_CBZ , fileName , password ) ; }
public void unmuteConversation ( final Conversation conversation ) { conversation . setMutedTill ( 0 ) ; this . activity . xmppConnectionService . updateConversation ( conversation ) ; this . activity . onConversationsListItemUpdated ( ) ; refresh ( ) ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public void onResponse ( ProgramInfoDto response ) { mSelectedView . setRecTimer ( response . getTimerId ( ) ) ; }
public Cursor runQuery ( CharSequence constraint ) { return mDbHelper . getAllRows ( constraint . toString ( ) ) ; }
public void setTextAndValue ( String text , String value , boolean divider ) { textView . setText ( text ) ; valueTextView . setText ( value ) ; needDivider = divider ; setWillNotDraw ( ! divider ) ; }
private double cmtomi ( double num ) { return num * 0 . 00000621 ; }
public void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; if ( requestCode == 123 && resultCode == RESULT_OK ) { listAdapter . getCartStats ( true , 0 , true ) ; } }
public void run ( ) { ClientModel . getClientModel ( ) . updatePlayCount ( GallantSplashActivity . this ) ; showMainMenu ( ) ; }
public boolean isListeningForAyahSelection ( EventType eventType ) { return eventType == EventType . LONG_PRESS || eventType == EventType . SINGLE_TAP && mIsInAyahMode ; }
public String getCurrentContentTitle ( Player player ) { return "Title xd" ; }
public static void ping ( Context context ) { Log . d ( TAG , "ping message center connection" ) ; Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_PING ) ; context . startService ( i ) ; }
public void onClick ( View v ) { toggleTutorial ( ) ; }
private final TriggerableThread writeThread = new TriggerableThread ( new Runnable ( ) { public void run ( ) { doWrite ( ) ; } } , 1500 ) ;
public BadgeStyle withPaddingTopBottomRes ( int paddingTopBottom ) { this . mPaddingTopBottom = DimenHolder . fromResource ( paddingTopBottom ) ; return this ; }
public ContactRowsAdapter ( @ AppContext Context context ) { mContactRowList = new ArrayList <> ( ) ; mContext = context ; }
private boolean isBluetoothEnabled ( ) { return bluetooth . isEnabled ( ) ; }
public RecyclerViewHeader ( Context context , boolean sticky , @ NonNull SectionCallback sectionCallback ) { this . sticky = sticky ; this . sectionCallback = sectionCallback ; topPadding = dpToPx ( context , 26 ) ; }
public void close ( ) { getFragmentManager ( ) . popBackStackImmediate ( ) ; }
public void setTitle ( final CharSequence title ) { this . title . setText ( title ) ; }
public Single < List < Contributor >> getContributors ( ) { return githubService . getContributors ( "DroidKaigi" , "conference - app - 2017" ) ; }
public void run ( ) { progressButtonView . hideLoading ( ) ; Toast . makeText ( MainActivity . this , R . string . hello_response , Toast . LENGTH_SHORT ) . show ( ) ; }
public Date getOriginalReleaseDate ( ) { return originalReleaseDate ; }
public void run ( ) { putMessagesInternal ( messages , withTransaction , doNotUpdateDialogDate , downloadMask ) ; }
public SipCall ( SipService sipService , SipAccount sipAccount , int callId ) { super ( sipAccount , callId ) ; mSipService = sipService ; mRemoteLogger = mSipService . getRemoteLogger ( ) ; mSipBroadcaster = mSipService . getSipBroadcaster ( ) ; }
private void thenDelegateShouldSetContentView ( ) { new Verifications ( ) { { mAppCompatDelegate . setContentView ( R . layout . weather ) ; } } ; }
public int getOuterShapeColor ( ) { return outerShapeColor ; }
public ArrayList < Song > loadInBackground ( ) { return SongLoader . getAllSongs ( getContext ( ) ) ; }
public void onBindViewHolder ( MyViewHolder holder , int position ) { switch ( holder . getItemViewType ( ) ) { case ITEM_VIEW_TYPE_SECTION_HEADER : onBindSectionHeaderViewHolder ( holder , position ) ; break ; case ITEM_VIEW_TYPE_SECTION_ITEM : onBindSectionItemViewHolder ( holder , position ) ; break ; } }
public void onReceiveResult ( int resultCode , Bundle resultData ) { if ( resultCode == CREATE_ARTICLE_DONE ) new RequestDatabase ( context ) . execute ( ) ; }
public Builder clearVersion ( ) { bitField0_ = ( bitField0_ & ~0x00000002 ) ; version_ = 0 ; onChanged ( ) ; return this ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfExperience_Info ) ; }
public LinkedList < Float > getMaxRawData ( ) { return acc_max_raw_data ; }
public void update ( ) { load ( ) ; Log . d ( "RECYCLER" , "changed start" ) ; notifyDataSetChanged ( ) ; Log . d ( "RECYCLER" , "changed stop" ) ; }
public void onCreate ( ) { super . onCreate ( ) ; LitePalApplication . initialize ( this ) ; }
public void updateHeatsink ( float x , float y , float cpx , float cpy ) { cpy = cpy - y ; cpx = cpx - x ; dy = cpy/200 ; dx = cpx/200 ; }
public void onConnectivityLost ( ) { final Thread t = new Thread ( ) { @ Override public void run ( ) { disconnectAll ( false ) ; } } ; t . setName ( "Disconnector" ) ; t . start ( ) ; }
public void onFragmentDestroy ( ) { NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; }
public ChildZoneBuilder setZoneNumberSince ( Date zoneNumberSince ) { mZoneNumberSince = zoneNumberSince ; return this ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . layout . settings ) ; }
private static boolean hasAndroidTVSettings ( Context context ) { return getInstalledPackage ( context , "com . android . tv . settings" ) != null && Build . VERSION . SDK_INT >= Build . VERSION_CODES . P ; }
public SimpleDividerItemDecoration ( Context context ) { mDivider = context . getResources ( ) . getDrawable ( R . drawable . line_divider ) ; }
public String match ( Object audio ) throws IOException { String response = requestMatch ( audio ) ; return response ; }
public MediatorLiveData < List < ContactEntity >> getContacts ( ) { return mObservableContacts ; }
public void onClick ( View v ) { mShapeType = Constant . ShapeType . Circle ; }
public void onItalicClicked ( ) { textStyle = TextStyle . REGULAR ; setSelectedTextStyleBackground ( imgItalic ) ; }
public void onItemClick ( AdapterView < ? > parent , View view , int index , long id ) { setTextViewContent ( lstFile [ index ] . toString ( ) ) ; }
public void setCurrency ( String currency ) { this . currency = currency ; }
public Filter getFilter ( ) { if ( mFilter == null ) mFilter = new GlossFilter < GEntry > ( entries ) ; return mFilter ; }
public void onPushSucceeded ( ) { pushNodeAndEnforcePublishOptions ( account , node , element , options , false ) ; }
public void setStatus ( int status ) { status_ = status ; }
public static ListAdapter createProjectAdapter ( Context context , List < Project > projects ) { return new MyEntityAdapter < Project > ( context , android . R . layout . simple_spinner_dropdown_item , android . R . id . text1 , projects ) ; }
public Boolean visit ( NotFilter < TARGET > notFilter ) { return ! notFilter . accept ( this ) ; }
public com . google . protobuf . Any getContent ( ) { if ( contentBuilder_ == null ) { return content_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : content_ ; } else { return contentBuilder_ . getMessage ( ) ; } }
public GeneralSettingsPage openShowGuidanceForQuestions ( ) { scrollToRecyclerViewItemAndClickText ( getTranslatedString ( R . string . guidance_hint_title ) ) ; return this ; }
private int _nextLapseIvl ( Card card , JSONObject conf ) { return Math . max ( conf . getInt ( "minInt" ) , ( int ) ( card . getIvl ( ) * conf . getDouble ( "mult" ) ) ) ; }
public void setLocalAccounts ( @ NonNull List < LocalAccount > localAccounts ) { this . localAccounts . clear ( ) ; this . localAccounts . addAll ( localAccounts ) ; notifyDataSetChanged ( ) ; }
public FormEntryPage clickFillBlankFormButton ( String formName ) { clickOnId ( R . id . new_instance ) ; return new FormEntryPage ( formName ) . assertOnPage ( ) ; }
private ViewGroupIterable ( final ViewGroup parent ) { this . parent = parent ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( ArrayOfService ) getResult ( ArrayOfService . class , __result , "GetListeDepartementResult" , __envelope ) ; }
public void setGenero ( int genero ) { this . genero = genero ; }
public static void main ( String [ ] args ) { SoundHandler . get ( ) . loadAudios ( null ) ; }
public CheckableRelativeLayout ( Context context ) { super ( context ) ; }
public QuranTranslationPageLayout ( Context context ) { super ( context ) ; }
public DcMotor getMotor ( String id ) { return motors . get ( id ) ; }
private void handleScreenOffChange ( Intent intent ) { if ( callState == CallState . STATE_ANSWERING || callState == CallState . STATE_LOCAL_RINGING ) { Log . w ( TAG , "Silencing incoming ringer . . . " ) ; audioManager . silenceIncomingRinger ( ) ; } }
public void onCancelled ( DatabaseError databaseError ) { EntryDBSource . setException ( databaseError . toException ( ) ) ; Toast . makeText ( getApplicationContext ( ) , "Network Issues ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public UnderlineTextView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public int execute ( ) throws LuaException { L . pushBoolean ( Window . this . parent . isStatusBarHidden ( ) ) ; return 1 ; }
public com . google . protobuf . AnyOrBuilder getNewPublicKeyOrBuilder ( ) { if ( newPublicKeyBuilder_ != null ) { return newPublicKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return newPublicKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : newPublicKey_ ; } }
public boolean onActionItemClicked ( ActionMode mode , MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_delete : mode . finish ( ) ; return true ; default : return false ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences_notification ) ; }
public SmsActuator ( String phoneNumber , String text ) { this . phoneNumber = phoneNumber ; this . text = text ; }
public void setPhotoTagTextColor ( @ Nullable final String photoTagTextColor ) { this . photoTagTextColor = photoTagTextColor ; }
public Board processNetworkResponse ( String response ) { try { BoardParser parser = new BoardParser ( ) ; return parser . parse ( response ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
public void onFail ( int errorCode , String msg ) { Log . e ( "SWELL" , String . format ( "Connect failed ( %d ) : %s" , errorCode , msg ) ) ; }
public void describeTo ( Description description ) { description . appendText ( String . format ( "have menu id : %s" , resIdToString ( menuItemId ) ) ) ; }
public Movie setHdPosterUrl ( String hdPosterUrl ) { mHdPosterUrl = hdPosterUrl ; return this ; }
public GameOverScreen ( RectballGame game ) { super ( game ) ; }
public Completable fireAdd ( int accountId , User user ) { return Completable . fromAction ( ( ) -> addPublisher . onNext ( Pair . create ( accountId , user ) ) ) ; }
private void selectTags ( ) { editEventHelper . selectTags ( getSupportFragmentManager ( ) ) ; }
public void run ( AccountManagerFuture < Bundle > future ) { logger . d ( "Add done" ) ; }
public void testContactList ( ) { assertEquals ( contactsList . getChildCount ( ) , 2 ) ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createThreats ( data ) ; }
public float getAccuracy ( ) { return UNIT_MELEE_ACCURACY ; }
public FormMetadataPage clickFormMetadata ( ) { clickOnString ( R . string . form_metadata ) ; return new FormMetadataPage ( rule ) ; }
public void onListenerConnected ( ) { super . onListenerConnected ( ) ; packageManager = getPackageManager ( ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitOrComparison ( this ) ; else return visitor . visitChildren ( this ) ; }
private BroadcastReceiver settingsReceivedReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { U . restartApp ( ImportSettingsActivity . this , true ) ; } } ;
public void onClick ( View v ) { adapterInterface . onItemClick ( v , getAdapterPosition ( ) ) ; }
public boolean onTouch ( View v , MotionEvent event ) { if ( gestureDetector != null ) gestureDetector . onTouchEvent ( event ) ; return false ; }
public void attachVisual ( ) { super . attachVisual ( ) ; target . getSprite ( ) . showStatus ( CharSprite . POSITIVE , StringsManager . getVar ( R . string . Char_StaInvisible ) ) ; }
public void setSingleLine ( ) { super . setSingleLine ( ) ; mMaxLines = 1 ; reAdjust ( ) ; }
private void setSettings ( InstanceSettings settings ) { this . settings = settings ; AllSettings . addNew ( context , settings ) ; }
public void onTextChanged ( CharSequence charSequence , int i , int i1 , int i2 ) { if ( ! ignoringNext ) onNotIgnoredTextChanged ( charSequence , i , i1 , i2 ) ; ignoringNext = false ; }
public static void recycleInstances ( List < PointD > instances ) { pool . recycle ( instances ) ; }
public int getItemCount ( ) { return BirthdayListActivity . birthdaysList . size ( ) ; }
private void setDetailListPreferenceValue ( DetailListPreference pref , String value , String summary ) { pref . setValue ( value ) ; pref . setSummary ( summary ) ; pref . refreshAdapter ( ) ; }
public void onPastComments ( ) { final SessionListDialog sessionListDialog = SessionListDialog . newInstance ( commentListingController . getUri ( ) , commentListingController . getSession ( ) , SessionChangeListener . SessionChangeType . COMMENTS ) ; sessionListDialog . show ( getFragmentManager ( ) , null ) ; }
private int getWeight ( ) { return protein + fat + carbs ; }
public void deleteRecord ( RecordStoreImpl recordStoreImpl , int recordId ) throws RecordStoreNotOpenException , RecordStoreException { deleteFromDisk ( recordStoreImpl , recordId ) ; }
public void setPrecipIntensity ( Integer precipIntensity ) { this . precipIntensity = precipIntensity ; }
private void authenticate ( ) { fingerprintView . authenticate ( ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_2 . getText ( ) . toString ( ) ) ; }
public Note getNoteAtPosition ( int position ) { if ( isValidPosition ( position ) ) { return mNoteList . get ( position ) ; } else { return null ; } }
public Map < String , String > queryKeyStatus ( ) { return sessionId == null ? null : mediaDrm . queryKeyStatus ( sessionId ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; presenter . onDetachView ( ) ; adapter = null ; }
public void insertRowTest ( ) throws IOException { ValueRange valueRange = new ValueRange ( ) ; sheetsHelper . insertRow ( "spreadsheet_id" , "sheet_name" , valueRange ) ; verify ( sheetsService ) . insertRow ( "spreadsheet_id" , "sheet_name" , valueRange ) ; }
public synchronized void forceClose ( ) { finish ( ) ; if ( outputStream != null ) { try { outputStream . close ( ) ; } catch ( IOException e ) { } } outputStream = null ; }
public Integer getImmature ( ) { return immature ; }
public void onStop ( ) { if ( mCameraSource != null ) { mCameraSource . release ( ) ; } super . onStop ( ) ; }
public static void setCurrentJobName ( @ NonNull String name ) { App . currentJobName = name ; }
public void setAuthorFirstName ( String name ) { this . authorFirstName = StringUtils . notNullStr ( name ) ; }
private boolean isLastPageRssItem ( ) { WebBackForwardList list = mWebView . copyBackForwardList ( ) ; WebHistoryItem lastItem = list . getItemAtIndex ( list . getCurrentIndex ( ) - 1 ) ; return lastItem != null && lastItem . getUrl ( ) . equals ( RSS_ITEM_PAGE_URL ) ; }
public void onPageSelected ( int pos ) { PageChanged ( pos ) ; }
public void setWifiLinkSpeed ( Long wifiLinkSpeed ) { this . wifiLinkSpeed = wifiLinkSpeed ; }
public ZoomBounds ( Settings settings ) { this . settings = settings ; }
public void onDateSet ( DatePicker view , int year , int monthOfYear , int dayOfMonth ) { Calendar calendar = Calendar . getInstance ( ) ; calendar . set ( year , monthOfYear , dayOfMonth ) ; mReportStartTime = calendar . getTimeInMillis ( ) ; updateDateRangeOnFragment ( ) ; }
public void setEscala ( String escala ) { this . mEscala = escala ; }
private SimlarSSLSocketFactory ( ) { super ( ) ; mSSLSocketFactory = createSSLSocketFactory ( ) ; }
public void onClick ( View v ) { ( ( AlbumPager ) getActivity ( ) ) . showBottomSheetImage ( url , true ) ; }
public Rectangle getItemRectangle ( float width , float height , T item ) { TextureRegion region = getItemRegion ( item ) ; updateRectangle ( width , height , region ) ; return mRectangle ; }
public void onClick ( View v ) { if ( previousAns != null ) { currentCalculation += previousAns ; displayCalculation += "Ans" ; calculationView . setText ( displayCalculation ) ; } equalsMethod ( ) ; onAllClicks ( ) ; }
public Object getGroup ( int i ) { return changelog . get ( i ) ; }
public Message setTitle ( String title ) { this . title = title ; return this ; }
public void onTimeSet ( TimePicker view , int hourOfDay , int minute ) { mHour = hourOfDay ; mMinute = minute ; }
public long newDyn ( String name ) throws FilteredAncestor { long did = id ( name , defaultDynamicDeck ) ; select ( did ) ; return did ; }
public final CompoundUnit < Q > compound ( Unit < Q > subunit ) { return new CompoundUnit < Q > ( this , subunit ) ; }
public double getRange ( ) { return range ; }
public void onResume ( ) { if ( BuildConfig . LOG_DEBUG ) LogUtils . d ( TAG ) ; super . onResume ( ) ; announceChangesToActivity ( ) ; }
public static String logTarget ( ) { return gPrefs . getString ( LOG_TARGET , "LOG" ) . trim ( ) ; }
public void onSuccess ( final AlbumInfo info ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) -> { mAlbumInfo = info ; mAlbumImageIndex = intent . getIntExtra ( "albumImageIndex" , 0 ) ; } ) ; }
public List < Integer > getSubDeviceSessions ( String name ) { return mXmppConnectionService . databaseBackend . getSubDeviceSessions ( account , new AxolotlAddress ( name , 0 ) ) ; }
public static void setImplementation ( Implementation impl ) { if ( impl == null ) { sImplementation = sDefaultImplementation ; } else { sImplementation = impl ; } }
public static boolean themingEnabled ( Context context ) { return getCapability ( context ) . getServerColor ( ) != null && ! getCapability ( context ) . getServerColor ( ) . isEmpty ( ) ; }
public float getBackgroundOffset ( ) { return mBackgroundOffset ; }
private int loadTextColorDefaultPref ( ) { SharedPreferences prefs = getSharedPreferences ( PREFS_NAME , 0 ) ; return prefs . getInt ( PREF_TEXT_COLOR_DEFAULT_PREFIX_KEY , Color . WHITE ) ; }
public void onClick ( View v ) { goToFirstPage ( ) ; }
public static void logout ( @ NonNull Fragment fragment , int requestCode ) { Intent intent = new Intent ( fragment . getActivity ( ) , LoginActivity . class ) ; intent . setAction ( INTENT_ACTION_LOGOUT ) ; fragment . startActivityForResult ( intent , requestCode ) ; }
public String getLanguage ( ) { return lang ; }
public MoreRecentThanBound ( long minTimestamp ) { this . minTimestamp = minTimestamp ; }
public void onClick ( View v ) { new GetOptionsListTask ( ) . execute ( 3 ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { startActivity ( new Intent ( MainActivity . this , SubjectManagementActivity . class ) ) ; }
public void setTotalresults ( String totalresults ) { this . totalresults = totalresults ; }
public void onServiceDisconnected ( ComponentName arg0 ) { mMessenger = null ; }
private byte [ ] getBytesFromBitmap ( Bitmap bmp ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; bmp . compress ( Bitmap . CompressFormat . JPEG , 99 , baos ) ; return baos . toByteArray ( ) ; }
private Bitmap getImagePlaylist ( int position , Playlist playlist ) { List < Song > l = getPlaylistWithListId ( position , playlist . id ) ; return AutoGeneratedPlaylistBitmap . getBitmap ( mContext , l , true , false ) ; }
public int getPositionForSection ( int section ) { return alphaIndexer . get ( sections [ section ] ) ; }
public void handle ( ) { level . setScore ( 0 ) ; getCurrentUniverse ( ) . saveProgress ( ) ; showAd ( ) ; }
private static String getJson ( String strEncoded ) throws UnsupportedEncodingException { byte [ ] decodedBytes = Base64 . decode ( strEncoded , Base64 . URL_SAFE ) ; return new String ( decodedBytes , "UTF - 8" ) ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( DraggableGridExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public Builder clearEncryptionType ( ) { bitField0_ = ( bitField0_ & ~0x00000008 ) ; encryptionType_ = com . coinomi . core . protos . Protos . Wallet . EncryptionType . UNENCRYPTED ; onChanged ( ) ; return this ; }
public void onPreExecute ( ) { showProgressBar ( ) ; blockControls ( ) ; }
public AppTestModule ( DigitalismaApplication application ) { this . application = application ; }
public DBHelper ( Context context ) { super ( context , "myDB15" , null , 1 ) ; this . mContext = context ; }
public void setIntroShown ( ) { mPreferences . edit ( ) . putBoolean ( INTRO_SHOWN , true ) . commit ( ) ; }
public void onSaveClicked ( MenuItem item ) { mViewModel . save ( ) . observe ( this , this : : onSaveCompleted ) ; }
public Task < Directory > then ( @ NonNull Task < TransportService > task ) throws Exception { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_DIRECTORY , Transport . DIRECTORY , requestDirectoryData ) ; }
public Observable < Long > getVisitsIDByUUID ( final String visitUUID ) { return createObservableIO ( ( ) -> visitRoomDAO . getVisitsIDByUUID ( visitUUID ) ) ; }
public void setUseDarkTheme ( boolean useDarkTheme ) { this . mUseDarkTheme = useDarkTheme ; }
public void onScrollStart ( ForecastAdapter . ViewHolder holder , int position ) { holder . hideText ( ) ; }
private void thenDelegateShouldStop ( ) { new Verifications ( ) { { mAppCompatDelegate . onStop ( ) ; } } ; }
public boolean isAutomaticallyDisableSliceSpacing ( ) { return mAutomaticallyDisableSliceSpacing ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { Settings . changed = true ; }
public ArtistDigest create ( Cursor source ) { return new ArtistDigest ( source . getString ( source . getColumnIndex ( Views . ArtistsReadable . NAME . getName ( ) ) ) ) ; }
public void didSelectAudio ( ArrayList < MessageObject > audios ) { SendMessagesHelper . prepareSendingAudioDocuments ( audios , dialog_id , replyingMessageObject ) ; showReplyPanel ( false , null , null , null , false , true ) ; DraftQuery . cleanDraft ( dialog_id , true ) ; }
public static WPDialogSnackbar make ( @ NonNull View view , @ NonNull CharSequence text , @ Duration int duration ) { return new WPDialogSnackbar ( view , text , duration ) ; }
public StockViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( mContext ) . inflate ( R . layout . adapter_card_view , parent , false ) ; return new StockViewHolder ( v ) ; }
public void run ( ) { General . showResultDialog ( context , error ) ; }
public void updateServer ( ServerStatus serverStatus ) { this . serverStatus = serverStatus ; if ( groupAdapter != null ) groupAdapter . updateServer ( this . serverStatus ) ; }
public void onAnimationUpdate ( ValueAnimator animation ) { float currentValue = ( Float ) animation . getAnimatedValue ( ) ; float percent = currentValue * 1 . 0f / mContentViewTranslateY ; mViewPager . setTranslationY ( mViewPagerTranslateY * percent ) ; isAnimating = true ; }
public void setType ( int newType ) { type = newType ; }
public void setTeamNumber ( int teamNumber ) { this . teamNumber = teamNumber ; }
public void initDefaultConfiguration ( Bundle defaults ) { Log . d ( "Heart Rate Sensor" , "Init default configuration" ) ; defaults . putInt ( ACCURACY , SensorManager . SENSOR_DELAY_NORMAL ) ; }
public void onDisconnected ( JumbleException e ) throws RemoteException { mChannelView . setAdapter ( null ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . setAnimationInProgress ( false ) ; if ( photoAnimationEndRunnable != null ) { photoAnimationEndRunnable . run ( ) ; photoAnimationEndRunnable = null ; } }
public boolean onInterceptTouchEvent ( RecyclerView rv , MotionEvent e ) { return RecyclerViewExpandableItemManager . this . onInterceptTouchEvent ( rv , e ) ; }
public void onResume ( ) { Log . d ( "Engine_Driver" , "Settings : SettingsFragment onResume ( ) " ) ; super . onResume ( ) ; getPreferenceScreen ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public boolean getForce4KPref ( ) { return cameraId == 0 && sharedPreferences . getBoolean ( PreferenceKeys . getForceVideo4KPreferenceKey ( ) , false ) && main_activity . supportsForceVideo4K ( ) ; }
public void onTabSelected ( int position ) { lastSelectedPosition = position ; switchFragment ( position ) ; }
public void setReaderDefault ( ) { appendToLog ( "PowerLevel" ) ; setPowerLevel ( 300 ) ; setTagGroup ( 0 , 0 , 2 ) ; setPopulation ( 30 ) ; setInvAlgoNoSave ( true ) ; setCurrentLinkProfile ( 1 ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_2 . class ) ; startActivity ( i ) ; }
public static void sendEventHit ( String category , String action , String label ) { sendEventHit ( category , action , label , 0 ) ; }
public void play ( ) throws RemoteException { mService . get ( ) . play ( ) ; }
public static boolean isChannel ( int chatId ) { TLRPC . Chat chat = MessagesController . getInstance ( ) . getChat ( chatId ) ; return chat instanceof TLRPC . TL_channel || chat instanceof TLRPC . TL_channelForbidden ; }
public void surfaceChanged ( SurfaceHolder surfaceHolder , int format , int width , int height ) { doHandleRotation ( ) ; }
public String desc ( ) { if ( activated ) { return Game . getVar ( R . string . PortalGate_Desc_Activated ) ; } return super . desc ( ) ; }
public AlarmReceiver ( AlarmIconData iconData ) { super ( iconData ) ; }
public void addPlanGroup ( String name ) { PlanGroup group = new PlanGroup ( name ) ; list . add ( group ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; renewAdmobSmartBanner ( ) ; }
public boolean playerGuess_ComputerMoveGenerated ( ) { return false ; }
public void show ( ) { if ( ! builder . comments . isEmpty ( ) ) { dialog . show ( ) ; } else { Timber . e ( "Comments list cannot be empty ! Viewer ignored . " ) ; } }
public boolean hasPicture ( ) { return id_file_profile_picture != - 1 && file_profile_picture_size != - 1 ; }
public void onClickAvatar ( View view ) { if ( hasLoggedIn . get ( ) ) { goToHomepage . notifyChange ( ) ; } else { goToLogin . notifyChange ( ) ; } }
public void onRefresh ( ) { presenter . loadPosts ( ) ; }
public void initialize ( final DimBlockApplication applicationContext ) { mApplicationContext = applicationContext ; mConfig = new Config ( applicationContext , new String [ ] { "config . properties" } ) ; }
public Builder clearBlockRelativityOffsets ( ) { blockRelativityOffsets_ = java . util . Collections . emptyList ( ) ; bitField0_ = ( bitField0_ & ~0x00000200 ) ; onChanged ( ) ; return this ; }
public void start ( Attributes attributes ) { mCurrentPost . setLastEditDateFromTimestamp ( Integer . parseInt ( attributes . getValue ( Post . Xml . DATE_TIMESTAMP_ATTRIBUTE ) ) ) ; }
public void onClick ( View v ) { includeLogs [ 0 ] =! includeLogs [ 0 ] ; checkbox . setChecked ( includeLogs [ 0 ] , true ) ; }
public void setValue ( Object value ) { this . value = value ; }
public ArrayList < Layer > getResult ( ) { cleanUpList ( ) ; return contents ; }
public void checkboxClicked ( View view ) { filter . processCategory ( ApiUtils . getCategoryFromId ( view . getId ( ) ) ) ; }
public boolean isDayNightMode ( ) { return mSharedPref . getBoolean ( DAY_NIGHT_MODE , false ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfDisintegration_Info ) ; }
public void toggleWantToGo ( ) { filter . setWantToGo ( filterBinding . filterBarWantToGoButton . isChecked ( ) ) ; filterChanged ( filter ) ; }
public int getItemPosition ( Object object ) { int index = fragments . indexOf ( ( Fragment ) object ) ; if ( index == - 1 ) return POSITION_NONE ; else return index ; }
public TeamMatchVideoNotificationViewModel renderToViewModel ( Context context , @ Nullable Void aVoid ) { String header = getNotificationCardHeader ( context , EventHelper . shortName ( eventName ) , EventHelper . getShortCodeForEventKey ( eventKey ) ) ; return new TeamMatchVideoNotificationViewModel ( ) ; }
public IItemAdapter < IDrawerItem , IDrawerItem > getFooterAdapter ( ) { return mDrawerBuilder . mFooterAdapter ; }
public boolean isEnabled ( RecyclerView . ViewHolder holder ) { int type = holder . getItemViewType ( ) ; return type == 0 || type == 2 ; }
private static void revertNasty ( ThreadPolicy oldPolicy ) { if ( oldPolicy == null ) { return ; } StrictMode . setThreadPolicy ( oldPolicy ) ; }
public synchronized void onTransferStart ( Object source , DataSpec dataSpec ) { if ( streamCount == 0 ) { sampleStartTimeMs = SystemClock . elapsedRealtime ( ) ; } streamCount ++ ; }
public void onDeviceDiscovered ( BluetoothDevice device ) { listener . onLoadingEnded ( false ) ; devices . add ( device ) ; notifyDataSetChanged ( ) ; }
public void clearResult ( ) { resultType = ResultType . NONE ; constantResult = null ; arrayArgument = null ; arrayResult = null ; }
public void hideProgress ( ) { mCommentView . setRefreshing ( false ) ; }
private TagsFilter ( ) { super ( ) ; mFilteredTags = new ArrayList < String > ( ) ; }
public LocalChannelItemAdapter ( List < EclairEventService . ChannelDetails > channels ) { this . channels = channels ; }
public boolean onQueryTextSubmit ( String query ) { if ( adapter != null ) adapter . filter ( query ) ; if ( mSearchMenu != null ) { mSearchMenu . collapseActionView ( ) ; } return false ; }
public void showSaveSuccess ( ) { AppUtils . showToast ( getContext ( ) , "Card created successfully" ) ; }
private boolean doesMemberExistInJson ( MoodleMember member ) { return members . contains ( member ) ; }
public void fetchChallengeDataFromRestServer ( ) { this . jsonObject = repository . requestJson ( this . context , WellnessRestServer . DONT_USE_SAVED , FILENAME , REST_RESOURCE ) ; }
public void onPartialResults ( Bundle bundle ) { Log . d ( TAG , "onPartialResults : " ) ; }
public String getText ( String input ) { return input ; }
public MemoryThresholdCondition ( @ JsonProperty ( "percentageLimit" ) int percentageLimit ) { this . percentageLimit = percentageLimit ; }
public void bindTo ( TvEntity trailer ) { Picasso . get ( ) . load ( trailer . getPosterPath ( ) ) . placeholder ( R . drawable . ic_placeholder_empty ) . into ( binding . image ) ; }
public void setUpdated ( long updated ) { this . updated = updated ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { if ( dataSnapshot . getValue ( ) != null ) { profile . adminOverride = true ; configureUser ( profile ) ; } }
private Cursor getNewCursor ( Context context ) { if ( cursor == null || cursor . isClosed ( ) ) { cursor = UserDataDBHelper . getInstance ( context ) . getBooksCollectionCursor ( this ) ; } return cursor ; }
public void setLoadingImagePlaceholder ( Drawable loadingImagePlaceholder ) { this . loadingImagePlaceholder = loadingImagePlaceholder ; }
public void onIristickServiceError ( int error ) { if ( alive ) sendMessage ( What . IRISTICK_ERROR , error , 0 , null ) ; }
private void stopPassiveManager ( ) { if ( passiveLocationManager != null ) { tracer . debug ( "Removing passiveLocationManager updates" ) ; passiveLocationManager . removeUpdates ( passiveLocationListener ) ; } }
private void updateEditField ( ) { repeatTitle . setSelection ( repeatTitle . getText ( ) . length ( ) ) ; }
public void onClick ( View view ) { calmingStatementFragmentListener . unlockStory ( view ) ; }
public void addButton ( String name , int id ) throws IOException { mClientHandlerFactory . addButton ( name , id ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "contact_images" , checked ) . apply ( ) ; }
public void setDensity ( float density ) { this . density = density ; if ( density > 256 ) { this . density = 256 ; } else if ( density < 10 ) { this . density = 10 ; } }
public void testIsNOTWPCOM3 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( buildURL ( notWpcomAddress1 ) ) ) ; }
public static ScheduleFragment newInstance ( ) { return new ScheduleFragment ( ) ; }
public highscore ( ) { level = Gdx . app . getPreferences ( "highscore" ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . tappb" , appContext . getPackageName ( ) ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { msg = dataInputStream . readUTF ( ) ; }
public static TermuxFloatAppSharedPreferences build ( @ NonNull final Context context , final boolean exitAppOnError ) { Context termuxFloatPackageContext = PackageUtils . getContextForPackageOrExitApp ( context , TermuxConstants . TERMUX_FLOAT_PACKAGE_NAME , exitAppOnError ) ; if ( termuxFloatPackageContext == null ) return null ; else return new TermuxFloatAppSharedPreferences ( termuxFloatPackageContext ) ; }
public void setFloatValue ( float value ) { setValue ( ( int ) ( value * mDivisor ) ) ; }
public NightModeService ( Activity activity , Lifecycle lifecycle , Window window ) { this . activity = activity ; this . window = window ; lifecycle . addObserver ( this ) ; }
public void onGetBucketSuccessTracking ( ) { analyticsHelper . trackGetBucketSuccess ( null ) ; }
public void setInterpolator ( Interpolator interpolator ) { changed = true ; mInterpolator = interpolator ; }
public int getItemViewType ( int position ) { MyFilter filter = mList . get ( position ) ; if ( filter . getIconBgColor ( ) == View . NO_ID ) { return 0 ; } return 1 ; }
public void onClickTimerText ( View v ) { cancelEditingTheAlarmField ( ) ; timer . cycle ( ) ; updateHandler . beginScheduledUpdate ( ) ; updateUI ( ) ; if ( timer . isRunning ( ) ) { informIfNotificationAlarmsMuted ( ) ; } }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable String label , @ Nullable View . OnClickListener onClickListener ) { actions . add ( new Item ( icon , label , onClickListener ) ) ; return this ; }
public boolean removeSlide ( Object object ) { int locationToRemove = data . indexOf ( object ) ; if ( locationToRemove >= 0 ) { data . remove ( locationToRemove ) ; notifyDataSetChanged ( ) ; return true ; } return false ; }
public Drawable getDrawable ( String source ) { return ImageHelper . decodeImage ( context , id , source , show_images , tvReference ) ; }
public String getPreviewUrl ( ) { return previewurl ; }
public void setScreenOrientation ( int orientation ) { putInt ( SCREEN , orientation ) ; }
public void run ( ) { try { monitorAccount ( account , astate ) ; } catch ( Throwable ex ) { Log . e ( account . name , ex ) ; } }
public void saveBranchDetails ( BranchDetails branchDetails ) { realm = Realm . getDefaultInstance ( ) ; realm . beginTransaction ( ) ; realm . copyToRealmOrUpdate ( branchDetails ) ; realm . commitTransaction ( ) ; realm . close ( ) ; }
public MealItem ( ) { mName = "Name" ; mDescription = "Description" ; mUrl = "URL" ; mHall = "Hall" ; mMeal = "Meal" ; mSection = "Section" ; mDescriptors = "Descriptors" ; }
public static boolean isTaskUndone ( Context context ) { return TasksUtils . isToDaysDoProvider ( context , 1 , BingWallpaperIntentService . FLAG_SET_WALLPAPER_STATE ) ; }
public void onClick ( View view ) { view . showContextMenu ( ) ; }
public Spannable getFormattedSubject ( ) { return NotificationsUtils . getSpannableContentForRanges ( getSubject ( ) ) ; }
public void setCanopyManufacturer ( String canopyManufacturer ) { this . canopyManufacturer = canopyManufacturer ; }
public void addMaxData ( float max_data , float max_raw_data ) { acc_max_data . add ( max_data ) ; acc_max_raw_data . add ( max_raw_data ) ; }
public void onBindViewHolder ( final TrackHolder holder , final int listPosition ) { holder . BindTrack ( dataSet . get ( listPosition ) ) ; }
public MutableLiveData < CurrencyDictionary > getChosenCurrency ( ) { return currency ; }
public EventTeamListWriter eventTeamListWriter ( Database db ) { return Mockito . mock ( EventTeamListWriter . class ) ; }
public void viewUserBook ( ) { loadCategoryBook ( ) ; }
public RecentNotificationsSubscriber provideRecentNotificationsSubscriber ( DatabaseWriter writer ) { return Mockito . mock ( RecentNotificationsSubscriber . class ) ; }
public void onFailedSavingCertificate ( ) { dismissDialog ( SAML_DIALOG_TAG ) ; showSnackMessage ( R . string . ssl_validator_not_saved ) ; }
public static Logger getInstance ( ) { if ( logger == null ) { logger = new Logger ( ) ; afterCreateHook ( ) ; } return logger ; }
private static boolean makeQuranImagesDirectory ( Context context ) { return makeDirectory ( getQuranImagesDirectory ( context ) ) ; }
public void onPause ( ) { pocket . removeEventListener ( transactionChangeListener ) ; transactionChangeListener . removeCallbacks ( ) ; resolver . unregisterContentObserver ( addressBookObserver ) ; super . onPause ( ) ; }
public static String getId ( @ NonNull String name ) { return Base64 . encodeToString ( name . getBytes ( ) , Base64 . URL_SAFE ) ; }
public void showFavoriteButton ( boolean show ) { if ( buttonFavorite == null ) return ; buttonFavorite . setVisibility ( show ? View . VISIBLE : view . GONE ) ; }
public HtspDataSource createDataSourceInternal ( ) { return new HtspRecordingDataSource ( mContext , mConnection ) ; }
public void onDelete ( ) { vm . onDeleteTransaction ( item . transaction ) ; }
public void setDraftType ( DraftType draftType ) { this . draftType = draftType ; }
public void startCamera ( ) { if ( ! PermissionManager . checkCameraPermission ( this , REQUEST_CODE_PERMISSION_CAMERA ) ) { return ; } Intent intent = ImagePicker . cameraOnly ( ) . getIntent ( this ) ; startActivityForResult ( intent , REQUEST_CODE_CAMERA ) ; }
public void setVisitType ( String visitType ) { this . visitType = visitType ; }
public void getPlayLists ( ) { notifyGetPlayListsListenerSucceeded ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container ) { return inflater . inflate ( R . layout . playing_queue_controller , container , false ) ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenu . ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = this . getMenuInflater ( ) ; inflater . inflate ( R . menu . jobs_list_row_context_menu , menu ) ; }
public Map < TimelessDate , ArrayList < Appointment >> getGlobals ( ) { return globalTimetables ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . Wallet prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void getCategories ( String siteId , Listener listener , ErrorListener errorListener ) { String path = String . format ( Locale . US , "sites/%s/categories" , siteId ) ; get ( path , null , null , listener , errorListener ) ; }
public static void emptyContextLog ( Context context ) { log ( context , "Parameter < context > is null" , LogManager . Types . WARNING ) ; }
private void createWakeLock ( ) { if ( mWakeLock != null ) { mWakeLock . release ( ) ; mWakeLock = null ; } mWakeLock = mPowerManager . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , "Debatekeeper" ) ; mWakeLock . setReferenceCounted ( false ) ; }
private boolean checkDialogInputs ( ) { return ( ( this . pointSpinner . getSelectedItemPosition ( ) > 0 ) && ( this . horizDirEditText . length ( ) > 0 ) && ( this . distanceEditText . length ( ) > 0 ) ) ; }
public boolean performSync ( SyncResult syncResult , Bundle extras ) { try { doStyleSync ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return true ; }
public void onResume ( ) { super . onResume ( ) ; getPreferenceManager ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public void selectTagsFromEvent ( Event event ) { for ( String tagId : event . getTags ( ) ) { TagViewModel tag = mapTags . get ( tagId ) ; if ( tag != null ) { mapTags . addToSelection ( tag ) ; } } }
public void getMaterialDialogThemeBLACKTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . BLACK_INDEX ) ; assertEquals ( Theme . DARK , apptheme . getMaterialDialogTheme ( ) ) ; }
private void clickOnFormButton ( String formName ) { assertFormExists ( formName ) ; onData ( withRowString ( FormsColumns . DISPLAY_NAME , formName ) ) . perform ( click ( ) ) ; }
public SearchHistoryAdapter ( Comparator < TagHistory > comparator ) { this . comparator = comparator ; }
public void testLoadingRussianLipsum ( ) throws IOException { onBookFile ( "lipsum/Russian - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
public static void setAreaWidth ( int value ) { set ( AREA_WIDTH , value ) ; }
public void sendCachedCalls ( ) { sendCachedCalls ( DEFAULT_CACHE ) ; }
public LiveData < QuestionResponse > getQuestion ( String categoryId , String page ) { if ( liveData == null ) liveData = repository . fetchQuestion ( categoryId , page ) ; return liveData ; }
public void onJokeRetrieved ( String joke ) { mJoke = joke ; if ( ! mIsTesting ) { startJokeScreen ( ) ; } }
public int getCount ( ) { return paintings . size ( ) ; }
public static void setThreadActivity ( Activity currentActivity ) { Log . i ( "ContentUtils" , "Current activity thread : " + Thread . currentThread ( ) . getName ( ) ) ; ContentUtils . currentActivity . set ( currentActivity ) ; }
public MaterialProgressBar ( Context context ) { super ( context ) ; init ( null , 0 , 0 ) ; }
public void setCallback ( CallBack callback ) { this . _callback = callback ; }
public void changed ( ChangeEvent event , Actor actor ) { Gdx . net . openURI ( GPLUS_URL ) ; }
public synchronized void stop ( ) { handler . removeCallbacks ( internalWraperRunnable ) ; }
public String getAvatarPath ( String avatar ) { return mXmppConnectionService . getFilesDir ( ) . getAbsolutePath ( ) + "/avatars/" + avatar ; }
public AbstractSwipeableItemViewHolder ( View itemView ) { super ( itemView ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_default_close , menu ) ; return true ; }
private void postToMyWall ( ) { List < AbsModel > models = Collections . singletonList ( document ) ; PlaceUtil . goToPostCreation ( getActivity ( ) , accountId , accountId , EditingPostType . TEMP , models ) ; }
public VideosInteractor ( INetworker networker , IStores cache ) { this . networker = networker ; this . cache = cache ; }
public void onAppInfoStatusChange ( ) { sortAppInfo ( appInfoList ) ; appInfoAdapter . clear ( ) ; appInfoAdapter . addAll ( appInfoList ) ; appInfoAdapter . notifyDataSetChanged ( ) ; save ( ) ; }
public void getUserTest ( ) { Integer id = null ; }
private static boolean isPackageInstalled ( String packagename , Context ctx ) { PackageManager pm = ctx . getPackageManager ( ) ; try { pm . getPackageInfo ( packagename , PackageManager . GET_ACTIVITIES ) ; return true ; } catch ( NameNotFoundException e ) { return false ; } }
private BroadcastReceiver unDimScreenReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { dimScreen ( false ) ; } } ;
public String [ ] getContents ( ) { return ( String [ ] ) representation . toArray ( ) ; }
private AlbumViewModelFactory ( final Application application , final long artistID , final boolean loadRecent ) { mApplication = application ; mArtistID = artistID ; mLoadRecent = loadRecent ; }
private void onClickAddButton ( ) { Intent i = new Intent ( this , SearchForFeeds . class ) ; startActivity ( i ) ; }
public YPositionMetric getYPositionMetric ( ) { return yPositionMetric ; }
private LinkMenuItem ( Context context , int titleRes , LinkAction action ) { this . title = context . getString ( titleRes ) ; this . action = action ; }
public static RequestCreator getPicassoCorned ( Context context , UserLTE user ) { RequestCreator p = getRequestCreator ( context , user ) ; if ( p == null ) return null ; return getPicassoCorned ( p ) ; }
public void onActivityResumed ( Activity activity ) { }
private void whenRunning ( ) { mItemClickListenerRunnable . run ( ) ; }
public listeDesActivitesEtProf Func ( ) throws java . lang . Exception { return listeHoraireEtProf ( codeAccesUniversel , motPasse , pSession ) ; }
private void deleteTargets ( ) { if ( fb [ 0 ] == 0 ) return ; GLES20 . glDeleteFramebuffers ( 2 , fb , 0 ) ; GLES20 . glDeleteTextures ( 2 , tx , 0 ) ; fb [ 0 ] = 0 ; }
public void onAccuracyChanged ( Sensor sensor , int i ) { Log . v ( TAG , "onAccuracyChanged" + i ) ; }
public void onDestroyActionMode ( ActionMode mode ) { actionModeStatusBar ( false ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( ClearCacheEvent . RATING ) ) { return ; } fragment . clearData ( ) ; }
private boolean isValid ( int x , int y ) { return x >= 0 && x < image . getWidth ( ) && y > 0 && y < image . getHeight ( ) ; }
public void finishFragment ( boolean animated ) { if ( isFinished || parentLayout == null ) { return ; } parentLayout . closeLastFragment ( animated ) ; }
public SelectMultiWidget createWidget ( ) { SelectMultiWidget selectMultiWidget = new SelectMultiWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) ) ; selectMultiWidget . setFocus ( activity ) ; return selectMultiWidget ; }
public void onFailure ( ) { Log . e ( TAG , "set key failure" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_SET_KEYS_FAILURE , new ArrayList < String > ( ) ) ; }
public void testECIEnglishKatakana ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u30a0' } , new float [ ] { 20f , 1f , 10f } , 104691 , 110914 ) ; }
public static OpenWeatherDataClouds fromString ( String value ) { Type listType = new TypeToken < OpenWeatherDataMain > ( ) { } . getType ( ) ; return new Gson ( ) . fromJson ( value , listType ) ; }
public boolean isSuspended ( ) { return isSuspended ; }
public JsonBufferedObject getObject ( final int id ) { return get ( id ) . asObject ( ) ; }
public void onDestroyView ( ) { appbar . removeOnOffsetChangedListener ( this ) ; ButterKnife . unbind ( this ) ; super . onDestroyView ( ) ; }
public void animateTo ( List < Member > models , String filter ) { applyAndAnimateRemovals ( models ) ; applyAndAnimateAdditions ( models ) ; applyAndAnimateMovedItems ( models ) ; this . filter = filter ; }
public int getDue ( ) { return due ; }
public int getStatus ( ) { return status ; }
public void unbind ( ) { if ( this . recipients != null ) this . recipients . removeListener ( this ) ; }
public void onProgressChanged ( SeekBar seekBar , int i , boolean b ) { mObscureAudioAmount = i ; }
public final void pause ( final AbstractClient . OnSuccess listener ) { client . send ( AriaRequests . pause ( gid ) , listener ) ; }
public ContentType getType ( ) { return ContentType . CHALLENGE_SUMMARY ; }
public int process ( ) { return this . left . process ( ) + this . right . process ( ) ; }
private String getLocalStatus ( ) { return StringUtils . notNullStr ( mLocalStatus ) ; }
public boolean onGenericMotionEvent ( MotionEvent motionEvent ) { if ( mainWrappers == null || ! mainWrappers . isInit ( ) ) return super . onGenericMotionEvent ( motionEvent ) ; return controls . onMotionEvent ( motionEvent ) || super . onGenericMotionEvent ( motionEvent ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; tts . shutDown ( ) ; }
public ProfileSettingDrawerItem withSelectedColor ( int selectedColor ) { this . selectedColor = ColorHolder . fromColor ( selectedColor ) ; return this ; }
public AdmissionPercentageMetaPojo getPercentagePojoAtPosition ( int position ) { return mPercentageData . get ( position - 1 - mCounterData . size ( ) ) ; }
public boolean shouldSendJetpackMonitorEmailNotifications ( ) { return mSettings . emailNotifications ; }
public void initMapper ( ) { uut = new ForecastMapper ( ) ; mData = new ArrayList <> ( ) ; mData . add ( new ForecastData ( new City ( ) , 3 ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { createAfterUpload = false ; progressDialog = null ; donePressed = false ; try { dialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void testJsonNull ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . parseJsonNull ( mSubscriber ) ; }
public TeXFormulaSettingsParser ( ) throws ResourceParseException , IOException { this ( jLatexMath . getAssetManager ( ) . open ( RESOURCE_NAME ) , RESOURCE_NAME ) ; }
public void onClick ( android . content . DialogInterface dialog , int which , boolean isChecked ) { selected_ [ which ] = isChecked ; dirty_ = true ; }
private String getCityBranchId ( Integer quetionId ) { return Preferences . getCountyCode ( ) + String . valueOf ( Preferences . getBranchNumber ( ) ) + String . valueOf ( quetionId ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_settings : startPreferencesActivity ( ) ; break ; default : break ; } return true ; }
public void onDrawerClosed ( ) { handle . setLayoutParams ( new LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , DisplayUtils . convertToDIP ( context , 95 ) ) ) ; playerContracted . setVisibility ( View . VISIBLE ) ; playerExpanded . setVisibility ( View . GONE ) ; }
public void onFinishInput ( ) { super . onFinishInput ( ) ; mComposing . setLength ( 0 ) ; updateCandidates ( ) ; setCandidatesViewShown ( false ) ; mCurKeyboard = mQwertyKeyboard ; if ( mInputView != null ) { mInputView . closing ( ) ; } }
public float getActiveMinutes ( ) { return this . activeMinutes ; }
public void onSessionSelected ( UUID session , SessionChangeType type ) { controller . setSession ( session ) ; requestRefresh ( RefreshableFragment . POSTS , false ) ; }
public static void loadImage ( ImageView view , Song song ) { GlideApp . with ( view ) . load ( song ) . placeholder ( R . drawable . ic_play_circle_outline ) . into ( view ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { Log . i ( TAG , "onViewCreated" ) ; super . onViewCreated ( view , savedInstanceState ) ; }
public static void card ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . card_enter , R . anim . card_exit ) ; }
public void setOnGroupExpandListener ( @ Nullable OnGroupExpandListener listener ) { if ( mAdapter != null ) { mAdapter . setOnGroupExpandListener ( listener ) ; } else { mOnGroupExpandListener = listener ; } }
public void notifyListChanged ( ) { if ( Objects . nonNull ( mAudioRecyclerAdapter ) ) { mAudioRecyclerAdapter . notifyDataSetChanged ( ) ; } }
public void openSearch ( int accountId , @ SearchContentType int type , @ Nullable BaseSearchCriteria criteria ) { PlaceFactory . getSingleTabSearchPlace ( accountId , type , criteria ) . tryOpenWith ( getActivity ( ) ) ; }
public List < String > getJokes ( ) { return jokes ; }
private void showSnackbarError ( int textResource ) { Snackbar . make ( mCoordinatorLayout , textResource , Snackbar . LENGTH_LONG ) ; }
public static int scaleIndexToSampleSize ( int scaleIndex ) { return 1 << scaleIndex ; }
public String getFormattedValue ( float value ) { return makePretty ( value ) + mText ; }
public void run ( ) { Toast . makeText ( activity , getString ( R . string . shuffle_is ) + ( mBoundService . isShuffle ( ) ?" on" : " off" ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public String getTitle ( ) { return cardTitle . getText ( ) . toString ( ) ; }
public void reject ( ) { if ( ! mPending ) return ; onDownloadDestroyed ( this ) ; }
public void onClick ( DialogInterface dialog , int which ) { ICertificateItem certificate = mCertificates . get ( which ) ; certificate . onActivate ( ) ; }
static public void setImage ( Context context , UserLTE user , ImageView imageView ) { RequestCreator picasso = getRequestCreator ( context , user ) ; if ( picasso == null ) return ; picasso . into ( imageView ) ; }
public CharSequence getAccessibilityClassName ( ) { return "androidx . recyclerview . widget . RecyclerView" ; }
public static void d ( final String msg ) { if ( IS_DEBUGGING_ON ) { Log . d ( mTAG , getMessage ( msg ) ) ; saveToFile ( ) ; } }
public void onSuccess ( LocationEntity location ) { view . setCountry ( location . name ) ; }
public static DatabaseHelper getInstance ( ) { return SInstance ; }
public String getReg ( ) { return this . _reg ; }
public SupportFragment getTopFragment ( ) { if ( fragmentStack . size ( ) != 0 ) return fragmentStack . lastElement ( ) ; return null ; }
public void onMinus ( Selector s ) { RemixedDungeon . fontScale ( RemixedDungeon . fontScale ( ) - 1 ) ; s . regen ( ) ; }
public MediatorLiveData < List < SkillEntity >> getSkills ( ) { return mObservableSkills ; }
private void initializeLocationManager ( ) { Log . e ( TAG , "initializeLocationManager" ) ; if ( locationManager == null ) { locationManager = ( LocationManager ) getSystemService ( Context . LOCATION_SERVICE ) ; } }
private void notifyChanged ( ) { String text = currentCompletionText ( ) ; List < String > objects = getObjects ( ) ; if ( searchChanged != null ) { searchChanged . onSearching ( text , objects ) ; } }
public String getContainerType ( ) { return containerType ; }
public void onClick ( DialogInterface dialog , int which ) { ConnectionsManager . getInstance ( ) . cancelRequest ( reqId , true ) ; try { dialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
private void onTransaction ( Transaction transaction ) { this . transaction . postValue ( transaction ) ; }
private void unknownSequence ( byte b ) { if ( TermDebug . LOG_UNKNOWN_ESCAPE_SEQUENCES ) { logError ( "unknown" , b ) ; } finishSequence ( ) ; }
public void onImagePreviewRequested ( String mediaUrl ) { MediaPreviewActivity . showPreview ( this , null , mediaUrl ) ; }
public void onDestroy ( ) { callback = null ; disconnect ( ) ; super . onDestroy ( ) ; }
public static Contact findByUserId ( Context context , String userId ) { return findByUserId ( context , userId , null ) ; }
public BigDecimal getCapitalCourant ( ) { return this . capitalCourant ; }
public String getRoBuildDescription ( ) { return roBuildDescription ; }
public void onStart ( ) { super . onStart ( ) ; EventBus . getDefault ( ) . registerSticky ( this ) ; }
public void onRequestFailure ( SpiceException e ) { showProgress ( false ) ; mPasswordView . setError ( getString ( R . string . error_invalid_email ) ) ; mPasswordView . requestFocus ( ) ; }
public void onFailure ( Call call , IOException e ) { throw new APIException ( "Failed to fetch user" ) ; }
public void close ( ) { cameraDevice . close ( ) ; }
public static String getWorkingFolder ( Context context ) { return getPrefs ( context ) . getString ( "working_folder" , defaultFolder ( context ) ) ; }
public static Boolean isGrblErrorMessage ( final String response ) { return response . toLowerCase ( ) . startsWith ( "error : " ) ; }
public List < Station > getRemoteStations ( ) { return XML_READER . getRemoteStations ( ) ; }
public static SearchResult notDone ( ) { return new SearchResult ( NOT_DONE , 0 , "" ) ; }
public AnimatingToggle ( Context context ) { super ( context ) ; }
public void setTimeStamp ( String timeStamp ) { this . timeStamp = timeStamp ; }
public SingleChoiceFormInput ( Context context , AttributeSet attrs ) { this ( context , attrs , android . R . attr . spinnerStyle ) ; }
public ProviderSettingsTester < T > pickOption ( String option ) { open ( ) ; onView ( allOf ( withId ( R . id . settingsPickingDialogOption ) , withText ( option ) ) ) . perform ( click ( ) ) ; return ProviderSettingsTester . this ; }
public com . coinomi . core . protos . Protos . AddressStatus . Builder addAddressStatusBuilder ( ) { return getAddressStatusFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . AddressStatus . getDefaultInstance ( ) ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( TimelineDetailActivity . this , user ) . deletePost ( entry . getChannelId ( ) , entry . getId ( ) ) ; }
public ZonedDateTime getEnd ( ) { return end ; }
public void setMultiSelectListener ( LongPressSelectTouchListener selectListener ) { mMutliSelectListener = selectListener ; if ( selectListener != null ) selectListener . setListener ( this ) ; }
public ArtistImageRunner ( final ArtistModel artist , final int width , final int height ) { mArtist = artist ; mWidth = width ; mHeight = height ; }
public void setStatus ( DBStatus status ) { this . status = status ; }
private void onActionUp ( MotionEvent event ) { if ( isDown ) { this . startX = 0F ; this . startY = 0F ; this . isDown = false ; } sendCallback ( ) ; }
public DrawerBuilder withItemAnimator ( @ NonNull RecyclerView . ItemAnimator itemAnimator ) { mItemAnimator = itemAnimator ; return this ; }
public void setInterestWaived ( Integer interestWaived ) { this . interestWaived = interestWaived ; }
public void removeGapMarker ( ) { if ( mGapMarkerPosition == - 1 ) return ; int position = mGapMarkerPosition ; mGapMarkerPosition = - 1 ; if ( position < getItemCount ( ) ) { notifyItemRemoved ( position ) ; } }
public void addBeacon ( Beacon beacon ) { foundBeacons . add ( beacon ) ; }
public InputMethodManager getInputMethodManager ( ) { checkInitialized ( ) ; return mImmWrapper . mImm ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_main ) ; initView ( ) ; presenter = new MainPresenter ( this ) ; presenter . getCourseList ( ) ; }
public XmppAxolotlMessage ( Jid from , int sourceDeviceId ) { this . from = from ; this . sourceDeviceId = sourceDeviceId ; this . keys = new HashMap <> ( ) ; this . iv = generateIv ( ) ; this . innerKey = generateKey ( ) ; }
public Object getChild ( int groupPosition , int childPosition ) { if ( groupPosition == 0 ) { return savedBeacons . get ( childPosition ) ; } else { return beaconsInRange . get ( childPosition ) ; } }
private void whenCreatingViewHolder ( ) { mModelViewHolder = uut . onCreateViewHolder ( mock ( ViewGroup . class ) , 0 ) ; }
public void run ( ) { if ( ! contacts . isEmpty ( ) || contactsLoaded ) { synchronized ( loadContactsSync ) { loadingContacts = false ; } return ; } loadContacts ( true , false ) ; }
public EventSync ( Context context , String token ) { this . token = token ; this . context = context ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; convertInfoRow = rowCount ++ ; convertRow = rowCount ++ ; convertDetailRow = rowCount ++ ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . closeChats ) ; return true ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; this . mainActivity = ( MainActivity ) context ; this . mainActivity . setPermissionRequired ( this ) ; }
public synchronized void loadUrl ( @ NonNull String url ) { if ( ! mProxyUtils . isProxyReady ( ) ) { return ; } if ( mWebView != null ) { mWebView . loadUrl ( url , mRequestHeaders ) ; } }
private void goToActivity ( Class targetActivity ) { mDrawerLayout . closeDrawers ( ) ; Intent intent = new Intent ( mCurrentDrawerActivity , targetActivity ) ; new Handler ( ) . postDelayed ( ( ) -> mCurrentDrawerActivity . startActivity ( intent ) , ITEM_ACTION_DELAY ) ; }
public static String errStringFromVolleyError ( VolleyError volleyError ) { JSONObject json = volleyErrorToJSON ( volleyError ) ; if ( json == null ) return "" ; return JSONUtils . getString ( json , "error" ) ; }
public View getChildView ( int groupPosition , int childPosition , boolean isLastChild , View convertView , ViewGroup parent ) { return groups . get ( groupPosition ) . children . get ( childPosition ) . render ( mRendererSupplier ) . getView ( mActivity , inflater , convertView ) ; }
public void onCreate ( ) { super . onCreate ( ) ; initJodaTime ( ) ; initCalligraphy ( ) ; }
public void onLoadData ( ) { updateComments ( false ) ; }
public void setPrice ( double price ) { this . price = price ; }
public void onAnimationEnd ( Object animation ) { if ( animationEndRunnable != null ) { animationEndRunnable . run ( ) ; animationEndRunnable = null ; } }
public List < Donate > getDonate ( ) { return donate ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Bundle bundle = this . getArguments ( ) ; i = bundle . getInt ( "page" , 0 ) ; s = ShadowboxComments . comments . get ( i ) ; }
public Vector3 getAccelerometer ( int accelerometerCode ) { return null ; }
private void showAddMeasureDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; MeasureDialogFragment dialog = MeasureDialogFragment . newInstance ( ) ; dialog . show ( this . getFragmentManager ( ) , "MeasureDialogFragment" ) ; }
public double getMassa ( ) { return massa ; }
public Call < List < Category >> getCategories ( @ Query ( "language" ) String language ) { return jugoterapiaService . getCategories ( language ) ; }
public static void sendExceptionReport ( Throwable e , String origin , String additionalInfo ) { sendExceptionReport ( e , origin , additionalInfo , false ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "doubletap" , checked ) . apply ( ) ; }
public float getNode2 ( ) { return node2 ; }
public GameSpriteInterface getCloudBg1 ( Resources res ) { return new CloudSprite ( res , this . cloudBg1DrawableId , this . cloudBg1InitPos . first , this . cloudBg1InitPos . second , this . cloudBg1Scale , this . cloudBg1SpeedX ) ; }
public String getType ( ) { String id = getTypeId ( ) ; return id . substring ( 0 , 1 ) . toUpperCase ( ) + id . substring ( 1 ) ; }
public void show ( ) { super . show ( ) ; Gdx . input . setInputProcessor ( mStage ) ; }
public static synchronized RedditChangeDataIO getInstance ( final Context context ) { if ( INSTANCE == null ) { INSTANCE = new RedditChangeDataIO ( context ) ; if ( STATIC_UPDATE_PENDING ) { INSTANCE . notifyUpdate ( ) ; } } return INSTANCE ; }
public List < TetroidFile > getAttachedFiles ( ) { return files ; }
public void onClick ( View v ) { Daedalus . configurations . getCustomDnsServers ( ) . add ( position , server ) ; adapter . notifyItemInserted ( position ) ; }
public void update ( TodoListHeader updatedItem ) { updateCount ++ ; uuids . add ( updatedItem . getUuid ( ) ) ; }
public void onLoadMore ( ) { updateComments ( true ) ; }
public void stopNestedScroll ( ) { mChildHelper . stopNestedScroll ( ) ; }
private static String makeLvString ( int lv ) { return KcaUtils . format ( "Lv %d" , lv ) ; }
public Long getVersionCount ( ) { return versionCount ; }
public void backupContacts ( ) { if ( checkAndAskForContactsReadPermission ( PermissionUtil . PERMISSIONS_READ_CONTACTS_MANUALLY ) ) { startContactsBackupJob ( ) ; } }
public int getCount ( ) { return mRealmTeacherHelper . getLessonCount ( ) ; }
public T withSelectedColor ( int selectedColor ) { this . selectedColor = ColorHolder . fromColor ( selectedColor ) ; return ( T ) this ; }
private void playAllAlbums ( ) { try { ( ( GenericActivity ) getActivity ( ) ) . getPlaybackService ( ) . playRecentAlbums ( ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public void setPriorityId ( int priorityId ) { mPriorityId = priorityId ; }
public void downloadFailedFileMissing ( ) { gui . showError ( "At least one file could not be downloaded because it is no longer offered . " ) ; }
private double sqmToacre ( double num ) { return num * 0 . 000247 ; }
private void noFilesFoundMessage ( Boolean aBoolean ) { mStopTaskFab . hide ( ) ; mStartTaskFab . hide ( ) ; mMessage . setVisibility ( View . VISIBLE ) ; }
public void onOff ( ) { if ( isActive ( ) ) { stop ( ) ; } else { start ( ) ; } }
public View getView ( int position , @ Nullable View convertView , @ NonNull ViewGroup parent ) { return getLayout ( position , convertView , parent , R . layout . spinner_item2 ) ; }
public void launchAboutActivity ( ) { startActivity ( new Intent ( this , AboutActivityView . class ) ) ; }
public boolean isValidAltitude ( ) { return AltitudeFilter . isValid ( ) ; }
public void testDistrictTeamExtractorNotFound ( ) { mExtractor = new DistrictTeamExtractor ( mNotFoundTeamKey ) ; DistrictTeam extracted = mExtractor . call ( mDistrictTeams ) ; assertNull ( extracted ) ; }
public void updateAyah ( SuraAyah suraAyah ) { mTagBookmarkPresenter . setAyahBookmarkMode ( suraAyah . sura , suraAyah . ayah , suraAyah . getPage ( ) ) ; }
public void onCancelClick ( View view ) { setResult ( RESULT_CANCELED , null ) ; finish ( ) ; LActivityUtil . tranIn ( getActivity ( ) ) ; }
public void onPrepareOptionsMenu ( @ NonNull Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; menu . findItem ( R . id . statistics_reset ) . setVisible ( false ) ; menu . findItem ( R . id . statistics_filter ) . setVisible ( false ) ; }
public ISO14443ACardData ( ) { uid = BigInteger . ZERO ; ats = new int [ ] { } ; }
public int [ ] hexToRGB ( String hex ) { return colorToRGB ( hexToColor ( hex ) ) ; }
public BlockTextureHandler ( String id ) { this ( Assets . getPackedTextureFromID ( id , "block" ) ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { this . contextMenu = menu ; menu . clear ( ) ; inflater . inflate ( R . menu . event_detail , menu ) ; MenuHelper . setShowIcons ( menu ) ; presenter . updateContextMenuOptions ( ) ; }
public Unity ( Context context , double value , int type ) { this . context = context ; this . value = value ; this . type = type ; setValue ( ) ; }
public boolean areHardwareKeyboardShortcutsDisabled ( ) { return ( boolean ) getInternalPropertyValue ( TermuxPropertyConstants . KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST , true ) ; }
public void top ( ) { mBinding . listContact . smoothScrollToPosition ( 0 ) ; }
public static void slideRight ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . slide_in_left , R . anim . slide_out_right ) ; }
public void onStop ( ) { super . onStop ( ) ; getPreferenceScreen ( ) . getSharedPreferences ( ) . unregisterOnSharedPreferenceChangeListener ( this ) ; unRegisterNetWatcher ( ) ; }
public void onApply ( ) { if ( callback != null ) { callback . run ( ) ; } }
public MuclumbusService . Room getCurrent ( ) { return this . current ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { }
public void performAction ( int itemId ) { if ( itemId == R . id . action_select ) { ControlDialog d = new ControlDialog ( activity , potentialChangeDialog , this ) ; d . show ( ) ; } }
public CharArrSubstring left ( int chars ) { return new CharArrSubstring ( arr , start , chars ) ; }
public StorageProgressBarWrapper ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context ) ; }
private static long getLongPreference ( Context context , String key , long defaultValue ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getLong ( key , defaultValue ) ; }
public String toString ( ) { return GrblController . getContext ( ) . getString ( R . string . text_grbl_alarm_format , alarmCode , alarmDescription ) ; }
public void onClick ( View v ) { currentCalculation += "ln ( " ; displayCalculation += "ln ( " ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; onAllClicks ( ) ; }
public static Proxy getProxy ( ) throws IOException { return new Proxy ( Proxy . Type . HTTP , new InetSocketAddress ( InetAddress . getByAddress ( new byte [ ] { 127 , 0 , 0 , 1 } ) , 8118 ) ) ; }
public Task < Void > deleteAccount ( ) { return Tasks . call ( executorService , ( Callable < Void > ) ( ) -> { makePostRequest ( "User/Delete" , null ) ; return null ; } ) . addOnFailureListener ( ex -> logout ( ) ) ; }
public void onApply ( ) { initCryptPass ( hash , true ) ; PINManager . askPINCode ( context , true , callback : : onApply ) ; }
public long id ( @ NonNull String name ) throws FilteredAncestor { return id ( name , DEFAULT_DECK ) ; }
public void setAskedRating ( ) { Editor edit = preferences . edit ( ) ; edit . putLong ( "askedRatingOn" , System . currentTimeMillis ( ) ) ; edit . commit ( ) ; }
public void onItemSelected ( AdapterView < ? > parent , View item , int position , long selectedId ) { weekday = Integer . parseInt ( weekTypesValues [ position ] ) ; }
public void startMainActivity ( ) { Intent intent = new Intent ( context , MainActivity_ . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP | Intent . FLAG_ACTIVITY_SINGLE_TOP | Intent . FLAG_ACTIVITY_NEW_TASK ) ; startActivity ( intent ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . erickirschenmann . fireline" , appContext . getPackageName ( ) ) ; }
public boolean isRunning ( ) { return mKeepRunning ; }
public RedditAPIMultiredditListRequester ( Context context , RedditAccount user ) { this . context = context ; this . user = user ; }
public static boolean landscape ( ) { return true ; }
public static void checkRunningService ( Context context , String TAG ) { Intent intent = checkRunningServiceIntent ( context , TAG , true ) ; if ( intent != null ) { BingWallpaperIntentService . start ( context , intent ) ; } }
public boolean shouldOverrideUrlLoading ( WebView view , String url ) { Log . i ( "WebView" , "Attempting to load URL : " + url ) ; handleLink ( url ) ; return true ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfMight_Info ) ; }
public ListAdapter onCreateList ( SimpleAlertDialog dialog , int requestCode ) { if ( requestCode == REQUEST_CODE_ADAPTER ) { return new SweetsAdapter ( getActivity ( ) , SWEETS_LIST ) ; } return null ; }
public static byte [ ] encryptBytes ( byte [ ] bytes ) { return encrypt ( mCryptKey , bytes ) ; }
public void testGetHttpFileName_withDispositionAndLocation ( ) { String actual = Utils . getHttpFileName ( fs , "http : "attachment ; filename = \"subdir/real . pdf\"" , "Content - Location : subdir/file . pdf" , null ) ; assertEquals ( "real . pdf" , actual ) ; }
public T getAdapterItem ( int position ) { return items . get ( position ) ; }
public double getLongitude ( ) { return getDouble ( CONFIG_CENTER_LON ) ; }
public int getItemPosition ( Object object ) { return POSITION_UNCHANGED ; }
public static AnswersProxy get ( ) { if ( instance == null ) { instance = new AnswersProxy ( ) ; } return instance ; }
public Object getCurrentManifest ( ) { return player . getCurrentManifest ( ) ; }
public MaterialAboutActionItem build ( ) { return new MaterialAboutActionItem ( this ) ; }
public void setNumThreadsRequested ( Long numThreadsRequested ) { this . numThreadsRequested = numThreadsRequested ; }
public void flowComplete ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { showFeedback ( ) ; }
public AppDatabase getDatabase ( ) { return AppDatabase . getInstance ( this , mAppExecutors ) ; }
public WifiReceiver ( WifiIconData iconData ) { super ( iconData ) ; }
public PhotoSizeEntity setY ( String y ) { this . y = y ; return this ; }
public Collection getCol ( ) { return mCol ; }
public int getSpanSize ( int position ) { switch ( adapter . getItemViewType ( position ) ) { case RecyclerAdapter . TYPE_HEADER_FILES : return columns ; case RecyclerAdapter . TYPE_HEADER_FOLDERS : return columns ; default : return 1 ; } }
public int numAlphaLevels ( ) { return 255 ; }
public TimeUtil ( ) { }
public String getGroupJid ( ) { return mGroupJid ; }
private boolean notifyIfMarkerTouch ( Marker marker , PointF touchCoordinate ) { if ( ! isMarkerTouch ( marker , touchCoordinate ) ) return false ; toggleMarkerSelection ( marker ) ; markerClickListener . markerClicked ( marker ) ; reDraw ( ) ; return true ; }
public void run ( ) { final Rect bounds = preferenceService . getSavedMapBounds ( orientation ) ; final MapScaleInfo scaleInfo = preferenceService . getSavedScaleInfo ( orientation ) ; updatePlayingState ( true ) ; animationView . startAnimation ( timestampView , seekBar , bounds , scaleInfo ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { binding = FragmentDailyDozenBinding . inflate ( inflater , container , false ) ; return binding . getRoot ( ) ; }
public static Connection sync ( TaskListener listener , Payload data ) { data . taskType = SYNC ; return launchConnectionTask ( listener , data ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( context , MapsActivity . class ) ; context . startActivity ( intent ) ; }
public int compare ( ContactSort lhs , ContactSort rhs ) { return lhs . getHome ( ) . compareTo ( rhs . getHome ( ) ) ; }
public void testProductionConfigurationUserAsk ( ) throws Exception { setReportConfig ( FEEDBACK_REPORT_ASK ) ; setAcraConfig ( "Production" ) ; verifyACRANotDisabled ( ) ; assertToastMessage ( R . string . feedback_manual_toast_text ) ; assertToastIsEnabled ( ) ; assertDialogEnabledStatus ( "Dialog should be enabled" , true ) ; }
public static int getDietGoal ( Context context ) { return getSharedPreferences ( context ) . getInt ( DIET_GOAL , 1 ) ; }
public void addMenuItem ( DrawerMenuItem item ) { this . mMenuItems . add ( item ) ; }
public void testMinimalEncoder4 ( ) throws Exception { verifyMinimalEncoding ( "ABCD" , "ALPHANUMERIC ( ABCD ) , TERMINATOR ( ) " , null , false ) ; }
private void selectImageFromStorage ( ) { imageActivityHelper . getImageFromStorage ( this . geocode , false ) ; }
private void showNextPage ( ) { mIncreaseScoreTask . cancel ( ) ; PageCreator creator = mPageCreators . remove ( 0 ) ; setContent ( creator . createPage ( ) ) ; }
public void onAttachFragment ( Fragment fragment ) { attachPresenterToFragment ( fragment ) ; }
public double getLng ( ) { return lng ; }
public AbstractAddress newAddress ( String addressStr ) throws AddressMalformedException { return NxtFamilyAddress . fromString ( this , addressStr ) ; }
public String toString ( ) { return "LottieShapeRectangle { " + "cornerRadius = " + cornerRadius . getInitialValue ( ) + " , position = " + position + " , size = " + size + ' } ' ; }
public CardLayerAttribute getMyAttr ( BaseLayer l ) { int pos = mCardLayers . indexOf ( l ) ; if ( pos != - 1 ) return mCardLayerAttrs . get ( pos ) ; return null ; }
public void select ( ArrayList < Integer > positions ) { selectedItems . clear ( ) ; for ( int i : positions ) { selectedItems . append ( i , true ) ; notifyItemChanged ( i ) ; } onSelectionListener . onSelectionChanged ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . whatsappcleaner" , appContext . getPackageName ( ) ) ; }
public static synchronized void initialize ( ) { if ( instance == null ) instance = new SoundHandler ( ) ; }
public void deleteSelectedMessages ( ) { ArrayList < MESSAGE > selectedMessages = getSelectedMessages ( ) ; delete ( selectedMessages ) ; unselectAllItems ( ) ; }
public int getTotalAppBarScrollingRange ( ) { return mAppbar . getTotalScrollRange ( ) ; }
public void setBackgroundResource ( int resId ) { button . setBackgroundResource ( resId ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( PreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . pref_account_settings ) ; }
public static boolean getSyncInvisibleContacts ( Context context ) { return getBoolean ( context , "pref_sync_invisible_contacts" , context . getResources ( ) . getBoolean ( R . bool . pref_default_sync_invisible_contacts ) ) ; }
public List < Encounter > getEncountersByEncounterTypeNameAndPatientUuid ( String name , String patientUuid ) throws DownloadEncounterException { try { return encounterService . getAllEncounterByEncounterTypeNameAndPatientUUid ( name , patientUuid ) ; } catch ( IOException e ) { throw new DownloadEncounterException ( e ) ; } }
public Enumeration list ( ) throws IOException { return this . list ( null , false ) ; }
public String getTitle ( ) { return mTitle ; }
public void testSafeToAddAuthToken18 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( wpcomAddress4 ) ) ) ; }
public void hideKeyboard ( View view ) { inputManager . hideSoftInputFromWindow ( view . getWindowToken ( ) , InputMethodManager . HIDE_IMPLICIT_ONLY ) ; }
public void setTipp ( String tipp ) { this . _tipp = tipp ; }
public EighthActivityBuilder bothblocks ( boolean bothblocks ) { this . bothblocks = bothblocks ; return this ; }
private void initInfiniteSoundPrefs ( ) { binding . infiniteSoundOptionPrefs . setReverseDependentView ( binding . globalOptionPrefs ) ; binding . infiniteSoundOptionPrefs . setChecked ( mPrefs . isBirthdayInfiniteSoundEnabled ( ) ) ; binding . infiniteSoundOptionPrefs . setOnClickListener ( view -> changeInfiniteSoundPrefs ( ) ) ; }
public void creation_isCorrect ( ) throws Exception { URLBuilder builder = new URLBuilder ( appContext ) ; }
public void addItemDecoration ( RecyclerView . ItemDecoration decor ) { if ( mRecyclerView == null ) { return ; } mRecyclerView . addItemDecoration ( decor ) ; }
public void setDescription ( String description ) { this . description = StringUtils . notNullStr ( description ) . trim ( ) ; }
public void updateCity ( City city ) { mSwipeRefresh . setRefreshing ( false ) ; mAdapter . updateCity ( city ) ; }
private boolean ready ( ) { return webView != null && urls . size ( ) > 0 ; }
public List < ScheduleItemDTO > getSpeakerPresentations ( int speakerId , DateTime startDate , DateTime endDate ) { List < SummitEvent > speakerEvents = summitEventDataStore . getSpeakerEvents ( speakerId , startDate , endDate ) ; return createDTOList ( speakerEvents , ScheduleItemDTO . class ) ; }
public void onClick ( boolean longClick ) { try { c . startActivity ( goToMarket ) ; } catch ( ActivityNotFoundException e ) { c . startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( "http : } }
private void showEndLine ( boolean show ) { mDrawEndLine = show ; initTimeline ( ) ; }
public void onBackPressed ( ) { setShowNotifications ( false ) ; super . onBackPressed ( ) ; }
public static void setFont ( String name ) { AssetManager mng = jLatexMath . getAssetManager ( ) ; font = Typeface . createFromAsset ( mng , name ) ; }
public void setDecryptedAuthor ( String value ) { this . decryptedAuthor = value ; }
public void onChildItemClicked ( long idFeed , Long optional_folder_id ) { if ( drawerLayout != null ) drawerLayout . closeDrawer ( GravityCompat . START ) ; updateDetailFragment ( idFeed , false , optional_folder_id , true ) ; }
public String get ( String key ) { return settings . get ( key ) ; }
public void onClick ( DialogInterface dialog , int which ) { if ( createKeyMap ) { createKeyMapForBlock ( 0 ) ; } }
public void setAnimation ( String animationName ) { setAnimation ( animationName , CacheStrategy . None ) ; }
public void onPause ( ) { super . onPause ( ) ; hideKeyboard ( getActivity ( ) ) ; }
public ChangeSortField ( Model model , int idx ) { this . model = model ; this . idx = idx ; }
public float getAngle ( ) { return GylMathUtils . normalizeAngle ( mBody . getAngle ( ) * MathUtils . radiansToDegrees ) ; }
public void onPanelCollapsed ( View panel ) { fab . show ( ) ; description . smoothScrollTo ( 0 , 0 ) ; }
public void onTransactionBroadcastError ( Transaction tx ) { }
public int getMeleeCount ( ) { return mMeleeUnits . size ( ) ; }
public MutableLiveData < StockState > getStockProducts ( ) { return stockProducts ; }
public String desc ( ) { return Game . getVar ( R . string . Sorrowmoss_Desc ) ; }
public void onPeriodicNotification ( AudioRecord recorder ) { if ( audioRecord . getRecordingState ( ) == AudioRecord . RECORDSTATE_RECORDING && audioRecord . read ( buffer , 0 , buffer . length ) != - 1 ) { mEqwaves . updateView ( buffer ) ; } }
public boolean onInterceptTouchEvent ( @ NonNull MotionEvent ev ) { if ( _blockTouch ) { return true ; } return super . onInterceptTouchEvent ( ev ) ; }
public void setTimezone ( TimeZone timezone ) { getPreferences ( ) . edit ( ) . putString ( PROPERTY_TIMEZONE , timezone . getID ( ) ) . commit ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_folder , container , false ) ; unbinder = ButterKnife . bind ( this , view ) ; return view ; }
public void notifyDataChanged ( ) { init ( ) ; }
private void directionRightArchive ( ) { String codeId = parcelItems . get ( onSwipePosition ) . getParcelId ( ) ; databaseHelper . updateArchived ( codeId , true ) ; readItems ( ) ; }
public void onClick ( View v ) { Toast . makeText ( getApplicationContext ( ) , "Your message emailed to Sapne Team" , Toast . LENGTH_LONG ) . show ( ) ; }
public T withSelectedIcon ( int selectedIconRes ) { this . selectedIcon = new ImageHolder ( selectedIconRes ) ; return ( T ) this ; }
public Item ( @ Nullable Bitmap icon , @ Nullable String label , @ Nullable View . OnClickListener onClick ) { this . id = ViewIdGenerator . generateViewId ( ) ; this . label = label ; this . icon = icon ; this . onClick = onClick ; }
public void setData ( List < LayoutElementParcelable > data ) { clear ( ) ; if ( data != null ) { addAll ( data ) ; } }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { GPSApplication . getInstance ( ) . setTrackViewer ( evList . get ( position ) ) ; OpenTrack ( ) ; dialog . dismiss ( ) ; }
private void prepare ( AttributeSet attrs ) { plotParameters . twoDPlotStyle = TwoDPlotStyle . CONTOUR ; }
public ExchangeRate getItem ( int position ) { return exchangeRates . get ( position ) ; }
public void onPhotoTap ( View view , float x , float y ) { loadImage ( ) ; }
public void addRange ( @ NonNull String first , @ NonNull String last ) throws IPFilterException { ranges . add ( Pair . create ( first , last ) ) ; }
public final void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { }
public void onStickerSetRemove ( TLRPC . StickerSetCovered stickerSet ) { DataQuery . getInstance ( currentAccount ) . removeStickersSet ( parentActivity , stickerSet . set , 0 , parentFragment , false ) ; }
public String type ( ) { return XMLPrefsSave . BOOLEAN ; }
public void removeAllInstancesOfName ( int position ) { String name = getName ( position ) ; int amount = nameMap . get ( name ) . getAmount ( ) ; removeNames ( name , amount ) ; }
public boolean attachTo ( Char target ) { if ( super . attachTo ( target ) ) { Dungeon . observe ( ) ; return true ; } else { return false ; } }
public void swapDataSet ( ArrayList < Genre > dataSet ) { this . dataSet = dataSet ; notifyDataSetChanged ( ) ; }
public static Fragment newInstance ( CubeMapView . Face faces [ ] ) { Bundle args = new Bundle ( ) ; args . putParcelableArray ( FACES , faces ) ; SamplerCubePropertiesFragment fragment = new SamplerCubePropertiesFragment ( ) ; fragment . setArguments ( args ) ; return fragment ; }
private void setLoadingState ( boolean visible ) { if ( progressBar != null ) { progressBar . setVisibility ( visible ? View . VISIBLE : View . GONE ) ; } }
private void initSbPrefs ( ) { binding . permanentNotificationPrefs . setOnClickListener ( mSbClick ) ; binding . permanentNotificationPrefs . setChecked ( mPrefs . isSbNotificationEnabled ( ) ) ; }
public int getItemCount ( ) { return PREFERENCES_SECTION_ITEMS + 1 ; }
public static void startForSendAttachments ( Context context , int accountId , AbsModel model ) { startForSendAttachments ( context , accountId , new ModelsBundle ( 1 ) . append ( model ) ) ; }
public RecyclerSupport setOnNextPageRequestListener ( OnNextPageRequestListener listener , int oneItemViewsCount , boolean showesLoader ) { onNextPageRequestListener = listener ; recyclerView . addOnScrollListener ( new OnLoadMoreScrollListener ( oneItemViewsCount , showesLoader ) ) ; return this ; }
public Long getReward ( ) { return reward ; }
public void onReceive ( Context context , Intent intent ) { recentListAdapter . clearSelection ( ) ; }
public void run ( ) { NativeNotificationsUtils . dismissNotification ( GCMMessageService . ACTIONS_RESULT_NOTIFICATION_ID , mContext ) ; }
public String voivodeship ( ) { return formatHelper . formatVoivodeship ( dto . voivodeship ( ) ) ; }
public Map getTimers ( ) throws RemoteException { return connections . get ( connectionClutch ) . getTimers ( ) ; }
public PinDialog ( final Context context , final int themeResId , final @ NotNull PinDialogCallback pinCallback ) { this ( context , themeResId , pinCallback , context . getString ( R . string . pindialog_title_default ) ) ; }
public View onCreateInputView ( ) { mInputView = ( CustomKeyboard ) getLayoutInflater ( ) . inflate ( R . layout . keyboard , null ) ; mInputView . setOnKeyboardActionListener ( this ) ; mInputView . setPreviewEnabled ( false ) ; setLatinKeyboard ( mQwertyKeyboard ) ; return mInputView ; }
public SearchBarAnimator getSearchAnimator ( ) { return new SearchBarAnimator ( ) ; }
private void subTestHDR ( List < Bitmap > inputs , String output_name , boolean test_dro ) throws IOException , InterruptedException { subTestHDR ( inputs , output_name , test_dro , HDRProcessor . TonemappingAlgorithm . TONEMAPALGORITHM_REINHARD ) ; }
public VideoSlide ( Context context , Uri uri , long dataSize ) { super ( context , constructAttachmentFromUri ( context , uri , MediaUtil . VIDEO_UNSPECIFIED , dataSize , 0 , 0 , MediaUtil . hasVideoThumbnail ( uri ) , null , false ) ) ; }
private void CopyFrom ( Matrix p ) { if ( isSameOrder ( p ) ) { this . Elements = p . Elements . clone ( ) ; } }
public static void setSortOrder ( Context context , OCFile folder , FileSortOrder sortOrder ) { setFolderPreference ( context , AUTO_PREF__SORT_ORDER_NAME , folder , sortOrder . mName ) ; }
private boolean useSystemEmoji ( ) { return Prefs . isSystemEmojiPreferred ( getContext ( ) ) ; }
public void addFavoriteStation ( String id ) { db = dbHelper . getWritableDatabase ( ) ; ContentValues values = new ContentValues ( ) ; values . put ( DatabaseHelper . FAV_STATIONS_COLUMN_ID , id ) ; db . insert ( DatabaseHelper . FAV_STATIONS_TABLE_NAME , null , values ) ; }
private int getEventIconResId ( Review review ) { switch ( review . state ( ) ) { case Approved : return R . drawable . timeline_event_approved ; case ChangesRequested : return R . drawable . timeline_event_requested_changes ; default : return R . drawable . timeline_event_reviewed ; } }
private void showRecyclerView ( ) { if ( tvEmpty . getVisibility ( ) == View . VISIBLE ) { tvEmpty . setVisibility ( View . GONE ) ; recyclerView . setVisibility ( View . VISIBLE ) ; } }
public void onFileDownloaded ( String path ) { mCurrentExtension = null ; if ( mFileDownloadedListener != null ) { mFileDownloadedListener . onFileDownloaded ( path ) ; } }
public void onRefresh ( ) { int size = mCommentAdapter . listSize ( ) ; int page = ( size / ONE_PAGE_COMMENT_COUNT ) + 1 ; mPresenter . refreshComments ( page ) ; }
public void setItemPriceAtOrder ( Integer itemPriceAtOrder ) { this . itemPriceAtOrder = itemPriceAtOrder ; }
public ProgressViewHolder ( View v ) { super ( v ) ; progressBar = ( ProgressBar ) v . findViewById ( R . id . progressBar1 ) ; }
public BookmarkCard ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public boolean getVideoLowPowerCheckPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . getVideoLowPowerCheckPreferenceKey ( ) , true ) ; }
public String prompt ( ) { return Game . getVar ( R . string . Toolbar_Info2 ) ; }
public void onClick ( View v ) { PreferencesManager . get ( ) . setDefaultLocation ( location ) ; if ( adapter != null ) { adapter . notifyDataSetChanged ( ) ; } showSnackbar ( parent , context . getString ( R . string . default_location_set ) ) ; }
private void showSnackbarMessage ( int textResource ) { Snackbar . make ( mCoordinatorLayout , textResource , Snackbar . LENGTH_SHORT ) . show ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { onActionMenuItemSelected ( post , fragmentParent , menu . get ( which ) . action ) ; }
private void afterTextViewChanged ( TextView target , String fieldName ) { state . putString ( fieldName , String . valueOf ( target . getText ( ) ) ) ; }
public void setUrl ( String url ) { sharedPref . edit ( ) . putString ( "pref_key_url" , url ) . apply ( ) ; }
public void onViewRecycled ( FoundItemHolder holder ) { if ( holder . itemView . getContext ( ) != null ) Glide . with ( holder . itemView . getContext ( ) ) . clear ( holder . cover ) ; }
public IconLabelItem withIconSize ( Context context , int iconSize ) { _iconSize = Tool . dp2px ( iconSize ) ; return this ; }
public void onClick ( View view ) { QuickActionsPopup popup = new QuickActionsPopup ( context , holder . tweetId , screenname , tweetText ) ; popup . setExpansionPointForAnim ( holder . quickActions ) ; popup . setOnTopOfView ( holder . quickActions ) ; popup . show ( ) ; }
public void onNewToken ( String token ) { if ( IS_SHOWLOG ) { WLog . w ( "Refreshed token : " + token ) ; } ; ( ( BaseApplication ) getApplication ( ) ) . getBaseDao ( ) . setFCMToken ( token ) ; }
private void register ( ) { if ( ! isRegistered ) { sensorManager . registerListener ( this , this . sensor , DELAY_MODE_VALUES [ this . currentDelay ] ) ; isRegistered = true ; } }
public void formOpened_whenDuplicatedEntriesInHistory_showsOneAutoCompletion ( ) { historyGenerator . generatePgeG11Bill ( 25 ) ; historyGenerator . generatePgeG11Bill ( 25 ) ; tester . skipCheckPricesDialogIfVisible ( ) . openForm ( Provider . PGE ) ; tester . autoCompleteContains ( "25" ) ; }
public Typeface getMerriweatherSansBold ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/MerriweatherSans - Bold . ttf" ) ; }
public byte [ ] toJsonBytes ( @ NonNull MessageBase message ) throws IOException { return encryptBytes ( toJsonPlainBytes ( message ) ) ; }
public void shouldNotifySuccess ( ) throws Exception { givenValidRequestParameters ( ) ; whenExecuting ( ) ; thenCallbackShouldBeSuccess ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . android . liste" , appContext . getPackageName ( ) ) ; }
public String toString ( ) { return "Entry , x : " + x + " y ( sum ) : " + getY ( ) ; }
public void startSweeps ( ) { nSweeps = 1 ; showSweeps ( ) ; index = 0 ; acceptData = true ; doSweeps = true ; }
public void onIqPacketReceived ( final Account account , final IqPacket packet ) { if ( packet . getType ( ) == IqPacket . TYPE_RESULT ) { account . getBlocklist ( ) . add ( jid ) ; updateBlocklistUi ( OnUpdateBlocklist . Status . BLOCKED ) ; } }
public boolean isButtonNextVisible ( ) { return binding . miButtonNext . getVisibility ( ) == View . VISIBLE ; }
private void openHelp ( boolean useBackStack ) { Fragment f = new HelpListFragment ( ) ; startFragment ( f , useBackStack ) ; selectNavigationDrawerItem ( R . id . nav_help ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newAddMealFragmentComponent ( new AddMealFragmentModule ( this , savedInstanceState ) ) . inject ( this ) ; componentFactory = null ; }
public boolean onTouch ( View v , MotionEvent event ) { coord [ 2 ] = ( int ) event . getRawX ( ) ; coord [ 3 ] = ( int ) event . getRawY ( ) ; return false ; }
public Long addNewBasic2Model ( String name ) { return addNewCustomModel ( name , Basic2Model . FIELDS , Basic2Model . CARD_NAMES , Basic2Model . QFMT , Basic2Model . AFMT , null , null ) ; }
public List < Encounter > getEncountersByEncounterTypeIdAndPatientUuid ( int encounterTypeId , String patientUuid ) throws DownloadEncounterException { try { return encounterService . getAllEncounterByEncounterTypeIdAndPatientUUid ( encounterTypeId , patientUuid ) ; } catch ( IOException e ) { throw new DownloadEncounterException ( e ) ; } }
public View parseView ( ViewGroup parent , String formula , String result ) { ViewHolder holder = onCreateViewHolder ( parent , 0 ) ; invalidate ( holder , new HistoryEntry ( formula , result , - 1 ) , null ) ; return holder . itemView ; }
public void redrawItems ( ) { ( ( ArchivedListsAdapter ) mRecyclerView . getAdapter ( ) ) . replaceWith ( TinyListSQLHelper . getSqlHelper ( getActivity ( ) ) . getTaskLists ( true ) ) ; }
public void destroyItem ( ViewGroup collection , int position , Object view ) { collection . removeView ( ( View ) view ) ; }
public OnEmojiconClickedListener getOnEmojiconClickedListener ( ) { return onEmojiconClickedListener ; }
public static int y ( @ NonNull final int [ ] coords ) { return coords [ INDEX_Y ] ; }
private void updateCheckmarkVisibility ( ) { mItemCheckmark . setVisibility ( mIsSelected ? View . VISIBLE : View . GONE ) ; setItemCheckmarkAttributes ( 1 . 0f ) ; }
public TaskGroup ( String _name , String _description ) { m_name = _name ; m_description = _description ; }
public XValueMarker ( Number value , String text ) { super ( value , text , new YPositionMetric ( 3 , YLayoutStyle . ABSOLUTE_FROM_TOP ) ) ; }
public Boolean getVisible ( ) { return visible ; }
public double getLatitude ( ) { return getPosition ( ) . getLongitude ( ) ; }
public void setMinScale ( float min ) { this . minScale = min ; if ( gestureImageViewTouchListener != null ) { gestureImageViewTouchListener . setMinScale ( min * fitScaleHorizontal ) ; } }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { pageList . get ( pos ) . setIsSelected ( isChecked ) ; }
public int getAudioSessionId ( ) throws RemoteException { return mService . get ( ) . getAudioSessionId ( ) ; }
public static void setString ( Activity context , String key , String value ) { setStrings ( context , Collections . singletonList ( new Pair <> ( key , value ) ) ) ; }
public HorizontalProgressBackgroundDrawable ( Context context ) { super ( context ) ; }
public String getUserID ( ) { return userEdit . getId ( ) ; }
public boolean isFilled ( ) { return latitudePattern != EMPTY_FORMULA && longitudePattern != EMPTY_FORMULA ; }
public void onResume ( ) { super . onResume ( ) ; settingsProvider . getGeneralSettings ( ) . registerOnSettingChangeListener ( this ) ; }
private void refreshLeaderboard ( ) { if ( viewModel != null ) { viewModel . refresh ( duration , category , limit , offset ) ; setLeaderboard ( duration , category , limit , offset ) ; } }
public void onItemClick ( RepositoryContents content ) { mCallback . onTreeSelected ( content ) ; }
public String getShitRatingPrivacy ( ) { return ShitRatingPrivacy ; }
public void nextDayByHour ( ) { LocalDate date = SchoolWeek . nextFrom ( new DateTime ( 2015 , 06 , 15 , 21 , 0 ) ) ; assertEquals ( "Sunday to next week" , 16 , date . getDayOfMonth ( ) ) ; }
public void doLogout ( DialogInterface dialog , int which ) { setContentView ( R . layout . splash ) ; new DeleteClientAndNavigateToLogin ( ) . execute ( ) ; finish ( ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mPoints ) ; }
public int getItemViewType ( int position ) { return mDisplayItems . get ( position ) . isHeader ( ) ? R . layout . row_header : R . layout . row_block ; }
public void onSearch ( String query ) { view . loadingMode ( ) ; LoadImages loadImages = new LoadImages ( this ) ; loadImages . execute ( query ) ; }
public void setAuthorNickname ( String authorNickname ) { this . author = authorNickname ; }
private static File getThemesDir ( Context context ) { return new File ( context . getFilesDir ( ) , "themes/cachegit c" ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . second_trial , menu ) ; return true ; }
public boolean hasStaticThumb ( ) { return staticThumb != null ; }
public Prefs ( Context context ) { mPreferences = context . getSharedPreferences ( providePreferenceName ( ) , Context . MODE_PRIVATE ) ; mRxSharedPreferences = RxSharedPreferences . create ( mPreferences ) ; }
public void run ( ) { if ( delayedOpenAnimationRunnable != this ) { return ; } delayedOpenAnimationRunnable = null ; startLayoutAnimation ( true , true ) ; }
public void fadeOut ( ) { GL2JNILib . fadeOut ( ) ; }
public void currentChanged ( Championship championship , int index ) { updateChampionshipDetails ( championship ) ; }
public CharSequence getPageTitle ( int position ) { if ( usedArray != null && position != toOpenComments ) { return abbreviate ( usedArray . get ( position ) , 25 ) ; } else { return "" ; } }
private boolean openPreviousArticle ( ) { if ( previousArticleID != null ) { openArticle ( previousArticleID ) ; return true ; } Toast . makeText ( this , R . string . noPreviousArticle , Toast . LENGTH_SHORT ) . show ( ) ; return false ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . trip_save_menu , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void getList ( final int page ) { getList ( page , false ) ; }
public void setDatabasePath ( String databasePath ) { preferences . edit ( ) . putString ( DATABASE_PATH , databasePath ) . commit ( ) ; }
public InputViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public synchronized void releaseLicense ( byte [ ] offlineLicenseKeySetId ) throws DrmSessionException { Assertions . checkNotNull ( offlineLicenseKeySetId ) ; blockingKeyRequest ( DefaultDrmSessionManager . MODE_RELEASE , offlineLicenseKeySetId , null ) ; }
public void setImage ( int isBookmarked ) { isChecked = ( isBookmarked == 1 ) ; mBookmark . setImageResource ( isChecked ? R . drawable . ic_bookmark_on : R . drawable . ic_bookmark_off ) ; }
public int getStartDate ( ) { return startDate ; }
public int getCount ( ) { return pageCount ; }
public boolean containsAll ( Collection < ? > c ) { return filters . containsAll ( c ) ; }
public static boolean isKeepLastNode ( ) { return getBoolean ( R . string . pref_key_is_keep_selected_node , true ) ; }
public String getName ( ) { return "Pie buttons" ; }
public Observable < Message > updateFoodtruckReview ( String reviewId , Review review ) { return foodtruckApiService . updateReview ( reviewId , review ) ; }
public String info ( ) { return super . info ( ) + "\n\n" + Game . getVar ( R . string . CorpseDust_Info2 ) ; }
public boolean isJetpackProtectEnabled ( ) { return mSettings . jetpackProtectEnabled ; }
public double distanceTo ( @ NonNull MLocation dest ) { return distanceTo ( latitude , longitude , dest . latitude , dest . longitude ) ; }
public DrawerBuilder withCustomView ( View customView ) { this . mCustomView = customView ; return this ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( type ) ; dest . writeDouble ( value ) ; }
public void mtuChangedMsgInit ( ) { handler . removeMessages ( BleMsg . MSG_SET_MTU_START ) ; }
public SearchObjects getDeepSearchObjectses ( ) { return this . deepSearchObjects ; }
public Binder < CommentVideoEmbedView > createBinder ( Comment model ) { return new CommentVideoEmbedBinder ( model ) ; }
public String getRecordAudioSourcePref ( ) { return sharedPreferences . getString ( PreferenceKeys . getRecordAudioSourcePreferenceKey ( ) , "audio_src_camcorder" ) ; }
public FileReceiver ( ) { this ( true , null ) ; }
public CameraController ( ) { threadPool = new ThreadPoolExecutor ( CORE_POOL_SIZE , MAX_POOL_SIZE , KEEP_ALIVE_SECONDS , TimeUnit . SECONDS , new LinkedBlockingQueue < Runnable > ( ) ) ; }
public String getScannerSite ( ) { return scannerSite ; }
public void fadeIn ( ) { mKeypad . setAlpha ( 1 ) ; mCallButton . fadeIn ( ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( fromUser ) { mConnectText . setText ( String . valueOf ( progress ) ) ; mConnection . mConnectTimeout = progress ; } }
private void connectTransporters ( ) { Logger . trace ( "TransportService connectTransporters" ) ; connectTransporterAmazMod ( ) ; connectTransporterNotifications ( ) ; connectTransporterHuami ( ) ; }
private void handleDisplayGroupRecipients ( ) { new GroupMembersDialog ( this , getRecipients ( ) ) . display ( ) ; }
public float bottom ( ) { return y + height ( ) ; }
public void disable ( ) { synchronized ( mActivePing ) { for ( PingTask request : mActivePing . values ( ) ) request . stop ( ) ; } }
public void setLoadingVisibility ( int visibility ) { this . loadingVisibility = visibility ; notifyPropertyChanged ( BR . loadingVisibility ) ; }
public boolean onPreDraw ( ) { fixLayoutInternal ( ) ; if ( listView != null ) { listView . getViewTreeObserver ( ) . removeOnPreDrawListener ( this ) ; } return false ; }
public void onRequestSuccess ( Object o ) { progressBar . setVisibility ( View . GONE ) ; securePreferences . edit ( ) . remove ( Constants . RECEIVED_NOTIF ) . commit ( ) ; syncAdapterWithDB ( ) ; }
public int getRub3FromPage ( int page ) { if ( ( page > PAGES_LAST ) || ( page < 1 ) ) return - 1 ; return pageRub3Start [ page - 1 ] ; }
public void onFailure ( Call < AutoLoginToken > call , Throwable t ) { failedFeedback ( getString ( R . string . webactivity_open_page_failed ) ) ; }
public static String getStringTo ( String to ) { return Utils . getStringFormat ( context , R . string . log_to_mask , to ) ; }
public Shader ( int type ) { handle = GLES20 . glCreateShader ( type ) ; if ( handle == 0 ) { throw new AssertionError ( ) ; } }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonSetEditor . this . getContext ( ) , ButtonSetEditor . this , newsettings . getSelectedColor ( ) , COLOR_FIELDS . COLOR_SELECTED ) ; diag . show ( ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mViewEntryAdapter . swapCursor ( null ) ; loader . reset ( ) ; }
public boolean scrolled ( int amount ) { return true ; }
public void showError ( Boolean value ) { if ( value ) depictsSearchContainer . setError ( getString ( R . string . no_depiction_found ) ) ; else depictsSearchContainer . setErrorEnabled ( false ) ; }
private synchronized static void storeInfo ( Context con , Info i ) { quickCache ( i ) ; StockStoreDatabase store = getStore ( con ) ; store . storeInfo ( i ) ; store . cleanup ( con ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_guide , container , false ) ; }
public static boolean isCheckOutsideChanging ( ) { return getBoolean ( R . string . pref_key_check_outside_changing , true ) ; }
private ClaimMintIncentiveActivity getSActivity ( ) { return ( ClaimMintIncentiveActivity ) getBaseActivity ( ) ; }
public void setTheme ( WidgetTheme theme ) { this . mTheme = theme ; }
public PostListingController . Sort getOrder ( ) { return order ; }
public void onSaveInstanceState ( Bundle b ) { super . onSaveInstanceState ( b ) ; b . putBoolean ( "ggs_changed" , changed ) ; b . putBoolean ( "ggs_recreate" , recreate ) ; }
public int getOldListSize ( ) { return mOldList . size ( ) ; }
public void setShortUrl ( String url ) { this . shortUrl = StringUtils . notNullStr ( url ) ; }
public void onError ( Throwable e ) { Timber . e ( e , "resetAll" ) ; }
public void setPause ( boolean animate ) { if ( animate ) { if ( isPlaySet ) { togglePlayPause ( ) ; } } else { isPlaySet = false ; isPlay = false ; setProgress ( 0 ) ; } }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , false ) ; return inflater . inflate ( R . layout . home_layout , container , false ) ; }
public Preference < String > getPreference ( ) { return mTopicPreference ; }
private void addCounter ( @ NonNull final IntegerCounter counter ) { CounterApplication . getComponent ( ) . localStorage ( ) . write ( counter ) ; new BroadcastHelper ( this . getContext ( ) ) . sendSelectCounterBroadcast ( counter . getName ( ) ) ; }
public static synchronized FluentQuery order ( String column ) { FluentQuery cQuery = new FluentQuery ( ) ; cQuery . mOrderBy = column ; return cQuery ; }
public Maybe < Event > edit ( Event entity ) { return Maybe . just ( entity ) ; }
public void setMaxY ( Number maxY ) { yLineRegion . setMaxVal ( maxY ) ; }
public Date getTime ( ) { return time ; }
public HelpActivity ( ) { super ( URL , TITLE ) ; }
public GeometryBuffer clear ( ) { index [ 0 ] = 0 ; indexPos = 0 ; pointPos = 0 ; type = GeometryType . NONE ; return this ; }
private void setUpRecyclerView ( ) { mForumListAdapter = new ForumListAdapter ( getActivity ( ) , mForums , mToken ) ; mForumRecView . setLayoutManager ( new LinearLayoutManager ( getActivity ( ) ) ) ; mForumRecView . setAdapter ( mForumListAdapter ) ; }
public List < VersionedRook > getBooks ( ) throws IOException { SystemClock . sleep ( SLEEP_FOR_GET_BOOKS ) ; return localDbRepo . getBooks ( ) ; }
public int getViewVerticalDragRange ( View child ) { return slideRange ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; setHasOptionsMenu ( true ) ; mLookedUpIsbnListAdapter = new LookedUpIsbnListAdapter ( getActivity ( ) ) ; setListAdapter ( mLookedUpIsbnListAdapter ) ; }
public void onCreate ( ) { super . onCreate ( ) ; AppSettings . Init ( this ) ; mFirebaseAnalytics = FirebaseAnalytics . getInstance ( this ) ; }
public List < CategoryItem > getSelectedCategories ( ) { return remoteDataSource . getSelectedCategories ( ) ; }
private void directionRightReturn ( ) { String codeId = parcelItems . get ( onSwipePosition ) . getParcelId ( ) ; databaseHelper . updateArchived ( codeId , false ) ; readItems ( null ) ; }
public Builder ( String id , String personPhoneNumber , Double amount , long createdDate , int debtType , int status ) { mId = id ; mAmount = amount ; mCreatedDate = createdDate ; mPersonPhoneNumber = personPhoneNumber ; mDebtType = debtType ; mStatus = status ; }
public GanjoorDbBrowser ( Context context , String dbPath ) { OpenDatbase ( dbPath ) ; }
public void onClick ( View view ) { setTime ( ) ; }
public void onLoadFinished ( @ NonNull Loader < ArrayList < Genre >> loader , ArrayList < Genre > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfFlock_Info ) ; }
public void deleteItem ( String uuid ) { DeleteItemInteractor interactor = new DeleteItemInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , uuid ) ; interactor . execute ( ) ; }
public void run ( ) { mHandler . removeCallbacks ( triggerRefresh ) ; mSpeedStatus . setText ( netstat ) ; mChartAdapter . notifyDataSetChanged ( ) ; mHandler . postDelayed ( triggerRefresh , OpenVPNManagement . mBytecountInterval*1500 ) ; }
public double getValue ( ) throws ExpressionFormatException { if ( atomType != Atom . AtomType . INVALID ) return value ; else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
public void warn ( String msg ) { Log . w ( mTag , msg ) ; }
public void onClick ( View v ) { if ( ! BooksDbAdapter . getInstance ( ) . getActiveBookUID ( ) . equals ( bookUID ) ) { GnuCashApplication . loadBook ( bookUID ) ; } }
private void createPreferencesMenu ( ) { Intent i = new Intent ( this , GeneralPreferencesActivity . class ) ; startActivity ( i ) ; }
private void setUpDefaultPis ( ) { LinearLayout defaultPurchaseItem = ( LinearLayout ) findViewById ( R . id . create_purchase_purchase_item ) ; setUpPurchaseItemEditTexts ( defaultPurchaseItem ) ; }
public boolean onLongClick ( View v ) { return dispatchOnItemLongClick ( v , position ) ; }
public void run ( ) { try { if ( ! isFinishing ( ) ) { cl . show ( getSupportFragmentManager ( ) , "channellist" ) ; } } catch ( IllegalStateException e ) { } }
public void testMinimalEncoder24 ( ) throws Exception { verifyMinimalEncoding ( "A1234567890" , "ALPHANUMERIC ( A1 ) , NUMERIC ( 234567890 ) , TERMINATOR ( ) " , null , false ) ; }
private void delayedRefresh ( ) { Handler handler = new Handler ( ) ; handler . postDelayed ( new Runnable ( ) { public void run ( ) { mActionsListener . loadDevices ( ) ; } } , 1000 ) ; }
public static FrameLayout . LayoutParams createFrame ( int width , int height ) { return new FrameLayout . LayoutParams ( getSize ( width ) , getSize ( height ) ) ; }
public void accept ( WebApi . Result result ) throws Exception { c . setSupport ( c . getSupport ( ) + 1 ) ; mView . notifyItemChanged ( c ) ; }
public Drawable getDrawable ( String source ) { UrlDrawable urlDrawable = new UrlDrawable ( ) ; ImageGetterAsyncTask asyncTask = new ImageGetterAsyncTask ( urlDrawable , this , container , matchParentWidth ) ; asyncTask . execute ( source ) ; return urlDrawable ; }
public void onCorrectionStarted ( Track track ) { startNotification ( AudioItem . getFilename ( track . getPath ( ) ) , getString ( R . string . starting_correction ) , getString ( R . string . applying_tags ) , track . getMediaStoreId ( ) ) ; }
public IBinder onBind ( Intent pIntent ) { start ( pIntent ) ; mIsBound = true ; return mBinder ; }
public void getPastVisits ( Token token , Callback callback ) { webServiceGETMethod ( token , callback , "PatientVisitClosed" ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( screenshotTook ) ; checkScreenshots ( screenshotDates ) ; }
public DownloadAsyncTask ( String url , MainActivity activity ) { this . activity = activity ; urlToDownload = url ; userAgent = MainActivity . webWindows . get ( activity . getTabNumber ( ) ) . getSettings ( ) . getUserAgentString ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `navigation` INTEGER NOT NULL DEFAULT 0" ) ; }
public void onClick ( View v ) { Intent civilIntent = new Intent ( MainActivity . this , CivilHome . class ) ; startActivity ( civilIntent ) ; }
public void run ( ) { TcpClientService . this . send ( data , destination , mListener , mListenerLooper ) ; getLooper ( ) . quitSafely ( ) ; }
public void onAttachedToRecyclerView ( RecyclerView rV ) { super . onAttachedToRecyclerView ( rV ) ; recyclerView = rV ; }
public ServiceMessage . EndpointState getEndpointState ( ) { return endpointState ; }
public PatientVisitsRecyclerViewAdapter ( Context context , List < Visit > items ) { this . mContext = context ; this . mVisits = items ; }
public CategoryPresenterImpl ( RxBus _bus , CategoryView v , EONET eonet ) { bus = _bus ; view = v ; client = eonet ; }
public Class < ? extends Activity > getRingingActivity ( ) { return mRingingActivity ; }
private void stopScheduledExecutors ( ) { if ( mScheduledExecutor != null ) { mScheduledExecutor . shutdownNow ( ) ; mScheduledExecutor = null ; } if ( mSpecialButtonsLongHoldRunnable != null && mHandler != null ) { mHandler . removeCallbacks ( mSpecialButtonsLongHoldRunnable ) ; mSpecialButtonsLongHoldRunnable = null ; } }
public void onClick ( View v ) { if ( mItemClickListener != null ) { mItemClickListener . onItemClick ( mIcon , getAdapterPosition ( ) - ( mHasHeader ? 1 : 0 ) ) ; } }
public void onClick ( View view ) { inductanceMultiplier ( thirdColor ) ; }
public static void setAutoUploadMode ( Context context , boolean mode ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putBoolean ( PREFERENCES_TAG_UPLOAD_AUTOMATICALLY , mode ) . commit ( ) ; }
public void dialogIsCancellable ( ) { FragmentScenario < QuitFormDialogFragment > fragmentScenario = DialogFragmentTest . launchDialogFragment ( QuitFormDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( true ) ) ; } ) ; }
public void onBindViewHolder ( ForecastAdapterViewHolder forecastAdapterViewHolder , int position ) { String categoryName = categories . get ( position ) ; forecastAdapterViewHolder . mWeatherTextView . setText ( categoryName ) ; }
private Key onDownKey ( final int x , final int y , final long eventTime ) { CoordinateUtils . set ( mDownCoordinates , x , y ) ; mBogusMoveEventDetector . onDownKey ( ) ; return onMoveToNewKey ( onMoveKeyInternal ( x , y ) , x , y ) ; }
public void onClick ( View view ) { if ( account != null ) { googleSignInClient . signOut ( ) ; account = null ; opdaterKnap ( ) ; } else { startActivityForResult ( googleSignInClient . getSignInIntent ( ) , 1234 ) ; } }
private Song getSongToRemove ( ) { return songToRemove ; }
public void format ( Event e ) { format ( e , true ) ; }
public void onActivityStopped ( Activity activity ) { numStarted -- ; }
public int getGPUOffset ( ) { try { return mDeviceJson . getInt ( "gpu - offset" ) ; } catch ( JSONException ignored ) { return 1 ; } }
public static String getAuthorizationHeaders ( Context context ) { context = MyApplication . getAppContext ( ) ; if ( context == null ) { return null ; } return PrefLogin . baseEncoding ( PrefLogin . getUsername ( context ) , PrefLogin . getPassword ( context ) ) ; }
public void onTransactionBroadcastError ( Transaction tx ) { queueOnTransactionBroadcastFailure ( tx ) ; }
private void setUpSubFragments ( ) { playbackControlsFragment = ( PlaybackControlsFragment ) getChildFragmentManager ( ) . findFragmentById ( R . id . playback_controls_fragment ) ; playerAlbumCoverFragment = ( PlayerAlbumCoverFragment ) getChildFragmentManager ( ) . findFragmentById ( R . id . player_album_cover_fragment ) ; playerAlbumCoverFragment . setCallbacks ( this ) ; }
public int getStartMinute ( ) { return getSharedPreferences ( SettingActivity . PREFERENCE_NAME , SettingActivity . PREFERENCE_MODE ) . getInt ( SettingActivity . WORD_NOTIFICATION_START_TIME_MINUTE , 0 ) ; }
public static PlayerState fromContext ( Context context ) throws IOException { return fromFile ( new File ( context . getFilesDir ( ) , "player - state" ) ) ; }
public String getComposeHint ( ) { return composeHint ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "semicolons . vestium" , appContext . getPackageName ( ) ) ; }
public void notifyQuerySettingChanged ( ) { episodeListView_ . hideHeader ( ) ; loadRealm ( getFilterPodcastTitle ( ) ) ; adapter_ . notifyDataSetChanged ( ) ; }
public IntentUtils ( Activity activity ) { mActivity = activity ; }
public Drawable getIcon ( ) { return icon ; }
private final Constraints anyNetworkConstraint = new Constraints . Builder ( ) . setRequiredNetworkType ( NetworkType . CONNECTED ) . build ( ) ; @ Inject Preferences preferences ; @ Inject public Scheduler ( @ AppContext Context context ) { this . context = context ; }
private void setMatrixComponent ( final float [ ] matrix , int row , int col , float value ) { matrix [ row*3 + col ] = value ; }
public void showActors ( List < Result > results ) { btnSearch . setVisibility ( View . INVISIBLE ) ; floatingSearchView . swapSuggestions ( results ) ; }
public void onClick ( View v ) { bottomSheetDialogFragment = newInstance ( horizontalList . get ( pos ) ) ; bottomSheetDialogFragment . show ( getActivity ( ) . getSupportFragmentManager ( ) , bottomSheetDialogFragment . getTag ( ) ) ; }
public synchronized void setSourceFilesProcessed ( int sourceFilesProcessed ) { this . sourceFilesProcessed = sourceFilesProcessed ; }
public float getHeightScaleFactor ( ) { return mHeightScaleFactor ; }
public Drawable tintDrawable ( @ Nullable Drawable drawable , @ ColorInt int color ) { if ( drawable != null ) { drawable = DrawableCompat . wrap ( drawable ) ; DrawableCompat . setTint ( drawable . mutate ( ) , color ) ; } return drawable ; }
private void EntrarEmModoPesquisa ( ) { idAppBarLayout . setVisibility ( View . INVISIBLE ) ; idAppBarLayoutSearch . setVisibility ( View . VISIBLE ) ; idEdtSearch . requestFocus ( ) ; FunctionsTools . showKeybord ( ListClientActivity . this ) ; }
public void onSearchTextChanged ( String oldQuery , String newQuery ) { Log . debug ( getClass ( ) , "Searching for district with query '%s'" , newQuery ) ; districtsAdapter . search ( newQuery ) ; }
private LottieValueAnimator createAnimator ( ) { return new LottieValueAnimator ( ) { @ Override public void postFrameCallback ( ) { isRunning = true ; } @ Override public void removeFrameCallback ( ) { isRunning = false ; } } ; }
public void onAllPlaylistsReceived ( ) { getSherlockActivity ( ) . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { mPlaylists = mPlaylistManager . getAllPlaylists ( ) ; updatePlaylistSpinner ( ) ; RequestPlaylistSongs ( ) ; } } ) ; }
public Number getYVal ( float yPix ) { return getGraph ( ) . getYVal ( yPix ) ; }
public void run ( ) { hideLoadingAnimation ( ) ; mImageView . setVisibility ( View . VISIBLE ) ; mImageView . setImageURI ( Uri . parse ( path ) ) ; mAttacher . update ( ) ; hideLoadingAnimation ( ) ; }
public Series ( Series series ) { this . id = series . id ; this . name = series . name ; }
public LayoutParams ( int w , int h , int x , int y ) { super ( w , h ) ; this . _x = x ; this . _y = y ; }
public void requestPermission ( Activity activity ) { }
public void append ( String str , int flags ) { append ( str , flags , 0 , 0 , 1f ) ; }
public ExpertisesUsers getItem ( int position ) { return expertisesUsersList . get ( position ) ; }
public void onAdOpened ( ) { Log . d ( "Banner Ad Test" , "Add is Visible Now" ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_global_highlight , menu ) ; }
public void tearDown ( ) { Context context = InstrumentationRegistry . getTargetContext ( ) ; context . unregisterReceiver ( receiver ) ; EventBus . getDefault ( ) . unregister ( this ) ; WallpaperModel . removeModel ( model ) ; }
public static long getReaderCssUpdatedTimestamp ( ) { return getLong ( UndeletablePrefKey . READER_CSS_UPDATED_TIMESTAMP , 0 ) ; }
private void setContributionDate ( int index , LocalDate date ) { portfolio . setContributionDate ( index , date ) ; view . displayContributions ( portfolio . contributions ( ) ) ; }
public void assertOpacitySeekbarProgress ( int progress ) { Assert . assertEquals ( ( ( SeekBar ) mActivity . findViewById ( R . id . opacitySeek ) ) . getProgress ( ) , progress ) ; }
public static void unequip ( ) { Preferences . INSTANCE . put ( Accessory . class . getSimpleName ( ) , "" ) ; Dungeon . hero . updateSprite ( ) ; }
public void setUp ( ) throws Exception { MockitoAnnotations . initMocks ( this ) ; this . context = RuntimeEnvironment . application ; nameFormatHelper = new NameFormatHelper ( context ) ; }
public static void setExportToGPX ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_EXPORT_TO_GPX , value ) . commit ( ) ; }
private void isCastleAlive ( AnimacionTorre Castle ) { if ( Castle . getHp ( ) <= 0 ) { Castle . setAlive ( false ) ; } }
private final BroadcastReceiver broadcastReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { updateUI ( intent ) ; bar . setVisibility ( VISIBLE ) ; button . setVisibility ( GONE ) ; } } ;
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "br . edu . uepb . nutes . ocariot . uaal_poc" , appContext . getPackageName ( ) ) ; }
public TxData ( TxData txData ) { this . dst_addr = txData . dst_addr ; this . paymentId = txData . paymentId ; this . amount = txData . amount ; this . mixin = txData . mixin ; this . priority = txData . priority ; }
public boolean onTouchEvent ( MotionEvent event ) { if ( event . getAction ( ) == MotionEvent . ACTION_DOWN ) { player . setPlaying ( true ) ; return true ; } return super . onTouchEvent ( event ) ; }
public static boolean isWhiteToolbar ( Context context ) { AppSettings settings = AppSettings . getInstance ( context ) ; return settings . theme == AppSettings . THEME_WHITE_COLOR || settings . theme == THEME_YELLOW ; }
public void onButtonAddDescriptionClicked ( ) { UploadMediaDetail uploadMediaDetail = new UploadMediaDetail ( ) ; uploadMediaDetail . setManuallyAdded ( true ) ; uploadMediaDetailAdapter . addDescription ( uploadMediaDetail ) ; rvDescriptions . scrollToPosition ( uploadMediaDetailAdapter . getItemCount ( ) - 1 ) ; }
public void setContactId ( int contactId ) { this . contactId = contactId ; }
public static int calculateNumberOfColumns ( Context context ) { DisplayMetrics displayMetrics = context . getResources ( ) . getDisplayMetrics ( ) ; float dpWidth = displayMetrics . widthPixels / displayMetrics . density ; return ( int ) ( dpWidth / 140 ) ; }
public ListenedEpisodeRealm getListened ( ) { return listened ; }
public void setFrom ( final Jid from ) { if ( from != null ) { setAttribute ( "from" , from . toString ( ) ) ; } }
public GetAuthUserInteractor ( @ NonNull InteractorExecutorInterface interactorExecutor , @ NonNull Repository repository ) { super ( interactorExecutor ) ; this . repository = repository ; }
public static void setTrainingPeaksRefreshToken ( String token ) { cSharedPreferences . edit ( ) . putString ( SP_TRAINING_PEAKS_REFRESH_TOKEN , token ) . commit ( ) ; }
private void resolveUserInfoViews ( ) { if ( isGuiReady ( ) ) { getView ( ) . displayUserInfo ( currentUser ( ) ) ; } }
public static com . google . protobuf . Parser < Snake > parser ( ) { return PARSER ; }
public PhotoSizes setX ( String x ) { this . x = x ; return this ; }
public EmojiLite ( String unicode , boolean hasTone , int tone , int emojiOrder , EmojiCategory category ) { this ( unicode , hasTone , EmojiTone . getTone ( tone ) , emojiOrder , category ) ; }
public void setUserId ( int id ) { native_setUserId ( id ) ; }
public JobParameters create ( ) { return new JobParameters ( requirements , isPersistent , groupId , encryptionKeys , retryCount , System . currentTimeMillis ( ) + retryDuration , wakeLock , wakeLockTimeout ) ; }
private boolean getBoolean ( int keyId , boolean defaultValue ) { return settings . getBoolean ( getResString ( keyId ) , defaultValue ) ; }
public RedditUser asUser ( ) throws InstantiationException , IllegalAccessException , InterruptedException , IOException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditUser . class ) ; }
public void setOnEditorActionListener ( TextView . OnEditorActionListener onEditorActionListener ) { invisiblePinEditText . setOnEditorActionListener ( onEditorActionListener ) ; }
public boolean containsEntity ( ) { return hold == null ; }
public ProjectDisplayPage clickProjectDisplay ( ) { clickOnString ( R . string . project_display_title ) ; return new ProjectDisplayPage ( ) . assertOnPage ( ) ; }
public void personForm_isValid ( ) throws Exception { URLBuilder builder = new URLBuilder ( appContext ) ; String result = builder . buildFromPerson ( "Jeff Davis" ) ; assertEquals ( result , "https : }
public void onClick ( View v ) { generateNewSeed ( mnemonicView ) ; }
public void onPlaybackStateChanged ( @ NonNull PlaybackState state ) { scrobbler . setStatus ( state ) ; }
public void run ( ) { Dialogs . hideProgress ( ) ; Dialogs . error ( getString ( R . string . error ) , e . getMessage ( ) , e . getMessage ( ) , e , ProfileLinkReceiverActivity . this ) ; }
public void onCancel ( DialogInterface dialog ) { Intent quit = new Intent ( GameActivity . this , StartActivity . class ) ; startActivity ( quit ) ; }
public void onActivityDestroyed ( Activity activity ) { }
public void arrayToArrayList ( ) { List < Integer > list = new ArrayList <> ( ) ; Collections . addAll ( list , sampleItems ) ; assertThat ( ArrayUtil . toArrayList ( sampleItems ) , is ( list ) ) ; }
public void setPingTimes ( LinkedList < Float > mPingTimes ) { this . mPingTimes = mPingTimes ; }
public IntentBuilder replyVisibility ( String replyVisibility ) { this . replyVisibility = replyVisibility ; return this ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfTelekinesis_Info ) ; }
public void showHideTopCard ( boolean shouldShow ) { llContainerTopCard . setVisibility ( shouldShow?View . VISIBLE : View . GONE ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . setAnimationInProgress ( false ) ; if ( animationEndRunnable != null ) { animationEndRunnable . run ( ) ; animationEndRunnable = null ; } }
public void testSafeToAddAuthToken7 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( notWpcomAddress2 ) ) ; }
public static boolean isBatteryLow ( Context context ) { return Utils . getBatteryLevel ( context ) <= Utils . getDefaultBatteryLowLevel ( ) ; }
public List < AppDetail > getList ( ) { List < AppDetail > list = new ArrayList <> ( ) ; list . addAll ( this . list ) ; return list ; }
private static void UpdateEvent ( MoodleEvent old_event , MoodleEvent new_event ) { old_event = new_event ; old_event . save ( ) ; }
private void logout ( ) { EventReporter . addEvent ( AnalyticsParams . EVENT_LOGOUT ) ; EventReporter . reportEvent ( mContext ) ; revokeAccessToken ( ) ; }
public void setUp ( ) throws Exception { realm = Realm . getInstance ( TEST_REALM_CONFIG ) ; repository = new PreviewRepositoryImpl ( realm ) ; fillRealm ( ) ; }
public void getUnformattedCustomMediaUrlWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "1" ) ; setCustomServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public boolean saveSession ( ) { if ( ! gameSaveProperty . get ( ) ) { gameSaveProperty . set ( true ) ; } return true ; }
public void showAllCategoryBooks ( BookCategory category ) { BrowsingActivity . this . OnCategoryItemClick ( category ) ; }
private void goBack ( ) { getActivity ( ) . onBackPressed ( ) ; }
public static List < String > split ( String str ) { String [ ] parts = str . split ( " , " ) ; return Arrays . asList ( parts ) ; }
public static void i ( String message ) { Log . d ( TAG , message ) ; }
public com . google . protobuf . Any getNewPubKey ( ) { if ( newPubKeyBuilder_ == null ) { return newPubKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : newPubKey_ ; } else { return newPubKeyBuilder_ . getMessage ( ) ; } }
public void setTop_ausflugsziel ( boolean top_ausflugsziel ) { this . _top_ausflugsziel = top_ausflugsziel ; }
public RingBuff ( ) { level = Ring . this . level ; }
public static List < CoinType > getPossibleTypes ( Address address ) throws AddressFormatException { return getPossibleTypes ( address . toString ( ) ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { Utils . setSpacing ( getApplicationContext ( ) , progress , homeButton ) ; resetGuides ( ) ; }
public TrackProfileLayerRemote ( @ NonNull CloudData track , @ NonNull TrackData trackData ) { super ( track . track_id , track . getName ( ) , trackData , Colors . nextColor ( ) ) ; this . track = track ; }
public void onPositive ( MaterialDialog dialog ) { super . onPositive ( dialog ) ; Utils . openPlayStorePage ( context ) ; disableDialog ( editor ) ; }
public static boolean isAskBeforeSync ( Context context ) { return getBoolean ( context , R . string . pref_key_is_ask_before_sync , true ) ; }
public void setBorderSize ( int borderSize ) { this . borderSize = borderSize ; }
public String getAdr_ort ( ) { return this . _adr_ort ; }
public boolean isVisible ( ) { return mVisibility . equals ( "visible" ) ; }
public void onComboChange ( String language , ComponentName service ) { setUtteranceRewriter ( language , service ) ; }
private void startMonitorSensorData ( ) { doTurnOffOneTimeHeartRateSensor ( ) ; }
public void setMembers ( Map < String , String > members ) { this . members = members ; }
private Runnable action = new Runnable ( ) { @ Override public void run ( ) { GameState . mKeyPressed ( x , bat ) ; mHandler . postDelayed ( this , delay ) ; } } ;
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return "Latest News" ; case 1 : return "Top News" ; case 2 : return "All" ; } return null ; }
public Player ( ) { this . _handspinnerChangedEvent = BehaviorSubject . create ( ) ; this . _coinCountChangedEvent = BehaviorSubject . create ( ) ; }
public static String getName ( Element item ) { Elements elements = item . select ( "title" ) ; if ( elements . size ( ) > 0 ) return elements . get ( 0 ) . text ( ) ; else return "" ; }
public Paperwork providePaperwork ( @ NonNull DigitalismaApplication app ) { return new Paperwork ( app ) ; }
public int getId ( ) { return Id ; }
public void setContoursEnabled ( boolean enabled ) { for ( MapTrekDataSource source : mMapTrekDataSources ) source . setContoursEnabled ( enabled ) ; }
public int getItemViewType ( int position ) { if ( mMyStarNameDomains . size ( ) == 0 ) { return TYPE_PROMOTION ; } else { return TYPE_MY_DOMAIN ; } }
public boolean onLongClick ( View v ) { currentCalculation += " , " ; displayCalculation += " , " ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; return true ; }
public boolean onQueryTextSubmit ( String query ) { onQuerySubmit ( query ) ; return false ; }
private void parseUpdateTrackPosition ( ResponseUpdateTrackPosition responseUpdateTrackPosition ) { App . mClementine . setSongPosition ( responseUpdateTrackPosition . getPosition ( ) ) ; }
public Attachment ( Uri uri , String mime_type ) { this ( Calendar . getInstance ( ) . getTimeInMillis ( ) , uri , null , 0 , 0 , mime_type ) ; }
public FormEndPage swipeToEndScreen ( ) { flingLeft ( ) ; return waitFor ( ( ) -> new FormEndPage ( formName ) . assertOnPage ( ) ) ; }
public void testSpecialSymbolsMediaIDStructure ( ) throws Exception { String mediaID = MediaIDHelper . createMediaID ( "78A_88|X/3" , "BY_GENRE" , "Classic 70's" ) ; assertEquals ( "Classic 70's" , MediaIDHelper . extractBrowseCategoryValueFromMediaID ( mediaID ) ) ; assertEquals ( "78A_88|X/3" , MediaIDHelper . extractMusicIDFromMediaID ( mediaID ) ) ; }
public void loadSummariesSetListener ( ) { mPresenter . loadSummaries ( ) ; verify ( mRepository ) . setOnSettingsChangeListener ( mPresenter ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; EntityAnswer answer = filtered . get ( position ) ; holder . bindTo ( answer ) ; holder . wire ( ) ; }
public int getIconSize ( ) { return getInt ( R . string . pref_key__icon_size , 48 ) ; }
private void enterText ( int viewId , String text ) { findView ( viewId ) . perform ( typeText ( text ) , closeSoftKeyboard ( ) ) ; }
public TextView getTextView ( ) { return textView ; }
public void addMesh ( GeometryBuffer geom ) { numPoints += geom . pointPos ; if ( tess == null ) tess = new TessJNI ( 8 ) ; tess . addContour2D ( geom . index , geom . points ) ; }
public void onClick ( View v ) { choice = 6 ; if ( selectedImageUri != null ) { executeFastMotionVideoCommand ( ) ; } else Snackbar . make ( mainlayout , "Please upload a video" , 4000 ) . show ( ) ; }
public void setShowZoneBackground ( boolean showBackground ) { this . showZoneBackground = showBackground ; drawZones ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . myintentapp" , appContext . getPackageName ( ) ) ; }
public void commencer_click ( View view ) { startActivity ( new Intent ( this , Dashboared . class ) ) ; finish ( ) ; }
private void throwSecurityException ( String methodName , Uri uri ) { String msg = String . format ( "Permission not granted for : %s" , getLogMessage ( methodName , uri ) ) ; Timber . e ( msg ) ; throw new SecurityException ( msg ) ; }
public AddBookmarkResultLayout ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initializeViews ( context ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; operationGetLogging = true ; textViewLoggingValue1 . setText ( "" ) ; readWriteOperation ( ) ; }
public DaoMaster ( Database db ) { super ( db , SCHEMA_VERSION ) ; registerDaoClass ( OptionDao . class ) ; registerDaoClass ( PromotionDao . class ) ; registerDaoClass ( UserDao . class ) ; registerDaoClass ( VoteDataDao . class ) ; }
public void testConstructor ( ) throws Exception { TableModel model = new TableModel ( 5 , 5 , TableOrientation . COLUMN_MAJOR ) ; }
public String myTrim ( String s ) { if ( Character . isLetter ( s . charAt ( 0 ) ) ) { return s ; } else { return s . substring ( 1 ) ; } }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseLyrics . Builder getResponseLyricsBuilder ( ) { bitField0_ | = 0x01000000 ; onChanged ( ) ; return getResponseLyricsFieldBuilder ( ) . getBuilder ( ) ; }
public void formatDate_WhenUseDate_ReturnFormattedDate ( ) { String result = DateUtils . formatDate ( localDate . toDate ( ) ) ; assertThat ( result ) . isEqualTo ( "Jan 1 , 2018" ) ; }
public boolean requestAccountPermissions ( ) { if ( permissionChecker . canAccessAccounts ( ) ) { return true ; } requestPermission ( Manifest . permission . GET_ACCOUNTS , REQUEST_GOOGLE_ACCOUNTS ) ; return false ; }
public Consist ( ) { con = Collections . synchronizedMap ( new LinkedHashMap < String , ConLoco > ( ) ) ; leadAddr = "" ; trailAddr = "" ; }
public void invalidateResult ( ) { constantResultField . getEditText ( ) . setText ( "" ) ; arrayResultMatrix . setText ( "" , getFormulaList ( ) . getDimen ( ) ) ; }
public void resume ( ) { instance = this ; gameLoop . onResume ( ) ; if ( gameLoop . scene != null ) { gameLoop . scene . resume ( ) ; } }
public void shutDown ( ) { mTts . shutdown ( ) ; }
public static int getTimeDifference ( TimeZone tz ) { int milliseconds = tz . getOffset ( System . currentTimeMillis ( ) ) ; return milliseconds / 60000 ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedState ) { return inflater . inflate ( R . layout . fragment_filelist , container , false ) ; }
public boolean isExported ( ) { return mIsExported == 1 ; }
public static String getDataFromMessageAsString ( Message message ) { byte [ ] data = getDataFromMessage ( message ) ; if ( data != null ) { return new String ( data , GoogleApiMessenger . UTF8_CHARSET ) ; } return null ; }
public void onError ( @ NonNull Throwable e ) { Log . v ( TAG , "onError ( ) called with : e = [ " + e + " ] " ) ; }
public void setActivated ( ) { activated = true ; setHighlightColor ( "#4caf50" ) ; }
public static void unsetChannel ( UUID server , String channel ) { if ( server == sServer && channel . equals ( sChannel ) ) { sServer = null ; sChannel = channel ; } }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View rootView = inflater . inflate ( R . layout . fragment_details , container , false ) ; showQuestion ( currentQuestion ) ; return rootView ; }
public void seek ( long position ) { timestampAdjuster . reset ( ) ; for ( int i = 0 ; i < psPayloadReaders . size ( ) ; i ++ ) { psPayloadReaders . valueAt ( i ) . seek ( ) ; } }
public void onFollowStateChanged ( ) { followersFragment . refreshData ( ) ; followCountManager . requestFollowInfo ( mUsername ) ; }
public boolean doesNotContain ( String prefKey ) { doEdit ( ) ; return mPref . contains ( prefKey ) ; }
public Task < WatchStatus > then ( @ NonNull Task < TransportService > task ) throws Exception { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_WATCHSTATUS , Transport . WATCH_STATUS ) ; }
public ScheduleBuilder blocks ( String blocks ) { this . blocks = blocks ; return this ; }
public static boolean getAcceptAnyCertificate ( Context context ) { return getBoolean ( context , "pref_accept_any_certificate" , context . getResources ( ) . getBoolean ( R . bool . pref_default_accept_any_certificate ) ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . springcard . pcsclib . test" , appContext . getPackageName ( ) ) ; }
public void add ( Contact contact , boolean isOwner , boolean subscribed ) { mMembers . add ( new GroupMember ( contact , subscribed ) ) ; if ( isOwner ) mOwner = contact . getJID ( ) ; }
private void initTtsPrefs ( ) { binding . ttsPrefs . setOnClickListener ( mTtsClick ) ; binding . ttsPrefs . setChecked ( mPrefs . isTtsEnabled ( ) ) ; }
private void addPostToPostCount ( @ NonNull PostModel post ) { sNotificationData . mUploadedPostsCounted . add ( post ) ; }
public void onBackPressed ( ) { if ( audioPlayer != null ) { audioPlayer . destroy ( ) ; } super . onBackPressed ( ) ; }
public void scale ( float scaleFactor , float pivotX , float pivotY ) { mScaleFactor = scaleFactor ; mPivotX = pivotX ; mPivotY = pivotY ; this . invalidate ( ) ; }
public void openDocuments ( int accoundId , int ownerId , @ Nullable Owner owner ) { PlaceFactory . getDocumentsPlace ( accoundId , ownerId , DocsListPresenter . ACTION_SHOW ) . withParcelableExtra ( Extra . OWNER , owner ) . tryOpenWith ( getActivity ( ) ) ; }
public LiveData < LatestRunsState > getState ( ) { return mState ; }
public boolean cardIsAnimating ( ) { for ( Card card : cards ) { if ( card . isAnimating ( ) ) { return true ; } } return false ; }
private void select ( View listChild , boolean checked ) { RadioButton button = ( RadioButton ) listChild . findViewById ( R . id . select ) ; button . setChecked ( checked ) ; }
private void openAddTaskDialog ( ) { AddTaskDialogFragment addTaskDialogFragment = AddTaskDialogFragment . newInstance ( this ) ; addTaskDialogFragment . show ( getFragmentManager ( ) , AddTaskDialogFragment . class . getSimpleName ( ) ) ; this . mainActivity . setPermissionRequired ( addTaskDialogFragment ) ; }
public void testSafeToAddAuthToken11 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( wpcomAddress4 ) ) ) ; }
public void onRmsChanged ( float rmsdB ) { }
public Image getBackdrop ( ) { return backdrop ; }
private void navigateToHomePage ( ) { Intent i = new Intent ( this , HomeActivity . class ) ; startActivity ( i ) ; finish ( ) ; }
public int getLinkId ( ) { return linkId ; }
public void setWindBearing ( Integer windBearing ) { this . windBearing = windBearing ; }
public String getEndpoint ( ) { return StringUtils . notNullStr ( endpoint ) ; }
public void onCallConnected ( ) { mSipServiceConnection . disconnect ( true ) ; startCallActivity ( ) ; }
public int getLastCalmingPromptSetId ( ) { return lastCalmingPromptSetId ; }
public void setListener ( OnRecyclerViewListener mListener ) { this . mListener = mListener ; }
private void clearDebateLoadError ( ) { mDebateLoadError = null ; updateGui ( ) ; }
public void setOnToggledFullscreen ( ToggledFullscreenCallback callback ) { this . toggledFullscreenCallback = callback ; }
private void initSmartLockHelperConnection ( ) { mSmartLockHelper = new SmartLockHelper ( this ) ; mSmartLockHelper . initSmartLockForPasswords ( ) ; }
public void onError ( FileDataSource source , Exception e ) { HelperUtils . showSaveError ( MainActivity . this , mCoordinatorLayout , e ) ; }
public static Boolean isReady ( ) { return flagReady ; }
public void showDonate ( boolean showDonate ) { if ( getActivity ( ) == null ) return ; this . showDonate = showDonate ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
private void enableViews ( ) { labelEmpty . setVisibility ( View . INVISIBLE ) ; listHosts . setVisibility ( View . VISIBLE ) ; buttonMigrateToDefault . setEnabled ( true ) ; }
public void addItem ( String item ) { items . add ( 0 , item ) ; notifyDataSetChanged ( ) ; }
public static SubnetDevices fromIPList ( @ NonNull final List < String > ipAddresses ) { SubnetDevices subnetDevice = new SubnetDevices ( ) ; subnetDevice . addresses = new ArrayList <> ( ) ; subnetDevice . addresses . addAll ( ipAddresses ) ; return subnetDevice ; }
private double mgToounce ( double num ) { return num * 0 . 0000353 ; }
public FormEntryPage swipeToPreviousQuestion ( String questionText , boolean isRequired ) { return new FormEntryPage ( formName , rule ) . swipeToPreviousQuestion ( questionText , isRequired ) ; }
public void flowInterrupt ( String workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { if ( null != getMvpView ( ) ) getMvpView ( ) . showProgress ( false ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; checkPrivacy ( ) ; updateRows ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . privacyRulesUpdated ) ; return true ; }
public String toString ( ) { return name + " = " + value ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == R . id . action_sort_by ) { statsDialog . show ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void action ( Item item , Action action ) { action ( item , action , 0 ) ; }
public int compare ( AppItem left , AppItem right ) { return ( int ) ( right . mEventTime - left . mEventTime ) ; }
public void setColor ( int color ) { paint . setColor ( color ) ; }
public String desc ( ) { return Game . getVar ( R . string . BattleAxe_Info ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { final String filter = searchBox . getText ( ) . toString ( ) . toLowerCase ( ) ; listAdapter . setFilter ( filter ) ; }
public Set < String > getTagIds ( ) { return new HashSet <> ( Arrays . asList ( queueItem . getExtra ( ) . split ( QueueItem . DELETED_TAGS_DELIMITER ) ) ) ; }
public TaskData ( ArrayList < HashMap < String , String >> cards , Comparator comparator ) { mCards = cards ; mComparator = comparator ; }
public DrawerBuilder withSliderBackgroundColorRes ( int sliderBackgroundColorRes ) { this . mSliderBackgroundColorRes = sliderBackgroundColorRes ; return this ; }
public static ChallengeManagerInterface getInstance ( RestServer server , Context context ) { return new IndividualizedChallengeManager ( server , true , context ) ; }
public LoginFlow enterEmailAddress ( ) { populateTextField ( R . id . input , E2E_WP_COM_USER_EMAIL ) ; clickOn ( R . id . login_continue_button ) ; return this ; }
public void setTransactionSuccessful ( ) { getDatabase ( ) ; db . setTransactionSuccessful ( ) ; }
public int getStatus ( ) { return status_ ; }
private void givenPreferences ( ) { new Expectations ( ) { { mPreferenceFragment . findPreference ( PREF_TEMPERATURE_UNITS ) ; result = mTemperatureUnitsPreference ; } } ; }
public void whenManualUpdatesEnabled_fillBlankFormRefreshButtonIsGone ( ) { rule . mainMenu ( ) . enableManualUpdates ( ) . clickFillBlankForm ( ) ; onView ( withId ( R . id . menu_refresh ) ) . check ( doesNotExist ( ) ) ; }
public GifDecoderThread ( InputStream is , OnGifLoadedListener listener ) { super ( "GIF playing thread" ) ; this . is = is ; this . listener = listener ; }
public void bindCheckBoxCheckedValue ( Boolean isChecked ) { if ( isChecked != null ) mCheckBox . setChecked ( isChecked ) ; else mCheckBox . setChecked ( mListener . isCategorySelected ( category . getId ( ) ) ) ; }
public void updateCurrentSong ( CardPlayerFragment fragment , Song song ) { fragment . toolbar . setTitle ( song . title ) ; fragment . toolbar . setSubtitle ( song . artistName ) ; }
public void testSyncingUrlWithTrailingSlash ( ) throws IOException { testUtils . setupRepo ( randomUrl ( ) + "/" ) ; assertNotNull ( testUtils . sync ( ) ) ; }
public FillBlankFormPage clickFillBlankForm ( ) { onView ( withId ( R . id . enter_data ) ) . perform ( click ( ) ) ; return new FillBlankFormPage ( rule ) . assertOnPage ( ) ; }
public void onPause ( ) { if ( dialog != null ) { dialog . dismiss ( ) ; } super . onPause ( ) ; }
public static UserPostListingURL getDisliked ( String username ) { return new UserPostListingURL ( Type . DOWNVOTED , username , null , null , null , null ) ; }
public void setChildren ( SortedMap < String , CategoryNode > children ) { this . children = children ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_prefs = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) . getApplicationContext ( ) ) ; m_activity = ( HeadlinesActivity ) activity ; }
public void onPageSelected ( int position ) { mChangingPages = true ; if ( mDebateManager != null ) mDebateManager . setActivePhaseIndex ( position ) ; updateControls ( ) ; }
public int defenseProc ( Char enemy , int damage ) { CharUtils . spawnOnNextCell ( this , "Larva" , ( int ) ( 10 * RemixedDungeon . getDifficultyFactor ( ) ) ) ; return super . defenseProc ( enemy , damage ) ; }
public void onResponse ( Item response ) { if ( mItemActivity . get ( ) != null && ! mItemActivity . get ( ) . isActivityDestroyed ( ) ) { mItemActivity . get ( ) . onItemLoaded ( response ) ; } }
public int compare ( StatItem lhs , StatItem rhs ) { return rhs . isInTraining ( ) ? 1 : - 1 ; }
public boolean onDoubleTap ( int i ) { return callback . onDrawerGesture ( desktop , Type . DoubleTap ) ; }
public static byte [ ] encryptTextBytes ( String text ) { if ( text == null ) return null ; byte [ ] out = encrypt ( mCryptKey , text . getBytes ( CHARSET_UTF_8 ) ) ; return out ; }
public static PreferenceFragmentCompat newInstance ( ) { MasterPreferencesFragment result = new MasterPreferencesFragment ( ) ; return result ; }
public Single < List < Event >> getEvents ( AppDataStore appDataStore ) { return appDataStore . getEventsByTagId ( tagId ) ; }
public void shareWotdTest ( ) { Context context = mActivityTestRule . getActivity ( ) ; openMenuItem ( R . string . action_wotd_history ) ; openMenuItem ( R . string . share ) ; verifyShareIntentContains ( context . getString ( R . string . share_wotd_title ) ) ; }
private void log ( String s ) { Log . d ( ContactListActivity . class . getSimpleName ( ) , s ) ; }
public static String add ( String num1 , String num2 ) { return new BigDecimal ( num1 ) . add ( new BigDecimal ( num2 ) ) . toString ( ) ; }
public static < T extends Selectable > ArrayList < T > getSelected ( @ NonNull List < T > fullData ) { return getSelected ( fullData , false ) ; }
public void OnOnTableOfContentTitleClicked ( Title title ) { finishAndGoTo ( title . pageInfo . pageId ) ; }
public Track getCurrentTrack ( ) { return _currentTrack ; }
private TermSession createTermSession ( ) { TermSettings settings = mSettings ; TermSession session = createTermSession ( this , settings , settings . getInitialCommand ( ) ) ; session . setFinishCallback ( mTermService ) ; return session ; }
public String exec ( ExecutePack pack ) { XMLPrefsManager . XMLPrefsSave save = pack . getPrefsSave ( ) ; String s = XMLPrefsManager . get ( String . class , save ) ; if ( s . length ( ) == 0 ) return "\"\"" ; return s ; }
public LiveData < List < SkillEntity >> getSkills ( ) { return mObservableSkills ; }
public void scheduleNow ( ) { scheduleFor ( System . currentTimeMillis ( ) + 1_000L , false ) ; }
public void afterTextChanged ( Editable s ) { mListener . onUnitTextChanged ( s . toString ( ) ) ; }
public void onPause ( ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessage . getMessage ( MsgType . PAUSE ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new PlanetaryCalendarViewModel ( planetaryCalendar ) ; }
public Extension getDefaultInstanceForType ( ) { return defaultInstance ; }
public String getFat ( ) { return fat ; }
private static int parseVersion ( String version ) { String result = null ; if ( version . contains ( " - SNAPSHOT" ) ) { result = version . replace ( " - SNAPSHOT" , "" ) ; } return Integer . valueOf ( result ) ; }
public static boolean isImageGif ( String mimetype ) { return mimetype . equalsIgnoreCase ( "image/gif" ) ; }
private void showNavigationMenu ( ) { PopupMenu popup = new PopupMenu ( this , mMapButtonHolder ) ; popup . inflate ( R . menu . context_menu_navigation ) ; popup . setOnMenuItemClickListener ( this ) ; popup . show ( ) ; }
public boolean onTouch ( View view , MotionEvent motionEvent ) { if ( motionEvent . getAction ( ) == MotionEvent . ACTION_DOWN ) { RequestToggleLogging ( ) ; return true ; } return false ; }
public void stopCountNotification ( ) { mTimerSwitch = false ; if ( timer != null ) timer . cancel ( ) ; if ( mNotificationManager != null ) mNotificationManager . cancel ( NOTIFYID ) ; }
public Stream ( JSONObject json ) { fromJson ( json ) ; }
private void showAddMeasureDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; AddMeasureDialogFragment dialog = new AddMeasureDialogFragment ( ) ; dialog . show ( this . getFragmentManager ( ) , "AddPointDialogFragment" ) ; }
public final OnDesktopEditListener getDesktopEditListener ( ) { return this . _desktopEditListener ; }
public Text ( List < String > paragraphs ) { this . paragraphs = paragraphs ; }
public void onDestroyView ( ) { prefs . edit ( ) . putString ( "throttle_name_preference" , v . getText ( ) . toString ( ) ) . commit ( ) ; super . onDestroyView ( ) ; }
public void cancelLoadFile ( TLRPC . FileLocation location , String ext ) { cancelLoadFile ( null , location , ext ) ; }
public void setEndTime ( long endDate ) { this . mEndDate = endDate ; if ( mRecurrence != null ) { mRecurrence . setPeriodStart ( new Timestamp ( mEndDate ) ) ; } }
public static boolean isNullOrEmpty ( String text ) { return text == null || text . length ( ) == 0 ; }
public void setCoordinateData ( Map < String , List < AyahBounds >> data ) { mCoordinatesData = data ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( savedInstanceState != null ) { restoreFromSavedInstanceState ( savedInstanceState ) ; } mData = getArguments ( ) . getParcelableArrayList ( Extra . AUDIOS ) ; }
public PublishSubject < AddIngredientMenuAction > menuActions ( ) { return PublishSubject . create ( ) ; }
public void stopNestedScroll ( ) { mNestedScrollingChildHelper . stopNestedScroll ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . menu_theme_search ) { AnalyticsUtils . trackWithSiteDetails ( AnalyticsTracker . Stat . THEMES_ACCESSED_SEARCH , mSite ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void addAccount ( ) { AnswersProxy . get ( ) . logButton ( "Add Account" ) ; Intent intent = new Intent ( AccountsActivity . this , AddAccountActivity . class ) ; startActivityForResult ( intent , REQUEST_ADD_ACCOUNT ) ; }
public PhotoListPresenter ( Context context ) { mContext = context ; compositeDisposable = new CompositeDisposable ( ) ; }
public void onComplete ( @ NonNull Task < Void > task ) { if ( task . isSuccessful ( ) ) firebaseRemoteConfig . activateFetched ( ) ; }
public void clickAttendance ( View v ) { Intent i = new Intent ( this , Attendence . class ) ; startActivity ( i ) ; }
public WidgetState ( PlayerStatus status ) { this ( null , status , Playable . INVALID_TIME , Playable . INVALID_TIME , 1 . 0f , false ) ; }
public void setClipBoardOutput ( String str ) { String s = pattern . matcher ( str ) . replaceAll ( "\n" ) . trim ( ) ; ClipBoardOutput = s . split ( "\n" ) ; getPrefs ( ) . getOther ( ) . setClipboardOutputRules ( s ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `prefix` TEXT" ) ; }
private Drawable getLoadingImagePlaceholder ( ) { if ( loadingImagePlaceholder != null ) { return loadingImagePlaceholder ; } Drawable defaultLoadingImagePlaceholder = getResources ( ) . getDrawable ( R . drawable . ic_gridicons_image ) ; defaultLoadingImagePlaceholder . setBounds ( 0 , 0 , DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP , DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP ) ; return defaultLoadingImagePlaceholder ; }
public void onRefresh ( ) { thread . runOnUI ( ( ) -> { log . v ( TAG , "refreshing" ) ; person = null ; load ( ) ; } ) ; }
public boolean setCurrentSong ( Song song ) { if ( song . equals ( currentSong ) ) return false ; currentSong = song ; return true ; }
public static int regularFontSize ( ) { if ( Game . smallResScreen ( ) ) { return 8 ; } else { return 7 ; } }
public void onDestroy ( ) { checkout . destroyPurchaseFlow ( ) ; super . onDestroy ( ) ; Log . i ( "CRUGA - EVENT" , "onDestroyPreferencesFragment" ) ; }
public void addFragment ( Fragment fragment , String title ) { mFragmentList . add ( fragment ) ; mFragmentTitleList . add ( title ) ; }
public IconAdapter ( List < IconBean > mIcons , RequestManager glide ) { this . mIcons = mIcons ; this . mGlide = glide ; }
public void addItemList ( final List < Workshop > speakers ) { realm . executeTransaction ( new Realm . Transaction ( ) { @ Override public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( speakers ) ; } } ) ; }
public Book ( String json ) { this . json = json ; }
private BroadcastReceiver playingStatusReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { boolean isPlaying = intent . getBooleanExtra ( ServiceConstants . PLAYING_STATUS_BROADCAST_KEY , false ) ; synchronizePlayButton ( isPlaying ) ; } } ;
public void onCaptureStarted ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "onCaptureStarted" ) ; drawPreview . onCaptureStarted ( ) ; }
public void animateColorChange ( CardPlayerFragment fragment , int newColor ) { if ( ATHUtil . isWindowBackgroundDark ( fragment . getActivity ( ) ) ) { fragment . playerQueueSubHeader . setTextColor ( ThemeStore . textColorSecondary ( fragment . getActivity ( ) ) ) ; } }
public boolean isActiveNetworkMetered ( ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; return ConnectivityManagerCompat . isActiveNetworkMetered ( cm ) ; }
public void onReceivedDuration ( long millis ) { }
public void onDestroy ( ) { disposableActions . clear ( ) ; super . onDestroy ( ) ; }
public void onClick ( View view ) { getRealtimeHeartRate ( ) ; }
private void saveDownloadStatus ( DownloadStatus status ) { reportQueue . add ( status ) ; DBWriter . addDownloadStatus ( status ) ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createPlants ( data ) ; }
public static @ NonNull < T extends Object > T checkNotNull ( T reference ) { if ( reference == null ) { throw new NullPointerException ( ) ; } return reference ; }
public void push ( E obj ) { mData . add ( obj ) ; }
private void updateAccountFromFilter ( ) { updateEntityFromFilter ( BlotterFilter . FROM_ACCOUNT_ID , Account . class , account ) ; }
public void run ( ) { notifyManager . cancel ( alert_id ) ; }
public void prepare ( MediaSource mediaSource , boolean resetPosition , boolean resetTimeline ) { player . prepare ( mediaSource , resetPosition , resetTimeline ) ; }
public ArrayList < String > getListString ( String key ) { return new ArrayList < String > ( Arrays . asList ( TextUtils . split ( preferences . getString ( key , "" ) , "‚‗‚" ) ) ) ; }
public Map < String , PackRectangle > getRectangles ( ) { return rectangles ; }
public void show13DForecast ( List < Weather > forecast , String timeZone ) { mForecastAdapter . setDayForecast ( forecast ) ; mForecastAdapter . notifyItemRangeChanged ( ForecastAdapter . POSITION_FORECAST_DAILY , mForecastAdapter . getDailyForecastCount ( ) ) ; }
public void write ( int oneByte ) throws IOException { streamedOutString += ( char ) oneByte ; streamedOutTV . setText ( BaseInterpretingActivity . this . streamedOutString ) ; }
public static void Log ( String message ) { Log . d ( TAG , message ) ; }
public void setAdapter ( BaseAdapter adapter ) { this . mAdapter = adapter ; }
public void onTextChanged ( TerminalSession changedSession ) { if ( ! mActivity . isVisible ( ) ) return ; if ( mActivity . getCurrentSession ( ) == changedSession ) mActivity . getTerminalView ( ) . onScreenUpdated ( ) ; }
public void surfaceDestroyed ( SurfaceHolder holder ) { haveSurface = false ; }
private double mlTogallon ( double num ) { return num * 0 . 000264 ; }
public void updatePathType ( ) { pathType = ( realPathType == null ) ? PathType . values ( ) [ randomInInterval ( 0 , PathType . values ( ) . length - 1 ) ] : realPathType ; }
public final String autoDownloadImagesPolicy ( ) { return mPreferences . getString ( AUTO_DOWNLOAD_IMAGES_POLICY , "only_wifi" ) ; }
public static final LongSparseArray < Integer > tourTypeLight = new LongSparseArray < Integer > ( ) { { put ( AttractionType . WALKING , R . drawable . icon_walk_light ) ; put ( AttractionType . MONUMENT , R . drawable . icon_view_light ) ; } } ;
public void showProgressDialog ( int msgId ) { showProgressDialog ( msgId , 0 ) ; }
public SharedContactView ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; initialize ( ) ; }
public TeamInfoBinder provideTeamInfoBinder ( ) { return new TeamInfoBinder ( ) ; }
public void onPausePressed ( ) { startService ( AudioUtils . getAudioIntent ( this , AudioService . ACTION_PAUSE ) ) ; audioStatusBar . switchMode ( AudioStatusBar . PAUSED_MODE ) ; }
public void onResume ( ) { super . onResume ( ) ; mListAdapter . notifyDataSetChanged ( ) ; }
public void performSearch ( @ NotNull ISquareChar squareChar ) { Log . d ( TAG , squareChar . getChar ( ) ) ; mKanjiGrid . unhighlightAll ( ) ; mSearcher . search ( new SearchInfo ( squareChar ) ) ; }
public void onEvent ( Event event ) { mKeyboardActionListener . onEvent ( event ) ; dismissPopupKeyboard ( ) ; }
public void setBitmap ( Bitmap doubleFire ) { this . nuke = nuke ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_view_scale_teams , parent , false ) ; return new ViewHolder ( view ) ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . SqlStatement parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public BluetoothLeDevice getBluetoothLeDeviceForAddress ( String address ) { for ( BluetoothLeDevice device : mDeviceMap . values ( ) ) { if ( device . getAddress ( ) . equals ( address ) ) { return device ; } } return null ; }
public void openFileChooser ( ValueCallback < Uri > uploadMsg , String acceptType , String capture ) { openFileInput ( uploadMsg , null ) ; }
public static String convertMilliSecondsToFormattedDate ( Long milliSeconds ) { Calendar calendar = Calendar . getInstance ( ) ; calendar . setTimeInMillis ( milliSeconds ) ; return sSimpleDateFormat . format ( calendar . getTime ( ) ) ; }
public CalendarQueryRow setHasAlarm ( Object obj ) { return setColumn ( CalendarContract . Instances . HAS_ALARM , obj ) ; }
public AutoFitGridLayout ( Context context ) { super ( context ) ; }
public String toString ( ) { return texture . toString ( ) + " : " + model . toString ( ) + " : " + template . toString ( ) + " : " + price ; }
public void run ( ) { Intent intent = new Intent ( SplashActivity . this , HomeActivity . class ) ; startActivity ( intent ) ; finish ( ) ; }
public static com . coinomi . core . protos . Protos . Tag parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void undo ( ) { if ( ! canUndo ( ) ) return ; stack . get ( stack . size - 1 + index ) . apply ( ) ; index -- ; }
public void goToLikesList ( int accountId , int ownerId , int photoId ) { PlaceFactory . getLikesCopiesPlace ( accountId , "photo" , ownerId , photoId , ILikesInteractor . FILTER_LIKES ) . tryOpenWith ( getActivity ( ) ) ; }
public void run ( ) { recordStartRunnable = null ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . recordStarted ) ; }
public void onBackPressed ( ) { if ( currentFragment == null || currentFragment . isBackTop ( ) ) { super . onBackPressed ( ) ; } else { currentFragment . goUp ( ) ; } }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new Page1 ( context ) ; case 1 : return new Page2 ( context ) ; case 2 : return new Page3 ( context ) ; default : return null ; } }
public void testMinimalEncoder3 ( ) throws Exception { verifyMinimalEncoding ( "ABC" , "ALPHANUMERIC ( ABC ) , TERMINATOR ( ) " , null , false ) ; }
public void close ( ) { sniffHandlerService . stop ( ) ; }
public AttestationPackageInfo ( String packageName , int version ) { this . packageName = packageName ; this . version = version ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createCbm ( data ) ; }
public List < String > getReadingRelation ( ) { return mReadingRelation ; }
public void flowInterrupt ( String workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { showFeedback ( ) ; }
public static void setBestPreviewFPS ( Camera . Parameters parameters ) { setBestPreviewFPS ( parameters , MIN_FPS ) ; }
public boolean isDHTEnabled ( ) { SettingsPack sp = settings ( ) ; return sp != null && sp . enableDht ( ) ; }
public void openDocument ( int accountId , @ NonNull Document document ) { PlaceFactory . getDocPreviewPlace ( accountId , document ) . tryOpenWith ( getActivity ( ) ) ; }
public void delete ( Long id , String columnName , CoNaObiadDbHelper helper ) { helper . delete ( tableName , id , columnName ) ; }
public int execute ( ) throws LuaException { mainHandler . sendMessage ( mainHandler . obtainMessage ( MainWindow . MESSAGE_POPMENUSTACK ) ) ; return 0 ; }
public static int limitTimeoutIndex ( int value ) { return Math . max ( Math . min ( value , RemixedDungeon . MOVE_TIMEOUTS . length - 1 ) , 0 ) ; }
public void onAdFailedToLoad ( int i ) { Log . d ( "Interstitial Ad Test" , "Add Loading Failed" ) ; }
private void initializeView ( ) { InputStream is = getContext ( ) . getResources ( ) . openRawResource ( R . drawable . congratulations ) ; mMovie = Movie . decodeStream ( is ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( type ) ; dest . writeTypedList ( allowedUsers ) ; dest . writeTypedList ( disallowedUsers ) ; dest . writeTypedList ( allowedLists ) ; dest . writeTypedList ( disallowedLists ) ; }
public EditText getSearchField ( ) { return searchField ; }
public void onSuccess ( Object data ) { BluetoothGattCharacteristic characteristic = ( BluetoothGattCharacteristic ) data ; Log . d ( TAG , "sendEncryptedRandomAuthNumber success : " + Arrays . toString ( characteristic . getValue ( ) ) ) ; }
public Drawable newDrawable ( ) { return ProgressDrawableBase . this ; }
private boolean checkNoDownloads ( ) { return tasks . isEmpty ( ) ; }
public com . google . protobuf . Any getTx ( ) { if ( txBuilder_ == null ) { return tx_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : tx_ ; } else { return txBuilder_ . getMessage ( ) ; } }
public void postDismissKeyPreview ( @ NonNull final Key key , final long delay ) { sendMessageDelayed ( obtainMessage ( MSG_DISMISS_KEY_PREVIEW , key ) , delay ) ; }
public static long crc32 ( String input ) { byte [ ] bytes = input . getBytes ( ) ; Checksum checksum = new CRC32 ( ) ; checksum . update ( bytes , 0 , bytes . length ) ; return checksum . getValue ( ) ; }
private void setTagDisplayName ( String displayName ) { this . mTagDisplayName = StringUtils . notNullStr ( displayName ) ; }
public void setOnDrawerItemClickListener ( @ NonNull OnDrawerItemClickListener onDrawerItemClickListener ) { mDrawerBuilder . mOnDrawerItemClickListener = onDrawerItemClickListener ; }
public static long getLong ( Context context , String code , @ StringRes int keyId ) { String key = String . format ( "%s_%s" , code , getKey ( context , keyId ) ) ; return getLong ( context , key ) ; }
public void onSuccess ( Object data ) { Date currentTime = ( Date ) data ; Log . d ( "SWELL" , "Current time : " + currentTime . toString ( ) ) ; }
public void onBackPressed ( ) { NoteEditFragment fragment = ( NoteEditFragment ) getFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onBackPressed ( null ) ; }
public String getDate ( ) { return date ; }
private Paint getPaint ( int value , boolean active ) { switch ( value ) { case 0 : return active ? yellowSelectPaint : yellowPaint ; case 1 : return active ? greenSelectPaint : greenPaint ; } return disabledPaint ; }
public void handle ( ) { scheduleSave ( ) ; achievementUnlocked . emit ( achievement ) ; }
public void logBookAccess ( ) { sInternalUserDBHelper . logBookAccess ( bookId ) ; }
private void onBindIncentiveHard ( RecyclerView . ViewHolder viewHolder , int position ) { final TxHardPoolIncentive holder = ( TxHardPoolIncentive ) viewHolder ; holder . onBind ( getBaseContext ( ) , mBaseChain , mResTxInfo , mResTxInfo . getMsg ( position - 1 ) ) ; }
public FieldsPart ( List < Field > fields ) { this . fields = fields ; }
public Long execute ( SFTPClient client ) throws IOException { return client . size ( SFtpClientUtils . extractRemotePathFrom ( path ) ) ; }
public int getPageFromPos ( int position , boolean dual ) { int page = PAGES_LAST - position ; if ( dual ) { page = ( PAGES_LAST_DUAL - position ) * 2 ; } return page ; }
public void onClick ( View v ) { Intent recordVideoLayout = new Intent ( getApplicationContext ( ) , EmbeddedSystemFinder . class ) ; startActivity ( recordVideoLayout ) ; }
public void onBackupSuccess ( ) { AnswersProxy . get ( ) . logEvent ( "Backup success" ) ; Timber . d ( "Backup success . " ) ; if ( isFinishing ( ) ) return ; stopProgress ( ) ; fetchBackups ( ) ; }
private State ( GoogleAuthUriImporter . State state ) { super ( false ) ; _state = state ; }
private void tick ( ) { currentTime = System . nanoTime ( ) ; game . aGrid . tickAll ( currentTime - lastFPSTime ) ; lastFPSTime = currentTime ; }
public void setSquaresCountInRow ( int count ) { this . editor = preferences . edit ( ) ; editor . putInt ( SQARES_COUNT_IN_ROW_KEY , count ) ; editor . apply ( ) ; editor . commit ( ) ; }
public void start ( Attributes attributes ) { mCurrentThread . setIsSticky ( attributes . getValue ( Topic . Xml . IS_STICKY_ATTRIBUTE ) . equals ( "1" ) ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { super . onOptionsItemSelected ( item ) ; switch ( item . getItemId ( ) ) { case R . id . home : super . onBackPressed ( ) ; return true ; } return false ; }
public XYStepModel getRangeStepModel ( ) { return rangeStepModel ; }
public void run ( ) { if ( waitingForKeyboardCloseRunnable != this ) { return ; } startLayoutAnimation ( false , true ) ; }
public RequestSenderTests ( ) { requestSender = new RequestSenderImpl ( InstrumentationRegistry . getTargetContext ( ) , this ) ; }
public int getPlaylistSize ( ) throws RemoteException { return mService . get ( ) . getPlaylistSize ( ) ; }
public MapTrekTileSource ( SQLiteDatabase nativeMapDatabase ) { super ( 2 , 17 ) ; mNativeMapDatabase = nativeMapDatabase ; mMapTrekDataSources = new HashSet <> ( ) ; }
private boolean canPlaySound ( ) { return game . getSettings ( ) . getPreferences ( ) . getBoolean ( SettingsManager . TAG_ENABLE_SOUND , true ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( "SWELL" , "Set current time failed : " + msg ) ; }
public void swapDataSet ( List < Album > dataSet ) { this . dataSet = dataSet ; notifyDataSetChanged ( ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return mFormattedStringCacheAxis . getFormattedValue ( value ) + " %" ; }
public void onSuccess ( ResultHolder result ) { if ( getTranslationScreen ( ) != null ) { getTranslationScreen ( ) . setVerses ( result . getTranslations ( ) , result . getAyahInformation ( ) ) ; } }
public static String bookNameInSearchResults ( Context context ) { return getDefaultSharedPreferences ( context ) . getString ( context . getResources ( ) . getString ( R . string . pref_key_book_name_in_search ) , context . getResources ( ) . getString ( R . string . pref_default_value_book_name_in_search ) ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { RecyclerViewDragDropManager . this . onScrolled ( recyclerView , dx , dy ) ; }
public void onProviderEnabled ( String provider ) { lastProviderStatus = true ; if ( gpsListenerCallback != null ) gpsListenerCallback . onProviderStatusChanged ( true ) ; }
public void rebootBootloader ( ) { execCommandInternally ( ShellCommandHelper . getRebootBootloader ( ) ) ; FirebaseAnalytics . getInstance ( this ) . logEvent ( FirebaseEvents . SHELL_COMMAND_REBOOT_BOOTLOADER , null ) ; }
private void initializeObjects ( ) { dataStore = new DataStore ( ) ; delegationListAdapter = new DelegationListAdapter ( ) ; delegationsRv . setLayoutManager ( new LinearLayoutManager ( this ) ) ; delegationsRv . setAdapter ( delegationListAdapter ) ; }
public static void drawAddRemovePin ( Canvas canvas , boolean addPin ) { HabiticaIcons . drawAddRemovePin ( canvas , new RectF ( 0f , 0f , 40f , 40f ) , ResizingBehavior . AspectFit , addPin ) ; }
public long getValueNum ( ) { return mValueNum ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_library , container , false ) ; ButterKnife . bind ( this , view ) ; return view ; }
public void onClick ( View view ) { openURI ( TRANSLATE_URI ) ; }
public boolean onContextItemSelected ( MenuItem item ) { if ( ! MucDetailsContextMenuHelper . onContextItemSelected ( item , userAdapter . getSelectedUser ( ) , mConversation , this ) ) { return super . onContextItemSelected ( item ) ; } return true ; }
public void runTest ( ) throws InterruptedException { showInputDialog ( ) ; enterTestText ( ) ; selectHashType ( ) ; generateHashFromText ( ) ; }
public String name ( ) { return Game . getVar ( R . string . LibraryBook_Name ) ; }
public GeoPackageAdapter ( RecyclerViewClickListener listener ) { mListener = listener ; }
private QuestionWidget configureWidgetForQuestion ( FormEntryPrompt question ) { QuestionWidget qw = widgetFactory . createWidgetFromPrompt ( question ) ; qw . setOnLongClickListener ( this ) ; qw . setValueChangedListener ( this ) ; return qw ; }
public static int getShipSize ( ) { int ship_size = 0 ; if ( userShipData != null ) ship_size = userShipData . size ( ) ; else ship_size = helper . getShipCount ( ) ; return ship_size ; }
public boolean presentFragment ( final BaseFragment fragment , final boolean removeLast , boolean forceWithoutAnimation ) { return actionBarLayout . presentFragment ( fragment , removeLast , forceWithoutAnimation ) ; }
public CaptureConfig ( String captureConfigUUID , DeviceConfig hostDeviceConfig ) { this . captureConfigUUID = captureConfigUUID ; this . hostDeviceConfig = hostDeviceConfig ; this . subjectInfo = null ; this . activityName = null ; this . additionalInfo = null ; this . clientDeviceConfig = null ; }
private void delete ( ) { new EventQueryHandler ( this ) . startDelete ( TOKEN_EVENT , null , ContentUris . withAppendedId ( CalendarContract . Events . CONTENT_URI , mEventEditView . getEvent ( ) . getId ( ) ) , null , null ) ; }
private void checkTowerAndGpsStatus ( ) { Session . setTowerEnabled ( towerLocationManager . isProviderEnabled ( LocationManager . NETWORK_PROVIDER ) ) ; Session . setGpsEnabled ( gpsLocationManager . isProviderEnabled ( LocationManager . GPS_PROVIDER ) ) ; }
private void registerTouchHandler ( ) { GameSceneSingleMoveDetector gameSceneSingleMoveDetector = new GameSceneSingleMoveDetector ( 0 , getTileSceneStartY ( ) + spacePerTile , spacePerTile , gameFieldView , gameService ) ; continuousHoldDetector = new ContinuousHoldDetector ( 0 , 100 , 0 . 01f , gameSceneSingleMoveDetector ) ; setOnSceneTouchListener ( continuousHoldDetector ) ; }
private boolean orderByContainsNumberOfBooks ( String [ ] orderBy ) { for ( String s : orderBy ) { if ( s . equals ( BooksInformationDBContract . AuthorEntry . ORDER_BY_NUMBER_OF_BOOKS ) ) return true ; } return false ; }
public static Uri getFileUri ( @ NonNull String authority , @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( ContentResolver . SCHEME_FILE ) . authority ( authority ) . path ( path ) . build ( ) ; }
public void setInfo ( TLRPC . Chat chat ) { if ( chat != null ) { setInfo ( chat . id , chat . title , null , chat . id < 0 ) ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; loadPrivateMessages ( ) ; }
public static RedditURL parseProbableCommentListing ( Uri uri ) { RedditURL matchURL = parse ( uri ) ; if ( matchURL != null ) { return matchURL ; } return new UnknownCommentListURL ( uri ) ; }
public void setText ( String text ) { text = text ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_6 . getText ( ) . toString ( ) ) ; }
public void backup ( ) { try { this . exportTo ( this . getBackupDir ( ) ) ; } catch ( IOException exc ) { Log . e ( LOG_TAG , "unable to create backup . " ) ; } }
private static JobParameters constructParameters ( String name ) { JobParameters . Builder builder = JobParameters . newBuilder ( ) . withMasterSecretRequirement ( ) . withRetryCount ( MAX_ATTEMPTS ) . withGroupId ( name ) ; return builder . create ( ) ; }
public Builder ( final Activity activity ) { this ( activity , 0 ) ; }
public ViewGroup . LayoutParams generateLayoutParams ( AttributeSet attrs ) { if ( mLayout == null ) { throw new IllegalStateException ( "RecyclerView has no LayoutManager" ) ; } return mLayout . generateLayoutParams ( getContext ( ) , attrs ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { if ( mLocked ) return false ; return super . onInterceptTouchEvent ( event ) ; }
public NoteCard ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void onClick ( View v ) { Intent i = new Intent ( ClubEventsActivity . this , EventDetailsActivity . class ) ; i . putExtra ( "event_name" , clubName ) ; startActivity ( i ) ; }
public Object getItem ( int position ) { return mArrayList . get ( position ) . title ; }
public OfxExporter ( ExportParams params , SQLiteDatabase db ) { super ( params , db ) ; }
public void onAnimationRepeat ( Animator animation ) { super . onAnimationRepeat ( animation ) ; updateFabIcon ( airportDao . isFavorite ( airport . isFavorite ) ) ; }
public void onItem ( @ Nullable Boolean item ) { if ( Boolean . TRUE . equals ( item ) ) { addBookmark ( title , url ) ; } else { deleteBookmark ( title , url ) ; } }
public static String getNotificationLedColor ( Context context ) { return getStringPreference ( context , LED_COLOR_PREF , "green" ) ; }
public boolean isStringType ( ) { switch ( this ) { case VariableTypeHexString : case VariableTypeAsciiString : case VariableTypeStorageFilePath : return true ; default : return false ; } }
public void requestAcknowledged ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { Log . d ( LOG_TAG , "Request Ack for Activate user" ) ; getMvpView ( ) . showProgress ( false ) ; ( getMvpView ( ) ) . gotoDashboard ( workflowId ) ; }
public void onReceive ( Context context , Intent intent ) { if ( intent == null || ! intent . getAction ( ) . equals ( ACTION_BOOT_COMPLETED ) ) return ; BlichSync . initializePeriodicSync ( context ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . COS ) ; }
public void v ( String tag , String message , Object . . . args ) { log ( android . util . Log . VERBOSE , tag , message , args ) ; }
public static GAMESTATUS getControlAction ( ) { return getController ( ) . gamestate ; }
public List < String > getGlossValue ( ) { return mGlossValue ; }
public void onAnimationEnd ( Object animation ) { animator = null ; oldLetters . clear ( ) ; }
public static boolean isDoubleEntryEnabled ( ) { SharedPreferences sharedPrefs = PreferenceActivity . getActiveBookSharedPreferences ( context ) ; return sharedPrefs . getBoolean ( context . getString ( R . string . key_use_double_entry ) , true ) ; }
public static < T > T get ( String key ) { return book ( ) . read ( key ) ; }
public HTMLExport ( Context context , boolean external , String fixedTableHeight ) { super ( context , new File ( external ? context . getExternalFilesDir ( null ) : context . getFilesDir ( ) , HTML_FILE ) , FormatterStyle . XML ) ; mFixedTableHeight = fixedTableHeight ; }
public int getItemViewType ( int position ) { return mElements [ position ] . isHeader ( ) ? 0 : 1 ; }
public static UserPostListingURL getDisliked ( String username ) { return new UserPostListingURL ( Type . DOWNVOTED , username , null , null , null ) ; }
public void initialize ( final BusStopListObserver observer ) { ui . stub . setOnLayoutInflatedListener ( new OnLayoutInflatedListener ( ) { @ Override public void onLayoutInflated ( WatchViewStub stub ) { ui . load ( ) ; onLoad ( observer ) ; } } ) ; }
public boolean isConversation ( ) { return type_int == Type . CONVERSATION || isMPDM ( ) ; }
public int getItemsYear ( ) { int returnyear = 0 ; returnyear = filteredData . get ( 0 ) . getJahr ( ) ; return returnyear ; }
public void onItemRangeChanged ( int positionStart , int itemCount , Object payload ) { onItemRangeChanged ( positionStart , itemCount ) ; }
public void run ( ) { Logger . debug ( "WearAppsFragment onActivityResult scrollToTop" ) ; scrollView . scrollTo ( 0 , scrollView . getTop ( ) ) ; }
public IAnswerData getAnswer ( ) { return TextWidgetUtils . getDecimalData ( getAnswerText ( ) , getFormEntryPrompt ( ) ) ; }
public void postPlaySound ( final int soundIndex ) { if ( mSoundPool != null ) { int soundId = mSoundList . get ( soundIndex ) ; mSoundPool . play ( soundId , 1 , 1 , 0 , 0 , 1 ) ; } }
private void updateVolume ( ) { if ( mId != - 1 ) { mSound . setVolume ( mId , mMuted ? 0 : mVolume ) ; } }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_8 . class ) ; startActivity ( i ) ; }
public void onCreate ( ) { super . onCreate ( ) ; Instance = this ; Realm ( ) ; Fabric . with ( this , new Crashlytics ( ) ) ; rateThisApp ( ) ; }
public Headers makeHeaders ( Map < String , String > mapHeaders ) { if ( mapHeaders == null ) { return Headers . of ( new HashMap < String , String > ( ) ) ; } return Headers . of ( mapHeaders ) ; }
public RewritesAdapter ( Fragment context , List < Rewrites > list ) { super ( context . getActivity ( ) , R . layout . list_item_rewrites , list ) ; this . context = context . getActivity ( ) ; this . list = list ; }
public void setFeaturedImageId ( int featuredImageId ) { mFeaturedImageId = featuredImageId ; }
public void testGetTypeDefault ( ) { item . populate ( new TestItem ( ) { @ Override public String getRawType ( ) { return null ; } } ) ; assertEquals ( ItemManager . Item . STORY_TYPE , item . getType ( ) ) ; }
public Builder port ( int port ) { this . mPort = port ; return this ; }
public void onPause ( ) { if ( isMusic ) player . pause ( ) ; if ( gameView != null ) gameView . onPause ( ) ; super . onPause ( ) ; }
private boolean exportDB ( File backupDir ) { File database = getDatabasePath ( Constants . DATABASE_NAME ) ; return ( StorageManager . copyFile ( database , new File ( backupDir , Constants . DATABASE_NAME ) ) ) ; }
public long onTimeShiftGetStartPosition ( ) { return mPlayer . getTimeshiftStartPosition ( ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mMedias ) ; }
public static CreatePlaylistDialog create ( @ Nullable Song song ) { ArrayList < Song > list = new ArrayList <> ( ) ; if ( song != null ) list . add ( song ) ; return create ( list ) ; }
public boolean rotatePlane ( int idx ) { if ( idx < 0 || idx >= m_planeList . size ( ) ) return false ; Plane pl = m_planeList . get ( idx ) ; pl . rotate ( ) ; computePlanePointsList ( true ) ; return true ; }
private void assertConstraintDisplayed ( String constraintText ) { if ( Build . VERSION . SDK_INT < 30 ) { checkIsToastWithMessageDisplayed ( constraintText ) ; } else { new OkDialog ( ) . assertOnPage ( ) . assertText ( constraintText ) . clickOK ( this ) ; } }
public void onCallCreated ( final Core core , final Call call ) { Lg . i ( "onCallCreated ; call = " , new CallLogger ( call ) ) ; }
private void updateBalance ( ) { if ( pocket != null ) { lastBalance = pocket . getBalance ( ) ; } }
private String formatDate ( long timestamp ) { int flags = DateUtils . FORMAT_SHOW_DATE | DateUtils . FORMAT_ABBREV_MONTH | DateUtils . FORMAT_SHOW_WEEKDAY | DateUtils . FORMAT_ABBREV_WEEKDAY ; return format ( timestamp , timestamp , flags ) ; }
private void changeTextForPlayerTurn ( ) { display . setText ( "Player" + Integer . toString ( playerTurn ) + " Turn" ) ; }
public void setListener ( Listener l ) { addListener ( l ) ; if ( this . listener != null ) { removeListener ( this . listener ) ; } this . listener = l ; }
public int playPhoneOpenMode ( ) { return this . PlayMp3 ( R . raw . az_open_ringtone ) ; }
public ArticleTextExtractor addNegative ( String neg ) { setNegative ( negativeStr + "|" + neg ) ; return this ; }
public void MessageFromClementine ( ClementineMessage clementineMessage ) { switch ( clementineMessage . getMessageType ( ) ) { case SET_VOLUME : if ( ! mUserChangesVolume ) { sb_volume . setProgress ( App . mClementine . getVolume ( ) ) ; } break ; default : break ; } }
public void onEnabled ( Context context ) { super . onEnabled ( context ) ; Log . d ( TAG , "Widget enabled" ) ; setEnabled ( context , true ) ; WidgetUpdaterJobService . performBackgroundUpdate ( context ) ; }
public void onDisconnected ( TcpClient tcpClient , Exception e ) { Log . d ( TAG , "onDisconnected" ) ; serverStatus = null ; if ( listener != null ) listener . onDisconnected ( this , e ) ; }
public String getName ( ) { return "sound" ; }
private PointD ( double x , double y ) { this . x = x ; this . y = y ; }
public void onTrimMemory ( int level ) { super . onTrimMemory ( level ) ; Crashlytics . log ( Log . DEBUG , TAG , this . getClass ( ) . getName ( ) + "#onTrimMemory ( ) " ) ; }
public int getFromAmount ( ) { return fromAmount ; }
private InboxItem ( int listPosition , RedditRenderableInboxItem item ) { this . mListPosition = listPosition ; this . mItem = item ; }
public void onCreateNavigationDrawer ( ) { useActionBarToggle ( true ) ; encourageLearning ( ! fromSavedInstance ) ; }
private void setDate ( ) { Views . setTV ( this , R . id . tv_invoice_date , getString ( R . string . rozliczenie_dnia , Dates . format ( LocalDate . now ( ) ) ) ) ; }
private void editBirthday ( BirthdayItem item ) { startActivity ( new Intent ( mContext , AddBirthdayActivity . class ) . putExtra ( Constants . INTENT_ID , item . getKey ( ) ) ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { loadPictures = isChecked ; SharedPreferences . Editor editor = prefs . edit ( ) ; editor . putBoolean ( "loadImages" , isChecked ) ; editor . apply ( ) ; }
public boolean removeAll ( Collection < ? > c ) { throw new UnsupportedOperationException ( ) ; }
public boolean onNavigationClickListener ( View clickedView ) { ComplexHeaderDrawerActivity . this . finish ( ) ; return true ; }
public String getCanopyDateInUse ( ) { return canopyDateInUse ; }
public void onViewDetachedFromWindow ( RecyclerView . ViewHolder holder ) { onViewDetachedFromWindow ( holder , holder . getItemViewType ( ) ) ; }
public JSONObject ( JSONObject copyFrom ) { this ( ) ; for ( String key : this ) { put ( key , copyFrom . get ( key ) ) ; } }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . marekulip . droidsor" , appContext . getPackageName ( ) ) ; }
public void setEditorToClassic ( ) { onData ( withTitle ( R . string . site_settings_gutenberg_default_for_new_posts ) ) . perform ( scrollTo ( ) ) . perform ( setSwitchPreferenceIsChecked ( false ) ) ; }
public void save_status_update_version ( Boolean HasNewVersion ) { editor . putBoolean ( SaveManager . updateVersion , HasNewVersion ) ; editor . apply ( ) ; }
public RankerViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . activity_rank , viewGroup , false ) ; return new RankerViewHolder ( view ) ; }
public void render ( float delta ) { super . render ( delta ) ; if ( mAssetManager . update ( ) ) { ready . emit ( ) ; } }
public static WorkFlowPinFragment newInstance ( String heading ) { return newInstance ( heading , null ) ; }
public boolean animateRemove ( final ViewHolder holder ) { resetAnimation ( holder ) ; mPendingRemovals . add ( holder ) ; return true ; }
public static TermuxTaskerAppSharedPreferences build ( @ NonNull final Context context , final boolean exitAppOnError ) { Context termuxTaskerPackageContext = PackageUtils . getContextForPackageOrExitApp ( context , TermuxConstants . TERMUX_TASKER_PACKAGE_NAME , exitAppOnError ) ; if ( termuxTaskerPackageContext == null ) return null ; else return new TermuxTaskerAppSharedPreferences ( termuxTaskerPackageContext ) ; }
public static void loadActiveReminder ( @ NonNull RealmCallback < List < Reminder >> callback ) { RealmDb . getInstance ( ) . getActiveReminders ( result -> handler . post ( ( ) -> callback . onDataLoaded ( result ) ) ) ; }
private void changeColumnsConstraints ( ) { if ( hasConstraintChanged ) { LogUtil . d ( TAG , "do changeColumnsConstraints" ) ; execute ( getChangeColumnsConstraintsSQL ( ) , mDb ) ; } }
public Engine onCreateEngine ( ) { mContext = this ; mContextWrapper = this ; preferences = PreferenceManager . getDefaultSharedPreferences ( mContextWrapper ) ; dp = getResources ( ) . getDisplayMetrics ( ) . density ; return new OcquariumWallpaperEngine ( ) ; }
public SchemeData get ( UUID uuid ) { for ( SchemeData schemeData : schemeDatas ) { if ( schemeData . matches ( uuid ) ) { return schemeData ; } } return null ; }
public boolean update ( CoNaObiadDbHelper helper , long dinnerId , Date date ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "date" , date . getTime ( ) ) ; helper . update ( tableName , contentValues , dinnerId ) ; return true ; }
public static void startImport ( Context context ) { Intent intent = new Intent ( context , ExportDbService . class ) ; context . startService ( intent ) ; }
public static boolean isScreenSecurityEnabled ( Context context ) { return getBooleanPreference ( context , SCREEN_SECURITY_PREF , true ) ; }
public ArrayList < ColorInfo > getHtmlList ( ) { return this . htmlList ; }
public UserBuilder firstName ( String first ) { if ( first != null ) { this . name [ 0 ] = first ; } return this ; }
public boolean hasExcerpt ( ) { return ! TextUtils . isEmpty ( excerpt ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_Stickers . TLdeserialize ( stream , constructor , exception ) ; }
public void formLoaded ( FormController formController ) { this . formController = formController ; }
public void onPlus ( Selector s ) { Gizmo . isometricModeShift += 1 ; s . setText ( Utils . format ( "Shift : %2 . 1f" , Gizmo . isometricModeShift ) ) ; }
public int compareTo ( HighlightType another ) { return mId . compareTo ( another . mId ) ; }
private void whenGettingItemCount ( ) { mItemCount = uut . getItemCount ( ) ; }
public String getSwitched ( ) { return mSwitched ; }
public void setPagingEnabled ( boolean enabled ) { this . isPagindEnabled = enabled ; }
public int getColor ( ) { return mBackgroundColor ; }
private void resetBankDepositView ( ) { bankDepositLayout . setVisibility ( View . GONE ) ; bankDepositImageView . setImageBitmap ( null ) ; bankDepositImageView . destroyDrawingCache ( ) ; mBankDepositImgFilePath = "" ; }
public void run ( ) { GameState . mKeyPressed ( x , bat ) ; mHandler . postDelayed ( this , delay ) ; }
public static final LongSparseArray < Integer > tourTypeDark = new LongSparseArray < Integer > ( ) { { put ( AttractionType . WALKING , R . drawable . icon_walk_dark ) ; put ( AttractionType . MONUMENT , R . drawable . icon_view_dark ) ; } } ;
public int getTextViewSmall ( ) { return textViewSmall ; }
public void bindDisplayActivity ( AppCompatActivity act ) { foregroundAct = act ; }
public float getMaxZoom ( State state ) { return zoomBounds . set ( state ) . getMaxZoom ( ) ; }
public void onRequestPermissionsResult ( int requestCode , String permissions [ ] , int [ ] grantResults ) { if ( grantResults . length <= 0 || grantResults [ 0 ] != PackageManager . PERMISSION_GRANTED ) { finish ( ) ; } }
public Date getDay ( ) { return day ; }
public TimePreferenceTest ( String parsableHour , int expectedHour ) { this . parsableHour = parsableHour ; this . expectedHour = expectedHour ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { setupListener . onSetupGestureView ( holder . image ) ; Painting painting = paintings [ position ] ; GlideHelper . loadFull ( holder . image , painting . imageId , painting . thumbId ) ; }
public void onCardTypeChanged ( String cardType , boolean isChecked ) { if ( ! restoring ) { filterModel . setCardType ( cardType , isChecked ) ; updateSearchSettingsButtonState ( ) ; filterLibraryCards ( ) ; } }
public TaskPost ( Activity activity , String url , IPostExecuteListener listener ) { mActivity = activity ; this . url = url ; this . listener = listener ; }
public void setPattern ( String pattern ) { this . pattern = pattern ; }
public long getGameId ( ) { return gameId ; }
private void initFragment ( Fragment LocationDetailFragment ) { FragmentManager fragmentManager = getSupportFragmentManager ( ) ; FragmentTransaction transaction = fragmentManager . beginTransaction ( ) ; transaction . add ( R . id . contentFrame , LocationDetailFragment ) ; transaction . commit ( ) ; }
public int getUniqueId ( ) { return uniqueId ; }
public Date getDate ( ) { return null ; }
public int getMeasureNumber ( ) { return this . measureNumber ; }
public void onRequestPermissionsResult ( int requestCode , @ NonNull String [ ] permissions , @ NonNull int [ ] grantResults ) { if ( requestCode == 10 ) { buttonListener ( ) ; } }
public void flowInterrupt ( String workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { updateCommonCode ( ostWorkflowContext ) ; }
public void setSettingMenuItem ( Id settingId , MenuItem menuItem ) { getSetting ( settingId ) . setMenuItem ( menuItem ) ; }
public void pause ( ) { Main . musicService . pausePlayer ( ) ; mFabView . setImageDrawable ( ( utils . getThemedIcon ( this , ContextCompat . getDrawable ( this , R . drawable . ic_play ) ) ) ) ; }
public float getMission ( ) { return mission ; }
public void setGridAsPreferred ( ) { PreferenceManager . setIsGridViewPreferred ( getActivity ( ) , mFile , true ) ; switchToGridView ( ) ; }
public boolean onCreateActionMode ( ActionMode actionMode , Menu menu ) { getActivity ( ) . getMenuInflater ( ) . inflate ( R . menu . fragment_reference_select , menu ) ; selectionActionMode = actionMode ; return true ; }
public static void w ( final String msg ) { Log . w ( mTAG , getMessage ( msg ) ) ; saveToFile ( ) ; }
private boolean isGranted ( ) { return ContextCompat . checkSelfPermission ( activity , state . permissionName ) == PackageManager . PERMISSION_GRANTED ; }
public void onChanged ( ) { setPageCount ( InkPageIndicator . this . viewPager . getAdapter ( ) . getCount ( ) ) ; }
public void addLaunchCount ( ) { SharedPreferences preferences = getDefaultPrefs ( ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . putInt ( LAUNCH_COUNT , preferences . getInt ( LAUNCH_COUNT , 0 ) + 1 ) ; editor . apply ( ) ; }
public ItemSprite . Glowing glowing ( ) { return getEnchantment ( ) != null ? getEnchantment ( ) . glowing ( ) : null ; }
public static long startOfYesterday ( ) { return startOfToday ( ) - secondsInDay * 1000 ; }
public SendButton ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . transportOptions = initializeTransportOptions ( false ) ; ViewUtil . mirrorIfRtl ( this , getContext ( ) ) ; }
public String toXML ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSNetwork o : networks ) { strOut . append ( o . toXml ( ) ) ; } return strOut . toString ( ) ; }
private void moveToStats ( ) { clickOn ( R . id . nav_sites ) ; clickOn ( R . id . row_stats ) ; waitForElementToBeDisplayedWithoutFailure ( R . id . image_thumbnail ) ; idleFor ( 8000 ) ; }
public Pr0Number getCurrentNumber ( ) { return currentNumber ; }
public ISqueezeService getService ( ) { return service ; }
public String desc ( ) { return Game . getVar ( R . string . MailArmor_Desc ) ; }
private void uploadToOpenStreetMap ( ) { if ( ! FileSenderFactory . GetOsmSender ( ) . isAvailable ( ) ) { launchPreferenceScreen ( MainPreferenceActivity . PREFERENCE_FRAGMENTS . OSM ) ; return ; } showFileListDialog ( FileSenderFactory . GetOsmSender ( ) ) ; }
public void onBackPressed ( ) { if ( mWebView . canGoBack ( ) ) { mWebView . goBack ( ) ; refreshBackForwardNavButtons ( ) ; } else { super . onBackPressed ( ) ; } }
private void thenModelViewHolderIsNotNull ( ) { assertNotNull ( mModelViewHolder ) ; }
public DatafeedFragmentTestController < F > withFragment ( F fragment ) { mFragment = spy ( fragment ) ; return this ; }
public void onClick ( View v ) { mTargetAngleSeekBar . setProgress ( mTargetAngleSeekBar . getProgress ( ) + 10 ) ; }
private void setReplyText ( String replyText ) { if ( replyText == null ) return ; mRestoredReplyText = replyText ; }
private void updatePlaylistsAdapter ( ) { PlaylistsAdapter adapter = new PlaylistsAdapter ( this , MediaLibraryManager . getPlaylistInfoList ( ) ) ; RecyclerView listView = PlaylistsFragment . recyclerView ; listView . setAdapter ( adapter ) ; adapter . notifyDataSetChanged ( ) ; }
public SerialSingleThreadExecutor ( ) { this ( false ) ; }
private Watch ( ) { threadPoolExecutor = new ThreadPoolExecutor ( 0 , 1 , 60L , TimeUnit . SECONDS , new LinkedBlockingDeque < Runnable > ( ) ) ; }
public ComicAdapter ( List < Comic > comicList , InteractionListener listener ) { mComicList = new ArrayList <> ( ) ; addItems ( comicList ) ; mListInteractionListener = listener ; }
public void setCurrentParentForum ( int currentParentForum ) { this . currentParentForumId = currentParentForum ; }
public LetterViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item , parent , false ) ; return new LetterViewHolder ( v ) ; }
public void setWeightUnit ( double weightUnit ) { this . weightUnit = weightUnit ; }
public boolean onTouchEvent ( MotionEvent event ) { return mIsGesturesEnabled && processTouch ( event ) ; }
public BigDecimal getSelfDeposit ( String address ) { for ( Result deposit : result ) { if ( deposit . depositor . equals ( address ) ) { return new BigDecimal ( deposit . amount . amount ) ; } } return BigDecimal . ZERO ; }
public Currency create ( ) { db . em ( ) . saveOrUpdate ( c ) ; return c ; }
public Single < List < Event >> getByTagId ( String tagId ) { return localRepository . getByTagId ( tagId ) ; }
public void configurePinnedHeader ( View header , int position , int alpha ) { return ; }
public static boolean isAccessedViaWPComRest ( SiteModel site ) { return site . getOrigin ( ) == SiteModel . ORIGIN_WPCOM_REST ; }
private int getImageResource ( int type ) { switch ( type ) { case TreasureItemType . STORY_REFLECTION : return R . drawable . ic_microphone_48 ; case TreasureItemType . CALMING_PROMPT : return R . drawable . art_roulette_baloon_answer ; default : return R . drawable . ic_gift_48 ; } }
public String format ( String board ) { return "msm" + board . split ( "mt" ) [ 1 ] . trim ( ) . split ( " " ) [ 0 ] ; }
public void onFailure ( Call < ArrayList < CollegeDetails >> call , Throwable t ) { emptyView . setVisibility ( View . VISIBLE ) ; }
public void onComplete ( @ NonNull Task < Void > task ) { if ( ! task . isSuccessful ( ) ) { callback . onError ( ) ; return ; } callback . onSuccess ( ) ; }
public boolean onMenuItemActionExpand ( MenuItem item ) { return true ; }
private void handleLoadTeamError ( Throwable throwable ) { mRxTeamLocationsCacheHelper . clearCache ( ) ; getMvpView ( ) . showError ( mErrorHandler . getMessage ( throwable ) ) ; getMvpView ( ) . setTeamProgress ( false ) ; }
public T withIdentifier ( int identifier ) { this . mIdentifier = identifier ; return ( T ) this ; }
public boolean isValid ( ) { return ( ! Util . isNullOrEmpty ( mPlainSimlarId ) || mPhoneNumber != null ) ; }
public boolean onItemLongClick ( AdapterView < ? > av , View v , int pos , long id ) { return onLongListItemClick ( pos ) ; }
public void handleLookupFailure ( int reqFlags , int responseCode ) { if ( ( reqFlags & StockService . FLAG_FIND_CLOSEST ) == StockService . FLAG_FIND_CLOSEST ) { clearFindClosest ( ) ; } }
public IAnswerData getAnswer ( ) { return formEntryPrompt . getAnswerValue ( ) ; }
public void onResume ( ) { super . onResume ( ) ; fetchLeaderboard ( ) ; }
public Observable < Tag > tagsObservable ( ) { return tagPublishSubject . asObservable ( ) ; }
public JSONObject getConf ( ) { return mConf ; }
private void cancelOrDestroy ( ) { if ( mRecognizer != null ) { mRecognizer . destroy ( ) ; mRecognizer = null ; } }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "university" ) ) { return ; } persons = null ; }
public TrackViewModelFactory ( final Application application ) { this ( application , null ) ; }
public String toString ( ) { return next == null ? Long . toBinaryString ( mData ) : next . toString ( ) + "xx" + Long . toBinaryString ( mData ) ; }
public void onClick ( View view ) { AppBarLayout appbar = ( AppBarLayout ) findViewById ( R . id . appbar ) ; appbar . setExpanded ( true ) ; persistentSearchBar . editSearchBarText ( ) ; }
public void onTransactionBroadcast ( Transaction tx ) { lock . lock ( ) ; try { log . info ( "Transaction sent { } " , tx ) ; addNewTransactionIfNeeded ( tx ) ; } finally { lock . unlock ( ) ; } queueOnTransactionBroadcastSuccess ( tx ) ; }
public void run ( ) { MainActivity . this . dataStore . backup ( ) ; }
private static boolean isAvailableChallengesExists ( AvailableChallengesInterface challenges ) { return challenges != null && challenges instanceof AvailableChallenges ; }
private void checkForInvalidFormHash ( List < FormListItem > formList ) { for ( FormListItem item : formList ) { if ( item . getHash ( ) == null ) { AnalyticsUtils . logInvalidFormHash ( serverURL ) ; break ; } } }
public NumberInput ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public void onColorSelected ( int dialogId , int color ) { SettingsManager . addPickedColor ( color , WysiwygEditor . MAX_SAVED_COLORS ) ; mEditor . setPickedColor ( color ) ; }
public void setInputMethodSettingsCategoryTitle ( int resId ) { mInputMethodSettingsCategoryTitleRes = resId ; updateSubtypeEnabler ( ) ; }
public void onStart ( ) { super . onStart ( ) ; if ( getIntent ( ) . getStringExtra ( "activity" ) . equals ( "main" ) ) { getIntent ( ) . putExtra ( "activity" , "camera" ) ; startCameraActivity ( ) ; } }
public int getWhiteBalanceTemperature ( ) { return camera_settings . white_balance ; }
public void setViewPager ( ViewPager viewPager ) { mTabStrip . removeAllViews ( ) ; mViewPager = viewPager ; if ( viewPager != null ) { viewPager . setOnPageChangeListener ( new InternalViewPagerListener ( ) ) ; populateTabStrip ( ) ; updateTabsTextColor ( ) ; } }
private void onMovieVideoClicked ( int position ) { MovieVideoEntity video = movieTrailersAdapter . getItem ( position ) ; if ( video != null ) { Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( "http : startActivity ( intent ) ; } }
private void showAddDeterminationDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; AddDeterminationDialogFragment dialog = new AddDeterminationDialogFragment ( ) ; dialog . show ( this . getFragmentManager ( ) , "AddDeterminationDialogFragment" ) ; }
public void onStart ( ) { super . onStart ( ) ; initFragment ( ) ; showWelcomeText ( ) ; }
public static void clearSavedPass ( Context context ) { SettingsManager . setMiddlePassHash ( context , null ) ; CryptManager . setMiddlePassHash ( null ) ; clearPassCheckData ( context ) ; clearMiddlePassCheckData ( ) ; }
private static int [ ] zzUnpackAction ( ) { int [ ] result = new int [ 2940 ] ; int offset = 0 ; offset = zzUnpackAction ( ZZ_ACTION_PACKED_0 , offset , result ) ; return result ; }
public void onBackPressed ( ) { finish ( ) ; }
public com . coinomi . core . protos . Protos . Key getKey ( int index ) { if ( keyBuilder_ == null ) { return key_ . get ( index ) ; } else { return keyBuilder_ . getMessage ( index ) ; } }
public BaseMessageViewHolder ( View itemView , Object payload ) { this ( itemView ) ; this . payload = payload ; }
public void onFragmentDestroy ( ) { try { if ( receiverRegistered ) { ApplicationLoader . applicationContext . unregisterReceiver ( receiver ) ; } } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } super . onFragmentDestroy ( ) ; }
public boolean hasDisableReminders ( String input ) { return input . matches ( " . *выключи ( все ) ? ?напоминания . *" ) || input . matches ( " . *отключи ( все ) ? ?напоминания . *" ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return context . getString ( R . string . section_latest ) ; case 1 : return context . getString ( R . string . section_all ) ; default : return "" ; } }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt64 ( exchange_id ) ; }
public RealmModelAdapter ( Context context , RealmResults < T > realmResults , boolean automaticUpdate ) { super ( context , realmResults , automaticUpdate ) ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mDistricts . get ( 0 ) ) ; }
public StorywellPerson ( Person person , MiBandProfile miBandProfile , UserInfo btUserInfo ) { this . person = person ; this . btProfile = miBandProfile ; this . btUserInfo = btUserInfo ; }
public CacheStorage provideCache ( ) { return CacheStorage . newInstance ( ) ; }
public void onReleased ( boolean inside ) { pressed = ! pressed ; if ( getClick ( ) . sticky ) on = ! on ; }
public void onAttach ( Activity a ) { super . onAttach ( a ) ; activity = ( SetupActivity ) a ; }
public BigDecimal getShare ( ) { return share ; }
public BatteryReceiver ( BatteryIconData iconData ) { super ( iconData ) ; }
public void whenPlayingIsFalse_showsPlayIcon ( ) { button . setPlaying ( false ) ; assertThat ( getCreatedFromResId ( button ) , equalTo ( R . drawable . ic_volume_up_black_24dp ) ) ; }
public Result call ( String method , Session session , String . . . params ) { return call ( method , session . getApiKey ( ) , map ( params ) , session ) ; }
public void onClick ( View v ) { onClickListener . onAlbumClick ( visitable . getMediaItem ( ) ) ; }
public void startRecordingIfFromSpeaker ( ) { if ( ! useFrontSpeaker || raiseChat == null || ! allowStartRecord ) { return ; } raiseToEarRecord = true ; startRecording ( raiseChat . getDialogId ( ) , null , false ) ; ignoreOnPause = true ; }
public Completable sendBroadcast ( int accountId , int audioOwnerId , int audioId , Collection < Integer > targetIds ) { return networker . vkDefault ( accountId ) . audio ( ) . setBroadcast ( new IdPair ( audioId , audioOwnerId ) , targetIds ) . toCompletable ( ) ; }
public void scrollToGroup ( int groupPosition , int childItemHeight ) { scrollToGroup ( groupPosition , childItemHeight , 0 , 0 ) ; }
private void editMode ( ) { editing = true ; fab . setImageDrawable ( getDrawable ( R . drawable . ic_save_wht_24dp ) ) ; eventSwitcher . showNext ( ) ; descriptionSwitcher . showNext ( ) ; setControlsClickable ( true ) ; }
public int mapValues ( int x , int in_min , int in_max , int out_min , int out_max ) { return ( x - in_min ) * ( out_max - out_min ) / ( in_max - in_min ) + out_min ; }
public Double getLongitude ( ) { return longitude ; }
public void onDoneClicked ( ) { if ( onTextStyleChangeListener != null ) onTextStyleChangeListener . textStyleChanged ( textStyle , colorId ) ; dismiss ( ) ; }
public void addBarrel ( ) { stats [ INDEX_BARRELS ] ++ ; }
public void onComplete ( ) { supportInvalidateOptionsMenu ( ) ; }
public Link ( String title , String subtitle , String url ) { this . title = title ; this . subtitle = subtitle ; this . url = url ; }
public void onCameraMove ( ) { updateLayers ( ) ; }
public LangSettingList ( int id , String text , String tag , String country ) { this . id = id ; ; this . text = text ; this . Tag = tag ; this . Country = country ; }
public boolean grab ( @ NotNull Item item ) { return getOwner ( ) . useBags ( ) && item . bag ( ) . equals ( getClassName ( ) ) ; }
public void stop ( ) { if ( mId == - 1 ) { return ; } mSound . stop ( mId ) ; mId = - 1 ; mLooping = false ; }
public void incrementScore ( ) { score ++ ; voted = true ; }
public View getView ( ) { return mInputView ; }
public WalletAccount getAccount ( String accountId ) { if ( wallet != null ) { return wallet . getAccount ( accountId ) ; } else { return null ; } }
public Maybe < Session > find ( int sessionId , String languageId ) { return sessionRelation ( ) . selector ( ) . idEq ( sessionId ) . executeAsObservable ( ) . firstElement ( ) ; }
public void flushWebViewCookies ( ) { CookieSyncManager . getInstance ( ) . sync ( ) ; }
public AboutBuilder addLinkedInLink ( String user ) { return addLink ( R . mipmap . linkedin , R . string . linkedin , util . openLinkedIn ( user ) ) ; }
public void loadMenuSceneFromScoreScene ( ) { setScene ( loadingScene ) ; endSceneService ( levelModeSceneService ) ; startSceneService ( menuSceneService ) ; }
public void setCoordinators ( List < Object > coordinators ) { this . coordinators = coordinators ; }
public AudioItem apply ( Audio audio ) { AudioItem audioItem = new AudioItem ( audio ) ; audioItem . setClassficationId ( audio . getAlbumId ( ) ) ; audioItem . setClassficationName ( audio . getAlbum ( ) ) ; return audioItem ; }
public void run ( ) { wasLongTap = processAction ( dir [ TAP ] ) ; }
public static void setUp ( ) { mAppContext = InstrumentationRegistry . getTargetContext ( ) ; OstSdk . init ( mAppContext , "" ) ; }
public TokenSearchTextView ( Context context ) { super ( context ) ; init ( ) ; }
public void notifyDataSetChanged ( ) { synchronized ( mutextContentIsUpToDate ) { contentIsUpToDate = false ; setContent ( ) ; } }
public void buttonsShouldNotLaunchIntentsWhenPermissionsDenied ( ) { stubAllRuntimePermissionsGranted ( false ) ; assertIntentNotStarted ( activity , getIntentLaunchedByClick ( R . id . capture_image ) ) ; }
public Builder setViewRoot ( int viewRootId ) { P . mViewRoot = null ; P . mViewRootId = viewRootId ; return this ; }
public int getGroupCount ( ) { return 2 ; }
public void getDirName ( ) throws UnknownUriException { fsResolver . existsFileNames = Arrays . asList ( "bar" ) ; assertEquals ( "bar" , fakeFs . getDirPath ( Uri . parse ( "file fsResolver . existsFileNames = null ; }
public void updateCurrentSong ( Song song ) { fragment . toolbar . setTitle ( song . title ) ; fragment . toolbar . setSubtitle ( MusicUtil . getSongInfoString ( song ) ) ; }
public void setAnimation ( final JSONObject json ) { isAnimationLoading = true ; setProgressWhenCompositionSet = false ; playAnimationWhenCompositionSet = false ; cancelLoaderTask ( ) ; compositionLoader = LottieComposition . fromJson ( getContext ( ) , json , loadedListener ) ; }
public void setEnabled ( boolean enabled ) { if ( enabled == isEnabled ( ) ) return ; super . setEnabled ( enabled ) ; if ( enabled ) ( ( CrosshairRenderer ) mRenderer ) . fade ( ) ; }
public void run ( ) { registration . listener . onTransactionBroadcastFailure ( TransactionWatcherWallet . this , new BitTransaction ( tx ) ) ; }
private void applyTheme ( ThemeInfo theme ) { currentTheme = null ; currentCustomTheme = theme ; currentCustomThemePatcher = null ; if ( theme == null ) currentTheme = fallbackTheme ; }
private DrawDebtActivity getSActivity ( ) { return ( DrawDebtActivity ) getBaseActivity ( ) ; }
public boolean getFurther ( int target ) { if ( Dungeon . level . distance ( getPos ( ) , target ) > 2 ) { setState ( MobAi . getStateByClass ( Hunting . class ) ) ; } return super . getFurther ( target ) ; }
public void write ( DataOutputStream pStream ) throws IOException { writeString ( pStream , address ) ; pStream . writeLong ( amount ) ; writeString ( pStream , comment ) ; }
public PlaceProviderObject getPlaceForPhoto ( MessageObject messageObject , TLRPC . FileLocation fileLocation , int index ) { return null ; }
public void onClick ( View v ) { intent = new Intent ( NoNetworkActivity . this , GridActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP | Intent . FLAG_ACTIVITY_NEW_TASK ) ; startActivity ( intent ) ; }
private BroadcastReceiver wallpaperChangeRequestReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { U . showImageChooser ( HomeActivityDelegate . this ) ; } } ;
public StringBuffer format ( Object obj , StringBuffer toAppendTo , FieldPosition pos ) { int i = Math . round ( ( ( Number ) obj ) . floatValue ( ) ) ; return toAppendTo . append ( domainLabels [ i ] ) ; }
public void update ( MESSAGE message ) { update ( message . getId ( ) , message ) ; }
public DeleteTask ( ContentResolver c , Context cd , CompressedExplorerFragment compressedExplorerFragment ) { this . cd = cd ; rootMode = PreferenceManager . getDefaultSharedPreferences ( cd ) . getBoolean ( PrefFrag . PREFERENCE_ROOTMODE , false ) ; this . compressedExplorerFragment = compressedExplorerFragment ; }
public void onData ( NetworkDevice origin , SensorData sensorData , float userSensitivity ) { normalize ( sensorData . data ) ; mDataSink . onData ( origin , sensorData , userSensitivity ) ; }
public int delete ( Uri uri , String selection , String [ ] selectionArgs ) { throw new UnsupportedOperationException ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == R . id . action_activity_settings_sync ) { sync ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public int compare ( StatItem lhs , StatItem rhs ) { return rhs . getCorrect ( ) - lhs . getCorrect ( ) ; }
public void initMap ( GoogleMap map , LatLng firstPosition ) { init ( map ) ; updateCurrentPositionMarker ( firstPosition ) ; mMap . animateCamera ( CameraUpdateFactory . newLatLngZoom ( mCurrentPositionMarker . getPosition ( ) , 15 ) ) ; setMyLocationButtonListner ( ) ; }
public void run ( ) { ClipboardConnector . send ( new Message ( cipherManager . encrypt ( clipboardText ) , user ) ) ; }
public String getSelectedOptionValue ( ) { if ( mSelectedOption == - 1 ) return null ; return mOptions [ mSelectedOption ] ; }
private void initViews ( ) { songListHeader = LayoutInflater . from ( this ) . inflate ( R . layout . artist_detail_header , songListView , false ) ; albumRecyclerView = ButterKnife . findById ( songListHeader , R . id . recycler_view ) ; }
public void museListChanged ( ) { availableMuses = manager . getMuses ( ) ; sendEvent ( MUSE_LIST_CHANGED , getWritableMuseList ( availableMuses ) ) ; }
public void someUIErrorOccurred ( String inErrorMessage ) { Timber . e ( "someUIErrorOccurred : %s" , inErrorMessage ) ; }
public String formatEnergyCountAndUnit ( BigDecimal amount , AmountUnit amountUnit , EnergyDensity energyDensity ) { BigDecimal energyAmount = getEnergyAmountFrom ( amount , amountUnit , energyDensity ) ; return format ( energyAmount , energyDensity . getEnergyUnit ( ) ) ; }
public void setReportingMode ( int reportingMode ) { this . reportingMode = reportingMode ; }
public void testFormattedSlider ( ) { Jump jump = createJump ( ) ; assertEquals ( jump . getFormattedSlider ( ) , "Down" ) ; jump . setSlider ( jump . SLIDER_UP ) ; assertEquals ( jump . getFormattedSlider ( ) , "Up" ) ; }
public String getMeid ( ) { return meid ; } ;
public void getPositionOffset ( MutableFloatPoint2D result ) { result . set ( mPositionOffset ) ; }
private static String filenameForUrl ( String url , FileExtension extension , boolean isTemp ) { return "lottie_cache_" + url . replaceAll ( "\\W + " , "" ) + ( isTemp ? extension . extension : extension . tempExtension ( ) ) ; }
public void resume ( ) { mResumed = true ; for ( ObjectInfo info : mObjectInfos . values ( ) ) { info . setResumed ( true ) ; } }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_0 . getText ( ) . toString ( ) ) ; }
public List < String > getLSource ( ) { return this . lsource ; }
public void testMedicineNavBar ( ) { onView ( withId ( R . id . medicine ) ) . perform ( click ( ) ) ; onView ( withText ( "My Medicine" ) ) . check ( matches ( isDisplayed ( ) ) ) ; }
public static float getTerminalTranscriptRowsInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNotInRange ( TermuxPropertyConstants . KEY_TERMINAL_TRANSCRIPT_ROWS , DataUtils . getIntFromString ( value , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_TRANSCRIPT_ROWS ) , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_TRANSCRIPT_ROWS , TermuxPropertyConstants . IVALUE_TERMINAL_TRANSCRIPT_ROWS_MIN , TermuxPropertyConstants . IVALUE_TERMINAL_TRANSCRIPT_ROWS_MAX , true , true , LOG_TAG ) ; }
public OfficeBearer onCreateViewHolder ( ViewGroup parent , int viewType ) { View officeBearer = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . office_bearer , parent , false ) ; return new OfficeBearer ( officeBearer ) ; }
private void checkUser ( ) { if ( userRepo . count ( ) > 1 ) { openSomeActivity ( LoginListActivity . class , true ) ; } else { notUser ( ) ; } }
public void setImg ( String ruta ) { Glide . with ( contexto ) . load ( ruta ) . into ( img ) ; }
public void setPositionLast ( boolean positionLast ) { this . positionLast = positionLast ; sessionInfo . getRemoteProfile ( ) . setAddPositionLast ( positionLast ) ; }
public void onAcknowledgePurchaseResponse ( BillingResult billingResult ) { if ( billingResult . getResponseCode ( ) == BillingClient . BillingResponseCode . ITEM_ALREADY_OWNED ) { preferencesManager . setIsOnFreeVersion ( false ) ; listener . onPremiumAlreadyOwned ( ) ; } }
public long getTransferState ( ) { return attachment . getTransferState ( ) ; }
public ModelClickListener ( Context context , String key , ModelType . MODELS type ) { this . key = key ; this . context = context ; this . type = type ; }
public void onTextChanged ( CharSequence charSequence , int i , int i2 , int i3 ) { checkUserName ( nameTextView . getText ( ) . toString ( ) , false ) ; }
public void shouldNotPassValidation_noBirthDate ( ) { patient . getPerson ( ) . setBirthdate ( null ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public void setCategory ( PlaceNames . Category category ) { editor . putString ( KEY_CATEGORY , category . toString ( ) ) ; editor . commit ( ) ; }
public void onFailure ( Call < AttendanceResult > call , Throwable t ) { }
public void makeTagSort_WhenSortTypeName_ReturnCorrectComparator ( ) { Comparator < TagSortable > sut = TagSortFactory . makeTagSort ( SortType . NAME ) ; int result = sut . compare ( tag1 , tag2 ) ; assertThat ( result , lessThan ( 0 ) ) ; }
public boolean areContentsTheSame ( @ NonNull MuclumbusService . Room a , @ NonNull MuclumbusService . Room b ) { return a . equals ( b ) ; }
public void loadGraphics ( ) { this . texture = Assets . getPackedTextureFromID ( textureString , "item" ) ; }
public void onWikidataEditSuccessful ( ) { updateMapAndList ( MAP_UPDATED , null ) ; }
public Map < String , String > getOptions ( ) { return options ; }
public void setArtistAlbumsList ( List < Album > artistAlbumsList ) { this . artistAlbumsList = artistAlbumsList ; }
public int getMonsters ( ) { return remainingMonsters ; }
public Float getY ( Integer origin_y ) { return getValue ( origin_y , m_bitmap_origin_height , canvasHeight ) ; }
public void useWifi ( Context context , boolean useWifi ) { WifiManager wifiManager = ( WifiManager ) context . getSystemService ( Context . WIFI_SERVICE ) ; wifiManager . setWifiEnabled ( useWifi ) ; }
public EventBuilder setProgressDate ( Date progressDate ) { this . progressDate = progressDate ; return this ; }
public void setList ( List < Category > categories ) { mCateGory = categories ; alignCache ( ) ; }
private Album ( String name , String url , String artist ) { super ( name , url ) ; this . artist = artist ; }
public void setProgressTintMode ( @ Nullable PorterDuff . Mode tintMode ) { logProgressBarTintWarning ( ) ; super . setProgressTintMode ( tintMode ) ; }
public boolean hasAuthorFirstName ( ) { return ! TextUtils . isEmpty ( authorFirstName ) ; }
public void onClick ( DialogInterface arg0 , int arg1 ) { entryDeleted = true ; if ( isSaved ) { AnimusFiles . deleteEntry ( context . getFilesDir ( ) , filename ) ; AnimusFiles . removeNewEntryFromPreference ( sp ) ; } finish ( ) ; }
public int getItemCount ( ) { return itemsData . size ( ) ; }
public void showNotificationSettings ( int accountId , int peerId ) { DialogNotifOptionsDialog dialog = DialogNotifOptionsDialog . newInstance ( accountId , peerId ) ; dialog . show ( getFragmentManager ( ) , "dialog - notif - options" ) ; }
public static PollEntity . AnswerDbo mapAnswer ( Poll . Answer answer ) { return new PollEntity . AnswerDbo ( answer . getId ( ) , answer . getText ( ) , answer . getVoteCount ( ) , answer . getRate ( ) ) ; }
public Loader < ProcessResult > onCreateLoader ( int id , Bundle args ) { return new ProcessLoader ( getActivity ( ) , mCmd ) ; }
private void showSignInOptions ( ) { startActivityForResult ( AuthUI . getInstance ( ) . createSignInIntentBuilder ( ) . setAvailableProviders ( providers ) . setLogo ( R . drawable . triviapp_icon ) . setTheme ( R . style . LoginThemeLight ) . build ( ) , MY_REQUEST_CODE ) ; }
private Animator transformToPrimaryAnimator ( List < View > oldChildren ) { int nextNewPrimaryItemIndex = mPathContainer . getChildCount ( ) - 1 ; PathItemView newPrimaryItem = ( PathItemView ) mPathContainer . getChildAt ( nextNewPrimaryItemIndex ) ; return newPrimaryItem . getTransformToPrimaryAnimator ( ) ; }
public static Factory getFactory ( ) { return new Factory ( ) { public CheapSoundFile create ( ) { return new CheapMP3 ( ) ; } public String [ ] getSupportedExtensions ( ) { return new String [ ] { "mp3" } ; } } ; }
public static boolean remindersSound ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_reminders_sound ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_reminders_sound ) ) ; }
public Tab ( Class < ? extends Fragment > fClass , @ StringRes String name ) { mName = name ; fragmentClass = fClass ; }
public static int formatWindUnit ( Context context ) { switch ( AppPreferences . windUnits ( context ) ) { case 0 : return R . string . wind_unit_rus ; case 2 : return R . string . wind_unit_imp ; default : return R . string . wind_unit_metric ; } }
public boolean isBusy ( ) throws RemoteException { return mService . get ( ) . isBusy ( ) ; }
public void sendFeedbackByEmail ( ) { AppUtils . sendFeedbackByEmail ( getActivity ( ) ) ; }
public void setupTeams ( List < Team > teams ) { mAllTeams = mActualTeams = teams ; notifyDataSetChanged ( ) ; }
public String toString ( ) { if ( getContent ( ) != null ) return getContent ( ) . toString ( ) ; else return " ( no content ) " ; }
private void setErrPwMatch ( ) { mTvPwNone . setVisibility ( View . GONE ) ; mTvPwMatch . setVisibility ( View . VISIBLE ) ; }
private void clearConfig ( int appWidgetId ) { mContext . getSharedPreferences ( WidgetConfig . getConfigName ( appWidgetId ) , MODE_PRIVATE ) . edit ( ) . clear ( ) . apply ( ) ; }
public void setEventTypeString ( String eventTypeString ) { this . eventTypeString = eventTypeString ; }
private void enableMenuButtons ( boolean enable ) { mWriteTag . setEnabled ( enable ) ; mReadTag . setEnabled ( enable ) ; btnKeyEditor . setEnabled ( enable ) ; btnDumpEditor . setEnabled ( enable ) ; }
public boolean areItemsTheSame ( @ NonNull MuclumbusService . Room a , @ NonNull MuclumbusService . Room b ) { return a . address != null && a . address . equals ( b . address ) ; }
private Executor getExecutor ( ) { return Game . instance ( ) . serviceExecutor ; }
public void onReceive ( final Context context , final Intent intent ) { mLogger . i ( "Detected screen off event , disabling call alert" ) ; incomingCallAlerts . stop ( ) ; }
public void fetchEntities ( ) { entities = fetchEntities ( em ) ; if ( ! multiSelect ) { adapter = createAdapter ( activity , entities ) ; } }
public NearbyVideoAdapter ( Context context , VideoInfo [ ] videoInfo ) { this . videoInfo = videoInfo ; this . context = context ; }
public void onClick ( View v ) { try { if ( visibleDialog != null ) { visibleDialog . dismiss ( ) ; } } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } cleanupFolders ( ) ; }
private View . OnClickListener getOnNextListener ( ) { return new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { verifyMnemonic ( ) ; } } ; }
private boolean isThisPostTotallyNewOrFailed ( PostModel post ) { return ! mUploadStore . isRegisteredPostModel ( post ) || ( mUploadStore . isFailedPost ( post ) || mUploadStore . isPendingPost ( post ) ) ; }
private void saveGame ( ) { if ( game . getStatus ( ) == Game . GameStatus . GAME_RUNNING ) { game . pause ( ) ; game . save ( new GameSaverPersistent ( this ) ) ; } }
public void postLoad ( @ NonNull List < HistoryItem > items ) { pbHistory . setVisibility ( View . GONE ) ; rvHistoryItems . setVisibility ( View . VISIBLE ) ; ( ( HistoryItemsAdapter ) rvHistoryItems . getAdapter ( ) ) . addHistoryItems ( items ) ; }
public boolean hasEncryptionParameters ( ) { return ( ( bitField0_ & 0x00000010 ) == 0x00000010 ) ; }
public static void logException ( Throwable e ) { alert ( getExceptionMessage ( e ) ) ; }
public int getShuffleMode ( ) { return shufflingQueue . getShuffleMode ( ) ; }
public FitnessManagerInterface getFitnessManager ( ) { this . fitnessManager = FitnessManager . newInstance ( this . getServer ( ) , this . context ) ; return this . fitnessManager ; }
public PlaceAndPlateDtoAssembler withPlate ( String plateStart ) { this . plateStart = plateStart ; return this ; }
public static void v ( String tag , String msg ) { if ( Constants . DEBUG ) { android . util . Log . v ( tag , msg ) ; } }
public ModeObject ( String mode , String value ) { this . modeName = mode ; this . value = value ; }
public static String [ ] playerNames = { "Zorge . R" , "Baat" , "Osta" , "Armhalfer" , "J ( ) KER" , "a1batross" , "mvb06" , "NoPH8" , "PUSYA" , "Neko - mata" } ;
public CharSequence getPageTitle ( int position ) { final int resId = mIsRtl ? ARABIC_TITLES [ position ] : TITLES [ position ] ; return getString ( resId ) ; }
public int getItemCount ( ) { return mEntries . size ( ) - 1 ; }
public void onPageSelected ( int position ) { enableIndicator ( position ) ; if ( position == adapter . getCount ( ) - 1 ) { binding . setIsLastPage ( true ) ; } else { binding . setIsLastPage ( false ) ; } }
public void clear ( ) { mNumberInputEditText . setCursorVisible ( false ) ; mNumberInputEditText . getText ( ) . clear ( ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { persistString ( mEntryValues [ position ] ) ; }
public void onDownEvent ( final int x , final int y , final int pointerId , final long eventTime ) { mActivePointerId = pointerId ; mCurrentKey = detectKey ( x , y ) ; }
public SummaryNumber ( Context context ) { super ( context ) ; init ( ) ; }
public void setUserAgentString ( String agent ) { putString ( Name . USER_AGENT_STRING , agent ) ; }
private void addtext ( ) { inputTextEt . setVisibility ( View . VISIBLE ) ; inputTextEt . setText ( null ) ; Utility . showSoftKeyboard ( ( Activity ) DrawImageActivity . this , inputTextEt ) ; }
public void onClick ( View view ) { presenter . startProgressAnimation ( ) ; presenter . showControlForProgressInfo ( view ) ; }
public IdentifyUserPromptPage clickOnFormWithIdentityPrompt ( String formName ) { clickOnFormButton ( formName ) ; return new IdentifyUserPromptPage ( formName , rule ) . assertOnPage ( ) ; }
public ArrayList < CommandInfo > getCommands ( ) { return mCommands ; }
public void onAvailable ( Network n ) { scheduleConnectionToNode ( ) ; }
public void request ( ) { client . createService ( TokenApi . class ) . getApps ( ) . enqueue ( Callback . callInUI ( activity , this : : onReceiveApps , this : : onFailedApps ) ) ; }
public void die ( NamedEntityKind cause ) { ScarecrowNPC . Quest . process ( getPos ( ) ) ; Ghost . Quest . process ( getPos ( ) ) ; super . die ( cause ) ; }
private void initInfiniteSoundPrefs ( ) { binding . infiniteSoundOptionPrefs . setOnClickListener ( mInfiniteSoundClick ) ; binding . infiniteSoundOptionPrefs . setChecked ( mPrefs . isInfiniteSoundEnabled ( ) ) ; }
public static DatabaseHelperM get ( Context inContext ) { if ( sDatabaseHelper == null ) { sDatabaseHelper = new DatabaseHelperM ( inContext . getApplicationContext ( ) ) ; } return sDatabaseHelper ; }
public void launchLoginView ( ) { FragmentUtils . addFragment ( R . id . layout_container , CreateAccountFragment . newInstance ( false ) , this , CREATE_ACCOUNT_TAG ) ; mOnBoardingPresenter . checkForEconomy ( ) ; }
public void die ( NamedEntityKind cause ) { GameScene . playLevelMusic ( ) ; GameScene . bossSlain ( ) ; level ( ) . unseal ( ) ; super . die ( cause ) ; }
public boolean isDead ( ) { return ! ship . isAlive ( ) || ! ship . isInside ( levelLimits ) || nbBase - bases . size ( ) != 0 ; }
public static Intent createIntent ( Context context , String url ) { Intent intent = new Intent ( context , CustomAnimationActivity . class ) ; intent . putExtra ( URL_ARGS , url ) ; return intent ; }
public void onAccountUnregistered ( Account account , OnRegStateParam param ) { mRemoteLogger . d ( "onAccountUnRegistered" ) ; }
public void onResume ( ) { super . onResume ( ) ; updateScreeenfromProfile ( ) ; }
public void setAge ( int age ) { this . age = age ; }
public static void importXmlFileFromIntent ( Activity context , Intent data , TaskDelegate onFinishTask ) { GncXmlExporter . createBackup ( ) ; new ImportAsyncTask ( context , onFinishTask ) . execute ( data . getData ( ) ) ; }
public void setFacId ( Integer facId ) { this . facId = facId ; }
public void onEventMainThread ( DynamicNavigationReadyEvent event ) { if ( alreadyInitialized ) { alreadyInitialized = false ; } else { init ( ) ; } }
public void insert ( Todo todo ) { AppDatabase db = AppDatabase . getInstance ( ) ; TodoDao todoDao = db . todoDao ( ) ; todoDao . insert ( todo ) ; }
public static void logGhostV0Error ( ) { Timber . i ( "GHOST VERSION 0 . x ERROR - UPGRADE REQUIRED" ) ; Answers . getInstance ( ) . logCustom ( new CustomEvent ( "Ghost v0 . x error" ) ) ; }
private void resumeUpdatingMap ( ) { if ( ognService != null ) { ognService . resumeUpdatingMap ( mMap . getProjection ( ) . getVisibleRegion ( ) . latLngBounds ) ; } }
public void admissionCounterFinished ( int id , boolean isNew ) { mSubjectHasBeenChanged = true ; if ( isNew ) mAdapter . notifyIdAdded ( id , true ) ; else mAdapter . notifyOfChangeAtId ( id , true ) ; dialogClosed ( ) ; }
private static double calcBasicAAC ( int type , double aac , int carry ) { if ( Arrays . binarySearch ( T2LIST_FIGHT_AIRCRAFTS , type ) < 0 ) { return 0 ; } else { return Math . sqrt ( carry ) * aac ; } }
public static TekstTilTale instans ( Context ctx ) { if ( instans == null ) { instans = new TekstTilTale ( ) ; instans . tts = new TextToSpeech ( ctx . getApplicationContext ( ) , instans ) ; } return instans ; }
public void onLocationChanged ( Location location ) { record ( location ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( channel_id ) ; stream . writeInt64 ( access_hash ) ; }
public static String getToken ( ) { return token ; }
public void clear ( ) { mValues . clear ( ) ; notifyDataSetChanged ( ) ; }
public ToastCard ( Context context , String packageName ) { this ( context ) ; loadData ( packageName ) ; }
public ChangesHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . item_changes , parent , false ) ; return new ChangesHolder ( view , context ) ; }
public String [ ] getBasePackage ( String name ) { return _bases . get ( name ) ; }
private static long getBaseFileSize ( BaseFileParcelable baseFile , Context context ) { if ( baseFile . isDirectory ( context ) ) { return baseFile . folderSize ( context ) ; } else { return baseFile . length ( context ) ; } }
public static String divide ( String num1 , String num2 , int decimalPlaces ) { return new BigDecimal ( num1 ) . divide ( new BigDecimal ( num2 ) , decimalPlaces , RoundingMode . HALF_UP ) . toString ( ) ; }
public boolean getShowOnlyClosestInstanceOfRecurringEvent ( ) { return sharedPreferences . getBoolean ( PREF_SHOW_ONLY_CLOSEST_INSTANCE_OF_RECURRING_EVENT , false ) ; }
public void toggle ( ) { if ( ! isCheckable ) return ; if ( ! isChecked ( ) ) { setChecked ( true ) ; } }
public double getDistance ( Distance . Unit unit ) { return distance . getDistance ( unit ) ; }
public void onSuccess ( GetAllNews . ResponseValue response ) { mNewsListView . showNews ( response . getNewsItemList ( ) ) ; mNewsListView . hideProgress ( ) ; checkForErrors ( response . getNewsItemList ( ) ) ; }
public static void openIt ( FragmentActivity activity , ProjectDataIntra item ) { BottomSheetProjectsGalaxyFragment bottomSheetDialogFragment = BottomSheetProjectsGalaxyFragment . newInstance ( item ) ; bottomSheetDialogFragment . show ( activity . getSupportFragmentManager ( ) , bottomSheetDialogFragment . getTag ( ) ) ; }
private void showEventsEnded ( ) { ListPreference preference = ( ListPreference ) findPreference ( ApplicationPreferences . PREF_EVENTS_ENDED ) ; preference . setSummary ( preference . getEntry ( ) ) ; }
public void onClick ( View v ) { int adapterPosition = getAdapterPosition ( ) ; Bookmark bookmark = mSortedData . get ( adapterPosition ) ; if ( mClickHandler != null ) mClickHandler . onBookmarkClick ( bookmark ) ; }
private String getElement ( ZipFile epubFile , String elementKey ) throws IOException { InputStream inputStream = getEntry ( epubFile , elementKey ) ; return storageProvider . read ( inputStream ) ; }
public static void redirectToActivity ( Context from , Class activityClass ) { redirectToActivity ( from , activityClass , null ) ; }
public static DashboardPosition getDashboardPosition ( Host . Status status ) { HostStatusMap result = map . get ( status ) ; return result == null ? DashboardPosition . UNKNOWN : DashboardPosition . fromValue ( result . ordinal ( ) ) ; }
public ScissorsGameScreen ( RPSParty game ) { this . game = game ; loadAssets ( ) ; camera = createCamera ( ) ; addLabel ( ) ; circleSize = ScissorGameController . getInstance ( ) . getCircleSize ( ) ; setSemiCircleTexture ( ) ; createAnimation ( ) ; }
public void onDataSetChanged ( ) { }
public PaletteButton . Category getPaletteCategory ( ) { return this == READ ? PaletteButton . Category . TOP_LEVEL_TERM : PaletteButton . Category . CONVERSION ; }
public Object getAddressLine3 ( ) { return addressLine3 ; }
public void handleDownloadSuccess ( ) { mQuranSettings . removeShouldFetchPages ( ) ; runListView ( ) ; }
public WorkshopAdapter ( @ NonNull Context context , int resource , List < WorkshopData > objects ) { super ( context , resource , objects ) ; }
public SimpleSlide build ( ) { if ( background == 0 ) throw new IllegalArgumentException ( "You must set a background . " ) ; return new SimpleSlide ( this ) ; }
public HorizontalProgressDrawable ( Context context ) { super ( new Drawable [ ] { new HorizontalProgressBackgroundDrawable ( context ) , new SingleHorizontalProgressDrawable ( context ) , new SingleHorizontalProgressDrawable ( context ) } , context ) ; }
public StationsDataSource ( Context context ) { dbHelper = new DatabaseHelper ( context ) ; }
private ViewPagerAdapter ( FragmentManager fragmentManager , List < Fragment > fragments ) { super ( fragmentManager ) ; mFragments = fragments ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . main_menu , menu ) ; return true ; }
public static DeleteSongsDialog create ( Song song ) { ArrayList < Song > list = new ArrayList <> ( ) ; list . add ( song ) ; return create ( list ) ; }
private double sqinchTosqfoot ( double num ) { return num * 0 . 00694 ; }
public RestoMenu createFromParcel ( Parcel in ) { return new RestoMenu ( in ) ; }
public boolean shouldGetBlankFormButtonBeVisible ( ) { boolean buttonEnabled = adminSettings . getBoolean ( AdminKeys . KEY_GET_BLANK ) ; return ! isMatchExactlyEnabled ( ) && buttonEnabled ; }
public Integer getPeriod ( ) { return period ; }
public IPresenterFactory < NewsfeedCommentsPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> { int accountId = getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) ; return new NewsfeedCommentsPresenter ( accountId , saveInstanceState ) ; } ; }
public RelationshipInteractor ( IStores repositories , INetworker networker ) { this . repositories = repositories ; this . networker = networker ; }
public RedditSubreddit ( String url , String title , final boolean isSortable ) { this . url = url ; this . title = title ; }
public void onCreate ( Bundle icicle ) { super . onCreate ( icicle ) ; setContentView ( R . layout . registration_activity ) ; initializeResources ( ) ; initializeSpinner ( ) ; initializeNumber ( ) ; initializeChallengeListener ( ) ; }
public void onResume ( ) { super . onResume ( ) ; mapView . onResume ( ) ; }
public Integer getPrice ( ) { return price ; }
public CalendarQueryRow setDisplayColor ( Object obj ) { return setColumn ( CalendarContract . Instances . DISPLAY_COLOR , obj ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . TANH_INVERSE ) ; }
public void setDataToVerify ( String mDataToVerfiy ) { this . mDataToVerify = mDataToVerfiy ; }
public void draw ( Canvas canvas ) { canvas . drawRoundRect ( mBounds , mRx , mRy , mPaint ) ; }
public static boolean isPackageInstalled ( String packageName , PackageManager packageManager ) { try { packageManager . getPackageInfo ( packageName , PackageManager . GET_ACTIVITIES ) ; return true ; } catch ( PackageManager . NameNotFoundException e ) { return false ; } }
public static boolean ipv6Fwd ( ) { return gPrefs . getBoolean ( IP6_FWD , false ) ; }
public void callHideNotify ( ) { hideNotify ( ) ; }
public AudioSlide ( Context context , Uri uri , long dataSize , boolean voiceNote ) { super ( context , constructAttachmentFromUri ( context , uri , MediaUtil . AUDIO_UNSPECIFIED , dataSize , 0 , 0 , false , null , voiceNote ) ) ; }
public int getDelay ( ) { return delay ; }
public void addAlias ( final String alias ) { if ( aliases == null ) { aliases = new ArrayList < String > ( ) ; } aliases . add ( alias ) ; }
public int delete ( Uri uri , String selection , String [ ] selectionArgs ) { return 0 ; }
public void open ( Uri uri ) { open ( intent ( uri ) ) ; }
public void onBackKeyPressed ( ) { sceneService . loadMenuSceneFromLevelChoiceScene ( ) ; }
public static void w ( final String msg , Throwable tr ) { Log . w ( mTAG , getMessage ( msg ) , tr ) ; saveToFile ( ) ; }
public boolean getAscending ( ) { return CacheUtil . getCache ( getActivity ( ) , getCategory ( ) + TagsUtil . ORDER_ASCENDING , false ) ; }
public ExchangeEntry ( Address depositAddress , Value depositAmount , String depositTxId ) { this ( STATUS_INITIAL , depositAddress , depositAmount , depositTxId , null , null , null ) ; }
public void onChanged ( List < Movie > movies ) { MovieListFragment movieListFragment = MovieListFragment . getInstance ( new ArrayList <> ( movies ) ) ; loadFragment ( movieListFragment , null ) ; movieList . removeObserver ( this ) ; }
public QifExporter ( ExportParams params , SQLiteDatabase db ) { super ( params , db ) ; LOG_TAG = "OfxExporter" ; }
public void start ( Attributes attributes ) { mCurrentUser . setAvatarId ( Integer . parseInt ( attributes . getValue ( User . Xml . AVATAR_ATTRIBUTE ) ) ) ; }
public static Object jsonToObject ( Class object , String json ) { Gson gson = new Gson ( ) ; return gson . fromJson ( json , object ) ; }
public static com . coinomi . core . protos . Protos . AddressStatus parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public List < WeatherDescription > getWeatherDescription ( ) { return mWeatherDescription ; }
public void onResume ( ) { super . onResume ( ) ; Analytics . getTracker ( getContext ( ) ) . log ( new ViewEvent ( ) ) ; }
private void extendNew ( long did ) { decks . select ( did ) ; sched . extendLimits ( 1 , 0 ) ; }
public void onClick ( View v ) { resetPlot ( ) ; }
public void run ( ) { setHeader ( StringEscapeUtils . unescapeHtml4 ( subreddit . title ) , subtitle ) ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public TemplateItem ( String title ) { this . title = title ; this . date = TimeUtil . getGmtDateTime ( ) ; this . key = UUID . randomUUID ( ) . toString ( ) ; }
public void next ( ) { if ( ! swipeHandler . beenSwiped ( ) ) { swipeHandler . setBeenSwiped ( true ) ; showNextView ( ) ; } }
public void setPhrase ( String phrase ) { this . phrase = phrase ; }
public void fetchInstalledThemesIfJetpackSite ( ) { if ( mSite . isJetpackConnected ( ) && mSite . isUsingWpComRestApi ( ) && ! mIsFetchingInstalledThemes ) { mDispatcher . dispatch ( ThemeActionBuilder . newFetchInstalledThemesAction ( mSite ) ) ; mIsFetchingInstalledThemes = true ; } }
public void onClick ( DialogInterface arg0 , int arg1 ) { mPreferences . setTextSize ( MAX - bar . getProgress ( ) ) ; }
public void setAdaptiveColorProvider ( @ Nullable PercentageChartView . AdaptiveColorProvider adaptiveColorProvider ) { this . renderer . setAdaptiveColorProvider ( adaptiveColorProvider ) ; }
public StationsRepository ( Preferences preferences ) { this . preferences = preferences ; }
public int getLastVersionSeen ( ) { return Utilities . parseIntWithDefault ( prefs . getString ( PreferenceNames . LAST_VERSION_SEEN_BY_USER , "1" ) , 1 ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mFragmentHolder . removeBackClickListener ( this ) ; mFragmentHolder = null ; mListener = null ; }
public void testBeanMeetsHashCodeContract ( ) { BeanTestCase . assertMeetsHashCodeContract ( HostBean . class , FIELDS ) ; }
public void setAuthorAvatar ( String authorAvatar ) { this . authorAvatar = StringUtils . notNullStr ( authorAvatar ) ; }
public void clickingCharSearch ( View view ) { Intent intent = new Intent ( NavD . this , CharacterActivity . class ) ; startActivity ( intent ) ; }
private int getResourceIdFor ( String name ) { String packageName = context . getResources ( ) . getResourcePackageName ( R . drawable . dummy ) ; return context . getResources ( ) . getIdentifier ( name , "drawable" , packageName ) ; }
public String getEventTimeString ( ) { return hideEventTime ( ) ? "" : createTimeSpanString ( ) ; }
public void onError ( ) { Intent i = new Intent ( getActivity ( ) , Website . class ) ; i . putExtra ( Website . EXTRA_URL , url ) ; startActivity ( i ) ; getActivity ( ) . finish ( ) ; }
public void onProgressChanged ( BubbleSeekBar bubbleSeekBar , int progress , float progressFloat ) { machineStatus . setJogging ( machineStatus . getJogging ( ) . step , progress , sharedPref . getBoolean ( getString ( R . string . jogging_in_inches ) , false ) ) ; }
public boolean hasResponseUpdateTrackPosition ( ) { return ( ( bitField0_ & 0x00200000 ) == 0x00200000 ) ; }
private void setupTextColors ( AboutBuilder bundle ) { setTextColor ( tvName , bundle . getNameColor ( ) ) ; setTextColor ( tvSubTitle , bundle . getSubTitleColor ( ) ) ; setTextColor ( tvBrief , bundle . getBriefColor ( ) ) ; }
public Index getMapIndex ( ) { if ( mIndex == null ) mIndex = new Index ( this , getDetailedMapDatabase ( ) , getHillshadeDatabase ( ) ) ; return mIndex ; }
public void testMinimalEncoder35 ( ) throws Exception { verifyMinimalEncoding ( "\u0150" , "ECI ( ISO - 8859 - 2 ) , BYTE ( . ) , TERMINATOR ( ) " , null , false ) ; }
public boolean onQueryTextSubmit ( String query ) { searchView . clearFocus ( ) ; return true ; }
public com . coinomi . core . protos . Protos . Key getMasterKey ( ) { return masterKey_ ; }
public void removeSelectedEntry ( VaultEntry entry ) { _selectedEntries . remove ( entry ) ; }
private void configureService ( ) { Intent intent = new Intent ( this , Service . class ) ; intent . setAction ( Intent . ACTION_CONFIGURATION_CHANGED ) ; startService ( intent ) ; }
public static void setExportToTCX ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_EXPORT_TO_TCX , value ) . commit ( ) ; }
public long getDuration ( ) { return mDuration ; }
public Activity getActivity ( ) { return mContext ; }
private void whenCreatingNewArrayWithSize ( int givenExpectedSize ) { forecastArray = uut . newArray ( givenExpectedSize ) ; }
private static View . OnLongClickListener createLongClickListener ( Context context , int resId ) { return ( View v ) -> { copyValueToClipbord ( context , context . getString ( resId ) , ( ( TextView ) v ) . getText ( ) ) ; return true ; } ; }
public WeakCache ( CacheDataSource < K , V , F > cacheDataSource ) { this . cacheDataSource = cacheDataSource ; }
public AboutBuilder addBitbucketLink ( String user ) { return addLink ( R . mipmap . bitbucket , R . string . bitbucket , util . uri ( R . string . url_bitbucket , user ) ) ; }
private void setFullscreenIfPossible ( ) { if ( VERSION . SDK_INT >= VERSION_CODES . HONEYCOMB ) { getWindow ( ) . getDecorView ( ) . setSystemUiVisibility ( View . SYSTEM_UI_FLAG_FULLSCREEN ) ; } }
public CodecDocument openDocument ( final String fileName , final String password ) { setExternalFonts ( ) ; return new MuPdfDocument ( this , MuPdfDocument . FORMAT_XPS , fileName , password ) ; }
public void afterTextChanged ( Editable s ) { if ( s . length ( ) == 0 ) { mAdapter . changeCursor ( mEmptyCursor ) ; mText = null ; return ; } mText = s . toString ( ) ; search ( ) ; }
public static void setStatsWidgetsData ( String widgetData ) { setString ( PrefKey . STATS_WIDGET_DATA , widgetData ) ; }
public Builder scrollable ( boolean scrollable ) { this . layoutRes = scrollable ? R . layout . fragment_simple_slide_scrollable : R . layout . fragment_simple_slide ; return this ; }
public void testECIEnglishCzechCyrillic2 ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u010c' , '\u042f' } , new float [ ] { 40f , 1f , 10f , 10f } , 79331 , 88236 ) ; }
public void updateEventList ( List < Event > events ) { this . events = new ArrayList <> ( events ) ; notifyDataSetChanged ( ) ; }
public void setInTrainingAll ( boolean inTraining ) { List < Integer > ids = getVerbIds ( ) ; for ( Integer id : ids ) { setInTraining ( id , inTraining ) ; } }
public void setListAsPreferred ( ) { PreferenceManager . setIsGridViewPreferred ( getActivity ( ) , mFile , false ) ; switchToListView ( ) ; }
public void onClick ( View v ) { if ( null != listener ) { listener . onItemClick ( holder . mItem ) ; } }
public static void resetLastActivityStr ( ) { remove ( PrefKey . LAST_ACTIVITY_STR ) ; }
public static void initSchema ( ) { mSchemaList = get_schema_list ( ) ; String schema_id = getSchemaId ( ) ; mSchema = new RimeSchema ( schema_id ) ; getStatus ( ) ; }
public Boolean confirmPinDoneKeyboard ( int actionId ) { if ( actionId == EditorInfo . IME_ACTION_DONE ) { hideKeyboard ( ) ; mValidator . validate ( ) ; return true ; } return false ; }
private void onAccount ( @ Nullable AccountResponse account ) { this . account = account ; accountData . postValue ( account ) ; }
public void setTypeface ( Typeface tf , int style ) { if ( tf == getTypeface ( ) ) { setTypeface ( TypefaceCache . getTypeface ( getContext ( ) , mTypefaceValue , style ) ) ; } else { super . setTypeface ( tf , style ) ; } }
public void onButtonUp ( ) { LinkUtil . openExternally ( url , context ) ; }
public void onFailure ( Call < Shop > call , Throwable t ) { showToastMessage ( "Add failed ! " ) ; buttonUpdateItem . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public boolean isNew ( ) { return rawtransactions . size ( ) == 0 ; }
public OkDialog startBlankFormWithDialog ( String formName ) { goToBlankForm ( formName ) ; return new OkDialog ( rule ) . assertOnPage ( ) ; }
private double mitoinch ( double num ) { return num * 63360 . 236 ; }
private void fdCloseLollipop ( FileDescriptor fd ) { try { Os . close ( fd ) ; } catch ( ErrnoException e ) { VpnStatus . logException ( "Failed to close fd ( " + fd + " ) " , e ) ; } }
public void cancel ( ) { this . cancelled = true ; abort ( "cancel" ) ; }
public String getMode ( ) { return mSettings . getString ( PREFENCES_MAIN_MODE , MODE_DISABLED ) ; }
public static String getBalloonGroupsTheme ( Context context ) { if ( sBalloonGroupsTheme == null ) sBalloonGroupsTheme = getString ( context , "pref_balloons_groups" , context . getString ( R . string . pref_default_balloons_groups ) ) ; return sBalloonGroupsTheme ; }
public void highlightInMuc ( Conversation conversation , String nick ) { switchToConversation ( conversation , null , nick , false , false ) ; }
private boolean drawerItemAction ( Class < ? > targetActivity ) { if ( isCurrentActivity ( targetActivity ) ) { mDrawerLayout . closeDrawer ( Gravity . LEFT ) ; return true ; } else { return tryGoToTargetActivity ( targetActivity ) ; } }
public void annotate ( String description , Location loc ) throws Exception { description = Strings . cleanDescription ( description ) ; Kml22AnnotateHandler annotateHandler = new Kml22AnnotateHandler ( kmlFile , description , loc ) ; EXECUTOR . execute ( annotateHandler ) ; }
public static Playable fromStory ( Story story ) { return new Playable ( - 1 , story . getPlayableUrl ( ) , story . getTitle ( ) , false , NewsStoryActivity . class , null ) ; }
public TestLog ( final String _tagName ) { mTagName = _tagName ; }
public FragmentInfo ( Fragment _frag ) { clss = null ; args = null ; frag = _frag ; }
public void onBindViewHolder ( final TrailerAdapter . TrailerViewHolder viewHolder , int i ) { viewHolder . title . setText ( trailerList . get ( i ) . getName ( ) ) ; }
public void attachView ( @ NonNull PreferencesFragmentMvvm . View view , @ Nullable Bundle savedInstanceState ) { super . attachView ( view , savedInstanceState ) ; view . loadRoot ( ) ; view . setModeSummary ( preferences . getMode ( ) ) ; }
public void resetVariables ( ) { mDidDisplayMessage = false ; mDidDisplayDialogLoadFailed = false ; }
private void initiateMediaPicking ( ) { Intent intent = new Intent ( Intent . ACTION_OPEN_DOCUMENT ) ; intent . addCategory ( Intent . CATEGORY_OPENABLE ) ; intent . putExtra ( Intent . EXTRA_MIME_TYPES , mimeTypes ) ; startActivityForResult ( intent , MEDIA_PICK_RESULT ) ; }
private void checkIfCameraInstalled ( ) { if ( Utils . isHardwareCameraInstalled ( this ) ) { btnTakeFront . setVisibility ( View . GONE ) ; btnTakeNutrition . setVisibility ( View . GONE ) ; btnTakeIngredients . setVisibility ( View . GONE ) ; } }
public DPS ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public AudioItem apply ( Audio audio ) { AudioItem audioItem = new AudioItem ( audio ) ; audioItem . setClassficationId ( audio . getArtistId ( ) ) ; audioItem . setClassficationName ( audio . getArtist ( ) ) ; return audioItem ; }
public void reloadSubs ( ) { posts . refreshLayout . setRefreshing ( true ) ; posts . reset ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . springcard . pcscapp . test" , appContext . getPackageName ( ) ) ; }
private void changeBackLight ( ) { calculateBackLightIndex ( ) ; setBackLightFlashMode ( ) ; }
public static OptionsManager get ( @ NonNull Context context ) { if ( instance == null ) instance = new OptionsManager ( context ) ; return instance ; }
public Builder setNeutralButtonIcon ( Drawable icon ) { P . mNeutralButtonIcon = icon ; return this ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new TL1WodFragment ( ) ; case 1 : return new TL2ResultFragment ( ) ; default : return null ; } }
public synchronized void start ( ) { if ( currentState == STATE_RUNNING ) { return ; } startTimeMilli = System . currentTimeMillis ( ) ; currentState = STATE_RUNNING ; startCountdownRunnable ( ) ; notifyStateChanged ( ) ; }
public AlertDialogBuilder ( ) { Logging . debug ( "AlertDialogBuilder instantiated" ) ; }
public void onChange ( boolean selfChange ) { super . onChange ( selfChange ) ; mVolume = mAudioManager . getStreamVolume ( AudioManager . STREAM_MUSIC ) ; mServerConnection . updateState ( mVolumeItem , String . valueOf ( mVolume ) ) ; addStatusItems ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; applyFont ( ) ; setupAppAnimations ( ) ; }
public static void sendOutput ( Context context , int res ) { sendOutput ( SkinManager . COLOR_NOT_SET , context , res ) ; }
public void addItem ( UserModel name , int position ) { this . users . add ( position , name ) ; this . notifyItemInserted ( position ) ; }
public int getCurrentWindowIndex ( ) { return player . getCurrentWindowIndex ( ) ; }
public int getNumDownloadedPieces ( ) { return th . isValid ( ) ? th . status ( ) . numPieces ( ) : 0 ; }
public static boolean themeChanged ( SharedPreferences prefs , Activity ctx ) { String theme = prefs . getString ( "pref_theme" , "dark" ) ; return themeChanged ( theme , ctx ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { VectorUtil . stream ( angle , dataOutputStream ) ; VectorUtil . stream ( position , dataOutputStream ) ; }
private void fetchLastLocationOrUseDefault ( ) { if ( ! GpgLocationUtils . getLastKnownLocation ( new WeakReference <> ( this ) , this ) ) { setDefaultLocation ( ) ; } }
public void onPartialResult ( List < String > results ) { }
public Block ( final RectangularPrism prism ) { setPrism ( prism ) ; }
public Address getReceiveAddress ( ) { return currentAddress ( RECEIVE_FUNDS ) ; }
public int compareTo ( final ListItem another ) { return this . getDisplayName ( ) . compareToIgnoreCase ( another . getDisplayName ( ) ) ; }
private void setScaleDirectionByRawX ( float currentRawX ) { if ( currentRawX < lastRawX ) setScaleDirection ( DIRECTION_RIGHT ) ; else setScaleDirection ( DIRECTION_LEFT ) ; }
public static String getStringFromLong ( long data ) { return String . format ( "%08X" , data ) ; }
public boolean isLoggingEnabled ( ) { return mSharedPref . getBoolean ( TRIP_LOGGING , false ) ; }
public CardPresenter ( boolean showInfo , int staticHeight , String imageType ) { this ( showInfo , staticHeight ) ; mImageType = imageType ; }
public void onUpdate ( ) { Exec . setPtyUTF8Mode ( mTermFd , getUTF8Mode ( ) ) ; }
public void register ( ) { if ( networkListener == null ) { networkListener = new NetworkListener ( ) ; telephonyManager . listen ( networkListener , PhoneStateListener . LISTEN_SIGNAL_STRENGTHS ) ; } isRegistered = true ; }
public void onTextChanged ( CharSequence charSequence , int i , int i1 , int i2 ) { performTypeValue ( charSequence . toString ( ) ) ; }
public void setConnectionCallback ( ConnectionCallback connectionCallback ) { this . mConnectionCallback = connectionCallback ; }
private void updateGridLayoutManager ( ) { if ( recyclerView != null && recyclerView . getLayoutManager ( ) != null ) { ( ( GridLayoutManager ) recyclerView . getLayoutManager ( ) ) . setSpanCount ( Utils . getCardNumberInRow ( getContext ( ) ) ) ; } }
public void onDrawerClosed ( View drawerView ) { }
public MediatorLiveData < List < SkillEntity >> getObservableSkills ( ) { return mObservableSkills ; }
public int getItemCount ( ) { return bulkReadCardsServiceBinder != null ? bulkReadCardsServiceBinder . getSinks ( ) . size ( ) : 0 ; }
public void setOnItemSwipeEventListener ( OnItemSwipeEventListener listener ) { mItemSwipeEventListener = listener ; }
private static void UpdateDiscussion ( MoodleDiscussion old_discussion , MoodleDiscussion new_discussion ) { old_discussion = new_discussion ; old_discussion . save ( ) ; }
public String getHashAsString ( ) { return hash . toString ( ) ; }
public void onCancelled ( DatabaseError databaseError ) { AHC . logd ( TAG , "Database read error for admin info . User not an admin . " ) ; userDescTV . setText ( getString ( R . string . not_admin_placeholder ) ) ; }
public void onCreate ( SQLiteDatabase db ) { Timber . i ( "create db" ) ; db . execSQL ( CREATE_STUDENT ) ; }
public String getUrl ( ) { return getBaseUrl ( ) + getContext ( ) . getString ( R . string . search_path ) ; }
public static void setKeyMapRange ( int from , int to ) { keyMapFrom = from ; keyMapTo = to ; }
public void onNetworkWorked ( ) { if ( viewHolder == null ) { return ; } viewHolder . setProgressBarVisibility ( true ) ; viewHolder . setText ( R . string . load_more ) ; }
public BitmapWorkerTask ( ImageView imageView ) { imageViewReference = new WeakReference < ImageView > ( imageView ) ; }
public float pathMoved ( ) { return ( x - startingX ) * ( x - startingX ) + ( y - startingY ) * ( y - startingY ) ; }
public void setSpacingDirection ( int value ) { spacingDirection = value ; }
public void handleDownloadSuccess ( ) { refreshQuranPages ( ) ; audioPresenter . onDownloadSuccess ( ) ; audioStatusBar . switchMode ( AudioStatusBar . STOPPED_MODE ) ; }
public int getKanjiElementId ( ) { return mKanjiElementId ; }
public static void removeColor ( final String subreddit ) { Reddit . colors . edit ( ) . remove ( subreddit . toLowerCase ( ) ) . apply ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putBoolean ( SAVE_DELETED , deleted ) ; }
public boolean onLongClick ( View v ) { downloadFile ( URL2 + currentItem , v . getContext ( ) ) ; return true ; }
public static boolean deleteDeckBackups ( String colFile , int keepNumber ) { return deleteDeckBackups ( getBackups ( new File ( colFile ) ) , keepNumber ) ; }
public int maxMessageSize ( ) { return MAX_TX_DATA_MSG ; }
public void shouldGetLastExportTimeDefaultValue ( ) { final Timestamp lastExportTime = PreferencesHelper . getLastExportTime ( ) ; assertThat ( lastExportTime ) . isEqualTo ( TimestampHelper . getTimestampForEpochZero ( ) ) ; }
public SingleItemRowHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View v = LayoutInflater . from ( this . mContext ) . inflate ( R . layout . list_product_category , viewGroup , false ) ; return new SingleItemRowHolder ( v ) ; }
public void OnSuccessRequest ( ) { if ( mediaUploadedCount == mediaCount && ! uploadMediaError ) { uploadMediaDone = true ; sendBasePost ( sendItem ) ; } if ( uploadMediaError ) { hideProgressBar ( ) ; } }
public void onText ( String text , String topString , String bottomString , String extras ) { post ( ( ) -> webViewText . onDocumentParseItem ( text , Float . parseFloat ( topString ) , Float . parseFloat ( bottomString ) , extras ) ) ; }
public Builder setStatusBarColored ( boolean colored ) { this . statusBarColorOption = colored ? STATUSBAR_COLOR_COLORED : STATUSBAR_COLOR_NON_COLORED ; this . statusBarIconInvertedOption = Settings . get ( ) . ui ( ) . isMonochromeWhite ( ) ; return builder ; }
public com . google . protobuf . Any getMessages ( int index ) { if ( messagesBuilder_ == null ) { return messages_ . get ( index ) ; } else { return messagesBuilder_ . getMessage ( index ) ; } }
public String getType ( Uri uri ) { final int match = sUriMatcher . match ( uri ) ; switch ( match ) { case FAV : return MovieContract . FavEntry . CONTENT_TYPE ; default : throw new UnsupportedOperationException ( "Unknown uri : " + uri ) ; } }
public static AppHelper getInstance ( ) { if ( theInstance == null ) theInstance = new AppHelper ( ) ; return theInstance ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . layout_payment_item , parent , false ) ; return new ViewHolder ( view ) ; }
private void bindNoDataView ( ) { try { mExpandableListView . setVisibility ( View . GONE ) ; mProgressBar . setVisibility ( View . GONE ) ; mNoDataBinder . bindData ( mNoDataParams ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public void onFileSaved ( File file ) { if ( file . exists ( ) ) { createFileSavedNotification ( getActivity ( ) , file ) ; } }
public void init ( ) { context = getInstrumentation ( ) . getTargetContext ( ) ; playback = new PlaybackImpl ( context ) ; MockitoAnnotations . initMocks ( this ) ; when ( mMockTrackData . getTrack ( ) ) . thenReturn ( R . raw . track1_1 ) ; }
private boolean goToSend ( ) { return accountFragment . isVisible ( ) && accountFragment . goToSend ( true ) ; }
public AppointmentFragment ( ) { super ( R . string . title_fragment_next_appointment ) ; }
public void onSuccess ( List < Post > results ) { callback . onSuccess ( results ) ; searchOnRemote ( false , query , callback ) ; }
public PicturesAdapter ( Context context , RealmResults < Picture > contacts ) { super ( context , contacts , true ) ; this . mContext = context ; this . mLibraries = contacts ; }
public double getTotalDailyEnergyExpenditure ( double ree , double activityLevel ) { return ree*activityLevel ; }
public void writeToParcel ( Parcel dest , int flags ) { super . writeToParcel ( dest , flags ) ; dest . writeParcelable ( this . mQariItem , 0 ) ; dest . writeString ( this . mLocalDirectoryPath ) ; }
public void reconfigureWidget ( int appWidgetId ) { appWidgetManager . reconfigureWidget ( appWidgetId ) ; }
public AppApi provideApi ( RestAdapter restAdapter ) { return restAdapter . create ( AppApi . class ) ; }
public void setFragmentsLoading ( ) { getOverview ( ) . setFragmentLoading ( ) ; for ( GGPlan p : plans ) getFragment ( p ) . setFragmentLoading ( ) ; }
public void setToss_winner ( String toss_winner ) { Toss_winner = toss_winner ; }
public static Socket createSocketOverTor ( String destination , int port ) throws IOException { return createSocket ( new InetSocketAddress ( InetAddress . getLocalHost ( ) , 9050 ) , destination , port ) ; }
public void onClick ( View v ) { motor1_speed = 0 ; motor1_duration = 0 ; structure_orientation = 0 ; Toast . makeText ( Display . this , "Stop" , Toast . LENGTH_SHORT ) . show ( ) ; sendData ( "0\r\n" ) ; }
public Builder withSura ( int sura ) { mSura = sura ; return this ; }
public Long getLteRsrq ( ) { return lteRsrq ; }
public boolean isSharingLocation ( long did ) { return sharingLocationsMapUI . containsKey ( did ) ; }
public void onRefresh ( ) { thread . run ( ISSP , ( ) -> { log . v ( TAG , "refreshing" ) ; load ( true ) ; } ) ; }
public void onSettingChanged ( @ NotNull String key ) { settingsChangeHandler . onSettingChanged ( currentProjectProvider . getCurrentProject ( ) . getUuid ( ) , settingsProvider . getAdminSettings ( ) . getAll ( ) . get ( key ) , key ) ; }
public boolean checkTransitionAnimation ( ) { if ( transitionAnimationInProgress && transitionAnimationStartTime < System . currentTimeMillis ( ) - 1500 ) { onAnimationEndCheck ( true , false ) ; } return transitionAnimationInProgress ; }
public void reset ( int index ) { frame ( film . get ( index ) ) ; origin . set ( width / 2 , height / 2 ) ; phase = Phase . FADE_IN ; duration = FADE_IN_TIME ; passed = 0 ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { LogEntry entry = getItem ( position ) ; if ( entry != null ) holder . bind ( entry ) ; }
private LinphoneCall getCurrentCall ( ) { if ( hasNoCurrentCalls ( ) ) { return null ; } return mLinphoneCore . getCalls ( ) [ 0 ] ; }
public EventCardsAdapter ( ArrayList < Integer > list , Context context ) { this . list = list ; this . context = context ; }
public void onPostCommentsSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getActivity ( ) ) . onPostCommentsSelected ( post ) ; }
public void uploadPassword ( String pass ) { mService . uploadPassword ( pass ) ; }
public String getSecretKey ( ) { return secretKey ; }
public void setBackgroundOffset ( int backgroundOffset ) { if ( ! mDrawBackground || this . mBackgroundOffset == backgroundOffset ) return ; this . mBackgroundOffset = backgroundOffset ; mesureBackgroundBounds ( ) ; updateDrawingAngles ( ) ; }
public < E > E asObject ( final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { return null ; }
public void toggleActionBarVisibility ( boolean visible ) { if ( visible == mIsActionBarHidden ) { toggleActionBar ( ) ; } }
public void removeView ( @ NonNull View view ) { LayoutParams lp = ( CellContainer . LayoutParams ) view . getLayoutParams ( ) ; setOccupied ( false , lp ) ; super . removeView ( view ) ; }
public Double getWidth ( ) { return width ; }
public void onFailure ( @ Nonnull ApolloException e ) { Log . e ( TAG , e . getLocalizedMessage ( ) ) ; receiver . send ( FAILED , new Bundle ( ) ) ; }
public UnitsViewHolder ( @ NonNull View root ) { ButterKnife . bind ( this , root ) ; }
public boolean isNetFreeToMoveDown ( ) { boolean result = false ; if ( figure . coordinatesInNet . y + figure . getHeightInSquare ( ) != verticalSquaresCount + EXTRA_ROWS && ! isFigureBelow ( ) ) { result = true ; } return result ; }
public boolean onMenuItemSelected ( int clickId , final MenuItem item ) { new ParserThread ( ) . start ( ) ; return true ; }
public void setTag ( Tag tag ) { this . tag = tag ; updateTitle ( ) ; }
private void initBackendlessApi ( ) { final String APPLICATION_IDB = "215CF2B1 - C44E - E365 - FFB6 - 9C35DD6A9300" ; final String API_KEYB = "8764616E - C5FE - CE43 - FF54 - 17B4A8026F00" ; Backendless . initApp ( this , APPLICATION_IDB , API_KEYB ) ; }
public void setBottomRightRadius ( int radius ) { radii [ 4 ] = radii [ 5 ] = radius ; invalidate ( ) ; }
public void destroyThreads ( ) { DebugTool . log ( "Sequencer : : destroyThreads ( ) " ) ; _ui . dispose ( ) ; _audio . dispose ( ) ; threadsActive = false ; }
public void invalidateList ( ) { if ( mAdapter == null ) return ; this . mAdapter . notifyDataSetChanged ( ) ; this . mAdapter . notifyDataSetInvalidated ( ) ; }
private static int [ ] zzUnpackRowMap ( ) { int [ ] result = new int [ 2940 ] ; int offset = 0 ; offset = zzUnpackRowMap ( ZZ_ROWMAP_PACKED_0 , offset , result ) ; return result ; }
public void getAnswerShouldReturnNullIfPromptDoesNotHaveExistingAnswer ( ) { W widget = getWidget ( ) ; assertNull ( widget . getAnswer ( ) ) ; }
public String getNoecIndex ( ) { return this . _noec_index ; }
public void setUserID ( String userID ) { this . userID = userID ; }
public String toString ( ) { return "Program { " + "primaryKey = " + primaryKey + " , day = '" + day + '\'' + " , sets = " + sets + ' } ' ; }
public int getUserAgentChoice ( ) { return mPrefs . getInt ( Name . USER_AGENT , 1 ) ; }
public static void toast ( int id , Context context ) { toast ( context . getString ( id ) , context ) ; }
public static boolean selectSchema ( String schema_id ) { boolean b = select_schema ( schema_id ) ; getContexts ( ) ; return b ; }
public String toString ( ) { return getClass ( ) . getSimpleName ( ) + " [ searchString = " + searchString + " , super : " + super . toString ( ) + " ] " ; }
private void requestResult ( ) { String data = "r\r\n" ; if ( usbService != null && usbService . isUsbConnected ( ) ) { usbService . write ( data . getBytes ( StandardCharsets . UTF_8 ) ) ; } else { displayNotConnectedView ( ) ; } }
public void addFrag ( Fragment fragment , String title ) { mFragmentList . add ( fragment ) ; mFragmentTitleList . add ( title ) ; }
private String constructGravatarUrl ( Context context , AccountModel account ) { return FakeGravatarUtils . fixGravatarUrl ( account . getAvatarUrl ( ) , getAvatarSize ( context ) , STATUS_404 ) ; }
public void setLastMessage ( IMessage lastMessage ) { this . lastMessage = lastMessage ; }
private void setAnimation ( View viewToAnimate , int position ) { if ( position > lastPosition ) { Animation animation = AnimationUtils . loadAnimation ( context , R . anim . slide_up_bottom ) ; viewToAnimate . startAnimation ( animation ) ; lastPosition = position ; } }
public SwipeHistory ( int len ) { positions = new float [ len ] ; timestamps = new long [ len ] ; }
public void onClickFavorite ( final View view ) { Log . v ( LOG_TAG , "onClickFavorite ( ) called with : " + "view = [ " + view + " ] " ) ; setFavorite ( true ) ; }
public void setWindow ( Window window ) { this . window = window ; }
private void actionDelete ( ) { actionDelete ( recyclerAdapter . getSelectedItems ( ) ) ; recyclerAdapter . clearSelection ( ) ; }
public void onBackPressed ( ) { if ( isDrawerOpen ( ) ) { Timber . i ( "Back key pressed" ) ; mDrawerLayout . closeDrawers ( ) ; } else { super . onBackPressed ( ) ; } }
private boolean isStorage ( String path ) { for ( FileItem storage : storages ) { if ( storage . getFilePath ( ) . equals ( path ) ) { return true ; } } return false ; }
public void fillArguments ( Intent activityIntent , Bundle bundle ) { if ( activityIntent . hasExtra ( ARG_DATE ) ) { bundle . putSerializable ( ARG_DATE , activityIntent . getSerializableExtra ( ARG_DATE ) ) ; } }
public Cursor query ( Uri uri , String [ ] projection , String selection , String [ ] selectionArgs , String sortOrder ) { lastQueryUri = uri ; return results . getOrDefault ( uri , defaultResults ) ; }
public static void stopService ( Context context ) { if ( context == null ) return ; Intent intent = new Intent ( context , NotificationsProcessingService . class ) ; context . stopService ( intent ) ; }
public int getUserIdFileProfilePicture ( ) { return ENUM_Int . INTEGER_USER_ID_FILE_PROFILE_PICTURE . value ; }
public void start ( Attributes attributes ) { Board b = new Board ( Integer . parseInt ( attributes . getValue ( Topic . Xml . IN_BOARD_ATTRIBUTE ) ) ) ; mThread . setBoard ( b ) ; }
private int getDragViewMarginRight ( ) { return transformer . getmMarginRight ( ) ; }
public int getLastLogoff ( ) { return lastLogoff ; }
public static String getDateString ( Calendar c ) { return DATE_FORMAT . format ( c . getTime ( ) ) ; }
public void onCategoryValueClick ( ) { CategoryBottomSheet sheet = new CategoryBottomSheet ( ) ; sheet . show ( getSupportFragmentManager ( ) , "category" ) ; }
public WallpaperDataStore create ( ) { WallpaperDataStore wallpaperDataStore ; if ( ! wallpaperCache . isDirty ( ) && wallpaperCache . isCached ( ) ) { wallpaperDataStore = new CacheWallpaperDataStore ( wallpaperCache ) ; } else { wallpaperDataStore = createDbDataStore ( ) ; } return wallpaperDataStore ; }
public String getCoverUrl ( ) { return mCoverUrl ; }
private double gmTopound ( double num ) { return num * 0 . 00220 ; }
public void displayList ( List < Audio > audios ) { if ( Objects . nonNull ( mAudioRecyclerAdapter ) ) { mAudioRecyclerAdapter . setData ( audios ) ; } }
public TcpServerPacketSender ( PacketSenderListener listener , int port ) throws IOException { mPort = port ; mListener = listener ; mQueue = new ArrayBlockingQueue ( 1024 ) ; mWorker = new Thread ( this ) ; mWorker . start ( ) ; }
public boolean onPreferenceClick ( Preference preference ) { Log . i ( "Preferences" , "open src clicked" ) ; startActivity ( new Intent ( NadgetSettings . this , OpenSrcLicenses . class ) ) ; return true ; }
public RRError asError ( final Context context ) { return General . getGeneralErrorForFailure ( context , requestFailureType , t , statusLine , url , null ) ; }
public void testSetup ( ) throws Exception { assertQuery ( Messages . CONTENT_URI ) ; assertQuery ( Threads . CONTENT_URI ) ; }
public int getCode ( int type ) { return getEvent ( type ) . code ; }
public static long create ( Instance instance , JSONObject attributes ) throws JSONException , IOException , HTTPException { JSONObject params = attributes ; JSONObject json = instance . post ( "/api/v1/intervention_participations" , params ) ; return ( 0 ) ; }
private String chooseImageSource ( String thumbUrl , Uri localUri ) { return ! TextUtils . isEmpty ( thumbUrl ) ? thumbUrl : localUri != null ? localUri . toString ( ) : null ; }
public void setError ( String error ) { Error = error ; }
public void setAdr_ort ( String adr_ort ) { this . _adr_ort = adr_ort ; }
public void onCompletion ( MediaPlayer mp ) { Timber . d ( "Single Sound completed" ) ; if ( userCallback != null ) { userCallback . onCompletion ( mp ) ; } else { releaseSound ( ) ; } }
public JSONObject getTransaction ( String transactionId ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/transactions/%s" , mUserId , transactionId ) , requestMap ) ; }
private void setUpMiniPlayer ( ) { setUpPlayPauseButton ( ) ; progressBar . setProgressTintList ( ColorStateList . valueOf ( ThemeStore . accentColor ( activity ) ) ) ; }
public void onConnectionRemoved ( ServerConfigData data ) { mUpdateThreadHandler . post ( ( ) -> { mServerManagers . get ( data . uuid ) . remove ( ) ; mServerManagers . remove ( data . uuid ) ; } ) ; }
public void onButtonStopwatchChangeStateLongClick ( ) { if ( ! prefsSmartStopwatch ) { if ( stopwatchHelper . isRunning ( ) ) { checkVibrateOnClickState ( ) ; stop ( ) ; } } }
public void setFilterMode ( long filterMode ) { this . filterMode = filterMode ; filter ( constraint ) ; }
public void onClick ( View view ) { sendSelectedPhotos ( ) ; finishFragment ( ) ; }
public MonitConnection createFromParcel ( Parcel parcel ) { return new MonitConnection ( parcel ) ; }
private void initToolbar ( ) { getToolbar ( ) . setNavigationIcon ( R . drawable . ic_arrow_back ) ; if ( viewModel . isAutoComplete ( ) ) { addSearchBar ( ) ; } }
public Integer getAsn ( ) { return asn ; }
public long getTripId ( ) { return tripId ; }
public void updateRecyclerView ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { mAdapter . notifyDataSetChanged ( ) ; diningHallRefresh . setRefreshing ( false ) ; } } ) ; }
public boolean clearDirty ( ) { return this . dirtyFlag = false ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; inflater . inflate ( R . menu . menu_home , menu ) ; }
public SongsListAdapter ( Context context , ArrayList < Track > trackInfoList ) { this . trackInfoList = trackInfoList ; this . context = context ; inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public List < LatLng > getCoordinates ( ) { return mLatLngCoordinates ; }
public void openPost ( int accountId , @ NonNull Post post ) { PlaceFactory . getPostPreviewPlace ( accountId , post . getVkid ( ) , post . getOwnerId ( ) , post ) . tryOpenWith ( getActivity ( ) ) ; }
public String toString ( ) { return "unseen = " + unseen + " ignored = " + ignored ; }
public void setUp ( ) throws Exception { provider = MockCalendarContentProvider . getContentProvider ( ) ; }
public static synchronized Switch getInstance ( ) { if ( INSTANCE == null ) { INSTANCE = new Switch ( ) ; } return INSTANCE ; }
public void testToStringWithUnsupportedNumbers ( ) throws JSONException { JSONArray array = new JSONArray ( Arrays . asList ( 5 . 5 , Double . NaN ) ) ; assertNull ( array . toString ( ) ) ; }
private int at ( float x , float y ) { for ( Tile t : mData ) { if ( t . at ( x , y ) ) { return t . getIndex ( ) ; } } return - 1 ; }
public FeedViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card_schedule , parent , false ) ; return new FeedViewHolder ( view ) ; }
public void setFixMode ( ) { setShowMode ( 2 ) ; }
public void setVideoWindows ( final SurfaceView videoView , final SurfaceView captureView ) { mCommunicator . getService ( ) . setVideoWindows ( videoView , captureView ) ; }
public void clickedTakePhoto ( View view ) { if ( MyDebug . LOG ) Log . d ( TAG , "clickedTakePhoto" ) ; this . takePicture ( ) ; }
private double gmToounce ( double num ) { return num * 0 . 0353 ; }
public void setUp ( ) { mockStaticMethods ( ) ; patientAndMatchingPatientsQueue = createMatchingPatientsList ( ) ; PatientRepository patientRepository = new PatientRepository ( openMRS , openMRSLogger , patientDAO , restApi , locationRepository ) ; presenter = new MatchingPatientsPresenter ( view , patientAndMatchingPatientsQueue , restApi , patientDAO , patientRepository ) ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Viscosity_Txt ) , weaponName ) ; }
public void setMessageRcvd ( boolean messageRcvd ) { this . messageRcvd = messageRcvd ; }
public HighlightingImageView getImageView ( ) { return mImageView ; }
public static RecyclerView . ViewHolder findChildViewHolderUnderWithTranslation ( RecyclerView rv , float x , float y ) { final View child = rv . findChildViewUnder ( x , y ) ; return ( child != null ) ? rv . getChildViewHolder ( child ) : null ; }
public static DbExecutor getInstance ( ) { return sInstance ; }
public boolean disconnectClient ( NetworkDevice client ) { mDataMapper . onClientRemoved ( client ) ; return mClientManager . close ( client ) ; }
public boolean maxHealthLevelReached ( ) { return mHealthLevel >= NODE_HEALTH_MAX_LEVEL ; }
public void fireAvatarClick ( ) { getView ( ) . openProfile ( getAccountId ( ) , currentUser ( ) ) ; }
public void execute ( @ NotNull Char chr , @ NotNull String action ) { if ( action . equals ( AC_PULL ) ) { chr . selectCell ( impaler ) ; } else { super . execute ( chr , action ) ; } }
public void setHome_location ( Home home_location ) { this . home_location = home_location ; }
public void setMinWidth ( float minWidth ) { mMinWidth = minWidth ; }
public void usingReadOnlyOption_hidesBearingButton ( ) { assertThat ( createWidget ( promptWithReadOnly ( ) ) . getBearingButton . getVisibility ( ) , is ( View . GONE ) ) ; }
public void addItemList ( final List < Schedule > schedules ) { realm . executeTransaction ( new Realm . Transaction ( ) { @ Override public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( schedules ) ; } } ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; RoboGuice . getInjector ( MainApplication . getContext ( ) ) . injectViewMembers ( this ) ; }
public String getSortOrder ( ) { return mSharedPreferences . getString ( KEY_SORT , "unsorted" ) ; }
private void gotLocationPermissions ( ) { ProjectWalrusApplication . startLocationUpdates ( ) ; }
private void setPolygonGreen ( GeoJsonLayer layer ) { GeoJsonPolygonStyle polyStyle = layer . getDefaultPolygonStyle ( ) ; polyStyle . setFillColor ( FILL_GREEN ) ; polyStyle . setStrokeColor ( STROKE_GREEN ) ; polyStyle . setStrokeWidth ( 3f ) ; }
public void execute ( Realm realm ) { link . setFavorite ( isFavorite ) ; Log . i ( LOG_TAG , "setFavorite : Edited Link : " + link ) ; }
public Set < String > getDisabledUserRules ( ) { Set < String > valueSet = sharedPreferences . getStringSet ( KEY_DISABLED_USER_RULES , null ) ; return valueSet != null ? new HashSet <> ( valueSet ) : new HashSet < String > ( ) ; }
public void onAnimationEnd ( Animator animation ) { target . setVisibility ( View . GONE ) ; }
public void onAnimationEnd ( Animation animation ) { if ( callback != null ) callback . onAnimationFinish ( 1 ) ; }
public Aula ( int aulaNum , int category , LatLng pos , Attivita [ ] attivita ) { this . aulaNum = aulaNum ; this . category = category ; this . pos = pos ; this . attivita = attivita ; }
public float getAmount ( ) { return amount ; }
public void onRefresh ( ) { refreshData ( ) ; }
public void onClick ( ViewHolder viewHolder ) { DepartureViewHolder departureViewHolder = ( DepartureViewHolder ) viewHolder ; observer . onDepartureSelected ( departureViewHolder . getDeparture ( ) ) ; }
public void getAddress ( ) { getRequest ( Endpoints . GET_ADDRESS , new HashMap < String , String > ( ) , General . REQUEST_ADDRESS ) ; }
public void hideLoading ( ) { mProgressLoading . setVisibility ( View . GONE ) ; }
private List < Conversation > loadRange ( int startPosition , int loadCount ) { return getConversations ( false , loadCount , startPosition ) ; }
private String [ ] formatPickupDay ( final GarbageDay day ) { return new String [ ] { TextUtils . formatDateMedium ( this , day . getDate ( ) ) , formatPickupItem ( day ) } ; }
public void reload ( ) { loaderManager . restartLoader ( LoaderUtils . SEARCH_LOADER , null , this ) ; }
public void handleEvent ( DcEvent event ) { if ( event . getId ( ) == DcContext . DC_EVENT_CONTACTS_CHANGED ) { getLoaderManager ( ) . restartLoader ( 0 , null , ContactSelectionListFragment . this ) ; } }
private void initSystemLoudnessPrefs ( ) { binding . systemPrefs . setOnClickListener ( mSystemLoudnessClick ) ; binding . systemPrefs . setChecked ( mPrefs . isSystemLoudnessEnabled ( ) ) ; }
public AppThemeManager setAppTheme ( AppTheme appTheme ) { this . appTheme = appTheme ; preferences . edit ( ) . putString ( PreferencesConstants . PREFERENCE_THEME , Integer . toString ( appTheme . getId ( ) ) ) . apply ( ) ; return this ; }
private void copyToStorage ( String formName ) throws IOException { AdbFormLoadingUtils . copyFormToStorage ( formName ) ; }
public void onSensorChanged ( SensorEvent sensorEvent ) { if ( mSink == null ) return ; mSink . onData ( new SensorData ( SensorType . Gyroscope , sensorEvent . values , sensorEvent . timestamp ) ) ; }
public AboutBuilder addWhatsAppDirectChat ( int phone ) { return addWhatsAppDirectChat ( context . getString ( phone ) ) ; }
public void onCreateSuccess ( SessionDescription sessionDescription ) { if ( alive ) sendMessage ( What . SDP_CREATE_SUCCESS , 0 , 0 , sessionDescription ) ; }
public LocationService ( BluetoothService bluetooth ) { this . bluetooth = bluetooth ; locationProviderNMEA = new LocationProviderNMEA ( alti ) ; locationProviderAndroid = new LocationProviderAndroid ( alti ) ; locationProviderBluetooth = new LocationProviderBluetooth ( alti , bluetooth ) ; }
public void empty ( ) { List < Integer > values = IntegerRange . getValues ( " " ) ; assertEquals ( 0 , values . size ( ) ) ; }
public Builder fragment ( @ LayoutRes int layoutRes , @ StyleRes int themeRes ) { this . fragment = Fragment . newInstance ( layoutRes , themeRes ) ; return this ; }
public void setSuggestions ( List < S > suggestions ) { this . suggestions = suggestions ; notifyDataSetChanged ( ) ; }
public Float getMorningWeight ( ) { return morningWeight ; }
public void deactivate ( Char ch ) { script . run ( "deactivate" , ch ) ; super . deactivate ( ch ) ; }
public static String getQuranImagesDirectory ( Context context ) { QuranScreenInfo qsi = QuranScreenInfo . getInstance ( ) ; if ( qsi == null ) { return null ; } return getQuranImagesDirectory ( context , qsi . getWidthParam ( ) ) ; }
private int loadBgColorDefaultPref ( ) { SharedPreferences prefs = getSharedPreferences ( PREFS_NAME , 0 ) ; return prefs . getInt ( PREF_BG_COLOR_DEFAULT_PREFIX_KEY , Color . BLACK ) ; }
public static Status fromString ( String string ) { if ( string . toLowerCase ( ) . equals ( "delivery" ) ) return Delivery ; else return Processing ; }
public void onRequestTags ( ) { }
public void onPromptStateChanged ( MaterialTapTargetPrompt prompt , int state ) { if ( state == MaterialTapTargetPrompt . STATE_DISMISSING || state == MaterialTapTargetPrompt . STATE_NON_FOCAL_PRESSED || state == MaterialTapTargetPrompt . STATE_FOCAL_PRESSED ) { test . show ( ) ; } }
public static boolean isChannel ( TLRPC . TL_dialog dialog ) { return dialog != null && ( dialog . flags & 1 ) != 0 ; }
public String getName ( ) { return StringUtils . notNullStr ( name ) ; }
public void onNext ( ) { if ( currentQuestion < questions . size ( ) - 1 ) { showQuestion ( currentQuestion + 1 ) ; } else { SyncAdapter . requestUploadSync ( getActivity ( ) ) ; navigateBack ( ) ; } }
public void onConverterSaved ( boolean saved ) { mView . setConverterSavingIndicator ( false ) ; if ( closeEditor ) mView . showPreviousView ( ) ; mHaveUnsavedChanges = false ; }
public void onClick ( DialogInterface dialogInterface , int i ) { switch ( i ) { case 0 : TouchableSpan . this . onClick ( null ) ; break ; case 1 : copy ( ) ; break ; } }
public PlaybackException ( IPlaybackHandler playbackHandler ) { this ( playbackHandler , null ) ; }
public SearchPostListURL sort ( PostListingController . Sort newOrder ) { return new SearchPostListURL ( subreddit , query , newOrder , limit , before , after ) ; }
public ProgressObserver ( ProgressBar progressBar ) { this . progressBar = progressBar ; }
public static Uri getUri ( Context context , File file ) { if ( file != null ) { return FileProvider . getUriForFile ( context , SiliCompressor . getAuthorities ( context ) , file ) ; } return null ; }
public ActionBarMenuItem addItem ( int id , Drawable drawable ) { return addItem ( id , 0 , isActionMode ? parentActionBar . itemsActionModeBackgroundColor : parentActionBar . itemsBackgroundColor , drawable , AndroidUtilities . dp ( 48 ) , null ) ; }
public void handleDownloadSuccess ( ) { mWarningView . setVisibility ( View . GONE ) ; mBtnGetTranslations . setVisibility ( View . GONE ) ; handleIntent ( getIntent ( ) ) ; }
public MediaThumbnailGenerationTask getBitmapWorkerTask ( ) { return bitmapWorkerTaskReference . get ( ) ; }
public void onConnected ( Bundle bundle ) { Wearable . DataApi . addListener ( mGoogleApiClient , this ) ; }
private AnimatableScaleValue ( ScaleXY value ) { super ( value ) ; }
public void run ( ) { cameraInitied = true ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . cameraInitied ) ; }
public void onCreate ( Database db ) { Timber . i ( "Creating tables for schema version " + SCHEMA_VERSION ) ; createAllTables ( db , false ) ; }
public void onClick ( View v ) { toggleAttachmentView ( ) ; }
public void updateApplicationTest ( ) { Application body = null ; Integer id = null ; }
public void setItem ( int position , StatusViewData status , boolean notifyAdapter ) { statuses . set ( position , status ) ; if ( notifyAdapter ) { notifyItemChanged ( position ) ; } }
public WelcomeScreenPageList getPages ( ) { return pages ; }
public boolean hasConfidence ( ) { return ( ( bitField0_ & 0x00000040 ) == 0x00000040 ) ; }
public String toString ( ) { return width + "xPx" + height ; }
public void onCloseNote ( ) { if ( ! titleModified && originalNote == null && getContent ( ) . isEmpty ( ) ) { db . deleteNoteAndSync ( localAccount , note . getId ( ) ) ; } }
public HttpClient createHttpClient ( ) { final DefaultHttpClient client = new DefaultHttpClient ( ) ; client . getParams ( ) . setParameter ( CoreProtocolPNames . USER_AGENT , "osmdroid" ) ; return client ; }
private void wire ( ) { view . setOnClickListener ( this ) ; ivDelete . setOnClickListener ( this ) ; ivSave . setOnClickListener ( this ) ; }
public int compare ( AppInfo o1 , AppInfo o2 ) { return o1 . label . compareTo ( o2 . label ) ; }
private boolean requestFocus ( ) { return ( getAudioManager ( ) . requestAudioFocus ( this , AudioManager . STREAM_MUSIC , AudioManager . AUDIOFOCUS_GAIN ) == AudioManager . AUDIOFOCUS_REQUEST_GRANTED ) ; }
private void thenDelegateShouldInflateMenu ( ) { new Verifications ( ) { { mAppCompatDelegate . getMenuInflater ( ) ; } } ; }
public void onFailure ( Call < Session > call , Throwable t ) { loginView . hideLoadingAnimation ( ) ; loginView . showToast ( t . getMessage ( ) , ToastUtil . ToastType . ERROR ) ; }
private void removeView ( View view , int layout ) { Static . removeView ( view . findViewById ( layout ) ) ; }
public static PartyMemberFragment newInstance ( String partyTitle ) { PartyMemberFragment partyMemberFragment = new PartyMemberFragment ( ) ; Bundle newInstanceArguments = new Bundle ( ) ; newInstanceArguments . putString ( "partyTitle" , partyTitle ) ; partyMemberFragment . setArguments ( newInstanceArguments ) ; return partyMemberFragment ; }
public void read ( DataInputStream dataInputStream ) throws Exception { angle = VectorUtil . stream ( dataInputStream ) ; position = VectorUtil . stream ( dataInputStream ) ; uuid = new UUID ( dataInputStream . readLong ( ) , dataInputStream . readLong ( ) ) ; }
public String getIdentifier ( ) { return String . format ( "%s/%x/%x" , mDevice . getDeviceName ( ) , mDevice . getVendorId ( ) , mDevice . getProductId ( ) ) ; }
public void run ( ) { mAcccountsActivity . recreate ( ) ; }
public List < Question > getQuestionList ( ) { return intrebari ; }
public void onDateValueClick ( ) { TransactionDatePicker picker = new TransactionDatePicker ( ) ; picker . show ( getSupportFragmentManager ( ) , "date" ) ; }
private void sendOfflinePresence ( final Account account ) { Log . d ( Config . LOGTAG , account . getJid ( ) . toBareJid ( ) + " : sending offline presence" ) ; sendPresencePacket ( account , mPresenceGenerator . sendOfflinePresence ( account ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { deleteBackup ( backupName ) ; }
public final void setBitmapDecoderClass ( Class < ? extends ImageDecoder > bitmapDecoderClass ) { if ( bitmapDecoderClass == null ) { throw new IllegalArgumentException ( "Decoder class cannot be set to null" ) ; } this . bitmapDecoderFactory = new CompatDecoderFactory <> ( bitmapDecoderClass ) ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . RadioButton" ) ; info . setCheckable ( true ) ; info . setChecked ( isChecked ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; getActivity ( ) . registerReceiver ( mFinishedCalculatingExtremumValueReceiver , mFinishedCalculatingExtremumValueFilter ) ; }
private void doButtonSetChange ( ) { Message swaptoset = dispatcher . obtainMessage ( BaardTERMWindow . MESSAGE_CHANGEBUTTONSET , data . getTargetSet ( ) ) ; dispatcher . sendMessage ( swaptoset ) ; }
private void load ( boolean force ) { thread . run ( ISSP , ( ) -> load ( force , null ) ) ; }
public DownloadWithUpdate process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return download . update ( obj . getJSONObject ( "result" ) , false ) ; }
private void onDismissed ( ) { mUpdateObservable . onNext ( Unit . INSTANCE ) ; }
public int getDx ( ) { return dx ; }
public final List < CellContainer > getPages ( ) { return this . _pages ; }
public String getImage ( ) { return image ; }
public void onResult ( @ NonNull OptionsMap result ) { try { startInternal ( createRequest ( base , result , ddDir , file ) , listener ) ; } catch ( PreparationException ex ) { listener . onFailed ( ex ) ; } }
public CommentListingURL after ( String after ) { return new UnknownCommentListURL ( uri . buildUpon ( ) . appendQueryParameter ( "after" , after ) . build ( ) ) ; }
private void reloadCategories ( ) { LoadCategories loader = new LoadCategories ( this , this ) ; loader . execute ( ) ; }
public static String guessMimeTypeFromExtension ( String extension ) { if ( extension == null || extension . isEmpty ( ) ) { return null ; } return extensionToMimeTypeMap . get ( extension ) ; }
private void sendDoSyncMsg ( ) { Message handlerMessage = Message . obtain ( ) ; handlerMessage . what = DialogHandler . MSG_DO_SYNC ; DialogHandler . storeMessage ( handlerMessage ) ; }
public void onResponse ( String response ) { JSONObject weather_data = Weather_API . weather_server_data ( response , units , show_feels_like ) ; save_weather_response ( weather_data ) ; }
public int getItemCount ( ) { return mDeckList . size ( ) ; }
public int getMemberId ( ) { return memberId ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { GalleryDTO gallery = dataSnapshot . getValue ( GalleryDTO . class ) ; if ( gallery != null ) { myViewHolder . likey . setImageResource ( R . drawable . cic_star_on ) ; } }
public void onPause ( ) { if ( parallaxEffect != null ) { parallaxEffect . setEnabled ( false ) ; } }
public static boolean setRingtone ( Context context , String uri ) { return sPreferences . edit ( ) . putString ( "pref_ringtone" , uri ) . commit ( ) ; }
public void onStop ( ) { MapProvider . onMapFragmentStop ( this ) ; super . onStop ( ) ; }
private static String getOutputTextInternal ( @ NonNull final String keySpec , final int labelEnd ) { if ( labelEnd <= 0 ) { return null ; } checkDoubleLabelEnd ( keySpec , labelEnd ) ; return parseEscape ( getAfterLabelEnd ( keySpec , labelEnd ) ) ; }
public String getDescription ( ) { return Utils . format ( Game . getVar ( R . string . GoldenStatue_Desc ) , getItem ( ) . name ( ) ) ; }
public static Bitmap getThumbnail ( Context context , File file ) { return getThumbnail ( context , getUri ( file ) , getMimeType ( file ) ) ; }
public IsbnListAdapter ( Context context ) { super ( context , 0 ) ; mLayoutInflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public void onTextChanged ( final CharSequence sequence , final int start , final int before , final int count ) { VerifyNumberActivity . this . updateButtonAccept ( ) ; }
private void onPageFinished ( String url ) { isLoading = false ; for ( BlackboardListener listener : listeners ) { listener . onPageFinished ( url ) ; } }
public String getEndpoint ( boolean isMediaRequest ) { if ( isMediaRequest ) { return this . getUser ( ) . getMe ( ) + "/api/v1/media" ; } return this . getUser ( ) . getMe ( ) + "/api/v1/statuses" ; }
public int getItemCount ( ) { return mColorOptionsDataSet . size ( ) ; }
public static String urlDecode ( String str ) { try { return URLDecoder . decode ( str , UTF8 ) ; } catch ( UnsupportedEncodingException ex ) { return str ; } }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . general_options , menu ) ; return true ; }
public List < Instance > getAllByStatus ( String . . . status ) { try ( Cursor instancesCursor = getCursorForAllByStatus ( status ) ) { return getInstancesFromCursor ( instancesCursor ) ; } }
public Maybe < Tag > create ( Tag entity ) { return crudHelper . create ( entity ) ; }
public String getFax ( ) { return this . _fax ; }
public int compareTo ( @ NonNull Object otherPlayer ) { return this . mName . compareToIgnoreCase ( ( ( Player ) otherPlayer ) . mName ) ; }
public void setStartTime ( Time startTime ) { this . startTime = startTime ; }
public void onSettingsSaved ( Exception error ) { }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . hasNewContactsToImport , checkType , contactHashMap , first , schedule ) ; }
private void refresh ( ) { posts . forced = true ; posts . loadMore ( mSwipeRefreshLayout . getContext ( ) , this , true , id ) ; }
public Icon color ( int res ) { this . color = res ; return this ; }
public boolean getWasShowingTranslation ( ) { return mPerInstallationPrefs . getBoolean ( Constants . PREF_WAS_SHOWING_TRANSLATION , false ) ; }
public void showDialogDonateSuccess ( ) { DonateSuccessDialog donateSuccessDialog = new DonateSuccessDialog ( ) ; donateSuccessDialog . show ( mFragmentManager , "Donate Success Dialog" ) ; }
private void setFonts ( ) { tvTranslateResult . setTypeface ( mFontManager . getRobotoSlabRegular ( this ) ) ; tvErrorText . setTypeface ( mFontManager . getRobotoRegular ( this ) ) ; tvPoweredByYandex . setTypeface ( mFontManager . getRobotoRegular ( this ) ) ; }
public void setup ( ) { FragmentActivity activity = CollectHelpers . createThemedActivity ( TestScreenContextActivity . class ) ; fragmentManager = activity . getSupportFragmentManager ( ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseDisconnect . Builder getResponseDisconnectBuilder ( ) { bitField0_ | = 0x00400000 ; onChanged ( ) ; return getResponseDisconnectFieldBuilder ( ) . getBuilder ( ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { changePhrasebookLanguage ( position ) ; }
public OffsetLinearLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void onEvent ( Events . QueueChanged e ) { this . lastQueueLength = e . getNewLength ( ) ; sendOngoingNotification ( ) ; }
public boolean resetShifted ( ) { if ( mShiftKey != null && ! mShiftKey . on ) return setModifier ( KeyEvent . META_SHIFT_ON , false ) ; return false ; }
public void onRefresh ( ) { thread . run ( ( ) -> { log . v ( TAG , "refreshing" ) ; load ( true ) ; } ) ; }
public void settingANewAnswerShouldCallDeleteMediaToRemoveTheOldFile ( ) { prepareAnswerFile ( ) ; super . settingANewAnswerShouldRemoveTheOldAnswer ( ) ; W widget = getSpyWidget ( ) ; verify ( widget ) . deleteFile ( ) ; }
public void handleEvent ( DcEvent event ) { update ( ) ; }
public void onStop ( ) { drawerPresenter . onStop ( ) ; drawerView . unregisterDrawerToggle ( drawerToggle ) ; addWeightPresenter . onStop ( ) ; pagerPresenter . onStop ( ) ; timePeriodLoader . onStop ( ) ; }
public Class < BitmapPaletteWrapper > getResourceClass ( ) { return null ; }
public DataManager provideDataManager ( ) { return mock ( DataManager . class ) ; }
public void hide ( ) { setVisibility ( GONE ) ; if ( mDividerView != null ) mDividerView . setVisibility ( GONE ) ; }
public void onRequestFailed ( SubredditRequestFailure failureReason ) { onMultiredditError ( failureReason . asError ( context ) ) ; }
private boolean validDatabase ( ) { return mDatabase != null && mDatabase . isOpen ( ) ; }
public String getSalt ( ) { return salt ; }
private void updateQueue ( ) { playingQueueAdapter . swapDataSet ( MusicPlayerRemote . getPlayingQueue ( ) , MusicPlayerRemote . getPosition ( ) ) ; if ( slidingUpPanelLayout . getPanelState ( ) == SlidingUpPanelLayout . PanelState . COLLAPSED ) { resetToCurrentPosition ( ) ; } }
public void constructorShouldThrowIfSizesMismatch ( ) { new PieChart ( plot , new double [ ] { 1 , 1 } , new ColorWrap [ ] { ColorWrap . RED } ) ; }
public void onClick ( View view ) { cManager . deleteEntries ( ) ; }
public com . coinomi . core . protos . Protos . ScryptParametersOrBuilder getEncryptionParametersOrBuilder ( ) { return encryptionParameters_ ; }
public static String getStringFormat ( String format , String . . . args ) { return String . format ( Locale . getDefault ( ) , format , args ) ; }
public Music build ( ) { return new Music ( id , title , artist , category , favorite , duration , thumbnail , url ) ; }
public void bind ( ImageEmbedView view ) { view . setPreview ( post . getEmbed ( ) . getPreviewUrl ( ) ) ; }
public void openOptionsMenu ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . KITKAT && current instanceof Canvas ) { showSystemUI ( ) ; } super . openOptionsMenu ( ) ; }
public ActionEditText ( Context context ) { super ( context ) ; }
private void initNoteReminderPrefs ( ) { binding . noteReminderPrefs . setOnClickListener ( mNoteReminderClick ) ; binding . noteReminderPrefs . setChecked ( mPrefs . isNoteReminderEnabled ( ) ) ; }
public void setIncoming ( Contact contact , boolean sameMessageBlock ) { if ( mBalloonView != null ) { mBalloonView . setBackgroundResource ( mIncomingDrawableId ) ; } mParentView . setGravity ( Gravity . LEFT ) ; super . setIncoming ( contact , sameMessageBlock ) ; }
private static File getCacheFile ( File formXml ) { return new File ( new StoragePathProvider ( ) . getOdkDirPath ( StorageSubdirectory . CACHE ) + File . separator + FileUtils . getMd5Hash ( formXml ) + " . formdef" ) ; }
public String getBgValue ( ) { Log . d ( MainActivity . TAG , "Current BG value : " + bgValue ) ; return ( bgValue . isEmpty ( ) ) ? DEFAULT_BG : bgValue ; }
public void onResume ( ) { super . onResume ( ) ; setUpMapIfNeeded ( ) ; handler . post ( dataUpdater ) ; }
public SongHistoryAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . song_history_item , parent , false ) ; return new ViewHolder ( v ) ; }
public void divisionMedalsOftenEnough ( ) { assertFrequentEnoughMedals ( GameType . DIVISION ) ; }
public List < String > getGlosses ( ) { return mGlosses ; }
public Bitmap getPhotoByUserId ( long idUser ) { PersonEntity person = getPerson ( idUser ) ; return BitmapFactory . decodeByteArray ( person . photo , 0 , person . photo . length ) ; }
private void runMigrations ( ) { new ODKSettingsMigrator ( metaSettings ) . migrate ( generalSettings , adminSettings ) ; }
public Button ( Context pContext ) { super ( pContext ) ; }
public String getSha1Sum ( ) { return this . sha1sum ; }
private SavedState ( Parcel in , ClassLoader loader ) { if ( loader == null ) { loader = getClass ( ) . getClassLoader ( ) ; } mViewPagerSavedState = in . readParcelable ( loader ) ; mLayoutDirection = in . readInt ( ) ; }
public int getTotalExitedKnights ( ) { return mExitedKnights ; }
public String getId ( ) { return this . mId ; }
public void setEnabled ( boolean enabled ) { labelTextView . setEnabled ( enabled ) ; imageView . setEnabled ( enabled ) ; }
public void onResume ( ) { super . onResume ( ) ; isDestroyed = false ; }
public static boolean isGroupItemId ( long rawId ) { return ExpandableAdapterHelper . isGroupItemId ( rawId ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { if ( mAdapter != null ) { mAdapter . filter ( s . toString ( ) ) ; } }
public com . coinomi . core . protos . Protos . TransactionOutput getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . TransactionOutput . getDefaultInstance ( ) ; }
public AnswerFrame ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( attrs , defStyle ) ; }
public Fragment getItem ( int i ) { return mHomeFragmentList . get ( i ) ; }
public PieModeRenderer ( IPercentageChartView view ) { super ( view ) ; init ( ) ; }
public void setAttachmentsJson ( String json ) { attachmentsJson = StringUtils . notNullStr ( json ) ; }
public RedButton ( int labelStringId ) { this ( Game . getVar ( labelStringId ) ) ; }
public void onBridgedAdapterItemRangeChanged ( @ NonNull RecyclerView . Adapter source , Object tag , int positionStart , int itemCount ) { onHandleWrappedAdapterItemRangeChanged ( source , ( List < ComposedChildAdapterTag > ) tag , positionStart , itemCount ) ; }
private void clearFindClosest ( ) { mWaitingOnFindClosest = false ; if ( mFrag != null ) mFrag . resetFindClosest ( ) ; mLastLocation = null ; }
public void onLoadingCancelled ( String imageUri , View view ) { NotifyDownloadFinished ( ) ; Log . d ( TAG , "Cancelled : " + imageUri ) ; }
public SimplePrivacy ( String type , ArrayList < Entry > entries ) { this . type = type ; this . entries = entries ; }
public void startInput ( ) { mDeleteCount = 0 ; mRecapitalizeStatus . disable ( ) ; mCurrentlyPressedHardwareKeys . clear ( ) ; mConnection . tryFixLyingCursorPosition ( ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeLong ( serverTime ) ; }
public Logger ( Messager messager ) { mMessager = messager ; }
private SQLiteDatabase lazyDatabase ( ) { if ( mDatabase == null || ! mDatabase . isOpen ( ) ) { mDatabase = this . getWritableDatabase ( ) ; } return mDatabase ; }
public void onClick ( View view ) { Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( "https : startActivity ( browserIntent ) ; }
public void afterTextChanged ( Editable editable ) { thread . runOnUI ( ( ) -> { teacherPickerAdapter . clear ( ) ; searchTextView . dismissDropDown ( ) ; } ) ; }
public Integer getDeleted ( ) { return deleted ; }
public void setBottomNoticeMessage ( String message ) { mBottomNoticeLayout . setVisibility ( View . VISIBLE ) ; mBottomNoticeText . setText ( message ) ; }
public void onRequestPermissionsResult ( int requestCode , String permissions [ ] , int [ ] grantResults ) { ScanActivity . onRequestPermissionResult ( this , requestCode , grantResults ) ; }
public void onGeneSelected ( int position ) { if ( null != mOnGeneSelectedListener ) { Gene gene = ( Gene ) mGenesAdapter . getItem ( position ) ; mOnGeneSelectedListener . onGeneSelected ( gene ) ; } }
public void onLoadFinished ( Loader < Album > loader , Album data ) { supportStartPostponedEnterTransition ( ) ; setAlbum ( data ) ; }
public IconicList ( ) { super ( IOBrowser . this , R . layout . iobrowser_row , items ) ; }
public void run ( ) { mTimeText . setText ( mTimerService . getTime ( ) ) ; }
public Set < String > getConvertCurrencies ( ) { Set < String > emptySet = Sets . newHashSet ( ) ; return Sets . newHashSet ( generalPrefs . getStringSet ( "pref_convert_currencycodes" , emptySet ) ) ; }
public static PickUtils getInstance ( Context context ) { if ( mInstance == null ) { synchronized ( PickPreferences . class ) { if ( mInstance == null ) { mInstance = new PickUtils ( context ) ; } } } return mInstance ; }
public int getToAmount ( ) { return toAmount ; }
public void swapItems ( ArrayList < String > newTasks ) { this . dataSet = newTasks ; notifyDataSetChanged ( ) ; }
public LiveData < Boolean > noFilesFound ( ) { return mEmptyList ; }
public String readFile ( ) { return RootUtils . runCommand ( "cat '" + file + "'" ) ; }
public AppCompatImageView getSearchButton ( ) { return searchButton ; }
public void showLoginSuccess ( ) { dismissDialog ( ) ; TaggedQuestionsActivity . start ( this ) ; }
public void onClick ( DialogInterface dialog , int which ) { state . edit ( ) . putString ( "lastchangelog" , "2 . 0 . 1" ) . apply ( ) ; dialog . dismiss ( ) ; }
public String name ( ) { if ( activated ) { return Game . getVar ( R . string . BlackSkull_Name_Awakened ) ; } else { return Game . getVar ( R . string . BlackSkull_Name ) ; } }
public void testStringConstructor ( ) throws JSONException { JSONArray object = new JSONArray ( " [ false ] " ) ; assertEquals ( 1 , object . length ( ) ) ; assertEquals ( false , object . get ( 0 ) ) ; }
public void setInnerShape ( InnerShapeType innerShape ) { this . innerShape = innerShape ; invalidate ( ) ; }
public void onClick ( View v ) { viewModel . saveDateInPrefs ( ) ; openFragment ( WorkoutDetailsFragment . class ) ; }
public void onPause ( ) { super . onPause ( ) ; try { getActivity ( ) . unregisterReceiver ( mFinishedCalculatingExtremumValueReceiver ) ; } catch ( Exception e ) { } }
public NfcReceiver ( NfcIconData iconData ) { super ( iconData ) ; }
public int getId ( ) { return user . getId ( ) ; }
public BallGroup ( int width , int height , int step ) { this . step = step ; this . width = width ; this . height = height ; balls = new ArrayList < Ball > ( 0 ) ; createText ( balls , "AppLift" ) ; }
public void clear ( ) { if ( items != null ) { items . clear ( ) ; } }
public GameSituation getGameSituation ( ) { return null ; }
public String info ( ) { return super . info ( ) + "\n\n" + Game . getVar ( R . string . RatSkull_Info2 ) ; }
public void start ( Attributes attributes ) { mCurrentThread . setIsAnnouncement ( attributes . getValue ( Topic . Xml . IS_ANNOUNCEMENT_ATTRIBUTE ) . equals ( "1" ) ) ; }
public Binder < CommentContentView > createBinder ( Comment model ) { return new CommentContentBinder ( model ) ; }
public int [ ] args ( ) { return new int [ ] { CommandAbstraction . INT , CommandAbstraction . PLAIN_TEXT } ; }
public static void setTemporaryProfile ( Context c , VpnProfile tmp ) { tmp . mTemporaryProfile = true ; ProfileManager . tmpprofile = tmp ; saveProfile ( c , tmp , true , true ) ; }
public com . coinomi . core . protos . Protos . DeterministicKey . Builder getDeterministicKeyBuilder ( ) { bitField0_ | = 0x00000040 ; onChanged ( ) ; return getDeterministicKeyFieldBuilder ( ) . getBuilder ( ) ; }
public void onClick ( View view ) { VH holder = ( VH ) view . getTag ( ) ; int position = holder . getAdapterPosition ( ) ; if ( position != RecyclerView . NO_POSITION ) { mItemClickListener . onItemClick ( getItemFromAdapterPosition ( position ) ) ; } }
public RangeWidgetLayoutElements ( View answerView , SuppressFlingGestureSlider slider , TextView currentValue ) { this . answerView = answerView ; this . slider = slider ; this . currentValue = currentValue ; }
public void onClick ( View view ) { FoodResult item = getResult ( getAdapterPosition ( ) ) ; mItemListener . onPostClick ( item . getHref ( ) ) ; }
public static int getBackgroundColor ( ) { return background [ Settings . colorMode ] ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = ActivityFormatChooserBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
public List < Image > readByAudioId ( long audioId ) { RealmResults < Image > images = realm . where ( modelType ) . equalTo ( "audio_id" , audioId ) . findAll ( ) ; images . sort ( "priority" ) ; return images ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; fetchUsers ( ) ; return true ; }
private void openActivity ( Class < ? > targetActivity ) { if ( isBackgroundActivity ( ) ) goToActivity ( targetActivity ) ; else goToActivityWithFinishCurrent ( targetActivity ) ; }
public static @ NonNull UndoAction revertNoteToProvidedState ( @ StringRes int undoNameId , Card card ) { return revertToProvidedState ( undoNameId , card , card . note ( ) . cards ( ) ) ; }
public void onSmileySelected ( int smiley , boolean reselected ) { itemRatingText . setText ( String . valueOf ( smiley + 1 ) + " Star" ) ; memberRatingIndicator . setRating ( smiley + 1 ) ; }
public static void clearCacheKeyForSheikh ( QariItem qariItem ) { sCache . remove ( qariItem ) ; }
public void setCurrentPlayerSymbol ( String currentPlayerSymbol ) { Log . i ( PROG , "****************** current - player - symbol : " + this . currentPlayerSymbol ) ; this . currentPlayerSymbol = currentPlayerSymbol ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; mRoute = new Route ( ) ; mMapPosition = new MapPosition ( ) ; mWaypointHistory = new Stack <> ( ) ; }
public void onClick ( View v ) { if ( isNeutralButtonOnClickDismiss ) { dismiss ( ) ; } if ( neutralClickListener != null ) { neutralClickListener . onClick ( BUTTON_NEUTRAL ) ; } }
public boolean getSourceLangAutoDetect ( ) { isSourceLangAutoDetect = appPrefs . getBoolean ( "isSourceLangAutoDetect" , true ) ; return isSourceLangAutoDetect ; }
public WindowInsetsCompat onApplyWindowInsets ( View v , WindowInsetsCompat insets ) { lastInsets = insets . getSystemWindowInsets ( ) ; for ( InsetsListener listener : listeners ) { listener . applyInsets ( lastInsets ) ; } return insets . consumeStableInsets ( ) ; }
public void validateInputAutoComplete ( AutoCompleteTextView autoCompleteTextView , String string ) { if ( string . isEmpty ( ) ) { autoCompleteTextView . setError ( "This field cannot be empty" ) ; errorCount ++ ; } else { autoCompleteTextView . setError ( null ) ; errorCount -- ; } }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'TAURON_PRICES'" ; db . execSQL ( sql ) ; }
public void onRemoteEvent ( EventBusController . RemoteServiceEvent event ) { if ( event . message . equals ( EventBusController . RemoteServiceEvent . GET_VOTE_LIST_SEARCH ) ) { refreshData ( event . voteDataList , event . offset ) ; hideLoadingCircle ( ) ; } }
public boolean onOptionsItemSelected ( final MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { finish ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void onStart ( ) { super . onStart ( ) ; mDispatcher . register ( this ) ; configureSearchView ( ) ; }
public Higlights_CustomAdapter ( WebServiceActivity webActivity , ArrayList < User > infringing_friends ) { context = webActivity ; this . infringing_friends = infringing_friends ; inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public void run ( ) { SendMessagesHelper . getInstance ( ) . sendMessage ( photoFinal , null , dialog_id , reply_to_msg , null , params ) ; }
public void onDeficienciesAdvisedClick ( ) { DeficienciesDialog selectionDialog = DeficienciesDialog . newInstance ( ) ; selectionDialog . setCallBack ( this ) ; selectionDialog . show ( getSupportFragmentManager ( ) , DeficienciesDialog . TAG ) ; }
public DownloadableFile getFileForPath ( final String path , final String mime ) { if ( path . startsWith ( "/" ) ) { return new DownloadableFile ( path ) ; } else { return getLegacyFileForFilename ( path , mime ) ; } }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { dropOffLayout . setVisibility ( View . GONE ) ; } else { dropOffLayout . setVisibility ( View . VISIBLE ) ; } }
public Attachment getAttachment ( ) { return attachment ; }
public GanjoorDbBrowser ( Context context ) { mContext = context ; AppSettings . Init ( context ) ; String dbPath = AppSettings . getDatabasePath ( context ) ; OpenDatbase ( dbPath ) ; }
public SwipeBackLayout getSwipeBackLayout ( ) { if ( enableSwipeBackLayout ) return mHelper . getSwipeBackLayout ( ) ; else return null ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; peer . serializeToStream ( stream ) ; stream . writeInt32 ( max_date ) ; }
public void setPoiId ( int poiId ) { this . poiId = poiId ; }
public int getItemCount ( ) { return rowCount ; }
public Float getX ( Integer origin_x ) { return getValue ( origin_x , m_bitmap_origin_width , canvasWidth ) ; }
public PackagesRecyclerViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . packages_row , parent , false ) ; return new PackagesRecyclerViewHolder ( view , this ) ; }
public void onStart ( ) { super . onStart ( ) ; LCropImageView . setOnSetImageUriCompleteListener ( this ) ; LCropImageView . setOnCropImageCompleteListener ( this ) ; }
private void showLastUpdateTime ( ) { NewsSharedPreferences newsSharedPreferences = NewsSharedPreferences . getInstance ( ) ; long lastUpdateTimeinMillis = newsSharedPreferences . get ( newsSharedPreferences . getStringFromResId ( R . string . pref_last_updated_key ) , 0L ) ; mBookmarksListView . showLastUpdateTime ( DateUtils . formatLastUpdateTime ( lastUpdateTimeinMillis ) ) ; }
public void onLoginSuccess ( ) { btnLogin . setEnabled ( true ) ; finish ( ) ; }
public void onSuccess ( final RtpContentMap outgoingContentMap ) { sendSessionAccept ( outgoingContentMap , webRTCSessionDescription ) ; }
public LibraryActivity getLibraryActivity ( ) { return ( ( LibraryActivity ) getActivity ( ) ) ; }
public SharedPreferencesUtil ( Context context ) { mSharedPref = PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( mAmount . hashCode ( ) ) ; result = prime * result + ( mCurrency . hashCode ( ) ) ; return result ; }
public boolean didPresentSdcardPermissionsDialog ( ) { return mPerInstallationPrefs . getBoolean ( Constants . PREF_DID_PRESENT_PERMISSIONS_DIALOG , false ) ; }
private void reload ( ) { clear ( ) ; loadPosts ( ) ; }
public boolean isOnSecondaryHomeScreen ( ) { return isOnHomeScreen ( false , true ) ; }
private void onItemViewClick ( View v , boolean pinned ) { int position = mRecyclerView . getChildPosition ( v ) ; if ( position != RecyclerView . NO_POSITION ) { ( ( DraggableSwipeableExampleActivity ) getActivity ( ) ) . onItemClicked ( position ) ; } }
public float [ ] calculateCoordinates ( View view ) { float xy [ ] = GeneralLocation . CENTER_RIGHT . calculateCoordinates ( view ) ; xy [ 0 ] += 3f * view . getWidth ( ) ; return xy ; }
public RoboRadioButton ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( attrs ) ; }
public void run ( ) { mImeManager . showSoftInput ( ChoiceEditText . this , InputMethodManager . SHOW_FORCED ) ; }
public DetailedResultAdapter ( Context ctx , List < DetailResultData > detailResultData ) { this . ctx = ctx ; this . detailResultData = detailResultData ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; String language = prefs . getString ( PREF_LANG , "" ) ; LanguageHelper . updateLanguage ( this , language ) ; }
public static void log ( Context context , String s , Exception ex , int duration ) { log ( context , s + " : " + getExceptionInfo ( ex ) , Types . ERROR , duration ) ; }
public void setCurrentMediaId ( String mediaId ) { LogHelper . d ( TAG , "setCurrentMediaId" , mediaId ) ; mQueueManager . setQueueFromMusic ( mediaId ) ; }
public void onClick ( ) { showRenameFolderDialog ( activity , item ) ; }
public FirestoreResultResponse ( Map < String , Object > data , String error ) { this . data = data ; Error = error ; }
private void doOvertimeBell ( ) { Log . v ( TAG , "overtime bell at %s" + mCurrentTime ) ; mAlertManager . playBell ( new BellSoundInfo ( 3 ) ) ; }
public void OnServerFound ( String message ) { Log . d ( TAG , "OnServerFound : " + message ) ; }
public void testAddButton ( ) throws Exception { findObject ( By . res ( HEADER_ADD ) ) . click ( ) ; assertThat ( findObject ( By . text ( "New note" ) ) , notNullValue ( ) ) ; }
public ChartData ( T . . . dataSets ) { mDataSets = arrayToList ( dataSets ) ; init ( ) ; }
public boolean equals ( Object o ) { if ( o == null || o . getClass ( ) != TaskReverse . class ) { return false ; } TaskReverse t = ( TaskReverse ) o ; return ( m_name . equals ( t . m_name ) ) ; }
public FavoriteSeconds ( @ NonNull String title , int seconds ) { super ( title , Type . SECONDS ) ; this . seconds = seconds ; }
public void onResume ( ) { Log . d ( TAG , "onResume ( ) " ) ; super . onResume ( ) ; setVersionText ( ) ; setUuidText ( ) ; setSecretText ( ) ; }
public void onReceiveSystemVersion ( SystemVersion info ) { if ( getActivity ( ) == null ) return ; mVersion . setText ( info . version ) ; }
public final void onMediaPeriodCreated ( int windowIndex , MediaPeriodId mediaPeriodId ) { mediaPeriodQueueTracker . onMediaPeriodCreated ( windowIndex , mediaPeriodId ) ; EventTime eventTime = generateEventTime ( windowIndex , mediaPeriodId ) ; for ( AnalyticsListener listener : listeners ) { listener . onMediaPeriodCreated ( eventTime ) ; } }
public void readFromParcel ( Parcel in ) { textStyle = TextStyle . valueOf ( in . readString ( ) ) ; numbering = Boolean . parseBoolean ( in . readString ( ) ) ; }
public void onPageFinished ( WebView view , String url ) { Ads . updateBanner ( adView ) ; }
public void onSuccess ( Object data ) { Log . d ( TAG , String . format ( "Auth success : %s" , data . toString ( ) ) ) ; callback . onSuccess ( data ) ; }
private String getTitle ( ) { if ( audioQueue == null ) { return "" ; } return quranInfo . getSuraAyahString ( this , audioQueue . getCurrentSura ( ) , audioQueue . getCurrentAyah ( ) ) ; }
public boolean isDeviceCompatible ( ) { return prefs . getBoolean ( PREFS_KEY_DEVICE_COMPATIBLE , true ) ; }
public List < OrderedEventSource > getActiveEventSources ( ) { return activeEventSources . isEmpty ( ) ? EventProviderType . getAvailableSources ( ) : activeEventSources ; }
public void onBindViewHolder ( @ NonNull MinerViewHolder holder , int position ) { holder . bindBlock ( minersArray . get ( position ) , mPool , mCur ) ; }
private void showFloatingToolbar ( ) { if ( mActionMode != null ) { int delay = ViewConfiguration . getDoubleTapTimeout ( ) ; postDelayed ( mShowFloatingToolbar , delay ) ; } }
public String getAppCustomLocation ( ) { return mPerInstallationPrefs . getString ( Constants . PREF_APP_LOCATION , Environment . getExternalStorageDirectory ( ) . getAbsolutePath ( ) ) ; }
public void setFeeChargesCharged ( Integer feeChargesCharged ) { this . feeChargesCharged = feeChargesCharged ; }
private String getNoticonCharacter ( ) { return queryJSON ( "noticon" , "" ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . updateInterfaces ) ; return true ; }
private List < AbstractDeckTreeNode > getDeckList ( ) { return mCurrentDeckList ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . closeChats ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . audioDidReset ) ; loadAudio ( ) ; return true ; }
public DateTimeView . OnSelectListener getEventListener ( ) { return mListener ; }
public void initVideoRecorderPostPrepare ( MediaRecorder video_recorder , boolean want_photo_video_recording ) throws CameraControllerException { }
public static QuranRow fromAyahBookmarksHeader ( Context context ) { return new QuranRow . Builder ( ) . withText ( context . getString ( R . string . menu_bookmarks_ayah ) ) . withType ( QuranRow . HEADER ) . build ( ) ; }
public static Call < WebCaptcha > getCaptchaDataUrl ( String token ) { return sWebApi . getCaptchaDataUrl ( token , System . currentTimeMillis ( ) ) ; }
public double getCarbs ( ) { return this . carbs ; }
public Builder setReblogsCount ( String reblogsCount ) { this . reblogsCount = reblogsCount ; return this ; }
static public File getInternalStorageFile ( String fileName ) { File storageDir = getContext ( ) . getFilesDir ( ) ; return new File ( storageDir , fileName ) ; }
public void testSafeToAddAuthToken23 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( notWpcomAddress3 ) ) ) ; }
public static com . coinomi . core . protos . Protos . ScryptParameters parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void onRefresh ( ) { makeRequestItemCategory ( ) ; makeRequestShopItem ( true , true ) ; }
public void refresh ( String json ) { try { JSON = new JSONObject ( json ) ; } catch ( JSONException e ) { Log . e ( Constants . TAG , "Failed to read gamma profiles" ) ; JSON = null ; } }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "oddb . org . generika" , appContext . getPackageName ( ) ) ; }
private void showRecord ( int position ) { TetroidRecord record = ( TetroidRecord ) recordsListAdapter . getItem ( position ) ; showRecord ( record ) ; }
public void onGroupCollapse ( int groupPosition , boolean fromUser ) { }
private void initBackToTodayButton ( ) { tvBackToToday . setVisibility ( Day . isToday ( day ) ? View . GONE : View . VISIBLE ) ; }
public int onGetSwipeReactionType ( MyViewHolder holder , int position , int x , int y ) { return RecyclerViewSwipeManager . REACTION_CAN_SWIPE_BOTH_V ; }
public void testMinimalEncoder30 ( ) throws Exception { verifyMinimalEncoding ( "ABC12" , "ALPHANUMERIC ( ABC12 ) , TERMINATOR ( ) " , null , false ) ; }
public void setDesktopOptionViewListener ( DesktopOptionViewListener desktopOptionViewListener ) { this . _desktopOptionViewListener = desktopOptionViewListener ; }
public DeveloperSettings provideDeveloperSettings ( @ NonNull DigitalismaApplication app ) { return new DeveloperSettings ( app . getSharedPreferences ( "developer_settings" , MODE_PRIVATE ) ) ; }
public void onCorruption ( SupportSQLiteDatabase db ) { databaseIsCorrupt = true ; super . onCorruption ( db ) ; }
public static void onLinkClicked ( AppCompatActivity activity , String url ) { onLinkClicked ( activity , url , false ) ; }
private int getKeyboardPortraitHeight ( ) { int keyboardHeight = PreferenceManager . getDefaultSharedPreferences ( getContext ( ) ) . getInt ( "keyboard_height_portrait" , defaultCustomKeyboardSize ) ; return Util . clamp ( keyboardHeight , minCustomKeyboardSize , getRootView ( ) . getHeight ( ) - minCustomKeyboardTopMargin ) ; }
public SmoothWorld ( ) { this ( random . nextLong ( ) ) ; }
public int getIconResId ( int index ) { return PAGE_ICONS [ index ] ; }
public void run ( ) { if ( ! ( ( Activity ) context ) . isFinishing ( ) ) { try { progressDialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } } }
public Attr setTag ( String tag ) { Tag = tag ; return this ; }
public void onClickCustomFee ( long currentValue ) { showCustomFeeDialog ( currentValue ) ; logTransaction ( 5 ) ; }
public void localeTwoLetterCodeResolves ( ) { assertThat ( "A locale with a 3 - letter code resolves correctly" , LanguageUtil . getLocale ( "af" ) . getDisplayLanguage ( ) , is ( "Afrikaans" ) ) ; }
public void setNumber ( int number ) { this . number = number ; }
public void onViewRecycled ( RecyclerView . ViewHolder holder , int viewType ) { if ( holder instanceof ExpandableItemViewHolder ) { ( ( ExpandableItemViewHolder ) holder ) . setExpandStateFlags ( STATE_FLAG_INITIAL_VALUE ) ; } super . onViewRecycled ( holder , viewType ) ; }
public void addListener ( ITripChangeListener parListener ) { mChangeListeners . add ( parListener ) ; }
public boolean getNotificationStatus ( ) { return getBool ( R . string . pref_key__icon_show_notifications , false ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setHasOptionsMenu ( false ) ; mPaymentAdapter = new PaymentListItemAdapter ( new ArrayList < Payment > ( ) ) ; }
public void onDataChange ( @ NonNull DataSnapshot snapshot ) { users user = snapshot . getValue ( users . class ) ; loadData . onDataLoaded ( user ) ; }
public void setDefaultHint ( ) { defaultHint = true ; if ( mInputView != null ) { mInputView . setHint ( Tuils . getHint ( mSkinManager , mainPack . currentDirectory . getAbsolutePath ( ) ) ) ; } }
public void onEntryMove ( DatabaseEntry entry1 , DatabaseEntry entry2 ) { _listener . onEntryMove ( entry1 , entry2 ) ; }
public void run ( ) { if ( mService != null ) { mStatusbar . setText ( MyFileUtils . getSizeInKbAsString ( ( long ) mService . getLength ( ) ) ) ; mStatusHandler . postDelayed ( this , 1000 ) ; } }
public static String getAbsoluteUrl ( String relativeUrl ) { if ( relativeUrl . startsWith ( "http : return relativeUrl ; return BASE_URL + relativeUrl ; }
public void addRemoveFavourites ( MenuItem menuItem ) { if ( menuItem . getTitle ( ) . equals ( MediaPlayerConstants . TITLE_ADD_TO_FAVOURITES ) ) { addToFavourites ( ) ; } else { removeFromFavourites ( ) ; } }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; String role = mRoleListAdapter . getSelectedRole ( ) ; outState . putSerializable ( ROLE_TAG , role ) ; }
public MainViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . isPagindEnabled = true ; }
private BroadcastReceiver requeryReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( isFinishing ( ) ) { return ; } shouldReload = true ; } } ;
public void established ( ) { Log . d ( Config . LOGTAG , "succesfully connected to our own primary candidate" ) ; mergeCandidate ( candidate ) ; sendInitRequest ( ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . Tag prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public PartInfo createFromParcel ( Parcel source ) { return new PartInfo ( source ) ; }
public void onRefreshStarted ( View view ) { if ( ! NetworkUtils . checkConnection ( getBaseContext ( ) ) ) { mPullToRefreshHelper . setRefreshing ( false ) ; return ; } refreshCategories ( ) ; }
public RunsListWithMapFragment ( ) { mLatestRunsFragment = new LatestRunsFragment ( ) ; mMapFragment = new SupportMapFragment ( ) ; }
public void broadcastTx ( Transaction tx , TransactionEventListener < Transaction > listener ) { }
private DownloadWithUpdate ( @ NonNull String gid , @ NonNull AbstractClient client ) { super ( gid , client ) ; }
private String getImageName ( ) { return "em_" + this . unicode . replace ( " - " , "_" ) ; }
public Object visit ( SongDigest track ) { icon . setImageResource ( R . drawable . track24 ) ; return null ; }
public Contact ( String name , byte [ ] pubkey , ArrayList < String > addresses ) { this . name = name ; this . pubkey = pubkey ; this . blocked = false ; this . addresses = addresses ; }
private void adapterSetup ( ) { Timber . v ( "adapterSetup ( ) " ) ; if ( mLinksAdapter == null ) { showAllLinks ( ) ; } populateDrawerCategories ( ) ; touchHelperSetup ( ) ; }
public void onClick ( View v ) { if ( mClickListener != null ) { int position = mRecyclerView . getLayoutManager ( ) . getPosition ( v ) ; mClickListener . onClick ( mItems . get ( position ) ) ; } }
public int getPlayer2Image ( ) { if ( player2Image == 1 ) return R . drawable . cross ; else return R . drawable . circle ; }
public static Position ascend ( Position current ) { return descendOrAscend ( current , false ) ; }
public boolean isOnResumeAfterOnCreate ( ) { return isOnResumeAfterOnCreate ; }
public void reset ( ) { RetroClient . cancelRequests ( ) ; retroApi = RetroClient . getApi ( rootView . getContext ( ) , true ) ; filesD . clear ( ) ; adapter . clear ( ) ; }
public DrawerBuilder withOnDrawerItemClickListener ( Drawer . OnDrawerItemClickListener onDrawerItemClickListener ) { this . mOnDrawerItemClickListener = onDrawerItemClickListener ; return this ; }
private ActivityUtils ( ) { }
public float getYValueSum ( ) { float sum = 0 ; for ( int i = 0 ; i < getDataSet ( ) . getEntryCount ( ) ; i ++ ) sum += getDataSet ( ) . getEntryForIndex ( i ) . getVal ( ) ; return sum ; }
public int hashCode ( ) { return Objects . hash ( note , noteTags ) ; }
public static boolean isImage ( String baseSubreddit ) { return filters . getBoolean ( baseSubreddit + "_images" , true ) ; }
public static boolean isSearchInFiles ( ) { return getBoolean ( R . string . pref_key_search_files , DEF_SEARCH_IN_FILES ) ; }
public String getApiKey ( ) { return mApiKey ; }
public OutgoingTextMessage withBody ( String body ) { return new OutgoingIdentityVerifiedMessage ( getRecipients ( ) , body ) ; }
public int getMain ( ) { return main ; }
public void onItemClicked ( int position , View view ) { startActivity ( new Intent ( mContext , CreateGroupActivity . class ) . putExtra ( Constants . INTENT_ID , mAdapter . getItem ( position ) . getUuId ( ) ) ) ; }
private void bindNoDataView ( ) { try { breakdown . setVisibility ( View . GONE ) ; progressBar . setVisibility ( View . GONE ) ; mNoDataBinder . bindData ( mNoDataParams ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public void showInitialSearchInPlatesSection ( Cursor cursor ) { if ( searchPlatesFragment . isViewCreated ( ) ) { searchPlatesFragment . setData ( cursor ) ; searchPlatesFragment . showList ( ) ; searchPlatesFragment . showHistoryHeaders ( ) ; } }
public void onSuccessDownload ( String fileName ) { radialProgress . setProgress ( 1 , true ) ; updateButtonState ( true ) ; }
public SettingsStore providesAdminSettingsStore ( SettingsProvider settingsProvider ) { return new SettingsStore ( settingsProvider . getAdminSettings ( ) ) ; }
public void onReply ( int position ) { super . reply ( adapter . getItem ( position ) ) ; }
public JsonBufferedObject asObject ( ) { switch ( type ) { case NULL : return null ; default : return ( JsonBufferedObject ) value ; } }
public void didSelectContact ( final TLRPC . User user , String param ) { if ( user == null ) { return ; } MessagesController . getInstance ( ) . blockUser ( user . id ) ; }
public String toJSON ( ) { return String . format ( " { \"%s\" : \"%s\" , \"%s\" : \"%s\" , \"%s\" : \"%s\" } " , NAME , name , INTEGER_PART , integerPart , FRACTIONAL_PART , fractionalPart ) ; }
public static boolean isEmptyLine ( @ Nullable String line ) { return removeMarkDown ( line ) . trim ( ) . length ( ) == 0 ; }
public int getItemCount ( ) { return files . size ( ) + ( mHasHeader ? 1 : 0 ) ; }
public CircleTransform ( Context context ) { super ( context ) ; }
public SpeedTestDownloadConfig getDownloadConfig ( ) { String url = mSharedPrefs . getString ( PREF_SPEED_TEST_DOWNLOAD_URL , "" ) ; File file = FileUtil . getCacheFile ( mContext , FILE ) ; return new SpeedTestDownloadConfig ( url , file ) ; }
public void onAttackComplete ( ) { super . onAttackComplete ( ) ; AttackIndicator . target ( getEnemy ( ) ) ; curAction = null ; setEnemy ( CharsList . DUMMY ) ; }
public void stop ( ) { if ( pads != null && pads . length >= 21 ) { for ( Pad pad : pads ) { if ( pad != null ) { pad . stop ( ) ; } } } }
public String getKey ( ) { try { return getCanonicalName ( ) ; } catch ( InvalidSubredditNameException e ) { throw new UnexpectedInternalStateException ( String . format ( "Cannot save subreddit '%s'" , url ) ) ; } }
public void remove ( ) { synchronized ( mMovie ) { MovieObjects . clear ( ) ; } notifyDataSetChanged ( ) ; }
public void openHelp ( ) { try { Intent lHelpIntent = new Intent ( this , HelpActivity . class ) ; startActivity ( lHelpIntent ) ; } catch ( Exception e ) { toast ( e . getMessage ( ) ) ; } }
public SingleSoundCompletionListener ( @ Nullable OnCompletionListener userCallback ) { this . userCallback = userCallback ; }
public void onOk ( List < ? > args ) { callback . onMessageSent ( message ) ; }
public boolean maxDamageLevelReached ( ) { return mDamageLevel >= NODE_DAMAGE_MAX_LEVEL ; }
public FormatDialog setHint ( @ StringRes int resId ) { hintResId = resId ; return this ; }
public void onCameraError ( String msg ) { if ( alive ) { Log . e ( TAG , "Camera error : " + msg ) ; sendMessage ( What . CAMERA_ERROR , 0 , 0 , null ) ; } }
public NmeaSentence ( String nmeaSentence ) { if ( Utilities . IsNullOrEmpty ( nmeaSentence ) ) { nmeaParts = new String [ ] { "" } ; return ; } nmeaParts = nmeaSentence . split ( " , " ) ; }
public String getTag ( ) { return StringUtils . notNullStr ( tag ) ; }
public boolean isNot ( String identity ) { return ! is ( identity ) ; }
public int getCount ( ) { return NB_FRAGMENT + ( isSdCardFragmentVisible ( ) ? 1 : 0 ) ; }
private void numberOfSatellites ( int pNum ) { valueNumSatellites . setText ( String . valueOf ( pNum ) ) ; }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( "CREATE TABLE CALENDAR ( date VARCHAR ( 20 ) , schedule VARCAHR ( 30 ) , memo VARCHAR ( 50 ) ) ; " ) ; }
public ExoVideoPlayer ( Context context , String url , ProxyConfig config ) { this . player = createPlayer ( context ) ; this . player . addVideoListener ( onVideoSizeChangedListener ) ; this . source = createMediaSource ( url , config ) ; }
private void sendNotification ( String messageBody ) { AndroidUtil . playDefaultNotificationSound ( this ) ; McdNotificationManager . notify ( this , McdNotificationManager . CHAT_CHANNEL_ID , getResources ( ) . getString ( R . string . app_name ) , messageBody , MainActivity . class ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "reversed" , checked ) . apply ( ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { setValue ( ( List < String > ) dataSnapshot . getValue ( ) ) ; }
private void selectDeliveryGuy ( ) { int orderStatus = getArguments ( ) . getInt ( "order_status" ) ; Intent intent = new Intent ( getActivity ( ) , SelectDeliveryGuy . class ) ; intent . putExtra ( "order_status" , orderStatus ) ; startActivityForResult ( intent , 562 ) ; }
public void run ( ) { AndroidUtils . showDialog ( activity , "Permission Denied" , "Can't create torrent client on device without requested " + "permissions . " ) ; }
public void onRenegotiationNeeded ( ) { Log . w ( TAG , "onRenegotiationNeeded" ) ; }
public static String [ ] getAllColumns ( ) { return new String [ ] { COLUMN_ENTRY_ID , COLUMN_PERSON_ID , COLUMN_STATUS , COLUMN_AMOUNT , COLUMN_DATE_DUE , COLUMN_DATE_ENTERED , COLUMN_NOTE , COLUMN_TYPE } ; }
public boolean insert ( String tid ) { String begin = TimestampGenerator . getTimestamp ( ) ; return this . insert ( tid , begin ) ; }
public static void blendSrcAlphaOne ( ) { GLES20 . glBlendFunc ( GL10 . GL_SRC_ALPHA , GL10 . GL_ONE ) ; }
private CacheEntry ( WeakReference < V > data ) { this ( data , new WeakReferenceListManager < UpdatedVersionListener < K , V >> ( ) ) ; }
public PlayableFilePreparationSource providePlayableFilePreparationSource ( ) { return new MaxFileVolumePreparer ( preparationSourceProvider . providePlayableFilePreparationSource ( ) ) ; }
public VolumeBar ( @ NonNull Context context ) { super ( context ) ; init ( ) ; }
public boolean isReady ( ) { return loadingFinished || ( ! isPendingReset ( ) && ! primarySampleQueue . isEmpty ( ) ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidenceOrBuilder getConfidenceOrBuilder ( ) { if ( confidenceBuilder_ != null ) { return confidenceBuilder_ . getMessageOrBuilder ( ) ; } else { return confidence_ ; } }
private final SimpleProgressListener simpleProgressListener ( ) { return new SimpleProgressListener ( this ) ; }
public void onAnimationCancel ( ) { }
public void onStateChanged ( @ NonNull View bottomSheet , int newState ) { prepareViewsForSheetPosition ( newState ) ; }
public Server ( ) { }
private void execute ( Pair < Boolean , CheckDatabaseResult > result ) { DeckPicker . CheckDatabaseListener listener = getInstance ( impl ) ; listener . onPostExecute ( result ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mReaderPostLogic = new ReaderPostLogic ( this ) ; AppLog . i ( AppLog . T . READER , "reader post service > created" ) ; }
public SearchHistory create ( AggregateId placeId , String searchedPlate , SearchType type ) { Date now = timeProvider . now ( ) ; return new SearchHistory ( placeId , searchedPlate , now , type ) ; }
public String getClassAN ( ) { if ( classAN == null ) classAN = GGApp . deleteNonAlphanumeric ( clazz ) ; return classAN ; }
public String status ( Char me ) { return Utils . format ( Game . getVar ( R . string . Mob_StaWanderingStatus ) , me . getName ( ) ) ; }
private static boolean eq ( Object o1 , Object o2 ) { return o1 == null ? o2 == null : o1 . equals ( o2 ) ; }
public void onStop ( ) { mAddTagDialogPresenter . unbind ( this ) ; super . onStop ( ) ; }
public int getItemCount ( ) { if ( documentList . isEmpty ( ) ) onShowEmptyLogo ( ) ; else onHideEmptyLogo ( ) ; int add = isAdShown ( ) ? 1 : 0 ; return documentList . size ( ) + add ; }
public void reset ( ) { isFiltered = false ; isPainted = false ; isCropped = false ; ttl = 0 ; imagePath = null ; thumbPath = null ; caption = null ; stickers . clear ( ) ; }
public static void save ( SharedPreferences sharedPreferences , Profile profile ) { sharedPreferences . edit ( ) . putString ( PREF_PROFLE , new Gson ( ) . toJson ( profile ) ) . apply ( ) ; }
public void onStop ( ) { adapter . onStop ( ) ; subscriptions . clear ( ) ; }
public void onChildAdded ( DataSnapshot dataSnapshot , String previousChildKey ) { mainAdapter . addItem ( dataSnapshot ) ; }
public Integer getFeeChargesOverdue ( ) { return feeChargesOverdue ; }
private void fireOnProgressUpdateListener ( int progress ) { for ( OnLibraryDownloadListener l : listeners ) { l . OnProgressUpdate ( progress ) ; } }
public void run ( ) { try { view . zoomWithAnimation ( 20 , 710 , 2 . 3f ) ; } catch ( NullPointerException e ) { } }
private CompoundButton . OnCheckedChangeListener onCheckedChangeListener = new CompoundButton . OnCheckedChangeListener ( ) { @ Override public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( ! isUpdatingUI ) { TemperatureController . getInstance ( ) . setTemperatureProgram ( isChecked ) ; } } } ;
public void onCaseForScrutinyClick ( ) { CaseDefaultDialog selectionDialog = CaseDefaultDialog . newInstance ( TAG , AppConstants . CASES_FOR_SCRUTINY ) ; selectionDialog . setCallBack ( this ) ; selectionDialog . show ( getSupportFragmentManager ( ) , CaseDefaultDialog . TAG ) ; }
public Integer getPenaltyChargesOverdue ( ) { return penaltyChargesOverdue ; }
public static String getWikiDateString ( Calendar c ) { return WIKI_DATE_FORMAT . format ( c . getTime ( ) ) ; }
public static ArrayList < Album > getAllAlbums ( @ NonNull final Context context ) { ArrayList < Song > songs = SongLoader . getSongs ( SongLoader . makeSongCursor ( context , null , null , getSongLoaderSortOrder ( context ) ) ) ; return splitIntoAlbums ( songs ) ; }
public static FeedItemEvent updated ( List < FeedItem > items ) { return new FeedItemEvent ( Action . UPDATE , items ) ; }
public void onClick ( View view ) { mDetailActionListener . onClick ( view , DetailActionListener . ADD_LAYER_FIELD , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
public PreferenceAdapter ( Context context , List < PreferenceData > datas ) { this . context = context ; this . datas = datas ; }
public byte [ ] getNotes ( ) { return notes ; }
private void maybeForceBuilderInitialization ( ) { if ( com . google . protobuf . GeneratedMessage . alwaysUseFieldBuilders ) { getKeyFieldBuilder ( ) ; getTransactionFieldBuilder ( ) ; getAddressStatusFieldBuilder ( ) ; } }
public @ NonNull String getActionLogin ( ) { return res . getString ( R . string . action_login ) ; }
public void onWindowFocusChanged ( boolean hasFocus ) { super . onWindowFocusChanged ( hasFocus ) ; if ( ! hasFocus ) { return ; } resetPoints ( ) ; }
public TimeBuilder setLocale ( @ NotNull String locale ) { return new TimeBuilder ( locale ) ; }
public void onChange ( RealmResults < EpisodeRealm > results ) { listener_ . notifyEpisodeListAllChanged ( results ) ; }
public Long getNumThreadsUl ( ) { return numThreadsUl ; }
public void setTerminalViewClient ( TerminalViewClient terminalViewClient ) { this . mClient = terminalViewClient ; }
public com . google . protobuf . AnyOrBuilder getUpgradedClientStateOrBuilder ( ) { if ( upgradedClientStateBuilder_ != null ) { return upgradedClientStateBuilder_ . getMessageOrBuilder ( ) ; } else { return upgradedClientState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : upgradedClientState_ ; } }
public void setSyncFolderItems ( List < SyncedFolderDisplayItem > syncFolderItems ) { mSyncFolderItems . clear ( ) ; mSyncFolderItems . addAll ( syncFolderItems ) ; notifyDataSetChanged ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `operation` ADD COLUMN `account` INTEGER" ) ; }
public void notifyOfChangeAtId ( int id , boolean isPercentage ) { requery ( ) ; notifyItemChanged ( isPercentage ? convertPercentageIdToPosition ( id ) : convertCounterIdToPosition ( id ) ) ; }
private void populateSearchSuggestionAdapter ( String query ) { if ( mSearchSuggestionAdapter == null ) { createSearchSuggestionAdapter ( ) ; } mSearchSuggestionAdapter . populate ( query ) ; }
private DescendingAlphabeticalClassifier ( final String letter ) { super ( letter ) ; }
public boolean onItemLongClick ( AdapterView < ? > adapterView , View view , int position , long id ) { return list . size ( ) > position && onItemLongClick ( list . get ( position ) ) ; }
private void onAlarm ( ) { schedule ( this ) ; onReload ( "alarm" ) ; }
public void setFat ( String fat ) { this . fat = fat ; }
public Settings ( ) { this . minAudioStrength = 0 . 40f ; albumArtBackgroundEnabled = false ; }
public ServerAuthDialog clickGetBlankFormWithAuthenticationError ( ) { onView ( withText ( getTranslatedString ( R . string . get_forms ) ) ) . perform ( scrollTo ( ) , click ( ) ) ; return new ServerAuthDialog ( rule ) . assertOnPage ( ) ; }
public void onComplete ( ) { sendOnCompleteBroadcast ( true ) ; }
public boolean onPreferenceClick ( Preference preference ) { startDiscoverTrackersActivity ( Keys . ROLE_CAREGIVER ) ; return true ; }
public BMI ( Long id , Integer height , Double weight , Double bmi , Date timestamp ) { this . id = id ; this . height = height ; this . weight = weight ; this . bmi = bmi ; this . timestamp = timestamp ; }
public void onClick ( DialogInterface dialog , int which ) { SIAApp . GG_APP . setCustomThemeName ( themeIds . get ( which ) ) ; SIAApp . GG_APP . school . loadTheme ( ) ; recreate = true ; getActivity ( ) . recreate ( ) ; }
public static boolean setServerURI ( Context context , String serverURI ) { return sPreferences . edit ( ) . putString ( "pref_network_uri" , serverURI ) . commit ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : this . finish ( ) ; return true ; default : return super . onOptionsItemSelected ( item ) ; } }
public DrawView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . setup ( context ) ; }
public boolean isTracking ( ) { return isTracking ; }
public void setMyEventsAdapter ( myEventsAdapter ad ) { this . ad = ad ; }
private void initComponents ( ) { if ( physicalActivity == null ) return ; initToobar ( ) ; populateView ( physicalActivity ) ; }
public boolean isTextSelectionEnabled ( ) { return textSelectionEnabled ; }
public SkillEntity loadSync ( int skillId ) { return mDataRepository . getDatabase ( ) . skillDao ( ) . loadSync ( skillId ) ; }
public void setHighlightColor ( @ AttrRes int colorAttrId ) { mHighlightColor = UiUtils . resolveColor ( getContext ( ) , colorAttrId ) ; if ( mMarkdownButtons != null ) { mMarkdownButtons . setBackgroundColor ( mHighlightColor ) ; } }
public ItemBuilder type ( char type ) { this . type = type ; return this ; }
public void run ( ) { try { searchTimer . cancel ( ) ; searchTimer = null ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } processSearch ( query ) ; }
public int getScrollRange ( ) { return mView . getScrollRange ( ) ; }
public int getMaxSmResumptionTime ( ) { int clientResumptionTime = smClientMaxResumptionTime > 0 ? smClientMaxResumptionTime : Integer . MAX_VALUE ; int serverResumptionTime = smServerMaxResumptimTime > 0 ? smServerMaxResumptimTime : Integer . MAX_VALUE ; return Math . min ( clientResumptionTime , serverResumptionTime ) ; }
public void onDestroy ( ) { Log . d ( TAG , "onDestroy : called" ) ; mPlaybackManager . handleStopRequest ( null ) ; mMediaSession . release ( ) ; mMediaNotificationManager . stopNotification ( ) ; }
public String getPhones ( ) { if ( getTelephone ( ) == null ) { return null ; } else { return StreamSupport . stream ( getTelephone ( ) ) . collect ( Collectors . joining ( " ; " ) ) ; } }
private JinglePacket bootstrapPacket ( JinglePacket . Action action ) { final JinglePacket packet = new JinglePacket ( action , this . id . sessionId ) ; packet . setTo ( id . counterPart ) ; return packet ; }
public void onServiceDisconnected ( ComponentName className ) { if ( attysService != null ) { attysService . stop ( ) ; } attysService = null ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( label ) ; dest . writeTypedObject ( intent , flags ) ; dest . writeTypedObject ( applicationInfo , flags ) ; dest . writeInt ( drawable ) ; }
private void copyMaskToNet ( ) { copyArrays ( figure . figureMask . length , figure . figureMask , net , figure . getStartX ( ) , figure . figureMask [ 0 ] . length ) ; }
public boolean isGapless ( ) { return mDatabaseName != null ; }
public boolean onNavigationItemSelected ( @ NonNull MenuItem item ) { int order = item . getOrder ( ) ; if ( order >= 0 && order <= 3 ) { handleToolbar ( order ) ; switchFragment ( order ) ; return true ; } return false ; }
public void setResult ( double result ) { this . result = result ; }
public static boolean isInited ( ) { return ( instance != null && instance . mIsStorageInited ) ; }
public void startHeartRateNotifications ( ) { this . io . writeCharacteristic ( Profile . UUID_SERVICE_HEARTRATE , Profile . UUID_CHAR_HEARTRATE , Protocol . START_REALTIME_HEART_RATE , null ) ; }
private void givenNoCurrenciesYetExist ( ) { assertTrue ( em . getAllCurrenciesList ( ) . isEmpty ( ) ) ; }
public File getKeyLayout ( ) { return new File ( Config . PROFILES_DIR , name + Config . MIDLET_KEY_LAYOUT_FILE ) ; }
private double sqcmTosqkm ( double num ) { return num * 1 . E - 10 ; }
public AddressLabel . Item lookupAddress ( String pAddress ) { return mAddressLabels . lookup ( pAddress ) ; }
public RecyclerView getRecyclerView ( ) { if ( getDialog ( ) == null ) return null ; return ( ( MaterialDialog ) getDialog ( ) ) . getRecyclerView ( ) ; }
public void update ( Post post , Callbacks . IRequestCallback callback ) { save ( post , callback ) ; }
private void initFragments ( ) { if ( null == contributionsListFragment ) { contributionsListFragment = new ContributionsListFragment ( ) ; } if ( shouldShowMediaDetailsFragment ) { showMediaDetailPagerFragment ( ) ; } else { showContributionsListFragment ( ) ; } showFragment ( contributionsListFragment , CONTRIBUTION_LIST_FRAGMENT_TAG ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup parent , Bundle savedInstanceState ) { setHasOptionsMenu ( true ) ; return inflater . inflate ( R . layout . activity_profs , parent , false ) ; }
public PhotoEditorSeekBar ( Context context ) { super ( context ) ; innerPaint . setColor ( 0x99383838 ) ; outerPaint . setColor ( 0xff53aeef ) ; }
public int getCount ( ) { return slideshowItems . size ( ) ; }
public String getLabel ( ) { return label ; }
public void hideFab ( ) { FloatingActionButton floatingActionButton = ( FloatingActionButton ) getActivity ( ) . findViewById ( R . id . button_floating_action ) ; floatingActionButton . hide ( ) ; }
public LinkedList < CacheEntry > getSessions ( final URI url , final RedditAccount user ) { return dbManager . select ( url , user . username , null ) ; }
public final void replaceStream ( Format [ ] formats , SampleStream stream , long offsetUs ) throws ExoPlaybackException { Assertions . checkState ( ! streamIsFinal ) ; this . stream = stream ; readEndOfStream = false ; streamOffsetUs = offsetUs ; onStreamChanged ( formats ) ; }
public void onImageFullscreenPreviewClicked ( String mediaSource ) { mEditorImagePreviewListener . onImagePreviewRequested ( mediaSource ) ; }
public UserBuilder emails ( String [ ] emails ) { this . emails = emails ; return this ; }
public boolean isMms ( ) { return true ; }
public LastAddedPlaylist ( @ NonNull Context context ) { super ( context . getString ( R . string . last_added ) , R . drawable . ic_library_add_black_24dp ) ; }
public void showResults ( @ NonNull List < Word > words ) { recyclerView . setAdapter ( new WordsRecyclerAdapter ( words ) ) ; }
public Set < String > getClasses ( ) { return classes ; }
public final void onNext ( T t ) { }
public static Comparator < ResultBean > getLateComparator ( ) { return new LateComparator ( ) ; }
public void onCompleted ( ) { mLoginMvpView . showProgressbar ( false ) ; }
public void onLoadFinished ( Loader < ColumnChartData > loader , ColumnChartData data ) { binding . setHasData ( data != null ) ; if ( data != null ) { chart . setColumnChartData ( data ) ; } }
public static String [ ] getLanguagesArray ( ) { return new String [ ] { "All" , "JavaScript" , "Python" , "PHP" , "Java" , "Kotlin" , "Go" , "C ++ " , "C" , "HTML" , "Ruby" , "Rust" , "CSS" } ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; EntityContact contact = selected . get ( position ) ; holder . bindTo ( contact ) ; holder . wire ( ) ; }
public long getItemId ( int position ) { return mTags . get ( position ) . mId ; }
public Object then ( @ NonNull Task < TransportService > task ) throws Exception { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . SYNC_SETTINGS , settingsData , taskCompletionSource ) ; return null ; }
private int getChunk ( ) { if ( sChunk != 0 ) { return sChunk ; } final int WINDOW_SIZE_KB = 2048 ; int sCursorWindowSize = WINDOW_SIZE_KB * 1024 ; sChunk = ( int ) ( sCursorWindowSize * 15 . / 16 . ) ; return sChunk ; }
public void showVideoPreview ( int accountId , Video video ) { PlaceFactory . getVideoPreviewPlace ( accountId , video ) . tryOpenWith ( getActivity ( ) ) ; }
public void onDrawerSlide ( View v , float arg1 ) { }
public void handleDownSwipe ( ) { replaceFragment ( homeScreenFragment ) ; }
private boolean isZoomLevelVisible ( ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) ; return settings . getBoolean ( SETTINGS_ZOOM_LEVEL_KEY , false ) ; }
public void onSelection ( MaterialDialog dialog , View itemView , int position , CharSequence text ) { if ( position == 0 ) { listener . onAdd ( ) ; } }
public com . google . protobuf . AnyOrBuilder getConsensusStateOrBuilder ( ) { if ( consensusStateBuilder_ != null ) { return consensusStateBuilder_ . getMessageOrBuilder ( ) ; } else { return consensusState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : consensusState_ ; } }
public Date getLocationUpdated ( ) { return locationUpdated ; }
public void execute ( MenuListActivity mainActivity ) { Intent intent = new Intent ( mainActivity , CsvExportActivity . class ) ; mainActivity . startActivityForResult ( intent , ACTIVITY_CSV_EXPORT ) ; }
public ListElement renderFromKey ( String key , ModelType type ) { return null ; }
public void close ( ) throws IOException { dumpToFile ( ) ; isOpen = false ; }
public boolean canSendWithNoSubscription ( ) { return false ; }
public Identifier ( PreferenceData preference , @ Nullable String title ) { this ( preference , title , null , null , null , ( String [ ] ) null ) ; }
public void needAddBot ( TLRPC . User user ) { openRightsEdit ( user . id , null , null , null , true , ChatRightsEditActivity . TYPE_ADMIN , false ) ; }
public boolean broadcastTxSync ( Transaction tx ) { return false ; }
private NodeList getNodes ( ZipFile epubFile ) throws IOException { String toc = getTOC ( epubFile ) ; return parser . getNavigationPoints ( toc ) ; }
public Editor putInt ( final String key , final int value ) { newValuesMap . put ( key , value ) ; return this ; }
public void setLearningDate ( Date creationDate ) { this . learningDate = learningDate ; }
public int getPeriod ( ) { return period ; }
public void onClick ( View view ) { if ( regionData != null ) { SparkleHelper . startExploring ( context , SparkleHelper . getIdFromName ( regionData . name ) , SparkleHelper . CLICKY_REGION_MODE ) ; } }
public static String getAyaPositionFileName ( String widthParam ) { return "ayahinfo" + widthParam + " . db" ; }
public static void skipIfDefaultAccountExists ( ) { assumeTrue ( "default account exists - skipping test" , Authenticator . getDefaultAccount ( InstrumentationRegistry . getTargetContext ( ) ) == null ) ; }
public static String getFunctionString ( FunctionType t ) { return t . isLink ( ) ? t . getLinkObject ( ) : t . getLowerCaseName ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `encrypt` INTEGER" ) ; }
public final boolean isSearchResults ( ) { return url . pathType ( ) == RedditURLParser . PathType . SearchPostListingURL ; }
public void onClick ( View v ) { goToPrevPage ( ) ; }
public DownloadJsonTask ( DisplayMetrics displayMetrics , String url ) { mDisplayMetrics = displayMetrics ; mJsonUrl = url ; }
private void animateToCheckedState ( boolean newCheckedState ) { checkAnimator = ObjectAnimatorProxy . ofFloatProxy ( this , "progress" , newCheckedState ? 1 : 0 ) ; checkAnimator . setDuration ( 200 ) ; checkAnimator . start ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . action_bar_menu , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public PlaybackService ( Context context , PodcastStatusListener podcastStatusListener , MediaItem mediaItem ) { this . podcastStatusListener = podcastStatusListener ; this . mediaItem = mediaItem ; }
public boolean isLandscape ( ) { return getResources ( ) . getConfiguration ( ) . orientation == Configuration . ORIENTATION_LANDSCAPE ; }
public void onItemLongClick ( int position , View view ) { deleteRecent ( position , requireContext ( ) ) ; }
public void onComplete ( @ NonNull Task < AuthResult > task ) { if ( ! task . isSuccessful ( ) ) { showSnackbar ( "Login falhou" ) ; return ; } }
public AppSettingsBase setStringList ( String key , List < String > value ) { setStringListOne ( key , value , _prefApp ) ; return this ; }
public NodeDAO ( Context context ) { super ( Node . class , context ) ; }
public static com . coinomi . core . protos . Protos . PeerAddress parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void likePost ( ) { new ReaderPage ( ) . tapFollowingTab ( ) . openPost ( mCoachingPostTitle ) . likePost ( ) . verifyPostLiked ( ) . unlikePost ( ) . verifyPostNotLiked ( ) ; }
public void onClick ( View v ) { AppDetail app = filteredList . get ( holder . getAdapterPosition ( ) ) ; app . setHide ( activity , ! app . hide ) ; listener . onChange ( ) ; dialog . dismiss ( ) ; }
public void setInfo ( String info ) { this . mInfo . setText ( info ) ; }
public static int getAutomaticUpdateType ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; String type = sharedPreferences . getString ( SettingsActivity . PREF_SET_WALLPAPER_DAY_FULLY_AUTOMATIC_UPDATE_TYPE , "0" ) ; return Integer . parseInt ( Objects . requireNonNull ( type ) ) ; }
public void onBindHeaderItemViewHolder ( HeaderVH holder , int localPosition , List < Object > payloads ) { onBindHeaderItemViewHolder ( holder , localPosition ) ; }
public void setDataSink ( DataSink sink ) { mDataSink = sink ; }
public boolean isPlaying ( ) { return false ; }
public void tryAgain ( View view ) { finish ( ) ; }
public com . google . protobuf . Any . Builder addExtensionOptionsBuilder ( ) { return getExtensionOptionsFieldBuilder ( ) . addBuilder ( com . google . protobuf . Any . getDefaultInstance ( ) ) ; }
private long getLastSuccess ( ) { return sharedPreferences . getLong ( LAST_SUCCESS , 0 ) ; }
public String getCanonicalUsername ( ) { return username . toLowerCase ( ) . trim ( ) ; }
public void onPlayerStateChanged ( boolean playWhenReady , int playbackState ) { if ( playbackState == ExoPlayer . STATE_ENDED ) { mPlayerControl . setImageResource ( R . drawable . ic_pause ) ; onTrackListener . getTrack ( currentTrack , true ) ; } }
public void setExcerpt ( String excerpt ) { this . excerpt = StringUtils . notNullStr ( excerpt ) ; }
public void onMapReady ( GoogleMap googleMap ) { mMap = googleMap ; mMapDrawer = new MapDrawer ( mMap ) ; mMap . setOnCameraIdleListener ( mOnCameraIdleListener ) ; mMapReadyDelegate . evaluate ( ) ; updateSubTitle ( ) ; initMyLocationActivation ( ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsAbout . class ) ; startActivity ( i ) ; }
public boolean containsSlide ( Object object ) { return data . contains ( object ) ; }
public void onAdded ( @ NotNull Download download ) { if ( adapter != null ) adapter . add ( download ) ; countUpdated ( ) ; }
public String getCaptionClassName ( ) { return captionClassName ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = layoutInflater . inflate ( R . layout . paint_view_holder , parent , false ) ; PaintViewHolder holder = new PaintViewHolder ( view , this . adapterInterface ) ; return holder ; }
public boolean isAnimatingState ( ) { return ! mStateScroller . isFinished ( ) ; }
public static boolean started ( int state ) { return state == BT_STARTING || state == BT_CONNECTING || state == BT_CONNECTED || state == BT_DISCONNECTED ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `flags` TEXT" ) ; }
public void onChartFocus ( @ NonNull ChartFocusEvent event ) { if ( flightProfile != null ) { flightProfile . onFocus ( event . location ) ; } }
public void setGuidelines ( CropImageView . Guidelines guidelines ) { if ( mGuidelines != guidelines ) { mGuidelines = guidelines ; if ( initializedCropWindow ) { invalidate ( ) ; } } }
public void finished ( @ SuppressWarnings ( "UnusedParameters" ) View v ) { try { finish ( ) ; } catch ( Exception ex ) { Log . e ( TAG , ex . getLocalizedMessage ( ) ) ; } }
public String getDescription ( ) { return " ( ) * loopback of 209 : 5 : ( ( WS ) * ( location = ID ' @ ' ) ? op = multiplicative_math_operator ( WS ) * right = parentheticalExpression ) *" ; }
public void onSendError ( final String msgId , final Exception exception ) { }
public void setItemSelected ( int itemId ) { if ( mDrawerListView != null ) { int position = mNavigationAdapter . getPostitionForId ( itemId ) ; mDrawerListView . setItemChecked ( position , true ) ; } }
public void update ( List < AddressEntry > addressEntries , ArrayList < AddressEntry > addressEntriesMarked ) { this . addressEntries = addressEntries ; this . addressEntriesMarked = addressEntriesMarked ; }
public boolean isEnded ( ) { return outputStreamEnded && ! audioTrack . hasPendingData ( ) ; }
public int getViewVerticalDragRange ( View child ) { return mEdgeFlag & EDGE_BOTTOM ; }
public boolean onQueryTextChange ( String s ) { if ( ! parserMaker . isRunning ( ) ) { newsAdapter . filter ( s ) ; return true ; } else { return false ; } }
public void setStatus ( ScanStatus status ) { if ( status == null ) throw new NullPointerException ( "Status cannot be null ! " ) ; this . status = status ; }
private MoveFilesAsyncTask ( Context context , String newLocation , boolean automatic ) { this . newLocation = newLocation ; this . appContext = context . getApplicationContext ( ) ; this . automatic = automatic ; }
public char getFirstChar ( ) { final String nameOrNumber = getNameOrNumber ( ) ; return Util . isNullOrEmpty ( nameOrNumber ) ? ' ' : Character . toUpperCase ( nameOrNumber . charAt ( 0 ) ) ; }
public void replaceStoryEditedBlock ( String mediaFiles , String blockId ) { mWPAndroidGlueCode . replaceStoryEditedBlock ( mediaFiles , blockId ) ; }
public String tileDesc ( ) { return Game . getVar ( R . string . WaterOfTransmutation_Info ) ; }
public void setAmount ( String amount ) { amountView . setText ( amount ) ; }
public static void shareVerses ( Activity activity , List < QuranAyah > verses ) { String text = getShareText ( activity , verses ) ; shareViaIntent ( activity , text , R . string . share_ayah_text ) ; }
public static String formatCoinValue ( @ Nonnull final ValueType type , @ Nonnull final Coin value ) { return formatCoinValue ( type , value , "" , " - " , 8 , 0 ) ; }
public static boolean isSignedInWPComOrHasWPOrgSite ( AccountStore accountStore , SiteStore siteStore ) { return accountStore . hasAccessToken ( ) || siteStore . hasSelfHostedSite ( ) ; }
public void afterTextChanged ( Editable s ) { mFolder . label = mLabelView . getText ( ) . toString ( ) ; mFolder . id = mIdView . getText ( ) . toString ( ) ; ; mFolderNeedsToUpdate = true ; }
public boolean isAfter ( long timestamp ) { return this . timestamp > timestamp ; }
public CharSequence getPageTitle ( int position ) { return fragments [ position ] . getTitle ( context ) ; }
public void execute ( Realm realm ) { mRealm . deleteAll ( ) ; Log . i ( LOG_TAG , "deleteAllLinks execute : Deleted all links from the database" ) ; }
public void init ( ) { questions = PlaceNames . getPlaceNames ( ) ; correctAnswers . clear ( ) ; displayedQuestions . clear ( ) ; setQuestionAndAnwers ( ) ; wrongAnswerCount = 0 ; startTime = System . currentTimeMillis ( ) ; }
public void callUSSDInvoke ( String ussdPhoneNumber , HashMap < String , HashSet < String >> map , CallbackInvoke callbackInvoke ) { send = false ; callUSSDInvoke ( ussdPhoneNumber , 0 , map , callbackInvoke ) ; }
public long getContentPosition ( ) { return player . getContentPosition ( ) ; }
public void setArguments ( String userId , long workflowId , String deviceAddress ) { this . mUserId = userId ; this . mWorkflowId = workflowId ; this . mDeviceAddress = deviceAddress ; }
private Article getArticle ( long articleID ) { return articleDao . queryBuilder ( ) . where ( ArticleDao . Properties . Id . eq ( articleID ) ) . unique ( ) ; }
public SyncAdapter ( Context context , boolean autoInitialize ) { super ( context , autoInitialize ) ; init ( context ) ; }
public boolean addAll ( Collection < ? extends Filter > c ) { return filters . addAll ( c ) ; }
public void respond ( ) { printLog ( "start" , LogLevel . LOW ) ; changeStatus ( STATE_PROCEEDING ) ; transaction_to . start ( ) ; if ( connection_id == null ) retransmission_to . start ( ) ; sip_provider . sendMessage ( response , connection_id ) ; }
public void onCreate ( SQLiteDatabase database ) { database . execSQL ( TABLE_LOYALTYPROGRAMS_CREATE ) ; database . execSQL ( TABLE_CREDITCARDS_CREATE ) ; database . execSQL ( TABLE_OWNERS_CREATE ) ; }
public void setOnClickListener ( String id ) { image . setOnClickListener ( aLong -> BookDetailActivity . start ( mContext , id ) ) ; }
public void onClick ( View view ) { if ( isInQuickSelectMode ( ) ) { toggleChecked ( getAdapterPosition ( ) ) ; } else { Playlist playlist = dataSet . get ( getAdapterPosition ( ) ) ; NavigationUtil . goToPlaylist ( activity , playlist , null ) ; } }
public void hideProgressBar ( ) { SwipeRefreshLayout swipeRefreshLayout = getSwipeRefreshLayout ( ) ; if ( swipeRefreshLayout != null ) { getSwipeRefreshLayout ( ) . setRefreshing ( false ) ; } }
public Set < Integer > getSelectedItems ( ) { return mSelectedItems ; }
public void addComments ( List < HotComment > comments ) { if ( ! mAdapter . containsAll ( comments ) ) { mAdapter . clear ( ) ; mAdapter . addAll ( 0 , comments ) ; } else { showNoMoreContent ( ) ; } }
public Packet waitAndGet ( ) { try { return queue . poll ( 1 , TimeUnit . SECONDS ) ; } catch ( InterruptedException e ) { return null ; } }
public BaseListAdapter ( Context context , int resourceId ) { this ( context , resourceId , new ArrayList < T > ( ) ) ; }
public AdministrativeZoneBuilder setChildZones ( List < LowEmissionZone > childZones ) { mChildZones = childZones ; return this ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; toggleForDrawer . onConfigurationChanged ( newConfig ) ; }
public void updateCurrentLocation ( double latitude , double longitude ) { mMap . animateCamera ( CameraUpdateFactory . newLatLngZoom ( new LatLng ( latitude , longitude ) , 15 ) , 10 , null ) ; }
public void setPlayer ( MediaPlayer player ) { this . player = player ; }
public void onDeleted ( Context context , int [ ] appWidgetIds ) { super . onDeleted ( context , appWidgetIds ) ; mLastTrack = null ; }
public void showData ( ) { mDataFrameLayout . setVisibility ( View . VISIBLE ) ; mErrorMessage . setVisibility ( View . INVISIBLE ) ; mProgressBar . setVisibility ( View . INVISIBLE ) ; }
public long getBackBufferDurationUs ( ) { return 0 ; }
public void changed ( ChangeEvent event , Actor actor ) { visualSettingManager . setSettingGroup ( settingGroup ) ; }
public void testGallery ( ) { Log . d ( TAG , "testGallery" ) ; setToDefault ( ) ; View galleryButton = mActivity . findViewById ( net . sourceforge . opencamera . R . id . gallery ) ; clickView ( galleryButton ) ; }
public MessagesStorage ( ) { storageQueue . setPriority ( Thread . MAX_PRIORITY ) ; openDatabase ( ) ; }
public UploadObject setId ( int id ) { this . id = id ; return this ; }
public void findSource ( View view ) { showPlaceAutocomplete ( 1 ) ; }
private final static int getBlendDimension ( ) { return ( int ) ( Math . pow ( 2 . 0 , blend_n_levels ) + 0 . 5 ) ; }
public String getConfidence ( ) { return confidence ; }
public void onSwiped ( RecyclerView . ViewHolder viewHolder , int swipeDir ) { int id = ( int ) viewHolder . itemView . getTag ( ) ; deleteProductWithMessage ( id ) ; }
private static void setViewHeight ( View view , int currentHeight ) { ViewGroup . LayoutParams layoutParams = view . getLayoutParams ( ) ; layoutParams . height = currentHeight ; view . setLayoutParams ( layoutParams ) ; }
public Long getRoundShares ( ) { if ( roundShares != null ) return roundShares ; if ( roundSharesDiff != null ) return roundSharesDiff ; return 0l ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new FormDownloadListViewModel ( analytics ) ; }
public static int lastIndexOfIgnoreCase ( CharSequence cs , char c ) { return lastIndexOf ( cs , c , cs . length ( ) - 1 ) ; }
private void disableFirewall ( ) { Api . setEnabled ( this , false , true ) ; menuSetApplyOrSave ( MainActivity . this . mainMenu , false ) ; }
public String toString ( ) { if ( time == 0 ) return mContext . getString ( R . string . prepTimeBellDescription_atStart ) ; return mContext . getString ( R . string . prepTimeBellDescription_afterStart , DateUtils . formatElapsedTime ( time ) ) ; }
public void callUSSDOverlayInvoke ( String ussdPhoneNumber , HashMap < String , HashSet < String >> map , CallbackInvoke callbackInvoke ) { send = false ; callUSSDOverlayInvoke ( ussdPhoneNumber , 0 , map , callbackInvoke ) ; }
public boolean openPhoto ( final MessageObject messageObject , long dialogId , long mergeDialogId , final PhotoViewerProvider provider ) { return openPhoto ( messageObject , null , null , null , 0 , provider , null , dialogId , mergeDialogId ) ; }
public void handleFabPressed ( ) { mPresenter . handleFabPressed ( ) ; verify ( mView ) . showEditUnit ( null , "" ) ; }
public void onCapacitiesChanged ( int minCapacity , int maxCapacity ) { if ( ! restoring ) { filterModel . setCapacityMin ( minCapacity ) ; filterModel . setCapacityMax ( maxCapacity ) ; updateSearchSettingsButtonState ( ) ; filterCryptCards ( ) ; } }
public void onOpenReblog ( int position ) { super . openReblog ( statuses . get ( position ) . getAsRight ( ) ) ; }
private boolean savePostOnline ( boolean isFirstTimePublish ) { return mViewModel . savePostOnline ( isFirstTimePublish , this , mEditPostRepository , mSite ) ; }
public String strip ( String txt ) { for ( Pattern p : mRegexps ) { txt = p . matcher ( txt ) . replaceAll ( "" ) ; } return txt ; }
public void onCustomTabsServiceConnected ( ComponentName name , CustomTabsClient client ) { ServiceConnectionCallback connectionCallback = mConnectionCallback . get ( ) ; if ( connectionCallback != null ) connectionCallback . onServiceConnected ( client ) ; }
public void setKgNr ( Long kgNr ) { this . kgNr = kgNr ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { mSeekBarValue . setText ( String . valueOf ( progress ) ) ; }
public static boolean isInitialized ( ) { return sInstance == null ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { if ( cardFiltersChangeListener != null ) { cardFiltersChangeListener . onCapacitiesChanged ( cryptCapacitySeekBars . getMinSeekBarValue ( ) , cryptCapacitySeekBars . getMaxSeekBarValue ( ) ) ; } trackingTouchStarted = false ; }
public ScheduleLessonsShareFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public void delete ( TodoListItem deletedItem ) { deleteCount ++ ; }
public void onFailure ( Call < Results < SystemSetting >> call , Throwable t ) { downloadConcepts ( 0 ) ; }
public ReferenceTable ( Context context ) { super ( context ) ; this . setLayoutParams ( new ViewGroup . LayoutParams ( ViewGroup . LayoutParams . WRAP_CONTENT , ViewGroup . LayoutParams . WRAP_CONTENT ) ) ; }
public boolean wantsToPlay ( ) { return mediaUri != null && ToroUtil . visibleAreaOffset ( this , itemView . getParent ( ) ) >= mStartAutoplayVisibleAreaOffset ; }
private void showUri ( Uri uri ) { if ( uri != null ) { Log . d ( "Main" , "trying to load " + uri ) ; webView . loadUrl ( uri . toString ( ) ) ; } }
private void cancelScenarioNotification ( ) { NotificationManagerCompat . from ( this ) . cancel ( IdUtil . ID_NOTIFICATION ) ; }
public CircleOptions strokePattern ( List < PatternItem > strokePattern ) { real . strokePattern ( strokePattern ) ; return this ; }
public final static boolean str ( String s ) { return s != null && s . length ( ) > 0 ; }
public void handleMessage ( Message msg ) { if ( msg . what == 0 && callbackActivity != null ) { callbackActivity . setStatusText ( "" ) ; } }
public Date getCreatedAt ( ) { return review . getSubmittedAt ( ) ; }
private static void updateBackgrounds ( List < GameBackgroundInterface > backgrounds , float seconds ) { for ( GameBackgroundInterface bg : backgrounds ) { bg . update ( ) ; } }
public static DialogFragment newInstance ( ArrayList < Throwable > exceptions ) { final Bundle args = new Bundle ( ) ; args . putSerializable ( KEY_THROWABLES , exceptions ) ; final DialogFragment fragment = new ExceptionDialogFragment ( ) ; fragment . setArguments ( args ) ; return fragment ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `list_post` TEXT" ) ; }
public void backButtonClicked ( ) { presenter . backButtonClicked ( ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { for ( DataSnapshot data : dataSnapshot . getChildren ( ) ) responses . add ( data . child ( "text" ) . getValue ( ) . toString ( ) ) ; }
public QoSTestResultEnum getTestType ( ) { return QoSTestResultEnum . HTTP_PROXY ; }
private void showAmuletScene ( boolean showText ) { Dungeon . save ( false ) ; AmuletScene . noText = ! showText ; Game . switchScene ( AmuletScene . class ) ; }
public IngredientViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . overview_extended_ingredient_item , parent , false ) ; return new IngredientViewHolder ( view ) ; }
public int getLastReceivedMessage ( ) { return state . getLastReceivedMessage ( ) ; }
public void testSafeToAddAuthToken3 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( wpcomAddress3 ) ) ; }
public void setSearchUrl ( String url ) { putString ( Name . SEARCH_URL , url ) ; }
private void share ( ) { MediaItem mediaItem = getCurrentMediaItem ( ) ; if ( mediaItem != null ) { dcContext . openForViewOrShare ( this , mediaItem . msgId , Intent . ACTION_SEND ) ; } }
private void tryTransfer ( ) { AnswersProxy . get ( ) . logButton ( "Done Transfer" ) ; if ( doTransfer ( ) ) { AnswersProxy . get ( ) . logEvent ( "Done Transfer" ) ; setResult ( RESULT_OK ) ; finish ( ) ; } }
private void selectItem ( int position ) { selectItem ( position , true ) ; }
public String getBat ( ) { return bat ; }
public void update ( long millis ) { mOwner . addEnergy ( Constants . OWNED_STATE_ENERGY_GAIN ) ; getNode ( ) . addHealth ( Constants . OWNED_STATE_HEALTH_GAIN ) ; }
public void testBadMinVersion ( ) { mJsonData . get ( APIStatusDeserializer . ANDROID_SETTINGS_TAG ) . getAsJsonObject ( ) . add ( APIStatusDeserializer . MIN_APP_VERSION_TAG , new JsonArray ( ) ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public void onInvalidated ( ) { super . onInvalidated ( ) ; valid = false ; notifyDataSetChanged ( ) ; }
public double getProteinAmount ( double weight ) { return ( weight*KG_TO_POUND ) *PROTEIN_PER_POUND ; }
public void onShowWriteTag ( View view ) { Intent intent = new Intent ( this , WriteTagActivity . class ) ; startActivity ( intent ) ; }
public void onDestroy ( ) { super . onDestroyView ( ) ; if ( mParentAccountCursor != null ) mParentAccountCursor . close ( ) ; if ( mDefaultTransferAccountCursorAdapter != null ) { mDefaultTransferAccountCursorAdapter . getCursor ( ) . close ( ) ; } }
public void onDestroy ( ) { if ( mosaicBitmap != null && ! mosaicBitmap . isRecycled ( ) ) { mosaicBitmap . recycle ( ) ; } mosaicView = null ; }
public DeviceCharacteristic ( String uuid , String key , String ui_name ) { this ( uuid , key , ui_name , true ) ; }
public void onAdFailedToLoad ( int i ) { Log . d ( "MA Banner Ad Test" , "Add Loading Failed" ) ; }
public void setButtonReplayVisibility ( boolean animate , int visibility ) { buttonReplay . setVisibility ( animate , visibility , defaultAnimDurationMilli ) ; buttonReplay . setEnabled ( visibility == View . VISIBLE ) ; }
public com . coinomi . core . protos . Protos . PeerAddress . Builder addBroadcastByBuilder ( ) { return getBroadcastByFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . PeerAddress . getDefaultInstance ( ) ) ; }
public void stop ( ) { if ( mCameraSource != null ) { mCameraSource . stop ( ) ; } }
public List < Banknote > getList ( ) { return banknoteList ; }
public void refreshCode ( ) { if ( ! _hidden ) { updateCode ( ) ; } }
public void collection ( View view ) { ( ( ImageView ) view ) . setImageResource ( R . mipmap . collection_checked ) ; mGoodView . setTextInfo ( "收藏成功" , Color . parseColor ( "#f66467" ) , 14 ) ; mGoodView . show ( view ) ; }
public VersionedRook storeBook ( File file , String path ) throws IOException { return client . upload ( file , repoUri , path ) ; }
public void setContext ( Context context ) { this . context = context ; }
public AboutBuilder setAppTitle ( @ Nullable String text ) { this . appTitle = text ; return this ; }
public void onBackDialogPositiveClick ( String filename ) { NoteEditFragment fragment = ( NoteEditFragment ) getFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onBackDialogPositiveClick ( null ) ; }
public boolean isInBoundsRight ( float x ) { x = ( float ) ( ( int ) ( x * 100 . f ) ) / 100 . f ; return mContentRect . right >= x - 1 ? true : false ; }
public int hashCode ( ) { return Objects . hash ( day , lesson ) ; }
public void onClick ( View view ) { StringUtil . copyToClipboard ( ColorUtil . colorToHex ( domColor ) , mainContext ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_shop_carts , parent , false ) ; return new ViewHolder ( view ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . default_save_actions , menu ) ; }
public PresetStore ( ) { this . available = null ; }
private void initAd ( boolean isAdActive , ViewGroup parentLayout ) { if ( isAdActive ) { if ( context . getResources ( ) . getConfiguration ( ) . orientation == android . content . res . Configuration . ORIENTATION_PORTRAIT ) { initBottomBanner ( parentLayout ) ; } } }
private static boolean isCharRepeatedTwoTimes ( CharSequence text , char c , int index , int end ) { return index + 1 <= end && text . charAt ( index ) == c && text . charAt ( index ) == c ; }
public void onLeftButtonPressed ( ) { _selectedSpinner = _handspinners [ -- _selectedNum ] ; setButtonVisible ( ) ; }
public static void cancelPersistentNotification ( Context context ) { NotificationManagerCompat notificationManager = NotificationManagerCompat . from ( context ) ; notificationManager . cancel ( NOTIFICANTION_ID ) ; }
public void throws_exception_if_start_date_after_end_date ( ) { LocalDate d1 = LocalDate . of ( 2016 , 1 , 10 ) ; LocalDate d2 = LocalDate . of ( 2016 , 1 , 5 ) ; this . a . generate_multi ( d1 , d2 , DEFAULT_SEED ) ; }
public boolean isScrollable ( ) { return mScrollable ; }
public void onBackupSuccess ( ) { AnswersProxy . get ( ) . logEvent ( "Backup success" ) ; Timber . d ( "Backup success . " ) ; if ( isFinishing ( ) ) return ; stopProgress ( ) ; fetchBackups ( ) ; }
public IOException getSourceException ( ) { Assertions . checkState ( type == TYPE_SOURCE ) ; return ( IOException ) getCause ( ) ; }
public void onChanged ( ) { if ( mPopup == null ) return ; if ( mLastSelected != null ) return ; if ( mSelectedItem == null ) return ; mPopup . getListView ( ) . setSelection ( mAdapter . getPosition ( mSelectedItem ) ) ; }
public Patient findPatientByID ( String id ) { try { PatientEntity patientEntity = patientRoomDAO . findPatientByID ( id ) . blockingGet ( ) ; return AppDatabaseHelper . patientEntityToPatient ( patientEntity ) ; } catch ( Exception e ) { return null ; } }
public void collectionChanged ( BookCollectionInfo bookCollectionInfo ) { this . bookCollectionInfo = bookCollectionInfo ; bindCollections ( bookCollectionInfo ) ; }
public List < String > getNames ( ) { List < String > names = new ArrayList <> ( ) ; for ( Result r : results ) { names . add ( r . getName ( ) ) ; } return names ; }
public VolumeKeyEvent ( long time , String characters , int deviceId , int flags ) { super ( time , characters , deviceId , flags ) ; this . mVolumeKeyEventType = VOLUME_KEY_EVENT_NATIVE ; this . mPrevCurrentValue = null ; }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { invalidateOptionsMenu ( ) ; super . onConfigurationChanged ( newConfig ) ; }
public BlockTextureHandler setSide ( int blockFace , String id ) { textureRegions [ blockFace ] = Assets . getPackedTextureFromID ( id , "block" ) ; return this ; }
public ContactsDisplayListAdapter ( Context context , ArrayList < ContactSort > contacts ) { super ( context , 0 , contacts ) ; }
private void refresh ( ) { bindViews ( ) ; }
public void onFailure ( @ NonNull Exception e ) { showLog ( "handleCommentsPermission ERROR - " + e . getMessage ( ) ) ; callback . onError ( ) ; }
public void onBackPressed ( ) { deleteMagicCreatedAccountAndReturnIfNecessary ( ) ; super . onBackPressed ( ) ; }
public boolean onQueryTextSubmit ( String query ) { Toast . makeText ( this , "onQueryTextSubmit : " + query , Toast . LENGTH_SHORT ) . show ( ) ; return true ; }
public final T getMediaCrypto ( ) { return mediaCrypto ; }
public void setImageResource ( int resId ) { super . setImageResource ( resId ) ; recycleBitmaps ( ) ; }
public void refresh ( ) { mFetchPostInfoLinearLayout . setVisibility ( View . GONE ) ; hasPost = false ; if ( isInLazyMode ) { stopLazyMode ( ) ; } saveCache ( ) ; mAdapter . refresh ( ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean b ) { MachineStatusListner . getInstance ( ) . setVerboseOutput ( b ) ; sharedPref . edit ( ) . putBoolean ( getString ( R . string . console_verbose_mode ) , b ) . apply ( ) ; }
public int colorPrimaryDark ( ) { int loadedColor = Prefs . getInstance ( mContext ) . getAppThemeColor ( ) ; return colorPrimaryDark ( loadedColor ) ; }
public ListadoJuegosArrayAdapter ( Activity context , Juego [ ] juegos , boolean esJuegoOnline ) { super ( context , R . layout . listado_juego , juegos ) ; this . context = context ; this . juegos = juegos ; }
public void setInterpolator ( Interpolator interpolator ) { this . mInterpolator = interpolator ; }
public int getCount ( ) { return listeSeances . size ( ) ; }
public boolean onStopJob ( final JobParameters params ) { db . drop ( ) ; return false ; }
public static void setFinishLength ( int value ) { set ( FINISH_LENGTH , value ) ; }
public void onLoginUpdated ( @ Observes LoginUpdatedEvent event ) { LoginManager . save ( PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) , event . getLogin ( ) ) ; }
public void run ( ) { try { if ( ! ( ( Activity ) context ) . isFinishing ( ) ) { progressDialog . dismiss ( ) ; } } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onBindViewHolder ( TalksViewHolder holder , int position ) { Picasso . with ( TalksActivity . this ) . load ( resourceId [ position ] ) . fit ( ) . centerCrop ( ) . into ( holder . img ) ; }
public String getLocation ( ) { return location ; }
public static RimeCandidate [ ] getCandidates ( ) { if ( ! isComposing ( ) ) return mSchema . getCandidates ( ) ; return mContext . getCandidates ( ) ; }
public static boolean isDownloadsDocument ( Uri uri ) { return "com . android . providers . downloads . documents" . equals ( uri . getAuthority ( ) ) ; }
public void onSelected ( TransportOption option ) { transportOptions . setSelectedTransport ( option . getType ( ) ) ; getTransportOptionsPopup ( ) . dismiss ( ) ; }
private AutomationItemListener mItemListener = new AutomationItemListener ( ) { @ Override public void onAutomationClick ( Automation clickedAutomation ) { } @ Override public void onAutomationDeleteClick ( Automation clickedAutomation ) { mActionsListener . deleteAutomation ( clickedAutomation ) ; } } ;
public String getPath ( ) { return mStorage . getRootFolderPath ( ) ; }
public void onNextPressed ( ) { startService ( AudioService . getAudioIntent ( this , AudioService . ACTION_SKIP ) ) ; }
public void onBackPressed ( ) { mGame . showLevelListScreen ( mGame . getLevelWorldIndex ( ) ) ; }
public Socket createSocket ( String host , int port , InetAddress localHost , int localPort ) throws IOException { return patch ( delegate . createSocket ( host , port , localHost , localPort ) ) ; }
public void create ( ) { setScreen ( new GalleryScreen ( ) ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getPhotoDbDao ( ) : null ; }
public void showProgressDialog ( String msg , boolean show ) { if ( progressDialog != null ) { if ( show ) { progressDialog . setMessage ( msg ) ; progressDialog . show ( ) ; } else { progressDialog . hide ( ) ; } } }
static public void toastGenericError ( Context context ) { Toast . makeText ( context , R . string . error_generic , Toast . LENGTH_SHORT ) . show ( ) ; }
public void setAliases ( HashMap < String , String > aliases ) { Aliases = aliases ; }
public QoSTestResultEnum getTestType ( ) { return QoSTestResultEnum . NON_TRANSPARENT_PROXY ; }
public static String getLogMessage ( ) { if ( ! logMessage . toString ( ) . isEmpty ( ) ) return logMessage . toString ( ) ; else return PreferenceUtil . getSharedPreferenceString ( R . string . id_prev_conn_log ) ; }
public static Observable < CnBetaApi . Result < NewsContent >> articleContent ( int sid ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . articleContent ( timestamp , CnBetaSignUtil . articleContentSign ( timestamp , sid ) , sid ) ; }
public int getAwardPoints ( ) { return awardPoints ; }
public void onClick ( DialogInterface dialog , int which ) { internetCacheLoad ( view , null ) ; }
public void onCreate ( Database db ) { Log . i ( "greenDAO" , "Creating tables for schema version " + DaoMaster . SCHEMA_VERSION ) ; DaoMaster . createAllTables ( db , false ) ; }
public void startPhotoSelectActivity ( ) { try { Intent photoPickerIntent = new Intent ( Intent . ACTION_GET_CONTENT ) ; parentFragment . startActivityForResult ( photoPickerIntent , 14 ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public boolean isFileOrImage ( ) { return type == TYPE_FILE || type == TYPE_IMAGE ; }
public void evaluateJavascript ( @ Nullable String javascript ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . KITKAT ) { mWebView . evaluateJavascript ( javascript , null ) ; } else { mWebView . loadUrl ( javascript ) ; } }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( videoView != null ) { stopPosition = videoView . getCurrentPosition ( ) ; videoView . pause ( ) ; outState . putInt ( "position" , stopPosition ) ; } }
public void onReceive ( Context context , Intent intent ) { Log . w ( TAG , "onReceive ( ) for clear key event" ) ; onMasterSecretCleared ( ) ; }
public void onNavDrawerItemClicked ( NavDrawerItem item ) { final int id = item . getId ( ) ; if ( id != mCurrentSelectedNavigationItemId ) { handler . postDelayed ( ( ) -> switchToModeForId ( id ) , DRAWER_CLOSE_ANIMATION_DURATION ) ; } }
public static TilesCache forOSM ( ) { return null ; }
public Observable < Void > bookmarksObservable ( ) { return bookmarksPublishSubject . asObservable ( ) ; }
public void identificationCompleted ( Track track ) { if ( mView != null ) mView . hideProgress ( ) ; mIdentifier = null ; }
public int getCount ( ) { return 6 ; }
private boolean isAllTrackersBeenFound ( ) { return foundBluetoothDeviceList . size ( ) == storywellMembers . size ( ) ; }
public static String generateNoteTitle ( @ NonNull String content ) { return getLineWithoutMarkDown ( content , 0 ) ; }
public SpiderLevel ( ) { color1 = 0x48763c ; color2 = 0x59994a ; }
public void setPostFontStyle ( FontStyle style ) { edit ( ) . putString ( FONT_STYLE , style . name ( ) ) . commit ( ) ; }
public static Intent getCitiesIntent ( @ NonNull Context context ) { return getIntent ( context , CitiesActivity . class ) ; }
public boolean canDeleteMessage ( TLRPC . Chat chat ) { return canDeleteMessage ( messageOwner , chat ) ; }
public void setRotateLeft ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotation ( 20 * fraction ) ; setPivotX ( 0 ) ; setPivotY ( getHeight ( ) / 2 ) ; }
public void onMessageSent ( final String msgId ) { }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { StatsActivity . this . plotChart ( ) ; }
public SortedMap < String , CategoryNode > getChildren ( ) { return children ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_geochats_statedMessage . TLdeserialize ( stream , constructor , exception ) ; }
public void onDestroyActionMode ( ActionMode mode ) { if ( mode == actionMode ) { selectionListener . clearSelection ( ) ; actionMode = null ; } }
private boolean isDirectlySendKeyWhenOnlyInputNumbers ( int primaryCode ) { if ( mComposing . length ( ) == 0 ) { if ( primaryCode >= 49 && primaryCode <= 57 ) { return true ; } } return false ; }
public void updateAvatar ( byte [ ] groupId , Bitmap avatar ) { updateAvatar ( groupId , BitmapUtil . toByteArray ( avatar ) ) ; }
private void showCopyToClipboardDialog ( String url ) { if ( url == null ) return ; Intent i = new Intent ( this , SendTextToClipboard . class ) ; i . putExtra ( Intent . EXTRA_TEXT , url ) ; startActivityForResult ( i , REQUEST_CODE_COPY_TO_CLIPBOARD ) ; }
public String toString ( ) { return " { recipientId : " + recipientId + " , identityKey : " + identitykey + " , verifiedStatus : " + verifiedStatus + " , firstUse : " + firstUse + " } " ; }
public Void fire ( ) { if ( version . isV3Api ( ) ) { restClient . undoSnapshotV3 ( new Action ( ) , vmId ) ; } else { restClient . undoSnapshotV4 ( new Action ( ) , vmId ) ; } return null ; }
private void stopPolling ( ) { if ( timer != null ) { timer . cancel ( ) ; timer . purge ( ) ; timer = null ; pollTask . cancel ( ) ; pollTask = null ; } }
public ArrayList getArrayList ( String key ) { Object obj = get ( key ) ; return ( ArrayList < String > ) obj ; }
public void onSuccess ( ) { updateOnlineActivities ( ) ; new Dialog ( getContext ( ) ) . alertSuccess ( successResourceId ) ; }
public void clear ( ) { synchronized ( mLock ) { mGraphics . clear ( ) ; } postInvalidate ( ) ; }
public void testIsWPCOMURL4 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( wpcomAddress4 ) ) ) ; }
private CustomTabsSession getSession ( ) { if ( client == null ) { customTabsSession = null ; } else if ( customTabsSession == null ) { customTabsSession = client . get ( ) . newSession ( this . callback ) ; } return customTabsSession ; }
public boolean unregisterUpdateCheckedListener ( UpdateCheckedListener updateCheckedListener ) { synchronized ( mUpdateCheckedListeners ) { return mUpdateCheckedListeners . remove ( updateCheckedListener ) ; } }
public void onClick ( DialogInterface dialog , int which ) { dismissAllowingStateLoss ( ) ; onCancel ( ) ; }
public ReaderRecyclerView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; initialize ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { ConfirmDeleteTaskDialogListener activity = ( ConfirmDeleteTaskDialogListener ) getActivity ( ) ; activity . onFinishConfirmDeleteTaskDialog ( m_task ) ; }
private RecyclerView . LayoutManager createLayoutManager ( final int numColumns ) { return new CatchStaggeredGridLayoutManager ( numColumns , CatchStaggeredGridLayoutManager . VERTICAL ) ; }
private float convertPixelToScaleX ( float marginInPx ) { return 1 - marginInPx * 2 / ScreenSize [ 0 ] ; }
public void onResume ( ) { super . onResume ( ) ; updateActiveLexicalModel ( ) ; }
public MessagePatch setForward ( List < MessageEntity > forward ) { this . forward = forward ; return this ; }
public FingerprintDialog circleScanningColor ( int circleScanningColor ) { this . fingerprintView . circleScanningColor ( circleScanningColor ) ; return this ; }
public static ShortBuffer createShortBuffer ( int shorts ) { return createNativeByteBuffer ( shorts*2 ) . asShortBuffer ( ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mDataSource . removeListener ( this ) ; mWaypointActionListener = null ; mTrackActionListener = null ; mFragmentHolder . disableListActionButton ( ) ; mFragmentHolder = null ; mDataHolder = null ; }
public boolean onGenericMotionEvent ( MotionEvent motionEvent ) { controls . onMotionEvent ( motionEvent ) ; return super . onGenericMotionEvent ( motionEvent ) ; }
public void onReceive ( Context context , Intent intent ) { Intent i = new Intent ( context , DownloadProgressActivity . class ) ; i . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_CLEAR_TASK ) ; context . startActivity ( i ) ; }
public void setWidgetValue ( int widgetValue ) { this . _widgetValue = widgetValue ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; activity = ( BaseActivity ) context ; }
public void addFilter ( MyFilter filter ) { mSelectFilterRvAdapter . addElement ( filter ) ; }
public void shouldTrackOnActionEvent ( ) throws Exception { givenAnalyticsEvent ( ) ; whenTrackingOnActionEvent ( ) ; thenAnalyticsManagerShouldNotifyOnAction ( ) ; }
public void onDismiss ( DialogInterface dialog ) { super . onDismiss ( dialog ) ; timerUpdater . cancel ( ) ; }
public static String getDefaultUserAgent ( ) { if ( mDefaultUserAgent == null ) { try { mDefaultUserAgent = WebSettings . getDefaultUserAgent ( getContext ( ) ) ; } catch ( AndroidRuntimeException | NullPointerException e ) { mDefaultUserAgent = "" ; } } return mDefaultUserAgent ; }
public void initialize ( ) { mRequests = new ArrayList <> ( ) ; mFeeds = new ArrayList <> ( ) ; }
public boolean onItemLongClick ( AdapterView < ? > parent , View view , int position , long id ) { final TermuxSession selectedSession = getItem ( position ) ; mActivity . getTermuxSessionClient ( ) . renameSession ( selectedSession . getTerminalSession ( ) ) ; return true ; }
private void requestAutoBackup ( Context context ) { Intent serviceIntent = new Intent ( FinancistoService . ACTION_AUTO_BACKUP , null , context , FinancistoService . class ) ; WakefulIntentService . sendWakefulWork ( context , serviceIntent ) ; }
public NewMovieReleasesView createView ( ) { return null ; }
public void onClick ( View v ) { int position = getAdapterPosition ( ) ; if ( isPositionInRange ( position ) ) { callbacks . onFileMenuClicked ( dataSet . get ( position ) ) ; } }
public ContextFactory ( ShaderRenderer renderer ) { this . renderer = renderer ; }
public Place createFromDto ( PlaceDto dto ) { return new Place ( dto , formatHelper ) ; }
public final BitMatrix encode ( String contents , BarcodeFormat format , int width , int height ) throws WriterException { return encode ( contents , format , width , height , null ) ; }
public void onRunnerClick ( Context context ) { RunnerActivity . start ( context , mRun . getFirstRunner ( ) . getId ( ) ) ; }
public JsonObject getAlliances ( ) { return alliances ; }
public boolean isUndoOn ( ) { return undoOn ; }
public void showNoVitalsNotification ( ) { mLastVitalsLabel . setVisibility ( View . GONE ) ; mContent . setVisibility ( View . GONE ) ; mEmptyList . setVisibility ( View . VISIBLE ) ; mEmptyList . setText ( getString ( R . string . last_vitals_none_label ) ) ; }
public void setPackageName ( String packageName ) { xml . setString ( "package" , packageName ) ; save ( ) ; }
private void lockSwipeRightToGoBack ( ) { if ( mSlidrInterface != null ) { mSlidrInterface . lock ( ) ; } }
public FilterView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; }
public void notifyItemRangeChanged ( int positionStart , int itemCount ) { try { super . notifyItemRangeChanged ( positionStart , itemCount ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public int setSerialBaudRate ( int brate ) { baudRate = brate ; Settings . serialBaudRate = baudRate ; if ( serialPort != null ) { serialPort . setBaudRate ( baudRate ) ; return baudRate ; } return STATUS_OK ; }
public TokenSearchTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public String getFoodUuid ( ) { return this . foodUuid ; }
private void setComment ( final long commentRemoteId , final int siteLocalId ) { final SiteModel site = mSiteStore . getSiteByLocalId ( siteLocalId ) ; setComment ( mCommentStore . getCommentBySiteAndRemoteId ( site , commentRemoteId ) , site ) ; }
public void gotoDashboard ( long workflowId ) { mListener . activateAcknowledged ( workflowId ) ; }
public void shareRandomWordTest ( ) { openMenuItem ( R . string . action_random_word ) ; openMenuItem ( R . string . share ) ; verifyShareIntentContains ( "Definitions of" ) ; }
public boolean canConnect ( ) { return isNetworkConnectionAvailable ( this ) && ! isOfflineMode ( this ) ; }
private void loadBackdrop ( ) { final ImageView imageView = ( ImageView ) findViewById ( R . id . backdrop ) ; Glide . with ( this ) . load ( R . drawable . cheese_1 ) . centerCrop ( ) . into ( imageView ) ; }
private void oneModifierFinished ( ) { modifierFinished ++ ; if ( modifierFinished == countModifier ) { active = false ; gameService . notifyAllObserver ( ) ; } }
public static AppDatabase getAppDatabase ( Context context ) { if ( INSTANCE == null ) INSTANCE = Room . databaseBuilder ( context . getApplicationContext ( ) , AppDatabase . class , "database" ) . build ( ) ; return INSTANCE ; }
private boolean setAspectRatio ( final float aspectRatio ) { final int newAspectRatio = ( int ) FloatMath . floor ( aspectRatio * 128 ) ; if ( this . aspectRatio != newAspectRatio ) { this . aspectRatio = newAspectRatio ; return true ; } return false ; }
public LayoutParams ( android . view . ViewGroup . LayoutParams source ) { super ( source ) ; }
public ResponsePile getItem ( int position ) { return this . treasures . get ( position ) ; }
public int compare ( PackageInfo p1 , PackageInfo p2 ) { return Long . toString ( p1 . firstInstallTime ) . compareTo ( Long . toString ( p2 . firstInstallTime ) ) ; }
public String getErrorMessage ( ) { String message = "" ; if ( this . exception != null ) { this . exception . getMessage ( ) ; } return message ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "university" ) ) { return ; } tabSelected = - 1 ; }
public static MessageListFragment newInstance ( String mode ) { MessageListFragment f = new MessageListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( "mode" , mode ) ; f . setArguments ( args ) ; return f ; }
private static LottieResult < LottieComposition > fromZipStreamSync ( ZipInputStream inputStream , @ Nullable String cacheKey ) { try { return fromZipStreamSyncInternal ( inputStream , cacheKey ) ; } finally { closeQuietly ( inputStream ) ; } }
public boolean onBackPressed ( ) { if ( view . isDrawerOpen ( ) ) { view . closeDrawer ( ) ; return true ; } return false ; }
public void onConfigurationChanged ( Configuration newConfig ) { if ( activity != null ) { Log . d ( TAG , "onConfigurationChanged : " + ScreenSize [ 0 ] + " , " + ScreenSize [ 1 ] ) ; } }
public void showGoingButton ( boolean show ) { if ( buttonGoing == null ) return ; buttonGoing . setVisibility ( show ? View . VISIBLE : view . GONE ) ; }
public void listeCoursAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < ListeDeCours > ( ) { public ListeDeCours Func ( ) throws java . lang . Exception { return listeCours ( codeAccesUniversel , motPasse ) ; } } ) ; }
public void onVerificationRequested ( VerificationRequestedEvent event ) { Log . d ( "TEST" , "got idling event : " + event ) ; mHandler . postDelayed ( mTransitionToIdle , mTimeoutMs ) ; mEventReceived = true ; mBus . unregister ( this ) ; }
public boolean isShowingImage ( TLRPC . FileLocation object ) { return ! disableShowCheck && object != null && currentFileLocation != null && object . local_id == currentFileLocation . local_id && object . volume_id == currentFileLocation . volume_id && object . dc_id == currentFileLocation . dc_id ; }
private static < T > void putObject ( Context context , String key , T object ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( key , new Gson ( ) . toJson ( object ) ) . commit ( ) ; }
public boolean hasStableIds ( ) { Log . v ( DbgU . getAppTag ( ) , DbgU . getMethodName ( ) ) ; return true ; }
public Double getNdtDownloadKbit ( ) { return ndtDownloadKbit ; }
public void clickSetup ( View v ) { runAuthenticated ( new Runnable ( ) { @ Override public void run ( ) { setupLockScreen ( ) ; } } ) ; }
public int getHistoricalRecordId ( ) { return historicalRecordId ; }
public void onDie ( ) { }
public void onClick ( View v ) { mKdSeekBar . setProgress ( mKdSeekBar . getProgress ( ) + 10 ) ; }
public InputStream fetchForm ( String formURL ) throws FormSourceException { isCancelled = true ; return new ByteArrayInputStream ( xform . getBytes ( ) ) ; }
public long getItemId ( int position ) { return ProfileList . get ( position ) . hashCode ( ) ; }
public String humanReadableName ( Context context , boolean shorter ) { return username ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; id . serializeToStream ( stream ) ; stream . writeString ( caption ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case TAB_SHOW : return getString ( R . string . qrshow_title_short ) ; default : return getString ( R . string . qrscan_title_short ) ; } }
public void shouldNotCrashWhenViewWithTwoBackgroundsIsDisplayed ( ) { startActivity ( ) ; onView ( withText ( R . string . visible_promise ) ) . check ( matches ( isDisplayed ( ) ) ) ; }
public SqlBuilder on ( final String onTable ) { sql . append ( " ON " ) . append ( onTable ) ; return this ; }
public String getCommandHelpLogString ( ) { return getSingleLineLogStringEntry ( "Command Help" , commandHelp , " - " ) ; }
public void add ( Server service ) { super . add ( service ) ; cities . add ( service ) ; notifyDataSetChanged ( ) ; }
public FavoriteListSubscriber provideFavoriteListSubscriber ( MyTbaModelRenderer renderer ) { return Mockito . mock ( FavoriteListSubscriber . class ) ; }
public ButtonSetSelectorDialog ( Context context , Handler reportto , HashMap < String , Integer > datai , String selectedset , IStellarService the_service ) { super ( context ) ; dispater = reportto ; selected_set = selectedset ; data = datai ; service = the_service ; }
public MatchRenderer provideMatchRenderer ( APICache cache ) { return Mockito . mock ( MatchRenderer . class ) ; }
public static boolean isSearchInText ( ) { return getBoolean ( R . string . pref_key_search_text , DEF_SEARCH_IN_RECORD_TEXT ) ; }
public final void changeOptions ( OptionsMap options , AbstractClient . OnSuccess listener ) throws JSONException { client . send ( AriaRequests . changeDownloadOptions ( gid , options ) , listener ) ; }
public MessageViewHolder ( View itemView ) { super ( itemView ) ; }
public int remove ( @ NonNull Tag tag ) { int index = tags . indexOf ( tag ) ; tags . remove ( tag ) ; return index ; }
public void run ( ) { readAloudAnswerImageButton . setColorFilter ( getResources ( ) . getColor ( R . color . colorItemTint ) , PorterDuff . Mode . SRC_IN ) ; readAloudAnswserLabel . setTextColor ( getResources ( ) . getColor ( R . color . colorItemTint ) ) ; }
public void testSafeToAddAuthToken4 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( wpcomAddress4 ) ) ; }
public double getLargestValue ( ) { return 0 ; }
public void testBadLatestVersion ( ) { mJsonData . get ( APIStatusDeserializer . ANDROID_SETTINGS_TAG ) . getAsJsonObject ( ) . add ( APIStatusDeserializer . LATEST_APP_VERSION_TAG , new JsonArray ( ) ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public JSONObject getUser ( ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s" , mUserId ) , requestMap ) ; }
public void setup ( ) { permissionsHelper = new PermissionsHelper ( subject , utils ) ; }
public void testWriteNotesClosing ( ) throws Exception { ByteQueue q = new ByteQueue ( 10 ) ; q . close ( ) ; assertEquals ( false , q . write ( new byte [ ] { 1 , 2 , 3 } , 0 , 3 ) ) ; }
public ListMultiWidget createWidget ( ) { return new ListMultiWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) , true ) ; }
public void testGetPublicationDatePresentation_Null ( ) { Date date = new Date ( ) ; String presentation = testable . getPublicationDatePresentation ( context , null ) ; Assertions . assertThat ( presentation ) . isNotNull ( ) . isEmpty ( ) ; }
public boolean useNewBackground ( ) { return mPrefs . getBoolean ( Constants . PREF_USE_NEW_BACKGROUND , true ) ; }
public QoSTestResult initQoSTestResult ( QoSTestResultEnum testType ) { QoSTestResult nnResult = new QoSTestResult ( testType , this ) ; nnResult . getResultMap ( ) . put ( PARAM_QOS_TEST_OBJECTIVE_ID , qoSTestObjectiveUid ) ; return nnResult ; }
public void setHund ( boolean hund ) { this . _hund = hund ; }
public int getTemp ( ) { return temp ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; mEditItemPresenter = new EditItemPresenter ( mView , mRepository , mSharedPreferencesHelper , mImageFile ) ; }
public ViewHolderOrderWithBill ( View itemView , Context context , Fragment fragment ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; this . context = context ; this . fragment = fragment ; }
public static void i ( final String msg , Throwable tr ) { Log . i ( mTAG , getMessage ( msg ) , tr ) ; saveToFile ( ) ; }
public void onSkipToPrevious ( ) { super . onSkipToPrevious ( ) ; previous ( true ) ; }
public void setData_updatesWidgetAnswer_afterStrippingInvalidCharacters ( ) { BarcodeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( "\ud800blah\b" ) ; assertThat ( widget . binding . barcodeAnswerText . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public void onClick ( View view ) { Toast . makeText ( mActivity , getString ( R . string . not_implemented ) , Toast . LENGTH_SHORT ) . show ( ) ; }
private List < LaserMeasurement > testPoints ( ) { List < LaserMeasurement > points = new ArrayList <> ( ) ; points . add ( new LaserMeasurement ( 100 , - 100 ) ) ; return points ; }
private void initYpos ( int width ) { ypos = new float [ nMaxChannels ] [ width + gap * 2 ] ; xpos = 0 ; }
private void setupNewInput ( ) { mInputView . setText ( Tuils . EMPTYSTRING ) ; if ( defaultHint ) { mInputView . setHint ( Tuils . getHint ( mSkinManager , mainPack . currentDirectory . getAbsolutePath ( ) ) ) ; } requestInputFocus ( ) ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Affection_Txt ) , weaponName ) ; }
public PermanentCache ( CacheDataSource < K , V , F > cacheDataSource ) { this . cacheDataSource = cacheDataSource ; }
private static SharedPreferences . Editor getEditableSharedPreferences ( Activity context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) ; }
public boolean cd ( String path ) { return cd ( new File ( path ) ) ; }
private HistoryDataSource ( ) { dbHelper = new MySQLiteHelper ( ) ; HandlerThread handlerThread = new HandlerThread ( "Database" ) ; handlerThread . start ( ) ; backgroundHandler = new Handler ( handlerThread . getLooper ( ) ) ; }
private void setZoomLevelVisible ( boolean zoomVisible ) { if ( zoomVisible ) { zoomLevelText . setVisibility ( View . VISIBLE ) ; } else { zoomLevelText . setVisibility ( View . GONE ) ; } }
public void retrieveIcon ( String bookmarkUrl ) { bookmarkUrl = Utils . buildUrl ( bookmarkUrl , true ) ; new RetrieveIconThread ( bookmarkUrl , JobTypeEnum . BOOKMARK_ICON_URL ) . start ( ) ; }
private void overlayProgressingMedia ( ) { for ( String localMediaId : mUploadingMediaProgressMax . keySet ( ) ) { overlayProgressingMedia ( localMediaId ) ; } }
public static com . coinomi . core . protos . Protos . TransactionConfidence parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void onDataNotAvailable ( ) { getUseCaseCallback ( ) . onError ( new DataNotAvailableError ( ) ) ; }
public UUIDMap < DatabaseEntry > getEntries ( ) { return _entries ; }
private GattOperation ( BluetoothGatt gatt , GattOperation . Operation operation , UUID uuid , byte [ ] value ) { mGatt = gatt ; mOp = operation ; mUuid = uuid ; mValue = value ; }
public void onAnimationEnd ( Animator animation ) { mOpenSettingsButton . setVisibility ( View . GONE ) ; }
public static Category split ( DatabaseAdapter db ) { return db . getCategory ( Category . SPLIT_CATEGORY_ID ) ; }
public void copyPr0Number ( Pr0Number originalPr0Number ) { this . binString = originalPr0Number . getBinValue ( ) ; this . octString = originalPr0Number . getOctValue ( ) ; this . decString = originalPr0Number . getDecValue ( ) ; this . hexString = originalPr0Number . getHexValue ( ) ; }
private static ChangeUIRequest init ( IField field ) { return new ChangeUIRequest ( field , ACTIVITY_LOAD ) ; }
public void performAction ( TimestampedValue [ ] newValues ) { vibrator . vibrate ( duration ) ; }
public boolean onSwipeRight ( int i , long l , double v ) { return callback . onDrawerGesture ( desktop , Type . SwipeRight ) ; }
public void onClick ( View v ) { m_listener . onArticleSelected ( article ) ; if ( getActivity ( ) instanceof DetailActivity ) { m_activeArticle = article ; } m_adapter . notifyDataSetChanged ( ) ; }
public static String getExtensionByMime ( String mime ) { int index ; if ( ( index = mime . indexOf ( '/' ) ) != - 1 ) { return mime . substring ( index + 1 ) ; } return "" ; }
public boolean onResourceReady ( Drawable resource , Object model , Target < Drawable > target , DataSource dataSource , boolean isFirstResource ) { customFAB . show ( ) ; return false ; }
public Observable < EmptyResponse > moveUp ( long songId ) { return controlService . moveUp ( songId ) ; }
public void setBackgroundOffset ( int backgroundOffset ) { if ( ! mDrawBackground || this . mBackgroundOffset == backgroundOffset ) return ; this . mBackgroundOffset = backgroundOffset ; mesureBackgroundBounds ( ) ; }
public void setDomainUpperBoundaryMode ( BoundaryMode domainUpperBoundaryMode ) { this . domainUpperBoundaryMode = domainUpperBoundaryMode ; }
public JobParameters create ( ) { return new JobParameters ( groupId , ignoreDuplicates , requiresNetwork , requiresMasterSecret , requiresSqlCipher , retryCount , System . currentTimeMillis ( ) + retryDuration ) ; }
public void flipUp ( ) { isUp = true ; if ( ! stopMovements ) { setCardFront ( ) ; } }
public ProgressViewHolder ( View v ) { super ( v ) ; progressBar = ( ProgressBar ) v . findViewById ( R . id . progressBar ) ; }
public Engine onCreateEngine ( ) { return ( engine = new ShaderWallpaperEngine ( ) ) ; }
public final String getEndDate ( ) { return mEndDate ; }
public static void closeStream ( Closeable stream ) { try { stream . close ( ) ; } catch ( IOException e ) { } }
public void onNewBlock ( final WalletPocket pocket ) { if ( confidenceRelevant ) relevant . set ( true ) ; }
public void run ( ) { saveImage ( ) ; }
public void terminate ( ) { mMotion = false ; mServerConnection . updateState ( mMotionItem , mMotion ? "CLOSED" : "OPEN" ) ; }
private void initComponents ( ) { initRecyclerView ( ) ; initDataSwipeRefresh ( ) ; loadDataFitBit ( ) ; }
public static Bitmap getBitmapAsset ( String relativePathPrefix , String src , int width , int height , int percent , int color ) throws IOException { return g . loadBitmapAssetImpl ( relativePathPrefix , src , width , height , percent , color ) ; }
public boolean startScanningDevices ( ) { configureSerial ( ) ; btServiceSend . startScan ( ) ; return true ; }
private void initBirthdaysWidgetPrefs ( ) { binding . widgetShowPrefs . setChecked ( mPrefs . isBirthdayInWidgetEnabled ( ) ) ; binding . widgetShowPrefs . setOnClickListener ( view -> changeWidgetPrefs ( ) ) ; binding . widgetShowPrefs . setDependentView ( binding . birthReminderPrefs ) ; }
public void onClick ( View v ) { ( ( GameButton ) v ) . clicked ( ) ; ; }
private ShortcutInfo getShortcutForTextType ( ) { return getShortcut ( SHORTCUT_TEXT_ID , R . string . common_text , R . drawable . ic_shortcut_text , ACTION_START_WITH_TEXT_SELECTION ) ; }
public void showBestSearchInPlatesSection ( Cursor cursor ) { if ( searchPlatesFragment . isViewCreated ( ) ) { searchPlatesFragment . setData ( cursor ) ; searchPlatesFragment . showList ( ) ; searchPlatesFragment . showQuickHeaders ( cursor . getCount ( ) ) ; } }
public Single < List < UploadObject >> get ( int accountId , @ NonNull UploadDestination destination ) { return Single . fromCallable ( ( ) -> getByDestination ( accountId , destination ) ) ; }
private void refreshFragment ( @ IdRes int id ) { final Fragment fragment = getFragmentManager ( ) . findFragmentById ( id ) ; if ( fragment != null && fragment instanceof XmppFragment ) { ( ( XmppFragment ) fragment ) . refresh ( ) ; } }
public void init ( ) { renderView . setVisibility ( View . VISIBLE ) ; detectFaces ( ) ; }
public void draw ( Canvas canvas ) { if ( mBitmap != null ) { canvas . drawBitmap ( mBitmap , mOffset , 0 , mPaint ) ; } }
public static void regenerateKeyPair ( final Context context , String passphrase ) { Intent i = getBaseIntent ( context ) ; i . setAction ( MessageCenterService . ACTION_REGENERATE_KEYPAIR ) ; i . putExtra ( EXTRA_PASSPHRASE , passphrase ) ; context . startService ( i ) ; }
public void onStartSuccess ( AdvertiseSettings settingsInEffect ) { super . onStartSuccess ( settingsInEffect ) ; Log . d ( TAG , "Advertising successfully started" ) ; }
private void removeActiveKnownLocation ( ) { mActiveMarker = null ; mActiveKnownLocation = null ; mMapClickMarkerOptions = null ; }
public boolean onFailedToRecycleView ( VH holder ) { return onFailedToRecycleView ( holder , holder . getItemViewType ( ) ) ; }
public MenuState getState ( ) { return menuState ; }
public void displayData ( List < Departure > departures ) { ui . progressBar . setVisibility ( View . GONE ) ; ui . list . setVisibility ( View . VISIBLE ) ; adapter . setData ( departures ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mPresenter . detachView ( ) ; }
private void handleTeamHintClick ( int teamNumber ) { String teamNumberText = String . valueOf ( teamNumber ) ; setText ( teamNumberText ) ; setSelection ( teamNumberText . length ( ) ) ; closeSearch ( ) ; mOnTeamRequestedListener . onTeamRequest ( teamNumber ) ; }
public void getPage_anyPageFromAnEmptyBook_throwsException ( ) throws NotFoundException { Book emptyBook = makeEmptyBook ( ) ; int anyPageIndex = 1 ; Executable getPage = ( ) -> emptyBook . getPage ( anyPageIndex ) ; assertThrows ( NotFoundException . class , getPage ) ; }
public int getCurrentAyah ( ) { return mCurrentAyah ; }
private void moveWord ( ) { new ShowLists ( ) . execute ( mCurrentVocabItem ) ; }
public Builder setOnKeyListener ( OnKeyListener onKeyListener ) { P . mOnKeyListener = onKeyListener ; return this ; }
public void setRadioBand ( Long radioBand ) { this . radioBand = radioBand ; }
private FileCopyException ( int resId ) { this . resId = resId ; }
public void onItemSelected ( ItemManager . WebItem story ) { multiPaneListener . onItemSelected ( story ) ; }
public StoredPostInfo ( ) { topic = "" ; poster = "" ; url = "" ; fullQuote = "" ; id_post = 0 ; id_topic = 0 ; }
public void setPrecipIntensityMaxTime ( Double precipIntensityMaxTime ) { this . precipIntensityMaxTime = precipIntensityMaxTime ; }
public void onSubscribe ( ) { if ( postListingFragment != null ) postListingFragment . onSubscribe ( ) ; }
public void onViewRecycled ( @ NonNull ImportEntryHolder holder ) { holder . getEntry ( ) . setOnCheckedChangedListener ( null ) ; }
public ProgressBarViewHolder ( View itemView ) { super ( itemView ) ; progressBar = ( ProgressBar ) itemView . findViewById ( R . id . recycleviewProgressbar ) ; }
public static VpnProfile getLastConnectedProfile ( Context c ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( c ) ; String lastConnectedProfile = prefs . getString ( LAST_CONNECTED_PROFILE , null ) ; if ( lastConnectedProfile != null ) return get ( c , lastConnectedProfile ) ; else return null ; }
public void onMoved ( int fromPosition , int toPosition ) { if ( toPosition > fromPosition ) { mPromoted . put ( mItems . get ( fromPosition ) . getId ( ) , toPosition - fromPosition ) ; } }
public void onAnimationEnd ( Animator animation ) { setVisibility ( View . INVISIBLE ) ; messageCell = null ; animatorSet = null ; }
public void onPushSuccess ( ) { Log . e ( TAG , "push success" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_PUSH_SUCCESS , new ArrayList < String > ( ) ) ; }
public void onBackPressed ( ) { if ( pieView . isEditMode ( ) ) { pieView . endEditMode ( ) ; showAllApps ( ) ; } else { hideAllApps ( ) ; } }
public int getLocationsCount ( ) { String countQuery = "SELECT * FROM " + Location_NoeC . TABLE_NAME ; SQLiteDatabase db = mDbHelper . getReadableDatabase ( ) ; Cursor cursor = db . rawQuery ( countQuery , null ) ; return cursor . getCount ( ) ; }
public ReviewsAdapter ( Context context , List < Reviews > reviews ) { this . mContext = context ; this . reviews = reviews ; }
public void onDestroy ( ) { Log . d ( TAG , "onDestroy" ) ; accessTokenTracker . stopTracking ( ) ; googleApiClient . stopAutoManage ( getActivity ( ) ) ; googleApiClient . disconnect ( ) ; super . onDestroy ( ) ; }
public ContextHolder ( Context context ) { this . context = context ; }
private void loginToServer ( UserInfo userInfo ) { new LoginPresenter ( LoginActivity . this , userInfo ) . login ( ) ; }
public OstLogEvent ( String workflowId , String workflow , String callbackName , String details ) { id = System . currentTimeMillis ( ) ; this . workflowId = workflowId ; this . workflow = workflow ; this . callbackName = callbackName ; this . details = details ; }
public void setOrientation ( TextOrientationType orientation ) { this . orientation = orientation ; if ( autoPackEnabled ) { pack ( ) ; } }
public void onGroupsChanged ( int group , boolean isChecked ) { if ( ! restoring ) { filterModel . setGroup ( group , isChecked ) ; updateSearchSettingsButtonState ( ) ; filterCryptCards ( ) ; } }
public AdmissionPercentageData getItem ( int lessonId , int apMetaId ) { return getItem ( new AdmissionPercentageData ( apMetaId , lessonId , - 1 , - 1 ) ) ; }
private void reIndex ( ) { db . restoreNoCategory ( ) ; recreateCursor ( ) ; }
public void onBackPressed ( ) { if ( drawerLayout . isDrawerOpen ( drawerList ) ) drawerLayout . closeDrawer ( drawerList ) ; else super . onBackPressed ( ) ; }
public java . util . List < com . coinomi . core . protos . Protos . UnspentOutput > getUnspentOutputList ( ) { return unspentOutput_ ; }
public void getHotVideosFeed ( ) { queURL ( "javascript : getHotVideosFeed ( ) ; " ) ; }
public void subscribe ( DetailsContract . View view ) { mView = view ; loadContent ( ) ; }
public void search ( String term , OnSearchResultsAvailable onSearchResultsAvailable ) { MessageSearchTask . search ( this , term , onSearchResultsAvailable ) ; }
public static ChartFragment newInstance ( ) { return new ChartFragment ( ) ; }
public int countSpacesAtEnd ( ) { for ( int i = 0 ; i < length ; i ++ ) { if ( arr [ start + length - 1 - i ] != ' ' ) return i ; } return length ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; list = ( ListView ) view . findViewById ( android . R . id . list ) ; }
public Observable < ApiResult > getTrams ( String lineNo ) { return apiClient . getTrams ( API_KEY , lineNo ) ; }
public double getRightTarget ( ) { return rightTarget ; }
public QoSServerResultTestDesc ( QoSTestResultEnum type , String description , String name ) { this . resultType = type ; this . description = description ; this . name = name ; }
private void initMessage ( ) { if ( message != null && message . length ( ) > 0 ) { ( ( TextView ) findViewById ( R . id . title ) ) . setText ( message ) ; } }
private void publishProgress ( long add ) { this . transferred += add ; if ( this . transferred >= this . size || publishTimer . isStep ( ) ) this . listener . progress ( url , file , this . transferred ) ; }
public FormMapPage selectForm ( FakeClickableMapFragment mapFragment , int index ) { mapFragment . clickOnFeature ( index ) ; waitForText ( getTranslatedString ( R . string . review_data ) ) ; return this . assertOnPage ( ) ; }
public int getStyleAt ( int externalRow , int column ) { return allocateFullLineIfNecessary ( externalToInternalRow ( externalRow ) ) . getStyle ( column ) ; }
public void setWallVisible ( boolean visible ) { mWallRecyclerView . setVisibility ( visible ? View . VISIBLE : View . GONE ) ; }
private void actLifting ( float delta ) { mTime += delta ; if ( mTime >= LIFTING_DELAY ) { mTime = LIFTING_DELAY ; startRecovering ( ) ; } mVehicle . setZ ( Interpolation . pow2 . apply ( mTime / LIFTING_DELAY ) ) ; }
public SelectMultiMinimalWidget createWidget ( ) { return new SelectMultiMinimalWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) , new FakeWaitingForDataRegistry ( ) ) ; }
public static void main ( String [ ] args ) throws Exception { writeConfigFile ( "ormlite_config . txt" ) ; }
public void onEvent ( ImageView button , boolean buttonState ) { int position = getAdapterPosition ( ) ; if ( position != RecyclerView . NO_POSITION ) { listener . onReblog ( ! reblogged , position ) ; } }
public void onBindViewHolder ( MedicationViewHolder holder , int position ) { holder . bind ( mStrings . get ( position ) ) ; }
public VKOwnIds append ( VkApiDialog dialog ) { if ( dialog . message != null ) { append ( dialog . message ) ; } return this ; }
public void refreshDebts ( ) { mCacheOwedIsDirty = true ; }
public void getVideos ( ) { HttpGet ( VIDEOS_RSS_URL , "application/rss + xml" , null ) ; }
public String getAuthorAvatar ( ) { return StringUtils . notNullStr ( authorAvatar ) ; }
public static void setPreferences ( ) { Context context = InstrumentationRegistry . getTargetContext ( ) ; _securePreferences = new SecurityService ( context ) . getSecurePreferences ( ) ; }
public void run ( ) { UserSettings . setCurrentUser ( User . getUserFromUserName ( enteredUsername ) , getApplicationContext ( ) ) ; startActivity ( new Intent ( LoginActivity . this , MainActivity . class ) ) ; finish ( ) ; }
public int getSavedVegasBetAmount ( ) { return savedSharedData . getInt ( PREF_KEY_VEGAS_BET_AMOUNT , DEFAULT_VEGAS_BET_AMOUNT ) ; }
public int update ( @ NonNull Uri arg0 , ContentValues arg1 , String arg2 , String [ ] arg3 ) { Log . w ( TAG , "update ( ) called" ) ; return 0 ; }
public String getFormattedValue ( float value ) { return data . get ( Math . min ( Math . max ( ( int ) value , 0 ) , data . size ( ) - 1 ) ) . xAxisValue ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = mLayoutInflater . inflate ( R . layout . sharedpref_manager_recycler_item , parent , false ) ; return new ViewHolder ( v ) ; }
public void OnSuccessRequest ( String response ) { try { Utility . saveCache ( requireContext ( ) , user . getMeWithoutProtocol ( ) , "channels" , response , "" , "" ) ; } catch ( Exception ignored ) { } parseChannelResponse ( response , false ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , CC_car . class ) ; startActivity ( inte ) ; }
public void onItemUpdated ( TodoListItem updatedItem ) { mView . itemSynced ( ) ; }
public boolean insert ( String tid , String placeName , float latitude , float longitude ) { String timestamp = TimestampGenerator . getTimestamp ( ) ; return this . insert ( tid , placeName , timestamp , latitude , longitude ) ; }
public boolean isValid ( ) { return ( ! getName ( ) . isEmpty ( ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; adapter = new FeesListAdapter ( activity , config ) ; }
public void onClick ( View v ) { LOGD ( TAG , "Marking TOS flag . " ) ; SettingsUtils . markTosAccepted ( mActivity , true ) ; doNext ( ) ; }
public synchronized HashSet < String > toHashset ( ) { if ( hashSet != null ) return hashSet ; return ( hashSet = new HashSet <> ( escapedStringToList ( serialised ) ) ) ; }
public void seek ( final int position ) throws IOException { if ( position < 0 ) { throw new IOException ( "Attempted to seek before zero" ) ; } mPosition = position ; }
public String getLabel ( ) { if ( isTagDisplayNameAlphaNumeric ( ) ) { return getTagDisplayName ( ) . toLowerCase ( ) ; } else if ( hasTagTitle ( ) ) { return getTagTitle ( ) ; } else { return getTagDisplayName ( ) ; } }
public void testGetLocalDays_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . getLocalDays ( ) , closeTo ( days , 1e - 5 ) ) ; }
public void onEvent ( OnTrackerDeleted event ) { currentTracker = null ; invalidate ( ) ; }
public void onClick ( View view ) { loader . setWallpaper ( image . getLarge ( ) ) ; loader . setType ( WallpaperManager . FLAG_SYSTEM | WallpaperManager . FLAG_LOCK ) ; loader . execute ( ) ; mBottomSheetDialog . dismiss ( ) ; }
public void setSelected ( boolean selected ) { Selected = selected ; }
private void sendToFtp ( ) { if ( ! FileSenderFactory . GetFtpSender ( ) . isAvailable ( ) ) { launchPreferenceScreen ( MainPreferenceActivity . PREFERENCE_FRAGMENTS . FTP ) ; } else { showFileListDialog ( FileSenderFactory . GetFtpSender ( ) ) ; } }
private void closeSearchBox ( ) { onTextSearching = false ; pageview . clearMatches ( ) ; }
private FormattableContent getHeader ( int headerIndex ) { if ( mHeadersList != null && headerIndex < mHeadersList . size ( ) ) { return mHeadersList . get ( headerIndex ) ; } return null ; }
