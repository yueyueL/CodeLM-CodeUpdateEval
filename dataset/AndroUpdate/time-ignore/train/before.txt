public TerminalView getCurrentTerminalView ( ) { View currentView = pager . findViewWithTag ( getBridgeAtPosition ( pager . getCurrentItem ( ) ) ) ; if ( currentView == null ) return null ; return ( TerminalView ) currentView . findViewById ( R . id . terminal_view ) ; }
public void destroy ( ) { super . destroy ( ) ; if ( this == primary ) { primary = null ; } else { secondary = null ; } lastItem = null ; lastTarget = null ; }
public boolean isPlayingAd ( ) { return player . isPlayingAd ( ) ; }
public void start ( Attributes attributes ) { mCurrentThread . setIsGlobal ( attributes . getValue ( Topic . Xml . IS_GLOBAL_ATTRIBUTE ) . equals ( "1" ) ) ; }
private SiteRecord getItem ( int position ) { return mSites . get ( position ) ; }
public void onAnimationEnd ( Animator animation ) { progressView . setVisibility ( visibility ? View . VISIBLE : View . GONE ) ; }
public void onNext ( PageCoordinates coordinates ) { if ( screen != null ) { screen . setAyahCoordinatesData ( coordinates ) ; } }
public int size ( ) { return value . size ( ) ; }
public void setActivity ( Activity context ) { context = context ; }
public int getId ( ) { return safeGetFirstSong ( ) . albumId ; }
public void onConnected ( Bundle bundle ) { Log . i ( TAG , "Connected !!! " ) ; findFitnessDataSources ( ) ; }
public void setViewModel ( BaseViewModel viewModel ) { this . viewModel = ( SignUpViewModel ) viewModel ; ActivitySignUpBinding binding = DataBindingUtil . setContentView ( this , R . layout . activity_sign_up ) ; binding . setViewModel ( this . viewModel ) ; }
public String title ( ) { return parameter ( PARAM_CATEGORY , "" ) . toUpperCase ( ) ; }
public static int getStatusColor ( String skin ) { return darker ( Color . parseColor ( skin ) , 0 . 6f ) ; }
public void menuActiviated ( ) { startAction ( 1 ) ; }
public Integer getBalance ( ) { return balance ; }
public void onGeneratingFinished ( boolean forced ) { Log . d ( TAG , "Generating " + ( forced ? " force - " : "" ) + "finished" ) ; mGenerator . clear ( ) ; mGenerator = null ; mIsGenerating = false ; }
public static boolean isFragmentUIActive ( Fragment fragment ) { return fragment . getActivity ( ) != null && fragment . isAdded ( ) && ! fragment . isDetached ( ) && ! fragment . isRemoving ( ) ; }
public void setItemSettleBackIntoPlaceAnimationInterpolator ( Interpolator interpolator ) { mItemSettleBackIntoPlaceAnimationInterpolator = interpolator ; }
public void openChannelWithAcinq ( View view ) { Intent intent = new Intent ( getBaseContext ( ) , OpenChannelActivity . class ) ; intent . putExtra ( OpenChannelActivity . EXTRA_NEW_HOST_URI , WalletUtils . ACINQ_NODE . toString ( ) ) ; startActivity ( intent ) ; }
public ObjectCondition ( Object obj ) { }
private void setArtist ( String str ) { textArtist . setText ( str ) ; }
public void onTransitionAnimationEnd ( boolean isOpen , boolean backward ) { if ( isOpen ) { nameTextView . requestFocus ( ) ; AndroidUtilities . showKeyboard ( nameTextView ) ; } }
public int getServings ( ) { return this . servings ; }
public String name ( ) { return Game . getVar ( R . string . ConcreteBlock_Name ) ; }
public void onClick ( View v ) { bottomSheet . setVisibility ( View . GONE ) ; shareOnOtherApps ( ) ; }
public void quit ( ) { abortIdle ( ) ; getLooper ( ) . quit ( ) ; }
public boolean isInProgress ( ) { return mIsInProgress ; }
public void setChannel ( Channel channel ) { mChannel = channel ; notifyDataSetChanged ( ) ; }
public int getItemViewType ( int position ) { MainListPersona detailPersona = personas . get ( position ) ; return detailPersona . gameId . getValue ( ) ; }
public void onClick ( View v ) { songsManager . play ( position , songsManager . newSongs ( ) ) ; }
private boolean isConnected ( ) { return ConnectUtils . isConnected ( getActivity ( ) ) ; }
public String getGmina ( ) { return nameFormatHelper . formatGmina ( dto . gmina ( ) ) ; }
private void resetResults ( ) { this . calcDistTextView . setText ( "" ) ; this . scaleTextView . setText ( DisplayUtils . toStringForTextView ( 1 . 0000 ) + " ( 0ppm ) " ) ; }
public LoginFlow chooseEnterYourSiteAddress ( ) { clickOn ( R . id . second_button ) ; return this ; }
public void set_selected_mode ( ) { mViewModel . selectedSection ( true ) ; verify ( programDataIntera ) . setSectionSelected ( true ) ; } */
public boolean isShiftLock ( ) { switch ( getClick ( ) . shift_lock ) { case "long" : return false ; case "click" : return true ; } return ! Rime . isAsciiMode ( ) ; }
public MutableLiveData < Integer > getTodoOrder ( ) { return mTodoOrder ; }
public BusyIndicator ( ) { super ( ) ; copy ( Icons . BUSY . get ( ) ) ; origin . set ( width / 2 , height / 2 ) ; angularSpeed = 720 ; }
public void setPenaltyChargesCharged ( Integer penaltyChargesCharged ) { this . penaltyChargesCharged = penaltyChargesCharged ; }
private static ComponentInfo getComponentInfo_v19 ( ResolveInfo info ) { if ( info . providerInfo != null ) return info . providerInfo ; return null ; }
public static boolean isShowNodesInsteadExit ( Context context ) { return getBoolean ( context , R . string . pref_key_show_nodes_instead_exit , false ) ; }
public void setRenderer ( GLESPlaneAnimatedRenderer renderer ) { _mRenderer = renderer ; super . setRenderer ( renderer ) ; }
public BMIChartPresenter provideBMIChartPresenter ( BMIInteractor BMIInteractor ) { return new BMIChartPresenterImpl ( BMIInteractor ) ; } */
public CursorLoader createSavedInstancesCursorLoader ( String sortOrder ) { String selection = InstanceProviderAPI . InstanceColumns . DELETED_DATE + " IS NULL " ; return getInstancesCursorLoader ( selection , null , sortOrder ) ; }
public double getTotalTravelled ( ) { return Double . valueOf ( get ( "totalTravelled" , "0" ) ) ; }
public void onAuthStateChanged ( @ NonNull FirebaseAuth firebaseAuth ) { if ( firebaseAuth . getCurrentUser ( ) == null ) { Intent intent = new Intent ( CriarRota . this , LoginActivity . class ) ; startActivity ( intent ) ; finish ( ) ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( mComposer != null ) { mComposer . onDestroy ( ) ; } if ( mAudioDialog != null ) { mAudioDialog . dismiss ( ) ; mAudioDialog = null ; } }
public void onClick ( View v ) { if ( isSearchFieldVisible ) { closeSearchField ( ) ; return ; } if ( actionBarMenuOnItemClick != null ) { actionBarMenuOnItemClick . onItemClick ( - 1 ) ; } }
public boolean hasBeginningMenu ( ) { return getBeginningMenu ( ) > 0 ; }
public void drawTextWithBackground ( Canvas canvas , Paint paint , String text , int foreground , int background , int location_x , int location_y ) { drawTextWithBackground ( canvas , paint , text , foreground , background , location_x , location_y , Alignment . ALIGNMENT_BOTTOM ) ; }
public void onClick ( DialogInterface dialog , int which ) { deleteSelectedItems ( ) ; mode . finish ( ) ; }
public void setStories ( CharacterComicDataContainer stories ) { mStories = stories ; }
public void setRate ( float rate ) { this . rate = rate ; }
public Task < BatteryStatus > then ( @ NonNull Task < TransportService > task ) throws Exception { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_BATTERYSTATUS , Transport . BATTERY_STATUS ) ; }
public void setProgress ( @ FloatRange ( from = 0f , to = 1f ) float progress ) { animator . setProgress ( progress ) ; if ( compositionLayer != null ) { compositionLayer . setProgress ( progress ) ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_toolbar_container ) ; showBackButton ( ) ; replaceFragment ( new GroupsListFragment ( ) , false , R . id . container ) ; }
public List < DatabaseEntry > getPreloadItems ( int position ) { DatabaseEntry entry = _adapter . getEntryAt ( position ) ; if ( ! entry . hasIcon ( ) ) { return Collections . emptyList ( ) ; } return Collections . singletonList ( entry ) ; }
public Hashtable < String , Layer > getLayerTable ( ) { return layerTable ; }
public void onLongPress ( MotionEvent event ) { if ( contextMenuShown ) contextMenuCallback . onSelectionStarted ( LastTouchX , LastTouchY ) ; }
public void onDestroyView ( ) { removeMoreScreenToolbar ( ) ; removeJetpackSecurityScreenToolbar ( ) ; mDispatcher . unregister ( this ) ; super . onDestroyView ( ) ; }
public void testIsTest_isNotTest ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . getName ( ) ) . thenReturn ( "random" ) ; assertFalse ( dependencyTask . isTest ( configuration ) ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( getActivity ( ) , SubjectManagementActivity . class ) ) ; }
public void onAnimationStart ( View view ) { mManager . dispatchStarting ( mAnimationInfo , mHolder ) ; }
public int getCount ( ) { if ( usedArray == null ) { return 1 ; } else { return usedArray . size ( ) ; } }
public void onActivityResult ( int requestCode , int resultCode , Intent data ) { if ( requestCode == Codes . EDIT_DOCUMENT_CODE ) { updateDocumentList ( ) ; } super . onActivityResult ( requestCode , resultCode , data ) ; }
public void setExpenseId ( long expenseId ) { this . expenseId = expenseId ; }
public static void setMediaSize ( RecyclerView recyclerView , int mediaSize ) { RecyclerView . Adapter adapter = recyclerView . getAdapter ( ) ; if ( adapter instanceof MediaAdapter ) { ( ( MediaAdapter ) adapter ) . setMediaSize ( mediaSize ) ; } }
public static int [ ] getTileColors ( ) { if ( Settings . colorMode == Constants . COLOR_MODE_DAY ) { return tilesDay ; } else { return tilesNight ; } }
public String getGroupId ( ) { return groupId ; }
public static Intent generateBrowserIntent ( @ NonNull String destination ) { String destination_url = formQuery ( destination ) ; return new Intent ( Intent . ACTION_VIEW ) . setData ( Uri . parse ( destination_url ) ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_NON_ALCOHOLIC , null , null , null , null ) ; }
public void onSelectedDayChange ( @ NonNull CalendarDate calendarDate ) { sync ( calendarDate , mCalendarView ) ; }
public static void info ( String tag , boolean debug , String msg , Throwable t ) { if ( ! debug || dev ) { Log . i ( tag , msg , t ) ; } }
public void permissionsDenied ( boolean denied ) { if ( mFrag != null ) mFrag . setClosestHidden ( denied ) ; if ( denied ) mCentralMap . getErrorBanner ( ) . animateBanner ( false ) ; }
private void removePlane ( final Plane pl ) { m_planeList . remove ( pl ) ; }
public com . coinomi . core . protos . Protos . ScryptParameters getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . ScryptParameters . getDefaultInstance ( ) ; }
public void onFailure ( @ NotNull Call < Results < Allergy >> call , @ NotNull Throwable t ) { ToastUtil . error ( OpenMRS . getInstance ( ) . getString ( R . string . unable_to_fetch_allergies ) ) ; }
public boolean isLastCorrectableMessage ( ) { Message next = next ( ) ; while ( next != null ) { if ( next . isCorrectable ( ) ) { return false ; } next = next . next ( ) ; } return isCorrectable ( ) ; }
public void stopRecording ( ) { if ( mediaRecorder != null ) { mediaRecorder . stop ( ) ; mediaRecorder = null ; recording = false ; } }
public BitmapWorkerTask getBitmapWorkerTask ( ) { return bitmapWorkerTaskReference . get ( ) ; }
public String getRoProductName ( ) { return roProductName ; }
public void setCurrentPasswordInfo ( byte [ ] hash , TLRPC . account_Password password ) { currentPasswordHash = hash ; currentPassword = password ; }
public SheetBehavior ( ) { }
public SchedulingAlgorithmParameters ( Context context ) { settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; editor = settings . edit ( ) ; }
public Integer getQuestionId ( ) { return idIntrebare ; }
public void onBindViewHolder ( @ NonNull RecipeViewHolder holder , int position ) { holder . stepDescription . setText ( mStepList . get ( position ) . getDescription ( ) ) ; }
private double sqinchTosqkm ( double num ) { return num * 6 . 4516E - 10 ; }
public Loader < ArrayList < Album >> onCreateLoader ( int id , Bundle args ) { return new AsyncAlbumLoader ( getActivity ( ) ) ; }
private void onStartActivity ( ) { new Handler ( ) . postDelayed ( ( ) -> { FunctionsTools . startActivity ( SplashActivity . this , ListClientsActivity . class , null ) ; FunctionsTools . closeActivity ( SplashActivity . this ) ; } , 1000 ) ; }
public long getItemId ( int position ) { return highlightList . get ( position ) . rowId ; }
public void onCompletion ( MediaPlayer mp ) { releaseLock ( true ) ; releaseAudioFocus ( ) ; if ( mOnCompletionListener != null ) { mOnCompletionListener . onCompletion ( this ) ; } }
public void setCubeVertical ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotationX ( - 90 * fraction ) ; setPivotY ( 0 ) ; setPivotX ( getWidth ( ) / 2 ) ; }
private void showPairingComplete ( ) { this . viewAnimator . setDisplayedChild ( 3 ) ; findViewById ( R . id . button_save ) . setVisibility ( View . VISIBLE ) ; }
public static long endOfYesterday ( ) { return endOfToday ( ) - secondsInDay * 1000 ; }
private Completable commit ( IPhotosStorage storage , UploadObject upload , PhotoEntity entity ) { return storage . insertPhotosRx ( upload . getAccountId ( ) , entity . getOwnerId ( ) , entity . getAlbumId ( ) , Collections . singletonList ( entity ) , false ) ; }
private void showTextSize ( ) { binding . textSize . setDetailText ( String . format ( Locale . getDefault ( ) , "%d pt" , ( mPrefs . getNoteTextSize ( ) + 12 ) ) ) ; }
public AboutBuilder addRemoveAdsAction ( Intent intent ) { return addRemoveAdsAction ( util . clickIntent ( intent ) ) ; }
public String getUsername ( ) { return prefs . getString ( "username" , isLoggedIn ( ) ? SIAApp . GG_APP . getString ( R . string . anonymous ) : null ) ; }
public static final DeviceControl getDefaultDeviceControl ( ) { if ( instance == null ) { instance = new DeviceControl ( ) ; } return instance ; }
public void setImageDrawable ( Drawable drawable ) { super . setImageDrawable ( drawable ) ; updateDrawableBounds ( ) ; handleImageChange ( ) ; }
public String getSerialNumber ( ) { return serialNumber ; } ;
public void resetMenuPreview ( ) { menu = null ; }
public boolean onInterceptTouchEvent ( RecyclerView rv , MotionEvent e ) { return RecyclerViewSwipeManager . this . onInterceptTouchEvent ( rv , e ) ; }
public ChatUsersActivity ( Bundle args ) { super ( args ) ; chatId = arguments . getInt ( "chat_id" ) ; currentChat = MessagesController . getInstance ( ) . getChat ( chatId ) ; }
public void onPause ( ) { super . onPause ( ) ; ArtworkManager . getInstance ( getContext ( ) . getApplicationContext ( ) ) . unregisterOnNewArtistImageListener ( ( ArtistsAdapter ) mAdapter ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( ListeDeSessions ) getResult ( ListeDeSessions . class , __result , "listeSessionsResult" , __envelope ) ; }
private GenericViewFragment getCurrentFragment ( ) { Fragment currentFragment = getFragmentManager ( ) . findFragmentById ( R . id . container ) ; if ( currentFragment instanceof GenericViewFragment ) { return ( ( GenericViewFragment ) currentFragment ) ; } return null ; }
public void clearFocusedVirtualView ( ) { final int focusedVirtualView = getFocusedVirtualView ( ) ; if ( focusedVirtualView != ExploreByTouchHelper . INVALID_ID ) { getAccessibilityNodeProvider ( MonthView . this ) . performAction ( focusedVirtualView , AccessibilityNodeInfoCompat . ACTION_CLEAR_ACCESSIBILITY_FOCUS , null ) ; } }
public boolean isDualPageMode ( ) { return maxWidth > 800 ; }
public void onBindChildViewHolder ( MyChildViewHolder holder , int groupPosition , int childPosition , int viewType ) { MyChildItem child = mItems . get ( groupPosition ) . children . get ( childPosition ) ; holder . textView . setText ( child . text ) ; }
private void hideProgress ( ) { ProgressBar progress = ( ProgressBar ) findViewById ( R . id . progress_loading ) ; if ( progress != null ) { progress . setVisibility ( View . GONE ) ; } }
private void setupTabIcons ( TabLayout tabLayout ) { tabLayout . getTabAt ( 0 ) . setIcon ( R . drawable . ic_network_check_black_24dp ) ; tabLayout . getTabAt ( 1 ) . setIcon ( R . drawable . ic_developer_board_black_24dp ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; Log . d ( TAG , "OnDestroy" ) ; NotificationManager notificationManager = ( NotificationManager ) getSystemService ( NOTIFICATION_SERVICE ) ; notificationManager . cancelAll ( ) ; NavitVehicle . removeListeners ( this ) ; navitDestroy ( ) ; }
public void setLinksEnabled ( boolean hyperLinkEnabled ) { the_tree . setLinkify ( hyperLinkEnabled ) ; }
public void onClick ( int position ) { Intent intent = EditActivity . getSchoolIntent ( getContext ( ) ) ; EditActivity . setData ( intent , position , resume . schools . get ( position ) ) ; startActivityForResult ( intent , REQUEST_EDIT ) ; }
private void setRtl ( boolean rtl ) { when ( resources . getBoolean ( R . bool . isRtl ) ) . thenReturn ( rtl ) ; }
public void sendStatus ( String status , int length ) { new updateTwitterStatus ( reply . getText ( ) . toString ( ) , length ) . execute ( status ) ; }
public void computeScroll ( ) { mScrimOpacity = 1 - mScrollPercent ; if ( mDragHelper . continueSettling ( true ) ) { ViewCompat . postInvalidateOnAnimation ( this ) ; } }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_single_run , menu ) ; }
public void saveForm_returnsSaveResult_inSavingState ( ) { viewModel . saveForm ( Uri . parse ( "file : FormSaveViewModel . SaveResult saveResult1 = viewModel . getSavedResult ( ) . getValue ( ) ; assertThat ( saveResult1 . getState ( ) , equalTo ( SAVING ) ) ; }
public void setButtonNextOnClickListener ( View . OnClickListener onClickListener ) { binding . miButtonNext . setOnClickListener ( onClickListener ) ; }
private void checkGoogleStatus ( ) { if ( mGoogleDrive . isLinked ( ) ) { mGoogleDriveButton . setText ( R . string . disconnect ) ; } else { mGoogleDriveButton . setText ( getString ( R . string . connect ) ) ; } }
public boolean hasSender ( String input ) { return input . matches ( " . *отправить . *" ) ; }
public GncXmlExporter ( ExportParams params , SQLiteDatabase db ) { super ( params , db ) ; }
public int hashCode ( ) { return Objects . hash ( description , id , image , name , token ) ; }
private void acceptWallet ( ) { bAccept . setEnabled ( false ) ; acceptCallback . onAccept ( walletName , walletPassword ) ; }
private void updateUpButtonPosition ( ) { int upButtonNormalBottom = mTopInset + mUpButton . getHeight ( ) ; mUpButton . setTranslationY ( Math . min ( mSelectedItemUpButtonFloor - upButtonNormalBottom , 0 ) ) ; }
public static TypeAdapter < Message > typeAdapter ( final Gson gson ) { return new AutoValue_Message . GsonTypeAdapter ( gson ) ; }
public void addArticles ( List < ArticleSummary > summaries ) { if ( ! mAdapter . containsAll ( summaries ) ) { mAdapter . clear ( ) ; mAdapter . addAll ( 0 , summaries ) ; } else { showNoMoreContent ( ) ; } showNothingTipsIfNeed ( ) ; }
public void onPause ( ) { log . v ( TAG , "Fragment paused" ) ; thread . standalone ( ( ) -> { if ( requestHandle != null ) { requestHandle . cancel ( ) ; } } ) ; }
public Builder clearSource ( ) { bitField0_ = ( bitField0_ & ~0x00000040 ) ; source_ = com . coinomi . core . protos . Protos . TransactionConfidence . Source . SOURCE_UNKNOWN ; onChanged ( ) ; return this ; }
public void onZoomInClicked ( View view ) { zoomMap ( 2 . 0 ) ; }
public String getUrl ( ) { return ( isCrypted && isDecrypted ) ? decryptedUrl : url ; }
public MantraViewHolder onCreateViewHolder ( @ NonNull ViewGroup viewGroup , final int position ) { final View itemView = mInflater . inflate ( R . layout . layout_mantra , viewGroup , false ) ; return new MantraViewHolder ( itemView ) ; }
public static FilterMode fromValue ( String value ) { for ( FilterMode item : FilterMode . values ( ) ) { if ( item . value . equals ( value ) ) { return item ; } } return NORMAL_FILTER ; }
public int getAge ( ) { return age ; }
public void onClick ( View v ) { clearText . clear ( mButton . getTag ( ) . toString ( ) , inputLayoutChildren ) ; }
private byte [ ] loadDataFromFile ( String fileName ) { if ( baseFilePath == null ) return null ; return loadDataFromFile ( fileName , baseFilePath ) ; }
public int getAvatarPlaceholder ( ) { return R . drawable . lotus_sq ; }
public void tweetsAsynchronousResponse ( ArrayList < Post > tweet ) { ( ( BaseAdapter ) TweetListView . getAdapter ( ) ) . notifyDataSetChanged ( ) ; }
public void setDefaultSelector ( Drawable d ) { defaultBackground = d ; if ( ! stacked ) setStacked ( false , true ) ; }
private int calculateBottomPadding ( AppBarLayout dependency ) { final int totalScrollRange = dependency . getTotalScrollRange ( ) ; return totalScrollRange + dependency . getTop ( ) ; }
private void showFab ( ) { ViewPropertyAnimator . animate ( fab ) . setDuration ( 500 ) . setInterpolator ( new OvershootInterpolator ( ) ) . scaleX ( 1 ) . scaleY ( 1 ) . start ( ) ; fab . setEnabled ( true ) ; }
public void onSavePointError ( String errorMessage ) { if ( errorMessage != null && errorMessage . trim ( ) . length ( ) > 0 ) { showLongToast ( getString ( R . string . save_point_error , errorMessage ) ) ; } }
private boolean doCropBorder ( ) { return mCropped ; }
public double getProtein ( ) { return this . protein ; }
public void selectReminder ( FragmentManager fragmentManager ) { selectPeriodHelper . showSelectReminderDialog ( fragmentManager , modifiedEvent , ( period , timeUnit ) -> { modifiedEvent . setReminder ( period ) ; modifiedEvent . setReminderUnit ( timeUnit ) ; formatAndShowReminderText ( ) ; } ) ; }
public int getItemCount ( ) { return 5 ; }
public void addFrontPage ( ) throws ConversionException { String frontPage = buildFrontPage ( ) ; boolean error = ZipWriter . addText ( ZipFileConstants . FRONTPAGE , frontPage ) ; if ( error ) { throw new ConversionException ( ConversionStatus . CANNOT_WRITE_EPUB ) ; } }
public SharedContactView ( Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initialize ( ) ; }
public void onClick ( View v ) { BookEditGeneralFragment . this . editAuthors ( v ) ; }
public String getEstado ( ) { return mEstado ; }
public List < Slide > setSlides ( List < ? extends Slide > list ) { List < Slide > oldList = new ArrayList <> ( data ) ; data = new ArrayList <> ( list ) ; notifyDataSetChanged ( ) ; return oldList ; }
public void onClick ( View view ) { mVpnConnect . connectOrDisconnect ( ) ; }
public boolean onKeyLongPress ( int keyCode , KeyEvent event ) { return mVolumeNavigationDelegate . onKeyLongPress ( keyCode , event ) || super . onKeyLongPress ( keyCode , event ) ; }
public RuntimeExceptionDao < InspiracaoEntity , String > getInspirationSimpleDataDao ( ) { if ( simpleRuntimeInspirationDao == null ) { simpleRuntimeInspirationDao = getRuntimeExceptionDao ( InspiracaoEntity . class ) ; } return simpleRuntimeInspirationDao ; }
public void clearAnswer ( ) { onClearNextLevelsOfCascadingSelect ( ) ; super . clearAnswer ( ) ; }
public static Stack < TetroidNode > createNodesHierarchy ( TetroidNode node ) { if ( node == null ) return null ; Stack < TetroidNode > hierarchy = new Stack <> ( ) ; createNodesHierarhy ( hierarchy , node ) ; return hierarchy ; }
public void seek ( ) { NalUnitUtil . clearPrefixFlags ( prefixFlags ) ; sps . reset ( ) ; pps . reset ( ) ; sei . reset ( ) ; sampleReader . reset ( ) ; totalBytesWritten = 0 ; }
public XMLPrefsManager . XMLPrefsList getValues ( ) { return values ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . optionsMenu = menu ; MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . artwork , menu ) ; update ( ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void getIdDARKTest ( ) throws Exception { int index = 1 ; AppTheme apptheme = AppTheme . getTheme ( index ) ; assertEquals ( index , apptheme . getId ( ) ) ; }
private void givenTemperatureUnitPreference ( ) { Deencapsulation . setField ( uut , "mTemperatureUnitsPreference" , mTemperatureUnitsPreference ) ; }
public synchronized < T > T sum ( Class < ? > modelClass , String columnName , Class < T > columnType ) { return sum ( BaseUtility . changeCase ( modelClass . getSimpleName ( ) ) , columnName , columnType ) ; }
public BubbleFormatter ( Context context , int xmlCfgId ) { configure ( context , xmlCfgId ) ; }
public XMLPrefsManager . XMLPrefsSave getPrefsSave ( ) { return ( XMLPrefsManager . XMLPrefsSave ) get ( ) ; }
public NumberEditText ( Context context , AttributeSet attr ) { super ( context , attr ) ; setUp ( context , attr ) ; }
public String getUuid ( ) { return preview . getPreview ( ) . getUuid ( ) ; }
public void setTeamLocal ( TeamLocal teamLocal ) { this . teamLocal = teamLocal ; }
public void onSetSwipeBackground ( MyViewHolder holder , int position , @ SwipeableItemDrawableTypes int type ) { int bgColor = ContextCompat . getColor ( holder . itemView . getContext ( ) , R . color . bg_swipe_item_gray ) ; holder . itemView . setBackgroundColor ( bgColor ) ; }
private void loadNextDataFromApi ( int page ) { if ( presenter != null ) { presenter . getMoreSellerPageProductData ( sellerId ) ; } }
public void onError ( ) { staticUtil . removeView ( imageContainer ) ; }
private boolean isBeta ( ) { return versionDescriptionProvider . getVersionDescription ( ) . contains ( "beta" ) ; }
public List < TranslationRowData > getTranslations ( ) { return mTranslations ; }
public void openFile ( String tempFilename ) throws ConversionException { boolean error = ZipWriter . create ( tempFilename ) ; if ( error ) { throw new ConversionException ( ConversionStatus . CANNOT_WRITE_EPUB ) ; } }
public void setPartOfSpeech ( List < String > partOfSpeech ) { mPartOfSpeech = partOfSpeech ; }
public AboutBuilder addPrivacyPolicyAction ( Intent intent ) { return addAction ( R . mipmap . privacy , R . string . privacy , util . clickIntent ( intent ) ) ; }
public void onClick ( View v ) { if ( ( ( CheckBox ) v ) . isChecked ( ) ) graphView . addSeries ( accSeries ) ; else graphView . removeSeries ( accSeries ) ; }
private boolean isTorchOn ( ) { if ( isAccSrvcRunning ( ) ) { return TorchieQuick . getInstance ( ) . getTorchStatus ( ) ; } else { return TorchManager . getInstance ( SettingsUtils . getTorchSource ( this ) , true ) . getStatus ( ) ; } }
public boolean isAvailableNet ( ) { ConnectivityManager cm = ( ConnectivityManager ) mContext . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; return cm != null && cm . getActiveNetworkInfo ( ) != null && cm . getActiveNetworkInfo ( ) . isConnected ( ) ; }
public void setEpisodeProductionCode ( int episodeProductionCode ) { mEpisodeProductionCode = episodeProductionCode ; }
public static String fromLocalZonedDateTime ( @ LocalZonedDateTime ZonedDateTime zonedDateTime ) { LocalDateTime dateTime = LocalDateTime . ofInstant ( zonedDateTime . toInstant ( ) , LocalZonedDateTime . BRUSSELS ) ; return dateTime . format ( DateTimeFormatter . ISO_LOCAL_DATE_TIME ) ; }
public long getDuration ( ) { return player . getDuration ( ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; Log . v ( TAG , "onAttach ( ) " ) ; if ( context instanceof OnFragmentInteractionListener ) { host = ( OnFragmentInteractionListener ) context ; } }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseCurrentMetadata . Builder getResponseCurrentMetadataBuilder ( ) { bitField0_ | = 0x00020000 ; onChanged ( ) ; return getResponseCurrentMetadataFieldBuilder ( ) . getBuilder ( ) ; }
public void onClick ( View view ) { closeSpeedDial ( ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { audio_id = stream . readInt64 ( exception ) ; caption = RichText . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public String asString ( List < SelectChoice > items ) { return Joiner . on ( " , " ) . join ( FluentIterable . from ( items ) . transform ( ( item -> item . getValue ( ) ) ) ) ; }
public static String createProject ( Project project ) { Project . Saved savedProject = DaggerUtils . getComponent ( ApplicationProvider . < Application > getApplicationContext ( ) ) . projectImporter ( ) . importNewProject ( project ) ; return savedProject . getUuid ( ) ; }
public void setUpdatedBy ( int updatedBy ) { this . updatedBy = updatedBy ; }
public void clear ( ) { mContacts . clear ( ) ; }
public static boolean canHandleIntent ( Context context , @ NonNull Intent intent ) { return intent . resolveActivity ( context . getPackageManager ( ) ) != null ; }
public static void cacheModOf ( ) { subscriptions . edit ( ) . putString ( Authentication . name + "mod" , Reddit . arrayToString ( modOf ) ) . apply ( ) ; }
public void setAppListOrientation ( int orientation ) { checkData ( ) . setAppListOrientation ( orientation ) ; }
public void onReceive ( Context context , Intent arg1 ) { if ( connectionReceiverListener != null ) { connectionReceiverListener . onNetworkConnectionChanged ( NetworkAvailability . isConnected ( context ) ) ; } }
public void setDecayTime ( float time ) { if ( time < MIN_TIME ) time = MIN_TIME ; mDecayRate = 1 . 0f / ( SynthEngine . FRAME_RATE * time ) ; }
public void run ( ) { discover ( ) ; handler . postDelayed ( nearbyPeersChecker , PEER_DISCOVERY_INTERVAL ) ; }
public void onFailure ( @ NonNull Exception e ) { errorListener . onError ( ) ; }
private boolean isNewSpreadsheet ( String spreadsheetId , String mainSheetTitle ) throws IOException { List < List < Object >> sheetCells = getSheetCells ( spreadsheetId , StringUtils . ellipsizeBeginning ( mainSheetTitle ) ) ; return sheetCells == null || sheetCells . isEmpty ( ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; initViewModel ( ) ; setupFragment ( ) ; setupListeners ( ) ; initAnimations ( mBinding . playPauseButton . getTranslationX ( ) ) ; }
public void setCreatedBy ( int createdBy ) { this . createdBy = createdBy ; }
public void rescan ( ) { if ( serviceUtils . checkIfServiceIsRunning ( FixerTrackService . class . getName ( ) ) ) { mOnMessage . setValue ( R . string . no_available ) ; } else { updateTrackList ( ) ; } }
private static int [ ] zzUnpackRowMap ( ) { int [ ] result = new int [ 253 ] ; int offset = 0 ; offset = zzUnpackRowMap ( ZZ_ROWMAP_PACKED_0 , offset , result ) ; return result ; }
public Subscriptions getSubscriptionsTable ( ) { return mSubscriptionsTable ; }
public int getClipWidth ( ) { return clipRect . width ( ) ; }
public void addOnScrollListener ( OnScrollListener listener ) { if ( mScrollListeners == null ) { mScrollListeners = new ArrayList < OnScrollListener > ( ) ; } mScrollListeners . add ( listener ) ; }
public ItemBuilder date ( Date date ) { this . date = date ; return this ; }
public void sortsSubreddits ( ) { assertThat ( UserSubscriptions . sort ( subreddits ) , is ( new ArrayList <> ( Arrays . asList ( "frontpage" , "all" , "random" , "friends" , "mod" , "aaa" , "xyy" , "xyz" ) ) ) ) ; }
public void setText ( int start ) { start_num = start ; removeHighlight ( ) ; updateCandidateWidth ( ) ; if ( getCandNum ( ) > 0 ) { invalidate ( ) ; } }
public List < Event > apply ( List < Event > events ) { return StreamSupport . stream ( events ) . sorted ( ) . collect ( Collectors . toList ( ) ) ; }
public VH onCreateViewHolder ( ViewGroup parent , int viewType ) { final VH holder = super . onCreateViewHolder ( parent , viewType ) ; if ( holder instanceof SwipeableItemViewHolder ) { ( ( SwipeableItemViewHolder ) holder ) . setSwipeStateFlags ( STATE_FLAG_INITIAL_VALUE ) ; } return holder ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; mIOweAdapter = new IOweAdapter ( this , new ArrayList < PersonDebt > ( 0 ) ) ; }
public void onPause ( ) { super . onPause ( ) ; mEditorWasPaused = true ; mIsKeyboardOpen = false ; }
public void setEstado ( EstadoTorre estadoTorre ) { this . estadoTorre = estadoTorre ; }
public void clickLogIn_opensBuySellUi ( ) throws Exception { onView ( withId ( R . id . logggin ) ) . perform ( click ( ) ) ; }
public static Snackbar make ( @ NonNull View view , @ StringRes int resId , @ BaseTransientBottomBar . Duration int duration ) { return make ( view , view . getResources ( ) . getText ( resId ) , duration ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . bitcoin_card , parent , false ) ; return new MyViewHolder ( itemView ) ; }
public void processBytes ( byte [ ] value ) { sentenceIterator . addBytes ( value ) ; while ( sentenceIterator . hasNext ( ) ) { processSentence ( sentenceIterator . next ( ) ) ; } }
public PositionData getPosition ( ) { return new PositionData ( ( scenery . getX ( ) * 10 ) + characterX , ( scenery . getY ( ) * 10 ) + characterY ) ; }
public Integer getHu ( ) { return hu ; }
public void setSelection ( boolean selected ) { if ( selected ) { communityBackground . setBackgroundResource ( CommunityUtils . getFilledBackground ( mCommunity . getCommunityId ( ) ) ) ; } else { communityBackground . setBackgroundResource ( CommunityUtils . getBorder ( mCommunity . getCommunityId ( ) ) ) ; } }
public int getCount ( ) { return NUM_ITEMS ; }
public void onErrorResponse ( VolleyError error ) { Toast . makeText ( Group . this , error . getMessage ( ) , Toast . LENGTH_LONG ) . show ( ) ; }
public ThreadFragment ( ) { posts = new ArrayList <> ( ) ; gifImageViews = new ArrayList <> ( ) ; webViewList = new SparseArray <> ( ) ; }
public void wakeUpScreenForPause ( ) { int flags = PowerManager . ACQUIRE_CAUSES_WAKEUP | PowerManager . FULL_WAKE_LOCK | PowerManager . ON_AFTER_RELEASE ; PowerManager . WakeLock temporaryWakeLock = mPowerManager . newWakeLock ( flags , "Debatekeeper - pause" ) ; temporaryWakeLock . acquire ( 3000 ) ; }
public void onClick ( DialogInterface dialog , int item ) { buttonProject ( projects . get ( item ) . slug ) ; }
public String getEncoding ( ) throws RemoteException { return ( String ) ( ( EncodingOption ) connections . get ( connectionClutch ) . getSettings ( ) . findOptionByKey ( "encoding" ) ) . getValue ( ) ; }
public ReplayFloatingActionButton ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void attachView ( @ NonNull RegionMvvm . View view , @ Nullable Bundle savedInstanceState ) { super . attachView ( view , savedInstanceState ) ; }
public boolean canScroll ( ) { return mScrollView != null ; }
public FormUpdateManager providesFormUpdateManger ( Scheduler scheduler , SettingsProvider settingsProvider , Application application ) { return new SchedulerFormUpdateAndSubmitManager ( scheduler , settingsProvider , application ) ; }
public void setSourceLangAutoDetect ( boolean status ) { isSourceLangAutoDetect = status ; appPrefsEditor . putBoolean ( "isSourceLangAutoDetect" , isSourceLangAutoDetect ) ; appPrefsEditor . apply ( ) ; }
public boolean start ( ) { try { mCurrentMediaPlayer . start ( ) ; return true ; } catch ( IllegalStateException e ) { return false ; } }
public void updateHighlights ( ) { if ( ssReadHighlights != null ) { ssReadViewBridge . setHighlights ( ssReadHighlights . highlights ) ; } }
public static Executor getInstance ( ) { return Optional . fromNullable ( sThreadExecutor ) . or ( new ThreadExecutor ( ) ) ; }
public String getImageURLThumbnail ( ) { final AttachmentEntity attachmentWithKey = getAttachmentWithKey ( AttachmentEntity . KEY_BEFORE ) ; if ( attachmentWithKey != null ) { attachmentWithKey . getThumbnailImageURL ( ) ; } return null ; }
public Date getCreatedAt ( ) { return event . getCreatedAt ( ) ; }
public void run ( ) { Toast . makeText ( getApplication ( ) , R . string . msg_import_keypair_complete , Toast . LENGTH_LONG ) . show ( ) ; }
public void copyFile ( String source , String target ) throws IOException { Files . copy ( Paths . get ( source ) , Paths . get ( target ) , StandardCopyOption . REPLACE_EXISTING ) ; }
public DraftDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public void call ( MenuListActivity activity ) { activity . startActivityForResult ( new Intent ( activity , PreferencesActivity . class ) , ACTIVITY_CHANGE_PREFERENCES ) ; }
public void onPause ( ) { Log . d ( TAG , "onPause" ) ; mScannerView . stopCamera ( ) ; super . onPause ( ) ; }
public RoboRadioButton ( Context context ) { super ( context ) ; init ( null ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Icepick . restoreInstanceState ( this , savedInstanceState ) ; }
private void openInfo ( boolean useBackStack ) { Fragment f = new InfoFragment ( ) ; startFragment ( f , useBackStack ) ; selectNavigationDrawerItem ( R . id . nav_about_us ) ; }
public String getThumb ( ) { return mThumb ; }
public static String getPassword ( Context context ) { context = MyApplication . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( "password" , "" ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; hideAppBar ( ) ; }
public int compare ( StatItem lhs , StatItem rhs ) { return rhs . getVerb ( ) . getForm1 ( ) . compareTo ( lhs . getVerb ( ) . getForm1 ( ) ) ; }
private File getLogFile ( ) { String root = Environment . getExternalStorageDirectory ( ) . toString ( ) ; return new File ( root , LOG_FILE_NAME ) ; }
public void run ( ) { updateMessageStateAndIdInternal ( random_id , _oldId , newId , date ) ; }
public void setJointVelocity ( LbrJoint joint , float velocity ) { mVrep . simxSetJointTargetVelocity ( mClientId , mJointMap . get ( joint ) , velocity , simx_opmode_oneshot ) ; }
public void onClick ( View arg0 ) { enLyd . start ( ) ; }
private void hideStyles ( ) { if ( isMarkersVisible ( ) ) { ViewUtils . slideOutDown ( mContext , styleCard ) ; } }
public void onItemLongClick ( View view , int position ) { mFaces . remove ( position ) ; mItems . remove ( position ) ; writeItems ( ) ; mListAdapter . setmData ( mFaces , mItems ) ; mListAdapter . notifyDataSetChanged ( ) ; }
public Schedule build ( ) { return new Schedule ( day , date , type , yesterday , tomorrow , blocks , times ) ; }
private void restoreCurrentSectionID ( ) { currentSectionIDPos = data . getInt ( "sectionID" , currentSectionIDPos ) ; Log . d ( "Book" , "Loaded section " + currentSectionIDPos ) ; }
public static String getSharedString ( Context ctx , String key ) { SharedPreferences preferences = ctx . getSharedPreferences ( LocalConstants . SHARED_PREFERENCE_CONTIGOAPP , Context . MODE_PRIVATE ) ; return preferences . getString ( key , "" ) ; }
public SettingsView provideView ( SettingsViewImpl view ) { return view ; }
public static void setSelftextEnabled ( String sub , boolean checked ) { prefs . edit ( ) . putBoolean ( "cardtextenabled" + sub . toLowerCase ( ) , checked ) . apply ( ) ; }
public void onSingleClick ( View v ) { ProUtil . proUpgradeMsg ( Settings . this , R . string . settings_support_slide ) . setNegativeButton ( R . string . btn_no_thanks , ( dialog , whichButton ) -> dialog . dismiss ( ) ) . show ( ) ; }
public NotificationsHelper ( Context mContext ) { this . mContext = mContext ; }
public boolean isLandscapeOrientation ( ) { return mPrefs . getBoolean ( Constants . PREF_LANDSCAPE_ORIENTATION , false ) ; }
public void onPlayFromMediaId ( String mediaId , Bundle extras ) { LogHelper . d ( TAG , "playFromMediaId mediaId : " , mediaId , " extras = " , extras ) ; mQueueManager . setQueueFromMusic ( mediaId ) ; handlePlayRequest ( ) ; }
private void updateModel ( ) { RelativePoint old = mRelPointer ; mRelPointer = createRelativePoint ( mPointer ) ; if ( old != null && mRelPointer . equals ( old ) ) { return ; } computeCurrentSelection ( ) ; notifySelectionChanged ( ) ; }
public void testIsWPCOMString6 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( wpcomAddress6 ) ) ; }
public void clear ( ) { songs . clear ( ) ; queue . clear ( ) ; originalQueue . clear ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; getPresenterDelegate ( ) . onDestroyView ( ) ; }
public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { UIUtils . handleUri ( context , request . getUrl ( ) ) ; return true ; }
public void onPause ( ) { super . onPause ( ) ; stopPlayer ( ) ; }
public TimelineView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; mContext = context ; init ( attrs ) ; }
public ReturnObject doInBackground ( Void . . . voids ) { return new ReturnObject ( getDeviceList ( mContext . get ( ) ) ) ; }
public String toString ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSInput o : inputs ) { strOut . append ( o . toString ( ) ) ; } return strOut . toString ( ) ; }
public PhotoSizeEntity setM ( String m ) { this . m = m ; return this ; }
public Date getIncident_date ( ) { return incident_date ; }
private void scheduleUpdate ( ) { if ( ! isScheduled ( ) ) { Timer . schedule ( this , FADE_INTERVAL ) ; } }
private static boolean isHexChar ( char c ) { return ( c >= 0 && c <= 9 ) || ( c >= 'a' && c <= 'f' ) || ( c >= 'A' && c <= 'F' ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_share : shareAttraction ( ) ; break ; } return super . onOptionsItemSelected ( item ) ; }
public void onClick ( View v ) { selectPhotoAttachment ( ) ; toggleAttachmentView ( ) ; }
public void changeSavedLocation ( String oldLocation , String newLocation ) { if ( oldLocation . equals ( getDefaultLocation ( ) ) ) { setDefaultLocation ( newLocation ) ; } removeSavedLocation ( oldLocation ) ; addSavedLocation ( newLocation ) ; }
public void load ( ) { showProgressDialog ( mActivity . getString ( R . string . loading_text ) ) ; loadProfilePhoto ( ) ; loadProfileInfo ( ) ; hideProgressDialog ( ) ; }
public void displayData ( List < Country > countries ) { if ( Objects . nonNull ( mAdapter ) ) { mAdapter . setData ( countries ) ; } }
public void deleteCategory ( int id ) { Log . i ( LOG_TAG , "Deleting category . . . " ) ; deleteChildren ( id ) ; Log . i ( LOG_TAG , "Category was deleted" ) ; updateList ( ) ; }
public static ViewAction orientationLandscape ( ) { return new OrientationChangeAction ( ActivityInfo . SCREEN_ORIENTATION_LANDSCAPE ) ; }
public int getOpacity ( ) { return 255 ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . layer_item , parent , false ) ; return new ViewHolder ( v ) ; }
private void showSuccessfulInstallSnackbar ( ) { WPSnackbar . make ( mContainer , getString ( R . string . plugin_installed_successfully , mPlugin . getDisplayName ( ) ) , Snackbar . LENGTH_LONG ) . addToSequencer ( ) ; }
public int getItemCount ( ) { return mSensor . length ; }
public int compare ( Item lhs , Item rhs ) { return lhs . file . toLowerCase ( ) . compareTo ( rhs . file . toLowerCase ( ) ) ; }
public void onEventMainThread ( ServiceEvents . WaitingForLocation waitingForLocation ) { OnWaitingForLocation ( waitingForLocation . waiting ) ; }
private void initPermanentPrefs ( ) { binding . birthdayPermanentPrefs . setChecked ( mPrefs . isBirthdayPermanentEnabled ( ) ) ; binding . birthdayPermanentPrefs . setOnClickListener ( view -> changeBirthdayPermanentPrefs ( ) ) ; binding . birthdayPermanentPrefs . setDependentView ( binding . birthReminderPrefs ) ; }
public SectionViewHolder ( View view , int mTextResourceid ) { super ( view ) ; title = ( TextView ) view . findViewById ( mTextResourceid ) ; }
public static String getVersionNameForPackage ( @ Nullable final PackageInfo packageInfo ) { return packageInfo != null? packageInfo . versionName : null ; }
public void putBool ( boolean value , String key ) { SharedPreferences . Editor editor = mSharedPref . edit ( ) ; editor . putBoolean ( key , value ) ; editor . commit ( ) ; }
public I map ( final Cursor cursor ) { return mapping . create ( cursor ) ; }
public void onClick ( View view ) { showMessageDialog ( view . getContext ( ) , item . getTitle ( ) , item . getDetails ( ) ) ; }
public static int getKeyMapRangeFrom ( ) { return keyMapFrom ; }
public void onLoaderReset ( Loader < Cursor > loader ) { recipientsList . setAdapter ( null ) ; }
public LiveData < Integer > getBirthdayYear ( ) { return birthdayYear ; }
public boolean onLongClick ( View v ) { reloadWeb ( ) ; return true ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `total` INTEGER" ) ; }
public void setNumTotalWrong ( double numTotalWrong ) { this . numTotalWrong = numTotalWrong ; }
public boolean isEmpty ( ) { if ( mData == null ) return true ; else { if ( mData . getYValCount ( ) <= 0 ) return true ; else return false ; } }
public AccountHeader withSelectionListEnabledForSingleProfile ( boolean selectionListEnabledForSingleProfile ) { this . mSelectionListEnabledForSingleProfile = selectionListEnabledForSingleProfile ; return this ; }
public void onFailure ( Request request , IOException e ) { log . info ( "Failed to communicate with server : " + request . toString ( ) ) ; getTransactionBytes ( txId , listener ) ; }
public boolean isFirstStart ( ) { return sharedPref . getBoolean ( "pref_key_isFirstStart" , true ) ; }
public void divisionFewEnoughMedals ( ) { assertFewEnoughMedals ( GameType . DIVISION ) ; }
public void setOnSettingsChangeListenerShouldCallAll ( ) { verify ( mSettingsChangeListener , times ( 2 ) ) . onSettingsChange ( anyInt ( ) , anyInt ( ) , anyBoolean ( ) , anyBoolean ( ) ) ; }
public int getItemCount ( ) { return DataQuery . getInstance ( currentAccount ) . hints . size ( ) ; }
public float getDistance ( ) { return this . distance ; }
public LeveOrthogonal ( Point origin , Point extremity , boolean hasDAO ) { this ( origin , extremity , 0 . 0 , hasDAO ) ; }
public void onClick ( View v ) { sendIt ( v ) ; }
private void changeTtsPrefs ( ) { boolean isChecked = binding . ttsPrefs . isChecked ( ) ; binding . ttsPrefs . setChecked ( ! isChecked ) ; mPrefs . setTtsEnabled ( ! isChecked ) ; }
public static boolean supported ( ) { return ( Utils . existFile ( HOTPLUG_LAZY_PLUG ) ) ; }
public int getCode ( ) { return mCode ; }
public Builder setTimestamp ( long value ) { bitField0_ | = 0x00000004 ; timestamp_ = value ; onChanged ( ) ; return this ; }
public CardAndStack ( Card card , Stack stack ) { cardID = card . getID ( ) ; stackID = stack . getID ( ) ; }
public void insertAll ( List < Event > entities ) { cacheSource . insertAll ( entities ) ; }
public void onClick ( View view ) { add ( ) ; }
public int getLayoutId ( ) { return R . layout . list_item_notification_comp_level_starting ; }
public void onCreate ( ) { instance = this ; Utils . updateTheme ( this ) ; Utils . hideImagesFromGallery ( this ) ; createNotificationChannel ( ) ; super . onCreate ( ) ; }
public static boolean isUserInGutenbergRolloutGroup ( ) { return getBoolean ( DeletablePrefKey . GUTENBERG_DEFAULT_FOR_NEW_POSTS , false ) ; }
public File createOutputVideoFile ( ) throws IOException { last_video_file = storageUtils . createOutputMediaFile ( StorageUtils . MEDIA_TYPE_VIDEO , "" , false , "mp4" , new Date ( ) ) ; return last_video_file ; }
public boolean setVolume ( final float l , final float r ) { try { mCurrentMediaPlayer . setVolume ( l , r ) ; mLeftVolume = l ; mRightVolume = r ; return true ; } catch ( IllegalStateException e ) { return false ; } }
public void onDestroy ( ) { ad . destroyNativeAdView ( R . id . adView_about , a ) ; super . onDestroy ( ) ; }
public void close ( ) { setResultAndFinish ( ) ; }
public static void update ( int width , int height ) { update ( width , height , 1f ) ; }
public void onItemClick ( int id ) { if ( id == - 1 ) { finishFragment ( ) ; } else if ( id == done_button ) { onDonePressed ( ) ; } }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelableArrayList ( SAVE_DATA , mData ) ; }
public void onAnimationStart ( Animator p1 ) { emptyList . setVisibility ( View . GONE ) ; list . clear ( ) ; mAdapter . notifyDataSetChanged ( ) ; mAdapter . resetAnimation ( ) ; }
public static Typeface getTafseerTypeface ( @ NonNull Context context ) { if ( arabicTafseerTypeface == null ) { arabicTafseerTypeface = Typeface . createFromAsset ( context . getAssets ( ) , "iransans . ttf" ) ; } return arabicTafseerTypeface ; }
public void onBindViewHolder ( SettingViewHolder holder , int position ) { holder . loadSetting ( position ) ; }
public void onSave ( ) { if ( snakeGame != null ) { snakeGame . save ( ) ; snakeGame . interrupt ( ) ; } changeIrrelevantKeysVisibility ( View . VISIBLE ) ; phone . activateDelay ( ) ; }
public void linksHeavy ( ) throws IOException { test ( links ) ; }
private String [ ] selectColumns ( ) { return new String [ ] { "id" , "category" , "children" , "title" , "summary" , "command" , "priority" } ; }
public String getName ( ) { return login ; }
private void reDraw ( ) { scaleMarkerBitmaps ( ) ; invalidate ( ) ; }
public AboutBuilder addEmailLink ( int email , int subject ) { return addEmailLink ( context . getString ( email ) , context . getString ( subject ) , null ) ; }
public String getM ( ) { return m ; }
public void deleteUserFromChat ( final int chat_id , final TLRPC . User user , final TLRPC . ChatFull info ) { deleteUserFromChat ( chat_id , user , info , false ) ; }
public EventViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( context ) . inflate ( R . layout . fragment_carousel_cards_item , parent , false ) ; return new EventViewHolder ( v ) ; }
public boolean isNewPost ( ) { return mIsNewPost ; }
public void buildItem ( ILevelListItemView levelListItemView , int position ) { String name = levels . get ( position ) ; levelListItemView . setName ( name ) ; }
public CalendarDay getAccessibilityFocus ( ) { final int day = mTouchHelper . getFocusedVirtualView ( ) ; if ( day >= 0 ) { return new CalendarDay ( mYear , mMonth , day ) ; } return null ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . featuredStickersDidLoaded ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . stickersDidLoaded ) ; }
public void onBindHeaderItemViewHolder ( HeaderViewHolder holder , int localPosition ) { HeaderFooterItem item = mHeaderItems . get ( localPosition ) ; holder . textView . setText ( item . text ) ; holder . itemView . setBackgroundColor ( item . bgColor ) ; }
public boolean hasFeedUrl ( ) { return ! TextUtils . isEmpty ( feedUrl ) ; }
public int getColorSecondary ( ) { return getAttributeValue ( R . attr . colorSecondary ) ; }
public boolean isEulaAgreed ( ) { return mSharedPref . getBoolean ( EULA_AGREE , false ) ; }
public void onError ( ) { progressBar . setVisibility ( View . INVISIBLE ) ; avatar . setImageDrawable ( VectorDrawableCompat . create ( getResources ( ) , R . drawable . ic_avatar , null ) ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "autosend" , ! checked ) . apply ( ) ; }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable String label , @ NonNull String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
public void setVisible ( Boolean visible ) { this . visible = visible ; }
public LoadProductsByCategory ( Context context , String category , OnProductsLoaded callback ) { this . dao = ProductDao . instance ( context ) ; this . category = category ; this . callback = callback ; }
public String getConnectedTo ( ) throws RemoteException { return connectionClutch ; }
public Double getGpsLatDouble ( ) { return gpsLat != null ? Double . parseDouble ( gpsLat ) : 0 . 0 ; }
public void selectAllInDirectory ( ) { if ( ! isInActionMode || currentDir == null ) return ; selectedFiles . addAll ( currentDir . files ) ; postNotifyDataSetChanged ( ) ; }
public void onScanPerformed ( IntentResult scanResult ) { if ( scanResult == null || scanResult . getFormatName ( ) == null ) { return ; } handleOpenPgp4Fpr ( scanResult . getContents ( ) ) ; }
public static RemoveFromPlaylistDialog create ( ArrayList < PlaylistSong > songs ) { RemoveFromPlaylistDialog dialog = new RemoveFromPlaylistDialog ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "songs" , songs ) ; dialog . setArguments ( args ) ; return dialog ; }
public boolean onUnbind ( Intent intent ) { if ( ! changingConfiguration ) { Log . d ( LogTag . LOG_HOST_SERVICE , "Starting player service in foreground" ) ; inForeground = true ; updatePlayerNotification ( ) ; } return true ; }
public void onStop ( ) { super . onStop ( ) ; disposables . clear ( ) ; }
public void run ( ) { ImageView image = ( ImageView ) findViewById ( R . id . imageView ) ; image . setImageResource ( colour ) ; }
public static String getRingbackSoundFile ( ) throws NotInitedException { if ( Util . isNullOrEmpty ( mPauseSoundFile ) ) { throw new NotInitedException ( ) ; } return mRingbackSoundFile ; }
public EmojiEditText ( Context context ) { super ( context ) ; }
public void showProgress ( ) { progress . setVisibility ( View . VISIBLE ) ; }
public void onProviderEnabled ( String provider ) { }
static public AccountFormFragment newInstance ( ) { AccountFormFragment f = new AccountFormFragment ( ) ; f . mAccountsDbAdapter = GnuCashApplication . getAccountsDbAdapter ( ) ; return f ; }
public boolean reload ( ) { load ( ) ; return this . data . toString ( ) . isEmpty ( ) ; }
public int compare ( ContactSort lhs , ContactSort rhs ) { return lhs . getName ( ) . compareTo ( rhs . getName ( ) ) ; }
private void verifyAccount ( UserLogin u ) { setLoginState ( true ) ; NSStringRequest stringRequest = buildUserAuthRequest ( u . nationId , u ) ; stringRequest . setUserData ( u ) ; executeRequest ( stringRequest ) ; }
public String next ( ) { return nextSlide ; }
public void onUIChange ( EventBusController . UIControlEvent event ) { if ( event . message . equals ( EventBusController . UIControlEvent . INTRO_TO_ACCOUNT ) ) { drawerLayout . openDrawer ( Gravity . LEFT ) ; } }
public synchronized void startStopPingWorker ( @ NonNull Context ctx , @ NonNull AddressItem a ) { if ( workerInstances . get ( a . _id ) == null ) { startPingWorker ( ctx , a ) ; } else { stopPingWorker ( a ) ; } }
public static XYBounds minMax ( List < XYSeries > seriesList ) { return minMax ( null , seriesList ) ; }
private void addTouch ( MotionEvent event ) { int index = event . getActionIndex ( ) ; primaryId = event . getPointerId ( index ) ; addTouchReference ( event , primaryId , index ) ; pieMenuVisible = true ; }
public Renderer getBoundingBoxDrawer ( ) { return getDrawer ( null , false , false , false , false ) ; }
private void setupFirebase ( ) { mAuth = FirebaseAuth . getInstance ( ) ; mAuth . getCurrentUser ( ) ; }
public boolean getSpeedAlertEnabled ( ) { return mSharedPref . getBoolean ( SPEED_ALERT_ENABLED , false ) ; }
public static void showAbout ( JalkametriActivity parent ) { LogUtil . i ( TAG , "Showing legal disclaimer" ) ; Intent i = new Intent ( parent , AboutActivity . class ) ; parent . startActivity ( i ) ; }
public void setCurrenciesFilter ( int filter ) { generalPrefs . edit ( ) . putInt ( "pref_currencies_filter" , filter ) ; }
public void setPosition ( float x , float y ) { mPositionX = x ; mPositionY = y ; }
private static void UpdatePost ( MoodlePost old_post , MoodlePost new_post ) { old_post = new_post ; old_post . save ( ) ; }
public void showInitialSearchInPlacesSection ( Cursor cursor ) { if ( searchPlacesFragment . isViewCreated ( ) ) { searchPlacesFragment . setData ( cursor ) ; searchPlacesFragment . showList ( ) ; searchPlacesFragment . showHistoryHeaders ( ) ; } }
public void setUpdated ( Integer updated ) { this . updated = updated ; }
public PlaceAndPlate createFromDto ( PlaceAndPlateDto dto ) { return new PlaceAndPlate ( dto , formatHelper ) ; }
public AwardWriter awardWriter ( Database db ) { return Mockito . mock ( AwardWriter . class ) ; }
public boolean isDiscoverPost ( ) { return ! TextUtils . isEmpty ( discoverJson ) ; }
public DaoSearchHistoryFinder ( DatabaseOpenHelper openHelper ) { this . dao = openHelper . getPlaceDao ( ) ; }
private static int setMinAltitude ( BRecordI bRecord , int minAltitude ) { if ( bRecord . getAltitude ( ) < minAltitude ) { minAltitude = bRecord . getAltitude ( ) ; } return minAltitude ; }
public void onPanelCollapsed ( View panel ) { if ( mIsInAyahMode ) { endAyahMode ( ) ; } mSlidingPanel . hidePane ( ) ; }
public ResCdpParam . Result getCDPParam ( ) { return getSActivity ( ) . mCdpParam ; }
public BigInteger shiftRight ( Integer n ) { if ( n < 0 ) { return lShift ( - n ) ; } else { return rShift ( n ) ; } }
public Object add ( ) { Object object = super . add ( ) ; object . setMinimumHeight ( objectLength ) ; object . setMinimumWidth ( objectLength ) ; return object ; }
public void updateKeyboardTheme ( ) { final boolean themeUpdated = updateKeyboardThemeAndContextThemeWrapper ( if ( themeUpdated && mKeyboardView != null ) { mLatinIME . setInputView ( onCreateInputView ( mIsHardwareAcceleratedDrawingEnabled ) ) ; } }
public void onClick ( View v ) { if ( current != 1 ) mPager . setCurrentItem ( 1 ) ; }
public boolean onUnbind ( Intent intent ) { Logger . logVerbose ( LOG_TAG , "onUnbind" ) ; if ( mTermuxSessionClient != null ) unsetTermuxSessionClient ( ) ; return false ; }
public void onCommunitySelectionChanged ( List < String > communities ) { setCommunities ( communities ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . bind ( at ( position ) ) ; super . onBindViewHolder ( holder , position ) ; }
public List < ReviewEntity > getReviews ( ) { return reviews ; }
public void getKeyByValueIsEqualTest ( ) { assertThat ( getKeyByValue ( map , "AnkiDroid" ) , is ( 20 ) ) ; }
public void resetButtonBackOnClickListener ( ) { binding . miButtonBack . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { performButtonBackPress ( ) ; } } ) ; }
public void onWindowFocusChanged ( boolean hasFocus ) { if ( hasFocus ) { boolean enabled = NetMonPreferences . getInstance ( this ) . isServiceEnabled ( ) ; ( ( SwitchPreference ) findPreference ( NetMonPreferences . PREF_SERVICE_ENABLED ) ) . setChecked ( enabled ) ; } }
public void shootBall ( LinearVisionOpMode opMode ) { shootBalls ( true ) ; waitFor ( opMode , RobotConstants . shotWaitPeriod ) ; intakeBalls ( true ) ; waitFor ( opMode , 3 ) ; intakeBalls ( false ) ; shootBalls ( false ) ; }
public boolean hasSource ( ) { return ( ( bitField0_ & 0x00000040 ) == 0x00000040 ) ; }
private void openFoundObject ( int position ) { ITetroidObject found = ( ITetroidObject ) listAdapter . getItem ( position ) ; mMainView . openFoundObject ( found ) ; }
public PreferencesHelper getPreferencesHelper ( ) { if ( mPreferencesHelper == null ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( this ) ; mPreferencesHelper = new PreferencesHelper ( sharedPreferences , this ) ; } return mPreferencesHelper ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_VODKA , null , null , null , null ) ; }
private Bitmap getBase64Image ( String base64 ) { byte [ ] src = Base64 . decode ( base64 , Base64 . DEFAULT ) ; return BitmapFactory . decodeByteArray ( src , 0 , src . length ) ; }
public static boolean isThrottling ( ) { long lastSync = Preferences . getLastSyncTimestamp ( ) ; float diff = ( System . currentTimeMillis ( ) - lastSync ) / 1000 ; return ( lastSync >= 0 && diff < MAX_SYNC_DELAY ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( ! ( context instanceof OnCardDataClassClickCallback ) ) throw new RuntimeException ( "Parent doesn't implement fragment callback interface" ) ; }
private int [ ] colorToRGB ( int color ) { return new int [ ] { Color . red ( color ) , Color . green ( color ) , Color . blue ( color ) } ; }
public void onCreate ( Bundle savedInstanceState ) { interactionScope . set_in_noif_mode ( true ) ; super . onCreate ( savedInstanceState ) ; }
public void onClick ( View v ) { hideKeyBoard ( v ) ; onLocationButtonClicked ( ) ; }
public static int getTopLevel ( GameType gameType ) { return create ( gameType , 1234 ) . getTopLevel ( ) ; }
public Engine onCreateEngine ( ) { return new OpenGLESEngine ( ) ; }
public void setAlliancePoints ( int alliancePoints ) { this . alliancePoints = alliancePoints ; }
public void setUp ( ) { deckNameComparator = new DeckNameComparator ( ) ; }
public SimpleEntry ( Entry < ? extends K , ? extends V > entry ) { this . key = entry . getKey ( ) ; this . value = entry . getValue ( ) ; }
private void notifyStatus ( final String receiverId ) { final Intent notifyIntent = new Intent ( this , NotifyService . class ) ; notifyIntent . putExtra ( MessageItemKeys . RECEIVER_ID , receiverId ) ; startService ( notifyIntent ) ; }
public boolean getBookmarksGroupedByTags ( ) { return mPrefs . getBoolean ( Constants . PREF_GROUP_BOOKMARKS_BY_TAG , false ) ; }
public ArrayList < Room > getRooms ( ) { return rooms ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , CC_taxi_upto6 . class ) ; startActivity ( inte ) ; }
private void enableMobile ( FakeSystemFacade systemFacade ) { systemFacade . activeNetworkType = ConnectivityManager . TYPE_MOBILE ; systemFacade . isMetered = true ; }
private void cancelLoaderTask ( ) { if ( compositionTask != null ) { compositionTask . removeListener ( loadedListener ) ; compositionTask . removeFailureListener ( failureListener ) ; } }
public void addTest ( ) { try { lastPlaces . add ( new MyPlace ( 0 , "desc" , "asdaf" ) ) ; } catch ( Exception e ) { Assert . fail ( ) ; } }
public String toString ( ) { return "PointD , x : " + x + " , y : " + y ; }
public JSONArray getHeader ( ) { synchronized ( mNoteJSON ) { return mNoteJSON . optJSONArray ( "header" ) ; } }
public Void execute ( SFTPClient client ) throws IOException { try { client . mkdir ( SshClientUtils . extractRemotePathFrom ( path ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return null ; }
private TermuxWidgetAppSharedPreferences ( @ Nonnull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
public String getAuthor ( boolean cryptedValue ) { return ( cryptedValue ) ? author : decryptedAuthor ; }
public void onClick ( View view ) { createIntent . setClass ( TransactionListActivity . this , CreatePurchase . class ) ; startActivity ( createIntent ) ; menu . toggle ( ) ; }
private void disconnect ( String reason ) { if ( detach ( ) ) shutdown ( reason ) ; }
public void show ( int delay ) { try { anim . scaleIn ( floatingActionButton , delay , 400 , "fabIn" ) ; } catch ( NullPointerException e ) { Log . i ( "showFab" , "Fab is not initialized" ) ; } }
public PhotoSizeEntity setS ( String s ) { this . s = s ; return this ; }
public static long getLastSyncTimestamp ( Context context ) { return getLong ( context , "pref_last_sync" , - 1 ) ; }
private void makeLeaderboardVisible ( ) { if ( leaderBoardBar != null ) { leaderBoardBar . animate ( ) . alpha ( 1 ) . setDuration ( 500 ) . setInterpolator ( new DecelerateInterpolator ( 2 . 0f ) ) ; } }
public void onItemClicked ( SortDialogAdapter . ViewHolder holder , int position ) { holder . updateItemColor ( selectedSortingOrder ) ; performSelectedSearch ( position ) ; bottomSheetDialog . dismiss ( ) ; isBottomDialogShown = false ; }
private void insertCategoryInTransaction ( CategoryTree < Category > tree ) { for ( Category category : tree ) { reInsertCategory ( category ) ; if ( category . hasChildren ( ) ) { insertCategoryInTransaction ( category . children ) ; } } }
public ArrayOfService Func ( ) throws java . lang . Exception { return GetListeDepartement ( ) ; }
public VersionedRook storeBook ( File file , String fileName ) throws IOException { SystemClock . sleep ( SLEEP_FOR_STORE_BOOK ) ; return localDbRepo . storeBook ( file , fileName ) ; }
public void setUp ( ) throws Exception { MockitoAnnotations . initMocks ( this ) ; MainApplication . setContext ( Robolectric . application ) ; }
public static MFDatePicker newInsance ( Fragment fragment ) { MFDatePicker mfDatePicker = new MFDatePicker ( ) ; mfDatePicker . mListener = ( OnDatePickListener ) fragment ; return mfDatePicker ; }
public String exec ( ExecutePack pack ) { pack . context . startActivity ( Tuils . openFile ( new File ( Tuils . getFolder ( ) , NotificationManager . PATH ) ) ) ; return null ; }
private void runUpdates ( String [ ] updates , SQLiteDatabase db ) { for ( String createSQL : updates ) { LogUtil . d ( DBAdapter . TAG , createSQL ) ; db . execSQL ( createSQL ) ; } }
private void setRealmAdapter ( RealmResults < Book > books ) { RealmBooksAdapter realmBooksAdapter = new RealmBooksAdapter ( this . getApplicationContext ( ) , books , true ) ; booksAdapter . setRealmAdapter ( realmBooksAdapter ) ; booksAdapter . notifyDataSetChanged ( ) ; }
public void update ( int criteria ) { if ( recyclerCallback . update ( criteria ) ) { ArrayList < File > list = getItems ( ) ; clear ( ) ; addAll ( list ) ; } }
public ArrayList < Song > getDataSet ( ) { return dataSet ; }
public Object execute ( Object o , Connection c ) { c . service . doDirtyExit ( ) ; return null ; }
public long getSlideId ( ) { return getArguments ( ) . getLong ( ARGUMENT_ID ) ; }
public void moveToDate ( Date date ) { moveToDateTime ( CalendarHelper . convertDateToDateTime ( date ) ) ; }
public void deleteHighScores ( ) { scores . deleteScores ( ) ; gameLogic . deleteStatistics ( ) ; currentGame . deleteAdditionalStatisticsData ( ) ; showToast ( getString ( R . string . statistics_button_deleted_all_entries ) ) ; finish ( ) ; startActivity ( getIntent ( ) ) ; }
public void onPageStarted ( WebView view , String url , Bitmap favicon ) { super . onPageStarted ( view , url , favicon ) ; pd . setMessage ( "Loading , just one second more . . . " ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_library_list , container , false ) ; }
public void onLongPress ( MotionEvent e ) { this . activity . handleLongPress ( ) ; }
public static void setDisplayNotification ( Context context , boolean value ) { SharedPreferences sharedPref = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = sharedPref . edit ( ) ; editor . putBoolean ( DISPLAY_NOTIFICATION_KEY , value ) ; editor . commit ( ) ; }
public ViewHolder ( @ NonNull View itemView ) { super ( itemView ) ; mItem = itemView . findViewById ( R . id . tvSampleText ) ; }
public SendDebugLogPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
private Vector < OCFile > sortFileList ( Vector < OCFile > files ) { FileSortOrder sortOrder = getSortOrder ( this , mFile ) ; return sortOrder . sortCloudFiles ( files ) ; }
public String toString ( ) { return "cameraCount : " + camera + " previewWidth : " + previewWidth + " previewHeight : " + previewHeight ; }
public DrawerBuilder withFooter ( View footerView ) { this . mFooterView = footerView ; return this ; }
public BlockedReader readerForBlocked ( Cursor cursor ) { return new BlockedReader ( context , cursor ) ; }
public void setChannelNumber ( Long channelNumber ) { this . channelNumber = channelNumber ; }
public void onFailure ( Throwable throwable ) { Log . e ( LOG_TAG , String . format ( "Get Current User list error : " ) ) ; getMvpView ( ) . notifyDataSetChanged ( ) ; }
public final void setTypeface ( TextView target , Typeface t ) { if ( t == null ) return ; int flags = target . getPaintFlags ( ) | Paint . SUBPIXEL_TEXT_FLAG ; target . setPaintFlags ( flags ) ; target . setTypeface ( t ) ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . bind ( mItems . get ( position ) ) ; }
public Loader < Message > onCreateLoader ( int id , Bundle args ) { int mid = getArguments ( ) . getInt ( ARG_ID , 0 ) ; AsyncContentLoader l = new AsyncContentLoader ( getSupportActivity ( ) , mid ) ; showLoadingAnimation ( ) ; return l ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `rule` ADD COLUMN `stop` INTEGER NOT NULL DEFAULT 0" ) ; }
public static String escapeRest ( String s ) { if ( ! str ( s ) ) return s ; return s . replaceAll ( "%" , "%25" ) . replaceAll ( "#" , "%23" ) . replaceAll ( " : " , "%3A" ) ; }
public int getCount ( ) { return _lesPlacements . size ( ) ; }
public ScryptParameters getDefaultInstanceForType ( ) { return defaultInstance ; }
public void addFile ( LXCFile file ) { CLITools . out . println ( "ADD ID " + file . id + " , internal " + idCounter ) ; usedIds . put ( file . id , idCounter ) ; idCounter ++ ; }
public int getCurrentSlidePosition ( ) { return binding . miPager . getCurrentItem ( ) ; }
public Server ( @ Nullable String serverName , int discoveryPort ) { super ( serverName , discoveryPort ) ; }
private List < TransactionInfo > getScheduledTransactions ( ) { return em . getAllScheduledTransactions ( ) ; }
public double getValue ( ) { if ( atomType != Atom . AtomType . INVALID ) { return parser . getVarVal ( varName ) ; } else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
private void updateMainButton ( int id ) { if ( currentFragment instanceof HomeFragment ) { Button button = ( Button ) currentFragment . getView ( ) . findViewById ( R . id . button_activate ) ; button . setText ( id ) ; } }
public String getText ( ) { return itemText . getText ( ) ; }
public int getDuration ( ) { return mLevel . definition . duration - mRemainingSeconds ; }
private void scrollToThisStory ( int position ) { if ( position >= 0 ) { this . gridview . smoothScrollToPosition ( position ) ; } }
private void refreshLeftMenu ( ) { VozCache . instance ( ) . menuItemList . clear ( ) ; createLeftMenu ( ) ; leftMenuAdapter . notifyDataSetChanged ( ) ; }
public static void saveFloatPreference ( Context context , String key , float value ) { SharedPreferences . Editor appPreferences = getDefaultSharedPreferences ( context . getApplicationContext ( ) ) . edit ( ) ; appPreferences . putFloat ( key , value ) . apply ( ) ; }
public String title ( ) { return Game . getVar ( titleId ) ; }
public final int getSongChildSortOrder ( ) { return mPreferences . getInt ( SONG_CHILD_SORT_ORDER , 0 ) ; }
public UtilitiesProviderInterface getUtilsProvider ( ) { return utilsProvider ; }
public LogActuator ( int priority , String tag , String message ) { this . priority = priority ; this . tag = tag ; this . message = message ; }
public Location ( String name , int x , int y , boolean active ) { this ( new Waypoint ( x , y ) , name , active ) ; }
public int hashCode ( ) { return width*31 + height ; }
public ActionMode startActionMode ( ActionMode . Callback callback ) { contextMenuCallback . onSelectionStarted ( LastTouchX , LastTouchY ) ; contextMenuShown = true ; return this . emptyActionMode ( ) ; }
public void onPause ( ) { super . onPause ( ) ; Services . location . removeListener ( this ) ; Services . alti . altitudeEvents . unsubscribe ( this ) ; }
public void setup ( ) { activity = createThemedActivity ( TestScreenContextActivity . class ) ; }
private OkHttpClient getHttpClient ( ) { if ( preferences . getDontReuseHTTPClient ( ) ) { return createHttpClient ( ) ; } if ( mHttpClient == null ) mHttpClient = createHttpClient ( ) ; return mHttpClient ; }
public static String getAyaPositionFileUrl ( String widthParam ) { return AYAHINFO_BASE_URL + "ayahinfo" + widthParam + " . zip" ; }
public GeneralSettingsPage scrollToConstraintProcessing ( ) { onView ( withId ( R . id . recycler_view ) ) . perform ( RecyclerViewActions . actionOnItem ( hasDescendant ( withText ( getTranslatedString ( R . string . constraint_behavior_title ) ) ) , scrollTo ( ) ) ) ; return this ; }
public boolean isUnfolded ( ) { return mIsUnfolded ; }
public void showBlurView ( ) { LRealtimeBlurView . setVisibility ( VISIBLE ) ; }
public int getSprinterCount ( ) { return mTankUnits ; }
public int getSectionForPosition ( int pos ) { if ( mSectionsEnabled ) { final T model = ( T ) getItem ( pos ) ; return mSectionCreator . getSectionPositionForModel ( model ) ; } return 0 ; }
public static String formatMilliSeconds ( final long milliSeconds ) { if ( milliSeconds >= 0 ) { return formatPositiveMilliSeconds ( milliSeconds ) ; } return " - " + formatPositiveMilliSeconds ( - 1 * milliSeconds ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( context , AkashiDetailActivity . class ) ; intent . putExtra ( "item_id" , itemId ) ; intent . putExtra ( "item_info" , itemImprovmentData ) ; context . startActivity ( intent ) ; }
public final void bindEvents ( long monthMillis , Cursor cursor ) { mCalendarView . swapCursor ( monthMillis , cursor ) ; }
public static MediaCodecInfo newPassthroughInstance ( String name ) { return new MediaCodecInfo ( name , null , null ) ; }
public void updateNotification ( final boolean notify , final List < String > conversations ) { updateNotification ( notify , conversations , false ) ; }
public boolean getColorModeEnabled ( ) { return mPrefs . getBoolean ( Name . ENABLE_COLOR_MODE , false ) ; }
private void bindProgress ( int percent ) { progressBar . setProgress ( percent* PERCENTSMOOTHINGFACTOR ) ; }
private String validateDate ( String date ) { String dataStr = General . standardFormatDate ( date ) ; if ( dataStr . length ( ) >= 10 ) { return dataStr . substring ( 0 , 10 ) ; } return date ; }
public boolean onDown ( @ NonNull MotionEvent e ) { return GestureController . this . onDown ( e ) ; }
public ColladaLoaderTask ( Activity parent , Uri uri , Callback callback ) { super ( parent , uri , callback ) ; }
public static FileAudioPlayer getInstance ( @ NonNull final Context context ) { if ( sInstance == null ) { sInstance = new FileAudioPlayer ( context ) ; } return sInstance ; }
private void parseCommand ( ) { this . command = GcodePreprocessorUtils . removeWhiteSpace ( command ) ; this . comment = GcodePreprocessorUtils . parseComment ( command ) ; if ( this . getHasComment ( ) ) this . command = GcodePreprocessorUtils . removeComment ( command ) ; }
public PhysicalActivityListAdapter ( Context context ) { this . context = context ; }
public void onClick ( View v ) { ( ( PreviewImageActivity ) getActivity ( ) ) . toggleFullScreen ( ) ; }
public static boolean isValidJoinCode ( @ NonNull String joinCode ) { if ( ipAddressPattern . matcher ( joinCode ) . matches ( ) ) { return true ; } else { return joinCodePattern . matcher ( joinCode ) . matches ( ) ; } }
public Loader < QueueManager > onCreateLoader ( int arg0 , Bundle arg1 ) { Loader < QueueManager > loader = new LearnQueueManagerLoader ( appComponents ( ) , dbPath , filterCategoryId ) ; loader . forceLoad ( ) ; return loader ; }
public void exactly_matching_pitch_is_displayed ( ) throws IOException { isDisplayedCorrectly ( R . drawable . exact , "exact" , new PitchDifference ( E1 , 0 ) ) ; }
public Timeline getCurrentTimeline ( ) { return player . getCurrentTimeline ( ) ; }
private void showSignInForResultBasedOnIsJetpackAppBuildConfig ( Activity activity ) { if ( BuildConfig . IS_JETPACK_APP ) { ActivityLauncher . showSignInForResultJetpackOnly ( activity ) ; } else { ActivityLauncher . showSignInForResultWpComOnly ( activity ) ; } }
public void function ( Object obj ) { webfunc ( ) ; }
public FontStyle getPostFontStyle ( ) { return FontStyle . valueOf ( open ( ) . getString ( FONT_STYLE_POST , FontStyle . MediumPost . name ( ) ) ) ; }
public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( dao ) ; }
public static float getGridColumns ( Context context ) { return getDefaultSharedPreferences ( context ) . getFloat ( AUTO_PREF__GRID_COLUMNS , 3 . 0f ) ; }
public static synchronized FileExplorerHelper getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new FileExplorerHelper ( context ) ; } return mInstance ; }
public LottieFontViewGroup ( Context context ) { super ( context ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { Profile profile = dataSnapshot . getValue ( Profile . class ) ; showProfile ( profile ) ; }
public void onTransactionConfidenceChanged ( final WalletAccount pocket , final Transaction tx ) { if ( confidenceRelevant ) relevant . set ( true ) ; }
public void getUploadResultMessageTest ( ) { assertThat ( getExpectedResultMsg ( ) , is ( InstanceUploaderUtils . getUploadResultMessage ( getTestInstancesRepository ( ) , null , getTestUploadResult ( ) ) ) ) ; }
public boolean shouldOverrideUrlLoading ( WebView wevView , String url ) { return overrideUrlLoading ( wevView , url ) ; }
public void saveRestore ( ) { mPresenter . restore ( mPresenter . save ( ) ) ; }
public List < FormListItem > fetchFormList ( ) throws FormSourceException { throw new UnsupportedOperationException ( ) ; }
public void postProcess ( ) { if ( errors != null && ! errors . isEmpty ( ) ) { throw new MwException ( errors . get ( 0 ) ) ; } }
public DataManager getDataManager ( ) { return _dataManager ; }
public void select ( LiveData < HostEntity > item ) { mSelected . removeSource ( mSelectedSource ) ; mSelectedSource = item ; mSelected . addSource ( mSelectedSource , mSelected : : setValue ) ; }
public String getWorkflowId ( ) { return workflowId ; }
public void onServiceConnected ( ) { updateQueue ( ) ; updateCurrentSong ( ) ; updateIsFavorite ( ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { ActivityUtils . INSTANCE . closeSoftKeyboard ( getActivity ( ) ) ; }
public void run ( ) { sharingLocationsUI . clear ( ) ; sharingLocationsMapUI . clear ( ) ; stopService ( ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . liveLocationsChanged ) ; }
public void onPause ( ) { DCCManager . getInstance ( mActivity ) . removeDownloadListener ( this ) ; if ( mCurrentDialog != null ) { mCurrentDialog . cancel ( ) ; mCurrentDialog = null ; } }
public int getSimulateNIterations ( ) { return simulateNIterations ; }
public final NowPlayingScreen getNowPlayingScreen ( ) { int id = mPreferences . getInt ( NOW_PLAYING_SCREEN_ID , 0 ) ; for ( NowPlayingScreen nowPlayingScreen : NowPlayingScreen . values ( ) ) { if ( nowPlayingScreen . id == id ) return nowPlayingScreen ; } return NowPlayingScreen . CARD ; }
public boolean isVariable ( ) throws ExpressionFormatException { if ( atomType != Atom . AtomType . INVALID ) { return expressionLeft . isVariable ( ) || expressionRight . isVariable ( ) ; } else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
public LoginFlow chooseContinueWithWpCom ( ) { clickOn ( R . id . first_button ) ; return this ; }
private void requestLocationPermission ( ) { ActivityCompat . requestPermissions ( this , Constants . getLocationPermissions ( ) , Constants . PermissionRequestType . LOCATION . ordinal ( ) ) ; }
public void onProgressChanged ( SeekBar seekBar , final int progress , boolean fromUser ) { brightnessEditText . setText ( String . valueOf ( seekBar . getProgress ( ) ) ) ; }
public Log getLog ( ) { return log ; }
public Filter getFilter ( ) { return new WordFilter ( this , models ) ; }
public void onLocationChanged ( Location location ) { mLastLocation = location ; updateBox ( ) ; }
public ConfRemove ( DeckConfig conf ) { this . conf = conf ; }
private void logStatistic ( final Context context , final String info ) { firebaseAnalyticsProvider . logEvent ( context , FirebaseAnalyticsProvider . Event . WIDGET_USAGE , firebaseAnalyticsProvider . getBundle ( FirebaseAnalyticsProvider . Param . WIDGET_USAGE_INFO , info ) ) ; }
public void finish ( ) { overridePendingTransition ( 0 , R . anim . activity_fade_exit ) ; super . finish ( ) ; }
public void onDataSetChanged ( ) { NotesDbHelper notesDbHelper = new NotesDbHelper ( context ) ; notes = notesDbHelper . getAllNotes ( 0 ) ; }
public void onClick ( DialogInterface dialog , int which ) { view . nicknameEdit ( editText ) ; }
public void onReceive ( Context context , Intent intent ) { if ( context . getSharedPreferences ( "userData" , 0 ) . getBoolean ( "isOpen" , false ) ) { return ; } new updateThreads ( context ) . execute ( ) ; }
public void onStart ( ) { super . onStart ( ) ; VuzeEasyTracker . getInstance ( this ) . fragmentStart ( this , "VuzeProfileEdit" ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "discard_delete" , checked ) . apply ( ) ; }
public Collection < Word > getWordsFullSearch ( String query ) { String url = URL + "fullsearch/" + query ; return getWords ( url ) ; }
private boolean isSearching ( ) { Bundle args = myArguments ( ) ; return args != null && args . getLong ( ComposeMessage . EXTRA_MESSAGE , - 1 ) >= 0 ; }
public static boolean isUserPassphrase ( Context ctx ) { AccountManager am = AccountManager . get ( ctx ) ; Account acc = getDefaultAccount ( am ) ; return Boolean . parseBoolean ( am . getUserData ( acc , DATA_USER_PASSPHRASE ) ) ; }
public SearchPresenter ( SearchContract . View view , PostsRepository repository ) { this . view = view ; this . repository = repository ; entryCachedTags = new ArrayList <> ( ) ; }
public int getPostId ( ) { return JSONUtil . queryJSON ( mNoteJSON , "meta . ids . post" , 0 ) ; }
public void initialize ( ) { for ( BoardEntity entity : mEntities ) { entity . initialize ( ) ; } }
public static void setPreference ( Context context , String pref , boolean value ) { SharedPreferences . Editor editor = PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) ; editor . putBoolean ( pref , value ) . apply ( ) ; }
public void startForegroundTokenRenewalService ( ) { startService ( new Intent ( this , SpotifyCommunicatorService . class ) ) ; }
public String toString ( ) { return mSplitType . name ( ) + " of " + mAmount . toString ( ) + " in account : " + mAccountUID ; }
public void onBackPressed ( ) { FormController formController = Collect . getInstance ( ) . getFormController ( ) ; if ( formController != null ) { formController . getAuditEventLogger ( ) . flush ( ) ; formController . jumpToIndex ( startIndex ) ; } onBackPressedWithoutLogger ( ) ; }
public JsonBufferedArray getArray ( final int id ) { return get ( id ) . asArray ( ) ; }
public static double byte2MemorySize ( long byteNum , @ MemoryConstants . Unit int unit ) { if ( byteNum < 0 ) return - 1 ; return ( double ) byteNum / unit ; }
public String desc ( ) { return Game . getVar ( R . string . Earthroot_Desc ) ; }
public void onChannelRemoved ( IChannel channel ) throws RemoteException { mChannelListAdapter . updateChannels ( ) ; mChannelListAdapter . notifyDataSetChanged ( ) ; }
public void setPenaltyChargesOverdue ( Integer penaltyChargesOverdue ) { this . penaltyChargesOverdue = penaltyChargesOverdue ; }
public void onDestroy ( ) { if ( mReceiver != null ) { LocalBroadcastManager . getInstance ( getContext ( ) ) . unregisterReceiver ( mReceiver ) ; } super . onDestroy ( ) ; }
public void hide ( ) { startAnimation ( hide ) ; }
public void open ( ) throws SQLException { mDatabase = mDbHelper . getWritableDatabase ( ) ; }
public Binder < HeaderView > createBinder ( TagEntry viewObject ) { return new HeaderBinder ( viewObject ) ; }
public boolean onQueryTextSubmit ( String query ) { pesquisaDAO . inserir ( query ) ; return false ; }
public void KampusteHayatCard ( View v ) { Intent intent = new Intent ( getApplicationContext ( ) , category_frag5 . class ) ; startActivity ( intent ) ; }
public void didPressedCancelSendButton ( ChatMessageCell cell ) { MessageObject message = cell . getMessageObject ( ) ; if ( message . messageOwner . send_state != 0 ) { SendMessagesHelper . getInstance ( ) . cancelSendingMessage ( message ) ; } }
public com . google . protobuf . Any . Builder getPubkeyBuilder ( ) { onChanged ( ) ; return getPubkeyFieldBuilder ( ) . getBuilder ( ) ; }
public net . fortuna . ical4j . model . Date toDate ( ) { return timestamp == 0 ? null : new net . fortuna . ical4j . model . Date ( timestamp ) ; }
public EndlessMode ( final GameConfig gameConfig ) { this . gameConfig = gameConfig ; }
public static boolean isCurrent ( String eventTime ) { return TimeUtil . getDateTimeFromGmt ( eventTime ) > System . currentTimeMillis ( ) ; }
private void documentOrientationChanged ( final int orientationDegreesOffset ) { mDocumentOrientationDegrees = ( mDocumentOrientationDegrees + orientationDegreesOffset ) % 360 ; if ( mDocumentOrientationDegrees < 0 ) { mDocumentOrientationDegrees += 360 ; } renderPage ( false ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new ThreadMediaLoader ( getContext ( ) , masterSecret , recipient . getAddress ( ) , false ) ; }
public Integer getItemQuantity ( ) { return itemQuantity ; }
public static boolean rootAccess ( ) { SU su = getSU ( ) ; su . runCommand ( "mount" ) ; return ! su . denied ; }
public void addConvertCurrency ( String code ) { Set < String > convertCurrencies = getConvertCurrencies ( ) ; convertCurrencies . add ( code ) ; setConvertCurrencies ( convertCurrencies ) ; }
public synchronized long getWrittenSize ( ) { return writtenSize ; }
public void setPitch ( float pitch ) { mPitch = pitch ; if ( mId != - 1 ) { mSound . setPitch ( mId , mPitch ) ; } }
public boolean onScale ( ScaleGestureDetector detector ) { scaleFactor * = detector . getScaleFactor ( ) ; scaleFactor = Math . max ( 1f , Math . min ( scaleFactor , 10f ) ) ; invalidate ( ) ; return true ; }
public void setJid ( String jid ) { this . jid = jid ; }
private static void setBoolean ( PrefKey key , boolean value ) { setString ( key , Boolean . toString ( value ) ) ; }
public void toggleVisibilityIconMenu ( int id , boolean isVisible ) { actionMode . getMenu ( ) . findItem ( R . id . action_share ) . setVisible ( isVisible ) ; }
private int getScale ( ) { int scale = mCurrency . getDefaultFractionDigits ( ) ; if ( scale < 0 ) { scale = mAmount . scale ( ) ; } if ( scale < 0 ) { scale = 0 ; } return scale ; }
public DebateManager createDebateManager ( DebateFormat df ) { releaseDebateManager ( ) ; mDebateManager = new DebateManager ( df , mAlertManager ) ; mDebateManager . setBroadcastSender ( new GuiUpdateBroadcastSender ( ) ) ; return mDebateManager ; }
public boolean hasVersion ( ) { return ( ( bitField0_ & 0x00000200 ) == 0x00000200 ) ; }
public void setSize ( Integer size ) { this . size = size ; }
public void onClick ( DialogInterface dialog , int which ) { LocaleController . getInstance ( ) . applyLanguage ( selectedLanguage [ 0 ] , true ) ; rebuildAllFragments ( true ) ; }
public SharedContactView ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; initialize ( ) ; }
public int getCount ( ) { if ( ! active ) return 0 ; else return cursor . getCount ( ) ; }
private FilterListItem ( String value , String label ) { this . value = value ; this . label = label ; }
public AboutBuilder addWhatsappLink ( String name , String phone ) { return addLink ( R . mipmap . whatsapp , R . string . whastapp , util . openAddContact ( name , phone ) ) ; }
public static StoryListItemViewModel createItemListItemForStory ( Story story ) { return new StoryListItemViewModel ( story . getTitle ( ) , story . getDomain ( ) , story . getScore ( ) , story . getCommentCount ( ) , story . getDate ( ) ) ; }
private void setAdapter ( JSONArray programs ) { ProgramAdapter programAdapter = new ProgramAdapter ( this , filterPrograms ( programs ) , getOnClickCallback ( ) ) ; recyclerView . setAdapter ( programAdapter ) ; }
public void setUnreadOnly ( boolean unread ) { SharedPreferences . Editor editor = m_prefs . edit ( ) ; editor . putBoolean ( "show_unread_only" , unread ) ; editor . commit ( ) ; }
public String toString ( ) { return type . toString ( ) + " - " + value + " - " + timestamp ; }
public void testRenderFromModel ( ) { DistrictListElement element = mRenderer . renderFromModel ( mDistrict , new DistrictRenderer . RenderArgs ( 12 , true ) ) ; assertDistrictItem ( element , 12 , true ) ; }
public BlockAdapter ( @ NonNull Context context , @ Nullable List < Block > blocks ) { this . mContext = context ; this . blocks = blocks ; }
public void reset ( int nAddedToday ) { this . nAddedToday = nAddedToday ; this . tAdd = 0 ; }
public static String getAlbumInfoString ( @ NonNull final Context context , @ NonNull final Album album ) { int songCount = album . songCount ; return MusicUtil . buildInfoString ( album . getArtistName ( ) , MusicUtil . getSongCountString ( context , songCount ) ) ; }
public void onLoadingChanged ( boolean isLoading ) { if ( isLoading ) { mDataSource = mHtspSubscriptionDataSourceFactory . getCurrentDataSource ( ) ; if ( mDataSource == null ) { mDataSource = mRecordingDataSourceFactory . getCurrentDataSource ( ) ; } } }
public void setResults ( List < Result > results ) { this . results = results ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState ) ; Logger . info ( "WearFilesFragment onCreateView" ) ; return inflater . inflate ( R . layout . activity_wear_files , container , false ) ; }
private void preloadAnnouncementImage ( Announcement announcement ) { Picasso . with ( getActivity ( ) ) . load ( announcement . getImageUrl ( ) ) . fetch ( ) ; }
public File getFile ( ) { return SIAApp . GG_APP . getFileStreamPath ( "static_" + name ) ; }
public Features ( XmppConnection connection ) { this . connection = connection ; }
public static long getAvailableBytes ( FileDescriptor fd ) throws IOException { try { StructStatVfs stat = Os . fstatvfs ( fd ) ; return stat . f_bavail * stat . f_bsize ; } catch ( Exception e ) { throw new IOException ( e ) ; } }
public DatabaseHelper ( Context context ) { super ( context , dbName , null , 1 ) ; }
public GMStaticUrlBuilder setSize ( int height , int width ) { mSize = height + "x" + width ; return this ; }
public static String generateKey ( String deviceName , String source ) { return deviceName + " - " + source ; }
public void testMinimalEncoder19 ( ) throws Exception { verifyMinimalEncoding ( "A12345" , "ALPHANUMERIC ( A12345 ) , TERMINATOR ( ) " , null , false ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { custom_startpage . setSummary ( newValue . toString ( ) . replace ( " ( Standard ) " , "" ) ) ; return false ; }
public void initializeResources ( ) throws NoSuchAlgorithmException { context = InstrumentationRegistry . getContext ( ) ; HashType hashType = getHashType ( ) ; assertNotNull ( hashType ) ; jdkHashCalculator = new JDKHashCalculator ( ) ; jdkHashCalculator . setHashType ( hashType ) ; }
public void onError ( Throwable e ) { mActivity . closeProgressDialog ( ) ; showSignupError ( e ) ; }
public void onClick ( View v ) { FilterDialog . newInstance ( true , 0 , - 1 ) . show ( getSupportFragmentManager ( ) , "add_main_filter" ) ; }
public int getCurrentLevel ( ) { return currentLevel ; }
public void setup ( ) { httpInterface = mock ( OpenRosaHttpInterface . class ) ; openRosaXMLFetcher = new OpenRosaXmlFetcher ( httpInterface , new WebCredentialsUtils ( TestSettingsProvider . getGeneralSettings ( ) ) ) ; }
public void onRemoved ( @ NotNull Download download ) { if ( adapter != null ) adapter . remove ( download ) ; countUpdated ( ) ; }
public void performAction ( Context context , TimestampedValue [ ] newValues ) { vibrator . vibrate ( duration ) ; }
public static int toPixels ( float dp ) { float scale = SIAApp . GG_APP . getResources ( ) . getDisplayMetrics ( ) . density ; return ( int ) ( dp * scale ) ; }
public long getDistanceLastAltitude ( ) { return DistanceLastAltitude ; }
public void testParseMultiPersonWinner ( ) { assertItemsEqual ( 2 ) ; }
private boolean canGoBack ( ) { return getActivity ( ) . getSupportFragmentManager ( ) . getBackStackEntryCount ( ) > 1 ; }
public String getTf2WikiUrl ( ) { return String . format ( Locale . ENGLISH , "http : }
private void notifyChange ( @ NonNull final String what ) { handleAndSendChangeInternal ( what ) ; sendPublicIntent ( what ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { markStepAsCompletedOrUncompleted ( form , true ) ; }
public static boolean isTwitterVideoLink ( String link ) { if ( link == null ) return false ; return link . contains ( "surfaceView . twimg . com" ) ; }
public IBaseItem getItem ( int position ) { return itemList . get ( position ) ; }
public void onCreatePreferences ( Bundle bundle , String s ) { addPreferencesFromResource ( R . xml . odyssey_artwork_settings ) ; PreferenceManager . setDefaultValues ( getActivity ( ) , R . xml . odyssey_artwork_settings , false ) ; }
public void onDestroy ( ) { log . v ( TAG , "Fragment destroyed" ) ; loaded = false ; thread . interrupt ( UE ) ; }
public Fragment createTabFragment ( int position ) { switch ( position ) { case 0 : return new ExploreFragment ( ) ; case 1 : return new RecordFragment ( ) ; case 2 : return new ShareFragment ( ) ; default : return null ; } }
public void run ( ) { execGetRedeemableSkuDetails ( userId , skuId , callback ) ; }
public DateHeader ( Context context ) { super ( context ) ; init ( context ) ; }
public void enableAddPatient ( boolean enabled ) { int resId = enabled ? R . drawable . ic_add : R . drawable . ic_add_disabled ; mAddPatientMenuItem . setEnabled ( enabled ) ; mAddPatientMenuItem . setIcon ( resId ) ; }
public static String getSuraName ( Context context , int sura , boolean wantPrefix ) { return getSuraName ( context , sura , wantPrefix , false ) ; }
public void run ( ) { getNewDeleteTask ( currentDeletingTaskMids ) ; currentDeletingTaskTime = 0 ; currentDeletingTaskMids = null ; }
public void testGetListItem ( ) throws Exception { assertTrue ( mTestTrip . getListItem ( ) . size ( ) == 0 ) ; mTestTrip . addItem ( NEW_ITEM_NAME ) ; assertTrue ( mTestTrip . getListItem ( ) . size ( ) == 1 ) ; }
public HeadphoneReceiver getReceiver ( ) { return new HeadphoneReceiver ( ) ; }
private void removeFragmentsAndActionBar ( ) { FragmentTransaction transaction = getFragmentManager ( ) . beginTransaction ( ) ; transaction . remove ( getCurrentFragment ( ) ) ; transaction . commit ( ) ; getSupportActionBar ( ) . hide ( ) ; }
public void setResizePhoto ( int resizePhoto ) { resizePhoto = resizePhoto * 40 ; if ( resizePhoto < BEST_QUALITY_PHOTO && resizePhoto > 0 ) this . resizePhoto = resizePhoto ; else { this . resizePhoto = BEST_QUALITY_PHOTO ; } }
private void reportError ( ) { GameLoop . addToScene ( new WndError ( Game . getVar ( R . string . SociologistNPC_DownloadError ) ) ) ; }
public static SharedPreferences getSharedPrefs ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public static synchronized Bus getBus ( ) { return BUS ; }
public void showRateButton ( boolean show ) { if ( buttonRate == null ) return ; buttonRate . setVisibility ( show ? View . VISIBLE : view . GONE ) ; }
public void onSwipeChildItemStarted ( MyChildViewHolder holder , int groupPosition , int childPosition ) { notifyDataSetChanged ( ) ; }
public void onClick ( ) { toast ( "Positive Button Clicked" ) ; }
public void displayNetworkError ( ) { Log . i ( TAG , "NadgetMain displayError" ) ; Snackbar . make ( this . findViewById ( R . id . webView ) , "No network connection . Please refresh" , Snackbar . LENGTH_LONG ) . show ( ) ; }
public void setData_callsValueChangeListener ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setBinaryData ( answer ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public ShipExplosion ( float x , float y , Ship s ) { this . x = x ; this . y = y ; this . s = s ; }
public void onBindViewHolder ( PreferenceViewHolder viewHolder ) { thumbnail = addThumbnail ( viewHolder . itemView ) ; showColor ( getPersistedIntDefaultOrNull ( ) ) ; super . onBindViewHolder ( viewHolder ) ; }
private void onMovieFetchFailed ( Throwable e ) { view . loadingFailed ( e . getMessage ( ) ) ; }
public void onBackPressed ( ) { int currentItem = viewPager . getCurrentItem ( ) ; INewsWatcherView fragment = ( INewsWatcherView ) adapterViewPager . getItem ( currentItem ) ; if ( fragment . processBackPressed ( ) ) { return ; } super . onBackPressed ( ) ; }
public int getEndHour ( ) { return getSharedPreferences ( SettingActivity . PREFERENCE_NAME , SettingActivity . PREFERENCE_MODE ) . getInt ( SettingActivity . WORD_NOTIFICATION_END_TIME_HOUR , 23 ) ; }
public void testMinimalEncoder22 ( ) throws Exception { verifyMinimalEncoding ( "A12345678" , "BYTE ( A ) , NUMERIC ( 12345678 ) , TERMINATOR ( ) " , null , false ) ; }
public void onDetach ( ) { this . context = null ; super . onDetach ( ) ; }
public static byte [ ] stringToBase64 ( String clear ) throws UnsupportedEncodingException { return Base64 . encode ( clear . getBytes ( ) , Base64 . DEFAULT ) ; }
public void onClick ( View view ) { if ( mItemClickListener != null ) { mItemClickListener . onItemClick ( view , getPosition ( ) ) ; } }
public void run ( ) throws Exception { searchInsert ( viewRef , 0 ) ; }
public void init ( ) { SharedPreferences sharedPreferences = AppSettings . getSharedPreferences ( getContext ( ) ) ; isSupporter = sharedPreferences . getBoolean ( "2018_supporter" , false ) ; }
public static void addScore ( int score ) { GameScreen . score += score ; }
public void setPostAvatar ( String postAvatar ) { this . postAvatar = StringUtils . notNullStr ( postAvatar ) ; }
public void onStartTrackingTouch ( SeekBar seekBar ) { Log . i ( "OpenHABWidgetAdapter" , "onStartTrackingTouch position = " + seekBar . getProgress ( ) ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { mEvents . addEvent ( object ) ; if ( ! backlog ) { notifyHandlers ( EVENT_LINKCHANNEL , object ) ; } }
public ContentProviderClient provideContributionContentProviderClient ( Context context ) { return context . getContentResolver ( ) . acquireContentProviderClient ( CONTRIBUTION_AUTHORITY ) ; }
public void onRefreshStart ( @ RefreshType int refreshType ) { if ( mSubscriber != null && mBinder != null ) { mBinder . unbind ( false ) ; setShouldBindOnce ( isCurrentlyVisible ) ; getNewObservables ( RefreshController . REQUESTED_BY_USER ) ; } }
public void onSuccess ( ) { Log . d ( TAG , "Successfully synchronized capabilities and notes for " + currentAccount . getAccountName ( ) ) ; }
private double acreTohectare ( double num ) { return num * 0 . 405 ; }
public void setStartMemberId ( String startMemberId ) { this . startMemberId = startMemberId ; notifyPropertyChanged ( BR . startMemberId ) ; }
public void setNavigationBarTintEnabled ( boolean enabled ) { mNavBarTintEnabled = enabled ; if ( mNavBarAvailable ) { mNavBarTintView . setVisibility ( enabled ? View . VISIBLE : View . GONE ) ; } }
public void setReadingElementId ( int readingElementId ) { mReadingElementId = readingElementId ; }
public int getTelephone ( ) { return telephone ; }
public static Response create ( final CurrentStatus status , final List < Message > messages ) { return new AutoValue_Response ( status , messages ) ; }
private BroadcastReceiver forceTaskbarStartReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { forceTaskbarStart = true ; } } ;
public void dismissBloggingRemindersAlertIfNeeded ( ) { ViewInteraction bloggingRemindersAlertTitle = onView ( withText ( R . string . set_your_blogging_reminders_title ) ) ; if ( isElementDisplayed ( bloggingRemindersAlertTitle ) ) { bloggingRemindersAlertTitle . perform ( swipeDown ( ) ) ; } }
public void onColorsChanged ( TerminalSession changedSession ) { }
public void onBackPressed ( ) { super . onBackPressed ( ) ; Game . switchScene ( TitleScene . class ) ; }
public void onClick ( DialogInterface dialog , int which ) { new UninstallDHCPv6Client ( context ) . execute ( ) ; dialog . dismiss ( ) ; }
public int getCount ( ) { return activities . size ( ) ; }
public void onPageSelected ( int position ) { onPageSelected ( position , mFirstPageIndex , mLastPageIndex ) ; }
public String desc ( ) { if ( hungerLevel < STARVING ) { return Game . getVar ( R . string . HungerBuff_Info1 ) ; } else { return Game . getVar ( R . string . HungerBuff_Info2 ) ; } }
private String getUrl ( ) { return getUrl ( BingWallpaperUtils . getResolution ( this ) ) ; }
public int hashCode ( ) { return Objects . hash ( scheduleType , query , type , title , timestamp , schedule , teachers ) ; }
public boolean hasName ( ) { return ! TextUtils . isEmpty ( name ) ; }
public boolean onTouchEvent ( @ NonNull MotionEvent ev ) { super . onTouchEvent ( ev ) ; if ( isSupported ( ) ) { scaleDetector . onTouchEvent ( ev ) ; } return true ; }
public void onErrorResponse ( VolleyError volleyError ) { AppLog . e ( T . API , volleyError ) ; if ( callback != null ) { callback . onError ( volleyError ) ; } }
public void onRevoke ( ) { VpnStatus . logInfo ( R . string . permission_revoked ) ; mManagement . stopVPN ( false ) ; endVpnService ( ) ; }
public ChildZoneBuilder setDisplayName ( String displayName ) { mDisplayName = displayName ; return this ; }
public void loginWithSelfHostedAccount ( ) { new LoginFlow ( ) . chooseEnterYourSiteAddress ( ) . enterSiteAddress ( E2E_SELF_HOSTED_USER_SITE_ADDRESS ) . enterUsernameAndPassword ( E2E_SELF_HOSTED_USER_USERNAME , E2E_SELF_HOSTED_USER_PASSWORD ) . confirmLogin ( ) ; }
public String getKey ( ) { return mKey ; }
public String getAboutBook ( ) { return aboutBook ; }
public void remove ( String searchName ) { items . remove ( searchName ) ; }
public EighthActivityBuilder AID ( int AID ) { this . AID = AID ; return this ; }
private void handleInputModels ( ModelsBundle bundle ) { if ( isNull ( bundle ) ) { return ; } for ( AbsModel model : bundle ) { this . entries . add ( new AttachmenEntry ( true , model ) . setAccompanying ( true ) ) ; } }
private TermuxTaskerAppSharedPreferences ( @ Nonnull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
public void onStart ( ) { super . onStart ( ) ; for ( ProfileLayer layer : Services . lasers . layers . layers ) { flightProfile . addLayer ( layer ) ; } EventBus . getDefault ( ) . register ( this ) ; }
public T getDefaultValue ( ) { return defaultValue ; }
private void playMusicByPosition ( int position ) { playMusicByPosition ( position , 0 , true ) ; }
public void onReceive ( Context context , Intent intent ) { String msg = intent . getExtras ( ) . getString ( "msg" ) ; for ( ModelNotificationListener listener : uilisteners ) { listener . modelNotificationReveiced ( msg ) ; } }
public void onLoaderReset ( Loader < TotalReviews > loader ) { }
public void run ( ) { AlertsCreator . processError ( error , PaymentFormActivity . this , req ) ; setDonePressed ( false ) ; showEditDoneProgress ( false ) ; }
public AboutBuilder addEmailLink ( int email ) { return addEmailLink ( context . getString ( email ) ) ; }
public void onUserResolvableLocationSettings ( Status status ) { IntentUtil . startGmsStatusForResolution ( this , status , CHECK_LOCATION_SETTINGS_REQUEST_CODE ) ; mMainPresenter . setIsLocationSettingsStatusForResultCalled ( true ) ; }
public AddressStatus ( Address address , @ Nullable String status ) { this . address = address ; this . status = status ; }
public void displayResults ( String results ) { progress . setVisibility ( View . INVISIBLE ) ; hashOutput . setText ( results ) ; }
public void onDone ( ) { if ( activity . getService ( ) != null ) { activity . getService ( ) . alarmDelete ( alarm . getId ( ) ) ; } }
public void addItem ( int idIcon , String description , double result ) { mData . add ( new ResultItem ( idIcon , description , result ) ) ; notifyDataSetChanged ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_7 . class ) ; startActivity ( i ) ; }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingFetchNewBip ( 0 ) ; getDialog ( ) . dismiss ( ) ; }
private SQLiteDatabase lazyDatabase ( ) { if ( mDatabase == null || ! mDatabase . isOpen ( ) ) { mDatabase = getWritableDatabase ( ) ; } return mDatabase ; }
public void setAdr_street ( String adr_street ) { this . _adr_street = adr_street ; }
public static synchronized boolean safeToAddWordPressComAuthToken ( URI uri ) { return UrlUtils . isHttps ( uri ) && isWordPressCom ( uri ) ; }
public static String generateOTP ( byte [ ] secret , String algo , int digits , long period ) throws InvalidKeyException , NoSuchAlgorithmException { return generateOTP ( secret , algo , digits , period , System . currentTimeMillis ( ) / 1000 ) ; }
public void requestPermission ( @ NonNull String permission ) { Timber . d ( "requesting print permission" ) ; ActivityCompat . requestPermissions ( this , new String [ ] { permission } , PERMISSION_REQUEST_CODE ) ; }
public SpacerViewHolder ( View itemView ) { super ( itemView ) ; itemView . findViewById ( R . id . height ) . setLayoutParams ( new LinearLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , Reddit . dpToPxVertical ( 88 ) ) ) ; }
public Boolean get_config ( @ NonNull String key , @ Nullable Boolean defaultValue ) { if ( ! mConf . has ( key ) ) { return defaultValue ; } return mConf . getBoolean ( key ) ; }
public int setView ( ) { try { error_flag = false ; setBattleview ( ) ; return 0 ; } catch ( Exception e ) { e . printStackTrace ( ) ; sendReport ( e , ERORR_VIEW ) ; return 1 ; } }
public long getItemId ( int i ) { return data [ i ] ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { ContextLinkCell view = new ContextLinkCell ( mContext ) ; return new Holder ( view ) ; }
private DatabaseManager ( Context context ) { mDbHelper = new DbHelper ( context ) ; mListeners = new CopyOnWriteArrayList <> ( ) ; }
public long getLastPacketReceived ( ) { return this . lastPaketReceived ; }
public NoteListViewModel ( @ NonNull Application application ) { super ( application ) ; this . db = NotesDatabase . getInstance ( application ) ; }
public SketchPropertiesActivity getProperties ( ) { return properties ; }
public static de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseTranscoderStatus parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public RateListAdapter ( Context context ) { this . mInflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; this . mContext = context ; }
public static Criterion getCriterion ( CaldavCalendar caldavCalendar ) { return Criterion . and ( TaskDao . TaskCriteria . activeAndVisible ( ) , CaldavTask . DELETED . eq ( 0 ) , CaldavTask . CALENDAR . eq ( caldavCalendar . getUuid ( ) ) ) ; }
public static void archive ( final Post post ) { App . Realm ( ) . executeTransaction ( new Realm . Transaction ( ) { @ Override public void execute ( Realm realm ) { post . setWasRead ( true ) ; } } ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { fetchEvents ( ) ; }
public LruCacheBitmapService ( ) { Logging . debug ( "LruCacheBitmapService instantiated" ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . madonasyombua . myapplication" , appContext . getPackageName ( ) ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { NewsHolder newsHolder = ( NewsHolder ) holder ; News current = data . get ( position ) ; newsHolder . bindViews ( current . getTitle ( ) , current . getShortText ( ) ) ; }
public boolean removeLevel ( GameSave gameSave ) { return removeLevel ( gameSave . getWorldName ( ) , gameSave . getGameType ( ) ) ; }
public void setReviewId ( String reviewId ) { this . reviewId = reviewId ; }
private void whenDescribingContentForParcelable ( ) { describeContentValue = forecast . describeContents ( ) ; }
public String status ( @ NotNull Mob me ) { return Utils . format ( "This %s is %s" , me . getName ( ) , getTag ( ) ) ; }
private void initFields ( ) { playlistId_ = 0 ; songs_ = java . util . Collections . emptyList ( ) ; ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { callback . onErrorResponse ( OpenMRS . getInstance ( ) . getString ( R . string . delete_allergy_failure ) ) ; }
private void setFlowTextViewAppearance ( ) { movieDescription . setTextColor ( Color . WHITE ) ; movieDescription . setTextSize ( 45 ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "theredspy15 . ltecleanerfoss" , appContext . getPackageName ( ) ) ; }
public boolean onLongClick ( View v ) { showSnackMessage ( R . string . actionbar_mkdir ) ; return true ; }
public CharSequence convertResultToString ( Object resultValue ) { Suggestion suggestion = ( Suggestion ) resultValue ; return suggestion . getUserLogin ( ) ; }
public void onError ( final Throwable e ) { finishProgress ( ) ; showError ( e ) ; tracker . sendEvent ( TAG , "fail : set a hatena name" ) ; }
public void pullRequestLink_withInvalidId__opensBrowser ( ) throws Exception { assertRedirectsToBrowser ( parseLink ( "https : assertRedirectsToBrowser ( parseLink ( "https : assertRedirectsToBrowser ( parseLink ( "https : }
public void onDefault ( Selector s ) { RemixedDungeon . fontScale ( 0 ) ; s . regen ( ) ; }
public void getWordCounterForChineseTraditional ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . TRADITIONAL_CHINESE ) ; assertEquals ( IdeogramsWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
public boolean insert ( String tid , String companion ) { String timestamp = TimestampGenerator . getTimestamp ( ) ; return this . insert ( tid , companion , timestamp ) ; }
public static void removeKey ( Context context , String key ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; Editor editor = sharedPreferences . edit ( ) ; editor . remove ( key ) ; editor . apply ( ) ; }
public void close ( ) throws MessagingException { try { if ( iservice != null ) iservice . close ( ) ; } finally { this . context = null ; } }
public boolean isValidGroupNumber ( String groupNumber ) { return mGroupNumberList != null && mGroupNumberList . contains ( groupNumber ) ; }
public EmojiLite ( String unicode , boolean hasTone , EmojiTone tone , int emojiOrder , EmojiCategory category ) { super ( unicode ) ; this . hasTone = hasTone ; this . tone = tone ; this . emojiOrder = emojiOrder ; this . category = category ; }
public IdentifyUserPromptPage ( String formName , ActivityTestRule rule ) { super ( rule ) ; this . formName = formName ; }
private void viewHelpAndSupport ( Origin origin ) { List < String > extraSupportTags = getLoginMode ( ) == LoginMode . JETPACK_STATS ? Collections . singletonList ( ZendeskExtraTags . connectingJetpack ) : null ; ActivityLauncher . viewHelpAndSupport ( this , origin , null , null , extraSupportTags ) ; }
private boolean checkPermission ( String permission ) { int checkPermission = ContextCompat . checkSelfPermission ( getActivity ( ) , permission ) ; return ( checkPermission == PackageManager . PERMISSION_GRANTED ) ; }
public MessagePatch setRead ( boolean read ) { this . read = read ; return this ; }
public void clear ( ) { paths . clear ( ) ; landscapePaths . clear ( ) ; if ( immutableBitmap != null ) immutableBitmap . recycle ( ) ; invalidate ( ) ; }
public void run ( ) { sendProxyCMD ( Connection . ProxyType . SOCKS5 , "127 . 0 . 0 . 1" , Integer . toString ( OrbotHelper . SOCKS_PROXY_PORT_DEFAULT ) ) ; OrbotHelper . get ( mOpenVPNService ) . removeStatusCallback ( statusCallback ) ; }
public Measurement ( String name ) { this . name = name ; }
public OperationStack ( ) { update ( ) ; }
public void setMorningTime ( String time ) { putString ( TIME_MORNING , time ) ; }
public String getTimeStamp ( ) { return timeStamp ; }
public DaoSession provideDaoSession ( @ NonNull DaoMaster daoMaster ) { return daoMaster . newSession ( ) ; }
public int getSkipWebLineCount ( ) { return mWebModulus ; }
public MyGroupViewHolder ( View v ) { super ( v ) ; mIndicator = ( ExpandableItemIndicator ) v . findViewById ( R . id . indicator ) ; }
public void set ( String s ) { this . s = s ; }
public void pause ( ) { Log . d ( TAG , "start ( ) Entry . " ) ; setPlaybackPaused ( true ) ; musicSrv . pausePlayer ( ) ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equal ( sqlQuery , ( ( Filter ) other ) . sqlQuery ) ; }
public void onDetach ( ) { super . onDetach ( ) ; topMovieCallbackListener = null ; }
public void onClick ( View view ) { resetValues ( ) ; showResistanceDialog ( fourthColor ) ; }
public boolean mam ( ) { return hasDiscoFeature ( account . getJid ( ) . toBareJid ( ) , Namespace . MAM ) || hasDiscoFeature ( account . getJid ( ) . toBareJid ( ) , Namespace . MAM_LEGACY ) ; }
public LogFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public void onCreate ( ) { ( ( Injector ) getApplicationContext ( ) ) . inject ( this ) ; mediaSessionHandler = new MediaSessionHandler ( this ) ; Log . d ( LogTag . LOG_PLAYER_SERVICE , "SpotiQ Player service created" ) ; }
private void onExtraKeyButtonClick ( View view , ExtraKeyButton buttonInfo , Button button ) { if ( mExtraKeysViewClient != null ) mExtraKeysViewClient . onExtraKeyButtonClick ( view , buttonInfo , button ) ; }
public void unregisterPBSeviceConnection ( ) { mListView . setAdapter ( null ) ; mPlaybackServiceConnection = null ; }
public void shutDown ( ) throws Exception { RxJavaPlugins . reset ( ) ; RxAndroidPlugins . reset ( ) ; }
public void whenAutocompleteAppearanceDoesNotExist_shouldNotKeyboardBeDisplayed ( ) { SelectOneWidget widget = getSpyWidget ( ) ; verify ( widget . softKeyboardUtils , never ( ) ) . showSoftKeyboard ( widget . binding . choicesSearchBox ) ; }
public ProfilePeek ( String screenName ) { this . profileScreenName = screenName ; }
public static void clear ( Context context ) { init ( context ) ; book ( ) . destroy ( ) ; }
public void bearings ( ) { assertEquals ( bearing , seattle . bearingTo ( la ) , 0 . 01 ) ; }
public void play_FiguresMode ( ) { this . PlayMp3 ( R . raw . az_figures_mode ) ; }
public void onFailed ( String msg ) { mView . onGetTopicListFailed ( msg ) ; }
public CacheDataSource createDataSource ( ) { return new CacheDataSource ( cache , upstreamFactory . createDataSource ( ) , cacheReadDataSourceFactory . createDataSource ( ) , cacheWriteDataSinkFactory != null ? cacheWriteDataSinkFactory . createDataSink ( ) : null , flags , eventListener ) ; }
public void thenTheQueueStartsAtTheCorrectPosition ( ) { queue . promiseNextPreparedPlaybackFile ( 0 ) . then ( new VoidResponse <> ( positionedPlaybackFile -> Assert . assertEquals ( startPosition , positionedPlaybackFile . getPlaylistPosition ( ) ) ) ) ; }
public void setDraft ( String draft ) { this . draft = draft ; }
public void update ( Observable observable , Object data ) { if ( data instanceof String ) if ( ( ( String ) data ) . equals ( this . getClass ( ) . getName ( ) ) ) { refreshList ( ) ; } }
public String tileDesc ( ) { return Game . getVar ( R . string . ParalyticGas_Info ) ; }
public void detatch ( Observer observer ) { observers . remove ( observer ) ; }
public static void resetStatsWidgetsData ( ) { remove ( PrefKey . STATS_WIDGET_DATA ) ; }
public int getItemViewType ( int position ) { if ( position < itemsData . size ( ) ) { return itemsData . get ( position ) . viewType ; } return 0 ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_GIN , null , null , null , null ) ; }
public RelatedPageViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new RelatedPageListAdapter . RelatedPageViewHolder ( LayoutInflater . from ( ( parent . getContext ( ) ) ) . inflate ( R . layout . biblio_chapter_basic_view , parent , false ) ) ; }
public MutableLiveData < Integer > getOnThemeChanged ( ) { return mOnThemeChanged ; }
public static RoomDataBase getInstance ( Context context ) { if ( INSTANCE == null ) { INSTANCE = Room . databaseBuilder ( context , RoomDataBase . class , "jibjibDB" ) . fallbackToDestructiveMigration ( ) . build ( ) ; } return INSTANCE ; }
public static void initSystemBars ( AppCompatActivity activity ) { MainActivity . setSystemBarColor ( activity . getWindow ( ) , ShaderEditorApp . preferences . getSystemBarColor ( ) , false ) ; }
public String getEntSeq ( ) { return this . ent_seq ; }
public boolean isChecked ( ) { CheckBox c = ( CheckBox ) findViewById ( R . id . checkbox ) ; return c . isChecked ( ) ; }
public void setNdtDownloadKbit ( Double ndtDownloadKbit ) { this . ndtDownloadKbit = ndtDownloadKbit ; }
public PlayerModel ( ) { mPlayerManager = new PlayerManager ( ) ; mScoreFromRoundBefore = new HashMap <> ( ) ; }
public QueryHandler ( ArvutajaActivity activity , CursorTreeAdapter adapter ) { super ( activity . getContentResolver ( ) ) ; mRef = new WeakReference < ArvutajaActivity > ( activity ) ; mAdapter = adapter ; }
public void prepare ( Callback callback ) { playlistTracker . addListener ( this ) ; this . callback = callback ; buildAndPrepareSampleStreamWrappers ( ) ; }
public void AddToGlobal ( Matrix mk ) { createdValues . add ( mk ) ; if ( matrixAdapter != null ) matrixAdapter . notifyDataSetChanged ( ) ; LAST_INDEX ++ ; }
public void setFeeChargesWrittenOff ( Integer feeChargesWrittenOff ) { this . feeChargesWrittenOff = feeChargesWrittenOff ; }
public AboutBuilder setAppIcon ( @ NonNull BitmapDrawable icon ) { return setAppIcon ( IconUtil . getBitmap ( icon ) ) ; }
public void setDownloadDirectory ( String directory ) { putString ( Name . DOWNLOAD_DIRECTORY , directory ) ; }
public void sortPersonasByName ( boolean asc ) { viewModel . sortPersonasByName ( asc ) ; personaListAdapter . setIndexerType ( PersonaListAdapter . IndexerType . PersonaName ) ; personaListAdapter . notifyDataSetChanged ( ) ; recyclerView . setIndexBarVisibility ( true ) ; }
public float getProgress ( ) { return mSeekBar . getProgress ( ) * multiplier ; }
public String desc ( ) { return Game . getVar ( R . string . DriedRoseCursedBuff_Info ) ; }
public void onTimeFinished ( ) { caller . isGameOver ( ) ; }
public void onBridgedAdapterRangeMoved ( @ NonNull RecyclerView . Adapter source , Object tag , int fromPosition , int toPosition , int itemCount ) { onHandleWrappedAdapterRangeMoved ( source , ( List < ComposedChildAdapterTag > ) tag , fromPosition , toPosition , itemCount ) ; }
public Single < List < Event >> getEvents ( AppDataStore appDataStore ) { return appDataStore . getEvents ( false ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( mChatService != null ) { if ( mChatService . getState ( ) == BluetoothChatService . STATE_NONE ) { mChatService . start ( ) ; } } }
public void onLocationChanged ( @ NonNull Location l , @ Nullable String reportType ) { locationRepo . setCurrentLocation ( l ) ; publishLocationMessage ( reportType ) ; }
public boolean getVideoStabilizationPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . getVideoStabilizationPreferenceKey ( ) , false ) ; }
public EighthActivityBuilder sticky ( boolean sticky ) { this . sticky = sticky ; return this ; }
private List < Song > getSongsForPlaylist ( ) { return SongLoader . getSongsForArtist ( playListArrayList . get ( getAdapterPosition ( ) ) . id , context ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new BlankFormsListViewModel ( application , scheduler , syncRepository , settingsProvider , analytics , formsUpdater , currentProjectProvider ) ; }
public void setEstatura ( double estatura ) { this . estatura = estatura ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { if ( isDestroyed ) { return ; } buttonUpdateItem . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public void onClick ( View v ) { if ( notificationWord != null ) createAlertDialogForRemoveNotification ( category , notificationWord , position ) . show ( ) ; else createAlertDialogForSelectingWordTypesToNotification ( category , position ) . show ( ) ; }
public MyHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( context ) . inflate ( R . layout . card , parent , false ) ; return new MyHolder ( v ) ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = mode . getMenuInflater ( ) ; inflater . inflate ( R . menu . transactions_context_menu , menu ) ; return true ; }
public void viewWithFileScheme ( File file ) { launch ( new Intent ( Intent . ACTION_VIEW , Uri . fromFile ( file ) ) ) ; }
private Draft getDraftOfType ( String type ) { for ( Draft draft : this ) { if ( Draft . TEXT . equals ( draft . getType ( ) ) ) { return draft ; } } return null ; }
private void showSuccessNotification ( Wallpaper image , boolean isShow ) { NotificationUtils . clearFailureNotification ( mContext ) ; if ( isShow ) { NotificationUtils . showSuccessNotification ( mContext , image . getCopyright ( ) ) ; } }
public boolean requiresSecureDecoderComponent ( String mimeType ) { return mediaCrypto . requiresSecureDecoderComponent ( mimeType ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "eu . hithredin . bohurt . bohurtlib . test" , appContext . getPackageName ( ) ) ; }
public AddBookmarkResultLayout ( Context context ) { super ( context ) ; initializeViews ( context ) ; }
private String getOrSetString ( String key , Supplier < String > supplier ) { return PreferenceExtensions . getOrSetString ( mMockReferences , key , supplier ) ; }
public static TimePeriod getBaseTimePeriod ( String sub ) { return TimePeriod . valueOf ( prefs . getString ( "defaultTime" + sub . toLowerCase ( Locale . ENGLISH ) , Reddit . timePeriod . name ( ) ) ) ; }
private void navigateToNextActivity ( ) { startActivity ( new Intent ( InputActivity . this , ScanActivity . class ) ) ; finishActivity ( 0 ) ; }
private void openCreateScreen ( ) { startActivity ( new Intent ( mContext , TemplateActivity . class ) ) ; }
private Calendar getTodayMidnight ( ) { return getMidnight ( Calendar . getInstance ( ) ) ; }
private void startProgressCountDown ( ) { if ( ! PreferenceSingleton . getHandler ( gameView ) . getGodMode ( ) ) { progressBar . setMax ( MAX_PROGRESS ) ; progressTime = new ProgressTime ( progressBar , this ) ; progressTime . execute ( MAX_PROGRESS ) ; } }
public static JSONObject newTemplate ( String name ) { JSONObject t ; t = new JSONObject ( defaultTemplate ) ; t . put ( "name" , name ) ; return t ; }
public static int isometricShift ( ) { if ( Dungeon . isometricMode ) { return isometricModeShift ; } return 0 ; }
public View focusSearch ( int direction ) { switch ( direction ) { case View . FOCUS_FORWARD : return parent . nextView ( this ) ; } return super . focusSearch ( direction ) ; }
public boolean storesLastKnownLocation ( ) { return mCityNamePreference . isSet ( ) ; }
public static String stripUserPrefix ( final String name ) { final Matcher matcher = USER_PATTERN . matcher ( name ) ; if ( matcher . matches ( ) ) { return matcher . group ( 3 ) ; } else { return null ; } }
public void onClick ( View v ) { Intent intent = new Intent ( mContext , PatientDashboardActivity . class ) ; intent . putExtra ( ApplicationConstants . BundleKeys . PATIENT_ID_BUNDLE , patient . getId ( ) ) ; mContext . startActivity ( intent ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : { onBackPressed ( ) ; return true ; } } return super . onOptionsItemSelected ( item ) ; }
public void setSms ( int sms ) { this . sms = sms ; }
public void resize ( int width , int height ) { game . sizeModifier = Math . min ( width , height ) /1080f ; show ( ) ; }
private void disableToolbarElevation ( ) { ActionBar toolbar = getActionBar ( ) ; toolbar . setElevation ( 0 ) ; }
public void shouldWriteFromParcel ( ) { givenForecastWithValues ( 1 , 1 , "someCity" , 1d , 1d , "someHumidity" , "someDate" , "someCountry" , 1d , "someDesc" ) ; givenWritingToParcel ( ) ; whenCreatingFromParcel ( ) ; thenForecastCreatedShouldBeEqualTo ( forecast ) ; }
private IField getField ( ) { return newField ; }
public static void cancelNewNoteNotification ( Context context ) { NotificationManager notificationManager = ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ; notificationManager . cancel ( ONGOING_NEW_NOTE ) ; }
private static void connect ( Socket javaSocket , NetJavaSocketImpl gdxSocket , DataOutputStream dataOutputStream , DataInputStream dataInputStream ) throws Exception { javaSocket . setSoTimeout ( 0 ) ; ( ( ServerNetworking ) Sided . getNetworking ( ) ) . accepted ( gdxSocket ) ; }
public float getVoltage ( ) { return voltage ; }
public static void detach ( Char target , Class < ? extends Buff > cl ) { detach ( target . buff ( cl ) ) ; }
public void paintShouldNotDrawAnythingIfValuesAreZero ( ) throws Exception { pieChart = new PieChart ( plot , new double [ ] { 0 , 0 } , new ColorWrap [ ] { ColorWrap . RED , ColorWrap . GREEN } ) ;
private void updateStorageLocationText ( String path ) { findPreference ( getString ( R . string . pref_cache_location_key ) ) . setSummary ( path ) ; }
public void onError ( SessionObject sessionObject , StreamError condition , Throwable e ) throws JaxmppException { Log . w ( TAG , "onError ( ) " + condition + " " + e ) ; if ( exception == null ) exception = e ; }
public GithubOAuthClient ( Activity activity , Consumer < String > callback ) { this . callback = callback ; this . progressBar = ( ProgressBar ) activity . findViewById ( R . id . progressbar ) ; }
public boolean onCreate ( ) { this . mOpenHelper = new DatabaseHelper ( getContext ( ) ) ; return true ; }
public Monster ( ) { this . name = MONSTER_NAME ; this . level = 1 ; this . mods = 0 ; }
private void toggleMode ( final boolean hide ) { toggleMode ( hide , true ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; presenter . onSaveState ( outState ) ; }
public void displayLoading ( boolean loading ) { if ( Objects . nonNull ( mLoadingView ) ) { mLoadingView . setVisibility ( loading ? View . VISIBLE : View . INVISIBLE ) ; } }
public RepaymentFrequencyNthDayTypeOptions createFromParcel ( Parcel source ) { return new RepaymentFrequencyNthDayTypeOptions ( source ) ; }
private void doLogin ( ) { Intent intent = new Intent ( this , LoginActivity . class ) ; startActivity ( intent ) ; }
public static TestScreenContextActivity widgetTestActivity ( ) { return CollectHelpers . buildThemedActivity ( TestScreenContextActivity . class ) . get ( ) ; }
public Object visit ( GenreDigest genre ) { icon . setImageResource ( R . drawable . genre24 ) ; return null ; }
private void removeAsAdmin ( ) { mDPM . removeActiveAdmin ( AdminReceiver . COMP ) ; CheckBoxPreference adminPreference = ( CheckBoxPreference ) findPreference ( "pref_device_admin" ) ; adminPreference . setChecked ( false ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . madonasyombua . materialapp" , appContext . getPackageName ( ) ) ; }
public String getStartTime ( ) { return startTime ; }
public void notifyItemInserted ( int position ) { updateRows ( ) ; try { super . notifyItemInserted ( position ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public String getAppPackage ( ) { return null ; }
public TimePreference ( Context context , AttributeSet attrs ) { this ( context , attrs , TypedArrayUtils . getAttr ( context , androidx . preference . R . attr . dialogPreferenceStyle , android . R . attr . dialogPreferenceStyle ) ) ; }
public Prefs ( final Context context ) { this . sharedPrefs = context . getSharedPreferences ( Common . PREFERENCES_FILE , Context . MODE_PRIVATE ) ; }
public Boolean getUserDefined ( ) { return isUserDefined ; }
public void run ( ) { execGetBalance ( userId , callback ) ; }
public void setPatch ( Patch patch ) { this . patch = patch ; }
public boolean onCreateOptionsMenu ( Menu menu ) { final MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . scan_menu , menu ) ; return true ; }
public void hideProgressBar ( ) { frameLayout . removeView ( progressBar ) ; }
private void cancelTasks ( ) { discardNotification ( getId ( ) ) ; repeater . cancelAlarm ( ReminderDialogActivity . this , getId ( ) ) ; }
public static OkHttpClient . Builder prepareHttpClient ( OkHttpClient . Builder builder ) { return builder . addNetworkInterceptor ( new StethoInterceptor ( ) ) ; }
public void run ( ) { visible = false ; repaint ( ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeString ( type ) ; }
public void notifyBookCollectionChanged ( BooksCollection booksCollection ) { UpdatePayload payload = new UpdatePayload ( FORCE_REFRESH_UPDATE ) ; int order = booksCollection . getOrder ( ) ; booksCollections . exact ( order ) . setUpdatePayload ( payload ) ; notifyItemChanged ( order , payload ) ; }
private void drawHorizontalLines ( Canvas canvas ) { for ( int i = 1 ; i <= verticalSquareCount ; i ++ ) { canvas . drawLine ( 0 , screenHeight - widthOfSquareSide * i , screenWidth , screenHeight - widthOfSquareSide * i , paint ) ; } }
public void setGesturesEnabled ( boolean isGesturesEnabled ) { mIsGesturesEnabled = isGesturesEnabled ; }
public Item search ( String itemname ) { return name2Item_ . get ( itemname ) ; }
public void onSaveInstanceState ( Bundle savedInstanceState ) { if ( server != null ) savedInstanceState . putInt ( "cid" , server . cid ) ; }
public LiveData < Integer > getBirthdayMonth ( ) { return birthdayMonth ; }
public ProductionApiProvider ( @ NonNull OkHttpClient httpClient , @ NonNull String blogUrl ) { mRetrofit = GhostApiUtils . getRetrofit ( blogUrl , httpClient ) ; }
public void onPause ( ) { super . onPause ( ) ; synch . abort ( ) ; saveGame ( ) ; }
public static TracklistFragment newInstance ( String partyTitle ) { TracklistFragment tracklistFragment = new TracklistFragment ( ) ; Bundle newInstanceArguments = new Bundle ( ) ; newInstanceArguments . putString ( "partyTitle" , partyTitle ) ; tracklistFragment . setArguments ( newInstanceArguments ) ; return tracklistFragment ; }
public static void init ( Context context ) { mContext = context . getApplicationContext ( ) ; }
public void onLoadingFailed ( String imageUri , View view , FailReason failReason ) { NotifyDownloadFinished ( ) ; Log . d ( TAG , "Failed to load file : " + imageUri ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_mywallet , menu ) ; return true ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; viewPager . removeOnPageChangeListener ( this ) ; ButterKnife . unbind ( this ) ; }
public Settings getSettings ( ) { return settings ; }
public void onClick ( View v ) { LinkHandler . onLinkClicked ( ( Activity ) context , Constants . Reddit . getUri ( "/user/" + username + "/comments . json" ) . toString ( ) , false ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { mDx += dx ; }
private static void setValue ( Context context , int appWidgetId , String newValue ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( PREFERENCE_WIDGET_PREAMBLE + appWidgetId , newValue ) . commit ( ) ; }
private void stopReceivers ( ) { for ( BTReceiver receiver : btReceivers ) { receiver . abort ( ) ; btReceivers . remove ( receiver ) ; } }
public InputField getInputField ( String concept ) { for ( InputField inputField : inputFields ) { if ( concept . equals ( inputField . getConcept ( ) ) ) { return inputField ; } } return null ; }
public static String getNotificationVibrate ( Context context ) { return getString ( context , "pref_vibrate" , context . getString ( R . string . pref_default_vibrate ) ) ; }
public void deallocate ( ) { stop ( ) ; if ( state == PREFETCHED ) { player . reset ( ) ; state = UNREALIZED ; try { realize ( ) ; } catch ( MediaException e ) { e . printStackTrace ( ) ; } } }
private SshConnectionPool ( ) { mConnections = new ConcurrentHashMap < String , SSHClient > ( ) ; }
public static < T > FindMultiExecutor findAllAsync ( Class < T > modelClass , long . . . ids ) { return findAllAsync ( modelClass , false , ids ) ; }
public void setSwitched ( String switched ) { mSwitched = switched ; }
private void update ( Long instanceId , ContentValues values ) { instancesDatabaseProvider . getWriteableDatabase ( ) . update ( INSTANCES_TABLE_NAME , values , _ID + " = ?" , new String [ ] { instanceId . toString ( ) } ) ; }
public void onChannelAdded ( IChannel channel ) throws RemoteException { mChannelListAdapter . updateChannels ( ) ; mChannelListAdapter . notifyDataSetChanged ( ) ; }
public void onClick ( View v ) { Intent mainActivityIntent = new Intent ( v . getContext ( ) , HelpActivity . class ) ; startActivity ( mainActivityIntent ) ; }
public static boolean validateTeamKey ( String key ) { return ! ( key == null || key . isEmpty ( ) ) && key . matches ( "^frc\\d { 1 , 4 } $" ) ; }
public RedditSubreddit ( CreationData creationData ) { this ( ) ; downloadTime = creationData . timestamp ; }
public int getMapHeight ( ) { return mapHeight ; }
public void onClick ( View v ) { currentCalculation += "log ( 10 , " ; displayCalculation += "log ( " ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; onAllClicks ( ) ; }
public PhysicalArea ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private void moveScrollToLastMessage ( ) { if ( chatListView != null && ! messages . isEmpty ( ) ) { chatLayoutManager . scrollToPositionWithOffset ( messages . size ( ) - 1 , - 100000 - chatListView . getPaddingTop ( ) ) ; } }
public String getWalletIndex ( ) { return walletIndex ; }
public void testValidateInvalidEmail ( ) throws Throwable { assertThat ( validateInput ( "user" , "password" , "password" , "" ) , is ( ValidateResult . NO_EMAIL ) ) ; }
public String [ ] getMembers ( ) { return mMembers ; }
public HtmlTextView ( Context context ) { super ( context ) ; init ( ) ; }
public boolean onSupportNavigateUp ( ) { finishWithResult ( ) ; return true ; }
public void run ( ) { Intent i = new Intent ( SplashScreen . this , MainActivity . class ) ; startActivity ( i ) ; finish ( ) ; }
public Integer getBandwidth ( ) { return bandwidth ; }
public void read ( DataInputStream dataInputStream ) throws Exception { read ( ( DataGroup ) Data . input ( dataInputStream ) ) ; }
public PoolOuterClass . Pool getPoolwithID ( long id ) { for ( PoolOuterClass . Pool pool : mFarmingList ) { if ( pool . getId ( ) == id ) { return pool ; } } return null ; }
public void onSlidedUp ( View v ) { RadarChartView radar_chart = ( RadarChartView ) v . findViewById ( R . id . radar_chart ) ; if ( radar_chart != null ) { radar_chart . resetAnimation ( ) ; } }
public void onError ( Exception exception ) { TvApp . getApplication ( ) . getLogger ( ) . ErrorException ( "Error retrieving intros" , exception ) ; addMainItem ( mainItem , serializer , items , outerResponse ) ; }
public void run ( ) { if ( userDetails == null ) userNotLoggedPopulateUi ( ) ; else userLoggedPopulateUi ( userDetails ) ; }
public static MeasureDialogFragment newInstance ( ) { MeasureDialogFragment mdf = new MeasureDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putBoolean ( "is_edition" , false ) ; mdf . setArguments ( args ) ; return mdf ; }
private void scaleRadius ( float factor ) { radius * = factor ; radius = clampRadius ( radius ) ; appMenu . setRadius ( radius ) ; }
public Spanned getHtmlDescription ( ) { return Html . fromHtml ( description ) ; }
public OverlayView ( ) { super ( DragOptionLayout . this . getContext ( ) ) ; setWillNotDraw ( false ) ; }
public void onEvent ( CategoriesUpdatedEvent event ) { init ( ) ; }
public boolean hasPattern ( ) { return type == CUSTOM || StringUtil . nonEmpty ( getPattern ( ) ) ; }
public void onStart ( ) { super . onStart ( ) ; FirebaseUser currentUser = mAuth . getCurrentUser ( ) ; if ( currentUser != null ) { Intent i = new Intent ( LoginActivity . this , HomeActivity . class ) ; startActivity ( i ) ; } }
public void execute ( Realm realm ) { Sample sample = realm . where ( Sample . class ) . equalTo ( "id" , id ) . findFirst ( ) ; if ( sample != null ) sample . deleteFromRealm ( ) ; }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { if ( list . size ( ) > position ) onItemClick ( list . get ( position ) ) ; }
private ToggleNotificationHelper ( @ NonNull Context context , @ NonNull String gid , @ NonNull Mode mode ) { this . context = context ; this . payload = new MessengerPayload ( gid , mode ) ; }
public void onSwipeItemStarted ( MyViewHolder holder , int position ) { notifyDataSetChanged ( ) ; }
public void setLocation ( Location location ) { this . location = location ; }
public void setProximityCorrectionEnabled ( boolean enabled ) { mProximityCorrectOn = enabled ; }
public void changed ( ChangeEvent event , Actor actor ) { game . ShowAboutScreen ( ) ; }
public int getItemCount ( ) { return list . size ( ) + 1 ; }
public void playMessageAtIndex ( int index ) { if ( currentPlaylistNum < 0 || currentPlaylistNum >= playlist . size ( ) ) { return ; } currentPlaylistNum = index ; playMusicAgain = true ; playAudio ( playlist . get ( currentPlaylistNum ) ) ; }
public void onClick ( boolean longClick ) { try { c . startActivity ( phoneIntent ) ; } catch ( Exception e ) { Toast . makeText ( c , R . string . mal_activity_exception , Toast . LENGTH_SHORT ) . show ( ) ; } }
public void testNullMediaIDStructure ( ) throws Exception { String mediaID = MediaIDHelper . createMediaID ( null , "BY_GENRE" , "Classic 70's" ) ; assertEquals ( "Classic 70's" , MediaIDHelper . extractBrowseCategoryValueFromMediaID ( mediaID ) ) ; assertNull ( MediaIDHelper . extractMusicIDFromMediaID ( mediaID ) ) ; }
public void onAddRepeatClicked ( ) { swipeHandler . setBeenSwiped ( false ) ; shownAlertDialogIsGroupRepeat = false ; formEntryViewModel . addRepeat ( true ) ; formIndexAnimationHandler . handle ( formEntryViewModel . getCurrentIndex ( ) ) ; }
public void onSubredditSubscriptionSuccess ( ) { ( ( DataViewHolder ) holder ) . subscribeButton . setVisibility ( View . GONE ) ; Toast . makeText ( context , R . string . subscribed , Toast . LENGTH_SHORT ) . show ( ) ; }
public String next ( ) { String string = getString ( index ) ; index ++ ; return string ; }
public static boolean isSyncBeforeInit ( ) { return getBoolean ( R . string . pref_key_is_sync_before_init , true ) ; }
public Observable < Boolean > undoAvailability ( ) { if ( undoAvailabilityObserver == null ) { undoAvailabilityObserver = Observable . create ( undoAvailability ) . replay ( ) . autoConnect ( ) ; } return undoAvailabilityObserver ; }
public int getPriority ( ) { return 1 ; }
public void drawDrawable ( Canvas canvas , Drawable draw , int startingX , int startingY , int endingX , int endingY ) { draw . setBounds ( startingX , startingY , endingX , endingY ) ; draw . draw ( canvas ) ; }
public ReplyViewHolder ( View itemView , Callback callback ) { super ( itemView ) ; mCallback = callback ; mReplyButton = ( Button ) itemView . findViewById ( R . id . btn_reply ) ; mReplyButton . setOnClickListener ( this ) ; }
public List < TerminalBridge > getBridges ( ) { return bridges ; }
public int getItemViewType ( int position ) { Message msg = view . getMessageItem ( position ) ; String userId = model . getUserId ( ) ; return ( msg . getAuthorId ( ) . equals ( userId ) ) ? OUT_MSG : IN_MSG ; }
public SharingViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . publicize_listitem , parent , false ) ; return new SharingViewHolder ( view ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_0 . getText ( ) . toString ( ) ) ; }
public boolean isRestrictBounds ( ) { return isRestrictBounds ; }
public Scheduler computation ( ) { return Schedulers . computation ( ) ; }
public void requestUpdate ( UUID serverUUID ) { mUpdateThreadHandler . post ( ( ) -> performUpdate ( serverUUID ) ) ; }
public void onCardImportClick ( ) { onWalletImportClick ( ) ; }
public static void setShowGutenbergInfoPopupForTheNewPosts ( String siteURL , boolean show ) { setBooleanPrefForKeyAndURL ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS , siteURL , show ) ; }
private AppComponent buildComponent ( ) { return DaggerAppComponent . builder ( ) . cachedRepoModule ( new CachedRepoModule ( get ( ) ) ) . controllerModule ( new ControllerModule ( ) ) . build ( ) ; }
public void reset ( ) { lastSampleTimestamp = C . TIME_UNSET ; }
public void onEvent ( OnTrackerDeleted event ) { invalidateOptionsMenu ( ) ; pager . setCurrentItem ( 0 ) ; Log . d ( TAG , "currentTracker : null" ) ; }
public JsonElement serialize ( TextWithImages src , Type typeOfSrc , JsonSerializationContext context ) { return new JsonPrimitive ( src . text . toString ( ) ) ; }
public String getRoSerialno ( ) { return roSerialno ; }
public FormulaState ( Parcel in ) { super ( ) ; formulaId = in . readInt ( ) ; termId = in . readInt ( ) ; data = in . readParcelable ( getClass ( ) . getClassLoader ( ) ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mDrawerToggle != null ) { mDrawerToggle . onConfigurationChanged ( newConfig ) ; } }
public List < FilterSection > getFilterSections ( ) { return filterSections ; }
public static MoreRecentThanBound notOlderThan ( long ageMs ) { return new MoreRecentThanBound ( System . currentTimeMillis ( ) - ageMs ) ; }
public FilteredSensorData getFilteredSensorData ( ) { T filteredValue = getFilteredValue ( ) ; return new FilteredSensorData ( mSensorType , filteredValue , mSensorType . getMyFormater ( ) . format ( filteredValue ) , mDeviceName , getFilterType ( ) , getFilterConstant ( ) ) ; }
public static void setFlagIcon ( ImageView imageView , String code ) { int imageId = UIFlags . getResourceFromCode ( code ) ; if ( imageId != - 1 ) { imageView . setImageResource ( imageId ) ; } }
public void onItemSelected ( ) { itemView . setBackgroundColor ( Color . LTGRAY ) ; if ( Build . VERSION . SDK_INT >= 21 ) { itemView . setTranslationZ ( 12 ) ; } }
public void execute ( ) { refreshCurrentList ( ) ; }
public static View findViewByPosition ( RecyclerView . LayoutManager layoutManager , int position ) { return ( position != RecyclerView . NO_POSITION ) ? layoutManager . findViewByPosition ( position ) : null ; }
private String getText ( String input ) { return input ; }
public static int handleShowAsActionIfRoom ( final int showAsAction ) { if ( showAsAction == MenuItem . SHOW_AS_ACTION_IF_ROOM ) return MenuItem . SHOW_AS_ACTION_ALWAYS ; return showAsAction ; }
public void prepareSingleTrack ( Format format ) { track ( 0 ) . format ( format ) ; sampleQueuesBuilt = true ; maybeFinishPrepare ( ) ; }
public String getAddress ( ) { return getAddressJ ( accountIndex ) ; }
public void onAccountPicked ( @ NonNull LocalAccount account ) { fragment . moveNote ( account ) ; }
public void applyPass ( String pass , TetroidNode node ) { setupPass ( pass ) ; }
public void setAngle ( float angle ) { mAngle = angle ; }
public void testGetHour_I ( ) throws Exception { TimeTableElement tte = new TimeTableElement ( hour , class_name , subject , newSubject , room , newRoom , info ) ; assertEquals ( 3 , tte . getHour_I ( ) ) ; }
public void toggleReadStateOfItem ( ViewHolder viewHolder ) { RssItem rssItem = viewHolder . getRssItem ( ) ; boolean isRead = ! rssItem . getRead_temp ( ) ; changeReadStateOfItem ( viewHolder , isRead ) ; }
public void onItemClick ( View view , int position ) { TLRPC . TL_messageMediaVenue object = searchAdapter . getItem ( position ) ; if ( object != null && delegate != null ) { delegate . didSelectLocation ( object ) ; } finishFragment ( ) ; }
public void onStopNestedScroll ( View target ) { nestedScrollingParentHelper . onStopNestedScroll ( target ) ; if ( dismissed ) { return ; } float currentTranslation = containerView . getTranslationY ( ) ; checkDismiss ( 0 , 0 ) ; }
public void setMinTextSize ( float minTextSize ) { minTextSize = minTextSize ; reAdjust ( ) ; }
private AppStorages ( Context base ) { super ( base ) ; }
public void setContextMenu ( int res ) { this . mResContextMenu = res ; }
public CastleActor ( Texture castillo ) { setSize ( castillo . getWidth ( ) , castillo . getHeight ( ) ) ; this . castillo = castillo ; this . hp = 100 ; this . isAlive = true ; }
public WikiAccountAuthenticator ( Context context ) { super ( context ) ; this . context = context ; }
public boolean onMenuItemClick ( MenuItem menuItem ) { if ( menuItem . getItemId ( ) == R . id . profile_settings ) startActivity ( new Intent ( getApplicationContext ( ) , SettingsActivity . class ) ) ; return false ; }
public CharSequence getPageTitle ( int position ) { return getContext ( ) . getString ( TITLES [ position ] ) ; }
public boolean hasText ( ) { return messsageEditText != null && messsageEditText . length ( ) > 0 ; }
public void moveDown ( String name ) { onView ( allOf ( withId ( R . id . playlist_drag_handle ) , withParent ( hasDescendant ( withText ( name ) ) ) ) ) . perform ( down ( ) ) ; }
public Fragment getCurrentFragment ( ) { if ( mFragmentManager == null ) { return SongsFragment . newInstance ( ) ; } return mFragmentManager . findFragmentByTag ( LibraryFragment . TAG ) ; }
public void notice ( ) { super . notice ( ) ; yell ( Game . getVar ( R . string . Yog_Info2 ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( SAVE_SURVEY_TITLE , currentInfos . surveyTitle ) ; outState . putStringArrayList ( SAVE_SURVEY_REPLY_LIST , currentInfos . surveyReplysList ) ; }
public boolean presentFragment ( final BaseFragment fragment , final boolean removeLast , boolean forceWithoutAnimation ) { return actionBarLayout . presentFragment ( fragment , removeLast , forceWithoutAnimation , true ) ; }
public static IDocsInteractor createDocsInteractor ( ) { return new DocsInteractor ( Injection . provideNetworkInterfaces ( ) , Injection . provideRepositories ( ) . docs ( ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; mMenu = menu ; MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . anki_stats , mMenu ) ; return true ; }
private void ensureMessagesIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { messages_ = new java . util . ArrayList < com . google . protobuf . Any > ( messages_ ) ; bitField0_ | = 0x00000001 ; } }
public Map < ? , ? > getMap ( SessionInfo sessionInfo , long torrentID ) { return map ; }
public List < EventSource > getTaskLists ( ) { List < EventSource > lists = getLocalTaskLists ( ) ; lists . addAll ( getGoogleTaskLists ( ) ) ; return lists ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . sign_in , container , false ) ; setIds ( view ) ; setClickListeners ( ) ; return view ; }
public void callback ( boolean done ) { if ( this . callback != null ) { this . callback . onMoreMessagesLoaded ( messageCount , conversation ) ; if ( done ) { this . callback . informUser ( R . string . no_more_history_on_server ) ; } } }
public boolean isZoomed ( ) { return normalizedScale != 1 ; }
private void randomizeNextTrack ( ) { if ( mCurrentList . size ( ) > 0 ) { mNextPlayingIndex = mArtistTrackBuckets . getRandomTrackNumber ( ) ; } }
private void createMissionsWithFemalesForFemales ( ) { QuestionType t = MISSION_FEMALE ; add ( " { S } Ta bilder med *F* varje chans du får under kvällen . " , t ) ; }
public Integer getFeeChargesOutstanding ( ) { return feeChargesOutstanding ; }
public void onPause ( ) { if ( mState == STATE_ATTACHED_ACTIVE ) { mState = STATE_ATTACHED_PAUSED ; } }
public void failedResultWithNoDataWillDisplayFailedDialog ( ) { Pair < Boolean , Collection . CheckDatabaseResult > result = failedResultNoData ( ) ; execute ( result ) ; assertThat ( "Load Failed dialog should be shown if no data is supplied" , impl . didDisplayDialogLoadFailed ( ) ) ; }
public static void onRealDestroy ( Activity activity ) { if ( running ) { running = false ; guiListener = null ; } }
public void setScore ( Element el , int score ) { el . attr ( "gravityScore" , Integer . toString ( score ) ) ; }
private void removeGrids ( ) { removePolylines ( ) ; }
public int read ( ) throws IOException { synchronized ( this ) { try { wait ( BLOCK_TIME_MS ) ; } catch ( InterruptedException e ) { } } return 0 ; }
public void onSaveInstanceState ( Bundle outState ) { mCurrentItem = mContestPager . getCurrentItem ( ) ; outState . putInt ( VIEW_PAGER_CURRENT_ITEM , mCurrentItem ) ; }
public void run ( ) { loadContacts ( false ) ; }
public void setNegativeButtonEnabled ( Boolean enabled ) { try { getNegativeButton ( ) . setEnabled ( enabled ) ; } catch ( NullPointerException e ) { LOGD ( TAG , "Negative welcome button doesn't exist to set enabled . " ) ; } }
public int getSelectedPlaylistsCount ( ) { return mSelectedPlaylistIds . size ( ) ; }
public static Builder newBuilder ( ) { return new Builder ( ) ; }
private void resetPassword ( ) { Intent intent = new Intent ( Intent . ACTION_VIEW ) ; intent . setData ( Uri . parse ( getResources ( ) . getString ( R . string . resetpw_url ) ) ) ; startActivity ( intent ) ; }
public void initializeDictionary ( ) { initializeDictionary ( language ) ; }
public boolean onItemLongClick ( UserLTE item ) { if ( activity != null ) { ProjectActivity . openIt ( getContext ( ) , activity . projectUser . project , item . id ) ; return true ; } return false ; }
private void setLabel ( @ Nullable CharSequence sequence ) { if ( ! TextUtils . isEmpty ( sequence ) ) { mLabelTextView . setText ( sequence ) ; setLabelEnable ( getOrientation ( ) == HORIZONTAL ) ; } else { setLabelEnable ( false ) ; } }
public void onAnimationEnd ( Animator animation ) { instantCameraView . hideCamera ( true ) ; instantCameraView . setVisibility ( View . GONE ) ; }
public Integer getViews ( ) { return views ; }
private void change24Prefs ( ) { boolean is24 = binding . time24hourPrefs . isChecked ( ) ; mPrefs . set24HourFormatEnabled ( ! is24 ) ; binding . time24hourPrefs . setChecked ( ! is24 ) ; }
public DocumentModel ( ) { this ( - 1L , "" , "" , new Date ( ) , "" , "" , "" ) ; }
public void setFilter ( FILTERS newFilter ) { mCurrentFilter = newFilter ; myNotifyDatasetChanged ( ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . updateInterfaces ) ; }
private void retrieveSiteDomain ( ) { Bundle args = getArguments ( ) ; mSiteDomain = getString ( R . string . wordpress_dot_com ) . toLowerCase ( ) ; if ( args != null ) { mSiteDomain = args . getString ( SITE_DOMAIN_KEY ) ; } }
public JrResponse getResponse ( ) { return response ; }
public FloatScroller ( ) { mInterpolator = new AccelerateDecelerateInterpolator ( ) ; }
public void onTextLongClicked ( long idFeed , boolean isFolder , Long optional_folder_id ) { mCallbacks . onTopItemLongClicked ( idFeed , isFolder , optional_folder_id ) ; }
public Boolean getVideo ( ) { return video ; }
public boolean exist ( String key ) { return mStorage . exists ( key ) ; }
private void subTestPopupButtonAvailability ( String option , boolean expected ) { View button = mActivity . getPopupButton ( option ) ; if ( expected ) { assertTrue ( button != null ) ; } else { assertTrue ( button == null ) ; } }
public void run ( ) { String res = Statusgo . hashTransaction ( txArgsJSON ) ; callback . invoke ( res ) ; }
public void start ( Attributes attributes ) { mCurrentBoard = new Board ( Integer . parseInt ( attributes . getValue ( Board . Xml . ID_ATTRIBUTE ) ) ) ; mCurrentBoard . setCategory ( mCurrentCategory ) ; }
public boolean accept ( File dir , String name ) { return ( new FileTypeModel ( getExtensionFromPath ( name ) ) ) . equals ( FileTypeModelENUM . AUDIO . type ) ; }
public GroupHolder ( final View view ) { super ( view ) ; _slotName = view . findViewById ( R . id . text_slot_name ) ; _buttonDelete = view . findViewById ( R . id . button_delete ) ; }
public void onPromptStateChanged ( MaterialTapTargetPrompt prompt , int state ) { assertEquals ( thePrompt , prompt ) ; assertEquals ( MaterialTapTargetPrompt . STATE_FINISHED , state , 0 ) ; }
public String getDescription ( ) { if ( mInfoElement == null ) return " - " ; String result = xu . findElementText ( mInfoElement , R . string . xml2elemName_info_desc ) ; if ( result == null ) return " - " ; else return result ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; isUploadServiceConnected = false ; presenter . onDetachView ( ) ; }
public void unLink ( ) { m_activity = null ; }
public void setRGBValue ( ) { if ( mRGBValue != null ) { mRGBValue . setText ( " ( " + alpha + " , " + red + " , " + green + " , " + blue + " ) " ) ; } }
public int getSms ( ) { return sms ; }
public void onCreate ( ) { super . onCreate ( ) ; Serializer serializer = new Serializer ( this ) ; watchlist = serializer . readWatchlist ( ) ; }
public List < String > getFieldOfApplication ( ) { return mFieldOfApplication ; }
public void onStartProcessingFor ( int id ) { scrollTo ( id ) ; }
public void applyFilter ( int [ ] status ) { friendsList = Photobook . getFriendsDataSource ( ) . getFriendsByStatus ( status ) ; adapter . clear ( ) ; adapter . addAll ( friendsList ) ; adapter . notifyDataSetChanged ( ) ; }
public void addition_isCorrect ( ) throws Exception { assertEquals ( 4 , 2 + 2 ) ; }
private void init ( View itemView ) { time = ( TextView ) itemView . findViewById ( R . id . messageTime ) ; }
public boolean getBoolPref ( int id ) { return getBoolPref ( id , false ) ; }
public void onSuccess ( String url , String path ) { mJsInterface . displayImage ( url , path , id ) ; }
public float getValue ( ) { return Numbers . parseFloat ( getPersistedString ( null ) ) ; }
public void setIndeterminateTintMode ( @ Nullable PorterDuff . Mode tintMode ) { logProgressBarTintWarning ( ) ; super . setIndeterminateTintMode ( tintMode ) ; }
public static boolean switchService ( ) { if ( DaedalusVpnService . isActivated ( ) ) { deactivateService ( instance ) ; return false ; } else { activateService ( instance ) ; return true ; } }
public FileMusicModelBuilder title ( String title ) { this . mTitle = title ; return this ; }
private String getSubText ( @ StringRes int strId , int value ) { return String . format ( getContext ( ) . getString ( strId ) , value ) ; }
public String getIndicatorId ( ) { return indicatorId ; }
public TOCHeaderViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new TOCListAdapter . TOCHeaderViewHolder ( LayoutInflater . from ( ( parent . getContext ( ) ) ) . inflate ( R . layout . biblio_chapter_basic_view , parent , false ) ) ; }
public boolean onLongClick ( View v ) { ConfirmationDialogFragment instance = getInstance ( this : : deleteOnContinue , R . string . remove_region_title , R . string . remove_region_warning_message ) ; instance . show ( fragment . requireFragmentManager ( ) , null ) ; return true ; }
public void onChanged ( FirebaseElement < WalletEntry > firebaseElement ) { if ( firebaseElement . hasNoError ( ) ) { walletEntry = firebaseElement . getElement ( ) ; onDataGot ( ) ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . add_comment ) { addComment ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void dispatchStarting ( MoveAnimationInfo info , RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchMoveStarting ( " + item + " ) " ) ; } mItemAnimator . dispatchMoveStarting ( item ) ; }
public void testEncode ( ) throws WriterException { doTest ( "00123456789012" , "0000010101010111000111000101110100010101110001110111010001010001110100011" + "100010101000101011100011101011101000111000101110100010101110001110100000" ) ; }
public CustomAdapter ( Context context , ArrayList < TransactionEntry > transactionEntries ) { this . context = context ; this . transactionEntries = transactionEntries ; }
public void deleteLastKnownLocationAsBoundingBox ( ) { mLastKnownLocationBoundingBoxPreference . delete ( ) ; }
public void draw ( Canvas canvas ) { if ( mShow ) { super . draw ( canvas ) ; } }
public LinkFilter ( ) { mSearchOnUrlEnabled = false ; }
public void open ( ) throws SQLException { database = dbHelper . getWritableDatabase ( ) ; }
public BlurMaskFilter getBlurMaskFilter ( float radius ) { if ( blurMaskFilterRadius == radius ) { return blurMaskFilter ; } blurMaskFilter = new BlurMaskFilter ( radius , BlurMaskFilter . Blur . NORMAL ) ; blurMaskFilterRadius = radius ; return blurMaskFilter ; }
public String getGaplessDatabaseFilePath ( ) { return mGaplessDatabasePath ; }
public com . coinomi . core . protos . Protos . UnspentOutput getUnspentOutput ( int index ) { if ( unspentOutputBuilder_ == null ) { return unspentOutput_ . get ( index ) ; } else { return unspentOutputBuilder_ . getMessage ( index ) ; } }
public boolean isHidden ( final RedditChangeDataManagerVolatile changeDataManager ) { if ( mParent != null ) { return mParent . isCollapsed ( changeDataManager ) || mParent . isHidden ( changeDataManager ) ; } return false ; }
private void fetchFollowingsList ( String startFrom ) { isThisInitialFetch = ( startFrom == null ) ; followingsApi . requestFollowings ( username , startFrom ) ; }
public void setup ( TransactionDisplayType transactionDisplayType , List < BigInteger > transactionIDs ) { this . transactionDisplayType = transactionDisplayType ; this . transactionIDs = transactionIDs ; }
public @ Nullable Status getStatusAtPosition ( int position ) { return statusList . get ( position - accountList . size ( ) ) ; }
public void onChange ( TransportOption newTransport ) { setImageResource ( newTransport . getDrawable ( ) ) ; setContentDescription ( newTransport . getDescription ( ) ) ; }
public void onBackPressed ( ) { Intent intent = new Intent ( this , StartActivity . class ) ; startActivity ( intent ) ; finish ( ) ; }
public void setEmojiClickListener ( @ NonNull OnEmojiconClickedListener listener ) { this . emojiClickListener = listener ; }
public static LocalDate parse ( String text , String pattern ) { return LocalDate . parse ( text , DateTimeFormatter . ofPattern ( pattern ) ) ; }
public SearchTeamView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initialize ( context ) ; setupDefaultAttributes ( context , attrs ) ; }
public void dismissAllDialogFragments ( ) { ( ( DatabaseErrorDialogListener ) getActivity ( ) ) . dismissAllDialogFragments ( ) ; }
public boolean onMenuItemClick ( MenuItem item ) { return handleMenuClick ( activity , getSong ( ) , item ) ; }
public JSONObject getDeviceManager ( ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/device - managers" , mUserId ) , requestMap ) ; }
public TVShowSeasons getSeason ( int position ) { return ( null != mSeasonsList ? mSeasonsList . get ( position ) : null ) ; }
public void setAvatarUrl ( String avatarUrl ) { this . avatarUrl = StringUtils . notNullStr ( avatarUrl ) ; }
public void testIsEditTextViewTrue ( ) { assertTrue ( mValidationHolderRegexTypeWithEditText . isEditTextView ( ) ) ; assertTrue ( mValidationHolderRangeTypeWithEditText . isEditTextView ( ) ) ; assertTrue ( mValidationHolderConfirmationTypeWithEditText . isEditTextView ( ) ) ; assertTrue ( mValidationHolderCustomTypeWithEditText . isEditTextView ( ) ) ; }
private void levelInit ( List < RecyclerViewItem > items ) { mLevel = new DescriptionView ( ) ; mLevel . setTitle ( getString ( R . string . level ) ) ; items . add ( mLevel ) ; }
public int getCount ( ) { return titles . length ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mWebUrl = getArguments ( ) != null ? ( String ) getArguments ( ) . getString ( "url" ) : null ; }
public MainViewModel ( ) { super ( ) ; initAnonService ( ) ; }
public int getCount ( ) { return itemsPath . size ( ) ; }
public static XMPPError . Condition getErrorCondition ( Stanza packet ) { return packet . getError ( ) != null ? packet . getError ( ) . getCondition ( ) : null ; }
public void setLteRsrq ( Long lteRsrq ) { this . lteRsrq = lteRsrq ; }
public void onPositive ( MaterialDialog dialog ) { if ( id == limite || ( modo == 1 && vidas < 0 ) ) { juegoCompletado ( ) ; } else { siguientePregunta ( ) ; } }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . invite_selected_contacts : invite ( ) ; } }
public static void updateConnectionsForSite ( Context context , @ NonNull SiteModel site ) { Intent intent = new Intent ( context , PublicizeUpdateService . class ) ; intent . putExtra ( WordPress . SITE , site ) ; context . startService ( intent ) ; }
public void onViewThread ( int position ) { super . viewThread ( statuses . get ( position ) . getAsRight ( ) ) ; }
public void setPresenter ( MainContract . Presenter presenter ) { this . presenter = presenter ; }
public static MyApplication getInstance ( ) { return application ; }
private static float interpolate ( float x1 , float x2 , float f ) { return x1 + ( x2 - x1 ) * f ; }
public boolean attachTo ( Char target ) { pos = target . getPos ( ) ; return super . attachTo ( target ) ; }
public void onProviderEnabled ( String provider ) { tracer . info ( "Provider enabled : " + provider ) ; loggingService . restartGpsManagers ( ) ; }
public int getSavedVegasWinAmount ( ) { return savedSharedData . getInt ( PREF_KEY_VEGAS_WIN_AMOUNT , DEFAULT_VEGAS_WIN_AMOUNT ) ; }
private void initializeOnException ( ) { classLayer = "5" ; classTitle = "a" ; }
public String toString ( ) { return "Status is " + getStatus ( ) . toString ( ) ; }
public int getCurrentForum ( ) { return currentForumId ; }
public HistoryScanHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . history_list_item , parent , false ) ; return new HistoryScanHolder ( v , productUrl ) ; }
public void onClick ( View view ) { MessagesSearchQuery . searchMessagesInChat ( null , dialog_id , mergeDialogId , classGuid , 2 ) ; }
public void showError ( ) { Toast . makeText ( getContext ( ) , getString ( R . string . fragment_recipe_creation_dialog_error ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public void setCorrect ( int correct ) { this . correct = correct ; }
public PolyLineChart ( LineChartSeries series , PolyLineChartRender render ) { super ( series , render ) ; }
public static SharedPreferences getStorage ( Context context , File file ) { String fname = getProperFName ( context , file ) ; return context . getSharedPreferences ( fname , Context . MODE_PRIVATE ) ; }
public static String percentage ( String num , int decimalPlaces ) { BigDecimal a = new BigDecimal ( num ) ; return a . divide ( HUNDRED , decimalPlaces , RoundingMode . HALF_UP ) . toString ( ) ; }
public void onError ( int i ) { LogUtil . d ( TAG , "onError : " + i ) ; showErrorMessage ( i ) ; }
public void setInputGravity ( int gravity ) { FrameLayout . LayoutParams layoutParams = ( FrameLayout . LayoutParams ) innerContainer . getLayoutParams ( ) ; layoutParams . gravity = gravity ; innerContainer . setLayoutParams ( layoutParams ) ; }
public void testEmptyGetPreview ( ) { clearRealm ( ) ; Iterable < Preview > previews = repository . getPreviews ( new ItemsPerPreview ( 0 ) ) ; assertEquals ( false , previews . iterator ( ) . hasNext ( ) ) ; fillRealm ( ) ; }
public static int parseInt ( String s , int preset ) { try { if ( s != null && s . length ( ) > 0 ) { return Integer . parseInt ( s ) ; } } catch ( NumberFormatException e ) { } return preset ; }
public int getNummer ( ) { return this . _nummer ; }
public Transaction getItem ( final int position ) { if ( position == transactions . size ( ) ) return null ; return transactions . get ( position ) ; }
private void getDiscussionsFromDatabase ( ) { mDiscussions = new Select ( ) . all ( ) . from ( MoodleDiscussion . class ) . execute ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "jp . co . geisha . itunestracker" , appContext . getPackageName ( ) ) ; }
public void delete ( int index ) { cancelAlarm ( mDataSource . get ( index ) ) ; mDataSource . remove ( index ) ; dataSetChanged ( ) ; }
public BookmarkViewModel ( @ NonNull final Application application , final boolean addHeader ) { super ( application ) ; mAddHeader = addHeader ; }
public void setMemberId ( long memberId ) { this . memberId = memberId ; }
public void clearRecentHashtags ( ) { super . clearRecentHashtags ( ) ; searchResultHashtags . clear ( ) ; notifyDataSetChanged ( ) ; if ( delegate != null ) { delegate . needChangePanelVisibility ( false ) ; } }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( ! ( context instanceof OnDeleteCardConfirmCallback ) ) throw new RuntimeException ( "Parent doesn't implement fragment callback interface" ) ; }
public static String getFingerprint ( PGPPublicKey publicKey ) { return MessageUtils . bytesToHex ( publicKey . getFingerprint ( ) ) . toUpperCase ( Locale . US ) ; }
public CharSequence getTitle ( ) { return context . getResources ( ) . getString ( R . string . replace_all ) ; }
public QoSTestResultEnum getTestType ( ) { return QoSTestResultEnum . TCP ; }
public void tearDown ( ) throws Exception { File backupFolder = StorageHelper . getBackupDir ( Constants . AUTO_BACKUP_DIR ) ; FileUtils . deleteDirectory ( backupFolder ) ; }
public void handleDownloadFailure ( int errId ) { if ( mErrorDialog != null && mErrorDialog . isShowing ( ) ) { return ; } showFatalErrorDialog ( errId ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( channel_id ) ; stream . writeInt32 ( max_id ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; getComponent ( MainComponent . class ) . inject ( this ) ; mMedicalAttentionMainPresenter . setView ( this ) ; }
public String name ( ) { return Game . getVar ( R . string . DriedRoseCursedBuff_Name ) ; }
public static ReceivedData [ ] textIntents ( ) { return new ReceivedData [ ] { new ReceivedData ( true , false , R . string . title_intent_create_text ) , new ReceivedData ( false , false , R . string . title_intent_exist_text ) } ; }
public final void setMaximumDpi ( int dpi ) { DisplayMetrics metrics = getResources ( ) . getDisplayMetrics ( ) ; float averageDpi = ( metrics . xdpi + metrics . ydpi ) /2 ; setMinScale ( averageDpi / dpi ) ; }
public void onBackPressed ( ) { if ( mDrawer . isDrawerOpen ( GravityCompat . START ) ) { mDrawer . closeDrawer ( GravityCompat . START ) ; } else { super . onBackPressed ( ) ; } }
public PorterDuff . Mode getIndeterminateTintMode ( ) { logProgressBarTintWarning ( ) ; return super . getIndeterminateTintMode ( ) ; }
public void opensPgnigSettingsHelp ( ) { tester . openSettings ( ) . pickProvider ( Provider . PGNIG ) . openHelp ( ) . clickOk ( ) ; }
public void updateData ( ) { this . accounts = passpieDatabase . getAccountsSortedByName ( ) ; this . notifyDataSetChanged ( ) ; }
public void setDx ( int dx ) { this . dx = dx ; }
public void pushFromBacklog ( final Message message ) { if ( notify ( message ) ) { synchronized ( notifications ) { getBacklogMessageCounter ( message . getConversation ( ) ) . incrementAndGet ( ) ; pushToStack ( message ) ; } } }
public float getDistanceFromCenter ( Point center , int viewCenterX , int viewCenterY ) { return viewCenterX - center . x ; }
private void setVolumes ( final Volumes volumes ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . setVolumes ( volumes ) ; }
public BarFormatter ( int fillColor , int borderColor ) { fillPaint . setColor ( fillColor ) ; borderPaint . setColor ( borderColor ) ; }
private void launchMedicationActivity ( ) { if ( mProgressDialog != null && mProgressDialog . isShowing ( ) ) { mProgressDialog . dismiss ( ) ; } startActivity ( MedicationActivity . newIntent ( this ) ) ; finish ( ) ; }
public BigDecimal getValeurAcquiseFinAnnee ( ) { return this . valeurAcquiseFinAnnee ; }
public static com . coinomi . core . protos . Protos . Wallet parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public int compare ( DatabaseEntry a , DatabaseEntry b ) { return a . getName ( ) . compareToIgnoreCase ( b . getName ( ) ) ; }
public EighthActivityBuilder rooms ( String [ ] rooms ) { this . rooms = rooms ; return this ; }
public void onPause ( ) { super . onPause ( ) ; if ( player != null ) { currentPosition = player . getCurrentPosition ( ) ; player . stop ( ) ; player . release ( ) ; } }
public void onPress ( int primaryCode ) { mKeyboardActionListener . onPress ( primaryCode ) ; }
public void onResponse ( UserManager . User response ) { if ( mUserActivity . get ( ) != null && ! mUserActivity . get ( ) . isActivityDestroyed ( ) ) { mUserActivity . get ( ) . onUserLoaded ( response ) ; } }
public void showNoInternetConnection ( ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_no_internet ) , getString ( R . string . dialog_error_message_no_internet ) ) ; hideLoadingDialog ( ) ; }
public void logoutTemporarily ( @ NonNull final Context context , @ Nullable final Callable callback ) { logoutTemporarily ( context , null , callback ) ; }
public LinkServerListAdapter ( Activity context , String hostName , String channelName ) { mContext = context ; mHostName = hostName ; mChannelName = channelName ; reloadServerList ( true ) ; }
public AnswerFrame ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( attrs , 0 ) ; }
private static int [ ] zzUnpackAttribute ( ) { int [ ] result = new int [ 253 ] ; int offset = 0 ; offset = zzUnpackAttribute ( ZZ_ATTRIBUTE_PACKED_0 , offset , result ) ; return result ; }
public int getSo2 ( ) { return so2 ; }
public DefaultOutcomingImageMessageViewHolder ( View itemView ) { super ( itemView ) ; }
public NotficationListAdapter ( @ NonNull Context context , List < NotificationModel > list ) { super ( context , R . layout . custom_notication_row , list ) ; }
private String getVersionNumber ( ) { try { return getPackageManager ( ) . getPackageInfo ( getPackageName ( ) , 0 ) . versionName ; } catch ( final NameNotFoundException e ) { return "" ; } } ;
public void onEvent ( OnLogEntryDeleted event ) { if ( currentTracker != null ) { refresh ( ) ; } }
public boolean ensureNotEmpty ( ) { if ( mModels . isEmpty ( ) ) { StdModels . basicModel . add ( mCol ) ; return true ; } else { return false ; } }
public Builder stepSubtitleTextSizeInPx ( int stepSubtitleTextSizeInPx ) { style . stepSubtitleTextSizeInPx = stepSubtitleTextSizeInPx ; return this ; }
private void getEventsFromDatabase ( ) { mEvents = new Select ( ) . from ( MoodleEvent . class ) . where ( "courseid = ?" , mCourseid ) . execute ( ) ; }
public void setActionBarDrawerToggle ( @ NonNull ActionBarDrawerToggle actionBarDrawerToggle ) { this . mDrawerBuilder . mActionBarDrawerToggleEnabled = true ; this . mDrawerBuilder . mActionBarDrawerToggle = actionBarDrawerToggle ; this . mDrawerBuilder . handleDrawerNavigation ( null ) ; }
private ConLoco ( Loco l ) { super ( l ) ; backward = false ; lightOn = LIGHT_UNKNOWN ; }
public float getCircleSize ( ) { return mCircleSize ; }
public void getCustomMediaUrlWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "1" ) ; setCustomServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public int getJingleStatus ( ) { return this . mJingleStatus ; }
public String getUserId ( ) { return userId ; }
public PlayState ( GameStateManager gsm ) { super ( gsm ) ; }
public long getCellId ( ) { return mGameWorld . getMapInfo ( ) . getCellIdAt ( mBody . getWorldCenter ( ) . x , mBody . getWorldCenter ( ) . y ) ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfMindVision_Info ) ; }
public VerifySpan ( @ NonNull Context context , @ NonNull IdentityKeyMismatch mismatch ) { this . context = context ; this . recipientId = mismatch . getRecipientId ( ) ; this . identityKey = mismatch . getIdentityKey ( ) ; }
private void updateTripTotalExpenses ( ) { mTripTotalExpenses . setText ( getString ( R . string . str_total_expenses ) + " : " + mExpenseManager . getTotalTripexpenses ( mTripId ) ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; countDownIndicator . countdownReset ( ) ; MathBrainerUtility . showUnityAdsRandom ( this ) ; }
public void decorate ( DayViewFacade view ) { view . addSpan ( new DotSpan ( 5 , Color . WHITE ) ) ; }
public Book ( ) { mRootTemplateUID = generateUID ( ) ; }
public void onClick ( View viewIn ) { mDrawerLayout . closeDrawers ( ) ; Intent linkIntent = new Intent ( Intent . ACTION_VIEW ) ; linkIntent . setData ( Uri . parse ( SIAApp . GG_APP . school . website ) ) ; startActivity ( linkIntent ) ; }
public void Refresh ( ) { onFinisehd ( ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; rowCount = 0 ; sectionHeaderRow =- 1 ; reply1Row = rowCount ++ ; reply2Row = rowCount ++ ; reply3Row = rowCount ++ ; reply4Row = rowCount ++ ; explanationRow = rowCount ++ ; return true ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . unknown . snap_wifi" , appContext . getPackageName ( ) ) ; }
public void setTrailers ( List < Trailers > trailers ) { this . mTrailers = trailers ; }
public void tick ( float delta ) { instance . transform . setToTranslation ( pos ) ; body . setWorldTransform ( instance . transform ) ; if ( ! animation . paused ) animation . update ( delta ) ; }
public boolean onCabFinished ( MaterialCab materialCab ) { uncheckAll ( ) ; return true ; }
public static AppComponent getAppComponent ( ) { return mAppComponent ; }
private void longClick ( ) { mSeekbar . setProgress ( round10 ( mSeekbar . getProgress ( ) + ( positive ? 10 : - 10 ) ) ) ; }
public void onPause ( ) { Lg . i ( "onPause" ) ; super . onPause ( ) ; }
public boolean onQueryTextChange ( String s ) { s = s . trim ( ) ; if ( s != "" ) dataAdapter . getFilter ( ) . filter ( s . toString ( ) ) ; return false ; }
public String getYear ( ) { return year ; }
public Tafseer ( int code , String status , Data data ) { super ( ) ; this . code = code ; this . status = status ; this . data = data ; }
public void onDestroy ( ) { AppLog . i ( AppLog . T . READER , "reader service > destroyed" ) ; super . onDestroy ( ) ; }
public void clearRecentHashtags ( ) { super . clearRecentHashtags ( ) ; searchResultHashtags . clear ( ) ; notifyDataSetChanged ( ) ; }
public int getCount ( ) { return mComic . getTotalPages ( ) ; }
private boolean openNextArticle ( ) { if ( nextArticleID != null ) { openArticle ( nextArticleID ) ; return true ; } Toast . makeText ( this , R . string . noNextArticle , Toast . LENGTH_SHORT ) . show ( ) ; return false ; }
public void onDetach ( ) { super . onDetach ( ) ; mBackButtonHandler . removeBackClickListener ( this ) ; mBackButtonHandler = null ; mListener = null ; }
public StateController getStateController ( ) { return mStateController ; }
public @ Nullable Uri getUri ( ) { return upstream . getUri ( ) ; }
public boolean onTouch ( View v , MotionEvent event ) { mEdited = true ; mScaleGestureDetector . onTouchEvent ( event ) ; mDragGestureDetector . onTouchEvent ( event ) ; if ( mOuterTouchListener != null ) mOuterTouchListener . onTouch ( v , event ) ; return true ; }
private BroadcastReceiver hideReceiverNoReset = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideStartMenu ( false ) ; } } ;
private CheckBox removeSupport ( View convertView , int id ) { CheckBox check = ( CheckBox ) convertView . findViewById ( id ) ; check . setVisibility ( View . GONE ) ; return check ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; hideNewPostsBar ( ) ; }
public int getType ( ) { if ( ivl == 0 ) { return CARD_TYPE_NEW ; } else if ( ivl >= 21 ) { return CARD_TYPE_MATURE ; } else { return CARD_TYPE_YOUNG ; } }
public void setData_callsValueChangeListeners ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setBinaryData ( "blah" ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public int getScore ( ) { return ship . isAlive ( ) && nbBase - bases . size ( ) == 0 ? 100 : 0 ; }
public void onPasswordConfirmed ( Bundle args ) { finalizeWalletRestoration ( args ) ; }
public static RecordStore openRecordStore ( String recordStoreName , boolean createIfNecessary ) throws RecordStoreException , RecordStoreFullException , RecordStoreNotFoundException { return recordStoreManager . openRecordStore ( recordStoreName , createIfNecessary ) ; }
public int getItemViewType ( int position ) { if ( position == 0 || position == admins . size ( ) + 1 ) return TEXT ; else return USER ; }
public String actionText ( Item srcItem ) { if ( srcItem instanceof Potion ) { return Utils . format ( Game . getVar ( R . string . Frost_Shatter ) , srcItem . toString ( ) ) ; } return null ; }
private int quit ( ) { unregisterReceiversAndRemoteControlClient ( ) ; pause ( ) ; playingNotificationHelper . killNotification ( ) ; if ( isServiceInUse ) { return START_STICKY ; } else { closeAudioEffectSession ( ) ; stopSelf ( ) ; return START_NOT_STICKY ; } }
public void tellJoke ( View view ) { EndPointsAsyncTask endpointsAsyncTask = new EndPointsAsyncTask ( ) ; endpointsAsyncTask . execute ( this ) ; }
public void onBackPressed ( ) { WebView webview = ( WebView ) findViewById ( R . id . webview ) ; if ( webview . canGoBack ( ) ) { webview . goBack ( ) ; } else { finish ( ) ; } }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . iv_letstart : mFinished . activityFinish ( true ) ; } }
private void showEditorModeSwitchedNotice ( ) { String message = getString ( mHtmlModeMenuStateOn ? R . string . menu_html_mode_done_snackbar : R . string . menu_visual_mode_done_snackbar ) ; mEditorFragment . showNotice ( message ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_tea_stat ) ; initView ( ) ; presenter = new TeaStatPresenter ( this ) ; presenter . getStatList ( ) ; }
public void whenPromptHasAnswer_answerTextViewShowsCorrectAnswer ( ) { assertThat ( createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) . answer . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public void prepare ( Callback callback ) { callback . onPrepared ( this ) ; }
private boolean resetSend ( ) { return accountFragment . isVisible ( ) && accountFragment . resetSend ( ) ; }
private void enableAddPatient ( boolean enabled ) { int resId = enabled ? R . drawable . ic_add : R . drawable . ic_add_disabled ; mAddPatientMenuItem . setEnabled ( enabled ) ; mAddPatientMenuItem . setIcon ( resId ) ; }
public Bundle save ( Bundle setupData ) { onSave ( ) ; if ( setupData != null ) { setupData . putBundle ( mDataKey , mData ) ; } return setupData ; }
public int getInvMatchOffset ( ) { return mRfidDevice . mRx000Device . mRx000Setting . getInvMatchOffset ( ) ; }
public static Cancellable fromJsonReader ( JsonReader reader , OnCompositionLoadedListener l ) { ListenerAdapter listener = new ListenerAdapter ( l ) ; LottieCompositionFactory . fromJsonReader ( reader ) . addListener ( listener ) ; return listener ; }
public void pushFragment ( SupportFragment fragment ) { PresentStyle oldPresetStyle = presentStyle ; setDuration ( 300 ) ; setInterpolator ( new AccelerateDecelerateInterpolator ( ) ) ; setPresentStyle ( PresentStyle . SLIDE_LEFT ) ; presentFragment ( fragment ) ; presentStyle = oldPresetStyle ; setPresentStyle ( presentStyle ) ; }
public void isPermissionGranted ( boolean isGranted , String permission ) { }
public void set ( PlayPauseDrawable d , Float value ) { d . setProgress ( value ) ; }
public void onShow ( DialogInterface dialog ) { if ( showListener != null ) showListener . onShow ( dialog ) ; }
public void checkForTaMarbouta ( ) { assertEquals ( "الصلاه" , ArabicUtilities . cleanTextForSearchingWithRegex ( "الصلاة" ) ) ; }
private void editMetadata ( final FileAudioModel fileAudioModel ) { FileAudioEditTagsDialog . newInstance ( fileAudioModel ) . show ( mFragmentManager , null ) ; }
private boolean handleTrueFont ( Object newValue ) { mPreferences . setBoolean ( Key . ENABLE_TRUEFONT , ( boolean ) newValue ) ; showRestartDialog ( ) ; return true ; }
private static int setMaxAltitude ( BRecordI bRecord , int maxAltitude ) { if ( bRecord . getAltitude ( ) > maxAltitude ) { maxAltitude = bRecord . getAltitude ( ) ; } return maxAltitude ; }
private void onSelectCountryClick ( View view ) { Intent intent = new Intent ( this , ChooseCountryActivity . class ) ; startActivityForResult ( intent , REQUEST_CHOOSE_COUNTRY ) ; }
public void writeEvents ( List < AuditEvent > auditEvents ) { AuditEvent [ ] auditEventArray = auditEvents . toArray ( new AuditEvent [ 0 ] ) ; saveTask = new AuditEventSaveTask ( file , isLocationEnabled , isTrackingChangesEnabled , isUserRequired ) . execute ( auditEventArray ) ; }
public void onErrorResponse ( VolleyError volleyError ) { spinner . setVisibility ( View . GONE ) ; Toast . makeText ( getApplicationContext ( ) , volleyError . getMessage ( ) . toString ( ) , Toast . LENGTH_LONG ) . show ( ) ; }
public void didPressedCancelSendButton ( ChatBaseCell cell ) { MessageObject message = cell . getMessageObject ( ) ; if ( message . messageOwner . send_state != 0 ) { SendMessagesHelper . getInstance ( ) . cancelSendingMessage ( message ) ; } }
private Theme getThemeAt ( int index ) { return cursor != null && ! cursor . isClosed ( ) && cursor . moveToPosition ( index ) ? WaveLinesApp . db . themeFromCursor ( cursor ) : null ; }
public int lines ( ) { return ( int ) ( height/font . lineHeight ) ; }
public FormEntryPage startBlankForm ( String formName ) { goToBlankForm ( formName ) ; return new FormEntryPage ( formName , rule ) . assertOnPage ( ) ; }
public void setArrowsColor ( @ ColorInt int arrowsColor ) { this . mArrowsColor = arrowsColor ; this . mArrowPaint . setColor ( arrowsColor ) ; invalidate ( ) ; }
public void setValueFormatter ( ValueFormatter f ) { if ( f == null ) mAxisValueFormatter = new DefaultAxisValueFormatter ( mDecimals ) ; else mAxisValueFormatter = f ; }
public NameViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . choose_name_cell , parent , false ) ; return new NameChoosingAdapter . NameViewHolder ( view ) ; }
public List < String > getSelectedCommunityTags ( ) { return inlinePostCategoryView . getSelectedTags ( ) ; }
public FileAdapterViewHolder ( @ NonNull FileItemBinding binding ) { super ( binding . getRoot ( ) ) ; this . binding = binding ; }
public void compareLink_withIncompleteRefs__opensBrowser ( ) throws Exception { assertRedirectsToBrowser ( parseLink ( "https : }
public int getNLearned ( long did ) { if ( nLearnedPerDeckId . containsKey ( did ) ) { return nLearnedPerDeckId . get ( did ) ; } else { return 0 ; } }
public void addEventListener ( KeyChainEventListener listener ) { basicKeyChain . addEventListener ( listener ) ; }
public void testGetDirectionWest ( ) { assertDirectionMatches ( 100 , 100 , 30 , 80 , R . string . direction_north ) ; }
public void setAnimDuration ( int milli ) { this . animDurationMilli = milli ; }
private static void setupService ( PatApiService patApiService ) { when ( patApiService . getPatterns ( testRoute1 ) ) . thenReturn ( Observable . just ( patterns ) ) ; }
public RuleChain copyFormChain = TestRuleChain . chain ( ) . around ( rule ) ; @ Test public void whenManualUpdatesEnabled_getBlankFormsIsAvailable ( ) { rule . mainMenu ( ) . enableManualUpdates ( ) . assertText ( R . string . get_forms ) ; }
public boolean onRimeKey ( int [ ] event ) { updateRimeOption ( ) ; final boolean ret = Rime . onKey ( event ) ; activeEditorInstance . commitTextFromRime ( ) ; return ret ; }
public int hashCode ( ) { return ( name . hashCode ( ) + " " + value . hashCode ( ) ) . hashCode ( ) ; }
public boolean isFirstRun ( ) { return sharedPref . getBoolean ( this . mContext . getString ( R . string . first_run_status ) , true ) ; }
public void testIndexOfIgnoreCase3 ( ) { assertEquals ( - 1 , StrUtil . indexOfIgnoreCase ( text , badSearch ) ) ; }
public static synchronized < T > T findFirst ( Class < T > modelClass ) { return findFirst ( modelClass , false ) ; }
public String getArgument ( String string ) throws CommandParsingException { return string ; }
public void onDone ( Domain domain ) { DomainActivity . startActivity ( this , domain ) ; }
private int nextTabStop ( int cursorCol ) { for ( int i = cursorCol ; i < mColumns ; i ++ ) { if ( mTabStop [ i ] ) { return i ; } } return mColumns - 1 ; }
public AttachmentRegionDecoder make ( ) throws IllegalAccessException , InstantiationException { return new AttachmentRegionDecoder ( masterSecret ) ; }
public void onNext ( List < RssItem > rssItems ) { loadRssItemsIntoView ( rssItems ) ; }
public void setProfit ( BigDecimal [ ] [ ] profit ) { Profit = profit ; }
public LottieAnimatableFloatValue getWidth ( ) { return width ; }
public void onReceive ( Context context , Intent intent ) { if ( intent . getAction ( ) != null && intent . getAction ( ) . matches ( LocationManager . PROVIDERS_CHANGED_ACTION ) ) { viewModel . locationProvidersChanged ( ) ; } }
public void setCurrency ( CurrencyDictionary currency ) { this . currency . setValue ( currency ) ; }
public void hideMenu ( ) { mIsShowing = false ; setVisibility ( GONE ) ; }
public static SpannableString buildDefaultMessageFormat ( Context context ) { return MessageFormatSettingsActivity . buildPresetMessageFormat ( context , 0 , false ) ; }
public void setUp ( ) { dateManager = new DateManager ( ) ; }
public Double getVoteAverage ( ) { return voteAverage ; }
public static boolean isWriteLogToFile ( ) { return getBoolean ( R . string . pref_key_is_write_log , false ) ; }
private void setCurrentFragment ( @ SuppressWarnings ( "NullableProblems" ) Fragment fragment ) { getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . fragment_container , fragment , LibraryFragment . TAG ) . commit ( ) ; currentFragment = ( MainActivityFragmentCallbacks ) fragment ; }
public void orderStatus_shouldBePostMethod ( ) throws InterruptedException , TimeoutException { xmrToApi . queryOrderStatus ( "xmrto - efMsiU" , mockQueryXmrToCallback ) ; RecordedRequest request = mockWebServer . takeRequest ( ) ; assertEquals ( "POST" , request . getMethod ( ) ) ; }
public int getComment ( ) { return mComment ; }
public void sendMessagePacket ( Account account , MessagePacket packet ) { XmppConnection connection = account . getXmppConnection ( ) ; if ( connection != null ) { connection . sendMessagePacket ( packet ) ; } }
public void requestSuggestionUpdate ( AppInfo info ) { suggestedAppMgr . attemptInsertSuggestion ( info ) ; }
public NdefMessage createNdefMessage ( NfcEvent event ) { return NfcUtils . createBeamMessage ( "account_id" , account . getNumericID ( ) . toString ( ) ) ; }
public void testInitCapacityNegative ( ) { new FixedRingBuffer ( - 1 , 10 ) ; }
public void tearDown ( ) { TimeZone . setDefault ( mCurrentTimeZone ) ; }
public void notifyAboutChanges ( IAddressSearch . Observer observer ) { stopSearch ( ) ; addressSearch . notifyAboutChanges ( observer ) ; selectedAddresses . notifyAboutChanges ( observer ) ; selectedAddresses . search ( "" ) ; }
public long getCount ( ) { return mCount ; }
public static void logStackTracesWithMessage ( String tag , String message , List < Throwable > throwablesList ) { Logger . logErrorExtended ( tag , getMessageAndStackTracesString ( message , throwablesList , true ) ) ; }
private void showResultOnConfigChanged ( ) { setInitialPosition ( searchCardViewLayout , viewHeight ) ; setInitialPosition ( resultLayout , 0 ) ; frameLayout . setBackgroundColor ( yellow ) ; searchButton . setVisibility ( View . GONE ) ; enableEditText ( false ) ; }
public GoldenStatue ( ) { hp ( ht ( 15 + Dungeon . depth * 5 ) ) ; defenseSkill = 4 + Dungeon . depth ; }
public boolean onQueryTextChange ( String newText ) { if ( mAdapter != null ) mAdapter . filter ( newText ) ; scrollFacilityListToTop ( ) ; return true ; }
public void setNumberOfPosts ( Integer numberOfPosts ) { mNumberOfPosts = numberOfPosts ; }
public void setData_updatesWidgetAnswer ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( answer . getDisplayText ( ) ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer . getDisplayText ( ) ) ; }
public void clearEventFullSearch ( ) { preferences . edit ( ) . remove ( STAT_FULL_SEARCH_KEY ) . commit ( ) ; }
public static String getPageFileName ( int p ) { NumberFormat nf = NumberFormat . getInstance ( Locale . US ) ; nf . setMinimumIntegerDigits ( 3 ) ; return "page" + nf . format ( p ) + " . png" ; }
private void saveSelectedDays ( HashMap < Integer , Boolean > selectedWeekDay ) { String selectedDays = convertHashMapToString ( selectedWeekDay ) ; sharedPreferences . edit ( ) . putString ( APP_PREFERENCES_SELECTED_DAYS , selectedDays ) . apply ( ) ; setSelectedWeekDay ( selectedDays ) ; }
public void onEnteredHiddenState ( View child ) { final ViewHolder vh = getChildViewHolderInt ( child ) ; if ( vh != null ) { vh . onEnteredHiddenState ( ) ; } }
static public String buildSlotFromTag ( String tag ) { return ModdingMode . activeMod ( ) + "_" + tag + "_" + Game . getDifficulty ( ) ; }
public static String lameUrlDecode ( String url ) { return url . replace ( "%23" , "#" ) . replace ( "%25" , "%" ) ; }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable String label , @ NonNull String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
private void cancelDataRefresh ( ) { mHandler . removeCallbacks ( mRefreshDataRunnable ) ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { buttonUpdateItem . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public void onShuffleModeChanged ( ) { for ( MusicServiceEventListener listener : mMusicServiceEventListener ) { if ( listener != null ) { listener . onShuffleModeChanged ( ) ; } } }
public static long parseLong ( String s , long preset ) { try { if ( s != null && s . length ( ) > 0 ) { return Long . parseLong ( s ) ; } } catch ( NumberFormatException e ) { } return preset ; }
private void enableVectors ( ) { mEditor . putBoolean ( Constants . STATUS_ENABLE_BG_SERVICE , true ) ; mEditor . apply ( ) ; mService . setBackgroundService ( ) ; }
public void onClick ( final ImportBackupService . BackupFile backupFile ) { showEnterPasswordDialog ( backupFile ) ; }
public boolean hasNoDragOffset ( ) { return mTransOffsetX <= 0 && mTransOffsetY <= 0 ? true : false ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { parallaxableChildren . addAll ( ParallaxUtil . findParallaxableChildren ( view ) ) ; }
public MaterialAboutCard ( CharSequence title , MaterialAboutItem . . . materialAboutItems ) { this . title = title ; Collections . addAll ( mItems , materialAboutItems ) ; }
public void detectsSubmissionWithoutSub ( ) { assertThat ( getType ( formatURL ( "https : is ( RedditLinkType . SUBMISSION_WITHOUT_SUB ) ) ; }
private RatingWidget createWidget ( FormEntryPrompt prompt ) { return new RatingWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) ) ; }
public FileMusicModelBuilder artist ( String artist ) { this . mArtist = artist ; return this ; }
public void testSafeToAddAuthToken2 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( wpcomAddress2 ) ) ; }
public void movePlaneRight ( ) { m_PlayerBoard . movePlaneRight ( ) ; }
public void clickSignUp_opensConfirmationUi ( ) throws Exception { onView ( withId ( R . id . signn_up ) ) . perform ( click ( ) ) ; }
public PaginateDragListener ( ) { super ( ) ; final ViewConfiguration vc = ViewConfiguration . get ( getActivity ( ) ) ; swipeMinDistance = vc . getScaledPagingTouchSlop ( ) * 10 ; swipeMaxOffPath = vc . getScaledTouchSlop ( ) * 4 ; }
public void run ( ) { Log . i ( "IntentService" , "intent" ) ; Intent animActivity = new Intent ( activity , classToLoad ) ; activity . startActivity ( animActivity ) ; }
public TLRPC . Dialog getItem ( int i ) { ArrayList < TLRPC . Dialog > arrayList = getDialogsArray ( ) ; if ( i < 0 || i >= arrayList . size ( ) ) { return null ; } return arrayList . get ( i ) ; }
public synchronized void setFirstSampleTimestampUs ( long firstSampleTimestampUs ) { Assertions . checkState ( lastSampleTimestamp == C . TIME_UNSET ) ; this . firstSampleTimestampUs = firstSampleTimestampUs ; }
public Completable addToMy ( int accountId , int targetOwnerId , int videoOwnerId , int videoId ) { return networker . vkDefault ( accountId ) . video ( ) . addVideo ( targetOwnerId , videoId , videoOwnerId ) . toCompletable ( ) ; }
public ConnectableObservable < PositionedPlayableFile > observe ( ) { return observableProxy ; }
public static String getSortOrder ( Context context ) { SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( "sort_order_for_user_list" , MyApplication . SORT_ASCENDING ) ; }
private BroadcastReceiver refreshDesktopIconsReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { refreshDesktopIcons ( ) ; } } ;
public static void openURL ( Context context , String url ) { openURL ( context , url , false ) ; }
public void requestLayout ( ) { if ( ! mEatRequestLayout && ! mLayoutFrozen ) { super . requestLayout ( ) ; } else { mLayoutRequestEaten = true ; } }
public void reset ( SQLiteOpenHelper databaseHelper ) { this . databaseHelper = databaseHelper ; }
private void convertFile ( String chosenFile ) { filename = chosenFile ; presenter . updateRecentFolder ( chosenFile ) ; setCoverImage ( ) ; }
public String getType ( ) { return getTypeId ( ) . toUpperCase ( ) ; }
private ViewPositionAnimator getAnimatorNonNull ( ) { if ( getToView ( ) == null ) throw new NullPointerException ( ) ; return getToView ( ) . getPositionAnimator ( ) ; }
public MoreAdapter . MoreViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int i ) { View v = LayoutInflater . from ( context ) . inflate ( R . layout . fragment_more_item , parent , false ) ; return new MoreViewHolder ( v ) ; }
public boolean accept ( File dir , String name ) { return ( new FileTypeModel ( FileUtils . getExtensionFromPath ( name ) ) ) . equals ( FileTypeModelENUM . IMAGE . type ) ; }
public void setOpenConversation ( Conversation conversation ) { this . mOpenConversation = conversation ; }
public static GoogleMap create ( com . google . android . gms . maps . GoogleMap real , Context context ) { return new DelegatingGoogleMap ( real , context ) ; }
private double hectareToacre ( double num ) { return num * 2 . 471 ; }
private void runUpdate ( ) { ActivityUpdateTask updateTask = new ActivityUpdateTask ( ) ; updateTask . execute ( ) ; }
public String getSender ( boolean generic ) { return generic && XmppStringUtils . isFullJID ( mSender ) ? XmppStringUtils . parseBareAddress ( mSender ) : mSender ; }
public void onDestroy ( ) { mCharacterPresenter . detachView ( ) ; mCharacterPresenter = null ; super . onDestroy ( ) ; }
public void setComplaintPoster ( FeedPoster complaintPoster ) { this . complaintPoster = complaintPoster ; }
public int getCount ( ) { return appInfoList . getCount ( ) ; }
public void setSelectedDate ( Date date ) { if ( date == null ) { return ; } DateTime dateTime = CalendarHelper . convertDateToDateTime ( date ) ; selectedDates . add ( dateTime ) ; }
public ValidatorBuilder setRuleProvider ( IRuleProvider ruleProvider ) { this . ruleProvider = ruleProvider ; return this ; }
public static Calendar calendarFromLong ( Long value ) { Calendar calendar = Calendar . getInstance ( ) ; if ( value == null ) { calendar . setTimeInMillis ( 0 ) ; } else { calendar . setTimeInMillis ( value * 1000 ) ; } return calendar ; }
public void setNode1 ( float node1 ) { this . node1 = node1 ; }
public void onFetchPoolInfo ( ) { mTaskCount = 1 ; new GravityDexPoolInfoGrpcTask ( getBaseApplication ( ) , this , getSActivity ( ) . mBaseChain , getSActivity ( ) . mPoolId ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public int getPolygonCorners ( ) { return UNIT_TANK_CORNERS ; }
public void setMainView ( Bundle arguments ) { if ( arguments != null ) { this . mainView = arguments . getParcelable ( MainPagerAdapter . KEY_MAIN_VIEW ) ; } }
public void whenNewKeyExists_doesNotDoAnything ( ) { initPrefs ( prefs , "colour" , "red" , "couleur" , "blue" ) ; renameKey ( "colour" ) . toKey ( "couleur" ) . apply ( prefs ) ; assertPrefs ( prefs , "colour" , "red" , "couleur" , "blue" ) ; }
public int getViewTypeCount ( ) { return 1 ; }
public Entity ( String type , Vector3 position , Vector3 angle ) { this ( UUID . randomUUID ( ) , type , position , angle ) ; }
public void callingClearShouldRemoveTheExistingAnswer ( ) { super . callingClearShouldRemoveTheExistingAnswer ( ) ; W widget = getWidget ( ) ; assertEquals ( widget . getAnswerText ( ) , "" ) ; }
private void changeBackgroundPrefs ( ) { boolean isChecked = binding . bgImagePrefs . isChecked ( ) ; binding . bgImagePrefs . setChecked ( ! isChecked ) ; mPrefs . setCalendarImagesEnabled ( ! isChecked ) ; }
public static void postEvent ( Object event ) { EventBus . getDefault ( ) . post ( event ) ; }
public void onClick ( View v ) { mPresenter . login ( mUsername . getText ( ) . toString ( ) , mPassword . getText ( ) . toString ( ) , mUrl . getText ( ) . toString ( ) ) ; }
public void onTerminate ( ) { super . onTerminate ( ) ; pageService . evictAll ( ) ; bitmapService . evictAll ( ) ; }
public SearchState getSearchState ( ) { return searchRepository . searchState ( ) . blockingFirst ( ) ; }
public double getCarbAmount ( double protein , double fat , double tdee ) { return ( tdee - ( protein*PROTEIN_CAL_GRAM ) - ( fat*FAT_CAL_GRAM ) ) /CARBS_CAL_GRAM ; }
public void onRefresh ( ) { makeRequestShopItem ( true , true ) ; }
public void noNegativeNumbers ( ) { IntegerRange . getValues ( " - 42" ) ; }
private String getTeamNotFoundMessage ( ) { return mContext . getString ( R . string . error_team_not_found ) ; }
public int getBtcTopWalletIndex ( ) { for ( TopIndex topIndex : topIndexes ) { if ( topIndex . getCurrencyId ( ) == NativeDataHelper . Currency . BTC . getValue ( ) ) { return topIndex . getTopWalletIndex ( ) ; } } return 0 ; }
public SimpleCache ( File cacheDir , CacheEvictor evictor ) { this ( cacheDir , evictor , null ) ; }
public boolean onTouch ( View v , MotionEvent event ) { coord [ 0 ] = ( int ) event . getRawX ( ) ; coord [ 1 ] = ( int ) event . getRawY ( ) ; return false ; }
public void setupTeamNumberText ( int teamNumber ) { ( ( LinearLayout ) mTeamTextView . getParent ( ) ) . setVisibility ( View . VISIBLE ) ; mTeamTextView . setText ( String . valueOf ( teamNumber ) ) ; }
public static Long calendarToLong ( Calendar calendar ) { return calendar == null ? 0 : calendar . getTimeInMillis ( ) / 1000 ; }
public void onClick ( View v ) { selectedCommunityId = model . getmId ( ) ; notifyDataSetChanged ( ) ; categoryItemClickListener . onCategoryClicked ( model . getmTag ( ) ) ; }
private void setUpViews ( ) { fillViewsWithFileTags ( ) ; albumTitle . addTextChangedListener ( this ) ; albumArtistName . addTextChangedListener ( this ) ; genreName . addTextChangedListener ( this ) ; year . addTextChangedListener ( this ) ; }
public Joystick ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void delete ( boolean leaveGroup ) { loadGroupPeers ( false ) ; deleteInternal ( mContext , mThreadId , mGroupJid , mGroupPeers , mGroupType , leaveGroup ) ; }
private int getContainerViewWidth ( int mode ) { int width = containerView . getWidth ( ) ; if ( mode != 0 ) { width -= AndroidUtilities . dp ( 28 ) ; } return width ; }
public void run ( ) { mOnDrawerItemClickListener . onItemClick ( view , position , ( IDrawerItem ) item ) ; }
private BroadcastReceiver requestCountReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { broadcastNotificationCount ( ) ; } } ;
public int compare ( StatItem lhs , StatItem rhs ) { return lhs . isInTraining ( ) ? 1 : - 1 ; }
public void addExchangeRate ( ) { AnswersProxy . get ( ) . logButton ( "Add Exchange Rate" ) ; Intent intent = new Intent ( ExchangeRatesActivity . this , AddExchangeRateActivity . class ) ; startActivityForResult ( intent , REQUEST_ADD_EXCHANGE_RATE ) ; }
public void markAddressAsUsed ( Address address ) { keys . markPubHashAsUsed ( address . getHash160 ( ) ) ; }
public T getEntryForIndex ( int index ) { return mValues . get ( index ) ; }
public static int geAccentColor ( final Context context ) { final TypedValue value = new TypedValue ( ) ; context . getTheme ( ) . resolveAttribute ( R . attr . colorAccent , value , true ) ; return value . data ; }
public void onRefresh ( ) { fetchCompetitionsList ( ) ; }
public void onResponse ( Call call , final Response response ) throws IOException { ( ( Activity ) mContext ) . runOnUiThread ( new Runnable ( ) { public void run ( ) { callback . onSuccess ( ) ; } } ) ; }
public String nameOrNone ( long did ) { JSONObject deck = get ( did , false ) ; if ( deck != null ) { return deck . getString ( "name" ) ; } return null ; }
public void onLoaderReset ( Loader < ArrayList < Album >> loader ) { getAdapter ( ) . swapDataSet ( new ArrayList <> ( ) ) ; }
public void onMessageReceived ( RemoteMessage remoteMessage ) { super . onMessageReceived ( remoteMessage ) ; createCustomNotification ( remoteMessage ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState ) ; Logger . debug ( "WearFlashlightFragment onCreateView" ) ; return inflater . inflate ( R . layout . activity_wear_info , container , false ) ; }
public ProfileDrawerItem withSelectedColor ( int selectedColor ) { this . selectedColor = ColorHolder . fromColor ( selectedColor ) ; return this ; }
public static void openPlayStore ( final Context context ) { try { context . startActivity ( createOpenPlayStoreIntent ( context , "market : } catch ( ActivityNotFoundException e ) { context . startActivity ( createOpenPlayStoreIntent ( context , "https : } }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , listView , 0 , null ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public Single < List < Event >> getBeforeDate ( Date date ) { return localRepository . getBeforeDate ( date ) ; }
public Button ( Context pContext , @ Nullable AttributeSet pAttributeSet , int pDefStyleAttr ) { super ( pContext , pAttributeSet , pDefStyleAttr ) ; }
public void onDestroyView ( ) { if ( getActivity ( ) instanceof BaseActivity ) ( ( BaseActivity ) getActivity ( ) ) . removeMusicServiceEventListener ( this ) ; super . onDestroyView ( ) ; }
public void onSuccess ( List < Comment > results ) { callback . onSuccess ( results ) ; getNewsCommentsFromRemote ( postId , callback ) ; }
public int getPointNumber ( ) { return this . pointNumber ; }
private ActionModeCallback ( FieldEditText textBox , Field field ) { super ( ) ; mTextBox = textBox ; mField = field ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; view . setBackgroundResource ( Themer . getThemedResourceId ( getActivity ( ) , R . attr . windowContentBackground ) ) ; }
public ArrayOfFicheEmploye Func ( ) throws java . lang . Exception { return Recherche ( FiltreNom , FiltrePrenom , FiltreServiceCode ) ; }
public void run ( ) { rescanProgressBar . setIndeterminate ( true ) ; rescan . setImageDrawable ( getResources ( ) . getDrawable ( R . drawable . fs_scan_stop48 ) ) ; rescanProgressBar . setVisibility ( View . VISIBLE ) ; }
public String getString ( @ NonNull String key , String defaultValue ) { return preferences . getString ( key , defaultValue ) ; }
public void onScroll ( int i , int i1 , int i2 , int i3 ) { setCornerColors ( mAppView . getScrolly ( ) ) ; }
public OffsetLinearLayout ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public ChildZoneBuilder setGeometryUpdatedAt ( Date geometryUpdatedAt ) { mGeometryUpdatedAt = geometryUpdatedAt ; return this ; }
public void onTabSelected ( TabLayout . Tab tab ) { viewAnimator . setDisplayedChild ( tab . getPosition ( ) ) ; ( ( BarChart ) viewAnimator . getCurrentView ( ) ) . animateXY ( 1000 , 1000 ) ; }
private void setRootFragment ( Fragment fragment ) { getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . root_container , fragment ) . setTransition ( FragmentTransaction . TRANSIT_FRAGMENT_OPEN ) . commitAllowingStateLoss ( ) ; }
public void run ( ) { GameBroadcastReceiver . this . activity . mChatAdapter . addMessage ( chatMsg ) ; }
public void onClick ( View v ) { onBackPressed ( ) ; }
public void onBackPressed ( ) { if ( mSearchView . isSearchOpen ( ) ) { mSearchView . closeSearch ( ) ; } else { super . onBackPressed ( ) ; } }
public void onClickBtnOk ( ) { if ( mListener != null ) mListener . onDismiss ( getDialog ( ) ) ; }
public Wallpaper copy ( String imageUrl ) { Wallpaper wallpaper = new Wallpaper ( dateTime , url , baseUrl , copyright , webUrl , desc , copyrightInfo ) ; wallpaper . setImageUrl ( imageUrl ) ; return wallpaper ; }
public void run ( ) { Intent intent = new Intent ( Intent . ACTION_VIEW ) ; intent . setData ( Uri . parse ( TorchieConstants . WEB_DONATE_URI ) ) ; startActivity ( intent ) ; dismiss ( ) ; }
public String getGpsLoggerFolder ( ) { return prefs . getString ( PreferenceNames . GPSLOGGER_FOLDER , Utilities . GetDefaultStorageFolder ( AppSettings . getInstance ( ) . getApplicationContext ( ) ) . getAbsolutePath ( ) ) ; }
public CanvasView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . setup ( context ) ; }
public void setDialect ( List < String > dialect ) { mDialect = dialect ; }
public static int getViewedFlightCountForRate ( ) { return get ( FLIGHT_VIEWED , 0 ) ; }
public com . google . protobuf . AnyOrBuilder getTxOrBuilder ( ) { if ( txBuilder_ != null ) { return txBuilder_ . getMessageOrBuilder ( ) ; } else { return tx_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : tx_ ; } }
public Operator next ( ) { throw new RuntimeException ( "Operator has been not found" ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; operationReadBattery = true ; textViewBatteryValue . setText ( "" ) ; readWriteOperation ( ) ; }
public static void setSendErrorReport ( Context context , boolean value ) { getEditor ( context ) . putBoolean ( "ignore_back_button" , value ) . commit ( ) ; }
public String getDescription ( ) { return Game . getVar ( R . string . Yog_Desc ) ; }
private int parsePeriod ( ) throws ParseException { try { return Integer . parseInt ( _textPeriod . getText ( ) . toString ( ) ) ; } catch ( NumberFormatException e ) { throw new ParseException ( "Period is not an integer . " ) ; } }
private void ensureEvidenceIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { evidence_ = new java . util . ArrayList < com . google . protobuf . Any > ( evidence_ ) ; bitField0_ | = 0x00000001 ; } }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonSetEditor . this . getContext ( ) , ButtonSetEditor . this , newsettings . getFlipLabelColor ( ) , COLOR_FIELDS . COLOR_FLIPLABEL ) ; diag . show ( ) ; }
public void onReceive ( Context context , Intent intent ) { if ( isFinishing ( ) ) { return ; } shouldReload = true ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { PreferenceUtils . setPeriod ( seekBar . getContext ( ) , progress ) ; }
private void startRemoteControl ( ) { if ( remoteControl == null ) remoteControl = new RemoteControl ( this ) ; if ( ! host . isEmpty ( ) ) remoteControl . connect ( host , port + 1 ) ; }
public static ArrayList < Bookmark > getResultsList ( Realm realm ) { ArrayList < Bookmark > list = new ArrayList <> ( ) ; for ( Bookmark bookmark : getResults ( realm ) ) { list . add ( bookmark ) ; } return list ; }
public void showFieldPanelForWebPage ( boolean show , TLRPC . WebPage webPage , boolean cancel ) { showFieldPanel ( show , null , null , null , webPage , cancel , true ) ; }
public static Model getModel ( String uid , FragmentActivity activity ) { return ViewModelProviders . of ( activity , new TopWalletEntriesChartViewModelFactory ( uid ) ) . get ( Model . class ) ; }
private void handleSearchView ( ) { mEmptySearchResultLayout . setVisibility ( isEmptyData ( ) ? View . VISIBLE : View . GONE ) ; ( ( TextView ) mEmptySearchResultLayout . findViewById ( R . id . searchResultQueryTextId ) ) . setText ( mSearchHandlerSingleton . getFilterString ( ) ) ; }
public boolean isDebug ( ) { return debug ; }
public List getExpoPackages ( ) { return new BasePackageList ( ) . getPackageList ( ) ; }
public static String getIpAddress ( String startsWith ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . GINGERBREAD ) { return getIpAddress_9 ( startsWith ) ; } return getIpAddress_Old ( startsWith ) ; }
public boolean canShowReplyMenu ( ) { return canShowReplyMenu ; }
public void addProvider ( Provider provider ) { providerRepository . addProvider ( restApi , provider , this ) ; }
public void onSuccess ( List < Post > results ) { callback . onSuccess ( results ) ; getFromRemoteAndUpdateLocalSource ( callback ) ; }
public FeedPoster getComplaintPoster ( ) { return complaintPoster ; }
public ComposeText ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public boolean getIndicateRecurring ( ) { return sharedPreferences . getBoolean ( PREF_INDICATE_RECURRING , false ) ; }
public static Intent getStartActivityIntent ( Context context , ChameleonMiniDevice device ) { Intent intent = new Intent ( context , ChameleonMiniActivity . class ) ; intent . putExtra ( EXTRA_DEVICE , device . getId ( ) ) ; return intent ; }
public PeriodPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void setReminders ( int reminders ) { this . reminders = reminders ; }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable String label , @ Nullable Intent intent ) { return addAction ( icon , label , util . clickIntent ( intent ) ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; operationRead = true ; readWriteOperation ( ) ; }
public void gamesCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "games" ) ; }
public void showSmokeScreen ( ) { Futils . revealShow ( fabBgView , true ) ; }
private void seriesGenerator ( int seriesNumber ) { for ( int i = 0 ; i < seriesNumber ; i ++ ) { linearLayout . addView ( INFLATER . trainingSetGenerator ( ) ) ; } }
private static PendingIntent getAlarmIntent ( Context context ) { Intent intent = new Intent ( context , ListWidgetProvider . class ) ; intent . setAction ( AppIntent . ACTION_UPDATE_LIST_WIDGET ) ; return PendingIntent . getBroadcast ( context , 0 , intent , PendingIntent . FLAG_UPDATE_CURRENT ) ; }
public int getRendererType ( int index ) { return player . getRendererType ( index ) ; }
public void run ( ) { stopFlag = false ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_TRACK ) ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( ! noRestart . contains ( key ) ) { AppSettings . get ( ) . setAppRestartRequired ( true ) ; } }
public MarkerDBSQLiteHelper ( ) { super ( context , DATABASE_NAME , null , DATABASE_VERSION ) ; }
public boolean syncOpen ( ) { boolean ret = openPL2303 ( ) ; if ( ret ) { setSyncParams ( inEndpoint , outEndpoint ) ; return true ; } else { return false ; } }
private boolean tryAcquireAndSetStatus ( String status ) { if ( ! semaphore . tryAcquire ( ) ) return false ; setStatus ( status ) ; return true ; }
public TabLayout getTabLayout ( ) { return tabLayout ; }
public void setProgressBarVisibility ( boolean isVisible ) { if ( isVisible ) { progressBar . setVisibility ( View . VISIBLE ) ; } else { progressBar . setVisibility ( View . GONE ) ; } }
public void setVideos ( List < String > videos ) { this . videos = videos ; }
private static String getMPString ( int width , int height ) { float mp = ( width*height ) /1000000 . 0f ; return formatFloatToString ( mp ) + "MP" ; }
public String getText ( ) { return null ; }
public void setColorFilter ( ColorFilter cf ) { if ( mColorFilter != cf ) { mColorFilter = cf ; mHasColorFilter = true ; mColorMod = true ; applyColorMod ( ) ; invalidate ( ) ; } }
public void handleUpdate ( RoutingContext routingContext ) { routingContext . response ( ) . setStatusCode ( NO_CONTENT . code ( ) ) . end ( ) ; }
public void onClick ( View v ) { mMediaPlayer . pause ( ) ; homeActivity . nextControllerClicked = true ; mCallback2 . onComplete ( ) ; }
public String getFeedPoster ( ) { return feedPoster ; }
private boolean isIncomingCall ( ) { return mType . equals ( TYPE_INCOMING_CALL ) ; }
public boolean canRedo ( ) { return ! ( index > - 1 || stack . size - 1 + index < 0 ) ; }
public int getItemCount ( ) { return reviews . size ( ) + 2 ; }
public void setImageMatrix ( Matrix matrix ) { super . setImageMatrix ( fixMatrix ( matrix ) ) ; if ( Build . VERSION . SDK_INT == Build . VERSION_CODES . JELLY_BEAN ) { postInvalidate ( ) ; } }
public void setQuality ( int quality ) { this . quality = quality ; }
public Integer getLocationId ( ) { return locationId ; }
public WeatherItemViewHolder onCreateViewHolder ( ViewGroup parent , int pos ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . weather_list_item , parent , false ) ; return new WeatherItemViewHolder ( view ) ; }
public static String getParserStateString ( final String response ) { Matcher matcher = PARSER_STATE_PARRERN . matcher ( response ) ; return matcher . find ( ) ? matcher . group ( 1 ) : "" ; }
public int compare ( NotificationInfo o1 , NotificationInfo o2 ) { return o1 . getKey ( ) . compareTo ( o2 . getKey ( ) ) ; }
public void setPhotoTitle ( @ Nullable final String photoTitle ) { this . photoTitle = photoTitle ; }
public void setTabPaddingLeftRight ( int paddingPx ) { this . tabPadding = paddingPx ; updateTabStyles ( ) ; }
private void enqueuePlaylist ( ) { try { ( ( GenericActivity ) getActivity ( ) ) . getPlaybackService ( ) . enqueuePlaylist ( mPlaylistModel ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public AppInfoAdapter ( AppInfoBridge appInfoBridge , int resource , @ NonNull List < AppInfo > objects ) { super ( appInfoBridge . getContext ( ) , resource , objects ) ; this . appInfoBridge = appInfoBridge ; context = appInfoBridge . getContext ( ) ; }
public InfiniteScrollAdapter ( RecyclerView . Adapter < T > wrapped ) { this . wrapped = wrapped ; this . wrapped . registerAdapterDataObserver ( new DataSetChangeDelegate ( ) ) ; }
private void setCustomValue ( String value ) { TextSecurePreferences . setStringPreference ( getContext ( ) , customPreference , value ) ; }
private HttpUrl swapHost ( @ NonNull HttpUrl url , @ NonNull String host ) { return url . newBuilder ( ) . host ( host ) . build ( ) ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { if ( mCurrentPage != menuItem . getItemId ( ) ) { switchFragment ( menuItem ) ; } drawerLayout . closeDrawers ( ) ; return true ; }
public static StyledAttributesHelper obtainStyledAttributes ( Context ctx , int [ ] attributes ) { Arrays . sort ( attributes ) ; return new StyledAttributesHelper ( ctx . obtainStyledAttributes ( attributes ) , attributes ) ; }
public Quest getQuest ( ) { return null ; }
public void deleteProvider ( String providerUuid ) { providerRepository . deleteProviders ( restApi , providerUuid , this ) ; }
public void postKeyPressed ( int keyCode ) { Display . postEvent ( CanvasEvent . getInstance ( this , CanvasEvent . KEY_PRESSED , convertKeyCode ( keyCode ) ) ) ; }
public void removeListener ( EventListener listener ) { listeners . remove ( listener ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_7 . getText ( ) . toString ( ) ) ; }
public void onAnimationEnd ( View view ) { animation . setListener ( null ) ; dispatchMoveFinished ( holder ) ; mMoveAnimations . remove ( holder ) ; dispatchFinishedWhenDone ( ) ; }
public static boolean setPushSenderId ( Context context , String senderId ) { return sPreferences . edit ( ) . putString ( "pref_push_sender" , senderId ) . commit ( ) ; }
public DateHeading ( Date date , String week ) { this . date = date ; this . week = week ; }
private void changeBlurPrefs ( ) { boolean isChecked = binding . blurPrefs . isChecked ( ) ; binding . blurPrefs . setChecked ( ! isChecked ) ; mPrefs . setBlurEnabled ( ! isChecked ) ; }
public int getCount ( ) { return arrConferenceDates . length ; }
public Observable < Phrasebook > getPhrasebook ( ) { return mPhrasebookHelper . getPhrasebook ( ) ; }
private void onTransferError ( ) { getView ( ) . dismissTransferDialog ( ) ; getView ( ) . dismissDialogLoading ( ) ; getView ( ) . showTransferError ( ) ; }
public void searchMovie ( String text ) { movieRepository . searchMovies ( text ) . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( resource -> getMoviesLiveData ( ) . postValue ( resource ) ) ; }
public void addItems ( List < T > items ) { if ( this . arrayList == null ) { this . arrayList = items ; } else { this . arrayList . addAll ( items ) ; } notifyDataSetChanged ( ) ; }
public void setRemind_day ( boolean remind_day ) { this . remind_day = remind . day ; }
public int onGetChildItemSwipeReactionType ( MyChildViewHolder holder , int groupPosition , int childPosition , int x , int y ) { if ( onCheckChildCanStartDrag ( holder , groupPosition , childPosition , x , y ) ) { return Swipeable . REACTION_CAN_NOT_SWIPE_BOTH_H ; } return Swipeable . REACTION_CAN_SWIPE_BOTH_H ; }
public ReactionUserAdapter ( Context context , ListPopupWindow popup ) { mContext = context ; mParent = popup ; mInflater = LayoutInflater . from ( context ) ; }
public View getView ( int position , View convertView , ViewGroup parent ) { return _getView ( position , convertView ) ; }
public void run ( ) { Toast . makeText ( context , context . getString ( R . string . toast_error_importing_accounts ) + "\n" + err_msg , Toast . LENGTH_LONG ) . show ( ) ; }
public AboutBuilder setAppName ( @ Nullable String text ) { this . appName = text ; return this ; }
public void initMultiSelect ( ) { this . multiSelect = true ; this . categories = db . getCategoriesList ( false ) ; this . doNotShowSplitCategory ( ) ; }
public SyncNotes ( Context context , SyncListener mListener ) { this . mContext = context ; builder = new NotificationCompat . Builder ( context ) ; this . mListener = mListener ; }
public void onEvent ( NotesUpdatedEvent event ) { update ( ) ; }
public void showWeatherList ( List < CityWeather > weatherList ) { mWeatherAdapter . setItems ( weatherList , WeatherUtils . getCurrentTempUnits ( getActivity ( ) ) ) ; mWeatherAdapter . notifyDataSetChanged ( ) ; }
public ImportAsyncTask ( Activity context , TaskDelegate delegate ) { this . context = context ; this . mDelegate = delegate ; }
private void performUpdate ( EnumSet < UpdateTask > tasks ) { if ( ! NetworkUtils . isNetworkAvailable ( this ) ) { return ; } ReaderUpdateService . startService ( this , tasks ) ; mHasPerformedUpdate = true ; }
public FragmentPagerAdapter ( FragmentManager fm ) { super ( fm ) ; }
public void run ( ) { MathBrainerRepository repository = ( ( ApplicationProvider ) ApplicationProvider . getsContext ( ) ) . getRepository ( ) ; repository . incrementGameResultByDelta ( gameResultsName , delta ) ; }
public void onPostDeleted ( ) { removeItemAt ( position ) ; }
public boolean onMenuItemActionCollapse ( MenuItem item ) { Log . v ( TAG , "searchMenuItem collapsed" ) ; searchMenuItemExpanded = false ; return true ; }
private void setUsernameSuggestions ( List < String > suggestions ) { mUsernamesAdapter = new UsernameChangerRecyclerViewAdapter ( getActivity ( ) , suggestions ) ; mUsernamesAdapter . setOnUsernameSelectedListener ( UsernameChangerFullScreenDialogFragment . this ) ; mUsernamesAdapter . setSelectedItem ( mUsernameSelectedIndex ) ; mUsernameSuggestions . setAdapter ( mUsernamesAdapter ) ; }
public SchauburgUrlProvider ( @ CinemaHost String host ) { mHost = host ; }
public SidebarLeftFragment getLeftSidebarFragment ( ) { return mLeftSidebar ; }
public void onException ( @ NonNull final Exception ex ) { handler . post ( ( ) -> listener . onException ( ex ) ) ; }
private void drawView ( long delta ) { Canvas canvas = surfaceHolder . lockCanvas ( ) ; if ( canvas == null ) { return ; } renderer . draw ( canvas , delta ) ; surfaceHolder . unlockCanvasAndPost ( canvas ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . chart_fragment_menu , menu ) ; this . menu = menu ; updateCalendarIcon ( false ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
private void saveLogin ( int id ) { SharedPreferences . Editor editor = getSharedPreferences ( Utils . PREF_NAME , MODE_PRIVATE ) . edit ( ) ; editor . putString ( Utils . ID_USER , String . valueOf ( id ) ) ; editor . apply ( ) ; }
public void onFailedDownload ( String fileName ) { updateButtonState ( ) ; }
public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { wrapped . onDetachedFromRecyclerView ( recyclerView ) ; layoutManager = null ; }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , InfoActivity . class ) ; startActivityForResult ( i , 0 ) ; }
public DeleteMedia ( List < String > unused ) { this . unused = unused ; }
private void _loadProgressWheel ( ) { pwheel = ( ProgressWheel ) findViewById ( R . id . progress_wheel ) ; pwheel . spin ( ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( listAdapter != null ) { listAdapter . notifyDataSetChanged ( ) ; } processSelectedBackground ( ) ; fixLayout ( ) ; }
public void onCaptureVideoClicked ( ) { onPhotoPickerIconClicked ( PhotoPickerIcon . ANDROID_CAPTURE_VIDEO ) ; }
public void setOnChildClickListener ( OnChildClickListener onChildClickListener ) { super . setOnChildClickListener ( onChildClickListener ) ; this . hasOnChildClickListener = true ; }
public void onItemClick ( View view , int position ) { list . get ( position ) . open ( getActivity ( ) , mApplicationCallback ) ; }
public void setElevationAngle ( double angle ) { elevation = angle ; sin_elevation = FastMath . sin ( angle * DEGTORAD ) ; cos_elevation = FastMath . cos ( angle * DEGTORAD ) ; sz_cos = scale_z * cos_elevation ; sz_sin = scale_z * sin_elevation ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; deviceConfigurationChanged ( ) ; }
public void addSongs ( List < Song > songs ) { playingQueue . addAll ( songs ) ; originalPlayingQueue . addAll ( songs ) ; saveState ( ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new LeaderBoardViewModel ( mLeaderBoardUrl ) ; }
public HashMap < String , Entry > snapshot ( ) { synchronized ( mLock ) { return new HashMap <> ( mEntries ) ; } }
private List < MLocation > parse ( String content ) throws IOException { return new TrackFileReader ( makeFile ( content ) ) . read ( ) ; }
public final File getStartDirectory ( ) { return new File ( mPreferences . getString ( START_DIRECTORY , FolderFragment . getDefaultStartDirectory ( ) . getPath ( ) ) ) ; }
public com . coinomi . core . protos . Protos . Script getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . Script . getDefaultInstance ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . pref_authentication ) ; setHasOptionsMenu ( true ) ; bindPreferenceSummaryToValue ( findPreference ( "authentication_username" ) ) ; bindPreferenceSummaryToValue ( findPreference ( "authentication_password" ) ) ; }
public void onClick ( final DialogInterface dialog , final int which ) { post . action ( activity , RedditAPI . RedditAction . DELETE ) ; }
public void onError ( Throwable e ) { Timber . e ( e , "create counter" ) ; }
public boolean shouldAutoReconnect ( ) { return mSharedPref . getBoolean ( DEVICE_RECONNECT , false ) ; }
public RecentListUtil ( Context context , Option option ) { settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; editor = settings . edit ( ) ; recentLength = option . getRecentCount ( ) ; this . option = option ; }
private void printRecsSize ( ) { System . out . println ( "recsSim = " + recsSim . size ( ) ) ; System . out . println ( "recsRcv = " + recsRcv . size ( ) ) ; }
public void onClick ( View v ) { ExternalAppUtils . openBrowserIntent ( MainFragment . this , ( getString ( R . string . veterans_network_website ) ) ) ; }
public void setMaxCount ( long count ) { maxCount = count ; resetItemTypeList ( ) ; }
public static Intent getIntent ( Context context , Events event ) { Intent intent = new Intent ( context , EventActivity . class ) ; intent . putExtra ( EventActivity . ARG_EVENT , ServiceGenerator . getGson ( ) . toJson ( event ) ) ; return intent ; }
public static Intent newInstance ( Context context , String teamKey , int year ) { Intent intent = new Intent ( context , ViewTeamActivity . class ) ; intent . putExtra ( TEAM_KEY , teamKey ) ; intent . putExtra ( TEAM_YEAR , year ) ; return intent ; }
public ReusableParentViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
public void setTo ( final Jid to ) { if ( to != null ) { setAttribute ( "to" , to . toString ( ) ) ; } }
public Context getContext ( ) { return getContext ( ) ; }
public void onDestroy ( ) { disconnect ( false ) ; scheduler . cancelMqttTasks ( ) ; }
private void filterReminders ( boolean filter ) { prefs . edit ( ) . putBoolean ( PREF_FILTER_PAST_REMINDERS , filter ) . apply ( ) ; initNotesList ( mainActivity . getIntent ( ) ) ; mainActivity . supportInvalidateOptionsMenu ( ) ; }
private SharedPreferences . OnSharedPreferenceChangeListener mPrefListener = ( sharedPreferences , key ) -> { if ( key . equals ( GHDConstants . PREF_WIKI_USER ) || key . equals ( GHDConstants . PREF_WIKI_PASS ) ) { checkAnonStatus ( ) ; } } ;
public void repairCollection ( ) { Timber . i ( "Repairing the Collection" ) ; TaskManager . launchCollectionTask ( new CollectionTask . RepairCollectionn ( ) , repairCollectionTask ( ) ) ; }
public Object getGestureUnpinch ( ) { return getGesture ( R . string . pref_key__gesture_unpinch ) ; }
public Item ( String id ) { if ( ! id . contains ( " : " ) ) throw new IllegalArgumentException ( id + " is not in the correct format" ) ; this . id = id ; }
public void onSelect ( ) { if ( changedListener != null ) { changedListener . onSelect ( asActiveSelection ( ) ) ; } }
public ServersList ( ) { servers = new SparseArray <> ( 10 ) ; }
private double mtomi ( double num ) { return num * 0 . 000621 ; }
private ProfileManager ( Context context ) { mContext = context ; mPrefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; mGson = new Gson ( ) ; }
public listeDesProgrammes Func ( ) throws java . lang . Exception { return listeProgrammes ( codeAccesUniversel , motPasse ) ; }
public void onFailure ( @ NonNull Call < ResponseBody > call , @ NonNull Throwable t ) { logger . d ( "unregister failed" ) ; setRegistrationStatus ( context , STATUS_FAILED ) ; }
public void onClick ( View v ) { switchToEditMode ( 2 ) ; }
public void setRTS ( boolean state ) { if ( state ) { setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SIO_SET_RTS_HIGH , 0 , null ) ; } else { setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SIO_SET_RTS_LOW , 0 , null ) ; } }
public void onPostSavedEvent ( PostSavedEvent event ) { if ( ! mPost . getUuid ( ) . equals ( event . post . getUuid ( ) ) ) { return ; } updatePost ( event . post ) ; }
public CustomXAxisRenderer ( ViewPortHandler viewPortHandler , XAxis xAxis , Transformer trans ) { super ( viewPortHandler , xAxis , trans ) ; }
public void setLink ( String link ) { this . link = link ; }
private static String _latexFromHtml ( Collection col , String latex ) { latex = latex . replaceAll ( " < br ( / ) ? > | < div > " , "\n" ) ; latex = Utils . stripHTML ( latex ) ; return latex ; }
public void setSnapshotStatus ( String snapshot_status ) { this . snapshotStatus = snapshot_status ; }
public boolean onKeyDown ( int keyCode , KeyEvent event ) { return keyCode == KeyEvent . KEYCODE_MENU && sBuggyMenuVersion || super . onKeyDown ( keyCode , event ) ; }
public void addBlock ( Block block ) { if ( block != null ) { block . mineBlock ( difficulty ) ; blocks . add ( block ) ; } }
public Editor putStringSet ( final String key , @ Nullable final Set < String > values ) { newValuesMap . put ( key , ( values != null ) ? new HashSet <> ( values ) : null ) ; return this ; }
private int getScrollbarTop ( ) { return ( int ) ( mScrollPos / ( mItemCount - mBottomItemsHeight - 1 ) * ( getHeight ( ) - getPaddingTop ( ) - getPaddingBottom ( ) - getScrollbarHeight ( ) ) ) ; }
public void onReceive ( Context context , Intent intent ) { dcContext . setStockTranslations ( ) ; }
public void run ( ) { try { Logger . v ( "Call WindowManager#removeView" ) ; windowManager . removeView ( view ) ; } catch ( Exception e ) { Logger . v ( e , "Fail : WindowManager#removeView" ) ; } }
public ExternalUrls getExternalUrls ( ) { return externalUrls ; }
public void onTextChanged ( ) { if ( conversation != null && conversation . getCorrectingMessage ( ) != null ) { updateSendButton ( ) ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_send : attemptNewTopic ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
private void initialize ( ) { appName = null ; format = "gpx" ; useMimeType = true ; wantsToShare = false ; }
public void AkademikEgitimCard ( View v ) { Intent intent = new Intent ( getApplicationContext ( ) , category_frag4 . class ) ; startActivity ( intent ) ; }
public String desc ( ) { return Game . getVar ( R . string . RatKingCrownBuff_Info ) ; }
public String toXML ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSSoftware o : softs ) { strOut . append ( o . toXml ( ) ) ; } return strOut . toString ( ) ; }
public void updateItemAtPosition ( @ NonNull IDrawerItem drawerItem , int position ) { if ( mDrawerBuilder . checkDrawerItem ( position , false ) ) { mDrawerBuilder . getAdapter ( ) . setDrawerItem ( position , drawerItem ) ; } }
public void format ( IRCCloudJSONObject event , Event e ) { if ( event != null ) { e . from = event . getString ( "channel" ) ; } e . color = colorScheme . networkErrorColor ; e . bg_color = colorScheme . errorBackgroundColor ; }
private void doEscSelectRightParen ( byte b ) { doSelectCharSet ( false , b ) ; }
public Completable deleteAll ( ) { return Completable . fromAction ( countersDao : : deleteAll ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( MainActivity ) getActivity ( ) ) . setActionBarTitle ( "বাংলা সংবাদপত্র" ) ; }
public boolean canPerformActions ( ) { return actionBarLayer != null && ! actionBarLayer . isActionModeShowed ( ) ; }
private void checkIfUsernameCanBeChanged ( ) { AccountModel account = mAccountStore . getAccount ( ) ; mUsernamePreference . setEnabled ( account . getUsernameCanBeChanged ( ) ) ; mUsernamePreference . setOnPreferenceClickListener ( preference -> { showUsernameChangerFragment ( ) ; return false ; } ) ; }
private Intent getCreateProfileIntent ( MasterSecret masterSecret ) { return getRoutedIntent ( CreateProfileActivity . class , getConversationListIntent ( ) , masterSecret ) ; }
public void setUp ( ) { today = new LocalDate ( 2000 , 1 , 1 ) ; now = new DateTime ( ) . withDate ( today ) . withTime ( 0 , 0 , 0 , 0 ) ; MockitoAnnotations . initMocks ( this ) ; }
public String makeFileSystemPath ( @ NonNull Uri uri ) { return makeFileSystemPath ( uri , null ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { textViewTTSPitch . setText ( percentFormat . format ( getPitchBarValue ( ) ) ) ; if ( ! isTouchTracking ) { ttsSetPitchFromSeekBar ( ) ; } }
public SimpleImmutableEntry ( Entry < ? extends K , ? extends V > entry ) { this . key = entry . getKey ( ) ; this . value = entry . getValue ( ) ; }
public AudioRequest getLastAudioRequest ( ) { return mLastAudioRequest ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mTag = getArguments ( ) . getString ( "tag" ) ; mUser = getArguments ( ) . getString ( "user" ) ; }
private void continueJob ( ) { if ( this . mBreak ) { stopBreak ( ) ; } ContentValues values = getContentValues ( ) ; values . put ( Job . END_DATE , ( Long ) null ) ; updateDatabase ( values ) ; updateFromCursor ( ) ; }
public void setState ( NodeState state ) { mState = state ; setUpdateInterval ( state . getUpdateInterval ( ) ) ; Game . getInstance ( ) . testGameOver ( ) ; AIAwareness . update ( ) ; }
public Volumes setProgressSpeaker ( final int progress ) { return new Volumes ( progress2Gain ( progress ) , mMicGain , mExternalSpeaker , mMicrophoneStatus , mEchoLimiter ) ; }
public KonamiCodeLayout ( Context context ) { super ( context ) ; initalizeValiables ( ) ; }
public void setBank ( Bank bank ) { this . bank = bank ; }
public MainRecyclerAdapter ( Context context , ArrayList < Recipe > recipes , RecipeClickListener recipeClickListener ) { this . mContext = context ; this . recipeArrayList = recipes ; this . mRecipeClickListener = recipeClickListener ; }
public int firstPageIndex ( ) { return isRtl ( ) ? builder . pages . size ( ) - 1 : 0 ; }
public static String removeHashbang ( String url ) { return url . replaceFirst ( "# ! " , "" ) ; }
public void finishWithInadequateSettingsWarning ( ) { Toast . makeText ( this , R . string . warning_inadequate_location_settings , Toast . LENGTH_LONG ) . show ( ) ; closeActivity ( ) ; }
public void onGmsConnectionResultResolutionRequired ( ConnectionResult connectionResult ) { IntentUtil . startGmsConnectionResultForResolution ( this , connectionResult , - 1 ) ; }
public void onChannelStateUpdated ( IChannel channel ) throws RemoteException { mChannelListAdapter . updateChannels ( ) ; mChannelListAdapter . notifyDataSetChanged ( ) ; }
public void onClick ( View view ) { favorite . delete ( ) ; BUS . post ( new FavoriteDeletedEvent ( favorite . getEmoticon ( ) ) ) ; mFavorites . remove ( favorite ) ; notifyDataSetChanged ( ) ; }
public PersonEntity getPerson ( ) { return person ; }
private static boolean isGif ( String contentType ) { return ! TextUtils . isEmpty ( contentType ) && contentType . trim ( ) . equals ( "image/gif" ) ; }
public void onServiceDisconnected ( ComponentName className ) { }
public boolean isOnSearchMode ( ) { return currentStatus == StatusEnum . ADD_ON_SEARCH ; }
public DefaultItemAddAnimationManager ( BaseItemAnimator itemAnimator ) { super ( itemAnimator ) ; }
public void increaseLevel ( GameType gameType ) throws IOException { int level = getLevel ( gameType ) ; levels . put ( gameType . toString ( ) , level + 1 ) ; persist ( ) ; }
public static void initialize ( SharedPreferences sharedPreferences ) { mSharedPreferences = sharedPreferences ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { translated = bookmarked = false ; }
public void onDonePressed ( ) { Intent intent = new Intent ( this , EditorActivity . class ) ; startActivity ( intent ) ; }
public static boolean isPositionQuoteStart ( CharSequence body , int pos ) { return ( isPositionQuoteCharacter ( body , pos ) && isPositionPrecededByPrequote ( body , pos ) && ( UIHelper . isPositionFollowedByQuoteableCharacter ( body , pos ) || isPositionFollowedByQuoteChar ( body , pos ) ) ) ; }
public void closeIfNotLocked ( ) { if ( ! isLocked ( ) ) close ( ) ; }
public void addListener ( BlackboardListener listener ) { listeners . add ( listener ) ; }
public Object getItem ( int position ) { return mWdManager . getPeerAt ( position ) ; }
public void run ( ) { try { progressDialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } AlertsCreator . processError ( error , ChangeUsernameActivity . this , req ) ; }
private int getScrollbarHeight ( ) { float scrollbarHeight = getHeight ( ) - getPaddingTop ( ) - getPaddingBottom ( ) ; scrollbarHeight / = ( mItemCount - mBottomItemsHeight ) ; return Math . max ( ( int ) scrollbarHeight , mMinScrollbarHeight ) ; }
public void onCompletion ( MediaPlayer mp ) { starting = false ; MainActivity . mCs108Library4a . appendToLog ( "MediaPlayer is completed . " ) ; }
public void setBefore ( Uri before ) { mBefore = before ; }
public String toString ( ) { return "RepaymentFrequencyNthDayTypeOptions { " + "id = " + id + " , code = '" + code + '\'' + " , value = '" + value + '\'' + ' } ' ; }
public GDBList ( GDBList source ) { this . _ListUrl = source . _ListUrl ; _Items = new LinkedList < GDBInfo > ( ) ; for ( GDBInfo Item : source . _Items ) { _Items . add ( new GDBInfo ( Item ) ) ; } }
public static boolean shouldSaveOpeningBalances ( boolean defaultValue ) { SharedPreferences sharedPrefs = PreferenceActivity . getActiveBookSharedPreferences ( context ) ; return sharedPrefs . getBoolean ( context . getString ( R . string . key_save_opening_balances ) , defaultValue ) ; }
private void setupUserItemAdapter ( ) { userItemAdapter = new UserItemAdapter ( this , userItems ) ; rView . setAdapter ( userItemAdapter ) ; loadUserOffline ( ) ; }
public Highlight ( float x , int dataSetIndex , int stackIndex ) { this ( x , dataSetIndex ) ; this . mStackIndex = stackIndex ; }
public void setGameControls ( GameControlsAdaptor controls ) { if ( m_Tablet ) { m_PlayerBoard . setGameControls ( controls ) ; m_ComputerBoard . setGameControls ( controls ) ; } else { m_GameBoard . setGameControls ( controls ) ; } m_GameControls = controls ; }
public String getFormattedValue ( float value ) { return mFormat . format ( Math . abs ( value ) ) + "m" ; }
public void onResume ( ) { Log . i ( TAG , "onResume" ) ; super . onResume ( ) ; MainActivity . conference_message_list_fragment = this ; }
public RRGLRenderableTexturedQuad ( RRGLContext glContext , RRGLTexture texture ) { mGLContext = glContext ; mTexture = texture ; }
public void onRefresh ( ) { setContentShown ( false ) ; forceLoaderReload ( 0 ) ; mGistFile = null ; super . onRefresh ( ) ; }
public void run ( ) { mMainActivityTestRule . getActivity ( ) . onBackPressed ( ) ; }
public void onActivityResult ( int requestCode , int resultCode , Intent data ) { QueueSubject < ActivityResult > subject = prepareSubject ( requestCode ) ; subject . onNext ( new ActivityResult ( requestCode , resultCode , data ) ) ; }
public Tile getTile ( int tileX , int tileY ) { return tileMap [ tileX * mapWidth + tileY ] ; }
public void setButtonLayout ( @ Nullable String xml ) throws IOException { mClientHandlerFactory . setButtonLayout ( xml ) ; }
public void onSaveInstanceState ( @ NonNull Bundle savedInstanceState ) { getArguments ( ) . remove ( ARG_BITMAP ) ; super . onSaveInstanceState ( savedInstanceState ) ; }
public void stringFromLong ( ) { assertEquals ( "784dd132" , JDKHashTools . getStringFromLong ( 2018365746 ) ) ; }
public boolean unregisterMessageHandler ( MessageHandler messageHandler ) { if ( ! messageHandlers . contains ( messageHandler ) ) { return messageHandlers . remove ( messageHandler ) ; } return false ; }
private ArrayList < String > getPlaylists ( ) { return Main . songs . getPlaylistNames ( ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { TextView currentEvent = findViewById ( R . id . current_event ) ; currentEvent . setText ( "Scanning for " + events [ i ] ) ; }
public String getEintritt ( ) { return this . _eintritt ; }
public void onLoadMore ( ) { swipeRefreshLayout . setRefreshing ( true ) ; moviesService . loadMoreMovies ( ) ; }
public void setProgressBarStyle ( @ ProgressBarStyle int style ) { progressBarStyle ( style ) ; invalidate ( ) ; }
public DashboardBoxDataLoader . BoxDataEntityClass getEntityClass ( ) { return entityClass ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . fragment_topiclist , parent , false ) ; return new ViewHolder ( view ) ; }
private final Callable resetGameCallable = new Callable < Object > ( ) { @ Override public Object call ( ) { resetGame = true ; return null ; } } ;
public static ComicFragment newInstance ( List < Comic > comicList , int clickedPosition ) { return newInstance ( comicList , "" , clickedPosition ) ; }
public List < Image > getImages ( ) { return images ; }
public void testIsWPCOMURL1 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( wpcomAddress1 ) ) ) ; }
public Builder errorMessageTextColor ( int errorMessageTextColor ) { style . errorMessageTextColor = errorMessageTextColor ; return this ; }
private DeviceItemListener mItemListener = new DeviceItemListener ( ) { @ Override public void onDeviceClick ( Device clickedDevice ) { mActionsListener . openDeviceDetails ( clickedDevice ) ; } } ;
public void updateDiskCacheKey ( MessageDigest messageDigest ) { messageDigest . update ( uri . toString ( ) . getBytes ( ) ) ; }
public void setTextSelectionEnabled ( boolean textSelectionEnabled ) { this . textSelectionEnabled = textSelectionEnabled ; }
public WeatherWidgetProvider2x2 ( ) { super ( 2 ) ; }
public void showLoadingView ( boolean show ) { mLoadingView . setVisibility ( show ? View . VISIBLE : View . GONE ) ; }
public AboutPage assertOnPage ( ) { checkIsStringDisplayed ( R . string . about_preferences ) ; return this ; }
public boolean isInProgress ( ) { return part . isInProgress ( ) ; }
public void didSelectContact ( TLRPC . User user , String param ) { VoIPHelper . startCall ( user , getParentActivity ( ) , null ) ; }
private static X509TrustManager findX509TrustManager ( TrustManagerFactory tmf ) { TrustManager tms [ ] = tmf . getTrustManagers ( ) ; for ( TrustManager tm : tms ) { if ( tm instanceof X509TrustManager ) { return ( X509TrustManager ) tm ; } } return null ; }
public Builder withTagId ( long id ) { mTagId = id ; return this ; }
public static RequestCreator getPicassoRounded ( Context context , UserLTE user ) { RequestCreator p = getRequestCreator ( context , user ) ; if ( p == null ) return null ; return getPicassoRounded ( p ) ; }
private Image ( Bitmap bitmap ) { if ( bitmap == null ) { throw new NullPointerException ( ) ; } this . bitmap = bitmap ; bounds = new Rect ( 0 , 0 , bitmap . getWidth ( ) , bitmap . getHeight ( ) ) ; }
public static boolean hasEmptyContentFields ( PostModel post ) { return TextUtils . isEmpty ( post . getTitle ( ) ) && TextUtils . isEmpty ( post . getContent ( ) ) ; }
public static synchronized MmsRadio getInstance ( Context context ) { if ( instance == null ) instance = new MmsRadio ( context ) ; return instance ; }
public void requestInputFromUser ( int resid , String needed ) { VpnStatus . updateStateString ( "NEED" , "need " + needed , resid , LEVEL_WAITING_FOR_USER_INPUT ) ; showNotification ( getString ( resid ) , getString ( resid ) , NOTIFICATION_CHANNEL_NEWSTATUS_ID , 0 , LEVEL_WAITING_FOR_USER_INPUT ) ; }
public static Boolean getPrefAutoStart ( ) { return prefAutoStart ; }
public void updateUserAmounts ( users sender , users receiver , int amount ) { sender . amount -= amount ; receiver . amount += amount ; }
public void onEventMainThread ( PushbulletReplyEvent pushbulletReplyEvent ) { String text = getNoteContent ( ) + System . getProperty ( "line . separator" ) + pushbulletReplyEvent . message ; binding . fragmentDetailContent . detailContent . setText ( text ) ; }
private void persistCookies ( ) { Prefs . INSTANCE . setCookies ( this ) ; }
public void close ( ) throws IOException { FileSystemFileConnection . this . opendOutputStream = null ; super . close ( ) ; }
public static Map < String , TetroidTag > getTags ( ) { return Instance . mXml . mTagsMap ; }
private void resetBonus ( ) { mPool . free ( this ) ; mRacer . resetBonus ( ) ; }
public void onItemsReceived ( int count , int start , Map < String , Object > parameters , List < Plugin > items , Class < Plugin > dataType ) { mDelegate . addToHomeMenu ( count , items ) ; }
public void setupTest ( ) { MockitoAnnotations . initMocks ( BookmarkModelTest . this ) ; model = new BookmarkModel ( bookmarksAdapter , recentPageModel ) ; }
public static List < String > getThemes ( ) { return themes ; }
public int getTotalAvailableKnights ( ) { return this . aliveKnightsInCurrentLevel ; }
private Collection reopenCol ( ) { CollectionHelper . getInstance ( ) . closeCollection ( false ) ; return CollectionHelper . getInstance ( ) . getCol ( InstrumentationRegistry . getTargetContext ( ) ) ; }
private void ensureGlow2 ( RecyclerView rv ) { if ( mGlow2 == null ) { mGlow2 = new EdgeEffectCompat ( rv . getContext ( ) ) ; } updateGlowSize ( rv , mGlow2 , mGlow2Dir ) ; }
public void onClick ( View v ) { ( ( MainActivity ) Objects . requireNonNull ( getActivity ( ) ) ) . startNTPSynchronization ( ) ; setNTPMode ( ) ; }
public SearchResult createFromParcel ( Parcel source ) { return new SearchResult ( source ) ; }
public void showFullSearchInPlacesSection ( Cursor cursor ) { if ( searchPlacesFragment . isViewCreated ( ) ) { searchPlacesFragment . setData ( cursor ) ; searchPlacesFragment . showList ( ) ; searchPlacesFragment . showFullHeaders ( cursor . getCount ( ) ) ; } }
public void onClick ( View v ) { startBookGroupListActivity ( BookGroup . BookGroupType . LOANED ) ; }
public Builder inetAddress ( InetAddress inetAddress ) { this . mInetAddress = inetAddress ; return this ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { }
public void subscribeToColorAccentUpdate ( ) { colorAccentSubscription = Aesthetic . get ( ) . colorAccent ( ) . subscribe ( color -> { bcPlayPause . setColor ( color ) ; NowPlayingHelper . changeProgressBarColor ( color , bcProgressbar ) ; } ) ; }
public boolean onKeyUp ( int keyCode , KeyEvent event ) { if ( mAlert . onKeyUp ( keyCode , event ) ) { return true ; } return super . onKeyUp ( keyCode , event ) ; }
public void initialize ( ) { try { swanSensor = ExpressionManager . getSensor ( this , SENSOR_NAME ) ; } catch ( SwanException e ) { e . printStackTrace ( ) ; } startActivityForResult ( swanSensor . getConfigurationIntent ( ) , REQUEST_CODE ) ; }
public MessageHoldersConfigurator setDateHeaderLayout ( @ LayoutRes int layout ) { this . dateHeaderLayout = layout ; return this ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeString ( phone_number ) ; }
private boolean isDeviceOnline ( ) { ConnectivityManager connMgr = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo networkInfo = connMgr . getActiveNetworkInfo ( ) ; return ( networkInfo != null && networkInfo . isConnected ( ) ) ; }
private double mlTopint ( double num ) { return num * 0 . 00211 ; }
public String getAlt ( ) { return alt ; }
private void invokeRightEdgeRangeListener ( int l ) { int scrollToEnd = mPathContainer . getWidth ( ) - getWidth ( ) - max ( mPathContainerRightPadding , 0 ) ; int pixelsScrolledWithinRange = scrollToEnd - l + mRightEdgeRange ; mRightEdgeRangeListener . rangeOffsetChanged ( pixelsScrolledWithinRange ) ; }
public void cancel ( Account account , OCFile file ) { cancel ( account . name , file . getRemotePath ( ) ) ; }
public void testDisplaysTitle ( ) { onView ( allOf ( withChild ( ViewMatchers . withText ( R . string . add_meal_title ) ) , withId ( R . id . add_meal_toolbar ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; }
public DynamicDialogFragment setAutoDismiss ( boolean autoDismiss ) { this . mAutoDismiss = autoDismiss ; return this ; }
public HashMap < String , PackedTexture > getPackedTextures ( ) { return packedTextures ; }
private static AudioManager getInstance ( Context context ) { synchronized ( mSingletonLock ) { if ( audioManager != null ) return audioManager ; if ( context != null ) audioManager = ( AudioManager ) context . getSystemService ( Context . AUDIO_SERVICE ) ; return audioManager ; } }
public void save ( ) { if ( bid != - 1 ) super . save ( ) ; }
public void setOnLongClickListener ( OnLongClickListener l ) { date . setOnLongClickListener ( l ) ; time . setOnLongClickListener ( l ) ; }
public int getLayout ( ) { return R . layout . fragment_home ; }
public CharSequence getTimestamp ( ) { return formatter . format ( this . timestamp ) ; }
public boolean hasShuffle ( ) { return ( ( bitField0_ & 0x00008000 ) == 0x00008000 ) ; }
public AboutViewPagerAdapter ( Context context ) { layoutInflater = LayoutInflater . from ( context ) ; }
public String getTitle ( ) { return StringUtils . notNullStr ( title ) ; }
public void showSnackbarError ( @ NonNull Optional < String > ingredientsError ) { getDelegate ( ) . showSnackbarError ( ingredientsError ) ; }
public Map < Key , List < Entry >> getAll ( ) { return Collections . unmodifiableMap ( records ) ; }
public void onChannelStateUpdated ( IChannel channel ) throws RemoteException { if ( channel . getId ( ) == getChannelId ( ) && channel . getDescription ( ) != null ) { loadComment ( channel . getDescription ( ) ) ; service . unregisterObserver ( this ) ; } }
public void unknownRepositoryLink__opensBrowser ( ) throws Exception { assertRedirectsToBrowser ( parseLink ( "https : }
public static String translateSubject ( String s ) { String t = SIAApp . GG_APP . subjects . get ( s . toLowerCase ( ) ) ; if ( t == null ) return s ; else return t ; }
public DesktopMemoryChecker ( ) { setDaemon ( true ) ; setName ( DesktopMemoryChecker . class . getSimpleName ( ) ) ; setUncaughtExceptionHandler ( Debug . UncaughtExceptionHandler . instance ) ; }
public void set ( Matrix matrix ) { this . matrix . set ( matrix ) ; updateFromMatrix ( true , true ) ; }
private float getLevelSpriteY ( float heightPerLevel , int levelIndex ) { return ( ( levelIndex % 12 / COLUMNS ) ) * heightPerLevel ; }
public void setScrollPosition ( int scrollY ) { this . mScrollPos = scrollY ; }
private void initWorkerView ( ) { mDailyUpdateIntervalPreference . setEnabled ( true ) ; mDailyUpdateIntervalPreference . setSummary ( getString ( R . string . pref_auto_update_check_time , Settings . getAutomaticUpdateInterval ( getContext ( ) ) ) ) ; mDailyUpdateTimePreference . setEnabled ( false ) ; }
public CharSequence getPageTitle ( int position ) { return mCateGory . get ( position ) . getTitle ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . pref_diagnostic_user ) ; }
public static boolean networkConnectivity ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo networkInfo = cm . getActiveNetworkInfo ( ) ; return networkInfo != null && networkInfo . isConnected ( ) ; }
public int delete ( SQLiteDatabase db ) { assertTable ( ) ; LogUtil . d ( TAG , "delete ( ) " + this ) ; return db . delete ( mTable , getSelection ( ) , getSelectionArgs ( ) ) ; }
public void setArguments ( Bundle slidecontent ) { super . setArguments ( slidecontent ) ; TextView temp ; slidetext = slideInfo . replace ( " ; " , " < br > " ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { setPrivacy ( dialog . getContext ( ) , PRIVACY_BLOCK ) ; }
public RRGLTexture ( RRGLContext glContext , Bitmap bitmap , final boolean smooth ) { mTextureHandle = loadTexture ( bitmap , smooth ) ; mGLContext = glContext ; }
public void startSingleMode ( ) { Intent intent = new Intent ( this , SingleModePrepareActivity . class ) ; startActivity ( intent ) ; }
public void setFeeChargesDueAtDisbursementCharged ( Integer feeChargesDueAtDisbursementCharged ) { this . feeChargesDueAtDisbursementCharged = feeChargesDueAtDisbursementCharged ; }
public FileArrayAdapter ( Context context , List < DriveListItem > filteredDriveList ) { super ( context , R . layout . two_item_image , filteredDriveList ) ; items = filteredDriveList ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( closest . getName ( ) ) ; dest . writeDouble ( deviation ) ; }
public void addPositionUpdateListener ( PositionUpdateListener listener ) { listeners . add ( listener ) ; listenersToRemove . remove ( listener ) ; }
public void onLongClick ( ) { loopNormal ( ) ; }
public void isLoading ( boolean loading ) { setProgressVisible ( loading ) ; isLoadingComments = loading ; }
public Favorites getFavoritesTable ( ) { return mFavoritesTable ; }
public float getFloat ( @ NonNull String key ) throws ItemNotFoundException , WrongTypeException { return 0 ; }
public void run ( ) { String res = Statusgo . CompleteTransactions ( hashes , password ) ; callback . invoke ( res ) ; }
public String desc ( ) { return Game . getVar ( R . string . PlateArmor_Desc ) ; }
public static void format2d ( StringBuilder sb , long x ) { if ( x < 10 ) { sb . append ( '0' ) ; } sb . append ( x ) ; }
public void onBackPressed ( ) { if ( mService != null && mService . isSynchronized ( ) ) { mDisconnectPromptBuilder . show ( ) ; return ; } super . onBackPressed ( ) ; }
public void compare_WhenFirstNameIsLower_ReturnLessThanZero ( ) { int result = sut . compare ( tag1 , tag2 ) ; assertThat ( result , lessThan ( 0 ) ) ; }
public String getId ( ) { return mId ; }
private Set < BoundingBox > asSet ( ) { return boxes ; }
public synchronized void inAmbientMode ( boolean inAmbientMode , boolean lowBitAmbient ) { if ( lowBitAmbient ) { profileWrapper . setAntiAlias ( ! inAmbientMode ) ; } }
public void removeAllSaved ( Context context , PrefsName prefsName ) { Set < String > items = getItems ( context , prefsName ) ; if ( items != null ) { items . clear ( ) ; saveItems ( context , prefsName , items ) ; } }
public CarmenFeature getItem ( int position ) { return features . get ( position ) ; }
private void showSettingAccesability ( ) { if ( ! isMyServiceRunning ( LockWindowAccessibilityService . class ) ) { Intent intent = new Intent ( Settings . ACTION_ACCESSIBILITY_SETTINGS ) ; context . startActivity ( intent ) ; } }
public void onAnimationCancel ( View view ) { view . setAlpha ( 1 ) ; view . setTranslationX ( 0 ) ; }
private void finish ( String token , String from ) { finish ( token , from , null ) ; }
public Severity getSeverity ( ) { return severity ; }
public boolean equalValues ( JingleCandidate other ) { return other . getHost ( ) . equals ( this . getHost ( ) ) && ( other . getPort ( ) == this . getPort ( ) ) ; }
public void onClick ( View v ) { RequestToggleLogging ( ) ; }
public void updateAllPlaylistFragment ( ) { PlayListFragment playListFragment = ( PlayListFragment ) fragMan . findFragmentByTag ( "allPlaylists" ) ; if ( playListFragment != null && playListFragment . allPlaylistRecycler != null ) { playListFragment . allPlaylistRecycler . getAdapter ( ) . notifyDataSetChanged ( ) ; } }
public final void onConfigurationChanged ( Configuration newConfig ) { Log . d ( TAG , "onConfigurationChanged ( ) called with : " + "newConfig = [ " + newConfig + " ] " ) ; super . onConfigurationChanged ( newConfig ) ; }
public void setFirstPost ( String firstPost ) { this . firstPost = firstPost ; notifyPropertyChanged ( BR . firstPost ) ; }
public void onRegularClicked ( ) { textStyle = TextStyle . ITALIC ; setSelectedTextStyleBackground ( imgRegular ) ; }
public static List < String > tagEditorSplit ( @ NonNull final String names ) { return MultiValuesTagUtil . splitIfNeeded ( MultiValuesTagUtil . splitImpl ( names , MULTI_LINE_SEPARATOR ) ) ; }
public Completable unbanUser ( int accountId , int userId ) { return networker . vkDefault ( accountId ) . account ( ) . unbanUser ( userId ) . toCompletable ( ) . andThen ( blacklistRepository . fireRemove ( accountId , userId ) ) ; }
public String getBlock ( ) { return type ; }
public List < PresenceItem > getResponse ( ) { return ( rosterCount >= 0 ) ? response : null ; }
public boolean onPreferenceClick ( Preference preference ) { return true ; }
public Audio getCurrentAudio ( ) throws RemoteException { return mService . get ( ) . getCurrentTrack ( ) ; }
public boolean onKey ( final DialogInterface dialogInterface , final int keyCode , final KeyEvent keyEvent ) { if ( keyCode == KeyEvent . KEYCODE_BACK ) { cancelled . set ( true ) ; progressDialog . dismiss ( ) ; } return true ; }
public List < Object > getPostLinks ( ) { return postLinks ; }
public void disableContentLogOnCrashes ( ) { content . disableCrashLogging ( ) ; }
public LeakCanaryProxy provideLeakCanaryProxy ( @ NonNull DigitalismaApplication app ) { return new LeakCanaryProxyImpl ( app ) ; }
public static boolean getNotificationLED ( Context context ) { return getBoolean ( context , "pref_enable_notification_led" , context . getResources ( ) . getBoolean ( R . bool . pref_default_enable_notification_led ) ) ; }
public void onPause ( ) { ad . pauseNativeAdView ( R . id . adView_about , a ) ; super . onPause ( ) ; }
public final int getPointYNumber ( ) { return this . pointYNumber ; }
public void addToNewMeal ( @ NonNull IngredientTemplate ingredientTemplate ) { Intent intent = new Intent ( activity , AddMealActivity . class ) ; intent . putExtra ( AddMealFragmentModule . EXTRA_INGREDIENT_PARCEL , Parcels . wrap ( ingredientTemplate ) ) ; activity . startActivity ( intent ) ; }
public void showComments ( int accountId , Commented commented ) { PlaceFactory . getCommentsPlace ( accountId , commented , null ) . tryOpenWith ( getActivity ( ) ) ; }
public void setTexture ( RRGLTexture newTexture ) { if ( isAdded ( ) ) { mTexture . releaseReference ( ) ; } mTexture = newTexture ; if ( isAdded ( ) ) { mTexture . addReference ( ) ; } }
public Builder negativeText ( @ StringRes int negativeRes ) { if ( negativeRes == 0 ) return this ; return negativeText ( this . context . getText ( negativeRes ) ) ; }
public void onLocationChanged ( @ NonNull MLocation loc ) { if ( ! bluetooth . preferences . preferenceEnabled ) { updateLocation ( loc ) ; } }
public boolean onEditAction ( TextView view , int actionId , KeyEvent event ) { if ( view == alarmPeriodView ) { processAlarmPeriodInput ( ) ; return true ; } return false ; }
private void showRefreshFab ( boolean show ) { RefreshIcon refreshFAB = ( RefreshIcon ) findViewById ( id . refresh_fab ) ; if ( show ) refreshFAB . show ( ) ; else refreshFAB . hide ( ) ; }
public ServerAddress getCliServerAddress ( ) { return getServerAddress ( KEY_CLI_SERVER_ADDRESS , defaultCliPort ) ; }
public Integer getTp ( ) { return tp ; }
public List < DailyWordsFeedItem > parse ( ) { return parse ( DailyWordsFeedItem . class ) ; }
public ArrayList < OCFile > getFiles ( ) { return mFiles ; }
public void onResourceReady ( Bitmap resource , GlideAnimation < ? super Bitmap > glideAnimation ) { metaData . putBitmap ( MediaMetadataCompat . METADATA_KEY_ALBUM_ART , copy ( resource ) ) ; mediaSession . setMetadata ( metaData . build ( ) ) ; }
public DatabaseEntry getEntry ( ) { return _entry ; }
public static boolean isSynced ( String subreddit ) { return flairs . contains ( subreddit . toLowerCase ( ) ) ; }
public Hashtable < String , Layer > getLayerTable ( ) { return allData != null ? allData . layerTable : null ; }
public boolean onPreferenceClick ( Preference preference ) { displayChangesDialog ( ) ; return true ; }
public String getTagDisplayName ( ) { return StringUtils . notNullStr ( tagDisplayName ) ; }
public void onSuccess ( List < Post > results ) { callback . onSuccess ( results ) ; getFromRemoteByAuthorId ( authorId , callback ) ; }
public AboutBuilder setBriefColor ( int color ) { this . briefColor = ColorUtil . get ( context , color ) ; return this ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . action_refresh ) { mWebview . reload ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void onException ( Object origin , Exception exception , String info ) { Log . w ( origin . toString ( ) , info , exception ) ; exception . printStackTrace ( ) ; }
public void copyCurrentSelection ( ) { if ( terminalView != null ) { terminalView . copyCurrentSelectionToClipboard ( ) ; } }
public void onFileChooserDialogSelected ( final FileModel fileModel , final View view ) { new FileUploadDialog ( mActivity , mApplicationCallback , mFileParentId , fileModel , mListener ) ; }
private VariableUtils ( ) { mReloadBookGroupList = false ; mReloadBookList = false ; }
public Map < Sha256Hash , AbstractTransaction > getPendingTransactions ( ) { throw new RuntimeException ( "Not implemented" ) ; }
public void testTokenerConstructorWrongType ( ) throws JSONException { try { new JSONArray ( new JSONTokener ( " { \"foo\" : false } " ) ) ; fail ( ) ; } catch ( JSONException e ) { } }
public boolean isHomeVisible ( ) { return ! mCurrentDirectory . getPath ( ) . equals ( initialPath ( ) ) ; }
public LiveData < Exception > getError ( ) { return getViewModel ( ) . getError ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_Dialogs . TLdeserialize ( stream , constructor , exception ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { adapter . filter ( s ) ; }
public QuakeListViewModel ( @ NonNull Application application , NetworkRepository < QuakeModel > repository , DateManager dateManager ) { super ( application ) ; quakeRepository = repository ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . chatitem_fragment , menu ) ; }
public int compare ( DatabaseEntry a , DatabaseEntry b ) { return a . getIssuer ( ) . compareToIgnoreCase ( b . getIssuer ( ) ) ; }
public void handle ( EntryCopiedAndAddedToHistoryEvent e ) { mAdapter . updateHistory ( ) ; }
private void setLoadingStatus ( String status ) { TextView tv = ( TextView ) findViewById ( R . id . loading_message ) ; if ( tv != null ) { tv . setText ( status ) ; } }
public void setOrientation ( int angle , boolean center ) { while ( angle < 0 ) { angle += 360 ; } while ( angle > 360 ) { angle -= 360 ; } orientation = thumbOrientation = angle ; centerRotation = center ; }
private void unwire ( ) { view . setOnClickListener ( null ) ; ivExpander . setOnClickListener ( null ) ; if ( listener == null ) view . setOnLongClickListener ( null ) ; if ( btnHelp != null ) btnHelp . setOnClickListener ( null ) ; }
public HlsMediaPlaylist copyWith ( long startTimeUs , int discontinuitySequence ) { return new HlsMediaPlaylist ( playlistType , baseUri , startOffsetUs , startTimeUs , true , discontinuitySequence , mediaSequence , version , targetDurationUs , hasEndTag , hasProgramDateTime , initializationSegment , segments ) ; }
public String getFileName ( ) { File f = new File ( getRemotePath ( ) ) ; return f . getName ( ) . length ( ) == 0 ? ROOT_PATH : f . getName ( ) ; }
public Cursor getVerses ( int sura , int minAyah , int maxAyah , String table ) { return getVerses ( sura , minAyah , sura , maxAyah , table ) ; }
public void setOriginalId ( int originalId ) { this . originalId = originalId ; }
public void deletePersonDebt ( @ NonNull PersonDebt personDebt ) { checkNotNull ( personDebt ) ; mDebtsLocalDataSource . deletePersonDebt ( personDebt ) ; removePersonDebtFromCache ( personDebt ) ; notifyContentObserver ( personDebt . getDebt ( ) . getDebtType ( ) ) ; }
private void whenRequestingPermission ( ) { uut . requestPermission ( null ) ; }
public void requestRecordAudioPermission ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "requestRecordAudioPermission" ) ; main_activity . requestRecordAudioPermission ( ) ; }
public CpuStateMonitor getCpuStateMonitor ( ) { return _monitor ; }
private void updateStatus ( ) { count = TracksDataSource . getInstance ( ) . getTicksForDay ( this . getTrack ( ) , this . getDate ( ) ) . size ( ) ; updateText ( ) ; }
public static ClusterMapFragment newInstance ( String param1 ) { ClusterMapFragment fragment = new ClusterMapFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( ARG_HOST_PREFIX , param1 ) ; fragment . setArguments ( args ) ; return fragment ; }
public static Spanned html_to_spanned ( String msg ) { return html_to_spanned ( msg , false , null , null ) ; }
public ObscureOption ( String name , int icon , int operation ) { this . name = name ; this . icon = icon ; this . operation = operation ; }
public static void logError ( String s ) { if ( IS_ENABLED ) { Log . e ( "IGCParser : : " , s ) ; } }
public int getBaseline ( ) { return this . mHourPicker . getBaseline ( ) ; }
public UserNoteViewHolder ( View rootView ) { super ( rootView ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( context , burstExplorer , LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item , parent , false ) ) ; }
private void log ( @ NonNull String message ) { log ( getId ( ) , message ) ; }
public void setAttachedFiles ( List < TetroidFile > files ) { this . files = files ; }
public Class < ? extends DataRenderer > getRendererClass ( ) { return BarRenderer . class ; }
public com . google . protobuf . Parser < ResponseTranscoderStatus > getParserForType ( ) { return PARSER ; }
public static synchronized String formatDoubleTwoPlaces ( double input ) { return sDoubleTwoPlacesFormat . format ( input ) ; }
public void setDesc ( String desc ) { this . desc = desc == null ? "" : desc ; }
public static Bitmap resizeBitmap ( Bitmap bitmap , int newWidth , int newHeight ) { return Bitmap . createScaledBitmap ( bitmap , newWidth , newHeight , false ) ; }
public void onPause ( ) { if ( callback != null && BluetoothAdapter . getDefaultAdapter ( ) . isEnabled ( ) ) { BluetoothAdapter . getDefaultAdapter ( ) . getBluetoothLeAdvertiser ( ) . stopAdvertising ( callback ) ; } super . onPause ( ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = mInflater . inflate ( R . layout . recycleview_list_item , parent , false ) ; return new ViewHolder ( view ) ; }
public Builder confirmationStepSubtitle ( String confirmationStepSubtitle ) { style . confirmationStepSubtitle = confirmationStepSubtitle ; return this ; }
public void onClick ( View v ) { if ( current != 2 ) mPager . setCurrentItem ( 2 ) ; }
private void switchToSpeaker ( View view ) { requireRtpConnection ( ) . getAudioManager ( ) . setDefaultAudioDevice ( AppRTCAudioManager . AudioDevice . SPEAKER_PHONE ) ; }
private VideoTrack getVideoTrack ( ) { this . capturer = createCapturer ( true ) ; return factory . createVideoTrack ( "video1" , factory . createVideoSource ( this . capturer ) ) ; }
public String getSource ( ) { return this . source ; }
public static Drawable getDrawable ( @ AttrRes final int attr , final Context context ) { return context . getDrawable ( getAttrIdValue ( attr , context ) ) ; }
public Single < Tag > getById ( String id ) { return cacheManager . getById ( id ) ; }
public void onLocationResult ( @ NotNull LocationResult locationResult ) { Timber . d ( "BackgroundService location result received : %s" , locationResult ) ; onLocationChanged ( locationResult . getLastLocation ( ) , MessageLocation . REPORT_TYPE_DEFAULT ) ; }
public void create ( final API . Callback cb ) { if ( ! canCreate ( ) ) { cb . onFailure ( R . string . operation_not_permitted ) ; return ; } api . addPlant ( plant , cb ) ; }
private void startRegistrationActivity ( ) { Intent intent = new Intent ( this , RegistrationActivity . class ) ; startActivity ( intent ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mIHostingActivity . showFABIfAccurate ( true ) ; }
public void onAnimationStart ( Animator animation ) { scoreView . setVisibility ( View . GONE ) ; menuVisible = rightMenu ; showingWinMenu = true ; }
public boolean getLotto ( ) { return lotto ; }
private Note getNoteFromUri ( Uri uri , Collection col ) { long noteId ; noteId = Long . parseLong ( uri . getPathSegments ( ) . get ( 1 ) ) ; return col . getNote ( noteId ) ; }
public int getItemCount ( ) { return AllTasks . size ( ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . didReceiveSmsCode , matcher . group ( 0 ) ) ; }
public boolean containsAll ( Collection < ? > c ) { return values . containsAll ( c ) ; }
public static Uri getContentUri ( @ NonNull String authority , @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( ContentResolver . SCHEME_CONTENT ) . authority ( authority ) . path ( path ) . build ( ) ; }
public static ArrayList < Playlist > getAllPlaylists ( @ NonNull final Context context ) { return getAllPlaylists ( makePlaylistCursor ( context , null , null ) ) ; }
private boolean isNetworkAvailable ( ) { ConnectivityManager connectivityManager = ( ConnectivityManager ) mContext . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetworkInfo = connectivityManager . getActiveNetworkInfo ( ) ; return activeNetworkInfo != null && activeNetworkInfo . isConnected ( ) ; }
public void setGraphicO ( ) { this . setBackgroundResource ( R . drawable . gf_o ) ; }
public void onPause ( ) { if ( mIsPaused ) throw new RuntimeException ( ) ; mIsPaused = true ; super . onPause ( ) ; if ( surfaceView != null ) { surfaceView . onPause ( ) ; } }
public AccountProperty getProperty ( ) { return ACCOUNT_CONFIGURED ; }
public void setZoom ( float scale , float focusX , float focusY ) { setZoom ( scale , focusX , focusY , mScaleType ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . activity_video_player , menu ) ; return true ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { if ( dataSnapshot . getValue ( ) != null ) { Log . d ( "TeamFragment" , "Admin Override Enabled" ) ; ProfileHolder . setAdminOverride ( true ) ; teamAdapter . notifyDataSetChanged ( ) ; } }
public void setShowCollection ( boolean showCollection ) { isShowCollection = showCollection ; }
public static boolean isEnabled ( Context context ) { ComponentName receiver = new ComponentName ( context , BootReceiver . class ) ; PackageManager pm = context . getPackageManager ( ) ; int componentEnabledSetting = pm . getComponentEnabledSetting ( receiver ) ; return componentEnabledSetting == PackageManager . COMPONENT_ENABLED_STATE_ENABLED ; }
private void afterUpdate ( DataSupport baseObj , List < Field > supportedGenericFields ) throws InvocationTargetException , IllegalAccessException { updateGenericTables ( baseObj , supportedGenericFields , baseObj . getBaseObjId ( ) ) ; updateAssociatedTableWithFK ( baseObj ) ; insertIntermediateJoinTableValue ( baseObj , true ) ; clearFKValueInAssociatedTable ( baseObj ) ; }
public void onSuccess ( ) { view . dismissProgress ( ) ; view . onSuccess ( ) ; }
public static int getAyahId ( int sura , int ayah ) { int ayahId = 0 ; for ( int i = 0 ; i < sura - 1 ; i ++ ) { ayahId += suraNumAyahs [ i ] ; } ayahId += ayah ; return ayahId ; }
public String getAttachmentsJson ( ) { return StringUtils . notNullStr ( attachmentsJson ) ; }
public void setId ( String id ) { this . id = id ; }
public void clearData ( ) { SharedPreferences p = context . getSharedPreferences ( preferenceName , Context . MODE_PRIVATE ) ; SharedPreferences . Editor e = p . edit ( ) . clear ( ) ; e . commit ( ) ; }
public void onFailure ( Call < UIDResponse > call , Throwable t ) { Toast . makeText ( LoginActivity . this , getString ( R . string . call_failed ) , Toast . LENGTH_LONG ) . show ( ) ; }
public VoiceFragment ( ) { mDisplayVoice = new StringBuffer ( ) ; }
public final void setRegionDecoderClass ( Class < ? extends ImageRegionDecoder > regionDecoderClass ) { if ( regionDecoderClass == null ) { throw new IllegalArgumentException ( "Decoder class cannot be set to null" ) ; } this . regionDecoderFactory = new CompatDecoderFactory <> ( regionDecoderClass ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_file_explorer , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void run ( ) { RedditChangeDataManager . pruneAllUsers ( ) ; CacheManager . getInstance ( context ) . pruneCache ( ) ; }
public void shouldNotPassValidation_noFamilyName ( ) { patient . getPerson ( ) . getName ( ) . setFamilyName ( null ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public int getCount ( ) { Log . v ( DbgU . getAppTag ( ) , DbgU . getMethodName ( ) ) ; if ( mItemCursor != null ) { return mItemCursor . getCount ( ) ; } else { return 0 ; } }
public ChangeStateFloatingActionButton ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void detectsSpaceInTheEndOfUnderlyingValue ( ) { List < SelectChoice > items = Lists . newArrayList ( new SelectChoice ( "label" , "after " ) ) ; subject . check ( items ) ; assertEquals ( subject . hasInvalidValues ( ) , true ) ; }
public void setUp ( ) throws IOException { testCol = getEmptyCol ( ) ; }
public void setHeight ( float height , SizeLayout layoutType ) { size . getHeight ( ) . set ( height , layoutType ) ; }
public boolean isBytesType ( ) { return this == VariableTypeBytes ; }
public BleBluetooth getBleBluetooth ( BleDevice bleDevice ) { if ( bleBluetoothPool != null ) { return bleBluetoothPool . getBleBluetooth ( bleDevice ) ; } return null ; }
public Matrix ( int p ) { NumberofRows = p ; NumberofCols = p ; type = Type . Normal ; name = "New Square 1" ; }
public AddNewRepeatDialog startBlankFormWithRepeatGroup ( String formName , String repeatName ) { goToBlankForm ( formName ) ; return new AddNewRepeatDialog ( repeatName , rule ) . assertOnPage ( ) ; }
public void parseUri ( ) { String str = AddressUtil . WAVES_PREFIX + "3NCwEeAeVKdPySfsTeAoroPHDUg54mSDY5w?asset = 123 & amount = 5000" ; URI uri = URI . create ( str ) ; uri . getHost ( ) ; }
public long getItemId ( int index ) { long result = RecyclerView . NO_ID ; Link link = getLink ( index ) ; if ( link != null ) result = link . getLinkId ( ) ; return result ; }
public void setFontSize ( int fontSize ) { mTitleFontSize = fontSize ; }
private int getFirstContactIndex ( ) { return searchResult . getConversations ( ) . getCnt ( ) ; }
public boolean areItemsTheSame ( final int oldItemPosition , final int newItemPosition ) { return idFunc . test ( oldList . get ( oldItemPosition ) , newList . get ( newItemPosition ) ) ; }
public FindMultiCallback getListener ( ) { return cb ; }
public static boolean getEncryptionEnabled ( Context context ) { return getBoolean ( context , "pref_encrypt" , context . getResources ( ) . getBoolean ( R . bool . pref_default_encrypt ) ) ; }
public void showFieldPanelForReply ( MessageObject messageObjectToReply ) { showFieldPanel ( true , messageObjectToReply , null , null , null , false , true ) ; }
public String desc ( ) { return Game . getVar ( R . string . DarkVeilBuff_Info ) ; }
public void onCreate ( ) { logEvent ( "onCreate" ) ; reload ( ) ; }
public void fireCommandAction ( Command c , Displayable d ) { if ( listener != null ) { queue . postEvent ( CommandActionEvent . getInstance ( listener , c , d ) ) ; } }
public SimpleSetting ( String name , String value ) { mName = name ; mValue = value ; }
private void updateQueuePosition ( ) { playingQueueAdapter . setCurrent ( MusicPlayerRemote . getPosition ( ) ) ; playerQueueSubHeader . setText ( getUpNextAndQueueTime ( ) ) ; if ( slidingUpPanelLayout . getPanelState ( ) == SlidingUpPanelLayout . PanelState . COLLAPSED ) { resetToCurrentPosition ( ) ; } }
public TerminsAndDefinition ( Context context ) { this . context = context ; }
public < T extends ViewModel > T create ( Class < T > modelClass ) { return ( T ) new CountersViewModel ( app , repository ) ; }
public boolean isNestedScrollingEnabled ( ) { return mChildHelper . isNestedScrollingEnabled ( ) ; }
public void reset ( ) { index = 0 ; }
public void afterTextChanged ( Editable editable ) { inputLayoutUrl . setErrorEnabled ( false ) ; boolean newUrlValid = validateInput ( inputLayoutUrl , inputUrl ) ; }
public void onTouchEvent ( RecyclerView rv , MotionEvent e ) { RecyclerViewTouchActionGuardManager . this . onTouchEvent ( rv , e ) ; }
private void givenPermissionGranted ( final boolean hasPermission ) { new Expectations ( ) { { mPermissionChecker . hasPermission ( ) ; result = hasPermission ; } } ; }
public void onClick ( View view ) { startActivity ( new Intent ( MainActivity . this , AddPlantActivity . class ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; TraceDroid . init ( this ) ; settings = new AndroidFASTSettings ( App . this ) ; }
public void removeCircle ( ) { isRefreshing . set ( false ) ; isRefreshing . notifyChange ( ) ; }
public void run ( ) { Snackbar . make ( parentLayout , R . string . something_went_wrong , Snackbar . LENGTH_LONG ) . show ( ) ; }
public Result ( MasterKey key , Slot slot ) { this ( key , slot , false ) ; }
public static boolean landscape ( ) { return width ( ) > height ( ) ; }
public void onDeleteAlarm ( ) { detailPresenter . onDeleteAlarm ( alarm ) ; finish ( ) ; }
public int [ ] onCreateDrawableState ( int extraSpace ) { final int [ ] drawableState = super . onCreateDrawableState ( extraSpace + 1 ) ; if ( isChecked ( ) ) { mergeDrawableStates ( drawableState , CHECKED_STATE_SET ) ; } return drawableState ; }
public void enableNextButton ( boolean enable ) { buttonNext . setClickable ( enable ) ; buttonNext . setEnabled ( enable ) ; }
public void onCreate ( SQLiteDatabase database ) { database . execSQL ( TableCreationScripts . CREATE_LISTS_TABLE_QUERY ) ; database . execSQL ( TableCreationScripts . CREATE_NAMES_TABLE_QUERY ) ; database . execSQL ( CREATE_NAMES_IN_LIST_TABLE_QUERY ) ; }
public void onClick ( View v ) { mKpSeekBar . setProgress ( mKpSeekBar . getProgress ( ) + 10 ) ; }
public OCSPrologReply ( ) { idList = new ArrayList < OCSDownloadIdParams > ( ) ; optName = null ; response = "" ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { scrollToFinishActivity ( ) ; } return super . onOptionsItemSelected ( item ) ; }
public static void hideNotification ( Context context ) { NotificationManager mNotificationManager = ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ; mNotificationManager . cancel ( NOTIFY_ID ) ; }
public long getBlogId ( ) { return blogId ; }
public void refreshData ( ) { mApplicationCallback . refreshData ( ) ; }
public void removeNmeaListener ( GpsStatus . NmeaListener nmeaListener ) { listeners . remove ( nmeaListener ) ; }
public Object getMediaLocation ( ) { return currentMediaLocation ; }
public ReviewOutcome ( Card card , double prob ) { this . card = card ; this . prob = prob ; }
public void onClick ( View view ) { bottomSheetBehavior . setState ( BottomSheetBehavior . STATE_HIDDEN ) ; doGetHex ( ) ; }
public void onGestureEnded ( GestureOverlayView gestureOverlayView , MotionEvent motionEvent ) { }
public void setLatitude ( double latitude ) { latitute = latitude ; }
public static Map < String , Map < ? , ? >> getPresetKeys ( ) { return presetKeys ; }
public float convertRawXCoordinateToScaledCanvasCoordinate ( float rawX , MapScaleInfo scaleInfo ) { return ( rawX - scaleInfo . getPivotX ( ) ) /scaleInfo . getScaleFactor ( ) + scaleInfo . getPivotX ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { connectionTestOnSuccess ( null , originalUrlServerVersion ) ; }
public void dispose ( ) { shape . dispose ( ) ; }
public static Type forId ( int id ) { switch ( id ) { case 1 : return Simultaneously ; case 2 : return Individually ; default : throw new IllegalArgumentException ( "Unknown trim path type " + id ) ; } }
public static BottomSheetUserDialogFragment newInstance ( UserLTE user ) { BottomSheetUserDialogFragment fragment = new BottomSheetUserDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putParcelable ( "lol" , Parcels . wrap ( user ) ) ; fragment . setArguments ( args ) ; return fragment ; }
public Content ( String name , ParcelFileDescriptor descriptor , Uri uri , ContentResolver resolver ) { super ( name ) ; this . descriptor = descriptor ; this . fileUri = uri ; this . resolver = resolver ; }
public boolean isButtonBackVisible ( ) { return binding . miButtonBack . getVisibility ( ) == View . VISIBLE ; }
public void setMessage ( String message ) { setArgument ( message , MESSAGE ) ; AlertDialog dialog = ( AlertDialog ) getDialog ( ) ; if ( dialog != null ) { setupView ( dialog ) ; } }
public void roundEnds ( ) { global_Round . roundEnds ( ) ; }
public CharSequence onDisableRequested ( Context context , Intent intent ) { return context . getString ( R . string . admin_receiver_status_disable_warning ) ; }
public void addScript ( String name , String body ) { }
public CharSequence getPageTitle ( int position ) { if ( checkHebrew ( ) ) return getYearTitle ( position + 1 ) ; return getYearTitle ( position + 1 ) ; }
public void inject ( Object object ) { mActivityGraph . inject ( object ) ; }
public void open ( ) { listener . onBoxOpened ( ) ; }
public static com . coinomi . core . protos . Protos . TransactionOutput parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void onDone ( Crop crop ) { String toastMessage = String . format ( context . getString ( R . string . experiment_unsubscribed ) , cropName ) ; Toast . makeText ( context , toastMessage , Toast . LENGTH_SHORT ) . show ( ) ; }
public String getHdPosterUrl ( ) { return mHdPosterUrl ; }
public void openGroups ( int accountId , int userId , @ Nullable User user ) { PlaceFactory . getCommunitiesPlace ( accountId , userId ) . withParcelableExtra ( Extra . USER , user ) . tryOpenWith ( getActivity ( ) ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; DigitalismaApplication . get ( getActivity ( ) ) . getComponent ( ) . plusDeveloperSettingsComponent ( ) . inject ( this ) ; presenter . bindView ( this ) ; }
public void onBackPressed ( ) { Intent intent = new Intent ( getApplicationContext ( ) , main_activity . class ) ; startActivity ( intent ) ; finish ( ) ; }
public static String toBase64 ( String data ) { return Base64 . encodeToString ( data . getBytes ( ) , Base64 . DEFAULT ) ; }
public Date getChangedAt ( ) { return this . changedAt ; }
private void initBlurPrefs ( ) { binding . blurPrefs . setOnClickListener ( mBlurClick ) ; binding . blurPrefs . setChecked ( mPrefs . isBlurEnabled ( ) ) ; }
public void onClick ( View v ) { addReminder ( 0 ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mSearchText = null ; RootUtils . mount ( false , "/system" ) ; if ( mLoader != null ) { mLoader . cancel ( true ) ; } }
private void setEntries ( CharSequence [ ] entries ) { this . entries = entries ; }
public void destroyItem ( ViewGroup container , int position , Object object ) { mRegisteredFragments . remove ( position ) ; super . destroyItem ( container , position , object ) ; }
public void copyNamesToClipboard ( String chosenNames , int numNames ) { NameUtils . copyNamesToClipboard ( chosenNames , null , numNames , false , this ) ; }
private void subscribeTopic ( String token ) { FirebaseMessaging . getInstance ( ) . subscribeToTopic ( "***REMOVED***" ) ; }
public PagerSlidingTabStrip getCodeTabStrip ( ) { return codeTabStrip ; }
public void enableSensorNotifications ( ) { this . io . writeCharacteristic ( Profile . UUID_CHAR_1_SENSOR , Protocol . ENABLE_SENSOR_DATA_NOTIFY , null ) ; }
public int getAttackDamage ( ) { return UNIT_MELEE_ATTACK_DAMAGE ; }
private void initToolbar ( ) { toolbar = findViewById ( R . id . toolbar ) ; setTitle ( getString ( R . string . loading_form ) ) ; setSupportActionBar ( toolbar ) ; }
public void onBuildHeaders ( List < Header > target ) { loadHeadersFromResource ( R . xml . pref_headers , target ) ; }
public void onPlayerStop ( SnapclientService snapclientService ) { Log . d ( TAG , "onPlayerStop" ) ; updateStartStopMenuItem ( ) ; if ( wrongSamplerateSnackbar != null ) wrongSamplerateSnackbar . dismiss ( ) ; }
public static synchronized void handleGlobalError ( final Context context , final String text ) { handleGlobalError ( context , new RRError ( text , null , new RuntimeException ( ) ) ) ; }
public void setQuantity ( float quantity ) { this . quantity = quantity ; }
public void onDrawerOpened ( View drawerView ) { ladeFaecher ( ) ; }
public void testIsTraditional ( ) { assertTrue ( "Test IsTraditional failed . " , Analysis . isTraditional ( strTraditional ) > 0 ) ; assertTrue ( "Test IsTraditional failed . " , Analysis . isTraditional ( strSimple ) <= 0 ) ; }
public void setFarnsworth ( int farnsworth ) { this . farnsworth = ( farnsworth > getWpm ( ) ) ? getWpm ( ) : farnsworth ; updateCharacterBreakAudioData ( ) ; updateWordBreakAudioData ( ) ; }
public void onFailure ( @ NonNull Call < LastFmArtist > call , @ NonNull Throwable throwable ) { callback . onLoadFailed ( new Exception ( throwable ) ) ; }
public long [ ] [ ] getHashRate ( ) { return HashRate ; }
public void onClick ( View view ) { if ( recordLocation ) { recordLocation = false ; GeotagButton . setBackgroundResource ( R . drawable . ic_geotag_disable ) ; } else { recordLocation = true ; GeotagButton . setBackgroundResource ( R . drawable . ic_action_name ) ; } }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseSongOffer . Builder getResponseSongOfferBuilder ( ) { bitField0_ | = 0x04000000 ; onChanged ( ) ; return getResponseSongOfferFieldBuilder ( ) . getBuilder ( ) ; }
public @ NonNull < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return modelClass . cast ( new ContactShareEditViewModel ( contactIds , contactRepository ) ) ; }
public void onCitySelected ( City city ) { cityId = city . id ; DistrictSelectionFragment districtSelectionFragment = DistrictSelectionFragment . with ( cityId , this ) ; districtSelectionFragment . setOnDistrictSelectedListener ( this ) ; replaceFragment ( districtSelectionFragment , "DistrictSelectionFragment" , true ) ; }
public void onStartListening ( ) { Log . i ( Helper . TAG , "Start tile synchronize" ) ; SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ; prefs . registerOnSharedPreferenceChangeListener ( this ) ; update ( ) ; }
private static void initVibrator ( ) { isVibratorOn = sharedPreferences . getBoolean ( VIBRATOR , true ) ; }
public void onTileLoaderException ( Throwable t ) { mListener . onImageViewDLMException ( t ) ; }
public static String getDimensionName ( int dimension ) { if ( dimension < 3 ) { return UnitHelper . getCharForNumber ( dimension + 23 ) ; } else { return UnitHelper . getCharForNumber ( dimension ) ; } }
public static void release ( final Context context ) { Kontalk . get ( ) . release ( ) ; Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_RELEASE ) ; context . startService ( i ) ; }
public void onServiceDisconnected ( ) { customTabsClient = null ; connection = null ; session = null ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseTranscoderStatus getDefaultInstanceForType ( ) { return de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseTranscoderStatus . getDefaultInstance ( ) ; }
public void notifyChildItemRemoved ( int groupPosition , int childPosition ) { mAdapter . notifyChildItemRemoved ( groupPosition , childPosition ) ; }
public void afterTextChanged ( Editable s ) { dialog . getActionButton ( DialogAction . POSITIVE ) . setEnabled ( FileUtils . isPathAccesible ( s . toString ( ) , sharedPrefs ) ) ; }
public static boolean runsTwentyFour ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . N ; }
public void clearComposition ( ) { animator . clearComposition ( ) ; assertEquals ( 0 . 0f , animator . getMaxFrame ( ) ) ; assertEquals ( 0 . 0f , animator . getMinFrame ( ) ) ; }
public String getID ( ) { return this . commentID ; }
public void getSelection_WhenHasSelection_ReturnNotEmptySet ( ) { addSampleValues ( ) ; selectSampleValues ( ) ; Set < String > selection = sut . getSelection ( ) ; assertThat ( selection . isEmpty ( ) , Matchers . not ( true ) ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { EntityOperation a1 = prev . get ( oldItemPosition ) ; EntityOperation a2 = next . get ( newItemPosition ) ; return a1 . id . equals ( a2 . id ) ; }
private void initWearNotification ( ) { binding . wearPrefs . setChecked ( mPrefs . isWearEnabled ( ) ) ; binding . wearPrefs . setOnClickListener ( mWearClick ) ; }
public int getChildCount ( int groupPosition ) { return mAdapter . getChildCount ( groupPosition ) ; }
public ReplaceState ( Parcel in ) { super ( ) ; in . readTypedList ( entries , EntryState . CREATOR ) ; }
public void setAlpha ( int alpha ) { paint . setAlpha ( alpha ) ; }
public com . coinomi . core . protos . Protos . DeterministicKey getDeterministicKey ( ) { if ( deterministicKeyBuilder_ == null ) { return deterministicKey_ ; } else { return deterministicKeyBuilder_ . getMessage ( ) ; } }
public AsyncWeatherForecastTask ( WeatherResponseListener listener ) { super ( ) ; this . listener = listener ; }
public void save ( ) { if ( mListener != null ) { mListener . onChanged ( ) ; } mIO . save ( ) ; }
public final boolean isOperator ( char c ) { return _operators . containsKey ( Character . valueOf ( c ) ) ; }
private void updateButtons ( ) { dlg . getButton ( DialogInterface . BUTTON_POSITIVE ) . setEnabled ( editText . getText ( ) . length ( ) > 0 ) ; dlg . getButton ( DialogInterface . BUTTON_NEGATIVE ) . setEnabled ( canDelete ) ; }
public void callBack ( @ NotNull String m , @ NotNull String link ) { new AraPopUps ( ) . textSearchResponse ( this , m , this , this , recyclerView ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { this . globalMenu = menu ; this . globalInflater = inflater ; menu . clear ( ) ; inflater . inflate ( R . menu . base_menu_no_requests , menu ) ; }
public int read ( char [ ] cbuf , int off , int len ) throws IOException { return internalInputStreamReader . read ( cbuf , off , len ) ; }
public WalletRealmObject getWallet ( ) { return wallet ; }
public void onDestroy ( ) { stopThread ( ) ; if ( receiver != null ) { unregisterReceiver ( receiver ) ; } }
public boolean onLongClick ( View v ) { if ( getSelectedItemCount ( ) == 0 ) { recentListActionModeUtil . startActionMode ( ) ; } toggleSelection ( position ) ; recentListActionModeUtil . updateActionMode ( getItemCount ( ) ) ; return true ; }
private Song getCurrentSong ( ) { PlayerState playerState = getPlayerState ( ) ; return playerState != null ? playerState . getCurrentSong ( ) : null ; }
public void run ( ) { RedditChangeDataIO . getInstance ( RedReader . this ) . runInitialReadInThisThread ( ) ; RedditChangeDataManager . pruneAllUsers ( ) ; }
public SubredditCanonicalId getKey ( ) { try { return getCanonicalId ( ) ; } catch ( final InvalidSubredditNameException e ) { throw new UnexpectedInternalStateException ( String . format ( Locale . US , "Cannot save subreddit '%s'" , url ) ) ; } }
public void onDisconnected ( CameraDevice device ) { checkIsOnCameraThread ( ) ; synchronized ( mStateLock ) { if ( mCamera == device || mCamera == null ) handleFailure ( "Disconnected" ) ; else Logging . w ( TAG , "onDisconnected from another CameraDevice" ) ; } }
public static void launchActivity ( Context context , Library library ) { Intent intent = new Intent ( context , LibraryDetailActivity . class ) ; intent . putExtra ( ARG_LIBRARY , ( Parcelable ) library ) ; context . startActivity ( intent ) ; }
public CustomWidthBottomSheetDialog ( @ NonNull Context context ) { super ( context ) ; }
public synchronized static SharedPreferences getSharedPreferences ( Context context ) { Context deviceProtectedContext = ContextCompat . createDeviceProtectedStorageContext ( context ) ; Context contextToUse = deviceProtectedContext != null ? deviceProtectedContext : context ; return contextToUse . getSharedPreferences ( WALLPAPER_PREFERENCES_NAME , Context . MODE_PRIVATE ) ; }
private void givenAndroidVersion ( String androidSdkVersion ) { AnalyticsManager . sAndroidVersion = androidSdkVersion ; }
public void run ( ) { delegate . didFailedLoadingFile ( FileLoadOperation . this ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; mActivity = ( Activity ) context ; }
public void onTextChanged ( CharSequence charSequence , int i , int i1 , int i2 ) { viewsInfo . restoreViews ( ) ; editText . requestFocus ( ) ; editText . removeTextChangedListener ( this ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { mSeekBarValue . setText ( progressToString ( progress ) ) ; if ( mOnSeekBarArrowsChangeListener != null ) mOnSeekBarArrowsChangeListener . onProgressChanged ( ( float ) progress * multiplier ) ; }
public boolean isPlaying ( ) { return player != null && player . getPlayWhenReady ( ) ; }
public void onBluetoothEvent ( BluetoothEvent event ) { updateRangefinder ( ) ; }
public int countSpacesAtStart ( ) { for ( int i = 0 ; i < length ; i ++ ) { if ( arr [ start + i ] != ' ' ) return i ; } return length ; }
private float getMaxFrame ( ) { if ( composition == null ) { return 0 ; } return maxFrame == Integer . MAX_VALUE ? composition . getEndFrame ( ) : maxFrame ; }
public void startRestoreTask ( String password ) { RestoreRequest request = new RestoreRequest ( ) ; request . file = mBackupFile ; request . password = password ; new RestoreTask ( this ) . execute ( request ) ; }
public PlayingQueueAdapter ( AppCompatActivity activity , ArrayList < Song > dataSet , int current , @ LayoutRes int itemLayoutRes , boolean usePalette , @ Nullable CabHolder cabHolder ) { super ( activity , dataSet , itemLayoutRes , usePalette , cabHolder ) ; this . current = current ; }
public void BrowsePost ( View v ) { if ( User . user_authentication == false ) { return ; } friend_management . BrowsePost ( contex , user_id ) ; }
public void onAppsChanged ( ) { for ( AppsChangedListener listener : listeners ) { listener . onAppsChanged ( ) ; } }
public Criteria getCriteriaForId ( DatabaseAdapter db , long id ) { Category c = db . getCategory ( id ) ; return Criteria . btw ( BlotterFilter . CATEGORY_LEFT , String . valueOf ( c . left ) , String . valueOf ( c . right ) ) ; }
public boolean onTouchEvent ( @ NonNull MotionEvent event ) { return mMixin . onTouchEvent ( event ) ; }
private void thenSpeedShouldBe ( double expected ) { assertEquals ( expected , mForecastData . getSpeed ( ) , 0 . 1 ) ; }
public OstRegisterDevice ( String userId , String tokenId , boolean forceSync , OstWorkFlowCallback callback ) { super ( userId , callback ) ; mTokenId = tokenId ; mForceSync = forceSync ; }
public void cancelAnimation ( ) { userActionsTaken . add ( UserActionTaken . PLAY_OPTION ) ; lottieDrawable . cancelAnimation ( ) ; computeRenderMode ( ) ; }
public void onFailure ( int statusCode , Client . Headers headers , int state ) { log . v ( TAG , "search | query = " , query , " | not found" ) ; callback . onState ( NOT_FOUND ) ; }
public Object execute ( Object o , Connection c ) { String connection = ( String ) o ; c . service . setClutch ( connection ) ; c . switchTo ( connection ) ; return null ; }
public void destroy ( ) { if ( bleBluetoothPool != null ) { bleBluetoothPool . destroy ( ) ; } }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { return mValues . get ( oldItemPosition ) . getId ( ) == workList . get ( newItemPosition ) . getId ( ) ; }
public void execute ( @ NonNull Interactor interactor ) { executorService . submit ( interactor ) ; }
private boolean shouldShowActivateMenuItem ( ) { Boolean isPremiumTheme = getIntent ( ) . getBooleanExtra ( IS_PREMIUM_THEME , false ) ; Boolean isCurrentTheme = getIntent ( ) . getBooleanExtra ( IS_CURRENT_THEME , false ) ; return ! isCurrentTheme && ! isPremiumTheme ; }
public static DBAdmissionPercentageMeta getInstance ( ) { return mInstance ; }
public void cut ( List < FileHolder > tbc ) { mOperation = Operation . CUT ; mClipboard = tbc ; }
public void onChange ( RealmResults < PodcastRealm > results ) { listener_ . notifyPodcastListChanged ( results ) ; }
public void addMessages ( List < Message > messages ) { for ( Message message : messages ) { state . newMessage ( message ) ; } }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; this . activity = ( Activity ) context ; }
public String toString ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSSoftware o : softs ) { strOut . append ( o . toString ( ) ) ; } return strOut . toString ( ) ; }
private static double log2 ( float number ) { return Math . log ( number ) / Math . log ( 2 ) ; }
public int compare ( JSONObject lhs , JSONObject rhs ) { return DeckNameComparator . instance . compare ( lhs . getString ( "name" ) , rhs . getString ( "name" ) ) ; }
public void updateOverlay ( Context context ) { initPref ( context ) ; if ( preferences . getBoolean ( "service_status" , false ) ) { makeOverlay ( batteryLevel ) ; } }
public ViewHolder ( View view ) { super ( view ) ; noteCard = ( NoteCard ) view ; }
public AbstractDeckTreeNode getNodeByDid ( long did ) { int pos = findDeckPosition ( did ) ; return getDeckList ( ) . get ( pos ) ; }
public void setCaption ( String caption ) { this . caption = caption ; }
private Runnable mRunnable = new Runnable ( ) { @ Override public void run ( ) { clockView . setTime ( System . currentTimeMillis ( ) ) ; mHandler . postDelayed ( mRunnable , 1000 ) ; } } ;
public void onDriveBackupSuccess ( DriveBackupSuccess event ) { dissmissProgressDialog ( ) ; Toast . makeText ( this , getString ( R . string . google_drive_backup_success , event . fileName ) , Toast . LENGTH_LONG ) . show ( ) ; }
public Project ( String title , String desc , String link , int drawablePath ) { this . title = title ; this . desc = desc ; this . link = link ; this . drawablePath = drawablePath ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser ) { * Back from Currencies fragment view , so we reload all currencies . * The user might have updated them . */ updateUI ( ) ; } }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { getApplication ( ) . getFirebaseComponent ( ) . inject ( this ) ; super . onCreate ( savedInstanceState ) ; }
public void testSafeToAddAuthToken12 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( wpcomAddress5 ) ) ) ; }
public static boolean isSearchInUrl ( ) { return getBoolean ( R . string . pref_key_search_url , DEF_SEARCH_IN_URL ) ; }
public int getNoOfQuestions ( ) { return this . questions . length ; }
public void setPublished ( String published ) { this . published = StringUtils . notNullStr ( published ) ; }
public FlowControlThread ( ) { keep = new AtomicBoolean ( true ) ; }
public void onConnectionFailed ( ConnectionResult connectionResult ) { }
public void onCheckedChanged ( CompoundButton compoundButton , boolean b ) { setDeleteSelected ( ) ; }
public String getMatchBird ( int id ) throws IOException { String response = requestBirdDetails ( id ) ; return response ; }
public tagManager open ( ) throws SQLException { dbHelper = new tagged ( context ) ; database = dbHelper . getWritableDatabase ( ) ; return this ; }
public void surfaceChanged ( SurfaceHolder holder , int format , int width , int height ) { if ( _ui != null ) _ui . setSurfaceSize ( width , height ) ; }
public static boolean isLoadCryptedRecords ( ) { return ( BuildConfig . DEBUG && IS_LOAD_CRYPTED_RECORDS ) ; }
public void testMinimalEncoder1 ( ) throws Exception { verifyMinimalEncoding ( "A" , "ALPHANUMERIC ( A ) , TERMINATOR ( ) " , null , false ) ; }
public void onClick ( View view ) { notifyDataSetChanged ( ) ; Context context = getContext ( ) ; if ( context instanceof MainActivity ) { MainActivity activity = ( MainActivity ) context ; activity . requestDeleteNote ( getItem ( position ) ) ; } }
public Rime ( Context context , boolean full_check ) { init ( context , full_check ) ; self = this ; }
public String getCarNumber ( ) { return getLine ( ) + " [ " + getCarNo ( ) + " ] " ; }
public void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; drawDraggedStone ( ) ; instructionMessage = null ; if ( playerComputer . isTurn ( ) ) { computerPlays ( ) ; } }
public Review ( Integer rating , String comment , Integer version , Long date ) { this . rating = rating ; this . comment = comment ; this . version = version ; this . date = date ; }
public FormHierarchyPage clickOnForm ( String formName ) { onData ( withRowString ( DatabaseFormColumns . DISPLAY_NAME , formName ) ) . perform ( click ( ) ) ; return new FormHierarchyPage ( formName , rule ) ; }
public void initInterstitialAd ( ) { mInterstitialAd . setAdUnitId ( "ca - app - pub - 4231737586492141/1610663756" ) ; requestNewInterstitial ( ) ; }
public static long convertToSystemTime ( String datetime ) { return convertToSystemTime ( datetime , "Europe/Amsterdam" ) ; }
public FigureType getRotatedFigure ( ) { return FigureType . L_SECOND_FIGURE ; }
public static double mean ( ArrayList < Double > listData ) { double sum = 0 ; for ( Double data : listData ) { sum += data ; } return sum / listData . size ( ) ; }
private GeoPointMapWidget createWidget ( FormEntryPrompt prompt ) { return new GeoPointMapWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) , waitingForDataRegistry , geoDataRequester ) ; }
public void minusTextSize ( View v ) { webviewclient . minusTextSize ( ) ; }
public SquareLayout ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; }
public void setUp ( ) { project = ProjectBuilder . builder ( ) . build ( ) ; dependencyTask = project . getTasks ( ) . create ( "getDependency" , DependencyTask . class ) ; }
public synchronized void setTotalSize ( long totalSize ) { this . totalSize = totalSize ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_settings ) ; setupToolbarWithBack ( ) ; setupSettingsFragment ( ) ; }
public int getPosition ( @ NonNull Long key ) { final RecyclerView . ViewHolder viewHolder = recyclerView . findViewHolderForItemId ( key ) ; return viewHolder == null ? NO_POSITION : viewHolder . getLayoutPosition ( ) ; }
public void onConfigureFailed ( CaptureSession session ) { handleFailure ( "Error while creating capture session" ) ; }
private void onSaveAttachments ( TupleMessageEx message ) { LocalBroadcastManager lbm = LocalBroadcastManager . getInstance ( context ) ; lbm . sendBroadcast ( new Intent ( ActivityView . ACTION_STORE_ATTACHMENTS ) . putExtra ( "id" , message . id ) ) ; }
public void onClick ( View v ) { bottomSheet ( selectedCategory ) ; }
public UsbSerial ( SettingsActivity handler ) { this . handler = handler ; }
public void run ( ) { updateProgress ( ) ; if ( ! mReleased ) { AndroidCommon . UI_THREAD_HANDLER . postDelayed ( this , 250 ) ; } }
public com . google . protobuf . AnyOrBuilder getPubKeyOrBuilder ( ) { if ( pubKeyBuilder_ != null ) { return pubKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return pubKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : pubKey_ ; } }
public ChildZoneBuilder setZoneNumber ( @ LowEmissionZoneNumbers . Color int zoneNumber ) { mZoneNumber = zoneNumber ; return this ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newIngredientDetailFragmentComponent ( new IngredientsDetailFragmentModule ( this , savedInstanceState ) ) . inject ( this ) ; componentFactory = null ; }
public void onClick ( DialogInterface dialog , int id ) { Intent intent = new Intent ( HordeSelectActivity . this , HordeSelectActivity . class ) ; startActivity ( intent ) ; return ; }
public UploadObject setFileUri ( Uri fileUri ) { this . fileUri = fileUri ; return this ; }
public void run ( ) { Intent mainIntent = new Intent ( first . this , MainActivity . class ) ; startActivity ( mainIntent ) ; }
public RedditSubreddit asSubreddit ( ) throws InstantiationException , IllegalAccessException , InterruptedException , IOException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditSubreddit . class ) ; }
public BookBuilder setRating ( String rating ) { this . rating = rating ; return this ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mMedicalAttentionListPresenter . loadAllMedicalAttentions ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { getApplication ( ) . getFirebaseComponent ( ) . inject ( this ) ; super . onCreate ( savedInstanceState ) ; determineIfFirebaseDatabaseLoaded ( ) ; }
private void setRawMode ( CaptureRequest . Builder builder ) { if ( want_raw ) { builder . set ( CaptureRequest . STATISTICS_LENS_SHADING_MAP_MODE , CaptureRequest . STATISTICS_LENS_SHADING_MAP_MODE_ON ) ; } }
private void loadSubredditIcon ( ) { LoadSubredditIcon . loadSubredditIcon ( mExecutor , new Handler ( ) , mRedditDataRoomDatabase , subredditName , mRetrofit , iconImageUrl -> { iconUrl = iconImageUrl ; displaySubredditIcon ( ) ; loadSubredditIconSuccessful = true ; } ) ; }
public void onViewRecycled ( RecyclerView . ViewHolder holder ) { super . onViewRecycled ( holder ) ; if ( holder instanceof ViewHolder ) { DemoGlideHelper . clear ( ( ( ViewHolder ) holder ) . image ) ; } }
public void readParams ( AbstractSerializedData stream , boolean exception ) { geo_point = InputGeoPoint . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfMagicMissile_Info ) ; }
public Builder description ( String description ) { this . description = description ; this . descriptionRes = 0 ; return this ; }
public int getCurrentAdIndexInAdGroup ( ) { return player . getCurrentAdIndexInAdGroup ( ) ; }
private void handleError ( Throwable throwable ) { getMvpView ( ) . setProgress ( false ) ; getMvpView ( ) . showError ( mErrorHandler . getMessage ( throwable ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . business_list_menu , menu ) ; return true ; }
public Builder setTitleTextColor ( @ ColorInt int color ) { bottomSheet . titleTextColor = color ; return this ; }
public void putDrawable ( Drawable drawable , TestState state ) { this . drawableMap . put ( state , drawable ) ; }
public int getItemViewType ( final int _position ) { return mMainFiles . get ( _position ) . mFileType . getValue ( ) ; }
public static LXCLogger getLogger ( String from ) { from = String . format ( "%16s" , from ) ; return new LXCLogger ( printer , from ) ; }
public static TimeCount getInstance ( Context context ) { if ( instance == null ) { instance = new TimeCount ( context ) ; } return instance ; }
public void next ( ) throws RemoteException { mService . get ( ) . gotoNext ( true ) ; }
private void broadcast_completion ( ) { Intent intent = new Intent ( BROADCAST_ID ) ; LocalBroadcastManager . getInstance ( getApplicationContext ( ) ) . sendBroadcast ( intent ) ; }
public void onReceiveConnections ( Connections connections ) { mConnections = connections ; notifyDataSetChanged ( ) ; }
public Tracker provideAndroidTracker ( Context context ) { return Analytics . getTracker ( Analytics . GAnalyticsTracker . ANDROID_TRACKER , context ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( path ) ; dest . writeInt ( index ) ; dest . writeInt ( total ) ; dest . writeInt ( size ) ; dest . writeByteArray ( bytes ) ; }
public static DBAdmissionPercentageMeta setupInstance ( Context context ) { if ( mInstance == null ) mInstance = new DBAdmissionPercentageMeta ( context ) ; return mInstance ; }
private BroadcastReceiver resetReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { startMenu . setSelection ( 0 ) ; } } ;
public Measure ( Point _point , double _horizDir , double _zenAngle , double _distance ) { this ( _point , _horizDir , _zenAngle , _distance , 0 . 0 ) ; }
public static Uri getFileUri ( @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( ContentResolver . SCHEME_FILE ) . path ( path ) . build ( ) ; }
public MinMax ( int min , int max ) { mMin = min ; mMax = max ; }
public DungeonTilemap ( Level level , String tiles ) { super ( tiles , new TextureFilm ( tiles , SIZE , SIZE ) ) ; DungeonTilemap . level = level ; map ( level . map , level . getWidth ( ) ) ; }
public static int getNotificationLEDColor ( Context context ) { return getInt ( context , "pref_notification_led_color" , context . getResources ( ) . getInteger ( R . integer . pref_default_notification_led_color ) ) ; }
public void onDestroy ( ) { log . v ( TAG , "Fragment destroyed" ) ; loaded = false ; thread . interrupt ( UP ) ; }
public StringWidget createWidget ( ) { return new StringWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" , readOnlyOverride ) ) ; }
public QuranAyah getMinAyah ( ) { return new QuranAyah ( minSura , minAyah ) ; }
public Coordinate ( Parcel in ) { super ( ) ; row = in . readInt ( ) ; col = in . readInt ( ) ; }
public void clearPlaylist ( ) { mCurrentList . clear ( ) ; updateArtistTrackBuckets ( ) ; mRandom = RANDOMSTATE . RANDOM_OFF ; mRepeat = REPEATSTATE . REPEAT_OFF ; mCurrentPlayingIndex = - 1 ; mPlaybackServiceStatusHelper . updateStatus ( ) ; stop ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . eziketobenna . popularmovies" , appContext . getPackageName ( ) ) ; }
public String createNotificationText ( final Context context , boolean goingDown ) { return mLinphoneCallState . createNotificationText ( context , getContactName ( ) , goingDown ) ; }
public IntegerWidget createWidget ( ) { return new IntegerWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" , readOnlyOverride ) ) ; }
public void setTitle ( int titleId ) { TextView textTitle = ( TextView ) findViewById ( R . id . textToolbarTitle ) ; if ( textTitle != null && titleId != 0 ) { mTitle = getString ( titleId ) ; textTitle . setText ( titleId ) ; } }
private void initChangeUnitsButton ( ) { btnChangeUnits . setText ( Prefs . getInstance ( this ) . getUnitTypePref ( ) == Units . IMPERIAL ? R . string . imperial : R . string . metric ) ; }
public InternalRecyclerListener ( RecyclerViewRecyclerEventDistributor distributor ) { super ( ) ; mRefDistributor = new WeakReference <> ( distributor ) ; }
public Option ( Context context ) { settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; editor = settings . edit ( ) ; }
public OwnerEntities ( List < UserEntity > userEntities , List < CommunityEntity > communityEntities ) { this . userEntities = userEntities ; this . communityEntities = communityEntities ; }
public QuranPageLayout getLeftPage ( ) { return mLeftPage ; }
public Berserker ( Bitmap shipBitmap , Bitmap btmHit , boolean isWorthEnemyDestroyedPoint ) { super ( shipBitmap , btmHit , EnemyType . BERSERKER , isWorthEnemyDestroyedPoint ) ; hs = new HeatSinker ( ) ; }
public PersonEntity getPerson ( long id ) { DatabaseHelper helper = new DatabaseHelper ( contex ) ; RuntimeExceptionDao < PersonEntity , String > simpleDao = helper . getPersonSimpleDataDao ( ) ; return simpleDao . queryForId ( String . valueOf ( id ) ) ; }
public void setLastDownloadError ( String lastDownloadItem , int lastDownloadError ) { mPerInstallationPrefs . edit ( ) . putInt ( QuranDownloadService . PREF_LAST_DOWNLOAD_ERROR , lastDownloadError ) . putString ( QuranDownloadService . PREF_LAST_DOWNLOAD_ITEM , lastDownloadItem ) . apply ( ) ; }
public void stopTimer ( ) { int timeForGame = ( int ) ( System . currentTimeMillis ( ) - timeAtStart ) / 1000 ; if ( timeForGame > stats [ INDEX_LONG_RUN ] ) { stats [ INDEX_LONG_RUN ] = timeForGame ; } }
public void handleResponse ( HtspMessage response ) { data = response . getByteArray ( "data" ) ; notifyAll ( ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { time = dataInputStream . readInt ( ) ; }
public void setAddress ( String mAddress ) { this . mAddress = mAddress ; }
public void onReceive ( Context context , Intent intent ) { if ( Device . getNetworkType ( context ) . equals ( JobRequest . NetworkType . UNMETERED ) ) { FilesSyncHelper . restartJobsIfNeeded ( ) ; } }
public String getToolbarName ( ) { if ( createCluster ) return getString ( R . string . title_activity_cluster_map_contribute_edit ) ; else if ( master != null ) return master . name ; else return null ; }
public void loadConversation ( Uri threadUri ) { openConversation ( threadUri ) ; }
public static Collection < TetroidTag > getTagsValues ( ) { return Instance . mTagsMap . values ( ) ; }
public View getView ( int position , View view , ViewGroup viewGroup ) { return gameService . getTileAt ( position ) ; }
private void toggleWhiteboard ( ReviewerForMenuItems reviewer ) { reviewer . toggleWhiteboard ( ) ; assumeTrue ( "Whiteboard should now be enabled" , reviewer . mPrefWhiteboard ) ; super . advanceRobolectricLooper ( ) ; }
private void setErrNameValid ( ) { mTvNameNone . setVisibility ( View . GONE ) ; mTvNameAlready . setVisibility ( View . GONE ) ; mTvLengthErr . setVisibility ( View . VISIBLE ) ; mTvPwMatch . setVisibility ( View . GONE ) ; }
public String getSelection ( ) { return mSelectedItem != null ? mSelectedItem . label : null ; }
public static PendingIntent getNotificationIntentActivity ( Context context ) { return getPendingIntent ( context , ACTION_ACTIVITY ) ; }
public Result ( MasterKey key , Slot slot , boolean repaired ) { _key = key ; _slot = slot ; _repaired = repaired ; }
public static void trackBlockEditorEvent ( String event , SiteModel site , Map < String , Object > properties ) { if ( event . equals ( "insertBlock" ) ) { AnalyticsUtils . trackWithSiteDetails ( Stat . EDITOR_BLOCK_INSERTED , site , properties ) ; } }
public int hashCode ( ) { return Objects . hash ( restoMenu , restoChoice , feedRestoKind ) ; }
public void setAlpha ( @ IntRange ( from = 0 , to = 255 ) int alpha ) { this . alpha = alpha ; }
public String toPlainString ( ) { return mAmount . setScale ( mCurrency . getDefaultFractionDigits ( ) , ROUNDING_MODE ) . toPlainString ( ) ; }
public String getStatusText ( ) { return null ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; eventEditPresenter . attachView ( eventEditView ) ; }
public MessageBoardCard ( View v ) { super ( v ) ; unreadCounter = ( TextView ) v . findViewById ( R . id . card_button_num ) ; v . setOnClickListener ( this ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mAdMob = null ; mEnhanceIOLine = null ; mViewImage = null ; }
public List < MovieVideoEntity > getTrailers ( ) { return trailers ; }
public ScrollListenerAdapter ( DiscreteScrollView . ScrollListener < T > adaptee ) { this . adaptee = adaptee ; }
public ProfileDrawerItem withIcon ( Drawable icon ) { this . icon = icon ; return this ; }
public static RecyclerSupport removeFrom ( RecyclerView view ) { RecyclerSupport support = ( RecyclerSupport ) view . getTag ( R . id . item_click_support ) ; if ( support != null ) { support . detach ( view ) ; } return support ; }
public PersonDebt loadInBackground ( ) { return mDebtsRepository . getPersonDebt ( mDebtId ) ; }
public void addTeachers ( ArrayList < STeacher > teachers ) { this . teachers = teachers ; }
public void onAdLoaded ( ) { Log . d ( "MA Interstitial Ad Test" , "Add Finished Loading" ) ; }
public boolean onStopJob ( JobParameters params ) { AppLog . i ( AppLog . T . READER , "reader post service > stopped" ) ; jobFinished ( params , false ) ; return false ; }
private BroadcastReceiver avatarUpdatedListener = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( intent . getStringExtra ( "jid" ) . equals ( jid . toString ( ) ) ) { fillAvatar ( ) ; } } } ;
public ReturnObject doInBackground ( Void . . . voids ) { return new ReturnObject ( getAccessToken ( mContext . get ( ) ) ) ; }
private void requery ( ) { mData = DBAdmissionPercentageMeta . getInstance ( ) . getAllItems ( ) ; }
public int getRangeRepeatCount ( ) { return mRangeRepeatInfo . getRepeatCount ( ) ; }
public void onClick ( View v ) { imageShown = false ; zoom = true ; doLoad ( contentUrl ) ; findViewById ( R . id . hq ) . setVisibility ( View . GONE ) ; }
public void onLoadFinished ( Loader < String [ ] > loader , String [ ] data ) { recyclerView . setAdapter ( new StickersAdapter ( getActivity ( ) , glideRequests , data ) ) ; }
private AppDatabase getMigratedRoomDatabase ( ) { AppDatabase db = Room . databaseBuilder ( context , AppDatabase . class , TEST_DATABASE_NAME ) . addMigrations ( DatabaseMigration . getMigrations ( ) ) . build ( ) ; helper . closeWhenFinished ( db ) ; return db ; }
public void showTitle ( String title ) { if ( ! isDetached ( ) ) { ( ( LocationDetailActivity ) getActivity ( ) ) . collapsingToolbar . setTitle ( title ) ; } }
public static synchronized VolleySingleton getInstance ( Context context ) { if ( sVolleySingleton == null ) { sVolleySingleton = new VolleySingleton ( context ) ; } return sVolleySingleton ; }
public void onCopyToClipboard ( View view ) { Common . copyToClipboard ( mVB . getText ( ) . toString ( ) , this ) ; }
public Double getApparentTemperatureMaxTime ( ) { return apparentTemperatureMaxTime ; }
public void release ( ) { if ( Objects . nonNull ( internalPlayer ) ) { try { internalPlayer . release ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
public void onServiceDisconnected ( final ComponentName arg0 ) { Lg . i ( mLogtag , "onServiceDisconnected" ) ; mService = null ; }
public void onMonthChanged ( MaterialCalendarView widget , CalendarDay date ) { updateTitle ( dateFormat , toolbar ) ; }
public final void unDimBackground ( ) { Tool . invisibleViews ( getBackground ( ) ) ; }
public final int getStyle ( int column ) { return mStyle [ column ] ; }
public int getCurrenciesPrecision ( ) { String precision = generalPrefs . getString ( "pref_currencies_precision" , "simple" ) ; return precision . equals ( "advanced" ) ? PRECISION_ADVANCED : PRECISION_SIMPLE ; }
public void onPause ( ) { super . onPause ( ) ; dataSource . saveNameListState ( listId , listInfo , settings ) ; }
public boolean getHund ( ) { return this . _hund ; }
public Integer getValue ( ) { return value ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mPresenter = createPresenter ( ) ; mPresenter . attachView ( ( V ) this ) ; }
public void onLibraryDisciplineChanged ( String discipline , boolean isChecked ) { if ( ! restoring ) { filterModel . setLibraryDiscipline ( discipline , isChecked ) ; updateSearchSettingsButtonState ( ) ; filterLibraryCards ( ) ; } }
public void showDialog ( int resId ) { mPatientDashboardActivity . showProgressDialog ( resId ) ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "do automatic take picture" ) ; takePicture ( false ) ; }
public boolean iconPressed ( int sx , int sy ) { return isTap ( ) && inRange ( sx , x , sx + mView . iconSize ) && inRange ( sy , y , sy + mView . iconSize ) ; }
public void onStop ( ) { super . onStop ( ) ; Log . d ( TAG , "OnStop" ) ; }
public List < String > getLinks ( ) { List < String > links = new ArrayList <> ( mImages . size ( ) ) ; for ( Image i : mImages ) { links . add ( i . link ) ; } return links ; }
public void onStartTrackingTouch ( SeekBar seekBar ) { initialProgress = seekBarTTSPitch . getProgress ( ) ; isTouchTracking = true ; }
public void handlePlaybackEvent ( PlaybackEvent event ) { Log . i ( TAG , PlaybackEvent . class . getSimpleName ( ) + " : " + event . type . name ( ) ) ; }
public void onAnimationEnd ( Animation animation ) { mItemPanel . setVisibility ( View . INVISIBLE ) ; }
public String info ( ) { return "0 = landscape , 1 = portrait , 2 = sensor" ; }
public static int getInfoTextColor ( ) { return textInfo [ Settings . colorMode ] ; }
private void changeISO ( int change ) { mainUI . changeSeekbar ( R . id . iso_seekbar , change ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { document = Document . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
private void givenNewHumidity ( String newHumidity ) { forecast . setHumidity ( newHumidity ) ; }
public FormMapPage clickSaveAndExitBackToMap ( ) { return clickSaveAndExit ( new FormMapPage ( ) ) ; }
public void setInfo ( TLRPC . User user ) { if ( user != null ) { setInfo ( user . id , user . first_name , user . last_name , false , null ) ; drawDeleted = UserObject . isDeleted ( user ) ; } }
public NewsHeaderBusinessModel convert ( ) { return new NewsHeaderBusinessModel ( getTitle ( ) , getSource ( ) , getPublicationDate ( ) , getServerId ( ) ) ; }
public XYStepMode getDomainStepMode ( ) { return domainStepModel . getMode ( ) ; }
private void addEventsToView ( ScheduleList lst ) { for ( ClassEvent e : lst ) { addEvent ( e ) ; } }
public void setPrecipIntensityMax ( Integer precipIntensityMax ) { this . precipIntensityMax = precipIntensityMax ; }
public EighthActivityItem createFromParcel ( Parcel in ) { return new EighthActivityItem ( in ) ; }
public Events [ ] newArray ( int size ) { return new Events [ size ] ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_chart , container , false ) ; }
public Number getRangeOrigin ( ) { return calculatedRangeOrigin ; }
private void focusAnswer ( ) { SoftKeyboardUtils . showSoftKeyboard ( answerText ) ; }
private BroadcastReceiver tempHideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { tempHideTaskbar ( false ) ; } } ;
public StaticPlayingQueue ( ) { songs = new ArrayList <> ( ) ; queue = new ArrayList <> ( ) ; originalQueue = new ArrayList <> ( ) ; shuffleMode = SHUFFLE_MODE_NONE ; currentPosition = INVALID_POSITION ; songsIsStale = false ; }
public void windowShowing ( boolean show ) { mWindowShowing = show ; }
public void onErrorResponse ( ) { ToastUtil . error ( "Failed to fetch patient data" ) ; }
private void autonomousShared ( ) { robot . getMovement ( ) . openGrabber ( true ) ; sleep ( 1000 ) ; robot . getMovement ( ) . openSwivel ( true ) ; }
private void thenShouldBindPreference ( final String preferenceName ) { new Verifications ( ) { { mPreferenceFragment . findPreference ( preferenceName ) ; } } ; }
public void onAnimationEnd ( Animator animation ) { recordDroppedFrames ( ) ; }
public void handle ( ) { showGameOverOverlay ( ) ; }
public void insertAll ( List < Event > entities ) { crudHelper . insertAll ( entities ) ; }
public NetworkResponseRunnable ( Queue < NetworkResponse > incomingQueue , Model model , INetworkView networkView ) { this . incomingQueue = incomingQueue ; this . model = model ; this . networkView = networkView ; }
public void testObjectEquals ( ) { ComputerParcelable computerParcelable = new ComputerParcelable ( "com1" , "1" ) ; Object object = new ComputerParcelable ( "com1" , "1" ) ; assertTrue ( computerParcelable . equals ( object ) == true ) ; }
public boolean intersects ( Number minX , Number maxX , Number minY , Number maxY ) { return xLineRegion . intersects ( minX , maxX ) && yLineRegion . intersects ( minY , maxY ) ; }
public void testObjectNotEqualsName ( ) { ComputerParcelable computerParcelable = new ComputerParcelable ( "com1" , "1" ) ; Object object = new ComputerParcelable ( "com2" , "1" ) ; assertTrue ( computerParcelable . equals ( object ) == false ) ; }
public static boolean isOnline ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo netInfo = cm . getActiveNetworkInfo ( ) ; return netInfo != null && netInfo . isConnected ( ) ; }
public ColorStateList getSecondaryProgressTintList ( ) { logProgressBarTintWarning ( ) ; return super . getSecondaryProgressTintList ( ) ; }
private void loadUrl ( ) { setWebSettings ( true ) ; mWebView . loadUrl ( mItem . getUrl ( ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . diagnostics , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void registerActorFactory ( String name , ActorFactory factory ) { mFactoryForName . put ( name , factory ) ; }
private void filterByUncompleteChecklists ( ) { initNotesList ( new Intent ( Constants . ACTION_SEARCH_UNCOMPLETE_CHECKLISTS ) ) ; }
public EventsResponse ( ArrayList < Events > dayOneEvents , ArrayList < Events > dayTwoEvents ) { this . dayOneEvents = dayOneEvents ; this . dayTwoEvents = dayTwoEvents ; }
private void showProgress ( int n ) { if ( observer != null ) { observer . onProgress ( n ) ; } }
public void testEncodeIllegalCharacters ( ) throws WriterException { new EAN8Writer ( ) . encode ( "96385abc" , BarcodeFormat . EAN_8 , 0 , 0 ) ; }
public static String addressSplitToGroupsMultiline ( final NxtFamilyAddress address ) { return addressSplitToGroups ( address ) ; }
public void onInitializeAccessibilityNodeInfo ( View host , AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( host , info ) ; info . setClassName ( "android . widget . ImageButton" ) ; info . setClickable ( true ) ; info . setLongClickable ( true ) ; }
public void onError ( Error error ) { mNewsDetailsView . hideProgress ( ) ; }
private String createQuote ( ) { if ( mQuoteText == null ) { mQuoteText = String . format ( FORMAT_QUOTE , Html . fromHtml ( mParentText ) . toString ( ) . trim ( ) . replaceAll ( PARAGRAPH_BREAK_REGEX , PARAGRAPH_QUOTE ) ) ; } return mQuoteText ; }
static public void titleScene ( ) { Game . switchScene ( TitleScene . class ) ; }
public void onClick ( View v ) { String path = mCurrentDirectory . getAbsolutePath ( ) ; setManualInputPath ( path ) ; }
private void switchTab ( int position ) { Log . d ( TAG , "switchTab : " + position ) ; if ( position == 1 ) { openDrawFragment ( ) ; } else { openCropFragment ( ) ; } }
public ChaosCrystal ( ) { imageFile = "items/artifacts . png" ; image = CHAOS_CRYSTALL_IMAGE ; }
public void collected ( ) { bodyDst . set ( - screenWidth , 0 , - screenWidth + width , 0 ) ; canDraw = false ; populationCounter . restartCount ( ) ; }
public void remove ( String syncId , boolean isGroupSchedule ) { Observable . concat ( getDeleteSyncIdObservable ( syncId , isGroupSchedule ) , isGroupSchedule ? getCacheGroupObservable ( false ) : getCacheEmployeeObservable ( false ) ) . doOnError ( this : : onError ) . subscribe ( ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfBlink_Info ) ; }
public Set < IdentityKey > getKeysWithTrust ( FingerprintStatus status ) { return axolotlStore . getContactKeysWithTrust ( account . getJid ( ) . toBareJid ( ) . toPreppedString ( ) , status ) ; }
public void applyTheme ( Activity activity , boolean isPreferences ) { int selectedTheme = getSelectedTheme ( isPreferences ) ; activity . setTheme ( selectedTheme ) ; Log . d ( "Engine_Driver" , "applyTheme : " + selectedTheme ) ; theme = activity . getTheme ( ) ; }
public static int getStartLength ( ) { return get ( START_LENGTH , Constants . Task . START_IN_METERS ) ; }
public void onStateChanged ( @ NonNull View bottomSheet , int newState ) { if ( newState == BottomSheetBehavior . STATE_EXPANDED ) { bottomSheetDetailsBehavior . setState ( BottomSheetBehavior . STATE_HIDDEN ) ; } }
public void setTitle ( CharSequence title , CharSequence subtitle ) { }
public Long getChannelNumber ( ) { return channelNumber ; }
public void onClick ( View v ) { intent . putExtra ( BaseWearGridActivity . MODE , BaseWearGridActivity . INFO ) ; mContext . startActivity ( intent ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "org . techplayer . toolbox . twlang" , appContext . getPackageName ( ) ) ; }
public MergePatientsRecycleViewAdapter ( Activity mContext , MachingPatientsContract . Presenter presenter , List < Patient > patientList , Patient patient ) { this . newPatient = patient ; this . patientList = patientList ; this . mContext = mContext ; this . mPresenter = presenter ; }
public void onErrorResponse ( VolleyError error ) { SparkleHelper . logError ( error . toString ( ) ) ; queryPostingRightsCallback ( ) ; }
public Context provideAppContext ( ) { return TravisApp . getAppContext ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . removeHandler ( mHandler ) ; }
public UpdateComfortTask ( DeviceObject deviceObject , OnProcessFinish callback , Context context , String feedback ) { super ( context , callback ) ; this . deviceObject = deviceObject ; this . feedback = feedback ; }
public static OverlayViewManager getInstance ( ) { if ( INSTANCE . applicationContext == null ) { throw new IllegalStateException ( "OverlayViewManager is not initialized . Please call init ( Application ) . " ) ; } return INSTANCE ; }
private void sendMessage ( Info toReturn ) { mLastObject = toReturn ; }
public void onReceive ( Context context , Intent intent ) { if ( CLOSE_FULLY_AUTOMATIC_UPDATE . equals ( intent . getAction ( ) ) ) { if ( mAutoUpdatePreference != null ) { mAutoUpdatePreference . setChecked ( false ) ; } } }
public static void sendFeedBack ( Context c ) { new EasyFeedback . Builder ( c ) . withEmail ( c . getString ( R . string . feedback_email ) ) . withSystemInfo ( ) . build ( ) . start ( ) ; }
public Object getAddressLine2 ( ) { return addressLine2 ; }
public PushNotificationDialog ( TopicController controller ) { mTopicPreference = controller . getPreference ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "exa . lnx . d" , appContext . getPackageName ( ) ) ; }
public void testDemo ( View view ) { mAccountNameEdit . setText ( "admin @ ekylibre . org" ) ; mAccountPasswordEdit . setText ( "12345678" ) ; mAccountInstanceEdit . setText ( "http : signIn ( view ) ; }
public static void setTV ( View parent , @ IdRes int textViewId , String string ) { TextView tv = ( TextView ) parent . findViewById ( textViewId ) ; tv . setText ( string ) ; }
public AboutBuilder addSkypeLink ( int phone ) { return addSkypeLink ( context . getString ( phone ) ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_bookmark , menu ) ; }
public ArticleTextExtractor setPositive ( String positiveStr ) { this . positiveStr = positiveStr ; POSITIVE = Pattern . compile ( positiveStr ) ; return this ; }
public EventListTouchHelperCallback ( EventListAdapter adapter ) { this . adapter = adapter ; }
public void rotateImageRight ( ) { imageUtil . rotateImage ( this , FLIP_ANGLE ) ; }
public int getItemCount ( ) { return inventory . size ( ) ; }
private String getAuthorName ( ) { return StringUtils . notNullStr ( authorName ) ; }
public ContactEditViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ContactEditViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_editable_contact , parent , false ) , locale ) ; }
public void setWeatherKey ( String str ) { prefs . edit ( ) . putString ( Constants . OWM_KEY , str ) . apply ( ) ; }
private void setToggleIconState ( boolean isRunning ) { if ( mToggle != null && ! isFinishing ( ) ) { mToggle . setImageResource ( isRunning ? R . drawable . ic_brightness_2_black_24dp : R . drawable . ic_brightness_7_black_24dp ) ; } }
public PeriodPreference ( Context context ) { super ( context ) ; }
public void testNonInitialised ( ) { Request < RestoMenu > request = new DayRequest ( RuntimeEnvironment . application ) ; request . execute ( ) ; }
public void setDraftId ( long draftId ) { this . draftId = draftId ; }
public boolean onPreferenceClick ( Preference preference ) { copyDatabase ( getContext ( ) ) ; return true ; }
public void onServicesDiscovered ( BluetoothGatt gatt , int status ) { if ( status == BluetoothGatt . GATT_SUCCESS ) { broadcastUpdate ( ACTION_GATT_SERVICES_DISCOVERED ) ; } else { Log . w ( TAG , "onServicesDiscovered received : " + status ) ; } }
public void onClick ( View view ) { openFragment ( TableFragment . class ) ; }
public void rebuildRunningBalances ( ) { List < Account > accounts = em . getAllAccountsList ( ) ; for ( Account account : accounts ) { rebuildRunningBalanceForAccount ( account ) ; } }
public void onClick ( String topic , TopicAdapter . TopicAdapterViewHolder vh ) { ( ( Callback ) getActivity ( ) ) . onItemSelected ( InterviewEntry . buildTopic ( topic ) ) ; mPosition = vh . getAdapterPosition ( ) ; }
public void addFragment ( Fragment fragment , String title ) { mfragmentList . add ( fragment ) ; mfragmentTitleList . add ( title ) ; }
public static boolean getReturnFlag ( int mission_no ) { return ! ( mission_no == 33 || mission_no == 34 || mission_no > 130 ) ; }
private void refreshExplorePosts ( ) { dataStore . requestExploreFeeds ( this ) ; }
public static boolean ipv6Input ( ) { return gPrefs . getBoolean ( IP6_INPUT , false ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mDatabase . child ( "eventsData/" + currentEvent . getKey ( ) + "/foodAndDrinks" ) . removeEventListener ( equipmentListener ) ; }
public void onSearchExpand ( ) { searching = true ; listView . setEmptyView ( searchEmptyView ) ; }
public PaymentItemHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_payment , parent , false ) ; return new PaymentItemHolder ( view ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_3 . class ) ; startActivity ( i ) ; }
public void loadFrom ( Collection < String > strings ) { this . strings = new HashSet ( strings ) ; }
public static String formatForAccessibility ( final Context context , final Date date ) { if ( date == null ) { return "" ; } return DateFormat . getDateInstance ( DateFormat . LONG ) . format ( date ) ; }
public String tileDesc ( ) { return Game . getVar ( R . string . WaterOfHealth_Info ) ; }
private void restoreScaleButton ( ) { if ( isDark ) { zoomOut . setImageResource ( R . drawable . ic_arrow_upward_white_24dp ) ; } else { zoomOut . setImageResource ( R . drawable . ic_arrow_upward_black_24dp ) ; } }
public Gear ( int id , String containerManufacturer , String containerSerial ) { this . containerManufacturer = containerManufacturer ; this . containerSerial = containerSerial ; }
public DeviceSettingManager ( Context context , LoaderManager loaderManager ) { super ( context , loaderManager ) ; loaderManager . initLoader ( LoaderUtils . DEVICE_SETTINGS_LOADER , null , this ) ; }
public int calculateTime ( int rotations , int speed ) { int time = rotations * ( Constants . MOTOR_RPM / 60 ) * ( speed / 100 ) ; time += 2 ; return time ; }
public void onClick ( View v ) { mainLayout . requestFocus ( ) ; hideSoftKeyboard ( CardAddEditActivity . this ) ; fieldSelectDialog ( "bank" ) ; }
public void setQuranTouchListener ( QuranTouchListener listener ) { mTouchListener = listener ; }
public void bindTo ( MovieEntity trailer ) { Picasso . get ( ) . load ( trailer . getPosterPath ( ) ) . placeholder ( R . drawable . ic_placeholder_empty ) . into ( binding . image ) ; }
public Flowable < UploadObject > obseveStatus ( ) { return statusProcessor . onBackpressureBuffer ( ) ; }
public static void setStravaTokenExpiresAt ( int expiresAt ) { cSharedPreferences . edit ( ) . putInt ( SP_STRAVA_TOKEN_EXPIRES_AT , expiresAt ) ; }
public UploadSuccess ( TrackFile trackFile , CloudData cloudData ) { this . trackFile = trackFile ; this . cloudData = cloudData ; }
public boolean isEmpty ( ) { return value == 0 ; }
public int getCurSum ( ) { return curSum ; }
private boolean isAccountVisible ( WalletAccount account ) { return account != null && accountFragment . isVisible ( ) && account . equals ( accountFragment . getAccount ( ) ) ; }
public boolean saveToFile ( String fileName , byte [ ] data ) throws InvalidKeyException { if ( baseFilePath == null ) return false ; return saveToFile ( fileName , baseFilePath , data ) ; }
public void getPreviousAnswerTest ( ) { questionPresenter . getPreviousAnswer ( ) ; verify ( view ) . setPreviousAnswer ( anyInt ( ) ) ; }
public int getItemCount ( ) { return playerImages . size ( ) ; }
private void setViewBeforePatientDownload ( ) { if ( ! mLastViewedPatientsView . isRefreshing ( ) ) { mLastViewedPatientsView . setSpinnerVisibility ( true ) ; } mLastViewedPatientsView . enableSwipeRefresh ( false ) ; mLastViewedPatientsView . setEmptyListVisibility ( false ) ; mLastViewedPatientsView . setListVisibility ( false ) ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { getPreferenceManager ( ) . setSharedPreferencesName ( "app_preferences" ) ; }
public HlsMasterPlaylist getMasterPlaylist ( ) { return masterPlaylist ; }
public static java . lang . String getAbsoluteURL ( java . lang . String url ) { return null ; }
public final boolean ignoreMediaStoreArtwork ( ) { return mPreferences . getBoolean ( IGNORE_MEDIA_STORE_ARTWORK , false ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "de . myplan . android" , appContext . getPackageName ( ) ) ; }
public LocalRepo ( Context context , Gson gson ) { this . sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; this . gson = gson ; }
public static ProximityScreenLockerNative create ( final Context context ) { final PowerManager . WakeLock proximityWakeLock = initProximitySensor ( context ) ; if ( proximityWakeLock == null ) { return null ; } return new ProximityScreenLockerNative ( proximityWakeLock ) ; }
public void onLoadingStarted ( String imageUri , View view ) { mView = view ; size . setVisibility ( View . VISIBLE ) ; }
public void removeImageUploading ( String itemId ) { SharedPreferences . Editor editor = mSharedPreferences . edit ( ) ; editor . remove ( KEY_IMAGE_UPLOADING + itemId ) ; editor . commit ( ) ; }
public void onAppWarningCancelClicked ( ) { NetMonPreferences . getInstance ( this ) . setServiceEnabled ( false ) ; }
public void onDismissed ( Snackbar snackbar , int event ) { if ( event == DISMISS_EVENT_SWIPE || event == DISMISS_EVENT_TIMEOUT ) { mRetryProcessor . onError ( error ) ; } }
public void onHeaderClick ( ItemHeader item ) { selectedData = item . data ; ERA . log ( "isFinishing = " + isFinishing ( ) ) ; InfoListDialog . newInstance ( item . title ) . show ( getSupportFragmentManager ( ) , "dialog_info" ) ; }
public void testGetLocalMilliseconds_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . getLocalMilliseconds ( ) , closeTo ( planetaryMilliseconds , 1 ) ) ; }
public static String printNode ( Element root ) { return printNode ( root , 0 ) ; }
public static synchronized void addGlobalError ( RRError error ) { errors . add ( error ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . mytestingapp" , appContext . getPackageName ( ) ) ; }
public void setVolumeKeyEvent ( VolumeKeyEvent keyEvent ) { DeviceManager . getInstance ( this . mContext ) . setVolumeKeyEvent ( keyEvent ) ; }
public int getItemPosition ( Object object ) { return isUpdateWeekView ? POSITION_NONE : super . getItemPosition ( object ) ; }
public boolean areContentsTheSame ( CategoryAttraction oldItem , CategoryAttraction newItem ) { return Objects . equals ( oldItem , newItem ) ; }
public ArtworkInfo ( int albumId , Bitmap artwork ) { this . albumId = albumId ; this . artwork = artwork ; }
public boolean areContentsTheSame ( T oldItem , T newItem ) { return oldItem . equals ( newItem ) ; }
private static int getCellsForSize ( int size ) { int n = 2 ; while ( 70 * n - 30 < size ) { ++ n ; } return n - 1 ; }
public FormEntryPage swipeToNextQuestion ( String questionText , boolean isRequired ) { flingLeft ( ) ; if ( isRequired ) { waitForText ( "* " + questionText ) ; } else { waitForText ( questionText ) ; } return this ; }
public ContactEntity loadSync ( int contactId ) { return mDataRepository . getDatabase ( ) . contactDao ( ) . loadSync ( contactId ) ; }
public void onSuccess ( List < RecentPage > recentPages ) { int page = recentPages . size ( ) > 0 ? recentPages . get ( 0 ) . page : Constants . NO_PAGE ; lastPageSubject . onNext ( page ) ; initialDataSubscription = null ; }
public boolean equalsDistance ( double distanceKm , double distanceMi ) { return Math . abs ( this . distanceKm - distanceKm ) <= epsilon || Math . abs ( this . distanceMi - distanceMi ) <= epsilon ; }
private CompoundButton . OnCheckedChangeListener mAlarmEnabledChangeListener = new CompoundButton . OnCheckedChangeListener ( ) { @ Override public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { mAlarm . setEnabled ( isChecked ) ; } } ;
public AboutBuilder addHelpAction ( View . OnClickListener onClickListener ) { return addAction ( R . mipmap . help , R . string . help , onClickListener ) ; }
public static boolean isDarkThemeActive ( Context context ) { int uiMode = context . getResources ( ) . getConfiguration ( ) . uiMode ; return ( uiMode & Configuration . UI_MODE_NIGHT_MASK ) == Configuration . UI_MODE_NIGHT_YES ; }
public AutoHideFAB ( Context context , AttributeSet attrs ) { super ( ) ; }
public void commitLink_withoutCommitSha__opensBrowser ( ) throws Exception { assertRedirectsToBrowser ( parseLink ( "https : }
public void onItemMove ( int fromPosition , int toPosition ) { Collections . swap ( values , fromPosition , toPosition ) ; notifyItemMoved ( fromPosition , toPosition ) ; }
public int getItemViewType ( int position ) { if ( hasParent ) { if ( position == 0 ) { return VIEW_TYPE_PARENT ; } else { return VIEW_TYPE_COMMENT ; } } else { return VIEW_TYPE_COMMENT ; } }
public boolean isArabicNames ( ) { return prefs . getBoolean ( Constants . PREF_USE_ARABIC_NAMES , false ) ; }
public void onClick ( View v ) { if ( mMovieClickedListener != null ) { Movie movie = mMovies . get ( holder . getAdapterPosition ( ) ) ; mMovieClickedListener . onMovieClicked ( movie ) ; } }
public boolean setBluetoothICFirmwareName ( String name ) { return mBluetoothIcDevice . setBluetoothIcName ( name ) ; }
public void run ( ) { Toast . makeText ( Schermo . this , testo , 0 ) . show ( ) ; }
public static com . coinomi . core . protos . Protos . Wallet parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public ChangeStateFloatingActionButton ( Context context ) { super ( context ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mAdapter = new ContactsAdapter ( getActivity ( ) ) ; mDatabase = FirebaseDatabase . getInstance ( ) . getReference ( ) ; }
public PemToKeyPairTask ( @ NonNull String pemContent , AsyncTaskResult . Callback < AsyncTaskResult < KeyPair >> callback ) { this ( pemContent . getBytes ( ) , callback , null ) ; }
public LatestRunsState ( boolean isLoading , boolean hasError , List < Run > runs ) { this . isLoading = isLoading ; this . hasError = hasError ; this . runs = runs ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Log . d ( TAG , "onCreate" ) ; buildGoogleApiClient ( ) ; buildMessageListener ( ) ; }
public Observable < Void > action ( @ StringRes int actionResId ) { ClickListenerEmitter onClickListener = new ClickListenerEmitter ( ) ; snackbar . setAction ( actionResId , onClickListener ) ; return Observable . create ( onClickListener ) ; }
private void setParamsLeft ( ) { if ( DeviceUtil . isVerge ( ) ) params . x = 190 ; else params . x = 170 ; position = POSITION_LEFT ; MainService . setOverlayLauncherPosition ( position ) ; }
public MutableLiveData < Boolean > getRemoveWhenDone ( ) { return mRemoveWhenDone ; }
public void testIsWPCOMURL5 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( wpcomAddress5 ) ) ) ; }
public void finish ( ) { setResult ( changed ? RESULT_OK : RESULT_CANCELED ) ; saveFilter ( SIAApp . GG_APP . filters ) ; super . finish ( ) ; }
private void showTime ( ) { binding . missedTimePrefs . setDetailText ( String . format ( Locale . getDefault ( ) , getString ( R . string . x_minutes ) , String . valueOf ( mPrefs . getMissedReminderTime ( ) ) ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . main_menu , menu ) ; return true ; }
public boolean onMapClick ( @ NonNull LatLng point ) { if ( clickListener != null && ! isDragging ) { clickListener . onPoint ( fromLatLng ( point ) ) ; } return true ; }
public void onAnimationStart ( Object animation ) { transitionAnimationStartTime = System . currentTimeMillis ( ) ; }
public void setUp ( ) throws Exception { canvas = new Canvas ( ) ; xyPlot = spy ( new XYPlot ( getContext ( ) , "My Plot" ) ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return contacts_TopPeers . TLdeserialize ( stream , constructor , exception ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_completion , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void onSucceed ( ) { }
public Server ( String serverName ) { super ( serverName ) ; }
public float getFocusY ( ) { return mFocusY ; }
public void onFavoritesClick ( View v ) { if ( v . isSelected ( ) ) { favoriteService . removeFromFavorites ( movieEntity ) ; v . setSelected ( false ) ; } else { favoriteService . addToFavorites ( movieEntity ) ; v . setSelected ( true ) ; } }
public T getTime ( ) { return mTime ; }
public void onLogWarning ( String message ) throws RemoteException { addChatMessage ( new IChatMessage . InfoMessage ( IChatMessage . InfoMessage . Type . WARNING , message ) , true ) ; }
public void onItemLongClick ( View view , int position ) { presentDeleteDialog ( position ) ; }
public void cancelLoadFile ( TLRPC . PhotoSize photo ) { cancelLoadFile ( null , null , photo . location , null ) ; }
public static final int getThemedResourceId ( Context ctx , int attributeId ) { return getThemedResourceId ( ctx . getTheme ( ) , attributeId ) ; }
public Content toContent ( LottieDrawable drawable , BaseLayer layer ) { if ( ! drawable . enableMergePathsForKitKatAndAbove ( ) ) { L . warn ( "Animation contains merge paths but they are disabled . " ) ; return null ; } return new MergePathsContent ( this ) ; }
public void onConnecting ( ) { Log . w ( TAG , "onConnecting ( ) " ) ; }
public void dismissDialog ( ) { mPatientDashboardActivity . dismissCustomFragmentDialog ( ) ; }
public DistrictTeamWriter districtTeamWriter ( Database db ) { return Mockito . mock ( DistrictTeamWriter . class ) ; }
public void onFriendListRemoved ( final Core lc , final FriendList linphoneFriendList ) { Lg . w ( "onFriendListRemoved : linphoneFriendList = " , linphoneFriendList ) ; }
public void hideProgressBar ( ) { ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progress_bar ) ; if ( progressBar != null ) { progressBar . setVisibility ( View . GONE ) ; } }
public void delete ( TodoList deletedItem ) { deleteCount ++ ; }
public final void dimBackground ( ) { Tool . visibleViews ( getBackground ( ) ) ; }
public void reset ( ) { populate ( null , null , null ) ; }
public PermissionChecker ( @ ForApplication Context context ) { this . context = context ; }
private DialogInterface . OnClickListener negativeClickListener ( ) { return ( dialog , which ) -> { Analytics . logContent ( ContentType . CHECK_PRICES , "proceed" , false ) ; markDialogProcessed ( ) ; } ; }
public JsonCommand cmd ( List < String > commandTerms ) { cmd . addAll ( commandTerms ) ; return this ; }
public Boolean isValid ( ) { return this . isValid ; }
public String getRepeatPref ( ) { return sharedPreferences . getString ( PreferenceKeys . getBurstModePreferenceKey ( ) , "1" ) ; }
public void ignoreChanges_whenFormControllerNotSet_doesNothing ( ) { FormSaveViewModel viewModel = new FormSaveViewModel ( savedStateHandle , ( ) -> CURRENT_TIME , formSaver , mediaUtils , null , scheduler , mock ( AudioRecorder . class ) ) ; viewModel . ignoreChanges ( ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . FileDidUpload , location , inputFile , inputEncryptedFile , key , iv ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeString ( pattern ) ; }
public static PhysicalPersonEntity newInstance ( ) { return new PhysicalPersonEntity ( ) ; }
public static InputStream loadAsset ( String assetName ) throws IOException { Activity context = ClientModel . getClientModel ( ) . getContext ( ) ; return context . getAssets ( ) . open ( assetName ) ; }
public static final GpsBigViewFragment newInstance ( ) { GpsBigViewFragment fragment = new GpsBigViewFragment ( ) ; Bundle bundle = new Bundle ( 1 ) ; bundle . putInt ( "a_number" , 1 ) ; fragment . setArguments ( bundle ) ; return fragment ; }
public void onBackPressed ( ) { finishWithResult ( false ) ; super . onBackPressed ( ) ; }
public boolean getShowLabel ( ) { return showLabel ; }
public static AnimatorBuilder getInstance ( WeakReference < Context > contextWeakReference ) { return new AnimatorBuilder ( contextWeakReference . get ( ) . getResources ( ) . getInteger ( android . R . integer . config_mediumAnimTime ) ) ; }
public void parseFlySightDateTest ( ) throws Exception { long millis = 1517000000400L ; String str = "2018 - 01 - 26T20 : 53 : 20 . 40Z" ; long parsed = TrackFileData . parseFlySightDate ( str ) ; assertEquals ( millis , parsed ) ; }
public static String getInterval ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getString ( PrefKeys . KEY_PREF_INTERVAL_NOTIFICATION , "60" ) ; }
public static void loadAll ( ) { loadSessionId ( ) ; loadNewsRss ( ) ; loadVideosXml ( ) ; loadUsernameAndPassword ( ) ; }
public Fragment getItem ( int position ) { return DayFragment . newInstance ( position + 1 , "long" ) ; }
public GetEntryDetailTask ( OnShortTaskCompleted listener , DictionaryDatabase helper , int entryId ) { this . listener = listener ; this . helper = helper ; this . entryId = entryId ; }
public void setPingInterval ( PingIntervalPreferenceType pingInterval ) { this . mPingInterval = pingInterval ; }
private void changeGlobalPrefs ( ) { boolean isChecked = binding . globalOptionPrefs . isChecked ( ) ; binding . globalOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdayGlobalEnabled ( ! isChecked ) ; }
public ChallengeStatus getStatus ( ) throws IOException , JSONException { String statusString = this . getSavedChallengeJson ( ) . optString ( JSON_FIELD_STATUS , DEFAULT_STATUS_STRING ) ; ChallengeStatus status = ChallengeStatus . fromStringCode ( statusString ) ; return getPassedStatusIfChallengeHasPassed ( status ) ; }
public double getNumTotalWrong ( ) { return numTotalWrong ; }
public CommentsAdapter ( Context context , List < Comment > comments ) { this . context = context ; this . comments = comments ; }
private void acceptWallet ( ) { String name = tvWalletName . getText ( ) . toString ( ) ; String password = tvWalletPassword . getText ( ) . toString ( ) ; bAccept . setEnabled ( false ) ; activityCallback . onAccept ( name , password ) ; }
public void setMagnitud ( Double magnitud ) { this . mMagnitud = magnitud ; }
public boolean isAppLocationSet ( ) { return mPerInstallationPrefs . getString ( Constants . PREF_APP_LOCATION , null ) != null ; }
public TermuxSessionsListViewController ( TermuxActivity activity , List < TerminalSession > sessionList ) { super ( activity . getApplicationContext ( ) , R . layout . item_terminal_sessions_list , sessionList ) ; this . mActivity = activity ; }
public void run ( ) { game . setScreen ( new MenuScreen ( game ) ) ; }
public SharedPreferences getDefaultSharedPref ( ) { return getSharedPreferences ( AHC . SP_APP , MODE_PRIVATE ) ; }
public double getMassFlowRateGps ( ) { return this . massFlowRateGps ; }
public void onBridgedAdapterChanged ( @ NonNull RecyclerView . Adapter source , Object tag ) { onHandleWrappedAdapterChanged ( source , ( List < ComposedChildAdapterTag > ) tag ) ; }
public void acceptVideoUpdate ( final boolean accept ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . acceptVideoUpdate ( accept ) ; }
public void testAltStartEnd ( ) throws WriterException { assertEquals ( encode ( "T123456789 - $T" ) , encode ( "A123456789 - $A" ) ) ; }
public void run ( ) { if ( decks [ index ] . isSelected ( ) ) { select ( 0 ) ; } else { select ( index ) ; } }
public AyahToolBarPip ( Context context ) { super ( context ) ; init ( ) ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return ( new ListProvider ( this . getApplicationContext ( ) , intent ) ) ; }
public Artist ( ArrayList < Album > albums ) { this . albums = albums ; }
public void onLoginFailed ( int i ) { }
public void accept ( List < ArticleSummary > result ) throws Exception { processArticles ( result ) ; mArticlesView . setRefreshing ( false ) ; mArticlesView . setLoading ( false ) ; }
public void shouldTrackOnScreen ( ) throws Exception { givenScreenName ( "someScreen" ) ; whenTrackingOnScreen ( ) ; thenAnalyticsManagerShouldNotifyOnScreen ( ) ; }
public void handleSiteAddressError ( ConnectSiteInfoPayload siteInfo ) { mViewModel . handleSiteAddressError ( siteInfo ) ; }
public ArrayList < MoodlePost > getPosts ( ) { return posts ; }
public static String get_abs_url ( String absolutePath , String relativePath ) throws MalformedURLException { URL absoluteUrl = new URL ( absolutePath ) ; URL parseUrl = new URL ( absoluteUrl , relativePath ) ; return parseUrl . toString ( ) ; }
public HashSet < ServerClient . UnspentTx > getUnspentTxs ( ) { return unspentTransactions ; }
public static boolean isDebug ( ) { return BuildConfig . DEBUG || RemixedDungeon . isDev ( ) ; }
public void testIsTest_isAndroidTestCompile ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . getName ( ) ) . thenReturn ( "androidTestCompile" ) ; assertTrue ( dependencyTask . isTest ( configuration ) ) ; }
public TextSectionBinder ( TagEntry viewObject ) { tagEntry = viewObject ; }
public boolean getUseDeveloperSupport ( ) { return BuildConfig . DEBUG ; }
public static int pref_behaviour_gallery_swipe_length_dp ( final Context context , final SharedPreferences sharedPreferences ) { try { return Integer . parseInt ( getString ( R . string . pref_behaviour_gallery_swipe_length_key , "150" , context , sharedPreferences ) ) ; } catch ( Throwable _ ) { return 150 ; } }
public int getBaseline ( ) { return ( int ) ( ( this . getMeasuredHeight ( ) - getPaddingBottom ( ) + getPaddingTop ( ) ) / 2 ) ; }
public LiveData < List < WorkEntity >> loadAll ( ) { return mDataRepository . getDatabase ( ) . workDao ( ) . loadAll ( ) ; }
public void startProgressAnimation ( ) { if ( this . progressAnimationStatus == ProgressAnimationStatus . READY ) { this . tryStartProgressAnimation ( ) ; } }
public void onRefreshTriggered ( ) { mDoAnimateNewData = true ; fetchGuideData ( ) ; }
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + TABLE_ACTUAL_GAME ) ; db . execSQL ( "DROP TABLE IF EXISTS " + TABLE_GAMES ) ; onCreate ( db ) ; }
public static Toast make ( @ NonNull Context context , @ Nullable CharSequence text ) { return make ( context , text , null , defaultTintColor , defaultBackgroundColor , Toast . LENGTH_SHORT ) ; }
public void onClick ( View v ) { ErrorPropertiesDialog . newInstance ( error ) . show ( activity . getFragmentManager ( ) , null ) ; }
public void reactivate ( String kind , int uses ) { this . kind = kind ; this . uses = uses ; sprite . ifPresent ( sprite -> sprite . reset ( image ( ) ) ) ; }
public void setStatusVez ( int vezHumano ) { Log . d ( "MesaView" , "StatusVez : " + vezHumano ) ; this . statusVez = vezHumano ; }
public int getElapsedDays ( ) { return 0 ; }
private String exec ( ResponseHandler callback , String . . . cmd ) { return exec ( request ( callback , cmd ) ) ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Stench_Txt ) , weaponName ) ; }
public void execute ( ) { mForceFab0Hidden = false ; FileCloudFragment . this . mFileCloudFabManager . updateFabButtons ( ) ; }
public SizeMetric ( float value , SizeLayout layoutType ) { super ( value , layoutType ) ; }
public void onDeleteDialogPositiveClick ( ) { NoteEditFragment fragment = ( NoteEditFragment ) getFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onDeleteDialogPositiveClick ( ) ; }
public void onNext ( Station station ) { handleCurrentStation ( station ) ; }
public void startDocumentSelectActivity ( ) { try { Intent photoPickerIntent = new Intent ( Intent . ACTION_PICK ) ; startActivityForResult ( photoPickerIntent , 21 ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onClick ( View v ) { setVisibilities ( ) ; ( ( ( Activity ) getContext ( ) ) . findViewById ( R . id . settingColorInfoLayout ) ) . setVisibility ( View . VISIBLE ) ; }
public void setWd ( Integer wd ) { this . wd = wd ; }
private int getStyle ( ) { return TextStyle . encode ( mForeColor , mBackColor , mEffect ) ; }
public void run ( ) { readAloudButton . setColorFilter ( getResources ( ) . getColor ( R . color . colorItemTint ) , PorterDuff . Mode . SRC_IN ) ; readAloudQuestionLabel . setTextColor ( getResources ( ) . getColor ( R . color . colorItemTint ) ) ; }
public void terminate ( ) { if ( controller != null ) { controller . terminate ( ) ; } }
public void sportCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "sport" ) ; }
public ApiServiceAuthServer getApiServiceAuthServer ( ) { return ServiceGenerator . createService ( ApiServiceAuthServer . class , null , this , this , false ) ; }
private void setGestureSetting ( boolean value ) { Editor settings = AnkiDroidApp . getSharedPrefs ( getTargetContext ( ) ) . edit ( ) ; settings . putBoolean ( "gestures" , value ) ; settings . apply ( ) ; }
public void showFeaturedImagesInfo ( ) { launchAlert ( getResources ( ) . getString ( R . string . statistics_featured ) , getResources ( ) . getString ( R . string . images_featured_explanation ) ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( presenter != null ) { presenter . onItemChecked ( holder . getAdapterPosition ( ) , isChecked , shoppingCartId , item . quantity , productPrice , item ) ; } }
public boolean onInterceptTouchEvent ( MotionEvent event ) { if ( canDismissWithSwipe ( ) ) { return onTouchEvent ( event ) ; } return super . onInterceptTouchEvent ( event ) ; }
private void nextWord ( ) { getViewModel ( ) . nextWord ( ) ; setListeners ( ) ; }
public com . google . protobuf . Any getPublicKeys ( int index ) { if ( publicKeysBuilder_ == null ) { return publicKeys_ . get ( index ) ; } else { return publicKeysBuilder_ . getMessage ( index ) ; } }
private void onCacheCleared ( ) { mPreferences . setBoolean ( Key . TRUEFONTS_CACHED , false ) ; mProgressDialog . dismiss ( ) ; snackbar ( R . string . settings_clear_cache_success , getView ( ) ) ; }
public void onClick ( View view ) { OpenFragment ( StartScreenFragment . class ) ; DrawerLayout drawer = findViewById ( R . id . drawer_layout ) ; drawer . closeDrawer ( GravityCompat . START ) ; }
public List < Instance > getAllByFormId ( String formId ) { try ( Cursor c = query ( null , JR_FORM_ID + " = ?" , new String [ ] { formId } , null ) ) { return getInstancesFromCursor ( c ) ; }
public Bookmark ( final Account account , final Jid jid ) { super ( "conference" ) ; this . jid = jid ; this . setAttribute ( "jid" , jid . toString ( ) ) ; this . account = account ; }
public JSONObject byName ( String name ) { return mNameMap . get ( name ) ; }
public void signInGoogle ( ) { Intent signInIntent = Auth . GoogleSignInApi . getSignInIntent ( mGoogleApiClient ) ; startActivityForResult ( signInIntent , REQUEST_SIGN_IN ) ; }
public float getyPercent ( ) { return yPercent ; }
public void onClickAddItem ( View view ) { Intent intent = new Intent ( getApplicationContext ( ) , AddList . class ) ; startActivity ( intent ) ; }
public void disableTunneling ( ) { if ( tunneling ) { tunneling = false ; audioSessionId = C . AUDIO_SESSION_ID_UNSET ; reset ( ) ; } }
public PersonalKey createFromParcel ( Parcel source ) { try { return new PersonalKey ( source ) ; } catch ( PGPException e ) { Log . w ( TAG , "error creating from parcel" , e ) ; return null ; } }
public void clearSuggestions ( ) { mContext . getContentResolver ( ) . delete ( HistoryContract . HistoryEntry . CONTENT_URI , HistoryContract . HistoryEntry . COLUMN_IS_HISTORY + " = ?" , new String [ ] { "0" } ) ; }
private void manageActionButtonsEnable ( boolean enable ) { mGenerateLinksButton . setEnabled ( enable ) ; mShareLinksButton . setEnabled ( enable ) ; mLinksRoleTextView . setEnabled ( enable ) ; mDisableLinksButton . setEnabled ( enable ) ; }
public void setOnPostListener ( OnPostSelectedListener postListener ) { this . postListener = postListener ; }
public StartMenuAdapter ( Context context , int layout , List < AppEntry > list ) { super ( context , layout , list ) ; isGrid = layout == R . layout . row_alt ; updateList ( list , true ) ; }
public float getWidthScaleFactor ( ) { return mWidthScaleFactor ; }
public Uri insert ( Uri uri , ContentValues values ) { return null ; }
public static NotificationData getCustomNotification ( String key ) { return customNotifications . get ( key ) ; }
public void logout ( ) { initAnonService ( ) ; }
public void didLongPressed ( ChatMessageCell cell ) { createMenu ( cell , false ) ; }
public void onMarkerReached ( AudioTrack audioTrack ) { cleanupPlayer ( true , true ) ; }
public static ExecutorService newSingleThreadExecutor ( final String threadName ) { return Executors . newSingleThreadExecutor ( new ThreadFactory ( ) { @ Override public Thread newThread ( Runnable r ) { return new Thread ( r , threadName ) ; } } ) ; }
public void onClick ( View v ) { choice = 1 ; if ( selectedImageUri != null ) { executeCompressCommand ( ) ; } else Snackbar . make ( mainlayout , "Please upload a video" , 4000 ) . show ( ) ; }
public JSONObject chunk ( ) throws UnknownHttpResponseException { JSONObject co = new JSONObject ( ) ; return _run ( "chunk" , co ) ; }
public void getAllVisits ( Token token , Callback callback ) { webServiceGETMethod ( token , callback , "PatientVisit" ) ; }
public void onCreate ( ) { NotesDbHelper notesDbHelper = new NotesDbHelper ( context ) ; notes = notesDbHelper . getAllNotes ( 0 ) ; }
public static Date getCreateAccountRequestTimestamp ( ) throws NotInitedException { return mCreateAccountRequestTimestamp ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; checkLogoutInfoDialog ( outState ) ; }
public ClearCacheEvent ( String identity ) { this . identity = identity ; }
public String toCSVString ( ) { return timestamp_start . toDateString ( ) + " , " + timestamp_start . toTimeString ( ) + " , " + timestamp_end . toTimeString ( ) + "\n" ; }
private void showErrorMessage ( String message ) { ViewUtil . showLongToast ( getActivity ( ) , message ) ; }
private int maxArmySize ( ) { return ( int ) ( 1 + MAX_ARMY_SIZE * ( ht ( ) - hp ( ) ) / ht ( ) * Game . getDifficultyFactor ( ) ) ; }
public void changeTextMessage ( String message ) { progressText . setText ( message ) ; }
public void run ( ) { for ( TwoStateOwner owner : cowners ) owner . stop ( ) ; }
public boolean isMetric ( ) { return mSharedPref . getBoolean ( METRIC_UNITS , false ) ; }
public void setOnComponentChangeCallback ( OnComponentChangeCallback onComponentChangeCallback ) { super . setOnComponentChangeCallback ( onComponentChangeCallback ) ; for ( Component child : getChildren ( ) ) child . setOnComponentChangeCallback ( onComponentChangeCallback ) ; }
public int getItemCount ( ) { return 6 ; }
public void setLocationsViewMode ( LocationsViewMode mode ) { mPrefsHelper . setLocationsViewMode ( mode ) ; }
public long addWordInfo ( WordInfo wordInfo ) { return getActiveDbInstance ( ) . documentDao ( ) . insertDocument ( new DocumentEntity ( wordInfo . wordId , wordInfo . word , gson . toJson ( wordInfo ) ) ) ; }
public void onPreferencesMenuItemSelected ( ) { startActivity ( new Intent ( this , TestbedPreferenceActivity . class ) ) ; }
public static MODELS getModelFromEnum ( int model_enum ) { return MODELS . values ( ) [ model_enum ] ; }
private void showRebootDialog ( ) { final Activity activity = getActivity ( ) ; if ( activity != null && ! activity . isFinishing ( ) ) { new RebootDialog ( activity ) ; } }
public DrawerMenuItem currentItem ( ) { return DrawerMenuItem . INGREDIENTS ; }
public static UserConnectionsManager get ( Context context ) { if ( instance == null ) { instance = new UserConnectionsManager ( context ) ; } return instance ; }
public boolean getComments ( ) { return comments ; }
public void cleanup ( Task task ) { task . bucket . clear ( ) ; }
public String getName ( ) { return "Gamepad" ; }
public int getItemViewType ( final int position ) { return R . layout . list_item ; }
public AccountHeaderBuilder withHeaderBackground ( Drawable headerBackground ) { this . mHeaderBackground = headerBackground ; return this ; }
public void onBindViewHolder ( VH holder , int position ) { onBindViewHolder ( holder , position , FULL_UPDATE_PAYLOADS ) ; }
public HorizontalAlbumAdapter ( @ NonNull AppCompatActivity activity , ArrayList < Album > dataSet , boolean usePalette , @ Nullable CabHolder cabHolder ) { super ( activity , dataSet , HorizontalAdapterHelper . LAYOUT_RES , usePalette , cabHolder ) ; }
public static boolean checkDownloadDirExist ( ) { String downloadDirPath = getDownloadDir ( ) ; File downloadDir = new File ( downloadDirPath ) ; return downloadDir . exists ( ) || downloadDir . mkdir ( ) ; }
public int getItemViewType ( int position ) { if ( listener == null ) return ( items . get ( position ) . selectable ? R . layout . item_folder : R . layout . item_folder_unselectable ) ; else return R . layout . item_folder_select ; }
public boolean areItemsTheSame ( T oldItem , T newItem ) { return oldItem . equals ( newItem ) ; }
public Observable < SourceBusinessModel > createCombinedSourcesStream ( ) { return sourcesBrowserInteractor . createCombinedSourcesRemoteCachedStream ( ) ; }
public PieWidget ( LayoutManager layoutManager , PieChart pieChart , SizeMetrics metrics ) { super ( layoutManager , metrics ) ; this . pieChart = pieChart ; renderStack = new RenderStack ( pieChart ) ; }
public void afterTextChanged ( final Editable s ) { toggleChangePasswordCheckbox ( ) ; }
public boolean isStartSync ( ) { return this . prefs . getBoolean ( "startsync" , false ) ; }
public void onAdLoaded ( ) { Log . d ( "MA Banner Ad Test" , "Add Finished Loading" ) ; }
public void whenOldKeyMissing_doesNothing ( ) { initPrefs ( prefs ) ; extractNewKey ( "newKey" ) . fromKey ( "oldKey" ) . fromValue ( "oldBlah" ) . toValue ( "newBlah" ) . apply ( prefs ) ; assertPrefsEmpty ( prefs ) ; }
public final CellContainer getCurrentPage ( ) { return ( CellContainer ) _pages . get ( getCurrentItem ( ) ) ; }
private void displayResults ( ) { this . adapter = new ArrayListOfResultsAdapter ( this , R . layout . leve_polaire_results_list_item , this . levePolaire . getResults ( ) ) ; this . resultsListView . setAdapter ( this . adapter ) ; }
public void beginBatchedUpdates ( ) { throwIfMerging ( ) ; if ( mCallback instanceof BatchedCallback ) { return ; } if ( mBatchedCallback == null ) { mBatchedCallback = new BatchedCallback ( mCallback ) ; } mCallback = mBatchedCallback ; }
private void askReadExternalStoragePermission ( ) { PermissionsHelper . requestPermission ( getActivity ( ) , Manifest . permission . READ_EXTERNAL_STORAGE , R . string . permission_external_storage_detail_attachment , snackBarPlaceholder , this : : startGetContentAction ) ; }
public Template getItem ( int position ) { return list . get ( position ) ; }
public List < Station > getStations ( ) { return stations ; }
public void setTls ( boolean tls ) { this . tls = tls ; notifyChange ( ) ; }
public int getFat ( ) { return fat ; }
public String getBrief ( ) { return brief ; }
public static PosterViewState makeLoadingState ( Filter filter ) { return new PosterViewState ( null , 0 , filter , true , false ) ; }
public void startMainActivity ( Bundle userData ) { IntentUtils . startActivityCleaningTask ( this , userData , MainActivity . class ) ; }
public void seekTo ( long positionMs ) { if ( player == null ) { return ; } player . seekTo ( positionMs ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences_connection ) ; EditTextPreference urlPreference = ( EditTextPreference ) findPreference ( "pref_server_url" ) ; urlPreference . setOnPreferenceChangeListener ( new URLValidatingListener ( ) ) ; }
public void use ( ) { GLES20 . glUseProgram ( handle ) ; }
public boolean onPreferenceClick ( Preference preference ) { Intent intent = new Intent ( ) ; intent . setData ( Uri . parse ( GIT_HUB_RELEASE_URL ) ) ; startActivity ( intent ) ; return true ; }
public static DocumentFile findOrCreateDir ( DocumentFile parent , String name , boolean createIfNotExists ) { DocumentFile file = parent . findFile ( name ) ; if ( file == null && createIfNotExists ) file = parent . createDirectory ( name ) ; return file ; }
public void setTrack ( Track track , boolean current ) { mTrack = track ; mIsCurrent = current ; if ( isVisible ( ) ) { updateTrackInformation ( ) ; } }
public void setSortMode ( String sortMode ) { SharedPreferences . Editor editor = m_prefs . edit ( ) ; editor . putString ( "headlines_sort_mode" , sortMode ) ; editor . commit ( ) ; }
public SettingsScheduleAttestations getSettingsScheduleAttestations ( ) { return settingsScheduleAttestations ; }
public boolean isSequentialDownload ( ) { return ! operationNotAllowed ( ) && th . status ( ) . flags ( ) . op_and ( TorrentFlags . SEQUENTIAL_DOWNLOAD ) . op_bool ( ) ; }
public void onDestroy ( ) { mExecutorService . shutdownNow ( ) ; super . onDestroy ( ) ; }
public void onSwiped ( RecyclerView . ViewHolder viewHolder , int direction ) { int position = viewHolder . getAdapterPosition ( ) ; notifyItemChanged ( position ) ; Item item = getItem ( position ) ; if ( item != null ) { toggleKids ( item ) ; } }
public int getAverageColor ( Bitmap bitmap ) { Bitmap b = Bitmap . createScaledBitmap ( bitmap , 1 , 1 , true ) ; final int color = b . getPixel ( 0 , 0 ) ; b . recycle ( ) ; return color ; }
public void release ( Runnable postLoadAction ) { if ( currentTask != null ) { currentTask . cancel ( true ) ; } if ( postLoadAction != null ) { downloadExecutorService . submit ( postLoadAction ) ; } downloadExecutorService . shutdown ( ) ; }
public static FriendAcceptedFCMMessage fromRemoteMessage ( @ NonNull RemoteMessage remote ) { FriendAcceptedFCMMessage message = new FriendAcceptedFCMMessage ( ) ; message . uid = Integer . parseInt ( remote . getData ( ) . get ( "uid" ) ) ; return message ; }
public static String getDescription ( Reason reason ) { if ( ! descriptionsMap . containsKey ( reason ) ) { reason = Reason . UNKNOWN ; } return Game . getVar ( descriptionsMap . get ( reason ) ) ; }
private void initDefaults ( ) { playPauseButtonClickable . setValue ( true ) ; stopButtonVisibility . setValue ( false ) ; stopButtonClickable . setValue ( false ) ; animationState = false ; timerRunning = false ; }
public void removePanelEventListenerListener ( final SlidingPanelEventsListener panelEventsListener ) { if ( panelEventsListener != null ) { mslidingPanelEventsListeners . remove ( panelEventsListener ) ; } }
public void onClick ( View v ) { find ( findTextField . getText ( ) . toString ( ) , true ) ; }
public Player ( Point start , int size ) { super ( size , start , getPaint ( ) ) ; }
public static void removeTrack ( String playlistType , int index ) { switch ( playlistType ) { case MediaPlayerConstants . TAG_PLAYLIST_LIBRARY : trackInfoList . remove ( index ) ; break ; case MediaPlayerConstants . TAG_PLAYLIST_OTHER : selectedPlaylist . remove ( index ) ; break ; } }
private void handleGroupUpdate ( ) { new UpdateSignalGroupTask ( this , masterSecret , groupToUpdate . get ( ) . id , avatarBmp , getGroupName ( ) , getAdapter ( ) . getRecipients ( ) ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public int getPlugged ( ) { return plugged ; }
private void acquireWakeLock ( long milli ) { wakeLock . acquire ( milli ) ; }
public void generateZip ( ArrayList < CompressedObjectParcelable > arrayList ) { offset = 0 ; stoppedAnimation = false ; items = arrayList ; notifyDataSetChanged ( ) ; itemsChecked = new boolean [ items . size ( ) ] ; }
private String getFeatureTablesPreferenceKey ( String database ) { return database + FEATURE_TABLES_PREFERENCE_SUFFIX ; }
public void setMaxLvl ( int maxLvl ) { this . maxLvl = maxLvl ; }
public void setImageBitmap ( Bitmap bm ) { super . setImageBitmap ( bm ) ; updateDrawableBounds ( ) ; handleImageChange ( ) ; }
private boolean shouldNotDownload ( @ NonNull FeedMedia media ) { boolean isDownloading = DownloadRequester . getInstance ( ) . isDownloadingFile ( media ) ; return isDownloading || media . isDownloaded ( ) ; }
public String getDateTagged ( ) { return StringUtils . notNullStr ( dateTagged ) ; }
public ArrayList < Genre > loadInBackground ( ) { return GenreLoader . getAllGenres ( getContext ( ) ) ; }
public void onEvent ( MusicChanged event ) { if ( event . player . equals ( mActivePlayer . get ( ) ) ) { updateOngoingNotification ( ) ; } }
public int compare ( CardWrapper c1 , CardWrapper c2 ) { return c1 . getCard ( ) . getQuestion ( ) . compareTo ( c2 . getCard ( ) . getQuestion ( ) ) ; }
public void fadeOutMusic ( ) { if ( mMusic == null || mMuted ) { return ; } mMusicFader . fadeOut ( mMusic ) ; mMusic = null ; mMusicId = "" ; }
public void onSuccess ( GetNextDepartures nextDepartures ) { nextDepartures . setColors ( linesColors ) ; nextDepartures . removeInvalidDepartures ( ) ; connectivity . sendMessage ( Messages . resultDepartures ( nodeId , nextDepartures . departures ) ) ; }
public void setImageUrl ( String url ) { ImageHelper . loadImage ( context , url , bigImage ) ; }
public void onGetTagListFailureTracking ( Throwable e ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsHelper . PARAM_MESSAGE , e . getMessage ( ) ) ; analyticsHelper . trackGetTagListFailure ( bundle ) ; }
public void initDb ( ) throws Exception { mDatabase = Room . inMemoryDatabaseBuilder ( InstrumentationRegistry . getContext ( ) , AppDatabase . class ) . allowMainThreadQueries ( ) . build ( ) ; visitedLocationDao = mDatabase . visitedLocationDao ( ) ; }
public void action ( String walletName , String password , boolean fingerprintUsed ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { enableStreetMode ( false ) ; updateStreetMode ( ) ; } } ) ; }
public boolean isValidJid ( ) { if ( jid == null ) { return false ; } try { Jid . of ( jid ) ; return true ; } catch ( IllegalArgumentException e ) { return false ; } }
public void run ( ) { callback . onTodoListAdded ( ) ; }
public static boolean isGroupViewType ( int rawViewType ) { return ExpandableAdapterHelper . isGroupViewType ( rawViewType ) ; }
public boolean stepOn ( Char chr ) { interact ( chr ) ; if ( chr instanceof Hero ) { Hero hero = ( Hero ) chr ; hero . interrupt ( ) ; } return true ; }
public static boolean isExternalAccessDisabled ( Context context ) { if ( isLibrary ( context ) ) return true ; SharedPreferences pref = getSharedPreferences ( context ) ; return ! pref . getBoolean ( SP_KEY_TASKER_ENABLED , true ) ; }
public DistrictTeamListElement renderFromModel ( DistrictTeam districtTeam , Void aVoid ) { return new DistrictTeamListElement ( districtTeam . getTeamKey ( ) , districtTeam . getDistrictKey ( ) , districtTeam . getRank ( ) , districtTeam . getTotalPoints ( ) ) ; }
public void onSaved ( FileDataSource source ) { sendBroadcast ( new Intent ( BROADCAST_TRACK_SAVE ) . putExtra ( "saved" , true ) . putExtra ( "path" , source . path ) ) ; mLastTrack = null ; }
public void notifyDataSetChanged ( ) { if ( Objects . nonNull ( mAdapter ) ) { mAdapter . notifyDataSetChanged ( ) ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == R . id . menu_log_level ) { Logger . showSetLogLevelDialog ( this ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public Award inflate ( Cursor cursor ) { return ModelInflater . inflateAward ( cursor ) ; }
public void visitImportStatement ( @ NotNull UImportStatement node ) { ImportStatementDetector . this . visitImportStatement ( context , node ) ; }
static public < T > Vector < T > oneElementVector ( T elem ) { Vector < T > v = new Vector < T > ( ) ; v . add ( elem ) ; return v ; }
public void applyChanges ( ) { SettingsRecyclerViewAdapter adapter = new SettingsRecyclerViewAdapter ( mListItem , mlogsTV ) ; settingsRecyclerView . setAdapter ( adapter ) ; }
public LexicaLogo ( Context context ) { this ( context , ( AttributeSet ) null ) ; }
public Set < MessageRecord > getSelectedItems ( ) { return Collections . unmodifiableSet ( new HashSet <> ( batchSelected ) ) ; }
public void onSubscribe ( Disposable d ) { }
public void dispose ( ) { super . dispose ( ) ; if ( mesh != null ) mesh . dispose ( ) ; }
public void setAuthType ( int x509authtype ) { mDNType = x509authtype ; }
public String getFormType ( ) { String type = getValue ( "FORM_TYPE" ) ; return type == null ? "" : type ; }
public void run ( ) { editor . forceDrawerReload ( ) ; editor . message ( getResources ( ) . getString ( R . string . examples_update ) ) ; }
public static String getLanguage ( Context context ) { return getPersistedData ( context , context . getString ( R . string . pref_alphabet_default ) ) ; }
public void computeHighlightPosts ( ) { if ( clusters == null ) return ; for ( Cluster cluster : clusters ) { cluster . computeHighlightPosts ( this ) ; } }
private int getImageResourceId ( boolean isFullFillup ) { String fileName = isFullFillup ? "ic_gasolinedrop_full" : "ic_gasolinedrop_empty" ; return MainActivity . getInstance ( ) . getResources ( ) . getIdentifier ( fileName , "drawable" , MainActivity . getInstance ( ) . getPackageName ( ) ) ; }
public void onWindowFocusChanged ( boolean hasFocus ) { super . onWindowFocusChanged ( hasFocus ) ; if ( hasFocus && mResumed ) { if ( mLostFocus ) { mFragment . onFocus ( true ) ; mLostFocus = false ; } } }
private void setMode ( @ NonNull Mode mode ) { setMode ( mode , true ) ; }
public void onSurfaceCreated ( EGLConfig config ) { mainWrappers . init ( ) ; controls = new Controls ( getContext ( ) , mainWrappers . getLevelPtr ( ) ) ; }
public static Context getApplication ( ) { return instance ; }
public Integer getOverpaymentPortion ( ) { return overpaymentPortion ; }
public static Input fromProtoInput ( Packet . Update . PInput pInput ) { return new Input ( pInput . getDirection ( ) , pInput . getId ( ) , pInput . getTimestamp ( ) ) ; }
public static com . coinomi . core . protos . Protos . Transaction parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; this . activity = activity ; }
public void onOwnerHit ( ) { mTriggered = true ; }
public ECPublicKeyParameters getKey ( ) { return publicKey ; }
private String buildUrl ( Currency fromCurr , Currency toCurr ) { return "http : }
public PostMediaCanceled ( PostModel post ) { this . post = post ; }
public void start ( ) throws MediaException { midiDriver . queueEvent ( midiSequence ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_main ) ; setupActionBar ( ) ; setupDrawer ( savedInstanceState ) ; ( ( GTracker ) getApplication ( ) ) . getTracker ( ) ; }
private void setPlayer ( ) { mediaPlayer = MediaPlayer . create ( this , R . raw . sample_jingle_bell ) ; mediaPlayer . setLooping ( false ) ; init ( ) ; }
public MutableLiveData < WalletRealmObject > getWalletLive ( ) { return walletLive ; }
public void run ( ) { removeFragmentFromStack ( currentFragment ) ; setVisibility ( GONE ) ; if ( backgroundView != null ) { backgroundView . setVisibility ( GONE ) ; } if ( drawerLayoutContainer != null ) { drawerLayoutContainer . setAllowOpenDrawer ( true , false ) ; } }
public void onActivityResumed ( Activity activity ) { if ( isInBackground && activity == runningActivity ) { isInBackground = false ; exitConfirmed = false ; removeNotification ( ) ; } }
public long getMemberId ( ) { return memberId ; }
public T getValue ( ) { return value ; }
public void pleaseNotifyViewAboutAdapterType ( ) { getView ( ) . setAdapterType ( isImagesOnly ( ) ) ; }
public void onDetach ( ) { super . onDetach ( ) ; packageSearchFragmentCallback = null ; }
public void set ( ImageView imageView , Uri uri , Drawable placeholder ) { Glide . with ( imageView . getContext ( ) ) . load ( uri ) . placeholder ( placeholder ) . into ( imageView ) ; }
public void onDateSelected ( MaterialCalendarView widget , CalendarDay date , boolean selected ) { selectedDate = new int [ ] { date . getDay ( ) , date . getMonth ( ) + 1 , date . getYear ( ) } ; generateWorksList ( ) ; }
public int getViewVerticalDragRange ( View child ) { return mDragRange ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_preference_section , null ) ) ; }
public void setMassa ( double massa ) { this . massa = massa ; }
public void onDestroy ( ) { log . v ( TAG , "Fragment destroyed" ) ; loaded = false ; thread . interrupt ( UF ) ; }
public Object instantiateItem ( ViewGroup container , int position ) { View view = position == 0 ? page1 : page2 ; container . addView ( view ) ; return view ; }
public FeedViewModel ( @ NonNull Application application ) { super ( application ) ; repo = FeedRepository . getInstance ( application ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( PreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . pref_notification_settings ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "swipenav" , checked ) . apply ( ) ; }
public void addPlayer ( View view ) { Intent intent = new Intent ( this , AddPlayer . class ) ; startActivityForResult ( intent , getResources ( ) . getInteger ( R . integer . add_player_intent_flag ) ) ; }
private static boolean lastCharIsWhitespace ( StringBuilder accum ) { return accum . length ( ) != 0 && Character . isWhitespace ( accum . charAt ( accum . length ( ) - 1 ) ) ; }
public static boolean showSaveImageHint ( Context context ) { Toast . makeText ( context , R . string . btn_share_image_link_hint , Toast . LENGTH_SHORT ) . show ( ) ; return true ; }
public void setValuesLength ( int valuesLength ) { this . valuesLength = valuesLength ; }
public void rescheduleDownloads ( ) { if ( checkStopDownloads ( ) ) stopDownloads ( ) ; else resumeStoppedDownloads ( ) ; }
private List < File > searchFileInDirectory ( String path ) { return FileUtils . getFileInDirectory ( path , isHidden , searchFileType ( ) ) ; }
public StickerViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new StickerViewHolder ( layoutInflater . inflate ( R . layout . scribble_sticker_item , parent , false ) ) ; }
public Cursor fetchAllRecords ( ) { return fetchAllRecords ( null , null ) ; }
public ZoomingImageView ( Context context ) { super ( context ) ; }
public static String getRequestBody ( Context context ) { HttpRequestBody requestBody = new HttpRequestBody ( getDeviceJson ( context ) ) ; return gson . toJson ( requestBody ) ; }
public static void setLogPath ( String path ) { LogManager . dirPath = path ; LogManager . fullFileName = String . format ( "%s%s%s . log" , path , File . separator , context . getString ( R . string . app_name ) ) ; }
public static int pref_behaviour_bezel_toolbar_swipezone_dp ( final Context context , final SharedPreferences sharedPreferences ) { try { return Integer . parseInt ( getString ( R . string . pref_behaviour_bezel_toolbar_swipezone_key , "10" , context , sharedPreferences ) ) ; } catch ( Throwable _ ) { return 10 ; } }
public MultiDayFitnessInterface getAPersonMultiDayFitness ( Person person ) throws PersonDoesNotExistException { if ( personMultiDayFitnessMap . containsKey ( person ) ) { return personMultiDayFitnessMap . get ( person ) ; } else { throw new PersonDoesNotExistException ( "Person does not exist . " ) ; } }
public void setTableVerticalPivotZero ( float fraction ) { setRotationX ( - 90 * fraction ) ; setPivotX ( getWidth ( ) / 2 ) ; setPivotY ( 0 ) ; }
public String info ( ) { return isKnown ( ) ? desc ( ) : Utils . format ( Game . getVar ( R . string . Potion_Info ) , color ) ; }
private void performSkipLogin ( ) { applicationKvStore . putBoolean ( "login_skipped" , true ) ; ExploreActivity . startYourself ( this ) ; finish ( ) ; }
public void onTick ( long millisUntilFinished ) { tFeelingsToastIn . show ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_command_select , menu ) ; return true ; }
public int hashCode ( ) { int result = id ; result = 31 * result + ( name != null ? name . hashCode ( ) : 0 ) ; return result ; }
private int getFTPTimeout ( ) { return mainActivity . getPrefs ( ) . getInt ( FTPService . KEY_PREFERENCE_TIMEOUT , FTPService . DEFAULT_TIMEOUT ) ; }
private void clearStatsAndProgress ( ) { new Progress ( this ) . setInProgress ( false ) ; }
public void onSuccess ( ) { plant . setOnline ( new OnlineState ( plant , newId ) ) ; }
private static boolean isRoundedAvatars ( ) { return android . os . Build . VERSION . SDK_INT >= android . os . Build . VERSION_CODES . LOLLIPOP ; }
public com . coinomi . core . protos . Protos . Wallet getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . Wallet . getDefaultInstance ( ) ; }
public int getIterations ( ) { return getIntValue ( R . string . settings_key_auth_iterations , Constants . PBKDF2_DEFAULT_ITERATIONS ) ; }
public void updateUI ( ) { final EventListAdapter evl = new EventListAdapter ( getContext ( ) , mEvents ) ; recyclerView . setAdapter ( evl ) ; Log . v ( "Recycler" , "Hello" ) ; recyclerView . scrollToPosition ( 0 ) ; }
public void onSearchExpand ( ) { searching = true ; listView . setVisibility ( View . GONE ) ; mapViewClip . setVisibility ( View . GONE ) ; searchListView . setVisibility ( View . VISIBLE ) ; searchListView . setEmptyView ( emptyTextLayout ) ; }
public void onAnimationEnd ( Object animator ) { onDrawerAnimationEnd ( true ) ; }
public void setId ( long id ) { this . id = id ; }
public static boolean onFreePlan ( SiteModel site ) { return site . getPlanId ( ) == PlansConstants . FREE_PLAN_ID ; }
public void setPrimaryItem ( ViewGroup container , int position , Object object ) { super . setPrimaryItem ( container , position , object ) ; if ( object instanceof Fragment ) { mCurFragment = ( Fragment ) object ; } }
public void updateProState ( ) { if ( adView != null ) adView . setVisibility ( IABService . inst ( ) . getPurchaseCached ( IABService . IAB_PRO_MODE ) != null ? View . GONE : View . VISIBLE ) ; }
public Collection < Word > getWordsBeginWith ( String begin ) { String url = URL + "begin/" + begin ; return getWords ( url ) ; }
private static int floorMod ( int x , int y ) { return x - floorDiv ( x , y ) * y ; }
public boolean onCreate ( ) { service = ( DalDicService ) getContext ( ) . getApplicationContext ( ) ; return true ; }
public boolean userIsLogged ( boolean canOpenActivity ) { if ( me == null || ! ServiceGenerator . have42Token ( ) ) { if ( canOpenActivity ) MainActivity . openActivity ( this ) ; return false ; } return true ; }
public void put ( String key , T entry ) { synchronized ( _lock ) { _entries . put ( key , new Pair <> ( new Date ( ) , entry ) ) ; } }
public static void start ( Context context , BingWallpaperImage item , Bundle bundle ) { Intent intent = new Intent ( context , WallpaperDetailActivity . class ) ; intent . putExtra ( "image" , item ) ; ActivityCompat . startActivity ( context , intent , bundle ) ; }
private void initEdgeDistance ( ) { if ( getResources ( ) . getBoolean ( R . bool . isTablet ) ) { minLeftEdgeDistance = 0 ; } else { minLeftEdgeDistance = ( ( NewsReaderListActivity ) getActivity ( ) ) . getEdgeSizeOfDrawer ( ) ; } }
public String getSender ( ) { return sender ; }
private void resumeWikiQueue ( ) { Intent i = new Intent ( getActivity ( ) , WikiService . class ) ; i . putExtra ( QueueService . COMMAND_EXTRA , QueueService . COMMAND_RESUME ) ; getActivity ( ) . startService ( i ) ; }
public void onClick ( View view ) { fingerprintView . cancel ( ) ; if ( fingerprintDialogSecureCallback != null ) { fingerprintDialogSecureCallback . onAuthenticationCancel ( ) ; } else { fingerprintDialogCallback . onAuthenticationCancel ( ) ; } dialog . cancel ( ) ; }
public void run ( ) { clockView . setTime ( System . currentTimeMillis ( ) ) ; mHandler . postDelayed ( mRunnable , 1000 ) ; }
public Measure ( int _number , double _distance ) { this . number = _number ; this . distance = _distance ; }
public Completable delete ( int accountId , int audioId , int ownerId ) { return networker . vkDefault ( accountId ) . audio ( ) . delete ( audioId , ownerId ) . toCompletable ( ) ; }
public void ignoreInvalidCancel ( ) { long now = currentTimeMillis ( ) ; queue . add ( new Reminder ( 1 , now , TYPE_DUE ) ) ; queue . cancel ( 2 ) ; verify ( jobManager ) . schedule ( TAG , now ) ; }
public int getCount ( ) { return model != null ? model . getDaysCount ( ) : 1 ; }
public void run ( ) { hideLogoutProgress ( ) ; }
public void setOnStepClicked ( @ NonNull StepsAdapter . OnStepClicked onStepClicked ) { mOnStepClickedListener = onStepClicked ; }
public int computeVerticalScrollRange ( RecyclerView . State state ) { return computeScrollRange ( state ) ; }
public boolean canSignVerifyMessages ( ) { return false ; }
public String getNextAlarmTime ( ) { return mRealmService . getNextAlarm ( ) ; }
public void onSignOut ( @ NonNull AuthState . SignedOut event ) { Services . tasks . removeType ( TaskTypes . trackUpload ) ; }
public void setUp ( ) { testable = new PreferencesInteractorImpl ( ) ; sourceRepository = mock ( ISourcesRepository . class ) ; testable . repository = sourceRepository ; }
public AddEventFragment withDate ( String date ) { query += " & date = " + date ; return this ; }
public void setUpCredentials ( ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( getTargetContext ( ) ) ; preferences . edit ( ) . putString ( "user_id" , BuildConfig . TEST_USER_ID ) . putString ( "user_key" , BuildConfig . TEST_USER_KEY_READONLY ) . commit ( ) ; }
public boolean validateFields ( int position ) { OnValidateFieldsListener c = ( ( SendFragmentNew . SpendPagerAdapter ) getAdapter ( ) ) . getFragment ( position ) ; return c . onValidateFields ( ) ; }
public AboutBuilder addLicenseAction ( Intent intent ) { return addLicenseAction ( util . clickIntent ( intent ) ) ; }
public static Builder newBuilder ( org . thoughtcrime . securesms . backup . BackupProtos . SqlStatement prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public static long getCombinedChildId ( long groupId , long childId ) { return ExpandableAdapterHelper . getCombinedChildId ( groupId , childId ) ; }
public void setSplashPath ( String path ) { settingsProvider . getGeneralSettings ( ) . save ( KEY_SPLASH_PATH , path ) ; Preference splashPathPreference = findPreference ( KEY_SPLASH_PATH ) ; splashPathPreference . setSummary ( path ) ; }
public void run ( ) { SubstFragment frag = ( SubstFragment ) gg . activity . mContent ; if ( frag != null ) { frag . updateTime ( gg . plans . loadDate ) ; } }
public void exchangeFailed ( ) { sCurrency . setSelection ( 0 , true ) ; double amountXmr = Double . parseDouble ( Wallet . getDisplayAmount ( unlockedBalance ) ) ; tvBalance . setText ( Helper . getFormattedAmount ( amountXmr , true ) ) ; hideExchanging ( ) ; }
public void sortsSubredditsNoExtras ( ) { assertThat ( UserSubscriptions . sortNoExtras ( subreddits , false ) , is ( new ArrayList <> ( Arrays . asList ( "frontpage" , "random" , "friends" , "mod" , "aaa" , "xyy" , "xyz" ) ) ) ) ; }
public PortScan setTimeOutMillis ( int timeOutMillis ) { if ( timeOutMillis < 0 ) throw new IllegalArgumentException ( "Times cannot be less than 0" ) ; this . timeOutMillis = timeOutMillis ; return this ; }
private static String getProcessInfo ( ) { return "Process id : " + Process . myPid ( ) + " Thread id : " + Thread . currentThread ( ) . getId ( ) + " " ; }
public LoginScreenPresenter ( LoginScreenActivity activity , LoginScreenContract . View view ) { mView = view ; mActivity = activity ; mUserService = RestClient . getInstance ( ) . getSetupService ( ) ; mProfileRepository = new ProfileRepository ( ) ; mKeySettingsRepository = new KeySettingsRepository ( ) ; }
public LiveData < SkillEntity > load ( int skillId ) { return mDataRepository . getDatabase ( ) . skillDao ( ) . load ( skillId ) ; }
public Observable < List < LocationRecord >> getTeamLocationRecordsFromDatabase ( ) { return mDatabaseHelper . getLocationRecordList ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . login , menu ) ; return true ; }
public void goToWalletDetails ( ) { if ( null != mViewPager ) { mViewPager . setCurrentItem ( 1 ) ; } refreshWalletAfter ( 6000 ) ; }
public void lookForServer ( Listener listener ) { }
public void onOpenReblog ( int position ) { Notification notification = notifications . get ( position ) . getAsRight ( ) ; onViewAccount ( notification . getAccount ( ) . getId ( ) ) ; }
public String getDomain ( ) { throw new AssertionError ( "Not implemented" ) ; }
public void onLoaderReset ( Loader < List < WorkshopData >> loader ) { }
public T withSelectedTextColorRes ( int selectedColorRes ) { this . selectedTextColor = ColorHolder . fromColorRes ( selectedColorRes ) ; return ( T ) this ; }
private void dismissPickCardSourceDialogFragment ( ) { FragmentManager fragmentManager = getSupportFragmentManager ( ) ; Fragment pickCardDeviceDialogFragment = fragmentManager . findFragmentByTag ( PICK_CARD_DEVICE_DIALOG_FRAGMENT_TAG ) ; if ( pickCardDeviceDialogFragment != null ) fragmentManager . beginTransaction ( ) . remove ( pickCardDeviceDialogFragment ) . commit ( ) ; }
public void onIceCandidate ( IceCandidate iceCandidate ) { if ( alive && iceCandidate != null ) { Log . d ( TAG , "Got ICE candidate : " + iceCandidate ) ; sendMessage ( What . PC_ICE_CANDIDATE , 0 , 0 , iceCandidate ) ; } }
public String getUserImageUrl ( ) { return getUserImagePath ( ) + getUserImageName ( ) ; }
public static Drawable getTintedVectorDrawable ( @ NonNull Context context , @ DrawableRes int id , @ ColorInt int color ) { return TintHelper . createTintedDrawable ( getVectorDrawable ( context . getResources ( ) , id , context . getTheme ( ) ) , color ) ; } */
public StorageProgressBarWrapper ( Context context ) { super ( context ) ; init ( context ) ; }
public void run ( ) { getGlobalState ( ) . getTaskManager ( ) . launchTask ( "recopyAndroidJarTask" , false , null , false , new CopyAndroidJarTask ( ) ) ; }
public void onFailure ( Call < ResKavaSwapSupply2 > call , Throwable t ) { Toast . makeText ( getContext ( ) , R . string . error_network_error , Toast . LENGTH_SHORT ) . show ( ) ; }
private void getShuyookhData ( ) { if ( disposable != null ) { disposable . dispose ( ) ; } disposable = AudioManagerUtils . shuyookhDownloadObservable ( basePath , qariItems ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribeWith ( mOnDownloadInfo ) ; }
private void showProgress ( ) { ProgressBar progress = ( ProgressBar ) findViewById ( R . id . progress_loading ) ; if ( progress != null ) { progress . setVisibility ( View . VISIBLE ) ; } }
private void thenShouldHaveFortyForecastDataElements ( ) { assertEquals ( 40 , mModel . size ( ) ) ; mForecastData = ( ForecastData ) mModel . get ( 0 ) ; }
private double cumTogallon ( double num ) { return num * 264 . 172 ; }
public void setIndeterminateTintList ( @ Nullable ColorStateList tint ) { logProgressBarTintWarning ( ) ; super . setIndeterminateTintList ( tint ) ; }
public PorterDuff . Mode getProgressTintMode ( ) { logProgressBarTintWarning ( ) ; return super . getProgressTintMode ( ) ; }
public void addLength ( int lengthToAdd ) { stats [ INDEX_LENGTH ] += lengthToAdd ; }
private void showChangeCredentialsDialog ( ) { ChangeCredentialsDialog fragment = ChangeCredentialsDialog . newInstance ( ) ; fragment . show ( getSupportFragmentManager ( ) , "dialog" ) ; }
public void notice ( ) { super . notice ( ) ; yell ( Game . getVar ( R . string . DM300_Info3 ) ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof RandomPicksFragmentListener ) { mListener = ( RandomPicksFragmentListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnFragmentInteractionListener" ) ; } }
public AudioWidget createWidget ( FormEntryPrompt prompt ) { return new AudioWidget ( widgetActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) , questionMediaManager , audioPlayer , recordingRequester , audioFileRequester , recordingRequester ) ; }
public void run ( ) { FileLog . e ( "tmessages" , "set last online from other device = " + time ) ; lastOnlineFromOtherDevice = time ; }
public void setUsername ( String username ) { mPreferences . edit ( ) . putString ( KEY_USERNAME , username ) . apply ( ) ; }
public void onFailure ( Call < Friends > call , Throwable t ) { setButtonFriends ( - 1 ) ; }
public static void resetStatsWidgetsKeys ( ) { remove ( PrefKey . STATS_WIDGET_KEYS_BLOGS ) ; }
public void attachView ( ConverterContract . View view ) { this . view = view ; if ( view != null ) { view . setTitle ( "Krypto Converter" ) ; } loadConversionRate ( ) ; }
public static com . coinomi . core . protos . Protos . Tag parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public ArrayList < Song > getPlayingQueue ( ) { return playingQueue ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; if ( getActivity ( ) != null ) getActivity ( ) . setTitle ( "Clubs" ) ; }
public static TilesCache forSatellite ( ) { return null ; }
public void onDrawerOpened ( View drawerView ) { }
public T withTextColor ( int textColor ) { this . textColor = ColorHolder . fromColor ( textColor ) ; return ( T ) this ; }
public void onCompletion ( ) { super . onCompletion ( ) ; FollowingUpdateRequestHandler . this . onCompletion ( ) ; }
public void run ( ) { startService ( new Intent ( MainActivity . this , SyncronisationService . class ) ) ; }
public String getStringId ( ) { return getStringId ( this . parentId , this . subparentId , this . type ) ; }
public long id ( String name , boolean create ) { return id ( name , create , defaultDeck ) ; }
public void onFoldingBack ( UnfoldableView unfoldableView ) { mListTouchInterceptor . setClickable ( true ) ; }
public Item checkItem ( Item src ) { for ( Item item : this ) { if ( item == src ) { return item ; } } return CharsList . DUMMY_ITEM ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( context , user ) . subscribe ( feed . getUrl ( ) , feed . getChannel ( ) , false ) ; finish ( ) ; }
public void onLocationChanged ( Location location ) { mLastLocation = location ; updateDisplay ( ) ; }
public long get ( int i , int j ) { return savedScores [ i ] [ j ] ; }
private boolean shouldBeMonitoringMedia ( ) { return mSipCall != null && mSipCall . getIsCallConnected ( ) ; }
public PhotoSizes setZ ( String z ) { this . z = z ; return this ; }
public void call ( Subscriber < ? super Void > subscriber ) { this . subscriber = subscriber ; subscriber . add ( new MainThreadSubscription ( ) { @ Override protected void onUnsubscribe ( ) { OnSubscribeClickListener . this . subscriber = null ; } } ) ; }
public int invertColor ( int color ) { return ( 0xFFFFFF - color ) | 0xFF000000 ; }
public Attr ( ) { mScaleXY = 1 ; mScaleDeltaTranslate = 0 ; upInterpolator = downInterpolator = 4 ; upDuration = 400 ; downDuration = 500 ; initDuration = 1000 ; }
private void clear ( ) { mLastSeen = 0 ; mVersion = null ; }
public EducationAdapter ( EducationOnClickCallback callback ) { this . educationOnClickCallback = callback ; }
public void die ( NamedEntityKind cause ) { super . die ( cause ) ; Statistics . piranhasKilled ++ ; Badges . validatePiranhasKilled ( ) ; }
public void onClick ( View view ) { if ( mediaSelectorListener != null ) { mediaSelectorListener . onYoutubeVideoOptionSelected ( ) ; } }
private void load ( final boolean force ) { thread . run ( ( ) -> load ( force , null ) ) ; }
public void setUp ( ) throws Exception { mMainPresenter = new MainPresenter ( mMockDataManager , mMockErrorHandler ) ; mMainPresenter . attachView ( mMockMainMvpView ) ; }
public CallNoButtonAnim ( FunnyDisplay display ) { super ( display ) ; }
private void initAdapter ( ) { adapter = createAdapter ( ) ; adapter . registerAdapterDataObserver ( new RecyclerView . AdapterDataObserver ( ) { @ Override public void onChanged ( ) { super . onChanged ( ) ; checkIsEmpty ( ) ; } } ) ; checkIsEmpty ( ) ; }
public static List < TetroidRecord > getFavoritesRecords ( ) { return instance . mFavoritesRecords ; }
public long setRatioInfo ( long inSize , long outSize ) { this . inSize = inSize ; this . outSize = outSize ; publishProgress ( " - R" , "" ) ; return 0 ; }
public Person getPerson ( ) { return new Person ( getNames ( ) , getGender ( ) , getBirthdate ( ) , getBirthdateEstimated ( ) , getAddresses ( ) , getAttributes ( ) , getPhoto ( ) , getCauseOfDeath ( ) , getDead ( ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; getMenuInflater ( ) . inflate ( R . menu . edit_activity , menu ) ; return true ; }
public int getRandom ( ) { return mRandom ; }
public void postAttack ( Char hero , Char tgt ) { }
public void setAudioBarListener ( AudioBarListener listener ) { mAudioBarListener = listener ; }
public void setImageResource ( int resId ) { setImageDrawable ( Compat . getDrawable ( getContext ( ) , resId ) ) ; }
private void bindAllFields ( ) { bindBalance ( ) ; bindShopOpenStatus ( ) ; bindNotice ( ) ; }
public void onRefresh ( ) { new RefreshInbox ( currentUser , getActivity ( ) , InboxFragment . this , Constants . INBOX ) . execute ( ) ; }
public Path getPath ( ) { return path ; }
private boolean isVacant ( int junctionNo , Junction junctionsArray [ ] ) { if ( junctionsArray [ junctionNo ] . getOccupiedBy ( ) == null || junctionsArray [ junctionNo ] . getOccupiedBy ( ) . equals ( "" ) ) { return true ; } return false ; }
public PlacesAutoCompleteAdapter ( Context context , int textViewResourceId ) { super ( context , textViewResourceId ) ; ioFacade = new TravelerIoFacadeImpl ( context ) ; }
public void saveCredentialsPreferences ( String userName , String password , PropertyManager propertyManager ) { generalSettings . save ( GeneralKeys . KEY_USERNAME , userName ) ; generalSettings . save ( GeneralKeys . KEY_PASSWORD , password ) ; propertyManager . reload ( ) ; }
private int getSize ( Version version ) { int result = 0 ; for ( ResultNode resultNode : this ) { result += resultNode . getSize ( version ) ; } return result ; }
public void onStart ( ) { super . onStart ( ) ; if ( ! AccountTool . isAnyAccountExist ( this ) ) AccountTool . askForAccount ( this , this ) ; }
public AnimatableValue < PointF > getPosition ( ) { return position ; }
public void onViewResume ( ) { getView ( ) . startService ( ) ; internalOnStateChanged ( false ) ; updateButtonChangeStateEnabled ( ) ; TimeManager . INSTANCE . addListener ( timeManagerListener ) ; }
public void give_magnitude_return_magnitud_color ( ) { assertEquals ( colorEsperado , QuakeUtils . getMagnitudeColor ( magnitud , false ) ) ; }
public Story call ( ) { HexApplication application = ( HexApplication ) getApplication ( ) ; StoryService service = new StoryService ( application . getRequestQueue ( ) , application . getApiBaseUrl ( ) ) ; return service . getStory ( getStoryId ( ) ) ; }
private void createNotificationChannel ( Context context , String id ) { nc = new NotificationChannel ( id , context . getString ( R . string . app_name ) , NotificationManager . IMPORTANCE_DEFAULT ) ; getNotificationManager ( context ) . createNotificationChannel ( nc ) ; }
private void closeToolbar ( Activity activity ) { anim . fadeOut ( R . id . toolbar , 0 , 100 , activity ) ; fab . showFab ( 100 , 200 ) ; isToolbarVisible = false ; }
public boolean hasMasterKey ( ) { return ( ( bitField0_ & 0x00000004 ) == 0x00000004 ) ; }
public void goToSignUpFragment ( ) { AuthActivity authActivity = ( AuthActivity ) getActivity ( ) ; authActivity . replaceFragment ( SignUpFragment . getInstance ( ) , false ) ; }
private double mtoinch ( double num ) { return num * 39 . 370 ; }
public String getR ( ) { return r ; }
public static boolean allowDebugReporting ( ) { return false ; }
public void replace ( Range range , CharSequence text ) { replace ( range . index , range . length , text ) ; }
public void run ( ) { updateDialogsWithDeletedMessagesInternal ( messages , channelId ) ; }
public void onSuccess ( Void aVoid ) { boolean result = mRemoteConfig . activateFetched ( ) ; Log . i ( TAG , "Remote config data fetched ( " + result + " ) " ) ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . SqlStatement parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void testLoadingTextZh ( ) throws IOException { onBookFile ( "html/zh . org" ) . onLoad ( ) . onGet ( ) ; }
public static void removeNote ( Note note ) { adapter . remove ( note ) ; saveChanges ( adapter ) ; }
public static int getAutoDayNightMode ( Context context ) { return getTheme ( context , false ) instanceof ThemePreference . DayNightSpec && get ( context , R . string . pref_daynight_auto , false ) ? AppCompatDelegate . MODE_NIGHT_AUTO : AppCompatDelegate . MODE_NIGHT_NO ; }
public void onClick ( View v ) { doRating ( ) ; }
public ToggleButton ( Context context ) { super ( context ) ; init ( ) ; }
public void testEventWriter ( ) { mWriter . write ( mEvent , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_EVENTS , null , mEvent . getParams ( ) ) ; }
public boolean hasInputTimestamp ( ) { return ( ( bitField0_ & 0x00000020 ) == 0x00000020 ) ; }
public void removeItemByPosition ( int position ) { if ( mDrawerBuilder . checkDrawerItem ( position , false ) ) { mDrawerBuilder . getAdapter ( ) . removeDrawerItem ( position ) ; } }
public void getMessagesTest ( ) { Integer limit = null ; Integer since = null ; }
public void onReceive ( Context context , Intent intent ) { long enqueId = intent . getLongExtra ( DownloadManager . EXTRA_DOWNLOAD_ID , - 1 ) ; updateBookDownloadStatus ( context , enqueId ) ; }
public Rect getDrawRegion ( ) { return drawRegion ; }
private void createNotification ( ) { createRemoteViews ( ) ; startForeground ( NOTIFICATION_ID , buildNotification ( ) ) ; }
public Item ( Context context ) { this . context = context ; }
public void setMealId ( int mealId ) { this . mealId = mealId ; }
private boolean isCurrentFilter ( String filter ) { if ( TextUtils . isEmpty ( filter ) && TextUtils . isEmpty ( mCurrentFilter ) ) { return true ; } return filter . equalsIgnoreCase ( mCurrentFilter ) ; }
public static int getThemeResFromPrefValue ( String themePrefValue ) { switch ( themePrefValue ) { case "dark" : return R . style . Theme_Phonograph ; case "black" : return R . style . Theme_Phonograph_Black ; case "light" : default : return R . style . Theme_Phonograph_Light ; } }
public void action ( String walletName , String password ) { startDetails ( walletFile , password , GenerateReviewFragment . VIEW_DETAILS ) ; }
public void setTextStyle ( @ TextStyle int style ) { textStyle ( style ) ; invalidate ( ) ; }
private static Bitmap decodeBitmapStream ( InputStream is ) { BitmapFactory . Options options = new BitmapFactory . Options ( ) ; options . inPreferredConfig = Bitmap . Config . ALPHA_8 ; return BitmapFactory . decodeStream ( is , null , options ) ; }
public MainActivity getActivity ( ) { return this . activity ; }
public static String get ( String key , String _default ) { return prefs . getString ( key , _default ) ; }
public Builder setLockTime ( int value ) { bitField0_ | = 0x00000008 ; lockTime_ = value ; onChanged ( ) ; return this ; }
public static void checkWidgetUpdateAlarm ( Context context ) { boolean hasActiveUpdates = PendingIntent . getBroadcast ( context , RC_WIDGET_UPDATE , getUpdateIntent ( context ) , PendingIntent . FLAG_NO_CREATE ) != null ; if ( ! hasActiveUpdates ) { enableWidgetUpdate ( context ) ; } }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . RequestRemoveSongs prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onCancelled ( DatabaseError error ) { Log . w ( LogTag , "Failed to read value . " , error . toException ( ) ) ; }
private void populate ( ) { float initY = rand . nextFloat ( ) * ( screenHeight - screenSand - height ) + height ; bodyDst . set ( screenWidth , initY - height , screenWidth + width , initY ) ; }
public void onSaveChangesClicked ( ) { saveForm ( true , InstancesDaoHelper . isInstanceComplete ( false , settingsProvider . getGeneralSettings ( ) . getBoolean ( KEY_COMPLETED_DEFAULT ) ) , null , true ) ; }
public void setSelectedCurrency ( String currencyCode ) { this . currencyCode = currencyCode ; }
public TermuxSharedPreferences getPreferences ( ) { return mPreferences ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View v = inflater . inflate ( R . layout . qrcode_scanner_fragment , container , false ) ; ButterKnife . bind ( this , v ) ; initQrCodeScanner ( ) ; return v ; }
private void updateLayers ( ) { getLaserProfile ( ) ; editLayer . loadLaser ( laserProfile ) ; Services . cloud . lasers . layers . update ( editLayer ) ; }
public void onFailure ( ) { olderCallback . onFailure ( ) ; callback . onFailure ( ) ; Log . d ( "JOINED CALLBACK" , "onFailue ( ) " ) ; }
public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { itemLongClickListener = listener ; }
public void onFail ( int errorCode , String msg ) { Log . d ( TAG , "sendEncryptedRandomAuthNumber failed" ) ; }
private void onMovieSearchSuccess ( List < Movie > movies ) { loadedMovies . clear ( ) ; loadedMovies = new ArrayList <> ( movies ) ; if ( isViewAttached ( ) ) { view . showMovies ( loadedMovies ) ; } }
public void terminate ( ) { EventBus . getDefault ( ) . unregister ( this ) ; }
public static final String getBodyURL ( Body body ) { return WEB_HOST + "org/" + body . getBodyStrID ( ) ; }
public POSTServiceRequestData setAddress ( String address ) { tryToAddString ( ADDRESS_TAG , address ) ; return this ; }
public void setKinderwagen ( boolean kinderwagen ) { this . _kinderwagen = kinderwagen ; }
public static Location getCurrentLocationInfo ( ) { return currentLocationInfo ; }
public void onStop ( ) { EventBus . getDefault ( ) . unregister ( this ) ; super . onStop ( ) ; doUnsubscribeFromBtStatus ( ) ; }
public void setSortMode ( String sortMode ) { SharedPreferences . Editor editor = m_prefs . edit ( ) ; editor . putString ( "headlines_sort_mode" , sortMode ) ; editor . commit ( ) ; } */
public String desc ( ) { return Game . getVar ( R . string . PotionOfStrength_Info ) ; }
private void launchHomeScreen ( ) { prefManager . setFirstTimeLaunch ( false ) ; startActivity ( new Intent ( OnBoardingActivity . this , LoginActivity . class ) ) ; finish ( ) ; }
public boolean isDirectory ( ) { throwClosed ( ) ; return this . isDirectory ; }
public void failed ( ) { Toast . makeText ( main . getContext ( ) , main . getActivity ( ) . getResources ( ) . getString ( R . string . crypt_decryption_fail_password ) , Toast . LENGTH_LONG ) . show ( ) ; }
public void onSearchPerform ( String query ) { searchForPostsWithTag ( query , false ) ; }
public Completable refreshStations ( ) { return checkInternet ( ) . andThen ( search ( true ) ) . toCompletable ( ) ; }
public ClementinePbParser ( ) { mPlaylistManager = App . mClementine . getPlaylistManager ( ) ; }
public static void loadPhotos ( final Context c , List < Submission > submissions ) { for ( Submission submission : submissions ) { loadPhoto ( c , submission ) ; } }
public void dialogIsNotCancellable ( ) { FragmentScenario < RefreshFormListDialogFragment > fragmentScenario = DialogFragmentTest . launchDialogFragment ( RefreshFormListDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( false ) ) ; } ) ; }
public void testGetMainPlate ( ) throws Exception { String mainPlatePattern = "TAB" ; Place malbork = createPlaceWithPlates ( mainPlatePattern , "BAT" , "GAP" ) ; LicensePlate mainPlate = malbork . getMainPlate ( ) ; assertEquals ( mainPlatePattern , mainPlate . getPattern ( ) ) ; }
public void onSaveInstanceState ( Bundle savedInstanceState ) { if ( preferencesManager . isShakeEnabled ( ) ) { shakeDetector . stop ( ) ; } super . onSaveInstanceState ( savedInstanceState ) ; }
public static void showMessage ( String s , int duration ) { Message . show ( context , s , duration ) ; }
private void init ( ) { this . binding = DataBindingUtil . setContentView ( this , R . layout . activity_info ) ; setColorsFromPhaseName ( ) ; initNotificationsToggle ( ) ; assignClickListeners ( ) ; registerForSunPhaseChanges ( ) ; }
public void attachView ( ClientReportCategoryMvpView mvpView ) { super . attachView ( mvpView ) ; }
public void setVisibility ( int visibility ) { mExternalVisibility = visibility ; applyVisibility ( ) ; }
public void setScoresOfQuiz ( int scoresOfQuiz ) { this . scoresOfQuiz = scoresOfQuiz ; }
public MatchFilterVisitor ( I instance ) { this . instance = instance ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getSupportMenuInflater ( ) . inflate ( R . menu . activity_export , menu ) ; return true ; }
public boolean isHordeNextVisible ( ) { return hordeProgress != null ; }
public String [ ] getLines ( ) { return lines ; }
private void disableVectors ( ) { mEditor . putBoolean ( Constants . STATUS_ENABLE_BG_SERVICE , false ) ; mEditor . apply ( ) ; mService . setBackgroundService ( ) ; }
public double getAccuracy ( ) { return accuracy ; }
private void resendPendingMessages ( boolean retrying , boolean forcePending ) { resendPendingMessages ( retrying , forcePending , null ) ; }
public void shuffle ( ) { if ( colorChangeFrameSeq -- >= 0 ) { return ; } colorChangeFrameSeq = colorChangeFrameRate ; LinePaint . setColor ( randomColor ( ) ) ; PointPaint . setColor ( randomColor ( ) ) ; }
public Integer getCommentVerticalBarColor7 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_7 , getDefaultColor ( "#EE4602" , "#EE4602" , "#EE4602" ) ) ; }
public boolean winTest ( ) { for ( int i = 0 ; i <= getLastTableauID ( ) ; i ++ ) { if ( ! stacks [ i ] . isEmpty ( ) ) return false ; } return true ; }
public void reset ( ) { amount . setText ( null ) ; symbol . setText ( null ) ; type = null ; hint = null ; }
public boolean isArabicNames ( ) { return mPrefs . getBoolean ( Constants . PREF_USE_ARABIC_NAMES , false ) ; }
public void setTimestampEnd ( long timestamp ) { timestamp_end = new UnixTimestamp ( timestamp ) ; return ; }
public void setNotificationSettings ( String notificationSettings ) { this . notificationSettings = notificationSettings ; notificationList . clear ( ) ; for ( JsonElement element : JSONManager . getasJsonArray ( notificationSettings ) ) { notificationList . add ( element . getAsString ( ) ) ; } }
public Socket createSocket ( String host , int port ) throws IOException , UnknownHostException { return patch ( delegate . createSocket ( host , port ) ) ; }
public void onCommentsFetchError ( String error ) { if ( commentLoadingProgressBar != null ) { commentLoadingProgressBar . setVisibility ( View . GONE ) ; } if ( emptyCommentsCaption != null ) { emptyCommentsCaption . setText ( R . string . comment_fetch_error_text ) ; } }
public CategoryResponse ( String code , Map < String , String > names ) { this . code = code ; this . names = names ; }
private void drawProgress ( float progress , float max ) { mCircleSweepAngle = ( progress * 360 ) / max ; mCircleFinishAngle = ( Constant . GET_READY_SECONDS * 360 ) / max ; invalidate ( ) ; }
public AddField ( Model model , String fieldName ) { this . model = model ; this . fieldName = fieldName ; }
public void onSuccess ( Pair < MapPosition , LocationClusterItem > pair ) { view . restoreMapPosition ( pair . first ) ; view . selectClusters ( Collections . singleton ( pair . second ) ) ; }
public String getApiBaseUrl ( ) { return authenticator . getResource ( AccountProperty . API_BASE_URL , String . class ) ; }
public void setRangeUpperBoundaryMode ( BoundaryMode rangeUpperBoundaryMode ) { this . rangeUpperBoundaryMode = rangeUpperBoundaryMode ; }
public void dispatchFinished ( MoveAnimationInfo info , RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchMoveFinished ( " + item + " ) " ) ; } mItemAnimator . dispatchMoveFinished ( item ) ; }
public void handleFrameworkIndex ( RoutingContext routingContext ) { routingContext . response ( ) . setStatusCode ( NO_CONTENT . code ( ) ) . end ( ) ; }
public DataPaths getNext ( ) { return new DataPaths ( selectNextFromList ( sounds , sounds_cnt ) , selectNextFromList ( images , images_cnt ) , selectNextFromList ( voices , voices_cnt ) , line_drawing ) ; }
public static Intent startBookFilePickActivity ( Context context ) { return new Intent ( context , BookFilePickActivity . class ) ; }
public BaseDialogViewHolder . OnLongItemClickListener getOnLongItemClickListener ( ) { return onLongItemClickListener ; }
public void onHighlightedTypeClicked ( View view ) { Tags . resetHighlightedType ( ) ; Configuration . setHighlightedType ( - 1 ) ; mMap . clearMap ( ) ; mHighlightedTypeView . setVisibility ( View . GONE ) ; }
private void loadSchedule ( ) { try { schedule = pm . getCoreManager ( ) . getSchedule ( scheduleIndex ) ; initStageB ( ) ; } catch ( Exception e ) { Center . exit ( this , SplashActivity . class ) ; } }
public void setSupportActionBar ( @ Nullable Toolbar _toolbar ) { getDelegate ( ) . setSupportActionBar ( _toolbar ) ; }
public Integer getNumCorrect ( ) { return numCorrect ; }
public static File getOutgoingPhotoFile ( ) throws IOException { return getOutgoingPhotoFile ( new Date ( ) ) ; }
public void testIsNOTWPCOM7 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( notWpcomAddress3 ) ) ; }
public void handleFirebaseSignInResult ( boolean signedIn ) { mView . setProgressIndicator ( false ) ; if ( signedIn ) { mView . showItemsUi ( ) ; mView . updateWidget ( ) ; } else { mView . showSignInButton ( true ) ; mView . showFailMessage ( ) ; } }
public void addRow ( Cursor cursor ) { addRow ( CalendarQueryRow . fromCursor ( cursor ) ) ; }
public String getPlayerAPIToken ( ) { return prefs . getString ( "pref_api_token" , "" ) ; }
private void requestMissingPermissions ( ) { FragmentCompat . requestPermissions ( this , new String [ ] { Manifest . permission . RECORD_AUDIO , Manifest . permission . CAMERA } , MY_PERMISSIONS_REQUEST_WEBRTC ) ; }
private static String getStr ( JSONObject obj , String name ) { String str = null ; try { str = obj . getString ( name ) ; } catch ( JSONException e ) { } return str ; }
public Operator take ( Object operator ) { if ( operator . toString ( ) . equals ( " + " ) ) return this ; return next ( ) ; }
public EventBuilder setTags ( String [ ] tags ) { this . tags = tags ; return this ; }
private void thenBuilderShouldSetAction ( final HitBuilders . EventBuilder eventBuilder ) { new Verifications ( ) { { eventBuilder . setAction ( withEqual ( mAnalyticsEvent . additionalValue ) ) ; } } ; }
public Void call ( ) throws Exception { blurIteration ( _src , _w , _h , _radius , _totalCores , _coreIndex , _round ) ; return null ; }
public boolean isCompleted ( ) { return this . getCurrentProgress ( ) >= this . getTimesPerDuration ( ) ; }
public List < TaskEntry > queryEventEntries ( ) { return createEntryList ( getTaskProvider ( ) . queryEvents ( ) ) ; }
public ArrayList < IDrawerItem > getOriginalDrawerItems ( ) { return originalDrawerItems ; }
public String getRam ( ) { return ram ; }
public void onDialogNegativeClick ( DialogFragment dialog ) { }
private boolean isPassCorrect ( ) { return edChave . getText ( ) . toString ( ) . equals ( PreferenceManager . getDefaultSharedPreferences ( this ) . getString ( SettingsActivity . PREF_KEY , "" ) ) ; }
public void onChanged ( @ Nullable Tts . TtsState ttsState ) { timeUtteranceCompleted = System . currentTimeMillis ( ) ; }
public void removeVideoSink ( VideoSink sink ) { sendMessage ( What . REMOVE_VIDEO_SINK , 0 , 0 , sink ) ; }
public void onClick ( View view ) { if ( bottomSheetBehavior . getState ( ) == BottomSheetBehavior . STATE_COLLAPSED ) { bottomSheetBehavior . setState ( BottomSheetBehavior . STATE_EXPANDED ) ; } else { bottomSheetBehavior . setState ( BottomSheetBehavior . STATE_COLLAPSED ) ; } }
public void onDestroy ( ) { mDispatcher . unregister ( this ) ; super . onDestroy ( ) ; }
public void onAdFailedToLoad ( ) { MixpanelManager . getInstance ( ) . track ( MixpanelManager . EVENT_AD_FAILED_TO_LOAD ) ; }
public SettingGroup ( ) { children = new ArrayList < String > ( ) ; childGroups = new HashMap < String , SettingGroup > ( ) ; }
public void onEventMainThread ( ReaderEvents . UpdatePostsStarted event ) { if ( isFinishing ( ) ) return ; mIsRequestingMorePosts = true ; mProgress . setVisibility ( View . VISIBLE ) ; }
public < T extends ViewModel > T create ( Class < T > modelClass ) { return ( T ) new AddMovieViewModel ( mDb ) ; }
public void testDecryptUnencrypted ( ) { String result = Security . decrypt ( LOREM , PASS ) ; assertFalse ( result . length ( ) == 0 ) ; }
public void setRecipeName ( ArrayList < String > filteredRecipeName ) { this . recipeNames = filteredRecipeName ; }
public void sendToJSFeaturedImageId ( int mediaId ) { mWPAndroidGlueCode . onRequestFeaturedImageId ( mediaId ) ; }
public void setTitle ( String title ) { collapsingToolbar . setTitle ( title ) ; }
public static boolean hasHeadphoneTpaGain ( ) { return ( Utils . existFile ( TPA6165_SET_REG ) && Utils . existFile ( TPA6165_REGISTERS_LIST ) ) ; }
public float getFillLinePosition ( ILineDataSet dataSet , LineDataProvider dataProvider ) { return mChart . getAxisLeft ( ) . getAxisMinimum ( ) ; }
public void setTotalReviews ( String totalReviews ) { this . totalReviews = totalReviews ; }
public AboutFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; eventBus . register ( this ) ; }
public TetroidNode getNode ( ) { return node ; }
private BeaconListElement beaconToBeaconListElement ( Beacon beacon ) { BeaconListElement beaconListElement = new BeaconListElement ( beacon ) ; if ( beaconSaved ( beacon ) ) { beaconListElement . setSaved ( true ) ; } return beaconListElement ; }
private void updateToolbarScrollableState ( ) { setToolbarScrollable ( mAdapter . getCount ( ) > 1 && ( ! hasTabsInToolbar ( ) || mAppBarLocked ) ) ; }
public UploadObject setErrorText ( String errorText ) { this . errorText = errorText ; return this ; }
public List < StorageDomain . Status > getValues ( ) { return values ; }
public boolean isCancelled ( ) { return mCancelled ; }
public String getPassword ( ) { return password ; }
public static KeyPair generateKeyPair ( ) throws NoSuchAlgorithmException { KeyPairGenerator keyGen = KeyPairGenerator . getInstance ( "RSA" ) ; keyGen . initialize ( 2048 , new SecureRandom ( ) ) ; return keyGen . generateKeyPair ( ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { Preferences . setOfflineModeUsed ( ctx ) ; switchOfflineMode ( ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { PermissionUtils . requestForStoragePermission ( MainFragment . this ) ; }
private Attachment ( Parcel in ) { setId ( in . readInt ( ) ) ; setUri ( Uri . parse ( in . readString ( ) ) ) ; setMime_type ( in . readString ( ) ) ; }
public void startAutofocus ( ) { if ( mCameraHandler != null ) { mCameraHandler . removeCallbacks ( runAutoFocus ) ; mCameraHandler . postDelayed ( runAutoFocus , AUTO_FOCUS_DELAY ) ; } else { throw new RuntimeException ( "can't start autofocus" ) ; } }
public TvheadendTrackSelector ( ) { }
public FrameLayout getBaseLayout ( ) { return mBaseLayout ; }
public void onDenied ( Context context , ArrayList < String > deniedPermissions ) { super . onDenied ( context , deniedPermissions ) ; Toast . makeText ( ctx , R . string . noCalendarPermissions , Toast . LENGTH_LONG ) . show ( ) ; }
private GroupFitness ( Map < Person , MultiDayFitnessInterface > personMultiDayFitnessMap ) { this . personMultiDayFitnessMap = personMultiDayFitnessMap ; }
public void formOpened_whenManyEntriesInHistory_showsOnlyHighestValue ( ) { historyGenerator . generatePgeG11Bills ( 20 ) ; tester . skipCheckPricesDialogIfVisible ( ) . openForm ( Provider . PGE ) ; tester . autoCompleteContains ( "30" ) ; }
public void failed ( String message ) { Toast . makeText ( EditProfileActivity . this , getString ( R . string . message_remove_avatar_failed_fmt , message ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public String getAvatarUrl ( ) { return StringUtils . notNullStr ( avatarUrl ) ; }
public void italicButtonClicked ( View italic ) { AnimusMiscMethods . italic ( entryTextET ) ; }
public Class < ? extends Activity > getMainActivity ( ) { return mMainActivity ; }
public void onClick ( View view ) { mAPIButton . setEnabled ( false ) ; sendData ( ) ; mAPIButton . setEnabled ( true ) ; }
public void onCreateOptionsMenu ( Menu menu ) { }
public void onTaskError ( Throwable throwable ) { FlyveLog . e ( throwable . getMessage ( ) ) ; }
private boolean saveDefaultSettings ( ) { return saveSettings ( DEFAULT_MAX_LVL ) ; }
public void onActivityStarted ( MonitoredActivity activity ) { mDialog . show ( ) ; }
public void changeUserTag ( View view ) { getActivity ( ) . startActivity ( new Intent ( getActivity ( ) , ChooseUserTagActivity . class ) ) ; }
public TextSearchView ( Context context ) { super ( context ) ; setOnQueryTextListener ( this ) ; }
public void onClick ( View v ) { if ( Utils . runInputCheck ( email ) && Utils . runInputCheck ( password ) ) { new VerifyLoginTask ( ) . execute ( getStringFromEditText ( email ) , getStringFromEditText ( password ) ) ; } }
public void onClick ( View v ) { mainLayout . requestFocus ( ) ; hideSoftKeyboard ( ProgramAddEditActivity . this ) ; fieldSelectDialog ( "type" ) ; }
private void setupBloggingRemindersBottomSheet ( ) { if ( mBloggingRemindersPref == null || ! isAdded ( ) ) { return ; } mBloggingRemindersViewModel . onSettingsItemClicked ( mSite . getId ( ) ) ; }
public int buttonsColor ( ) { return R . color . intro_button_color ; }
public FixQueueIF < E > load ( ) { return this ; }
public static DataSource provideLocalSource ( @ NonNull LoaderManager manager , @ NonNull Context context ) { return new FakeRemoteDataSource ( ) ; }
public GpsReceiver getReceiver ( ) { return new GpsReceiver ( ) ; }
private void initDaysToPrefs ( ) { binding . daysToPrefs . setOnClickListener ( view -> showDaysToDialog ( ) ) ; binding . daysToPrefs . setValue ( mPrefs . getDaysToBirthday ( ) ) ; binding . daysToPrefs . setDependentView ( binding . birthReminderPrefs ) ; }
public Dictionary ( DictionaryDataFile file , Preferences . DictionaryType type , String path ) { this ( file , file . dictionaryAbbreviation , type , path ) ; }
public void onChanged ( Integer integer ) { if ( integer == ViewModelShop . EVENT_SHOP_DELETED ) { ViewHolderShopTypeTwo . this . adapter . notifyItemRemoved ( getLayoutPosition ( ) ) ; } }
public int getNoteId ( ) { return noteId ; }
public void setLabels ( BitmapDescriptor [ ] labels ) { this . labels = labels ; setChanged ( ) ; notifyObservers ( LABELS_PROPERTY ) ; }
public String getResultBlurb ( final Bundle bundle ) { return title . getText ( ) . toString ( ) . trim ( ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return mMonths [ ( int ) value ] ; }
public void showLoginError ( String message ) { progressDialog . dismiss ( ) ; Toast . makeText ( this , message , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onStop ( ) { super . onStop ( ) ; if ( getActivity ( ) instanceof StartScreen ) { ( ( StartScreen ) getActivity ( ) ) . setScrollMessageVisiblility ( false ) ; } }
public boolean isLocationPermissionChecked ( ) { return LocationPermissionChecked ; }
public void stop ( ) { go = false ; if ( mThread != null ) { try { mThread . interrupt ( ) ; mThread . join ( 500 ) ; } catch ( InterruptedException e ) { } mThread = null ; mEventScheduler = null ; } }
public void init ( ) { super . init ( ) ; dir = Uri . parse ( "file : fsResolver = new FakeFsModuleResolver ( ) ; fakeFs = new FileSystemFacadeImpl ( new FakeSysCall ( ) , fsResolver ) ; }
public boolean getKinderwagen ( ) { return this . _kinderwagen ; }
public void onActivityCreated ( Bundle savedInstanceState ) { Log . i ( TAG , "onActivityCreated" ) ; super . onActivityCreated ( savedInstanceState ) ; MainActivity . friend_list_fragment = this ; }
public void redrawItems ( ) { ( ( SavedListsAdapter ) mRecyclerView . getAdapter ( ) ) . replaceWith ( TinyListSQLHelper . getSqlHelper ( getActivity ( ) ) . getTaskLists ( false ) ) ; }
public List < TodoListHeader > getHeadersOfTodoListId ( String todoListUuid ) { List < TodoListHeader > headers = new ArrayList <> ( 1 ) ; headers . add ( alwaysSameHeader ) ; return headers ; }
public void setupArgs ( String accountId ) { getArguments ( ) . putString ( Constants . ARG_ACCOUNT_ID , accountId ) ; }
public void onClick ( View v ) { fragment . showPollVoteDialog ( p ) ; }
public Profile ( ) { this . avatarName = nameDefault ; this . avatarId = id_not_set ; this . gender = text_not_set ; this . ageRange = text_not_set ; this . bikeType = id_not_set ; this . bikeTypeId = id_not_set ; this . email = text_not_set ; }
public void moveRightInNet ( ) { setFalseNet ( zeroNet ) ; moveFigure ( ) ; resetNetAfterMoving ( figure . coordinatesInNet . x - 1 ) ; }
public LanguageAdapter . ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . language_list , viewGroup , false ) ; return new ViewHolder ( view ) ; }
public void onCanceled ( List < T > data ) { super . onCanceled ( data ) ; cleanUp ( data ) ; }
public void onClick ( View view ) { startWorkViewFragment ( subject ) ; }
public void setUserInfo ( User user ) { if ( user == null ) return ; mUser = user ; notifyItemChanged ( 0 ) ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "update settings due to resolution change" ) ; main_activity . updateForSettings ( "" , true ) ; }
public void filterPersonas ( @ NonNull GameType gameType ) { viewModel . filterPersonas ( gameType ) ; }
private String getFormListURL ( ) { String downloadListUrl = serverURL ; while ( downloadListUrl . endsWith ( "/" ) ) { downloadListUrl = downloadListUrl . substring ( 0 , downloadListUrl . length ( ) - 1 ) ; } downloadListUrl += formListPath ; return downloadListUrl ; }
public CommentFooterBinder ( Comment model ) { this . comment = model ; }
public void onCreate ( Bundle savedInstanceState ) { feedbackList = interactor . getFeedbackGivenByCurrentUser ( ) ; view . setFeedbackList ( feedbackList ) ; }
public List < Kd2Radical > getRadical ( ) { return radical ; }
public static Intent makeCreateIntent ( Context context , String repoOwner , String repoName ) { return new Intent ( context , IssueEditActivity . class ) . putExtra ( "owner" , repoOwner ) . putExtra ( "repo" , repoName ) ; }
public com . coinomi . core . protos . Protos . AddressStatus getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . AddressStatus . getDefaultInstance ( ) ; }
public void removeListener ( SharedPreferences . OnSharedPreferenceChangeListener listener ) { mSharedPref . unregisterOnSharedPreferenceChangeListener ( listener ) ; }
private void updateSlotBySelection ( ) { selectItem ( objectForSlot , index ) ; objectForSlot = null ; Game . scene ( ) . remove ( prompt ) ; }
private CalendarQueryRow setColumn ( String columnName , Object columnValue ) { mRow . put ( columnName , new TypedValue ( columnValue ) ) ; return this ; }
public String getFileName ( ) { return fileName ; }
public void setPublishedBy ( int publishedBy ) { this . publishedBy = publishedBy ; }
public Set < String > getBackupBroadcasts ( ) { return settings . getStringSet ( getResString ( R . string . settings_key_backup_broadcasts ) , Collections . < String > emptySet ( ) ) ; }
public void onDone ( ) { mOverlay . remove ( mGraphic ) ; }
private void initToolbar ( ) { setSupportActionBar ( toolbar ) ; }
public long getSpeed ( ) { return UNIT_SPRINTER_SPEED ; }
public float getFloat ( @ NonNull String key , float defaultValue ) throws WrongTypeException { return 0 ; }
public ServerAuthDialog clickRefreshWithAuthError ( ) { onView ( withId ( R . id . menu_refresh ) ) . perform ( click ( ) ) ; return new ServerAuthDialog ( rule ) . assertOnPage ( ) ; }
public void surfaceDestroyed ( SurfaceHolder holder ) { holder = null ; }
private void downloadTitles ( ) { downloadOfficialProjects ( wikiClient , titles ) ; downloadTeaserProjects ( wikiClient , titles ) ; downloadOLNProjects ( wikiClient , titles ) ; }
public DashboardFragmentActivityTest ( ) { super ( DashboardFragmentActivity . class ) ; }
public Record getItem ( int position ) { return super . getItem ( getCount ( ) - position - 1 ) ; }
private double kmtomi ( double num ) { return num * 0 . 621 ; }
public int hashCode ( ) { return Objects . hash ( name , ingredients , start , end ) ; }
public TagWriter writeTag ( Tag tag ) throws IOException { if ( outputStream == null ) { throw new IOException ( "output stream was null" ) ; } outputStream . write ( tag . toString ( ) ) ; outputStream . flush ( ) ; return this ; }
public void didReceivedNotification ( int id , int account , Object . . . args ) { if ( id == NotificationCenter . emojiDidLoaded ) { if ( emojiTextView != null ) { emojiTextView . invalidate ( ) ; } } }
public static synchronized RecentlyPlayedStore getInstance ( @ NonNull final Context context ) { if ( sInstance == null ) { sInstance = new RecentlyPlayedStore ( context . getApplicationContext ( ) ) ; } return sInstance ; }
public static String getServerURI ( Context context ) { return getString ( context , "pref_network_uri" , null ) ; }
public void onShowCustomEmptyView ( EmptyViewMessageType emptyViewMsgType ) { setEmptyTitleAndDescription ( EmptyViewMessageType . NETWORK_ERROR . equals ( emptyViewMsgType ) || EmptyViewMessageType . PERMISSION_ERROR . equals ( emptyViewMsgType ) || EmptyViewMessageType . GENERIC_ERROR . equals ( emptyViewMsgType ) ) ; }
public void onClick ( View v ) { if ( ! currentlySubbed ) { doSubscribe ( ) ; } else { doUnsubscribe ( ) ; } doSubscribeButtonText ( currentlySubbed , subscribe ) ; }
public int getCPUOffset ( ) { try { return mDeviceJson . getInt ( "cpu - offset" ) ; } catch ( JSONException ignored ) { return 1 ; } }
public boolean isChargingAnimation ( ) { return preferences . getBoolean ( "charging_animation" , true ) ; }
public long getFilterBy ( ) { return MapUtils . getMapLong ( mapRemote , ID_FILTER_BY , - 1 ) ; }
public void setMaxWidth ( float maxWidth ) { mMaxWidth = maxWidth ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . recent_songs_item , parent , false ) ; return new ViewHolder ( view ) ; }
public void handleEvent ( DcEvent event ) { int eventId = event . getId ( ) ; if ( eventId == DcContext . DC_EVENT_CHAT_MODIFIED || eventId == DcContext . DC_EVENT_CONTACTS_CHANGED ) { initializeExistingGroup ( ) ; } }
public boolean getChargeAlertEnabled ( ) { return mSharedPref . getBoolean ( CHARGE_ALERT_ENABLED , false ) ; }
public KeyboardNumberPicker create ( ) { return newInstance ( tag , theme , item , title , itemName , defaultValue ) ; }
public ArrayList < Events > getDayOneEvents ( ) { return dayOneEvents ; }
public void editComment ( IJumbleService service , String comment ) throws RemoteException { }
public Object execute ( Object o , Connection c ) { c . handler . sendEmptyMessage ( Connection . MESSAGE_BELLINC ) ; return null ; }
private void traverse ( BaseFtsEprNode node ) { if ( node != null ) { traverse ( node . leftChild ( ) ) ; stringRepresentation . append ( node . value ( ) ) ; traverse ( node . rightChild ( ) ) ; } }
public boolean onPrepareOptionsMenu ( Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; menu . findItem ( R . id . action_share_searchforum ) . setEnabled ( ! pageNavigation . getCurrentLinkIsEmpty ( ) ) ; updateShareAction ( ) ; return true ; }
public GncXmlExporter ( ExportParams params ) { super ( params , null ) ; }
public void didFinishLoadingFile ( FileLoadOperation operation , File finalFile ) { if ( delegate != null ) { delegate . fileDidLoaded ( finalFileName , finalFile , finalType ) ; } checkDownloadQueue ( document , location , finalFileName ) ; }
public void openCommunityDialogs ( int accountId , int groupId , String subtitle ) { PlaceFactory . getDialogsPlace ( accountId , - groupId , subtitle ) . tryOpenWith ( getActivity ( ) ) ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { selectItem ( menuItem . getItemId ( ) ) ; return true ; }
public boolean isCollapsed ( final RedditChangeDataManagerVolatile changeDataManager ) { final Boolean collapsed = changeDataManager . isHidden ( this ) ; if ( collapsed != null ) { return collapsed ; } return isScoreBelowThreshold ( changeDataManager ) ; }
public boolean isInBoundsLeft ( float x ) { return mContentRect . left <= x + 1 ? true : false ; }
public String status ( Char me ) { return Utils . format ( Game . getVar ( R . string . Mob_StaControlledStatus ) , me . name ( ) ) ; }
public void bind ( String alias ) { X509Certificate cert = mHelper . getCertificate ( alias ) ; mCertificateText . setText ( ServerSSLHelper . buildCertOverviewString ( cert ) ) ; }
public void onClick ( View v ) { songsManager . play ( position , data ) ; }
public void onSuccess ( ) { Log . i ( TAG , "set password success" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_SET_PASSWORD_SUCCESS , new ArrayList < String > ( ) ) ; }
public void onAnimationEnd ( Animator animation ) { refresh ( ) ; }
private static String extractType ( Document doc ) { return SHelper . innerTrim ( doc . select ( "head meta [ property = og : type ] " ) . attr ( "content" ) ) ; }
public Map < String , Boolean > getFavoritesCategory ( ) { if ( favoritesCategory == null ) { favoritesCategory = new HashMap <> ( ) ; return favoritesCategory ; } return favoritesCategory ; }
public void readMsgInit ( ) { handler . removeMessages ( BleMsg . MSG_CHA_READ_START ) ; }
private void resetFadeOut ( ) { fadeOutFrom = 0 ; }
public void setProgressCallback ( TaskManager . ProgressCallback progressCallback ) { mProgress = progressCallback ; }
public void onResume ( ) { super . onResume ( ) ; mListener . mayBeSetTitle ( "" ) ; }
public void openConnection ( final String applicationName ) { if ( mConnectionState != STATE_NOT_CONNECTED ) return ; mConnectionState = STATE_CONNECTING ; mApplicationName = applicationName ; checkStartConnection ( ) ; }
private boolean _isDonated ( ) { return ( mDonationSku != null ) ; }
public void setIsOnHold ( boolean onHold ) { mIsOnHold = onHold ; }
public boolean onQueryTextChange ( String newText ) { Log . d ( TAG , "onQueryTextChange = " + newText ) ; mBookmarksAdapter . setFilter ( newText ) ; return true ; }
public Position getPosition ( ) { return new Position ( Dungeon . level . levelId , pos ) ; }
public static float getObjectRotation ( MapObject object ) { return object . getProperties ( ) . get ( "rotation" , 0f , Float . class ) ; }
public Message ( String message ) throws JSONException { mMessage = message ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { registerScreenStateReceiver ( ) ; if ( isDebug ) Log . d ( LOG_TAG , "ScreenStateService Started" ) ; return super . onStartCommand ( intent , flags , startId ) ; }
public ScoutArmor ( ) { name = Game . getVar ( R . string . ElfArmor_Name ) ; image = 18 ; hasHelmet = false ; }
public void format ( IRCCloudJSONObject event , Event e ) { if ( event != null ) { e . from = event . getString ( "services_name" ) ; } e . color = colorScheme . networkErrorColor ; e . bg_color = colorScheme . errorBackgroundColor ; }
public void forSelectPhoto_whenResultCancelled_doesNothing ( ) { QRCodeActivityResultDelegate delegate = new QRCodeActivityResultDelegate ( context , settingsImporter , fakeQRDecoder , analytics , project ) ; delegate . onActivityResult ( SELECT_PHOTO , Activity . RESULT_CANCELED , new Intent ( ) ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return HomeFragment . newInstance ( ) ; case 1 : return HistoryFragment . newInstance ( ) ; case 2 : return ChartFragment . newInstance ( ) ; } return null ; }
public static String getQuranImagesBaseDirectory ( Context context ) { String s = QuranFileUtils . getQuranBaseDirectory ( context ) ; return s == null ? null : s + IMAGES_DIRECTORY ; }
public ComposeText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public static final Item LOCKED_CHEST = new Item ( ) { public int image ( ) { return ItemSpriteSheet . LOCKED_CHEST ; } } ;
public WeatherRecord ( Weather weather ) { this . updateFromWeather ( weather ) ; }
public void sendFnKey ( ) { mIsFnKeySent = true ; mKeyListener . handleFnKey ( true ) ; }
private void handleRegisterForSignal ( ) { Intent intent = new Intent ( this , RegistrationActivity . class ) ; intent . putExtra ( "cancel_button" , true ) ; startActivity ( intent ) ; }
public static JSONObject readJsonFromString ( final String in ) throws JSONException { return readJsonFromStream ( new ByteArrayInputStream ( in . getBytes ( ) ) ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . menu_favorites_remove : removeAllConfirm ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void disconnectDevice ( ) { if ( appState . connectedMuse != null ) { appState . connectedMuse . disconnect ( true ) ; appState . connectedMuse . unregisterAllListeners ( ) ; } }
public int getItemCount ( ) { if ( MessagesController . getInstance ( currentAccount ) . blockedUsers . isEmpty ( ) ) { return 0 ; } return MessagesController . getInstance ( currentAccount ) . blockedUsers . size ( ) + 1 ; }
public static int getStatusColor ( int skin ) { return darker ( skin , 0 . 6f ) ; }
private void addSharedDeck ( ) { openUrl ( Uri . parse ( getResources ( ) . getString ( R . string . shared_decks_url ) ) ) ; }
private boolean getSecurePreference ( ) { return mainActivity . getPrefs ( ) . getBoolean ( FTPService . KEY_PREFERENCE_SECURE , FTPService . DEFAULT_SECURE ) ; }
public void onResult ( @ NonNull GoogleSignInResult googleSignInResult ) { hideProgressDialog ( ) ; handleSignInResult ( googleSignInResult ) ; }
public SettingViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( context ) . inflate ( R . layout . settings_item_cell , parent , false ) ; return new SettingViewHolder ( itemView ) ; }
public boolean removeDataSet ( T d ) { if ( d == null ) return false ; boolean removed = mDataSets . remove ( d ) ; if ( removed ) { calcMinMax ( ) ; } return removed ; }
public void onPageFinished ( WebView view , String url ) { super . onPageFinished ( view , url ) ; swipeLayout . setRefreshing ( false ) ; initialPageLoaded = true ; Log . d ( "c3navWebView" , "loading ended" ) ; maybeEndSplash ( ) ; }
public int getCarbs ( ) { return carbs ; }
public List < Attachment > getAttachments ( ) { return mediaPreviews ; }
public static String [ ] getPadFieldsList ( ) { return new String [ ] { _ID , NAME , LOCAL_NAME , SERVER , URL , LAST_USED_DATE , CREATE_DATE , ACCESS_COUNT } ; }
public boolean onMove ( RecyclerView recyclerView , RecyclerView . ViewHolder viewHolder , RecyclerView . ViewHolder target ) { contract . onViewMoved ( viewHolder . getAdapterPosition ( ) , target . getAdapterPosition ( ) ) ; return true ; }
public Artist loadInBackground ( ) { return ArtistLoader . getArtist ( getContext ( ) , artistId ) ; }
public String getTabToken ( ) { assertLoaded ( ) ; return tabToken ; }
private void doCommit ( ) { if ( mEditor != null ) { mEditor . apply ( ) ; mEditor = null ; } }
private void stubSavedAccount ( String accountName ) { when ( generalSettings . getString ( GeneralKeys . KEY_SELECTED_GOOGLE_ACCOUNT ) ) . thenReturn ( accountName ) ; stubAccount ( accountName ) ; }
private void handleAuthenticated ( ) { try { MasterSecret masterSecret = MasterSecretUtil . getMasterSecret ( this , MasterSecretUtil . UNENCRYPTED_PASSPHRASE ) ; setMasterSecret ( masterSecret ) ; } catch ( InvalidPassphraseException e ) { throw new AssertionError ( e ) ; } }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new ThreadMediaLoader ( this , masterSecret , address , true ) ; }
public void setBandwidth ( Integer bandwidth ) { this . bandwidth = bandwidth ; }
public BaseIndeterminateProgressDrawable ( Context context ) { int controlActivatedColor = ThemeUtils . getColorFromAttrRes ( R . attr . colorControlActivated , Color . BLACK , context ) ; setTint ( controlActivatedColor ) ; }
public void onGlobalLayout ( ) { menuManager2 = new MenuManager ( MainActivity . this ) ; effectsView . getViewTreeObserver ( ) . removeGlobalOnLayoutListener ( this ) ; new InitTask ( MainActivity . this ) . execute ( ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { if ( horizontalLayoutManager . findLastVisibleItemPosition ( ) == 9 || citys != null ) fab . hide ( true ) ; else fab . show ( true ) ; }
public ReaderWebView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
private boolean isQuick ( ) { return WidgetAppearanceUtils . getSanitizedAppearanceHint ( formEntryPrompt ) . contains ( "quick" ) ; }
public void setDebtType ( @ NonNull int debtType ) { mDebtType = debtType ; }
private double [ ] colorToLAB ( int color ) { double [ ] f = new double [ 3 ] ; android . support . v4 . graphics . ColorUtils . colorToLAB ( color , f ) ; return f ; }
public String getLogCodeName ( ) { return LogUtils . LogCode . lookupByLogCode ( logType ) . name ( ) ; }
public int compareTo ( @ NonNull final Classifier classifier ) { if ( classifier instanceof PeriodClassifier ) { return getDate ( ) . compareTo ( ( ( PeriodClassifier ) classifier ) . getDate ( ) ) ; } return - 1 ; }
private RealmResults < Clip > getAllClips ( ) { clips = realm . where ( Clip . class ) . findAllSorted ( MyConstants . FIELD_CREATION_DATE , RealmResults . SORT_ORDER_DESCENDING ) ; return clips ; }
public void actualOnPreExecute ( @ NonNull DeckPicker deckPicker ) { deckPicker . mProgressDialog = StyledProgressDialog . show ( deckPicker , "" , deckPicker . getResources ( ) . getString ( R . string . backup_repair_deck_progress ) , false ) ; }
public String getImageFilename ( ) { return String . format ( this . FILENAME_IMAGE , this . story . getId ( ) , this . id ) ; }
public FormEntryPage addGroup ( ) { onView ( withId ( R . id . menu_add_repeat ) ) . perform ( click ( ) ) ; return new FormEntryPage ( formName , rule ) . assertOnPage ( ) ; }
public void onResume ( ) { super . onResume ( ) ; resumeCurrentPage ( ) ; registerForContextMenu ( mWebView ) ; }
public void onViewDetachedFromWindow ( View view ) { ( ( LastViewedPatientsPresenter ) mPresenter ) . setLastQueryEmpty ( ) ; }
public void run ( ) { showAboutFragment ( themeColor , a ) ; }
public void onSuccess ( LocationSettingsResponse locationSettingsResponse ) { isPositionObtainable = true ; isTryingToGetFirstPosition = true ; startUpdates ( ) ; }
public void nullIPsandMacsReturnNull ( ) throws Exception { assertNull ( ARPInfo . getMACFromIPAddress ( null ) ) ; assertNull ( ARPInfo . getIPAddressFromMAC ( null ) ) ; }
public void setUnits ( Unit unit ) { switch ( unit ) { case Celcius : this . units = "metric" ; break ; case Fahrenheit : default : this . units = "imperial" ; break ; } }
public ServerScanCallback ( OnServerFoundListerner listener ) { this . listener = listener ; }
public boolean isValid ( ) { DBValidator dBValidator = new DBValidator ( DBValidator . BOOK_INFORATION_DATABASE_TYPE ) ; dBValidator . validate ( this ) ; return dBValidator . isValid ( ) ; }
public View configureView ( View view ) { mNoteBlockHolder = ( CommentUserNoteBlockHolder ) view . getTag ( ) ; setUserName ( ) ; setUserCommentAgo ( ) ; setUserCommentSite ( ) ; setUserAvatar ( view ) ; setUserComment ( view ) ; setCommentStatus ( view ) ; return view ; }
public boolean isVariable ( ) throws ExpressionFormatException { if ( atomType != Atom . AtomType . INVALID ) return false ; else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
public static String getTimestamp ( ) { Time currentTime = new Time ( ) ; currentTime . setToNow ( ) ; return currentTime . format ( "%Y - %m - %d @ %T" ) ; }
private double cmtoyard ( double num ) { return num * 0 . 0109 ; }
private void deleteTextures ( ) { if ( textureIds [ 0 ] == 1 || numberOfTextures < 1 ) return ; GLES20 . glDeleteTextures ( numberOfTextures , textureIds , 0 ) ; }
public void onResume ( ) { super . onResume ( ) ; mIsPaused = false ; getPreferenceScreen ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public void onPause ( ) { super . onPause ( ) ; ArtworkManager . getInstance ( getContext ( ) . getApplicationContext ( ) ) . unregisterOnNewAlbumImageListener ( ( AlbumsRecyclerViewAdapter ) mRecyclerAdapter ) ; ArtworkManager . getInstance ( getContext ( ) ) . unregisterOnNewArtistImageListener ( this ) ; }
public MainMenuTask ( Fragment mFragment ) { mFragmentWeakReference = new WeakReference <> ( mFragment ) ; this . mainActivity = ( MainActivity ) mFragment . getActivity ( ) ; ButterKnife . inject ( this , mFragment . getView ( ) ) ; }
public static String pageDay ( Context context ) { return SaveManager . get ( context ) . getstring_appINFO ( ) . get ( SaveManager . jsonAppLanguage ) ; }
public int getCount ( ) { return UserSubscriptions . modOf == null ? 2 : UserSubscriptions . modOf . size ( ) + 4 ; }
public TransactionData . Item getTransactionData ( String pTransactionID , long pAmount ) { if ( mTransactionData == null ) return null ; return mTransactionData . getData ( pTransactionID , pAmount , mChangeID ) ; }
public static boolean darkTheme ( ) { int primaryColor = primaryColor ( ) ; float [ ] hsl = colorToHSL ( primaryColor ) ; return hsl [ 2 ] <= 0 . 5 ; }
public int getItemCount ( ) { return censusData . size ( ) ; }
public boolean movesAvailable ( ) { return grid . isCellsAvailable ( ) || tileMatchesAvailable ( ) ; }
public void onReminderPicked ( long reminder ) { noteTmp . setAlarm ( reminder ) ; if ( mFragment . isAdded ( ) ) { reminderIcon . setImageResource ( R . drawable . ic_alarm_grey600_18dp ) ; datetime . setText ( DateHelper . getNoteReminderText ( reminder ) ) ; } }
public void onDestroy ( ) { mScanner . cancel ( ) ; LocalBroadcastManager . getInstance ( getActivity ( ) ) . unregisterReceiver ( mRefreshReceiver ) ; if ( mFileObserver != null ) { mFileObserver . stopWatching ( ) ; } super . onDestroy ( ) ; }
public static boolean hasRepeatEvents ( ) { return true ; }
public final void unpause ( AbstractClient . OnSuccess listener ) { client . send ( AriaRequests . unpause ( gid ) , listener ) ; }
public void getStories ( long characterId , Integer offset , Integer limit , Callback < DataWrapper < List < Comic >>> listener ) { getComicListByType ( characterId , COMIC_TYPE_STORIES , offset , limit ) . enqueue ( listener ) ; }
public TaskData ( ArrayList < HashMap < String , String >> cards ) { mCards = cards ; }
public Xrpinr withOpen ( int open ) { this . open = open ; return this ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = mode . getMenuInflater ( ) ; inflater . inflate ( R . menu . main , menu ) ; return true ; }
public void onStart ( ) { super . onStart ( ) ; observeDownload ( ) ; subscribeAlertDialog ( ) ; }
public void testMinimalEncoder9 ( ) throws Exception { verifyMinimalEncoding ( "12" , "NUMERIC ( 12 ) , TERMINATOR ( ) " , null , false ) ; }
public void onClick ( DialogInterface dialog , int index ) { if ( index >= 0 && index < mAccounts . length ) { mAccount = mAccounts [ index ] ; startAuthentication ( ) ; } dialog . cancel ( ) ; }
public static GuidanceHint get ( String name ) { for ( GuidanceHint hint : GuidanceHint . values ( ) ) { if ( hint . name . equals ( name ) ) { return hint ; } } return No ; }
public void setButtonCtaVisible ( boolean buttonCtaVisible ) { this . buttonCtaVisible = buttonCtaVisible ; updateViewPositions ( ) ; }
public Double [ ] getResult ( ) { return Result ; }
public void restorePreviousValues ( ) { if ( mView != null ) { setEditableInfo ( mCurrentTrackDataItem ) ; setAdditionalInfo ( mCurrentTrackDataItem ) ; } }
public void subscribeMain ( ) { PubSub < String > events = new PubSub <> ( ) ; events . subscribeMain ( ( msg ) -> assertEquals ( "BASE" , msg ) ) ; events . post ( "BASE" ) ; }
public TransactionOptions ( int flatAdapterPosition ) { int groupPosition = getGroupPosition ( flatAdapterPosition ) ; Cursor transactionCursor = mAdapter . getGroup ( groupPosition ) ; this . transaction = Transaction . fromCursor ( transactionCursor ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_2 . getText ( ) . toString ( ) ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( this . id ) ; dest . writeString ( this . name ) ; dest . writeInt ( this . songCount ) ; }
public List < Image > readByAttractionId ( long attractionId ) { RealmResults < Image > images = realm . where ( modelType ) . equalTo ( "attraction_id" , attractionId ) . findAll ( ) ; images . sort ( "priority" ) ; return images ; }
public void mark ( ) { this . setBackgroundResource ( R . drawable . textinputlayout_bcg_active ) ; }
public Object getChild ( int indiceProduto , int indicePessoa ) { List < Pessoa > consumidores = prodList . get ( indiceProduto ) . getProduto ( ) . getConsumidores ( ) ; return consumidores . get ( indicePessoa ) ; }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . SERIES_INTEGRALS ; }
private boolean needsNearbyPoints ( ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mCentralMap ) ; return prefs . getBoolean ( GHDConstants . PREF_NEARBY_POINTS , false ) ; }
public void useMagicLinkInstead ( String email , boolean verifyEmail ) { showMagicLinkRequestScreen ( email , verifyEmail , true , true ) ; }
private void onActionEditChannel ( ) { Intent intent = new Intent ( Settings . ACTION_CHANNEL_NOTIFICATION_SETTINGS ) . putExtra ( Settings . EXTRA_APP_PACKAGE , context . getPackageName ( ) ) . putExtra ( Settings . EXTRA_CHANNEL_ID , channelId ) ; Helper . startActivity ( context , intent ) ; }
private SignalProtocolAddress getAddressForJid ( Jid jid ) { return new SignalProtocolAddress ( jid . toPreppedString ( ) , 0 ) ; }
public void setPrimaryTag ( String tagName ) { this . primaryTag = StringUtils . notNullStr ( tagName ) ; }
public static NetworkInfo getNetworkInfo ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; return cm . getActiveNetworkInfo ( ) ; }
public HeaderViewHolder ( View itemView ) { super ( itemView ) ; textView = ( TextView ) itemView . findViewById ( android . R . id . text1 ) ; }
public void updateForSettings ( ) { updateForSettings ( null , false ) ; }
public void detectsSubmission ( ) { assertThat ( getType ( formatURL ( "https : is ( RedditLinkType . SUBMISSION ) ) ; }
public PorterDuff . Mode getProgressBackgroundTintMode ( ) { logProgressBarTintWarning ( ) ; return super . getProgressBackgroundTintMode ( ) ; }
public int getItemCount ( ) { return tDataset . length ; }
public static void launchApp ( Context context , Runnable runnable ) { launchApp ( context , true , runnable ) ; }
private void setTitle ( @ NonNull String title ) { ZephyrExecutors . getMainThreadExecutor ( ) . execute ( ( ) -> { prefTitle . setText ( title ) ; } ) ; }
public boolean isVisible ( ) { return mVisible && ! mNode . getSprinterFactory ( ) . maxLevelReached ( ) && owner . getEnergy ( ) >= mNode . getSprinterFactory ( ) . getUpgradeCost ( ) ; }
public static void download_file ( String file ) { Log . d ( TAG , "Downloading file : " + file ) ; Shell . SU . run ( Arrays . asList ( "busybox wget - O " + file + " http : ) ) ; }
public DefaultItemRemoveAnimationManager ( BaseItemAnimator itemAnimator ) { super ( itemAnimator ) ; }
public int compareTo ( Formula formula ) { return Integer . valueOf ( start ) . compareTo ( formula . start ) ; }
private double sqyardTohectare ( double num ) { return num * 0 . 0000836127 ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return mHolder . onCreateHeaderItemViewHolder ( parent , viewType ) ; }
public void setAvatarUrl ( String avatarUrl ) { this . avatarUrl = avatarUrl ; }
public com . coinomi . core . protos . Protos . KeyOrBuilder getMasterKeyOrBuilder ( ) { if ( masterKeyBuilder_ != null ) { return masterKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return masterKey_ ; } }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; setContentView ( R . layout . connectdialog ) ; initializeUi ( ) ; }
public static void setOptionView ( OptionView optionViews ) { optionView = optionViews ; }
public ZonedDateTime getStart ( ) { return start ; }
public void switchToSearchMode ( ) { onView ( withId ( R . id . toolbar_layout_action ) ) . perform ( click ( ) ) ; }
public void onPause ( ) { super . onPause ( ) ; unregisterReceiver ( mBroadcastReceiver ) ; }
public void setServerUrl ( String serverUrl ) { this . serverUrl = serverUrl ; setChanged ( ) ; notifyObservers ( ) ; }
public ServerSocketMonitor ( int port , ServerNetworking serverNetworking ) { this . port = port ; this . serverNetworking = serverNetworking ; serverSocket = Gdx . net . newServerSocket ( Protocol . TCP , port , Networking . serverSocketHints ) ; running = true ; }
public final void servers ( AbstractClient . OnResult < SparseServers > listener ) { client . send ( AriaRequests . getServers ( gid ) , listener ) ; }
public boolean showInterstitial ( ) { if ( adsHelper != null && ! sharedcode . turboeditor . util . ProCheckUtils . isPro ( this ) ) { adsHelper . displayInterstitial ( ) ; return true ; } else { return false ; } }
public boolean handleTouchEvent ( MotionEvent event , EventType eventType , int page ) { return isVisible ( ) && QuranPageTouchUtil . handleTouchEvent ( getActivity ( ) , event , eventType , page , ayahTrackerPresenter , ayahSelectedListener , ayahCoordinatesError ) ; }
public void onFailure ( int code , Client . Headers headers , int state ) { setup ( context , deIfmoRestClient , attempt + 1 ) ; }
public RealmExamHelper ( List < Exam > exams ) { switchData ( exams ) ; }
public void onFailure ( Call < PostList > call , Throwable error ) { uploadEditedPost . call ( localPost ) ; }
private void openMyWall ( ) { if ( mAccountId == ISettings . IAccountsSettings . INVALID_ID ) { return ; } PlaceFactory . getOwnerWallPlace ( mAccountId , mAccountId , null ) . tryOpenWith ( getActivity ( ) ) ; }
public void onDetach ( ) { super . onDetach ( ) ; unregisterListener ( ) ; }
public void onRefresh ( ) { updateData ( ) ; }
public void onSuccess ( Void unused ) { Log . d ( TAG , "We successfully requested a connection . " ) ; }
private void getChannelDifference ( final int channelId ) { getChannelDifference ( channelId , 0 , 0 ) ; }
public AdapterModelConnversationUser . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . tab_user , parent , false ) , viewType ) ; }
public static void e ( final String msg ) { Log . e ( mTAG , getMessage ( msg ) ) ; saveToFile ( ) ; }
public boolean onLongClick ( View v ) { createDeleteDialog ( id , uid , fragmentActivity ) ; return false ; }
private void convertToModel ( OpenWeatherCurrentData openWeatherCurrentData , OpenWeatherForecastData openWeatherForecastData ) throws IOException { mConverter . fromWeatherPojo ( openWeatherCurrentData ) ; List < ForecastData > forecastData = mConverter . getWeatherModel ( ) ; convertToModel ( openWeatherForecastData , forecastData ) ; }
public Operator take ( Object operator ) { if ( operator . toString ( ) . equals ( " - " ) ) return this ; return next ( ) ; }
public long [ ] restoreFeedsSync ( @ NonNull Uri file ) throws IOException { List < FeedChannel > feeds = repo . deserializeFeeds ( file ) ; return repo . addFeeds ( feeds ) ; }
public void writeDouble ( double d ) { try { writeInt64 ( Double . doubleToRawLongBits ( d ) ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , "write double error" ) ; } }
public Builder withText ( String text ) { mText = text ; return this ; }
public Builder fitCenter ( ) { request . fitCenter ( ) ; return this ; }
private IdentityClickedListener ( IdentityRecord identityKey ) { Log . w ( TAG , "Identity record : " + identityKey ) ; this . identityKey = identityKey ; }
public Builder clearPool ( ) { bitField0_ = ( bitField0_ & ~0x00000008 ) ; pool_ = com . coinomi . core . protos . Protos . Transaction . Pool . UNSPENT ; onChanged ( ) ; return this ; }
public static void logException ( Throwable exception ) { if ( ! BuildConfig . DEBUG ) Crashlytics . logException ( exception ) ; }
public void notifyGroupItemRangeRemoved ( int groupPositionStart , int itemCount ) { mAdapter . notifyGroupItemRangeRemoved ( groupPositionStart , itemCount ) ; }
public Storage getStorage ( ) { return storage ; }
public ActivityDurationPagerAdapter ( Context context , List < ActivitySummaryFit > activities ) { mContext = context ; this . activities = activities ; mLayoutInflater = ( LayoutInflater ) mContext . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public void onClick ( View v ) { duracao = 45 ; dialog . dismiss ( ) ; mostrarDialogTimer ( ) ; }
public RecyclerAdapter ( ArrayList < String > reviewsList ) { this . reviewsList = reviewsList ; }
public FlingListener ( int minimumVelocity ) { this . minimumVelocity = minimumVelocity ; }
public int getCalculatorKeysLayout ( ) { return mCalculatorKeysLayout ; }
public @ NonNull String toString ( ) { return "ReviewOutcome { " + "card = " + card + " , prob = " + prob + ' } ' ; }
private void initAdapter ( Context context ) { adapter = new ArrayAdapter < Integer > ( context , android . R . layout . simple_spinner_item , m_data_array ) ; adapter . setDropDownViewResource ( android . R . layout . simple_spinner_dropdown_item ) ; }
public void onDownloadAudioClicked ( ) { audioToDownload = 0 ; audioIndexesToDownload = repository . getAyahNumberNotAudioDownloaded ( ) ; downState ( ) ; downlaodAudioData ( ) ; }
private static List < String > defaultValueIfNull ( List < String > input ) { if ( input . size ( ) == 0 ) { input . add ( NO_DATA_AVAILABLE ) ; } return input ; }
public Card buildReceivedCard ( ) { Card card = build ( ) ; card . setIsUser ( false ) ; return card ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( OnSecurityCodeAction ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( activity . toString ( ) + " must implement OnFragmentInteractionListener" ) ; } }
public boolean isUsageReportingAccepted ( ) { return urAccepted == urVersionMax ; }
public int getGeneralTheme ( ) { return getThemeResFromPrefValue ( mPreferences . getString ( GENERAL_THEME , "light" ) ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_vers , parent , false ) ; return new ViewHolder ( v ) ; }
public MultiDeviceGroupUpdateJob ( Context context ) { super ( context , JobParameters . newBuilder ( ) . withNetworkRequirement ( ) . withMasterSecretRequirement ( ) . withGroupId ( MultiDeviceGroupUpdateJob . class . getSimpleName ( ) ) . create ( ) ) ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return OstWorkflowContext . WORKFLOW_TYPE . REVOKE_DEVICE_WITH_QR_CODE ; }
public SurfacePlotView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . prepare ( attrs ) ; }
public void onClick ( View v ) { new SlideDialog ( getContext ( ) , device ) . show ( ) ; }
public static String getRGB ( float n ) { return String . format ( "% . 0f" , n ) . replaceAll ( "\\ . 0*$" , "" ) ; }
public Album create ( Cursor source ) { return new AlbumDigest ( source . getString ( source . getColumnIndex ( Views . AlbumsReadable . NAME . getName ( ) ) ) ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { JobList . this . startActivity ( new Intent ( JobList . this , LicenseActivity . class ) ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfSatiety_Info ) : super . desc ( ) ; }
public boolean getShowNotification ( ) { return prefs . getBoolean ( SHOW_NOTIFICATIONS , false ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; dataBaseUtils = new DataBaseUtils ( getActivity ( ) ) ; preferenceUtils = new PreferenceUtils ( getActivity ( ) ) ; }
public void setTime ( int hour , int minute ) { textHour . setText ( addDigit ( hour ) ) ; textMinute . setText ( addDigit ( minute ) ) ; }
public int getId ( ) { return this . _id ; }
public static void saveDarkTheme ( boolean isChecked ) { App . getTinyDB ( ) . putBoolean ( DARK_THEME , isChecked ) ; }
public SquareLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
private long getMonthAt ( int position ) { return ( ( EventCalendarView . MonthViewPagerAdapter ) calendarView . getAdapter ( ) ) . mViews . get ( position ) . mMonthMillis ; }
public void onCreate ( ) { synchronized ( sSyncAdapterLock ) { if ( sSyncAdapter == null ) sSyncAdapter = new TicketSyncAdapter ( getApplicationContext ( ) , true ) ; } }
public void setId ( int id ) { this . id = id ; }
public static void setDatabaseImported ( Context context ) { context . getSharedPreferences ( PREFERENCES_NAME , 0 ) . edit ( ) . putBoolean ( DATABASE_MIGRATED , true ) . commit ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return View . inflate ( getActivity ( ) , getInflateView ( ) , null ) ; }
public Photo2Album ( Context context , INetworker networker , IPhotosStorage storage ) { this . context = context ; this . networker = networker ; this . storage = storage ; }
public void onClick ( View v ) { mainLayout . requestFocus ( ) ; hideSoftKeyboard ( ProgramAddEditActivity . this ) ; fieldSelectDialog ( "owner" ) ; }
public void onDrawerClosed ( View view ) { super . onDrawerClosed ( view ) ; getSupportActionBar ( ) . setTitle ( mTitle ) ; invalidateOptionsMenu ( ) ; }
public void setBookmarksSortOrder ( int sortOrder ) { mPrefs . edit ( ) . putInt ( Constants . PREF_SORT_BOOKMARKS , sortOrder ) . apply ( ) ; }
public AccountManager provideAccountManager ( ) { return ShadowAccountManager . get ( RuntimeEnvironment . application ) ; }
public void onFocusChange ( View v , boolean hasFocus ) { if ( hasFocus ) { mDisplay . mActiveEditText = MatrixEditText . this ; if ( getText ( ) . toString ( ) . equals ( Logic . NAN ) ) { setText ( "" ) ; } } }
public WikiException ( int textId ) { super ( ) ; mTextId = textId ; }
private void setUpMiniPlayer ( ) { setUpPlayPauseButton ( ) ; progressBar . setProgressTintList ( ColorStateList . valueOf ( ThemeStore . accentColor ( getActivity ( ) ) ) ) ; }
public void onSuccess ( Post result ) { callback . onSuccess ( result ) ; getFromRemoteAndUpdateLocalSource ( postId , callback ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . fragment_album , parent , false ) ; return new ViewHolder ( view ) ; }
private void continueUncheck ( ) { if ( scvPrevServing != null && scvPrevServing . isChecked ( ) ) scvPrevServing . setChecked ( false ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `attachment` ADD COLUMN `disposition` TEXT" ) ; }
public void onFailedDownload ( String fileName ) { updateButtonState ( documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO || documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC ) ; }
public void onConnection ( BlockchainConnection blockchainConnection ) { this . blockchainConnection = blockchainConnection ; subscribeToBlockchain ( ) ; subscribeIfNeeded ( ) ; }
public void setIdentifierType ( String identifierType ) { this . identifierType = identifierType ; }
private void build_characters_list ( ) { DAO_GameHistory dao_gameHistory = new DAO_GameHistory ( getActivity ( ) ) ; tv_hist = ( TextView ) lay_hist . findViewById ( R . id . act_tour_sub_hist_tv ) ; tv_hist . setText ( dao_gameHistory . get_hist ( gameKey ) ) ; }
public void run ( ) { markMessagesAsReadInternal ( messages , encryptedMessages ) ; }
public void registerDirectListener ( String key , NotificationListener listener ) { getAggregator ( key , true ) . addDirectListener ( listener ) ; }
public void onErrorResponse ( VolleyError error ) { Log . d ( Constants . LOG_TAG , "Error : " + error . getMessage ( ) ) ; pDialog . dismiss ( ) ; }
public void setSyncId ( @ Nullable String syncId , Boolean isGroupSchedule ) { mSyncId = syncId ; mIsGroupSchedule = isGroupSchedule ; mSubjectFilter = null ; onCreate ( ) ; }
public FormMetadataPage assertOnPage ( ) { checkIsStringDisplayed ( R . string . form_metadata_title ) ; return this ; }
public static void viewMyProfile ( Context context ) { Intent intent = new Intent ( context , MyProfileActivity . class ) ; AnalyticsUtils . trackWithCurrentBlogDetails ( AnalyticsTracker . Stat . OPENED_MY_PROFILE ) ; context . startActivity ( intent ) ; }
public OpenHABFragmentPagerAdapter ( FragmentManager fm ) { super ( fm ) ; fragmentManager = fm ; fragmentList = new ArrayList < OpenHABWidgetListFragment > ( 0 ) ; }
public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { return shouldOverrideLoading ( view , request . getUrl ( ) . toString ( ) ) || super . shouldOverrideUrlLoading ( view , request ) ; }
public Suggestion getSearchSuggestionChoice ( ) { try { return Suggestion . valueOf ( mPrefs . getString ( Name . SEARCH_SUGGESTIONS , Suggestion . SUGGESTION_GOOGLE . name ( ) ) ) ; } catch ( IllegalArgumentException ignored ) { return Suggestion . SUGGESTION_NONE ; } }
public void onClick ( View v ) { Theme . applyPreviousTheme ( ) ; parentLayout . rebuildAllFragmentViews ( false ) ; finishFragment ( ) ; }
public void setRaceInfoCampusMapUrl ( String scheduleUrl ) { mPrefs . edit ( ) . putString ( PREF_CAMPUS_MAP_URL , scheduleUrl ) . apply ( ) ; }
public void addSongs ( List < Song > songs ) { shufflingQueue . addAll ( songs ) ; notifyChange ( QUEUE_CHANGED ) ; }
public int getIngredientId ( ) { return ingredientId ; }
public OptionListAdapter ( Context birthdayListActivity , String [ ] stringArray ) { result = stringArray ; context = birthdayListActivity ; inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public void d ( String tag , String message , Object . . . args ) { log ( android . util . Log . DEBUG , tag , message , args ) ; }
public void afterTextChanged ( Editable s ) { updateAdressEditTextButtons ( ) ; }
public static com . coinomi . core . protos . Protos . TransactionOutput parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void loadMainScreen ( ) { Intent mainAct = new Intent ( SplashActivity . this , ListBooksActivity . class ) ; startActivity ( mainAct ) ; finish ( ) ; }
private void initAutoBackupPrefs ( ) { binding . autoBackupPrefs . setChecked ( mPrefs . isAutoBackupEnabled ( ) ) ; binding . autoBackupPrefs . setOnClickListener ( view -> changeAutoBackupPrefs ( ) ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mEvents ) ; }
public ApplyAdapter ( int [ ] mLauncherIcons , String [ ] mLauncherNames , RequestManager glide ) { this . mLauncherIcons = mLauncherIcons ; this . mLauncherNames = mLauncherNames ; this . mGlide = glide ; }
private void checkIfCanGoUp ( ) { try { canGoUp = parentFolder . getPath ( ) . split ( "/" ) . length > 1 ; } catch ( IndexOutOfBoundsException e ) { canGoUp = false ; } }
public void dispose ( ) { super . dispose ( ) ; mGSM . dispose ( ) ; }
public void onBindViewHolder ( MonthHolder holder , int position ) { final Month month = months . get ( position ) ; monthDelegate . onBindMonthHolder ( month , holder , position ) ; }
public Double getTemperatureMaxTime ( ) { return temperatureMaxTime ; }
private boolean isReversed ( ) { return speed < 0 ; }
public static String getPathFromBookId ( int bookId , Context context , boolean journal ) { return StorageUtils . getIslamicLibraryShamelaBooksDir ( context ) + File . separator + bookId + " . " + ( journal ? DATABASE__JOURNAL_EXTENSION : DATABASE_EXTENSION ) ; }
public static String getCountry ( ) { return instance . getString ( "country" , "Greece" ) ; }
private void resetHistoryAdapter ( ) { rvHistoryItems . setAdapter ( new HistoryItemsAdapter ( flHistory ) ) ; }
public boolean stopScanningDevices ( ) { btServiceSend . stopScan ( ) ; return true ; }
public static List < Playlist > getAllPlaylists ( @ NonNull final Context context ) { return getAllPlaylists ( makePlaylistCursor ( context , null , null ) ) ; }
public static ToDoEditorFragment newInstance ( long todoId ) { Bundle args = new Bundle ( ) ; args . putLong ( "KEY_TODO_ID" , todoId ) ; ToDoEditorFragment fragment = new ToDoEditorFragment ( ) ; fragment . setArguments ( args ) ; return fragment ; }
public void bind ( Highlight highlight , BookPartsInfo bookPartsInfo ) { bind ( highlight , bookPartsInfo , null , null ) ; }
public void onInserted ( int position , int count ) { Log . i ( Helper . TAG , "Inserted @ " + position + " #" + count ) ; }
public void onDismissed ( Snackbar snackbar , int event ) { super . onDismissed ( snackbar , event ) ; if ( event == DISMISS_EVENT_TIMEOUT ) { DeleteTasksTask deleteTasksTask = new DeleteTasksTask ( getActivity ( ) , callback , mSelectedIds ) ; deleteTasksTask . execute ( ) ; } }
public int getItemViewType ( int position ) { return dataSet . get ( position ) instanceof AbsSmartPlaylist ? VIEW_TYPE_SMART : VIEW_TYPE_DEFAULT ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . view_playlist , container , false ) ; }
public Node < V > getParent ( ) { return mParent ; } ;
public void onItemsRemoved ( RecyclerView recyclerView , int positionStart , int count ) { final int anchorPos = getAnchorPosition ( ) ; if ( positionStart + count <= anchorPos ) { scrollRequestedPosition = anchorPos - 1 ; } }
public int compare ( AppItem left , AppItem right ) { return ( int ) ( right . mUsageTime - left . mUsageTime ) ; }
public boolean isDeveloperOptionPlayEveryCardEnabled ( ) { return isDeveloperOptionLockEnabled ( ) && savedSharedData . getBoolean ( PREF_KEY_DEVELOPER_OPTION_PLAY_EVERY_CARD , DEFAULT_DEVELOPER_OPTION_PLAY_EVERY_CARD ) ; }
private ReadOperation ( TimestampBound timestampBound ) { this . timestampBound = timestampBound ; }
public static boolean updateValueByKey ( String prefsKey ) { return updateValueByKey ( Settings . chameleonDeviceSerialNumber , prefsKey ) ; }
public Enumeration list ( final String filter , final boolean includeHidden ) throws IOException { throwClosed ( ) ; return listPrivileged ( filter , includeHidden ) ; }
public void start ( Attributes attributes ) { mCurrentThread . setIsClosed ( attributes . getValue ( Topic . Xml . IS_CLOSED_ATTRIBUTE ) . equals ( "1" ) ) ; }
public void updateLastModification ( ) { this . lastModification = Calendar . getInstance ( ) . getTime ( ) ; }
public void getSenderId ( ) throws Exception { when ( mLocalProperties . readLocalProperty ( GcmController . PREF_SENDER_ID ) ) . thenReturn ( TEST_ID ) ; String senderId = mController . getSenderId ( ) ; assertEquals ( senderId , TEST_ID ) ; }
public AnkiDb getDb ( ) { return mDb ; }
public static void setLockedPreference ( boolean lockedPreference ) { Log . i ( TAG , "New locked preference : " + lockedPreference ) ; Notes . lockedPreference = lockedPreference ; }
public static com . coinomi . core . protos . Protos . Transaction parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public com . google . protobuf . AnyOrBuilder getConsensusPubkeyOrBuilder ( ) { if ( consensusPubkeyBuilder_ != null ) { return consensusPubkeyBuilder_ . getMessageOrBuilder ( ) ; } else { return consensusPubkey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : consensusPubkey_ ; } }
public void onClick ( View view ) { InstallFirefoxActivity . open ( view . getContext ( ) ) ; }
public AppDatabase getDatabase ( ) { return null ; }
public static Intent passwordRequest ( Context context ) { Intent i = new Intent ( context . getApplicationContext ( ) , MainActivity . class ) ; i . setAction ( ACTION_AUTH_REQUEST_PASSWORD ) ; return i ; }
public MutableLiveData < Boolean > isLoading ( ) { return quakeRepository . isLoading ( ) ; }
private void enableStreetMode ( boolean enable ) { if ( enable ) { needVerifyIdentity = true ; streetMode = getWallet ( ) . getDaemonBlockChainHeight ( ) ; } else { streetMode = 0 ; } updateAccountsBalance ( ) ; forceUpdate ( ) ; }
public boolean equals ( Object obj ) { return obj instanceof UserItem && ( ( UserItem ) obj ) . getUid ( ) . equals ( this . uid ) ; }
public static boolean isMenuWorkaroundRequired ( ) { return VERSION . SDK_INT <= VERSION_CODES . JELLY_BEAN && VERSION . SDK_INT > VERSION_CODES . GINGERBREAD_MR1 && ( "LGE" . equalsIgnoreCase ( Build . MANUFACTURER ) || "E6710" . equalsIgnoreCase ( Build . DEVICE ) ) ; }
public void afterTextChanged ( Editable s ) { checkFieldForError ( field , key , s ) ; }
public void onTimeShiftPause ( ) { Log . d ( TAG , "onTimeShiftPause" ) ; mPlayer . pause ( ) ; }
public void onClick ( DialogInterface dialog , int selected ) { ; }
public Image build ( ) { return new Image ( uri , title , description , targetScale ) ; }
public MessagePatch setOut ( boolean out ) { this . out = out ; return this ; }
public void onRequestPermissionResult ( int requestCode , int grantResult ) { boolean isGranted = grantResult == PackageManager . PERMISSION_GRANTED ; if ( isGranted ) { grantWriteSecureSettingsPermission ( ) ; } else { proceedWithOnCreate ( ) ; } }
public int getLayoutId ( ) { return R . layout . activity_main ; }
public UserRemoteDataSource getInstance ( ) { if ( INSTANCE == null ) { INSTANCE = new UserRemoteDataSource ( ) ; } return INSTANCE ; }
private void startJokeScreen ( ) { startActivity ( JokeActivity . jokeScreeenIntent ( getActivity ( ) , mJoke ) ) ; }
private FontPackage ( File folder ) { mName = folder . getName ( ) ; initForLocalFontPack ( folder ) ; }
public SingleLiveEvent < Integer > getOnToDoDeleted ( ) { return mOnToDoDeleted ; }
private boolean verifyGifImage ( Uri gifUri ) { return gifUri . toString ( ) . endsWith ( " . gif" ) ; }
public void setGameStatus ( int gameStatus ) { this . gameStatus = gameStatus ; }
public String getShitRatingCleanness ( ) { return ShitRatingCleanness ; }
public void setmListener ( RecyclerViewClickListener mListener ) { this . mListener = mListener ; }
public String desc ( ) { return Game . getVar ( R . string . GnollArmor_Info ) ; }
public void onFocusChange ( View v , boolean hasFocus ) { if ( ! hasFocus ) { Prefs . putString ( Constants . PREF_WATCHFACE_SEND_WEATHER_DATA_API , watchface_weather_api_input . getText ( ) . toString ( ) ) ; } }
private void updatePlayPauseIcon ( @ PlayerState . PlayState String playStatus ) { playPauseButton . setImageResource ( ( PlayerState . PLAY_STATE_PLAY . equals ( playStatus ) ) ? R . drawable . ic_action_pause : R . drawable . ic_action_play ) ; }
public Select ( View < ? > view , Field . . . fields ) { this ( view , SelectMethod . NORMAL , fields ) ; }
private DatabaseManager ( ) { mAutocompleteCache = new HashMap <> ( ) ; mDatabase = FirebaseDatabase . getInstance ( ) . getReference ( ) ; mStorage = FirebaseStorage . getInstance ( ) . getReference ( ) ; }
public int getGroupCount ( ) { return groups . size ( ) ; }
public void onAffiliationChangeFailed ( Jid jid , int resId ) { displayToast ( getString ( resId , jid . asBareJid ( ) . toString ( ) ) ) ; }
public void run ( ) { addContactToPhoneBook ( u ) ; }
private void getPostsFromDatabase ( ) { mPosts = new Select ( ) . from ( MoodlePost . class ) . where ( "discussionid = ?" , mDiscussionId ) . execute ( ) ; }
public TransformFieldDelete ( int _idx ) { idx = _idx ; }
public void setInitialPrefetchItemCount ( int itemCount ) { mInitialItemPrefetchCount = itemCount ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; instanceServerUploader . cancel ( true ) ; instanceServerUploader . setUploaderListener ( null ) ; finish ( ) ; }
public Completable updateContribution ( Contribution contribution ) { return contributionDao . update ( contribution ) ; }
public boolean isCommentEnable ( ) { return isCommentEnable ; }
public void onClick ( DialogInterface dialog , int id ) { new MicropubAction ( context , user ) . deleteItem ( item . getUrl ( ) ) ; items . remove ( position ) ; notifyDataSetChanged ( ) ; }
public static DashboardPosition getDashboardPosition ( StorageDomain . Status status ) { StorageStatusMap result = map . get ( status ) ; return result == null ? DashboardPosition . UNKNOWN : DashboardPosition . fromValue ( result . ordinal ( ) ) ; }
public void enableReminderAlarm ( MedicineReminder medicineReminder ) { Reminders . getInstance ( getContext ( ) . getApplicationContext ( ) ) . setupReminder ( medicineReminder ) ; }
private void setupLocale ( ) { defaultLocale = Locale . getDefault ( ) ; }
public void onClick ( View v ) { ExternalAppUtils . openBrowserIntent ( MainFragment . this , url ) ; }
public boolean onButtonPressed ( int buttonCode , boolean pressed ) { mInputMapper . setButtonCode ( mButtonId , buttonCode ) ; stopEditing ( ) ; return true ; }
private void configureSearchFullButton ( ) { Button searchFull = ( Button ) parent . findViewById ( R . id . search_full ) ; searchFull . setVisibility ( View . GONE ) ; }
public FormEndPage clickJumpEndButton ( ) { onView ( withId ( R . id . jumpEndButton ) ) . perform ( click ( ) ) ; return new FormEndPage ( formName , rule ) . assertOnPage ( ) ; }
public boolean onInterceptTouchEvent ( RecyclerView rv , MotionEvent e ) { return RecyclerViewDragDropManager . this . onInterceptTouchEvent ( rv , e ) ; }
public void run ( ) { remainingTime -- ; if ( remainingTime == 0 || solvedPuzzle ( ) ) { timer . cancel ( ) ; } update ( ) ; }
private void updateInstructions ( boolean isVisible ) { updateWifiInfo ( ) ; instructionsView . setVisibility ( isVisible ? View . VISIBLE : View . INVISIBLE ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return EncryptedChat . TLdeserialize ( stream , constructor , exception ) ; }
public int read ( ByteBuffer dst ) throws IOException { int bytes ; if ( ( ( bytes = byteChannel . read ( dst ) ) > 0 ) ) { ServiceWatcherUtil . POSITION += bytes ; return bytes ; } return 0 ; }
public Volumes setProgressMicrophone ( final int progress ) { return new Volumes ( mPlayGain , progress2Gain ( progress ) , mExternalSpeaker , mMicrophoneStatus , mEchoLimiter ) ; }
private BroadcastReceiver hideSpaceReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { layout . findViewById ( R . id . start_menu_space ) . setVisibility ( View . GONE ) ; } } ;
public void execute ( @ NotNull Char chr , @ NotNull String action ) { if ( action . equals ( AC_END ) ) { showAmuletScene ( false ) ; } else { super . execute ( chr , action ) ; } }
public void addItem ( int position , ContentListItem model ) { list_items . add ( position , model ) ; notifyItemInserted ( position ) ; }
public AccountSelectionListAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new AccountViewHolder ( li . inflate ( R . layout . account_selection_list_item , parent , false ) , clickListener ) ; }
public static List < ElementDB > getAllElement ( ) { return new Select ( ) . all ( ) . from ( ElementDB . class ) . execute ( ) ; }
public void showThanksReceivedInfo ( ) { launchAlert ( getResources ( ) . getString ( R . string . statistics_thanks ) , getResources ( ) . getString ( R . string . thanks_received_explanation ) ) ; }
public int getItemCount ( ) { if ( mMyStarNameAccounts . size ( ) == 0 ) { return 1 ; } else { return mMyStarNameAccounts . size ( ) ; } }
public Vector2 warp ( float srcX , float srcY ) { if ( dirty ) computeWarp ( ) ; Warper . warp ( warpMat , srcX , srcY , mOutput ) ; return mOutput ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return OstWorkflowContext . WORKFLOW_TYPE . ADD_DEVICE_WITH_MNEMONICS ; }
public OpenSourceLicensesPage clickOnOpenSourceLibrariesLicenses ( ) { onView ( withText ( R . string . all_open_source_licenses ) ) . perform ( click ( ) ) ; return new OpenSourceLicensesPage ( rule ) ; }
public static boolean setAmps ( double amps ) { ampAdjust = amps/9 ; return ( false ) ; }
public void testMatchListWriter ( ) { mWriter . write ( mMatch , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_MATCHES , null , mMatch . getParams ( ) ) ; }
private void openLocator ( int color ) { Intent intent = new Intent ( this , FixActivity . class ) ; intent . putExtra ( "color" , color ) ; startActivity ( intent ) ; }
public ExchangeRateProvider createProvider ( SharedPreferences sharedPreferences ) { return new FlowzrRateDownloader ( createDefaultWrapper ( ) , System . currentTimeMillis ( ) ) ; }
public void dismissInternal ( ) { try { super . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onCancelled ( CancelResult cancelResult ) { jobManager . addJobInBackground ( new OwnCloudJob ( preferenceHelper . getOwnCloudServerName ( ) , preferenceHelper . getOwnCloudUsername ( ) , preferenceHelper . getOwnCloudPassword ( ) , preferenceHelper . getOwnCloudDirectory ( ) , f , f . getName ( ) ) ) ; }
public Builder ( final DialogFragment dialogFragment ) { this ( dialogFragment , 0 ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( drawerToggle != null ) drawerToggle . onConfigurationChanged ( newConfig ) ; }
public List < Book > loadInBackground ( ) { if ( mUrl == null ) { return null ; } List < Book > earthquakes = QueryUtils . fetchBookListData ( mUrl ) ; return earthquakes ; }
public static String modulus ( String num1 , String num2 ) { return new BigDecimal ( num1 ) . remainder ( new BigDecimal ( num2 ) ) . toString ( ) ; }
public void onCreate ( SQLiteDatabase db ) { createBookmarksTable ( db ) ; createSuggestionsTable ( db ) ; }
public void run ( ) { OpenHABWriteTagActivity . this . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { OpenHABWriteTagActivity . this . finish ( ) ; } } ) ; Log . d ( TAG , "Autoclosing tag write activity" ) ; }
public long getItemId ( int position ) { return options [ position ] . name . hashCode ( ) ; }
public PatientAllergyRecyclerViewAdapter . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( context ) . inflate ( R . layout . list_patient_allergy , parent , false ) ; return new ViewHolder ( itemView ) ; }
public MyFloatingActionButton ( Context context ) { super ( context ) ; }
public long getCountAudio ( ) { return mCountAudio ; }
public long getNotReadNotificationsCount ( ) { return pushNotificationDataStore . getNotOpenedCountBy ( securityManager . getCurrentMember ( ) ) ; }
public static void v ( final String msg , Throwable tr ) { Log . v ( mTAG , getMessage ( msg ) , tr ) ; saveToFile ( ) ; }
public boolean exists ( @ NotNull Uri filePath ) { SafFileSystem fs = SafFileSystem . getInstance ( appContext ) ; return fs . exists ( filePath ) ; }
public static void main ( String [ ] args ) throws IOException { System . setProperty ( "SKIP_SETRB" , "1" ) ; process ( "BiglyBT/src/coreFlavor/res" ) ; process ( "BiglyBT/src/main/res . lang" ) ; }
private void createEmptyStats ( ) { stats = new int [ NUMBER_STATS ] ; for ( int count = 0 ; count < NUMBER_STATS ; count ++ ) { stats [ count ] = 0 ; } writeStringIntoFile ( createStringToSave ( true ) , 1 ) ; }
public void whenPromptDoesNotHaveAnswer_getBearingButtonIsShown ( ) { assertThat ( createWidget ( promptWithAnswer ( null ) ) . getBearingButton . getText ( ) , is ( widgetActivity . getString ( R . string . get_bearing ) ) ) ; }
public void SetMidText ( String g ) { TextView textView = ( TextView ) findViewById ( R . id . SwapngMainContentComment ) ; textView . setText ( g ) ; }
public void onClick ( DialogInterface dialog , int id ) { mListener . onDialogNeutralClick ( SetSeedDialogFragment . this ) ; }
public void attachSectionToView ( LinearLayout linearLayout ) { mParent . addView ( linearLayout ) ; }
public void solveOneMoveColumnTrue ( ) { Level solvedLevel = sut . solve ( levelTranslator . fromString ( LEVEL_ONE_MOVE_COLUMN ) ) ; assertThat ( solvedLevel , notNullValue ( ) ) ; assertThat ( solvedLevel . getMinimumMovesToSolve ( ) , is ( 1 ) ) ; }
public FragmentSlideFragment ( ) { }
public boolean hasBlogImageUrl ( ) { return ! TextUtils . isEmpty ( blogImageUrl ) ; }
public static boolean isScheduled ( Context context ) { return ( PendingIntent . getBroadcast ( context , 0 , getAlarmIntent ( context ) , PendingIntent . FLAG_NO_CREATE ) != null ) ; }
public List < ILatLonRecord > getWaypoints ( ) { return listWaypointsPoints ; }
public static boolean isAudio ( String mimeType ) { return BASE_TYPE_AUDIO . equals ( getTopLevelType ( mimeType ) ) ; }
public void onDetails ( View owner ) { if ( enableDetails ( ) ) { DialogResultDetails d = new DialogResultDetails ( getFormulaList ( ) . getActivity ( ) , arrayResult , getFormulaList ( ) . getDocumentSettings ( ) , null ) ; d . show ( ) ; } }
public void parseData ( ) throws BasicModel . FieldNotDefinedException { mDataToBind = mAPIData + " : " + mAPIData ; }
public static IDatabaseInteractor createDatabaseInteractor ( ) { return new DatabaseInteractor ( Injection . provideRepositories ( ) . database ( ) , Injection . provideNetworkInterfaces ( ) ) ; }
private void startTrack ( MediaPlayer player , int trackID ) { player = MediaPlayer . create ( getApplicationContext ( ) , trackID ) ; player . start ( ) ; player . setLooping ( true ) ; }
public synchronized int getEntryCount ( ) { Cursor cursor = mDatabase . rawQuery ( "SELECT COUNT ( * ) FROM " + TABLE_DCC_HISTORY , null ) ; cursor . moveToFirst ( ) ; return cursor . getInt ( 1 ) ; }
public static boolean isSearchSplitToWords ( ) { return getBoolean ( R . string . pref_key_search_split_to_words , DEF_SEARCH_SPLIT_TO_WORDS ) ; }
public KonamiCodeLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initalizeValiables ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . activity_main , menu ) ; setThemeMenuItem = menu . findItem ( R . id . set_theme ) ; updateThemeMenuItem ( ) ; return true ; }
public void start ( Attributes attributes ) { mCurrentThread . setIsImportant ( attributes . getValue ( Topic . Xml . IS_IMPORTANT_ATTRIBUTE ) . equals ( "1" ) ) ; }
public void mapFragmentRetainMockAccuracy_isFalse ( ) { ActivityScenario . launch ( GeoPointMapActivity . class ) ; assertThat ( mapFragment . isRetainMockAccuracy ( ) , is ( false ) ) ; }
public Setting getSetting ( Id settingId ) { return _managedSettings . get ( settingId ) ; }
public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; postAdoptPosition ( header ) ; }
public boolean onMenuItemActionCollapse ( MenuItem item ) { finish ( ) ; return false ; }
public static void i ( String tag , String msg ) { if ( Constants . DEBUG ) { android . util . Log . i ( tag , msg ) ; } }
public static RedditURLParser . RedditURL getSubreddit ( String subreddit ) throws InvalidSubredditNameException { return getSubreddit ( new SubredditCanonicalId ( subreddit ) ) ; }
public PagerAdapter ( FragmentManager fm , Fragment . . . fragments ) { super ( fm ) ; this . fragments = fragments ; }
public ItemSprite . Glowing glowing ( ) { return null ; }
public void run ( ) { NetworkConnection . getInstance ( ) . say ( buffer . getCid ( ) , null , "/query " + selected_user . nick ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { int id = loader . getId ( ) ; if ( id == LIST_LOADER_ID ) { mProgressBar . setVisibility ( View . VISIBLE ) ; mAdapter . swapCursor ( null ) ; } }
public boolean hasSourcePost ( ) { return sourceBlogId != 0 && sourcePostId != 0 ; }
public static boolean isNetworkAvailable ( Activity a ) { ConnectivityManager connectivityManager = ( ConnectivityManager ) a . getSystemService ( a . CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetworkInfo = connectivityManager . getActiveNetworkInfo ( ) ; return activeNetworkInfo != null && activeNetworkInfo . isConnected ( ) ; }
public UnderlineTextView ( Context context ) { this ( context , null ) ; }
public float getSwipeThreshold ( @ NonNull RecyclerView . ViewHolder viewHolder ) { return 2 . 9f ; }
public void pickFileWithFileSchemeAndAnyType ( ) { launch ( buildIntent ( ACTION_PICK_FILE , "file" , "fu/bar" ) ) ; }
public void open ( final List < Audio > list , final int position ) throws RemoteException { mService . get ( ) . open ( list , position ) ; }
public void joinMuc ( Conversation conversation ) { joinMuc ( conversation , false ) ; }
public void w ( String tag , String message , Object . . . args ) { log ( android . util . Log . WARN , tag , message , args ) ; }
public LinearLayout . LayoutParams getLinearLayoutParams ( ) { LinearLayout . LayoutParams params = new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . MATCH_PARENT , LinearLayout . LayoutParams . MATCH_PARENT ) ; params . setMargins ( 50 , 0 , 20 , 20 ) ; return params ; }
public ModelLoader < ArtistImage , InputStream > build ( @ NonNull MultiModelLoaderFactory multiFactory ) { return new ArtistImageLoader ( context , lastFMClient , okHttp ) ; }
public void onAttachedToRecyclerView ( RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; recyclerView . addOnScrollListener ( scrollListener ) ; loadNextItemsIfNeeded ( recyclerView ) ; }
public static SharedPreferences getPrefs ( Context context ) { if ( _prefs == null ) _prefs = context . getSharedPreferences ( "FlutterSharedPreferences" , Context . MODE_PRIVATE ) ; return _prefs ; }
public String getBlogUrl ( ) { return StringUtils . notNullStr ( blogUrl ) ; }
public void loadTutorial ( ) { Intent mainAct = new Intent ( SplashActivity . this , MaterialTutorialActivity . class ) ; mainAct . putParcelableArrayListExtra ( MaterialTutorialActivity . MATERIAL_TUTORIAL_ARG_TUTORIAL_ITEMS , splashPresenter . getTutorialItems ( this ) ) ; startActivityForResult ( mainAct , 4325 ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . genre_child_tab , container , false ) ; }
public void onPostExecute ( JSONObject json , String body ) { if ( mPhotoFileListener != null ) { mPhotoFileListener . execute ( ) ; } }
public int hashCode ( ) { return Objects . hash ( _id , name ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { return isSwipe ( ) && super . onInterceptTouchEvent ( event ) ; }
public void burn ( ) { remove ( ) ; Dungeon . level . set ( getPos ( ) , Terrain . EMBERS ) ; GameScene . discoverTile ( getPos ( ) ) ; }
public boolean isCompatible ( ) { return rpdVersion <= ( RemixedDungeon . versionCode % 2000 ) ; }
public void testNoApiStatus ( ) { mJsonData . remove ( APIStatusDeserializer . FMS_API_DOWN_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public void keyDownUp ( int key_id ) { mEventQueue . add ( new Event . KeyKegsEvent ( key_id , false ) ) ; mEventQueue . add ( new Event . KeyKegsEvent ( key_id , true ) ) ; resetStickyKeys ( ) ; }
public LiveData < Boolean > isBackgroundRecordingEnabled ( ) { return isBackgroundRecordingEnabled ; }
public CalendarView ( @ NonNull Context context ) { super ( context , null ) ; }
public FingerTracker ( FingerListener mListener ) { this . mListener = mListener ; for ( int i = 0 ; i < mFingers . length ; i ++ ) { mFingers [ i ] = new Finger ( ) ; } }
public Cert [ ] getCertificateChain ( ) { return authenticator . getResource ( AccountProperty . CERTIFICATE_CHAIN , Cert [ ] . class ) ; }
public Point ( ) { this . daoList = new ArrayList < DAO > ( ) ; this . basePoint = true ; this . registerDAO ( PointsDataSource . getInstance ( ) ) ; }
public void setLayers ( List < ProfileLayer > layers ) { this . layers . clear ( ) ; this . layers . addAll ( layers ) ; notifyDataSetChanged ( ) ; }
public int getColorPrimaryDark ( ) { return getAttributeValue ( R . attr . colorPrimaryDark ) ; }
public void setGif ( TLRPC . Document document , boolean divider ) { needDivider = divider ; needShadow = false ; inlineResult = null ; documentAttach = document ; mediaWebpage = true ; requestLayout ( ) ; updateButtonState ( false ) ; }
public Integer getDisplayOrder ( ) { int matchNumber = getMatchNumber ( ) , setNumber = getSetNumber ( ) ; return type . getPlayOrder ( ) * 1000000 + setNumber * 1000 + matchNumber ; }
private float getTextX ( boolean scale ) { if ( scale ) { return this . textX / 5 ; } return this . textX ; }
public static byte [ ] decode ( String s ) throws EncodingException { try { return BaseEncoding . base32 ( ) . decode ( s . toUpperCase ( ) ) ; } catch ( IllegalArgumentException e ) { throw new EncodingException ( e ) ; } }
public static Calendar dateToCalendar ( Date date ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( date ) ; return cal ; }
public DistrictTeams getDistrictTeamsTable ( ) { return mDistrictTeamsTable ; }
private static void initDirs ( String path ) { emulatorDir = path ; dataDir = emulatorDir + MIDLET_DATA_DIR ; configsDir = emulatorDir + MIDLET_CONFIGS_DIR ; profilesDir = emulatorDir + "/templates/" ; appDir = emulatorDir + MIDLET_DIR ; }
public < E > E asObject ( final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { final E obj = clazz . getConstructor ( ) . newInstance ( ) ; populateObject ( obj ) ; return obj ; }
public void execute ( ) { if ( haveStoragePermission ( ) ) { downloadImage ( mImageUrl ) ; } else { } }
private void fillStatus ( List < Status > statuses ) { CommitStatusBox commitStatusBox = mListHeaderView . findViewById ( R . id . commit_status_box ) ; commitStatusBox . fillStatus ( statuses , mPullRequest . mergeableState ( ) ) ; }
public void onRefresh ( ) { getRoomsCall ( false , null ) ; mSwipeRefreshLayout . setRefreshing ( true ) ; }
public Object getItem ( int _position ) { return mFolders . get ( _position ) ; }
public BleScanState getScanState ( ) { return scanState ; }
public String getDescription ( ) { return text ; }
private void finish ( ) { Syncer w = mNotifyTo . get ( ) ; if ( w != null ) { synchronized ( w ) { w . notifyAll ( ) ; } } }
public int getItemCount ( ) { return mContacts . size ( ) ; }
private void reopenFragment ( ) { getCallback ( ) . replaceFragment ( new DayViewFragment ( ) , getString ( R . string . events ) ) ; ; }
public String getVersionString ( ) { String version ; try { version = mActivity . getPackageManager ( ) . getPackageInfo ( mActivity . getPackageName ( ) , 0 ) . versionName ; } catch ( PackageManager . NameNotFoundException e ) { version = "FEHLER" ; } return version ; }
public SingleGameView ( Context context ) { this ( context , 0 , 0 ) ; }
public void onError ( @ NonNull Throwable t ) { hideProgress ( ) ; }
public Object getResult ( ) { return result ; }
public void goToAddContactActivity ( ) { Intent intent = new Intent ( this , AddContactActivity . class ) ; startActivity ( intent ) ; }
public static boolean canSwipeLeft ( int reactionType ) { return ( extractLeftReaction ( reactionType ) == REACTION_CAN_SWIPE ) ; }
public Builder stepNextButtonText ( String stepNextButtonText ) { style . stepNextButtonText = stepNextButtonText ; return this ; }
public boolean attachTo ( Char target ) { if ( super . attachTo ( target ) ) { Roots . detach ( target , Roots . class ) ; return true ; } else { return false ; } }
public void onProgressDownload ( String fileName , float progress ) { radialProgress . setProgress ( progress , true ) ; if ( buttonState != 1 ) { updateButtonState ( false ) ; } }
private void setCustomFilenameSummary ( ) { int filenameValue = new Integer ( appPreferences . getCustomFilename ( ) ) - 1 ; prefCustomFilename . setSummary ( getResources ( ) . getStringArray ( R . array . filenameEntries ) [ filenameValue ] ) ; }
public void setViewMode ( String viewMode ) { SharedPreferences . Editor editor = m_prefs . edit ( ) ; editor . putString ( "view_mode" , viewMode ) ; editor . commit ( ) ; }
public BleBluetooth ( BleDevice bleDevice ) { bleBluetooth = this ; this . bleDevice = bleDevice ; }
public int getSelectedSlave ( ) { return 0 ; }
public void usageSimple ( ) { ChatManager . getInstance ( ) . sendTextMessage ( "UID" , "Andrea Leo" , "hello world ! " ) ; }
private void init ( ) { final View v = LayoutInflater . from ( getContext ( ) ) . inflate ( R . layout . emoji_drawer , this , true ) ; initializeResources ( v ) ; initializePageModels ( ) ; initializeEmojiGrid ( ) ; }
public int getFilesCount ( ) { return filesCount ; }
public static MealPlanDayFilterHelper newInstance ( ArrayList < String > currentList , MealPlanRecipeAdapter adapter ) { MealPlanDayFilterHelper . adapter = adapter ; MealPlanDayFilterHelper . currentList = currentList ; return new MealPlanDayFilterHelper ( ) ; }
public void onColorSelection ( @ NonNull ColorChooserDialog dialog , @ ColorInt int selectedColor ) { Utils . saveValue ( this , "color" , selectedColor ) ; updateColor ( ) ; }
public void onPanelSlide ( View panel , float slideOffset ) { for ( final SlidingPanelEventsListener listener : mslidingPanelEventsListeners ) { if ( listener != null ) { listener . onPanelSlide ( panel , slideOffset ) ; } } }
public String onNotArgEnough ( ExecutePack info , int nArgs ) { return null ; }
public void onResume ( ) { super . onResume ( ) ; Log . d ( LOG , "onResume called" ) ; }
private void doEscSelectLeftParen ( byte b ) { doSelectCharSet ( true , b ) ; }
public AnimatablePathValue ( ) { keyframes . add ( new Keyframe <> ( new PointF ( 0 , 0 ) ) ) ; }
public String AppendMin ( int integer ) { if ( integer < 10 ) return "0" + Integer . toString ( integer ) ; else { return Integer . toString ( integer ) ; } }
public com . coinomi . core . protos . Protos . WalletPocket getPockets ( int index ) { return pockets_ . get ( index ) ; }
public void setNode ( TetroidNode node ) { this . node = node ; }
public void notifyTotal ( double total ) { cartTotal = total ; estimatedTotal . setText ( "Estimated Total ( Before Update ) : " + PrefGeneral . getCurrencySymbol ( this ) + " " + String . format ( "% . 2f" , cartTotal ) ) ; }
public LloydsBeacon ( ) { image = ItemSpriteSheet . BEACON ; returnTo . cellId = - 1 ; name = Game . getVar ( R . string . LloidsBeacon_Name ) ; }
public void addItem ( Item item ) throws IOException { add ( item ) ; mTotalSize += item . getLongProperty ( Item . SIZE ) ; }
public static DirectionAndPlaceConnection getInstance ( ) { if ( connection == null ) { connection = new DirectionAndPlaceConnection ( ) ; } return connection ; }
public DeterministicKey findKeyFromPubHash ( byte [ ] pubkeyHash ) { lock . lock ( ) ; try { return ( DeterministicKey ) basicKeyChain . findKeyFromPubHash ( pubkeyHash ) ; } finally { lock . unlock ( ) ; } }
public void onAttach ( Context context ) { super . onAttach ( context ) ; wikidataEditListener . setAuthenticationStateListener ( this ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState ) ; Logger . info ( "WearAppsFragment onCreateView" ) ; return inflater . inflate ( R . layout . activity_wear_apps , container , false ) ; }
public DefaultItemChangeAnimationManager ( BaseItemAnimator itemAnimator ) { super ( itemAnimator ) ; }
public void onPageSelected ( int position ) { addBottomDots ( position ) ; mNextButton . setText ( getString ( ( position == mLayouts . length - 1 ) ? R . string . finish : R . string . cont ) ) ; }
public void setDistanceKilometres ( double distanceKilometres ) { distance . setDistance ( Distance . Unit . KM , distanceKilometres ) ; updatePace ( ) ; }
public void onClick ( View v ) { getExceptionalRunnable ( item [ holder . getAdapterPosition ( ) ] . getText ( context ) ) . run ( ) ; }
public String getUserNameFromPreferences ( ) { return generalSettings . getString ( GeneralKeys . KEY_USERNAME ) ; }
public boolean hasLockTime ( ) { return ( ( bitField0_ & 0x00000008 ) == 0x00000008 ) ; }
public MyBaseViewHolder ( View itemView ) { super ( itemView ) ; containerView = itemView . findViewById ( R . id . container ) ; textView = ( TextView ) itemView . findViewById ( android . R . id . text1 ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . clear : clearLog ( ) ; return true ; default : return super . onOptionsItemSelected ( item ) ; } }
public ViewHolderSavedMarketList ( @ NonNull View itemView , Context context , listItemMarketNotifications subscriber ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; this . context = context ; this . subscriber = subscriber ; }
public int getBackground ( ) { return background ; }
private static boolean isDirectory ( BaseFile path ) { return path . getPermission ( ) . startsWith ( "d" ) || new File ( path . getPath ( ) ) . isDirectory ( ) ; }
public void onUpButtonClicked ( ) { mWebView . scrollToTop ( ) ; }
public void setPaintProgress ( @ ColorRes int color ) { paintProgress . setColor ( ContextCompat . getColor ( getContext ( ) , color ) ) ; invalidate ( ) ; }
public void setNumberPicker ( NumberPicker picker ) { this . mNumberPicker = picker ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `notify` INTEGER NOT NULL DEFAULT 0" ) ; }
public Element query ( String xmlns ) { Element query = query ( ) ; query . setAttribute ( "xmlns" , xmlns ) ; return query ( ) ; }
private void storeSetting ( String key , boolean value ) { getSharedPreferences ( PREFERENCES_NAME , Context . MODE_PRIVATE ) . edit ( ) . putBoolean ( key , value ) ; }
public int getItemCount ( ) { return mTranslations . size ( ) ; }
public static PhotoSizeDto create ( char type , String url ) { PhotoSizeDto dto = new PhotoSizeDto ( ) ; dto . url = url ; dto . type = type ; return dto ; }
public static void log ( Context context , Exception ex , int duration ) { log ( context , getExceptionInfo ( ex ) , Types . ERROR , duration ) ; }
private PeopleListFragment getListFragment ( ) { return ( PeopleListFragment ) getFragmentManager ( ) . findFragmentByTag ( KEY_PEOPLE_LIST_FRAGMENT ) ; }
public BluetoothIconData . BluetoothReceiver getReceiver ( ) { return new BluetoothReceiver ( ) ; }
public void startRingback ( ) { mRemoteLogger . d ( "onCallStartRingback" ) ; mHandler . postDelayed ( mRingbackRunnable , 2000 ) ; }
public Resources getSafeResources ( ) { return IRCCloudApplication . getInstance ( ) . getApplicationContext ( ) . getResources ( ) ; }
public static void setAllowDrawUnderStatusBar ( Window window ) { window . getDecorView ( ) . setSystemUiVisibility ( View . SYSTEM_UI_FLAG_LAYOUT_STABLE | View . SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN ) ; }
public void success ( Contact contact ) { activity . encryptTextMessage ( message ) ; }
private void acquire ( ) { wakeLock . acquire ( ) ; keyguardLock . disableKeyguard ( ) ; }
public String getWhereName ( ) { return this . name ( ) . toLowerCase ( ) ; }
public static void overrideReferenceManager ( ReferenceManager referenceManager ) { RobolectricHelpers . overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public ReferenceManager providesReferenceManager ( ) { return referenceManager ; } } ) ; }
public void setTitle ( CharSequence title ) { mTitle = title ; getActionBar ( ) . setTitle ( mTitle ) ; }
public void onConnected ( Bundle connectionHint ) { }
public static boolean isText ( String mimeType ) { return BASE_TYPE_TEXT . equals ( getTopLevelType ( mimeType ) ) ; }
public void onClick ( View v ) { mCallback5 . onQueueClicked ( ) ; }
public synchronized void execute ( final Runnable r ) { tasks . clear ( ) ; if ( active != null && active instanceof Cancellable ) { ( ( Cancellable ) active ) . cancel ( ) ; } super . execute ( r ) ; }
public static String getWhenAskPass ( ) { return getString ( R . string . pref_key_when_ask_password , context . getString ( R . string . pref_when_ask_password_on_select ) ) ; }
public void onPause ( ) { prefs . unregisterOnSharedPreferenceChangeListener ( prefListener ) ; Log . w ( "myApp" , " [ # ] FragmentSettings . java - onPause" ) ; EventBus . getDefault ( ) . post ( "UPDATE_SETTINGS" ) ; super . onPause ( ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; Trip testTrip = new Trip ( ) ; mTestItemBefore = new Item ( testTrip , ITEM_TEST_NAME ) ; sleep ( 10 ) ; mTestItemAfter = new Item ( testTrip , ITEM_TEST_NAME ) ; }
public Typeface getMerriweatherSansRegular ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/MerriweatherSans - Regular . ttf" ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; return true ; }
public void setCpu ( int cpu ) { this . cpu = cpu ; }
public int compare ( ImageResult o1 , ImageResult o2 ) { return o2 . weight . compareTo ( o1 . weight ) ; }
public NotRecentlyPlayedPlaylist ( @ NonNull Context context ) { super ( context . getString ( R . string . not_recently_played ) , R . drawable . ic_library_music_white_24dp ) ; }
public int getImageMaxSize ( ) { return 6 * MB ; }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new LoadingScreen ( game , Screens . level3 ) ) ; }
public void exportContentAll ( String siteId , Listener listener , ErrorListener errorListener ) { String path = String . format ( Locale . US , "sites/%s/exports/start" , siteId ) ; post ( path , listener , errorListener ) ; }
public EllipsisTextView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; }
public static void setUploadToTrainingPeaks ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_RUNKEEPER , false ) . commit ( ) ; }
private void setUpRecyclerView ( ) { int defaultLayout = SharedPrefsUtils . getItemType ( this ) ; if ( defaultLayout == SharedPrefsUtils . GRID_LAYOUT_ID ) { setGridLayout ( ) ; } else { setListLayout ( ) ; } mRecyclerView . setAdapter ( mSandwichAdapter ) ; }
public void setDisplayName ( String displayName ) { this . displayName = displayName ; }
public static boolean isPicsEnabled ( String subreddit ) { if ( subreddit == null ) return bigPicEnabled ; return prefs . getBoolean ( "picsenabled" + subreddit . toLowerCase ( ) , bigPicEnabled ) ; }
public boolean canAttack ( ) { return super . canAttack ( ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View mView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . log_recycle_item , parent , false ) ; return new ViewHolder ( mView ) ; }
public HashMap < QoSTestResultEnum , List < QoSServerResult >> getResultMap ( ) { return resultMap ; }
private static void printHeader ( ) { CLITools . out . println ( " - ID - ----------- FILENAME ----------- --- SIZE --- " ) ; }
public int getIn ( ) { return in ; }
public void updateCurrentLocation ( double latitude , double longitude ) { mMap . animateCamera ( CameraUpdateFactory . newLatLngZoom ( new LatLng ( latitude , longitude ) , 15 ) , 10 , null ) ; }
public void ProfileMyFavoritesInit ( ) { if ( mList . size ( ) == 0 ) { getUserFavorites ( ) ; } setAdapter ( ) ; }
public void onZoomClick ( boolean isFull ) { mInterface . setFullScreenMode ( isFull ) ; }
public PlayerState getPlayerState ( ) { return connectionState . getActivePlayerState ( ) ; }
public ResponseAnswer getAnswer ( ) { return new ResponseAnswer ( checkbox . getAnswer ( ) . getIdOptiune ( ) , details . getText ( ) . toString ( ) ) ; }
private void initialize ( ) { if ( Prefs . isIncognitoKeyboardEnabled ( getContext ( ) ) ) { setImeOptions ( getImeOptions ( ) | 16777216 ) ; } }
public DrawerMenuItem drawerMenuItem ( ) { return DrawerMenuItem . SETTINGS ; }
public void showItems ( Cursor items ) { mAdapter . swapCursor ( items , true ) ; mAdapter . notifyDataSetChanged ( ) ; }
public void finishAfterTransition ( ) { super . finishAfterTransition ( ) ; Log . e ( getPackageName ( ) , "finishAfterTransition" ) ; }
public ChildZoneBuilder setNextZoneNumberAsOf ( Date nextZoneNumberAsOf ) { mNextZoneNumberAsOf = nextZoneNumberAsOf ; return this ; }
public void onClick ( DialogInterface dialog , int which ) { switch ( which ) { case DialogInterface . BUTTON_POSITIVE : adp1 . removeAll ( ) ; resetListAdapter ( ) ; break ; case DialogInterface . BUTTON_NEGATIVE : break ; } }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeString ( q ) ; stream . writeInt32 ( offset ) ; }
public static int unwrapPosition ( RecyclerView . Adapter originAdapter , AdapterPathSegment targetAdapterPathSegment , int originPosition , @ Nullable AdapterPath destPath ) { return unwrapPosition ( originAdapter , targetAdapterPathSegment . adapter , targetAdapterPathSegment . tag , originPosition , destPath ) ; }
public boolean onSupportNavigateUp ( ) { finish ( ) ; return true ; }
public void setOnItemClickListener ( OnItemClickListener listener ) { itemClickListener = listener ; }
public GmailEmailView clickOnEmail ( ) { try { email . click ( ) ; } catch ( NoSuchElementException e ) { email2 . click ( ) ; } GmailEmailView gmailEmailView = new GmailEmailView ( driver ) ; return gmailEmailView ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { StickerCell view = new StickerCell ( mContext ) ; return new Holder ( view ) ; }
public EntryType ( String name , int color , int iconID ) { this . name = name ; this . color = color ; this . iconID = iconID ; }
public void delete ( String id ) { getSetting ( ) . edit ( ) . remove ( id ) . apply ( ) ; }
public boolean isViewFromObject ( View view , Object o ) { return view == o ; }
private void tintCompoundDrawables ( @ IdRes int . . . textViewIds ) { for ( int textViewId : textViewIds ) { Theme . tintCompoundDrawables ( this , ( TextView ) findViewById ( textViewId ) ) ; } }
public static String getLogprefix ( Account account ) { return LOGPREFIX + " ( " + account . getJid ( ) . toBareJid ( ) . toString ( ) + " ) : " ; }
public void onResponse ( JSONObject jsonObject ) { handleUpdatePostResponse ( originalPost , jsonObject , resultListener ) ; }
private double tonTopound ( double num ) { return num * 2204 . 624d ; }
public void testEncodeAutoWithSpecialChars ( ) throws Exception { PDF417HighLevelEncoder . encodeHighLevel ( "1%§s ?aG$" , Compaction . AUTO , StandardCharsets . UTF_8 ) ; }
public void onEvent ( int i , Bundle bundle ) { Log . d ( TAG , "onEvent : " ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; QuranScreenInfo . getOrMakeInstance ( this ) ; mQuranSettings = QuranSettings . getInstance ( this ) ; mQuranSettings . upgradePreferences ( ) ; }
public String getGambar ( ) { return ServerConfig . IMAGE_FOLDER + gambar ; }
public PrimaryEditTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; defineUi ( context , attrs , 0 ) ; }
public void onValidHostConfigured ( HostBean host ) { mHost = host ; if ( mSaveHostButton != null ) mSaveHostButton . setEnabled ( true ) ; }
public void swapData ( List < Player > newList ) { playersList = newList ; notifyDataSetChanged ( ) ; }
private void setText ( final int layout , final String text ) { TextView textView = activity . findViewById ( layout ) ; if ( textView != null ) { textView . setText ( text ) ; } }
public void setInter1EndOver ( double value ) { this . inter1EndOver = value ; }
public String getWeekday ( ) { return weekday ; }
private final Runnable enableLocationUpdatesRunnable = new Runnable ( ) { @ Override public void run ( ) { setGPSLocationUpdates ( false ) ; setGPSLocationUpdates ( true ) ; updateGPSLocationFrequency ( ) ; } } ;
public void onDataSetChanged ( ) { Log . d ( Utils . getAppTag ( ) , Utils . getMethodName ( ) ) ; mItemCursor = createItemCursor ( ) ; }
public Model add ( Collection col ) { Models mm = col . getModels ( ) ; Model model = _new ( mm ) ; mm . add ( model ) ; return model ; }
public void sendSuccessAndClose ( int [ ] values ) { Intent data = new Intent ( ) ; data . putExtra ( EXTRA_PIN_VALUE , values ) ; getActivity ( ) . setResult ( Activity . RESULT_OK , data ) ; getActivity ( ) . finish ( ) ; }
public void onStop ( ) { getMapView ( ) . onStop ( ) ; super . onStop ( ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfHerbalism_Info ) : super . desc ( ) ; }
private void keepAwake ( ) { checkNetworkConnectivityAndRefreshRegisters ( ) ; acquireWakeLock ( ) ; mHandler . postDelayed ( ( ) -> { if ( getSimlarStatus ( ) != SimlarStatus . ONGOING_CALL ) { releaseWakeLock ( ) ; } } , 4000 ) ; }
public String getRole ( ) { return role ; }
public void testGetLastListElement ( ) { assertThat ( CollectionUtils . getLastListElement ( testList ) , is ( 3 ) ) ; }
private void givenItemClickListener ( ) { mItemClickListener = mock ( ModelAdapter . OnItemClickListener . class ) ; uut . setOnItemClickListener ( mItemClickListener ) ; }
public void updateRatingSum ( int ratingSum ) { setRatingValue ( ratingSum ) ; setRatingSum ( getRatingSum ( ) + ratingSum ) ; }
public void onPushFailure ( ) { Log . i ( TAG , "push failure" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_PUSH_FAILURE , new ArrayList < String > ( ) ) ; }
public void onStop ( ) { super . onStop ( ) ; mapView . onStop ( ) ; }
private void onRingerModeChanged ( ) { Lg . i ( LOGTAG , "onRingerModeChanged" ) ; if ( ! mHasOnGoingAlarm ) { return ; } if ( shouldVibrate ( ) ) { startVibrate ( ) ; } else { stopVibrate ( ) ; } }
public Config setIconSize ( int iconSize ) { this . iconSize = iconSize ; return this ; }
public void deleteRecordingItem ( RecodingItem item ) { recodingItemDao . deleteRecodingItem ( item ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( "current_path" , parentFolder . getAbsolutePath ( ) ) ; }
public void delete ( Long [ ] ids , CoNaObiadDbHelper helper ) { helper . delete ( tableName , ids ) ; }
public List < RecyclerItem < T >> getItems ( ) { return items ; }
public void removeAll ( Collection < T > ts ) { mData . removeAll ( ts ) ; }
public void setOuterShape ( OuterShapeType outerShape ) { this . outerShape = outerShape ; invalidate ( ) ; }
public boolean isInActionMode ( ) { return mMode != null ; }
public void openFile ( final Audio audio ) throws RemoteException { mService . get ( ) . openFile ( audio ) ; }
public float getProgress ( ) { return animator . getValue ( ) ; }
private void launchHomeScreen ( ) { prefManager . setLaunch ( false ) ; startActivity ( new Intent ( WelcomeActivity . this , SplashActivity . class ) ) ; finish ( ) ; }
public static synchronized TermuxPreferencesDataStore getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new TermuxPreferencesDataStore ( context . getApplicationContext ( ) ) ; } return mInstance ; }
public void testDistrictTeamWriter ( ) { mWriter . write ( mDistrictTeam , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_DISTRICTTEAMS , null , mDistrictTeam . getParams ( ) ) ; }
private void clearSearch ( ) { searchView . setQuery ( "" , false ) ; if ( cursor == null && refreshedCursor == null ) { return ; } else { adapter . swapCursor ( null ) ; modString = null ; } }
public void resetMaxData ( ) { acc_max_data = new LinkedList <> ( ) ; acc_max_raw_data = new LinkedList <> ( ) ; }
public void setAuthors ( List < Number > authors ) { this . authors = authors ; }
public String getUserNoteWorkspace1 ( ) { return ENUM_String . STRING_USER_NOTE_WORKSPACE_1 . value ; }
private static void rebuild ( ) { ui . top ( ) . updatePaletteMenu ( ) ; }
public boolean set ( int nextValue ) { varValueAsInt = nextValue ; varType = VariableType . VariableTypeInteger ; varIsInit = true ; return true ; }
public boolean isNetFreeToMoveLeft ( ) { boolean result = false ; if ( figure . coordinatesInNet . x != 0 && isNetFreeToMoveDown ( ) && ! isFigureLeft ( ) ) { result = true ; } return result ; }
public void setCreatedDate ( @ NonNull long createdDate ) { mCreatedDate = createdDate ; }
public int getCount ( ) { return mItem . isStoryType ( ) && mShowArticle ? 2 : 1 ; }
public AboutBuilder setAppTitle ( int text ) { return setAppTitle ( context . getString ( text ) ) ; }
public void setJoke ( String data ) { mJokeString = data ; }
private synchronized boolean isSseConnected ( ) { return mSseConnection != null && mSseConnection . getStatus ( ) == SseConnection . Status . CONNECTED ; }
private boolean AreMultipliabe ( Matrix h ) { return this . GetCol ( ) == h . GetRow ( ) ; }
public static Servings createServingsIfDoesNotExist ( final Day day , final Food food ) { return createServingsIfDoesNotExist ( day , food , 0 ) ; }
public void drawPolygon ( int xPoints [ ] , int xOffset , int yPoints [ ] , int yOffset , int nPoints , int argbColor ) { setARGBColor ( argbColor ) ; graphics . drawPolygon ( xPoints , xOffset , yPoints , yOffset , nPoints ) ; }
public WndSaveSlotSelect ( final boolean _saving ) { this ( _saving , Game . getVar ( R . string . WndSaveSlotSelect_SelectSlot ) ) ; }
public void maybeThrowSourceInfoRefreshError ( ) throws IOException { playlistTracker . maybeThrowPlaylistRefreshError ( ) ; }
public void onClick ( View v ) { int adapterPosition = getAdapterPosition ( ) ; clickListener . onClickCollection ( collectionList . get ( adapterPosition ) , authorImageView ) ; }
public com . coinomi . core . protos . Protos . DeterministicKey getDeterministicKey ( ) { return deterministicKey_ ; }
public void showFieldPanelForEdit ( boolean show , MessageObject messageObjectToEdit ) { showFieldPanel ( show , null , messageObjectToEdit , null , null , false , true ) ; }
public RecipeCardHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new RecipeCardHolder ( parent ) ; }
public void setEnableReminders ( boolean enableReminders ) { this . enableReminders = enableReminders ; }
public boolean isSearchOpened ( ) { return searchingStickers ; }
public long getContentBufferedPosition ( ) { return player . getContentBufferedPosition ( ) ; }
public boolean act ( Hero hero ) { if ( hero . getCloser ( dst ) ) { return true ; } else { hero . readyAndIdle ( ) ; return false ; } }
public LeakGuardHandlerWrapper ( @ NonNull final T ownerInstance ) { this ( ownerInstance , Looper . myLooper ( ) ) ; }
public DefaultIncomingImageMessageViewHolder ( View itemView ) { super ( itemView ) ; }
public void run ( ) { Toast . makeText ( getApplicationContext ( ) , "LOST CONNECTION" , Toast . LENGTH_SHORT ) . show ( ) ; }
public void call ( MenuListActivity activity ) { activity . startActivity ( new Intent ( activity , PlannerActivity . class ) ) ; }
public long getDateTime ( ) { return dateTime ; }
public void onMenuVisibilityChanged ( boolean isVisible ) { inActionBarMenu = isVisible ; if ( isVisible == false ) { hideEmulatedKeys ( ) ; } }
public void setWeekday ( int weekday ) { this . weekday = weekday ; }
public CheckableRelativeLayout ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; }
public int getTitleBarHeight ( ) { return ( activity . getWindow ( ) . getAttributes ( ) . y + activity . getSupportActionBar ( ) . getHeight ( ) ) ; }
private void onUnitsChangedTo ( int pos ) { settings . setDistanceUnits ( Settings . DistanceUnits . values ( ) [ pos ] ) ; this . updateTarget ( ) ; }
public long openSetCompleted ( long numFiles , long numBytes ) { return 0 ; }
public static long getChildItemId ( long rawId ) { return ExpandableAdapterHelper . getChildItemId ( rawId ) ; }
public void setPersonId ( String personId ) { this . personId = personId ; }
public UploadObject setAutoCommit ( boolean autoCommit ) { this . autoCommit = autoCommit ; return this ; }
public Builder clearSource ( ) { bitField0_ = ( bitField0_ & ~0x00000020 ) ; source_ = com . coinomi . core . protos . Protos . TransactionConfidence . Source . SOURCE_UNKNOWN ; onChanged ( ) ; return this ; }
public static void updatePlayer ( Player player ) { }
public Typeface getRobotoSlabLight ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/RobotoSlab - Light . ttf" ) ; }
public static boolean ValidatePassword ( String password ) { return ( password . matches ( "^ [ \\w ! @ #\\$%\\^ & \\*\\ ( \\ ) ] { 4 , 12 } $" ) ) ; }
public int getCurrentWindowIndex ( ) { if ( timeline . isEmpty ( ) || pendingSeekAcks > 0 ) { return maskingWindowIndex ; } else { return timeline . getPeriod ( playbackInfo . periodIndex , period ) . windowIndex ; } }
public boolean onPreDraw ( ) { if ( fragmentView != null ) { needLayout ( ) ; fragmentView . getViewTreeObserver ( ) . removeOnPreDrawListener ( this ) ; } return true ; }
public void onAnimationEnd ( Animator animation ) { updateMenu ( ) ; }
public AboutBuilder setCover ( Bitmap cover ) { this . cover = cover ; return this ; }
public void onResume ( ) { super . onResume ( ) ; handlerStartScreen . postDelayed ( runnable , DELAY ) ; }
public void showNoInternetConnection ( ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_no_internet ) , getString ( R . string . dialog_error_message_no_internet ) ) ; }
public com . coinomi . core . protos . Protos . Transaction . Builder addTransactionBuilder ( ) { return getTransactionFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . Transaction . getDefaultInstance ( ) ) ; }
public void fireDefaultCommandAction ( ) { if ( defaultCommand != null ) { owner . postEvent ( CommandActionEvent . getInstance ( listener , defaultCommand , this ) ) ; } }
public void onError ( String msg , Throwable th ) { Log . e ( TAG , "There was an error incrementing bookmark click counter . " + msg , th ) ; openBookmark ( ) ; }
public boolean isFilePathType ( ) { switch ( this ) { case VariableTypeRawFileFilePath : case VariableTypeStorageFilePath : return true ; default : return false ; } }
private void thenShouldStartActivity ( ) { new Verifications ( ) { { mPreferenceFragment . startActivity ( withAny ( new Intent ( ) ) ) ; } } ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "DROP VIEW `folderview`" ) ; }
private void showOpenFileSelector ( ) { Intent intent = new Intent ( Intent . ACTION_OPEN_DOCUMENT ) ; intent . addCategory ( Intent . CATEGORY_OPENABLE ) ; intent . setType ( "application/octet - stream" ) ; startActivityForResult ( intent , OPEN_FILE_RESULT_CODE ) ; }
public int size ( ) { return hours . length ; }
public ReturnObject doInBackground ( Void . . . voids ) { return new ReturnObject ( getTemperature ( mContext . get ( ) , deviceObject ) ) ; }
public void onTransactionCancel ( String inErrorMessage , Bundle inResponse ) { Timber . e ( "onTransactionCancel : %s | %s" , inErrorMessage , inResponse ) ; }
private static byte [ ] generateSalt ( ) throws NoSuchAlgorithmException { SecureRandom random = SecureRandom . getInstance ( "SHA1PRNG" ) ; byte [ ] salt = new byte [ 8 ] ; random . nextBytes ( salt ) ; return salt ; }
public void editTextComplete ( String value ) { if ( value != null ) { ProfileManager . get ( ) . createProfile ( value , false , false ) ; } }
public UserBuilder mobile ( String mobile ) { this . mobile = mobile ; return this ; }
public void setHostNum ( String newHostNum ) { mHostNum = newHostNum ; }
public String fromList ( List < String > videos ) { return new Gson ( ) . toJson ( videos ) ; }
public void run ( ) { Editable e = getText ( ) ; if ( onTextChangedListener != null ) { onTextChangedListener . onTextChanged ( e . toString ( ) ) ; } highlightWithoutChange ( e ) ; }
private Bitmap getMoneroLogo ( ) { if ( logo == null ) { logo = Helper . getBitmap ( getContext ( ) , R . drawable . ic_arqma_logo_b ) ; } return logo ; }
public void startParsing ( ) { Log . d ( TAG , "Start ParsingTask" ) ; this . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR , parser . getTimeTableURLs ( ) ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . itto7 . itimeu" , appContext . getPackageName ( ) ) ; }
public String getPlace ( ) { return place ; }
public static int getGroupViewType ( int rawViewType ) { return ExpandableAdapterHelper . getGroupViewType ( rawViewType ) ; }
public LocationSharingService ( ) { super ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . liveLocationsChanged ) ; }
public void onSuccess ( OpenWeatherApiResponse apiResponse ) { OnUpdateWeatherListListener onUpdateWeatherListListener = mOnUpdateWeatherListListenerWeakReference . get ( ) ; onSuccess ( apiResponse , onUpdateWeatherListListener ) ; }
public void onFailure ( @ NonNull Exception e ) { Toast . makeText ( getActivity ( ) , "Error : Profile image couldn't be uploaded" , Toast . LENGTH_SHORT ) . show ( ) ; }
public java . util . List < com . google . protobuf . Any > getPublicKeysList ( ) { if ( publicKeysBuilder_ == null ) { return java . util . Collections . unmodifiableList ( publicKeys_ ) ; } else { return publicKeysBuilder_ . getMessageList ( ) ; } }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable String label , @ Nullable View . OnClickListener onClickListener ) { return addAction ( IconUtil . getBitmap ( context , icon ) , label , onClickListener ) ; }
public TLRPC . TL_userFull getCurrentUserInfo ( ) { return userInfo ; }
public void getThemeTIMEDTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . TIME_INDEX ) ; assertEquals ( AppTheme . TIMED , apptheme ) ; }
public void clearAnswer ( ) { ToastUtils . showShortToast ( "URL is readonly" ) ; }
public void setLayoutType ( XLayoutStyle layoutType ) { super . setLayoutType ( layoutType ) ; }
public void downloadAudioIfNeed ( ) { if ( buttonState == 2 ) { FileLoader . getInstance ( ) . loadFile ( currentMessageObject . getDocument ( ) , true , false ) ; buttonState = 3 ; invalidate ( ) ; } }
public List < List < String >> check ( ) { return check ( null ) ; }
public Group getItem ( int position ) { return pageItems . get ( position ) ; }
public void setHourLabelsColor ( @ ColorInt int hourLabelsColor ) { this . mHourLabelsColor = hourLabelsColor ; this . mShadowPaint . setColor ( hourLabelsColor ) ; invalidate ( ) ; }
public String getQ ( ) { return q ; }
public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { }
public YValueMarker ( Number value , String text , XPositionMetric textPosition , Paint linePaint , Paint textPaint ) { super ( value , text , textPosition , linePaint , textPaint ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mAllowedToContinue = false ; mValidationsListener . isAllowedToContinue ( mAllowedToContinue ) ; }
public void onFailure ( WebSocket ws , Throwable throwable , Response response ) { removeWebsocket ( ws , profile ) ; if ( ! profile . isInAppDownloader ( ) ) notifyException ( profile , throwable ) ; }
public boolean onLongClick ( View view ) { toggleChecked ( getAdapterPosition ( ) ) ; return true ; }
public void setLatitudePattern ( final String latitudePattern ) { this . latitudePattern = latitudePattern == null ? EMPTY_FORMULA : DegreeFormula . compile ( latitudePattern ) ; }
public void setFontsize ( int fontsize ) { data . edit ( ) . putInt ( "fontsize" , fontsize ) . apply ( ) ; }
public static void setPicsEnabled ( String sub , boolean checked ) { prefs . edit ( ) . putBoolean ( "picsenabled" + sub . toLowerCase ( ) , checked ) . apply ( ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; sensor = SensorWrapperManager . get ( ) . getSensor ( getArguments ( ) . getString ( Arguments . ARG_SENSOR ) ) ; }
public RingerReceiver ( RingerIconData iconData ) { super ( iconData ) ; }
public void run ( ) { getBaseDao ( ) . setLastUser ( account . id ) ; mToShowTestWarn = true ; onAccountSwitched ( ) ; }
public String getPin ( ) { return Pin ; }
public void clearVideoSurfaceHolder ( SurfaceHolder surfaceHolder ) { if ( surfaceHolder != null && surfaceHolder == this . surfaceHolder ) { setVideoSurfaceHolder ( null ) ; } }
private final ThreadLocal < Kryo > mKryo = new ThreadLocal < Kryo > ( ) { @ Override protected Kryo initialValue ( ) { return createKryoInstance ( ) ; } } ;
public static String getMarkerIcon ( int idx ) { return routeColor [ idx ] ; }
private void initWifiLock ( ) { mWifiLock = ( ( WifiManager ) getSystemService ( WIFI_SERVICE ) ) . createWifiLock ( WifiManager . WIFI_MODE_FULL , BuildConfig . APPLICATION_ID ) ; mWifiLock . acquire ( ) ; }
public IAnswerData getAnswer ( ) { return TextWidgetUtils . getIntegerData ( answerText . getText ( ) . toString ( ) , getFormEntryPrompt ( ) ) ; }
public static final String getEventURL ( Event event ) { return WEB_HOST + "event/" + event . getEventStrID ( ) ; }
public Integer getPenaltyChargesOutstanding ( ) { return penaltyChargesOutstanding ; }
public void addPlayerListener ( PlayerListener playerListener ) { checkClosed ( ) ; if ( ! listeners . contains ( playerListener ) && playerListener != null ) { listeners . add ( playerListener ) ; } }
public void onCancelled ( DatabaseError databaseError ) { Snackbar . make ( rootLayout , R . string . load_profile_error , Snackbar . LENGTH_SHORT ) . show ( ) ; }
public double f ( double x ) { this . x = x ; if ( isValid ) return expression . getValue ( ) ; else throw new ExpressionFormatException ( "illegal Expression , cannot parse and return value" ) ; }
public Type getItemType ( ) { return Type . ITEM ; }
public static void wait ( Object lock , int timeout ) { try { lock . wait ( timeout ) ; } catch ( InterruptedException ie ) { throw new AssertionError ( ie ) ; } }
public float getNode1 ( ) { return node1 ; }
public final Exception getError ( ) { return state == STATE_ERROR ? lastException : null ; }
private void initializeList ( ) { listInitThread . start ( ) ; }
public void onClick ( View view ) { calculateResistance ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( audioStimulusGenerator != null ) { audioStimulusGenerator . cancel ( ) ; } if ( visualStimulusGenerator != null ) { visualStimulusGenerator . cancel ( ) ; } timer . cancel ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mMapPosition = null ; mWaypointHistory = null ; mRoute = null ; }
private void releaseInternal ( ) { resetInternal ( ) ; loadControl . onReleased ( ) ; setState ( ExoPlayer . STATE_IDLE ) ; synchronized ( this ) { released = true ; notifyAll ( ) ; } }
public static TemplatesFragment newInstance ( String mineName ) { TemplatesFragment fragment = new TemplatesFragment ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putString ( MINE_NAME_PARAM , mineName ) ; fragment . setArguments ( bundle ) ; return fragment ; }
public static int apps ( ) { return apps . size ( ) ; }
private void updateConfigureButton ( ) { GameInputHandlerFactory factory = mSelector . getData ( ) ; boolean canBeConfigured = getInputConfigScreenFactory ( factory ) != null ; mConfigureButton . setDisabled ( ! canBeConfigured ) ; }
public static String getString ( Activity context , String key ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getString ( key , "" ) ; }
public ContourPlotView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . prepare ( attrs ) ; }
public void testGetHttpFileName_withDisposition ( ) { String actual = Utils . getHttpFileName ( fs , "http : "attachment ; filename = \"subdir/real . pdf\"" , null , null ) ; assertEquals ( "real . pdf" , actual ) ; }
public void lockSwipeIfNeeded ( ) { if ( position < getCount ( ) ) { binding . miPager . setSwipeLeftEnabled ( canGoForward ( position , false ) ) ; binding . miPager . setSwipeRightEnabled ( canGoBackward ( position , false ) ) ; } }
public void onValueChange ( NumberPicker numberPicker , int i , int i1 ) { m_selectedMeasurementGroup = numberPicker . getValue ( ) ; }
public boolean isCardViewEnabled ( ) { return mCardViewEnabled ; }
public View getView ( int position , View convertView , ViewGroup parent ) { return getViewInternal ( position , convertView , parent , mLayoutViewId ) ; }
public void writeToParcel ( Parcel out , int flags ) { super . writeToParcel ( out , flags ) ; out . writeInt ( this . isFocused ? 1 : 0 ) ; }
public float getPageWidth ( int position ) { return 1/5f ; }
public void enableTunnelingV21 ( int tunnelingAudioSessionId ) { Assertions . checkState ( Util . SDK_INT >= 21 ) ; if ( ! tunneling || audioSessionId != tunnelingAudioSessionId ) { tunneling = true ; audioSessionId = tunnelingAudioSessionId ; reset ( ) ; } }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getSupportMenuInflater ( ) ; inflater . inflate ( R . menu . global_actions , menu ) ; return true ; }
public void onClick ( View v ) { deleteFileFromPath ( ) ; }
public void addStockWithSymbol ( String symbol ) { symbolList . getValue ( ) . add ( symbol ) ; symbolList . setValue ( symbolList . getValue ( ) ) ; stockRepo . getStockList ( symbol , stockList ) ; }
public static Playlist getPlaylist ( @ NonNull final Context context , final int playlistId ) { return getPlaylist ( makePlaylistCursor ( context , BaseColumns . _ID + " = ?" , new String [ ] { String . valueOf ( playlistId ) } ) ) ; }
public void setBeschreibung ( String beschreibung ) { this . _beschreibung = beschreibung ; }
public void onReceive ( final Context context , final Intent intent ) { if ( Intent . ACTION_BOOT_COMPLETED . equals ( intent . getAction ( ) ) ) { NetworkSyncWorker . scheduleSync ( ) ; CheckElectrumWorker . scheduleASAP ( ) ; } }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "hadachi . com . ircontroller" , appContext . getPackageName ( ) ) ; }
private void shareAudio ( ) { Audio current = MusicUtils . getCurrentAudio ( ) ; if ( current == null ) { return ; } SendAttachmentsActivity . startForSendAttachments ( getActivity ( ) , mAccountId , current ) ; }
public void run ( ) { mSpinner . setVisibility ( View . GONE ) ; }
public void copySelectedMessages ( ) { CharSequence messages = getSelectedMessages ( ) ; ClipboardManager clipboard = ( ClipboardManager ) getContext ( ) . getSystemService ( Context . CLIPBOARD_SERVICE ) ; clipboard . setPrimaryClip ( ClipData . newPlainText ( "IRC Messages" , messages ) ) ; }
public void loginWithPasswordlessAccount ( ) { new LoginFlow ( ) . chooseContinueWithWpCom ( ) . enterEmailAddress ( E2E_WP_COM_PASSWORDLESS_USER_EMAIL ) . openMagicLink ( mMagicLinkActivityTestRule ) . confirmLogin ( false ) ; }
public Task < ResultDeleteFile > then ( @ NonNull Task < TransportService > task ) throws Exception { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_DELETE_FILE , Transport . RESULT_DELETE_FILE , requestDeleteFileData ) ; }
public Payload ( Object [ ] data ) { this . data = data ; success = true ; }
public void onLogInfo ( String message ) throws RemoteException { addChatMessage ( new IChatMessage . InfoMessage ( IChatMessage . InfoMessage . Type . INFO , message ) , true ) ; }
public boolean isSmaller3_4 ( ) { return ( mCurrentTranslate - minPosition ) * 4 < 3 * ( getMaxPosition ( ) - minPosition ) ; }
public void onAnimationEnd ( Animator animation ) { pagedownButtonCounter . setVisibility ( View . INVISIBLE ) ; pagedownButton . setVisibility ( View . INVISIBLE ) ; }
public static LatestRunsState displayError ( ) { return new LatestRunsState ( false , true , new ArrayList < Run > ( ) ) ; }
public int getIndex ( ) { return this . index ; }
public List < String > getAllKeys ( ) { return mStorage . getAllKeys ( ) ; }
public void onSignIn ( @ NonNull AuthState . SignedIn event ) { listAsync ( context , false ) ; }
public void run ( ) throws CertificateException , SignatureException , PGPException , IOException , NoSuchProviderException { revokeCurrentKey ( ) ; configure ( ) ; setupConnectedReceiver ( ) ; }
public String getCategoryScore ( ) { return categoryScore ; }
private void show ( ) { handler . removeCallbacksAndMessages ( null ) ; shownAt = System . currentTimeMillis ( ) ; super . setVisibility ( View . VISIBLE ) ; }
public void resetState ( ) { stopAllAnimations ( ) ; boolean reset = mStateController . resetState ( mState ) ; if ( reset ) { notifyStateReset ( ) ; } else { notifyStateUpdated ( ) ; } }
public void onFailure ( int statusCode , String error_msg ) { postPaymentListener . onFailure ( error_msg ) ; }
public void onClick ( View view ) { ( autocompleteFragment . getView ( ) . findViewById ( R . id . place_autocomplete_search_input ) ) . performClick ( ) ; }
private void verifyDataStoreMockInteractions ( Event newEvent ) { verify ( dataStore , Mockito . times ( 1 ) ) . createEvent ( newEvent ) ; verifyNoMoreInteractions ( dataStore ) ; }
private void publishCompletedResult ( int id1 ) { try { mNotifyManager . cancel ( id1 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public String getRoBuildHuamiModel ( ) { return roBuildHuamiModel ; }
private void setTextColor ( @ NonNull TextView tv , @ ColorInt int color ) { if ( color != 0 ) tv . setTextColor ( color ) ; }
public void testDefaultDescriptionTypefacePath ( ) { builder . defaultDescriptionTypefacePath ( "description" ) ; assertEquals ( "description" , builder . build ( ) . getDefaultDescriptionTypefacePath ( ) ) ; }
public void clearAnswer ( ) { deleteFile ( ) ; if ( imageView != null ) { imageView . setImageDrawable ( null ) ; } errorTextView . setVisibility ( View . GONE ) ; }
public Integer getShowmap ( ) { return showmap ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . valueOf ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "LikeAlias" , 1 ) ; else toggleAliasSetting ( "LikeAlias" , 2 ) ; return true ; }
public void onClose ( ) { }
public void onClick ( View v ) { selectGalleryAttachment ( ) ; toggleAttachmentView ( ) ; }
public ArrayList < OCSSection > getSections ( ) { ArrayList < OCSSection > lst = new ArrayList < OCSSection > ( ) ; for ( OCSNetwork o : networks ) { lst . add ( o . getSection ( ) ) ; } return lst ; }
public String desc ( ) { return Game . getVar ( R . string . ShortSword_Info ) ; }
public String streamToString ( InputStream is ) { return streamToString ( is , maxBytes , encoding ) ; }
public AboutBuilder addFeedbackAction ( String email , String subject ) { return addFeedbackAction ( email , subject , null ) ; }
public String onArgNotFound ( ExecutePack pack ) { MainPack info = ( MainPack ) pack ; return info . res . getString ( R . string . output_numbernotfound ) ; }
private void handleUserCheck ( final Context context , final String userId ) { final User user = mDatabaseHelper . getUser ( context , userId ) ; if ( user == null ) { OperationService . start ( context , new FriendRequestOperation ( userId ) ) ; } }
public void onCancelCreateKeyMap ( View view ) { if ( mIsCreatingKeyMap == true ) { mIsCreatingKeyMap = false ; } else { finish ( ) ; } }
public final void onAttach ( Activity activity ) { if ( Build . VERSION . SDK_INT < 23 ) { super . onAttach ( activity ) ; onAttachToContext ( activity ) ; } }
public void putState ( String key , Serializable object ) { String realKey = this . getClass ( ) . getName ( ) + "_" + key ; stateStorage . put ( realKey , object ) ; }
public void onListItemClick ( ListView l , View v , int position , long id ) { CustomAircraftDescriptor cad = ( CustomAircraftDescriptor ) getListAdapter ( ) . getItem ( position ) ; AircraftDialog . showDialog ( getActivity ( ) , cad ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mDistrictTeam ) ; }
public void dispatchFinished ( AddAnimationInfo info , RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchAddFinished ( " + item + " ) " ) ; } mItemAnimator . dispatchAddFinished ( item ) ; }
public int getNumber ( ) { return this . number ; }
public static Uri getMediaStoreAlbumCoverUri ( int albumId ) { final Uri sArtworkUri = Uri . parse ( "content : return ContentUris . withAppendedId ( sArtworkUri , albumId ) ; }
public double getCircumference ( ) { return 4 * ( width + length + height ) ; }
public void onBindViewHolder ( customviewholder holder , final int position ) { holder . textView . setText ( list . get ( position ) . getTitle ( ) ) ; holder . imageView . setImageResource ( list . get ( position ) . getImage ( ) ) ; }
public boolean isSectionHeaderPosition ( int position ) { return mSections . get ( position ) != null ; }
public static int getPaddingWithLineNumbers ( Context context , float fontSize ) { return ( int ) PixelDipConverter . convertDpToPixel ( fontSize * 1 . 85f , context ) ; }
public MyHandler ( WebSocketRecognitionService c , boolean isUnlimitedDuration , boolean isPartialResults ) { mRef = new WeakReference <> ( c ) ; mIsUnlimitedDuration = isUnlimitedDuration ; mIsPartialResults = isPartialResults ; }
public boolean equals ( Object o ) { return o instanceof EventWeekTab && mWeek == ( ( EventWeekTab ) o ) . getWeek ( ) ; }
public void onFocusChange ( final View v , final boolean hasFocus ) { if ( ! hasFocus ) { validateAmount ( ) ; } }
private void initAutoSmsPrefs ( ) { binding . silentSMSOptionPrefs . setOnClickListener ( mAutoSmsClick ) ; binding . silentSMSOptionPrefs . setChecked ( mPrefs . isAutoSmsEnabled ( ) ) ; }
public void setAttackTime ( float time ) { if ( time < MIN_TIME ) time = MIN_TIME ; mAttackRate = 1 . 0f / ( SynthEngine . FRAME_RATE * time ) ; }
public void clearSearchViewFocus ( ) { searchView . clearFocus ( ) ; }
public FloatArgument ( FloatArgumentDefinition . Domain d , float v ) { domain = d ; value = v ; }
public AdmissionPercentageData getNewestItemForMetaId ( int apMetaId ) { int lessonId = getMaxLessonIdForAp ( apMetaId ) ; return getItem ( new AdmissionPercentageData ( apMetaId , lessonId , - 1 , - 1 ) ) ; }
public void run ( ) { mOldE . assign ( mNewE ) ; mOldE . touch ( true , true ) ; SaveDB save = new SaveDB ( mDb , mFinish ) ; save . run ( ) ; }
public boolean onLongClick ( View v ) { currentCalculation += " ( " ; displayCalculation += " ( " ; calculationView . setText ( displayCalculation ) ; return true ; }
public Builder fragment ( @ LayoutRes int layoutRes ) { this . fragment = Fragment . newInstance ( layoutRes ) ; return this ; }
private String deleteStarred ( String data , int id ) { return data . replace ( String . format ( "|%d|" , id ) , "|" ) ; }
public static List < WishList > getLists ( ) { return lists ; }
public void appendPoint ( MapPoint point ) { if ( map == null ) { return ; } points . add ( point ) ; symbols . add ( createSymbol ( symbolManager , point , true ) ) ; updateLine ( ) ; }
public void setSponsors ( List < Sponsors > sponsors ) { this . sponsors = sponsors ; }
public NewsTopicAdapter ( List < T > groupings ) { super ( NewsTopicActivity . this , android . R . layout . simple_list_item_1 , android . R . id . text1 , groupings ) ; }
public void setQuantity ( Money quantity ) { this . mQuantity = quantity ; }
public void testLoadingGreekLipsum ( ) throws IOException { onBookFile ( "lipsum/Greek - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
private void loadImage ( String relPath , ImageView imageView ) { imageService . loadImage ( relPath , ImageService . SIZE_W342 , imageView ) ; }
public boolean getIsMessageAlarmEnabled ( ) { SharedPreferences userData = getSharedPreferences ( "userData" , 0 ) ; return userData . getBoolean ( "messageAlarm" , false ) ; }
public void onClick ( View v ) { duracao = 15 ; dialog . dismiss ( ) ; mostrarDialogTimer ( ) ; }
public FirstTimeUserScreenPresenter ( FirstTimeUserScreenActivity activity , FirstTimeUserScreenContract . View view ) { mView = view ; mActivity = activity ; mUserService = RestClient . getInstance ( ) . getSetupService ( ) ; mKeySettingsRepository = new KeySettingsRepository ( ) ; }
public boolean onPreferenceClick ( Preference preference ) { deleteAllTransactions ( ) ; return true ; }
public String toString ( ) { return getClass ( ) . getSimpleName ( ) + " [ wordId = " + wordId + " , super : " + super . toString ( ) + " ] " ; }
public void disableListActionButton ( ) { mListActionButton . setVisibility ( View . GONE ) ; }
public void setSelectedIndicatorColors ( int . . . colors ) { mTabStrip . setSelectedIndicatorColors ( colors ) ; }
public int compare ( ResultBean r1 , ResultBean r2 ) { return r1 . getSum ( ) . compareTo ( r2 . getSum ( ) ) ; }
public void onStart ( ) { super . onStart ( ) ; FirebaseUser currentUser = mAuth . getCurrentUser ( ) ; updateUI ( currentUser ) ; }
public static void setTVInRow ( View row , @ IdRes int textViewId , @ StringRes int stringId ) { TextView tv = ( TextView ) row . findViewById ( textViewId ) ; tv . setText ( stringId ) ; }
public void onCreate ( ) { FileLog . e ( "tmessages" , "service started" ) ; ApplicationLoader . postInitApplication ( ) ; }
public @ NonNull List < String > getSelectedContacts ( ) { List < String > selected = new LinkedList <> ( ) ; if ( selectedContacts != null ) { selected . addAll ( selectedContacts . values ( ) ) ; } return selected ; }
public float [ ] getMax ( ) { return max ; }
public void onStartMusic ( int episodeId ) { updateUI ( ) ; }
public boolean nonPassable ( Char ch ) { return ch instanceof Hero ; }
public void onBindViewHolder ( ApplicationViewHolder holder , int position ) { ApplicationItem item = mDataList . get ( position ) ; holder . binding . setItem ( item ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; wifiNetworkManager = WifiNetworkManager . getInstance ( getContext ( ) ) ; Log . d ( TAG , "update network information" ) ; wifiNetworkManager . refresh ( ) ; setHasOptionsMenu ( true ) ; }
public static File [ ] listGames ( ) { File [ ] ret = library . listFiles ( ) ; if ( ret == null ) { return new File [ 0 ] ; } Arrays . sort ( ret ) ; return ret ; }
public void onClick ( DialogInterface dialogInterface , int i ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( "email_unconfirmed_pattern" , res . email_pattern ) ; setPage ( 4 , true , bundle , false ) ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; scrobbler = new Scrobbler ( client , notificationManager , db , connectivityManager ) ; }
public int deleteAllScrobbles ( NetApp napp ) { return mDb . delete ( TABLENAME_CORRNETAPP , "netappid = ?" , new String [ ] { "" + napp . getValue ( ) } ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "updates" , checked ) . apply ( ) ; }
public void play ( ) { if ( isInitialized ( ) ) { resumeSystemTimeUs = System . nanoTime ( ) / 1000 ; audioTrack . play ( ) ; } }
public void onCallHold ( ) { mOnHold = true ; }
public void onVisibilityChanged ( boolean visible ) { this . visible = visible ; if ( visible ) { nextFrame ( ) ; } else { stopRunnable ( ) ; } }
public void onGlobalStateChanged ( final Core lc , final GlobalState state , final String message ) { Lg . i ( "onGlobalStateChanged state = " , state , " message = " , message ) ; }
public void run ( ) { Iterable < TodoListHeader > headers = repository . getHeadersOfTodoListId ( todoListUuid ) ; postHeader ( headers ) ; }
public static Context getContext ( ) { return context ; }
public void onDestroy ( ) { PreferenceManager . getDefaultSharedPreferences ( this ) . unregisterOnSharedPreferenceChangeListener ( this ) ; disconnect ( ) ; closeDatabase ( ) ; logger . debug ( "Service stopped" ) ; }
public void onClick ( View v ) { if ( moreListener != null ) { moreListener . execute ( user ) ; } }
private AnimatableFloatValue ( List < Keyframe < Float >> keyframes ) { super ( keyframes ) ; }
public static final Comparator < TagModel > ALPHABETICAL_COMPARATOR = new Comparator < TagModel > ( ) { @ Override public int compare ( TagModel a , TagModel b ) { return a . getName ( ) . compareTo ( b . getName ( ) ) ; } } ;
public void onDestroyed ( ) { Log . i ( "Removing billing listener = " + listener ) ; listeners . remove ( listener ) ; }
public DeleteHeaderInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , TodoListRepository repository , String uuid ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . uuid = uuid ; }
public static void setShowGutenbergInfoPopupPhase2ForNewPosts ( String siteURL , boolean show ) { setBooleanPrefForKeyAndURL ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS_PHASE_2 , siteURL , show ) ; }
public DeleteDeckListener ( long did , DeckPicker deckPicker ) { super ( deckPicker ) ; this . did = did ; }
public boolean getIsShowingTranslation ( ) { return mIsShowingTranslation ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( BuildHistoryListener ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( activity . toString ( ) + " must implement BuildHistoryListener" ) ; } }
public static void recycleInstance ( PointD instance ) { pool . recycle ( instance ) ; }
public MaterialAboutCard ( int titleRes , MaterialAboutItem . . . materialAboutItems ) { this . titleRes = titleRes ; Collections . addAll ( mItems , materialAboutItems ) ; }
public static void setExportToGCJson ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_EXPORT_TO_GC_JSON , value ) . commit ( ) ; }
private SimpleEvent msgSetText = new SimpleEvent ( ) { @ Override public void process ( ) { textview . setText ( text ) ; } } ;
public static void setFastFlag ( Context ctx , boolean b ) { Log . d ( TAG , "Setting fast flag to true : " + b ) ; KeelinkPreferences . setLong ( ctx , KeelinkPreferences . FLAG_FAST_SEND , b?System . currentTimeMillis ( ) : 0L ) ; }
public void removeAllViews ( ) { LinearLayout container = ( LinearLayout ) findViewById ( R . id . container ) ; container . removeAllViews ( ) ; }
public void whenChangedKeyIsProtocol_schedulesUpdates ( ) { handler . onSettingChanged ( "projectId" , "anything" , GeneralKeys . KEY_PROTOCOL ) ; verify ( formUpdateScheduler ) . scheduleUpdates ( "projectId" ) ; }
public LastReadId setIn ( int in ) { this . in = in ; return this ; }
public static int alpha ( int alpha , int color ) { return Color . argb ( alpha , Color . red ( color ) , Color . green ( color ) , Color . blue ( color ) ) ; }
public void run ( ) { if ( getWidth ( ) == 0 ) { log . i ( "scheduleGoToNextCustomer . Runnable : Not ready yet , rescheduling" ) ; scheduleGoToNextCustomer ( ) ; } else { goToNextCustomer ( ) ; } }
private boolean isReminderInThePast ( DateTime eventDateWithTime ) { DateTime dateTime = timeProvider . getCurrentTime ( ) ; return eventDateWithTime . isBefore ( dateTime ) ; }
public int getType ( ) { return R . id . fastadapter_medical_attention_item_id ; }
public Long getId ( ) { if ( isChannel ( ) ) { return CHANNEL_ID_MASK | mChannel . getId ( ) ; } else if ( isUser ( ) ) { return USER_ID_MASK | mUser . getSession ( ) ; } return null ; }
private double convertPositionToRange ( int id ) { return ( double ) getResources ( ) . getIntArray ( R . array . known_locations_values ) [ id ] ; }
public void setOriginalReleaseDate ( Date originalReleaseDate ) { this . originalReleaseDate = originalReleaseDate ; }
public void onPause ( ) { super . onPause ( ) ; mPresenter . unsubscribe ( ) ; }
public ErrorDialog startBlankFormWithError ( String formName ) { goToBlankForm ( formName ) ; return new ErrorDialog ( rule ) . assertOnPage ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { if ( mAdapter != null && mAdapter . getItemCount ( ) > 0 ) { getMenuInflater ( ) . inflate ( R . menu . menu_remove , menu ) ; } return true ; }
public boolean setCurrentTimeSecond ( int value ) { if ( value == currentTimeSecond ) return false ; currentTimeSecond = value ; return true ; }
public void handleInboxLongClick ( final BaseActivity activity ) { openReplyActivity ( activity ) ; }
public void onSaveDialogNegativeClick ( ) { NoteEditFragment fragment = ( NoteEditFragment ) getFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onSaveDialogNegativeClick ( ) ; }
public void setSort ( final PostCommentListingURL . Sort s ) { if ( mUrl . pathType ( ) == RedditURLParser . PathType . PostCommentListingURL ) { mUrl = mUrl . asPostCommentListURL ( ) . order ( s ) ; } }
public int compareTo ( @ NonNull DownloadItem another ) { int compare = this . mTitle . compareTo ( another . mTitle ) ; if ( compare == 0 ) { return this . mUrl . compareTo ( another . mUrl ) ; } return compare ; }
private void notifyAudioStatus ( int status ) { Intent updateIntent = new Intent ( AudioUpdateIntent . INTENT_NAME ) ; updateIntent . putExtra ( AudioUpdateIntent . STATUS , status ) ; mBroadcastManager . sendBroadcast ( updateIntent ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . X_FACTORIAL ) ; }
public long get ( String key , long defaultValue ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return prefs . getLong ( key , defaultValue ) ; }
public LiveData < List < ContactEntity >> loadAll ( ) { return mDataRepository . getDatabase ( ) . contactDao ( ) . loadAll ( ) ; }
public SmsDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; this . jobManager = ApplicationContext . getInstance ( context ) . getJobManager ( ) ; }
private void drawerOpened ( ) { if ( BuildConfig . LOG_DEBUG ) LogUtils . d ( TAG ) ; ActivityUtils . INSTANCE . closeSoftKeyboard ( this ) ; }
public boolean onFragmentCreate ( ) { chat_id = getArguments ( ) . getInt ( "chat_id" ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded ) ; return super . onFragmentCreate ( ) ; }
public int getItemCount ( ) { return users . size ( ) ; }
public int compareTo ( Post another ) { return getDateS ( ) . compareTo ( another . getDateS ( ) ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . color_selector ) ; }
public boolean deleteAllItems ( ) { for ( RouteItem item : itemList ) { deleteItem ( item . getFilePath ( ) ) ; } itemList . clear ( ) ; return false ; }
public ScheduleLessonsModifyFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public LiveData < List < TextNote >> getNotesList ( ) { return notesList ; }
public boolean shouldSendJetpackMonitorWpNotifications ( ) { return mSettings . wpNotifications ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return geochats_Messages . TLdeserialize ( stream , constructor , exception ) ; }
public void show ( ) { mAnchorView . setSystemUiVisibility ( mShowFlags ) ; }
public void attachVisual ( ) { target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaFrightened ) ) ; }
public void setImageResource ( int resId ) { recycleBitmaps ( ) ; cancelLoaderTask ( ) ; super . setImageResource ( resId ) ; }
public void setUp ( ) { TestUtils . skipIfDefaultAccountDoesNotExist ( ) ; super . setUp ( ) ; }
private Runnable sendProgress = new Runnable ( ) { @ Override public void run ( ) { displayProgress ( ) ; handler . postDelayed ( this , 2000 ) ; } } ;
private void setConvertCurrencies ( Set < String > currencies ) { generalPrefs . edit ( ) . putStringSet ( "pref_convert_currencies" , currencies ) . apply ( ) ; }
private void updatePlayBellButton ( ) { if ( mServiceBinder != null ) mViewBinding . mainScreenPlayBellButton . setVisibility ( ( mServiceBinder . getAlertManager ( ) . isBellsEnabled ( ) ) ? View . VISIBLE : View . GONE ) ; }
public static PendingIntent createOpenCalendarPendingIntent ( InstanceSettings settings ) { return PermissionsUtil . getPermittedPendingActivityIntent ( settings , createOpenCalendarAtDayIntent ( new DateTime ( settings . getTimeZone ( ) ) ) ) ; }
private Animator scrollToEndAnimator ( ) { return ofInt ( this , "scrollX" , mPathContainer . getWidth ( ) - getWidth ( ) ) ; }
public static com . coinomi . core . protos . Protos . UnspentOutput parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void onEventMainThread ( NotificationEvents . NotificationsUnseenStatus event ) { mTabLayout . showNoteBadge ( event . hasUnseenNotes ) ; }
private BroadcastReceiver showSpaceReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { layout . findViewById ( R . id . start_menu_space ) . setVisibility ( View . VISIBLE ) ; } } ;
public CanvasView ( Context context ) { super ( context ) ; this . setup ( context ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new DemoViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_demo , parent , false ) ) ; }
private void openReviewer ( ) { Intent reviewer = new Intent ( this , Reviewer . class ) ; startActivityForResultWithAnimation ( reviewer , REQUEST_REVIEW , LEFT ) ; }
public static RemoteConfigSettingsApi provideRemoteConfig ( ) { return config ; }
public void onApply ( ) { saveRecord ( ) ; onAfterSaving ( obj ) ; }
public PSITemperature ( String description , int temp , int max ) { this . description = description ; this . temp = temp ; this . max = max ; }
public com . google . protobuf . AnyOrBuilder getClientStateOrBuilder ( ) { if ( clientStateBuilder_ != null ) { return clientStateBuilder_ . getMessageOrBuilder ( ) ; } else { return clientState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : clientState_ ; } }
public void addToFavourite ( BookCollectionInfo bookCollectionInfo , BooksCollection booksCollection ) { addToCollection ( bookCollectionInfo , booksCollection ) ; if ( bookCollectionsControllerCallback != null ) { bookCollectionsControllerCallback . notifyBookCollectionCahnged ( booksCollection ) ; } }
public void setCallIsTransferred ( boolean transferred ) { mCallIsTransferred = transferred ; }
public static synchronized TerminalIOPreferencesDataStore getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new TerminalIOPreferencesDataStore ( context . getApplicationContext ( ) ) ; } return mInstance ; }
public ExPrinterWidget createWidget ( ) { return new ExPrinterWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) , new FakeWaitingForDataRegistry ( ) ) ; }
public static Boolean isGrblOkMessage ( final String response ) { return response . toLowerCase ( ) . startsWith ( "ok" ) ; }
public String getCurrentSession ( ) { return SharedPreferenceUtils . getString ( mSharedPreferences , TERMUX_APP . KEY_CURRENT_SESSION , null ) ; }
public void onSendEventToHost ( String eventName , Map < String , Object > properties ) { AnalyticsUtils . trackBlockEditorEvent ( eventName , properties ) ; }
public void onUpdatePasswordSuccess ( String token ) { updateButtonIfEnabled ( true ) ; mToken = token ; Bundle bundle = new Bundle ( ) ; bundle . putString ( "token" , mToken ) ; redirectToAnotherScreenAsFirstScreen ( MainScreenActivity . class , bundle ) ; }
private static int getFilePermissions ( String path ) throws ShellNotRunningException { String line = RootHelper . runShellCommand ( "stat - c %a \"" + path + "\"" ) . get ( 0 ) ; return Integer . valueOf ( line ) ; }
public boolean isExpanded ( ) { return expanded ; }
public static ButtonStyle parse ( String a ) { if ( a . equals ( "MNEMOSYNE" ) ) { return MNEMOSYNE ; } else if ( a . equals ( "ANKI" ) ) { return ANKI ; } else { return ANYMEMO ; } }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable String label , @ Nullable View . OnClickListener onClickListener ) { return addLink ( IconUtil . getBitmap ( context , icon ) , label , onClickListener ) ; }
public void setCustomTabView ( int layoutResId , int textViewId ) { mTabViewLayoutId = layoutResId ; mTabViewTextViewId = textViewId ; }
public void onCancel ( DialogInterface dialog ) { callback . run ( false ) ; }
public int getItemCount ( ) { return movies == null ? 5 : movies . size ( ) ; }
public static String encodeToJSON ( Map < ? , ? > map ) { return JSON . toJSONString ( map ) ; }
public void setClasses ( String classes ) { this . classes = classes ; }
public void openOptionsMenu ( final ActionEx action ) { IUIManager . instance . openOptionsMenu ( getManagedComponent ( ) , getManagedComponent ( ) . view . getView ( ) ) ; }
private void updateSongsListAdapter ( ) { SongsListAdapter adapter = new SongsListAdapter ( this , MediaLibraryManager . getSelectedPlaylist ( ) ) ; recyclerView . setAdapter ( adapter ) ; adapter . notifyDataSetChanged ( ) ; }
private void updateSwitch ( ) { if ( theSwitch != null ) { SharedPreferences pref = U . getSharedPreferences ( this ) ; theSwitch . setChecked ( pref . getBoolean ( "taskbar_active" , false ) ) ; } }
public boolean bowEquipped ( ) { return getBelongings ( ) . getItemFromSlot ( Belongings . Slot . WEAPON ) instanceof KindOfBow ; }
public Builder setOnDismissListener ( OnDismissListener onDismissListener ) { P . mOnDismissListener = onDismissListener ; return this ; }
public void onResume ( ) { super . onResume ( ) ; loaderAdapter ( ) ; }
public void onReceive ( Context context , Intent intent ) { JobIntentService . enqueueWork ( context , ReminderJob . class , JobManager . JOB_ID_REMINDER , intent ) ; }
public void onCreate ( Bundle savedInstanceState ) { init ( ) ; }
public long removeTripExpensesByTripId ( String tripId ) { removeTripExpenseSharesByTripId ( tripId ) ; return delete ( DatabaseConstants . TRIP_EXPENSE_TABLE , TRIP_EXPENSE_ID + " = ?" , new String [ ] { tripId } ) ; }
public int getDepthInBlocks ( ) { return transaction . getConfidence ( ) . getDepthInBlocks ( ) ; }
public void setGraphMonthXLabels ( String [ ] labels ) { chartMonth . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter < String > ( labels ) ) ; }
public Collection < TimetableSubject > getSecondarySubjects ( ) { return Collections . unmodifiableCollection ( secondarySubjects ) ; }
public void onErrorResponse ( VolleyError error ) { Log . d ( Constants . LOG_TAG , "Error : " + new String ( error . networkResponse . data ) ) ; handleFailure ( ) ; }
public void onClick ( View v ) { mPlaybackController . skip ( - 11000 ) ; }
public void setShitRatingCleanness ( String ShitRatingCleanness ) { this . ShitRatingCleanness = ShitRatingCleanness ; }
public void add ( Fragment fragment , String title ) { if ( fragment == null ) { return ; } mTabs . add ( new FragmentInfo ( fragment ) ) ; mTitleList . add ( title ) ; notifyDataSetChanged ( ) ; }
public String getPrimaryTag ( ) { return StringUtils . notNullStr ( primaryTag ) ; }
public static boolean isCurrentThemeDefault ( ) { return currentTheme == defaultTheme ; }
public void setTemperatureMaxTime ( Double temperatureMaxTime ) { this . temperatureMaxTime = temperatureMaxTime ; }
public void onReload ( ) { checkForFontAndColors ( ) ; }
public void onRequestFailed ( SubredditRequestFailure failureReason ) { onSubredditError ( failureReason . asError ( context ) ) ; }
private boolean isAdImage ( String imageUrl ) { return SHelper . count ( imageUrl , "ad" ) >= 2 ; }
public String toString ( ) { return "RemoteExpr [ " + id + " , " + expression + " ] " ; }
public void run ( ) { mDrawerLayout . closeDrawers ( ) ; }
public String getSum ( ) { return sum ; }
public void onClick ( DialogInterface dialog , int which ) { mViewModel . delete ( rep ) ; Toast . makeText ( getActivity ( ) , "Record Deleted Successfully" , Toast . LENGTH_SHORT ) . show ( ) ; }
public NotificationService ( ) { super ( TAG ) ; }
public static void set_message_queueing_from_id ( long message_id , boolean ft_outgoing_queued ) { try { orma . updateMessage ( ) . idEq ( message_id ) . ft_outgoing_queued ( ft_outgoing_queued ) . execute ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public void setPresenter ( String tag , WeekPresenter presenter ) { mPresenterMap . put ( tag , presenter ) ; }
public ListExpensesAdapter ( Callback callback , Vehicle vehicle ) { super ( null ) ; this . mVehicle = vehicle ; this . mCallback = callback ; }
public void navigateThroughPosts ( ) { new ReaderPage ( ) . tapFollowingTab ( ) . openPost ( mCoachingPostTitle ) . verifyPostDisplayed ( mCoachingPostTitle ) . slideToPreviousPost ( ) . verifyPostDisplayed ( mCompetitionPostTitle ) . slideToNextPost ( ) . verifyPostDisplayed ( mCoachingPostTitle ) ; }
private static McdRoomDatabase buildDatabaseInstance ( Context mContext ) { return Room . databaseBuilder ( mContext . getApplicationContext ( ) , McdRoomDatabase . class , Constants . DB_NAME ) . allowMainThreadQueries ( ) . fallbackToDestructiveMigration ( ) . build ( ) ; }
public void addListener ( GnListener gnListener ) { mListener = gnListener ; }
public void onClick ( View v ) { hideKeyBoard ( v ) ; onAudioButtonClicked ( ) ; }
public void saveFeedsSync ( @ NonNull Uri file ) throws IOException { repo . serializeAllFeeds ( file ) ; }
public boolean isImage ( ) { return this != NONE && this != YOUTUBE ; }
private void requestUpdateToState ( ) { mIsToUpdated = false ; }
public void setItemChecked ( int position , boolean checked ) { mCheckedState . put ( position , checked ) ; notifyItemChanged ( position ) ; }
public static void setColorFilter ( ImageView view , int colorFilter ) { view . getDrawable ( ) . setColorFilter ( colorFilter , PorterDuff . Mode . SRC_IN ) ; }
public void processFinLegacy ( Element fin , Jid from ) { Query query = findQuery ( fin . getAttribute ( "queryid" ) ) ; if ( query != null && query . validFrom ( from ) ) { processFin ( fin ) ; } }
public Item ( ) { name = "" ; icon = Uri . EMPTY ; }
public ToggleButton ( Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public void onRefresh ( ) { fetchCurrentLyrics ( true ) ; }
private void showAddPointDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; AddPointWithSDialogFragment dialog = new AddPointWithSDialogFragment ( ) ; dialog . show ( this . getFragmentManager ( ) , "AddPointWithSDialogFragment" ) ; }
public void onBindFooterItemViewHolder ( FooterVH holder , int localPosition , List < Object > payloads ) { onBindFooterItemViewHolder ( holder , localPosition ) ; }
public void getAppMessagesTest ( ) { Integer id = null ; Integer limit = null ; Integer since = null ; }
public < T > T getValue ( Context context ) { return getSpecificOverriddenValue ( context , ( T ) getDefaultValue ( ) , ( String [ ] ) null ) ; }
public void evaluate ( ) throws Throwable { DigitalismaApplication application = DigitalismaApplication . get ( context ) ; application . setComponent ( testComponent ) ; base . evaluate ( ) ; application . setComponent ( null ) ; }
public Match inflate ( Cursor cursor ) { return ModelInflater . inflateMatch ( cursor ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mContext = null ; }
public void bind ( BookSearchResultsContainer bookSearchResultsContainer ) { bookNameTextView . setText ( bookSearchResultsContainer . getBookName ( ) ) ; numberOfResultsTextView . setText ( String . valueOf ( bookSearchResultsContainer . getChildCount ( ) ) ) ; this . bookPartsInfo = bookSearchResultsContainer . bookPartsInfo ; }
public void onResume ( ) { super . onResume ( ) ; mIsPaused = false ; }
public MateriViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( context ) . inflate ( R . layout . materi_detail_card_view , parent , false ) ; return new MateriViewHolder ( view ) ; }
public void setLineSpacing ( float add , float mult ) { super . setLineSpacing ( add , mult ) ; mSpacingMult = mult ; mSpacingAdd = add ; }
public void setTitle ( String title ) { this . title = StringUtils . notNullStr ( title ) ; }
public int getMaxLvl ( ) { return maxLvl ; }
private void addColumns ( List < ColumnModel > columnModelList ) { LogUtil . d ( TAG , "do addColumn" ) ; execute ( getAddColumnSQLs ( columnModelList ) , mDb ) ; for ( ColumnModel columnModel : columnModelList ) { mTableModelDB . addColumnModel ( columnModel ) ; } }
public void success ( Contact contact ) { selectPresenceToAttachFile ( attachmentChoice ) ; }
public void onResume ( ) { if ( parallaxEffect != null ) { parallaxEffect . setEnabled ( true ) ; } }
private void checkLongpoll ( ) { if ( isGuiResumed ( ) && getAccountId ( ) != ISettings . IAccountsSettings . INVALID_ID ) { longpollManager . keepAlive ( getAccountId ( ) ) ; } }
public void endNow ( ) { timeRemaining = 0 ; }
public static int getFirstAyahOnPage ( int page ) { return QuranInfo . pageAyahStart [ page - 1 ] ; }
public void setSaturatedFat ( String saturatedFat ) { this . saturatedFat = saturatedFat ; }
public Integer getCommentVerticalBarColor4 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_4 , getDefaultColor ( "#EED502" , "#EDCA00" , "#EDCA00" ) ) ; }
public void onFailure ( Call < EventsList > call , Throwable t ) { Log . e ( LOG_TAG , t . toString ( ) ) ; }
public int getSearchChoice ( ) { return mPrefs . getInt ( Name . SEARCH , 1 ) ; }
private double foottoyard ( double num ) { return num * 0 . 333 ; }
public void onNext ( GenericResponse genericResponse ) { getMvpView ( ) . showProgressbar ( false ) ; getMvpView ( ) . showDocumentedCreatedSuccessfully ( genericResponse ) ; }
public String desc ( ) { return Game . getVar ( R . string . Dreamweed_Desc ) ; }
public void updateState ( int newBitState , boolean newSignState ) { Pr0Number . updateState ( newBitState , newSignState ) ; operationSelected = Pr0Operation . NONE ; currentNumber . clearValues ( ) ; previousNumber . clearValues ( ) ; }
public void onClick ( View v ) { if ( v == buttonOpen ) ProjectActivity . openIt ( getContext ( ) , projectData . slug , idUser ) ; }
public static long genWebTextTimestamp ( ) { return new Date ( ) . getTime ( ) / 1000 ; }
public void onClick ( View v ) { Intent i = new Intent ( TalksShowMoreActivity . this , EventDetailsActivity . class ) ; i . putExtra ( "event_name" , eventName ) ; startActivity ( i ) ; }
public List < App > getApps ( ) { return apps ; }
public boolean isCharging ( ) { return chargePlug == BatteryManager . BATTERY_PLUGGED_AC || chargePlug == BatteryManager . BATTERY_PLUGGED_USB || chargePlug == BatteryManager . BATTERY_PLUGGED_WIRELESS ; }
public void value4f ( float v1 , float v2 , float v3 , float v4 ) { GLES20 . glUniform4f ( location , v1 , v2 , v3 , v4 ) ; }
public void onServiceDisconnected ( ComponentName componentName ) { bulkReadCardsServiceBinder = null ; Dialog dialog = getDialog ( ) ; if ( dialog != null ) dialog . cancel ( ) ; }
public void onItemRemoved ( int position ) { ( ( LegacySwipeableExampleActivity ) getActivity ( ) ) . onItemRemoved ( position ) ; }
private TodoList createTodoList ( ) { return new TodoList ( "InsertTest" ) ; }
public void trackSignupMagicLinkSent ( String email ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . SIGNUP_MAGIC_LINK_SENT ) ; }
public ChannelEditInfoActivity ( Bundle args ) { super ( args ) ; avatarDrawable = new AvatarDrawable ( ) ; avatarUpdater = new AvatarUpdater ( ) ; chatId = args . getInt ( "chat_id" , 0 ) ; }
public static void trackLoginProloguePages ( int page ) { Map < String , Integer > properties = new HashMap <> ( ) ; properties . put ( "page_number" , page ) ; AnalyticsTracker . track ( Stat . LOGIN_PROLOGUE_PAGED , properties ) ; }
public Item random ( ) { level = + 1 ; return this ; }
public void setLocationWithoutMovement ( float pX , float pY ) { if ( ! stopMovements ) { view . bringToFront ( ) ; view . setX ( pX ) ; view . setY ( pY ) ; } }
public void onClick ( View v , int pos ) { int id = v . getId ( ) ; Log . d ( "Clicked" , "onFragment" ) ; switch ( id ) { case R . id . throw_button : return ; } }
public int schedVer ( ) { int ver = mConf . optInt ( "schedVer" , fDefaultSchedulerVersion ) ; if ( fSupportedSchedulerVersions . contains ( ver ) ) { return ver ; } else { throw new RuntimeException ( "Unsupported scheduler version" ) ; } }
public DateHeading ( Date date ) { this ( date , "A" ) ; }
private void setEnabledAddButton ( ImageButton addCollectionButton , boolean enabled ) { Util . setImageButtonEnabled ( getContext ( ) , enabled , addCollectionButton , R . drawable . ic_add_black_24dp ) ; }
public void onClick ( View v ) { stopScrolling ( ) ; setSelection ( binding . messagesView . getCount ( ) - 1 ) ; }
private int averageIntegerWithPercent ( int num1 , int num2 , float percent ) { return Math . round ( ( num1 - num2 ) * percent ) + num2 ; }
private void doUpload ( ) throws IOException { postBranchDetails ( ) ; postQuestionAnswers ( ) ; postNotes ( ) ; }
private void decorateDead ( VH holder , ItemManager . Item item ) { holder . mContentTextView . setTextColor ( item . isDead ( ) ? mSecondaryTextColorResId : mTertiaryTextColorResId ) ; }
public void onAnimationEnd ( Animator animation ) { disableMenu = false ; Utils . showGameWonStuff ( mainActivity ) ; }
public void onColorSelection ( @ NonNull ColorChooserDialog colorChooserDialog , int color ) { BitmapUtils . changeImageViewDrawableColor ( colorChooser , color ) ; selectedColor = color ; }
public DrawView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . setup ( context ) ; }
public CameraOperationsManager ( String name ) { if ( AppPreferences . isTestMode ( ) ) { bytes = ImageUtil . loadImageBytes ( name , FileType . TEST_IMAGE ) ; } }
public void onLocationChangedSignificantly ( fr . free . nrw . commons . location . LatLng latLng ) { Timber . d ( "Location significantly changed" ) ; if ( isMapBoxReady && latLng != null &&! isUserBrowsing ( ) ) { handleLocationUpdate ( latLng , LOCATION_SIGNIFICANTLY_CHANGED ) ; } }
private void changeFocusDistance ( int change ) { mainUI . changeSeekbar ( R . id . focus_seekbar , change ) ; }
public void setGraph3MonthsXLabels ( String [ ] labels ) { chart3Months . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter < String > ( labels ) ) ; }
public void onStop ( SeekBarView seekBarView , int position , String value ) { Wakelocks . setWlanrxDivider ( position , getActivity ( ) ) ; }
public void selectTimeLapseReset ( FragmentManager fragmentManager ) { selectPeriodHelper . showSelectTimeLapseResetDialog ( fragmentManager , modifiedEvent , ( period , timeUnit ) -> { modifiedEvent . setTimeLapse ( period ) ; modifiedEvent . setTimeLapseUnit ( timeUnit ) ; formatAndShowTimeLapseReset ( ) ; } ) ; }
public FloatingText ( ) { super ( PixelScene . chooseFont ( 9 ) ) ; scale . set ( PixelScene . scale ) ; speed . y = - DISTANCE / LIFESPAN ; }
public void showKeyboard ( Activity activity ) { InputMethodManager inputMethodManager = ( InputMethodManager ) getActivity ( ) . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; inputMethodManager . showSoftInputFromInputMethod ( activity . getWindow ( ) . getDecorView ( ) . getWindowToken ( ) , InputMethodManager . SHOW_FORCED ) ; }
public void setDate ( String date ) { this . date = date ; }
private void changeTtsPrefs ( ) { boolean isChecked = binding . ttsPrefs . isChecked ( ) ; binding . ttsPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdayTtsEnabled ( ! isChecked ) ; }
public UserInfoRequest ( String userName ) { super ( User . class , PointIm . class ) ; mUserName = userName ; }
public java . util . List < com . google . protobuf . Any > getMessagesList ( ) { if ( messagesBuilder_ == null ) { return java . util . Collections . unmodifiableList ( messages_ ) ; } else { return messagesBuilder_ . getMessageList ( ) ; } }
public static boolean canDrawOverlays ( ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . M ) { return true ; } else { return Settings . canDrawOverlays ( applicationContext ) ; } }
public JSONObject start ( JSONObject kw ) throws UnknownHttpResponseException { return _run ( "start" , kw ) ; }
private void setAccountTitle ( @ Nullable WalletAccount account ) { if ( account != null ) { title = account . getDescription ( ) ; } else { title = "" ; } }
public void replaceCurrentWord ( String newWord ) { replace ( getWordStart ( getSelectionStart ( ) ) , getWordEnd ( getSelectionEnd ( ) ) , newWord ) ; }
public NativeZipInputStreamAccess ( final String zipFilePath ) { this . zipfile = zipFilePath ; }
public void onClick ( View view ) { Intent intent = new Intent ( TaskList . this , NewTask . class ) ; startActivity ( intent ) ; }
public void onPrepareOptionsMenu ( Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; if ( mPointPost != null ) mOnPostActionsListener . updateMenu ( menu , mShareActionProvider , mPointPost ) ; menu . setGroupVisible ( R . id . group_loaded , mPointPost != null ) ; }
private void commonConfiguration ( ) { configuration . put ( "browserGPS" , "false" ) ; }
public String toString ( ) { return "NoteWithTags { " + "note = " + note + " , noteTags = " + noteTags + ' } ' ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( RECYCLER_VIEW_STATE , mRecyclerView . getLayoutManager ( ) . onSaveInstanceState ( ) ) ; }
private void assertQuery ( Uri uri ) { Cursor c = getMockContentResolver ( ) . query ( uri , null , null , null , null ) ; assertNotNull ( c ) ; c . close ( ) ; }
public String getPref ( int id , String defaultValue ) { return sharedPrefs . getString ( getString ( id ) , defaultValue ) ; }
public static UserModel getUser ( ) { return new UserModel ( getUserId ( ) , getUserUsername ( ) , getUserPassword ( ) , getUserRegId ( ) , isUserAdmin ( ) ) ; }
public MultiSelectListPreferenceDialogFragment ( ) { }
public void onClick ( View v ) { QuestionContainerFragment questionFragment = ( QuestionContainerFragment ) getParentFragment ( ) ; questionFragment . flipCard ( answer , question ) ; }
public Integer getPrincipalWrittenOff ( ) { return principalWrittenOff ; }
public static String getPINCodeHash ( ) { return getString ( R . string . pref_key_pin_code_hash , null ) ; }
public String getObsGroup ( ) { return obsGroup ; }
public AboutBuilder setPhoto ( int photo ) { return setPhoto ( IconUtil . getBitmap ( context , photo ) ) ; }
public void setSynced ( boolean synced ) { isSynced = synced ; }
public void onBackPressed ( ) { stopGamepadInputWatcher ( ) ; getGame ( ) . popScreen ( ) ; }
private void handlePauseRequest ( ) { MediaController . getInstance ( ) . pauseAudio ( MediaController . getInstance ( ) . getPlayingMessageObject ( ) ) ; delayedStopHandler . removeCallbacksAndMessages ( null ) ; delayedStopHandler . sendEmptyMessageDelayed ( 0 , STOP_DELAY ) ; }
private void showExportDialog ( ) { ExportDialog dialog = new ExportDialog ( ) ; dialog . show ( this . getSupportFragmentManager ( ) , "ExportDialogFragments" ) ; }
private static String windowText ( ) { if ( GamePreferences . donated ( ) == 0 && RemixedDungeon . canDonate ( ) ) { return Game . getVar ( R . string . WndSaveSlotSelect_dontLike ) ; } return Utils . EMPTY_STRING ; }
public DividerItemDecoration ( Context context , int resId ) { mDivider = ContextCompat . getDrawable ( context , resId ) ; }
public void indexAppsAsync ( Context context ) { indexAppsAsync ( context , null ) ; }
public void startMainActivity ( ) { NavigationBaseActivity . startActivityWithFlags ( this , MainActivity . class , Intent . FLAG_ACTIVITY_SINGLE_TOP ) ; finish ( ) ; }
public void onDataLoaded ( List < TagModel > data ) { entryCachedTags . addAll ( new ArrayList <> ( data ) ) ; updateTags ( data , false ) ; }
public void onResourceReady ( Bitmap resource , GlideAnimation < ? super Bitmap > glideAnimation ) { binding . cropImageView . setImageBitmap ( resource ) ; }
public void onConnectionMessage ( String message ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Spotify connection message : " + message ) ; }
public void setTargetedWidth ( int width ) { targetedWidth = width ; }
public Vm getVm ( ) { return vm ; }
public void onCollapseIvClick ( ) { mMusicPlayerPanelPublishSubject . onNext ( - 1 ) ; }
public MyPlace get ( int i ) { if ( i >= placesList . size ( ) ||i < 0 ) return null ; return placesList . get ( placesList . size ( ) - 1 - i ) ; }
public void complete ( MapTile tile , boolean success ) { if ( success ) { processElements ( tile ) ; get ( tile ) . prepare ( ) ; } else get ( tile ) . setBuckets ( null ) ; }
public void loadCreditsFromMenuScene ( ) { setScene ( loadingScene ) ; menuSceneService . end ( ) ; startSceneService ( creditsSceneService ) ; }
public void makeDatabasePristine ( ) { Context testContext = InstrumentationRegistry . getTargetContext ( ) ; HostDatabase . resetInMemoryInstance ( testContext ) ; mActivityRule . launchActivity ( new Intent ( ) ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_4 . getText ( ) . toString ( ) ) ; }
public void setTeamVisitor ( TeamVisitor teamVisitor ) { this . teamVisitor = teamVisitor ; }
public boolean itemTouchOnMove ( int oldPosition , int newPosition ) { Collections . swap ( adapter . getAdapterItems ( ) , oldPosition , newPosition ) ; adapter . notifyAdapterDataSetChanged ( ) ; return false ; }
private void subscribeToTopics ( ) { for ( String topic : topicList ) { FirebaseMessaging . getInstance ( ) . subscribeToTopic ( topic . replace ( " " , "_" ) ) ; } }
private String getSaveUrl ( ) { return getUrl ( SettingUtils . getSaveResolution ( this ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { if ( getIntent ( ) . getBooleanExtra ( EXTRA_SUBMIT_POST , false ) ) { getMenuInflater ( ) . inflate ( R . menu . full_markdown_activity , menu ) ; applyMenuItemTheme ( menu ) ; return true ; } return false ; }
public RRGLRenderableColouredQuad ( RRGLContext glContext ) { mGLContext = glContext ; }
private UsbSerialInterface . UsbReadCallback createSerialReaderCallback ( ) { return new UsbSerialInterface . UsbReadCallback ( ) { @ Override public void onReceivedData ( byte [ ] liveLogData ) { Settings . serialIOPorts [ Settings . USBIO_IFACE_INDEX ] . onReceivedData ( liveLogData ) ; } } ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( MainActivity . this , Settings . class ) ; startActivity ( i ) ; if ( mAsyncGetSubreddit != null ) mAsyncGetSubreddit . cancel ( true ) ; drawerLayout . closeDrawers ( ) ; }
public Long getHoldingsCount ( ) { return holdingsCount ; }
public AboutBuilder setPhoto ( Bitmap photo ) { this . photo = photo ; return this ; }
public void close ( View v ) { backPressFlag = true ; onBackPressed ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , HealthActivity . class ) ; startActivityForResult ( i , 0 ) ; }
public void onSettingsChange_RestartApp ( ) { mPresenter . onSettingsChange ( 0 , 0 , true , true , true ) ; verify ( mView ) . restartApp ( ) ; }
public String getOpenGTSServerPort ( ) { return prefs . getString ( PreferenceNames . OPENGTS_PORT , "" ) ; }
public com . coinomi . core . protos . Protos . TransactionInput getTransactionInput ( int index ) { if ( transactionInputBuilder_ == null ) { return transactionInput_ . get ( index ) ; } else { return transactionInputBuilder_ . getMessage ( index ) ; } }
public int getWidgetValue ( ) { return widgetValue ; }
public String getRailcarJson ( ) { return StringUtils . notNullStr ( railcarJson ) ; }
private static void setLongPreference ( Context context , String key , long value ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putLong ( key , value ) . commit ( ) ; }
public void testRenderFromKey ( ) { when ( mDatafeed . fetchTeam ( TEAM_KEY ) ) . thenReturn ( Observable . just ( mTeam ) ) ; TeamListElement element = mRenderer . renderFromKey ( TEAM_KEY , ModelType . TEAM , ) ; assertTeamElement ( element , false ) ; }
private ArrayList < MediaModel > getAllFailedMediaForPost ( PostModel postModel ) { Set < MediaModel > failedMedia = mUploadStore . getFailedMediaForPost ( postModel ) ; return filterOutRecentlyDeletedMedia ( failedMedia ) ; }
public void bindCheckBoxCheckedValue ( Boolean isChecked ) { if ( isChecked != null ) mCheckBox . setChecked ( isChecked ) ; else mCheckBox . setChecked ( mListener . isAuthorSelected ( authourId ) ) ; }
public String getSortingOrder ( ) { return CacheUtil . getCache ( getActivity ( ) , getCategory ( ) + TagsUtil . SORT_ORDER , TagsUtil . ORDER_DATE_MODIFIED ) ; }
private int getFirstMessageIndex ( ) { return getFirstContactIndex ( ) + searchResult . getContacts ( ) . size ( ) ; }
private static final Interpolator sDragScrollInterpolator = new Interpolator ( ) { public float getInterpolation ( float t ) { return t * t * t * t * t ; } } ;
public void onCopyTextToClipboard ( TerminalSession session , String text ) { }
public void onClick ( DialogInterface dialog , int which ) { probeType = PROBE_TYPE_NORMAL ; doProbing ( ) ; }
public void run ( ) { try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } getTorrents ( callID , ids , fields , fileIndexes , fileFields , null ) ; }
public TweetListAdapter ( ArrayList < Tweet > tweets ) { this . tweets = tweets ; this . cards = new LongSparseArray <> ( ) ; }
public LeakCanaryProxyImpl ( @ NonNull DigitalismaApplication app ) { this . app = app ; }
public void setUp ( ) { today = new LocalDate ( ) . withDayOfMonth ( 1 ) . withMonthOfYear ( 1 ) . withYear ( 2000 ) ; MockitoAnnotations . initMocks ( this ) ; }
public SortButtonCard ( View v ) { super ( v ) ; buttonText = ( TextView ) v . findViewById ( R . id . card_button_text ) ; v . setOnClickListener ( this ) ; }
public boolean onStartNestedScroll ( final CoordinatorLayout coordinatorLayout , final FloatingActionButton child , final View directTargetChild , final View target , final int nestedScrollAxes ) { return nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL||super . onStartNestedScroll ( coordinatorLayout , child , directTargetChild , target , nestedScrollAxes ) ; }
public void onClick ( View v ) { if ( buffer != null ) NetworkConnection . getInstance ( ) . back ( buffer . getCid ( ) ) ; }
public String [ ] getSelectionArgs ( ) { if ( mSelectionArgs != null ) { return mSelectionArgs . toArray ( new String [ mSelectionArgs . size ( ) ] ) ; } else { return null ; } }
public void setBuffer ( TextTree buffer ) { this . the_tree = buffer ; }
public ArrayList < MoodleModuleContent > getContents ( ) { return contents ; }
public static void setTV ( Activity activity , @ IdRes int textViewId , String string ) { TextView tv = ( TextView ) activity . findViewById ( textViewId ) ; tv . setText ( string ) ; }
public ListBuilder withButtonId ( int buttonId , OnClickListener listener ) { ImageView plusImageView = v . findViewById ( R . id . plus_minus ) ; plusImageView . setVisibility ( View . VISIBLE ) ; return super . withButtonId ( buttonId , listener ) ; }
public static int getModel ( Activity a ) { SharedPreferences sharedPref = a . getPreferences ( Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "model" , 0 ) ; }
public boolean isInSite ( long siteId ) { for ( int i = 0 ; i < mSites . length ; i ++ ) { if ( siteId == mSites [ i ] ) { return true ; } } return false ; }
private void showEventDuration ( ) { binding . eventDurationPrefs . setDetailText ( String . format ( Locale . getDefault ( ) , getString ( R . string . x_minutes ) , String . valueOf ( mPrefs . getCalendarEventDuration ( ) ) ) ) ; }
public boolean update ( CoNaObiadDbHelper dbHelper , String name , long categoryId ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "name" , name ) ; dbHelper . update ( tableName , contentValues , categoryId ) ; return true ; }
public void notifyDataSetChanged ( ) { if ( mDataNotSet ) return ; calcMinMax ( ) ; if ( mLegend != null ) mLegendRenderer . computeLegend ( mData ) ; calculateOffsets ( ) ; }
public void hideProgress ( ) { pbProgress . setVisibility ( View . INVISIBLE ) ; inProgress = false ; }
public Client getChild ( int groupPosition , int childPosition ) { return mifosGroups . get ( groupPosition ) . getClients ( ) . get ( childPosition ) ; }
public LiveData < List < ResponsePile >> getTreasureListLiveData ( ) { if ( treasureListLiveData == null ) { this . treasureListLiveData = getLiveData ( this . getApplication ( ) ) ; } return treasureListLiveData ; }
public void onBackPressed ( ) { inputView . hideKeyboard ( this ) ; }
public static void deleteDropboxToken ( ) { cSharedPreferences . edit ( ) . remove ( SP_DROPBOX_TOKEN ) . commit ( ) ; cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_DROPBOX , false ) . commit ( ) ; }
private void updateDitSound ( ) { ditSound = new SimpleTone ( currentPitch , wpmDitLenMs , SAMPLE_RATE_HZ ) ; }
public void setStatus ( String status ) { this . status = status ; }
public void selectAccount ( String accountName ) { if ( accountName != null ) { settingsProvider . getGeneralSettings ( ) . save ( ProjectKeys . KEY_SELECTED_GOOGLE_ACCOUNT , accountName ) ; accountPicker . setSelectedAccountName ( accountName ) ; } }
public void run ( ) { processFeatureRow ( task , database , featureDao , converter , row , count , maxFeatures , editable , filterBoundingBox , maxLongitude , filter ) ; }
public FingerprintDialog fingerprintScanningColor ( int fingerprintScanningColor ) { this . fingerprintView . fingerprintScanningColor ( fingerprintScanningColor ) ; return this ; }
private void metadataChanged ( ) { if ( App . mClementine . getPlaylistManager ( ) . getActivePlaylist ( ) != null ) { mActionBar . setSubtitle ( App . mClementine . getPlaylistManager ( ) . getActivePlaylist ( ) . getName ( ) ) ; } }
public String getImageUrl ( ) { return image != null ? NetworkConstants . FOODTRUCK_API_PROFILE_IMAGES_BASE_URL + image : null ; }
public void setLastPostMemberAvatarSuffix ( String lastPostMemberAvatarSuffix ) { this . lastPostMemberAvatarSuffix = lastPostMemberAvatarSuffix ; notifyPropertyChanged ( BR . lastPostMemberAvatarSuffix ) ; }
private void prepareData ( ) { calculatePeriods ( ) ; calculationOfWorkoutsPerMonth ( ) ; calculationOfWorkoutsPreviousMonth ( ) ; receiveTrainingRatio ( ) ; getWodLevelForMonth ( ) ; loadLastTraining ( ) ; }
public boolean tryCaptureView ( View child , int pointerId ) { return child == controls && ! halfModeUnsupported ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mDistrictTeams . get ( 0 ) ) ; }
public Loader < ArrayList < Playlist >> onCreateLoader ( int id , Bundle args ) { return new AsyncPlaylistLoader ( getActivity ( ) ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return initializeForView ( new Tale ( ) ) ; }
public void onCancelClicked ( final View view ) { Lg . i ( "onCancelClicked" ) ; PreferencesHelper . saveToFileCreateAccountStatus ( CreateAccountActivity . this , CreateAccountStatus . NONE ) ; finish ( ) ; }
public static void init ( Context context ) { mHelper = new DbHelper ( context ) ; sInstance = new DbExecutor ( ) ; }
private void firebaseToggled ( final boolean allowed ) { thread . run ( ( ) -> firebaseCrashlyticsProvider . setEnabled ( activity , allowed ) ) ; }
private boolean handleActionMoveWhileNotDragging ( RecyclerView rv , MotionEvent e ) { if ( ! mInitiateOnLongPress ) { return checkConditionAndStartDragging ( rv , e , true ) ; } else { return false ; } }
public AmountUnitType getAmountUnitType ( ) { return unit . getAmountUnitType ( ) ; }
public void onScrollStateChanged ( RecyclerView recyclerView , int newState ) { RecyclerViewDragDropManager . this . onScrollStateChanged ( recyclerView , newState ) ; }
public void setBlogName ( String blogName ) { this . blogName = StringUtils . notNullStr ( blogName ) ; }
public void onLoaderReset ( Loader < DataWrapper > loader ) { }
public void doesNotShowErrorsWhenUsedInTime ( ) { lint ( ) . allowMissingSdk ( ) . allowCompilationErrors ( ) . files ( create ( stubGregorian ) , create ( javaFileWithTime ) ) . issues ( DirectSystemTimeInstantiation . ISSUE ) . run ( ) . expectClean ( ) ; }
public ErrorPropertiesDialog ( @ NonNull final RRError error ) { mError = error ; }
public final AffineTrans getAffineTrans ( ) { return this . myAffineNow ; }
public AdapterItemCatHorizontal ( List < ItemCategory > dataset , Context context , Fragment fragment ) { this . dataset = dataset ; this . context = context ; this . fragment = fragment ; }
public IBinder onBind ( Intent intent ) { serviceInUse = true ; return iBinder ; }
private String getPrefsTheme ( ) { return settingsProvider . getGeneralSettings ( ) . getString ( ProjectKeys . KEY_APP_THEME ) ; }
private void initButtonLayer ( ) { if ( buttonLayer != null ) { destroyButtonLayer ( ) ; } buttonLayer = new ButtonLayer ( this ) ; }
public BaseAdapter getAdapter ( ) { return mAdapter ; }
public PorItem ( String name , String image , String position ) { this . image = image ; this . name = name ; this . position = position ; }
public void setGradientColors ( @ GradientTypes int type , int [ ] colors , float [ ] positions , @ FloatRange ( from = 0f , to = 360f ) float angle ) { gradientColors ( type , colors , positions , angle ) ; invalidate ( ) ; }
private void syncVitalsData ( ) { visitApi . syncLastVitals ( mPatient . getUuid ( ) ) ; }
public void syncClose ( ) { setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SET_MODEM_CTRL_DEFAULT3 , 0 , null ) ; setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SET_MODEM_CTRL_DEFAULT4 , 0 , null ) ; currentSioSetData = 0x0000 ; connection . releaseInterface ( mInterface ) ; isOpen = false ; }
public void onFailure ( Call < DraftUploadResponse > call , Throwable t ) { if ( draftsHelperCallback != null ) { draftsHelperCallback . onNewDraftSaved ( false ) ; } }
public com . coinomi . core . protos . Protos . WalletPocket . Builder addPocketsBuilder ( ) { return getPocketsFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . WalletPocket . getDefaultInstance ( ) ) ; }
public void setTelephone ( int telephone ) { this . telephone = telephone ; }
public void onClick ( View v ) { mainActivity . startGameWithConfig ( boards . get ( position ) ) ; }
public void initializePresenter ( ) { String presentation = formatPresentation ( interactor . getUnseenRecords ( ) ) ; view . setChangesText ( presentation ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_album_detail , menu ) ; MenuHelper . setDeleteMenuItemRed ( menu , this ) ; return super . onCreateOptionsMenu ( menu ) ; }
public Maybe < Event > edit ( Event entity ) { return cacheManager . edit ( entity ) ; }
public void onPositive ( MaterialDialog dialog ) { Intent intent = new Intent ( ) ; intent . setData ( Uri . parse ( PLAY_STORE_URL ) ) ; startActivity ( intent ) ; }
public Waveform ( @ NotNull Context context , @ NotNull AttributeSet attrs ) { super ( context , attrs ) ; init ( context ) ; }
public void onClick ( View view ) { m_PlanesLayout . setGameStage ( ) ; setGameStage ( ) ; m_GameBoards . setGameStage ( ) ; m_PlaneRound . doneClicked ( ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { dialogListener . onDialogDismiss ( ErrorDialogFragment . this ) ; }
private void verifyFile ( String chosenFile ) { updateRecentFolder ( chosenFile ) ; gotoVerifyView ( chosenFile ) ; }
private ThemeUtil ( Context context ) { this . holder = new Holder ( context ) ; }
public static void setRunkeeperToken ( String token ) { cSharedPreferences . edit ( ) . putString ( SP_RUNKEEPER_TOKEN , token ) . commit ( ) ; }
public int getChange_index ( ) { return this . _change_index ; }
public void setAccount ( Account account ) { this . account = account ; }
public boolean isEnded ( ) { return super . isEnded ( ) && ! audioTrack . hasPendingData ( ) ; }
public Measure ( Point _point , double _horizDir , double _zenAngle ) { this ( _point , _horizDir , _zenAngle , 0 . 0 ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; listDecoration . invalidateLayouts ( ) ; }
private void replaceFragment ( PreferenceFragment fragment ) { if ( fragment != null ) { getFragmentManager ( ) . beginTransaction ( ) . replace ( android . R . id . content , fragment ) . commit ( ) ; } }
public ItemCategoriesParentAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_item_category , parent , false ) ; return new ViewHolder ( v ) ; }
public AboutBuilder addGitHubLink ( int user ) { return addGitHubLink ( context . getString ( user ) ) ; }
public String getName ( ) { return Util . formatTimeOfDay ( tod ) ; }
public int getCount ( ) { }
public int colorBirthdayCalendar ( ) { return colorPrimary ( Prefs . getInstance ( mContext ) . getBirthdayColor ( ) ) ; }
public KeyType getType ( ) throws IOException { return KeyType . fromKey ( getPublic ( ) ) ; }
public void onAnimationCancel ( Animator animation ) { }
public static String getStringFromTo ( String from , String to ) { return Utils . getStringFormat ( context , R . string . log_from_to_mask , from , to ) ; }
public static synchronized String renderEventShortFormat ( Date date ) { return sEventRenderShortFormat . format ( date ) ; }
public boolean dispatchTouchEvent ( @ NonNull MotionEvent event ) { mCurrentMotionEvent = event ; MotionEvent invertedEvent = applyMatrix ( event , mMatrixInverse ) ; try { return super . dispatchTouchEvent ( invertedEvent ) ; } finally { invertedEvent . recycle ( ) ; } }
public boolean isLoggedIn ( ) { return getStore ( ) . isLoggedIn ( ) ; }
private String getEmailMessage ( String zoneName ) { return getString ( R . string . zone_not_drawable_email_message , zoneName ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "mx . dev . franco . musicallibraryorganizer" , appContext . getPackageName ( ) ) ; }
public PesquisarFilmePresenter ( PesquisaFilmeContract . view myView , PesquisaFilmeContract . getFilmeService filmeService ) { this . myView = myView ; this . filmeService = filmeService ; }
public void setSystemId ( String systemId ) { this . systemId = systemId ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . needReloadArchivedStickers ) ; }
public void jumpToStart ( ) { scrollback = SCROLL_MIN ; mFlingVelocity = 0 ; this . invalidate ( ) ; }
public QuranAyah getMaxAyah ( ) { return new QuranAyah ( maxSura , maxAyah ) ; }
public void e ( String tag , String message , Object . . . args ) { log ( android . util . Log . ERROR , tag , message , args ) ; }
public void onPlay ( ) { resumePlaying ( false ) ; }
public long getItemId ( int position ) { return mTags . get ( position ) . getmTagSlug ( ) . hashCode ( ) ; }
public void clickingPets ( MenuItem item ) { Intent intent = new Intent ( NavD . this , Pets . class ) ; startActivity ( intent ) ; }
private AlbumCoverPagerAdapter . AlbumCoverFragment . ColorReceiver colorReceiver = new AlbumCoverPagerAdapter . AlbumCoverFragment . ColorReceiver ( ) { @ Override public void onColorReady ( int color , int requestCode ) { if ( currentPosition == requestCode ) { notifyColorChange ( color ) ; } } } ;
public void setup ( ) { when ( formEntryViewModel . hasBackgroundRecording ( ) ) . thenReturn ( new MutableLiveData <> ( false ) ) ; provider = new AudioRecorderRecordingStatusHandler ( audioRecorder , formEntryViewModel , new FakeLifecycleOwner ( ) ) ; }
public Result ( JSONObject result ) throws JSONException { mResult = result ; }
public String getMantra ( ) { return mantra ; }
private float convertPointerX ( float x ) { return ( x - onX ) * virtualWidth / onWidth ; }
public void setSecurityToken ( String securityToken ) { this . securityToken = securityToken ; }
public void slideToOutsideOfWindow ( RecyclerView . ViewHolder holder , int dir , boolean shouldAnimate , long duration ) { cancelDeferredProcess ( holder ) ; slideToOutsideOfWindowInternal ( holder , dir , shouldAnimate , duration ) ; }
public CharSequence getPageTitle ( int position ) { return getBaseActivity ( ) . getString ( TITLES [ position ] ) ; }
public void enableConverter ( int orderPosition , boolean enable ) { mConvertersRepo . saveConverterState ( orderPosition ) ; mAllConverters . add ( orderPosition , new Pair <> ( mAllConverters . remove ( orderPosition ) . first , enable ) ) ; }
public void putFormResult ( String formId , boolean result ) { formResult . put ( formId , result ) ; }
private void saveMovieReference ( Long movieId , String sort ) { ContentValues entry = new ContentValues ( ) ; entry . put ( MoviesContract . COLUMN_MOVIE_ID_KEY , movieId ) ; context . getContentResolver ( ) . insert ( SortHelper . getSortedMoviesUri ( sort ) , entry ) ; }
public void seriesCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "series" ) ; }
public void onClick ( View v ) { if ( null != mListener ) { mListener . onListFragmentInteraction ( mItem ) ; } }
public ReaderRecyclerView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initialize ( ) ; }
public String getTabletWidthParam ( ) { return mPageProvider . getTabletWidthParameter ( ) ; }
public VolumeKeyEvent ( long downTime , long eventTime , int action , int code , int repeat ) { super ( downTime , eventTime , action , code , repeat ) ; this . mVolumeKeyEventType = VOLUME_KEY_EVENT_NATIVE ; this . mPrevCurrentValue = null ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . mainUserInfoChanged ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . updateInterfaces , MessagesController . UPDATE_MASK_ALL ) ; UserConfig . saveConfig ( true ) ; }
public void afterTextChanged ( Editable s ) { mPresenter . loadUnusuals ( defindex , index , s . toString ( ) ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; getLibraryFragment ( ) . removeOnAppBarOffsetChangedListener ( this ) ; ButterKnife . unbind ( this ) ; }
public String info ( ) { return "If true , the last used command will appear on top\n" ; }
public void onClick ( DialogInterface dialogInterface , int i ) { addSelectedProducts ( ) ; finish ( ) ; }
public AdaptiveVideoTrackSelection createTrackSelection ( TrackGroup group , int . . . tracks ) { return new AdaptiveVideoTrackSelection ( group , tracks , bandwidthMeter , maxInitialBitrate , minDurationForQualityIncreaseMs , maxDurationForQualityDecreaseMs , minDurationToRetainAfterDiscardMs , bandwidthFraction ) ; }
public boolean onQueryTextChange ( String query ) { providerManagementFragment . filterProviders ( query ) ; return true ; }
public HDKeyChain toEncrypted ( KeyCrypter keyCrypter , KeyParameter aesKey ) { return new HDKeyChain ( keyCrypter , aesKey , this ) ; }
public void setCallBack ( Callback . a2 < Boolean , Boolean > callBack ) { this . _appDrawerCallback = callBack ; }
public Date getCreated ( ) { return created ; }
public void onClick ( View v ) { if ( ConnectionUtils . isConnected ( CreateArticleActivity . this ) ) { publishArticle ( ) ; } else { showConnectivityError ( ) ; saveDraft ( ) ; } }
public DrawerBuilder withFullscreen ( boolean fullscreen ) { this . mFullscreen = fullscreen ; if ( fullscreen ) { withTranslucentStatusBar ( false ) ; withTranslucentNavigationBar ( false ) ; } return this ; }
public CategoriesAdapter ( CategoriesAdapterListItemClickListener mOnClickListener , List < Categories > categoriesList ) { this . mOnClickListener = mOnClickListener ; this . categoriesList = categoriesList ; }
public void run ( ) { Intent mainIntent = new Intent ( getApplicationContext ( ) , Main2Activity . class ) ; startActivity ( mainIntent ) ; finish ( ) ; }
public void onConfigurationChanged ( @ NotNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; loadImage ( ) ; }
private void findViews ( ) { mRecyclerView = ( RecyclerView ) mRootView . findViewById ( R . id . recyclerView ) ; }
public void onStart ( ) { super . onStart ( ) ; subscribeAlertDialog ( ) ; }
public String getClientCountry ( ) { if ( ! User . getHasPhoneAccount ( ) ) { return null ; } return User . getPhoneAccount ( ) . getCountry ( ) ; }
public void changed ( ChangeEvent event , Actor actor ) { if ( TDGalaxy . googlePlayServices != null ) TDGalaxy . googlePlayServices . rateGame ( ) ; }
private void notifyFragmentOfBackendConnected ( @ IdRes int id ) { final Fragment fragment = getFragmentManager ( ) . findFragmentById ( id ) ; if ( fragment != null && fragment instanceof OnBackendConnected ) { ( ( OnBackendConnected ) fragment ) . onBackendConnected ( ) ; } }
public void onNothingSelected ( ) { } ;
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { ( ( DemoViewHolder ) holder ) . textView . setText ( String . format ( Locale . getDefault ( ) , "HearSilent %d" , position ) ) ; }
public void notice ( ) { super . notice ( ) ; yell ( Game . getVar ( R . string . King_Info3 ) ) ; }
public void testYandexSecretValidation ( ) { assertThrows ( OtpInfoException . class , ( ) -> YandexUtils . validateSecret ( getBase32Vector ( 2 ) ) ) ; assertThrows ( OtpInfoException . class , ( ) -> YandexUtils . validateSecret ( getBase32Vector ( 3 ) ) ) ; }
public OAuthProvider getOSMAuthProvider ( ) { return new CommonsHttpOAuthProvider ( OSM_REQUESTTOKEN_URL , OSM_ACCESSTOKEN_URL , OSM_AUTHORIZE_URL ) ; }
public void setWallet ( int wallet ) { this . wallet = wallet ; }
public int getEntryId ( ) { return mEntryId ; }
static public String getDurationAgo ( java . util . Date date ) { PrettyTime p = new PrettyTime ( Locale . getDefault ( ) ) ; return p . format ( date ) ; }
public TetroidRecord getRecord ( ) { return record ; }
public void runOnUI ( String token , @ NonNull ThrowingRunnable runnable ) { runOnUI ( runnable , null ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { JobActivity . this . continueJob ( ) ; }
public Computer ( String str , String str2 ) { this . name = str ; this . addr = str2 ; }
public static int currentTheme ( SharedPreferences sharedPreferences ) { boolean isDark = sharedPreferences . getBoolean ( "night_mode" , false ) ; if ( ! isDark ) { return R . style . AppTheme ; } else return R . style . AppThemeDark ; }
public void read ( DataInputStream dataInputStream ) throws Exception { c = dataInputStream . readUTF ( ) ; id = dataInputStream . readInt ( ) ; getSocketMonitor ( ) . getPacketIDDatabase ( ) . process ( this ) ; }
public static float spToPix ( float sp ) { return TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_SP , sp , metrics ) ; }
public void testMinimalEncoder39 ( ) throws Exception { verifyMinimalEncoding ( "abcdef\u0150ghij" , "ECI ( ISO - 8859 - 2 ) , BYTE ( abcde" + "f . ghij ) , TERMINATOR ( ) " , null , false ) ; }
public InputIpPresenter providePresenter ( ) { return new InputIpPresenter ( ) ; }
private double sqmTosqfoot ( double num ) { return num * 10 . 764 ; }
public void onClick ( View v ) { if ( null != mListener ) { mListener . showTripDetails ( mValues . get ( position ) ) ; } }
private void setEntryValues ( CharSequence [ ] values ) { this . values = values ; }
public CollectionViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { HorizontalBookRecyclerView recyclerView = new HorizontalBookRecyclerView ( parent . getContext ( ) ) ; return new CollectionViewHolder ( recyclerView ) ; }
public void collapseAll ( ) { if ( mAdapter != null ) { mAdapter . collapseAll ( ) ; } }
private Schedule ( ) { }
private static String makeCondString ( int cond ) { return KcaUtils . format ( "%d" , cond ) ; }
public void setAmount ( Long amount ) { this . amount = amount ; }
public DnsServer ( String address , int description ) { this ( address , description , 53 ) ; }
public DoubleGameView ( Context context ) { this ( context , 0 , 0 ) ; }
public String toString ( ) { return TABLE_NAME + crateTableDefinition ( ) ; }
private ImageSize getImageSizeFromAttributes ( final String imageTag ) { return new ImageSize ( ReaderImageScanner . getWidthAttrValue ( imageTag ) , ReaderImageScanner . getHeightAttrValue ( imageTag ) ) ; }
private static int output ( String level , String tag , String message ) { System . out . println ( String . format ( "%s : %s : %s" , level . toUpperCase ( ) , tag , message ) ) ; return 0 ; }
private void requestStoragePermission ( ) { requestPermissions ( new String [ ] { Manifest . permission . WRITE_EXTERNAL_STORAGE } , FileRequests . PERMISSION_STORAGE ) ; }
public void getNextWithYellow ( ) throws Exception { assertThat ( LowEmissionZoneNumbers . getNext ( LowEmissionZoneNumbers . YELLOW ) ) . isEqualTo ( LowEmissionZoneNumbers . GREEN ) ; }
public void onSurfaceCreated ( SurfaceHolder holder ) { super . onSurfaceCreated ( holder ) ; isVisible = true ; draw ( holder ) ; }
public void onViewDetachedFromWindow ( VH holder , int viewType ) { if ( isWrappedAdapterAlive ( ) ) { WrappedAdapterUtils . invokeOnViewDetachedFromWindow ( mWrappedAdapter , holder , viewType ) ; } }
public SelectPictureListAdapter ( String [ ] entries , ItemClickListener listener ) { this . entries = entries ; this . listener = listener ; }
public static boolean isQuickMenuEnabledForTransaction ( Context context ) { return getBoolean ( context , "quick_menu_transaction_enabled" , true ) && isGreenDroidSupported ( ) ; }
private void setupNotification ( ) { NotificationUtils . setupNotificationWithPref ( this , mPreferences . getString ( Constants . PREF_NOTIFICATION_VISIBILITY , Constants . PERSISTENT_NOTIFICATION_DEFAULT_VISIBILITY ) ) ; }
public void onEvent ( OnWifiUpdateCompleted event ) { if ( currentTracker == null ) return ; if ( event . success && currentTracker . equals ( event . tracker ) ) { updateCurrentWeek ( ) ; } }
public void onStateChange ( ) { Log . w ( TAG , "onStateChange" ) ; }
public long getDuration ( ) { return composition != null ? composition . getDuration ( ) : 0 ; }
public RFdroidService getService ( ) { return RFdroidService . this ; }
public LocalBroadcastManager ( @ ForApplication Context context , AppWidgetManager appWidgetManager ) { this . appWidgetManager = appWidgetManager ; localBroadcastManager = androidx . localbroadcastmanager . content . LocalBroadcastManager . getInstance ( context ) ; }
public String getTopicLogo ( ) { return mTopicLogo ; }
private void releaseInternal ( ) { resetInternal ( true ) ; loadControl . onReleased ( ) ; setState ( ExoPlayer . STATE_IDLE ) ; synchronized ( this ) { released = true ; notifyAll ( ) ; } }
public void onClick ( View view ) { actionListener . onClick ( view , DetailActionListener . COPY_GP , textName . getText ( ) . toString ( ) ) ; }
public void onServiceConnected ( ComponentName componentName , IBinder iBinder ) { this . binder = ( MainService . MainBinder ) iBinder ; this . currentCall = binder . getCurrentCall ( ) ; }
private void deleteFile ( Message message ) { if ( activity . xmppConnectionService . getFileBackend ( ) . deleteFile ( message ) ) { message . setTransferable ( new TransferablePlaceholder ( Transferable . STATUS_DELETED ) ) ; activity . onConversationsListItemUpdated ( ) ; updateMessages ( ) ; } }
public void run ( ) { RunnableWithProgress . super . incrementProgressBy ( 1 ) ; }
private void dismissKeyPreviewWithoutDelay ( @ NonNull final Key key ) { invalidateKey ( key ) ; }
public synchronized void removeHandler ( IRCEventHandler handler ) { synchronized ( handlers ) { handlers . remove ( handler ) ; } }
public void onClick ( View v ) { mItemsHolder . removeView ( mItemsHolder . findViewById ( id ) ) ; }
public void onVolumeChanged ( ClientItem clientItem , int percent , boolean mute ) { if ( listener != null ) listener . onVolumeChanged ( this , clientItem , percent , mute ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_auth_exportedAuthorization . TLdeserialize ( stream , constructor , exception ) ; }
public String getStartTime ( ) { return context . getString ( Fields . start_time . getNameId ( ) ) ; }
private void setRadius ( float value ) { if ( mRoot != null ) { if ( value > 1 ) value = 1 ; else if ( value <= 0 . 1f ) value = 0 ; mRootCardView . setRadius ( mMaxRadius * value ) ; } }
private void chooseContact ( ) { Intent i = new Intent ( this , ContactsListActivity . class ) ; i . putExtra ( ContactsListActivity . MODE_SHARE , true ) ; startActivityForResult ( i , REQUEST_CONTACT_PICKER ) ; }
public void setPassword ( String password ) { this . password = password ; }
public void setAll ( Card card , double prob ) { this . card = card ; this . prob = prob ; }
public void onBindViewHolder ( CompactMovieHolder holder , int position ) { Movie movie = mMovies . get ( position ) ; holder . onBind ( movie ) ; }
public void setImages ( List < ImageResult > images ) { this . images = images ; }
public HashSet < ServerClient . HistoryTx > getHistoryTxs ( ) { return historyTransactions ; }
public void onTypeChanged ( ) { updateStickersTitle ( ) ; }
public static LogCode lookupByLogCode ( int lcode ) { LogCode lc = LOG_CODE_MAP . get ( lcode ) ; if ( lc == null ) return LOG_CODE_DNE ; else return lc ; }
public void restart ( ) { board . restart ( ) ; }
public boolean mamSupport ( ) { return hasFeature ( Xmlns . MAM ) || hasFeature ( Xmlns . MAM_LEGACY ) ; }
public void setAuthor ( String author ) { this . author = author ; }
public KeyframeAnimation < PointF > createAnimation ( ) { return new SplitDimensionPathKeyframeAnimation ( animatableXDimension . createAnimation ( ) , animatableYDimension . createAnimation ( ) ) ; }
public void attachVisual ( ) { target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaAmok ) ) ; }
public static int calculateMemorySize ( Context context , int percentage ) { ActivityManager activityManager = ( ActivityManager ) context . getSystemService ( ACTIVITY_SERVICE ) ; int memoryClass = activityManager . getMemoryClass ( ) ; return 1024 * 1024 * memoryClass / percentage ; }
public static boolean loginEquals ( User user , String login ) { if ( user == null ) { return false ; } return loginEquals ( user . getLogin ( ) , login ) ; }
private ViewHolder ( View v ) { super ( v ) ; mTextView = ( TextView ) v . findViewById ( R . id . programs_name ) ; v . setOnClickListener ( this ) ; }
public TabPagerAdapter ( FragmentManager fm , List < InspiracaoEntity > inspirations ) { super ( fm ) ; this . inspirations = new ArrayList < InspiracaoEntity > ( inspirations ) ; }
private void enableSearchMode ( ) { setIsInSearchModeAndSetNewAdapter ( true ) ; mRecycleView . swapAdapter ( getAdapter ( ) , true ) ; invalidateOptionsMenu ( ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . closeChats ) ; }
public void onBridgedAdapterItemRangeChanged ( @ NonNull RecyclerView . Adapter source , Object tag , int positionStart , int itemCount , Object payload ) { onHandleWrappedAdapterItemRangeChanged ( source , ( List < ComposedChildAdapterTag > ) tag , positionStart , itemCount , payload ) ; }
public void onEncryptSeedFailure ( String message ) { showError ( message ) ; new Handler ( ) . postDelayed ( ( ) -> checkWalletInit ( new File ( app . getFilesDir ( ) , Constants . ECLAIR_DATADIR ) ) , 1400 ) ; }
public void setPersonType ( PersonType personType ) { this . personType = personType ; }
public List < PhotoTable > getDbPhotoTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getPhotoTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
private void showToolbars ( ) { if ( mToolbarHidden ) { toggleTopToolbar ( true ) ; toggleBottomToolbar ( true ) ; } }
public void init ( ) { DrawContext . scene . add ( grid ) ; }
public void setEnabled ( boolean enabled ) { content . setEnabled ( enabled ) ; editButton . setEnabled ( enabled ) ; deleteButton . setEnabled ( enabled ) ; }
public void setActionBarTitle ( String title ) { mActionBarTitle = title ; if ( ! isDrawerOpen ( ) && getActionBar ( ) != null ) { getActionBar ( ) . setTitle ( mActionBarTitle ) ; } }
public RecyclerViewCursorAdapter ( Cursor cursor ) { setHasStableIds ( true ) ; swapCursor ( cursor ) ; }
public String getPkgName ( ) { return pkgName ; }
public AboutBuilder addFeedbackAction ( @ StringRes int email , @ StringRes String subject ) { return addFeedbackAction ( context . getString ( email ) , subject , null ) ; }
private void quitWithMessage ( String message ) { Toast . makeText ( getApplicationContext ( ) , message , Toast . LENGTH_LONG ) . show ( ) ; setResult ( RESULT_CANCELED ) ; this . finishAffinity ( ) ; }
public void onClick ( View v ) { if ( mClickListener != null ) mClickListener . onItemClick ( getAdapterPosition ( ) , mPosterCardView ) ; }
public void onClick ( DialogInterface dialog , int i ) { NavUtils . navigateUpFromSameTask ( StrengthExActivity . this ) ; }
public void onClick ( View arg0 ) { String tekst = udtaleTekst . getText ( ) . toString ( ) ; tts . speak ( tekst , TextToSpeech . QUEUE_ADD , null ) ; }
public boolean anyTargetHasNoTrustedKeys ( List < Jid > jids ) { for ( Jid jid : jids ) { if ( axolotlStore . getContactNumTrustedKeys ( jid . toBareJid ( ) . toPreppedString ( ) ) == 0 ) { return true ; } } return false ; }
public void run ( ) { if ( ! mFirstLayoutComplete || isLayoutRequested ( ) ) { return ; } if ( ! mIsAttached ) { requestLayout ( ) ; return ; } if ( mLayoutFrozen ) { mLayoutRequestEaten = true ; return ; } consumePendingUpdateOperations ( ) ; }
public View onCreateView ( LayoutInflater layoutInflater , ViewGroup container , Bundle savedInstanceState ) { View view = layoutInflater . inflate ( R . layout . fragment_watch_info , container , false ) ; ButterKnife . bind ( this , view ) ; return view ; }
public double gpsClimb ( ) { return gpsFilter . v ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; if ( getArguments ( ) != null ) { pageDescription = ( PageDescription ) getArguments ( ) . getSerializable ( LocationSummaryFragment . PAGE_DESCRIPTION ) ; } }
public void showLoading ( ) { mProgressLoading . setVisibility ( View . VISIBLE ) ; }
public void resume ( ) { if ( mState == State . ACTIVE && mMood != Mood . ANGRY ) { mMoodTimer = new Timer ( ) ; scheduleMoodChange ( ) ; } }
public ViewHolderShopItem ( View itemView ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; }
private int _rescheduleLrnCard ( Card card , JSONObject conf ) { return _rescheduleLrnCard ( card , conf , null ) ; }
public long getSizeChangeInKb ( ) { return ( mOldSize - mNewSize ) / 1024 ; }
public List < Object > getPointImages ( ) { return pointImages ; }
public TimeReceiver ( TimeIconData iconData ) { super ( iconData ) ; }
public String getString ( InputStream is ) throws IOException , ProblemReadingDatabaseFile { return new String ( getBytes ( is ) ) ; }
public String getContainerManufacturer ( ) { return containerManufacturer ; }
public void onClick ( DialogInterface dialogInterface , int i ) { dialogInterface . dismiss ( ) ; pasteToDelete = null ; }
public void stop ( ) { if ( isInitialized ) { if ( isEnabled ) { disableAudible ( ) ; } audibleThread = null ; isInitialized = false ; speech = null ; } }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setStyle ( DialogFragment . STYLE_NO_TITLE , R . style . BottomSheetDialog ) ; }
public String getLessonAN ( ) { if ( lessonAN == null ) lessonAN = GGApp . deleteNonAlphanumeric ( lesson ) ; return lessonAN ; }
public static void set ( String key , String value ) { prefs . edit ( ) . putString ( key , value ) . commit ( ) ; }
public void setTableHorizontalPivotZero ( float fraction ) { setRotationY ( 90 * fraction ) ; setPivotX ( 0 ) ; setPivotY ( getHeight ( ) / 2 ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . folder_child_tab , container , false ) ; }
private void loginFail ( ) { getView ( ) . showBriefMessage ( stringResUtils . getLoginFail ( ) ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , pt_agri . class ) ; startActivity ( inte ) ; }
public void onClick ( View view ) { mPresenter . onClickAddCity ( ) ; }
public boolean isDisposed ( ) { return mReceiver == null ; }
public com . coinomi . core . protos . Protos . UnspentOutput getUnspentOutput ( int index ) { return unspentOutput_ . get ( index ) ; }
public void setDensity ( int density ) { if ( density > 256 ) { this . density = 256 ; } else if ( density < 10 ) { this . density = 10 ; } this . density = density ; }
public void run ( ) { String res = Statusgo . CreateAccount ( password ) ; callback . invoke ( res ) ; }
public void onSuccess ( Void aVoid ) { showLog ( "handleCommentsPermission SUCCESSFULL" ) ; callback . onSuccess ( ) ; }
public static boolean isLocationNewEnough ( Location l ) { return isLocationNewEnough ( l , NEW_ENOUGH ) ; }
public int getColor ( ) { return ColorUtil . getInstance ( ) . hexToColor ( hex ) ; }
public boolean dispatchTouchEvent ( MotionEvent ev ) { return ! mIsInTransformation && super . dispatchTouchEvent ( ev ) ; }
public DeleteField ( Model model , JSONObject field ) { this . model = model ; this . field = field ; }
public void setSeverity ( Severity severity ) { this . severity = severity ; }
public void setParentId ( int parentId ) { this . parentId = parentId ; }
public static String getUrlFromUglyFacebookRedirect ( String url ) { if ( url . startsWith ( "http : url = url . substring ( "http : return urlDecode ( url ) ; } return null ; }
public static RepositoryEventListFragment newInstance ( Repository repository ) { RepositoryEventListFragment f = new RepositoryEventListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "repository" , repository ) ; f . setArguments ( args ) ; return f ; }
public void run ( ) { readAloudButton . setColorFilter ( getResources ( ) . getColor ( R . color . colorPrimary ) , PorterDuff . Mode . SRC_IN ) ; readAloudQuestionLabel . setTextColor ( getResources ( ) . getColor ( R . color . colorPrimary ) ) ; }
public ValueType setComplexValue ( Complex c ) { real = c . getReal ( ) ; imaginary = c . getImaginary ( ) ; valueType = ( imaginary != 0 . 0 ) ? ValueType . COMPLEX : ValueType . REAL ; return valueType ; }
public void onReceive ( AirplaneModeIconData icon , Intent intent ) { if ( intent . getBooleanExtra ( TelephonyManager . EXTRA_STATE , false ) ) icon . onDrawableUpdate ( 0 ) ; else icon . onDrawableUpdate ( - 1 ) ; }
public GeneralSettingsPage assertOnPage ( ) { assertText ( R . string . project_settings ) ; return this ; }
private boolean isValidPosition ( int position ) { return ( position >= 0 && position < getCount ( ) ) ; }
public void setAstableMode ( ) { timerModeImageView . setBackgroundResource ( R . drawable . timer_555_config ) ; showR2 ( ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( ProfileActivity . this , UploadActivity . class ) ; intent . putExtra ( "mode" , "upload" ) ; startActivity ( intent ) ; }
public void setMap ( GoogleMap map ) { mMap = map ; }
public void setLostnfoundPoster ( FeedPoster lostnfoundPoster ) { this . lostnfoundPoster = lostnfoundPoster ; }
public void onFailure ( Call < JsonObject > call , Throwable error ) { getBus ( ) . post ( new GhostVersionLoadedEvent ( UNKNOWN_VERSION ) ) ; }
public void onViewRecycled ( RecyclerView . ViewHolder holder ) { if ( isInsertionEnabled ( ) ) { if ( ! ( holder instanceof OddPosItemViewHolder ) ) { super . onViewRecycled ( holder ) ; } } else { super . onViewRecycled ( holder ) ; } }
public Integer getR ( ) { return r ; }
public void shouldNotPassValidation_notValidCountry ( ) { patient . getPerson ( ) . getAddress ( ) . setCountry ( "United States Of Poland" ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public int getLayoutRes ( ) { return R . layout . material_secondary_drawer_item_switch ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . list_fragment_layout , container , false ) ; }
public void onTick ( long millisUntilFinished ) { int secondsRemaining = ( int ) ( ( millisUntilFinished - 1L ) / 1000L ) + 1 ; handleTick ( secondsRemaining ) ; }
public static HashMap < String , String > getColumnDefinition ( String tableName ) { return tables . get ( tableName ) ; }
public void onClick ( View v ) { getMainActivity ( ) . onStartValidatorDetailV1 ( validator . operator_address ) ; }
private void finish ( Result result ) { if ( isCancelled ( ) ) { onCancelled ( result ) ; } else { onPostExecute ( result ) ; } mStatus = Status . FINISHED ; }
public void getDataOnOtherThread ( ) throws ErrorException { campusList = CacheCampus . getAllowInternet ( app . cacheSQLiteHelper , app ) ; if ( campusList == null || campusList . size ( ) == 0 ) throw new ErrorException ( ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { JobList . this . insertNewJobInternal ( JobList . this . mJobActivityClass ) ; }
public boolean supportsNoiseReduction ( ) { return ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP && preview . usingCamera2API ( ) && large_heap_memory >= 512 && preview . supportsBurst ( ) && preview . supportsExposureTime ( ) ) ; }
public void processIncomingMessage ( MessageCard message ) { contactsRepo . update ( message . getContactKey ( ) , message ) ; }
private void kill ( ) { runningThread = null ; db = null ; if ( view != null && view instanceof WebView ) { ( ( WebView ) view ) . destroy ( ) ; view = null ; } }
public Loader < Pair < Cursor , Integer >> onCreateLoader ( int id , Bundle args ) { return new PagingMediaLoader ( this , conversationRecipient , initialMediaUri ) ; }
public void setPatchSize ( double patchSize ) { this . patchSize = patchSize ; }
private void addVideoToUI ( String id ) { Intent intent = new Intent ( ADD_VIDEO_UI ) ; intent . putExtra ( "id" , id ) ; LocalBroadcastManager . getInstance ( this ) . sendBroadcast ( intent ) ; }
public long getEndTimeUs ( ) { return getStartTimeUs ( ) + durationUs ; }
public BookmarkCard ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initialize ( context , attrs , defStyleAttr ) ; }
public int getChildGoal ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException { if ( this . isDemoMode ) { return 10000 ; } return getPersonGoal ( Person . ROLE_CHILD , runningChallenge ) ; }
public int getStyleAt ( int externalRow , int column ) { return mTerminal . getScreen ( ) . getStyleAt ( externalRow , column ) ; }
public void onProviderDisabled ( String provider ) { tracer . info ( "Provider disabled : " + provider ) ; loggingService . restartGpsManagers ( ) ; }
public void testMinimalEncoder10 ( ) throws Exception { verifyMinimalEncoding ( "123" , "NUMERIC ( 123 ) , TERMINATOR ( ) " , null , false ) ; }
public void setTitle ( String title ) { TextView titleTextView = ( TextView ) view . findViewById ( R . id . item_person_list_title ) ; titleTextView . setText ( title ) ; }
public static Intent getStartIntent ( Context context , String title ) { Intent intent = new Intent ( context , NotesListActivity . class ) ; intent . putExtra ( EXTRA_NOTE_TITLE , title ) ; return intent ; }
private void toggleHtmlModeOnMenu ( ) { mHtmlModeMenuStateOn = ! mHtmlModeMenuStateOn ; trackPostSessionEditorModeSwitch ( ) ; invalidateOptionsMenu ( ) ; showToggleHtmlModeSnackbar ( ) ; }
public void showOwnerWall ( int accountId , int ownerId ) { PlaceFactory . getOwnerWallPlace ( accountId , ownerId , null ) . tryOpenWith ( getActivity ( ) ) ; }
public UploadObject setStatus ( int status ) { this . status = status ; return this ; }
public boolean isOK ( ) { return status . equals ( RequestResult . OK ) ; }
public boolean matches ( Float actualValue ) { return Math . abs ( ( ( double ) actualValue ) - expected ) <= precision ; }
public void cut ( FileHolder tbc ) { ArrayList < FileHolder > tbcl = new ArrayList < FileHolder > ( ) ; tbcl . add ( tbc ) ; cut ( tbcl ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { boolean raining = dataInputStream . readBoolean ( ) ; float rainRate = dataInputStream . readFloat ( ) ; rainStatus = new RainStatus ( raining , rainRate ) ; }
public Builder setSubtype ( @ NonNull final RichInputMethodSubtype subtype ) { mParams . mSubtype = subtype ; mParams . mKeyboardLayoutSetName = KEYBOARD_LAYOUT_SET_RESOURCE_PREFIX + subtype . getKeyboardLayoutSetName ( ) ; return this ; }
public Component createComponent ( Context context , BigInteger value , boolean editable ) { return new OpaqueComponent ( context , extractValue ( value ) , hex , editable ) ; }
public void onClick ( View view ) { BottomSheetDialog bottomSheetDialog = new BottomSheetDialog ( ) ; bottomSheetDialog . show ( getActivity ( ) . getSupportFragmentManager ( ) , bottomSheetDialog . getTag ( ) ) ; }
private void createLocationRequest ( ) { mLocationRequest = new LocationRequest ( ) ; mLocationRequest . setInterval ( interval ) ; mLocationRequest . setFastestInterval ( fastestInterval ) ; mLocationRequest . setPriority ( LocationRequest . PRIORITY_HIGH_ACCURACY ) ; }
private File getFullBookContentDir ( ) { return new File ( thisBookDir , bookContentDir . getPath ( ) ) ; }
public void onAnimationCancel ( Animator animation ) { if ( runningAnimation2 != null && runningAnimation2 . equals ( animation ) ) { runningAnimation2 = null ; } }
private void doSync ( ) throws IOException { doUpload ( ) ; getFormsDefinition ( ) ; }
public void onFailure ( Call < Venter . Complaint > call , Throwable t ) { Log . i ( TAG , "failure in up vote : " + t . toString ( ) ) ; }
public void stop ( ) { pausedByTransientLossOfFocus = false ; savePositionInTrack ( ) ; player . stop ( ) ; notifyChange ( PLAY_STATE_CHANGED ) ; getAudioManager ( ) . abandonAudioFocus ( audioFocusListener ) ; }
public boolean onPrepareOptionsMenu ( Menu menu ) { MenuInflater inflater = this . getSupportMenuInflater ( ) ; menu . clear ( ) ; inflater . inflate ( R . menu . group_create , menu ) ; super . onPrepareOptionsMenu ( menu ) ; return true ; }
public GithubAPIClient ( Activity activity , Consumer < String > callback ) { this . callback = callback ; this . progressBar = ( ProgressBar ) activity . findViewById ( R . id . progressbar ) ; }
public void BookTicket ( View v ) { getUserDetails ( ) ; }
public static boolean hasMultipleTypes ( Address address ) { return hasMultipleTypes ( address . toString ( ) ) ; }
public Text ( String text , Typeface fontFamily , float fontSize , Paint textPaint ) { this . text = text ; this . fontSize = fontSize ; this . textPaint = textPaint ; }
public void setSubtitle ( String subtitle ) { toolbarSubtitle . setText ( subtitle ) ; if ( subtitle != null ) { toolbarSubtitle . setVisibility ( View . VISIBLE ) ; } else { toolbarSubtitle . setVisibility ( View . INVISIBLE ) ; } }
public MouseActor ( int size_x , int size_y ) { this . screen_size = new Point ( size_x , size_y ) ; this . current = new Point ( 5 , 5 ) ; }
public String getSelectedText ( StringBuilder colors , int selX1 , int selY1 , int selX2 , int selY2 ) { return internalGetTranscriptText ( colors , selX1 , selY1 , selX2 , selY2 ) ; }
public void deleteAll ( ) { Completable . fromAction ( appItemDao : : deleteAll ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( ) ; }
public FavoriteAddorRemoveAsyncTask ( Context context , boolean isAdd , Uri uri ) { mContext = context . getApplicationContext ( ) ; mIsAdd = isAdd ; mUri = uri ; }
public Category getCategory ( ) { return product . getCategory ( ) ; }
public void run ( ) { listener . onSendSuccess ( ) ; }
public void setBlockNumber ( BigInteger blockNumber ) { this . blockNumber = blockNumber ; }
public final < A extends Quantity > AlternateUnit < A > alternate ( String symbol ) { return new AlternateUnit < A > ( symbol , this ) ; }
public String getPayout ( ) { return payout ; }
public AboutBuilder addWhatsappLink ( int name , int phone ) { return addWhatsappLink ( context . getString ( name ) , context . getString ( phone ) ) ; }
public List < org . bitcoinj . wallet . Protos . Key > serializeToProtobuf ( ) { throw new RuntimeException ( "Not implemented . Use HDKeyChain . toProtobuf ( ) instead . " ) ; }
public int getSpanCount ( ) { return super . getSpanCount ( ) + 1 ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . privacyRulesUpdated ) ; }
public void selectAllIsNotVisibleOnceCalled ( ) { CardBrowser browser = getBrowserWithMultipleNotes ( ) ; selectMenuItem ( browser , R . id . action_select_all ) ; advanceRobolectricLooper ( ) ; assertThat ( browser . isShowingSelectAll ( ) , is ( false ) ) ; }
public void onClick ( View v ) { checkIfAnsweredAndAnswer ( "yes" ) ; }
public void onClick ( DialogInterface dialog , int id ) { mListener . saveProfile ( profNameEdit . getText ( ) . toString ( ) , gpsFrequency + minScan , checkBox . isChecked ( ) ) ; }
private void requestExternalStoragePermission ( String newLocation ) { Activity activity = getActivity ( ) ; if ( activity instanceof AdvancedQuranPreferenceActivity ) { ( ( AdvancedQuranPreferenceActivity ) activity ) . requestWriteExternalSdcardPermission ( newLocation ) ; } }
public void onClick ( View v ) { cardClick ( card3 , 3 , gamColor ) ; }
public void onOpen ( SQLiteDatabase db ) { super . onOpen ( db ) ; reset ( ) ; }
private void decideEditInsert ( ) { if ( position == - 1 && ! inserted ) insertNote ( ) ; else if ( ! TextUtils . equals ( current , editText . getText ( ) ) && ! edited ) editNote ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { binding = FragmentSearchBinding . inflate ( inflater , container , false ) ; binding . setViewModel ( viewModel ) ; initRecyclerView ( ) ; loadData ( ) ; return binding . getRoot ( ) ; }
public void putDataToCache ( String key , Object value ) { memoryCache . put ( key , value ) ; }
public void onSuccess ( Object data ) { Log . d ( "SWELL" , "Set current time : " + data . toString ( ) ) ; }
public static boolean isConnected ( Context context ) { NetworkInfo networkInfo = ( ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ) . getActiveNetworkInfo ( ) ; return networkInfo . isConnected ( ) ; }
public synchronized String getFileName ( ) { return this . fileName ; }
public String getCountry ( ) { return PreferencesManager . getCountry ( ) ; }
public void addNewMeal ( @ NonNull DateTime atDay ) { Intent intent = new Intent ( activity , AddMealActivity . class ) ; intent . putExtra ( AddMealFragmentModule . EXTRA_NEW_MEAL_DATE , atDay ) ; activity . startActivity ( intent ) ; }
public AppSettingsBase setInt ( String key , int value ) { setInt ( key , value , _prefApp ) ; return this ; }
public void invalidateDrawable ( Drawable who ) { Callback callback = getCallback ( ) ; if ( callback == null ) { return ; } callback . invalidateDrawable ( this ) ; }
public String get ( String key ) { return configuration . getProperty ( key ) ; }
public String getCiudad ( ) { return mCiudad ; }
public static File getResourceFile ( String resourcePath ) { return new File ( CardDaoTest . class . getClassLoader ( ) . getResource ( resourcePath ) . getFile ( ) ) ; }
public boolean isDelivered ( ) { return ( deliveryStatus >= SmsDatabase . Status . STATUS_COMPLETE && deliveryStatus < SmsDatabase . Status . STATUS_PENDING ) || receiptCount > 0 ; }
private void updateCurrentSong ( ) { impl . updateCurrentSong ( MusicPlayerRemote . getCurrentSong ( ) ) ; recyclerView . getAdapter ( ) . notifyDataSetChanged ( ) ; }
public TypeItem ( int type , Object value ) { this . type = type ; this . value = value ; }
public int getUsec ( ) { return usec ; }
private void setAnimatorParams ( SupportAnimator anim ) { anim . setInterpolator ( new AccelerateDecelerateInterpolator ( ) ) ; anim . setDuration ( 250 ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; setFooterText ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; LocalBroadcastManager . getInstance ( getActivity ( ) ) . registerReceiver ( mRefreshReceiver , new IntentFilter ( IntentConstants . ACTION_REFRESH_LIST ) ) ; }
public void update ( TodoList updatedItem ) { updateCount ++ ; uuids . add ( updatedItem . getUuid ( ) ) ; }
public Rect getBox ( ) { return box ; }
private boolean doesForumExistInJson ( MoodleForum forum ) { return forums . contains ( forum ) ; }
public synchronized < T > T min ( Class < ? > modelClass , String columnName , Class < T > columnType ) { return min ( BaseUtility . changeCase ( modelClass . getSimpleName ( ) ) , columnName , columnType ) ; }
public void clearSuggestions ( ) { suggestions . clear ( ) ; notifyDataSetChanged ( ) ; }
public void testDistrictWriter ( ) { mWriter . write ( mDistrict , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_DISTRICTS , null , mDistrict . getParams ( ) ) ; }
public void onClick ( View v ) { mBookmarkPresenter . cancelDeletion ( ) ; mBookmarkPresenter . requestData ( true ) ; }
public void setName ( String name ) { this . name = name ; }
public void onClick ( View v ) { CardActivity . startActivity ( MyWalletActivity . this , CardActivity . Mode . VIEW , getHelper ( ) . getCardDao ( ) . queryForId ( id ) , ( ( FrameLayout ) v ) . getChildAt ( 0 ) ) ; }
public long insertNewShader ( Context context ) { return insertShaderFromResource ( context , null , R . raw . new_shader , R . drawable . thumbnail_new_shader ) ; }
public void handleInboxLongClick ( final AppCompatActivity activity ) { final RedditChangeDataManagerVolatile changeDataManager = RedditChangeDataManagerVolatile . getInstance ( RedditAccountManager . getInstance ( activity ) . getDefaultAccount ( ) ) ; RedditAPICommentAction . showActionMenu ( activity , null , this , null , changeDataManager , false ) ; }
public String getSyncIdentifier ( ) { return null ; }
public Item random ( ) { super . random ( ) ; if ( Random . Int ( 10 + level ) == 0 ) { enchant ( ) ; } return this ; }
private static String defaultValueIfNull ( String input ) { if ( input == null || input . equals ( "" ) ) { input = "No data available" ; } return input ; }
public Observable < LoadedSource > getLoadingObservable ( ) { return loadedSourceObservable ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View v = inflater . inflate ( R . layout . intro_slide , container , false ) ; ButterKnife . inject ( this , v ) ; return v ; }
public @ Nullable Card undo ( @ NonNull Collection col ) { Timber . i ( "Undo : Mark notes" ) ; CardUtils . markAll ( originalMarked , true ) ; CardUtils . markAll ( originalUnmarked , false ) ; return null ; }
public void sendMessagePacket ( final MessagePacket packet ) { this . sendPacket ( packet , null ) ; }
public int compareTo ( Telegram another ) { if ( this . timestamp > another . timestamp ) { return 1 ; } else if ( this . timestamp == another . timestamp ) { return 0 ; } else { return - 1 ; } }
public View getScreenOnView ( ) { return findViewById ( R . id . command_log_titleview ) ; }
public void onBuddyInfoUpdated ( final Core core , final Friend friend ) { Lg . w ( "onBuddyInfoUpdated ; " , new FriendLogger ( friend ) ) ; }
public XYMarkerView ( Context context , IAxisValueFormatter xAxisValueFormatter ) { super ( context , R . layout . custom_marker_view_layout ) ; this . xAxisValueFormatter = xAxisValueFormatter ; tvContent = findViewById ( R . id . tvContent ) ; format = new DecimalFormat ( "### . 0" ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; beforeView ( ) ; setContentView ( getLayoutId ( ) ) ; ButterKnife . bind ( this ) ; initToolbar ( ) ; init ( savedInstanceState ) ; }
public void swapResults ( ArrayList < Result > results ) { this . dataSet = results ; notifyDataSetChanged ( ) ; }
public BigDecimal getBase ( ) { return base ; }
public void onPageSelected ( int position ) { if ( mDragging ) { toFirstDay ( position ) ; notifyDayChange ( mAdapter . getMonth ( position ) ) ; } mDragging = false ; if ( getVisibility ( ) != VISIBLE ) { onPageScrollStateChanged ( SCROLL_STATE_IDLE ) ; } }
public TrackLoader ( DataTrackLoader < List < Track >> dataLoader , TrackRoomDatabase trackRoomDatabase ) { mDataLoader = dataLoader ; mTrackRoomDatabase = trackRoomDatabase ; }
public Observable < Long > savePatient ( Patient patient ) { PatientEntity entity = AppDatabaseHelper . patientToPatientEntity ( patient ) ; return createObservableIO ( ( ) -> patientRoomDAO . addPatient ( entity ) ) ; }
private String getDeviceName ( ) { SharedPreferences sharedPref = getSharedPreferences ( DISCOVERY_PREFS_NAME , Context . MODE_PRIVATE ) ; return sharedPref . getString ( DISCOVERY_PREFS_DEVICE_NAME , Build . MODEL ) ; }
public byte [ ] decrypt ( final AesCbcWithIntegrity . SecretKeys key ) throws GeneralSecurityException { return AesCbcWithIntegrity . decrypt ( civ , key ) ; }
public String getDropzoneId ( ) { return dropzone_id ; }
public URL getRedirectionUrl ( ) { return this . redirectionUrl ; }
public int compareTo ( Object other ) { if ( other == null ) return 1 ; return toString ( ) . compareTo ( other . toString ( ) ) ; }
public static void immerse ( boolean value ) { Preferences . INSTANCE . put ( Preferences . KEY_IMMERSIVE , value ) ; GameLoop . runOnMainThread ( ( ) -> { RemixedDungeon . updateImmersiveMode ( ) ; GameLoop . setNeedSceneRestart ( ) ; } ) ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { LauncherItem item = mItems . get ( position ) ; holder . mButton . setText ( item . mTextRes ) ; }
static public void setImageSmall ( Context context , UserLTE user , ImageView imageView ) { RequestCreator picasso = getRequestCreator ( context , user , "small" ) ; if ( picasso == null ) return ; picasso . into ( imageView ) ; }
public Socket createSocket ( Socket s , String host , int port , boolean autoClose ) throws IOException { return patch ( delegate . createSocket ( s , host , port , autoClose ) ) ; }
public Config setSuccessIcon ( @ Nullable Drawable successIcon ) { this . successIcon = successIcon ; return this ; }
public ActivityModule ( BaseActivity activity ) { this . activity = activity ; }
public int compare ( ContactSort lhs , ContactSort rhs ) { return lhs . getPriest ( ) . compareTo ( rhs . getPriest ( ) ) ; }
public int getExpandedGroupsCount ( ) { return mAdapter . getExpandedGroupsCount ( ) ; }
public ItemManager . Item [ ] getKidItems ( ) { return new ItemManager . Item [ 0 ] ; }
public void onBindViewHolder ( NotificationVH notificationVH , int i ) { Notification notification = notifications . get ( i ) ; notificationVH . bindViews ( notification , activity ) ; }
public int responseSeeOther ( String seeOther ) { try { plant . online ( ) . publishedWithId ( getPlantIdFromLocationUrl ( seeOther ) ) ; } catch ( ErrorWithExplanation errorWithExplanation ) { return errorWithExplanation . getExplanationResourceId ( ) ; } return TASK_SUCCEEDED ; }
private Single < List < Station >> searchStationsByCoordinates ( ) { MapState mapState = locationRepository . getMapState ( ) ; return searchRepository . searchStationsByCoordinates ( mapState ) ; }
public void setPhotoDesc ( @ Nullable final String photoDesc ) { this . photoDesc = photoDesc ; }
public boolean isPendingRemoval ( int position ) { Task item ; try { item = items . get ( position ) ; } catch ( ArrayIndexOutOfBoundsException e ) { item = null ; } return itemsPendingRemoval . contains ( item ) ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { switch ( key ) { case ApplicationPreferences . PREF_EVENT_ENTRY_LAYOUT : showEventEntryLayout ( ) ; break ; case ApplicationPreferences . PREF_WIDGET_HEADER_LAYOUT : showWidgetHeaderLayout ( ) ; break ; default : break ; } }
public void notifyUpdate ( Object obj ) { for ( DAO dao : this . daoList ) { dao . update ( obj ) ; } }
public void onSatelliteStatusChanged ( GnssStatus status ) { super . onSatelliteStatusChanged ( status ) ; updateGNSSStatus ( status ) ; }
public void onPostCreatedOnSteem ( ) { toast ( "Published" ) ; showPublishingProgressDialog ( false , "" ) ; postCreated ( ) ; }
public SpinnerConditionsAdapter ( @ NonNull Context context , @ NonNull List < MultiProfile . ConnectivityCondition > objects ) { super ( context , android . R . layout . simple_spinner_dropdown_item , objects ) ; this . context = context ; }
public Observable < Object > toObservable ( ) { return _bus ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `answer` ADD COLUMN `hide` INTEGER NOT NULL DEFAULT 0" ) ; }
private boolean isShowing ( ) { return mDialog != null && mDialog . isShowing ( ) ; }
public void run ( ) { try { if ( currentDir == null ) { listRoots ( ) ; } else { listFiles ( currentDir ) ; } } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void setElimPoints ( int elimPoints ) { this . elimPoints = elimPoints ; }
public void clearButtons ( ) throws IOException { mButtonList . clear ( ) ; mButtonXML = null ; updateButtons ( ) ; }
public boolean isEmpty ( ) { return ( getItemCount ( ) == 0 ) ; }
public Cursor getVerses ( int sura , int minAyah , int maxAyah ) { return getVerses ( sura , minAyah , maxAyah , VERSE_TABLE ) ; }
public void executeOnCachedExecutor ( Runnable runnable ) { mCachedExecutor . execute ( runnable ) ; }
public static int getTileTextColor ( ) { return spriteText [ Settings . colorMode ] ; }
public void onQrCodeRead ( String ipAddress ) { this . ipAddress = ipAddress ; getView ( ) . stopQrCodeScanner ( ) ; getView ( ) . showQrCodeScannerResult ( ipAddress ) ; }
public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled ( ) { when ( formEntryPrompt . isReadOnly ( ) ) . thenReturn ( true ) ; assertThat ( getWidget ( ) . launchIntentButton . getVisibility ( ) , is ( View . GONE ) ) ; }
public Fragment build ( double lat , double lon ) { return NewHerpEntryFormFragment_ . builder ( ) . lat ( lat ) . lon ( lon ) . build ( ) ; }
public void onDismiss ( DialogInterface dialog ) { EventBus . getDefault ( ) . post ( new EventBusController . UIControlEvent ( EventBusController . UIControlEvent . INTRO_TO_ACCOUNT ) ) ; }
public void setFgValue ( String fgValue ) { Log . d ( MainActivity . TAG , "Current FG value : " + fgValue ) ; this . fgValue = ( fgValue . isEmpty ( ) ) ? DEFAULT_FG : fgValue ; }
public void run ( ) { applicationInterface . updateThumbnail ( thumbnail_f ) ; }
public View getView ( ) { return mOverlayContainer ; }
public SwipeResultAction onSwipeItem ( MyViewHolder holder , int position , @ SwipeableItemResults int result ) { if ( result == Swipeable . RESULT_CANCELED ) { return new SwipeResultActionDefault ( ) ; } else { return new MySwipeResultActionRemoveItem ( this , position ) ; } }
public static Spanned html_to_spanned ( String msg , boolean linkify , final Server server ) { return html_to_spanned ( msg , linkify , server , null ) ; }
public double getSatNum ( ) throws OrekitException { return entity . getSatelliteNumber ( ) ; }
public static String getSuraNameString ( Context context , int page ) { return context . getString ( R . string . quran_sura_title , getSuraNameFromPage ( context , page ) ) ; }
public boolean onSearchRequested ( ) { Intent search_intent = new Intent ( this , NavitAddressSearchActivity . class ) ; this . startActivityForResult ( search_intent , NavitAddressSearch_id ) ; return true ; }
public User getItem ( int position ) { return mUsers . get ( position ) ; }
public static void setReady ( Boolean isReady ) { flagReady = isReady ; }
public void onIngredientTemplateCreated ( IngredientTemplate template ) { getDelegate ( ) . onIngredientTemplateCreated ( template ) ; }
public FullTransaction ( ) { version = 0 ; lockTime = 0xffffffff ; count = 0 ; }
public String getSize ( ) { return size ; }
public void onClick ( View v ) { MediaControllerCompat . TransportControls controls = MediaControllerCompat . getMediaController ( FullScreenPlayerActivity . this ) . getTransportControls ( ) ; controls . seekTo ( mLastPlaybackState . getPosition ( ) + 30000 ) ; }
public void onRebind ( Intent intent ) { super . onRebind ( intent ) ; connected = true ; }
public void run ( ) { adapter . undoDelete ( ) ; findViewById ( R . id . undoDelete ) . setVisibility ( View . GONE ) ; mDelayHandler . postDelayed ( mConfirmDeleteRunnable , 3000 ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . github . veritas1 . mycolorpicker . test" , appContext . getPackageName ( ) ) ; }
public void onAnimationEnd ( Object animation ) { imageMoveAnimation = null ; containerView . invalidate ( ) ; }
public void testGetLocalDays ( ) { assertThat ( planetaryCalendar . getLocalDays ( planetaryMilliseconds ) , closeTo ( days , 1e - 9 ) ) ; }
public void onClick ( View v ) { String valorSpinner = spinner . getSelectedItem ( ) . toString ( ) ; intent . putExtra ( "Marcadores" , valorSpinner ) ; startActivity ( intent ) ; }
public void onAnimationCancel ( Object animation ) { if ( replyButtonAnimation != null && replyButtonAnimation . equals ( animation ) ) { replyButtonAnimation = null ; } }
public final void saveTrip ( Trip parTrip ) { mSavingModule . addOrUpdateTrip ( parTrip ) ; mTripListFragment . populateList ( ) ; if ( mTripDetailFragment != null ) { mTripDetailFragment . displayTrip ( parTrip ) ; } }
public TaskType taskType ( ) { return TaskTypes . trackUpload ; }
public void onCreateView ( View view ) { mAd = ( AdBanner ) view ; setFullSpan ( true ) ; super . onCreateView ( view ) ; }
public int compare ( CardWrapper c1 , CardWrapper c2 ) { return c1 . getCard ( ) . getAnswer ( ) . compareTo ( c2 . getCard ( ) . getAnswer ( ) ) ; }
public LastEntry ( InstanceSettings settings , LastEntryType type , DateTime date ) { super ( settings , LIST_FOOTER , date , null ) ; this . type = type ; }
public void onClick ( View v ) { final Uri packageUri = Uri . parse ( "package : io . nxt3 . ioclassic . phone" ) ; final Intent uninstallIntent = new Intent ( Intent . ACTION_UNINSTALL_PACKAGE , packageUri ) ; startActivity ( uninstallIntent ) ; }
private boolean isTitleFocused ( ) { return title . isFocused ( ) ; }
public Fragment getItem ( int position ) { return PlaceholderFragment . newInstance ( swipeStrings . get ( position ) ) ; }
public int colorPrimary ( ) { return colorPrimary ( Prefs . getInstance ( mContext ) . getAppThemeColor ( ) ) ; }
public List < AbstractTransaction > loadInBackground ( ) { final List < AbstractTransaction > filteredAbstractTransactions = Lists . newArrayList ( walletPocket . getTransactions ( ) . values ( ) ) ; Collections . sort ( filteredAbstractTransactions , TRANSACTION_COMPARATOR ) ; return filteredAbstractTransactions ; }
public void setProxy ( SharedConfig . ProxyInfo proxyInfo ) { textView . setText ( proxyInfo . address + " : " + proxyInfo . port ) ; currentInfo = proxyInfo ; updateStatus ( ) ; }
public Scheduler providesScheduler ( ) { return countingScheduler ; }
private boolean sessionExpired ( Exception e ) { if ( e . getMessage ( ) != null && e . getMessage ( ) . startsWith ( TOKEN_EXPIRED ) ) { return true ; } else { return false ; } }
public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull ( ) { assertThat ( createWidget ( promptWithReadOnlyAndQuestion ( rangeQuestion ) ) . getAnswer ( ) , nullValue ( ) ) ; }
public void setModel ( String model ) { this . model = model ; }
private String getQRCodeFilepath ( ) { return new StoragePathProvider ( ) . getDirPath ( StorageSubdirectory . SETTINGS ) + File . separator + "collect - settings . png" ; }
private void load ( boolean force , Protocol cached ) { thread . run ( ( ) -> load ( force , cached , 0 ) ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnSubmitResultListener ) { mListener = ( OnSubmitResultListener ) context ; } else { throw new IllegalArgumentException ( context . toString ( ) + " must implement OnSubmitResultListener" ) ; } }
public void run ( ) { mListener . onCredentialsValidated ( error ) ; }
public void showLoadRealmErrorMessage ( ) { Snackbar . make ( mProgressBar . getRootView ( ) , R . string . medical_attention_load_realm_error , Snackbar . LENGTH_LONG ) . setAction ( R . string . retry , v -> mMedicalAttentionChartPresenter . loadWeekMedicalAttentions ( ) ) . show ( ) ; }
public synchronized void closeBluetoothGatt ( ) { if ( bluetoothGatt != null ) { bluetoothGatt . close ( ) ; } }
public void onTimeSet ( TimePicker view , int hourOfDay , int minute ) { choosedDate . set ( Calendar . HOUR_OF_DAY , hourOfDay ) ; choosedDate . set ( Calendar . MINUTE , minute ) ; updateDate ( ) ; }
private void initAutoCallPrefs ( ) { binding . autoCallPrefs . setOnClickListener ( mAutoCallClick ) ; binding . autoCallPrefs . setChecked ( mPrefs . isAutoCallEnabled ( ) ) ; }
public void test ( ) { assertEquals ( expectedResult , licensesTask . isGoogleServices ( inputGroup ) ) ; }
public List < Meaning > getMeanings ( ) { return this . meanings ; }
public void onTextChanged ( TerminalSession changedSession ) { }
public final boolean containsKey ( Object key ) { return inRange ( key ) && m . containsKey ( key ) ; }
private ScoreTabViewHolder createEmptyView ( AppCompatActivity activity ) { FrameLayout frame = new FrameLayout ( activity ) ; frame . setLayoutParams ( new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , ViewGroup . LayoutParams . MATCH_PARENT ) ) ; return new ScoreTabViewHolder ( activity , frame ) ; }
public int getMaxLines ( ) { return mMaxLines ; }
public void setImage ( String path , String filter , Drawable thumb ) { setImage ( null , path , filter , thumb , null , null , null , 0 ) ; }
public long moveTo ( long position ) throws IOException { fp = position ; return fp ; }
public T removeItemAt ( int index ) { throwIfMerging ( ) ; T item = get ( index ) ; removeItemAtIndex ( index , true ) ; return item ; }
public synchronized @ NonNull Drawable getFallbackAvatarDrawable ( Context context ) { return getFallbackContactPhoto ( ) . asDrawable ( context , getFallbackAvatarColor ( context ) ) ; }
public Playlist ( final int id , final String name ) { this . id = id ; this . name = name ; }
public boolean isInitialized ( ) throws RemoteException { return mService . get ( ) . isInitialized ( ) ; }
public void populateWithOrderedConversations ( List < Conversation > list ) { populateWithOrderedConversations ( list , true ) ; }
public static boolean getContactsListVisited ( Context context ) { return getBooleanOnce ( context , "pref_contacts_visited" ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = createView ( parent , viewType ) ; return createViewHolder ( view ) ; }
private void setDefaultDictionaryType ( ) { dictionaryType = DictionaryType . ENG_TO_MM ; toggleBtnDictionaryType . setImageResource ( R . drawable . ic_myanmar ) ; dictionaryTypeWatcher = true ; }
public void setAfter ( Uri after ) { mAfter = after ; }
public static void v ( String tag , String message ) { if ( D ) Log . v ( TAG + tag , message ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . valueOf ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "RepostAlias" , 1 ) ; else toggleAliasSetting ( "RepostAlias" , 2 ) ; return true ; }
public String prompt ( ) { return Game . getVar ( R . string . RogueArmor_Prompt ) ; }
public OtherInfo ( String title ) { this . title = title ; this . iconId = iconId ; }
private synchronized void reload ( ) { String newFilter = mCurrentFilter ; mCurrentFilter = null ; setFilter ( newFilter ) ; }
public void onResume ( ) { super . onResume ( ) ; initData ( ) ; }
public final void setScaleAndCenter ( float scale , PointF sCenter ) { this . anim = null ; this . pendingScale = scale ; this . sPendingCenter = sCenter ; this . sRequestedCenter = sCenter ; invalidate ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . com . vehicleinfo_usd . ocr" , appContext . getPackageName ( ) ) ; }
public boolean onQueryTextChange ( String query ) { mPresenter . setQuery ( query ) ; mPresenter . updateLocalPatientsList ( ) ; return true ; }
private static Uri getStickerListUri ( String identifier ) { return new Uri . Builder ( ) . scheme ( StickerContentProvider . CONTENT_SCHEME ) . authority ( BuildConfig . CONTENT_PROVIDER_AUTHORITY ) . appendPath ( StickerContentProvider . STICKERS ) . appendPath ( identifier ) . build ( ) ; }
public void load ( ) { new LoadLatestRunsTask ( mState ) . execute ( ) ; }
public MyEntityListActivity ( Class < T > clazz , int emptyResId ) { this ( clazz , R . layout . project_list , emptyResId ) ; }
public int backgroundColor ( ) { return R . color . op_blue ; }
public ContactViewHolder onCreateViewHolder ( ViewGroup viewGroup , int viewType ) { View itemView = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . contact_list_view , viewGroup , false ) ; return new ContactViewHolder ( itemView ) ; }
public static Uri getAppStoreUri ( ) { if ( isAmazonBuild ( ) ) { return Uri . parse ( "http : } return Uri . parse ( "https : }
public LocalDateTime read ( final JsonReader in ) throws IOException { return ISO_FORMAT . parseDateTime ( in . nextString ( ) ) . toLocalDateTime ( ) ; }
public void run ( ) { putUsers ( usersArr , fromCache ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , info , 0 , byChannelUsers ) ; }
public void onAnimationCancel ( ValueAnimatorCompat animation ) { setFraction ( 1f ) ; }
private void onActionCreateChannel ( ) { if ( ! ActivityBilling . isPro ( context ) ) { Helper . startActivity ( context , new Intent ( context , ActivityBilling . class ) ) ; return ; } folder . createNotificationChannel ( context ) ; onActionEditChannel ( ) ; }
public void setImageDrawable ( Drawable drawable ) { if ( drawable != lottieDrawable ) { recycleBitmaps ( ) ; } super . setImageDrawable ( drawable ) ; }
public void onDeleted ( Context context , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { SqueezerRemoteControlConfigureActivity . deleteTitlePref ( context , appWidgetId ) ; } }
public static String fixFileName ( String fileName ) { if ( fileName != null ) { fileName = fileName . replaceAll ( " [ \u0001 - \u001f <> : \"/\\\\|?*\u007f ] + " , "" ) . trim ( ) ; } return fileName ; }
public void setMenu ( Menu menu ) { setWidget ( menu ) ; mMenu = menu ; mMenu . addListener ( mListener ) ; }
public void setProgressListener ( Manager . ProgressListener listener ) { mProgressListener = listener ; }
public SyncGroup ( PlayerView playerView ) { super ( playerView ) ; }
public FragmentInfo ( Class < ? > _class , Bundle _args ) { clss = _class ; args = _args ; frag = null ; }
public Fragment getItem ( int position ) { Fragment fragment = null ; switch ( position ) { case 0 : fragment = BMIListFragment . newInstance ( ) ; break ; fragment = BMIChartFragment . newInstance ( ) ; break ; */ } return fragment ; }
public boolean setShuffleStatus ( String s ) { return setShuffleStatus ( s != null ? ShuffleStatus . valueOf ( Util . parseDecimalIntOrZero ( s ) ) : null ) ; }
public static void finishLoginToTwitter ( Context context ) { logEvent ( context , LOGIN_TO_TWITTER ) ; }
public static String getVersionName ( final Context context ) { final String versionName = getPackageInfo ( context ) . versionName ; if ( Util . isNullOrEmpty ( versionName ) ) { return "" ; } return DEBUG_TAG + versionName ; }
public void afterTextChanged ( Editable editable ) { etAmount . setError ( null ) ; }
public void run ( ) { showMessage ( mTransaction . description ( getApplicationContext ( ) , mBitcoin ) , 2000 ) ; }
public void clickingPetsAc ( View view ) { Intent intent = new Intent ( NavD . this , MountsActivity . class ) ; startActivity ( intent ) ; }
private double inchtofoot ( double num ) { return num * 0 . 0833 ; }
public synchronized void add ( Packet packet ) { if ( packet == null || ! packet . shouldSend ( ) ) return ; queue . add ( packet ) ; }
public Map < ? , ? > getLiquidKeyboard ( ) { return liquidKeyboard ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( listeDesCoequipiers ) getResult ( listeDesCoequipiers . class , __result , "listeCoequipiersResult" , __envelope ) ; }
public void onReceive ( Context context , Intent intent ) { ArrayList < Seances > seances = intent . getParcelableArrayListExtra ( "seances" ) ; adapter . setSeances ( seances ) ; }
public CommentListingURL limit ( final Integer limit ) { return new UnknownCommentListURL ( uri . buildUpon ( ) . appendQueryParameter ( "limit" , String . valueOf ( "limit" ) ) . build ( ) ) ; }
public void setCalculatorKeysLayout ( @ XmlRes int mCalculatorKeysLayout ) { this . mCalculatorKeysLayout = mCalculatorKeysLayout ; bindListeners ( mCalculatorKeyboardView ) ; }
public boolean isLongClickEnabled ( ) { return searchResultHashtags != null ; }
private Volumes getVolumes ( ) { if ( mLinphoneThread == null ) { return new Volumes ( ) ; } return mLinphoneThread . getVolumes ( ) ; }
public void setAccessToken ( String token , int expiresInSeconds ) { mAccessToken = token ; mAccessTokenExpiresIn = DateTime . now ( ) . plusSeconds ( expiresInSeconds ) ; mAuthHeaderValue = "Bearer " + token ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_help_termsOfService . TLdeserialize ( stream , constructor , exception ) ; }
public void onClick ( ) { deleteTab ( position ) ; }
public static int getFreeVolume ( Context context ) { int volume = 100 ; for ( ItemData item : getHoldingItems ( context ) ) { if ( ! item . isUseless ( ) ) volume -= item . getVolume ( ) ; } return volume ; }
public void releaseSavepoint ( String id ) { if ( MainActivity . ENABLE_DEBUG_LOG_CALLS && ENABLE_SAVEPOINT_LOG ) Log . i ( "db" , "releasing savepoint : " + id ) ; mDatabase . execSQL ( " ; RELEASE SAVEPOINT " + id ) ; }
public long setOperationResult ( long operationResult ) { curFiles = operationResult ; return 0 ; }
public int getChildrenCount ( int groupPosition ) { try { return this . _listDataChild . get ( this . _listDataHeader . get ( groupPosition ) ) . size ( ) ; } catch ( NullPointerException e ) { return 0 ; } }
public void onClick ( View view ) { if ( value_text == null || value_text . length ( ) > 0 ) { is_formatted = ! is_formatted ; setText ( ) ; } }
public String getLocalPath ( ) { return mLocalDirectoryPath ; }
public void run ( ) { currentChat = MessagesStorage . getInstance ( ) . getChat ( chatId ) ; semaphore . release ( ) ; }
public void refreshListAllMusic ( ) { mCurrentPage = PAGE_ALL ; if ( mFileManager == null ) { return ; } showProgressBar ( ) ; mFileImageManager . getAllLocalImage ( mSortMode , null ) ; }
public void invalidateCurrentCustomTheme ( ) { if ( currentCustomTheme == null ) return ; currentTheme = null ; currentCustomThemePatcher = null ; for ( ThemeChangeListener listener : themeChangeListeners ) listener . onThemeChanged ( ) ; }
public void setActualValue ( String actualValue ) { this . actualValue = actualValue ; }
public void run ( ) { onSignupSuccess ( ) ; progressDialog . dismiss ( ) ; }
public Volumes ( ) { mPlayGain = 0 . 0f ; mMicGain = 0 . 0f ; mExternalSpeaker = false ; mMicrophoneStatus = MicrophoneStatus . ON ; mEchoLimiter = false ; }
public void write ( DistrictTeam districtTeam , Long lastModified ) { mDb . getDistrictTeamsTable ( ) . add ( districtTeam , lastModified ) ; }
public PhotoSizes setM ( String m ) { this . m = m ; return this ; }
public void onAnimationCancel ( Object animation ) { if ( currentHintAnimation != null && currentHintAnimation . equals ( animation ) ) { currentHintAnimation = null ; } }
public int getUserSelectedNavigationItem ( ) { return Utilities . parseIntWithDefault ( prefs . getString ( PreferenceNames . SELECTED_NAVITEM , "0" ) , 0 ) ; }
public Integer getOffset ( ) { return offset ; }
public DayHeader ( InstanceSettings settings , WidgetEntryPosition entryPosition , DateTime date ) { super ( settings , entryPosition , date , null ) ; }
public SayHi setAlt ( java . lang . String alt ) { return ( SayHi ) super . setAlt ( alt ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . BRACKET_OPEN ) ; }
public void onCreate ( final SQLiteDatabase db ) { db . execSQL ( "CREATE TABLE " + DB_NAME + " ( date INTEGER PRIMARY KEY , steps INTEGER ) " ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . emission . abnc . wtbu_android" , appContext . getPackageName ( ) ) ; }
public void onIristickServiceInitialized ( ) { }
public void onSuccess ( Void unusedResult ) { customLogger ( "Discovery go ! " ) ; }
private void openInternal ( Video video , int size ) { PlaceFactory . getVkInternalPlayerPlace ( video , size ) . tryOpenWith ( getActivity ( ) ) ; }
public void warning_whenNeitherServerOrAdminPasswordSet_isNull ( ) { QRCodeViewModel viewModel = new QRCodeViewModel ( qrCodeGenerator , jsonPreferencesGenerator , generalSettings , adminSettings , fakeScheduler ) ; assertThat ( viewModel . getWarning ( ) . getValue ( ) , is ( nullValue ( ) ) ) ; }
private static < K , V > int getWeight ( Entry < K , V > p ) { return ( p == null ) ? 0 : p . weight ; }
public SearchResultAdapter ( Context context , List < DictionarySearchResultItem > searchResultItems ) { this . searchResultItems = searchResultItems ; this . context = context ; }
public void onMovieClicked ( Movie movie ) { Intent intent = new Intent ( MainActivity . this , DetailActivity . class ) ; intent . putExtra ( "movie" , movie ) ; startActivity ( intent ) ; }
public void onItemSelected_DialogFragment_ChooseCheckinDate ( int id ) { Log . d ( TAG , "onItemSelected_DialogFragment_ChooseCheckinDate ( ) called : " ) ; checkAchievements ( id ) ; }
public List < String > getPos ( ) { return this . pos ; }
public void onRefresh ( ) { mAdapter . notifyDataSetChanged ( ) ; loadNews ( ) ; }
private View getResultView ( ) { return activity . findViewById ( R . id . integrity_error ) ; }
public void onUserFollowingSuccess ( ) { ( ( DataViewHolder ) holder ) . subscribeButton . setVisibility ( View . GONE ) ; Toast . makeText ( context , R . string . followed , Toast . LENGTH_SHORT ) . show ( ) ; }
private void setSettingsButtonView ( ) { ImageButton settingsButton = findViewById ( R . id . settings_button ) ; settingsButton . setOnClickListener ( v -> { startActivity ( new Intent ( this , SettingsActivity . class ) ) ; } ) ; }
private void goIntoRenamingDialogFromAmountChoice ( ) { renamingDialog . setActionButton ( DialogAction . NEUTRAL , R . string . back ) ; renamingDialog . show ( ) ; }
public boolean hasConfidence ( ) { return ( ( bitField0_ & 0x00000400 ) == 0x00000400 ) ; }
public MyImageAdapter ( Context context ) { this . mContext = context ; }
public void setRangeStep ( XYStepMode mode , double value ) { setRangeStepMode ( mode ) ; setRangeStepValue ( value ) ; }
public void setText ( @ NonNull String text ) { mText = text ; updateCoordinates ( ) ; invalidate ( ) ; }
public void showHostnameAnonymousAccessApproved ( ) { if ( getView ( ) != null ) { if ( settings . getBoolean ( "zway_anonymous" , false ) ) { showCustomNameView ( ) ; } else { showCredentialsView ( ) ; } } }
public static File getDownloadedFile ( String name ) { return new File ( getDownloadDir ( ) + "/" + name ) ; }
public Comment ( ) { parent_comment_id = "" ; comment_id = "" ; user_id = "" ; name = "" ; post_id = "" ; }
public DateTime getLocalScheduleStartDate ( ) { DateTimeZone summitTimeZone = DateTimeZone . forID ( getTimeZone ( ) ) ; return new DateTime ( getScheduleStartDate ( ) , summitTimeZone ) . withTime ( 0 , 0 , 0 , 0 ) ; }
public void setMinLvl ( int minLvl ) { this . minLvl = minLvl ; }
public Game ( final MainActivity activity ) throws Exception { this . activity = activity ; this . timer = new Timer ( ) ; }
public String getClosestColor ( int color ) { return getClosestColor ( new ColorModel ( colorToHex ( color ) ) ) ; }
public int getCount ( ) { if ( images == null ) { return 0 ; } return images . size ( ) ; }
public boolean isCodeVisible ( ) { return shaderEditor . getVisibility ( ) == View . VISIBLE ; }
public void onAnimationEnd ( Animator animation ) { mNavigationArrowView . setVisibility ( View . GONE ) ; }
public boolean onNavigationItemSelected ( final MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . faves : break ; default : super . onNavigationItemSelected ( item ) ; } return true ; }
private static void setCanUseNightModeAuto ( ) { UiModeManager uiModeManager = getAppContext ( ) . getSystemService ( UiModeManager . class ) ; canUseNightModeAuto = uiModeManager != null }
private boolean isContactProfile ( ) { return contactId != 0 && ( chatId == 0 || ! chatIsGroup ) ; }
public void onCompleted ( Object companion ) { AppLog . i ( AppLog . T . READER , "reader service > all tasks completed" ) ; jobFinished ( ( JobParameters ) companion , false ) ; }
public void setHaveUpdatedTranslations ( boolean haveUpdatedTranslations ) { mPerInstallationPrefs . edit ( ) . putBoolean ( Constants . PREF_HAVE_UPDATED_TRANSLATIONS , haveUpdatedTranslations ) . apply ( ) ; }
public static DBAdmissionCounters setupInstance ( Context context ) { if ( mInstance == null ) mInstance = new DBAdmissionCounters ( context , DatabaseCreator . TABLE_NAME_ADMISSION_COUNTERS ) ; return mInstance ; }
public void setDrafts ( ArrayList < DraftListItemModel > draftModels ) { this . drafts = draftModels ; notifyDataSetChanged ( ) ; }
public void showEventDetail ( int eventId , IBaseView context ) { eventDetailWireframe . presentEventDetailView ( eventId , context ) ; }
public void onClick ( View v ) { Intent registerIntent = new Intent ( LoginActivity . this , RegisterActivity . class ) ; startActivity ( registerIntent ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; cancelAsyncTasks ( ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_recents , parent , false ) ; return new ViewHolder ( v ) ; }
public void onStartTrackingTouch ( SeekBar seekBar ) { mHandler . removeCallbacks ( mUpdateTimeTask ) ; }
public SubredditPostListURL changeSubreddit ( String newSubreddit ) { return new SubredditPostListURL ( type , newSubreddit , order , limit , before , after ) ; }
public void load ( ) { this . modeResId = modeToResId ( preferences . getModeId ( ) ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "atishay . com . snucabpool" , appContext . getPackageName ( ) ) ; }
public String getPhrase ( ) { return this . phrase ; }
public int getState ( ) { return SOUND_UNINITIALIZED ; }
public static void e ( @ NonNull Throwable throwable ) { if ( BuildConfig . DEBUG ) { throwable . printStackTrace ( ) ; } }
public void onClick ( View view ) { actionListener . onClick ( view , DetailActionListener . SHARE_GP , textName . getText ( ) . toString ( ) ) ; }
public BigDecimal getCapitalInitial ( ) { return this . capitalInitial ; }
public int getStatus ( ) { return event . getStatus ( ) ; }
public Config setToastBackground ( @ Nullable Drawable toastBackground ) { this . toastBackground = toastBackground ; return this ; }
public void userInputRequried ( PendingIntent pi , Message message ) { activity . runIntent ( pi , REQUEST_SEND_MESSAGE ) ; }
public void onSetSwipeBackground ( MyViewHolder holder , int position , @ SwipeableItemDrawableTypes int type ) { }
public void onFailure ( Call < Results < User >> call , Throwable t ) { ToastUtil . error ( t . getMessage ( ) ) ; }
public void mkdir ( ) { RootUtils . runCommand ( "mkdir - p '" + file + "'" ) ; }
public void start ( ) { Log . d ( TAG , "start ( ) Entry . " ) ; setPlaybackPaused ( false ) ; musicSrv . go ( ) ; }
public void onStart ( ) { super . onStart ( ) ; mBookmarkPresenter . bind ( this ) ; mBookmarksContextualModePresenter . bind ( this ) ; }
public void appendFileSignatureSource ( File file ) { String md5Hash = FileUtils . getMd5Hash ( file ) ; appendElementSignatureSource ( file . getName ( ) + " : : " + md5Hash ) ; }
public void onCreate ( ) { super . onCreate ( ) ; Log . i ( TAG , "Service created" ) ; TranslationManager . getInstance ( ) . registerClipboardListener ( ) ; }
public boolean onLongClick ( View v ) { sharedPref . edit ( ) . putString ( "openURL" , sharedPref . getString ( "startURL" , "http : viewPager . setCurrentItem ( newTab ) ; dialog . cancel ( ) ; return false ; }
public Integer getCloudCover ( ) { return cloudCover ; }
public View getView ( int position , View convertView , ViewGroup parent ) { return getItem ( position ) . getView ( position , convertView , getContext ( ) ) ; }
public void validateTextViewInput ( TextInputEditText textInputEditText , String string ) { if ( string . isEmpty ( ) ) { textInputEditText . setError ( "This field cannot be empty" ) ; errorCount ++ ; } else { textInputEditText . setError ( null ) ; errorCount -- ; } }
private void loadNames ( ) { final List < String > names = extractNames ( ) ; view . setAdapter ( listAdapterFactory . create ( names ) ) ; }
public ArrayList < MaterialAboutItem > getItems ( ) { return mItems ; }
public T clickOption ( int option ) { clickOnString ( option ) ; return page ; }
public void onNext ( EmptyResponse emptyResponse ) { view ( ) . showRequestSuccess ( ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeInt ( time ) ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = this . getMenuInflater ( ) ; inflater . inflate ( R . menu . circular_segmentation_results_context_menu , menu ) ; }
public URL getUrl ( ) { return getUrl ( "" ) ; }
public void filterPostsService ( String query ) { view . setTvEmptyVisibility ( View . VISIBLE ) ; view . setTvEmptyMessage ( getContext ( ) . getString ( R . string . searching ) ) ; model . searchPosts ( query , this ) ; }
public Observable < Page < Charges >> getListOfLoanCharges ( int loanId ) { return mBaseApiManager . getLoanApi ( ) . getListOfLoanCharges ( loanId ) ; }
public void onBindViewHolder ( ListEntry holder , int position ) { holder . bind ( mFilterQuery == null ? mEntries . get ( position ) : mFilteredEntries . get ( position ) ) ; }
public void onClick ( View v ) { d . dismiss ( ) ; }
public int getItemViewType ( int position ) { return mTranslations . get ( position ) . isSeparator ( ) ? R . layout . translation_sep : R . layout . translation_row ; }
public EighthActivityBuilder SID ( int SID ) { this . SID = SID ; return this ; }
public SqlStatement getDefaultInstanceForType ( ) { return defaultInstance ; }
public PlayStatusChanged ( @ NonNull PlayerState . PlayStatus playStatus , @ NonNull Player player ) { this . playStatus = playStatus ; this . player = player ; }
public int getAudioSessionId ( ) { return player . getAudioSessionId ( ) ; }
public static void sendOutput ( Context context , CharSequence s ) { sendOutput ( SkinManager . COLOR_NOT_SET , context , s ) ; }
private void startPostPairingOperations ( ) { if ( io . getDevice ( ) . getBondState ( ) == BluetoothDevice . BOND_NONE ) { Log . d ( TAG , "Create bond : " + this . io . getDevice ( ) . createBond ( ) ) ; } }
public void setFrom ( String from ) { this . from = from ; }
public void onClick ( View view ) { String pass = etPassword . getEditText ( ) . getText ( ) . toString ( ) ; if ( loginTask == null ) { loginTask = new LoginWalletTask ( pass , false ) ; loginTask . execute ( ) ; } }
public void requestPlaylistSongs ( int id ) { mPlaylistsToDownload . add ( id ) ; Message msg = Message . obtain ( ) ; msg . obj = ClementineMessageFactory . buildRequestPlaylistSongs ( id ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public SearchResultsAdapter ( SearchMvp . SearchView communicator , Context context ) { this . data = new ArrayList <> ( ) ; this . mContext = context ; this . mCommunicator = communicator ; }
public DcLocationManager ( Context context ) { this . context = context . getApplicationContext ( ) ; DcLocation . getInstance ( ) . addObserver ( this ) ; if ( DcHelper . getContext ( context ) . isSendingLocationsToChat ( 0 ) ) { initializeLocationEngine ( ) ; } }
public float getPageWidth ( int position ) { if ( position < adapter . getCount ( ) ) return adapter . getPageWidth ( position ) ; return 1 . f ; }
private static PhotoSizes . Size dto2model ( PhotoSizeDto dto ) { return new PhotoSizes . Size ( dto . width , dto . height , dto . src ) ; }
public static void viewAppSettings ( Activity activity ) { Intent intent = new Intent ( activity , AppSettingsActivity . class ) ; AnalyticsTracker . track ( AnalyticsTracker . Stat . OPENED_APP_SETTINGS ) ; activity . startActivityForResult ( intent , RequestCodes . APP_SETTINGS ) ; }
public void onClick ( View arg0 ) { NewAliasDialog . this . dismiss ( ) ; }
public void onUserChanged ( UserInfo currentUser ) { if ( currentUser != null && currentUser . getIsAdmin ( ) ) { showAdminFragment ( ) ; } else { } }
public void testIsWPCOMString3 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( wpcomAddress3 ) ) ; }
public void onColorSelection ( ColorChooserDialog colorChooserDialog , int color ) { BitmapHelper . changeImageViewDrawableColor ( colorChooser , color ) ; selectedColor = color ; }
public BaseEntity call ( ) throws Exception { return storageLogic . getRestrictionEntity ( restriction ) ; }
public static com . coinomi . core . protos . Protos . UnspentOutput parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public static boolean isOfflineMode ( Context context ) { return Preferences . getOfflineMode ( context ) ; }
public int compare ( TagModel a , TagModel b ) { return a . getName ( ) . compareTo ( b . getName ( ) ) ; }
public void onDispatchFirstPass ( UpdateOp op ) { dispatchUpdate ( op ) ; }
public Exception getRendererException ( ) { Assertions . checkState ( type == TYPE_RENDERER ) ; return ( Exception ) getCause ( ) ; }
private void onbBindSectionHeaderGroupViewHolder ( MyGroupViewHolder holder , int groupPosition ) { final AbstractExpandableDataProvider . GroupData item = mProvider . getGroupItem ( groupPosition ) ; holder . mTextView . setText ( item . getText ( ) ) ; }
private void startTimer ( ) { delayHandler . postDelayed ( timerRunnable , 2 * ( prefs . getTrackingInterval ( ) * 1000 ) ) ; }
public static BinaryData generateBackupKey_v1 ( final DeterministicWallet . ExtendedPrivateKey pk ) { final DeterministicWallet . ExtendedPrivateKey dpriv = DeterministicWallet . derivePrivateKey ( pk , DeterministicWallet . KeyPath$ . MODULE$ . apply ( "m/49'" ) ) ; return dpriv . secretkeybytes ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { api = new OpenFoodAPIClient ( getActivity ( ) ) ; return createView ( inflater , container , R . layout . fragment_nutrition_info_product ) ; }
public void noDigits ( ) { IntegerRange . getValues ( "12 , abc" ) ; }
public synchronized void mark ( int readLimit ) { if ( markedPosition != - 1 ) { throw new IllegalArgumentException ( "readLimit argument of RandomAccessStream . mark ( ) is not used , please set to - 1 ! " ) ; } markedPosition = getCurrentPosition ( ) ; }
public String formatPrecisionNone ( double amount ) { return String . format ( Locale . getDefault ( ) , "% . 2f" , amount ) ; }
public List < String > arrayFromString ( String concatenatedStrings ) { if ( concatenatedStrings != null ) { return new ArrayList <> ( Arrays . asList ( concatenatedStrings . split ( " , " ) ) ) ; } return null ; }
public SelectOneImageMapWidget createWidget ( ) { return new SelectOneImageMapWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) , false ) ; }
public LinearLayout getSheetContainer ( ) { return containerView ; }
public final T get ( String key ) { return get ( key , null ) ; }
public void addOnChildAttachStateChangeListener ( OnChildAttachStateChangeListener listener ) { if ( mOnChildAttachStateListeners == null ) { mOnChildAttachStateListeners = new ArrayList < OnChildAttachStateChangeListener > ( ) ; } mOnChildAttachStateListeners . add ( listener ) ; }
public DownloadsAdapter ( List < BookDetail > bookList , Context context , View . OnClickListener deleteClickListener , View . OnClickListener bookClickListener ) { this . bookList = bookList ; this . context = context ; this . deleteClickListener = deleteClickListener ; this . bookClickListener = bookClickListener ; }
public DiscoveryAgent getDiscoveryAgent ( ) { return null ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { updateVisibleCharactersLeft ( ) ; }
public void onResume ( ) { super . onResume ( ) ; useCachedStuff ( getApplicationContext ( ) ) ; }
public Server getItem ( int location ) { return cities . get ( location ) ; }
public PagerAdapter ( FragmentManager fm , F . . . fragments ) { super ( fm ) ; this . fragments = Arrays . asList ( fragments ) ; }
public static Application getInstance ( ) { return sInstance ; }
public LiveData < Resource < List < Event >>> getEvents ( ) { return events ; }
public TabListener ( ActionBarActivity activity , String tag , Class < T > clazz ) { mActivity = activity ; mTag = tag ; mClass = clazz ; }
public void onFailed ( ) { Toast . makeText ( mContext , R . string . failed_to_sync_google_tasks , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences ) ; nightMode = getPreferenceManager ( ) . getSharedPreferences ( ) . getBoolean ( getString ( R . string . PREFERENCE_general_night_mode ) , false ) ; }
public static boolean shouldPublishRegId ( final Context context ) { return getSharedPreferences ( context ) . getBoolean ( Property . PUBLISH_REG_ID , false ) ; }
public void handleActivityResult ( int requestCode , int resultCode , Intent data ) { if ( requestCode == this . OVERLAY_REQUEST_CODE ) { this . setCanDrawOverlay ( android . provider . Settings . canDrawOverlays ( this . activity . getApplicationContext ( ) ) ) ; } }
private boolean isOutputsValid ( ) { return validatedAddress != null ; }
private void forceClearForeground ( ) { disposables . add ( Completable . fromRunnable ( ( ) -> { updateForegroundNotify ( Collections . emptyList ( ) ) ; } ) . subscribeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( ) ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return initializeForView ( new Vanish ( ) ) ; }
public View findViewById ( @ IdRes int resId ) { return this . mActivity . findViewById ( resId ) ; }
public void onDrawerSlide ( View drawerView , float slideOffset ) { if ( mDrawerToggle != null ) mDrawerToggle . onDrawerSlide ( drawerView , slideOffset ) ; }
private void thenOnActionNotified ( ) { assertTrue ( mHandlingOnScreen ) ; }
public static PyxDiscoveryApi get ( ) { if ( instance == null ) instance = new PyxDiscoveryApi ( ) ; return instance ; }
public void onSelectedChanged ( @ Nullable RecyclerView . ViewHolder viewHolder , int actionState ) { super . onSelectedChanged ( viewHolder , actionState ) ; swiping = ( actionState == ItemTouchHelper . ACTION_STATE_SWIPE ) ; updateSwipeRefresh ( ) ; }
public void run ( ) { if ( totalSize > 0 ) sizeText . setText ( "≤ " + readableFileSize ( totalSize ) ) ; }
public void play ( Sound sound , float volume ) { if ( mSoundFxMuted ) { return ; } sound . play ( volume ) ; }
public ActionBarMenuItem addItem ( int id , int icon , int backgroundColor ) { return addItem ( id , icon , backgroundColor , null , AndroidUtilities . dp ( 48 ) , null ) ; }
public NavDrawerCategoryAdapter ( Activity mActivity , ArrayList < Category > categories ) { this ( mActivity , categories , null ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfHaste_Info ) : super . desc ( ) ; }
private final void closeOnSuccess ( String message ) { this . listener . onExportDialogSuccess ( message ) ; this . dismiss ( ) ; }
public static void setString ( Context context , String code , @ StringRes int keyId , String value ) { String key = String . format ( "%s_%s" , code , getKey ( context , keyId ) ) ; setString ( context , key , value ) ; }
public static MovieDetailViewState makeViewMovieState ( Movie movie , String id ) { return new MovieDetailViewState ( id , movie , 0 , false , false ) ; }
public int getPrice ( ) { return price ; }
public void setRemoteId ( Long remoteId ) { this . remoteId = remoteId ; }
public static int getIntSp ( Context context , String name , String tag ) { SharedPreferences sp = context . getSharedPreferences ( name , mode ) ; return sp . getInt ( tag , - 1 ) ; }
public void onBindViewHolder ( PreferenceViewHolder holder ) { super . onBindViewHolder ( holder ) ; TextView titleView = ( TextView ) holder . findViewById ( android . R . id . title ) ; titleView . setTextColor ( Setup . appSettings ( ) . getPrimaryColor ( ) ) ; }
public static Plant withId ( String id ) { return plants . withId ( id ) ; }
public MediatorLiveData < List < WorkEntity >> getWorks ( ) { return mObservableWorks ; }
public int getCount ( ) { if ( emojiPage == - 1 ) { return recentEmoji . size ( ) ; } return EmojiData . dataColored [ emojiPage ] . length ; }
public RestoreGoogleTask ( Context context , SyncListener mListener ) { this . mContext = new ContextHolder ( context ) ; this . mListener = mListener ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_calculator , parent , false ) ; return new ViewHolder ( v ) ; }
public AdmissionPercentageMetaPojo getCurrentMeta ( ) { if ( mMetaPojo == null ) throw new AssertionError ( "the meta object has not been loaded yet" ) ; return mMetaPojo ; }
public void notifyOfChangedSubject ( int recyclerViewPosition ) { requery ( ) ; notifyItemChanged ( recyclerViewPosition ) ; }
private void resetAnswerFields ( ) { selectedDateTime = DateTimeUtils . getCurrentDateTime ( ) ; binding . dateWidget . widgetAnswerText . setText ( R . string . no_date_selected ) ; binding . timeWidget . widgetAnswerText . setText ( R . string . no_time_selected ) ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( DoubleNumberActivity . this ) ; Intent intent = new Intent ( DoubleNumberActivity . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
public void applyOptions ( Context context , GlideBuilder builder ) { builder . setLogLevel ( Log . INFO ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; loadStory ( ) ; }
public void onPlay ( ) { Log . d ( TAG , "onPlay" ) ; if ( mQueueManager . getCurrentMusic ( ) == null ) { mQueueManager . setRandomQueue ( ) ; } handlePlayRequest ( ) ; }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { Player player = adapter . getItem ( position ) ; playerShoots ( player ) ; }
public static int getMonthZeroBased ( Calendar cal ) { return cal . get ( Calendar . MONTH ) ; }
public ArrayList < Events > getDayTwoEvents ( ) { return dayTwoEvents ; }
public VkApiHelper ( ) { VkMessageStatApplication . getAppComponent ( ) . inject ( VkApiHelper . this ) ; }
public int getCurrentPeriodIndex ( ) { if ( timeline . isEmpty ( ) || pendingSeekAcks > 0 ) { return maskingPeriodIndex ; } else { return playbackInfo . periodIndex ; } }
public void closeNavDrawer ( ) { onView ( ViewMatchers . withId ( R . id . activity_main_drawer_layout ) ) . perform ( actionCloseDrawer ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; vibrationEnabled = sharedPref . getBoolean ( getString ( R . string . enable_haptic_feedback ) , false ) ; }
public void dismissAllDialogFragments ( ) { getSupportFragmentManager ( ) . popBackStack ( "dialog" , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public SyncEntry convertToMapped ( Class < ? extends SyncEntry > type , String value ) { return value == null ? null : SyncEntry . fromJson ( value ) ; }
public void onApiStatusUpdated ( APIStatus tbaStatus ) { commonStatusUpdate ( tbaStatus ) ; }
public void addBook ( ) { mAddBookPresenter . uploadBook ( ) ; }
public EventQueue ( ) { queue = new LinkedList ( ) ; waiter = new Object ( ) ; interlock = new Object ( ) ; immediate = false ; }
public static String [ ] getStackTracesStringArray ( Throwable throwable ) { return getStackTracesStringArray ( Collections . singletonList ( throwable ) , true ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsGeneral . class ) ; startActivityForResult ( i , RESTART_SETTINGS_RESULT ) ; }
public synchronized void resetWikiSite ( ) { wiki = null ; updateCrashReportProps ( ) ; }
public ImageEmbedBinder ( TagEntry viewObject ) { tagEntry = viewObject ; }
public static boolean isIPv6HexCompressedAddress ( final String address ) { return IPV6_HEX_COMPRESSED_PATTERN . matcher ( address ) . matches ( ) ; }
public void setGeofenceLatitude ( double geofenceLatitude ) { if ( geofenceLatitude > 90 ) this . geofenceLatitude = 90 ; if ( geofenceLatitude < - 90 ) this . geofenceLatitude = - 90 ; else this . geofenceLatitude = geofenceLatitude ; notifyPropertyChanged ( BR . geofenceLatitude ) ; }
public void date_to_string ( ) { String sActual = dateManager . dateToString ( context , dActual ) ; assertEquals ( sEsperado , sActual ) ; }
public void replyComment ( Comment c ) { mCommentView . showCommentDialog ( c . getTid ( ) ) ; }
public void dataLoggerStatusModified ( ) { checkSettingsEnabled ( ) ; }
public Fragment getFragment ( int index ) { return builder . pages . getFragment ( index ) ; }
private CalendarContract ( ) { }
private void initCircleOverlay ( ) { circleOverlay = new CircleLocationOverlay ( getContext ( ) ) ; getOverlays ( ) . add ( 0 , circleOverlay ) ; }
public void show ( ) { try { anim . scaleIn ( floatingActionButton , 0 , 400 , "fabIn" ) ; } catch ( NullPointerException e ) { Log . i ( "showFab" , "Fab is not initialized" ) ; } }
public void onSetRating ( Rating rating ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessageFactory . buildRateTrack ( rating . getStarRating ( ) ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; this . addPreferencesFromResource ( R . xml . settings ) ; PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public void startPostActivity ( ) { Intent intent = new Intent ( this , PostActivity . class ) ; startActivity ( intent ) ; }
public boolean shouldSendFinalizedFormButtonBeVisible ( ) { return adminSettings . getBoolean ( AdminKeys . KEY_SEND_FINALIZED ) ; }
public int delete ( @ NonNull Uri arg0 , String arg1 , String [ ] arg2 ) { Log . w ( TAG , "delete ( ) called" ) ; return 0 ; }
public ExDecimalWidget createWidget ( ) { return new ExDecimalWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) ) ; }
public SortEntry [ ] getSortEntries ( ) { return new SortEntry [ ] { new SortEntry ( new ItemName ( Disk . NAME ) , SortOrderType . A_TO_Z ) , new SortEntry ( new ItemName ( Disk . STATUS ) , SortOrderType . A_TO_Z ) } ; }
private String getBookmarkUrl ( ) { String url = "https : String ref = getCurrentRef ( ) ; return ref . equals ( mRepository . getDefaultBranch ( ) ) ? url : url + "/tree/" + ref ; }
public boolean isSummaryLargeImage ( ) { return card . equals ( CARD_SUMMARY_LARGE_Image ) ; }
public void detach ( ) { authorListPresenter . detach ( ) ; categoryListPresenter . detach ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return TrailerViewHolder . create ( parent , glide ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; new RequestDatabase ( context ) . execute ( ) ; }
public ExportApkg ( String apkgPath , Long did , Boolean includeSched , Boolean includeMedia ) { this . mApkgPath = apkgPath ; this . mDid = did ; this . mIncludeSched = includeSched ; this . mIncludeMedia = includeMedia ; }
public void trackDismissedNotification ( @ NotNull StoryNotificationType storyNotificationType ) { mSystemNotificationsTracker . trackShownNotification ( translateNotificationTypes ( storyNotificationType ) ) ; }
private void putDates ( Intent intent , String dateFrom , String dateTo ) { intent . putExtra ( IntentCreator . DATE_FROM , dateFrom ) ; intent . putExtra ( IntentCreator . DATE_TO , dateTo ) ; }
public void setSortMode ( SortMode mode ) { this . sortMode = mode ; entriesChanged ( ) ; }
private boolean isLocked ( ) { return mIssue . isLocked ( ) && ! mIsCollaborator ; }
public void onBackupFilesLoaded ( final List < ImportBackupService . BackupFile > files ) { runOnUiThread ( ( ) -> { backupFileAdapter . setFiles ( files ) ; } ) ; }
public UserViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . reader_cardview_user , parent , false ) ; return new UserViewHolder ( view ) ; }
public void setLinkUrl ( String linkUrl ) { this . linkUrl = linkUrl ; }
public static String buildPosterURL ( String PosterPath ) { return "http : }
public boolean onQueryTextSubmit ( String query ) { if ( mAdapter != null ) mAdapter . filter ( query ) ; if ( mSearchMenu != null ) { mSearchMenu . collapseActionView ( ) ; } return false ; }
public void hide_fail ( ) throws Exception { doThrow ( RuntimeException . class ) . when ( windowManager ) . removeView ( view ) ; overlayWindowManager . hide ( view ) ; verify ( windowManager , times ( 1 ) ) . removeView ( view ) ; }
public BaseAPISubscriber ( ) { shouldBindImmediately = true ; }
public void onClick ( View v ) { Intent i = mContext . getPackageManager ( ) . getLaunchIntentForPackage ( mContext . getPackageName ( ) ) ; i . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP ) ; getContext ( ) . startActivity ( i ) ; }
public void saveEvent_WhenEmptyEventName_NotifyViewError ( ) { final EventViewModel eventViewModel = createEventViewModel ( ) ; eventViewModel . setName ( SampleBuilder . emptyText ) ; eventEditPresenter . saveEvent ( eventViewModel , eventViewModel ) ; verify ( eventEditView ) . onEmptyEventNameError ( ) ; }
public Builder sslContext ( SSLContext sslContext ) { this . mSSLContext = sslContext ; return this ; }
public void logout ( @ NonNull final Context context , @ NonNull final LogoutHandler logoutHandler ) { logout ( context , null , logoutHandler ) ; }
public void onClick ( View v ) { activity . displayChannels ( startRow , LiveTvGuideActivity . PAGE_SIZE ) ; }
public Set < String > getProblems ( ) { Set < String > problems = new HashSet <> ( ) ; for ( Component child : getVisibleChildren ( ) ) problems . addAll ( child . getProblems ( ) ) ; return problems ; }
public void onStart ( ) { progressBar . setVisibility ( View . VISIBLE ) ; }
public boolean isMenuEmpty ( ) { for ( int i = 0 ; i < Type . values ( ) . length ; i ++ ) { if ( enabled [ i ] ) { return false ; } } return true ; }
public AvatarDrawable ( TLRPC . User user , boolean profile ) { this ( ) ; isProfile = profile ; if ( user != null ) { setInfo ( user . id , user . first_name , user . last_name , false ) ; } }
public int onStartCommand ( Intent intent , int flags , int startId ) { if ( intent != null && ACTION_STOP . equals ( intent . getAction ( ) ) ) { stopSelf ( ) ; } return START_STICKY ; }
public void updateDiscussionList ( List < Discussion > newDiscussions ) { this . discussionList = new ArrayList <> ( newDiscussions ) ; notifyDataSetChanged ( ) ; }
public boolean stanzaIds ( ) { return hasDiscoFeature ( account . getJid ( ) . toBareJid ( ) , Namespace . STANZA_IDS ) ; }
private void unwire ( ) { view . setOnClickListener ( null ) ; ivDelete . setOnClickListener ( null ) ; ivSave . setOnClickListener ( null ) ; }
public void onThemeSelectorClicked ( View view ) { mainBinding . setTheme ( Preferences . get ( this ) . toggleTheme ( ) ) ; mainBinding . executePendingBindings ( ) ; }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . BEHAVIOR ; }
public void setData ( NoteItem item ) { binding . setNote ( item ) ; }
public int getInterestRatePerPeriod ( ) { return interestRatePerPeriod ; }
public AsynchSQLiteWriterRunnable ( SQLiteDatabase db , DataLoggerListener listener ) { this . db = db ; this . thread = null ; this . pendingValues = new Vector < ProfileSensorTimeValue > ( ) ; this . listener = listener ; }
public OverpassQuery ( Activity activity , int resourceId ) { queryFormat = loadRawResText ( activity , resourceId ) ; }
public int compare ( ResultBean r1 , ResultBean r2 ) { return r1 . getName ( ) . compareTo ( r2 . getName ( ) ) ; }
public boolean isValid ( ) { for ( Component child : getVisibleChildren ( ) ) if ( ! child . isValid ( ) ) return false ; return true ; }
public AppSettingsBase setDouble ( String key , double value ) { setDouble ( key , value , _prefApp ) ; return this ; }
public boolean onQueryTextSubmit ( String term ) { currentPage = 1 ; businessServiceClient . updateTerm ( term ) ; progressBar . setVisibility ( View . VISIBLE ) ; businessServiceClient . refreshBusinessList ( ) ; return true ; }
public void run ( ) { doPair ( ) ; btnFindDevices . setText ( "Connected" ) ; }
public void undoDeleteSuccessfully ( Event event ) { adapter . restoreItem ( event ) ; checkIfEmptyViewToBeDisplayed ( ) ; }
public void testMockCircumference ( ) { when ( mainViewModel . getCircumference ( ) ) . thenReturn ( dummyCircumference ) ; double volume = mainViewModel . getCircumference ( ) ; verify ( cuboidModel ) . getCircumference ( ) ; assertEquals ( dummyCircumference , volume , 0 . 0001 ) ; }
public void listen ( FindMultiCallback callback ) { cb = callback ; execute ( ) ; }
public int getPosition ( ) { int pos = viewHolder . getAdapterPosition ( ) ; Log . i ( Helper . TAG , "ItemDetails pos = " + pos ) ; return pos ; }
public void onSuccess ( UploadTask . TaskSnapshot taskSnapshot ) { profileImageUrl = taskSnapshot . getDownloadUrl ( ) . toString ( ) ; }
public boolean isStruggling ( ) { return mConnecting && mRetryCount > 5 ; }
public void onSuccess ( ) { Log . i ( TAG , "set key success" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_SET_KEYS_SUCCESS , new ArrayList < String > ( ) ) ; }
public List < String > getUuid ( ) { return uuid ; }
public void onStop ( ) { handleStopRequest ( null ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . getMenuInflater ( ) . inflate ( R . menu . circles_intersection , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public Searcher ( ) { ioScheduler = io ( ) ; uiScheduler = mainThread ( ) ; observableResults = new MutableLiveData < SearchState > ( ) ; }
public synchronized void remove ( final K key , final V value ) { WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list != null ) { list . remove ( value ) ; } }
public void onReset ( ) { mCommandEditor . runOp ( mCommandEditor . moveRel ( 0 ) ) ; }
public void removeUpdateListener ( ValueAnimator . AnimatorUpdateListener updateListener ) { rootLayer . removeAnimatorUpdateListener ( updateListener ) ; }
public void setQueueFixesMax ( int val ) { prefs . edit ( ) . putInt ( QUEUE_FIXES_MAX , val ) . commit ( ) ; }
public boolean isAmountZero ( ) { return mAmount . equals ( BigDecimal . ZERO ) ; }
public boolean isLocationsEnabled ( ) { return mSharedPref . getBoolean ( LOG_LOCATIONS , false ) ; }
public void loadLibraries ( ) { for ( String lib : getLibraries ( ) ) { System . loadLibrary ( lib ) ; } }
public void setReadingRelation ( List < String > readingRelation ) { mReadingRelation = readingRelation ; }
public void pushNodeConfiguration ( Account account , final String node , final Bundle options , final OnConfigurationPushed callback ) { pushNodeConfiguration ( account , account . getJid ( ) . toBareJid ( ) , node , options , callback ) ; }
public void addItem ( int position , StatusViewData statusViewData ) { statuses . add ( position , statusViewData ) ; notifyItemInserted ( position ) ; }
public void onUploadMediaButtonClicked ( boolean allowMultipleSelection ) { mEditorFragmentListener . onAddMediaClicked ( allowMultipleSelection ) ; }
public void delete ( int refID ) { dbMain . delete ( tableNameMain , dbHelperMain . COLUMN_CC_ID + " = " + refID , null ) ; }
public void release ( ) { isVisualizationSetup = false ; released = true ; dBmArray = null ; ampsArray = null ; audioVisualization = null ; }
public final void setY ( int v ) { this . _y = v ; }
public void setSo2 ( int so2 ) { this . so2 = so2 ; }
public int getIeme ( ) { return this . ieme ; }
public TeamRenderer provideTeamRenderer ( APICache cache ) { return Mockito . mock ( TeamRenderer . class ) ; }
public void testGetType ( ) { item . populate ( new TestItem ( ) { @ Override public String getRawType ( ) { return "poll" ; } } ) ; assertEquals ( ItemManager . Item . POLL_TYPE , item . getType ( ) ) ; }
public BigInteger shiftLeft ( Integer n ) { if ( n < 0 ) { return rShift ( - n ) ; } else { return lShift ( n ) ; } }
public Consumer < File > sendTaskLauncher ( AppController appController ) { return appController : : sendTask ; }
public NotificationManager provideNotificationManager ( Context context ) { return ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ; }
private void setupRecyclerView ( ) { RecyclerView . LayoutManager linearLayoutManager = new LinearLayoutManager ( getApplicationContext ( ) , LinearLayoutManager . VERTICAL , false ) ; rcvLastTranslatedWords . setLayoutManager ( linearLayoutManager ) ; rcvLastTranslatedWordsAdapter = new RcvLastTranslatedWordsAdapter ( this , lastTranslatedWordsList ) ; rcvLastTranslatedWords . setAdapter ( rcvLastTranslatedWordsAdapter ) ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createHerptile ( data ) ; }
public static DBSubjects setupInstance ( Context context ) { if ( mInstance == null ) mInstance = new DBSubjects ( context , DatabaseCreator . TABLE_NAME_SUBJECTS ) ; return mInstance ; }
public SyncEvent ( int status ) { this . status = status ; }
public void onDismissed ( Snackbar transientBottomBar , int event ) { if ( event != DISMISS_EVENT_ACTION ) HelperUtils . showTargetedAdvice ( MainActivity . this , Configuration . ADVICE_RECORDED_TRACKS , R . string . advice_recorded_tracks , mRecordButton , false ) ; }
private static String getStringPreference ( Context context , String key , String defaultValue ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getString ( key , defaultValue ) ; }
public void setListVisible ( ) { RelativeLayout settingFrame = ( RelativeLayout ) getActivity ( ) . findViewById ( R . id . list_frame ) ; settingFrame . setVisibility ( View . VISIBLE ) ; }
public KeyboardAwareLinearLayout ( Context context ) { super ( context ) ; }
private void zoomEnd ( ) { renderPage ( true ) ; }
public void onReceivedIcon ( @ NonNull WebView view , Bitmap icon ) { mLightningView . getTitleInfo ( ) . setFavicon ( icon ) ; mUIController . tabChanged ( mLightningView ) ; cacheFavicon ( view . getUrl ( ) , icon , mActivity ) ; }
public void onPop ( ) { callOnClick ( ) ; }
public void attachView ( @ NonNull ConnectionMvvm . View view , @ Nullable Bundle savedInstanceState ) { super . attachView ( view , savedInstanceState ) ; setModeId ( preferences . getMode ( ) ) ; }
public void setVisibleYRangeMinimum ( float minYRange , AxisDependency axis ) { float yScale = getDeltaY ( axis ) / minYRange ; mViewPortHandler . setMaximumScaleY ( yScale ) ; }
public JSONObject getBalance ( ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/balance" , mUserId ) , requestMap ) ; }
public void onClick ( View v ) { mKiSeekBar . setProgress ( mKiSeekBar . getProgress ( ) - 10 ) ; }
public void setup ( WelcomeScreenConfiguration config ) { isRtl = config . isRtl ( ) ; totalPages = config . pageCount ( ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_content , container , false ) ; }
public LiveData < Boolean > isTitlePresent ( ) { return Transformations . map ( getEntity ( ) , entity -> entity . getTitle ( ) != null ) ; }
public void write ( String path , String entry ) throws IOException { BufferedInputStream bis = new BufferedInputStream ( new FileInputStream ( path ) , BUFFER_SIZE ) ; ZipEntry ze = new ZipEntry ( entry ) ; writeEntry ( bis , ze ) ; }
public ClockView ( Context context , @ Nullable AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; initView ( context , attrs , defStyleAttr ) ; }
public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , String rootKey ) { Log . w ( TAG , "onCreatePreferences . . . " ) ; addPreferencesFromResource ( R . xml . recipient_preferences ) ; }
public void onBindViewHolder ( DayHolder holder , int position ) { ScreeningDay day = mDays . get ( position ) ; holder . onBind ( day ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { super . onStartCommand ( intent , flags , startId ) ; startForeground ( Helper . NOTIFICATION_SEND , getNotificationService ( ) . build ( ) ) ; return START_STICKY ; }
public void upgrade ( ) { if ( disconnectSockerTimerTask != null ) disconnectSockerTimerTask . cancel ( ) ; notifier = false ; send ( "upgrade_notifier" , new JSONObject ( ) ) ; }
private APDE getGlobalState ( ) { return ( APDE ) getApplication ( ) ; }
public void testIsWPCOMURI2 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( wpcomAddress2 ) ) ) ; }
public static boolean isFixEmptyParagraphs ( ) { return getBoolean ( R . string . pref_key_fix_empty_paragraphs , true ) ; }
public static boolean isDefaultSmsProvider ( Context context ) { return ( Build . VERSION . SDK_INT < Build . VERSION_CODES . KITKAT ) || ( Telephony . Sms . getDefaultSmsPackage ( context ) . equals ( context . getPackageName ( ) ) ) ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( Activity_Credits . this ) ; Intent intent = new Intent ( Activity_Credits . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
public void success ( Repository result ) { BUS . post ( new RepositoryDownloadedEvent ( item ) ) ; }
public void onSaveInstanceState ( @ NonNull final Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelableArrayList ( SAVED_STATE_IMAGELIST , new ArrayList <> ( imageList . getCurrentList ( ) ) ) ; outState . putBundle ( SAVED_STATE_IMAGEHELPER , imageHelper . getState ( ) ) ; }
public Bundle addAccount ( AccountAuthenticatorResponse response , String accountType , String authTokenType , String [ ] requiredFeatures , Bundle options ) throws NetworkErrorException { return null ; }
public CountryCodesAdapter ( Context context , int viewId , int dropdownViewId ) { this ( context , new ArrayList < CountryCode > ( ) , viewId , dropdownViewId ) ; }
private boolean deleteTableFile ( String database , String table ) { String fileName = getFileName ( database , table ) ; return context . deleteFile ( fileName ) ; }
public boolean isLoading ( ) { return player . isLoading ( ) ; }
public < T > T getSpecificValue ( Context context , @ Nullable String . . . args ) { return getSpecificOverriddenValue ( context , ( T ) getDefaultValue ( ) , args ) ; }
public void setResourcelist ( ) { this . resourcelist = gson . toJson ( resources , formresourcelistType ) ; }
private ArrayList < File > toList ( File file ) { ArrayList < File > files = new ArrayList <> ( 1 ) ; files . add ( file ) ; return files ; }
public String name ( String armorName ) { return Utils . format ( Game . getVar ( R . string . Bounce_Txt ) , armorName ) ; }
public boolean onQueryTextChange ( String queryText ) { mSearchQuery = queryText ; if ( ! TextUtils . isEmpty ( mSearchQuery ) ) { mListPresenter . getCharacters ( mSearchQuery ) ; return true ; } return false ; }
public int getEntryIndex ( Entry e ) { return mValues . indexOf ( e ) ; }
private static void unsubscribe ( ) { Log . d ( TAG , "unsubscribe ( ) " ) ; Nearby . Messages . unsubscribe ( mNearbyClient , mMessageListener ) ; mActivity . nativeNearbySubscription ( - 1 , 3 ) ; }
public void showImagesViaNearbyInfo ( ) { launchAlert ( getResources ( ) . getString ( R . string . statistics_wikidata_edits ) , getResources ( ) . getString ( R . string . images_via_nearby_explanation ) ) ; }
public static String formatLocationResultString ( Location location ) { return formatLocationResultString ( new org . odk . collect . location . Location ( location . getAltitude ( ) , location . getLongitude ( ) , location . getAltitude ( ) , location . getAccuracy ( ) ) ) ; }
public DB_Location_NoeC getLocationtoPosition ( int position ) { return filteredData . get ( position ) ; }
public Follower ( int id , String display_name , String logo , String created_at , boolean notifications , long last_updated ) { super ( id , display_name , logo , created_at , notifications , last_updated ) ; }
public GetAuthRepoInteractor ( @ NonNull InteractorExecutorInterface interactorExecutor , @ NonNull Repository repository ) { super ( interactorExecutor ) ; this . repository = repository ; }
public FigureType getRotatedFigure ( ) { return FigureType . Z_FIGURE ; }
public static void PCACompute ( Mat data , Mat mean , Mat eigenvectors , int maxComponents ) { PCACompute_0 ( data . nativeObj , mean . nativeObj , eigenvectors . nativeObj , maxComponents ) ; return ; }
public String getAuthorFirstName ( ) { return StringUtils . notNullStr ( authorFirstName ) ; }
public void play_LettersMode ( ) { this . PlayMp3 ( R . raw . az_letters_mode ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { disableTagWriteMode ( ) ; writeTagDialog . hide ( ) ; }
private String getPlantAddressFromOpenStreetMap ( Plant plant ) throws IOException , ErrorWithExplanation , KeyManagementException , NoSuchAlgorithmException { return getURL ( plant . getPosition ( ) . getOpenStreetMapAddressUrl ( ) , false ) ; }
public AddIngredientParams ( @ NonNull AddIngredientType type , @ NonNull String extraName ) { this . type = type ; this . extraName = extraName ; }
private void finishCancel ( ) { Intent resultData = new Intent ( ) ; setResult ( RESULT_CANCELED , resultData ) ; finish ( ) ; }
public List < String > getDialect ( ) { return mDialect ; }
public void showToast ( int stringRes , boolean error ) { ToastUtil . ToastType toastType = error ? ToastUtil . ToastType . ERROR : ToastUtil . ToastType . SUCCESS ; ToastUtil . showShortToast ( mPatientDashboardActivity , toastType , stringRes ) ; }
public void onStop ( ) { mHandler . removeCallbacks ( runnableConfiguring ) ; super . onStop ( ) ; }
public void onExit ( @ NonNull Action action , @ NonNull PointF location ) { _homeActivity . getDock ( ) . clearCachedOutlineBitmap ( ) ; dragNDropView . cancelFolderPreview ( ) ; }
public DrawerLayout getDrawerLayout ( ) { return drawerLayout ; }
public SessionInfo process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return new SessionInfo ( obj . getJSONObject ( "result" ) ) ; }
public void setValueVisibility ( boolean isVisible ) { setFlat ( isVisible , GraphColumnModel . FLAG_COLUMN ) ; }
private void createFragmentWithExistingQuestions ( ) { createFragment ( null , false , null , null , mQuestions ) ; }
public void setfN ( double fN ) { this . fN = fN ; }
public static boolean isMediaDocument ( Uri uri ) { return "com . android . providers . media . documents" . equals ( uri . getAuthority ( ) ) ; }
public void onDataLoaded ( List < CityWeather > weatherData ) { callback . onDataListLoaded ( weatherData ) ; refreshCache ( weatherData ) ; checkWeatherServer ( weatherData , callback ) ; }
public Schedule findItemById ( int id ) { return realm . where ( Schedule . class ) . equalTo ( "id" , id ) . findFirst ( ) ; }
public void setPriority ( long priority ) { this . priority = priority ; }
public SelectCropAdapter ( Context context , List < Plots > dataset , SelectCropFragment . OnFragmentInteractionListener fragmentListener ) { this . context = context ; this . dataset = dataset ; }
private void setNumberOfPagesForAdvanced ( ) { mSectionsStatePagerAdapter . setNumberOfPages ( 6 ) ; mSectionsStatePagerAdapter . notifyDataSetChanged ( ) ; }
public void onClick ( View v ) { onEditUrlCallback ( ) ; }
public SuggestionLoader ( Context context , String input , List < Manager > managers , InputSearchManager searchManager ) { super ( context ) ; this . input = input ; this . managers = managers ; this . searchManager = searchManager ; }
public void onCreatePreferences ( final Bundle savedInstanceState , final String rootKey ) { setPreferencesFromResource ( R . xml . preferences_logging , rootKey ) ; logTemplatesCategory = findPreference ( getString ( R . string . pref_fakekey_category_logTemplate ) ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , finalInfo , 0 , false ) ; }
public void setAdditionalInputMethodSubtypes ( final InputMethodSubtype [ ] subtypes ) { mImmWrapper . mImm . setAdditionalInputMethodSubtypes ( getInputMethodIdOfThisIme ( ) , subtypes ) ; refreshSubtypeCaches ( ) ; }
public void postSticky ( Object event ) { Log . i ( "EventBus" , "postSticky ( ) " + event . getClass ( ) . getSimpleName ( ) + " : " + event ) ; super . postSticky ( event ) ; }
public void available ( ) { int amount = 12 ; cs . moveTo ( ( int ) len - amount ) ; assertEquals ( amount , cs . available ( ) ) ; }
public Builder timeout ( int timeout , TimeUnit timeUnit ) { long timeoutMs = timeUnit . toMillis ( timeout ) ; this . mTimeout = ( int ) Math . min ( timeoutMs , Integer . MAX_VALUE ) ; return this ; }
public static < T > FindExecutor findAsync ( Class < T > modelClass , long id ) { return findAsync ( modelClass , id , false ) ; }
public int getItemCount ( ) { return mDataset . length ; }
private void computeNextDueDate ( boolean fromComplete ) throws ParseException { nextDueDate = RepeatTaskCompleteListener . computeNextDueDate ( task , rrule . toIcal ( ) , fromComplete ) ; }
public void testEditTextsAreNotNull ( ) { assertNotNull ( et_instance ) ; assertNotNull ( et_username ) ; }
public static void setCurrentLocationInfo ( Location currentLocationInfo ) { Session . currentLocationInfo = currentLocationInfo ; }
private ArrayList < BackportAppointment > getLocalsAsList ( ) { ArrayList < BackportAppointment > weeks = new ArrayList < BackportAppointment > ( ) ; for ( ArrayList < BackportAppointment > week : localTimetables . values ( ) ) weeks . addAll ( week ) ; return weeks ; }
public void appListener ( List < AppData > list , Integer integer , Boolean aBoolean , String [ ] strings , Boolean aBoolean1 , Integer integer1 ) { AppList . sort ( list , AppList . BY_APPNAME_IGNORE_CASE , AppList . IN_ASCENDING , integer1 ) ; }
public void onParentNotFound ( ) { throw new ParentNotFoundException ( "Cannot add header without parent" ) ; }
public String getEmulation ( ) { return prefs . getString ( PreferenceConstants . EMULATION , "screen" ) ; }
public void clearButtons ( ) throws IOException { mClientHandlerFactory . clearButtons ( ) ; }
public void run ( ) { TVTracklistEmpty . setVisibility ( data . isEmpty ( ) ? View . VISIBLE : View . GONE ) ; adapter . notifyDataSetChanged ( ) ; }
private double foottomm ( double num ) { return num * 304 . 8 ; }
private void showFullImage ( ) { ViewPosition position = ViewPosition . from ( image ) ; FullImageActivity . open ( this , position , PAINTING_ID ) ; }
private boolean verifyHostMatch ( URL url ) throws MalformedURLException { URL listUrl = new URL ( mListUrl ) ; return url . getHost ( ) . equals ( listUrl . getHost ( ) ) ; }
public void onViewAttachedToWindow ( VH holder , int viewType ) { if ( isWrappedAdapterAlive ( ) ) { WrappedAdapterUtils . invokeOnViewAttachedToWindow ( mWrappedAdapter , holder , viewType ) ; } }
public static int divideCeil ( int num , int divisor ) { return ( num + divisor - 1 ) / divisor ; }
public void onResume ( ) { super . onResume ( ) ; VpnStatus . addByteCountListener ( this ) ; mHandler . postDelayed ( triggerRefresh , OpenVPNManagement . mBytecountInterval*1500 ) ; }
public RedditSubreddit getSubreddit ( ) { return subreddit ; }
public String getAuthorNickname ( ) { return author ; }
public String getWidthParam ( ) { return "_" + getWidthParamNoUnderScore ( ) ; }
public DayData getDayDataAt ( int position ) { return checkNotNull ( data . get ( position ) ) ; }
public void cancelLongPress ( ) { super . cancelLongPress ( ) ; if ( getQuestionMediaLayout ( ) != null ) { getQuestionMediaLayout ( ) . cancelLongPress ( ) ; } if ( getHelpTextView ( ) != null ) { getHelpTextView ( ) . cancelLongPress ( ) ; } }
public void linkedOrThrow ( ) throws IOException { if ( ! isLinked ( ) ) { throw new IOException ( NOT_LINKED ) ; } }
public boolean onQueryTextChange ( String newText ) { queryWithHandler ( newText ) ; return true ; }
public void onMenuItemReselect ( int i , int i1 ) { }
public void onPositive ( MaterialDialog dialog ) { puntuaciones . borrarPuntuaciones ( ) ; finish ( ) ; }
private String getPlayerStoneBalanceMessage ( String player ) { if ( player . equals ( player1 ) ) { return DisplayMessage . DRAW_STONE + player1StonesLeft ; } else { return DisplayMessage . DRAW_STONE + player2StonesLeft ; } }
public void setPresenter ( FormDisplayContract . Presenter . MainPresenter presenter ) { this . mPresenter = presenter ; }
public void addScore ( Element el , int score ) { int old = getScore ( el ) ; setScore ( el , score + old ) ; }
public CampaignView ( @ NonNull Context context ) { super ( context ) ; init ( context ) ; }
public GeneralSettingsPage clickOnAutoSend ( ) { clickOnString ( R . string . autosend_selector_title ) ; return this ; }
public void setViews ( int views ) { this . views = views ; }
public CustomizeTabsAdapter ( Context context ) { super ( context ) ; mContext = context ; }
private void onUploadResults ( Pair < UploadObject , UploadResult < ? >> pair ) { mDocuments . add ( 0 , ( Document ) pair . getSecond ( ) . getResult ( ) ) ; callView ( IDocListView : : notifyDataSetChanged ) ; }
public void addRssiCallback ( BleRssiCallback callback ) { bleRssiCallback = callback ; }
public static CharSequence replace ( Context context , int size , CharSequence cs , int color ) { return replace ( context , size , cs , - 1 , color ) ; }
private static float centerFromEnd ( int [ ] stateCount , int end ) { return ( float ) ( end - stateCount [ 2 ] ) - stateCount [ 1 ] / 2 . 0f ; }
public AlertDialog build ( ) { return new SpotsDialog ( context , messageId != 0 ? context . getString ( messageId ) : message , themeId != 0 ? themeId : R . style . SpotsDialogDefault , cancelable , cancelListener ) ; }
public void cancelIncomingCallNotification ( ) { cancel ( INCOMING_CALL_NOTIFICATION_ID ) ; }
private void thenShouldHaveWeatherListCountOf ( int expected ) { assertEquals ( expected , mForecastData . getCount ( ) ) ; assertEquals ( expected , mForecastData . getWeatherList ( ) . size ( ) ) ; }
private double pintTolitre ( double num ) { return num * 0 . 473 ; }
private ActivityUtils ( FragmentActivity activity ) { this . activity = activity ; }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . LOG_FUNCTIONS ; }
public TopicController ( final RxSharedPreferences preferences ) { firebase = FirebaseMessaging . getInstance ( ) ; topicPreference = preferences . getString ( "topic" ) ; getTopicChanges ( ) . subscribe ( this : : onTopicSubscriptionChanged ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "UPDATE `identity` SET use_ip = 1" ) ; }
public int hashCode ( ) { return colorPrimary ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . ImageButton" ) ; }
public static void set ( String key , float value ) { prefs . edit ( ) . putFloat ( key , value ) . commit ( ) ; }
public boolean createGeoPackage ( String geoPackageName ) { if ( repository . createGeoPackage ( geoPackageName ) ) { return true ; } return false ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { getDialog ( ) . getWindow ( ) . setSoftInputMode ( SOFT_INPUT_STATE_VISIBLE ) ; return super . onCreateView ( inflater , container , savedInstanceState ) ; }
private static void UpdateContent ( MoodleModuleContent old_content , MoodleModuleContent new_contnent ) { old_content = new_contnent ; old_content . save ( ) ; }
public Func1 < BigDecimal , String > energyAsString ( ) { if ( energyAsString == null ) { energyAsString = decimal -> format ( decimal , settingsModel . getEnergyUnit ( ) ) ; } return energyAsString ; }
public String getUserId ( ) { FirebaseUser user = FirebaseAuth . getInstance ( ) . getCurrentUser ( ) ; return ( user != null ) ? user . getUid ( ) : null ; }
public void setOrigin ( Point _origin ) { this . origin = _origin ; this . updateCalcDistAndScaleFactor ( ) ; }
public String toString ( ) { switch ( this ) { case TIMELINE : return "timeline" ; case EMAIL : return "email" ; case MOBILE : return "device" ; default : return "" ; } }
private void requestDisconnect ( ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessage . getMessage ( MsgType . DISCONNECT ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public void getOutline ( View view , Outline outline ) { outline . setRoundRect ( 0 , 0 , view . getWidth ( ) , Math . round ( view . getHeight ( ) ) , 20F ) ; }
public @ Consts . BUTTON_TYPE int getGoodNewButton ( ) { return 3 ; }
public void onRequiresJetpackLogin ( ) { Intent loginIntent = new Intent ( this , LoginActivity . class ) ; LoginMode . JETPACK . putInto ( loginIntent ) ; loginIntent . putExtra ( LoginActivity . ARG_JETPACK_CONNECT_SOURCE , mSource ) ; startActivityForResult ( loginIntent , JETPACK_LOGIN ) ; }
public QariItem getQariItem ( ) { return mQariItem ; }
public void detachView ( ) { clearSubscriptions ( ) ; mView = null ; }
public void setGlue ( Domain . Glue glue ) { removeAllViews ( ) ; populateV4 ( glue . v4 , R . string . glueV4 ) ; populateV4 ( glue . v6 , R . string . glueV6 ) ; }
private void initTweakName ( ) { tvName . setText ( String . format ( "%s %s" , tweak . getName ( ) , getContext ( ) . getString ( R . string . icon_info ) ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; Drawable drawable = icon_back . getDrawable ( ) ; if ( drawable instanceof BitmapDrawable ) { BitmapDrawable bitmapDrawable = ( BitmapDrawable ) drawable ; bitmapDrawable . getBitmap ( ) . recycle ( ) ; } }
public void close ( ) throws IOException { if ( preparedPlaybackQueue != null ) preparedPlaybackQueue . close ( ) ; }
public CallMessage ( String method , List params ) { super ( ) ; setMethod ( method ) ; setParams ( params ) ; }
public ProfileSettingDrawerItem withTextColorRes ( int textColorRes ) { this . textColor = ColorHolder . fromColorRes ( textColorRes ) ; return this ; }
public Long getRadioBand ( ) { return radioBand ; }
public static AppliesToEntry directEvents ( ) { AppliesToEntry ret = channelEvents ( ) ; ret . matchChannelMessages = false ; ret . matchChannelNotices = false ; return ret ; }
public void onDestroy ( ) { mapViewManager . onDestroy ( ) ; disposeMap ( ) ; super . onDestroy ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . anupya_pamidimukkala . picmyallergy" , appContext . getPackageName ( ) ) ; }
private static void logEvent ( Context context , String event ) { Bundle bundle = new Bundle ( ) ; logEvent ( context , event , bundle ) ; }
public void setJoke ( String data ) { joke = data ; }
public void string_to_date ( ) { Date dActual = null ; try { dActual = dateManager . stringToDate ( context , sActual ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } assertEquals ( dEsperada , dActual ) ; }
public void setSource ( @ NonNull String source ) { this . source = source ; }
public MainView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; bus . register ( this ) ; mContext = ( TinyTimeTracker ) context ; init ( ) ; }
public boolean isGallery ( ) { return format != null && format . equals ( "gallery" ) ; }
public void act ( float delta ) { updateLabels ( ) ; updateCountDownLabel ( ) ; checkFinished ( ) ; if ( mDebugLabel != null ) { updateDebugLabel ( ) ; } }
public CharSequence getDisplayContents ( ) { String contents = getResult ( ) . getDisplayResult ( ) ; contents = contents . replace ( "\r" , "" ) ; return PhoneNumberUtils . formatNumber ( contents ) ; }
public void onTransitionAnimationEnd ( boolean isOpen , boolean backward ) { NotificationCenter . getInstance ( currentAccount ) . setAnimationInProgress ( false ) ; if ( isOpen ) { openAnimationEnded = true ; } }
public void updateCapability ( CapabilityInfo info ) { Set < Node > nodes = info . getNodes ( ) ; nodeId = pickBestNodeId ( nodes ) ; Log . d ( "Wear Cap" , "It was called , Duuude" ) ; }
public void onCreate ( ) { NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded ) ; sizeNotifierLayout . setDelegate ( this ) ; }
private void onGoogleSignInSuccess ( GoogleSignInResult result ) { Log . d ( TAG , "HandleGoogleSignInResult : Success" ) ; GoogleSignInAccount account = result . getSignInAccount ( ) ; authenticateGoogleLogin ( account ) ; }
public void opensTauronSettingsHelp ( ) { tester . openSettings ( ) . pickProvider ( Provider . TAURON ) . openHelp ( ) . clickOk ( ) ; }
public void listUiUpdateFromDb ( ) { getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; setAchievementRate ( ) ; }
public long getParentCommentId ( ) { return JSONUtil . queryJSON ( mNoteJSON , "meta . ids . parent_comment" , 0 ) ; }
public void onSwipeDown ( ) { playDown ( ) ; setPadColorToDefault ( ) ; }
public void tellJoke ( View view ) { Intent intent = new Intent ( this , Joke_Activity . class ) ; intent . putExtra ( "joke" , "this project requirement" ) ; startActivity ( intent ) ; }
public final void setRegionDecoderFactory ( DecoderFactory < ? extends ImageRegionDecoder > regionDecoderFactory ) { if ( regionDecoderFactory == null ) { throw new IllegalArgumentException ( "Decoder factory cannot be set to null" ) ; } this . regionDecoderFactory = regionDecoderFactory ; }
public FoodViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new FoodViewHolder ( ViewUtils . inflate ( parent , R . layout . item_resto_fooditem ) ) ; }
public static FormatException getFormatInstance ( ) { return IS_STACK_TRACE ? new FormatException ( ) : INSTANCE ; }
private void goDashboard ( ) { Intent intent = new Intent ( this , HomeActivity . class ) ; intent . putExtra ( "correo" , txtcorreo . getText ( ) . toString ( ) ) ; startActivity ( intent ) ; finish ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_folder , container , false ) ; ButterKnife . bind ( this , view ) ; return view ; }
public int getAuthor ( ) { return author ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . notificationsSettingsUpdated ) ; }
public WallpaperDataStore createDbDataStore ( ) { return new DbWallpaperDataStore ( context , wallpaperCache , openInputStreamLock , keepWallpaperLock ) ; }
public ReaderTag getCurrentTag ( ) { return mCurrentTag ; }
private void setProfile ( String name , String email , String photo ) { setAvatar ( photo ) ; setProfileName ( name ) ; }
public void onNext ( T wallpapers ) { }
public ValidatorBuilder setWarningProvider ( IWarningProvider warningProvider ) { this . warningProvider = warningProvider ; return this ; }
public void gotoDashboard ( String workflowId ) { goBack ( ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . BACKSPACE ) ; }
public static Observable < CnBetaApi . Result < String >> supportComment ( int tid ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . supportComment ( timestamp , CnBetaSignUtil . supportCommentSign ( timestamp , tid ) , tid ) ; }
public CardTTSUtil ( Context context , @ Assisted String dbPath ) { this . context = context ; this . dbPath = dbPath ; dbOpenHelper = AnyMemoDBOpenHelperManager . getHelper ( context , dbPath ) ; settingDao = dbOpenHelper . getSettingDao ( ) ; initTTS ( ) ; }
public void tearDown ( ) throws Exception { SQLite . delete ( PreferenceModel . class ) . where ( PreferenceModel_Table . key . eq ( TEST_KEY ) ) . execute ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( TimelineDetailActivity . this , ReplyActivity . class ) ; i . putExtra ( "incomingText" , item . getUrl ( ) ) ; startActivity ( i ) ; }
public static Error deleteRegularFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , FileType . REGULAR . getValue ( ) ) ; }
public CanvasBoardView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . setLayerType ( View . LAYER_TYPE_SOFTWARE , null ) ; init ( context , attrs ) ; }
public Model add ( Collection col , String name ) { Models mm = col . getModels ( ) ; Model model = _new ( mm , name ) ; mm . add ( model ) ; return model ; }
public BadgeStyle withColor ( int color ) { this . mColor = ColorHolder . fromColor ( color ) ; return this ; }
public MyMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; tvContent = ( TextView ) findViewById ( R . id . tvContent ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { reflectionUrls = processReflectionsUrls ( dataSnapshot ) ; listener . onDataChange ( dataSnapshot ) ; }
public void onEvent ( OnLogEntryChanged event ) { if ( currentTracker != null && currentTracker . id == event . entry . tracker_id ) { invalidate ( ) ; } }
public boolean requiresSync ( ) { return Prefs . getBoolean ( SETTINGS_REQUIRES_SYNC , false ) ; }
public ProjectsRepository providesProjectsRepository ( ) { return projectsRepository ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createCiconia ( data ) ; }
public void fireAddPhotoButtonClick ( ) { getView ( ) . addPhoto ( getAccountId ( ) , messageOwnerId ) ; }
public static boolean isDecryptFilesInTemp ( ) { return getBoolean ( R . string . pref_key_is_decrypt_in_temp , false ) ; }
public void fetchCurrentTheme ( ) { mDispatcher . dispatch ( ThemeActionBuilder . newFetchCurrentThemeAction ( mSite ) ) ; }
public void onItemClick ( View view , int position ) { if ( position < list . size ( ) ) { switch ( position ) { } } }
public List < Instance > getAllNotDeleted ( ) { try ( Cursor cursor = query ( null , DELETED_DATE + " IS NULL " , null , null ) ) { return getInstancesFromCursor ( cursor ) ; } }
public ChipsEditText ( Context context ) { super ( context ) ; init ( context ) ; }
public String getId ( ) { return "touch" ; }
public void cancelSubmit ( ) { scheduler . cancelDeferred ( getAutoSendTag ( ) ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . open_reference ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( ChooseGameActivity . this , Activity_Credits . class ) ; startActivity ( intent ) ; }
public RedditComment asComment ( ) throws InstantiationException , IllegalAccessException , InterruptedException , IOException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditComment . class ) ; }
public MainViewModel ( @ NonNull Application application ) { super ( application ) ; checkForAvailabilityDB ( ) ; openFragment = 0 ; fragmentName = 0 ; }
public int getDisabledTextColor ( ) { return disabledTextColor ; }
public static void resumePlaying ( ) { if ( musicService != null ) { musicService . play ( false ) ; } }
public void onBindingDied ( ComponentName name ) { loadingDialog . dismiss ( ) ; }
public void setData_callsValueChangeListener ( ) { GeoPointWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setBinaryData ( answer . getDisplayText ( ) ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public int getIconResolution ( ) { return Integer . parseInt ( mSharedPreferences . getString ( KEY_ICONRES , "96" ) ) ; }
public void start ( ) { stop ( ) ; mFakeKeyTimer = new Timer ( ) ; mFakeKeyTask = new FakeKeyTimerTask ( ) ; mFakeKeyTimer . schedule ( mFakeKeyTask , 1000 , 1000 ) ; }
public Builder setOnCancelListener ( OnCancelListener onCancelListener ) { P . mOnCancelListener = onCancelListener ; return this ; }
public void setSession ( UUID session ) { mSession = session ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfLiquidFlame_Info ) ; }
private void buildMainMenu ( ) { MainMenuTask task = new MainMenuTask ( this , this ) ; task . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void setGooglePlaceId ( String google_place_id ) { this . _google_place_id = google_place_id ; }
public String getName ( ) { if ( mRootElement == null ) return "" ; String result = xu . findElementText ( mRootElement , R . string . xml2elemName_name ) ; if ( result == null ) return "" ; else return result ; }
public void onPositionUpdate ( float position , boolean isLeaving ) { if ( position == 0f && isLeaving ) { clear ( ) ; } }
public boolean onNavigationItemSelected ( @ NonNull MenuItem item ) { updateDisplayedFragment ( item . getItemId ( ) , null ) ; return false ; }
public CatMeasureJoin ( String category , String measurement ) { this . category = category ; this . measurement = measurement ; }
private boolean showGroupNameEmptyToast ( String groupName ) { if ( groupName == null ) { Toast . makeText ( this , getString ( R . string . GroupCreateActivity_please_enter_group_name ) , Toast . LENGTH_LONG ) . show ( ) ; return true ; } return false ; }
private TermuxAPIAppSharedPreferences ( @ Nonnull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
public int getSitesCount ( ) { return mSites . size ( ) ; }
public void visitNodes ( final NodeVisitor < T > visitor ) { doVisit ( rootElement , visitor ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . getMenuInflater ( ) . inflate ( R . menu . main , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void setCurrentTheme ( @ NonNull Theme theme ) { if ( theme != currentTheme ) { currentTheme = theme ; Prefs . setCurrentThemeId ( currentTheme . getMarshallingId ( ) ) ; bus . post ( new ThemeFontChangeEvent ( ) ) ; } }
public void run ( ) { uploadWebView . loadUrl ( DtubeAPI . DTUBE_LOGIN_URL ) ; }
public DrawerText ( String title ) { this . title = title ; }
public void cancelRequestsForGuid ( int guid ) { native_cancelRequestsForGuid ( guid ) ; }
public Progress ( API . Callback callback ) { super ( ) ; callbacks . add ( callback ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `pop` INTEGER NOT NULL DEFAULT 0" ) ; }
public void dayThree ( View v ) { Intent one = new Intent ( Schedule . this , DayThree . class ) ; startActivity ( one ) ; }
public void onFailure ( @ NonNull Call < GistComment > call , @ NonNull Throwable t ) { showError ( t . getLocalizedMessage ( ) ) ; }
public CustomMontserratSemiBoldEditText ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; applyFont ( context ) ; }
private static WorkEntity createWorkItem ( int position ) { WorkEntity workEntity = new WorkEntity ( ) ; workEntity . setWorkId ( position ) ; workEntity . setTitle ( "Work " + position ) ; workEntity . setDescription ( makeDetails ( position ) ) ; return workEntity ; }
public Patient findPatientByUUID ( String uuid ) { try { PatientEntity patient = patientRoomDAO . findPatientByUUID ( uuid ) . blockingGet ( ) ; return AppDatabaseHelper . patientEntityToPatient ( patient ) ; } catch ( Exception e ) { return null ; } }
public StringAdapter ( final Context context , final List objects , final int layoutId ) { super ( context , layoutId , objects ) ; }
public boolean isInBoundsTop ( float y ) { return mContentRect . top <= y ? true : false ; }
public void execute ( AppCompatActivity activity , Bundle args , String name ) { run ( activity , activity , args , name ) ; }
public Config setErrorIcon ( @ Nullable Drawable errorIcon ) { this . errorIcon = errorIcon ; return this ; }
public void onPause ( ) { super . onPause ( ) ; LocalBroadcastManager . getInstance ( getContext ( ) ) . unregisterReceiver ( mSyncBroadcastReceiver ) ; PreferenceManager . getDefaultSharedPreferences ( getContext ( ) ) . unregisterOnSharedPreferenceChangeListener ( this ) ; }
public void onBufferingUpdate ( MediaPlayer mp , int percent ) { mBufferPercentage = percent ; }
public void onEventMainThread ( LokAddEvent event ) { super . onEventMainThread ( event ) ; Intent intent = ( new Intent ( this , TrainHandler . class ) ) ; ; intent . putExtra ( "train_addr" , event . getAddr ( ) ) ; startActivity ( intent ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( getArguments ( ) != null ) { mKey = getArguments ( ) . getFloatArray ( ARG_KEY ) ; range = getArguments ( ) . getString ( ARG_RANGE ) ; } }
public void onSuccess ( Boolean result ) { thumbnail . clear ( ) ; attachmentViewStub . get ( ) . setVisibility ( View . GONE ) ; attachmentListener . onAttachmentChanged ( ) ; }
public void loadMenuSceneResources ( ) { loadMenuSceneGraphics ( ) ; loadMenuSceneMusic ( ) ; }
public boolean shoot ( Char enemy , MissileWeapon wep ) { rangedWeapon = wep ; boolean result = attack ( enemy ) ; rangedWeapon = null ; return result ; }
public void onRefresh ( ) { posts . loadMore ( adapter , subreddit , where , true ) ; }
public void run ( ) { swipeRefreshLayout . setRefreshing ( true ) ; }
public Fragment getItem ( int position ) { return tabFragments [ position ] ; }
public void showNoMoreContent ( ) { showSnackBar ( R . string . no_more_articles ) ; showNothingTipsIfNeed ( ) ; }
public void onClick ( View v ) { showDialog ( DIALOG_JOIN_COMMUNITY ) ; }
private int getDragViewMarginBottom ( ) { return transformer . getMarginBottom ( ) ; }
public void setUpViews ( ) { setLangKnown_Spinner ( ) ; setLangLearn_Spinner ( ) ; }
public String getBluetoothICFirmwareName ( ) { return mBluetoothConnector . mBluetoothIcDevice . getBluetoothIcName ( serviceUUID2p1 ) ; }
public void onBindViewHolder ( aboutPageViewHolder holder , int position ) { holder . about_Title . setText ( tDataset [ position ] ) ; holder . about_subTitle . setText ( stDataset [ position ] ) ; }
public void goTeam ( View view ) { Intent newIntent = new Intent ( this , teamActivity . class ) ; startActivity ( newIntent ) ; }
public ImportReplace ( String path ) { this . path = path ; }
public static String getScope ( ) { return "friends , audio , groups , offline , wall , messages , notifications , notify , photos , video , docs" ; }
public void onItemClick ( Gist gist ) { startActivity ( GistActivity . makeIntent ( getActivity ( ) , gist . getId ( ) ) ) ; }
public boolean onQueryTextSubmit ( @ NonNull String query ) { currentOccurrence ++ ; jumpToOccurrence ( ) ; colorWithText ( query , currentOccurrence ) ; return true ; }
public void callShowNotify ( ) { showNotify ( ) ; }
public ExampleAdapter ( Context context , Comparator < ExampleModel > comparator , Listener listener ) { super ( context , ExampleModel . class , comparator ) ; mListener = listener ; }
private void closeWithResult ( ) { if ( mPreferenceChanged ) { setResult ( RESULT_OK ) ; } else { setResult ( RESULT_CANCELED ) ; } finish ( ) ; ActivityTransitionAnimation . slide ( this , ActivityTransitionAnimation . FADE ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_schedule_cards , container , false ) ; }
public void doAttack ( Char enemy ) { if ( timeToJump ) { jump ( ) ; ; } super . doAttack ( enemy ) ; }
public void hit ( ) { if ( -- mHP == 0 ) { SCORE += 50 ; destroy ( ) ; } else { mSoundPlayer . playExplode ( ) ; } }
public TimeLineAdapter . TimeLineViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { mContext = parent . getContext ( ) ; mLayoutInflater = LayoutInflater . from ( mContext ) ; View view ; return new TimeLineViewHolder ( view , viewType ) ; }
private void setDefaultStatusBarColor ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) { getActivity ( ) . getWindow ( ) . setStatusBarColor ( getResources ( ) . getColor ( R . color . theme_primary_dark ) ) ; } }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_edit_server , menu ) ; return true ; }
private static void migrate29 ( final Context context , final InjectProvider injectProvider ) { injectProvider . getStorage ( ) . delete ( context , Storage . CACHE , Storage . USER , "eregister#core" ) ; }
public AboutBuilder addUpdateAction ( int appId ) { return addUpdateAction ( context . getString ( appId ) ) ; }
public void setLabel ( String label ) { _name = label ; }
public static API instance ( ) { return apiFromId ( Settings . getAPIId ( ) ) ; }
public int getCount ( ) { return mTitle . length ; }
public void setInfo ( TLRPC . ChatFull chatFull ) { info = chatFull ; if ( info != null && info . stickerset != null ) { selectedStickerSet = DataQuery . getInstance ( currentAccount ) . getGroupStickerSetById ( info . stickerset ) ; } }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `identity` ADD COLUMN `encrypt` INTEGER NOT NULL DEFAULT 0" ) ; }
public void onBindViewHolder ( @ NonNull ListViewItemViewHolder holder , int position ) { final TrackModel track = getItem ( position ) ; holder . setAlbumTrack ( track , mShowDiscNumber ) ; holder . itemView . setLongClickable ( true ) ; }
public void onRefresh ( ) { makeRequestItem ( true , true ) ; makeNetworkCallShopItem ( ) ; }
private void initVibratePrefs ( ) { binding . vibrationOptionPrefs . setChecked ( mPrefs . isBirthdayVibrationEnabled ( ) ) ; binding . vibrationOptionPrefs . setOnClickListener ( view -> changeVibrationPrefs ( ) ) ; binding . vibrationOptionPrefs . setReverseDependentView ( binding . globalOptionPrefs ) ; }
public int lastPageIndex ( ) { return isRtl ( ) ? 0 : builder . pages . size ( ) - 1 ; }
public HeadphoneReceiver ( HeadphoneIconData iconData ) { super ( iconData ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { if ( mView != null ) { mView . showPrices ( mCache ) ; } }
public void showError ( String text ) { if ( isAdded ( ) ) { Utils . showRedTopToast ( getActivity ( ) , text ) ; } }
public void onBackPressed ( ) { if ( ! mNavigationManager . onBackPressed ( ) ) { finish ( ) ; } }
public static String formatEthCurrency ( Context ctx , Long balance ) { return formatCurrency ( ctx , balance , CurrencyEnum . ETH ) ; }
private void closeBridge ( final TerminalBridge bridge ) { updateEmptyVisible ( ) ; updatePromptVisible ( ) ; if ( pager . getChildCount ( ) == 0 ) { finish ( ) ; } }
public void startClient ( ) { isServiceStarted = true ; Log . d ( TAG , "startClient : Scan the background , search servers to join" ) ; startScanning ( ) ; }
public Text ( String mText ) { this . mText = mText ; }
public static void enqueueAnimator ( Animator animator ) { mAnimSync . addWaitingAnimation ( animator ) ; }
public void setSlideOnFling ( Boolean result ) { layoutManager . setShouldSlideOnFling ( result ) ; }
public void notifyTabViewAdded ( ) { Log . d ( Constants . TAG , "Notify Tab Added" ) ; mTabsView . tabAdded ( ) ; }
public String getName ( ) { return "de_DE" ; }
public void beforeTextChanged ( String s , boolean isManualInput ) { }
public ListAdapter onCreateList ( SimpleAlertDialog dialog , int requestCode ) { if ( requestCode == REQUEST_CODE_ADAPTER ) { return new SweetsAdapter ( this , SWEETS_LIST ) ; } return null ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { userPreferences . setFilter_CardStatus ( parent . getItemAtPosition ( position ) . toString ( ) ) ; filterCards ( ) ; onResume ( ) ; }
public void resetConnections ( ) { for ( final CoinType type : connections . keySet ( ) ) { ServerClient connection = connections . get ( type ) ; if ( connection . isActivelyConnected ( ) ) connection . resetConnection ( ) ; } }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . didStartedCall ) ; }
public void testUnplayedEvent ( ) { DatafeedTestDriver . testSimpleParsing ( mSubscriber , new TeamAtEventSummarySubscriber . Model ( null , mEvent ) ) ; }
public void openFileChooser ( ValueCallback < Uri > uploadMsg ) { mActivity . openFileChooser ( uploadMsg ) ; }
public int getItemCount ( ) { return mSensorsGridItems . size ( ) ; }
public void setAccount ( WalletAccount account ) { this . type = account . getCoinType ( ) ; title . setText ( WalletUtils . getDescriptionOrCoinName ( account ) ) ; icon . setImageResource ( WalletUtils . getIconRes ( account ) ) ; }
public int getEndingMinute ( Subject subject ) { return getEndingMinute ( subject . getSchoolHour ( ) ) ; }
public static void enableVibration ( boolean enable , Context context ) { run ( Control . write ( enable ? "1" : "0" , VIBRATION ) , VIB_VIBRATION , context ) ; }
public void retryLoadFacilities ( ) { retryLoadButton . setVisibility ( View . INVISIBLE ) ; loadingTextView . setText ( "" ) ; loadingTextView . setVisibility ( View . INVISIBLE ) ; loadingProgressBar . setVisibility ( View . VISIBLE ) ; loadFacilities ( ) ; }
private boolean frontCameraUsed ( ) { Bundle bundle = getActivity ( ) . getIntent ( ) . getExtras ( ) ; return bundle != null && bundle . getBoolean ( WidgetAppearanceUtils . FRONT ) ; }
public String name ( ) { return Game . getVar ( R . string . RatKingCrownBuff_Name ) ; }
public StopRequest checkPauseStop ( ) { if ( pause ) return new StopRequest ( STATUS_PAUSED , "Download paused" ) ; else if ( cancel || Thread . currentThread ( ) . isInterrupted ( ) ) return new StopRequest ( STATUS_STOPPED , "Download cancelled" ) ; return null ; }
public void onConnectionFailed ( @ NonNull ConnectionResult connectionResult ) { Toast . makeText ( this , "Connection Failed" , Toast . LENGTH_SHORT ) . show ( ) ; }
private LocationManager getLocationManager ( ) { return ( LocationManager ) fragmentActivity . getSystemService ( Context . LOCATION_SERVICE ) ; }
public static void changeMode ( BaseViewModel viewModel ) { if ( isDay ( ) ) { setNight ( ) ; } else { setDay ( ) ; } mViewModel = viewModel ; shouldClear = true ; }
public List < KanjiElement > getKanjiElements ( ) { return mKanjiElements ; }
public void onNothingSelected ( AdapterView < ? > parent ) { langSelection = LegendsContract . Languages . LANG_EN ; }
public EventBuilder setDescription ( String description ) { this . description = description ; return this ; }
public AvatarView ( final Context context , final String imagePath , int userId , String username ) { this ( context , null ) ; update ( context , imagePath , userId , username ) ; }
public void requestReconnect ( TerminalBridge bridge ) { synchronized ( mPendingReconnect ) { mPendingReconnect . add ( new WeakReference < TerminalBridge > ( bridge ) ) ; if ( ! bridge . isUsingNetwork ( ) || connectivityManager . isConnected ( ) ) { reconnectPending ( ) ; } } }
public void onClick ( View v ) { setColor ( Color . TRANSPARENT ) ; }
public void testSyncFinishedSnackbar_sameActivity ( ) { syncResultTest ( false ) ; }
public MockTaskManager ( @ Nullable TaskListener < ? super ProgressBackground , ? > listener ) { mTaskListener = listener ; }
public final void unClearRoomForPopUp ( ) { Tool . visibleViews ( getDesktop ( ) ) ; updateDesktopIndicator ( true ) ; updateDock ( true ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getRecipePhotoDbDao ( ) : null ; }
public static String getSettingsSharedName ( ) { return SETTINGS . name ; }
public void setShip ( Enemy e ) { this . s = s ; }
public void onOpenChest ( MotionEvent event ) { for ( OnSomethingHappenedListener listener : new ArrayList <> ( listeners ) ) { listener . onOpenChest ( event ) ; } }
public Drawable getDrawable ( ) { return this . drawableMap . get ( this . currentState ) ; }
private void broadcastUpdate ( final String action ) { if ( action . equals ( ACTION_GATT_CONNECTED ) ) { mConnectionState = STATE_CONNECTED ; } droidsorService . broadcastUpdate ( action ) ; }
private Config getImeConfig ( ) { return Config . get ( this ) ; }
public AppConstants . TokenType getType ( ) { return type ; }
public static void sendOutput ( Context context , int res , int type ) { sendOutput ( SkinManager . COLOR_NOT_SET , context , res , type ) ; }
public InputConnection onCreateInputConnection ( EditorInfo outAttrs ) { return parent . onCreateInputConnection ( outAttrs ) ; }
public MaterialAboutList ( Builder builder ) { this . cards = builder . cards ; }
public void onUndo ( ) { activity . getItemAdapter ( ) . insertItem ( position , alarm ) ; }
public void setOnFileSubtitleAdapter ( OnFileSubtitleAdapter onFileSubtitleAdapter ) { mOnFileSubtitleAdapter = onFileSubtitleAdapter ; }
public boolean areContentsTheSame ( T oldItem , T newItem ) { return true ; }
public String getFormattedSlider ( ) { return this . getSliderConfigArray ( ) [ this . getSlider ( ) ] ; }
public void onClick ( View v ) { mViewModel . showPreviewModeSelector ( ) ; }
private String getRemovingPluginMessage ( ) { return getString ( R . string . plugin_remove_progress_dialog_message , mSitePlugin . getDisplayName ( ) ) ; }
public boolean onTouch ( View v , MotionEvent event ) { if ( MotionEventCompat . getActionMasked ( event ) == MotionEvent . ACTION_DOWN ) { interaction . onMethodDrag ( holder ) ; } return false ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; when ( formController . getInstancePath ( ) ) . thenReturn ( instancePath ) ; when ( instancePath . getParent ( ) ) . thenReturn ( "" ) ; }
public void onClick ( DialogInterface dialog , int which ) { GroupActivity . Launch ( PasswordActivity . this ) ; }
public void onDismiss ( DialogInterface dialog ) { if ( mdialog . getButtonPressed ( ) == 0 ) { clientModel . buyFullVersion ( ) ; } }
private void updateProgressTextColor ( ) { int color = ColorUtil . getPrimaryTextColor ( getContext ( ) , false ) ; songTotalTime . setTextColor ( color ) ; songCurrentProgress . setTextColor ( color ) ; }
public int getSize ( Paint paint , CharSequence text , int start , int end , Paint . FontMetricsInt fm ) { return Math . round ( mPadding * 4 ) ; }
public String tileDesc ( int tile ) { switch ( tile ) { case Terrain . EMPTY_DECO : return Game . getVar ( R . string . Prison_TileDescDeco ) ; default : return super . tileDesc ( tile ) ; } }
private static boolean isAdImage ( String imageUrl ) { return SHelper . count ( imageUrl , "ad" ) >= 2 ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . bind ( list . get ( position ) , position ) ; }
public void onLoadFinished ( Loader < Cursor > loaderCursor , Cursor cursor ) { Log . d ( TAG , "Accounts loader finished . Swapping in cursor" ) ; mAccountsCursorAdapter . swapCursor ( cursor ) ; mAccountsCursorAdapter . notifyDataSetChanged ( ) ; }
public static RealmConfiguration buildDefaultConfiguration ( Context context ) { https : Realm . init ( context ) ; https : return new RealmConfiguration . Builder ( ) . deleteRealmIfMigrationNeeded ( ) . build ( ) ; }
private void fullUpdate ( boolean showErrors ) { updateArticles ( showErrors , Updater . UpdateType . FULL ) ; }
public WMTSHandler ( ) throws ParserConfigurationException , SAXException { contents = new ArrayList <> ( ) ; }
public void setPartOfMealId ( Long partOfMealId ) { this . partOfMealId = partOfMealId ; }
public static void setShowTitle ( Context context , boolean value ) { SharedPreferences sharedPref = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = sharedPref . edit ( ) ; editor . putBoolean ( SHOW_TITLE_KEY , value ) ; editor . commit ( ) ; }
public void onClickActivity ( Activity activity ) { Intent intent = new Intent ( this , PhysicalActivityDetail . class ) ; intent . putExtra ( PhysicalActivityDetail . ACTIVITY_DETAIL , activity ) ; startActivity ( intent ) ; }
public void setup ( WelcomeScreenConfiguration config ) { setColors ( config . getBackgroundColors ( ) ) ; }
public String getDisplayName ( ) { return counterName + " - " + targetValue ; }
public void hideResetButton ( boolean isHidden ) throws IOException { mClientManager . hideResetButton ( isHidden ) ; }
public static CharSequence getKeyboardShortcutSummary ( Context context ) { return context . getString ( R . string . pref_description_keyboard_shortcut_alt ) ; }
public void setFolder ( String folder ) { mFolder = ( folder == null ) ? "" : folder ; }
public NavigationBarAdapter ( Context context , int resource , ArrayList < ColorSelect > objects ) { super ( context , resource , objects ) ; this . context = context ; this . resource = resource ; this . colorSelect = objects ; }
public boolean addRecentPage ( int page ) { return addRecentPage ( page , true ) ; }
public static Boolean isAppForPackageADebuggableBuild ( @ NonNull final Context context ) { return isAppForPackageADebuggableBuild ( context . getApplicationInfo ( ) ) ; }
public void applyZoomPatch ( State state ) { if ( zoomPatch > 0f ) { state . set ( state . getX ( ) , state . getY ( ) , state . getZoom ( ) * zoomPatch , state . getRotation ( ) ) ; } }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; if ( dy < - 5 ) { SupportUtils . hideSoftInput ( mEditText ) ; } }
public void notifyCreation ( Object obj ) { for ( DAO dao : this . daoList ) { dao . create ( obj ) ; } }
public String getPreviewText ( ) { if ( ! Function . isEmpty ( preview ) ) return preview ; return getLabel ( ) ; }
public void testParseTestbedPageWithErrors ( ) throws Exception { initHTMLPage ( "testbed_invalid . html" ) ; TestbedParsedPage page = pageService . downloadAndParseTestbedPage ( "http : }
public ArrayList < Playlist > loadInBackground ( ) { return getAllPlaylists ( getContext ( ) ) ; }
public void onLowMemory ( ) { super . onLowMemory ( ) ; listAdapter . clear ( ) ; stationCache . clear ( ) ; }
public DataFetcher < InputStream > getResourceFetcher ( ArtistImage model , int width , int height ) { return new ArtistImageFetcher ( context , lastFMRestClient , model , urlLoader , width , height ) ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; JobImportActivity . this . doImportJob ( ) ; }
public void onDetach ( ) { preferences = null ; instances = null ; forms = null ; layers = null ; cache = null ; osmDroid = null ; super . onDetach ( ) ; }
public TouchToSelectView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void setViews ( Integer views ) { this . views = views ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; fragmentPagerAdapter = new GridViewFragmentPageAdapter ( getFragmentManager ( ) , mApplication ) ; }
public void setTimestamp ( Integer timestamp ) { this . timestamp = timestamp ; }
public boolean isActive ( ) { return mReminder . isActive ( ) ; }
public SizeMetric getHeightMetric ( ) { return sizeMetrics . getHeightMetric ( ) ; }
public final CuckooPoller getPoller ( ) { return new RainPoller ( ) ; }
public void fabMainClick ( ) { if ( ! isFabOpen ) ShowFabMenu ( ) ; else CloseFabMenu ( ) ; } ;
public void setPenaltyChargesPaid ( Integer penaltyChargesPaid ) { this . penaltyChargesPaid = penaltyChargesPaid ; }
public FormEntryPage assertOnPage ( ) { waitFor ( ( Callable < Void > ) ( ) -> { assertTextDoesNotExist ( R . string . loading_form ) ; return null ; } ) ; assertToolbarTitle ( formName ) ; return this ; }
public WPDialogSnackbar setNeutralButton ( CharSequence text , View . OnClickListener listener ) { setButtonTextAndVisibility ( ( TextView ) mContentView . findViewById ( R . id . button_neutral ) , text , listener ) ; return this ; }
public boolean touchDown ( InputEvent event , float x , float y , int pointer , int button ) { touchDown = true ; dirIndex = index ; return true ; }
public RenderStack ( Plot plot ) { this . plot = plot ; elements = new ArrayList <> ( plot . getSeriesRegistry ( ) . size ( ) ) ; }
public void onFailure ( Call < Void > call , Throwable t ) { mRemoteLogger . e ( "Failed to upload vialer statistics with exception : " + t . getMessage ( ) ) ; }
public InputStream fetchMediaFile ( String mediaFileURL ) throws FormSourceException { isCancelled = true ; return new ByteArrayInputStream ( "contents" . getBytes ( ) ) ; }
public VmDisksFragment ( ) { super ( Disk . class ) ; }
public String getAnyProvidedStoryTitle ( ) { Intent intent = this . getIntent ( ) ; String storyTitle = intent . getStringExtra ( STORY_TITLE_INTENT_EXTRA_NAME ) ; if ( storyTitle == null ) { storyTitle = "" ; } return storyTitle ; }
public void onConnected ( ) { Log . w ( TAG , "onConnected ( ) " ) ; }
public void onColorPointed ( int newColor ) { pointedColor = newColor ; pointerRing . getBackground ( ) . setColorFilter ( pointedColor , PorterDuff . Mode . SRC_ATOP ) ; }
public void startActivityForResult ( Intent intent , int requestCode ) { if ( Helper . noHistory ( getContext ( ) ) ) intent . addFlags ( Intent . FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS ) ; super . startActivityForResult ( intent , requestCode ) ; }
public AnimatingToggle ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public static int getStatusBarHeight ( Context context ) { return LauncherHelper . getInstance ( ) . isOnSecondaryHomeScreen ( ) ? 0 : getSystemDimen ( context , "status_bar_height" ) ; }
public void onDispatchSecondPass ( UpdateOp op ) { dispatchUpdate ( op ) ; }
public static String getDayOfWeek ( int dayOfWeek ) { if ( ( 0 < dayOfWeek ) && ( dayOfWeek <= 7 ) ) { return DAYS_OF_WEEK [ dayOfWeek - 1 ] ; } else { return "" ; } }
public void onDestroy ( ) { getMapView ( ) . onDestroy ( ) ; super . onDestroy ( ) ; }
public static String getServiceURL ( Context context ) { context = MyApplicationCoreNew . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( TAG_SERVICE_URL , DEFAULT_SERVICE_URL ) ; }
public void setLatitude ( float latitude ) { mLatitude = latitude ; }
public String getPrettyName ( ) { return xml . getChild ( "application" ) . getString ( "android : label" , " . " ) ; }
public void getRecentRefreshTime ( ) { SharedPreferences rates = CURRENT_CONTEXT . getSharedPreferences ( PREFS_FILE , PREFS_MODE ) ; lastRefreshRate = rates . getString ( lastRefreshOffline , "last_refresh_offline" ) ; }
public static String createPeerTagFor ( int aid , int peerId ) { return aid + "_" + peerId ; }
public void onStart ( ) { super . onStart ( ) ; mAddTagDialogPresenter . bind ( this ) ; }
public View next ( ) { return mParent . getChildAt ( mIndex ++ ) ; }
public static synchronized < T > T find ( Class < T > modelClass , long id ) { return find ( modelClass , id , false ) ; }
public void testTakeVideoQuick ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideoQuick" ) ; setToDefault ( ) ; subTestTakeVideo ( false , false , false , false , null , 500 , false ) ; }
public void setTextAndValue ( String text , String value ) { textView . setText ( text ) ; valueTextView . setText ( value ) ; imageView . setVisibility ( GONE ) ; }
public void subtractionFewEnoughMedals ( ) { assertFewEnoughMedals ( GameType . SUBTRACTION ) ; }
public boolean isAnimating ( ) { return rootLayer . isAnimating ( ) ; }
public final byte [ ] toByteArray ( ) { ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; try { serializeToStream ( this , output ) ; } catch ( IOException e ) { throw new IllegalStateException ( ) ; } return output . toByteArray ( ) ; }
private void resolveBaseUserInfoViews ( ) { if ( isGuiReady ( ) ) { getView ( ) . displayBaseUserInfo ( this . user ) ; } }
public static boolean checkConnectivity ( @ NonNull Context context ) { SystemFacade systemFacade = FacadeHelper . getSystemFacade ( context ) ; NetworkInfo netInfo = systemFacade . getActiveNetworkInfo ( ) ; return netInfo != null && netInfo . isConnected ( ) && isNetworkTypeAllowed ( context ) ; }
public void run ( ) { MessagesController . getInstance ( ) . processUpdates ( ( TLRPC . Updates ) message , false ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . git_manager ) ; }
public String toString ( ) { return "UpdatePosition { " + "center = " + center + " , camera = " + camera + ' } ' ; }
public com . coinomi . core . protos . Protos . EncryptedData getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . EncryptedData . getDefaultInstance ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . done_menu , menu ) ; MenuItem done = menu . findItem ( R . id . done ) ; return true ; }
public LiveData < Boolean > getDatabaseCreated ( ) { return mIsDatabaseCreated ; }
public void testMinimalEncoder23 ( ) throws Exception { verifyMinimalEncoding ( "A123456789" , "BYTE ( A ) , NUMERIC ( 123456789 ) , TERMINATOR ( ) " , null , false ) ; }
public void onFailure ( Call < ContactList > call , Throwable t ) { dialog . dismiss ( ) ; }
public void testReplaceAllIgnoresCase2 ( ) { assertEquals ( repText , StrUtil . replaceAllIgnoresCase ( repText , repSearchBad , repNew ) ) ; }
public void changed ( ChangeEvent event , Actor actor ) { if ( TDGalaxy . googlePlayServices != null ) TDGalaxy . googlePlayServices . signIn ( ) ; }
public SelectMultiImageMapWidget createWidget ( ) { return new SelectMultiImageMapWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) ) ; }
public SongPreviewController ( ) { mPreviewPlayer = new PreviewPlayer ( ) ; mPreviewPlayer . setSongPreviewListener ( this ) ; }
public void onBindViewHolder ( TagViewHolder holder , int position ) { if ( holder instanceof TagItemHolder ) { onBindItemHolder ( ( TagItemHolder ) holder , position - TOP_ITEM_PADDING ) ; } }
public boolean onLongClick ( View v ) { currentCalculation += "C ( " ; displayCalculation += "C ( " ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; return true ; }
public void removeTaskGroup ( TaskGroup _taskGroup , String defaultCategory ) { m_taskGroupList . remove ( _taskGroup ) ; if ( m_taskGroupList . size ( ) == 0 ) { m_taskGroupList . add ( new TaskGroup ( defaultCategory , "" ) ) ; } }
public void testDirectionOn ( ) throws IOException { Log . d ( TAG , "testDirectionOn" ) ; subTestLocationOff ( false ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_activity = ( ArticleImagesPagerActivity ) activity ; }
public TouchToSelectView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { updatePlaybackState ( null ) ; handlePlayRequest ( ) ; }
public long getLong ( @ NonNull String key , long defaultValue ) throws WrongTypeException { return 0 ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater item = getMenuInflater ( ) ; item . inflate ( R . menu . helio_actionbar , menu ) ; setTitle ( "WatchfulSky" ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void onLoginUpdated ( @ Observes LoginUpdatedEvent event ) { LoginManager . save ( PreferenceManager . getDefaultSharedPreferences ( this ) , event . getLogin ( ) ) ; }
public void testBadMaxSeason ( ) { mJsonData . add ( APIStatusDeserializer . MAX_SEASON_TAG , new JsonArray ( ) ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public static boolean contains ( String [ ] strings , String string ) { for ( String string2 : strings ) { if ( string2 . equals ( string ) ) return true ; } return false ; }
public void setBirthdate ( Date birthdate ) { this . birthdate = birthdate ; }
public static int getKeyMapRangeTo ( ) { return keyMapTo ; }
public int getPageIndex ( int anchorIndex ) { String [ ] links = getAnchorLinks ( anchorIndex ) ; return pages . indexOf ( links [ 0 ] ) ; }
public static String getLimitCalories ( Context context ) { return getSharedPreferences ( context ) . getString ( LIMIT_CALORIES , "" ) ; }
private static char getSpecialChar ( byte ccData ) { int index = ccData & 0xF ; return ( char ) SPECIAL_CHARACTER_SET [ index ] ; }
public void onComplete ( @ NonNull Task < AuthResult > task ) { if ( task . isSuccessful ( ) ) { startSplashScreenActivity ( ) ; } else { mPasswordView . setError ( getString ( R . string . error_firebase_db ) ) ; } }
public Socket createSocket ( String s , int i ) throws IOException { return null ; }
public void onLiveStreamClick ( final View v ) { StreamHelper . onLiveStreamClick ( this , v ) ; }
public void close ( ) throws IOException { databaseManager . close ( ) ; sqLiteDatabase = null ; }
public MovieView createView ( ) { return this ; }
public GutsLevel ( ) { color1 = 0x534f3e ; color2 = 0xb9d661 ; viewDistance = 6 ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new RunViewModel ( mGameId , mRunId ) ; }
public void run ( ) { Intent intent = new Intent ( SplashScreen . this , MainActivity . class ) ; startActivity ( intent ) ; finish ( ) ; }
private void loginUser ( ) { Intent loginIntent = new Intent ( OnboardingActivity . this , MainActivity . class ) ; startActivity ( loginIntent ) ; finish ( ) ; }
public Converter ( ) { }
public static < E > ArrayList < E > newArrayList ( ) { return new ArrayList < E > ( ) ; }
public boolean isAllGroupsCollapsed ( ) { return mAdapter . isAllGroupsCollapsed ( ) ; }
public void shouldFormatDateValues ( ) { String result = Dates . format ( 2014 , Month . DECEMBER , 31 ) ; assertEquals ( "31/12/2014" , result ) ; }
public void storeSession ( AxolotlAddress address , SessionRecord record ) { mXmppConnectionService . databaseBackend . storeSession ( account , address , record ) ; }
public void updateSuccessfully ( Tag tag ) { adapter . updateTag ( tag ) ; showSnackbarMessage ( R . string . msg_tag_updated ) ; }
public StringSignature getArtistSignature ( String artistName ) { return new StringSignature ( String . valueOf ( getArtistSignatureRaw ( artistName ) ) ) ; }
public static void setDefaultCommentSorting ( CommentSort commentSorting , String subreddit ) { prefs . edit ( ) . putString ( "defaultComment" + subreddit . toLowerCase ( ) , commentSorting . name ( ) ) . apply ( ) ; }
public DeleteAllCardsPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; setDialogLayoutResource ( R . layout . dialog_delete_all_cards ) ; setPositiveButtonText ( R . string . delete ) ; setNegativeButtonText ( android . R . string . cancel ) ; }
public final static String escapePath ( String s ) { if ( ! str ( s ) ) return s ; return escapeRest ( s ) . replaceAll ( " @ " , "%40" ) ; }
public Ping setTimes ( int noTimes ) { if ( noTimes <= 0 ) throw new IllegalArgumentException ( "Times cannot be less than 1" ) ; this . times = noTimes ; return this ; }
public int compare ( final BleBluetooth lhs , final BleBluetooth rhs ) { return lhs . getDeviceKey ( ) . compareToIgnoreCase ( rhs . getDeviceKey ( ) ) ; }
private void createAudioHelper ( ) { audioHelper = new AudioHelper ( this , prefsUseMediaStream ? AudioManager . STREAM_MUSIC : AudioManager . STREAM_NOTIFICATION ) ; }
public void onBottomLineIsTrue ( ) { scoreView . sumScoreWhenBottomLineIsTrue ( ) ; }
public long [ ] [ ] getDifficulty ( ) { return Difficulty ; }
public void onAddMediaImageClicked ( boolean allowMultipleSelection ) { mEditorPhotoPicker . setAllowMultipleSelection ( allowMultipleSelection ) ; ActivityLauncher . viewMediaPickerForResult ( this , mSite , MediaBrowserType . GUTENBERG_IMAGE_PICKER ) ; }
private void updateMap ( ) { Map map = getSelectedMap ( ) ; TextView mapName = ( TextView ) findViewById ( R . id . map_name ) ; mapName . setText ( map . toString ( ) ) ; updateMap ( map ) ; }
private List < AppEntry > getAppEntries ( ) { SharedPreferences pref = U . getSharedPreferences ( context ) ; if ( runningAppsOnly ) return getAppEntriesUsingActivityManager ( Integer . parseInt ( pref . getString ( "max_num_of_recents" , "10" ) ) ) ; else return getAppEntriesUsingUsageStats ( ) ; }
public static Folder newestBackupFolder ( ) { final ArrayList < ContentStorage . FileInformation > dirs = getExistingBackupFoldersSorted ( ) ; return dirs == null ? null : dirs . get ( dirs . size ( ) - 1 ) . dirLocation ; }
public AboutBuilder addGooglePlayStoreLink ( int user ) { return addGooglePlayStoreLink ( context . getString ( user ) ) ; }
public static long today ( ) { CalendarDate calendar = CalendarDate . today ( ) ; long timeMillis = calendar . getTimeInMillis ( ) ; calendar . recycle ( ) ; return timeMillis ; }
public void accept ( Throwable throwable ) throws Exception { if ( view != null ) { view . showError ( "Unable to connect to the internet . " ) ; } }
public boolean onMenuItemActionCollapse ( MenuItem menuItem ) { mSearchView . setOnQueryTextListener ( null ) ; hideListFragment ( ) ; mViewModel . setSearchQuery ( null ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { return false ; }
public static boolean isValidUsername ( String user ) { /* https : return user . matches ( "^ [ a - zA - Z0 - 9_ - ] { 3 , 20 } $" ) ; }
public void failure ( RetrofitError error ) { Log . d ( "SponsorsFragment" , error . getMessage ( ) ) ; }
public String getPseudoId ( ) { return StringUtils . notNullStr ( pseudoId ) ; }
private float childsWidth ( ) { float childsWidth = 0 ; for ( Gizmo g : members ) { if ( g instanceof Component ) { childsWidth += ( ( Component ) g ) . width ( ) + gap ; } } return childsWidth ; }
private void onBlockWithGenerator ( BlockResponse block ) { blockData . postValue ( block ) ; }
public static int calculateExpEarned ( int enemyLevel , int offset ) { return ( int ) ( Math . pow ( enemyLevel , 0 . 8 ) ) + offset ; }
private void hideColorPanel ( ) { ViewUtils . slideOutUp ( mContext , binding . colorView ) ; }
public SaveModel ( Model model , ArrayList < Object [ ] > templateChanges ) { this . model = model ; this . templateChanges = templateChanges ; }
public void onHeadsetDisconnected ( Headset headset ) { if ( alive ) sendMessage ( What . HEADSET_DISCONNECTED , 0 , 0 , null ) ; }
public void setClickAction ( final ClickAction _action ) { this . mAction = _action ; }
private void assertAutobackupIsCorrect ( ) { List < LinkedList < DiffMatchPatch . Diff >> autobackupDifferences = BackupHelper . integrityCheck ( StorageHelper . getBackupDir ( ConstantsBase . AUTO_BACKUP_DIR ) ) ; assertEquals ( 0 , autobackupDifferences . size ( ) ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , CC_passauto . class ) ; startActivity ( inte ) ; }
public static boolean hasIdentityKey ( Context context ) { SharedPreferences preferences = context . getSharedPreferences ( MasterSecretUtil . PREFERENCES_NAME , 0 ) ; return preferences . contains ( IDENTITY_PUBLIC_KEY_DJB_PREF ) && preferences . contains ( IDENTITY_PRIVATE_KEY_DJB_PREF ) ; }
public void setCategoryScore ( String categoryScore ) { this . categoryScore = categoryScore ; }
public ArrayList < Object > getSelectedPhotosOrder ( ) { return photoAttachAdapter . selectedPhotosOrder ; }
public void onLocationChanged ( Location location ) { super . onLocationChanged ( location ) ; currentLocation = location ; if ( waitLocation ) saveVideo ( ) ; }
public ToastEx ( Context context ) { super ( context ) ; }
public void setDate ( @ Nullable Date date ) { if ( date != null ) { this . date = date ; } }
public void setMarker ( Drawable marker , int color ) { mMarker = marker ; mMarker . setColorFilter ( color , PorterDuff . Mode . SRC_ATOP ) ; initDrawable ( ) ; }
public int getCouId ( ) { return this . couId ; }
public List getConnections ( ) throws RemoteException { List < String > tmp = new ArrayList < String > ( ) ; for ( String key : connections . keySet ( ) ) { tmp . add ( key ) ; } return tmp ; }
private void collectSearchdataCallback ( final ArrayList < BasePreferenceFragment . PrefSearchDescriptor > data ) { synchronized ( searchdata ) { searchdata . addAll ( data ) ; } }
public static String getSearchQuery ( ) { return getString ( R . string . pref_key_search_query , null ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; listAdapter = new SettingsListAdapter ( ) ; setListAdapter ( listAdapter ) ; }
public static void apply ( File zip ) { }
public void started ( ) { playButton . setImageDrawable ( getResources ( ) . getDrawable ( R . drawable . pause96 ) ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . messagePlayingProgressDidChanged ) { if ( aspectRatioFrameLayout != null ) { aspectRatioFrameLayout . invalidate ( ) ; } } }
public float getMaxProjection ( ) { return levelLimitSize * 10f ; }
public String getSummary ( ) { return mSummary ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof AppCompatActivity ) activity = ( AppCompatActivity ) context ; }
public void process ( ) { if ( listener != null ) { list . setOnCreateContextMenuListener ( List . this ) ; } else { list . setLongClickable ( false ) ; } }
public void run ( ) { startNextLevel ( ) ; }
public void findSaveGame ( ) { new AllSaveTask ( this ) . execute ( ) ; }
public void openSettings ( ) { Intent intent = new Intent ( this , PreferencesActivity . class ) ; startActivity ( intent ) ; }
public TextProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public TapAdapter_results ( android . app . FragmentManager fm , Activity activity , String [ ] settingsArray ) { super ( fm ) ; this . settingsArray = settingsArray ; }
public PublishSubject < AddMealMenuAction > menuActionPublishSubject ( ) { return PublishSubject . create ( ) ; }
private void showAvailableAmount ( ) { containerAvailableBalance . setVisibility ( View . VISIBLE ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getSupportMenuInflater ( ) . inflate ( R . menu . activity_details , menu ) ; return true ; }
private void closeKeyboard ( ) { imm . hideSoftInputFromWindow ( mTerminalAdapter . getInputWindowToken ( ) , 0 ) ; }
public void onClick ( DialogInterface dialog , int which ) { ConnectionsManager . getInstance ( ) . cancelRequest ( reqId , true ) ; try { dialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void submitScores ( int level , int scores ) { if ( isConnected ( ) ) { Games . getLeaderboardsClient ( Game . instance ( ) , signedInAccount ) . submitScore ( Game . getVar ( boards [ level ] ) , scores ) ; } }
public static boolean hasInternetAccess ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo ni = cm . getActiveNetworkInfo ( ) ; return ( ni != null ) ; }
public static String getReaderSubsPageTitle ( ) { return getString ( PrefKey . READER_SUBS_PAGE_TITLE ) ; }
public boolean equals ( Object o ) { if ( o == null || o . getClass ( ) != TaskNormal . class ) { return false ; } TaskNormal t = ( TaskNormal ) o ; return ( m_name . equals ( t . m_name ) ) ; }
public void fromOffsetDateTimeNull ( ) { assertEquals ( null , DateTypeConverters . toOffsetDateTime ( null ) ) ; }
private void googleSignIn ( ) { showProgress ( ) ; Intent signInIntent = Auth . GoogleSignInApi . getSignInIntent ( mGoogleApiClient ) ; startActivityForResult ( signInIntent , RC_SIGN_IN ) ; }
public void setTestDuration ( Long testDuration ) { this . testDuration = testDuration ; }
public ArrayList < MoodleEvent > getEvents ( ) { return events ; }
public KursClickEvent ( long kurs ) { this . creationDate = kurs ; }
public String desc ( ) { return getClassParam ( "Info" , Game . getVar ( R . string . Item_Info ) ) ; }
public void setLayoutType ( YLayoutStyle layoutType ) { super . setLayoutType ( layoutType ) ; }
public void onClick ( View view ) { mState = "" ; mBleWrapper . stopScanning ( ) ; devicesList . clear ( ) ; mPopupWindow . dismiss ( ) ; clearDim ( viewGroup ) ; mPopupWindow = null ; scanningListviewAdapter = null ; }
public void resetChatState ( ) { synchronized ( users ) { for ( User user : users ) { user . chatState = Config . DEFAULT_CHATSTATE ; } } }
public View getViewAt ( int position ) { RecyclerView . ViewHolder holder = list . findViewHolderForLayoutPosition ( position ) ; return holder == null ? null : RecyclerAdapter . getImage ( holder ) ; }
public static boolean isAudio ( Attachment attachment ) { return ContentType . isAudioType ( attachment . getContentType ( ) ) ; }
public void testThatFahrenheitWorks ( ) { when ( settings . getTemperatureFormat ( ) ) . thenReturn ( Settings . TEMPERATURE_FAHRENHEIT ) ; assertThat ( TemperatureFormatter . Companion . getFormattedTemp ( settings , 231 , true ) ) . isEqualTo ( "74" ) ; }
public ProfileSettingDrawerItem withIcon ( Drawable icon ) { this . icon = icon ; return this ; }
public void setPaints ( Paint [ ] paints ) { this . paints = paints ; return ; }
private static int getResourceIdForRightDefaultFeedIcon ( ) { if ( ThemeChooser . getSelectedTheme ( ) . equals ( ThemeChooser . THEME . LIGHT ) ) { return R . drawable . default_feed_icon_dark ; } else { return R . drawable . default_feed_icon_light ; } }
public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( animation != ANIM_NONE ) { setPosition ( position ) ; currentPageOffset = canShowAnimation ( ) ? 0 : positionOffset ; invalidate ( ) ; } }
private boolean isBlocked ( IncomingTextMessage message ) { if ( message . getSender ( ) != null ) { Recipient recipient = RecipientFactory . getRecipientFor ( context , message . getSender ( ) , false ) ; return recipient . isBlocked ( ) ; } return false ; }
public LottieAnimationView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( attrs ) ; }
public void onClick ( View v ) { onMenuFolders ( ) ; }
public void initScanRule ( BleScanRuleConfig scanRuleConfig ) { this . bleScanRuleConfig = scanRuleConfig ; }
public Builder background ( int background ) { this . background = background ; return this ; }
public void goToLogin ( ) { startActivity ( new Intent ( this , LoginActivity . class ) ) ; }
public void onCompositionLoaded ( LottieComposition composition ) { compositionMap . put ( letter , composition ) ; addComposition ( composition ) ; }
public boolean getEnabled ( ) { return enabled_ ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor data ) { mContestAdapter . swapCursor ( data ) ; }
public void notifyTabViewRemoved ( int position ) { Log . d ( Constants . TAG , "Notify Tab Removed : " + position ) ; mTabsView . tabRemoved ( position ) ; }
public void changeView ( Bundle arguments ) { getNewLocationArguments ( arguments ) ; Log . d ( "da" , "da" ) ; updateView ( ) ; updateOptionsMenu ( ) ; }
public void setTitle ( @ NonNull GlideRequests glideRequests , @ Nullable DcChat dcChat ) { setTitle ( glideRequests , dcChat , true ) ; }
public void surfaceDestroyed ( SurfaceHolder holder ) { }
public byte getValueAsByte ( ) throws ScriptingExecptions . ChameleonScriptingException { int int32Value = getValueAsInt ( ) ; return ( byte ) ( int32Value & 0x000000ff ) ; }
public void setContents ( List < MoodleModuleContent > contents ) { this . contents = new ArrayList < MoodleModuleContent > ( contents ) ; }
public void setQuery ( Query query ) { removeListener ( ) ; walletEntriesLiveDataSet . clear ( ) ; setValue ( new FirebaseElement <> ( walletEntriesLiveDataSet ) ) ; this . query = query ; setListener ( ) ; }
public int compare ( MoodleDiscussion lhs , MoodleDiscussion rhs ) { if ( lhs . getTimemodified ( ) < rhs . getTimemodified ( ) ) return 1 ; else return - 1 ; }
public void setClientInternet ( int id ) { Log . d ( TAG , "OUD : setClientInternet : " + id ) ; clientInternetByte = Utility . setBit ( clientInternetByte , id ) ; }
public String getContainerSerial ( ) { return containerSerial ; }
private void calendarUpdated ( ) { TopWalletEntriesChartViewModelFactory . getModel ( getUid ( ) , getActivity ( ) ) . setDateFilter ( calendarStart , calendarEnd ) ; }
public ItemDraggableRange onGetChildItemDraggableRange ( MyChildViewHolder holder , int groupPosition , int childPosition ) { if ( mAllowItemsMoveAcrossSections ) { return null ; } else { return new GroupPositionItemDraggableRange ( groupPosition , groupPosition ) ; } }
public void hide ( ) { super . hide ( ) ; aiv . hide ( ) ; }
public void onResume ( ) { super . onResume ( ) ; updateTheme ( ) ; updateUiElements ( ) ; }
public void onProgressChanged ( int progress ) { Message msg = obtainMessage ( UPDATE_PROGRESS , progress , 0 ) ; sendMessage ( msg ) ; }
public SystemTextLine ( Bitmap bitmap ) { this ( ) ; texture = new SmartTexture ( bitmap , Texture . LINEAR , Texture . CLAMP ) ; frame ( new RectF ( 0 , 0 , 1 , 1 ) ) ; }
public void setLeftButton ( View dialogLayout ) { this . mLeftButton = ( Button ) dialogLayout . findViewById ( R . id . dialogFormButtonsCancelButton ) ; }
public boolean isEmpty ( ) { return folderModel == null || noteModel == null || getNoteModel ( ) . size ( ) == 0 || getFolderModel ( ) . size ( ) == 0 ; }
public DrawerMenuItem drawerMenuItem ( ) { return DrawerMenuItem . CATEGORIES ; }
private void initPageViewer ( ) { viewPager = ( ViewPager ) findViewById ( R . id . content ) ; viewPageAdapter = new ViewPageAdapter ( getSupportFragmentManager ( ) ) ; setupViewPager ( ) ; viewPager . setAdapter ( viewPageAdapter ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . TransactionInput prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void setWaypoint ( WaypointModel waypoint ) { this . waypoint = waypoint ; }
public void login ( ) { login ( false ) ; }
public void onProgress ( final int state ) { log . v ( TAG , "forceLoad | progress " , state ) ; indicatorLoading ( ) ; }
private Intent getPromptPassphraseIntent ( ) { return getRoutedIntent ( PassphrasePromptActivity . class , getIntent ( ) , null ) ; }
public IconLabelItem withOnLongClickListener ( @ Nullable View . OnLongClickListener onLongClickListener ) { _onLongClickListener = onLongClickListener ; return this ; }
public void changeDirection ( int direction ) { mDirection = direction ; if ( direction == STOP ) { writeToCharacteristic ( UUID_DIRECTION_SERVICE , UUID_DIRECTION_WRITE , direction ) ; return ; } else if ( checkSensor ( ) ) { writeToCharacteristic ( UUID_DIRECTION_SERVICE , UUID_DIRECTION_WRITE , direction ) ; } }
public void setKat ( String kat ) { this . _kat = kat ; }
public void onItemClick ( View view , int position ) { TLRPC . StickerSetCovered pack = trendingGridAdapter . positionsToSets . get ( position ) ; if ( pack != null ) { listener . onShowStickerSet ( pack ) ; } }
static public boolean getIsUserEnabled ( ) { return mIsUserEnabled ; }
public Set < String > getDisabledWhitelistRules ( ) { return sharedPreferences . getStringSet ( KEY_DISABLED_WHITELIST , new HashSet < String > ( ) ) ; }
public MediaEntryViewHolder ( View itemView ) { super ( itemView ) ; ButterKnife . inject ( this , itemView ) ; itemView . setOnClickListener ( this ) ; itemView . setOnLongClickListener ( this ) ; }
public boolean onCabCreated ( MaterialCab materialCab , Menu menu ) { setStatusBarColor ( ColorUtil . getOpaqueColor ( toolbarColor ) ) ; return callback . onCabCreated ( materialCab , menu ) ; }
public MyPreferences ( Context context , String filepath ) { this . context = context ; this . preferences = context . getSharedPreferences ( filepath , Context . MODE_PRIVATE ) ; }
public VideoEnabledWebChromeClient ( ) { }
public String getO ( ) { return o ; }
public boolean onOptionsItemSelected ( final MenuItem item ) { if ( mFragment != null ) { if ( mFragment . onOptionsItemSelected ( item ) ) { return true ; } } return super . onOptionsItemSelected ( item ) ; }
public boolean isContactInRoom ( Contact contact ) { return findUserByRealJid ( contact . getJid ( ) . toBareJid ( ) ) != null ; }
public String toString ( ) { return super . toString ( ) + " '" + mContentView . getText ( ) + "'" ; }
public static void showHideNavigationBar ( Context context , boolean show ) { showHideNavigationBar ( context , getTaskbarDisplayID ( ) , show , 0 ) ; }
public static void setupRichEditor ( RichEditor richEditor ) { richEditor . setEditorHeight ( EDITOR_HEIGHT ) ; richEditor . setPadding ( EDITOR_PADDING , EDITOR_PADDING , EDITOR_PADDING , EDITOR_PADDING ) ; richEditor . setEditorFontSize ( EDITOR_FONT_SIZE ) ; richEditor . loadCSS ( EDITOR_CSS ) ; }
public void hideCurrentInput ( EditText imeTarget ) { if ( isKeyboardOpen ( ) ) hideSoftkey ( imeTarget , null ) ; else hideAttachedInput ( ) ; }
public static void setPushRegistered ( Context context , boolean registered ) { Log . w ( "TextSecurePreferences" , "Setting push registered : " + registered ) ; setBooleanPreference ( context , REGISTERED_GCM_PREF , registered ) ; }
public static Intent intentToStartMe ( Context context ) { return new Intent ( context . getApplicationContext ( ) , MainActivity . class ) . setFlags ( Intent . FLAG_ACTIVITY_CLEAR_TASK + Intent . FLAG_ACTIVITY_NEW_TASK + Intent . FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS ) ; }
public void setDistance ( double distance ) { mDistance = distance ; }
public void onLoaderReset ( Loader < List < Object >> loader ) { adapter . swapDataSet ( Collections . emptyList ( ) ) ; }
public com . google . protobuf . Any . Builder getTokenBuilder ( ) { onChanged ( ) ; return getTokenFieldBuilder ( ) . getBuilder ( ) ; }
public void dispatch ( JingleSessionAcceptHandler handler ) { handled = handler . onJingleSessionAccept ( sessionObject , jingleSession , acceptedContents ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `tbc` INTEGER" ) ; }
public void addWeatherChangeDataListener ( IWeatherChangeDataListener weatherChangeDataListener ) { this . weatherChangeDataListeners . add ( weatherChangeDataListener ) ; }
public static String getGIFUrl ( Status status , String otherUrls ) { return getGIFUrl ( status . getMediaEntities ( ) , otherUrls ) ; }
public MifosGroup getItem ( int i ) { return this . groups . get ( i ) ; }
public static AlarmDB getInstant ( Context context ) { if ( dbm != null ) return dbm ; else { dbm = new AlarmDB ( context ) ; return dbm ; } }
public static PendingIntent makePendingShareIntent ( Context context , @ Nullable LocalDate date , Substitute_old substitute ) { return PendingIntent . getActivity ( context . getApplicationContext ( ) , REQUEST_CODE , makeShareIntent ( context , date , substitute ) , PendingIntent . FLAG_UPDATE_CURRENT ) ; }
public void save ( GameSaver saver ) { saver . save ( board , timeRemaining , gameMode , wordListToString ( ) , wordCount , start , status ) ; }
public void onSwiped ( ViewHolder viewHolder , int direction ) { Timber . d ( "onSwiped : %d" , direction ) ; adapter . onItemRemove ( viewHolder ) ; }
public Socket createSocket ( String host , int port , InetAddress localHost , int localPort ) throws IOException , UnknownHostException { return enableTLSOnSocket ( internalSSLSocketFactory . createSocket ( host , port , localHost , localPort ) ) ; }
public DrinkEvent ( Drink drink , DrinkSize size , Date time ) { super ( drink , size , time ) ; this . index = DBDataObject . getInvalidID ( ) ; }
private double yardtomi ( double num ) { return num * 0 . 000568 ; }
public long getItemId ( int position ) { return mTags . get ( position ) . id ; }
public ClementineMDnsDiscovery ( Handler handler ) { mConnectActivityHandler = handler ; mServices = new LinkedList < ServiceInfo > ( ) ; }
public void onSuccess ( final ImgurAPI . ImageInfo info ) { Log . i ( "AlbumListingActivity" , "Link was actually an image . " ) ; LinkHandler . onLinkClicked ( AlbumListingActivity . this , info . urlOriginal ) ; finish ( ) ; }
public String getSecondaryTag ( ) { return StringUtils . notNullStr ( secondaryTag ) ; }
public void onBlogUrlError ( LoginOrchestrator . UrlErrorType errorType , @ NonNull Throwable error , @ NonNull String blogUrl ) { }
public static boolean isBackLightDimmerEnabled ( ) { return Utils . readFile ( LM3630_BACKLIGHT_DIMMER ) . equals ( "Y" ) ; }
public void onReceive ( final Context context , final Intent intent ) { SimlarService . this . checkNetworkConnectivityAndRefreshRegisters ( ) ; }
private void showSettingUp ( ) { this . viewAnimator . setDisplayedChild ( 2 ) ; findViewById ( R . id . button_save ) . setVisibility ( View . INVISIBLE ) ; }
public void onClick ( View v ) { int position = getAdapterPosition ( ) ; if ( position != RecyclerView . NO_POSITION ) { parentFragment . newsSelected ( position ) ; } }
public void showProgressIndicator ( boolean active ) { swipeRefreshLayout . setRefreshing ( true ) ; }
public void onLocationAvailability ( @ NotNull LocationAvailability locationAvailability ) { Timber . d ( "BackgroundService location availability %s" , locationAvailability ) ; }
public Builder create ( ) { return new Builder ( ) ; }
public void removeFromFavourites ( long id ) { SQLiteDatabase db = getWritableDatabase ( ) ; db . delete ( TABLE_FAVOURITES , COLUMN_MOVIE_ID + " = ?" , new String [ ] { String . valueOf ( id ) } ) ; db . close ( ) ; }
private void doReconnect ( ) { if ( connection == null ) { return ; } connection . scheduleReconnect ( 5 ) ; }
public void onTimeShiftResume ( ) { Log . d ( TAG , "onTimeShiftResume" ) ; mPlayer . resume ( ) ; }
public void onBackPressed ( ) { if ( ! uploading ) { if ( currentPath . equals ( "/" ) ) { finish ( ) ; } else { loadPath ( getParentDirectoryPath ( currentPath ) ) ; } } }
public DownloadServiceImpl ( StorageReference firebaseStorageRef ) { this . storageRef = firebaseStorageRef ; }
private MergePaths ( String name , MergePathsMode mode ) { this . name = name ; this . mode = mode ; }
private Attribute createAttribute ( String name , int type ) { Attribute a = new Attribute ( ) ; a . name = name ; a . type = type ; a . id = db . insertOrUpdate ( a ) ; return a ; }
public TriggerableThread ( Runnable task , long initialDelay ) { this . task = task ; this . initialDelay = initialDelay ; }
public void setAddressIndex ( String addressIndex ) { this . addressIndex = addressIndex ; }
public byte getReplayGainSourceMode ( ) { byte sourceMode = RG_SOURCE_MODE_NONE ; switch ( mPreferences . getString ( RG_SOURCE_MODE , "none" ) ) { case "track" : sourceMode = RG_SOURCE_MODE_TRACK ; break ; case "album" : sourceMode = RG_SOURCE_MODE_ALBUM ; break ; } return sourceMode ; }
public void clearAnswer ( ) { deleteFile ( ) ; playButton . setEnabled ( false ) ; }
public void onRebind ( Intent intent ) { stopForeground ( true ) ; changingConfiguration = false ; sendPlayingStatusBroadcast ( isPlaying ( ) ) ; super . onRebind ( intent ) ; }
public static boolean isSearchInNodes ( ) { return getBoolean ( R . string . pref_key_search_nodes , DEF_SEARCH_IN_NODES ) ; }
public void onCreate ( ) { super . onCreate ( ) ; sBus . register ( this ) ; setupLogger ( ) ; setupDatabase ( ) ; }
private void setupDrawing ( ) { path = new Path ( ) ; bitmapPaint = new Paint ( Paint . DITHER_FLAG ) ; initPaint ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_updates_state . TLdeserialize ( stream , constructor , exception ) ; }
public int getShuffleMode ( ) throws RemoteException { return mService . get ( ) . getShuffleMode ( ) ; }
public void setLastPage ( int lastPage ) { this . lastPage = lastPage ; }
public int getCurrentPhrasebookLanguagePosition ( ) { return mPrefsHelper . getCurrentPhrasebookLanguagePosition ( ) ; }
private void tryPackage ( int res ) throws PackageManager . NameNotFoundException { context . getPackageManager ( ) . getPackageInfo ( context . getString ( res ) , 0 ) ; }
public boolean isAReplacer ( Lesson toReplace ) { return ( oldTeacher != null || subject != null ) && oldTeacher . equals ( toReplace . getTeacher ( ) ) && subject . equals ( toReplace . getSubject ( ) ) ; }
public void dispose ( ) { super . dispose ( ) ; sr . dispose ( ) ; }
public void manualLogin ( ) { mOldLoginWrapper . setVisibility ( View . VISIBLE ) ; }
public static void background ( View v , Drawable d ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . JELLY_BEAN ) { v . setBackgroundDrawable ( d ) ; } else { v . setBackground ( d ) ; } }
public void onLoadFinished ( Loader < ArrayList < Album >> loader , ArrayList < Album > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
public void setProfiles ( ArrayList < IProfile > profiles ) { mAccountHeaderBuilder . mProfiles = profiles ; mAccountHeaderBuilder . updateHeaderAndList ( ) ; }
public void onRefresh ( ) { thread . run ( ISSA , ( ) -> { log . v ( TAG , "refreshing" ) ; load ( true ) ; } ) ; }
public @ Nullable APIStatus fetchApiStatus ( ) { if ( ! mPrefs . contains ( STATUS_PREF_KEY ) ) { return null ; } String statusJson = mPrefs . getString ( STATUS_PREF_KEY , "" ) ; return mGson . fromJson ( statusJson , APIStatus . class ) ; }
public void run ( ) { users . addAll ( MessagesStorage . getInstance ( ) . getUsers ( usersToLoad , error ) ) ; semaphore . release ( ) ; }
public String desc ( ) { return Dungeon . level . tileDesc ( Terrain . SIGN ) ; }
public void setOrientation ( @ ProgressOrientation int orientation ) { orientation ( orientation ) ; invalidate ( ) ; }
public double getLeftTarget ( ) { return leftTarget ; }
public static Prefs getInstance ( ) { if ( instance != null ) return instance ; throw new IllegalArgumentException ( "Use Prefs ( Context context ) constructor ! " ) ; }
public String getUnlockText ( GameStats gameStats ) { return StringUtils . format ( "Rank 3 or better at %s championship" , previous . getName ( ) ) ; }
public LottieAnimatableShapeValue getShapePath ( ) { return shapePath ; }
public GetPodcastTask ( ) { super ( PodplayerActivity . this , client_ , - 1 , EPISODE_BUF_SIZE ) ; }
public UserBuilder state ( String state ) { this . address . setAdminArea ( state ) ; return this ; }
public void onClick ( DialogInterface dialog , int id ) { deleteItem ( index ) ; listUiUpdateFromDb ( ) ; updateStatisticsGraph ( ) ; }
public QueueRecyclerAdapter ( List < UnifiedTrack > queue , Context ctx , OnDragStartListener listener ) { this . queue = queue ; this . ctx = ctx ; mDragStartListener = listener ; imgLoader = new ImageLoader ( HomeActivity . ctx ) ; }
public void onClick ( View v ) { Intent i = new Intent ( getApplicationContext ( ) , ChannelActivity . class ) ; startActivity ( i ) ; finish ( ) ; }
public DrawerBuilder withStickyFooter ( ViewGroup stickyFooter ) { this . mStickyFooterView = stickyFooter ; return this ; }
public FinderPatternFinder ( BitMatrix image , ResultPointCallback resultPointCallback ) { this . image = image ; this . possibleCenters = new ArrayList < FinderPattern > ( ) ; this . crossCheckStateCount = new int [ 5 ] ; this . resultPointCallback = resultPointCallback ; }
public SubredditPostListURL sort ( PostListingController . Sort newOrder ) { return new SubredditPostListURL ( type , subreddit , newOrder , limit , before , after ) ; }
public void setHtmlList ( ArrayList < ColorInfo > list ) { this . htmlList = list ; }
public INTERVAL ( String instrument ) { if ( instrument . equals ( RAM ) ) { INTERVAL = 1000 ; } else { INTERVAL = 1000 * 60 ; } }
public com . google . protobuf . Any getNonCriticalExtensionOptions ( int index ) { if ( nonCriticalExtensionOptionsBuilder_ == null ) { return nonCriticalExtensionOptions_ . get ( index ) ; } else { return nonCriticalExtensionOptionsBuilder_ . getMessage ( index ) ; } }
public float getWidth ( ) { return Constants . NODE_RADIUS * 2 . 66f ; }
public boolean hasUrl ( ) { return ! TextUtils . isEmpty ( url ) ; }
public void clearHistory ( ) { mContext . getContentResolver ( ) . delete ( HistoryContract . HistoryEntry . CONTENT_URI , HistoryContract . HistoryEntry . COLUMN_IS_HISTORY + " = ?" , new String [ ] { "1" } ) ; }
public void onCreate ( ) { super . onCreate ( ) ; if ( INSTANCE == null ) { INSTANCE = this ; } provideLeakCanary ( ) ; }
public void onClick ( final View v ) { ChooseDictionary parent = ( ChooseDictionary ) getParent ( ) ; final String downloadTag = getString ( R . string . tag_tab_download ) ; parent . getTabHost ( ) . setCurrentTabByTag ( downloadTag ) ; }
private static BitMatrix encode ( String input ) throws WriterException { return new CodaBarWriter ( ) . encode ( input , BarcodeFormat . CODABAR , 0 , 0 ) ; }
private void cleanUp ( List < T > apps ) { }
private void showOverview ( ) { Intent intent = new Intent ( this , MediaOverviewActivity . class ) ; intent . putExtra ( MediaOverviewActivity . ADDRESS_EXTRA , recipient . getAddress ( ) ) ; startActivity ( intent ) ; }
private void speakModeWhenReady ( ) { if ( speech != null ) { speech . speakWhenReady ( AudibleSettings . mode . name ) ; } else { Log . e ( TAG , "speakModeWhenReady called but speech is null" ) ; } }
public com . google . protobuf . Any . Builder getNewPublicKeyBuilder ( ) { onChanged ( ) ; return getNewPublicKeyFieldBuilder ( ) . getBuilder ( ) ; }
public long getItemId ( int position ) { return latestList_ . get ( position ) . getId ( ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { find ( findTextField . getText ( ) . toString ( ) , false ) ; }
public void addMessageListener ( @ NonNull ServerMessageListener listener ) { messageListeners . add ( listener ) ; }
public AboutBuilder addFacebookLink ( int user ) { return addFacebookLink ( context . getString ( user ) ) ; }
public ConfChange ( Deck deck , DeckConfig conf ) { this . deck = deck ; this . conf = conf ; }
private RPVMenuItem ( String title , Action action ) { this . title = title ; this . action = action ; }
public void onResourceReady ( Bitmap resource , @ Nullable Transition < ? super Bitmap > transition ) { super . onResourceReady ( resource , transition ) ; AnimationUtils . revealAnimation ( albumArt , animation -> fadeInViews ( ) ) ; onArtworkLoaded ( resource ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; if ( selectedAyah != null ) { updateAyahToolBarPosition ( ) ; } }
public static void onSessionCreated ( ) { Utilities . stageQueue . postRunnable ( new Runnable ( ) { @ Override public void run ( ) { MessagesController . getInstance ( ) . getDifference ( ) ; } } ) ; }
public AppModule ( Mochilo app ) { mApp = app ; }
private void reloadData ( ) { resetDebug ( ) ; invalidateData ( ) ; getSupportLoaderManager ( ) . restartLoader ( INCIDENT_LOADER_ID , null , this ) ; }
public static void mkFile ( String path ) throws RootNotPermittedException { String mountPoint = mountFileSystemRW ( path ) ; RootHelper . runShellCommand ( "touch \"" + path + "\"" ) ; if ( mountPoint != null ) { mountFileSystemRO ( mountPoint ) ; } }
private void putString ( String name , String value ) { mPrefs . edit ( ) . putString ( name , value ) . apply ( ) ; }
public void calculate ( ) { formulas . calculate ( ) ; }
public static int getDisplayWidth ( ) { DisplayMetrics metrics = new DisplayMetrics ( ) ; windowManager . getDefaultDisplay ( ) . getMetrics ( metrics ) ; return metrics . widthPixels ; }
private static double getLatitudeHash ( String hash ) { String chunk = hash . substring ( 0 , 16 ) ; return HexFraction . calculate ( chunk ) ; }
public boolean isOnline ( ) { ConnectivityManager cm = ( ConnectivityManager ) getActivity ( ) . getSystemService ( context . CONNECTIVITY_SERVICE ) ; NetworkInfo netInfo = cm . getActiveNetworkInfo ( ) ; return netInfo != null && netInfo . isConnectedOrConnecting ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "ca . mun . engi5895 . stargazer" , appContext . getPackageName ( ) ) ; }
public RealmList < Room > getRooms ( ) { return rooms ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == android . R . id . home ) { onBackPressed ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public Collection < Genre > getAllGenres ( ) { synchronized ( cache ) { return new ArrayList <> ( cache . genresByName . values ( ) ) ; } }
public NotificationVH ( View view ) { super ( view ) ; tvDate = view . findViewById ( R . id . tv_date ) ; tvDescription = view . findViewById ( R . id . tv_link ) ; }
public Object parseObject ( String string , ParsePosition position ) { return null ; }
public boolean onStopJob ( JobParameters params ) { return true ; }
public void removeFavoriteStation ( String id ) { db = dbHelper . getWritableDatabase ( ) ; db . delete ( DatabaseHelper . FAV_STATIONS_TABLE_NAME , "id = ?" , new String [ ] { id } ) ; }
public void onPause ( ) { super . onPause ( ) ; PauseCurrentPage ( ) ; }
public static DBHelper init ( Context context , int MODE ) { if ( MODE == READ && readInstance != null ) return readInstance ; else if ( MODE == WRITE && writeInstance != null ) return writeInstance ; return new DBHelper ( context , MODE ) ; }
public final void setData ( List < I > data ) { mData . clear ( ) ; if ( data != null ) mData . addAll ( data ) ; onDataSet ( ) ; notifyDataSetChanged ( ) ; }
public MyListAdapter_app ( ) { super ( context , R . layout . layout_app , apps ) ; }
public void onRequestPermissionsResult ( int requestCode , @ NonNull String [ ] permissions , @ NonNull int [ ] grantResults ) { getMainActivity ( ) . checkPermissions ( ) ; }
public Thread newThread ( Runnable r ) { return new Thread ( r , threadName ) ; }
public ProjectItemManager ( ProjectItemEventListener listener ) { this . listener = listener ; this . viewListener = new EventClickListener ( EventType . VIEW ) ; this . deleteListener = new EventClickListener ( EventType . DELETE ) ; this . selectListener = new EventClickListener ( EventType . SELECT ) ; }
public void setTransactionAmount ( String transactionAmount ) { this . transactionAmount = transactionAmount ; }
public static String defaultRepositoryStorageDirectory ( Context context ) { File path = Environment . getExternalStoragePublicDirectory ( Environment . DIRECTORY_DOCUMENTS ) ; return getStringFromSelector ( context , R . string . pref_key_git_default_repository_directory , path . toString ( ) ) ; }
public ItemDraggableRange onGetGroupItemDraggableRange ( MyGroupViewHolder holder , int groupPosition ) { return null ; }
private Card create ( final Card card ) { cardDao . createOrUpdate ( card ) ; return card ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( SAVE_CURRENT_TAB , mCurrentTab ) ; }
public TipHolder ( View view ) { super ( view ) ; mText = ( TextView ) view . findViewById ( R . id . text ) ; }
public void setShowedYear ( int showedYear ) { this . showedYear = showedYear ; }
public int getCurrentThreadPage ( ) { return currentThreadPage ; }
public int getItemCount ( ) { return stepsList . size ( ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . privacyRulesUpdated ) { checkPrivacy ( ) ; } }
public AboutBuilder setDividerColor ( int color ) { this . dividerColor = ColorUtil . get ( context , color ) ; return this ; }
private void showFeedLoading ( boolean loading ) { if ( loading ) { detailsActivityCover . setVisibility ( VISIBLE ) ; feedLoadingProgressBar . setVisibility ( VISIBLE ) ; } else { detailsActivityCover . setVisibility ( View . GONE ) ; feedLoadingProgressBar . setVisibility ( View . GONE ) ; } }
public void setKanjiElementValue ( String kanjiElementValue ) { mKanjiElementValue = kanjiElementValue ; }
private void toggleCode ( ) { if ( editorFragment == null ) { return ; } drawerLayout . setTouchThru ( editorFragment . toggleCode ( ) ) ; }
private View . OnClickListener onSecureDialog = new View . OnClickListener ( ) { @ Override public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintSecureDialog . class ) ) ; } } ;
public void run ( ) { running . set ( false ) ; export ( ) ; stopForeground ( true ) ; stopSelf ( ) ; }
private void getLastBalanceForMonth ( int month , int year , String currency , Consumer < Double > callback ) { Double resultForMonth = tableMonthlyBalance . getBalanceLastMonthWithData ( month + 1 , year , currency ) ; callback . accept ( resultForMonth ) ; }
public void connectionClosedOnError ( Exception e ) { if ( e instanceof XMPPException . StreamErrorException ) { dropSmState ( ) ; } }
public String [ ] getAddedMembers ( ) { return mAdded ; }
public void setMinProgress ( float minProgress ) { animator . setMinProgress ( minProgress ) ; }
public void onEcCalibrationResult ( final Core core , final EcCalibratorStatus ecCalibratorStatus , final int i ) { Lg . w ( "onEcCalibrationResult : ecCalibratorStatus = " , ecCalibratorStatus , " i = " , i ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; clearData ( ) ; mRealm . close ( ) ; }
public void setPm25 ( int pm25 ) { this . pm25 = pm25 ; }
public boolean hasQuestion ( ) { return mSoundPaths . containsKey ( Sound . SOUNDS_QUESTION ) ; }
public double getResult ( ) { return result ; }
public void setDue ( float due ) { this . due = due ; }
public Cursor get ( String query ) { return database . rawQuery ( query , null ) ; }
public void testBadApiStatus ( ) { mJsonData . add ( APIStatusDeserializer . FMS_API_DOWN_TAG , new JsonArray ( ) ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public void deleteCompleteAndIncompleteEncounterFormData ( List < String > formDataUuids ) throws FormDeleteException { try { List < FormData > formDataList = formService . getFormDataByUuids ( formDataUuids ) ; deleteEncounterFormDataAndRelatedPatientData ( formDataList ) ; } catch ( IOException e ) { throw new FormDeleteException ( e ) ; } }
public void swapDataSet ( ArrayList < Song > dataSet , int position ) { this . dataSet = dataSet ; current = position ; notifyDataSetChanged ( ) ; }
public ReturnObject doInBackground ( Void . . . voids ) { return new ReturnObject ( getHumidity ( mContext . get ( ) , deviceObject ) ) ; }
private static boolean isWorkScheduled ( ) { WorkInfo . State workerState = getWorkerState ( ) ; return workerState == WorkInfo . State . RUNNING || workerState == WorkInfo . State . ENQUEUED ; }
private void fillAvatar ( ) { AvatarHelper . setAvatarToImageView ( jid , avatar ) ; }
public void testEncodeIllegalCharacters ( ) throws WriterException { new EAN13Writer ( ) . encode ( "5901234123abc" , BarcodeFormat . EAN_13 , 0 , 0 ) ; }
public int getItemViewType ( int position ) { if ( getItemCount ( ) < 5 ) { return TYPE_FULL ; } else { return TYPE_COMPACT ; } }
public void customNotifyItemInserted ( int idx ) { notifyItemInserted ( idx ) ; vNoElements . setVisibility ( getItemCount ( ) > 0 ? View . VISIBLE : View . GONE ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { video_unused = Video . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; caption = stream . readString ( exception ) ; }
public void onPause ( ) { if ( promptDialog != null ) { promptDialog . dismiss ( ) ; promptDialog = null ; } recentPagePresenter . unbind ( this ) ; settings . setWasShowingTranslation ( pagerAdapter . getIsShowingTranslation ( ) ) ; super . onPause ( ) ; }
public DbMigrationTest ( ) { helper = new MigrationTestHelper ( InstrumentationRegistry . getInstrumentation ( ) , UserDb . class . getName ( ) , new FrameworkSQLiteOpenHelperFactory ( ) ) ; }
public @ Nullable Uri getUri ( @ NonNull Context context ) { return isProfilePhoto ( ) ? Uri . fromFile ( AvatarHelper . getSelfAvatarFile ( context , address ) ) : null ; }
public static boolean postLocalChangesAlreadyRemoteAutoSaved ( PostModel post ) { return ! TextUtils . isEmpty ( post . getAutoSaveModified ( ) ) && DateTimeUtils . dateFromIso8601 ( post . getDateLocallyChanged ( ) ) . before ( DateTimeUtils . dateFromIso8601 ( post . getAutoSaveModified ( ) ) ) ; }
public String toString ( ) { return gridOverlayTag + selectedGrid . toString ( ) + gridOverlayTag ; }
private synchronized void stopServiceIfUploadsComplete ( ) { stopServiceIfUploadsComplete ( null ) ; }
public void onDismiss ( android . content . DialogInterface dialog ) { if ( data . dirty_ ) { tags_ . put ( app . getPackageName ( ) , data . getTags ( ) ) ; Utils . storeObject ( tagsFile_ , tags_ ) ; } }
public static void resetAdviceState ( ) { saveLong ( PREF_ADVICE_STATES , 0L ) ; }
public void onIceCandidatesRemoved ( IceCandidate [ ] candidates ) { Log . w ( TAG , "onIceCandidatesRemoved : " + ( candidates != null ? candidates . length : null ) ) ; }
public String getContainerDateInUse ( ) { return containerDateInUse ; }
public ArrayList < EventInfo > getEventList ( ) { return eventList ; }
public AboutBuilder addWebsiteLink ( int url ) { return addWebsiteLink ( context . getString ( url ) ) ; }
public void updateSelectedItem ( ) { if ( spinner != null ) { spinner . setSelection ( currentQari ) ; } }
public void unregisterAdapterDataObserver ( AdapterDataObserver observer ) { mObservable . unregisterObserver ( observer ) ; }
public void stop ( ) { scheduler . shutdownNow ( ) ; ClipboardConnector . close ( ) ; }
public TagHistory getItem ( int position ) { return items . get ( position ) ; }
public boolean getShitCustom ( ) { return ShitCustom ; }
public void openPhotoAlbum ( int accountId , int ownerId , int albumId , @ Nullable Integer focusPhotoId ) { PlaceFactory . getPhotoAlbumGalleryPlace ( accountId , albumId , ownerId , focusPhotoId ) . tryOpenWith ( getActivity ( ) ) ; }
public long getTimestamp ( ) { return timestamp ; }
private boolean showInfoBox ( ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mCentralMap ) ; return prefs . getBoolean ( GHDConstants . PREF_INFOBOX , true ) ; }
public void onEvent ( HandshakeComplete event ) { mHandshakeComplete = true ; mLastHandshakeCompleteEvent = event ; synchronized ( mLockHandshakeComplete ) { mLockHandshakeComplete . notify ( ) ; } }
public boolean isTrusted ( ) { FingerprintStatus s = conversation . getAccount ( ) . getAxolotlService ( ) . getFingerprintTrust ( axolotlFingerprint ) ; return s != null && s . isTrustedAndActive ( ) ; }
public < R > R accept ( FilterVisitor < I , R > visitor ) { return visitor . visit ( this ) ; }
public void handleMessage ( final Message msg ) { if ( playing && view != null ) { view . setImageBitmap ( ( Bitmap ) msg . obj ) ; } }
public YValueMarker ( Number value , String text , XPositionMetric textPosition , int linePaint , int textPaint ) { super ( value , text , textPosition , linePaint , textPaint ) ; }
public RecyclerViewInteraction ( ViewInteraction viewInteraction , int position ) { this . viewInteraction = viewInteraction ; this . position = position ; }
public String getRoProductModel ( ) { return roProductModel ; }
private void setupEnergyCount ( BigDecimal amount , EnergyDensity energyDensity , AmountUnit amountUnit ) { view . setCalorieCount ( quantityModel . formatEnergyCountAndUnit ( amount , amountUnit , energyDensity ) ) ; }
public void onAnimationEnd ( Animator animation ) { mExtendPanel . requestLayout ( ) ; }
public static void showMainActivityAndSiteCreationActivity ( Activity activity ) { final Intent intent = createMainActivityAndSiteCreationActivityIntent ( activity ) ; activity . startActivity ( intent ) ; }
public void setFormController ( FormController controller ) { formController = controller ; }
private double sqfootTosqkm ( double num ) { return num * 9 . 290E - 8 ; }
public LocationJobPresenter ( Context context , LocationJobServiceContract . LocationJobService locationCallback ) { this . context = context ; this . preferences = new Preferences ( context ) ; this . locationJobServiceCallback = locationCallback ; }
public String getString ( ) { return String . format ( Locale . US , " - 1_%d_%d_%d_%d_%d_%d_%d_%d_%s" , startTime , endTime , rotationValue , originalWidth , originalHeight , bitrate , resultWidth , resultHeight , originalPath ) ; }
private static int getOldPointsForRacer ( Racer racer ) { GameInfo . Entrant entrant = racer . getEntrant ( ) ; return entrant . getScore ( ) - entrant . getLastRacePoints ( ) ; }
public void onClick ( View v ) { donationDialog . donate ( position ) ; }
public void onAttachFragment ( Fragment fragment ) { if ( fragment instanceof ChatFragment ) { ChatFragment chatFragment = ( ChatFragment ) fragment ; chatFragment . setOnProfileSelectedListener ( this ) ; } }
public void onStart ( ) { super . onStart ( ) ; userActionsListener . play ( ) ; }
private static int [ ] zzUnpackTrans ( ) { int [ ] result = new int [ 19236 ] ; int offset = 0 ; offset = zzUnpackTrans ( ZZ_TRANS_PACKED_0 , offset , result ) ; return result ; }
public void onResume ( ) { super . onResume ( ) ; new ActivityFeatures . Builder ( ) . begin ( ) . setBlockNavigationDrawer ( false ) . setStatusBarColored ( getActivity ( ) , true ) . build ( ) . apply ( getActivity ( ) ) ; }
public String getMailtoURI ( ) { return mailtoURI ; }
public ArtistViewModel ( @ NonNull final Application application ) { super ( application ) ; }
public int getSelectedColor ( ) { return selectedColor ; }
public Builder setIconColor ( @ ColorInt int color ) { bottomSheet . iconColor = color ; return this ; }
public void beginContact ( Contact contact ) { Body bodyA = contact . getFixtureA ( ) . getBody ( ) ; Body bodyB = contact . getFixtureB ( ) . getBody ( ) ; System . out . println ( "CHOQUE ! " ) ; }
public void onClick ( View view ) { signInWithGoogle ( ) ; }
private static void UpdateSection ( MoodleSection old_section , MoodleSection new_section ) { old_section = new_section ; old_section . save ( ) ; }
public void setOnLongClickListener ( OnLongClickListener l ) { captureButton . setOnLongClickListener ( l ) ; chooseButton . setOnLongClickListener ( l ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfDetection_Info ) : super . desc ( ) ; }
private void bindToolbarHeader ( ) { Shop shop = PrefShopHome . getShop ( this ) ; shopName . setText ( shop . getShopName ( ) ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putString ( Utils . MESSAGE , "checked" ) ; editor . apply ( ) ; }
public void reset ( GameManager gm ) { super . reset ( gm ) ; }
public void onViewCreated ( ) { if ( getPresenter ( ) != null ) { getPresenter ( ) . onViewCreated ( ) ; } }
public IRCCloudJSONObject ( String message ) { try { ObjectMapper mapper = new ObjectMapper ( ) ; o = mapper . readValue ( message , JsonNode . class ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
private void makeDefaultIfNecessary ( ) { isDefault . setChecked ( em . getAllCurrenciesList ( ) . isEmpty ( ) ) ; }
public void onDetach ( ) { if ( call == null ) { return ; } call . cancel ( ) ; super . onDetach ( ) ; }
public void log ( String msg , Object . . . o ) { ShadowLog . d ( TAG , String . format ( msg , o ) ) ; }
public void onLocationChangedSlightly ( LatLng latLng ) { Timber . d ( "Location significantly changed" ) ; updateMapAndList ( LOCATION_SLIGHTLY_CHANGED , null ) ; }
public void close ( ) { this . getCursor ( ) . close ( ) ; }
public String toString ( ) { return model . getSprite ( ) ; }
public TranslationViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( viewType , parent , false ) ; return new TranslationViewHolder ( view ) ; }
public String getValue ( ) { return mValue ; }
private void matchWaypointsToNodes ( final List < MatchedWaypoint > unmatchedWaypoints ) { resetCache ( false ) ; nodesCache . matchWaypointsToNodes ( unmatchedWaypoints , 250 . , islandNodePairs ) ; }
public int getDirection ( ) { return direction ; }
private ShareIntent ( String title ) { this . content = new StringBuilder ( ) . append ( "# " ) . append ( title ) . append ( "\n\n" ) ; }
public void setOpenGifsTabFirst ( ) { createEmojiView ( ) ; StickersQuery . loadRecents ( StickersQuery . TYPE_IMAGE , true , true ) ; emojiView . switchToGifRecent ( ) ; }
public ArchiveRecyclerAdapter ( Context fragmentDad , LinkedList < Show > myDataset ) { mDataset = myDataset ; mContext = fragmentDad ; }
public void setExpandedState ( boolean isExpanded , boolean animate ) { int resId = ( isExpanded ) ? R . drawable . ic_expand_less : R . drawable . ic_expand_more ; mImageView . setImageResource ( resId ) ; }
public void setContributorsIndexedKeys ( List < String > contributorsIndexedKeys ) { this . contributors = contributorsIndexedKeys ; }
public void run ( ) { progressDialog . dismiss ( ) ; if ( ! cancelled . get ( ) ) General . showResultDialog ( mActivity , details ) ; }
private AnalyticsTrackers ( final Context context ) { mContext = context . getApplicationContext ( ) ; }
public int compare ( ContactSort lhs , ContactSort rhs ) { return lhs . getStudyWork ( ) . compareTo ( rhs . getStudyWork ( ) ) ; }
public SuraAyah getSelectionEnd ( ) { return mEnd ; }
public Settings put ( String key , int value ) { SharedPreferences . Editor editor = getPrefs ( ) . edit ( ) ; editor . putInt ( key , value ) ; editor . commit ( ) ; return this ; }
public Executor diskIO ( ) { return mDiskIO ; }
public double distanceTo ( @ NonNull LatLng dest ) { return distanceTo ( latitude , longitude , dest . latitude , dest . longitude ) ; }
public void needSendTyping ( ) { MessagesController . getInstance ( ) . sendTyping ( dialog_id , classGuid ) ; }
public DrinkSelection ( Drink drink , DrinkSize size , Date time ) { setDrink ( drink ) ; setSize ( size ) ; setTime ( time ) ; }
public void handleMessage ( Message msg ) { if ( mPrefFullscreenReview ) { CompatHelper . getCompat ( ) . setFullScreen ( AbstractFlashcardViewer . this ) ; } }
public void actualOnPreExecute ( @ NonNull DeckPicker deckPicker ) { deckPicker . mProgressDialog = StyledProgressDialog . show ( deckPicker , "" , deckPicker . getResources ( ) . getString ( R . string . delete_media_message ) , false ) ; }
public void updateState ( String state , String logmessage , int localizedResId , ConnectionStatus level ) { Message msg = mHandler . obtainMessage ( SEND_NEW_STATE , new UpdateMessage ( state , logmessage , localizedResId , level ) ) ; msg . sendToTarget ( ) ; }
public void onFocusChange ( View view , boolean hasFocus ) { formattingToolbar . enableFormatButtons ( ! hasFocus ) ; }
public void testTakeVideoExposureLock ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideoExposureLock" ) ; setToDefault ( ) ; subTestTakeVideo ( true , false , false , false , null , 5000 , false , false ) ; }
public void onStopNestedScroll ( View target ) { nestedScrollingParentHelper . onStopNestedScroll ( target ) ; if ( dismissed ) { return ; } float currentTranslation = ViewProxy . getTranslationY ( containerView ) ; checkDismiss ( 0 , 0 ) ; }
public DataSpec withUri ( Uri uri ) { return new DataSpec ( uri , postBody , absoluteStreamPosition , position , length , key , flags ) ; }
public static Boolean isGrblFeedbackMessage ( final String response ) { return FEEDBACK_PATTERN . matcher ( response ) . find ( ) ; }
public NameListsAdapter . NameListViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . names_list_item , parent , false ) ; return new NameListViewHolder ( view ) ; }
public void setZoomSlideHorizontal ( float fraction ) { setTranslationX ( getWidth ( ) * fraction ) ; setPivotX ( getWidth ( ) / 2 ) ; setPivotY ( getHeight ( ) / 2 ) ; }
public void hide ( ) throws Exception { overlayWindowManager . hide ( view ) ; verify ( windowManager , times ( 1 ) ) . removeView ( view ) ; }
public void onClick ( View view ) { changeFavouriteState ( ) ; }
private static boolean hasContext ( ) { return context != null ; }
public static DialogFragment newInstance ( String title ) { final DialogFragment fragment = new EditTitleDialogFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putString ( PARAM_OLD_TITLE , title ) ; fragment . setArguments ( args ) ; return fragment ; }
public void downloadAttraction ( final Attraction attraction ) { tourDownloader . download ( attraction ) ; tourDownloader . startProgressListening ( attraction . getId ( ) , progressListener ) ; updateAttractionDownload ( User . dummy ( ) , attraction . getId ( ) ) ; }
public ArrayList < OCSSection > getSections ( ) { ArrayList < OCSSection > lst = new ArrayList < OCSSection > ( ) ; for ( OCSStorage o : storages ) { lst . add ( o . getSection ( ) ) ; } return lst ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; tagEditPresenter . attachView ( tagEditView ) ; }
public ArrayList < Artist > getDataSet ( ) { return dataSet ; }
public void writeMsgInit ( ) { handler . removeMessages ( BleMsg . MSG_CHA_WRITE_START ) ; }
public void onClick ( DialogInterface dialog , int id ) { Fragment_FilterListDialog . this . getDialog ( ) . cancel ( ) ; }
public void run ( ) { openned_dialog_id = dialog_id ; }
public void onUnfolding ( UnfoldableView unfoldableView ) { mListTouchInterceptor . setClickable ( true ) ; mDetailsLayout . setVisibility ( View . VISIBLE ) ; }
public void onCreate ( final Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; url = getArguments ( ) . getString ( "url" ) ; html = getArguments ( ) . getString ( "html" ) ; }
public List < ColumnValues > getColumnValues ( ) { return columnValues ; }
private void resetPhoto ( ) { photoviewSwitcher . setDisplayedChild ( 0 ) ; imageUri = null ; TextView photoText = ( TextView ) getActivity ( ) . findViewById ( R . id . photo_text ) ; photoText . setText ( R . string . report_hint_photo ) ; }
public static void showPasswordInputDialog ( Context context , @ StringRes int messageId , TextInputListener listener ) { showTextInputDialog ( context , R . string . set_password , messageId , R . string . password , listener , true ) ; }
public void loadUrl ( String url ) { addJavascriptInterface ( ) ; super . loadUrl ( url ) ; }
public static int sampleSizeToScaleIndex ( int sampleSize ) { return Integer . numberOfTrailingZeros ( sampleSize ) ; }
public RequiredDataMissingException ( String message ) { super ( message ) ; }
public void readCharacteristic ( UUID uuid ) { GattOperation op = HIDDeviceBLESteamController . GattOperation . readCharacteristic ( mGatt , uuid ) ; queueGattOperation ( op ) ; }
private void editTrack ( Track t ) { Intent intent = new Intent ( this , EditTrackActivity . class ) ; intent . putExtra ( "track_id" , t . getId ( ) ) ; startActivityForResult ( intent , 1 ) ; }
private void givenNewDate ( String newDate ) { forecast . setDateTime ( newDate ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeByteArray ( random ) ; }
public void setSpeakers ( List < PresentationSpeakerDTO > speakers ) { this . speakers = speakers ; }
public void onDestroy ( ) { circleWidgetUpdater . cancel ( ) ; unregisterTermoBroadCastReceiver ( ) ; releaseWakelock ( ) ; if ( TermoWidget . isDebug ) Log . d ( TermoWidget . LOG_TAG , "WidgetUpdaterService Destroy" ) ; super . onDestroy ( ) ; }
public void onRequestPermissionsResult ( int requestCode , @ NonNull String permissions [ ] , @ NonNull int [ ] grantResults ) { ScanActivity . onRequestPermissionResult ( this , requestCode , grantResults ) ; }
private void notifyListeners ( ) { for ( OnSettingsChangeListener listener : mChangeListeners . values ( ) ) { listener . onSettingsChange ( mGrSize , mPrecision , isStandardForm , isDefaultForm ) ; } }
public AccountHeaderBuilder withAccountHeader ( View accountHeader ) { this . mAccountHeaderContainer = accountHeader ; return this ; }
public int getDy ( ) { return dy ; }
public boolean loadAudioPreference ( ) { return settingsPreferences . getBoolean ( SHARED_PREF_IS_AUDIO_STREAM , true ) ; }
public boolean contains ( float x , float y ) { return this . mBounds . contains ( x , y ) ; }
public void onAnimationEnd ( Animator animation ) { if ( mentionListAnimation != null && mentionListAnimation . equals ( animation ) ) { mentionContainer . setVisibility ( View . INVISIBLE ) ; mentionListAnimation = null ; } }
public void onConfigurationChanged ( Configuration newConfig ) { if ( MyDebug . LOG ) Log . d ( TAG , "onConfigurationChanged ( ) " ) ; preview . setCameraDisplayOrientation ( ) ; super . onConfigurationChanged ( newConfig ) ; }
public void onCreate ( ) { Log . d ( Utils . getAppTag ( ) , Utils . getMethodName ( ) ) ; mItemCursor = createItemCursor ( ) ; }
private void initMelodyPrefs ( ) { binding . chooseSoundPrefs . setOnClickListener ( view -> showSoundDialog ( ) ) ; binding . chooseSoundPrefs . setDependentView ( binding . globalOptionPrefs ) ; showMelody ( ) ; }
public String getName ( ) { return "Clear History" ; }
public View getDropDownView ( int position , View convertView , ViewGroup parent ) { return Util . getActionBarSpinnerItemView ( actionBarContext , convertView , parent , getItem ( position ) . getName ( ) ) ; }
public void onResponse ( String response ) { requestListener . onSuccess ( ) ; }
public void unpause ( ) { status = GameStatus . GAME_RUNNING ; maxTime = timeRemaining ; start = new Date ( ) ; }
public void listItemClick ( Shop shop , int position ) { PrefShopHome . saveShop ( shop , getActivity ( ) ) ; Intent intent = new Intent ( getActivity ( ) , ItemsInShopByCatNew . class ) ; startActivity ( intent ) ; }
public void onReceive ( Context context , Intent intent ) { if ( Daedalus . getPrefs ( ) . getBoolean ( "settings_boot" , false ) ) { Daedalus . activateService ( context ) ; Logger . info ( "Triggered boot receiver" ) ; } }
public static FitnessManagerInterface newInstance ( RestServer server , Context context ) { return new FitnessManager ( server , context ) ; }
public void clear ( ) { CLA = INS = P1 = P2 = LE = LC = payloadData = "xx" ; apduCmdDesc = "" ; }
public void shouldUpdateViewsDate ( ) { presenter . onDateDialogPositiveButton ( 2018 , 5 , 1 ) ; Mockito . verify ( view ) . setDateText ( "Tue , 5/1/2018" ) ; }
public void onBindViewHolder ( FileListViewHolder holder , int position ) { holder . bind ( data . get ( position ) , onItemClickListener ) ; }
public void setLeftTarget ( double leftTarget ) { this . leftTarget = leftTarget ; }
public void createSavepoint ( String id ) { if ( MainActivity . ENABLE_DEBUG_LOG_CALLS && ENABLE_SAVEPOINT_LOG ) Log . i ( "db" , "creating savepoint : " + id ) ; mDatabase . execSQL ( " ; SAVEPOINT " + id ) ; }
public void showRevertedInfo ( ) { launchAlert ( getResources ( ) . getString ( R . string . image_reverts ) , getResources ( ) . getString ( R . string . images_reverted_explanation ) ) ; }
public DialogResourceFinder ( final Dialog dialog ) { super ( dialog . getOwnerActivity ( ) ) ; this . mDialog = dialog ; }
public static int getMaxNumOfEntries ( Context context ) { SharedPreferences pref = getSharedPreferences ( context ) ; return pref . getBoolean ( PREF_DISABLE_SCROLLING_LIST , false ) ? getMaxNumOfColumns ( context ) : Integer . valueOf ( pref . getString ( PREF_MAX_NUM_OF_RECENTS , "10" ) ) ; }
public int getBranchNumber ( ) { return numarSectie ; }
public void markAsReadFeeds ( @ NonNull List < Long > feedIdList ) { disposables . add ( Completable . fromRunnable ( ( ) -> { repo . markAsReadByFeedId ( feedIdList ) ; } ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( ) ) ; }
private RealmResults < Clip > getAllClips ( ) { RealmResults < Clip > clips = realm . where ( Clip . class ) . findAllSorted ( MyConstants . FIELD_CREATION_DATE , RealmResults . SORT_ORDER_DESCENDING ) ; return clips ; }
public void onClick ( View v ) { SharedPrefManager . launchSharedPrefManager ( LauncherActivity . this , new ArrayList <> ( Arrays . asList ( new String [ ] { SP_PRI_APP , SP_PRI_USER_JSON , SP_PRI_LONG_DATA , SP_PRI_10_000_ENTRY , SP_PRI_NO_DATA } ) ) , null , null ) ; }
public int compareTo ( Object other ) { return this . status . compareTo ( ( ( Presence ) other ) . status ) ; }
public void onAdLoaded ( ) { Ads . updateBanner ( adView ) ; loaded = true ; }
public void onClick ( View v ) { if ( homeActivity . queueCurrentIndex != 0 ) { mMediaPlayer . pause ( ) ; mCallback3 . onPreviousTrack ( ) ; } }
public static DataBundle getStandardNotification ( String key ) { return standardNotifications . get ( key ) ; }
public SupportDarkenFrameLayout ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; addAttr ( context , attrs ) ; beforeStart ( ) ; }
public Cursor runQuery ( CharSequence charSequence ) { return getContentResolver ( ) . query ( Uri . parse ( AccountingProvider . CUSTOMER_CONTENT_URI ) , null , AccountingDbHelper . CUSTOMERS_COL_NAME + " LIKE '%" + charSequence + "%'" , null , null , null ) ; }
public int getState ( ) { if ( minPosition == mCurrentTranslate ) return MINIMIZED ; if ( getMaxPosition ( ) == mCurrentTranslate ) return MAXIMIZED ; return CAPTURED ; }
public void set6MonthsIncreaseText ( String text , StateChange change ) { TextView textView = rootView . findViewById ( R . id . stats_mileage_overview_item_6months ) . findViewById ( R . id . overview_item_increase_value ) ; setIncreaseText ( text , change , textView ) ; }
private void displaySortingOptions ( ) { DialogFragment sortingDialogFragment = SortingDialogFragment . newInstance ( mMoviesPresenter ) ; sortingDialogFragment . show ( getFragmentManager ( ) , "Select Quantity" ) ; }
public void onSuccess ( ResultHolder result ) { if ( translationScreen != null ) { translationScreen . setVerses ( result . ayahInformation ) ; } }
public void enableRemoveButton ( ) { showRemoveButton = true ; mRemoveButton . setVisibility ( VISIBLE ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { thread . initialize ( UP ) ; log . v ( TAG , "Fragment created" ) ; firebaseAnalyticsProvider . logCurrentScreen ( activity , fragment ) ; }
public Single < Integer > getImageQuality ( UploadItem uploadItem ) { return imageProcessingService . validateImage ( uploadItem ) ; }
public void stopMWI ( ) { if ( sd != null ) { synchronized ( sd ) { sd . notify ( ) ; } } sd = null ; if ( listener != null ) listener . onMWIUpdate ( false , 0 , null ) ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return OstWorkflowContext . WORKFLOW_TYPE . GET_MNEMONICS ; }
public String getStatusUpdates ( int statusUpdateId ) { Log . i ( TAG , "getStatusUpdates" ) ; return WebxdcActivity . this . dcContext . getWebxdcStatusUpdates ( WebxdcActivity . this . dcAppMsg . getId ( ) , statusUpdateId ) ; }
public static void restart ( Context context ) { Log . d ( TAG , "restarting message center" ) ; Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_RESTART ) ; context . startService ( i ) ; }
public void setSecondaryProgressTintList ( @ Nullable ColorStateList tint ) { logProgressBarTintWarning ( ) ; super . setSecondaryProgressTintList ( tint ) ; }
private List < PopupKeyCandidate > getCandidatesForCHA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "ʦ" ) ) ; return candidates ; }
public void clearView ( View view ) { ViewCompat . setTranslationX ( view , 0f ) ; ViewCompat . setTranslationY ( view , 0f ) ; }
public static BaseListFragment newInstance ( int columnCount ) { BaseListFragment fragment = new WorkListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putInt ( ARG_COLUMN_COUNT , columnCount ) ; fragment . setArguments ( args ) ; return fragment ; }
public StatusViewModel ( @ AppContext Context context ) { this . context = context ; }
public void goToGifPlayer ( int accountId , @ NonNull ArrayList < Document > gifs , int selected ) { PlaceFactory . getGifPagerPlace ( accountId , gifs , selected ) . tryOpenWith ( getActivity ( ) ) ; }
public boolean sendKeyEvent ( KeyEvent event ) { if ( event . getAction ( ) == KeyEvent . ACTION_UP ) { byte [ ] tmp = { ( byte ) event . getUnicodeChar ( ) } ; inputProcessor . executeCommand ( tmp ) ; } return true ; }
public void onReceive ( Context context , Intent intent ) { LOGI ( TAG , "onReceive called ! " ) ; try { Notifier . updateStatusBar ( context ) ; } catch ( ReceiverCallNotAllowedException e ) { e . printStackTrace ( ) ; } }
public UserBuilder username ( String username ) { this . username = username ; return this ; }
public TokenSearchTextView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( ) ; }
public void onPrepareOptionsMenu ( Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; Activity activity = getActivity ( ) ; if ( activity == null ) return ; ToolbarContentTintHelper . handleOnPrepareOptionsMenu ( activity , toolbar ) ; }
public void setAppVersion ( String appVersion ) { mAppVersion = appVersion ; }
public void value ( int value ) { GLES20 . glUniform1i ( location , value ) ; }
public Call < Beverage > getBeverage ( @ Query ( "beverageId" ) Integer id ) { return jugoterapiaService . getBeverage ( id ) ; }
public void run ( ) { isExiting = false ; }
public static void e ( String msg ) { if ( BaseConstant . IS_SHOWLOG ) { Log . e ( BaseConstant . LOG_TAG , msg + "\n" ) ; } }
private void stopUnsuccessfulStartAttempt ( ) { Log . w ( TAG , "Unsuccessfully quiting WiFi service . " ) ; notificationManager . cancel ( NOTIFICATION_ID_WIFI ) ; stopSelf ( ) ; }
public void subscribe ( ) { PubSub < String > events = new PubSub <> ( ) ; events . subscribe ( ( msg ) -> assertEquals ( "BASE" , msg ) ) ; events . post ( "BASE" ) ; }
private void telaAdicionar ( ) { Intent intent = new Intent ( getActivity ( ) , AddPessoaActivity . class ) ; startActivityForResult ( intent , 1 ) ; }
public static boolean check ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo netInfo = cm . getActiveNetworkInfo ( ) ; return netInfo != null && netInfo . isConnectedOrConnecting ( ) ; }
public static boolean isAudio ( String mimeType ) { return ( mimeType != null && mimeType . toLowerCase ( ) . startsWith ( "audio/" ) ) ; }
public int getNumLegs ( ) { return Integer . valueOf ( get ( "numLegs" , "0" ) ) ; }
private String preprocessMultiplicationOperator ( String input ) { if ( letterToBeReplacedByStar != '*' ) { input = input . replaceAll ( String . valueOf ( letterToBeReplacedByStar ) , "*" ) ; } return input ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof FragmentInteractionListener ) { mListener = ( FragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnInteractionListener" ) ; } }
public void refresh ( RecipeCreationDialogView view ) { authorsPresenter . refresh ( view . getAuthorsView ( ) ) ; categoriesPresenter . refresh ( view . getCategoriesView ( ) ) ; }
public void deleteRun ( List < Integer > indexList ) { for ( Integer index : indexList ) { repository . delete ( displayedRunsList . get ( index ) ) ; } }
public boolean isMinScale ( ) { return mCoordinateHelper . getScale ( ) - 0 . 000001f <= mMinScale ; }
private CharProbGenerator toCharProbGenerator ( ) { return new CharProbGenerator ( new ByteArrayInputStream ( toString ( ) . getBytes ( ) ) ) ; }
private void changeSettingsBackupPrefs ( ) { boolean isChecked = binding . syncSettingsPrefs . isChecked ( ) ; binding . syncSettingsPrefs . setChecked ( ! isChecked ) ; mPrefs . setSettingsBackupEnabled ( ! isChecked ) ; }
public String getDatePublished ( ) { return StringUtils . notNullStr ( datePublished ) ; }
public SubnetDevices setNoThreads ( int noThreads ) throws IllegalAccessException { if ( noThreads < 1 ) throw new IllegalArgumentException ( "Cannot have less than 1 thread" ) ; this . noThreads = noThreads ; return this ; }
public void run ( ) { updateThumbnail ( thumbnail_f ) ; }
private void saveLastSearchQuery ( Bundle outState ) { if ( mSearchItem != null && mSearchItem . isActionViewExpanded ( ) ) { outState . putString ( BUNDLE_SEARCH_QUERY , mSearchView . getQuery ( ) . toString ( ) ) ; } }
public void stopGenerating ( ) { if ( mGenerator != null && ! mGenerator . isInterrupted ( ) ) { mGenerator . interrupt ( ) ; } }
private UpdateCallback mUTF8ModeNotify = new UpdateCallback ( ) { public void onUpdate ( ) { Exec . setPtyUTF8Mode ( mTermFd , getUTF8Mode ( ) ) ; } } ;
public Integer getWs ( ) { return ws ; }
public void logCrashManually ( @ NonNull Throwable throwable ) { crashListener . logCrashManually ( throwable ) ; }
public boolean isArray ( ) { return isFile ( ) ; }
public void setTextAndColor ( String text , int color ) { textView . setText ( text ) ; currentColor = color ; setWillNotDraw ( ! needDivider && currentColor == 0 ) ; invalidate ( ) ; }
public void movePlaneDown ( ) { boolean valid = m_PlaneRound . movePlaneDownwards ( m_Selected ) == 1 ? true : false ; updateBoards ( ) ; m_BottomPane . setDoneEnabled ( valid ) ; }
public void onTaskError ( String error ) { Helpers . sendToNotificationBar ( context . getApplicationContext ( ) , context . getResources ( ) . getString ( R . string . inventory_notification_fail ) ) ; FlyveLog . e ( error ) ; }
public boolean stopConditions ( ) { return ( autoComplete . isRunning ( ) || animate . cardIsAnimating ( ) || hint . isWorking ( ) || recordList . isWorking ( ) || autoMove . isRunning ( ) ) ; }
public static boolean isKindle ( ) { return Build . BRAND . equalsIgnoreCase ( "amazon" ) || Build . MANUFACTURER . equalsIgnoreCase ( "amazon" ) ; }
public static void createTable ( SQLiteDatabase inDatabase ) { inDatabase . execSQL ( CREATE_DATABASE ) ; Log . i ( Utils . getAppTag ( ) , "Database version = " + inDatabase . getVersion ( ) ) ; }
public void onAttachedToRecyclerView ( @ NonNull RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; database = Realm . getDefaultInstance ( ) ; }
public void onDismiss ( DialogInterface dialog ) { isDialogShowing = false ; }
public void show ( ) { adderDialog . getInputEditText ( ) . setText ( "" ) ; adderDialog . show ( ) ; }
public int getCount ( ) { return size ; }
public String getY ( ) { return y ; }
public int getCount ( ) { return dbNotes . size ( ) ; }
private void sendRegistrationId ( String regId ) { this . mPubNub . enablePushNotificationsOnChannel ( currentUser . getEmail ( ) , regId , new BasicCallback ( ) ) ; }
public boolean getIsAppendingDateTimeToBackups ( ) { return getBoolean ( R . string . settings_key_backup_append_date_time , false ) ; }
public void loadOldArticles ( int sid ) { if ( ! mArticlesView . isRefreshing ( ) ) { mArticlesView . setLoading ( true ) ; doRequest ( CnBetaApiHelper . oldArticles ( mTopicId , sid ) ) ; } }
public void testTokenerConstructorNull ( ) throws JSONException { try { new JSONArray ( ( JSONTokener ) null ) ; fail ( ) ; } catch ( NullPointerException e ) { } }
public UserBuilder phone ( String home ) { this . address . setPhone ( home ) ; return this ; }
public Association getAssociation ( ) { return association ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getSupportMenuInflater ( ) . inflate ( R . menu . activity_person_lookup , menu ) ; return true ; }
public PublicKey getPIPubkey ( String serial ) { if ( baseFilePath == null ) return null ; return getPIPubkey ( baseFilePath , serial ) ; }
public String getDefaultName ( ) { return AnkiDroidApp . getAppResources ( ) . getString ( defaultName ) ; }
public void onAnimationUpdate ( ValueAnimator animation ) { if ( compositionLayer != null ) { compositionLayer . setProgress ( animator . getProgress ( ) ) ; } }
public static void startShortcut ( Context context , AppEntry entry , ShortcutInfo shortcut , View view ) { launchApp ( context , entry , null , false , false , shortcut , view ) ; }
public void onViewRecycled ( VH holder ) { onViewRecycled ( holder , holder . getItemViewType ( ) ) ; }
public boolean onTransactionUpdate ( int pWalletOffset , Transaction pTransaction ) { return true ; }
private void hideToolbars ( ) { if ( ! mToolbarHidden && mSettings . dynamicToolbars ( ) && ! mSettings . isFixedSidebar ( ) ) { toggleTopToolbar ( false ) ; toggleBottomToolbar ( false ) ; } }
public String getFilename ( ) { return mFilename ; }
private void shutdownPlugins ( ) { for ( Plugin p : plugins ) { p . shutdown ( ) ; p = null ; } plugins . clear ( ) ; }
public boolean isFromReviewer ( ) { return fromReviewer ; }
public ViewPagerAdapter ( FragmentManager fragmentManager ) { super ( fragmentManager ) ; }
public static void stopForegroundTask ( @ NonNull Context context ) { Intent intent = new Intent ( context , GenericForegroundService . class ) ; intent . setAction ( ACTION_STOP ) ; context . startService ( intent ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; host = ( DefeatDestructiveTouchToPlayDialogHost ) context ; }
public FunnySurface ( ) { width = 1 ; height = 1 ; mem = new byte [ width*height ] ; }
public void stop ( ) { mExoPlayer . stop ( ) ; mTrackSelector . clearSelectionOverrides ( ) ; mHtspSubscriptionDataSourceFactory . releaseCurrentDataSource ( ) ; mHtspFileInputStreamDataSourceFactory . releaseCurrentDataSource ( ) ; if ( mMediaSource != null ) { mMediaSource . releaseSource ( ) ; } }
public MultipleChoiceFormInput ( Context context , AttributeSet attrs ) { this ( context , attrs , android . R . attr . spinnerStyle ) ; }
public boolean onNavigationItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; DrawerLayout drawer = ( DrawerLayout ) findViewById ( R . id . drawer_layout ) ; drawer . closeDrawer ( GravityCompat . START ) ; return true ; }
public IntentResolver ( Activity activity , PickSetup setup , Bundle savedInstanceState ) { this . activity = activity ; this . setup = setup ; if ( savedInstanceState != null ) { onRestoreInstanceState ( savedInstanceState ) ; } }
public SpinnerWithCloseEvent ( Context context , int mode ) { super ( context , mode ) ; }
public static int getIconDarkThemeColor ( @ NonNull Context context ) { return ContextCompat . getColor ( context , R . color . icon_dark_theme ) ; }
public org . thoughtcrime . securesms . backup . BackupProtos . SqlStatement getDefaultInstanceForType ( ) { return org . thoughtcrime . securesms . backup . BackupProtos . SqlStatement . getDefaultInstance ( ) ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equal ( criterion , ( ( CustomFilter ) other ) . criterion ) ; }
public int getCount ( ) { if ( images . size ( ) == 0 ) return 1 ; return images . size ( ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; this . api = new API ( RuntimeEnvironment . application ) ; }
public APIResponse ( APIState state ) { this ( state , null ) ; }
public void addView ( View v ) { LinearLayout container = ( LinearLayout ) findViewById ( R . id . container ) ; container . addView ( v ) ; }
public void destroyItem ( ViewGroup container , int position , Object object ) { View view = ( View ) object ; container . removeView ( view ) ; }
public LiveData < EducationEntity > load ( int educationId ) { return mDataRepository . getDatabase ( ) . educationDao ( ) . load ( educationId ) ; }
public void setUrlForVideoPressId ( final String videoId , final String videoUrl , final String posterUrl ) { VideoPressExtensionsKt . updateVideoPressThumb ( content , posterUrl , videoUrl , videoId ) ; }
public static String formUrlPoster ( @ NonNull String img_url ) { return URL_POSTER_PICS + img_url ; }
public UseCaseHandler ( UseCaseScheduler useCaseScheduler ) { this . mUseCaseScheduler = useCaseScheduler ; }
public int size ( ) { return appInfoList . size ( ) ; }
public void onLoadingStarted ( String imageUri , View view ) { imageShown = true ; size . setVisibility ( View . VISIBLE ) ; mView = view ; }
public Message newMessage ( String type ) { return new MessageImpl ( type , name ) ; }
public void onNext ( Response response ) { }
public void attachView ( CreateNewClientMvpView mvpView ) { super . attachView ( mvpView ) ; }
private Conversation ( Context context ) { mContext = context ; mThreadId = 0 ; }
public void setVersion ( int version ) { mPerInstallationPrefs . edit ( ) . putInt ( Constants . PREF_VERSION , version ) . apply ( ) ; }
public boolean isPendingDownload ( ) { return getTransferState ( ) == AttachmentDatabase . TRANSFER_PROGRESS_FAILED || getTransferState ( ) == AttachmentDatabase . TRANSFER_PROGRESS_AUTO_PENDING ; }
public String getAppTitle ( ) { return appTitle ; }
public boolean isFullScreen ( ) { return mPlayerState == PLAYER_FULL_SCREEN ; }
private void changeInfiniteSoundPrefs ( ) { boolean isChecked = binding . infiniteSoundOptionPrefs . isChecked ( ) ; binding . infiniteSoundOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setInfiniteSoundEnabled ( ! isChecked ) ; }
public void onClick ( boolean longClick ) { Intent intent = new Intent ( c , ExampleMaterialAboutLicenseActivity . class ) ; intent . putExtra ( ExampleMaterialAboutActivity . THEME_EXTRA , theme ) ; c . startActivity ( intent ) ; }
public void onMovieClicked ( Movie movie ) { mCallback . onMovieClicked ( movie ) ; }
public void run ( ) { isRecordingVideo = true ; mediaRecorder . start ( ) ; ToastUtils . showLongToast ( getActivity ( ) . getString ( R . string . stop_video_capture_instruction ) ) ; }
public void hide ( ) { mAnchorView . setSystemUiVisibility ( mHideFlags ) ; }
private void setTagTitle ( String title ) { this . mTagTitle = StringUtils . notNullStr ( title ) ; }
private boolean validPath ( String path ) { try { StatFs stat = new StatFs ( path ) ; stat . getBlockCount ( ) ; return true ; } catch ( Exception e ) { FirebaseCrash . report ( e ) ; return false ; } }
public void show ( FragmentManager manager , String tag ) { try { manager . beginTransaction ( ) . add ( this , tag ) . commitAllowingStateLoss ( ) ; } catch ( IllegalStateException e ) { Timber . w ( e ) ; } }
private void setupToolbar ( ) { setSupportActionBar ( mToolbar ) ; if ( getSupportActionBar ( ) != null ) { getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; } }
private void givenSomeKnownProvider ( ) { mServiceConfig . setWeatherProvider ( mDefaultProvider ) ; }
public void movePlaneUp ( ) { boolean valid = m_PlaneRound . movePlaneUpwards ( m_Selected ) == 1 ? true : false ; updateBoards ( ) ; m_BottomPane . setDoneEnabled ( valid ) ; }
public static void logStackTrace ( Throwable throwable ) { logStackTraceWithMessage ( DEFAULT_LOG_TAG , null , throwable , true ) ; }
public void onResume ( ) { super . onResume ( ) ; mDataManager . reload ( ) ; mAdapter . notifyDataSetChanged ( ) ; }
public void onResult ( Status status ) { if ( status . isSuccess ( ) ) { Log . i ( TAG , "Distance Listener registered ! " ) ; } else { Log . i ( TAG , "Distance Listener not registered . " ) ; } }
public com . coinomi . core . protos . Protos . Wallet . EncryptionType getEncryptionType ( ) { return encryptionType_ ; }
public Builder lastStepCancelButtonText ( String lastStepCancelButtonText ) { style . lastStepCancelButtonText = lastStepCancelButtonText ; return this ; }
public FormHierarchyPage clickGoToArrow ( ) { onView ( withId ( R . id . menu_goto ) ) . perform ( click ( ) ) ; return new FormHierarchyPage ( formName , rule ) . assertOnPage ( ) ; }
public void onFailure ( @ NonNull Exception e ) { Log . d ( TAG , "Failed to request the connection . " ) ; }
private boolean doesContainMediaAndWasSharedToMediaLibrary ( ShareAction shareAction , int numberOfMediaShared ) { return shareAction != null && ( numberOfMediaShared > 0 && ShareAction . SHARE_TO_MEDIA_LIBRARY . analyticsName . equals ( shareAction . analyticsName ) ) ; }
public void clickingButton_whenActivityIsAvailableAndPromptHasAnswer_launchesCorrectIntent ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) ; widget . launchOpenMapKitButton . performClick ( ) ; assertIntentExtrasEquals ( "blah" ) ; }
public double getSmallestValue ( ) { return 0 ; }
public void lock ( ) { mStatus = Status . LOCKED ; }
public SimpleItemRecyclerViewAdapter ( List < DummyContent . DummyItem > items ) { mValues = items ; }
private static double calcRemain ( double curve , double median , double volts ) { return ( 99 . 9 / ( 1 . 0 + Math . pow ( curve , median - volts ) ) + 1 ) ; }
public void onResult ( DictionaryItem result ) { dictionaryItem = result ; updateViews ( ) ; }
public void finish ( ) { disposable . clear ( ) ; }
public void dismiss ( ) { if ( this . author != null ) this . author . removeListener ( this ) ; this . id = 0 ; this . author = null ; this . body = null ; setVisibility ( View . GONE ) ; }
public void setTextSize ( float size ) { textSize ( size ) ; invalidate ( ) ; }
public void setFeeChargesAtDisbursementCharged ( Integer feeChargesAtDisbursementCharged ) { this . feeChargesAtDisbursementCharged = feeChargesAtDisbursementCharged ; }
public FeaturedAdapter ( Context mContext , List < Project > projects ) { this . mContext = mContext ; this . projects = projects ; }
public boolean canCreate ( ) { return block != null || blockID != null || blockNumber != null ; }
public FingerprintDialog circleSuccessColor ( int circleSuccessColor ) { this . fingerprintView . circleSuccessColor ( circleSuccessColor ) ; return this ; }
public EventListFragment ( ) { }
public VertretungsplanSaved ( Vertretungsplan vertretungsplan ) { this . vertretungsplan = vertretungsplan ; }
public int compareTo ( @ NonNull Expense other ) { if ( date != null && other != null && other . getDate ( ) != null ) return date . compareTo ( other . getDate ( ) ) ; return 0 ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . PI ) ; }
public static void cancelNotification ( Context context ) { NotificationManager nm = ( NotificationManager ) context . getSystemService ( NOTIFICATION_SERVICE ) ; nm . cancel ( NOTIFICATION_ID ) ; }
public ZoomingImageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void setNumThreadsUl ( Long numThreadsUl ) { this . numThreadsUl = numThreadsUl ; }
private String usable_name ( String name ) { name = strip ( name ) ; name = name . replace ( "\"" , "" ) ; name = Normalizer . normalize ( name , Normalizer . Form . NFC ) ; return name ; }
public float getRate ( ) { return rate ; }
private boolean donationInstalled ( ) { PackageManager packageManager = context . getPackageManager ( ) ; try { packageManager . getPackageInfo ( "exa . lnx . d" , 0 ) ; return true ; } catch ( PackageManager . NameNotFoundException e ) { return false ; } }
public void onClick ( DialogInterface dialog , int id ) { new MicropubAction ( context , user ) . deleteItem ( contact . getInternalUrl ( ) ) ; contacts . remove ( position ) ; notifyDataSetChanged ( ) ; }
public void onLoginFailureTracking ( Throwable e ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsHelper . PARAM_MESSAGE , e . getMessage ( ) ) ; analyticsHelper . trackLoginFailure ( bundle ) ; }
private String text ( ) { return builder . toString ( ) ; }
public void setTst ( long tst ) { this . tst = tst ; }
public void testIsWPCOMURI3 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( wpcomAddress3 ) ) ) ; }
public float getFitZoom ( State state ) { return zoomBounds . set ( state ) . getFitZoom ( ) ; }
private void unidirectionalCondition ( DataSupport baseObj , DataSupport associatedModel ) { dealsAssociationsOnTheSideWithoutFK ( baseObj , associatedModel ) ; }
public void onFailure ( Call call , IOException e ) { Log . e ( TAG , "Server connection failed : " + e . getMessage ( ) ) ; }
private DrinkCategoryDB createCategory ( long index , String name , String icon ) { return new DrinkCategoryDB ( adapter , sizes , index , name , icon ) ; }
public void onAnimationCancel ( Animator animation ) { sweepAngle = ( int ) finalAngle ; invalidate ( ) ; progressAnimator = null ; }
public void run ( ) { if ( bpmText != null ) { bpmText . setText ( String . format ( "%03d BPM" , ( int ) v ) ) ; } }
public int getCount ( ) { return this . lessons . length ( ) ; }
public RadarDataSet ( List < Entry > yVals , String label ) { super ( yVals , label ) ; }
private static boolean all ( boolean [ ] booleans ) { for ( boolean b : booleans ) { if ( b ) { return false ; } } return true ; }
public void populateList ( ArrayList < String > list ) { adapter . insertList ( list ) ; }
public int getSlideId ( ) { return getArguments ( ) . getInt ( ARGUMENT_ID ) ; }
public void release ( ) { player . setVideoListener ( null ) ; player . release ( ) ; }
private VirtualKey findPressedKey ( ) { for ( VirtualKey virtualKey : VirtualKey . values ( ) ) { if ( mKeyMapper . isKeyPressed ( virtualKey ) ) { return virtualKey ; } } return null ; }
public void setRangeStepModel ( XYStepModel rangeStepModel ) { this . rangeStepModel = rangeStepModel ; }
public static boolean isTynmarket ( ) { TwitterSession session = TwitterCore . getInstance ( ) . getSessionManager ( ) . getActiveSession ( ) ; return session . getUserId ( ) == TYNMARKET_USER_ID ; }
public void onBackPressed ( ) { if ( mFragmentManager . getBackStackEntryCount ( ) > 0 ) { mFragmentManager . popBackStack ( ) ; } else { super . onBackPressed ( ) ; } }
public UIHandler ( @ NonNull final LatinIME ownerInstance ) { super ( ownerInstance ) ; }
public void testIsTextInputLayoutViewTrue ( ) { assertTrue ( mValidationHolderRegexTypeWithTextInputLayout . isTextInputLayoutView ( ) ) ; assertTrue ( mValidationHolderRangeTypeWithTextInputLayout . isTextInputLayoutView ( ) ) ; assertTrue ( mValidationHolderConfirmationTypeWithTextInputLayout . isTextInputLayoutView ( ) ) ; assertTrue ( mValidationHolderCustomTypeWithTextInputLayout . isTextInputLayoutView ( ) ) ; }
public static SortingDialogFragment newInstance ( IMoviesListingPresenter moviesListingPresenter ) { SortingDialogFragment . moviesListingPresenter = moviesListingPresenter ; return new SortingDialogFragment ( ) ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . SharedPreference parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void setCullExtraneous ( boolean pIn ) { the_tree . setCullExtraneous ( pIn ) ; }
private void handleResponse ( ) { hideProgress ( ) ; hideError ( ) ; setAttacher ( ) ; }
public ClockView ( Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initView ( context , attrs , defStyleAttr ) ; }
public NormalTicTacAi ( ) { solution = null ; }
public void die ( Object cause ) { Ghost . Quest . process ( pos ) ; super . die ( cause ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "automove" , ! checked ) . apply ( ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return clockFragment ; case 1 : return appsFragment ; case 2 : return favFragment ; default : return null ; } }
private double mgTopound ( double num ) { return num * 0 . 0000022046 ; }
private void openAppCommunity ( ) { PlaceFactory . getOwnerWallPlace ( getAccountId ( ) , - APP_GROUP_ID , null ) . tryOpenWith ( getActivity ( ) ) ; }
public Fragment getItem ( int position ) { AdmissionPercentageFragment fragment = AdmissionPercentageFragment . newInstance ( mData . get ( position ) . id ) ; mReferenceMap . put ( position , fragment ) ; return fragment ; }
public static void saveConfig ( boolean withFile ) { saveConfig ( withFile , null ) ; }
public static void loadMarker ( ImageView view , int color ) { view . setImageResource ( new ThemeUtil ( view . getContext ( ) ) . getMarkerStyle ( color ) ) ; }
public void run ( ) { UTILS . showToast ( BrowserActivity . this , R . string . text_loadFailed ) ; }
public static int getInteger ( @ AttrRes final int attr , final Context context ) { return context . getResources ( ) . getInteger ( getAttrIdValue ( attr , context ) ) ; }
public void readStartEndExceedException ( ) throws IOException { byte [ ] buff = new byte [ 100 ] ; int start = 95 ; int end = 110 ; int n = cs . read ( buff , start , end ) ; }
public PostListingURL after ( String after ) { return new SearchPostListURL ( subreddit , query , limit , before , after ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mCommodityDetailAdapter . setList ( null ) ; }
private void loadUserData ( String userId ) { view . showProgress ( R . string . a_carregar ) ; model . getUser ( userId , this ) ; }
public void onResume ( ) { super . onResume ( ) ; settingsProvider . getAdminSettings ( ) . registerOnSettingChangeListener ( this ) ; }
public TextView getTargetTextDetails ( ) { return targetTextDetails ; }
public void makeEventSort_WhenSortTypeOldestDate_ReturnCorrectComparator ( ) { Comparator < EventSortable > sut = EventSortFactory . makeEventSort ( SortType . OLDEST_DATE ) ; int result = sut . compare ( event1 , event2 ) ; assertThat ( result , lessThan ( 0 ) ) ; }
public void setOnLongClickListener ( OnLongClickListener l ) { mLaunchIntentButton . setOnLongClickListener ( l ) ; }
public void onUserSelected ( int c , String chan , String nick ) { UsersList u = UsersList . getInstance ( ) ; showUserPopup ( u . getUser ( buffer . getBid ( ) , nick ) , null , null , null ) ; }
public int hashCode ( ) { int result = host != null ? host . hashCode ( ) : 0 ; result = 31 * result + ( version != null ? version . hashCode ( ) : 0 ) ; return result ; }
public boolean isUmlautConvertActivated ( ) { return mSharedPreferences . getBoolean ( KEY_UMLAUTCONVERT , false ) ; }
public String getGeoeffnet ( ) { return this . _geoeffnet ; }
public boolean getShowDaysWithoutEvents ( ) { return sharedPreferences . getBoolean ( PREF_SHOW_DAYS_WITHOUT_EVENTS , false ) ; }
public void onPause ( ) { super . onPause ( ) ; Reporting . syncPermissions ( getActivity ( ) ) ; }
public static boolean hasMpdecision ( ) { return SysUtils . executeCommandWithOutput ( "getprop | grep mpdecision \n" ) . length ( ) > 1 ; }
public int getInstalledSize ( ) { return installedSize ; }
public final void add ( RRGLRenderable child ) { mChildren . add ( child ) ; if ( isAdded ( ) ) { child . onAdded ( ) ; } }
public void run ( ) { mWebview . reload ( ) ; }
public void onDisconnected ( ) { showSyncLogMessage ( R . string . youre_offline ) ; }
public int getCurrentForumPage ( ) { return currentForumPage ; }
public int getConfigType ( ) { return ConfigRecyclerViewAdapter . TYPE_UNREAD_NOTIFICATION_CONFIG ; }
public AmountHolder ( View v ) { super ( v ) ; itemTotal = itemView . findViewById ( R . id . ibc_total_amount ) ; itemAvailable = itemView . findViewById ( R . id . ibc_available_amount ) ; }
public String desc ( ) { return Game . getVar ( descId ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mData ) ; }
public ContentProviderClient provideRecentSearchContentProviderClient ( Context context ) { return context . getContentResolver ( ) . acquireContentProviderClient ( RECENT_SEARCH_AUTHORITY ) ; }
public Integer getInterestWaived ( ) { return interestWaived ; }
public com . coinomi . core . protos . Protos . Transaction getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . Transaction . getDefaultInstance ( ) ; }
public static void showSimpleSnackbar ( Activity activity , String mainText , boolean shortLength ) { View root = activity . findViewById ( R . id . root_layout ) ; showSnackbar ( activity , mainText , shortLength , - 1 , null , root , null ) ; }
public void clearSelectedTransactions ( long [ ] ids ) { String sql = "UPDATE " + TRANSACTION_TABLE + " SET " + TransactionColumns . status + " = '" + TransactionStatus . CL ; runInTransaction ( sql , ids ) ; }
public MovingImageUI ( ImageButtonStyle style ) { super ( style ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newAddIngredientFragmentComponent ( new AddIngredientFragmentModule ( this , savedInstanceState ) ) . inject ( this ) ; componentFactory = null ; }
private void showAddOrientationDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; AddOrientationDialogFragment dialog = new AddOrientationDialogFragment ( ) ; dialog . show ( this . getFragmentManager ( ) , "AddOrientationDialogFragment" ) ; }
public final void animateBackgroundShow ( ) { this . _animateBackground = true ; invalidate ( ) ; }
public void onFailure ( ExecutionException e ) { onLogin ( ) ; }
public PageAdapterRecord ( FragmentManager fm , Context context ) { super ( fm ) ; this . context = context ; }
public String getReblogsCount ( ) { return reblogsCount ; }
public MyBean getJoke ( ) { MyBean response = new MyBean ( ) ; Joker myJoker = new Joker ( ) ; String externalJoke = myJoker . getJoke ( ) ; response . setData ( externalJoke + " [ via GCE ] " ) ; return response ; }
public void show ( String currentName ) { dialog . getInputEditText ( ) . setText ( currentName ) ; dialog . show ( ) ; }
public BookmarksDBAdapter ( Context context , int numberOfPages ) { BookmarksDBHelper dbHelper = BookmarksDBHelper . getInstance ( context , numberOfPages ) ; mDb = dbHelper . getWritableDatabase ( ) ; }
public static View getContentView ( ) { return mSingleton . mLayout ; }
public RecentSongsAdapter ( List < Song > songs ) { this . songs = songs ; }
private AixUpdate ( Context context , AixWidgetInfo aixWidgetInfo , AixSettings aixSettings ) { mContext = context ; mWidgetInfo = aixWidgetInfo ; mWidgetUri = aixWidgetInfo . getWidgetUri ( ) ; mAixSettings = aixSettings ; mUtcTimeZone = TimeZone . getTimeZone ( "UTC" ) ; }
public void onReceive ( Context context , Intent intent ) { updateUI ( intent . getExtras ( ) , false ) ; }
public void whenRangeQuestionHasZeroRangeStep_sliderIsDisabled ( ) { when ( rangeQuestion . getRangeStep ( ) ) . thenReturn ( BigDecimal . ZERO ) ; RangeWidgetUtils . isWidgetValid ( rangeQuestion , slider ) ; assertFalse ( slider . isEnabled ( ) ) ; }
public void setGaplessDatabaseFilePath ( String databaseFile ) { mGaplessDatabasePath = databaseFile ; }
public void clipView ( @ Nullable RectF rect , float rotation ) { clipHelper . clipView ( rect , rotation ) ; }
public void addSlide ( int location , Slide object ) { adapter . addSlide ( location , object ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; MathBrainerUtility . showUnityAdsRandom ( this ) ; }
public static void registerPushNotifications ( Context context , String registrationId ) { Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_PUSH_REGISTERED ) ; i . putExtra ( PUSH_REGISTRATION_ID , registrationId ) ; context . startService ( i ) ; }
public int getFrame ( ) { if ( composition == null ) { return 0 ; } return ( int ) ( getProgress ( ) * composition . getDurationFrames ( ) ) ; }
public void onPause ( ) { super . onPause ( ) ; Settings . save ( ) ; mGameView . onPause ( ) ; }
public void setLinkColor ( int linkColor ) { this . linkHighlightColor = linkColor ; }
public void onError ( String msg , Throwable e ) { Log . e ( TAG , msg , e ) ; onSuccess ( Collections . < String > emptyList ( ) ) ; }
public String getDisplayName ( ) { return displayName ; }
public void onClick ( View v ) { if ( clickListener != null ) { int pos = vh . getAdapterPosition ( ) ; AirportGson airport = mAirports . get ( pos ) ; clickListener . onAirportClick ( airport ) ; } }
public JsonElement DELETE ( String endpoint ) throws IOException { HttpURLConnection connector = this . connectToServer ( "DELETE" , endpoint ) ; JsonElement payload = this . getPayloadFromServer ( connector ) ; return payload ; }
public int getInitialFactor ( ) { return initialFactor ; }
private void showRepeatTime ( ) { binding . repeatIntervalPrefs . setDetailText ( String . format ( Locale . getDefault ( ) , getString ( R . string . x_minutes ) , String . valueOf ( mPrefs . getNotificationRepeatTime ( ) ) ) ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . manage_libraries ) ; }
public void setImageURI ( Uri uri ) { super . setImageURI ( uri ) ; updateDrawableBounds ( ) ; handleImageChange ( ) ; }
public void deleteAllSessions ( String name ) { AxolotlAddress address = new AxolotlAddress ( name , 0 ) ; mXmppConnectionService . databaseBackend . deleteAllSessions ( account , address ) ; }
public String getImage ( ) { return mImage ; }
public TimedPoint ( float x , float y ) { this . x = x ; this . y = y ; this . timestamp = System . currentTimeMillis ( ) ; }
private void Init ( Context context ) { mContext = context ; mImeManager = ( InputMethodManager ) mContext . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; showKeyboard ( ) ; }
public RxMockitoJUnitRunner ( Class < ? > klass ) throws InvocationTargetException { super ( klass ) ; TestRxPlugins . registerImmediateHook ( ) ; }
public void onAdLoaded ( ) { Log . d ( "Interstitial Ad Test" , "Add Finished Loading" ) ; }
public static Integer readNullableInt ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) return null ; return in . readInt ( ) ; }
public static Builder newBuilder ( org . thoughtcrime . securesms . backup . BackupProtos . Attachment prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
private DialogInterface . OnClickListener removeFromRoster = new DialogInterface . OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { xmppConnectionService . deleteContactOnServer ( contact ) ; } } ;
public int setSerialBaudRate ( int brate ) { baudRate = brate ; Settings . serialBaudRate = baudRate ; return baudRate ; }
public TLRPC . TL_userFull getUserFull ( int uid ) { return fullUsers . get ( uid ) ; }
public SearchHistoryDao ( BriteDatabase database ) { super ( SearchHistoryModel . class , database ) ; table = new SearchHistoryTable ( ) ; placesTable = new PlacesTable ( ) ; itemFactory = new DatabaseViewPlaceAndPlateFactory ( ) ; placesCount = getPlacesCount ( ) ; standardPlacesWithPlateCount = getStandardPlacesWithPlateCount ( ) ; }
public void onCreate ( ) { mActivity . getTerminalView ( ) . setTextSize ( mActivity . getPreferences ( ) . getFontSize ( ) ) ; mActivity . getTerminalView ( ) . setKeepScreenOn ( mActivity . getPreferences ( ) . shouldKeepScreenOn ( ) ) ; }
public ModelListElement ( String text , String key , ModelType . MODELS type ) { this . text = text ; this . key = key ; this . type = type ; }
public AboutBuilder addGitHubLink ( String user ) { return addLink ( R . mipmap . github , R . string . github , util . uri ( R . string . url_github , user ) ) ; }
public void setDialog ( TLRPC . TL_dialog dialog , int i , int type ) { currentDialogId = dialog . id ; isDialogCell = true ; index = i ; dialogsType = type ; update ( 0 ) ; }
public PlayerMessage createMessage ( PlayerMessage . Target target ) { return player . createMessage ( target ) ; }
public ProjectManagementPage clickProjectManagement ( ) { clickOnString ( R . string . project_management_section_title ) ; return new ProjectManagementPage ( ) . assertOnPage ( ) ; }
public UserCreditsFragment ( ) { webScrapper = new WebScrapper ( ) ; }
public void setPhoto ( Bitmap photo ) { this . photo = photo ; }
private void readObject ( final java . io . ObjectInputStream s ) throws java . io . IOException , ClassNotFoundException { s . defaultReadObject ( ) ; int size = s . readInt ( ) ; buildFromSorted ( size , null , s , null ) ; }
private final MessageListAdapter . OnContentChangedListener mContentChangedListener = new MessageListAdapter . OnContentChangedListener ( ) { public void onContentChanged ( MessageListAdapter adapter ) { if ( isVisible ( ) ) startQuery ( false ) ; } } ;
public void onAnimationEnd ( Animator animation ) { super . onAnimationEnd ( animation ) ; search . setVisibility ( View . GONE ) ; }
public void onConnected ( @ Nullable Bundle bundle ) { placeArrayAdapter . setGoogleApiClient ( mGoogleApiClient ) ; }
public void onPause ( ) { thread . run ( ( ) -> { log . v ( TAG , "Activity paused" ) ; timeRemainingWidget . stop ( ) ; } ) ; }
public void onDestroy ( ) { mAdvancedInterval . onDestroy ( ) ; }
public int getCount ( ) { return 4 ; }
public MyListAdapter_permission ( ) { super ( context , R . layout . list_item_profile , profileListItems ) ; }
public BaseAnimation ( FunnyDisplay display ) { this . display = display ; }
public void setError ( boolean b ) { }
public void testWrongConstructor ( ) throws Exception { Grade grade = new Grade ( "ASDF" ) ; Grade grade2 = new Grade ( "a10" ) ; assertEquals ( "5a" , grade . toString ( ) ) ; assertEquals ( "5a" , grade2 . toString ( ) ) ; }
public void restore ( ) { }
public static DataManager dataManager ( ) { return get ( ) . getDataManager ( ) ; }
public void setBlock ( TLRPC . TL_pageBlockPullquote block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
public void setPosition ( int position ) { this . position = position ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseSongOffer prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
private boolean shouldShowEmptyViewForSelfHostedCta ( ) { return isFollowingScreen ( ) && ! mAccountStore . hasAccessToken ( ) && mSubFilterViewModel . getCurrentSubfilterValue ( ) instanceof SiteAll ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; data = requireArguments ( this ) . getParcelable ( ARG_DATA_MENU ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new RecipeDetailsViewModel ( mRecipe ) ; }
public String getUserId ( ) { return postModel . getUserId ( ) ; }
public void onNewSearchResults ( IAddressSearch addressSearch ) { this . addressSearch = addressSearch ; notifyDataSetChanged ( ) ; listener . onSearchResult ( ) ; }
public int getChildrenCount ( int groupPosition ) { return mifosGroups . get ( groupPosition ) . getClients ( ) . size ( ) ; }
public void currentChanged ( VehicleDef vehicle , int index ) { updateVehicleDetails ( vehicle ) ; }
public InputViewPager ( @ NonNull Context context ) { super ( context ) ; }
public ContentProviderClient provideModificationContentProviderClient ( Context context ) { return context . getContentResolver ( ) . acquireContentProviderClient ( MODIFICATIONS_AUTHORITY ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { dialog . cancel ( ) ; }
public void playPause ( ) { switch ( mPlaybackState ) { case PLAYING : pause ( ) ; break ; case PAUSED : case IDLE : play ( getCurrentPosition ( ) ) ; break ; } }
private void setErrNoVisible ( ) { mTvNameNone . setVisibility ( View . GONE ) ; mTvNameAlready . setVisibility ( View . GONE ) ; mTvLengthErr . setVisibility ( View . GONE ) ; mTvPwMatch . setVisibility ( View . GONE ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { GPSInfo . this . toggleDisplayGPS ( ) ; }
public Double getTime ( ) { return time ; }
public void newEntry ( View view ) { AnimusLauncherMethods . newEntry ( this ) ; }
public void onBatchScanResults ( List < ScanResult > results ) { for ( ScanResult sr : results ) { Log . i ( TAG , "ScanCallback . onBatchScanResults . each : " + sr . toString ( ) ) ; } }
public void start ( ) { Thread thread = new Thread ( this ) ; thread . setName ( "leecher_" + file . getShownName ( ) ) ; thread . start ( ) ; }
public boolean hasSource ( ) { return ( ( bitField0_ & 0x00000020 ) == 0x00000020 ) ; }
public void beforeSave ( boolean deleteStyleEmpty ) { if ( deleteStyleEmpty ) { deleteStyleEmpty ( ) ; } this . mIsCalledHtmlRequest = true ; mWebView . makeEditableHtmlRequest ( ) ; }
public LanguagePreference ( Context context ) { super ( context ) ; loadLangs ( context , null ) ; }
public void ok ( ) { Intent intent = IntentFactory . createAppDetailsIntent ( pn ) ; startActivity ( intent ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( TAG , "requestRandomAuthNumber failed" ) ; }
public float getFactor ( ) { RectF content = mViewPortHandler . getContentRect ( ) ; return ( float ) Math . min ( content . width ( ) / 2f , content . height ( ) / 2f ) / mYAxis . mAxisRange ; }
public void setSource ( MjpegInputStream stream ) { if ( ! ( stream instanceof MjpegInputStreamDefault ) ) { throw new IllegalArgumentException ( "stream must be an instance of MjpegInputStreamDefault" ) ; } _setSource ( ( MjpegInputStreamDefault ) stream ) ; }
public void onClick ( View v ) { int adapterPosition = getAdapterPosition ( ) ; Bookmark bookmark = mSortedData . get ( adapterPosition ) ; if ( mClickHandler != null ) mClickHandler . onFavoriteClick ( bookmark ) ; }
public void onOpenClick ( View view ) { REQUEST_CODE = 1 ; Intent i_open = new Intent ( ) ; i_open . setAction ( Intent . ACTION_GET_CONTENT ) ; startActivityForResult ( Intent . createChooser ( i_open , "Select Image" ) , REQUEST_CODE ) ; }
private BroadcastReceiver disappearingReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { doNotHide = false ; } } ;
public WalletAddressesAdapter ( RealmList < WalletAddress > data , NativeDataHelper . Currency currency ) { this . data = data ; if ( currency == NativeDataHelper . Currency . BTC ) { this . currency = "BTC" ; } else { this . currency = "ETH" ; } }
public CropImageView . Guidelines getGuidelines ( ) { return mGuidelines ; }
public static RxSnackbar make ( @ NonNull View root , @ StringRes int titleRes , @ Snackbar . Duration int duration ) { return new RxSnackbar ( Snackbar . make ( root , titleRes , duration ) ) ; }
private void initSharedPreferences ( ) { new Prefs . Builder ( ) . setContext ( this ) . setMode ( MODE_PRIVATE ) . setPrefsName ( PREFS_NAME ) . setUseDefaultSharedPreference ( true ) . build ( ) ; }
public static int calculateMaxExp ( int level , int offset ) { return ( int ) ( 2 * level * ( Math . pow ( 1 . 35 , level / 3 ) ) + offset ) + 4 ; }
public void onClick ( View v ) { Intent i = new Intent ( LiveThread . this , Website . class ) ; i . putExtra ( Website . EXTRA_URL , url ) ; startActivity ( i ) ; }
public boolean isConnectedToRemote ( ) { return btConnection != null && btConnection . isConnected ( ) ; }
public void onClick ( View v ) { final User user = items . get ( this . position ) ; new Accounts ( context ) . switchAccount ( activity , user ) ; }
public void onSkipToNext ( ) { LogHelper . d ( TAG , "skipToNext" ) ; if ( mQueueManager . skipQueuePosition ( 1 ) ) { handlePlayRequest ( ) ; } else { handleStopRequest ( "Cannot skip" ) ; } mQueueManager . updateMetadata ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . next , menu ) ; return true ; }
public void setAlpha ( @ IntRange ( from = 0 , to = 255 ) int alpha ) { target . setAlpha ( alpha ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnListFragmentInteractionListener ) { mListener = ( OnListFragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnListFragmentInteractionListener" ) ; } }
public WPDialogSnackbar setNegativeButton ( CharSequence text , View . OnClickListener listener ) { setButtonTextAndVisibility ( ( TextView ) mContentView . findViewById ( R . id . button_negative ) , text , listener ) ; return this ; }
public void setEntityClass ( DashboardBoxDataLoader . BoxDataEntityClass entityClass ) { this . entityClass = entityClass ; }
public void onFetchCompletion ( OkHttpNetworkFetchState fetchState , int byteSize ) { fetchState . fetchCompleteTime = SystemClock . elapsedRealtime ( ) ; }
public void setArguments ( String userId , long workflowId , long expiredAfterSecs , String spendingLimit ) { this . userId = userId ; this . workflowId = workflowId ; this . expiredAfterSecs = expiredAfterSecs ; this . spendingLimit = spendingLimit ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( ( int ) this . id ) ; dest . writeString ( this . name ) ; dest . writeInt ( this . songCount ) ; }
public String toString ( ) { return from + " . . " + to + ( sent > 0? ( " sent + " + ( sent - ofs ) ) : " not sent" ) + " ?" + query ; }
public DAOMapperArrayList ( Searcher < ? super E > _searcher ) { super ( ) ; this . daoList = new ArrayList < DAO > ( ) ; this . notifyOnChange = true ; this . searcher = _searcher ; }
public VibratorActuator ( Vibrator vibrator , long duration ) { this . duration = duration ; this . vibrator = vibrator ; }
public void getSitePurchases ( String siteId , Listener listener , ErrorListener errorListener ) { String path = String . format ( Locale . US , "sites/%s/purchases" , siteId ) ; get ( path , listener , errorListener ) ; }
public void setTlsCaCrtName ( String tlsCaCrtName ) { this . tlsCaCrtName = tlsCaCrtName ; this . tlsCaCrtNameDirty = true ; notifyChange ( ) ; }
public MapFragmentFactory providesMapFragmentFactory ( ) { return applicationComponent . mapProvider ( ) ; }
public Point ( int number , double east , double north , double altitude , boolean basePoint ) { this ( number , east , north , altitude , basePoint , true ) ; }
private void init ( Context context ) { mContext = context ; mHandler = new Handler ( ) ; fillEmojiMap ( ) ; }
public void run ( ) { MathBrainerRepository repository = ( ( ApplicationProvider ) ApplicationProvider . getsContext ( ) ) . getRepository ( ) ; repository . initGameResults ( ) ; }
public DrawableConfig getIconConfig ( String imageName ) { return new DrawableConfig ( mThemeObject . optJSONObject ( "icon" ) . optJSONObject ( imageName ) ) ; }
public String prompt ( ) { return Utils . capitalize ( Utils . format ( Game . getVar ( R . string . Mob_ReadyForOrder ) , target . getName ( ) ) ) ; }
public boolean isGapless ( ) { return mGaplessDatabasePath != null ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_auth_passwordRecovery . TLdeserialize ( stream , constructor , exception ) ; }
public SectionsPagerAdapter ( Context context , FragmentManager fm ) { super ( fm ) ; mContext = context ; }
public void setUp ( ) { scrollView = mock ( NestedScrollView . class ) ; helper = new VolumeNavigationDelegate . NestedScrollViewHelper ( scrollView ) ; }
public ButtonStyle getButtonStyle ( ) { return ButtonStyle . parse ( settings . getString ( AMPrefKeys . BUTTON_STYLE_KEY , "ANYMEMO" ) ) ; }
public AnnouncementsRecyclerView ( List < Messages > announcements ) { announcementsList = announcements ; }
public void refresh ( ) { executorProvider . getBackgroundExecutor ( ) . execute ( this : : loadList ) ; }
public void onTextInput ( ) { }
private void clearSearchMatches ( ) { mCurrentSearchResultPosition = 0 ; if ( mBookSearchResultsArrayList != null ) { mBookSearchResultsArrayList . clear ( ) ; } }
public String desc ( ) { return Utils . format ( Game . getVar ( R . string . Ring_Info ) , gem ) ; }
public boolean show ( ) { statistics = statisticsManager . get ( Settings . gameWidth , Settings . gameHeight , Settings . gameMode , Settings . hardmode ) ; return super . show ( ) ; }
public AbstractDataProvider getDataProvider ( ) { final Fragment fragment = getSupportFragmentManager ( ) . findFragmentByTag ( FRAGMENT_TAG_DATA_PROVIDER ) ; return ( ( DataProviderFragment ) fragment ) . getDataProvider ( ) ; }
public View getItemContentView ( ) { if ( view == null ) { view = new View ( getOwnerForm ( ) . getParentActivity ( ) ) ; view . setMinimumWidth ( width ) ; view . setMinimumHeight ( height ) ; } return view ; }
public SourcesRetrofitService getSourcesBrowserService ( ) { return retrofit . create ( SourcesRetrofitService . class ) ; }
public void goToWallPost ( int accountId , int postId , int postOwnerId ) { PlaceFactory . getPostPreviewPlace ( accountId , postId , postOwnerId ) . tryOpenWith ( getActivity ( ) ) ; }
public void onServiceConnected ( ComponentName className , IBinder service ) { Log . d ( TAG , "service connected" ) ; mServiceBinder = ( DebatingTimerService . DebatingTimerServiceBinder ) service ; initialiseDebate ( ) ; restoreBinder ( ) ; }
private FpsMeasure ( ) { }
public void release ( final boolean immediately ) { mSensorManager . unregisterListener ( this ) ; }
public void setQuery ( String query ) { setQuery ( query , Collections . < String > emptyList ( ) ) ; }
public static String newNoteState ( Context context ) { return getDefaultSharedPreferences ( context ) . getString ( context . getResources ( ) . getString ( R . string . pref_key_new_note_state ) , context . getResources ( ) . getString ( R . string . pref_default_value_new_note_state ) ) ; }
private void setFragment ( BaseSeedFragment fragment ) { getSupportFragmentManager ( ) . beginTransaction ( ) . add ( R . id . container , fragment , fragment . getClass ( ) . getSimpleName ( ) ) . commit ( ) ; }
public void setFont ( Typeface font ) { PREF_FONT = font ; }
public void testMinimalEncoder8 ( ) throws Exception { verifyMinimalEncoding ( "1" , "NUMERIC ( 1 ) , TERMINATOR ( ) " , null , false ) ; }
public List < VersionedRook > getBooks ( ) { return dbRepo . getBooks ( repoUri ) ; }
public String keyfile ( ) { return mKeyfile ; }
public HashMap < Object , Object > getSelectedPhotos ( ) { return photoAttachAdapter . selectedPhotos ; }
public static String getFileExtension ( File file ) { String name = file . getName ( ) ; try { return name . substring ( name . lastIndexOf ( " . " ) + 1 ) ; } catch ( Exception e ) { return "" ; } }
public int getItemCount ( ) { if ( ! isActiveCursor ( ) ) return 0 ; return cursor . getCount ( ) + ( hasHeaderView ( ) ? 1 : 0 ) + ( hasFooterView ( ) ? 1 : 0 ) ; }
public void setTileSource ( TileSource tileSource , boolean active ) { mTileSource = tileSource ; mActive = active ; }
public void onSuccess ( ) { realm . close ( ) ; callback . onSuccess ( city . getName ( ) ) ; }
public FigureType getRotatedFigure ( ) { return FigureType . L_FIGURE ; }
public SignDataRepo ( ) { signData = new SignData ( ) ; }
public void setUp ( ) throws Exception { mSplitsDbAdapter = SplitsDbAdapter . getInstance ( ) ; mTransactionsDbAdapter = TransactionsDbAdapter . getInstance ( ) ; mAccountsDbAdapter = AccountsDbAdapter . getInstance ( ) ; mAccount = new Account ( "Test account" ) ; mAccountsDbAdapter . addAccount ( mAccount ) ; }
public static void d ( Object string ) { d ( "" , string ) ; }
public Bitmap getThumbForPhoto ( MessageObject messageObject , TLRPC . FileLocation fileLocation , int index ) { return null ; }
public void tagClicked ( Map mapTags , String name ) { ourActivity . flipTagState ( mapTags , name ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; this . mAction = getArguments ( ) . getString ( Extra . ACTION , ACTION_SHOW_PHOTOS ) ; }
public void getAnswer_whenPromptHasAnswer_returnsAnswer ( ) { RangeDecimalWidget widget = createWidget ( promptWithRangeQuestionAndAnswer ( rangeQuestion , new StringData ( "2 . 5" ) ) ) ; assertThat ( widget . getAnswer ( ) . getValue ( ) , equalTo ( 2 . 5 ) ) ; }
public void setPanicButtonPref ( int panicButtonPref ) { editor . putInt ( "PanicButtonPref" , panicButtonPref ) ; editor . commit ( ) ; }
public LocationSource ( Context context ) { this . context = context ; fusedLocationProviderClient = LocationServices . getFusedLocationProviderClient ( context ) ; geocoder = new Geocoder ( context , Locale . getDefault ( ) ) ; }
public static PersistentBlobProvider getInstance ( Context context ) { if ( instance == null ) { synchronized ( PersistentBlobProvider . class ) { if ( instance == null ) { instance = new PersistentBlobProvider ( context ) ; } } } return instance ; }
public void unmuteConversation ( final Conversation conversation ) { conversation . setMutedTill ( 0 ) ; this . activity . xmppConnectionService . updateConversation ( conversation ) ; this . activity . onConversationsListItemUpdated ( ) ; updateMessages ( ) ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public ListDialogFragment newInstance ( ArrayList < String > items , CurrencyType currencyType ) { ListDialogFragment listDialogFragment = new ListDialogFragment ( ) ; listDialogFragment . setItems ( items ) ; listDialogFragment . setCurrencyType ( currencyType ) ; return listDialogFragment ; }
public Object getGroup ( int groupPosition ) { return groups . get ( groupPosition ) ; }
public final synchronized void addMediaSource ( MediaSource mediaSource ) { addMediaSource ( mediaSourcesPublic . size ( ) , mediaSource , null ) ; }
public void onIceConnectionReceivingChange ( boolean receiving ) { Log . w ( TAG , "onIceConnectionReceivingChange : " + receiving ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; new RequestDatabase ( context ) . execute ( ) ; }
public void setEditingActivity ( MultimediaEditFieldActivity activity ) { mActivity = activity ; } ;
public void clear ( View view ) { if ( view . getVisibility ( ) == View . VISIBLE ) { fabActions . performClick ( ) ; reset ( ) ; } }
public void setType ( @ Type String type ) { mType = type ; }
public void onFailure ( Call call , IOException e ) { throw new APIException ( "Failed to fetch StockProducts" ) ; }
public float getLongitude ( ) { return mLongitude ; }
public int getItemCount ( ) { return this . events . size ( ) ; }
public void onScrollStateChanged ( AbsListView view , int scrollState ) { TextView page_title = questview . findViewById ( R . id . quest_page ) ; page_title . setText ( getStringWithLocale ( R . string . questview_page ) . replace ( "%d/%d" , "???" ) ) ; }
public void startReset ( boolean end ) { clear ( ) ; resetTimer . start ( ) ; }
public int getFloors ( ) { return floors ; }
public long getLastModified ( @ NonNull HttpRequest request ) throws IOException { String filePath = mPatternMap . get ( request . getPath ( ) ) ; return mReader . isFile ( filePath ) ? 0 : - 1 ; }
public void create ( ) { ShowMenuScreen ( ) ; }
public void onItemSelected ( AdapterView < ? > adapterView , View view , int position , long id ) { JobList . this . updateChoice ( position ) ; JobList . this . refreshList ( ) ; }
private void deselectAll ( ) { List < Segment > segments = pie . getSeriesRegistry ( ) . getSeriesList ( ) ; for ( Segment segment : segments ) { setSelected ( segment , false ) ; } }
public String Func ( ) throws java . lang . Exception { return echo ( chaine ) ; }
public void setShuffleModeEnabled ( boolean shuffleModeEnabled ) { player . setShuffleModeEnabled ( shuffleModeEnabled ) ; }
private BroadcastReceiver killReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { killHomeActivity ( ) ; } } ;
public boolean presentFragment ( BaseFragment fragment , boolean removeLast , boolean forceWithoutAnimation ) { return parentLayout != null && parentLayout . presentFragment ( fragment , removeLast , forceWithoutAnimation , true ) ; }
private < U > U queryJSON ( String query , U defaultObject ) { synchronized ( mSyncLock ) { if ( mNoteJSON == null ) return defaultObject ; return JSONUtils . queryJSON ( mNoteJSON , query , defaultObject ) ; } }
private float calculateProgression ( KeyFrame previousFrame , KeyFrame nextFrame ) { float totalTime = nextFrame . getTimeStamp ( ) - previousFrame . getTimeStamp ( ) ; float currentTime = animationTime - previousFrame . getTimeStamp ( ) ; return currentTime / totalTime ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = ActivityPrepTimeBellsEditBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
private void closeScreen ( ) { navigatingAway = true ; this . finish ( ) ; connection_activity . overridePendingTransition ( this , R . anim . fade_in , R . anim . fade_out ) ; }
public String getTranslitString ( String src ) { return getTranslitString ( src , false ) ; }
public StoryItem ( String message , int type ) { this . message = message ; this . type = type ; }
public void setOnPageChangeListener ( ViewPager . OnPageChangeListener listener ) { binding . miPager . setOnPageChangeListener ( listener ) ; binding . miPager . addOnPageChangeListener ( this . listener ) ; }
public int getParamRole ( int index ) throws JSONException { JSONObject object = params . getJSONObject ( index ) ; return ( object . getInt ( "role" ) ) ; }
public void addBadWay ( final MessageData badWay ) { if ( badWay == null ) { return ; } if ( badWays == null ) { badWays = new ArrayList < MessageData > ( ) ; } badWays . add ( badWay ) ; }
public int getItemCount ( ) { if ( movieArrayList == null ) return 0 ; return movieArrayList . size ( ) ; }
public void onClick ( View v ) { DialogCreateArticle dialogCreateArticle = new DialogCreateArticle ( mActivity , mApplicationCallback , listener ) ; dialogCreateArticle . show ( ) ; FileAddDialog . this . dismiss ( ) ; }
private void onReset ( ) { lastLost = 0 ; onReload ( "reset" ) ; }
public void onClick ( View view ) { navigateToFollowListPage ( ) ; }
public boolean onClick ( RecyclerView parent , View view , int position , long id ) { mCallback . onPlaylistTouched ( position ) ; return true ; }
public static double covariance ( ArrayList < Double > listData ) { return meanDeviation ( listData ) / mean ( listData ) ; }
private void givenScreenName ( String someScreen ) { mScreenName = someScreen ; }
public void setCiudad ( String ciudad ) { this . mCiudad = ciudad ; }
public void initLog ( ) { scheduler . scheduleAtFixedRate ( this , 3 , 3 , SECONDS ) ; }
public void doPositiveClickContinueDialog ( ) { contAfterMaxLVL = true ; mSelectedPlayer . setWinner ( true ) ; clickPerformed ( findViewById ( R . id . btnLvlUp ) ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( getMainActivity ( ) , NativeTokenDetailActivity . class ) ; intent . putExtra ( "denom" , balance . symbol ) ; startActivity ( intent ) ; }
public boolean shouldOverrideUrlLoading ( WebView view , String url ) { UIUtils . handleUri ( context , Uri . parse ( url ) ) ; return true ; }
public com . coinomi . core . protos . Protos . TransactionInput getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . TransactionInput . getDefaultInstance ( ) ; }
public int getIvl ( ) { return ivl ; }
public void testStringConstructorWrongType ( ) throws JSONException { try { new JSONArray ( " { \"foo\" : false } " ) ; fail ( ) ; } catch ( JSONException e ) { } }
public Barcode getBarcode ( ) { return mBarcode ; }
public int getProteinPercent ( ) { if ( getWeight ( ) == 0 || protein == 0 ) return 0 ; return Math . round ( protein / getWeight ( ) ) * 100 ; }
public String tileDesc ( ) { return Game . getVar ( R . string . Fire_Info ) ; }
public void onLoadFinished ( Loader < Artist > loader , Artist data ) { setArtist ( data ) ; }
public void didLongPressed ( ChatBaseCell cell ) { createMenu ( cell , false ) ; }
public void error ( final int errorCode , Message message ) { hidePrepareFileToast ( prepareFileToast ) ; getActivity ( ) . runOnUiThread ( ( ) -> activity . replaceToast ( getString ( errorCode ) ) ) ; }
public PackedTextureSheet ( Material material ) { packedTextures = new HashMap < String , PackedTexture > ( ) ; this . material = material ; }
public void setMarkerColor ( int color ) { mMarker . setColorFilter ( color , PorterDuff . Mode . SRC_ATOP ) ; initDrawable ( ) ; }
public void pushOperation ( ) { if ( operation . isEmpty ( ) ) return ; drawing . pushOperation ( operation ) ; operation = new PixelOperation ( this ) ; }
public ErrorDialog assertOnPage ( ) { super . assertOnPage ( ) ; checkIsStringDisplayed ( R . string . error_occured ) ; return this ; }
public int getDifficulty ( ) { return difficulty ; }
public LocusInfoField ( @ NonNull String taskerName , @ NonNull String label , @ NonNull Function < LocusInfo , Object > locusInfoGetter ) { this ( taskerName , label ) ; mLocusInfoGetter = locusInfoGetter ; }
private void clearMoviesSortTableIfNeeded ( DiscoverAndSearchResponse < MovieEntity > discoverMoviesResponse , String sort ) { if ( discoverMoviesResponse . getPage ( ) == 1 ) { context . getContentResolver ( ) . delete ( SortHelper . getSortedMoviesUri ( sort ) , null , null ) ; } }
public void setBounds ( @ NonNull Rect bounds ) { super . setBounds ( bounds . left , bounds . top , bounds . right , bounds . bottom ) ; }
public static String getDownloadTag ( UUID downloadId ) { return TAG_WORKS_RUN_TYPE + " : " + downloadId ; }
public ColorStateList getProgressTintList ( ) { logProgressBarTintWarning ( ) ; return super . getProgressTintList ( ) ; }
private void doSearch ( ) { if ( mWebView == null ) { return ; } FindActionModeCallback findAction = new FindActionModeCallback ( mWebView . getContext ( ) ) ; mWebView . startActionMode ( findAction ) ; findAction . setWebView ( mWebView ) ; findAction . showSoftInput ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; getMenuInflater ( ) . inflate ( R . menu . list_view_menu , menu ) ; return true ; }
public void setIsMainCandidateLomaji ( boolean isMainCandidateLomaji ) { mIsMainCandidateLomaji = isMainCandidateLomaji ; invalidate ( ) ; }
public boolean onQueryTextSubmit ( String query ) { adapter . filter ( viewPager . getCurrentItem ( ) , query ) ; appbar . setExpanded ( true ) ; return true ; }
public int getUpdatedBy ( ) { return updatedBy ; }
public int getItemCount ( ) { return leagueScheduleItems . size ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; ThemeManager . getInstance ( ) . applyTheme ( this ) ; load ( ) ; }
public SingleLiveEvent < Integer > getOnHistoryReused ( ) { updateHistoryList ( ) ; return mOnHistoryReused ; }
public void onClick ( View view ) { ActivityCompat . requestPermissions ( thisActivity , permissions , RC_HANDLE_CAMERA_PERM ) ; }
public void notifyFinishAttachingView ( ) { getPresenter ( ) . getAndDisplayRandomPicks ( ) ; }
public void onPushFailure ( ) { Log . e ( TAG , "error happenend setting bitmap length" ) ; }
public Integer getV ( ) { return v ; }
public void setChannelId ( int channelId ) { this . channelId = channelId ; notifyPropertyChanged ( BR . channelId ) ; }
private void gestureCancel ( MotionEvent event ) { if ( mainapp . web_msg_handler != null ) mainapp . web_msg_handler . removeCallbacks ( gestureStopped ) ; gestureInProgress = false ; gestureFailed = true ; }
public void setNumOpens ( long num ) { Editor edit = preferences . edit ( ) ; edit . putLong ( "numAppOpens" , num ) ; edit . commit ( ) ; }
private static boolean isSmallScreen ( ) { return ( Game . width ( ) < 400 || Game . height ( ) < 400 ) ; }
public void onBindViewHolder ( ViewHolder viewHolder , int i ) { viewHolder . bind ( i , mDialog . mColors [ i ] , mDialog . mSelectedColor == i ) ; }
public EventWriter eventWriter ( Database db ) { return Mockito . mock ( EventWriter . class ) ; }
public void onClick ( View view ) { mCopyLayerListener . onClick ( view , DetailActionListener . COPY_LAYER , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
public void hideProgress ( ) { progress . setVisibility ( View . INVISIBLE ) ; }
public CalendarProvider ( @ ForApplication Context context , PermissionChecker permissionChecker ) { this . permissionChecker = permissionChecker ; contentResolver = context . getContentResolver ( ) ; }
public Settings setOverscrollDistance ( float distanceX , float distanceY ) { if ( distanceX < 0f || distanceY < 0f ) throw new IllegalArgumentException ( "Overscroll distance cannot be < 0" ) ; overscrollDistanceX = distanceX ; overscrollDistanceY = distanceY ; return this ; }
private boolean isExternalStorageReadable ( ) { String state = Environment . getExternalStorageState ( ) ; return Environment . MEDIA_MOUNTED . equals ( state ) || Environment . MEDIA_MOUNTED_READ_ONLY . equals ( state ) ; }
public void onVendorRepliedCasesClick ( ) { DeficienciesDialog selectionDialog = DeficienciesDialog . newInstance ( ) ; selectionDialog . setCallBack ( this ) ; selectionDialog . show ( getSupportFragmentManager ( ) , DeficienciesDialog . TAG ) ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . RadioButton" ) ; info . setCheckable ( true ) ; info . setChecked ( radioButton . isChecked ( ) ) ; }
public List < StoryVO > getStories ( ) { return mStories ; }
public Call < ResponseBody > sendRawTransaction ( String transactionHex , int currencyId ) { return api . sendRawTransaction ( new TransactionRequestEntity ( transactionHex , false ) , 1 ) ; }
private HRRecorder ( String filename ) throws IOException { File fullpath = new File ( getBaseContext ( ) . getExternalFilesDir ( null ) , filename ) ; textdataFileStream = new PrintWriter ( new FileOutputStream ( fullpath , true ) ) ; }
public void setBalance ( Integer balance ) { this . balance = balance ; }
private void overrideDependencyModule ( ) throws Exception { ReferenceManager referenceManager = setupFakeReferenceManager ( asList ( new Pair <> ( "jr : ) ) ; RobolectricHelpers . overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public ReferenceManager providesReferenceManager ( ) { return referenceManager ; } } ) ; }
public int compare ( ContactSort lhs , ContactSort rhs ) { return lhs . getSite ( ) . compareTo ( rhs . getSite ( ) ) ; }
public void goToPlayStore ( ) { try { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . app_playStoreURL ) ) ) ) ; } catch ( Exception ignored ) { showUnknownError ( ) ; } }
public long getStream ( String name , boolean isAnti ) { Log . i ( TAG , "Current File : " + name ) ; publishProgress ( name ) ; return 0 ; }
private void refreshMovies ( ) { swipeRefreshLayout . setRefreshing ( true ) ; moviesService . refreshMovies ( ) ; }
public ViewHolderEmptyScreen ( View itemView , ViewGroup parent , Context context , Fragment fragment ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; this . context = context ; this . fragment = fragment ; }
public static int formatPrecipUnit ( Context context ) { if ( ! AppPreferences . isMetric ( context ) ) { return R . string . format_precip_imperial ; } return R . string . format_precip_metric ; }
public static boolean isFirstTimePublish ( PostModel post ) { return PostStatus . fromPost ( post ) == PostStatus . DRAFT || ( PostStatus . fromPost ( post ) == PostStatus . PUBLISHED && post . isLocalDraft ( ) ) ; }
public long getLevelPtr ( ) { return levelPtr ; }
public void setPreferredTemperature ( int preferredTemperature ) { this . preferredTemperature = preferredTemperature ; }
public boolean isLabelEnable ( ) { return mIsLabelEnable ; }
public void onPageSelected ( int position ) { presenter . tryGoToThisPage ( position , viewPager , story ) ; presenter . uploadReflectionAudio ( ) ; }
private void saveBitmapAsPng ( byte [ ] outputStream ) throws ConversionException { boolean error = ZipWriter . addImage ( ZipFileConstants . FRONTPAGE_IMAGE , outputStream ) ; if ( error ) { throw new ConversionException ( ConversionStatus . CANNOT_WRITE_EPUB ) ; } }
public int hashCode ( ) { return Objects . hash ( super . hashCode ( ) , destination , startDate , endDate , start , end , isSingleDay ) ; }
public void onRlLineStyleClicked ( ) { paperStyleResId = R . drawable . line_style ; paperResId = R . drawable . line_edit_text ; setSelectedItemBackground ( rlLineStyle ) ; }
private static boolean shouldDisplayCard ( String booKLongDescription ) { return booKLongDescription != null && ! ( booKLongDescription . isEmpty ( ) || booKLongDescription . matches ( "^\\s + $" ) || booKLongDescription . matches ( "^\\ [ . + \\ ] \\n*\\r*$" ) ) ; }
public static boolean isSearchInAuthor ( ) { return getBoolean ( R . string . pref_key_search_author , DEF_SEARCH_IN_AUTHOR ) ; }
public static String getDateTime ( ) { Date date = new Date ( ) ; SimpleDateFormat df = new SimpleDateFormat ( GENERAL_DATE_FORMAT , Locale . ENGLISH ) ; return df . format ( date ) ; }
public GoogleAnalytics build ( ) { GoogleAnalytics analytics = super . build ( ) ; return Mockito . spy ( analytics ) ; }
public THeaterView createView ( ) { return this ; }
public void makeOrder ( ) { repo . makeOrder ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `selectable` INTEGER NOT NULL DEFAULT 1" ) ; }
public static long memorySize2Byte ( long memorySize , @ MemoryConstants . Unit int unit ) { if ( memorySize < 0 ) return - 1 ; return memorySize * unit ; }
private void handleSettingsChanged ( String key ) { if ( key . equals ( getString ( R . string . pref_key_cpu_do_not_sleep ) ) ) setKeepCpuAwake ( pref . cpuDoNotSleep ( ) ) ; } ;
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `attachment` ADD COLUMN `error` TEXT" ) ; }
public void testEmptyConstructor ( ) throws Exception { Grade grade = new Grade ( "" ) ; assertNotNull ( grade ) ; assertEquals ( "5a" , grade . toString ( ) ) ; }
public InsertState ( Parcel in ) { super ( ) ; formulaId = in . readInt ( ) ; selectedId = in . readInt ( ) ; }
public boolean isGoalAchieved ( Calendar thisDay ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException , FitnessException { return this . getOverallProgress ( thisDay ) >= MAX_FITNESS_CHALLENGE_PROGRESS ; }
public void onViewThread ( int position ) { Notification notification = notifications . get ( position ) . getAsRight ( ) ; super . viewThread ( notification . getStatus ( ) ) ; }
public ArrayList < OCSSection > getSections ( ) { ArrayList < OCSSection > lst = new ArrayList < OCSSection > ( ) ; for ( OCSInput o : inputs ) { lst . add ( o . getSection ( ) ) ; } return lst ; }
public void update ( long millis ) { }
public void run ( ) { updateEndTime ( ) ; JobActivity . this . updateDisplay ( 1000 ) ; }
public void remove ( Drawable drawable ) { counter -- ; mDrawables . remove ( drawable ) ; }
public RelativeLayout getSlider ( ) { return mDrawerBuilder . mSliderLayout ; }
public QifExporter ( ExportParams params ) { super ( params , null ) ; LOG_TAG = "OfxExporter" ; }
private void onTelephonyCallStateOffHook ( ) { restoreAudioStreamRing ( ) ; if ( mSimlarStatus != SimlarStatus . ONGOING_CALL ) { return ; } if ( mLinphoneThread == null ) { return ; } mSoundEffectManager . stop ( SoundEffectType . CALL_INTERRUPTION ) ; mLinphoneThread . pauseAllCalls ( ) ; }
public Fragment getItem ( int position ) { return ReaderPhotoViewerFragment . newInstance ( mImageList . get ( position ) , position , mImageList . isPrivate ( ) ) ; }
public void copy ( BaseFile sourceFile , HFile targetFile ) throws IOException { this . mSourceFile = sourceFile ; this . mTargetFile = targetFile ; startCopy ( false ) ; }
public void notifyGroupItemInserted ( int groupPosition , boolean expanded ) { mAdapter . notifyGroupItemInserted ( groupPosition , expanded ) ; }
public int getItemPosition ( Object object ) { return isUpdateYearView ? POSITION_NONE : super . getItemPosition ( object ) ; }
public AppSettingsBase setLong ( String key , long value ) { setLong ( key , value , _prefApp ) ; return this ; }
public void cycle ( ) { if ( isRunning ( ) ) { pause ( ) ; } else if ( isStopped ( ) || isReset ( ) ) { start ( ) ; } else { stop ( ) ; } }
public int getMaxScrollAmountVertical ( ) { return ( int ) ( MAX_SCROLL_FACTOR * getHeight ( ) ) ; }
public static String getAccountCreationUrl ( ) { return getBaseURL ( ) + ACCOUNT_CREATION_URL ; }
public void onFailure ( ) { Log . i ( TAG , "deassociate failure" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_DISASSOCIATE_FAILURE , new ArrayList < String > ( ) ) ; }
private void click ( ) { Attachment attachment = images . get ( mViewPager . getCurrentItem ( ) ) ; if ( attachment . getMime_type ( ) . equals ( MIME_TYPE_VIDEO ) ) { viewMedia ( ) ; } }
public void onReceive ( ) { currentPage = 1 ; progressBar . setVisibility ( View . VISIBLE ) ; businessServiceClient . refreshBusinessList ( ) ; }
public int getLayoutRes ( ) { return R . layout . drawer_item_profile ; }
public Attr setInitDuration ( int initDuration ) { this . initDuration = initDuration ; return this ; }
public void addSongs ( int position , List < Song > songs ) { playingQueue . addAll ( position , songs ) ; originalPlayingQueue . addAll ( position , songs ) ; saveState ( ) ; }
public List < PersonListItemDTO > getSpeakersBySearchTerm ( String searchTerm ) { List < PresentationSpeaker > speakers = presentationSpeakerDataStore . getByFilterLocal ( summitSelector . getCurrentSummitId ( ) , searchTerm , 1 , Integer . MAX_VALUE ) ; return createDTOList ( speakers , PersonListItemDTO . class ) ; }
public static void updateNotesSeenTimestamp ( ) { ArrayList < Note > latestNotes = NotificationsTable . getLatestNotes ( 1 ) ; if ( latestNotes . size ( ) == 0 ) return ; updateSeenTimestamp ( latestNotes . get ( 0 ) ) ; }
public void setPoints ( List < GeoPoint > pts ) { synchronized ( mPoints ) { mPoints . clear ( ) ; mPoints . addAll ( pts ) ; } updatePoints ( ) ; }
public String getTechnology ( ) { return technology ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mTeams . get ( 0 ) ) ; }
public void setupDrawable ( ) { lottieDrawable = new LottieDrawable ( ) ; LottieComposition composition = LottieCompositionFactory . fromJsonStringSync ( Fixtures . SQUARES ) . getValue ( ) ; lottieDrawable . setComposition ( composition ) ; }
public int getPosition ( final long itemId ) { for ( int i = 0 ; i < getCount ( ) ; i ++ ) { long x = getItemId ( i ) ; if ( x == itemId ) return i ; } return 5 ; }
public QueryBuilder < E > limit ( int limit ) { limitClause = "LIMIT " + Integer . toString ( limit ) ; return this ; }
public short getValueAsShort ( ) throws ScriptingExecptions . ChameleonScriptingException { int int32Value = getValueAsInt ( ) ; return ( short ) ( int32Value & 0x0000ffff ) ; }
public void onResume ( ) { super . onResume ( ) ; new ActivityFeatures . Builder ( ) . begin ( ) . setBlockNavigationDrawer ( true ) . setStatusBarColored ( true ) . build ( ) . apply ( getActivity ( ) ) ; }
public void browserDoesNotFailWhenSelectingANonExistingCard ( ) { CardBrowser browser = getBrowserWithNotes ( 6 ) ; deleteCardAtPosition ( browser , 0 ) ; AnkiAssert . assertDoesNotThrow ( browser : : rerenderAllCards ) ; assertThat ( browser . cardCount ( ) , equalTo ( 5L ) ) ; }
public void onClick ( View v ) { callback . onItemSelected ( current . getId ( ) ) ; }
public static void setSessionCookie ( String session ) { CookieManager . getInstance ( ) . removeSessionCookie ( ) ; CookieManager . getInstance ( ) . setCookie ( URLProvider . getBaseURL ( ) , session ) ; }
public void setTemp ( int temp ) { this . temp = temp ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; movieDetailsPresenter . destroy ( ) ; ButterKnife . unbind ( this ) ; }
private NotificationsListFragment getNotificationsListFragment ( ) { Fragment fragment = mBottomNav . getFragment ( PAGE_NOTIFS ) ; if ( fragment instanceof NotificationsListFragment ) { return ( NotificationsListFragment ) fragment ; } return null ; }
public static boolean isXposedDM ( boolean val ) { gPrefs . edit ( ) . putBoolean ( XPOSED_FIX_DM_LEAK , val ) . commit ( ) ; return val ; }
public void showSignIn ( ) { Intent intent = new Intent ( getContext ( ) , AuthActivity . class ) ; startActivityForResult ( intent , REQUEST_CODE_SIGNIN ) ; }
public static String getStoragePath ( ) { return getString ( R . string . pref_key_storage_path , null ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return mFormattedStringCache . getFormattedValue ( value ) ; }
public static boolean isAutomaticUpdateNotification ( Context context ) { return SettingTrayPreferences . get ( context ) . getBoolean ( SettingsActivity . PREF_SET_WALLPAPER_DAY_FULLY_AUTOMATIC_UPDATE_NOTIFICATION , true ) ; }
public ValueType invalidate ( ErrorType errorType ) { valueType = ValueType . INVALID ; real = Double . NaN ; imaginary = 0 . 0 ; return valueType ; }
public String getLabel ( ) { return _name ; }
public void commit ( ) { if ( ! isCommited ) { isCommited = true ; this . < ZoomListener > getListener ( ) . zoomChanged ( initialZoom , currentZoom , true ) ; initialZoom = currentZoom ; } }
public void onLoaderReset ( Loader < ArrayList < Playlist >> loader ) { getAdapter ( ) . swapDataSet ( new ArrayList <> ( ) ) ; }
public Operator next ( ) { return new Number ( 0 ) ; }
public void onDownloadCompleted ( String fileName ) { if ( downloadCallback != null ) { downloadCallback . onCourseContentDownloaded ( ) ; } }
private void updateDistrictsYearSelector ( int selectedPosition ) { Resources res = getResources ( ) ; yearSelectorTitle . setText ( String . format ( res . getString ( R . string . year_selector_title_districts ) , districtsDropdownItems [ selectedPosition ] ) ) ; }
public static Message error ( final Throwable throwable ) { return new AutoValue_Message ( ERROR , throwable . getLocalizedMessage ( ) , LocalDateTime . now ( ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; setupData = getCurrentStep ( ) . save ( setupData ) ; outState . putBundle ( KEY_DATA , setupData ) ; outState . putInt ( KEY_STEP_INDEX , mStepIndex ) ; }
private void setFTPTimeout ( int seconds ) { mainActivity . getPrefs ( ) . edit ( ) . putInt ( FTPService . KEY_PREFERENCE_TIMEOUT , seconds ) . apply ( ) ; }
private void showProgress ( String text ) { if ( observer != null ) { observer . onProgress ( text ) ; } }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new QRCodeViewModel ( qrCodeGenerator , appConfigurationGenerator , settingsProvider . getGeneralSettings ( ) , settingsProvider . getAdminSettings ( ) , scheduler ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( MainActivity . this , FilePickerActivity . class ) ; startActivity ( intent ) ; }
public void onClick ( View view ) { Intent i = new Intent ( getApplicationContext ( ) , wallet_add . class ) ; startActivity ( i ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newIngredientsFragmentComponent ( new IngredientsFragmentModule ( this ) ) . inject ( this ) ; componentFactory = null ; }
public void onOk ( AmbilWarnaDialog dialog , int color ) { et . setText ( String . format ( "%06X" , color & 0xFFFFFF ) ) ; ColorDrawable drawable = ( ColorDrawable ) et . getCompoundDrawables ( ) [ 2 ] ; drawable . setColor ( color ) ; }
public void clearEventBookmark ( ) { preferences . edit ( ) . remove ( STAT_BOOKMARK_KEY ) . commit ( ) ; }
public void shouldNotInteractIfNullBaseActivityOnLocationFound ( ) { givenLatLonLocation ( ) ; whenFindingLocation ( null ) ; thenShouldNotInteractWith ( mBaseActivity ) ; }
public boolean isRefreshing ( ) { return mSwipeRefreshLayout . isRefreshing ( ) ; }
private void emitChangedEvent ( ) { exec . submit ( ( ) -> { stateChangedEvent . onNext ( new State ( moving . get ( ) , saveResume . get ( ) > 0 , System . currentTimeMillis ( ) ) ) ; } ) ; }
public LoadIntoPager ( @ NotNull String url , @ NotNull Activity baseActivity ) { super ( url , baseActivity ) ; this . url = url ; }
private int getTopItemScrollY ( ) { if ( mListView == null || mListView . getChildAt ( 0 ) == null ) return 0 ; View topChild = mListView . getChildAt ( 0 ) ; return topChild . getTop ( ) ; }
public CharSequence getNotificationText ( Context context ) { if ( mBuilt == null ) return buildNotificationText ( context ) ; return mBuilt ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_refresh , menu ) ; requireBaseActivity ( this ) . tintToolbarIcons ( menu , R . id . action_refresh ) ; }
public MpnValue ( String mpn , String confidence , String riskCategory ) { this . mpn = mpn ; this . confidence = confidence ; this . riskCategory = riskCategory ; }
public void onServiceConnected ( ComponentName name , IBinder service ) { BaseActivity . this . onServiceConnected ( ) ; }
public Single < String > selections ( ) { return mSelectionSubject . firstOrError ( ) ; }
public void setDescription ( String description ) { this . email = new StringHolder ( description ) ; }
public boolean isConnectInProgress ( ) { return cli . isConnectInProgress ( ) ; }
public static Font chooseFont ( float size ) { scale = size / 14 . f ; scale / = 1 . 8 ; if ( Game . smallResScreen ( ) ) { scale / = 2 ; } font = font25x ; return font ; }
public LiveData < List < EducationEntity >> loadAll ( ) { return mDataRepository . getDatabase ( ) . educationDao ( ) . loadAll ( ) ; }
public void tearDown ( ) { testCol . close ( ) ; }
public void setBookmarkState ( boolean Checked ) { if ( is_nav_view_inflated ) { ImageButton bookmarkImageButton = ( ImageButton ) mControlsView . findViewById ( R . id . action_bookmark_this_page ) ; if ( bookmarkImageButton . isSelected ( ) != Checked ) bookmarkImageButton . setSelected ( Checked ) ; } }
public static int getVersionCode ( Context context ) { return BuildConfig . VERSION_CODE ; }
public void onFinish ( ) { mButton . setText ( "0 : 00" ) ; mButton . setBackgroundColor ( 0xff424242 ) ; vibratorInterface . finishedTimer ( ) ; }
public boolean onItemClick ( View view , int position , IDrawerItem drawerItem ) { startActivity ( new Intent ( WeatherActivity . this , NewAboutActivity . class ) ) ; return true ; }
public boolean canEditMessageAnytime ( TLRPC . Chat chat ) { return canEditMessageAnytime ( messageOwner , chat ) ; }
public void onBindViewHolder ( @ NonNull LatestRunViewHolder holder , int position ) { LatestRun latestRun = mRuns . get ( position ) ; holder . bind ( latestRun ) ; }
public ObservableArrayList < DeviceCharacteristic > getReadCharacteristics ( ) { return deviceReadCharacteristics ; }
public Object getItem ( int i ) { return toDoItems . get ( i ) ; }
public ExtendedDataOutputStream ( OutputStream out ) { super ( out ) ; }
public ArrayList < Result > getDataSet ( ) { return dataSet ; }
public final String toString ( ) { return "ContactData [ name = " + name + " , guiTelephoneNumber = " + guiTelephoneNumber + " , status = " + status + " , photoId = " + photoId + " ] " ; }
public void onRequestMapChange ( String mapKey ) { }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfPower_Info ) : super . desc ( ) ; }
public boolean wantArabicInTranslationView ( ) { return mPrefs . getBoolean ( Constants . PREF_AYAH_BEFORE_TRANSLATION , true ) ; }
public void testIsWPCOMString4 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( wpcomAddress4 ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { mPreferences . setUseTheme ( which ) ; if ( which < mThemeOptions . length ) { theme . setSummary ( mThemeOptions [ which ] ) ; } }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_e_add_remove , menu ) ; }
public void onPause ( ) { super . onPause ( ) ; this . sessionsCursor . getCursor ( ) . close ( ) ; }
public UserLocalDataSource getInstance ( ) { if ( INSTANCE == null ) { INSTANCE = new UserLocalDataSource ( ) ; } return INSTANCE ; }
public static void sendWakeOnLan ( @ NonNull String ipStr , @ NonNull String macStr ) throws IllegalArgumentException , IOException { sendWakeOnLan ( ipStr , macStr , DEFAULT_PORT , DEFAULT_TIMEOUT_MILLIS , DEFAULT_NO_PACKETS ) ; }
public String buildTitle ( ) { if ( modifier != null ) return modifier . buildName ( ) ; else return subject ; }
public void onClick ( View v ) { int position = getAdapterPosition ( ) ; if ( isValidPosition ( position ) && mClickListener != null ) { ReaderSiteModel site = mSites . get ( position ) ; mClickListener . onSiteClicked ( site ) ; } }
public void onEventMainThread ( ReaderEvents . DoSignIn event ) { if ( isFinishing ( ) ) { return ; } AnalyticsUtils . trackWithInterceptedUri ( AnalyticsTracker . Stat . READER_SIGN_IN_INITIATED , mInterceptedUri ) ; ActivityLauncher . loginWithoutMagicLink ( this ) ; }
public static String intToSemster ( int i ) { switch ( i ) { case 0 : return "אלול" ; case 1 : return "א" ; default : return "ב" ; } }
public void needHideProgress ( ) { if ( progressDialog == null ) { return ; } try { progressDialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } progressDialog = null ; }
public void onInterrupt ( ) { Log . d ( TAG , "onInterrupt" ) ; }
public long intTimeMS ( ) { long mTime = this . mTime ; this . mTime += mStep ; return mTime ; }
public boolean canModifyBitmap ( ) { return canModifyBitmap ; }
public int getStartingMinute ( Subject subject ) { return getStartingMinute ( subject . getSchoolHour ( ) ) ; }
public void onLoadFinished ( Loader < Bundle > loader , Bundle data ) { Toast . makeText ( MainActivity . this , data . getString ( FileLoader . KEY_RESULT ) , Toast . LENGTH_LONG ) . show ( ) ; dismissProgressDialog ( ) ; }
private void initializeClustering ( ) { ClusteringSettings settings = new ClusteringSettings ( ) ; settings . clusterOptionsProvider ( new DemoClusterOptionsProvider ( getResources ( ) ) ) ; settings . addMarkersDynamically ( true ) ; mMap . setClustering ( settings ) ; }
public void endCamera ( ) { context . endEye ( ) ; }
public String name ( ) { return Game . getVar ( R . string . WandMaker_RotberryName ) ; }
public void onPlayClicked ( ) { viewModel . play ( buttonID , uri ) ; }
public static void checkPermission ( Activity activity , String permission , int requestCode ) { if ( writePermissionIsPending ( activity ) ) { showPermissionRequest ( activity , permission , requestCode ) ; } }
public List < SeriesVO > getSeries ( ) { return mSeries ; }
public int getDeterminationNumber ( ) { return this . determinationNumber ; }
public void onAnimationStart ( View view ) { dispatchChangeStarting ( changeInfo . oldHolder , true ) ; }
public void setDropzoneId ( String dropzone_id ) { this . dropzone_id = dropzone_id ; }
public String toString ( ) { return "BSID = " + id1 + " , SID = " + id2 + " , NID = " + id3 + " : " + super . toString ( ) ; }
public AboutBuilder setBackgroundColor ( int color ) { this . backgroundColor = ColorUtil . get ( context , color ) ; return this ; }
public void run ( ) { hideItems ( ) ; }
public Select ( View < ? > view ) { this . sql = "SELECT * FROM " + getTableList ( view ) ; }
public boolean isBeforeEncryption ( ) { return this == LinphoneCallState . CONNECTED ; }
private void setUpRecyclerViewPadding ( ) { recyclerView . setPadding ( 0 , albumArtViewHeight + titleViewHeight , 0 , getBottomOffset ( ) ) ; }
public void run ( ) { handleExpressions ( ClientPaths . REGISTER_EXPRESSION , expression , id ) ; }
public boolean onCabItemClicked ( @ NonNull MenuItem menuItem ) { onMultipleItemAction ( menuItem , new ArrayList <> ( checked ) ) ; cab . finish ( ) ; uncheckAll ( ) ; return true ; }
public void pause ( ) { pausedByTransientLossOfFocus = false ; if ( player . isPlaying ( ) ) { player . pause ( ) ; notifyChange ( PLAY_STATE_CHANGED ) ; } }
public void call ( Subscriber < ? super Void > subscriber ) { if ( subscriber . isUnsubscribed ( ) ) return ; databaseHelper . init ( ) ; subscriber . onCompleted ( ) ; }
public void getWordCounterForItalian ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . ITALY ) ; assertEquals ( DefaultWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
public static boolean isRecordEditMode ( ) { return getBoolean ( R . string . pref_key_is_record_edit_mode , false ) ; }
public void setInputCount ( int inputCount ) { mInputCount = inputCount ; if ( mInputCount == 0 ) { return ; } updateMissingGamepads ( ) ; if ( ! hasEnoughGamepads ( ) ) { mListener . onNotEnoughGamepads ( mMissingGamepads ) ; } }
public void shuffle ( ) { final Handler handler = new Handler ( ) ; handler . postDelayed ( ( ) -> { MusicPlayerRemote . openQueue ( mData , 0 , true ) ; randommize ( ) ; } , 100 ) ; }
public boolean removeEventListener ( KeyChainEventListener listener ) { return basicKeyChain . removeEventListener ( listener ) ; }
public void onCustomAnimationEnd ( ) { callFunction ( "onParentAnimationEnd" ) ; }
public void setPagerIndicatorVisible ( boolean visible ) { binding . miPagerIndicator . setVisibility ( visible ? View . VISIBLE : View . GONE ) ; }
private String getCountry ( ) { return country ; }
public void onClick ( View v ) { switch ( v . getId ( ) ) { case R . id . activity_finish_share_button : Utils . shared ( this , "" ) ; break ; } }
public Observable < T > observable ( Q requestValues ) { return this . buildUseCaseObservable ( requestValues ) . subscribeOn ( postExecutionThread . getScheduler ( ) ) . observeOn ( postExecutionThread . getScheduler ( ) ) ; }
public static boolean arePermissionsGranted ( Context context ) { AllSettings . ensureLoadedFromFiles ( context ) ; for ( String permission : EventProviderType . getNeededPermissions ( ) ) { if ( isPermissionNeeded ( context , permission ) ) { return false ; } } return true ; }
public void loop ( ) { power = gamepad1 . left_stick_y ; simpleRobot . leftMotor . setPower ( power ) ; simpleRobot . rightMotor . setPower ( power ) ; }
public boolean equals ( Object v ) { if ( v != null && v instanceof String ) { return this . name . startsWith ( String . valueOf ( v ) ) ; } return false ; }
public static PortScan onAddress ( @ NonNull InetAddress ia ) { PortScan portScan = new PortScan ( ) ; portScan . setAddress ( ia ) ; portScan . setDefaultThreadsAndTimeouts ( ) ; return portScan ; }
public boolean onSingleTapConfirmed ( MotionEvent e ) { if ( id > 0 ) mListAdapterOnClickHandler . onClick ( id , true ) ; return super . onSingleTapConfirmed ( e ) ; }
public void setVersionCount ( Long versionCount ) { this . versionCount = versionCount ; }
public MapObjectLayer ( Map map ) { super ( map ) ; mRenderer = new MapObjectRenderer ( ) ; EventBus . getDefault ( ) . register ( mRenderer ) ; }
public SoundPlayer createSoundPlayer ( Sound sound ) { return new DefaultSoundPlayer ( sound ) ; }
public CharacterComicDataContainer getSeries ( ) { return mSeries ; }
public Observable < Contribution > buildContributions ( ) { return remoteDataSource . buildContributions ( ) ; }
public Double getPreferredMaxPosition ( ) { LocalDate cal = getStartOfWeek ( ) ; LocalDate max = cal . plusDays ( 7 ) ; LogUtil . INSTANCE . d ( TAG , "Preferred weekly max : %s" , max ) ; return dateToPosition ( max ) - 1 ; }
public void attachVisual ( ) { target . getSprite ( ) . add ( CharSprite . State . PARALYSED ) ; target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaStunned ) ) ; }
public static void deleteRecordStore ( String recordStoreName ) throws RecordStoreException , RecordStoreNotFoundException { recordStoreManager . deleteRecordStore ( recordStoreName ) ; }
public static CreatePlaylistDialog create ( ArrayList < Song > songs ) { CreatePlaylistDialog dialog = new CreatePlaylistDialog ( ) ; Bundle args = new Bundle ( ) ; args . putParcelableArrayList ( "songs" , songs ) ; dialog . setArguments ( args ) ; return dialog ; }
public BaseSingleHorizontalProgressDrawable ( Context context ) { float density = context . getResources ( ) . getDisplayMetrics ( ) . density ; mProgressIntrinsicHeight = Math . round ( PROGRESS_INTRINSIC_HEIGHT_DP * density ) ; mPaddedIntrinsicHeight = Math . round ( PADDED_INTRINSIC_HEIGHT_DP * density ) ; }
private void gotoPageDialog ( ) { if ( ! mIsPaused ) { FragmentManager fm = getSupportFragmentManager ( ) ; JumpFragment jumpDialog = new JumpFragment ( ) ; jumpDialog . show ( fm , JumpFragment . TAG ) ; } }
public void run ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { albumArt . setCurrentItem ( sharedPrefsUtils . readSharedPrefsInt ( "musicID" , 0 ) ) ; } } ) ; }
public List < String > getListOfLocales ( ) { List < String > res = processLocales ( filter ( locales , type ) ) ; Collections . sort ( res ) ; return res ; }
public void onReceive ( Context context , Intent intent ) { boolean isPlaying = intent . getBooleanExtra ( ServiceConstants . PLAYING_STATUS_BROADCAST_KEY , false ) ; synchronizePlayButton ( isPlaying ) ; }
public int process ( ) { return this . left . process ( ) - this . right . process ( ) ; }
public void showOwnerWall ( int accountId , Owner owner ) { PlaceFactory . getOwnerWallPlace ( accountId , owner ) . tryOpenWith ( getActivity ( ) ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { return toggle . onOptionsItemSelected ( item ) || super . onOptionsItemSelected ( item ) ; }
public void lireHoraireAsync ( final String pSession , final String prefixeSigleCours ) { executeAsync ( new Functions . IFunc < listeCoursHoraire > ( ) { public listeCoursHoraire Func ( ) throws java . lang . Exception { return lireHoraire ( pSession , prefixeSigleCours ) ; } } ) ; }
public void showEmptyMessageIfRequired ( ) { if ( contacts . size ( ) == 0 ) { emptyView . setVisibility ( View . VISIBLE ) ; } else { emptyView . setVisibility ( View . INVISIBLE ) ; } }
public void onBookCollectionAdded ( BooksCollection booksCollection ) { if ( bookCollections . add ( booksCollection ) ) notifyItemInserted ( booksCollection . getOrder ( ) ) ; }
public void setCity ( String city ) { cityEt . setText ( city ) ; cityEt . setSelection ( city . length ( ) ) ; }
public static X509Certificate load ( byte [ ] certData ) throws CertificateException , NoSuchProviderException { return load ( new ByteArrayInputStream ( certData ) ) ; }
public boolean onKeyDown ( int keyCode , KeyEvent event ) { mVolumeNavigationDelegate . setScrollable ( this , null ) ; return mVolumeNavigationDelegate . onKeyDown ( keyCode , event ) || super . onKeyDown ( keyCode , event ) ; }
public void novaPartidaClickHandler ( View v ) { Message . obtain ( handler , MSG_ESCONDE_BTN_NOVA_PARTIDA ) . sendToTarget ( ) ; criaEIniciaNovoJogo ( ) ; }
public String getRemainingUphill ( ) { if ( mError != null ) { return mError ; } return Integer . toString ( mRemainingUphill ) ; }
private void showReport ( String report ) { TextView reportView = ( TextView ) findViewById ( R . id . textView ) ; assert reportView != null ; reportView . setText ( report ) ; }
public Observable < Void > recentPagesUpdatedObservable ( ) { return recentPageModel . getRecentPagesUpdatedObservable ( ) ; }
public void setSearchThisAreaButtonVisibility ( boolean isVisible ) { if ( isVisible ) { searchThisAreaButton . setVisibility ( View . VISIBLE ) ; } else { searchThisAreaButton . setVisibility ( View . GONE ) ; } }
public UUID getUUID ( ) { return mUUID ; }
public void openAlbum ( @ NonNull LocalImageAlbum album ) { PlaceFactory . getLocalImageAlbumPlace ( album ) . tryOpenWith ( getActivity ( ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; PowerManager powerManager = ( PowerManager ) getSystemService ( Context . POWER_SERVICE ) ; mWakeLock = powerManager . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , "TcpServerService" ) ; }
public static DonationFragment newInstance ( ) { return new DonationFragment ( ) ; }
public Uri getBefore ( ) { return mBefore ; }
public void pause ( ) { if ( musicSrv == null ) return ; playbackPaused = true ; musicSrv . pausePlayer ( ) ; }
public void run ( ) { SendMessagesHelper . getInstance ( ) . sendMessage ( photoFinal , needDownloadHttpFinal ? searchImage . imageUrl : null , dialog_id , reply_to_msg , null , params ) ; }
public Teams getTeamsTable ( ) { return mTeamsTable ; }
private Runnable signalRunnable = new Runnable ( ) { public void run ( ) { update ( ) ; handler . postDelayed ( this , signalUpdateInterval ) ; } } ;
public AdaptersSet ( BridgeAdapterDataObserver . Subscriber bridgeSubscriber ) { mSubscriber = bridgeSubscriber ; mAdapterTags = new ArrayList <> ( ) ; mAdapters = new ArrayList <> ( ) ; mUniqueAdapters = new ArrayList <> ( ) ; mObservers = new ArrayList <> ( ) ; }
public static void recycle ( Bitmap bitmap ) { if ( bitmap != null && ! bitmap . isRecycled ( ) ) { bitmap . recycle ( ) ; } }
public void setLoadingVideoPlaceholder ( Drawable loadingVideoPlaceholder ) { this . loadingVideoPlaceholder = loadingVideoPlaceholder ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( getArguments ( ) != null ) { this . currentProduct = ( Product ) getArguments ( ) . getParcelable ( Constants . EXTRA_PRODUCT_DATA ) ; } }
public void setRangeLowerBoundaryMode ( BoundaryMode rangeLowerBoundaryMode ) { this . rangeLowerBoundaryMode = rangeLowerBoundaryMode ; }
public XMLPrefsSave [ ] delete ( ) { return new XMLPrefsSave [ ] { } ; }
public static Fragment newInstance ( @ LayoutRes int layoutRes ) { return newInstance ( layoutRes , 0 ) ; }
public boolean hasRooms ( ) { return rooms . length > 0 ; }
public Parcelable onSaveInstanceState ( ) { SavedState savedState = new SavedState ( super . onSaveInstanceState ( ) ) ; savedState . isFocused = isFocused ( ) ; return savedState ; }
public boolean onSingleTapUp ( @ NonNull MotionEvent e ) { return false ; }
public void setData ( RealmList < WalletAddress > addresses , int currencyId , int networkId ) { this . addresses = addresses ; this . currencyId = currencyId ; this . networkId = networkId ; notifyDataSetChanged ( ) ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return OstWorkflowContext . WORKFLOW_TYPE . ABORT_RECOVER_DEVICE ; }
public void syncClose ( ) { connection . releaseInterface ( mInterface ) ; }
public NiceVideoPlayerController ( @ NonNull Context context ) { super ( context ) ; mContext = context ; this . setOnTouchListener ( this ) ; }
public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer ( ) { IAnswerData newAnswer = getWidget ( ) . getAnswer ( ) ; assertNull ( newAnswer ) ; }
public Uri getUri ( ) { return url . generateUri ( ) ; }
public void setFABRecenterAction ( View . OnClickListener onClickListener ) { fabRecenter . setOnClickListener ( onClickListener ) ; }
public static String getFirebaseToken ( SharedPreferences sharedPreferences ) { return sharedPreferences . getString ( "USER_TOKEN" , "no_play_services" ) ; }
public void endGame ( ) { game . end ( ) ; game = null ; ( ( GameActivity ) getActivity ( ) ) . changeFragment ( MenuFragment . newInstance ( ) , MenuFragment . TAG , true ) ; }
private void updateDahSound ( ) { dahSound = new SimpleTone ( currentPitch , wpmDitLenMs * 3 , SAMPLE_RATE_HZ ) ; }
public Crumb ( File file ) { mFile = file ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( ArrayOfFicheEmploye ) getResult ( ArrayOfFicheEmploye . class , __result , "RechercheResult" , __envelope ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stickerset . serializeToStream ( stream ) ; }
public void act ( Mob me ) { if ( ! me . doStepTo ( me . getTarget ( ) ) ) { me . setState ( getStateByClass ( Hunting . class ) ) ; } }
public void setAmount ( float amount ) { this . amount = amount ; }
public int getCount ( ) { return mLayouts . length ; }
public SpinAdapter ( Context context , int textViewResourceId , List < Train > values ) { super ( context , textViewResourceId , values ) ; this . context = context ; this . values = values ; }
public void setCategory ( int category ) { this . category = category ; }
public AccessibilityServiceListener ( Context context ) { this . context = context ; }
private void saveSelectedMap ( ) { mGame . getConfig ( ) . track = mTrackSelector . getSelected ( ) . getId ( ) ; mGame . getConfig ( ) . flush ( ) ; }
public void drawRect ( int x , int y , int width , int height ) { if ( width <= 0 || height <= 0 ) return ; canvas . drawRect ( x , y , x + width , y + height , drawPaint ) ; }
public static XYBounds minMax ( XYConstraints constraints , List < XYSeries > seriesList ) { return minMax ( constraints , seriesList . toArray ( new XYSeries [ seriesList . size ( ) ] ) ) ; }
public String getMail ( ) { return this . mail ; }
public static com . coinomi . core . protos . Protos . Tag parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . didReceivedNewMessages ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . messagesDeleted ) ; }
public @ NonNull List < String > getModerationKeys ( ) { if ( mSettings . holdForModeration == null ) mSettings . holdForModeration = new ArrayList <> ( ) ; return mSettings . holdForModeration ; }
public void onAuthStateChanged ( @ NonNull FirebaseAuth firebaseAuth ) { if ( firebaseAuth . getCurrentUser ( ) == null ) { startActivity ( new Intent ( MainActivity . this , signIn . class ) ) ; } }
public void notifyItemChanged ( int position ) { updateRows ( ) ; try { super . notifyItemChanged ( position ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public static RenamePlaylistDialog create ( long playlistId ) { RenamePlaylistDialog dialog = new RenamePlaylistDialog ( ) ; Bundle args = new Bundle ( ) ; args . putLong ( "playlist_id" , playlistId ) ; dialog . setArguments ( args ) ; return dialog ; }
public ExtractorMediaSource createMediaSource ( Uri uri ) { isCreateCalled = true ; if ( extractorsFactory == null ) { extractorsFactory = new DefaultExtractorsFactory ( ) ; } return new ExtractorMediaSource ( uri , dataSourceFactory , extractorsFactory , minLoadableRetryCount , customCacheKey , continueLoadingCheckIntervalBytes , tag ) ; }
public long getSeedingTime ( ) { return th . isValid ( ) ? th . status ( ) . seedingDuration ( ) / 1000L : 0 ; }
public static void cancelToast ( ) { if ( toast != null ) toast . cancel ( ) ; }
public static void loadArchivedReminder ( @ NonNull RealmCallback < List < Reminder >> callback ) { RealmDb . getInstance ( ) . getArchivedReminders ( result -> handler . post ( ( ) -> callback . onDataLoaded ( result ) ) ) ; }
public void bindAdapter ( ModeratorAdapter a , SwipeRefreshLayout layout ) throws ExecutionException , InterruptedException { this . adapter = a ; this . refreshLayout = layout ; loadMore ( a , where , subreddit ) ; }
public int hashCode ( ) { return Objects . hash ( name , libraries ) ; }
public final int getNumFrames ( int idx ) { if ( idx >= 0 && idx < getNumAction ( ) ) { return 0 ; } else { throw new IllegalArgumentException ( ) ; } }
public boolean onQueryTextSubmit ( String query ) { search ( query ) ; return true ; }
public boolean getReports ( ) { return reports ; }
public boolean removeEntry ( T e ) { if ( e == null ) return false ; if ( mValues == null ) return false ; boolean removed = mValues . remove ( e ) ; if ( removed ) { calcMinMax ( ) ; } return removed ; }
public boolean isCellWithinBounds ( int x , int y ) { return 0 <= x && x < field . length && 0 <= y && y < field [ 0 ] . length ; }
public boolean getUseReverseAnimationOnClose ( boolean useReverseAnimation ) { return mInstanceState . mUseReverseAnimationOnClose ; }
public Socket createSocket ( InetAddress inetAddress , int i ) throws IOException { return null ; }
public void setOneShotPreviewCallback ( Camera . PreviewCallback callback ) { if ( cameraInfo != null && cameraInfo . camera != null ) cameraInfo . camera . setOneShotPreviewCallback ( callback ) ; }
public ReusableChildViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
public void removeOnPageChangeListener ( OnPageChangeListener listener ) { super . removeOnPageChangeListener ( new OnPageChangeListenerWrapper ( listener ) ) ; }
public static boolean activeNotification ( boolean val ) { gPrefs . edit ( ) . putBoolean ( ACTIVE_NOTIFICATION , val ) . commit ( ) ; return val ; } */
public IAnswerData getAnswer ( ) { if ( mBinaryName != null ) { return new StringData ( mBinaryName ) ; } else { return null ; } }
public MessagesListAdapter ( String senderId , ImageLoader imageLoader ) { this ( senderId , new HoldersConfig ( ) , imageLoader ) ; }
public void onScan ( ) { if ( PermissionUtil . checkSelfPermission ( this , Manifest . permission . CAMERA ) ) { startQRScanner ( ) ; } else { PermissionUtil . requestCameraPermission ( this ) ; } }
public Message ( String title , String body ) { this . title = title ; this . body = body ; }
public static void setColor ( final String subreddit , int color ) { Reddit . colors . edit ( ) . putInt ( subreddit . toLowerCase ( ) , color ) . apply ( ) ; }
public void resetAvailableTransports ( boolean isMediaMessage ) { transportOptions . reset ( isMediaMessage ) ; }
private Runnable timeoutRunnable = new Runnable ( ) { @ Override public void run ( ) { stopScan ( ) ; listener . onPostUpdate ( SyncStatus . FAILED ) ; Log . e ( "SWELL" , "Bluetooth timer timeout . " ) ; } } ;
public boolean mamLegacy ( ) { return ! hasDiscoFeature ( account . getJid ( ) . toBareJid ( ) , Namespace . MAM ) && hasDiscoFeature ( account . getJid ( ) . toBareJid ( ) , Namespace . MAM_LEGACY ) ; }
public static int getThemeColorVariant ( int attrID ) { return LiveLoggerActivity . getInstance ( ) . getTheme ( ) . obtainStyledAttributes ( new int [ ] { attrID } ) . getColor ( 0 , attrID ) ; }
public void onDestroy ( ) { if ( handler != null ) { handler . removeCallbacks ( runnable ) ; } stopForeground ( true ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . liveLocationsChanged ) ; }
public boolean onDoubleTap ( MotionEvent event ) { return mPageController . handleTouchEvent ( event , AyahSelectedListener . EventType . DOUBLE_TAP , mPageNumber ) ; }
public void setEmptyListVisibility ( boolean visibility ) { if ( visibility ) { mEmptyListView . setVisibility ( View . VISIBLE ) ; } else { mEmptyListView . setVisibility ( View . GONE ) ; } }
public void onDetach ( ) { super . onDetach ( ) ; mFeatureActionListener = null ; mLocationListener = null ; mMapHolder = null ; }
public void additionFewEnoughMedals ( ) { assertFewEnoughMedals ( GameType . ADDITION ) ; }
private void onScanResult ( @ Nullable Beacon beacon ) { if ( beacon == null ) { return ; } BeaconManager . getInstance ( ) . addBeacon ( getContext ( ) , beacon ) ; }
public void onPlaybackError ( Error error ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Spotify playback error : " + error . toString ( ) ) ; handlePlaybackError ( ) ; }
public void showVenueMapView ( VenueDTO venueDTO , IBaseView context ) { venuesMapWireframe . presentVenueMapView ( venueDTO , context ) ; }
private Contact ( ) { this . name = "" ; this . pubkey = "" ; this . blocked = false ; this . addresses = new ArrayList <> ( ) ; }
public com . google . protobuf . Any getConsensusPubkey ( ) { if ( consensusPubkeyBuilder_ == null ) { return consensusPubkey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : consensusPubkey_ ; } else { return consensusPubkeyBuilder_ . getMessage ( ) ; } }
public void hideArtworkChanged ( boolean enabled ) throws RemoteException { mService . get ( ) . hideArtwork ( enabled ) ; }
public int getScore ( ) { return score ; }
public PhotoSizes setS ( String s ) { this . s = s ; return this ; }
public boolean isPageBookmarked ( int pageId ) { return sInternalUserDBHelper . isPageBookmarked ( pageId , bookId ) ; }
public static void showSnackbar ( View view , String messageText , SnackbarSequencer sequencer ) { sequencer . enqueue ( new SnackbarItem ( new Info ( view , new UiStringText ( messageText ) , Snackbar . LENGTH_LONG ) , null , null , null ) ) ; }
public void tearDown ( ) throws Exception { cards = null ; cal = null ; date = null ; date2 = null ; date3 = null ; }
public int getTranslatedItemPositionRight ( ) { return mTranslationX + mGrabbedItemWidth ; }
public String getImageUrl ( ) { return imageUrl ; }
public int getFromDecimals ( ) { return fromDecimals ; }
public void clearEntries ( ) { _adapter . clearEntries ( ) ; checkPeriodUniformity ( ) ; }
public void actualOnPreExecute ( @ NonNull NoteEditor noteEditor ) { Resources res = noteEditor . getResources ( ) ; noteEditor . mProgressDialog = StyledProgressDialog . show ( noteEditor , "" , res . getString ( R . string . saving_facts ) , false ) ; }
public void setDragStateFlags ( @ DraggableItemStateFlags int flags ) { mDragStateFlags = flags ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . title_history_element . setText ( mTitlesList . get ( position ) . title ) ; }
public void onHandRelease ( SwipeLayout layout , float xvel , float yvel ) { }
public void delete ( ) { GLES20 . glDeleteShader ( handle ) ; }
public void yell ( String str ) { GLog . n ( Game . getVar ( R . string . Mob_Yell ) , getName ( ) , StringsManager . maybeId ( str ) ) ; }
public ExistingSettingsMigrator providesExistingSettingsMigrator ( ProjectsRepository projectsRepository , SettingsProvider settingsProvider , SettingsMigrator settingsMigrator ) { return new ExistingSettingsMigrator ( projectsRepository , settingsProvider , settingsMigrator ) ; }
public float getSpeedAverageMoving ( ) { return SpeedAverageMoving ; }
public void onClick ( View view ) { AppList . getAll ( getApplicationContext ( ) , 0 ) ; }
public MoviesListingAdapter ( List < Movie > movies , IMoviesListingView moviesView ) { this . movies = movies ; view = moviesView ; }
public boolean isValid ( ) { return configuration . containsKey ( CONFIG_LON ) && configuration . containsKey ( CONFIG_LAT ) ; }
private float getFontScaled ( boolean scale ) { if ( scale ) { return this . fontSize / 3 ; } return this . fontSize ; }
public Boolean isDebugging ( ) { return mSharedPref . getBoolean ( DEBUG_WINDOW , false ) ; }
public boolean onMarkerClick ( Marker marker ) { mGoogleMap . moveCamera ( marker . getPosition ( ) , 0 , 0 , 0 , MeasureUtils . dp2px ( mContext , 192 ) ) ; return false ; }
public VH onCreateViewHolder ( ViewGroup parent , int viewType ) { return mWrappedAdapter . onCreateViewHolder ( parent , viewType ) ; }
public boolean onStartNestedScroll ( CoordinatorLayout coordinatorLayout , RelativeLayout child , View directTargetChild , View target , int nestedScrollAxes ) { return nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL || super . onStartNestedScroll ( coordinatorLayout , child , directTargetChild , target , nestedScrollAxes ) ; }
public void setGerminationPercentage ( CharSequence abacusSelected ) { Cursor cursorGermPercentage = queryGerminationPercentage ( abacusSelected ) ; cursorGermPercentage . moveToFirst ( ) ; mGerminationPercentage = cursorGermPercentage . getInt ( 0 ) ; }
public GameSpriteInterface getCloudBg2 ( Resources res ) { return new CloudSprite ( res , this . cloudBg2DrawableId , this . cloudBg2InitPos . first , this . cloudBg2InitPos . second , this . cloudBg2Scale , this . cloudBg2SpeedX ) ; }
public ArticleTextExtractor setUnlikely ( String unlikelyStr ) { this . unlikelyStr = unlikelyStr ; UNLIKELY = Pattern . compile ( unlikelyStr ) ; return this ; }
public void draw ( Canvas canvas ) { float drawPosX = this . posX + this . paddingX ; float drawPosY = this . posY - this . pivotY ; canvas . drawBitmap ( this . bitmap , drawPosX , drawPosY , null ) ; }
public void setDefaultSelection ( List < String > coms ) { this . mDefaultSelections = coms ; selectedTags . clear ( ) ; selectedTags . addAll ( mDefaultSelections ) ; addViews ( ) ; }
private static int getParagraphIndex ( Element el ) { try { return Integer . parseInt ( el . attr ( "paragraphIndex" ) ) ; } catch ( NumberFormatException ex ) { return - 1 ; } }
public MemoryUnit getReadableUnit ( ) { return MemoryUnit . getEnum ( ( int ) getExponentOfPower1024 ( value ) ) ; }
public Map < String , List < String >> getResponseHeaders ( ) { return upstream . getResponseHeaders ( ) ; }
public ServiceFragmentList getServicesFragment ( ) { if ( servicesFragment == null ) servicesFragment = new ServiceFragmentList ( ) ; return servicesFragment ; }
public Settings put ( String key , long value ) { SharedPreferences . Editor editor = getPrefs ( ) . edit ( ) ; editor . putLong ( key , value ) ; editor . commit ( ) ; return this ; }
private void changeExportToStockPrefs ( ) { boolean isChecked = binding . exportToStockPrefs . isChecked ( ) ; binding . exportToStockPrefs . setChecked ( ! isChecked ) ; mPrefs . setStockCalendarEnabled ( ! isChecked ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Log . d ( Utils . getAppTag ( ) , Utils . getMethodName ( ) ) ; setRetainInstance ( true ) ; setHasOptionsMenu ( true ) ; }
public void init ( MainActivity mainActivity ) { mContext = mainActivity . getApplicationContext ( ) ; clearHandler = new Handler ( Looper . getMainLooper ( ) ) ; createNotificationChannels ( ) ; notifyManager = NotificationManagerCompat . from ( mContext ) ; startStatusNotification ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; imageView . cancel ( ) ; SubsamplingScaleImageView subsamplingScaleImageView = imageView . getSSIV ( ) ; if ( subsamplingScaleImageView != null ) { subsamplingScaleImageView . recycle ( ) ; } }
public AddAnimationInfo ( RecyclerView . ViewHolder holder ) { this . holder = holder ; }
public String getData ( ) { return mData ; }
public void accept ( @ NonNull List < IconBean > list ) throws Exception { mView . onLoadData ( list ) ; }
public com . coinomi . core . protos . Protos . Tag getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . Tag . getDefaultInstance ( ) ; }
public void onPrepared ( MediaPlayer mp ) { if ( loadingView != null ) { loadingView . setVisibility ( View . GONE ) ; } }
public void clear ( ) { try { TableUtils . clearTable ( cardDao . getConnectionSource ( ) , Card . class ) ; } catch ( SQLException exception ) { throw new RuntimeException ( exception ) ; } }
public static int get ( String key , int _default ) { return prefs . getInt ( key , _default ) ; }
public Boolean hasAdminPermissions ( ) { return authenticator . getResource ( AccountProperty . HAS_ADMIN_PERMISSIONS , Boolean . class ) ; }
public void goBackAndApplyChanges ( ) { getActivity ( ) . onBackPressed ( ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonEditorDialog . this . getContext ( ) , ButtonEditorDialog . this , the_button . getData ( ) . getLabelColor ( ) , COLOR_FIELDS . COLOR_LABEL ) ; diag . show ( ) ; }
private String getChoiceText ( int index ) { SelectChoice selectChoice = filteredItems . get ( index ) ; return StringUtils . textToHtml ( prompt . getSelectChoiceText ( selectChoice ) ) . toString ( ) ; }
public void testMinimalEncoder17 ( ) throws Exception { verifyMinimalEncoding ( "A123" , "ALPHANUMERIC ( A123 ) , TERMINATOR ( ) " , null , false ) ; }
public static Boolean isGrblAlarmMessage ( final String response ) { return response . toLowerCase ( ) . startsWith ( "alarm : " ) ; }
public boolean isChecked ( ) { return mPrefType == PrefType . TOGGLE && mSwitch . isChecked ( ) ; }
public int compare ( String lhs , String rhs ) { if ( lhs . equals ( "type" ) ) { return 0 ; } else { return 1 ; } }
public void transferTestHexString ( ) throws Exception { test ( ( ) -> Main . main ( String . format ( "receive - d = %s - peer = %s" , OUTPUT_FILE , IP_ADDRESS_HEX_STRING ) . split ( " " ) ) ) ; }
public ConversationListItem getItem ( ) { return ( ConversationListItem ) itemView ; }
public void onAnimationCancel ( Object animation ) { if ( reportSpamViewAnimator != null && reportSpamViewAnimator . equals ( animation ) ) { reportSpamViewAnimator = null ; } }
public Mp3Extractor ( ) { this ( C . TIME_UNSET ) ; }
public void usedAddresses ( ) throws Exception { assertEquals ( 0 , pocket . getUsedAddresses ( ) . size ( ) ) ; pocket . onConnection ( getBlockchainConnection ( type ) ) ; assertEquals ( 13 , pocket . getUsedAddresses ( ) . size ( ) ) ; }
public void onReceive ( Context context , Intent intent ) { eventListFragment . refreshEventList ( ) ; }
public static void resetViewedFlightsForRate ( ) { set ( FLIGHT_VIEWED , 0 ) ; }
public SingleLiveEvent < Integer > getOnToDoDone ( ) { return mOnToDoDone ; }
public synchronized @ NonNull Drawable getFallbackContactPhotoDrawable ( Context context , boolean inverted ) { return getFallbackContactPhoto ( ) . asDrawable ( context , getColor ( ) . toConversationColor ( context ) , inverted ) ; }
public void testDivisionWithDifferentCurrency ( ) { Money addend = new Money ( "4" , "USD" ) ; money . divide ( addend ) ; }
public int compare ( GGPlan lhs , GGPlan rhs ) { return lhs . date . compareTo ( rhs . date ) ; }
public void onLoaderReset ( Loader < ProcessResult > loader ) { }
public void clearAnswer ( ) { super . clearAnswer ( ) ; annotateButton . setEnabled ( false ) ; captureButton . setText ( getContext ( ) . getString ( R . string . capture_image ) ) ; widgetValueChanged ( ) ; }
public ArrayList < Artist > loadInBackground ( ) { return ArtistLoader . getAllArtists ( getContext ( ) ) ; }
public void testRecordIntEvent ( ) { GameStats stats = new GameStatsImpl ( mStatsIO ) ; stats . recordIntEvent ( GameStats . Event . LEAVING_ROAD , 30 ) ; verify ( mStatsIO ) . save ( ) ; }
public boolean hasAny ( AxolotlAddress address ) { synchronized ( MAP_LOCK ) { Map < Integer , T > devices = map . get ( address . getName ( ) ) ; return devices != null && ! devices . isEmpty ( ) ; } }
public String getMessageResponse ( ) { return this . messageResponse ; }
public com . coinomi . core . protos . Protos . Transaction getTransaction ( int index ) { if ( transactionBuilder_ == null ) { return transaction_ . get ( index ) ; } else { return transactionBuilder_ . getMessage ( index ) ; } }
public static WalletManager getInstance ( ) { if ( WalletManager . Instance == null ) { WalletManager . Instance = new WalletManager ( ) ; } return WalletManager . Instance ; }
public final void onAttach ( Context context ) { if ( Build . VERSION . SDK_INT >= 23 ) { super . onAttach ( context ) ; onAttachToContext ( context ) ; } }
public void testEncodeByte ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "abcd" , Compaction . BYTE , StandardCharsets . UTF_8 ) ; assertEquals ( "\u039f\u001A\u0385abcd" , encoded ) ; }
public void onStopped ( ) { super . onStopped ( ) ; cleanup ( ) ; scheduleShortDelay ( ) ; }
public static PollEntity . Answer map ( VKApiPoll . Answer dto ) { return new PollEntity . Answer ( dto . id , dto . text , dto . votes , dto . rate ) ; }
private int scrollByXAndGetScrolledAmount ( int rx ) { mActualScrollByAmount = 0 ; mInScrollByMethod = true ; mRecyclerView . scrollBy ( rx , 0 ) ; mInScrollByMethod = false ; return mActualScrollByAmount ; }
public void remove_Always_UpdateSortedValues ( ) { addSampleValues ( ) ; sut . remove ( "key2" ) ; Collection < Integer > result = sut . sortedValues ( ) ; assertThat ( result , contains ( 10 , 30 , 40 ) ) ; }
public int colorReminderCalendar ( ) { return colorPrimary ( Prefs . getInstance ( mContext ) . getReminderColor ( ) ) ; }
private void setFTPUsername ( String username ) { mainActivity . getPrefs ( ) . edit ( ) . putString ( FTPService . KEY_PREFERENCE_USERNAME , username ) . apply ( ) ; updateStatus ( ) ; }
public void run ( ) { ripple . set ( at . x , at . y ) ; }
public int delete ( Uri uri , String selection , String [ ] selectionArgs ) { throw new UnsupportedOperationException ( "Not yet implemented" ) ; }
public void setTemperatureMinTime ( Double temperatureMinTime ) { this . temperatureMinTime = temperatureMinTime ; }
public static void e ( String tagName , Exception e ) { if ( LEVEL >= ERROR ) { Log . e ( tagName , e . getMessage ( ) , e ) ; } }
public void getUserCreateVoteList ( int offset , @ NonNull User loginUser , User targetUser ) { if ( targetUser == null ) { getVoteList ( offset , EventBusController . RemoteServiceEvent . GET_VOTE_LIST_HISTORY_CREATE , loginUser ) ; } else { getPersonalCreateVoteList ( offset , loginUser , targetUser ) ; } }
public Drawable getIcon ( Context context , LauncherActivityInfo appInfo ) { return getIcon ( context , context . getPackageManager ( ) , appInfo ) ; }
public void setPaid ( Long paid ) { this . paid = paid ; }
public void setItems ( @ NonNull ArrayList < IDrawerItem > drawerItems ) { setItems ( drawerItems , false ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidenceOrBuilder getConfidenceOrBuilder ( ) { return confidence_ ; }
public TodoList ( String title , int position ) { this ( UUID . randomUUID ( ) . toString ( ) , title , new Date ( ) , new Date ( ) , position ) ; }
public CustomExpandableListAdapter ( Context context , List < String > expandableListTitle , ArrayMap < String , List < String >> expandableListDetail ) { this . context = context ; this . expandableListTitle = expandableListTitle ; this . expandableListDetail = expandableListDetail ; }
private void onTelephonyCallStateRinging ( ) { if ( mSimlarStatus != SimlarStatus . ONGOING_CALL ) { return ; } silenceAndStoreRingerMode ( ) ; mSoundEffectManager . start ( SoundEffectType . CALL_INTERRUPTION ) ; }
public void setLinkTargetBlank ( boolean linkTargetBlank ) { this . linkTargetBlank = linkTargetBlank ; }
public CBSListAdapter ( Context _context , ArrayList < CBSData > _cbsData ) { this . context = _context ; this . _cbsData = _cbsData ; }
private void setEndpoint ( String endpoint ) { this . mEndpoint = StringUtils . notNullStr ( endpoint ) ; }
public void initRefreshData ( ) { allBooksCall ( currentPage ) ; }
public void subtractionMedalsOftenEnough ( ) { assertFrequentEnoughMedals ( GameType . SUBTRACTION ) ; }
public int [ ] getSavedColors ( ) { return SettingsManager . getPickedColors ( ) ; }
public @ NonNull AudibleSample currentSample ( int precision ) { final double totalSpeed = Services . location . totalSpeed ( ) ; return new AudibleSample ( totalSpeed , shortSpeed ( totalSpeed , precision ) ) ; }
public Time ( ) { Calendar calendar = Calendar . getInstance ( ) ; dayOfWeek = calendar . get ( Calendar . DAY_OF_WEEK ) ; } public String getDayOfWeekNumber ( ) { return String . valueOf ( dayOfWeek - 1 ) ; }
public SettingsMigrator providesPreferenceMigrator ( SettingsProvider settingsProvider ) { return new CollectSettingsMigrator ( settingsProvider . getMetaSettings ( ) ) ; }
public void setSource ( MjpegInputStream stream ) { mMjpegView . setSource ( stream ) ; }
public void updated ( ) { Log . d ( TAG , "updated ( ) " ) ; Wallet wallet = getWallet ( ) ; if ( wallet == null ) throw new IllegalStateException ( "No wallet ! " ) ; updated = true ; }
public void setContainerDateInUse ( String containerDateInUse ) { this . containerDateInUse = containerDateInUse ; }
private String getMd5CachePath ( ) { return new StoragePathProvider ( ) . getDirPath ( StorageSubdirectory . SETTINGS ) + File . separator + SETTINGS_MD5_FILE ; }
private View . OnClickListener advancedSetupClickListener ( ) { return new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { activateNextButton ( ) ; deselectGuidedSetupConfigsView ( ) ; selectAdvancedSetupView ( ) ; } } ; }
private void showAddCoinDialog ( ) { Dialogs . dismissAllowingStateLoss ( getFM ( ) , ADD_COIN_DIALOG_TAG ) ; ConfirmAddCoinUnlockWalletDialog . getInstance ( selectedCoin . getName ( ) , wallet . isEncrypted ( ) ) . show ( getFM ( ) , ADD_COIN_DIALOG_TAG ) ; }
public ColorMapProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public void onProgressUpdate ( BaseFile val , String query ) { mainFragment . addSearchResult ( val , query ) ; }
public void testThatKelvinWorks ( ) { when ( settings . getTemperatureFormat ( ) ) . thenReturn ( Settings . TEMPERATURE_KELVIN ) ; assertThat ( TemperatureFormatter . Companion . getFormattedTemp ( settings , 231 , true ) ) . isEqualTo ( "296" ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; loadComments ( false , false ) ; }
public ItemDraggableRange onGetItemDraggableRange ( BaseViewHolder holder , int position ) { int headerCount = getHeaderItemCount ( ) ; return new ItemDraggableRange ( headerCount , getItemCount ( ) - 1 ) ; }
public void handleConfigurationChange ( ) { mPendingResultsDelivery = true ; }
public void setLastModified ( Long lastModified ) { this . lastModified = lastModified ; }
public LiveData < WorkEntity > getObservableWork ( ) { return mObservableWork ; }
public static void showSnackMoreInLogs ( Context context , View view ) { showSnack ( view , R . string . title_more_in_logs , Snackbar . LENGTH_INDEFINITE , R . string . title_open , v -> LogsActivity . startLogsActivity ( context ) ) ; }
public static String toDateTimeText ( Context context , Date date ) { initDateFormat ( context ) ; return DT_FORMAT . format ( date ) ; }
public void onSearchOpenClose ( boolean open ) { searchingStickers = open ; setStickersExpanded ( open , false ) ; }
public int hashCode ( ) { return Objects . hash ( weekday , weekdayName , hours , month , date , comments , monthDay , year , createdAt , updatedAt ) ; }
public Server ( int discoveryPort ) { super ( discoveryPort ) ; }
public NowPlayingController getNowPlayingController ( ) { return mNowPlayingController ; }
public boolean onInterceptTouchEvent ( RecyclerView rv , MotionEvent e ) { return RecyclerViewTouchActionGuardManager . this . onInterceptTouchEvent ( rv , e ) ; }
public void setDistance ( String distance ) { this . distance = distance ; }
public boolean hasNestedScrollingParent ( ) { return mNestedScrollingChildHelper . hasNestedScrollingParent ( ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . UnspentOutput prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onFailure ( Throwable t ) { log . error ( "Could not get reply for blockchain . transaction . broadcast" , t ) ; if ( listener != null ) listener . onTransactionBroadcastError ( tx , t ) ; }
private void disableSearchMode ( ) { hideSoftKeyboard ( ) ; setIsInSearchModeAndSetNewAdapter ( false ) ; mRecycleView . swapAdapter ( getAdapter ( ) , true ) ; updateMenuItemVisibility ( ) ; }
public void onTick ( long millisUntilFinished ) { timeLeftInMillis = millisUntilFinished ; updateCountDownText ( ) ; progressBar . setProgress ( ( int ) ( millisUntilFinished / 1000 ) ) ; }
public BoundingBox ( GeoPoint southWest , GeoPoint northEast ) { this . southWest = southWest ; this . northEast = northEast ; invalidate ( ) ; }
private static int readVersion ( File file ) throws IOException { int version = 0 ; try ( FileInputStream in = new FileInputStream ( file ) ) { version = in . read ( ) ; } return version ; }
public static String getUserTag ( String username ) { return Reddit . tags . getString ( "user - tag" + username . toLowerCase ( ) , "" ) ; }
private void updatePlayerSex ( ) { if ( Sex . MAN == mSelectedPlayer . getSex ( ) ) { btnSexType . setImageResource ( R . drawable . man ) ; } else { btnSexType . setImageResource ( R . drawable . woman ) ; } }
public void setProxyChoice ( int choice ) { putBoolean ( Name . USE_PROXY , choice != Constants . NO_PROXY ) ; putInt ( Name . PROXY_CHOICE , choice ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_login_help : mHelpDialogFragment . show ( getFragmentManager ( ) , TAG_HELP_DIALOG_FRAGMENT ) ; } return super . onOptionsItemSelected ( item ) ; }
public DataModule ( String cinemaHost , String theMovieDatabaseBaseUrl ) { mCinemaHost = cinemaHost ; mTheMovieDatabaseBaseUrl = theMovieDatabaseBaseUrl ; }
private ActionBar getActionBar ( ) { return ( ( ActionBarActivity ) getActivity ( ) ) . getSupportActionBar ( ) ; }
private static int [ ] zzUnpackcmap_blocks ( ) { int [ ] result = new int [ 27904 ] ; int offset = 0 ; offset = zzUnpackcmap_blocks ( ZZ_CMAP_BLOCKS_PACKED_0 , offset , result ) ; return result ; }
public boolean onCreate ( ) { mNetworkMonitorDatabase = new NetMonDatabase ( getContext ( ) ) ; return true ; }
public void viewBookOffline ( ) { offlineMessage ( ) ; initAdapter ( bookUtilsDB . getListBookFromDB ( ) ) ; }
public AudioWidget createWidget ( FormEntryPrompt prompt , boolean readOnlyOverride ) { return new AudioWidget ( widgetActivity , new QuestionDetails ( prompt , "formAnalyticsID" , readOnlyOverride ) , questionMediaManager , audioPlayer , recordingRequester , audioFileRequester , recordingRequester ) ; }
public ArrayList < HaModel > news ( String jsontxt ) { Gson gson = new Gson ( ) ; return gson . fromJson ( jsontxt , new TypeToken < ArrayList < HaModel >> ( ) { } . getType ( ) ) ; }
public String getSecurityToken ( ) { return securityToken ; }
public void onProductPurchased ( String productId , TransactionDetails details ) { * Called when requested PRODUCT ID was successfully purchased */ if ( productId . equals ( getString ( R . string . in_app_pro_version ) ) ) { upgrade ( ) ; } }
public void removeSubject ( int subjectId , int recyclerViewPosition ) { notifyItemRemoved ( recyclerViewPosition ) ; notifyItemRangeChanged ( recyclerViewPosition , getItemCount ( ) - 1 ) ; mSubjectDb . deleteItem ( mSubjectDb . getItem ( subjectId ) ) ; requery ( ) ; }
public void animateToPreviousView ( int event ) { View next = createView ( event , false ) ; showView ( next , AnimationType . LEFT ) ; formIndexAnimationHandler . setLastIndex ( getFormController ( ) . getFormIndex ( ) ) ; }
public AllianceListSubscriber provideAllianceListSubscriber ( EventRenderer renderer ) { return Mockito . mock ( AllianceListSubscriber . class ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; this . eventManager = new EventManager ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_10 . class ) ; startActivity ( i ) ; }
public boolean isFullscreenArticleView ( ) { return getBoolean ( R . string . pref_key_ui_article_fullscreen , true ) ; }
public ResponseTranscoderStatus getDefaultInstanceForType ( ) { return defaultInstance ; }
public AbstractAddress newAddress ( String addressStr ) throws AddressMalformedException { return BitAddress . fromString ( this , addressStr ) ; }
public static String getMiddlePassHash ( ) { return middlePassHash ; }
public void action ( String walletName , String password , boolean fingerprintUsed ) { if ( checkDevice ( walletName , password ) ) startReceive ( walletFile , password ) ; }
public static Set < String > getSetStringSp ( Context context , String name , String tag ) { SharedPreferences sp = context . getSharedPreferences ( name , mode ) ; return sp . getStringSet ( tag , null ) ; }
public final void showFAB ( final boolean parShow ) { if ( parShow ) { mFab . show ( ) ; } else { mFab . hide ( ) ; } }
public void onClick ( View v ) { startActivity ( new Intent ( HoraTotalTrabalhada . this , MainActivity . class ) ) ; }
public void onRecycleViewHolder ( @ NonNull ViewHolder holder ) { holder . layout . getController ( ) . resetState ( ) ; Glide . clear ( holder . image ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_timetable , container , false ) ; }
public void testCanBeResolved_isTrue ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . isCanBeResolved ( ) ) . thenReturn ( true ) ; assertTrue ( dependencyTask . canBeResolved ( configuration ) ) ; }
public FileMeta createFromParcel ( Parcel source ) { return new FileMeta ( source ) ; }
public DownloadImageTask ( DisplayMetrics displayMetrics , String url , String name , String pageUrl ) { mDisplayMetrics = displayMetrics ; mImageUrl = url ; mName = name ; mPageUrl = pageUrl ; }
public int getAttackDamage ( ) { return UNIT_SPRINTER_ATTACK_DAMAGE ; }
public void setPref ( int count ) { editor = pref . edit ( ) ; editor . putInt ( Config . KEY_PREF , count ) ; editor . apply ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_wallPaper . TLdeserialize ( stream , constructor , exception ) ; }
public void serviceAdded ( ServiceEvent serviceEvent ) { mJmDNS . requestServiceInfo ( serviceEvent . getType ( ) , serviceEvent . getName ( ) , 1 ) ; }
public final void clearRoomForPopUp ( ) { Tool . invisibleViews ( getDesktop ( ) ) ; updateDesktopIndicator ( false ) ; updateDock ( false ) ; }
public void testNoDownEvents ( ) { mJsonData . remove ( APIStatusDeserializer . DOWN_EVENTS_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public void setDateTime ( String dateTime ) { initDateTime ( TimeUtil . getDateTimeFromGmt ( dateTime ) ) ; }
public void run ( ) { mSplashDialog . hide ( ) ; }
public static long getLongSetting ( String setting ) { long ret = 0 ; try { ret = Long . parseLong ( map . get ( setting ) . toString ( ) ) ; } catch ( Exception ex ) { } return ret ; }
public void onTryAgainAfterError ( View view ) { onTryAgain ( ) ; }
public void onAttach ( Context context ) { this . context = context ; super . onAttach ( context ) ; }
public synchronized boolean getCancelled ( ) { return this . isCancelled ; }
public boolean equals ( Object o ) { if ( o == null || o . getClass ( ) != BaseTask . class ) { return false ; } BaseTask t = ( BaseTask ) o ; return ( m_name . equals ( t . m_name ) ) ; }
public void onReadyForSpeech ( Bundle bundle ) { Log . d ( TAG , "onReadyForSpeech : " ) ; }
public GridAdapterUsers generateAdapter ( List < UserLTE > list ) { return new GridAdapterUsers ( getContext ( ) , list ) ; }
public void setImageForPosition ( int position , ImageView imageView ) { Picasso . get ( ) . load ( fotos . get ( position ) . mThumbnailPath . replace ( "s . jpg" , "h . jpg" ) ) . into ( imageView ) ; }
public void setTitle ( String title ) { this . mTitle . setText ( title ) ; }
public void onChange ( Realm realm ) { if ( isAdded ( ) ) { getLoaderManager ( ) . restartLoader ( SCHEDULE_LOADER_ID , Bundle . EMPTY , ScheduleDayFragment . this ) ; } }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; game . serializeToStream ( stream ) ; }
public void cancel ( ) { cancelled = true ; }
public void onDatabaseRefreshed ( DatabaseRefreshedEvent event ) { LogUtil . i ( TAG , "received database refreshed event" ) ; mMainPresenter . loadLocations ( ) ; EventUtil . removeStickyEvent ( event ) ; }
public long getItemId ( int position ) { Person person = getItem ( position ) ; if ( person == null ) { return - 1 ; } return person . getPersonID ( ) ; }
public void onClick ( View view ) { SparkleHelper . startExploring ( context , rankData . name , SparkleHelper . CLICKY_NATION_MODE ) ; }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( SQL_CREATE_HOME ) ; }
public void run ( ) { try { Toast . makeText ( _activity , memoryFullError , Toast . LENGTH_LONG ) . show ( ) ; _activity . finish ( ) ; } catch ( Exception ex ) { } }
public static Intent previewIntroInstance ( AppCompatActivity activity ) { Intent intent = new Intent ( activity , IntroActivity . class ) ; intent . putExtra ( KEY_INTRO_TYPE , KEY_INTRO_PREVIEW ) ; return intent ; }
public void onAnimationCancel ( Object animation ) { if ( currentSheetAnimation != null && currentSheetAnimation . equals ( animation ) ) { currentSheetAnimation = null ; } }
public Serializable getState ( String key ) { String realKey = this . getClass ( ) . getName ( ) + "_" + key ; if ( stateStorage . containsKey ( realKey ) ) { return stateStorage . get ( realKey ) ; } return null ; }
public Editor putFloat ( final String key , final float value ) { newValuesMap . put ( key , value ) ; return this ; }
public LiveData < List < ContactEntity >> getContacts ( ) { return mObservableContacts ; }
public static Collection < String > getPackagedLocaleTags ( final Context context ) { return LocaleList . BUNDLED_LOCALES ; }
public static void openTweakHistory ( final Context context , final Tweak tweak ) { startSelectableDateActivity ( context , createTweakIntent ( context , TweakHistoryActivity . class , tweak ) ) ; }
public Maybe < Boolean > delete ( Tag entity ) { return cacheManager . delete ( entity ) ; }
public String getPassword ( ) { return password_ ; }
public void doesNotDetectErrorWhenThereIsNone ( ) { List < SelectChoice > items = Lists . newArrayList ( new SelectChoice ( "label" , "no_space" ) ) ; subject . check ( items ) ; assertEquals ( subject . hasInvalidValues ( ) , false ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( NetworkErrorDialogListener ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( activity . toString ( ) + " must implement NetworkErrorDialogListener" ) ; } }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . Lyric prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; myLocationPermission = new MyLocationPermission ( this , mTracking ) ; }
public void onAnimationCancel ( Object animation ) { if ( shadowAnimation [ num ] != null && shadowAnimation [ num ] . equals ( animation ) ) { shadowAnimation [ num ] = null ; } }
public void onAttach ( Context context ) { super . onAttach ( context ) ; mCtx = context ; mIsFinished = ( ActivityFinished ) mCtx ; }
public void setSectionOffset ( int offset ) { data . edit ( ) . putInt ( "sectionIDOffset" , offset ) . apply ( ) ; }
public ApiService getApiServiceDisableRedirectActivity ( ) { return ServiceGenerator . createService ( ApiService . class , accessToken , this , this , false ) ; }
public void onPageSelected ( int i ) { }
public void linkhJOP ( View v ) { Uri uriUrl = Uri . parse ( "http : Intent launchBrowser = new Intent ( Intent . ACTION_VIEW , uriUrl ) ; startActivity ( launchBrowser ) ; }
public void onTokenRefresh ( ) { Intent intent = new Intent ( this , XmppConnectionService . class ) ; intent . setAction ( XmppConnectionService . ACTION_GCM_TOKEN_REFRESH ) ; startService ( intent ) ; }
public IPresenterFactory < UserBannedPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new UserBannedPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , saveInstanceState ) ; }
public boolean areItemsTheSame ( @ NonNull FilterListItem other ) { return other instanceof Filter && Objects . equal ( sqlQuery , ( ( Filter ) other ) . sqlQuery ) ; }
public HardcoreMode ( final GameConfig gameConfig ) { this . gameConfig = gameConfig ; }
public String formatDateToNumber ( long timestamp ) { return dateInNumberFormat . format ( new Date ( timestamp ) ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; channel . serializeToStream ( stream ) ; photo . serializeToStream ( stream ) ; }
public void run ( ) { sharingLocationsUI . remove ( info ) ; sharingLocationsMapUI . remove ( info . did ) ; if ( sharingLocationsUI . isEmpty ( ) ) { stopService ( ) ; } NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . liveLocationsChanged ) ; }
public void failed ( String message ) { Toast . makeText ( EditProfileActivity . this , getString ( R . string . message_remove_banner_failed_fmt , message ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return updates_ChannelDifference . TLdeserialize ( stream , constructor , exception ) ; }
public float getX ( ) { return bitmapX ; }
public int getPriority ( ) { return 0 ; }
private void loadWebView ( String data , WebView webView ) { webView . loadDataWithBaseURL ( ANDROID_ASSET , data , "text/html" , "utf - 8" , null ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { channel = position ; spectrumSeries . setTitle ( AttysComm . CHANNEL_DESCRIPTION [ channel ] ) ; spectrumPlot . setRangeLabel ( AttysComm . CHANNEL_UNITS [ channel ] ) ; }
public void onItemPinned ( int position ) { ( ( LegacySwipeableExampleActivity ) getActivity ( ) ) . onItemPinned ( position ) ; }
public void onClick ( View widget ) { listener . onViewURL ( getURL ( ) ) ; }
private MessageState emptyState ( Integer appId ) { MessageState emptyState = new MessageState ( ) ; emptyState . loaded = false ; emptyState . hasNext = false ; emptyState . nextSince = 0 ; emptyState . appId = appId ; return emptyState ; }
public @ NonNull String getLoginFail ( ) { return res . getString ( R . string . error_loginFail ) ; }
public static void kill_server_process ( ) { Log . d ( TAG , "Killing server process" ) ; Shell . SU . run ( Arrays . asList ( "kill - 9 `pgrep dhcp6s`" ) ) ; }
public void onAdLoaded ( ) { MixpanelManager . getInstance ( ) . track ( MixpanelManager . EVENT_AD_LOADED ) ; }
public long seek ( final long position ) throws RemoteException { return mService . get ( ) . seek ( position ) ; }
private double sqfootTosqcm ( double num ) { return num * 929 . 0304 ; }
public ChatTarget ( User user ) { mUser = user ; }
public static boolean isEmpty ( ) { return new Select ( ) . from ( Servings . class ) . count ( ) == 0 ; }
public void onImportKeys ( View view ) { mIsExport = false ; mIsDumpFile = false ; showImportFileChooser ( ) ; }
public void onChanged ( int position , int count , Object payload ) { Log . i ( Helper . TAG , "Changed @ " + position + " #" + count ) ; }
public FooterItemHelper withDrawerItems ( ArrayList < IDrawerItem > drawerItems ) { this . mDrawerItems = drawerItems ; return this ; }
public Joystick ( Context context ) { this ( context , null ) ; }
public void onItemRangeRemoved ( int positionStart , int itemCount ) { if ( adapter . getItemCount ( ) - itemCount == 0 ) { hide ( ) ; } }
public static void setCheckANTInstallation ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_CHECK_ANT_INSTALLATION , value ) . commit ( ) ; }
public DataSink createDataSink ( ) { return new CacheDataSink ( cache , maxCacheFileSize ) ; }
public String getTheme ( ) { return mSharedPreferences . getString ( KEY_THEME , "dark" ) ; }
public String getFrom ( ) { return this . from ; }
public TranslationFragmentRecyclerViewAdapter ( Activity activity , CustomThemeWrapper customThemeWrapper ) { this . activity = activity ; primaryTextColor = customThemeWrapper . getPrimaryTextColor ( ) ; secondaryTextColor = customThemeWrapper . getSecondaryTextColor ( ) ; translationContributors = Translation . getTranslationContributors ( ) ; }
public void setAdapter ( Adapter adapter ) { stopScroll ( ) ; setLayoutFrozen ( false ) ; setAdapterInternal ( adapter , false , true ) ; requestLayout ( ) ; }
public void onPostCreatedOnSteem ( ) { toast ( "Published" ) ; HaprampPreferenceManager . getInstance ( ) . setLastPostCreatedAt ( MomentsUtils . getCurrentTime ( ) ) ; closeEditor ( ) ; }
public ArrayList < LoanCollectionSheet > getLoans ( ) { return loans ; }
public boolean haveIt ( ) { return RemixedDungeon . donated ( ) == 4 || Preferences . INSTANCE . getString ( prefProperty ( ) , Utils . EMPTY_STRING ) . equals ( getClass ( ) . getSimpleName ( ) ) ; }
public void onFailure ( Call < BeveragesResponse > call , Throwable t ) { Log . e ( TAG , "Error getting beverages" , t ) ; mException . setValue ( t ) ; }
public MediaException ( Exception e ) { super ( e ) ; }
public synchronized Step getOpenStep ( ) { StepHelper openStepHelper = getOpenStepHelper ( ) ; return openStepHelper != null ? openStepHelper . getStepInstance ( ) : null ; }
public Date getCreateDate ( ) { return createDate ; }
public RepeatInfo getRepeatInfo ( ) { return mRepeatInfo ; }
public void onDrawerSlide ( View drawerView , float slideOffset ) { }
public void onClick ( View v ) { Intent intent = new Intent ( MainActivity . this , com . junseo . dphs . meal . MealActivity . class ) ; startActivity ( intent ) ; }
public int getLayoutRes ( ) { return R . layout . item_card_barchart ; }
public FilteringManifestParser ( Parser < T > parser , List < StreamKey > streamKeys ) { this . parser = parser ; this . streamKeys = streamKeys ; }
public String getSignal ( ) { return signal ; }
public View createView ( Context context , LayoutInflater inflater ) { return null ; }
public void onDialogClosed ( boolean positiveResult ) { if ( positiveResult ) { DateFormatValue value = getValue ( ) ; if ( preference . callChangeListener ( value ) ) { preference . setValue ( value ) ; } } }
public LiveData < Boolean > hasBackgroundRecording ( ) { return hasBackgroundRecording ; }
public static int createProgram ( String vertexSource , String fragmentSource ) { return createProgramVersioned ( vertexSource , fragmentSource , null ) ; }
public boolean onInterceptTouchEvent ( @ NonNull RecyclerView rv , @ NonNull MotionEvent ev ) { swipeListener . onTouch ( null , ev ) ; return false ; }
public Price ( ) { mDate = TimestampHelper . getTimestampForNow ( ) ; }
private boolean isAvailable ( ) { return wifiManager == null ; }
public void onUpgrade ( SQLiteDatabase sqLiteDatabase , int oldVersion , int newVersion ) { switch ( oldVersion ) { case 1 : version2 ( sqLiteDatabase ) ; } }
public void testNoAndroidSettings ( ) { mJsonData . remove ( APIStatusDeserializer . ANDROID_SETTINGS_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public void updateStateWithTimeout ( String item , String state , String timeoutState , int timeoutInSeconds ) { updateState ( item , state ) ; averagePropagator . setStateIn ( item , timeoutState , timeoutInSeconds ) ; }
public JsonCommand params ( Map < String , Object > params ) { this . params . putAll ( params ) ; return this ; }
private void updateViews ( ) { setToolbar ( ) ; setFavourite ( ) ; recyclerView . setAdapter ( new DetailViewAdapter ( dictionaryItem . getSenseElements ( ) ) ) ; setOtherReadings ( ) ; setFrequencyInformation ( ) ; }
private void setTodolist ( ) { TodoListActivity todo = new TodoListActivity ( MainActivity . this , this , ( ListView ) findViewById ( R . id . listView ) ) ; }
public ControlTimedPoints ( TimedPoint c1 , TimedPoint c2 ) { this . c1 = c1 ; this . c2 = c2 ; }
public void onCheckedChanged ( final CompoundButton button , final boolean checked ) { if ( checked ) { holder . postpone . setChecked ( false ) ; item . setPostpone ( false ) ; } item . setCancel ( checked ) ; invokeChangeListener ( item ) ; }
public boolean isDataSetChanged ( ) { int current = currentCount ; return current != getItemCount ( ) ; }
public int getLayoutResourceId ( ) { return R . layout . note_block_user_header ; }
public void onClick ( View v ) { client . setDeleted ( false ) ; serverStatus . updateClient ( client ) ; sectionsPagerAdapter . updateServer ( serverStatus ) ; }
public void set ( int x , int y , double radius , double twist ) { centerX = x ; centerY = y ; this . radius = radius ; this . twist = twist ; }
public SingleHorizontalProgressDrawable ( Context context ) { super ( context ) ; }
public CitiesAdapter ( ArrayList < City > cities , OnCitySelectedListener onCitySelectedListener ) { this . allCities = cities ; this . cities = cities ; this . onCitySelectedListener = onCitySelectedListener ; }
public void setListener ( ClientInfoItemListener listener ) { this . listener = listener ; }
public int getItemCount ( ) { return SessionItemList . size ( ) ; }
public static int getOverlayColor ( ) { return overlay [ Settings . colorMode ] ; }
public boolean onOptionsItemSelected ( MenuItem item ) { return false ; }
public String call ( String s ) { return s . replaceAll ( " [ ^\\p { L } \\w - ] " , "" ) . trim ( ) ; }
public boolean hasActiveSleepTimer ( ) throws RemoteException { return mService . get ( ) . hasActiveSleepTimer ( ) ; }
public void onConfigureFailed ( @ NonNull CameraCaptureSession session ) { Activity activity = getActivity ( ) ; if ( null != activity ) { ToastUtils . showShortToast ( "Failed" ) ; } }
public void showPicker1 ( View view ) { colorDialog . setPickerColor ( this , 1 , colourPrimary ) ; colorDialog . showColorPicker ( this , 1 ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_mosaic , container , false ) ; }
private void gotoApp ( ) { checkIfAppUpdated ( ) ; if ( ! Prefs . getInstance ( this ) . isUserLogged ( ) ) { openLoginScreen ( ) ; } else { initGroups ( ) ; runApplication ( ) ; } }
private BroadcastReceiver toggleReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { toggleDashboard ( ) ; } } ;
public boolean isConfirmationType ( ) { return mConfirmationEditText != null ; }
public boolean onSwipe ( Direction direction ) { return false ; }
public void onGlobalLayout ( ) { CoordinatorLayout . LayoutParams layoutParams = new CoordinatorLayout . LayoutParams ( parallax . getMeasuredWidth ( ) , behavior . getAnchorOffset ( ) ) ; parallax . setLayoutParams ( layoutParams ) ; bottomsheet . getViewTreeObserver ( ) . removeOnGlobalLayoutListener ( this ) ; }
public void resumeCurrentPage ( ) { binding . webview . onResume ( ) ; binding . webview . resumeTimers ( ) ; }
public String formatDateToString ( long timestamp ) { return dateInStringFormat . format ( new Date ( timestamp ) ) ; }
public Boolean contains ( String message ) { return messageQueue . contains ( message ) ; }
private static InstanceSettings existingInstanceFromId ( Context context , Integer widgetId ) { return new InstanceSettings ( context , widgetId ) ; }
public void onBindFooterItemViewHolder ( FooterViewHolder holder , int localPosition ) { HeaderFooterItem item = mFooterItems . get ( localPosition ) ; holder . textView . setText ( item . text ) ; holder . itemView . setBackgroundColor ( item . bgColor ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfAccuracy_Info ) : super . desc ( ) ; }
public void onEcCalibrationAudioInit ( final Core core ) { Lg . w ( "onEcCalibrationAudioInit" ) ; }
private void startActivityWithStubbedDebt ( ) { Intent startIntent = new Intent ( ) ; startIntent . putExtra ( DebtDetailFragment . EXTRA_DEBT_ID , "5t5t" ) ; mDebtDetailActivityActivityTestRule . launchActivity ( startIntent ) ; }
private static void parseJSONArray ( JSONArray jsonArray , List < String > list ) throws JSONException { for ( int i = 0 ; i < jsonArray . length ( ) ; i ++ ) { list . add ( jsonArray . getString ( i ) ) ; } }
public void onFailedDownload ( String fileName ) { }
public void run ( ) { onWorkflowFinished ( context , e , false ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { throw new IllegalStateException ( ) ; }
public int getItemViewType ( int position ) { return sponsorsList . get ( position ) . getLevel ( ) ; }
public com . coinomi . core . protos . Protos . EncryptedDataOrBuilder getEncryptedDataOrBuilder ( ) { return encryptedData_ ; }
public static void cancelFinalNotification ( Context context , PostModel post ) { PostUploadNotifier . cancelFinalNotification ( context , post ) ; }
public void updateNotificationSettings ( boolean isNotificationEnabled ) { mNewsSharedPreferences . put ( mNewsSharedPreferences . getStringFromResId ( R . string . pref_enable_notifications_key ) , isNotificationEnabled ) ; }
public final Vector3D getDirection ( ) { return getParallelLightDirection ( ) ; }
public void yes ( ) { goOffline ( ) ; }
private int getCategoryCount ( ) { return categoryCount ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return updates_Difference . TLdeserialize ( stream , constructor , exception ) ; }
public static void removeUserTag ( final String username ) { Reddit . tags . edit ( ) . remove ( "user - tag" + username . toLowerCase ( ) ) . apply ( ) ; }
public BadgeStyle withPaddingLeftRightRes ( int paddingLeftRight ) { this . mPaddingLeftRight = DimenHolder . fromResource ( paddingLeftRight ) ; return this ; }
public AutoFitGridLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public ImageSlide ( Context context , Uri uri , long size , int width , int height ) { super ( context , constructAttachmentFromUri ( context , uri , MediaUtil . IMAGE_JPEG , size , width , height , true , null , false ) ) ; }
public boolean hasFileCount ( ) { return ( ( bitField0_ & 0x00000008 ) == 0x00000008 ) ; }
public View getFirstChild ( ) { return getChildAt ( 0 ) ; }
public int getMeasuredWidth ( View child ) { return childWidth ; }
public void onCreate ( ) { NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded ) ; sizeNotifierLayout . setDelegate ( this ) ; }
public static boolean remindersVibrate ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_reminders_vibrate ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_reminders_vibrate ) ) ; }
public MediaDetailPagerFragment ( ) { this ( false ) ; }
public void addTextChangedListener ( TextWatcher watcher ) { if ( watcher . equals ( mTextWatcher ) ) { super . addTextChangedListener ( watcher ) ; } else { mTextWatchers . add ( watcher ) ; } }
public void loadCountersBeforeRefresh ( ) { PodDBAdapter adapter = PodDBAdapter . getInstance ( ) ; adapter . open ( ) ; countersBefore = adapter . getFeedCounters ( UserPreferences . FEED_COUNTER_SHOW_NEW ) ; adapter . close ( ) ; }
public static String getUsername ( Context context ) { context = MyApplicationCoreNew . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( TAG_USERNAME_GLOBAL , "" ) ; }
public static boolean isNvidiaDevice ( ) { return Build . MANUFACTURER . equalsIgnoreCase ( "NVIDIA" ) ; }
public void setCallback ( Callback callback ) { this . callback = callback ; }
public DatabaseUniversal ( Context context , String tabelaNazwa ) { super ( context , "las" + tabelaNazwa + " . db" , null , 1 ) ; this . tabelaNazwa = tabelaNazwa ; }
public FillBlankFormPage assertOnPage ( ) { assertText ( R . string . enter_data ) ; return this ; }
public void onClick ( View v ) { startActivity ( new Intent ( SettingsActivity . this , AboutPage . class ) ) ; }
public DeleteTask ( @ NonNull Context context , @ NonNull TrackMetadata track ) { this . context = context ; this . track = track ; }
public void onServiceDisconnected ( ComponentName componentName ) { isPlayerServiceBound = false ; }
public boolean setRepeatStatus ( String s ) { return setRepeatStatus ( s != null ? RepeatStatus . valueOf ( Util . parseDecimalIntOrZero ( s ) ) : null ) ; }
public OkDialog clickOnFormWithDialog ( String instanceName ) { clickOnForm ( instanceName ) ; return new OkDialog ( ) . assertOnPage ( ) ; }
public static void startActionRefreshEveryThing ( Context context ) { Intent intent = new Intent ( context , RefreshBooksWithDirectoryService . class ) ; intent . setAction ( ACTION_REFRESH_EVERY_THING ) ; context . startService ( intent ) ; }
public static synchronized Database with ( Context context ) { if ( instance == null ) { instance = new Database ( context ) ; } return instance ; }
public void setFeaturedVideo ( String featuredVideo ) { this . featuredVideo = StringUtils . notNullStr ( featuredVideo ) ; }
public < T extends JsonEntity > T copy ( ) throws JSONException , IllegalAccessException , InstantiationException { return getClass ( ) . newInstance ( ) . fromJson ( toJson ( ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( SAVE_TITLE_FOR_BROWSER , currentTitle ) ; outState . putString ( SAVE_URL_FOR_BROWSER , currentUrl ) ; }
public void onSuccess ( Object data ) { doGetBatteryLevel ( ) ; Log . d ( "SWELL" , String . format ( "Set up success : %s" , data . toString ( ) ) ) ; }
public String getClientFirstMessage ( ) { return Base64 . encodeToString ( account . getJid ( ) . toBareJid ( ) . toString ( ) . getBytes ( ) , Base64 . NO_WRAP ) ; }
public void setAuthor ( int author ) { this . author = author ; }
public void setNoteList ( List < NoteBlock > noteList ) { if ( noteList == null ) return ; mNoteBlockList = noteList ; notifyDataSetChanged ( ) ; }
public void setLastLocationsSyncTimestamp ( long timestamp ) { mPrefsHelper . setLastLocationsSyncTimestamp ( timestamp ) ; }
public void onSaveMovieFinish ( ) { Log . v ( "getAndSaveMovie" , getClass ( ) + " , movie saved" ) ; mainView . onNotifyMovieSaved ( ) ; }
public void set ( int i ) { this . i = i ; onChange ( ) ; }
public void notifyChildItemChanged ( int groupPosition , int childPosition , Object payload ) { mAdapter . notifyChildItemChanged ( groupPosition , childPosition , payload ) ; }
public SavedState ( final Parcel source ) { super ( source ) ; mSubtype = ( InputMethodSubtype ) source . readParcelable ( null ) ; }
public ApplicationWritePermissionsRequirementsProvider ( Context context ) { this ( LibraryStorageWritePermissionsRequirementsProvider . getInstance ( ) , new ExternalStorageWritePermissionsArbitratorForOs ( context ) ) ; }
public void setShouldFetchPages ( boolean shouldFetchPages ) { mPerInstallationPrefs . edit ( ) . putBoolean ( Constants . PREF_SHOULD_FETCH_PAGES , shouldFetchPages ) . apply ( ) ; }
public double getDistance ( Unit unit ) { if ( unit == Unit . MILE ) { return getDistanceMi ( ) ; } return getDistanceKm ( ) ; }
public TourDeleteAction ( Button button , TourDetailPresenter presenter ) { super ( button ) ; Injector . instance ( ) . inject ( this ) ; this . presenter = presenter ; text = "Begin IthakaTale" ; enable = true ; init ( ) ; }
public void addItem ( AdmissionPercentageMetaPojo item ) { addItemGetId ( item ) ; }
public String _deckLimit ( ) { return Utils . ids2str ( mCol . getDecks ( ) . active ( ) ) ; }
public static boolean getSyncSIMContacts ( Context context ) { return getBoolean ( context , "pref_sync_sim_contacts" , context . getResources ( ) . getBoolean ( R . bool . pref_default_sync_sim_contacts ) ) ; }
public void onKeyStatusUpdated ( ) { refreshUi ( ) ; }
private static void setToken ( String token ) { LoginUtils . token = token ; }
public void onActivityResult ( int requestCode , int resultCode , Intent intent ) { if ( resultCode == RESULT_OK ) { if ( requestCode == 0xbac ) { openBackupFileFromUri ( intent . getData ( ) ) ; } } }
public void openGuard ( ) throws SQLiteException { if ( isOpen ( ) ) return ; open ( ) ; if ( isOpen ( ) ) return ; throw new SQLiteException ( "Could not open database" ) ; }
public void displayRows ( List < SparseArray < String >> columnIndexToValuesArray ) { mTableRecyclerAdapter . setData ( columnIndexToValuesArray ) ; }
public boolean onKeyDown ( int keyCode , KeyEvent event ) { return mBarcodeView . onKeyDown ( keyCode , event ) || super . onKeyDown ( keyCode , event ) ; }
public void unburyCardsForDeck ( long did ) { List < Long > all = new ArrayList <> ( mCol . getDecks ( ) . children ( did ) . values ( ) ) ; all . add ( did ) ; unburyCardsForDeck ( "all" , all ) ; }
public void onClick ( View v ) { mPartialSearch = checkboxPartialMatch . isChecked ( ) ; mAddressString = address_string . getText ( ) . toString ( ) ; last_address_partial_match = mPartialSearch ; last_address_search_string = mAddressString ; executeSearch ( ) ; }
public void clickingButton_whenActivityIsAvailableAndPromptDoesNotHaveAnswer_launchesCorrectIntent ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . launchOpenMapKitButton . performClick ( ) ; assertIntentExtrasEquals ( null ) ; }
public void setTel ( String tel ) { this . _tel = tel ; }
public static void drawContributorBadge ( Canvas canvas , float contributorTier , boolean isNPC ) { HabiticaIcons . drawContributorBadge ( canvas , new RectF ( 0f , 0f , 16f , 16f ) , ResizingBehavior . AspectFit , contributorTier , isNPC ) ; }
public void setToMoveParabolic ( float overallProgress , long startMillisec ) { this . targetRatio = overallProgress ; this . status = HeroStatus . MOVING_PARABOLIC ; this . interpolator = new AccelerateDecelerateInterpolator ( ) ; this . animationStart = startMillisec ; }
public GetTemperatureTask ( DeviceObject deviceObject , Context context , OnProcessFinish callback ) { super ( context , callback ) ; this . deviceObject = deviceObject ; }
public boolean enableNatPmp ( ) { return pref . getBoolean ( appContext . getString ( R . string . pref_key_enable_natpmp ) , Default . enableUpnp ) ; }
private void loadContents ( int type ) { switch ( type ) { case TreasureItemType . STORY_REFLECTION : new LoadStoryDefAndReflectionUris ( ) . execute ( ) ; break ; case TreasureItemType . CALMING_PROMPT : loadCalmingPromptsAndReflectionUris ( ) ; break ; } }
public DefaultDateHeaderViewHolder ( View itemView ) { super ( itemView ) ; text = ( TextView ) itemView . findViewById ( R . id . messageText ) ; }
public Builder clearUpdatedAt ( ) { bitField0_ = ( bitField0_ & ~0x00000010 ) ; updatedAt_ = 0L ; onChanged ( ) ; return this ; }
public SafetyNetHelper ( @ Nullable String googleDeviceVerificationApiKey ) { this . googleDeviceVerificationApiKey = googleDeviceVerificationApiKey ; assureApiKeysDefined ( ) ; secureRandom = new SecureRandom ( ) ; }
public String next ( ) { if ( current == maxEntries ) { throw new NoSuchElementException ( "Past final string" ) ; } String str = getCurrentString ( ) ; current ++ ; return str ; }
public static void setLastActivityStr ( String value ) { setString ( PrefKey . LAST_ACTIVITY_STR , value ) ; }
public void setUuId ( String uuId ) { this . uuId = uuId ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . find_replace ) ; }
public LinearLayoutManager ( Context context ) { this ( context , VERTICAL , false ) ; }
public FigureType getCurrentFigureType ( ) { if ( currentFigureType == null ) { return selectFigure ( ) ; } else { return currentFigureType ; } }
private void logServerEvent ( String projectId , String event ) { AnalyticsUtils . logServerEvent ( event , settingsProvider . getGeneralSettings ( projectId ) ) ; }
public boolean realJidMatchesAccount ( ) { return realJid != null && realJid . equals ( options . account . getJid ( ) . toBareJid ( ) ) ; }
public Observable < Object > addWalletAddress ( AddWalletAddressRequest addWalletAddressRequest ) { return api . addWalletAddress ( addWalletAddressRequest ) ; }
public void onClick ( DialogInterface dialog , int selectedColor , Integer [ ] allColors ) { currentColor = selectedColor ; colorTheLayout ( selectedColor ) ; }
public void onMore ( View view , int position ) { super . more ( statuses . get ( position ) , view , position ) ; }
public void onConnectionAdded ( ServerConfigData data ) { mUpdateThreadHandler . post ( ( ) -> { mServerManagers . put ( data . uuid , new ServerManager ( data ) ) ; } ) ; }
public boolean isOnMainActivity ( ) { return onMainActivity ; }
public void onLoadingComplete ( String imageUri , View view , Bitmap loadedImage ) { DownloadFinished ( feed . getId ( ) , loadedImage ) ; }
public void addText ( String str , boolean jumpToEnd ) { try { addBytesImpl ( str . getBytes ( the_tree . getEncoding ( ) ) , jumpToEnd ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } }
public String onArgNotFound ( ExecutePack info ) { return null ; }
private void showTemplates ( ) { mAdapter = new GroupsRecyclerAdapter ( mContext , RealmDb . getInstance ( ) . getAllGroups ( ) , mEventListener ) ; binding . recyclerView . setAdapter ( mAdapter ) ; refreshView ( ) ; }
public ID newID ( ) throws IOException { OctoPub octoPub = retrofit . create ( OctoPub . class ) ; Call < ID > call = octoPub . id ( ) ; return call . execute ( ) . body ( ) ; }
public int getAttributes ( int c , int l ) { return charAttributes [ screenBase + l ] [ c ] ; }
public AboutBuilder addMoreFromMeAction ( String userName ) { return addAction ( R . mipmap . google_play_store , R . string . more_apps , util . openPlayStoreAppsList ( userName ) ) ; }
public void setReg ( int reg ) { this . _reg = reg ; }
public RichInputMethodSubtype ( @ NonNull final InputMethodSubtype subtype ) { mSubtype = subtype ; mOriginalLocale = InputMethodSubtypeCompatUtils . getLocaleObject ( mSubtype ) ; final Locale mappedLocale = sLocaleMap . get ( mOriginalLocale ) ; mLocale = mappedLocale != null ? mappedLocale : mOriginalLocale ; }
public final boolean isUserWord ( String s ) { return _users . containsKey ( s ) ; }
public void fromWeatherPojo ( OpenWeatherCurrentData pojo ) { mOpenWeatherCurrentData = pojo ; }
private BroadcastReceiver hideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideDashboard ( ) ; } } ;
public com . coinomi . core . protos . Protos . TransactionOutput getTransactionOutput ( int index ) { if ( transactionOutputBuilder_ == null ) { return transactionOutput_ . get ( index ) ; } else { return transactionOutputBuilder_ . getMessage ( index ) ; } }
public MapTabListener ( ActionBarActivity activity , GeoPoint geoPoint ) { super ( activity , "map" , MapFragment . class ) ; this . geoPoint = geoPoint ; }
public synchronized void freeMemory ( ) { if ( mWebView != null && Build . VERSION . SDK_INT < Build . VERSION_CODES . KITKAT ) mWebView . freeMemory ( ) ; }
public void onPageFinished ( WebView view , String url ) { super . onPageFinished ( view , url ) ; updateReadingDisplayOptions ( ) ; updateHighlights ( ) ; updateComments ( ) ; }
public Completable save ( @ NonNull Session session ) { cachedMySessions . put ( session . id , new MySession ( session ) ) ; return localDataSourse . save ( session ) ; }
public void handleResponse ( @ NotNull HtspMessage response ) { id = response . getInteger ( "id" , 0 ) ; size = response . getLong ( "size" , 0 ) ; mtime = response . getLong ( "mtime" , 0 ) ; notifyAll ( ) ; }
public void onCapabilitiesChanged ( Network network , NetworkCapabilities caps ) { Log . i ( "Service send network = " + network + " caps = " + caps ) ; checkConnectivity ( ) ; }
public void onAnimationEnd ( Animator animator ) { if ( runningAnimationAudio != null && runningAnimationAudio . equals ( animator ) ) { recordPanel . setX ( 0 ) ; runningAnimationAudio = null ; } }
public float getXChartMin ( ) { return mXChartMin ; }
public int getExpire ( ) { return expire ; }
public void setImageUrl ( String url ) { this . imageUrl = url ; }
private void fillTheGap ( ) { if ( mCurrentTag == null || ! NetworkUtils . checkConnection ( getContext ( ) ) ) { return ; } ReaderPostService . startServiceForTag ( getContext ( ) , mCurrentTag , UpdateAction . REQUEST_OLDER_THAN_GAP ) ; showProgress ( ) ; }
public void readJson ( ) { mDistrictTeam = ModelMaker . getModelList ( DistrictTeam . class , "2015ne_rankings" ) . get ( 0 ) ; }
public LiveData < List < PinnableCalendarEvent >> getEventsBetweenDates ( @ NonNull DataSource dataSource , @ NonNull Date firstDate , @ NonNull Date lastDate ) { return calendarDao . getEventsBetweenDates ( singletonList ( dataSource ) , firstDate , lastDate ) ; }
public TextItem ( Activity activity , @ Nullable String name , @ Nullable String content , @ Nullable String primary ) { super ( activity ) ; this . name = name ; this . content = content ; this . primary = primary ; }
public void onVertretungsplanSaved ( @ Observes VertretungsplanSaved event ) { showVertretungsplan ( event . getVertretungsplan ( ) ) ; }
public void shouldSetEditModeIfNoRunWasPassed ( ) { presenter . onCreateView ( run ) ; Mockito . verify ( view ) . setRatingText ( String . valueOf ( run . getRating ( ) ) ) ; Mockito . verify ( view ) . setActionBarEditTitle ( ) ; }
private void showAccounts ( ) { AnswersProxy . get ( ) . logButton ( "Show Accounts" ) ; startActivityForResult ( new Intent ( BaseDrawerActivity . this , AccountsActivity . class ) , REQUEST_ACCOUNTS ) ; }
public static com . coinomi . core . protos . Protos . TransactionInput parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void onCreate ( @ NonNull final SQLiteDatabase db ) { db . execSQL ( "CREATE TABLE IF NOT EXISTS " + BlacklistStoreColumns . NAME + " ( " + BlacklistStoreColumns . PATH + " STRING NOT NULL ) ; " ) ; }
public void onClick ( DialogInterface dialog , int id ) { exitConfirmed = true ; sendMsg ( comm_msg_handler , message_type . DISCONNECT , "" ) ; }
public long getLong ( String key ) { return defaultKVStore . getLong ( key ) ; }
public WebView getWebView ( ) { return mWebView ; }
private String getSpinnerValue ( Spinner spinner , int valuesId ) { String values [ ] = getResources ( ) . getStringArray ( valuesId ) ; return values [ spinner . getSelectedItemPosition ( ) ] ; }
public void testGetLocalYear_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . getLocalYear ( ) , is ( localYear ) ) ; }
public Loader < ExportResult > onCreateLoader ( int id , Bundle args ) { return new ExportLoader ( getActivity ( ) ) ; }
public void run ( ) { game . setScreen ( new LoadingScreen ( game , Screens . GameScreen ) ) ; }
public String getDateLiked ( ) { return StringUtils . notNullStr ( dateLiked ) ; }
public int code ( ) { return code ; }
public void onError ( final RequestFailureType failureType , final Throwable exception , final Integer httpStatus ) { result . set ( handleAccessTokenError ( exception , httpStatus , context , uri ) ) ; }
public void onDateSet ( DatePicker view , int year , int monthOfYear , int dayOfMonth ) { choosedDate . set ( year , monthOfYear , dayOfMonth ) ; updateDate ( ) ; }
private String createUniqueString ( ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( "hh : mm : ss" ) ; return dateFormat . format ( new Date ( ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . manage_feed_top_menu , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void onAuthEvent ( AuthEvent event ) { updateViews ( ) ; }
public void shouldBeAbleToLoadPersonDebtsFromRepositoryAndShowEmptyViewIfNotAvailable ( ) { mPersonDetailPresenter . onLoadFinished ( mock ( Loader . class ) , new ArrayList < Debt > ( ) ) ; verify ( mPersonDetailView ) . showMissingPersonDebts ( ) ; }
public void msg ( String message ) { Toast . makeText ( getApplicationContext ( ) , message , Toast . LENGTH_SHORT ) . show ( ) ; Log . v ( TAG , message ) ; }
public void setIngredientId ( int ingredientId ) { this . ingredientId = ingredientId ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . menu_action_close_file_manager ) { finish ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public boolean hasNote ( String input ) { return input . startsWith ( "note" ) ; }
private void updateItem ( Context context , String id , VideoItem . State state , DatabasePatrol db ) { db . updateVideo ( id , state ) ; updateActivityUI ( this , id , state ) ; }
public TermuxSharedProperties getProperties ( ) { return mProperties ; }
public void onClick ( DialogInterface dialog , int id ) { dialog . cancel ( ) ; }
public static void setUserInGutenbergRolloutGroup ( ) { setBoolean ( DeletablePrefKey . GUTENBERG_DEFAULT_FOR_NEW_POSTS , true ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `color` INTEGER" ) ; }
public void onClick ( DialogInterface dialog , int which ) { thread . stopReading ( ) ; dialog . dismiss ( ) ; }
public int getArtistId ( ) { return safeGetFirstSong ( ) . artistId ; }
public void setVisibleYRange ( float minYRange , float maxYRange , AxisDependency axis ) { float minScale = getDeltaY ( axis ) / minYRange ; float maxScale = getDeltaY ( axis ) / maxYRange ; mViewPortHandler . setMinMaxScaleY ( minScale , maxScale ) ; }
public void addTransferListener ( TransferListener transferListener ) { upstream . addTransferListener ( transferListener ) ; }
public String getVersion ( ) { return "4 . 0 . 0" ; }
public Object setValue ( Object input ) { if ( value instanceof String ) { this . value = String . valueOf ( input ) ; } else if ( value instanceof Integer ) { this . value = ( Integer ) input ; } return null ; }
public PreferencesHelper ( @ ApplicationContext Context context ) { pref = context . getSharedPreferences ( PREF_FILE_NAME , Context . MODE_PRIVATE ) ; }
public PreferenceDialog setDefaultPreference ( T preference ) { defaultPreference = preference ; return this ; }
public WindowInsets onApplyWindowInsets ( View v , WindowInsets insets ) { lastInsets = insets ; v . requestLayout ( ) ; return insets . consumeSystemWindowInsets ( ) ; }
public void close ( ) { mKeepRunning = false ; }
public int getEntryCount ( ) { return mValues . size ( ) ; }
public String getAussersonder ( ) { return this . _aussersonder ; }
private void startSyncTimer ( ) { this . handler . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { listener . onPostUpdate ( SyncStatus . NEW_DATA_AVAILABLE ) ; } } , SYNC_INTERVAL_MINS * 60 * 1000 ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mAppPref = AppPreferencesHelper . getInstance ( ) ; child = mAppPref . getLastSelectedChild ( ) ; }
private int getCurrentPage ( ) { return QuranInfo . getPageFromPos ( viewPager . getCurrentItem ( ) , isDualPages ) ; }
public void onLongPress ( MotionEvent event ) { mPageController . handleTouchEvent ( event , AyahSelectedListener . EventType . LONG_PRESS , mPageNumber ) ; }
public void insertAll ( List < Tag > entities ) { crudHelper . insertAll ( entities ) ; }
public long lastModified ( @ NonNull Uri filePath ) { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . lastModified ( filePath ) ; }
public void onError ( Exception e ) { mRemoteLogger . e ( "Crypto failed with exception : " + Log . getStackTraceString ( e ) ) ; }
public void capturarCodigo ( View view ) { Intent intent = new Intent ( "com . google . zxing . client . android . SCAN" ) ; intent . putExtra ( "SCAN_MODE" , "PRODUCT_MODE" ) ; startActivityForResult ( intent , 0 ) ; }
private boolean shouldShowFab ( ) { return getSharedPreferenceBoolean ( "enable_trusted_contact" , true ) ; }
public void clear ( ) { clients . clear ( ) ; streams . clear ( ) ; }
public boolean updatePatient ( long patientID , Patient patient ) { PatientEntity entity = AppDatabaseHelper . patientToPatientEntity ( patient ) ; entity . setId ( patientID ) ; return patientRoomDAO . updatePatient ( entity ) > 0 ; }
public void subtext_ShouldDisplayAdditionalInformation ( ) { rule . startAtMainMenu ( ) . copyForm ( "All_widgets . xml" ) . clickFillBlankForm ( ) . checkIsFormSubtextDisplayed ( ) ; }
public void setZoomLevel ( float level ) { mSolver . setZoomLevel ( level ) ; }
public void setDataSource ( final String path ) { mIsInitialized = setDataSourceImpl ( mCurrentMediaPlayer , path ) ; if ( mIsInitialized ) { setNextDataSource ( null ) ; } }
public int getDisplayZoom ( ) { SharedPreferences defaultSharedPreferences = PreferenceManager . getDefaultSharedPreferences ( this ) ; return DisplayPreferenceUtilities . getDisplayPreference ( SettingsFragment . KEY_DISPLAY_TEXT_SIZE , AppConstants . DISPLAY_PREFERENCES_DEFAULTS . DEFAULT_TEXT_ZOOM , defaultSharedPreferences , mUserDataDBHelper ) ; }
public void setKanjiElements ( List < KanjiElement > kanjiElements ) { mKanjiElements = kanjiElements ; }
public void e ( Throwable t , String tag , String message , Object . . . args ) { HyperLog . e ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
private final ArrayMap < String , String > REQUIRED_PERMISSIONS = new ArrayMap < String , String > ( ) { { put ( Manifest . permission . READ_CALENDAR , "activity_permissions_calendar" ) ; put ( Manifest . permission . WRITE_EXTERNAL_STORAGE , "activity_permissions_write" ) ; } } ;
public void run ( ) { w . setRecentColor ( w . getStringId ( "info_tapad_info_tester" ) , R . color . colorAccent , a ) ; intent . intentLink ( a , w . getStringFromId ( "info_tapad_info_tester_link" , a ) , 400 ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . POW_3 ) ; }
public void subscribe ( final ObservableEmitter < Intent > emitter ) throws Exception { this . emitter = emitter ; context . registerReceiver ( receiver , filter ) ; }
public void deleteNote ( String uuid ) { DeleteNoteInteractor interactor = new DeleteNoteInteractorImpl ( mExecutor , mMainThread , this , mPreviewRepository , uuid ) ; interactor . execute ( ) ; }
public void clearMessages ( ) { this . loggedMessaagesQueue . clear ( ) ; notifyPropertyChanged ( BR . messages ) ; }
public Number getXVal ( float xPix ) { return getGraph ( ) . getXVal ( xPix ) ; }
public List < Station > getStations ( ) { return success ? result . get ( 0 ) . getStations ( ) : Collections . emptyList ( ) ; }
public CircularArray < Vector2 > getSkidmarks ( ) { return mSkidmarks ; }
public MainActivityPagerAdapter ( FragmentManager fm ) { super ( fm ) ; }
public void onDestroy ( ) { Log . i ( "Reset target " + FragmentDialogEx . this ) ; FragmentDialogEx . super . setTargetFragment ( null , requestCode ) ; }
public static int get ( @ NonNull Context context , int res ) { try { return ContextCompat . getColor ( context , res ) ; } catch ( Resources . NotFoundException e ) { return res ; } }
public void onCreate ( Bundle state ) { super . onCreate ( state ) ; setSamplerType ( SamplerPropertiesFragment . SAMPLER_CUBE ) ; }
public int getSid ( ) { return mSid ; }
public void formLoaded ( FormController formController ) { this . formName = formController . getFormTitle ( ) ; this . auditEventLogger = formController . getAuditEventLogger ( ) ; updateRequiresIdentity ( ) ; }
public void writeToParcel ( Parcel parcel , int flags ) { parcel . writeInt ( getId ( ) ) ; parcel . writeString ( getName ( ) ) ; parcel . writeString ( getDescription ( ) ) ; parcel . writeString ( getColor ( ) ) ; }
public void moveToCart ( Product product ) { new Thread ( ( ) -> { ProductDao dao = ProductDao . instance ( context ) ; dao . moveToCart ( product . id ( ) , true ) ; } ) . start ( ) ; }
public static ChecksumException getChecksumInstance ( Throwable cause ) { return IS_STACK_TRACE ? new ChecksumException ( cause ) : INSTANCE ; }
public SQLiteRGBToolHelper ( Context context ) { super ( context , DATABASE_NAME , null , DATABASE_VERSION ) ; }
public void setButtonBackOnClickListener ( View . OnClickListener onClickListener ) { binding . miButtonBack . setOnClickListener ( onClickListener ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mHandler . removeCallbacks ( mDrawCube ) ; }
public Builder isSaveToLocation ( boolean isSaveToLocation ) { mIsSaveToLocation = isSaveToLocation ; return this ; }
public void attachView ( @ NonNull StatusMvvm . View view , @ Nullable Bundle savedInstanceState ) { super . attachView ( view , savedInstanceState ) ; }
public InterventionPhytosanitary ( int phytoId ) { this . quantity = 0f ; this . unit = "liter_per_hectare" ; this . intervention_id = - 1 ; this . phyto_id = phytoId ; }
public void setDesserts ( ArrayList < Food > desserts ) { this . desserts = desserts ; }
public static com . coinomi . core . protos . Protos . TransactionConfidence parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
private static boolean isVideoFormat ( MediaFormat format ) { return MediaConverter . getMimeTypeFor ( format ) . startsWith ( "video/" ) ; }
public void attachVisual ( ) { target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaSlowed ) ) ; }
public void setDate ( long mDate ) { this . mDate = mDate ; }
public boolean isConnected ( ) { return mService != null && mService . isSynchronized ( ) ; }
public DeviceRecyclerViewAdapter ( ListInteractionListener < BluetoothDevice > listener ) { devices = new ArrayList <> ( ) ; this . listener = listener ; }
public synchronized LottieTask < T > removeFailureListener ( LottieListener < Throwable > listener ) { failureListeners . remove ( listener ) ; stopTaskObserverIfNeeded ( ) ; return this ; }
public void showBuyWnd ( ) { GameScene . show ( new WndBag ( shopkeeper . getBelongings ( ) , backpack , new BuyItemSelector ( shopkeeper ) , WndBag . Mode . FOR_BUY , Game . getVar ( R . string . Shopkeeper_Buy ) ) ) ; }
public com . google . protobuf . Parser < Snake > getParserForType ( ) { return PARSER ; }
private double tonToounce ( double num ) { return num * 35273 . 991d ; }
public void updateUserWord ( ) { String [ ] uw = new String [ _ueserCache . size ( ) ] ; _userWords = _ueserCache . toArray ( uw ) ; }
public void deleteConnection ( OpenMode service ) { cloudHandler . clear ( service ) ; dataUtils . removeAccount ( service ) ; runOnUiThread ( this : : refreshDrawer ) ; }
public synchronized void removeConnectingBle ( BleBluetooth bleBluetooth ) { if ( bleBluetooth == null ) { return ; } if ( bleLruHashMap . containsKey ( bleBluetooth . getDeviceKey ( ) ) ) { bleLruHashMap . remove ( bleBluetooth . getDeviceKey ( ) ) ; } }
private void makeToastResult ( final Context context ) { mActivity . runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { Toast . makeText ( context , mResult , Toast . LENGTH_LONG ) . show ( ) ; } } ) ; }
public void onRefresh ( ) { if ( ! _hidden ) { refreshCode ( ) ; } }
private StationsAdapter getAdapter ( ) { adapter = new StationsAdapter ( activity , R . layout . station_list_item , stations ) ; adapter . setReadOnly ( isReadOnly ( ) ) ; adapter . setStationUpdateDelegate ( this ) ; return adapter ; }
public void clearSelection ( ) { ArrayList < Integer > selectedPositions = getSelectedPositions ( ) ; selectedItems . clear ( ) ; for ( int i : selectedPositions ) notifyItemChanged ( i ) ; onSelectionListener . onSelectionChanged ( ) ; }
public GeneralSettingsPage checkIfServerOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . server_settings_title ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public void onClick ( View v ) { startActivity ( new Intent ( getContext ( ) , ActivityCompose . class ) . putExtra ( "action" , "new" ) . putExtra ( "account" , - 1 ) ) ; }
public void setup ( WelcomeScreenConfiguration config ) { super . setup ( config ) ; this . shouldShow = config . getShowNextButton ( ) ; }
public static void displayAndroidBluetoothSettings ( ) { Intent intentOpenBluetoothSettings = new Intent ( ) ; intentOpenBluetoothSettings . setAction ( android . provider . Settings . ACTION_BLUETOOTH_SETTINGS ) ; LiveLoggerActivity . getInstance ( ) . startActivity ( intentOpenBluetoothSettings ) ; }
public void onResume ( ) { super . onResume ( ) ; new ActivityFeatures . Builder ( ) . begin ( ) . setBlockNavigationDrawer ( true ) . setStatusBarColored ( getActivity ( ) , true ) . build ( ) . apply ( getActivity ( ) ) ; }
public static Fragment newInstance ( Long medicalAttentionId ) { MedicalAttentionDetailsFragment fragment = new MedicalAttentionDetailsFragment ( ) ; Bundle args = new Bundle ( ) ; args . putLong ( EXTRA_MEDICAL_ATTENTION , medicalAttentionId ) ; fragment . setArguments ( args ) ; return fragment ; }
public RangePickerIntegerWidget ( Context context , QuestionDetails questionDetails ) { super ( context , questionDetails ) ; setUpWidgetParameters ( ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { feed_id = stream . readInt32 ( exception ) ; }
public Workshop findItemById ( int id ) { return realm . where ( Workshop . class ) . equalTo ( "id" , id ) . findFirst ( ) ; }
public void stop ( ) { if ( mFakeKeyTimer != null ) { mFakeKeyTimer . cancel ( ) ; mFakeKeyTimer . purge ( ) ; mFakeKeyTimer = null ; } if ( mFakeKeyTask != null ) { mFakeKeyTask . cancel ( ) ; mFakeKeyTask = null ; } }
public void onClick ( View v ) { ( ( LinearLayout ) findViewById ( R . id . strategylayout ) ) . removeView ( row . findViewById ( row . getId ( ) ) ) ; t . strategies . remove ( id ) ; }
public boolean onItemLongClick ( int position ) { recyclerAdapter . toggle ( position ) ; return true ; }
public void onFailure ( @ NonNull Call < UserFlagPostResponse > call , Throwable t ) { Log . e ( LOG_LABEL , "Request to POST user flag failed : " + t . toString ( ) ) ; }
private int getRandomNumber ( ) { try { Thread . sleep ( 2000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } return ( int ) ( Math . random ( ) * ( 1000 + 1 ) ) ; }
public EventBuilder setReminderUnit ( @ NonNull TimeUnit reminderUnit ) { this . reminderUnit = reminderUnit ; return this ; }
public final void startServiceAndRegister ( final Context context , final Class < ? extends Activity > activity , final String simlarId ) { startServiceAndRegister ( context , activity , false , simlarId ) ; }
public int getItemCount ( ) { return city != null ? 2 : 0 ; }
public void run ( ) { if ( isVideoMessage ) { try { processAsVideo ( ) ; } catch ( Throwable e ) { processAsFile ( ) ; } } else { processAsFile ( ) ; } }
public void stopForegroundTokenRenewalService ( ) { stopService ( new Intent ( this , SpotifyCommunicatorService . class ) ) ; }
public CharSequence getPageTitle ( int position ) { return Aktivitetsdata . instans . pakke_kategori . get ( position ) . replace ( '_' , '\n' ) ; }
public final List < Item > getListOfItems ( ) { return mListItem ; }
public void syncState ( ) { if ( mDrawerToggle != null ) mDrawerToggle . syncState ( ) ; }
public SensorDataPoint ( long timestamp , int accuracy , float [ ] values ) { this . timestamp = timestamp ; this . accuracy = accuracy ; this . values = values ; }
public void setup ( ) throws Exception { ReferenceManager referenceManager = setupFakeReferenceManager ( REFERENCES ) ; autoplayer = new PromptAutoplayer ( audioHelper , referenceManager , analytics , FORM_IDENTIFIER_HASH ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( activity , SinglePostActivity . class ) ; intent . putExtra ( "post" , postId ) ; ActivityCompat . startActivity ( activity , intent , null ) ; }
public static void set ( String key , long value ) { prefs . edit ( ) . putLong ( key , value ) . commit ( ) ; }
public static String getStringSetting ( String setting ) { String ret = null ; try { ret = map . get ( setting ) . toString ( ) ; } catch ( Exception ex ) { } return ret ; }
public void clearFilters ( ) { scheduleFilter . clearActiveFilters ( ) ; onCreateView ( null ) ; }
public void onLoaderReset ( Loader < List < T >> loader ) { items = null ; }
public void show ( ) { MsgManager manager = MsgManager . getInstance ( ) ; manager . add ( this ) ; }
public void setRoamingType ( Long roamingType ) { this . roamingType = roamingType ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; try { mFragmentHolder = ( FragmentHolder ) context ; } catch ( ClassCastException e ) { throw new ClassCastException ( context . toString ( ) + " must implement FragmentHolder" ) ; } }
private void showPluginRemoveFailedSnackbar ( ) { WPSnackbar . make ( mContainer , getString ( R . string . plugin_remove_failed , mPlugin . getDisplayName ( ) ) , Snackbar . LENGTH_LONG ) . addToSequencer ( ) ; }
public void onPositionDiscontinuity ( ) { }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . form , menu ) ; return ( super . onCreateOptionsMenu ( menu ) ) ; }
public boolean onOptionsItemSelected_drawer ( MenuItem item ) { return mDrawerToggle != null && mDrawerToggle . onOptionsItemSelected ( item ) ; }
public BottomNavigationPagerAdapter ( Context context , FragmentManager fragmentManager ) { super ( fragmentManager ) ; mContext = context ; initData ( ) ; }
public void onDisconnected ( @ NonNull CameraDevice pDevice ) { Log . i ( logTag , "Camera disconnected" ) ; mDevice = null ; mIsValid = false ; close ( ) ; }
public static void fade ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . fade_enter , R . anim . fade_exit ) ; }
public static void log ( String s ) { if ( IS_ENABLED ) { Log . d ( "IGCParser : : " , s ) ; } }
public TourUpdateAction ( Button button , TourDetailPresenter presenter ) { super ( button ) ; Injector . instance ( ) . inject ( this ) ; this . presenter = presenter ; text = "Begin IthakaTale" ; enable = true ; init ( ) ; }
public void orderParameter_shouldBeGetMethod ( ) throws InterruptedException , TimeoutException { xmrToApi . queryOrderParameters ( mockParametersXmrToCallback ) ; RecordedRequest request = mockWebServer . takeRequest ( ) ; assertEquals ( "GET" , request . getMethod ( ) ) ; }
public DedicatedServer ( ServerCmdLineOptions options ) { super ( getSave ( options ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( getArguments ( ) != null ) { mParam1 = getArguments ( ) . getString ( ARG_PARAM1 ) ; mParam2 = getArguments ( ) . getString ( ARG_PARAM2 ) ; } }
public void setOverrideDownloadDirectory ( Uri uri , boolean isSystem ) { mDownloadDirectoryOverrideURI = uri ; mPreferences . edit ( ) . putString ( PREF_DCC_DIRECTORY_OVERRIDE_URI , uri . toString ( ) ) . putBoolean ( PREF_DCC_DIRECTORY_OVERRIDE_URI_SYSTEM , isSystem ) . apply ( ) ; }
public void onRefresh ( ) { mUserListPresenter . updateUserList ( true ) ; paginationRequestSent = true ; mPullToRefresh . setRefreshing ( false ) ; }
public DonationListAdapter ( ArrayList < Donation > dataArray ) { this . donations = dataArray ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { EntityLog log = filtered . get ( position ) ; holder . bindTo ( log ) ; }
public MessageList processNetworkResponse ( String response ) { try { MessageListParser parser = new MessageListParser ( mMode ) ; return parser . parse ( response ) ; } catch ( Exception e ) { return null ; } }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , pt_goodsauto_public . class ) ; startActivity ( inte ) ; }
public void setCustomThumb ( Drawable customThumb ) { this . customThumb = customThumb ; invalidate ( ) ; }
public MyTopTracksPlaylist ( @ NonNull Context context ) { super ( context . getString ( R . string . my_top_tracks ) , R . drawable . ic_trending_up_black_24dp ) ; }
public void onRefresh ( ) { ConnectionManager manager = ConnectionManager . getInstance ( ) ; if ( manager . isAuthorized ( ) ) { update ( ) ; } }
public boolean isDisplayDatesPref ( ) { SharedPreferences mSharedPref = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; boolean displayDatesPref = mSharedPref . getBoolean ( "pref_sync" , true ) ; Log . d ( TAG , "isDisplayDatesPref : returning = " + displayDatesPref ) ; return displayDatesPref ; }
public Builder confirmationStepTitle ( String confirmationStepTitle ) { style . confirmationStepTitle = confirmationStepTitle ; return this ; }
public void setEncryptionEnabled ( boolean encryptionEnabled ) { mEncryption = encryptionEnabled ; if ( mThreadId > 0 ) MessagesProviderUtils . setEncryption ( mContext , mThreadId , encryptionEnabled ) ; }
public void onLaserDeleteSuccess ( @ NonNull LaserSyncEvent . DeleteSuccess event ) { getFragmentManager ( ) . popBackStack ( ) ; }
public String getLocalizedName ( Context context ) { if ( LocaleUtils . isLanguageTurkish ( context ) ) { return turkishName ; } else { return englishName ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return contacts_Contacts . TLdeserialize ( stream , constructor , exception ) ; }
public static void shutdown ( ) { builder = null ; }
public boolean noTaskSources ( ) { for ( OrderedEventSource orderedSource : activeEventSources ) { if ( ! orderedSource . source . providerType . isCalendar ) return false ; } return true ; }
public void onClick ( DialogInterface dialog , int which ) { switch ( which ) { case SORT_BY_EXPIRY : mListener . onSortByExpirySelected ( ) ; break ; case SORT_BY_PURCHASE_DATE : mListener . onSortByPurchaseDateSelected ( ) ; break ; } }
private void enterFullImage ( boolean animate ) { getSettingsListener ( ) . onSetupGestureView ( image ) ; ViewPosition position = ViewPosition . unpack ( getIntent ( ) . getStringExtra ( EXTRA_POSITION ) ) ; image . getPositionAnimator ( ) . enter ( position , animate ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_9 . class ) ; startActivity ( i ) ; }
public void setWebChromeClient ( WebChromeClient client ) { getSettings ( ) . setJavaScriptEnabled ( true ) ; if ( client instanceof VideoEnabledWebChromeClient ) { this . videoEnabledWebChromeClient = ( VideoEnabledWebChromeClient ) client ; } super . setWebChromeClient ( client ) ; }
public void onSuccess ( ) { redirectToAnotherScreenAsFirstScreen ( LoginScreenActivity . class ) ; }
public boolean onNavigationItemSelected ( final MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . domus : closeNavDrawer ( ) ; break ; default : super . onNavigationItemSelected ( item ) ; break ; } return true ; }
public void onResume ( ) { super . onResume ( ) ; checkPrefs ( ) ; confirmBtn . setVisibility ( confirmPref ? View . VISIBLE : View . GONE ) ; updateUI ( false ) ; }
public void onBindViewHolder ( ViewHolder vh , int position ) { vh . textView . setText ( mSharedPrefItemModelList . get ( position ) . getDisplayText ( ) ) ; }
public void run ( ) { if ( ! delayedEncryptedChatUpdates . isEmpty ( ) ) { MessagesController . getInstance ( ) . processUpdateArray ( delayedEncryptedChatUpdates , null , null ) ; delayedEncryptedChatUpdates . clear ( ) ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : NavUtils . navigateUpFromSameTask ( this ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
private TextView obtainView ( View view ) { if ( errorView == null ) errorView = ( TextView ) view . getRootView ( ) . findViewById ( errorViewId ) ; return errorView ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mEventTeams . get ( 0 ) ) ; }
public void run ( ) { if ( sweepNoText != null ) { sweepNoText . setText ( String . format ( "%04d sweeps" , nSweeps ) ) ; } }
private void changeAutoSmsPrefs ( ) { boolean isChecked = binding . silentSMSOptionPrefs . isChecked ( ) ; binding . silentSMSOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setAutoSmsEnabled ( ! isChecked ) ; }
public void onClick ( View view ) { showSlugDialog ( ) ; }
public int getMinSdk ( Context context ) { return xml . getChild ( "uses - sdk" ) . getInt ( "android : minSdkVersion" , context . getResources ( ) . getInteger ( R . integer . prop_min_sdk_default ) ) ; }
public AddWalletEntryActivity ( ) { super ( R . layout . activity_add_budget_entry , R . id . activity_contact_fab , R . id . root_layout , R . id . root_layout2 ) ; }
private void updateSubTitle ( ) { AppCompatActivity activity = ( AppCompatActivity ) getActivity ( ) ; AdministrativeZone administrativeZone = AdministrativeZone . getRecentAdministrativeZone ( activity ) ; String title = administrativeZone . displayName ; updateSubTitle ( title ) ; }
public void onRefresh ( SwipyRefreshLayoutDirection direction ) { if ( direction . equals ( SwipyRefreshLayoutDirection . TOP ) ) { queryTelegrams ( 0 , SCAN_FORWARD ) ; } else { queryTelegrams ( pastOffset , SCAN_BACKWARD ) ; } }
public ActivityBuilder setScaleType ( @ NonNull CropImageView . ScaleType scaleType ) { mOptions . scaleType = scaleType ; return this ; }
public Builder loadConfig ( Context context ) { this . stackBlur = SettingUtils . getSettingStackBlur ( context ) ; this . stackBlurMode = SettingUtils . getSettingStackBlurMode ( context ) ; return this ; }
public int getDirCount ( ) { return dirCount ; }
public void testGetUserNoListener ( ) { client . getUser ( "username" , null ) ; verify ( TestRestServiceFactory . hnRestService , never ( ) ) . userRx ( anyString ( ) ) ; }
public void onDetails ( @ NonNull IPDetails details ) { ( ( ImageView ) layout . getChildAt ( 1 ) ) . setImageDrawable ( flags . loadFlag ( requireContext ( ) , details . countryCode ) ) ; }
public int getPolygonCorners ( ) { return UNIT_MELEE_CORNERS ; }
public final void setImage ( ImageSource imageSource , ImageSource previewSource ) { setImage ( imageSource , previewSource , null ) ; }
public Fragment getItem ( int position ) { return FirstUseFragment . newInstance ( position + 1 ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { JobActivity . this . stopJob ( ) ; }
public int getSecondaryPriority ( ) { return initiator . listId ; }
public void doDrop ( @ NotNull Char chr ) { chr . spendAndNext ( TIME_TO_DROP ) ; int pos = chr . getPos ( ) ; chr . level ( ) . animatedDrop ( detachAll ( chr . getBelongings ( ) . backpack ) , pos ) ; }
public XYStepMode getRangeStepMode ( ) { return rangeStepModel . getMode ( ) ; }
public void onLoaderReset ( Loader < LoadResult > loader ) { }
public void clearAppsFromVK ( ) { SQLiteDatabase db = getWritableDatabase ( ) ; db . delete ( TABLE_PERSONAL , COLUMN_KEY + " LIKE \'app : %\'" , null ) ; db . close ( ) ; }
public static boolean checkPermission ( Context a , String permission ) { return ! Module . isMarshmallow ( ) || ContextCompat . checkSelfPermission ( a , permission ) == PackageManager . PERMISSION_GRANTED ; }
public void onClick ( View view ) { mMyGoalsPresenter . toggleFAB ( ) ; startActivityForResult ( NewGoalActivity . newIntent ( getActivity ( ) ) , RESULT_GOAL_SET ) ; }
public CharSequence getHeader ( final RRThemeAttributes theme , final RedditChangeDataManagerVolatile changeDataManager , final Context context ) { return header ; }
public MyBaseViewHolder ( View itemView ) { super ( itemView ) ; textView = ( TextView ) itemView . findViewById ( android . R . id . text1 ) ; }
public void run ( ) { try { finalProgress . setProgress ( progress ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public Texture ( String url , float scaleX , float scaleY , float rotation ) { super ( url , scaleX , scaleY , rotation ) ; }
public void onDetach ( ) { super . onDetach ( ) ; activity = null ; callbacks = null ; }
public String getUrl ( ) { return sharedPref . getString ( "pref_key_url" , "" ) ; }
private void showControlForPassed ( Context context ) throws ChallengeDoesNotExistsException { if ( this . fitnessChallengeViewModel . isChallengeAchieved ( ) ) { this . showControlForAchieved ( context ) ; } else { this . showControlForFailure ( this . rootView . getContext ( ) ) ; } }
private void writeToDatabase ( ) { repo . updateInfo ( context , info , false , false ) ; }
public String getUserId ( String network ) { return PGP . getUserId ( mPair . signKey . getPublicKey ( ) , network ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . filelist , null ) ; }
public float getBatVolt ( ) { return bat * 0 . 03f + 3 ; }
public File getAnswerFile ( String fileName ) { File result ; if ( currentFile == null ) { result = super . getAnswerFile ( fileName ) ; } else { result = fileName . equals ( answerText ) ? currentFile : null ; } return result ; }
public EighthActivityBuilder special ( boolean special ) { this . special = special ; return this ; }
public static boolean getWidgetActive ( Context context , String key ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; return prefs . getBoolean ( key , false ) ; }
public Observable < EmptyResponse > volumeUp ( ) { return controlService . volumeUp ( ) ; }
public void onResult ( List < DictionarySearchResultItem > results ) { adapter . swapItems ( results ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_highlight , parent , false ) ; return new ViewHolder ( view ) ; }
public void onSiteChanged ( OnSiteChanged event ) { if ( ! event . isError ( ) ) { mSite = mSiteStore . getSiteByLocalId ( mSite . getId ( ) ) ; updateHomepageSummary ( ) ; } }
private void setAddress ( Address address , boolean typeCanChange ) { this . address = address ; this . addressTypeCanChange = typeCanChange ; }
public void setLocation ( String location ) { this . location = location ; }
public Double getNdtUploadKbit ( ) { return ndtUploadKbit ; }
private void call ( final String simlarId ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . call ( simlarId ) ; }
public File getFile ( ) { return mFile ; }
public void onSearchPressed ( EditText editText ) { updateSearchButtons ( 0 ) ; MessagesSearchQuery . searchMessagesInChat ( editText . getText ( ) . toString ( ) , dialog_id , mergeDialogId , classGuid , 0 ) ; }
public static void set ( String key , boolean value ) { prefs . edit ( ) . putBoolean ( key , value ) . commit ( ) ; }
public void createDownloadFolder ( ) { TEST_FOLDER . mkdirs ( ) ; }
public void addNote ( String title ) { AddNoteInteractor interactor = new AddNoteInteractorImpl ( mExecutor , mMainThread , this , mPreviewRepository , title ) ; interactor . execute ( ) ; }
public static void show ( final MainActivity callingActivity , Settings settings , final EntriesCardAdapter adapter ) { show ( callingActivity , settings , adapter , null ) ; }
public int getDialogLayoutResource ( ) { return mDialogLayoutResId ; }
public void addCertListener ( CertChangedListener l ) { synchronized ( mListeners ) { if ( ! mListeners . contains ( l ) ) { mListeners . add ( l ) ; } } }
public void show ( ) { CoordinatorLayout . LayoutParams params = ( CoordinatorLayout . LayoutParams ) getLayoutParams ( ) ; RefreshButtonBehavior behavior = ( RefreshButtonBehavior ) params . getBehavior ( ) ; if ( behavior != null ) behavior . animateIn ( this ) ; }
public PreferenceHeaderAdapter ( Context context , List < Header > items ) { super ( context , 0 , items ) ; mLayoutInflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public KeyboardParams ( @ NonNull final UniqueKeysCache keysCache ) { mUniqueKeysCache = keysCache ; }
public int getTrack ( ) { return trackIndex ; }
public boolean collideTest ( float [ ] triangleArray , float [ ] modelMatrix , Box unused ) { return areCollided ( vertex . clone ( ) , identityMatrix . clone ( ) , triangleArray , modelMatrix ) ; }
public SpinnerWithCloseEvent ( Context context , AttributeSet attrs , int defStyleAttr , int mode ) { super ( context , attrs , defStyleAttr , mode ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . getMenuInflater ( ) . inflate ( R . menu . history , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void scrollToUser ( int userId ) { int userPosition = mChannelListAdapter . getVisibleFlatChildPosition ( userId ) ; mChannelView . smoothScrollToPosition ( userPosition ) ; }
public String getEmptyMessage ( ) { return getString ( R . string . no_event_found_for_your_campus_cursus ) ; }
public EditLinkHandler ( Link oldLink ) { Timber . v ( "EditLinkHandler ( ) called with : " + "oldLink = [ " + oldLink + " ] " ) ; mOldLink = oldLink ; }
public void onResult ( Status status ) { AppLog . i ( T . NUX , status . isSuccess ( ) ? "SmartLock : credentials deleted for username : " + username : "SmartLock : Credentials not deleted for username : " + username ) ; }
public void whenAuditConfigIsNull_doesntWriteEvents ( ) { AuditEventLogger auditEventLogger = new AuditEventLogger ( null , testWriter , formController ) ; auditEventLogger . logEvent ( END_OF_FORM , false , 0 ) ; auditEventLogger . exitView ( ) ; assertEquals ( 0 , testWriter . auditEvents . size ( ) ) ; }
public void newLicense ( ) { this . mChecked = false ; }
private void setViewAfterPatientDownloadError ( String errorMessage ) { mLastViewedPatientsView . setSpinnerVisibility ( false ) ; mLastViewedPatientsView . setListVisibility ( false ) ; mLastViewedPatientsView . setEmptyListText ( errorMessage ) ; mLastViewedPatientsView . setEmptyListVisibility ( true ) ; mLastViewedPatientsView . stopRefreshing ( ) ; }
public void run ( ) { getUsers ( ) ; RecyclerView . Adapter mAdapter = new UserListAdapter ( LoginListActivity . this , users ) ; mRecyclerView . setAdapter ( mAdapter ) ; swipeRefreshLayout . setRefreshing ( false ) ; }
public static BurstValue burstValueFromString ( String value ) { return value == null ? null : BurstValue . createWithoutDividing ( value ) ; }
public void result ( ) { currentProject . reloadTexture ( ) ; }
public HashMap < QoSTestResultEnum , List < QoSServerResultDesc >> getDescMap ( ) { return descMap ; }
public void onBookmarkClicked ( Bookmark bookmark ) { finishAndGoTo ( bookmark . pageInfo . pageId ) ; }
public void editNote ( String uuid , String body ) { EditNoteBodyInteractor interactor = new EditNoteBodyInteractorImpl ( mExecutor , mMainThread , this , mNoteRepository , uuid , body ) ; interactor . execute ( ) ; }
public static boolean isPlaying ( ) { return musicService != null && musicService . isPlayingAndNotFadingDown ( ) ; }
public void setWorkflowId ( String workflowId ) { this . workflowId = workflowId ; }
private void readFromCache ( Piece piece , byte b [ ] ) { System . arraycopy ( cacheBuf , piece . readOffset , b , piece . bufIndex , piece . readLength ) ; }
public boolean onInterceptTouchEvent ( RecyclerView rv , MotionEvent e ) { detector . onTouchEvent ( e ) ; return false ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { stickerset = TL_messages_stickerSet . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public void onConnectionSuspended ( int i ) { Toast . makeText ( this , "Connection problem ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public float getCooldownFactor ( Char chr ) { float chrCooldown = chr . spellCooldown ( getClassName ( ) ) ; if ( chrCooldown > cooldown ) { return 1 ; } return chrCooldown/cooldown ; }
public String getRunner ( ) { return runner ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( overlayView != null ) { windowManager . removeView ( overlayView ) ; } }
public void setLongitude ( float longitude ) { mLongitude = longitude ; }
public Parameters getParameters ( ) { return params . get ( ) ; }
public WellnessIO ( Context context ) { this . context = context ; }
public void sendFeedbackByEmail ( ) { AppUtils . sendFeedbackByEmail ( this ) ; }
public boolean isRegistered ( ) { return status . isRegistered ( ) ; }
public void testThatQuestionMarkWorks ( ) { assertThat ( TemperatureFormatter . Companion . getFormattedTemp ( settings , null , true ) ) . isEqualTo ( "?" ) ; }
public final void setPointXNumber ( int pointXNumber ) { this . pointXNumber = pointXNumber ; }
public void onAboutToStart ( ) { updateCamera ( IMMEDIATE ) ; }
private TimeWidget createWidget ( FormEntryPrompt prompt ) { return new TimeWidget ( widgetActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) , widgetUtils ) ; }
public Maxicode1TestCase ( ) { super ( "src/test/resources/blackbox/maxicode - 1" , new MultiFormatReader ( ) , BarcodeFormat . MAXICODE ) ; addTest ( 5 , 5 , 0 . 0f ) ; }
public NoteViewHolder onCreateViewHolder ( @ NonNull ViewGroup viewGroup , int position ) { return new NoteViewHolder ( LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . view_note , viewGroup , false ) ) ; }
public void setDeleteOptionVisible ( boolean visible ) { mOptionDeleteVisible = visible ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public int getPm25 ( ) { return pm25 ; }
public void callSerially ( Runnable r ) { Displayable . postEvent ( RunnableEvent . getInstance ( r ) ) ; }
public void onClick ( View v ) { if ( timerRunning ) { pauseTimer ( ) ; } else { startTimer ( ) ; } }
public void startEditing ( ) { ApplicationPreferences . fromInstanceSettings ( getContext ( ) , getWidgetId ( ) ) ; }
public static String getFotaPartition ( ) { if ( fota == null ) for ( String partition : Fota ) if ( Utils . existFile ( partition ) ) { fota = partition ; return partition ; } return fota ; }
public void setCurrentLocalAccount ( @ Nullable LocalAccount currentLocalAccount ) { this . currentLocalAccount = currentLocalAccount ; notifyDataSetChanged ( ) ; }
public int getScrollPosition ( ) { return mScrollPos ; }
public String packageName ( ) { return "org . geometerplus . fbreader . plugin . cbz" ; }
public Filter getFilter ( ) { return new SearchFilter ( this ) ; }
public void onProviderDisabled ( String provider ) { gpsStatus = GPS_DISABLED ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_FIX ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . android . courtcounter" , appContext . getPackageName ( ) ) ; }
public ArrayList < ColorInfo > getFlatList ( ) { return this . flatList ; }
private void removeCoinFromPreferences ( CoinMarketCapDetailsModel coin ) { SharedPreferences preferences = getActivity ( ) . getPreferences ( Context . MODE_APPEND ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . remove ( coin . id ) ; editor . apply ( ) ; }
public void cancelLongPress ( ) { super . cancelLongPress ( ) ; mLaunchIntentButton . cancelLongPress ( ) ; }
public void setNumPlayers ( int numPlayers ) { this . numPlayers = numPlayers ; }
public final void setIsUsingArtistImageAsBackground ( boolean value ) { final SharedPreferences . Editor editor = mPreferences . edit ( ) ; editor . putBoolean ( USE_ARTIST_IMAGE_AS_BACKGROUND , value ) ; editor . apply ( ) ; ; }
public void getSeries ( long characterId , Integer offset , Integer limit , Callback < DataWrapper < List < Comic >>> listener ) { getComicListByType ( characterId , COMIC_TYPE_SERIES , offset , limit ) . enqueue ( listener ) ; }
public Fragment getFragment ( int row , int column ) { TotpModel model = this . models . get ( row ) ; return TotpCardFragment . newInstance ( model . accountId , model . getAuthKey ( ) , model . listOrder ) ; }
public EighthActivityBuilder name ( String name ) { this . name = name . trim ( ) ; return this ; }
public LottieTransform3D scale ( float sx , float sy ) { this . scaleX = sx ; this . scaleY = sy ; return this ; }
public AMDateUtil ( Context context ) { this . context = context ; }
public SendDebugLogPreference ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( ) ; }
private void dismissActivity ( ) { runOnUiThread ( new Runnable ( ) { public void run ( ) { progress . dismiss ( ) ; GeneratePubkeyActivity . this . finish ( ) ; } } ) ; }
public Integer getHash1 ( ) { return hash1 ; }
private void setupConnectivityStatus ( ) { setConnectivityStatus ( WalletPocketConnectivity . CONNECTED ) ; handler . sendMessageDelayed ( handler . obtainMessage ( WALLET_CHANGED ) , 2000 ) ; }
public void setViewRoot ( View viewRoot ) { mViewRoot = viewRoot ; }
public void onBackPressed ( ) { if ( fragment . onBackPressed ( ) ) { closeScreen ( ) ; } }
public void onLowMemory ( ) { getMapView ( ) . onLowMemory ( ) ; super . onLowMemory ( ) ; }
public @ Nullable ListenableFutureTask < SlideDeck > getSlideDeck ( ) { return slideDeck ; }
public void setListener ( OnItemEditListener listener ) { this . listener = listener ; }
private BigDecimal getSourceCurrencyValue ( ) { return NumberUtils . getCurrencyValue ( tvSourceValue . getText ( ) . toString ( ) , new AppSettings ( getActivity ( ) ) . getLastConvertCurrencySel ( ) ) ; }
public boolean renderStep ( ) { return timeAndRender ( 150 ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidence . Source getSource ( ) { return source_ ; }
public MenuItem getSettingMenuItem ( Id settingId ) { return getSetting ( settingId ) . getMenuItem ( ) ; }
public boolean hasAudioToSend ( ) { return audioToSendMessageObject != null ; }
public void flipDown ( ) { isUp = false ; if ( ! stopMovements ) { setCardBack ( ) ; } }
public AddressLabel . Item lookupAddress ( String pAddress , long pAmount ) { return mAddressLabels . lookup ( pAddress , pAmount ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintView . class ) ) ; }
public boolean deletePost ( int postid , int topicid ) { StoredPostInfo pi = new StoredPostInfo ( "" , "" , "" , postid , topicid , "" ) ; return deletePost ( pi ) ; }
public void newInstance_shouldReturnNonNullValues ( ) { Account account = new Account ( "Test account" ) ; assertThat ( account . getDescription ( ) ) . isEqualTo ( "" ) ; assertThat ( account . getColorHexCode ( ) ) . isEqualTo ( Account . DEFAULT_COLOR ) ; }
public int getScheduleType ( ) { return scheduleType ; }
public OrthogonalBase ( @ NonNull Point _origin , @ NonNull Point _extremity , double _measuredDistance ) { this ( _origin , _extremity , _measuredDistance , 0 . 0 ) ; }
private void hideProgress ( ) { final ProgressBar progress = ( ProgressBar ) findViewById ( R . id . progress_follow ) ; progress . setVisibility ( View . GONE ) ; mEditAdd . setEnabled ( true ) ; mBtnAdd . setEnabled ( true ) ; }
private void clearDebugOutput ( ) { TextView v = ( TextView ) findViewById ( R . id . debugOutput ) ; v . setText ( null ) ; }
public ArrayList < String > getLabels ( ) { return thisYearsWeekLabels ; }
public void setFeeChargesOutstanding ( Integer feeChargesOutstanding ) { this . feeChargesOutstanding = feeChargesOutstanding ; }
public void itemClick ( Bird bird ) { Intent intent = new Intent ( this , MatchBirdDetailView . class ) ; intent . putExtra ( MatchBirdDetailView . EXTRA_BIRD_KEY , new MatchedBird ( bird , - 1 ) ) ; startActivity ( intent ) ; }
private void drawWallpaper ( ) { drawWallpaper ( mLastFile . home ) ; }
public NoSensorManager ( DroidsorService droidsorService ) { this . droidsorService = droidsorService ; batteryListener = new BatteryListener ( droidsorService ) ; initListenedSensors ( ) ; initTimer ( ) ; }
public String getDownlinkShift ( ) { return new StringBuilder ( Double . toString ( getDownlink ( ) ) ) . append ( "MHz ( " ) . append ( getShift ( ) ) . append ( " ) " ) . toString ( ) ; }
public void onPrintColorEvent ( PrintColorEvent event ) { printColor ( event . message ) ; }
private void onLineWidthChanged ( ) { paint . setStrokeWidth ( lineWidth . getValue ( ) ) ; updateBounds ( ) ; invalidateSelf ( ) ; }
public void changeCursor ( Cursor cursor ) { Cursor old = swapCursor ( cursor ) ; if ( old != null ) { old . close ( ) ; } }
public Map < String , String > getMembers ( ) { return members ; }
private static boolean isValidFilePath ( String filepath ) { if ( Utils . isNullOrEmpty ( filepath ) ) { return false ; } File file = new File ( filepath ) ; return file . exists ( ) && file . canRead ( ) ; }
private void initTweakText ( String tweakName ) { tvTweakText . setText ( FoodInfo . getTweakText ( tweakName ) ) ; }
private static void broadCastUncompressedBookInformationDatabaseDownloaded ( Context context ) { sendBookDownloadStatusChangeBroadCast ( context , DownloadsConstants . BOOK_INFORMATION_DUMMY_ID , STATUS_BOOKINFORMATION_UNZIP_ENDED ) ; }
public void onSuccess ( Integer recentPage ) { if ( recentPage != Constants . NO_PAGE ) { int juz = QuranInfo . getJuzFromPage ( recentPage ) ; int position = ( juz - 1 ) * 9 ; mRecyclerView . scrollToPosition ( position ) ; } }
public void setTitle ( final String title ) { mTitleView . setText ( title ) ; }
public String getPubdateStr ( DateFormat dateFormat ) { if ( null != pubdate ) { return pubdatestr ; } synchronized ( dateFormat ) { return dateFormat . format ( pubdate ) ; } }
public MediaWriter mediaWriter ( Database db ) { return Mockito . mock ( MediaWriter . class ) ; }
public FadeAnimationController ( View view , int invisibleValue ) { this ( view , invisibleValue , 1 . 0f ) ; }
public void saveProfile ( Context context , VpnProfile profile ) { saveProfile ( context , profile , true ) ; }
public static Ingredient extraIngredient ( @ Nullable IngredientTemplate extraTemplate ) { if ( extraTemplate != null ) { return new Ingredient ( extraTemplate , BigDecimal . ZERO ) ; } else { return null ; } }
public void setStations ( List < Station > stations ) { stationsAdapter . submitList ( stations ) ; scrollToSelectedStation ( ) ; }
public void setData ( Object dataObject ) { if ( dataObject instanceof FeatureColumnDetailObject ) { columnDetailObject = ( FeatureColumnDetailObject ) dataObject ; nameText . setText ( columnDetailObject . getName ( ) ) ; setTypeInfo ( columnDetailObject . getColumnType ( ) ) ; } }
public View getView ( Activity activity ) { return activity . findViewById ( R . id . bowmenu_top ) ; }
public static void deleteAll ( Context context ) { COUNTERS . clear ( ) ; saveCounters ( ) ; Toast . makeText ( context , "Done" , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onClick ( View v ) { AdpPushClient . get ( ) . incrementUserAttribute ( "comdey_movie" , 1 ) ; }
public void onLoadingStarted ( String imageUri , View view ) { imageShown = true ; mView = view ; }
public AboutBuilder addYoutubeChannelLink ( String user ) { return addLink ( R . mipmap . youtube , R . string . youtube , util . openYoutubeChannel ( user ) ) ; }
private void checkDbInitialization ( ) { DBFiller . fillIfDbIsEmpty ( ) ; }
public void delete ( ) { collection . delete ( this ) ; mapCache . removeMapPreviewOf ( this ) ; }
public static FileData getInstance ( ) { return ourInstance ; }
public RequestQueue getRequestQueue ( ) { if ( volleyQueue == null ) { volleyQueue = Volley . newRequestQueue ( context . getApplicationContext ( ) ) ; } return volleyQueue ; }
public boolean removeAll ( Collection < ? > c ) { return filters . removeAll ( c ) ; }
private void initFabButton ( int position ) { currentPosition = position ; if ( position == 3 || position == 0 ) { mFabUpload . show ( ) ; } else { mFabUpload . hide ( ) ; } }
public static boolean isScheduled ( Context context ) { return ( PendingIntent . getBroadcast ( context , Constants . REGULAR_REMINDER_REQUEST_CODE , getAlarmIntent ( context ) , PendingIntent . FLAG_NO_CREATE ) != null ) ; }
public void shouldNotMatchGivenDifferentDate ( ) { givenForecastWithValues ( 1 , 1 , "someCity" , 1d , 1d , "someHumidity" , "someDate" , "someCountry" , 1d , "someDesc" ) ; givenWritingToParcel ( ) ; givenNewDate ( "newDate" ) ; whenCreatingFromParcel ( ) ; thenForecastCreatedShouldNotBeEqualTo ( forecast ) ; }
public IntentFilter getIntentFilter ( ) { System . out . println ( TAG + " registering service state change receiver . . . " ) ; IntentFilter intentFilter = new IntentFilter ( ) ; intentFilter . addAction ( Constants . BROADCAST_BUSINESS_LIST_READY ) ; return intentFilter ; }
public void showTrackEvents ( int position ) { NamedDTO track = tracks . get ( position ) ; wireframe . showTrackSchedule ( track , view ) ; }
public void start ( Attributes attributes ) { mCurrentThread . setNumberOfPosts ( Integer . parseInt ( attributes . getValue ( Topic . Xml . NUMBER_OF_REPLIES_ATTRIBUTE ) ) ) ; }
public Header ( UUID infoId , String name , String value ) { this . infoId = infoId ; this . name = name ; this . value = value ; }
public int getCount ( ) { return list . size ( ) ; }
public void setOrientation ( int orientation ) { super . setOrientation ( orientation ) ; setFabSize ( mCurrentFabSize ) ; if ( orientation == VERTICAL ) { setLabelEnable ( false ) ; } else { setLabel ( mLabelTextView . getText ( ) . toString ( ) ) ; } }
public ActivityResourceFinder ( final Activity activity ) { this . mActivity = activity ; }
public int getDisabledIconColor ( ) { return disabledIconColor ; }
public EighthActivityBuilder administrative ( boolean administrative ) { this . administrative = administrative ; return this ; }
private StatusPollTask ( ShapeShift shapeShift , Address depositAddress , Handler handler ) { this . shapeShift = shapeShift ; this . depositAddress = depositAddress ; this . handler = handler ; }
public void run ( ) { recordStartRunnable = null ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . recordStartError ) ; }
private void switchProfile ( ) { this . state = RecordState . IDLE ; this . currentSeries = 0 ; updateProfileView ( ) ; }
public int compare ( TupleAttachment a1 , TupleAttachment a2 ) { return a1 . sequence . compareTo ( a2 . sequence ) ; }
public void addBeverageToFavourite ( Beverage beverage , BeverageDetails beverageDetails ) { mBeverageDetailsRepo . addBeverageToDB ( beverage , beverageDetails ) ; }
private MultiSelectRecyclerViewAdapter getAdapter ( ) { if ( mAdapter == null ) { mAdapter = new MultiSelectRecyclerViewAdapter ( getActivity ( ) , mEditingList ) ; } return mAdapter ; }
public boolean areContentsTheSame ( NotificationViewData oldItem , NotificationViewData newItem ) { return false ; }
public RunStory getItem ( int position ) { return stories . get ( position ) ; }
public void onPreviousPressed ( ) { startService ( AudioUtils . getAudioIntent ( this , AudioService . ACTION_REWIND ) ) ; }
private void processSessionAction ( String sessionActionString ) { processIntFieldValue ( mSessionAction , sessionActionString , TERMUX_SERVICE . MIN_VALUE_EXTRA_SESSION_ACTION , TERMUX_SERVICE . MAX_VALUE_EXTRA_SESSION_ACTION ) ; }
private void testSplit ( String input , String . . . expectedTokens ) { List < String > tokens = Tts . Companion . split ( input ) ; assertEquals ( Arrays . asList ( expectedTokens ) , tokens ) ; }
private void registerSensorEventListener ( int sensorType ) { registerSensorEventListener ( sensorManager . getDefaultSensor ( sensorType ) ) ; }
public void showFab ( ) { if ( fab != null && fabAllowed && isFabHidden ( ) ) { animateFab ( 0 , View . VISIBLE , View . VISIBLE ) ; fabHidden = false ; } }
public RecyclerGenreChipAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . genre_chip , parent , false ) ; return new RecyclerGenreChipAdapter . ViewHolder ( view ) ; }
private void selectDefaultDeck ( ) { getCol ( ) . getDecks ( ) . select ( Consts . DEFAULT_DECK_ID ) ; }
public void scanNow ( ) { wifiManager . startScan ( ) ; }
public ArrayList < String > getHiddenAppsList ( ) { return getStringList ( R . string . pref_key__hide_apps ) ; }
public SeriesAndFormatter < SeriesType , FormatterType > get ( ) { return seriesAndFormatter ; }
public boolean validCollection ( ) { return mModels . validateModel ( ) ; }
public String getLedColor ( ) { return preferences . getString ( "notification_led_color" , school . themeName ) ; }
public void setFax ( String fax ) { this . _fax = fax ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; mPresenter . loadFavorites ( ) ; }
public void notifyUpdate ( Instance instance ) { for ( DbObserver observer : observers ) { observer . updated ( instance ) ; } }
public void updateCommentCount ( ) { mOnCommentUpdateListener . onCommentUpdated ( mCommentAdapter . listSize ( ) ) ; }
public Completable maskAaViewed ( int accountId ) { return networker . vkDefault ( accountId ) . notifications ( ) . markAsViewed ( ) . toCompletable ( ) ; }
public void setSingleLine ( boolean singleLine ) { super . setSingleLine ( singleLine ) ; if ( singleLine ) { mMaxLines = 1 ; } else { mMaxLines = NO_LINE_LIMIT ; } reAdjust ( ) ; }
public int firstBid ( ) { if ( buffers_indexed . size ( ) > 0 ) return buffers_indexed . valueAt ( 0 ) . bid ; else return - 1 ; }
public void setRequestSent ( ArrayList < TripEntry > requestSent ) { this . requestSent = requestSent ; }
public void setFeeChargesWaived ( Integer feeChargesWaived ) { this . feeChargesWaived = feeChargesWaived ; }
public Bundle data ( ) { return mData ; }
private long periodPositionUsToWindowPositionMs ( MediaPeriodId periodId , long positionUs ) { long positionMs = C . usToMs ( positionUs ) ; playbackInfo . timeline . getPeriod ( periodId . periodIndex , period ) ; positionMs += period . getPositionInWindowMs ( ) ; return positionMs ; }
public void onResume ( ) { super . onResume ( ) ; applyTextZoomPref ( ) ; }
public BasemapSettingsController ( Activity activity , SharedPreferences prefs , BasemapSettings model ) { this . activity = activity ; this . prefs = prefs ; this . model = model ; loadModel ( ) ; }
public void initDagger ( ) { daggerInjector . init ( this ) ; }
public void setCategory ( @ NonNull String category ) { mCategory = category ; }
public Builder ( Context context , List < Comment > comments ) { this . context = context ; this . comments = comments ; }
public void onTouchEvent ( RecyclerView view , MotionEvent e ) { }
public void fireButtonVideoClick ( ) { getView ( ) . startAddVideoActivity ( getAccountId ( ) , messageOwnerId ) ; }
public static NewShoppingCartDialogFragment newInstance ( Product product ) { NewShoppingCartDialogFragment f = new NewShoppingCartDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( Constants . EXTRA_PRODUCT_DATA , product ) ; f . setArguments ( args ) ; return f ; }
public static int randomSignChooser ( ) { int result = myUtil . randRange_ApiCheck ( 1 , 2 ) ; if ( result == 1 ) return - 1 ; else return 1 ; }
private Uri getUpdateUri ( ) { return Uri . parse ( AccountingProvider . CUSTOMER_CONTENT_URI + "/" + AccountingProvider . PURCHASES_BASE_PATH + "/" + AccountingProvider . PURCHASE_ITEMS_BASE_PATH + "/" + getId ( ) ) ; }
public void updateCollectionVisibility ( BooksCollection booksCollection , boolean isVisible ) { UserDataDBHelper . getInstance ( context ) . changeCollectionVisibility ( booksCollection . getCollectionsId ( ) , isVisible ) ; if ( bookCollectionsControllerCallback != null ) { bookCollectionsControllerCallback . notifyCollectionVisibilityChanged ( booksCollection , isVisible ) ; } }
public void run ( ) { if ( waitingForKeyboardCloseRunnable != this ) { return ; } waitingForKeyboardCloseRunnable = null ; startLayoutAnimation ( true , true ) ; }
public void onCancel ( final DialogInterface dialogInterface ) { General . quickToast ( PMSendActivity . this , getString ( R . string . comment_reply_oncancel ) ) ; progressDialog . dismiss ( ) ; }
public void testTokenerConstructor ( ) throws JSONException { JSONArray object = new JSONArray ( new JSONTokener ( " [ false ] " ) ) ; assertEquals ( 1 , object . length ( ) ) ; assertEquals ( false , object . get ( 0 ) ) ; }
public void willDraw ( float [ ] mHeadView , boolean VR ) { willDrawRenderer ( rendererPtr , mHeadView , VR ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( KEY_NAME_ERROR_STATE , mNameErrorState ) ; outState . putInt ( KEY_PATH_ERROR_STATE , mPathErrorState ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . newSessionReceived ) { loadSessions ( true ) ; } }
public Movie getItem ( int id ) { return movies . get ( id ) ; }
public NotificationService ( XmppConnectionService service ) { this . mXmppConnectionService = service ; }
public void setIncident_date ( Date incident_date ) { this . incident_date = incident_date ; }
public GeneralSettingsPage clickOnDefaultToFinalized ( ) { scrollToRecyclerViewItemAndClickText ( getTranslatedString ( R . string . default_completed ) ) ; return this ; }
public byte [ ] getHashBytes ( ) { return hash . getBytes ( ) ; }
private void thenCallbackShouldBeSuccess ( ) { assertEquals ( true , mIsSuccess ) ; }
public void setSiteList ( @ NonNull List < ReaderSiteModel > sites ) { mSites . clear ( ) ; mSites . addAll ( sites ) ; mCanLoadMore = true ; notifyDataSetChanged ( ) ; }
public void onClick ( View v ) { String urlString = "https : Intent i = new Intent ( mContext , Website . class ) ; i . putExtra ( Website . EXTRA_URL , urlString ) ; mContext . startActivity ( i ) ; }
public static boolean getSendTyping ( Context context ) { return getBoolean ( context , "pref_send_typing" , context . getResources ( ) . getBoolean ( R . bool . pref_default_send_typing ) ) ; }
public boolean hasResponseLibraryChunk ( ) { return ( ( bitField0_ & 0x08000000 ) == 0x08000000 ) ; }
public String getIdentifier ( ) { return newsItem . getIdentifier ( ) ; }
public int getItemCount ( ) { return blocksArray . length ; }
public BrowseRowDef ( String header , RecommendedProgramQuery query ) { headerText = header ; this . programQuery = query ; this . queryType = QueryType . LiveTvProgram ; this . changeTriggers = new ChangeTriggerType [ ] { ChangeTriggerType . Always } ; }
public boolean onTouch ( View v , MotionEvent event ) { return StickerPreviewViewer . getInstance ( ) . onTouch ( event , gridView , 0 , stickersOnItemClickListener ) ; }
public static DirectoryData notFound ( ) { DirectoryData directoryData = new DirectoryData ( ) ; directoryData . setResult ( DirectoryData . RESULT_NOT_FOUND ) ; return directoryData ; }
public String toString ( ) { return name + SEPARATOR + url ; }
public void onPeriodToClick ( ) { new DatePickerFragment ( ) . show ( getSupportFragmentManager ( ) , "periodTo" ) ; }
private void initImage ( String foodName ) { Common . loadImage ( this , ivFood , FoodInfo . getFoodImage ( foodName ) ) ; }
private long getToDoId ( ) { if ( getArguments ( ) == null ) return 0 ; return getArguments ( ) . getLong ( KEY_TODO_ID ) ; }
public void setData_setsCorrectAnswerInAnswerTextView ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( answer ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) . toString ( ) , answer ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( ! compulsoryDataIsAvailable ( ) ) { reloadAllAndReturnToMainActivity ( ) ; return ; } orientation = getResources ( ) . getConfiguration ( ) . orientation ; }
public void viewReport ( ) { Intent intent = new Intent ( CourseActivity . this , TeaStatActivity . class ) ; startActivity ( intent ) ; }
public void showFontRatingDialog ( UrduFont font ) { showRatingDialog ( getActivity ( ) , font . getFontName ( ) ) ; }
public void setNodeAddress ( String nodeAddress ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( context . getString ( R . string . node_address_key ) , nodeAddress ) . apply ( ) ; }
public String getAppTheme ( Context context ) { if ( app_theme == null ) { updateAppTheme ( context ) ; } return app_theme ; }
public void handleInboxClick ( Activity activity ) { if ( currentItem != null ) currentItem . handleInboxClick ( activity ) ; }
public void run ( ) { SystemClock . sleep ( 3000 ) ; ComponentName main = new ComponentName ( TableViewActivity . this , MainActivity . class ) ; p . setComponentEnabledSetting ( main , PackageManager . COMPONENT_ENABLED_STATE_ENABLED , PackageManager . DONT_KILL_APP ) ; }
public void notifyObserver ( ) { for ( int i = 0 ; i < observers . size ( ) ; i ++ ) { Observer o = observers . get ( i ) ; o . disConnected ( ) ; } }
public void setYearIncreaseText ( String text , StateChange change ) { TextView textView = rootView . findViewById ( R . id . stats_mileage_overview_item_year ) . findViewById ( R . id . overview_item_increase_value ) ; setIncreaseText ( text , change , textView ) ; }
public void onConnectionSuspended ( int i ) { Log . d ( TAG , "onConnectionSuspended ( ) called : " ) ; }
public BindingHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { ItemPersonBinding movieBinding = DataBindingUtil . inflate ( LayoutInflater . from ( parent . getContext ( ) ) , R . layout . item_person , parent , false ) ; return new BindingHolder ( movieBinding ) ; }
public void onResponse ( User user ) { VoteDetailContentActivity . this . user = user ; voteDataManager . getVote ( data . getVoteCode ( ) , user ) ; }
public Object instantiateItem ( ViewGroup container , int position ) { Object item = super . instantiateItem ( container , position ) ; if ( item instanceof Fragment ) { mFragmentMap . put ( position , ( Fragment ) item ) ; } return item ; }
public void onClick ( DialogInterface dialog , int which ) { Intent intent = new Intent ( Settings . ACTION_LOCATION_SOURCE_SETTINGS ) ; startActivityForResult ( intent , 1 ) ; }
public int getGroupCount ( ) { return mifosGroups . size ( ) ; }
private StoryManager ( RestServerInterface server , ArrayList < StoryInterface > storyList ) { this . server = server ; this . storyList = storyList ; this . lastRefreshDateTime = null ; }
public void showErrorLoadingCards ( String msg ) { AppUtils . showToast ( getContext ( ) , msg ) ; }
public String toString ( ) { if ( this . getName ( ) == null ) { return this . getSlug ( ) ; } else { return this . getName ( ) ; } }
public String desc ( ) { return Game . getVar ( R . string . WandOfSlowness_Info ) ; }
public void onReply ( int position ) { super . reply ( statuses . get ( position ) . getAsRight ( ) ) ; }
public ArrayList < Song > getSavedOriginalPlayingQueue ( ) { return getQueue ( ORIGINAL_PLAYING_QUEUE_TABLE_NAME ) ; }
public listeDesCoequipiers Func ( ) throws java . lang . Exception { return listeCoequipiers ( codeAccesUniversel , motPasse , pSigle , pGroupe , pSession , pNomElementEval ) ; }
public void onReceive ( Context context , Intent intent ) { searchQuery = intent . getStringExtra ( "mentionsQuery" ) ; searchQuery = searchQuery . replace ( " TOP" , "" ) ; doSearch ( searchQuery ) ; }
public void clear ( ) { stack . clear ( ) ; index = 0 ; update ( ) ; }
public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { inject ( ) ; for ( int appWidgetId : appWidgetIds ) { updateAppWidget ( context , appWidgetManager , appWidgetId , false ) ; } }
public void update ( ) { for ( Observer observer : observers ) { observer . update ( ) ; } }
public final void setDefaultMonthViewSelectDay ( ) { mDelegate . setDefaultCalendarSelectDay ( CalendarViewDelegate . DEFAULT_MONTH_VIEW_SELECT_DAY ) ; }
public void setKey ( String key ) { this . key = key ; }
public int getStat ( int index ) { return stats [ index ] ; }
public AfterSave ( FileOnFinish finish , Handler handler ) { super ( finish , handler ) ; mFinish = finish ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . activity_main_menu , menu ) ; updateUi ( menu . getItem ( 0 ) ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void onClick ( DialogInterface dialog , int which ) { reallySaveFile ( contentURL , outFile ) ; }
private void changeStatus ( int status ) { this . mStatus = status ; mXmppConnectionService . updateConversationUi ( ) ; }
private void startBroadcastListening ( boolean isHostClientToo ) { UdpBroadcastListeningHandler . startBroadcastListening ( mHostHandlerMap , mCurrentHostIps , isHostClientToo ) ; }
public void insertItem ( int position , T item ) { insert ( position , item ) ; count ++ ; onCountUpdated ( ) ; notifyDataSetChanged ( ) ; }
private void setErrNameNone ( ) { mTvNameNone . setVisibility ( View . VISIBLE ) ; mTvNameAlready . setVisibility ( View . GONE ) ; mTvLengthErr . setVisibility ( View . GONE ) ; mTvPwMatch . setVisibility ( View . INVISIBLE ) ; }
public LocationHeaderRecyclerAdapter ( Context context , List < RecyclerItem < Locations >> items ) { super ( context , items ) ; }
public PreparedPlaybackQueueResourceManagement ( IPlaybackPreparerProvider playbackPreparerProvider , IPreparedPlaybackQueueConfiguration preparedPlaybackQueueConfiguration ) { this . playbackPreparerProvider = playbackPreparerProvider ; this . preparedPlaybackQueueConfiguration = preparedPlaybackQueueConfiguration ; }
public static boolean isLoadLastStoragePath ( ) { return getBoolean ( R . string . pref_key_is_load_last_storage_path , true ) ; }
public void onClick ( View v ) { gameSingleton . getCurrent_game ( ) . addHist_jeu ( " --- \nLe personnage " + role . getNom ( ) + " est mutant . \n\n" ) ; display_next_role ( ) ; }
public boolean onUpdate ( ) { return true ; }
public static Perk getPerk ( String perkId ) { return null ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { mDatabase . setSwitchStatusForRYME ( isChecked ) ; handleNoneIsChecked ( ) ; }
public void onCancel ( ) { Toast . makeText ( getActivity ( ) , "Canceled . " , Toast . LENGTH_SHORT ) . show ( ) ; dismiss ( ) ; }
public ContsHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( mContext ) . inflate ( R . layout . list_item_results , parent , false ) ; return new ContsHolder ( v ) ; }
public void onConfigurationChanged ( final Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; Lg . i ( "onConfigurationChanged : " , newConfig ) ; }
public static void sortTagListByLabel ( List < Tag > list ) { Collections . sort ( list , labelComparator ) ; }
public void setStatusBarAlpha ( float alpha ) { if ( mStatusBarAvailable && Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) { mStatusBarTintView . setAlpha ( alpha ) ; } }
public ResponseAnswer ( ) { this . codJudet = Preferences . getCountyCode ( ) ; this . numarSectie = Preferences . getBranchNumber ( ) ; }
public void onClick ( View v ) { Log . w ( TAG , "onClick ( ) " ) ; clickListener . onClicked ( unverifiedIdentities ) ; }
public AbstractDraggableItemViewHolder ( View itemView ) { super ( itemView ) ; }
public void mediaFileSaveProgress ( final int mediaId , final float progress ) { mWPAndroidGlueCode . mediaFileSaveProgress ( mediaId , progress ) ; }
private InsertResult getResult ( @ NonNull Cursor cursor , @ NonNull Tag tag ) { int position = getNewItemPosition ( cursor , tag ) ; return new InsertResult ( cursor , position ) ; }
public Account getAccount ( ) { return account ; }
public PreferenceDialog setListener ( OnPreferenceListener < T > listener ) { this . listener = listener ; return this ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_sources_browser , menu ) ; return true ; }
public void seek ( long position ) { throw new IllegalStateException ( ) ; }
public AppViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View itemView = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . app_layout , viewGroup , false ) ; return new AppViewHolder ( itemView ) ; }
public void onColumnValueClicked ( SparseArray < String > columnValues ) { String selectedTableName = mTableSelectionSpinner . getSelectedItem ( ) . toString ( ) ; mSqliteManagerPresenter . onColumnValueClicked ( selectedTableName , mColumnNameView . getTableColumnNames ( ) , columnValues ) ; }
public SummitAttendeeDTO getAttendeeRole ( ) { return attendeeRole ; }
public void runHook ( Object . . . args ) { return ; }
public Result ( int _number , double _east , double _north ) { this ( _number , _east , _north , 0 . 0 , 0 . 0 ) ; }
public MatchListBinder provideMatchListBinder ( ) { return new MatchListBinder ( ) ; }
private void showDialogWelcome ( ) { WelcomeDialog welcomeDialog = new WelcomeDialog ( ) ; welcomeDialog . show ( mFragmentManager , "Welcome Dialog" ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . suggestedLangpack ) ; }
public LoadBitmapTask ( ImageViewCustom imageView ) { mImageViewRef = new WeakReference < ImageViewCustom > ( imageView ) ; }
public Object getItem ( int position ) { return mData . get ( position ) ; }
private int getCursorPosition ( int position ) { if ( leftIsRecent ) return position ; else return cursor . getCount ( ) - 1 - position ; }
private GeoPointWidget createWidget ( FormEntryPrompt prompt ) { return new GeoPointWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) , waitingForDataRegistry , geoDataRequester ) ; }
public void onDrawerOpened ( View drawerView ) { if ( mDrawerToggle != null ) mDrawerToggle . onDrawerOpened ( drawerView ) ; if ( getSupportActionBar ( ) != null ) getSupportActionBar ( ) . setTitle ( R . string . app_name ) ; }
public void onStop ( ) { LogHelper . d ( TAG , "stop . current state = " + mPlayback . getState ( ) ) ; handleStopRequest ( null ) ; }
public void onPause ( ) { super . onPause ( ) ; settingsProvider . getGeneralSettings ( ) . unregisterOnSettingChangeListener ( this ) ; }
public IqPacket generateResponse ( final int type ) { final IqPacket packet = new IqPacket ( type ) ; packet . setTo ( this . getFrom ( ) ) ; packet . setId ( this . getId ( ) ) ; return packet ; }
public void onClick ( ) { toast ( "Neutral Button Clicked" ) ; }
public void onResponse ( String response ) { Log . d ( LOG_TAG , response . toString ( ) ) ; if ( responseListener != null ) responseListener . onResponse ( response ) ; }
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + USER_TABLE ) ; }
public void testNullData ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . parseNullData ( mSubscriber ) ; }
public static void setNotificationsAllow ( Context context , boolean allow ) { SharedPreferences sharedPreferences = getSharedPreferences ( context ) ; SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putBoolean ( ALLOW , allow ) ; editor . apply ( ) ; }
public void sipServiceHasConnected ( SipService sipService ) { if ( sipService . getFirstCall ( ) != null ) { mCurrentCallId = sipService . getFirstCall ( ) . getIdentifier ( ) ; } else { finishAfterDelay ( ) ; } }
public Money getBalance ( ) { Money balance = Money . createZeroInstance ( mCommodity . getCurrencyCode ( ) ) ; for ( Transaction transaction : mTransactionsList ) { balance . add ( transaction . getBalance ( getUID ( ) ) ) ; } return balance ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { getDialog ( ) . getWindow ( ) . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_STATE_VISIBLE ) ; return super . onCreateView ( inflater , container , savedInstanceState ) ; }
public boolean onLongClick ( View v ) { if ( transportOptions . getEnabledTransports ( ) . size ( ) > 1 ) { transportOptionsPopup . display ( transportOptions . getEnabledTransports ( ) ) ; return true ; } return false ; }
public void run ( ) { Optional < TodoListItem > item = repository . getItemById ( itemUuid ) ; if ( item . isPresent ( ) ) postHeader ( item . get ( ) ) ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable String label , @ NonNull Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public double getFactor ( ) { return factor ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { setting = SynchronizedSettingRepository . getLocalInstance ( getApplicationContext ( ) ) ; setProgressStatus ( PROGRESS_SETTING ) ; setActiveHomeTab ( getIntent ( ) ) ; preloadDataThenStartHomeActivity ( ) ; }
public void run ( ) { mUserActionsListener . loadDevices ( ) ; }
public void onNotify ( byte [ ] data ) { Log . d ( "SWELL" , "Sensor : " + Arrays . toString ( data ) ) ; }
private static String getTRN ( ) { return Game . getVar ( R . string . AboutScene_Translation ) + "\n\t" + Game . getVar ( R . string . AboutScene_Translation_Names ) ; }
public java . util . List < com . coinomi . core . protos . Protos . TransactionInput > getTransactionInputList ( ) { return transactionInput_ ; }
public void setStreet_address ( StringBuilder street_address ) { this . street_address = street_address ; }
public void onPasswordSet ( Bundle args ) { finalizeWalletRestoration ( args ) ; }
public void read ( String fileName ) { mFileName = fileName ; }
public void deleteDialog ( final long did , final int onlyHistory ) { deleteDialog ( did , true , onlyHistory , 0 ) ; }
public AboutBuilder addDribbbleLink ( String url ) { return addLink ( R . mipmap . dribbble , R . string . dribbble , url ) ; }
public AsyncArtistDataLoader ( Context context , int artistId ) { super ( context ) ; this . artistId = artistId ; }
public Cursor getTask ( String id ) { SQLiteDatabase db = getReadableDatabase ( ) ; return db . rawQuery ( "SELECT * FROM " + TASK_TABLE_NAME + " WHERE " + TASK_COLUMN_ID + " = ?" , new String [ ] { id } ) ; }
public void onStart ( ) { super . onStart ( ) ; boot ( ) ; setupPosts ( ) ; }
public void onPushSuccess ( ) { Log . i ( TAG , "onPushSuccess" ) ; currentService . disconnect ( deviceAddress ) ; refreshViewOnSucccess ( ) ; }
private void hideKeyboard ( ) { searchEditText . clearFocus ( ) ; getWindow ( ) . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_STATE_ALWAYS_HIDDEN ) ; }
private void thenItemClickListenerShouldHandleItemClick ( ) { verify ( mItemClickListener , times ( 1 ) ) . onItemClick ( eq ( mTextView ) , any ( WeatherViewModel . class ) ) ; }
public void onResume ( ) { super . onResume ( ) ; refreshPeopleList ( ) ; }
public Actor getActor ( VisualSettingManager visualSettingManager ) { return null ; }
public static void tintFab ( FloatingActionButton fab , Context context ) { DrawableCompat . setTint ( fab . getDrawable ( ) , ContextCompat . getColor ( context , R . color . trans_dark ) ) ; }
public int getLayoutResId ( ) { return R . layout . login_activity ; }
public int getItemCount ( ) { int count = 0 ; if ( deviceHasGoodCamera ) { count ++ ; } if ( MediaController . allPhotosAlbumEntry != null ) { count += MediaController . allPhotosAlbumEntry . photos . size ( ) ; } return count ; }
public void addCurve ( LottieCubicCurveData curve ) { curves . add ( curve ) ; }
public ListView getListView ( ) { return mListView ; }
private Fetcher ( DatabaseEntry model ) { _model = model ; }
public void onResume ( ) { getBellSoundPool ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getSupportMenuInflater ( ) . inflate ( R . menu . activity_add , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return SparkleHelper . getPrettifiedShortSuffixedNumber ( context , value ) ; }
public int getTrackPosition ( ) throws RemoteException { return mService . get ( ) . getTrackPosition ( ) ; }
public String toString ( ) { return "LottieAnimatableColorValue { " + "initialValue = " + initialValue + ' } ' ; }
private void setSecurePreference ( boolean isSecureEnabled ) { mainActivity . getPrefs ( ) . edit ( ) . putBoolean ( FTPService . KEY_PREFERENCE_SECURE , isSecureEnabled ) . apply ( ) ; }
public boolean getNeverAskRatingAgain ( ) { return BuildConfig . FLAVOR . toLowerCase ( ) . contains ( BuildConfig . FLAVOR_gaD . toLowerCase ( ) ) ? preferences . getBoolean ( "neverAskRatingAgain" , false ) : true ; }
public CountItemsOrAndSize ( Context c , TextView itemsText , BaseFile f , boolean storage ) { this . context = c ; this . itemsText = itemsText ; file = f ; isStorage = storage ; }
public void setMimeType ( @ Nullable final String mimeType ) { this . mimeType = mimeType ; }
public void onClick ( View v ) { mKpSeekBar . setProgress ( mKpSeekBar . getProgress ( ) - 10 ) ; }
public Result ( int _determinationNumber , double _east , double _north , double _altitude ) { this . determinationNumber = _determinationNumber ; this . east = _east ; this . north = _north ; this . altitude = _altitude ; }
public void prev ( ) throws RemoteException { mService . get ( ) . prev ( ) ; }
private void dnsResolved ( ResourceRecord rr ) { if ( DatabaseHelper . getInstance ( ServiceSinkhole . this ) . insertDns ( rr ) ) { Log . i ( TAG , "New IP " + rr ) ; prepareUidIPFilters ( rr . QName ) ; } */ }
public void setType ( MealType type ) { this . type = type ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; mPresenter . loadPrices ( ) ; }
public int getRepeatMode ( ) throws RemoteException { return mService . get ( ) . getRepeatMode ( ) ; }
public void setAccountLabel ( String label ) { setSubaddressLabel ( accountIndex , 0 , label ) ; }
public long getRepeatLimit ( ) { return repeatLimit ; }
public File getConfig ( ) { return new File ( Config . PROFILES_DIR , name + Config . MIDLET_CONFIG_FILE ) ; }
public void testIsWPCOMURI5 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( wpcomAddress5 ) ) ) ; }
public static long removeTimeOffset ( long time ) { time -= TimeZone . getDefault ( ) . getOffset ( time ) ; return time ; }
public void notifyCreation ( Object obj ) { App . arePointsExported = false ; for ( DAO dao : this . daoList ) { dao . create ( obj ) ; } }
private void startActivity ( Intent intent , @ StringRes int resId ) { try { startActivity ( intent ) ; } catch ( Exception e ) { FirebaseCrash . report ( e ) ; showMessage ( resId ) ; } }
public CalendarItem ( String date , String schedule , String department ) { this . date = date ; this . schedule = schedule ; this . department = "" ; }
public TbaAndroid ( ) { super ( ) ; mShouldBindStetho = true ; mShouldInstallLeakCanary = true ; }
private void continueCheck ( ) { if ( scbNextServing != null && ! scbNextServing . isChecked ( ) ) scbNextServing . setChecked ( true ) ; }
public void requestInputFromUser ( int resid , String needed ) { VpnStatus . updateStateString ( "NEED" , "need " + needed , resid , LEVEL_WAITING_FOR_USER_INPUT ) ; showNotification ( getString ( resid ) , getString ( resid ) , PRIORITY_MAX , 0 , LEVEL_WAITING_FOR_USER_INPUT ) ; }
public void onClick ( View v ) { if ( ! songsManager . queue ( ) . isEmpty ( ) ) { MediaControllerCompat . getMediaController ( getActivity ( ) ) . getTransportControls ( ) . skipToNext ( ) ; } }
public T withSelectedTextColor ( int selectedTextColor ) { this . selectedTextColor = ColorHolder . fromColor ( selectedTextColor ) ; return ( T ) this ; }
private void showCorrectAnswer ( ) { userAnswer . setTextColor ( this . getResources ( ) . getColor ( R . color . colorGreen ) ) ; userAnswer . setBackgroundResource ( R . drawable . rounded_button_correct ) ; userAnswer = null ; }
public ContextMenuHandler ( Context context ) { this . context = context ; for ( int i = 0 ; i < Type . values ( ) . length ; i ++ ) enabled [ i ] = true ; }
public void setNumberOfPoints_Total ( long numberOfPoints_Total ) { NumberOfPoints_Total = numberOfPoints_Total ; }
public void searchMovieBackPressed ( ) { if ( showingSearchResult ) { showingSearchResult = false ; loadedMovies . clear ( ) ; displayMovies ( ) ; } }
public void onLocationChangedSignificantly ( LatLng latLng ) { Timber . d ( "Location significantly changed" ) ; updateMapAndList ( LOCATION_SIGNIFICANTLY_CHANGED , null ) ; }
public void setupOptionMenu ( boolean canSaveYourself , boolean canDelete ) { mCanSaveYourself = canSaveYourself ; mCanDelete = canDelete ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public boolean set ( boolean nextValue ) { varValueAsBoolean = nextValue ; varType = VariableType . VariableTypeBoolean ; varIsInit = true ; return true ; }
public boolean onNavigationItemSelected ( @ NonNull MenuItem item ) { int id = item . getItemId ( ) ; onNavigationItemSelected ( id ) ; return id != R . id . nav_logout ; }
public void useAppContext ( ) throws Exception { URLBuilder builder = new URLBuilder ( appContext ) ; assertEquals ( api , appContext . getString ( R . string . TMDBAPI ) ) ; }
public EPickTypes [ ] getPickTypes ( ) { return pickTypes ; }
public void onLongClick ( ) { if ( longClickListener != null ) { longClickListener . onLongClick ( asActiveSelection ( ) ) ; } }
public Object getItem ( int _position ) { return mFileObjects . get ( _position ) ; }
public boolean isViewFromObject ( View view , Object key ) { return key == view ; }
public void setIcon ( Drawable icon ) { this . icon = icon ; }
public int getFontsize ( ) { return data . getInt ( "fontsize" , - 1 ) ; }
public int getChildrenCount ( int indiceProduto ) { return prodList . get ( indiceProduto ) . getProduto ( ) . getConsumidores ( ) . size ( ) ; }
public Completable deleteContribution ( Contribution contribution ) { return contributionDao . delete ( contribution ) ; }
private void suggestArgs ( MainPack info , int type , List < Suggestion > suggestions , String before ) { suggestArgs ( info , type , suggestions , null , before ) ; }
public ArrayList < Long > nids ( Model m ) { return mCol . getDb ( ) . queryLongList ( "SELECT id FROM notes WHERE mid = ?" , m . getLong ( "id" ) ) ; }
public void onGmsConnectionResultNoResolution ( int errorCode ) { GoogleApiAvailability . getInstance ( ) . getErrorDialog ( this , errorCode , UNHANDLED_REQUEST_CODE ) . show ( ) ; }
public Identifier ( PreferenceData preference , @ Nullable String title , String . . . args ) { this ( preference , title , null , null , null , args ) ; }
public void setC6h6 ( int c6h6 ) { this . c6h6 = c6h6 ; }
public void testNullRenderFromKey ( ) { when ( mDatafeed . fetchTeam ( TEAM_KEY ) ) . thenReturn ( Observable . just ( null ) ) ; TeamListElement element = mRenderer . renderFromKey ( TEAM_KEY , ModelType . TEAM , ) ; assertNull ( element ) ; }
public void onProgress ( final int state ) { thread . runOnUI ( ( ) -> logoutHandler . onProgress ( context . getString ( R . string . exiting ) + "\n" + uName ) ) ; }
public void onAdded ( ) { if ( automatic && KeyCachingService . getMasterSecret ( context ) == null ) { DatabaseFactory . getMmsDatabase ( context ) . markIncomingNotificationReceived ( threadId ) ; MessageNotifier . updateNotification ( context ) ; } }
public HeartRateSummary ( Float average , Float min , Float max , Long startTime , Long endTime ) { this . average = average ; this . min = min ; this . max = max ; this . startTime = startTime ; this . endTime = endTime ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . valueOf ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "UploadAlias" , 1 ) ; else toggleAliasSetting ( "UploadAlias" , 2 ) ; return true ; }
public void testEncode ( ) throws WriterException { doTest ( "05096893" , "0000000000010101110010100111000101101011110110111001011101010100000000000" ) ; }
public GestureControllerForPager ( @ NonNull View view ) { super ( view ) ; mTouchSlop = ViewConfiguration . get ( view . getContext ( ) ) . getScaledTouchSlop ( ) ; }
private void setTopic ( String topic ) { if ( topic == null ) topic = "" ; mTopic = topic ; }
public List < Order < TARGET >> getOrders ( ) { return orders ; }
public static int getPINCodeLength ( ) { return getInt ( R . string . pref_key_pin_code_length , DEF_PIN_CODE_LENGTH ) ; }
public void onRightButtonPressed ( ) { _selectedSpinner = _handspinners [ ++ _selectedNum ] ; setButtonVisible ( ) ; }
public void doStop ( ) { if ( ! isRunning ( ) ) return ; needLoadTorrents = false ; disposables . clear ( ) ; stopWatchDir ( ) ; stopStreamingServer ( ) ; session . requestStop ( ) ; cleanTemp ( ) ; }
public void onDestroy ( ) { if ( audioPlayer != null ) { audioPlayer . destroy ( ) ; } super . onDestroy ( ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; text = ( TextView ) itemView . findViewById ( R . id . name ) ; }
private void unregister ( BroadcastReceiver receiver ) { try { unregisterReceiver ( wifiReceiver ) ; Log . i ( TAG , "Receiver unregistered . " ) ; } catch ( IllegalArgumentException e ) { } }
public void hideMediaOnLockscreenChanged ( boolean enabled ) throws RemoteException { mService . get ( ) . hideMediaOnLockscreen ( enabled ) ; }
public float getAngle ( ) { return mAngle ; }
public void delete ( String key ) { mStorage . deleteIfExists ( key ) ; }
public static void showUnityAdsRandom ( Activity activity ) { int guess = myUtil . randRange_ApiCheck ( 1 , 10 ) ; if ( guess <= 4 ) { if ( UnityAds . isReady ( ) ) { UnityAds . show ( activity ) ; } } }
public void onClick ( View v ) { LOGD ( TAG , "Need to accept Tos . " ) ; doFinish ( ) ; }
public HOGDescriptor ( String filename ) { nativeObj = HOGDescriptor_3 ( filename ) ; return ; }
private void markDialogProcessed ( ) { settings . markFirstLaunch ( ) ; }
public void onResume ( ) { super . onResume ( ) ; Reporting . getTracker ( getActivity ( ) ) . setCurrentScreen ( getActivity ( ) , "Settings > Resto" , getClass ( ) . getSimpleName ( ) ) ; }
public static < T > void assertEqualsArrayList ( T [ ] expected , List < T > actual ) { assertEquals ( Arrays . asList ( expected ) , actual ) ; }
public Bitmap getThumbnail ( ) { return thumbnail ; }
public void onPause ( ) { super . onPause ( ) ; processPlayPause ( ) ; }
public void setMaxLines ( int maxlines ) { super . setMaxLines ( maxlines ) ; mMaxLines = maxlines ; reAdjust ( ) ; }
public void performAction ( Context context , TimestampedValue [ ] newValues ) { SmsManager smsManager = SmsManager . getDefault ( ) ; smsManager . sendTextMessage ( phoneNumber , null , text , null , null ) ; }
public void onReceive ( Context context , Intent intent ) { Commander . stopWadb ( ) ; }
public void onItemClick ( AdapterView < ? > adapterView , View view , int position , long l ) { ProjectActivity . openIt ( getContext ( ) , adapterList . getItem ( position ) ) ; }
public void setData_updatesWidgetAnswer ( ) { GeoPointWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( answer . getDisplayText ( ) ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer . getDisplayText ( ) ) ; }
public int getNumRecords ( ) throws RecordStoreNotOpenException { if ( ! open ) { throw new RecordStoreNotOpenException ( ) ; } return size ; }
public static TLRPC . User getCurrentUser ( ) { synchronized ( sync ) { return currentUser ; } }
public void addMimeType ( ) throws ConversionException { boolean error = ZipWriter . addText ( ZipFileConstants . MIMETYPE , FileTypes . EPUB , true ) ; if ( error ) { throw new ConversionException ( ConversionStatus . CANNOT_WRITE_EPUB ) ; } }
public Uri getUri ( ) { if ( mCachedUri == null ) { mCachedUri = getCacheFileUri ( id ) ; } return mCachedUri ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : finish ( ) ; return true ; } return false ; }
private void bg2sFadeIn ( ) { aBg2s += 0 . 01 ; if ( a >= 1 ) { a = 1 ; } bg2S . setAlpha ( a ) ; }
private WakeLock createDisplayWakeLock ( ) { return ( ( PowerManager ) Util . getSystemService ( this , Context . POWER_SERVICE ) ) . newWakeLock ( PowerManager . SCREEN_BRIGHT_WAKE_LOCK | PowerManager . ACQUIRE_CAUSES_WAKEUP , "simlar : D isplayWakeLock" ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mFragment = this ; setHasOptionsMenu ( true ) ; setRetainInstance ( false ) ; EventBus . getDefault ( ) . register ( this , 1 ) ; }
public void sendEditMessage ( String messageEditedToSend , String cookieListInAString ) { sendThisMessage ( messageEditedToSend , "http : }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeInt ( areaX ) ; dataOutputStream . writeInt ( areaZ ) ; dataOutputStream . writeInt ( ySection ) ; }
public long removeTrip ( String tripId ) { removeTripExpensesByTripId ( tripId ) ; return delete ( DatabaseConstants . TRIPS_MASTER_TABLE , TRIPS_MASTER_ID + " = ?" , new String [ ] { tripId } ) ; }
private void startService ( ) { Log . d ( TAG , "DownloadTimeTableWorker started ! " ) ; parser = new MGGParser ( ) ; updateData ( ) ; }
public void setSha1Sum ( String sum ) { this . sha1sum = sum ; }
public void onHorizontalSwipeEnd ( ) { if ( mSwipeOverlay != null ) { mSwipeOverlay . onSwipeEnd ( ) ; } }
public void onClick ( View v ) { Intent i = new Intent ( mContext , Profile . class ) ; i . putExtra ( "profile" , submission . getAuthor ( ) ) ; mContext . startActivity ( i ) ; }
public static PanZoom attach ( XYPlot plot ) { return attach ( plot , Pan . BOTH , Zoom . SCALE ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; albumResultFragmentPresenter . addOnSearchBarTextChangedListener ( mainActivity ) ; mainActivity . getSearchBar ( ) . setIconified ( false ) ; }
public int addTrack ( MediaFormat mediaFormat , boolean isAudio ) throws Exception { tracks . add ( new Track ( tracks . size ( ) , mediaFormat , isAudio ) ) ; return tracks . size ( ) - 1 ; }
public void makeEventSort_WhenSortTypeLatestDate_ReturnCorrectComparator ( ) { Comparator < EventSortable > sut = EventSortFactory . makeEventSort ( SortType . LATEST_DATE ) ; int result = sut . compare ( event2 , event1 ) ; assertThat ( result , lessThan ( 0 ) ) ; }
public static String getAllTags ( ) { return "string , b , u , s , i , mod , spoiler , code , img , quote , url , list , table , m" ; }
public void setItems ( List < Item > items ) { this . _items = items ; }
public void setExchangeRateHints ( @ Nullable final Value primaryAmount ) { if ( exchangeRate != null ) { coinAmountView . setHint ( primaryAmount ) ; localAmountView . setHint ( exchangeRate . convert ( primaryAmount ) ) ; } }
private OIDCatalog ( Context context , MibCatalogManager mibCatalogManager ) { this . mibCatalogManager = mibCatalogManager ; initData ( ) ; }
public String name ( ) { return isKnown ( ) ? name : Utils . format ( Game . getVar ( R . string . Potion_Name ) , color ) ; }
public void donneesAuthentificationValidesAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < Boolean > ( ) { public Boolean Func ( ) throws java . lang . Exception { return donneesAuthentificationValides ( codeAccesUniversel , motPasse ) ; } } ) ; }
public static void disableSmartToast ( @ NonNull SmartToastType type ) { AppPrefs . setInt ( type . shownKey , MAX_TIMES_TO_SHOW_TOAST ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "autounflag" , checked ) . apply ( ) ; }
public SensorData ( int sensorType , Point3D v , long t ) { this ( sensorType , v , t , - 1 . 0 , - 1 . 0 , - 1 . 0 , - 1 , - 1 ) ; }
public void clickingMounts ( MenuItem item ) { Intent intent = new Intent ( NavD . this , Mounts . class ) ; startActivity ( intent ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_profile , menu ) ; return true ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mRecyclerView . setAdapter ( getBlogAdapter ( ) ) ; refresh ( ) ; }
public void searchForContextBotForNextOffset ( ) { if ( contextQueryReqid != 0 || nextQueryOffset == null || nextQueryOffset . length ( ) == 0 || foundContextBot == null || searchingContextQuery == null ) { return ; } searchForContextBotResults ( foundContextBot , searchingContextQuery , nextQueryOffset ) ; }
public boolean isViewFromObject ( View view , Object object ) { return view . equals ( object ) ; }
public EighthActivityBuilder cancelled ( boolean cancelled ) { this . cancelled = cancelled ; return this ; }
public void cancel ( OCUpload storedUpload ) { cancel ( storedUpload . getAccountName ( ) , storedUpload . getRemotePath ( ) ) ; }
public static MoviesRemoteDataSource provideMoviesRemoteDataSource ( ) { MovieApiService apiService = ApiClient . getInstance ( ) ; AppExecutors executors = AppExecutors . getInstance ( ) ; return MoviesRemoteDataSource . getInstance ( apiService , executors ) ; }
private void requestNewInterstitial ( ) { AdRequest adRequest = new AdRequest . Builder ( ) . build ( ) ; mInterstitialAd . loadAd ( adRequest ) ; }
public void setup ( WelcomeScreenConfiguration config ) { super . setup ( config ) ; this . shouldShow = config . getShowPrevButton ( ) ; }
public ItemDraggableRange onGetChildItemDraggableRange ( MyChildViewHolder holder , int groupPosition , int childPosition ) { return null ; }
public void notifyClear ( ) { for ( DAO dao : this . daoList ) { dao . deleteAll ( ) ; } }
public static int getConcurrentSoundCount ( int type ) { return 0 ; }
public void onStart ( ) { super . onStart ( ) ; initDone = 0 ; reloadPreferences ( ) ; registerNetwork ( ) ; }
public void onStartLoadingMusic ( int episodeId ) { updateUI ( ) ; }
public int hashCode ( ) { return username . toLowerCase ( ) . hashCode ( ) ; }
private void cancelRide ( ) { MotoScoreApp . db . removeRide ( rideId ) ; rideId = 0 ; Toast . makeText ( getApplicationContext ( ) , R . string . error_missing_permissions , Toast . LENGTH_LONG ) . show ( ) ; }
private void startPreferencesActivity ( ) { Logger . d ( TAG , "Starting Settings Activity" ) ; Intent intent = new Intent ( this , ScanPreferencesActivity . class ) ; startActivityForResult ( intent , RESULT_SETTINGS ) ; }
public boolean isBeta ( ) { return true ; }
public static Day createDayIfDoesNotExist ( final String dateString ) { return createDayIfDoesNotExist ( getByDate ( dateString ) ) ; }
public void opensPgeSettingsHelp ( ) { tester . openSettings ( ) . pickProvider ( Provider . PGE ) . openHelp ( ) . clickOk ( ) ; }
public Map < String , Object > asPropertyMap ( ) { Map < String , Object > properties = new HashMap <> ( ) ; properties . put ( "source" , name ( ) . toLowerCase ( ) ) ; return properties ; }
public void setLongitudePattern ( final String longitudePattern ) { this . longitudePattern = longitudePattern == null ? EMPTY_FORMULA : DegreeFormula . compile ( longitudePattern ) ; }
private String setMaterialScrewString ( String s , boolean ignore ) { if ( Integer . parseInt ( s ) == - 1 ) return "?" ; else if ( ignore && Integer . parseInt ( s ) == 0 ) return " - " ; else return s ; }
public boolean onQueryTextSubmit ( String s ) { if ( ! parserMaker . isRunning ( ) ) { newsAdapter . filter ( s ) ; return true ; } else { return false ; } }
public com . google . protobuf . Any getClientState ( ) { if ( clientStateBuilder_ == null ) { return clientState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : clientState_ ; } else { return clientStateBuilder_ . getMessage ( ) ; } }
public void destroyItem ( ViewGroup container , int position , Object object ) { mFragmentMap . remove ( getItemKey ( position ) ) ; super . destroyItem ( container , position , object ) ; }
private Drawable getLoadingVideoPlaceholder ( ) { if ( loadingVideoPlaceholder != null ) { return loadingVideoPlaceholder ; } Drawable defaultLoadingImagePlaceholder = getResources ( ) . getDrawable ( R . drawable . ic_gridicons_video_camera ) ; defaultLoadingImagePlaceholder . setBounds ( 0 , 0 , DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP , DEFAULT_MEDIA_PLACEHOLDER_DIMENSION_DP ) ; return defaultLoadingImagePlaceholder ; }
public int getTranslationTextSize ( ) { return mPrefs . getInt ( Constants . PREF_TRANSLATION_TEXT_SIZE , Constants . DEFAULT_TEXT_SIZE ) ; }
public void setUserId ( String userId ) { this . userId = userId ; }
public DividerItemDecoration ( Context context ) { mDivider = context . getResources ( ) . getDrawable ( R . drawable . line_divider ) ; }
public CheapSoundFile create ( ) { return new CheapAAC ( ) ; }
public SelectSubreddit ( ) { }
private void scrollToLastSeenPosition ( final int lastSeenPosition ) { if ( lastSeenPosition > 0 ) { Util . runOnMain ( ( ) -> ( ( LinearLayoutManager ) list . getLayoutManager ( ) ) . scrollToPositionWithOffset ( lastSeenPosition , list . getHeight ( ) ) ) ; } }
public void onProductPurchased ( String productId , TransactionDetails details ) { loadSkuDetails ( ) ; Toast . makeText ( getContext ( ) , R . string . thank_you , Toast . LENGTH_SHORT ) . show ( ) ; }
public void reconnect ( MainActivityC activity ) { mainActivity = activity ; Timber . d ( "reconnect" ) ; }
public void testSafeToAddAuthToken24 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( notWpcomAddress3 ) ) ) ; }
public com . google . protobuf . Any getAccount ( ) { if ( accountBuilder_ == null ) { return account_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : account_ ; } else { return accountBuilder_ . getMessage ( ) ; } }
private void showInfoSnackbar ( String text ) { View bottomView = findViewById ( R . id . layout_bottom ) ; WPSnackbar snackbar = WPSnackbar . make ( bottomView , text , Snackbar . LENGTH_LONG ) ; snackbar . setAnchorView ( bottomView ) ; snackbar . show ( ) ; }
public boolean onCheckCanStartDrag ( MyViewHolder holder , int position , int x , int y ) { return ViewUtils . hitTest ( holder . dragHandle , x , y ) ; }
private LinearLayout getLayoutWithTag ( final String tag ) { LinearLayout retValue = ( LinearLayout ) layout . findViewWithTag ( tag ) ; if ( retValue != null ) { retValue . setTag ( null ) ; } return retValue ; }
public void setRates ( HashMap < String , Double > rates ) { this . rates = rates ; }
public void w ( String tag , String message , Object . . . args ) { HyperLog . w ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public Double getSunriseTime ( ) { return sunriseTime ; }
public Jid getJid ( ) { try { return this . jid == null ? null : Jid . fromString ( this . jid . toLowerCase ( ) ) ; } catch ( InvalidJidException e ) { return null ; } }
public String getFullInfo ( ) { return localizationHelper . formatPlaceInfo ( this ) ; }
public void onBackPressed ( ) { finish ( ) ; LActivityUtil . tranIn ( getActivity ( ) ) ; }
public void onAnimationEnd ( Animator animation ) { super . onAnimationEnd ( animation ) ; search . setVisibility ( View . VISIBLE ) ; }
public void onGroupExpand ( int groupPosition ) { if ( groupPosition != previousItem ) listView . collapseGroup ( previousItem ) ; previousItem = groupPosition ; }
public void setProgressBackgroundTintMode ( @ Nullable PorterDuff . Mode tintMode ) { logProgressBarTintWarning ( ) ; super . setProgressBackgroundTintMode ( tintMode ) ; }
public void fail ( Throwable t ) { BUS . post ( new RepositoryDownloadFailedEvent ( t ) ) ; }
public void setContentView ( @ LayoutRes int _layoutResID ) { getDelegate ( ) . setContentView ( _layoutResID ) ; }
private void updateCheckTime ( ) { mAutoUpdatePreference . setSummary ( getString ( R . string . pref_auto_update_check_time , SettingUtils . getAutomaticUpdateInterval ( getActivity ( ) ) ) ) ; }
public AppManager ( Context context , LoaderManager loaderManager ) { super ( context , loaderManager ) ; loaderManager . initLoader ( LoaderUtils . APP_LOADER , null , this ) ; }
private void onMenuReply ( TupleMessageEx message , String action ) { Intent reply = new Intent ( context , ActivityCompose . class ) . putExtra ( "action" , action ) . putExtra ( "reference" , message . id ) ; Helper . startActivity ( context , reply ) ; }
public void surfaceDestroyed ( SurfaceHolder holder ) { Log . v ( "SDL" , "surfaceDestroyed ( ) " ) ; SDLActivity . mNextNativeState = SDLActivity . NativeState . PAUSED ; SDLActivity . handleNativeState ( ) ; SDLActivity . mIsSurfaceReady = false ; SDLActivity . onNativeSurfaceDestroyed ( ) ; }
private void initializeHelpWithTranslationButton ( ) { findPreference ( getString ( R . string . key_help_with_translation ) ) . setOnPreferenceClickListener ( preference -> { WebTools . openWebLink ( context , context . getString ( R . string . web_link_help_with_translation ) ) ; return false ; } ) ; }
public int getRevPerDay ( ) { return revPerDay ; }
private GDBList ( ) { _Items = new LinkedList < GDBInfo > ( ) ; }
public void run ( ) { DefaultDrinkDatabase . createDefaultDatabase ( parent , parent . getDBAdapter ( ) , true ) ; }
public CompoundItem ( String stringPart , Image imagePart ) { this . stringPart = stringPart ; this . imagePart = imagePart ; }
public void setOnItemClickListener ( RecyclerOnItemClickListener onItemClickListener ) { this . onItemClickListener = onItemClickListener ; }
public void run ( ) { status . setText ( R . string . starting ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( mDiscovery == null ) { mDiscovery = new ServerDiscovery ( mSystemService ) ; } }
public void onStatsChanged ( MapIndex . IndexStats stats ) { update ( ) ; }
public void testGetPlateMatchingPatternFullPlate ( ) { String plateToFind = "KK" ; Place malbork = createPlaceWithPlates ( "KR" , plateToFind , "KM" ) ; LicensePlate plate = malbork . getPlateMatchingPattern ( plateToFind ) ; assertEquals ( plateToFind , plate . getPattern ( ) ) ; }
public ThreadDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public Editor remove ( final String key ) { newValuesMap . put ( key , this ) ; return this ; }
public void onSurfaceChanged ( GL10 gl , int width , int height ) { JNI . onGlSurfaceChanged ( width , height ) ; }
private void _repeatStep ( Card card , JSONObject conf ) { int delay = _delayForRepeatingGrade ( conf , card . getLeft ( ) ) ; _rescheduleLrnCard ( card , conf , delay ) ; }
public final void setX ( int v ) { this . _x = v ; }
public static Message getMessageFromIntent ( final Intent intent ) { return intent . getParcelableExtra ( KEY_MESSAGE ) ; }
public static void logException ( Exception e ) { logException ( LogLevel . ERROR , null , e ) ; }
public LiveData < ContactEntity > getObservableContact ( ) { return mObservableContact ; }
public void setSymbol ( String symbol ) { symbolView . setText ( symbol ) ; }
public void onItemSelected ( AdapterView < ? > adapterView , View view , int i , long l ) { color = WidgetUtils . getDrawable ( i ) ; binding . widgetBg . setBackgroundResource ( color ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( voter ) ; dest . writeInt ( percent ) ; dest . writeString ( reputation ) ; dest . writeString ( voteTime ) ; }
public SummitEvent2EventDetailDTO ( ) { presentationSpeaker2PersonListIemDTO = new PresentationSpeaker2PersonListIemDTO ( ) ; video2VideoDTO = new AbstractPresentationVideo2VideoDTO < PresentationVideo > ( ) ; }
public void failedActivity ( ) { Util . makeToast ( this , "회원정보가 없습니다 . 회원가입 해주세요 ! " ) ; progressBar . setVisibility ( View . GONE ) ; }
public LocationSlide ( @ NonNull Context context , @ NonNull Uri uri , long size , @ NonNull SignalPlace place ) { super ( context , uri , size ) ; this . place = place ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `level` INTEGER NOT NULL DEFAULT 0" ) ; }
public boolean isSelectable ( ) { return ( goAction != null || nextWindow != null || hasSubItems ( ) || node != null ) ; }
public IPresenterFactory < CommunityBlacklistPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new CommunityBlacklistPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , getArguments ( ) . getInt ( Extra . GROUP_ID ) , saveInstanceState ) ; }
private BroadcastReceiver finishReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { finish ( ) ; } } ;
public QuranRow getQuranRow ( int position ) { return mElements [ position ] ; }
public static byte [ ] decodeBase64 ( String s ) { try { return Base64 . decode ( s . toCharArray ( ) ) ; } catch ( Exception ex ) { addLog ( ex ) ; } return null ; }
public void stop ( ) { sendMessage ( What . STOP , 0 , 0 , null ) ; }
public void onDependentViewRemoved ( CoordinatorLayout parent , RelativeLayout child , View dependency ) { if ( dependency instanceof Snackbar . SnackbarLayout ) { ViewCompat . animate ( child ) . translationY ( 0 . 0F ) . setInterpolator ( FAST_OUT_SLOW_IN_INTERPOLATOR ) . setListener ( null ) ; } }
public static boolean isAndroidN ( ) { return Build . VERSION . SDK_INT > Build . VERSION_CODES . M || Build . VERSION . CODENAME . equals ( "N" ) ; }
public InstagramAdapter ( ArrayList < Instagram . InstagramPost > posts ) { this . posts = posts ; }
public int getTestCaseNumber ( NumberType numberType ) { int n = 0 ; for ( TestScript ts : testScripts ) { n += ts . getTestCaseNumber ( numberType ) ; } return n ; }
public void didSelectWallpaper ( File file , Bitmap bitmap , boolean gallery ) { Theme . setThemeWallpaper ( themeName , bitmap , file ) ; }
public void onClick ( View view ) { mainActivity . onSearchRequested ( ) ; }
public void removeForm ( String formLabel ) { forms . removeIf ( formManifestEntry -> formManifestEntry . getFormLabel ( ) . equals ( formLabel ) ) ; }
private Payload doOneInBackground ( Payload data ) { switch ( data . taskType ) { case LOGIN : return doInBackgroundLogin ( data ) ; case SYNC : return doInBackgroundSync ( data ) ; default : return null ; } }
private List < PopupKeyCandidate > getCandidatesForGA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "k" ) ) ; return candidates ; }
public RequestInterceptor provideRequestInterceptor ( ConnectivityManager connectivityManager ) { return new HeliumRequestInterceptor ( connectivityManager ) ; }
public void removeButton ( int id ) throws IOException { mClientHandlerFactory . removeButton ( id ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; setCancelable ( false ) ; setStyle ( AppCompatDialogFragment . STYLE_NO_TITLE , 0 ) ; }
public Class < ? extends Activity > getCallActivity ( ) { return mCallActivity ; }
public void run ( ) { contactsByPhone = contactsByPhonesDictFinal ; }
public RuntimeExceptionDao < PersonEntity , String > getPersonSimpleDataDao ( ) { if ( simpleRuntimePersonDao == null ) { simpleRuntimePersonDao = getRuntimeExceptionDao ( PersonEntity . class ) ; } return simpleRuntimePersonDao ; }
public void setVisibility ( int visibility ) { super . setVisibility ( visibility ) ; getFab ( ) . setVisibility ( visibility ) ; if ( isLabelEnable ( ) ) { getLabelBackground ( ) . setVisibility ( visibility ) ; } }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return "Organisers" ; case 1 : return "Captains" ; } return null ; }
public boolean onNavigationItemSelected ( MenuItem item ) { return displayFragment ( item . getItemId ( ) ) ; }
private boolean doesCourseExistInJson ( MoodleCourse course ) { return courses . contains ( course ) ; }
public static PendingIntent getAlarmIntent ( Context context ) { Intent intent = new Intent ( context , AlarmReceiver . class ) ; return PendingIntent . getBroadcast ( context , 0 , intent , 0 ) ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; lastTranslatedWordsDatabase . deleteAllData ( "words" ) ; lastTranslatedWordsDatabase . close ( ) ; appPrefsEditor . putBoolean ( "isHistoryCleared" , true ) ; appPrefsEditor . apply ( ) ; }
public static ImageInfo . MediaType readNullableImageInfoMediaType ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) return null ; return ImageInfo . MediaType . valueOf ( in . readString ( ) ) ; }
public Map < String , String > getCookies ( ) { return cookies ; }
public static synchronized DebuggingPreferencesDataStore getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new DebuggingPreferencesDataStore ( context . getApplicationContext ( ) ) ; } return mInstance ; }
public AudioHelper create ( Context context ) { ScreenContext screenContext = ( ScreenContext ) context ; return new AudioHelper ( screenContext . getActivity ( ) , screenContext . getViewLifecycle ( ) ) ; }
public Uri getPhotoUri ( ) { if ( mCurrentCallerInfo != null ) { return ContentUris . withAppendedId ( People . CONTENT_URI , mCurrentCallerInfo . person_id ) ; } return null ; }
public List < Cluster > fire ( ) { if ( isV3Api ) { return mapToEntities ( restClient . getClustersV3 ( ) ) ; } return mapToEntities ( restClient . getClustersV4 ( ) ) ; }
public MatrixAdapter ( Context context , int t , ArrayList < Matrix > matrices ) { super ( context , t , matrices ) ; }
public FingerprintDialog callback ( FingerprintDialogSecureCallback fingerprintDialogSecureCallback , String KEY_NAME ) { this . fingerprintDialogSecureCallback = fingerprintDialogSecureCallback ; this . fingerprintView . callback ( fingerprintSecureCallback , KEY_NAME ) ; return this ; }
public void onLongPress ( @ NonNull MotionEvent e ) { }
public static < T > Observable . Transformer < T , T > channel ( @ NonNull PublishSubject < T > target ) { return new ChannelTransformer <> ( target ) ; }
private DateTimeWidget createWidget ( FormEntryPrompt prompt ) { return new DateTimeWidget ( widgetActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) , widgetUtils ) ; }
private void resetAndFindNewRestaurant ( ) { if ( restaurantFetcher . getLocation ( ) == null ) { locationManager . fetchCurrentLocation ( ) ; } else { restaurant = null ; closingHourView . turnOnSkeletonLoading ( ) ; turnOnSkeletonLoading ( ) ; restaurantFetcher . fetchRestaurant ( ) ; } }
public static String getLocalisedSettingName ( String notLocalised ) { return Localization . get ( "settings . " + notLocalised ) ; }
public String getFeaturedImage ( ) { return StringUtils . notNullStr ( featuredImage ) ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { t . printStackTrace ( ) ; }
public static Jid getNullForInvalid ( Jid jid ) { if ( jid != null && jid instanceof InvalidJid ) { return null ; } else { return jid ; } }
public static AppSettings get ( ) { return new AppSettings ( App . get ( ) ) ; }
public void plusTextSize ( View v ) { webviewclient . plusTextSize ( ) ; }
public PostListingURL after ( String after ) { return new UnknownPostListURL ( uri . buildUpon ( ) . appendQueryParameter ( "after" , after ) . build ( ) ) ; }
public void setComics ( List < ComicVO > comics ) { mComics = comics ; }
public ArrayList < Song > getSongs ( Context context ) { return LastAddedLoader . getLastAddedSongs ( context ) ; }
public void setDelay ( int delay ) { this . delay = delay ; }
private final BroadcastReceiver becomingNoisyReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( intent . getAction ( ) . equals ( AudioManager . ACTION_AUDIO_BECOMING_NOISY ) ) { pause ( ) ; } } } ;
private ParseQuery < ParseObject > getQuery ( ) { ParseQuery < ParseObject > query = new ParseQuery < ParseObject > ( className ) ; query . whereEqualTo ( "objectId" , objectId ) ; return query ; }
public void onClicked ( final AppCompatActivity activity ) { LinkHandler . onLinkClicked ( activity , url , false ) ; }
public MaintenanceFragment ( ) { }
public PushTextSendJob ( Context context , long messageId , Address destination ) { super ( context , constructParameters ( context , destination ) ) ; this . messageId = messageId ; }
public void onClick ( View v ) { String geoName = detailPageAdapter . getGeoPackageName ( ) ; if ( geoName != null ) { createTilesOption ( geoName ) ; } alertDialog . dismiss ( ) ; }
private void loadKidData ( ) { mItemManager . getItem ( mItemId , new ItemResponseListener ( this ) ) ; }
public void migrate ( SupportSQLiteDatabase database ) { database . execSQL ( "ALTER TABLE 'product' ADD COLUMN 'barCode' TEXT NULL" ) ; }
public Ingredient ( float quantity , String measure , String ingredient ) { this . quantity = quantity ; this . measure = measure ; this . ingredient = ingredient ; }
public CandleEntry copy ( ) { CandleEntry c = new CandleEntry ( getXIndex ( ) , mShadowHigh , mShadowLow , mOpen , mClose , getData ( ) ) ; return c ; }
public void clear ( ) { data = new Object [ 0 ] ; index = - 1 ; }
public Integer deleteTask ( String taskID ) { SQLiteDatabase db = this . getWritableDatabase ( ) ; return db . delete ( TASK_TABLE , TASK_ID + " = ?" , new String [ ] { taskID } ) ; }
private void reload ( ) { if ( isNetworkAvailable ( ) ) { toggleNoInternetMessage ( false ) ; generator . setEmailAddress ( account . getEmail ( ) ) ; showAddressProgress ( ) ; } else { toggleNoInternetMessage ( true ) ; } }
public AudioPlayerCell ( Context context ) { super ( context ) ; radialProgress = new RadialProgress ( this ) ; TAG = MediaController . getInstance ( ) . generateObserverTag ( ) ; }
public boolean isLoading ( ) { return mArticlesView . isLoading ( ) ; }
public void addEnd ( Dictionary dictionary ) { dictionaries . add ( dictionaries . size ( ) , dictionary ) ; }
public void enableFlexboxLayout ( ) { setLayoutManager ( new FlexboxLayoutManager ( getContext ( ) ) ) ; }
public double getTemperature ( ) { for ( Measurement m : getMeasurements ( ) ) { if ( m . getType ( ) . equalsIgnoreCase ( MeasurementType . TEMPERATURE ) ) return m . getValue ( ) ; } return 0 ; }
private void serializeAlarm ( Context context , int notificationId ) { List < Integer > idsAlarms = getAlarmIds ( context ) ; if ( idsAlarms . contains ( notificationId ) ) return ; idsAlarms . add ( notificationId ) ; saveIdsInPreferences ( context , idsAlarms ) ; }
public void setGroupJid ( String groupJid ) { mGroupJid = groupJid ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new DiceViewModel ( diceVariant ) ; }
public SimpleXYSeries ( ArrayFormat format , String title , double . . . model ) { this ( asNumberList ( model ) , format , title ) ; }
public void onServiceConnected ( ) { super . onServiceConnected ( ) ; if ( mRootEverything != null ) mRootEverything . post ( ( ) -> handlePlaybackIntent ( getIntent ( ) ) ) ; }
public void onBindViewHolder ( EachItemHolder holder , int position ) { MealTimeItems item = mItems . get ( position ) ; holder . txt_label . setText ( item . getLabel ( ) ) ; }
public void setShare ( BigDecimal share ) { this . share = share ; }
public void onClick ( View v ) { songsManager . play ( 0 , songsManager . favouriteSongs ( ) ) ; }
public void testErrorValues ( ) throws Exception { MapLocationXY nullPos = coordinateService . convertLocationToXyPos ( null ) ; assertNull ( nullPos ) ; MapLocationGPS point = new MapLocationGPS ( 0 , 0 ) ; MapLocationXY emptyPos = coordinateService . convertLocationToXyPos ( point ) ; assertNotNull ( emptyPos ) ; }
public void onViewRecycled ( MyViewHolder holder ) { super . onViewRecycled ( holder ) ; holder . mContainer . setAlpha ( 1 . 0f ) ; }
public ContactField ( String id , String name , String field , Bitmap photo ) { super ( id , name , photo ) ; this . field = field ; }
public void setPhrase ( Phrase phrase ) { this . phrase = phrase ; }
public void onDirectionFailure ( Throwable t ) { Toast . makeText ( MainActivity . this , getText ( R . string . direction_failure ) , Toast . LENGTH_SHORT ) . show ( ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public void sendButtonPressed ( int index ) { if ( index < 0 || index >= botContextResults . size ( ) ) { return ; } sendBotInlineResult ( ( TLRPC . BotInlineResult ) botContextResults . get ( index ) ) ; }
public void actionButtonUploadCard ( View view ) { if ( Settings . getActiveSerialIOPort ( ) == null ) return ; ChameleonCommands . uploadCardImageByXModem ( ) ; }
public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( keyCode == KeyEvent . KEYCODE_BACK ) { ResourcesManager . getInstance ( ) . sceneService . getCurrentScene ( ) . onBackKeyPressed ( ) ; } return false ; }
public DB openCollectionDatabase ( String path ) { Backend . BackendError error = mock ( Backend . BackendError . class ) ; throw new BackendException . BackendDbException . BackendDbLockedException ( error ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_6 . getText ( ) . toString ( ) ) ; }
private int getCursorY ( float y ) { return ( int ) ( ( ( y - 40 ) / mRenderer . mFontLineSpacing ) + mTopRow ) ; }
public static int getCache ( Context context , String key , int defaultValue ) { SharedPreferences sp = context . getSharedPreferences ( TagsUtil . SHARED_PREFS_NAME , Context . MODE_PRIVATE ) ; return sp . getInt ( key , defaultValue ) ; }
public void openPoll ( int accoountId , @ NonNull Poll poll ) { PlaceFactory . getPollPlace ( accoountId , poll ) . tryOpenWith ( getActivity ( ) ) ; }
public static int colorByChangingHue ( int originalColor , float newHue ) { float [ ] hsv = ColorToHSV ( originalColor ) ; hsv [ 0 ] = newHue ; return HSVToColor ( alpha ( originalColor ) , hsv ) ; }
public IconStyleImageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
private void setPopupParent ( View v ) { mPopupParent = v ; }
public void setPeriodEnd ( Date d ) { this . periodEnd = d ; }
public Context getContext ( ) { return formLayout . getContext ( ) ; }
private void stopProgressTimer ( ) { synchronized ( progressTimerSync ) { if ( progressTimer != null ) { try { progressTimer . cancel ( ) ; progressTimer = null ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } } } }
public boolean shouldDetectSourceLanguage ( ) { return sourceLanguage . equals ( "auto" ) && detectedLanguage == null ; }
public void onFragmentInteraction ( Uri uri ) { }
public void setView ( @ NonNull HistoricalRecordListView view ) { this . viewListView = view ; }
private PersonDetailFragment getDetailFragment ( ) { return ( PersonDetailFragment ) getFragmentManager ( ) . findFragmentByTag ( KEY_PERSON_DETAIL_FRAGMENT ) ; }
public static void setUploadWifiOnlyMode ( Context context , boolean mode ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putBoolean ( PREFERENCES_TAG_UPLOAD_ONLY_WIFI , mode ) . commit ( ) ; }
public void onPause ( ) { super . onPause ( ) ; cleanupMedia ( ) ; }
public static Boolean getNewVersion ( Context context ) { int updateCode = SaveManager . get ( context ) . getIntValue ( ) . get ( SaveManager . updateVersion ) ; return UserInfo . versionCode <= updateCode && updateCode != 0 ; }
public LostAndFoundRecyclerAdapter ( Context context , OnItemSelectedListener listener ) { this . context = context ; callback = listener ; }
public int getTitleResId ( ) { return mTitleResId ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getTitle ( ) != null ) { if ( item . getTitle ( ) . equals ( "saveTrip" ) ) { addTrip ( ) ; } } return super . onOptionsItemSelected ( item ) ; }
public List < String > all ( ) { List < String > list = new ArrayList < String > ( ) ; list . addAll ( mTags . keySet ( ) ) ; return list ; }
private void setToolbarTitle ( CharSequence text ) { binding . toolbar . setTitle ( text ) ; }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { Intent mFragment = new Intent ( activity , ProfList . class ) ; mFragment . putExtra ( "dept" , position ) ; startActivity ( mFragment ) ; }
public boolean doingSomething ( ) { return ( curAnim != null && curAnim != idle && curAnim != run ) || isMoving ; }
public void v ( String tag , String message , Object . . . args ) { HyperLog . v ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public void setCrash ( boolean mCrash ) { this . mCrash = mCrash ; }
public OkDialog clickGetBlankFormWithError ( ) { onView ( withText ( getTranslatedString ( R . string . get_forms ) ) ) . perform ( scrollTo ( ) , click ( ) ) ; return new OkDialog ( rule ) . assertOnPage ( ) ; }
public Activity getContext ( ) { return context ; }
private void showUi ( ) { if ( bottomBar . getTranslationY ( ) != 0 ) { bottomBar . animate ( ) . setDuration ( 200 ) . translationY ( 0 ) . start ( ) ; } hideUi ( ) ; }
public ReplayFloatingActionButton ( Context context ) { super ( context ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { return MenuUtils . createOptionsMenu ( menu , this ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeTypedList ( this . techTeam ) ; dest . writeTypedList ( this . decoTeam ) ; dest . writeTypedList ( this . logisticsTeam ) ; }
private void setUpScrollView ( ) { scrollView . setScrollViewCallbacks ( observableScrollViewCallbacks ) ; }
public VH3TextIcon onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_3_text_icon , parent , false ) ; return new VH3TextIcon ( v ) ; }
private void ensureNumberOfColumnsIsValid ( int numberOfColumns ) throws UploadException { if ( numberOfColumns == 0 ) { throw new UploadException ( getLocalizedString ( Collect . getInstance ( ) , R . string . no_columns_to_upload ) ) ; } }
public int getChildSteps ( ) throws PersonDoesNotExistException { if ( this . isDemoMode ) { return 11000 ; } return this . getPersonTotalSteps ( Person . ROLE_CHILD ) ; }
public void setupViewPager ( ViewPager viewPager ) { ViewPagerAdapter adapter = new ViewPagerAdapter ( getSupportFragmentManager ( ) ) ; adapter . addFragment ( UsersAllFragment . newInstance ( ) , getString ( R . string . title_tab_users_all ) ) ; viewPager . setAdapter ( adapter ) ; }
private BookName ( String fileName , String name , Format format ) { mFileName = fileName ; mName = name ; mFormat = format ; }
public LiveData < List < WorkEntity >> getWorks ( ) { return mObservableProducts ; }
public void increaseCount ( OrderProduct orderProduct ) { repo . increaseCount ( orderProduct ) ; }
public void setItemAtPosition ( @ NonNull IDrawerItem drawerItem , int position ) { mDrawerBuilder . getAdapter ( ) . addDrawerItem ( position , drawerItem ) ; }
private void finish ( XMPPError . Condition errorCondition ) { finish ( null , null , errorCondition ) ; }
private void unregisterListener ( ) { mListener = null ; }
public EventBuilder setId ( String id ) { this . id = id ; return this ; }
private int findUploadObjectIndex ( int id ) { return findIndexByPredicate ( entries , entry -> { AbsModel model = entry . getAttachment ( ) ; return model instanceof UploadObject && ( ( UploadObject ) model ) . getId ( ) == id ; } ) ; }
public void onShareActionProviderSubVisibilityChanged ( boolean visible ) { if ( visible ) { if ( mHideTimer != null ) mHideTimer . cancel ( ) ; } else { hide_actionbar ( ) ; } }
public static void kill_client_process ( ) { Log . d ( TAG , "Killing client process" ) ; Shell . SU . run ( Arrays . asList ( "kill - 9 `pgrep dhcp6c`" ) ) ; }
public BulkReadCardsThread getItem ( int i ) { return bulkReadCardsServiceBinder . getThreads ( ) . get ( i ) ; }
public static String getFilePrefix ( String fileName ) { String prefix = fileName ; int index = fileName . indexOf ( " . " ) ; if ( index != - 1 ) { prefix = fileName . substring ( 0 , index ) ; } return prefix ; }
public void join ( Activity activity , int msgId ) { ApplicationDcContext dcContext = DcHelper . getContext ( activity ) ; DcMsg dcMsg = dcContext . getMsg ( msgId ) ; String videochatUrl = dcMsg . getVideochatUrl ( ) ; IntentUtils . showBrowserIntent ( activity , videochatUrl ) ; }
public void deleteAppMessagesTest ( ) { Integer id = null ; }
public void onStop ( ) { stopped = true ; isHeld = false ; }
public void run ( ) { Server . loginUser ( getActivity ( ) . getApplicationContext ( ) ) ; ; }
public String toString ( ) { return "BirthdayEvent { " + "id = " + id + " , title = '" + title + '\'' + " , startDate = " + startDate + " , color = " + color + ' } ' ; }
public void getUnformattedCustomMediaUrlWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "1" ) ; setCustomMediaServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public static void openIt ( Context context , String host ) { Intent intent = new Intent ( context , LocationHistoryActivity . class ) ; intent . putExtra ( INTENT_LOCATION , host ) ; context . startActivity ( intent ) ; }
public PgpDecryptionService getPgpDecryptionService ( ) { return pgpDecryptionService ; }
public void onFailure ( Call < Upload . UploadRespond > call , Throwable t ) { dismiss ( ) ; Log . i ( TAG , t . getLocalizedMessage ( ) ) ; }
public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList <> ( ) ; } mListeners . add ( listener ) ; }
public void getPluginConfigTest ( ) { Integer id = null ; }
public TetroidFile ( boolean isCrypted , String id , String name , String fileType , TetroidRecord record ) { super ( FoundType . TYPE_FILE , isCrypted , id , name ) ; this . fileType = fileType ; this . record = record ; }
public DrawerBuilder withStickyHeader ( View stickyHeader ) { this . mStickyHeaderView = stickyHeader ; return this ; }
public void onClick ( DialogInterface dialogInterface , int i ) { NetworkConnection . getInstance ( ) . set_avatar ( avatarToDelete . orgId , null , null ) ; }
public void setApparentTemperatureMaxTime ( Double apparentTemperatureMaxTime ) { this . apparentTemperatureMaxTime = apparentTemperatureMaxTime ; }
private void setHeading ( String heading ) { mHeadingTextView . setText ( heading ) ; mHeadingTextView . setVisibility ( TextUtils . isEmpty ( heading ) ? GONE : VISIBLE ) ; }
public void setAnnualInterestRate ( Integer annualInterestRate ) { this . annualInterestRate = annualInterestRate ; }
public void onPushSuccess ( ) { Log . i ( TAG , "set bitmap length successfull" ) ; }
public boolean setFirstRun ( Boolean flag ) { SharedPreferences . Editor editor = sharedPref . edit ( ) ; editor . putBoolean ( this . mContext . getString ( R . string . first_run_status ) , flag ) ; editor . commit ( ) ; return flag ; }
public void testJoinWithSpecialCharacters ( ) throws JSONException { JSONArray array = new JSONArray ( Arrays . asList ( 5 , 6 ) ) ; assertEquals ( "5\"6" , array . join ( "\"" ) ) ; }
public java . util . List < com . google . protobuf . Any > getExtensionOptionsList ( ) { if ( extensionOptionsBuilder_ == null ) { return java . util . Collections . unmodifiableList ( extensionOptions_ ) ; } else { return extensionOptionsBuilder_ . getMessageList ( ) ; } }
public void setActionValue ( int actionValue ) { this . _actionValue = actionValue ; }
public void onError ( Throwable throwable ) { subscriber . onError ( throwable ) ; Log . d ( LogTag . LOG_PLAYER_SERVICE , "Could not initialize Spotify Player : " + throwable . getMessage ( ) ) ; stopSelf ( ) ; }
public void setProducts ( List < StockProduct > products ) { this . products = new ArrayList <> ( products ) ; productsFull = new ArrayList <> ( products ) ; notifyDataSetChanged ( ) ; }
public boolean isListeningForAyahSelection ( EventType eventType ) { return eventType == EventType . LONG_PRESS || eventType == EventType . SINGLE_TAP && isInAyahMode ; }
public AboutBuilder setName ( @ Nullable String text ) { this . name = text ; return this ; }
public TimerHandler ( @ NonNull final DrawingProxy ownerInstance , final int ignoreAltCodeKeyTimeout ) { super ( ownerInstance ) ; mIgnoreAltCodeKeyTimeout = ignoreAltCodeKeyTimeout ; }
public void tearDown ( ) throws Exception { MockCalendarContentProvider . tearDown ( ) ; factory . reset ( ) ; }
public static Boolean isGrblVersionString ( final String response ) { Boolean version = response . toLowerCase ( ) . startsWith ( "grbl " ) ; return version && ( getVersionDouble ( response ) != - 1 ) ; }
public boolean touchDragged ( int screenX , int screenY , int pointer ) { return false ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( SAVE_MESSAGE_SHOWED , messageShowedStatus ) ; }
public boolean starAuthOperation ( ) { mRfidDevice . mRx000Device . setPwrManagementMode ( false ) ; return mRfidDevice . mRx000Device . sendHostRegRequestHST_CMD ( HostCommands . CMD_AUTHENTICATE ) ; }
public void onClick ( View v ) { new OpenRedditLink ( mContext , comment . getSubmissionId ( ) , comment . getSubredditName ( ) , comment . getId ( ) ) ; }
public CreateNewClientFragmentTest ( ) { super ( DashboardFragmentActivity . class ) ; }
public static OpenWeatherDataWind fromString ( String value ) { Type listType = new TypeToken < OpenWeatherDataMain > ( ) { } . getType ( ) ; return new Gson ( ) . fromJson ( value , listType ) ; }
public com . google . protobuf . Any . Builder getAccountBuilder ( ) { onChanged ( ) ; return getAccountFieldBuilder ( ) . getBuilder ( ) ; }
public int getCount ( ) { if ( mDebateManager == null ) return 1 ; else return mDebateManager . getNumberOfPhases ( ) ; }
public String getApkCertificateDigestSha256 ( ) { return apkCertificateDigestSha256 ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; EntityAccount account = items . get ( position ) ; holder . bindTo ( account ) ; holder . wire ( ) ; }
public static void rescheduleAll ( ) { OneTimeWorkRequest work = new OneTimeWorkRequest . Builder ( RescheduleAllWorker . class ) . addTag ( TAG_WORKS_RESCHEDULE_TYPE ) . build ( ) ; WorkManager . getInstance ( ) . enqueue ( work ) ; }
public SparseServers process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return new SparseServers ( obj . getJSONArray ( "result" ) ) ; }
public AboutBuilder addGoogleGamesLink ( int url ) { return addGoogleGamesLink ( context . getString ( url ) ) ; }
public void onFailed ( String msg ) { mView . onGetMoreTopicFailed ( msg ) ; }
public DataSource createDataSource ( ) { return new IcyDataSource ( userAgent , null , playerCallback ) ; }
public ReadLog ( long date , String strDate , List < Integer > pages ) { this . date = date ; this . strDate = strDate ; this . pages = pages ; }
public void run ( ) { info . about = about ; MessagesStorage . getInstance ( ) . updateChatInfo ( info , false ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , info , 0 , false ) ; }
public void onRedditAccountChanged ( ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) -> rv . setAdapter ( new AccountListAdapter ( mActivity , AccountListDialog . this ) ) ) ; }
public static QuranRow fromBookmark ( Context context , Bookmark bookmark ) { return fromBookmark ( context , bookmark , null ) ; }
private void updateRecyclerView ( ) { Log . d ( "DEBUG" , "updateRecyclerView" ) ; loadRecyclerViewState ( ) ; adapter . update ( ) ; }
public void cancelPendingRequests ( Object tag ) { if ( queue != null ) { queue . cancelAll ( tag ) ; } }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . LOG_2 ) ; }
public void addItem ( FileAudioModel name , int position ) { this . files . add ( position , name ) ; this . notifyItemInserted ( position ) ; }
public void testValidateInputSuccessWithEmail ( ) throws Throwable { assertThat ( validateInput ( "user" , "password" , "password" , "test @ example . com" ) , is ( ValidateResult . SUCCESS ) ) ; }
public void inject ( SupplierComponent tripComponent ) { tripComponent . inject ( this ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; ButterKnife . bind ( this , view ) ; setUpMusicControllers ( ) ; updateProgressTextColor ( ) ; }
public Address getAddress ( ) { return ( Address ) parameterMap . get ( FIELD_ADDRESS ) ; }
public static synchronized < T > T max ( Class < ? > modelClass , String columnName , Class < T > columnType ) { return max ( BaseUtility . changeCase ( DBUtility . getTableNameByClassName ( modelClass . getName ( ) ) ) , columnName , columnType ) ; }
public int getColumnCount ( int row ) { if ( row != getRowCount ( ) - 1 && row != getRowCount ( ) - 2 && row != 0 && row != 1 ) { return 3 ; } else { return 1 ; } }
public boolean hasInputId ( ) { return ( ( bitField0_ & 0x00000008 ) == 0x00000008 ) ; }
public void setSid ( int sid ) { mSid = sid ; }
public void onStopListening ( ) { Log . i ( Helper . TAG , "Stop tile synchronize" ) ; SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ; prefs . unregisterOnSharedPreferenceChangeListener ( this ) ; }
public String onArgNotFound ( ExecutePack pack ) { return null ; }
public void draw ( Canvas canvas ) { super . draw ( canvas ) ; if ( getAlpha ( ) != 0 ) { if ( drawRunnable != null ) { drawRunnable . run ( ) ; drawRunnable = null ; } } }
public void sendToken ( ) throws java . io . IOException { if ( ! stop && sip_provider != null ) { sip_provider . sendMessage ( message ) ; } }
public void cancel ( ) { isCanceled = true ; isRunning = false ; }
public XMLPrefsManager . XMLPrefsSave defaultParamReference ( ) { return Cmd . default_search ; }
public void onStop ( ) { super . onStop ( ) ; chats . removeAllChangeListeners ( ) ; myStatus . removeValue ( ) ; }
public ThemeListPreference ( final Context context ) { super ( context ) ; }
public void setFabActiveFromFirebaseHelper ( ) { Timber . d ( "setFabActiveFromFbHelper" ) ; if ( isPortrait ) { ( ( DetailActivity ) getActivity ( ) ) . setFabActive ( ) ; } else { setFabActive ( ) ; } }
private int calcInitBufCapacity ( int capacity ) { return ( int ) Math . floor ( capacity / 2 ) ; }
public com . google . protobuf . Any . Builder getUpgradedClientStateBuilder ( ) { onChanged ( ) ; return getUpgradedClientStateFieldBuilder ( ) . getBuilder ( ) ; }
public void onButtonStateChanged ( View v , int row , int index , boolean state ) { }
private void monitorRealtimeHeartRate ( ) { this . miBand . setHeartRateScanListener ( new HeartRateNotifyListener ( ) { @ Override public void onNotify ( int heartRate ) { Log . d ( "SWELL" , "Heart rate : " + heartRate ) ; } } ) ; }
public DemoViewHolder ( View view ) { super ( view ) ; textView = ( TextView ) view . findViewById ( R . id . textView ) ; }
public void stopListening ( ) { try { mContext . unregisterReceiver ( this ) ; } catch ( IllegalArgumentException e ) { mRemoteLogger . w ( "Trying to unregister ConnectivityManager . CONNECTIVITY_ACTION not registered . " ) ; } }
public void onClick ( DialogInterface dialog , int which ) { cb . onClosed ( ) ; }
public MarginValue defaultBottomMargin ( ) { return MarginValue . BELOW_NAVIGATION ; }
public com . google . protobuf . Any . Builder getPublicKeyBuilder ( ) { onChanged ( ) ; return getPublicKeyFieldBuilder ( ) . getBuilder ( ) ; }
public MyFilter getItem ( int position ) { return mList . get ( position ) ; }
private SimpleEvent msgSetString = new SimpleEvent ( ) { @ Override public void process ( ) { alertDialog . setMessage ( text ) ; } } ;
private void screenOff ( ) { if ( ! connected && ! notification ) { startNotification ( ) ; } }
public void updateViewPeriod ( ) { this . period = ( long ) ( 1000 * seriesSettings . getDouble ( "view_period" , ModelDefaults . LIVEPLOT_VIEW_PERIOD ) ) ; lock . lock ( ) ; removeOutstandingValues ( ) ; lock . unlock ( ) ; }
public Resources getResources ( ) { return res ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; onSearchListener = ( OnSearchListener ) context ; }
public void onActivityStarted ( Activity activity ) { runningActivity = activity ; }
public void disconnected ( Connection connection ) { Gdx . app . postRunnable ( new Runnable ( ) { @ Override public void run ( ) { _app . gotoErrorScreen ( "NOOO ! We lost contact with the host ! " ) ; } } ) ; }
public IBinder onBind ( Intent intent ) { Log . d ( TAG , "onBind ( ) " ) ; return mBinder ; }
public BuyItemSelector ( Shopkeeper shopkeeper ) { this . shopkeeper = shopkeeper ; }
public com . coinomi . core . protos . Protos . Transaction getTransaction ( int index ) { return transaction_ . get ( index ) ; }
public void refresh ( ) { if ( this . mModeState == ModeState . NTP ) { if ( this . mButtonState == ButtonState . STOP ) this . stopQRCodeGeneration ( ) ; this . setNTPMode ( ) ; } }
public Exception getError ( ) { return error ; }
public boolean onTouchEvent ( MotionEvent ev ) { switch ( ev . getAction ( ) ) { case MotionEvent . ACTION_DOWN : if ( mScrollable ) return super . onTouchEvent ( ev ) ; return mScrollable ; default : return super . onTouchEvent ( ev ) ; } }
public static boolean isPasswordDisabled ( Context context ) { return getBooleanPreference ( context , ApplicationPreferencesActivity . DISABLE_PASSPHRASE_PREF , false ) ; }
public AccountHeaderBuilder withOnAccountHeaderListener ( @ NonNull AccountHeader . OnAccountHeaderListener onAccountHeaderListener ) { this . mOnAccountHeaderListener = onAccountHeaderListener ; return this ; }
public TabWidthSpan ( int width ) { this . width = width ; }
public synchronized ArrayList < RedditAccount > getAccounts ( ) { if ( accountsCache == null ) { final SQLiteDatabase db = getReadableDatabase ( ) ; reloadAccounts ( db ) ; db . close ( ) ; } return new ArrayList < RedditAccount > ( accountsCache ) ; }
public int getPolygonCorners ( ) { return UNIT_SPRINTER_CORNERS ; }
public void testDefaultHeaderTypefacePath ( ) { builder . defaultHeaderTypefacePath ( "header" ) ; assertEquals ( "header" , builder . build ( ) . getDefaultHeaderTypefacePath ( ) ) ; }
public void onLeftHiddenState ( View child ) { final ViewHolder vh = getChildViewHolderInt ( child ) ; if ( vh != null ) { vh . onLeftHiddenState ( ) ; } }
public void editMeal ( @ NonNull Meal meal ) { Intent intent = new Intent ( activity , EditMealActivity . class ) ; intent . putExtra ( AddMealFragmentModule . EXTRA_MEAL_PARCEL , Parcels . wrap ( meal ) ) ; activity . startActivity ( intent ) ; }
public void setAnimationListener ( Animation . AnimationListener listener ) { mAnimationListener = listener ; }
public void initialize ( final StopsObserver observer ) { ui . stub . setOnLayoutInflatedListener ( new OnLayoutInflatedListener ( ) { @ Override public void onLayoutInflated ( WatchViewStub stub ) { ui . load ( ) ; onLoad ( observer ) ; } } ) ; }
public Builder clearVersion ( ) { bitField0_ = ( bitField0_ & ~0x00000001 ) ; version_ = 20 ; onChanged ( ) ; return this ; }
public static int getId ( ) { return notifId ; }
public void setRepeatMode ( @ RepeatMode int repeatMode ) { player . setRepeatMode ( repeatMode ) ; }
public AMPrefUtil ( Context context ) { settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; editor = settings . edit ( ) ; }
public void showUsedByWikiInfo ( ) { launchAlert ( getResources ( ) . getString ( R . string . images_used_by_wiki ) , getResources ( ) . getString ( R . string . images_used_explanation ) ) ; }
public void onSubscribe ( Disposable disposable ) { compositeDisposable . add ( disposable ) ; }
public void registerFavorite ( LightNovel . . . lightNovels ) { new FavoriteLNsAsyncTask ( lndb , ACTION . REGISTER_FAVORITE ) . execute ( lightNovels ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { listId = getArguments ( ) . getLong ( "list_id" , 0l ) ; return super . onCreateView ( inflater , container , savedInstanceState ) ; }
public void update ( Alarm alarm ) { mDataSource . update ( alarm ) ; dataSetChanged ( ) ; }
public void clear ( ) { topCountries . clear ( ) ; removeAllViews ( ) ; addView ( new SuperTextView ( getContext ( ) , R . string . noActivity ) ) ; }
private void removeAdvancePreference ( Preference preference ) { if ( preference != null ) { PreferenceGroup group = ( PreferenceGroup ) findPreference ( "pref_general" ) ; if ( group != null ) { group . removePreference ( preference ) ; } } }
public void link ( ConfigActivity configActivity ) { m_activity = configActivity ; }
private void decrementSelectedItemsCount ( ) { selectedItemsCount -- ; isSelectMode = selectedItemsCount > 0 ; notifySelectionChanged ( ) ; }
public void setExtraIngredient ( @ Nullable IngredientTemplate extraIngredient ) { this . extraIngredient = extraIngredient ; }
private boolean checkServiceOn ( ) { return isAccessibilityServiceEnabled ( getApplicationContext ( ) , OverlayAccessibilityService . class ) ; }
public boolean isBooleanType ( ) { switch ( this ) { case VariableTypeBoolean : case VariableTypeInteger : return true ; default : return false ; } }
private void onScheduleStart ( Intent data ) { int minutes = data . getIntExtra ( "minutes" , 0 ) ; tvScheduleStart . setTag ( minutes ) ; tvScheduleStart . setText ( formatHour ( getContext ( ) , minutes ) ) ; cbScheduleEnd . setChecked ( true ) ; }
public Drawable getDrawable ( int resId ) { return this . dialogFragment . getResources ( ) . getDrawable ( resId ) ; }
public static void storeDropboxToken ( String token ) { cSharedPreferences . edit ( ) . putString ( SP_DROPBOX_TOKEN , token ) . commit ( ) ; }
public void onClick ( View v ) { signMessage ( ) ; }
public void parse ( DataSource dataSource , ByteBuffer header , long contentSize , BoxParser boxParser ) throws IOException { }
public void setNode2 ( float node2 ) { this . node2 = node2 ; }
private static void UpdateMember ( MoodleMember old_member , MoodleMember new_member ) { old_member = new_member ; old_member . save ( ) ; }
public boolean pepOmemoWhitelisted ( ) { return hasDiscoFeature ( account . getJid ( ) . toBareJid ( ) , AxolotlService . PEP_OMEMO_WHITELISTED ) ; }
public void onDestroyView ( ) { if ( getActivity ( ) instanceof MainActivity ) ( ( MainActivity ) getActivity ( ) ) . removeMusicServiceEventListener ( this ) ; mSet = false ; mAdapter . destroy ( ) ; super . onDestroyView ( ) ; }
public void onBackPressed ( ) { mGame . popScreen ( ) ; }
public String getName ( ) { return "Autostart Single Result" ; }
public void close ( ) { try { windowManager . removeView ( windowView ) ; } catch ( Exception e ) { } parentSheet = null ; parentActivity = null ; }
private void setupMessageIcon ( ViewHolder holder ) { Picasso . with ( mContext ) . load ( R . drawable . ic_message_black_24dp ) . placeholder ( R . drawable . ic_message_black_24dp ) . into ( holder . mTranslationImageView ) ; }
public boolean hasRailcar ( ) { return ! TextUtils . isEmpty ( railcarJson ) ; }
public Intent getIntent ( ) throws CommandParseException { Intent intent = new Intent ( Intent . ACTION_SEARCH ) ; intent . putExtra ( SearchManager . QUERY , mCommand ) ; return intent ; }
public Point getPoint ( ) { return current ; }
public void testSkipButtonTypeface ( ) { builder . skipButtonTypefacePath ( "skipButton" ) ; assertEquals ( "skipButton" , builder . build ( ) . getSkipButtonTypefacePath ( ) ) ; }
public AxisProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public void setProgress ( float progress ) { mProgressDownloadView . setPercentage ( progress ) ; }
public < T1 > T1 [ ] toArray ( T1 [ ] a ) { return values . toArray ( a ) ; }
public MovieAdapter ( MainActivity activity ) { this . dataManager = new DataListManager <> ( this ) ; addDataManager ( dataManager ) ; registerBinder ( new MovieBinder ( activity , this ) ) ; }
public void onMainActionSelected ( ) { Intent intent = new Intent ( ListActivity . this , AddTextNoteFragment . class ) ; startActivityForResult ( intent , NOTE_VIEW_ACTIVITY_REQUEST_CODE ) ; }
public void onSuccess ( Location location ) { if ( location != null ) { mCurrentLocation = location ; } }
private void loadFile ( File file ) { webView . loadData ( "Loading " + file . getPath ( ) , "text/plain" , "utf - 8" ) ; new LoaderTask ( this , file ) . execute ( ) ; setAwake ( ) ; }
public void onSuccess ( Boolean aBoolean ) { bluetoothUtil . startScanning ( ) ; if ( App . INSTANCE . getSharedPreferences ( ) . isLoggingEnabled ( ) ) { startLocationScan ( ) ; } }
public void testEncodeIso88591WithSpecialChars ( ) throws Exception { PDF417HighLevelEncoder . encodeHighLevel ( "asdfg§asd" , Compaction . AUTO , StandardCharsets . ISO_8859_1 ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { return this . isSwipeEnabled && super . onInterceptTouchEvent ( event ) ; }
public static int countWholeMonth ( String from , String to ) { final double count = getMonthCount ( from , to ) ; final int wholeMonth = ( int ) count ; return wholeMonth + ( count - wholeMonth >= 0 . 5 ? 1 : 0 ) ; }
public com . google . protobuf . Any getUpgradedConsensusState ( ) { if ( upgradedConsensusStateBuilder_ == null ) { return upgradedConsensusState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : upgradedConsensusState_ ; } else { return upgradedConsensusStateBuilder_ . getMessage ( ) ; } }
public Computer createFromParcel ( Parcel in ) { return new Computer ( in ) ; }
public void setData_updatesWidgetAnswer ( ) { GeoShapeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( answer ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer ) ; }
public void onChanged ( FirebaseElement < ListDataSet < WalletEntry >> firebaseElement ) { if ( firebaseElement . hasNoError ( ) ) { ChartFragment . this . walletEntryListDataSet = firebaseElement . getElement ( ) ; dataUpdated ( ) ; } }
public void run ( ) { String result = Statusgo . login ( json ) ; callback . invoke ( result ) ; }
public TrackGroupArray getTrackGroups ( ) { return tracks ; }
public void init ( FilterConfig filterConfig ) throws ServletException { }
public int add ( T item ) { throwIfMerging ( ) ; return add ( item , true ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mContentView = null ; }
public String getLetter ( ) { return letter ; }
public ViewDataBinding onCreateBinding ( LayoutInflater inflater , @ LayoutRes int layoutId , ViewGroup viewGroup ) { return DataBindingUtil . inflate ( inflater , layoutId , viewGroup , false ) ; }
public void onSpringUpdate ( Spring spring ) { float value = ( float ) spring . getCurrentValue ( ) ; float scale = 1f - ( value * 0 . 5f ) ; lottieAnimationView . setScaleX ( scale ) ; lottieAnimationView . setScaleY ( scale ) ; }
public void onAnimationEnd ( Animator animation ) { mMoreButton . setRotation ( 0f ) ; }
public int getProgress ( ) { return ( int ) ( 100f * transferedBytes / totalBytes ) ; }
public ArticleTextExtractor addUnlikely ( String unlikelyMatches ) { return setUnlikely ( unlikelyStr + "|" + unlikelyMatches ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; MortarCalculatorApplication app = ( MortarCalculatorApplication ) getApplication ( ) ; app . removeAllMarkedAssignments ( ) ; }
public String getSessionActionLogString ( ) { return getSingleLineLogStringEntry ( "Session Action" , sessionAction , " - " ) ; }
public Schema call ( List < PresetSchema > presetSchemas , Version version ) { return new Schema ( presetSchemas . toArray ( new PresetSchema [ presetSchemas . size ( ) ] ) , version . getVersionCode ( ) ) ; }
public void delete ( int position ) { mDataSet . remove ( position ) ; notifyItemRemoved ( position ) ; }
public RRError ( String title , String message , Throwable t ) { this ( title , message , t , null ) ; }
public static RemoveFromPlaylistDialog create ( PlaylistSong song ) { ArrayList < PlaylistSong > list = new ArrayList <> ( ) ; list . add ( song ) ; return create ( list ) ; }
public StatisticsDTO loadInBackground ( ) { return statisticsService . getAll ( vehicleId ) ; }
private static void openSettings ( Context c ) { if ( settings == null ) { settings = c . getSharedPreferences ( pref_fname , 0 ) ; } }
public ArrayList < ChangeItem > getChanges ( ) { return changes ; }
private void hideListFragment ( ) { if ( getFragmentManager ( ) . getBackStackEntryCount ( ) > 0 ) { onBackPressed ( ) ; } }
public static void setOption ( int num ) { opcion = num ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_sort : moviesPresenter . setView ( this ) ; displaySortingOptions ( ) ; } return super . onOptionsItemSelected ( item ) ; }
public void run ( ) { try { onFinishLoadingFile ( ) ; } catch ( Exception e ) { onFail ( false , 0 ) ; } }
public boolean onQueryTextSubmit ( String query ) { AndroidUtils . executeSearch ( query , TorrentViewActivity . this , sessionInfo ) ; return true ; }
public PageContentsCreator ( Context context ) { this . context = context ; }
public EditorBottomSheet ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initialize ( ) ; }
public Point getPoint ( ) { return this . point ; }
private Cursor getBlotterForBudget ( long budgetId ) { Budget b = em . load ( Budget . class , budgetId ) ; String where = Budget . createWhere ( b , categories , projects ) ; return db . getBlotterWithSplits ( where ) ; }
public void onTerminate ( ) { super . onTerminate ( ) ; Log . d ( TAG , "finishing application" ) ; DatabaseHelper . closeDatabase ( ) ; subscriptions . unsubscribe ( ) ; }
public void addSyncs ( ArrayList < Sync > syncs ) { syncs . addAll ( syncs ) ; }
public static boolean isCurrentUserThePrimaryUser ( @ NonNull Context context ) { Long userId = getSerialNumberForCurrentUser ( context ) ; return userId != null && userId == 0 ; }
public static void runCommand ( Command command ) throws IOException , TimeoutException { Shell . startShell ( ) . add ( command ) ; }
private void onHelp ( TupleMessageEx message ) { Helper . viewFAQ ( context , 22 ) ; }
public void preVerifyFingerprint ( Account account , String fingerprint ) { axolotlStore . preVerifyFingerprint ( account , account . getJid ( ) . toBareJid ( ) . toPreppedString ( ) , fingerprint ) ; }
private void relic ( ) { relicRaise . setPower ( gamepad2 . right_stick_y / 4 ) ; if ( gamepad2 . right_bumper ) { relicClamp . setPosition ( 0 ) ; } if ( gamepad2 . left_bumper ) { relicClamp . setPosition ( . 7 ) ; } }
public int getUnitCost ( ) { return FACTORY_SPRINTER_UNIT_COST ; }
public PhotoSizeEntity setZ ( String z ) { this . z = z ; return this ; }
public void onResume ( ) { ad . resumeNativeAdView ( R . id . adView_about , a ) ; super . onResume ( ) ; }
public void onClick ( View v ) { Toast . makeText ( WrapperSampleActivity . this , labelFooter , Toast . LENGTH_SHORT ) . show ( ) ; }
private float convertPointerY ( float y ) { return ( y - onY ) * virtualHeight / onHeight ; }
private LocaleInfo getLanguageFromDict ( String key ) { if ( key == null ) { return null ; } return languagesDict . get ( key . toLowerCase ( ) . replace ( " - " , "_" ) ) ; }
public StatusOfApplicationViewModel ( DataManager dataManager , SchedulerProvider schedulerProvider ) { super ( dataManager , schedulerProvider ) ; modelLiveData = new MutableLiveData <> ( ) ; callApi ( ) ; }
public AlarmManager ( @ ForApplication Context context ) { alarmManager = ( android . app . AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ; }
public void onFailure ( @ NonNull Call call , @ NonNull IOException e ) { Logger . debug ( "checkServiceUpdate : failed to check for updates" ) ; updater . updateCheckFailed ( ) ; }
public boolean isReady ( ) { return loadingFinished || ( ! isPendingReset ( ) && ! sampleQueue . isEmpty ( ) ) ; }
public Network ( Context context ) { this . context = context ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ Nullable Intent intent ) { return addLink ( icon , label , util . clickIntent ( intent ) ) ; }
private void disableActivityAnimation ( ) { ActivityTransitionAnimation . slide ( this , ActivityTransitionAnimation . NONE ) ; }
public void onBackPressed ( ) { Intent i = new Intent ( this , MainActivity . class ) ; startActivity ( i ) ; finish ( ) ; }
public void dispatchFinished ( RemoveAnimationInfo info , RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchRemoveFinished ( " + item + " ) " ) ; } mItemAnimator . dispatchRemoveFinished ( item ) ; }
public void addVideoSink ( VideoSink sink ) { sendMessage ( What . ADD_VIDEO_SINK , 0 , 0 , sink ) ; }
public void clearSectionOffset ( ) { data . edit ( ) . remove ( SECTION_ID_OFFSET ) . apply ( ) ; }
public void recreateCursor ( ) { entities = loadEntities ( ) ; @ SuppressWarnings ( "unchecked" ) EntityListAdapter < T > a = ( EntityListAdapter < T > ) adapter ; a . setEntities ( entities ) ; }
public VersionInfo process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return new VersionInfo ( obj . getJSONObject ( "result" ) ) ; }
public PackageManager getPackageManager ( ) { return packageManager ; }
public void onClick ( DialogInterface dialog , int id ) { mListener . onDialogNegativeClick ( SetSeedDialogFragment . this ) ; }
public static String base64ToString ( byte [ ] data ) throws UnsupportedEncodingException { return new String ( Base64 . decode ( data , Base64 . DEFAULT ) ) ; }
private boolean isPersonDeviceHasBeenFound ( StorywellPerson storywellPerson ) { return this . foundBluetoothDeviceList . containsKey ( storywellPerson ) ; }
public int getItemCount ( ) { return pageItems . size ( ) ; }
public void setup ( WelcomeConfiguration config ) { for ( OnWelcomeScreenPageChangeListener changeListener : mItems ) { changeListener . setup ( config ) ; } }
public static boolean hasMultitouch ( ) { return Gdx . input . isPeripheralAvailable ( Input . Peripheral . MultitouchScreen ) || GamePlay . instance . alwaysShowTouchInput ; }
public static ChartView getPolyLineChartView ( Context context , LineChartSeries dataset , PolyLineChartRender renderer ) { PolyLineChart chart = new PolyLineChart ( dataset , renderer ) ; ChartView chartView = new ChartView ( context , chart ) ; return chartView ; }
public void act ( Mob me ) { script . run ( "act" , me ) ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Multiplicity_Txt ) , weaponName ) ; }
private void setUpRecyclerView ( ) { mEventListAdapter = new EventListAdapter ( getActivity ( ) , mEvents ) ; mEventListView . setHasFixedSize ( true ) ; mEventListView . setLayoutManager ( new LinearLayoutManager ( getActivity ( ) ) ) ; mEventListView . setAdapter ( mEventListAdapter ) ; }
public int getViewTypeCount ( ) { return 0 ; }
public void onLoaded ( List < Article > articles ) { view . showProgressIndicator ( false ) ; view . showArticles ( articles ) ; }
public void setMinFrameSmallerThanComposition ( ) { animator . setMinFrame ( - 9000 ) ; assertEquals ( animator . getMinFrame ( ) , composition . getStartFrame ( ) ) ; }
public void setGraphicBitmap ( Bitmap bitmap ) { graphicViev . setImageBitmap ( bitmap ) ; }
public boolean onTouch ( View view , MotionEvent motionEvent ) { return inputET . onTouchEvent ( motionEvent ) ; }
public long getEndFrame ( ) { return endFrame ; }
public void onFailure ( Call < Object > call , Throwable t ) { failedFeedback ( ) ; }
public void handleMessage ( Message msg ) { if ( msg . what == ReadThread . MSG_READ_OK ) { editor . replaceAll ( msg . obj . toString ( ) ) ; } }
public void broadcastTx ( AbstractTransaction tx ) throws IOException { throw new RuntimeException ( "Not implemented" ) ; }
public void onNext ( TaskModel taskModel ) { super . onNext ( taskModel ) ; onCreateTaskSuccessTracking ( taskModel ) ; onCreateTaskSuccess ( ) ; }
private BookmarkPresenter makeBookmarkPresenter ( BookmarkModel model ) { return new BookmarkPresenter ( appContext , model ) { @ Override void subscribeToChanges ( ) { } } ; }
public int getCameraFacing ( ) { return mFacing ; }
public MapFragment ( ) { }
public ArrayList < Song > getSavedPlayingQueue ( ) { return getQueue ( PLAYING_QUEUE_TABLE_NAME ) ; }
public void onReceive ( Context context , Intent intent ) { shouldCollapse = false ; if ( contextMenuFix ) U . startFreeformHack ( DashboardActivity . this , false , false ) ; finish ( ) ; }
public Script getDefaultInstanceForType ( ) { return defaultInstance ; }
public synchronized void onPostInit ( ) { for ( Widget w : getKeysAsList ( ) ) { w . onPostInit ( ) ; } }
public long onTimeShiftGetCurrentPosition ( ) { return mPlayer . getTimeshiftCurrentPosition ( ) ; }
public void acquire ( ) { mSensorManager . registerListener ( this , mSensorManager . getDefaultSensor ( Sensor . TYPE_PROXIMITY ) , SensorManager . SENSOR_DELAY_NORMAL ) ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( BookmarkImportExportModelTest . this ) ; bookmarkImportExportModel = new BookmarkImportExportModel ( context , new BookmarkJsonModel ( ) , bookmarkModel ) ; }
public void onRefreshFromMenuSelected ( ) { startMainParsingActivity ( ) ; }
public void testMinimalEncoder28 ( ) throws Exception { verifyMinimalEncoding ( "AB1234" , "ALPHANUMERIC ( AB1234 ) , TERMINATOR ( ) " , null , false ) ; }
public void previous ( ) { showLoading ( ) ; String word = service . getPreviuosWord ( ) ; refreshWord ( word ) ; }
public Boolean isOneWheelPlus ( ) { return mSharedPref . getBoolean ( ONE_WHEEL_PLUS , false ) ; }
public void showInstructions ( View view ) { setContentView ( R . layout . instructions ) ; findViewById ( R . id . back_button ) . setOnClickListener ( ( View v ) -> { showMain ( ) ; } ) ; }
public MyTarget ( View layout , int position ) { mLayout = new WeakReference <> ( layout ) ; mPosition = position ; }
public String getIconURL ( ) { return iconURL_ ; }
private void dataSetChanged ( ) { for ( int i = 0 ; i < mDataSource . size ( ) ; i ++ ) setAlarm ( mDataSource . get ( i ) ) ; notifyDataSetChanged ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . main_activity_menu , menu ) ; return true ; }
public static boolean isEnterImeKeyEnabled ( Context context ) { return getBooleanPreference ( context , ApplicationPreferencesActivity . ENTER_PRESENT_PREF , false ) ; }
public void onSaveInstanceState ( Bundle out ) { super . onSaveInstanceState ( out ) ; out . putBoolean ( "feedIsSelected" , m_feedIsSelected ) ; GlobalState . getInstance ( ) . save ( out ) ; }
public LowPower ( DataBundle dataBundle ) { this . dataBundle = dataBundle ; }
public void setTimeZone ( DateTimeZone timeZone ) { mTimeZone = timeZone ; setFormat ( ) ; updateClock ( ) ; }
public List < String > getMembers ( ) { return members ; }
public SliderViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new SliderViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . slider_view_item , parent , false ) ) ; }
public void request ( ) { if ( request != null ) request . cancel ( true ) ; request = new UpdateAppsAsync ( refApplication , helperStorage , cacheApps , comparator ) ; request . execute ( ) ; }
public DistanceDialog ( onPositiveButtonListener listener , PreferencesRepository repository ) { this . listener = listener ; this . preferencesRepository = repository ; }
public void onClick ( DialogInterface dialog , int id ) { DebugHelper . sendMailDev ( mParent , "REPORT - Shaarlier" , DebugHelper . generateReport ( error , mParent , extra ) ) ; }
public boolean onQueryTextChange ( String newText ) { adapter . filter ( viewPager . getCurrentItem ( ) , newText ) ; appbar . setExpanded ( true ) ; return true ; }
private void initFragment ( Fragment devicesFragment ) { FragmentManager fragmentManager = getFragmentManager ( ) ; FragmentTransaction transaction = fragmentManager . beginTransaction ( ) ; transaction . add ( R . id . contentFrame , devicesFragment ) ; transaction . commit ( ) ; }
public int hashCode ( ) { return this . getCallbackBinder ( ) . hashCode ( ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . valueOf ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "BookmarkAlias" , 1 ) ; else toggleAliasSetting ( "BookmarkAlias" , 2 ) ; return true ; }
public com . google . protobuf . Parser < SharedPreference > getParserForType ( ) { return PARSER ; }
public GetPageData getData ( ) { return data ; }
public void detectsLink ( ) { assertThat ( ContentType . getImageType ( "https : }
public boolean onLongClick ( View v ) { link . onLongClicked ( activity ) ; return false ; }
public void clickStudentinfo ( View v ) { Intent i = new Intent ( this , StudentInfo . class ) ; startActivity ( i ) ; }
public void setUpForRecord ( ) throws InterruptedException { nowNavigateRightTimes ( 2 ) ; HelperCode . signInUserTimhot ( ) ; nowNavigateRight ( ) ; HelperCode . registerPhone ( prefs ) ; nowNavigateRightTimes ( 2 ) ; }
public boolean buildSequence ( @ NonNull BaseTutorial tutorial ) { return tutorial instanceof PeersServersTutorial && ( ( PeersServersTutorial ) tutorial ) . buildForServers ( recyclerViewLayout . getList ( ) ) ; }
public void onFoodtruckLocationButtonClicked ( Foodtruck foodtruck ) { presenter . zoomOnLocation ( foodtruck . getCoordinates ( ) . getLatitude ( ) , foodtruck . getCoordinates ( ) . getLongitude ( ) ) ; }
public void onSuccess ( Usuario result ) { callback . onSuccess ( result ) ; getUserFromRemoteAndUpdateLocalSource ( userId , callback ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( context , AddRecipeActivity . class ) ) ; }
public static void showPropertiesDialogForStorage ( final BaseFile f , BaseActivity activity , AppTheme appTheme ) { showPropertiesDialog ( f , null , activity , false , appTheme , false , true ) ; }
public EntriesAdapter ( Context context ) { super ( context , 0 ) ; }
public static Ping onAddress ( @ NonNull InetAddress ia ) { Ping ping = new Ping ( ) ; ping . setAddress ( ia ) ; return ping ; }
public List < Long > findCards ( String query , boolean _order , CollectionTask . PartialSearch task ) { return _findCards ( query , _order , task , task == null ? null : task . getProgressSender ( ) ) ; }
public double getMinData ( ) { return minData ; }
public int getLayoutRes ( ) { return R . layout . drawer_item_divider ; }
public Completable join ( int accountId , int groupId ) { return networker . vkDefault ( accountId ) . groups ( ) . join ( groupId , null ) . toCompletable ( ) ; }
public void rotateJoint ( LbrJoint joint , float degree ) { mVrep . simxSetJointPosition ( mClientId , mJointMap . get ( joint ) , ( float ) ( degree * Math . PI / 180 ) , simx_opmode_oneshot ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( content ) . inflate ( R . layout . message_item , parent , false ) ; ViewHolder holder = new ViewHolder ( view ) ; return holder ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new EditCounterViewModel ( repository , counterId , callback ) ; }
public int getCount ( ) { return 3 ; }
private BroadcastReceiver finishReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { shouldCollapse = false ; if ( contextMenuFix ) U . startFreeformHack ( DashboardActivity . this ) ; finish ( ) ; } } ;
public RemoteMediaServer ( Collection col , String hkey , Connection con , String hostNum ) { super ( hkey , con , hostNum ) ; mCol = col ; }
public void setView ( View view ) { mAlert . setView ( view ) ; }
public void onError ( final RequestFailureType failureType , final Throwable exception , final Integer httpStatus ) { result . set ( handleRefreshTokenError ( exception , httpStatus , context , uri ) ) ; }
public void destroy ( ) { blurScript . destroy ( ) ; renderScript . destroy ( ) ; if ( outAllocation != null ) { outAllocation . destroy ( ) ; } }
public void testEncodingStrikeThrough ( ) { int encoded = TextStyle . encode ( TextStyle . COLOR_INDEX_FOREGROUND , TextStyle . COLOR_INDEX_BACKGROUND , TextStyle . CHARACTER_ATTRIBUTE_STRIKETHROUGH ) ; assertTrue ( ( TextStyle . decodeEffect ( encoded ) & TextStyle . CHARACTER_ATTRIBUTE_STRIKETHROUGH ) != 0 ) ; }
public Player setName ( String name ) { this . mName = name ; return this ; }
public ResultAdapter ( Context ctx , List < ResultData > resultData , OnItemClickListener listener ) { this . ctx = ctx ; this . resultData = resultData ; this . listener = listener ; }
public int getItemViewType ( int position ) { return ( position == 0 ) ? 1 : 2 ; }
public static String getQuicklyNodeName ( ) { return getString ( R . string . pref_key_quickly_node_name , null ) ; }
public String defaultValue ( ) { return "#ff000000" ; }
public boolean isEnabled ( ) { return false ; }
public String getRepeatPref ( ) { if ( getPhotoMode ( ) == MyApplicationInterface . PhotoMode . Panorama ) return "1" ; return sharedPreferences . getString ( PreferenceKeys . getRepeatModePreferenceKey ( ) , "1" ) ; }
public void setBackgroundRes ( int headerBackgroundRes ) { mAccountHeaderBuilder . mAccountHeaderBackground . setImageResource ( headerBackgroundRes ) ; }
public AtomSet ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public EventTeams getEventTeamsTable ( ) { return mEventTeamsTable ; }
public boolean hasLocationPermissions ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { return mContext . checkSelfPermission ( Manifest . permission . ACCESS_FINE_LOCATION ) == PackageManager . PERMISSION_GRANTED ; } return true ; }
public long getParentId ( ) { return parentId ; }
public void onResume ( ) { }
public void restoreAccountButton ( ) { if ( apiUtils . isOnline ( ) ) { Validate validate = new Validate ( getApplicationContext ( ) ) ; if ( validate . emailValidate ( mRestoreAccountEdit , mTilRestoreAccountEdit ) ) { restoreAccount ( ) ; } } }
public AccountHeader withProfileImagesVisible ( boolean profileImagesVisible ) { this . mProfileImagesVisible = profileImagesVisible ; return this ; }
public DbManager restrictWith ( int limit , int offset ) { this . restrict = true ; this . limit = limit ; this . offset = offset ; return this ; }
public void setSecondaryTag ( String tagName ) { this . secondaryTag = StringUtils . notNullStr ( tagName ) ; }
public Builder ( final Dialog dialog , int themeResId ) { this ( new DialogResourceFinder ( dialog ) , themeResId ) ; }
public static PendingIntent getNotificationIntentPlayPause ( Context context ) { return getPendingIntent ( context , ACTION_PLAY_PAUSE ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( flags ) ; stream . writeString ( caption ) ; if ( ( flags & 4 ) != 0 ) { reply_markup . serializeToStream ( stream ) ; } }
public Builder ( final Dialog dialog ) { this ( dialog , 0 ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; ButterKnife . bind ( this , view ) ; view . setOnTouchListener ( new FlingPlayBackController ( getActivity ( ) ) ) ; setUpMiniPlayer ( ) ; }
public boolean isFile ( ) { return file ; }
public ReaderPostService . UpdateAction getAction ( ) { return mAction ; }
public LiveData < Integer > getBirthdayDay ( ) { return birthdayDay ; }
private void updateDBList ( ) { LocalLyricsFragment localLyricsFragment = ( LocalLyricsFragment ) getFragmentManager ( ) . findFragmentByTag ( LOCAL_LYRICS_FRAGMENT_TAG ) ; if ( localLyricsFragment != null && localLyricsFragment . isActiveFragment ) new DBContentLister ( ) . execute ( localLyricsFragment ) ; else selectItem ( 1 ) ; }
public static void setHasDonated ( Context context , boolean value ) { getEditor ( context ) . putBoolean ( "has_donated" , value ) ; }
public String toString ( ) { return "STeacher { " + "person = '" + person + '\'' + " , post = '" + post + '\'' + " , personId = '" + personId + '\'' + ' } ' ; }
public static boolean checkIfItsForumFormatedLink ( String linkToCheck ) { return linkToCheck . startsWith ( "http : }
public LiveData < List < Track >> getAllTracks ( ) { return mMediatorTrackData ; }
public int getItemCount ( ) { if ( users == null ) { return 2 ; } else { return 3 + ( users . size ( ) - hidden . size ( ) ) ; } }
public FeatureItem ( int image , int titleText , int contentText , int version , int betaVersion ) { this ( image , titleText , contentText , version , betaVersion , false , true ) ; }
private void onMarketUpdate ( ShapeShiftMarketInfo marketInfo ) { if ( address != null && marketInfo . isPair ( pocket . getCoinType ( ) , address . getType ( ) ) ) { this . marketInfo = marketInfo ; } }
public void run ( ) { mDrawerLayout . setDrawerLockMode ( DrawerLayout . LOCK_MODE_UNLOCKED , getTabDrawer ( ) ) ; }
public AbstractMainFragment getCurrentFragment ( ) { return currentFragment ; }
public void onCheckedChanged ( SwitchButton view , boolean isChecked ) { if ( isChecked ) { if ( ! checkHostUri ( ) ) { showDialog ( ) ; } else { startVPN ( ) ; } } else { shutdownVPN ( ) ; } }
public void setMission ( Integer mission ) { this . mission = mission ; }
public VideoEmbedBinder ( TagEntry model ) { tagEntry = model ; }
public void deleteAction ( BookmarkRecyclerViewAdapter adapter ) { RealmUtils . deleteListFromRealm ( mRealm , adapter . getSelectedItemList ( ) ) ; adapter . notifyRemovedSelectedItems ( ) ; }
public void onFilterRemoved ( MyFilter filter ) { Log . d ( "TAG" , "onFilterRemoved : " + filter . getName ( ) ) ; }
public ExitFormDialog assertOnPage ( ) { String title = getTranslatedString ( R . string . exit ) + " " + formName ; checkIsTextDisplayed ( title ) ; return this ; }
public void repaint ( ) { repaint ( 0 , 0 , width , height ) ; }
private void postDownloaders ( ) { new PostDownloaderTask ( downloads ) . run ( ) ; if ( downloadPostFuture == null ) { downloadPostFuture = schedExecutor . scheduleAtFixedRate ( new PostDownloaderTask ( downloads ) , 1 , 1 , TimeUnit . SECONDS ) ; } }
public ArrayList < MediaOption > onGetOtherMediaAudioFileOptions ( ) { return null ; }
public void onClick ( DialogInterface dialog , int i ) { copyLocationText ( formatLocation ( lastLocation , getResources ( ) . getStringArray ( R . array . link_templates ) [ i ] ) ) ; }
public void onClick ( View view ) { Intent i = new Intent ( BookActivity . this , BookPanelActivity . class ) ; i . putExtra ( "page" , 3 ) ; startActivity ( i ) ; }
public void updateProgress ( int i ) { this . mProgress = i ; mXmppConnectionService . updateConversationUi ( ) ; }
public void run ( ) { try { cancel ( ) ; searchTimer . cancel ( ) ; searchTimer = null ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } searchDialogsInternal ( query , searchId ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; phone_call . serializeToStream ( stream ) ; }
public SQLiteDatabase getDatabase ( ) { return this . database ; }
public Iterator < View > iterator ( ) { return new ViewGroupIterator ( mParent ) ; }
public void hide ( ) { try { anim . scaleOut ( floatingActionButton , 0 , 400 , "fabOut" ) ; } catch ( NullPointerException e ) { Log . i ( "hideFab" , "Fab is not initialized" ) ; } }
public void onFinish ( ) { ( ( Player ) getParent ( ) ) . Lose ( ) ; }
public long getItemId ( int position ) { return items . get ( position ) . hashCode ( ) ; }
private void setLandscapeValue ( ) { columnCellCount = Setup . appSettings ( ) . getDrawerRowCount ( ) ; rowCellCount = Setup . appSettings ( ) . getDrawerColumnCount ( ) ; }
private OpenHelper ( Context context ) { super ( context , "themes . db" , null , 4 ) ; }
public RepoMoviesResult apply ( MoviesFilterType sort ) { return movieRepository . getFilteredMoviesBy ( sort ) ; }
public void deleteData ( int series ) { this . deleteData ( ProfileManager . get ( ) . getActiveProfileId ( ) , series ) ; }
public void onClick ( View view ) { callback . OnOtpCorrect ( 1 , otpValue ) ; }
public void setAztecVideoLoader ( Html . VideoThumbnailGetter videoLoader ) { this . aztecVideoLoader = videoLoader ; }
public static void launchManageAccount ( XmppActivity xmppActivity ) { Account account = getFirst ( xmppActivity . xmppConnectionService ) ; xmppActivity . switchToAccount ( account ) ; }
public StoryChapterManager ( Context context ) { SynchronizedSetting setting = SynchronizedSettingRepository . getLocalInstance ( context ) ; this . unlockedChapters = setting . getUnlockedStoryPages ( ) ; }
public Object getPayload ( ) { return payload ; }
public BasicGCMMessage ( GCMHelper . MSGTYPE msgtype ) { this . type = msgtype ; }
public Object getItem ( int position ) { return mComics . get ( position ) ; }
private void changeWearNotification ( ) { boolean isChecked = binding . wearPrefs . isChecked ( ) ; mPrefs . setWearEnabled ( ! isChecked ) ; binding . wearPrefs . setChecked ( ! isChecked ) ; }
public int getMyPosition ( Attr attr ) { return mBaseAttrs . indexOf ( attr ) ; }
public HeaderViewHolder onCreateHeaderViewHolder ( ViewGroup parent ) { return new HeaderViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . profile_item_header , parent , false ) ) ; }
public ColorItem ( ) { }
public void setStickyFooterSelection ( int identifier , boolean fireOnClick ) { setStickyFooterSelectionAtPosition ( getPosition ( identifier ) , fireOnClick ) ; }
public boolean isSession ( ) { return isSameType ( Type . SESSION ) ; }
public static int makeColorTransparent ( int color ) { return Color . argb ( 125 , Color . red ( color ) , Color . green ( color ) , Color . blue ( color ) ) ; }
private void notifyListeners ( ) { Set < RecipientModifiedListener > localListeners ; synchronized ( this ) { localListeners = new HashSet <> ( listeners ) ; } for ( RecipientModifiedListener listener : localListeners ) listener . onModified ( Recipient . this ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ Nullable Intent intent ) { return addAction ( icon , label , util . clickIntent ( intent ) ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnInteractionListener ) { mListener = ( OnInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnInteractionListener" ) ; } }
public ArtistImageLoader ( Context context , LastFMRestClient lastFMRestClient , OkHttpClient okhttp ) { this . context = context ; this . lastFMClient = lastFMRestClient ; this . okhttp = okhttp ; }
public String getUrl ( ) { return mUrl ; }
public boolean isFree ( ) { switch ( colorPrimary ) { case - 14575885 : case - 10453621 : case - 14606047 : return true ; default : return false ; } }
public void onDestroy ( @ Observes OnDestroyEvent onDestroyEvent ) { activity . unregisterReceiver ( broadcastReceiver ) ; }
public void syncGem ( ) { image = handler . index ( this ) ; gem = Game . getVars ( R . array . Ring_Gems ) [ ItemStatusHandler . indexByImage ( image , images ) ] ; }
private void copyTitleToClipboard ( ) { copyToClipboard ( titleEditText . getText ( ) . toString ( ) ) ; }
public void displayChildrenOf ( Title title ) { mShouldHighlightCurrent = false ; changeCursor ( bookDatabaseHelper . getTitlesUnder ( title . id ) ) ; }
public AccountHeader withSelectionSecondLine ( String selectionSecondLine ) { this . mSelectionSecondLine = selectionSecondLine ; return this ; }
public boolean isRepeatable ( ) { return mReminder . getRepeatInterval ( ) > 0 ; }
public static void setUserTag ( final String username , String tag ) { Reddit . tags . edit ( ) . putString ( "user - tag" + username . toLowerCase ( ) , tag ) . apply ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { Intent installIntent = new Intent ( ) ; installIntent . setAction ( TextToSpeech . Engine . ACTION_INSTALL_TTS_DATA ) ; navit . startActivity ( installIntent ) ; }
public AztecVideoLoader ( Context context , Drawable loadingInProgressDrawable ) { ( ( WordPress ) WordPress . getContext ( ) . getApplicationContext ( ) ) . component ( ) . inject ( this ) ; this . mContext = context ; this . mLoadingInProgress = loadingInProgressDrawable ; }
public void onStart ( ) { Log . i ( TAG , "onStart" ) ; super . onStart ( ) ; }
public Button ( int x , int y , int width , int height , int rotationInDegr , String filepath ) { this ( x , y , width , height , filepath ) ; this . rotation = rotation ; }
public void start ( Attributes attributes ) { mCurrentThread . setNumberOfPages ( Integer . parseInt ( attributes . getValue ( Topic . Xml . NUMBER_OF_PAGES_ATTRIBUTE ) ) ) ; }
public void setLinkId ( Long linki_id ) { this . linkId = linki_id ; }
public static File getOutgoingPictureFile ( ) throws IOException { return getOutgoingPictureFile ( new Date ( ) ) ; }
public Preferences ( Context context ) { preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public void deletePicture ( String filePath ) { localDataSource . deletePicture ( filePath ) ; }
public ScheduleCardAdapter ( ArrayList < String > list , Context context ) { this . list = list ; this . context = context ; }
public void setGeoeffnet ( String geoeffnet ) { this . _geoeffnet = geoeffnet ; }
public List < String > getContributorsIndexList ( ) { return contributors ; }
public int compare ( ResultBean r1 , ResultBean r2 ) { return r1 . getLate ( ) . compareTo ( r2 . getLate ( ) ) ; }
public void setSpeed ( float speed ) { this . speed = speed ; updateValues ( ) ; }
public void getDefaultMediaUrlWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "1" ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
public String getServiceName ( ) { return "coinmarketcap . com" ; }
public int getItemCount ( ) { return helpItemList . size ( ) ; }
public void recusouAumentoAposta ( Jogador j ) { mesa . diz ( "aumento_nao" , j . getPosicao ( ) , 1300 ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position , List < Object > payloads ) { mHolder . onBindFooterItemViewHolder ( holder , position , payloads ) ; }
public void onTaskError ( String error ) { AgentLog . e ( error ) ; assertTrue ( false ) ; }
public void onDone ( boolean successful ) { if ( mLoginActivity . get ( ) != null && ! mLoginActivity . get ( ) . isActivityDestroyed ( ) ) { mLoginActivity . get ( ) . onLoggedIn ( successful ) ; } }
public void setTime ( String timeText ) { time = RunUtils . timeToUnix ( timeText ) ; }
public ApiResponse ( Throwable error ) { code = 500 ; body = null ; this . error = error ; }
public String getMechanism ( ) { return "DIGEST - MD5" ; }
public boolean dispatchNestedPreFling ( float velocityX , float velocityY ) { return mScrollingChildHelper . dispatchNestedPreFling ( velocityX , velocityY ) ; }
public TalkDetailsHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View inflated = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . details_recyclerview_talk , parent , false ) ; return new TalkDetailsHolder ( inflated ) ; }
public ReusableViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
public Step getStepInstance ( ) { return step ; }
public boolean isDust ( ) { return compareTo ( type . minNonDust ( ) ) < 0 ; }
public void onBackPressed ( ) { if ( fullContainer . getVisibility ( ) == View . VISIBLE ) { hideImage ( ) ; } else { finish ( ) ; } }
public int getChoicePosition ( ) { return choiceSpinner . getSelectedItemPosition ( ) ; }
private void hideImage ( ) { ViewUtils . hide ( this , imageContainer , mAnimationCallback ) ; ViewUtils . hideReveal ( fullContainer ) ; }
public void onAvailable ( Network network ) { haveForcedWiFiConnection = true ; if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . M ) { ConnectivityManager . setProcessDefaultNetwork ( network ) ; } else { cm . bindProcessToNetwork ( network ) ; } }
private void loadData ( View v ) { updateAvatar ( v ) ; mCurrentName . setText ( preferenceUtils . readPreference ( PreferenceUtils . USER_NAME ) ) ; mCurrentEmail . setText ( preferenceUtils . readPreference ( PreferenceUtils . USER_EMAIL ) ) ; }
public int compare ( Element o1 , Element o2 ) { Float d1 = location . distanceTo ( o1 . toLocation ( ) ) ; Float d2 = location . distanceTo ( o2 . toLocation ( ) ) ; return d1 . compareTo ( d2 ) ; }
public static String getMPString ( int width , int height ) { float mp = ( width*height ) /1000000 . 0f ; return formatFloatToString ( mp ) + "MP" ; }
public void onLoaderReset ( Loader < Cursor > cursorLoader ) { mCursor = null ; mPagerAdapter . notifyDataSetChanged ( ) ; }
private Mask ( MaskMode maskMode , AnimatableShapeValue maskPath , AnimatableIntegerValue opacity ) { this . maskMode = maskMode ; this . maskPath = maskPath ; this . opacity = opacity ; }
public boolean touchDown ( int screenX , int screenY , int pointer , int button ) { camera . unproject ( touchPosition . set ( screenX , screenY , 0 ) ) ; rocket . isControlled = true ; return true ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { rootView = inflater . inflate ( R . layout . layout_slide_textimage , container , false ) ; fillLayout ( ) ; return rootView ; }
public void onPostSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getActivity ( ) ) . onPostSelected ( post ) ; }
public DeleteTask ( ContentResolver c , Context cd ) { this . cd = cd ; rootMode = PreferenceManager . getDefaultSharedPreferences ( cd ) . getBoolean ( PrefFrag . PREFERENCE_ROOTMODE , false ) ; }
public void removeItem ( int position ) { if ( itemsData . size ( ) <= 0 ) { return ; } itemsData . remove ( position ) ; notifyItemRemoved ( position ) ; }
public List < ? extends Compare . Stringable > members ( ) { return apps ; }
public int getFABColorPref ( ) { return sharedPreferences . getInt ( KeyFABColor , context . getResources ( ) . getColor ( R . color . pink ) ) ; }
public void stop ( ) { Log . d ( TAG , "stopping" ) ; cancelStart = true ; mPlayer . release ( ) ; Log . d ( TAG , "State : released" ) ; }
public int compareTo ( StyleMatch another ) { return this . score - another . score ; }
public static String getWallabagUrl ( ) { if ( wallabagUrl == null ) { wallabagUrl = App . getInstance ( ) . getSettings ( ) . getUrl ( ) ; } return wallabagUrl ; }
public ArrayList < OCSSection > getSections ( ) { ArrayList < OCSSection > lst = new ArrayList < OCSSection > ( ) ; for ( OCSDrive o : drives ) { lst . add ( o . getSection ( ) ) ; } return lst ; }
public MediaActivity ( Bundle args , int [ ] media ) { this ( args , media , null , DataQuery . MEDIA_PHOTOVIDEO ) ; }
private void onSettingsCloseButtonClick ( ) { closeSettingsPanel ( ) ; mSettingsFragment . restoreInitialState ( ) ; }
public Observable < ResponseBody > getGroupLoansAccountTemplate ( int groupId , int productId ) { return mBaseApiManager . getLoanApi ( ) . getGroupLoansAccountTemplate ( groupId , productId ) ; }
private void saveSelectionState ( String prefKey , DrawerGroupItem item ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit ( ) . putLong ( prefKey , item . id ) . apply ( ) ; } ;
public UserCommentListingURL order ( final Sort newOrder ) { return new UserCommentListingURL ( user , newOrder , limit , after ) ; }
public Single < List < Session >> findAll ( String languageId ) { return sessionRelation ( ) . selector ( ) . executeAsObservable ( ) . toList ( ) ; }
public TaskPost ( Activity activity , String url , IPostExecuteListener listener , List < StringPair > parameters ) { mActivity = activity ; this . url = url ; this . parameters = parameters ; this . listener = listener ; }
public void close ( View view ) { if ( view . getVisibility ( ) == View . VISIBLE ) { fabActions . performClick ( ) ; saveAndClose ( ) ; } }
private void initRepeatPrefs ( ) { binding . repeatNotificationOptionPrefs . setOnClickListener ( mRepeatClick ) ; binding . repeatNotificationOptionPrefs . setChecked ( mPrefs . isNotificationRepeatEnabled ( ) ) ; }
public AttachmentDataSource createDataSource ( ) { return new AttachmentDataSource ( defaultDataSourceFactory . createDataSource ( ) , new PartDataSource ( context , masterSecret , listener ) ) ; }
public void setBackground ( Drawable background ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ) { mSearchBar . setBackground ( background ) ; } else { mSearchBar . setBackgroundDrawable ( background ) ; } }
public static String getDialPrefix ( Context context ) { String pref = getString ( context , "pref_remove_prefix" , null ) ; return ( pref != null && ! TextUtils . isEmpty ( pref . trim ( ) ) ) ? pref : null ; }
public void onItemClick ( AdapterView < ? > arg0 , View view , int index , long id ) { ModelStructureActivity . actionStart ( ModelListActivity . this , list . get ( index ) ) ; }
private int getDefaultIconColor ( ) { return PreferenceData . STATUS_ICON_COLOR . getIntValue ( getContext ( ) ) ; }
public void resetProgressAnimation ( ) { if ( this . progressAnimationStatus != ProgressAnimationStatus . UNSTARTED ) { this . doResetProgressAnimation ( ) ; } }
public Drawable getIcon ( ) { return mIcon ; }
public synchronized Bitmap getAtDesiredScale ( ) { return mTileLoaders [ mDesiredScaleIndex ] . get ( ) ; }
public void tearDown ( ) throws Exception { HistoryGenerator . clear ( ) ; }
public void setFocus ( Context context ) { SoftKeyboardUtils . hideSoftKeyboard ( this ) ; }
public Sign create ( ) { return new Sign ( id , name , nameLocaleDe , mnemonic , starred , learningProgress ) ; }
public void bind ( AddTagDialog what ) { }
public Map < String , String > getHeaders ( ) throws AuthFailureError { return ZWayNetworkHelper . getAuthenticationHeaders ( context ) ; }
public void testLocationDirectionOn ( ) throws IOException { Log . d ( TAG , "testLocationDirectionOn" ) ; subTestLocationOn ( true ) ; }
public void onPostCommentsSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getSupportActivity ( ) ) . onPostCommentsSelected ( post ) ; }
public void reSort ( FileItem [ ] items_ ) { if ( items_ == null ) return ; ItemComparator comp = new ItemComparator ( mode & MODE_SORTING , true , ascending ) ; Arrays . sort ( items_ , comp ) ; }
public void onClick ( View view ) { String yourRealPath = getPath ( MainActivity . this , selectedImageUri ) ; splitVideoCommand ( yourRealPath ) ; dialog . dismiss ( ) ; }
public void scrollToChannel ( int channelId ) { int channelPosition = mChannelListAdapter . getVisibleFlatGroupPosition ( channelId ) ; mChannelView . smoothScrollToPosition ( channelPosition ) ; }
public void goToComments ( int aid , @ NonNull Commented commented ) { PlaceFactory . getCommentsPlace ( aid , commented , null ) . tryOpenWith ( getActivity ( ) ) ; }
public void fetchImage ( URL url , OnImageFetchedListener listener ) throws FileNotFoundException { fetchImage ( url , 0 , listener ) ; }
public void testConstructors ( ) { for ( int i = TestConfig . INSTANCE . getStartYear ( ) ; i <= getLastAvailableSeason ( ) ; i ++ ) { testSeason ( i ) ; } }
public void showBriefMessage ( @ NonNull String message ) { BriefMessage . showLong ( getActivity ( ) . findViewById ( R . id . rootLayout ) , message ) ; }
private void initializePageModels ( ) { this . models = new LinkedList <> ( ) ; this . recentModel = new RecentEmojiPageModel ( getContext ( ) ) ; this . models . add ( recentModel ) ; this . models . addAll ( EmojiPages . PAGES ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseClementineInfo . Builder getResponseClementineInfoBuilder ( ) { bitField0_ | = 0x00010000 ; onChanged ( ) ; return getResponseClementineInfoFieldBuilder ( ) . getBuilder ( ) ; }
public void subscribe ( CommentContract . View view ) { mView = view ; if ( PreferenceHelper . getInstance ( ) . inMobileApiMode ( ) ) { loadMobileApiComments ( ) ; } }
public int getColumnsNumber ( ) { return getTableColumns ( ) . length ; }
public QueryTask ( Context context ) { }
private int draw ( double [ ] p ) { return searchsorted ( p , random . nextDouble ( ) ) ; }
public boolean getShowDayHeaders ( ) { return sharedPreferences . getBoolean ( PREF_SHOW_DAY_HEADERS , true ) ; }
public ClearCacheEvent ( ) { this ( NOT_VALUABLE ) ; }
private void playStopwatch ( ) { if ( prefsSmartStopwatch && TimeManager . INSTANCE . isRunning ( ) && ! stopwatchHelper . isRunning ( ) ) { stopwatchHelper . play ( ) ; } }
public void update ( ) { if ( ( alpha -= GameLoop . elapsed ) > 0 ) { alpha ( alpha ) ; scale . set ( DungeonTilemap . SIZE * alpha ) ; } else { killAndErase ( ) ; } }
public final void setPageIndicator ( @ NonNull PagerIndicator pageIndicator ) { _pageIndicator = pageIndicator ; }
public int getTotalCancellations ( String className ) { int cancellations = 0 ; for ( TimeTableDay day : timeTableDays ) { cancellations += day . getCancellations ( className ) ; } return cancellations ; }
public void startDocument ( ) throws SAXException { }
public static Cancellable fromInputStream ( InputStream stream , OnCompositionLoadedListener l ) { ListenerAdapter listener = new ListenerAdapter ( l ) ; LottieCompositionFactory . fromJsonInputStream ( stream ) . addListener ( listener ) ; return listener ; }
public void onLoadMore ( int pos ) { }
private int endIndexOfLastEndIf ( Editable e ) { Matcher m = PATTERN_ENDIF . matcher ( e ) ; int idx = - 1 ; while ( m . find ( ) ) idx = m . end ( ) ; return idx ; }
public Integer getNumberOfPages ( ) { if ( mNumberOfPages == null ) mNumberOfPages = mNumberOfPosts / mPostsPerPage + 1 ; return mNumberOfPages ; }
public boolean getChat ( ) { return chat ; }
public void onMenuButtonClick ( View v ) { showMainMenu ( menuButton ) ; }
public void setDomainStepModel ( XYStepModel domainStepModel ) { this . domainStepModel = domainStepModel ; }
public void onTabReselected ( Tab tab , FragmentTransaction ft ) { }
public void onStop ( ) { super . onStop ( ) ; compositeDisposable . dispose ( ) ; }
public static void start ( Context c ) { c . startActivity ( new Intent ( c , PersonalActivity . class ) ) ; }
private void thenShouldDelegateOptionsItemSelected ( final MenuItem menuItem ) { new Verifications ( ) { { mPreferenceFragment . onOptionsItemSelected ( menuItem ) ; } } ; }
public void onClick ( View view ) { if ( suggestionListener != null ) { suggestionListener . onSuggestionClicked ( item . getId ( ) ) ; } }
public Uri getUri ( ) { return null ; }
public void onAnimationUpdate ( ValueAnimator animator ) { rotation = ( float ) animator . getAnimatedValue ( ) ; invalidate ( ) ; }
private void setSharedPrefs ( String name , String value ) { loginPrefsEditor = loginPreferences . edit ( ) ; loginPrefsEditor . putString ( name , value ) ; loginPrefsEditor . apply ( ) ; }
public void setPaletteBlockEnabled ( PaletteType t , boolean enabled ) { for ( PaletteImageButton b : paletteBlock . get ( t . ordinal ( ) ) ) { b . setEnabled ( t , enabled ) ; } updateButtonsColor ( ) ; }
public GroupDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public static void showStatistics ( JalkametriActivity parent ) { LogUtil . INSTANCE . i ( TAG , "Showing statistics" ) ; Intent i = new Intent ( parent , StatisticsActivity . class ) ; parent . startActivity ( i ) ; }
private void setFilename ( String filename ) { TextView tv = ( TextView ) getView ( ) . findViewById ( R . id . fdFilename ) ; if ( tv != null ) { tv . setText ( filename ) ; } }
private static < T extends Reviewer > T startReviewer ( RobolectricTest testClass , Class < T > clazz ) { T reviewer = startActivityNormallyOpenCollectionWithIntent ( testClass , clazz , new Intent ( ) ) ; waitForAsyncTasksToComplete ( ) ; return reviewer ; }
public void transferTest ( ) throws Exception { test ( ( ) -> Main . main ( String . format ( "receive - d = %s - peer = %s : 8081" , OUTPUT_FILE , IP_ADDRESS ) . split ( " " ) ) ) ; }
public void onTranslateFragSuccess ( ) { }
public void when_rotateScreenOnAboutPage_should_notCrash ( ) { rule . startAtMainMenu ( ) . openProjectSettings ( ) . clickAbout ( ) . rotateToLandscape ( new AboutPage ( ) ) . assertOnPage ( ) . scrollToOpenSourceLibrariesLicenses ( ) ; }
private void showKeyUnknownWarning ( ) { showKeyWarning ( R . string . warning_public_key_unknown , R . string . title_public_key_unknown_warning , R . string . msg_public_key_unknown_warning ) ; }
public DocumentModel clone ( ) { return new DocumentModel ( this . id , this . title , this . content , this . dateModified , this . languageLocale , this . color , this . category ) ; }
public float getQuantity ( ) { return quantity ; }
public int getItemCount ( ) { return mTabsManager . size ( ) ; }
public FindCallback getListener ( ) { return cb ; }
private static ArticleDao getArticleDao ( ) { return getDaoSession ( ) . getArticleDao ( ) ; }
public void setEndTime ( String endTime ) { this . endTime = endTime ; }
public void onClick ( DialogInterface dialog , int whichButton ) { ActivityCompat . requestPermissions ( activity , new String [ ] { Manifest . permission . RECORD_AUDIO } , SEARCH_REQUEST ) ; }
public String getNumPages ( ) { return numPages ; }
public void onClick ( View view ) { progressButtonView . showLoading ( ) ; sayHelloAfterAFewMillisecs ( ) ; }
public com . google . protobuf . Any getPubkey ( ) { if ( pubkeyBuilder_ == null ) { return pubkey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : pubkey_ ; } else { return pubkeyBuilder_ . getMessage ( ) ; } }
public VolumeKeyEvent ( KeyEvent origEvent , long eventTime , int newRepeat ) { super ( origEvent , eventTime , newRepeat ) ; this . mVolumeKeyEventType = VOLUME_KEY_EVENT_NATIVE ; this . mPrevCurrentValue = null ; }
public void setSubmitButtonAction ( Button button ) { button . setText ( getString ( R . string . transaction_edit_save ) ) ; button . setOnClickListener ( this ) ; }
public void showMediaCheckDialog ( int id , List < List < String >> checkList ) { showAsyncDialogFragment ( MediaCheckDialog . newInstance ( id , checkList ) ) ; }
public void parseData ( ) throws BasicModel . FieldNotDefinedException { mDataToBind = mAPIData ; }
public static TtsFragment newInstance ( boolean autoplay ) { TtsFragment fragment = new TtsFragment ( ) ; Bundle args = new Bundle ( ) ; args . putBoolean ( "autoplay" , autoplay ) ; fragment . setArguments ( args ) ; return fragment ; }
public void onRefresh ( ) { thread . run ( ISSPD , ( ) -> { log . v ( TAG , "refreshing" ) ; load ( true ) ; } ) ; }
public static < T extends Activity & OnRoleSelectListener > void show ( T parentActivity ) { RoleSelectDialogFragment roleChangeDialogFragment = new RoleSelectDialogFragment ( ) ; roleChangeDialogFragment . show ( parentActivity . getFragmentManager ( ) , null ) ; }
public void run ( ) { mAdapter . notifyDataSetChanged ( ) ; diningHallRefresh . setRefreshing ( false ) ; }
public void updateLayers ( ProfileLayerEvent event ) { if ( listAdapter != null ) { listAdapter . setLayers ( Services . cloud . lasers . layers . layers ) ; } updateViews ( ) ; }
public void add ( DrawOperation action ) { stack . truncate ( stack . size + index ) ; index = 0 ; stack . add ( action ) ; update ( ) ; }
public BlurView setBlurRadius ( float radius ) { blurController . setBlurRadius ( radius ) ; return this ; }
public void onDrawerOpened ( View drawerView ) { prepareNavigationViewMenuOnOpenDrawer ( ) ; super . onDrawerOpened ( drawerView ) ; }
public void unpause ( ) { super . unpause ( ) ; awaitResources ( ) ; }
public Message getMessage ( ) { if ( mErrorMessage != ErrorMessage . NO ) { throw new Error ( "This is an error message . This should be handled ! Error : " + mErrorMessage ) ; } return mMessage ; }
public void startUpdate ( ViewGroup container ) { }
public void onStartDrag ( @ NonNull Action action , @ NonNull PointF location ) { leftDragHandle . animate ( ) . alpha ( 0 . 5f ) ; }
public void onPurchaseHistoryRestored ( ) { * Called when purchase history was restored and the list of all owned PRODUCT ID's * was loaded from Google Play */ Log . d ( TAG , " --------------------- \nonPurchaseHistoryRestored : Already Purchased" ) ; }
public RawPeriod ( int day , int hour , RealmList < RawLesson > rawLessons ) { this . day = day ; this . hour = hour ; this . mRawLessons = rawLessons ; }
private List < PopupKeyCandidate > getCandidatesForO ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "œ" ) ) ; return candidates ; }
public void onClick ( DialogInterface dialog , int which ) { notification_led_color . setSummary ( ledNames . get ( which ) ) ; SIAApp . GG_APP . setLedColor ( ledColors . get ( which ) ) ; }
public void setPin ( String pin ) { Pin = pin ; }
public String getCountyCode ( ) { return codJudet ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfPurity_Info ) ; }
private void onImageClick ( ) { if ( bigImageFile != null ) { openImage ( ) ; } else { selectItem ( ) ; } }
public BaseEdgeEffectDecorator ( RecyclerView recyclerView ) { mRecyclerView = recyclerView ; }
public static Map < String , Double > getGutenbergBlockTypeImpressions ( ) { String jsonString = getString ( DeletablePrefKey . GUTENBERG_BLOCK_TYPE_IMPRESSIONS , " [ ] " ) ; Map < String , Double > impressions = GSON . fromJson ( jsonString , Map . class ) ; return impressions ; }
public String getISOPref ( ) { return sharedPreferences . getString ( PreferenceKeys . ISOPreferenceKey , "auto" ) ; }
public List < WalletRealmObject > getWallets ( ) { return wallets ; }
public void setPrecipProbability ( Integer precipProbability ) { this . precipProbability = precipProbability ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState ) ; Logger . info ( "WearInfoFragment onCreateView" ) ; return inflater . inflate ( R . layout . activity_wear_info , container , false ) ; }
public void setTtsLocale ( String locale ) { putString ( TTS_LOCALE , locale ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . lunchareas . musicapp" , appContext . getPackageName ( ) ) ; }
public boolean canEnter ( ) { return false ; }
public void setParams ( Bundle params ) { }
public LanguagePreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; loadLangs ( context , attrs ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; switch ( id ) { case R . id . about : aboutAlertDialog ( ) ; break ; } return super . onOptionsItemSelected ( item ) ; }
public boolean isEmpty ( ) { return mLinphoneCallState == LinphoneCallState . UNKONWN ; }
public void onAccuracyChanged ( Sensor sensor , int accuracy ) { if ( sensor . getType ( ) == Sensor . TYPE_LIGHT ) { currentConfiguration . putInt ( ACCURACY , accuracy ) ; } }
public void open ( Intent intent ) { try { context . startActivity ( intent ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; } }
public boolean onLongClick ( View v ) { refreshMessages ( true ) ; return true ; }
public boolean isChatAdminCell ( int uid ) { if ( ChatObject . isChannel ( currentChat ) && currentChat . megagroup ) { return MessagesController . getInstance ( ) . isChannelAdmin ( currentChat . id , uid ) ; } return false ; }
public ArrayList < ClientCollectionSheet > getClients ( ) { return clients ; }
public MultiTypeAdapter ( Context context , ViewTypeMapper mapper ) { super ( context , mapper ) ; mOnBindListeners = new HashMap <> ( ) ; }
public OstSessionPollingService ( String userId , String entityId , String successStatus , String failureStatus ) { super ( userId , entityId , successStatus , failureStatus ) ; }
public boolean warmup ( long flags ) { try { return this . mService . warmup ( flags ) ; } catch ( RemoteException var4 ) { return false ; } }
public FileListViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new FileListViewHolder ( parent ) ; }
public void onClick ( View view ) { Intent intent = getIntent ( ) ; if ( intent != null ) { mContext . startActivity ( intent ) ; } }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; existingBranchDetails = Data . getInstance ( ) . getCurrentBranchDetails ( ) ; if ( existingBranchDetails != null ) { updateExistingDetails ( existingBranchDetails ) ; } }
public void setGame ( String game ) { this . game = game ; }
public void onProductPurchased ( String productId , TransactionDetails details ) { sBillingProcessor . consumePurchase ( productId ) ; donate ( this , productId ) ; }
public void onClick ( View view ) { Intent search = new Intent ( context , SearchedTrendsActivity . class ) ; search . setAction ( Intent . ACTION_SEARCH ) ; search . putExtra ( SearchManager . QUERY , trend ) ; context . startActivity ( search ) ; }
public void onMessageFound ( Message message ) { resendMessage ( message ) ; }
public void gifAddedOrDeleted ( ) { recentGifs = DataQuery . getInstance ( currentAccount ) . getRecentGifs ( ) ; if ( gifAdapter != null ) { gifAdapter . notifyDataSetChanged ( ) ; } }
public void onStart ( ) { super . onStart ( ) ; getPreferenceScreen ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; setupToolbar ( ) ; }
private void initQuickSmsPrefs ( ) { mQuickSmsPrefs = binding . quickSMSPrefs ; mQuickSmsPrefs . setOnClickListener ( mQuickSmsClick ) ; mQuickSmsPrefs . setChecked ( mPrefs . isQuickSmsEnabled ( ) ) ; }
public static String getDefaultSavePathFor ( String accountName , OCFile file ) { return getSavePath ( accountName ) + file . getRemotePath ( ) ; }
public String getErsparnis ( ) { return this . _ersparnis ; }
public static boolean isParserStateMessage ( final String response ) { return PARSER_STATE_PARRERN . matcher ( response ) . find ( ) ; }
public void run ( ) { if ( mResultListener != null ) { mResultListener . onGenerateResult ( mStats , forcedStop ) ; } if ( mService != null ) { mService . onGeneratingFinished ( forcedStop ) ; } }
public void unsubscribe ( ) { mSubscriptions . clear ( ) ; }
public void onItemsRemoved ( RecyclerView recyclerView , int positionStart , int itemCount ) { super . onItemsRemoved ( recyclerView , positionStart , itemCount ) ; }
private void thenAnalyticsDataShouldContain ( String key , String value ) { assertNotNull ( mAnalyticsBaseData . data ( ) . containsKey ( key ) ) ; assertEquals ( value , mAnalyticsBaseData . data ( ) . get ( key ) ) ; }
public static void fadeOutView ( View view ) { fadeOutView ( view , ANIMATION_DURATION_SHORT ) ; }
public synchronized HashSet < String > toHashset ( ) { if ( hashSet != null ) return hashSet ; return ( hashSet = new HashSet < String > ( escapedStringToList ( serialised ) ) ) ; }
public boolean hasMultipleEnabledIMEsOrSubtypes ( final boolean shouldIncludeAuxiliarySubtypes ) { final List < InputMethodInfo > enabledImis = mImmWrapper . mImm . getEnabledInputMethodList ( ) ; return hasMultipleEnabledSubtypes ( shouldIncludeAuxiliarySubtypes , enabledImis ) ; }
public LiveData < Boolean > isSyncing ( ) { return syncRepository . isSyncing ( ) ; }
public double sqr ( double x ) { return x*x*x ; }
public synchronized void loadMoreIfNotPresent ( Integer appId ) { MessageState state = this . state . state ( appId ) ; if ( ! state . loaded ) { loadMore ( appId ) ; } }
public void setSystemPackageInfoItemArrayList ( ArrayList < PackageInfoItem > systemPackageInfoItemArrayList ) { mAdapter = new RecyclerAdapterApps ( getContext ( ) , systemPackageInfoItemArrayList ) ; setLayout ( ) ; recyclerView . setAdapter ( mAdapter ) ; }
public boolean onScale ( float focusX , float focusY , float scale ) { if ( mEmulator == null || mIsSelectingText ) return true ; mScaleFactor * = scale ; mScaleFactor = mClient . onScale ( mScaleFactor ) ; return true ; }
public void onIqPacketReceived ( final Account account , final IqPacket packet ) { if ( packet . getType ( ) == IqPacket . TYPE_RESULT ) { account . getBlocklist ( ) . remove ( jid ) ; updateBlocklistUi ( OnUpdateBlocklist . Status . UNBLOCKED ) ; } }
public void onNewIntent ( ) { initializeFabClickListener ( ) ; }
public int hashCode ( ) { return java8 . util . Objects . hash ( specialEvent ) ; }
public void setStartMember ( String startMember ) { this . startMember = startMember ; notifyPropertyChanged ( BR . startMember ) ; }
public void check ( ) { UsbManager manager = ( UsbManager ) context . getSystemService ( Context . USB_SERVICE ) ; if ( manager != null ) for ( UsbDevice device : manager . getDeviceList ( ) . values ( ) ) addUSBDevice ( device ) ; }
public IBinder onBind ( Intent intent ) { isServiceInUse = true ; return musicBind ; }
private PostData getPost ( View itemView ) { return mPostList . posts . get ( ( Integer ) itemView . getTag ( R . id . card_view ) ) . post ; }
public final static String getHumanSize ( long sz ) { return getHumanSize ( sz , true ) ; }
public String getSub ( Context context ) { return slug ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_room , parent , false ) ; return new ViewHolder ( v ) ; }
public void settingPreferenceValueUpdatedSummary ( ) { tester . openSettings ( ) . pickProvider ( Provider . PGNIG ) . getPreferenceAtLine ( 0 ) . changeValueTo ( "1 . 234" ) . getPreferenceAtLine ( 0 ) . hasSummary ( "1 . 234" ) ; }
public IBinder onBind ( Intent arg0 ) { return null ; }
public boolean onBufferLongClicked ( BuffersDataSource . Buffer b ) { return false ; }
public void onSuccess ( final ImgurAPI . AlbumInfo info ) { General . UI_THREAD_HANDLER . post ( new Runnable ( ) { @ Override public void run ( ) { mAlbumInfo = info ; mAlbumImageIndex = intent . getIntExtra ( "albumImageIndex" , 0 ) ; } } ) ; }
public DistrictRenderer provideDistrictRenderer ( APICache cache ) { return Mockito . mock ( DistrictRenderer . class ) ; }
public List < L > getListenerList ( ) { return listenerList ; } } \ No newline at end of file
public boolean batteryNeedRecharge ( ) { return this . vbat <= CRITICAL_BATTERY_VOLTAGE ; }
public PersonaFilterArgs ( int minLevel , int maxLevel , Enumerations . Arcana arcana , boolean rarePersona , boolean dlcPersona ) { this . minLevel = minLevel ; this . maxLevel = maxLevel ; this . arcana = arcana ; this . dlcPersona = dlcPersona ; }
public Single < List < ContactRow >> getContacts ( ) { return Single . create ( singleSubscriber -> { try { singleSubscriber . onSuccess ( receiveContacts ( ) ) ; } catch ( IOException e ) { singleSubscriber . onError ( e ) ; } } ) ; }
public boolean onKeyDown ( int key , KeyEvent event ) { if ( key == KeyEvent . KEYCODE_BACK ) { end_this_activity ( ) ; return true ; } return ( super . onKeyDown ( key , event ) ) ; }
public void onAnimationEnd ( View view ) { animation . setListener ( null ) ; view . setAlpha ( 1 ) ; view . setTranslationX ( 0 ) ; dispatchRemoveFinished ( holder ) ; mRemoveAnimations . remove ( holder ) ; dispatchFinishedWhenDone ( ) ; }
public void setYear ( int year ) { mActiveyear = year ; }
public void onAnimationEnd ( Animator p1 ) { appDrawerCallback . callback ( true , false ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . Script prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public static int [ ] getQuarterByIndex ( int quarter ) { return quarters [ quarter ] ; }
public void onEntryChange ( VaultEntry entry ) { saveVault ( true ) ; }
private boolean isPlaying ( ) { PlayerState playerState = connectionState . getActivePlayerState ( ) ; return playerState != null && playerState . isPlaying ( ) ; }
public CodecDocument openDocument ( final String fileName , final String password ) { setExternalFonts ( ) ; return new MuPdfDocument ( this , MuPdfDocument . FORMAT_EPUB , fileName , password ) ; }
public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; mItemTouchHelper . attachToRecyclerView ( null ) ; mActionModeDelegate = null ; }
public void requestPermission ( Fragment fragment ) { }
public AllianceListSubscriber provideAllianceListSubscriber ( ) { return new AllianceListSubscriber ( ) ; }
public AlertDialogBuilder newDialog ( ) { return new AlertDialogBuilder ( activity , theme , locale ) ; }
public int maxDurability ( int lvl ) { return 5 * ( lvl < 16 ? 16 - lvl : 1 ) ; }
public PersonaFusionListAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . view_personafusion , parent , false ) ; return new ViewHolder ( view , isToList ) ; }
private double yearsBetween ( DateTime date , DateTime dateToday ) { return ( double ) Days . daysBetween ( date , dateToday ) . getDays ( ) / DAYS_IN_YEAR ; }
public static Location getLocationAdjustedForGPSWeekRollover ( Location loc ) { long recordedTime = loc . getTime ( ) ; if ( recordedTime < 1554595199000L ) { recordedTime = recordedTime + 619315200000L ; loc . setTime ( recordedTime ) ; } return loc ; }
public static Converter createConverter ( String url ) { return new Converter ( url ) ; }
private void updateSources ( ) { new DataCollectionTask ( dcContext , chatId , getContactIds ( chatId ) , contactMapSources , featureCollections , lastPositions , boundingBuilder , this ) . execute ( ) ; }
public Message setActionUser ( User actionUser ) { this . actionUser = actionUser ; return this ; }
public XmppConnection ( final Account account , final XmppConnectionService service ) { this . account = account ; final String tag = account . getJid ( ) . toBareJid ( ) . toPreppedString ( ) ; mXmppConnectionService = service ; }
public static void debugLog ( Class c , String msg , int c2 ) { if ( Constants . DEBUG ) Log . d ( Constants . LOG_ID + " : " + c . getSimpleName ( ) , "\t" + msg ) ; }
public void onException ( @ NonNull Exception ex ) { message . setError ( R . string . failedLoading ) ; optionsView . setVisibility ( View . GONE ) ; loading . setVisibility ( View . GONE ) ; }
public void setMode ( XYStepMode mode ) { this . mode = mode ; }
public Poll getPoll ( ) { return poll ; }
private SiteModel getSite ( ) { if ( getHook ( ) == null ) { return null ; } return getHook ( ) . getSite ( ) ; }
public AdmissionPercentageFragment getCurrentAdmissionPercentageFragment ( ) { SubjectFragment currentSubjectFragment = getCurrentSubjectFragment ( ) ; if ( currentSubjectFragment == null ) return null ; return currentSubjectFragment . getCurrentFragment ( ) ; }
public void addRow ( QueryRow row ) { rows . add ( row ) ; }
public RecyclerAdapterClusterMapInfo ( Context context , ClusterStatus clusterStatus ) { this . context = context ; this . cluster = clusterStatus ; }
public boolean onItemLongClick ( AdapterView < ? > listView , View v , int position , long id ) { akt . visKildekode ( klasserDerVisesNu . get ( position ) ) ; return true ; }
public void setEnergyUnit ( double energyUnit ) { this . energyUnit = energyUnit ; }
public void addUpdateListener ( AppUpdateListener updateListener ) { updateListeners . add ( updateListener ) ; }
private void handleNewConversation ( ) { Intent intent = getBaseShareIntent ( NewConversationActivity . class ) ; startActivity ( intent ) ; }
private void fetchContacts ( String searchText ) { new AutoCompleteRequest ( getApplicationContext ( ) , this , searchText ) . execute ( ) ; }
public ReplayFloatingActionButton ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void triggered ( ) { mMaestro . stopGamepadInputWatcher ( ) ; mGame . showMainMenu ( ) ; }
public void run ( ) { boolean success = repository . storeBird ( bird , context ) ; mainThread . post ( ( ) -> callback . onStoreComplete ( success ) ) ; }
public LottieAnimatablePointValue getSize ( ) { return size ; }
public void onSortValidator ( ) { WUtil . onSortByOKValidatorPower ( mOtherValidators ) ; }
public void setDotSize ( final int dotSizePx ) { ViewGroup . LayoutParams lp = dot . getLayoutParams ( ) ; lp . width = dotSizePx ; lp . height = dotSizePx ; requestLayout ( ) ; invalidate ( ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseSongFileChunk . Builder getResponseSongFileChunkBuilder ( ) { bitField0_ | = 0x02000000 ; onChanged ( ) ; return getResponseSongFileChunkFieldBuilder ( ) . getBuilder ( ) ; }
public GlRenderer ( Context context ) { this . context = context ; speed = 0 ; ultimateSpeed = 144 ; angle = 0 ; this . square = new Square ( ) ; }
public void logoutAndRedirect ( ) { logout ( ) ; MainActivity . openActivity ( this ) ; }
public void addRow ( String word , String meaning , String example , String type ) { boolean success = mDatabaseHelper . addRow ( word , meaning , example , type ) ; if ( success ) { } else { } }
public void setFragments ( List < Fragment > fragments ) { this . fragments = fragments ; notifyDataSetChanged ( ) ; }
public void setPr ( Integer pr ) { this . pr = pr ; }
public Instruction ( Instruction instruction ) { index = instruction . index ; section = new ArrayList <> ( instruction . section ) ; image = instruction . image ; layout = instruction . layout ; testStage = instruction . testStage ; }
public boolean onPreferenceClick ( Preference preference ) { SparkleHelper . startTelegramCompose ( getContext ( ) , DEVELOPER_TARGET , TelegramComposeActivity . NO_REPLY_ID ) ; return true ; }
public TeamAtEventSummarySubscriber provideTeamAtEventSummarySubscriber ( MatchRenderer renderer ) { return Mockito . mock ( TeamAtEventSummarySubscriber . class ) ; }
private void updateIntraCharSpace ( ) { intraCharSpace = new Silence ( wpmDitLenMs , SAMPLE_RATE_HZ ) ; }
public String status ( Char me ) { return Utils . format ( Game . getVar ( R . string . Mob_StaPassiveStatus ) , me . getName ( ) ) ; }
public Iterator < E > iterator ( ) { throw new UnsupportedOperationException ( ) ; }
private boolean isItemSelected ( int index ) { return WidgetAppearanceUtils . isNoButtonsAppearance ( formEntryPrompt ) ? isNoButtonItemSelected ( index ) : isButtonItemSelected ( index ) ; }
public void setLastPostMemberId ( String lastPostMemberId ) { this . lastPostMemberId = lastPostMemberId ; notifyPropertyChanged ( BR . lastPostMemberId ) ; }
public final List < String > getProbableItemsList ( ) { return mSavingModule . getProbableItemsList ( ) ; }
public void stop ( ) { Log . v ( TAG , "stop" ) ; if ( executor != null ) { executor . cancel ( ) ; } }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new TrackViewModel ( mApplication , mAlbumKey ) ; }
public void unlockDatabase ( ) { synchronized ( databaseLock ) { databaseLocked = false ; LogUtil . d ( TAG , "Unlocked database" ) ; databaseLock . notifyAll ( ) ; } }
public ItemDraggableRange onGetItemDraggableRange ( MyViewHolder holder , int position ) { final int start = findFirstSectionItem ( position ) ; final int end = findLastSectionItem ( position ) ; return new ItemDraggableRange ( start , end ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { type = ClickType . values ( ) [ dataInputStream . readByte ( ) ] ; }
public void onClickEnableRemindersToggle ( View v ) { cancelEditingTheAlarmField ( ) ; state . setEnableReminders ( enableReminders . isChecked ( ) ) ; state . save ( this ) ; updateUI ( ) ; if ( state . isEnableReminders ( ) ) { informIfNotificationAlarmsMuted ( ) ; } }
public void setXmppConnection ( XmppConnection connection ) { this . xmppConnection = connection ; }
private static boolean makeQuranAyahDatabaseDirectory ( Context context ) { return makeQuranDatabaseDirectory ( context ) && makeDirectory ( getQuranAyahDatabaseDirectory ( context ) ) ; }
private void givenAnalyticsEvent ( ) { mAnalyticsEvent = new AnalyticsEvent ( NO_NETWORK_SEARCH , null ) ; }
public void sendControlKey ( ) { mIsControlKeySent = true ; mKeyListener . handleControlKey ( true ) ; }
public boolean savePass ( String passHash , String salt , boolean cryptMode ) { setValueToGeneralWithQuotes ( INI_CRYPT_CHECK_HASH , passHash ) ; setValueToGeneralWithQuotes ( INI_CRYPT_CHECK_SALT , salt ) ; setValueToGeneral ( INI_CRYPT_MODE , ( cryptMode ) ? "1" : "" ) ; return save ( ) ; }
public Builder withType ( int type ) { mRowType = type ; return this ; }
private void addButton ( int imageId , boolean withWeight ) { addButton ( new ImageView ( mContext ) , imageId , withWeight ) ; }
private void showNearbyCardPermissionRationale ( ) { DialogUtil . showAlertDialog ( getActivity ( ) , getString ( R . string . nearby_card_permission_title ) , getString ( R . string . nearby_card_permission_explanation ) , this : : displayYouWontSeeNearbyMessage , this : : requestLocationPermission , checkBoxView , false ) ; }
public void setCurrentForum ( int currentForum ) { this . currentForumId = currentForum ; }
public void init ( ) { faqFragment = FaqFragment . newInstance ( null ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( ClearCacheEvent . RATING ) ) { return ; } fragment . clearData ( fragment ) ; }
public ValidationException ( String detailMessage ) { super ( detailMessage ) ; }
public void onLoadFinished ( Loader < ArrayList < Genre >> loader , ArrayList < Genre > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
public void lireJoursRemplacesAsync ( final String pSession ) { executeAsync ( new Functions . IFunc < listeJoursRemplaces > ( ) { public listeJoursRemplaces Func ( ) throws java . lang . Exception { return lireJoursRemplaces ( pSession ) ; } } ) ; }
public String info ( ) { return Game . getVar ( R . string . Bow_Info1 ) + desc ( ) ; }
public void setSubtitle ( String subtitle ) { mSubtitleView . setText ( subtitle ) ; }
private void initSilentPrefs ( ) { binding . soundOptionPrefs . setChecked ( mPrefs . isBirthdaySilentEnabled ( ) ) ; binding . soundOptionPrefs . setOnClickListener ( view -> changeSilentPrefs ( ) ) ; binding . soundOptionPrefs . setReverseDependentView ( binding . globalOptionPrefs ) ; }
public ProcessSeason ( int showId , int serieNumber ) { super ( showId , serieNumber , DetailsTVShowActivity . this ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . notificationsSettingsUpdated ) { adapter . notifyDataSetChanged ( ) ; } }
public void onProgressUpdate ( int currentTimeInSecs , int totalDurationInSecs ) { mSeekBar . setProgress ( currentTimeInSecs ) ; bcProgressbar . setProgress ( currentTimeInSecs ) ; elapsedtime . setText ( MusicUtils . makeShortTimeString ( getContext ( ) , currentTimeInSecs ) ) ; }
public BarEntry ( float x , float [ ] vals ) { super ( x , calcSum ( vals ) ) ; this . mYVals = vals ; calcRanges ( ) ; calcPosNegSum ( ) ; }
public static IDialogsInteractor createDialogsInteractor ( ) { return new DialogsInteractor ( Injection . provideNetworkInterfaces ( ) , Injection . provideRepositories ( ) ) ; }
public int hashCode ( ) { return Objects . hash ( exams , subject , teacher ) ; }
public Fire ( Context glContext , String objFileName , String mtlFileName ) { this . glContext = glContext ; ammo = new ObjModelMtlVBO ( glContext , objFileName , mtlFileName , 2f , 0f , false ) ; crashableMesh = new CrashableMesh ( glContext , objFileName ) ; }
public void logOut ( ) { mUserPhotoReference = null ; mAuth . signOut ( ) ; }
private List < Map < String , String >> getListDefinitions ( String selectedCharacter ) { SQLiteStorageDefinition dbStorage = new SQLiteStorageDefinition ( getContext ( ) ) ; return dbStorage . getTerminsAndDefinitions ( selectedCharacter ) ; }
public InstalledAppAdapter ( ) { this . lastConstraint = "" ; this . installedApps = new ArrayList <> ( ) ; this . shownApps = new ArrayList <> ( ) ; }
public EditableLabel ( String color ) { super ( ) ; newlyAdded = true ; isEditing = true ; editedColor = color ; }
public void reDrawView ( ) { drawListItems ( ) ; }
public boolean equals ( Object obj ) { if ( obj instanceof Song ) { Song songObj = ( Song ) obj ; return hash . equals ( songObj . hash ) ; } else { return false ; } }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `separator` INTEGER" ) ; }
public InvalidPasswordException ( ) { super ( ) ; }
public Object getImageLocation ( ) { return currentImageLocation ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getRecipeLabelDbDao ( ) : null ; }
public int getLanguage ( ) { return language == null ? language = getLanguage ( Constants . LOCALE . LANG_ARABIC + "" ) : language ; }
public int colorCurrentCalendar ( ) { return colorPrimary ( Prefs . getInstance ( mContext ) . getTodayColor ( ) ) ; }
public void onSuccess ( BingWallpaperImage bingWallpaperImage ) { success ( config , bingWallpaperImage ) ; }
private void setRunning ( ) { TextView v = ( TextView ) findViewById ( R . id . statusOutput ) ; v . setText ( "RUNNING" ) ; clearDebugOutput ( ) ; }
public void onFailed ( ) { Log . e ( "SWELL" , String . format ( "Error updating %s daily fitness data" , currentPerson . getPerson ( ) . getName ( ) ) ) ; }
public void onFailure ( int statusCode , Client . Headers headers , int state ) { thread . runOnUI ( ( ) -> eventsRecyclerViewAdapter . setState ( R . id . load_more ) ) ; }
public void aboutUs ( MenuItem item ) { DialogFragment aboutUsDialogFragment = new AboutUsDialogFragment ( ) ; aboutUsDialogFragment . show ( supportFragmentManager , MediaPlayerConstants . TAG_ABOUT_US ) ; }
private void showToolPanel ( ) { ViewUtils . slideInDown ( mContext , binding . drawTools ) ; }
public Builder withImageResource ( int resId ) { mImageResource = resId ; return this ; }
public boolean onSingleTapUp ( @ NonNull MotionEvent e ) { return GestureController . this . onSingleTapUp ( e ) ; }
public AutomationDataProvider ( ) { matcher . addURI ( AUTHORITY , ENTITY_AUTOMATION + "/#" , URI_ONE_AUTOMATION ) ; matcher . addURI ( AUTHORITY , ENTITY_AUTOMATION , URI_ALL_AUTOMATIONS ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'RSS_ITEM'" ; db . execSQL ( sql ) ; }
public void testGetPreviewCorrectHeader ( ) { Iterable < Preview > previews = repository . getPreviews ( new ItemsPerPreview ( 0 ) ) ; assertEquals ( "Header 1" , previews . iterator ( ) . next ( ) . getSubtitle ( ) ) ; }
public int getJahrtoPosition ( int position ) { return filteredData . get ( position ) . getJahr ( ) ; }
public BleManager setOperateTimeout ( int operateTimeout ) { this . operateTimeout = operateTimeout ; return this ; }
private RequestManager initGlide ( ) { RequestOptions requestOptions = new RequestOptions ( ) . error ( R . drawable . poster_place_holder ) . fallback ( R . drawable . poster_place_holder ) ; return Glide . with ( this ) . setDefaultRequestOptions ( requestOptions ) ; }
private int getIndex ( DesktopIconInfo info ) { return ( info . row * desktopIcons . getColumnCount ( ) ) + info . column ; }
public void insert ( AppItem item ) { Completable . fromAction ( ( ) -> appItemDao . insert ( item ) ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( ) ; }
public void setMantra ( String mantra ) { this . mantra = mantra ; }
public DcEventCenter ( Context context ) { this . context = ApplicationContext . getInstance ( context ) ; }
public String getFilePath ( @ NonNull Uri filePath ) { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . getFilePath ( filePath ) ; }
public static String prefaceDisplay ( Context context ) { return getDefaultSharedPreferences ( context ) . getString ( context . getResources ( ) . getString ( R . string . pref_key_preface_in_book ) , context . getResources ( ) . getString ( R . string . pref_default_value_preface_in_book ) ) ; }
public void setValue ( String value ) { mValue = value ; }
public StickersAdapter ( Context context , StickerSet data ) { super ( context , R . layout . sticker_grid_item , data . getIds ( ) ) ; }
private void showSuccessfulUpdateSnackbar ( ) { WPSnackbar . make ( mContainer , getString ( R . string . plugin_updated_successfully , mPlugin . getDisplayName ( ) ) , Snackbar . LENGTH_LONG ) . addToSequencer ( ) ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . RequestClosePlaylist prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void setWidth ( String width ) { this . width = width ; }
public TopCategoriesAdapter ( ArrayList < CategoryListViewModel > data , Context context ) { super ( context , R . layout . favorites_listview_row , data ) ; this . dataSet = data ; this . context = context ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( Math_Op_Choose_Result_Activity . this ) ; Intent intent = new Intent ( Math_Op_Choose_Result_Activity . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
public PhotoSizeEntity setQ ( String q ) { this . q = q ; return this ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { super . onBackPressed ( ) ; } return super . onOptionsItemSelected ( item ) ; }
public EmojiDb ( Context context ) { this . context = context ; this . dbHelper = new EmojiDbHelper ( this . context ) ; checkDb ( ) ; }
public void addAnimatorUpdateListener ( ValueAnimator . AnimatorUpdateListener updateListener ) { rootLayer . addAnimatorUpdateListener ( updateListener ) ; }
private void startMainParsingActivity ( ) { Logging . debug ( "startMainParsingActivity" ) ; ParsingActivity_ . intent ( this ) . startForResult ( PARSING_SUB_ACTIVITY ) ; }
public void setTextAndValueAndCheck ( String text , CharSequence value , boolean checked , boolean divider ) { setTextAndValueAndCheck ( text , value , checked , 0 , divider ) ; }
private void onUploadsDataReceived ( List < UploadObject > data ) { uploadsData . clear ( ) ; uploadsData . addAll ( data ) ; callView ( IDocListView : : notifyDataSetChanged ) ; resolveUploadDataVisiblity ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { dialog . cancel ( ) ; guiListener . shutdown ( true , false , false ) ; AndroidSingleton . onRealDestroy ( AndroidPlatform . this ) ; finish ( ) ; }
public void remove ( Server service ) { super . remove ( service ) ; cities . remove ( service ) ; notifyDataSetChanged ( ) ; }
public void onReadCardClick ( View view ) { pickCardDataIOSetup ( ) ; }
public void onDateDialogPositiveButton ( int year , int month , int dayOfMonth ) { DateTime date = new DateTime ( year , month + 1 , dayOfMonth , 0 , 0 ) ; view . setDateText ( DateUtils . datetimeToString ( date ) ) ; }
public FunnyDisplay getDisplay ( ) { return this . display ; }
public void onCreateView ( Bundle savedInstanceState ) { super . onCreateView ( savedInstanceState ) ; updateUI ( ) ; }
public void onEvent ( NavigationUpdatedNavDrawerClosedEvent navigationUpdatedNavDrawerClosedEvent ) { listViewPosition = 0 ; listViewPositionOffset = 16 ; commitPending ( ) ; initNotesList ( mainActivity . getIntent ( ) ) ; setActionItemsVisibility ( menu , false ) ; }
public ReceiveText ( TextView outputText , MaterialSpinner languageSpinner , Context context ) { this . outputText = outputText ; this . languageSpinner = languageSpinner ; utils = new Utils ( outputText , languageSpinner , context ) ; }
public IRCCloudJSONObject ( JSONObject object ) { try { ObjectMapper mapper = new ObjectMapper ( ) ; o = mapper . readValue ( object . toString ( ) , JsonNode . class ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
private void fetchCoverAndUpdateMetadata ( ) { updateMetadata ( null ) ; }
private ApiKeyInterceptor ( ) { }
public void run ( ) { showSuccess ( R . string . msg_bookmark_added ) ; mWebViewScrollCallbacks . toggleTopToolbar ( true ) ; }
public int getSongProgressMillis ( ) { return player . position ( ) ; }
private int selectContentView ( ) { if ( mButtonPanelSideLayout == 0 ) { return mAlertDialogLayout ; } if ( mButtonPanelLayoutHint == DynamicAlertDialog . LAYOUT_HINT_SIDE ) { return mButtonPanelSideLayout ; } return mAlertDialogLayout ; }
public static Intent newIntent ( Context context ) { return new Intent ( context , NotificationsService . class ) ; }
public static String getDefaultStartButtonImage ( Context context ) { SharedPreferences pref = getSharedPreferences ( context ) ; return pref . getBoolean ( PREF_APP_DRAWER_ICON , false ) ? "app_logo" : "default" ; }
public static boolean isDecryptInProgressType ( long type ) { return ( type & ENCRYPTION_ASYMMETRIC_BIT ) != 0 ; }
public ResultViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_result , parent , false ) ; return new ResultViewHolder ( view ) ; }
public void onRefresh ( ) { for ( int i = 0 ; i < this . model . weatherSize ( ) ; i ++ ) { this . networkManager . addRequest ( this . model . getItem ( i ) ) ; } }
public int getItemCount ( ) { return mOtherValidators . size ( ) ; }
public ArrayList < Song > getSongs ( @ NonNull Context context ) { return TopAndRecentlyPlayedTracksLoader . getNotRecentlyPlayedTracks ( context ) ; }
public static boolean isImage ( String mimetype ) { return mimetype . toLowerCase ( ) . startsWith ( "image/" ) ; }
public GooglePlayService ( Activity activity , Lifecycle lifecycle ) { this . activity = activity ; googlePlay = GoogleApiAvailability . getInstance ( ) ; lifecycle . addObserver ( this ) ; }
private boolean resetTappedCard ( ) { tapped = null ; cardHighlight . hide ( ) ; return true ; }
private void initDataSwipeRefresh ( ) { mDataSwipeRefresh . setOnRefreshListener ( ( ) -> { if ( itShouldLoadMore ) loadDataOcariot ( ) ; } ) ; }
public Float getUsage ( ) { return usage ; }
public BigDecimal [ ] [ ] getProfit ( ) { return Profit ; }
public void cleanup ( ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException ignore ) { } } }
public void callbackUploadMedia ( File file ) { new uploadMedia ( this ) . execute ( Uri . parse ( file . getAbsolutePath ( ) ) ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; listBooksPresenter . stopPresenting ( ) ; }
public int length ( ) { return waypoints . size ( ) ; }
public void onViewRecycled ( StickerViewHolder holder ) { super . onViewRecycled ( holder ) ; glideRequests . clear ( holder . image ) ; }
public Long diskFreeSpace ( ) { return availableFileSystemBlocks * fileSystemBlockSize ; }
public Builder clearPool ( ) { bitField0_ = ( bitField0_ & ~0x00000004 ) ; pool_ = com . coinomi . core . protos . Protos . Transaction . Pool . UNSPENT ; onChanged ( ) ; return this ; }
public boolean equals ( Object o ) { return this == o || o != null && o . getClass ( ) == HighlightType . class && mId . equals ( ( ( HighlightType ) o ) . mId ) ; }
public AbsOffsetSongAdapter ( AppCompatActivity activity , ArrayList < Song > dataSet , @ LayoutRes int itemLayoutRes , boolean usePalette , @ Nullable CabHolder cabHolder ) { super ( activity , dataSet , itemLayoutRes , usePalette , cabHolder ) ; }
public void attemptUsingLTE ( final Context context , int timeout ) { if ( getConnectionType ( ) == ConnectivityManager . TYPE_WIFI ) { useWifi ( context , false ) ; mWifiKilled = true ; waitForLTE ( context , timeout + ( timeout/10 ) , timeout/10 ) ; } }
public ConversationsActivity getParentActivity ( ) { return ( ConversationsActivity ) getActivity ( ) ; }
public static boolean withIdExists ( String id ) { return plants . contains ( id ) ; }
public void onClick ( View view ) { listener . logEventSelectContent ( "nextButton" , "nextButton" , MainActivity . CONTENT_TYPE_BUTTON ) ; next ( ) ; }
public String getEarly ( ) { return early ; }
public void onChartGestureEnd ( MotionEvent me , ChartTouchListener . ChartGesture lastPerformedGesture ) { Log . i ( "Gesture" , "END" ) ; mChart . highlightValues ( null ) ; }
public void setOutgoing ( Contact contact , int status , boolean sameMessageBlock ) { if ( mBalloonView != null ) { mBalloonView . setBackgroundResource ( mOutgoingDrawableId ) ; } mParentView . setGravity ( Gravity . RIGHT ) ; super . setOutgoing ( contact , status , sameMessageBlock ) ; }
public static float speed ( float speed , float acc ) { return speed + acc * Game . elapsed ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `poll` INTEGER NOT NULL DEFAULT 0" ) ; }
private void vote ( final ItemManager . Item item ) { mUserServices . voteUp ( mContext , item . getId ( ) , new VoteCallback ( this ) ) ; }
public void setIsSyncItem ( boolean b ) { this . isSyncItem = b ; }
public void setSortMethod ( int sortMethod ) { checkData ( ) . setSortMethod ( sortMethod ) ; }
public void reset ( OutputStream out ) { Assertions . checkState ( closed ) ; this . out = out ; closed = false ; }
public void onDefault ( Selector s ) { Gizmo . isometricModeShift = 0 ; s . setText ( Utils . format ( "Shift : %2 . 1f" , Gizmo . isometricModeShift ) ) ; }
public SinglePostRequest ( String postId ) { super ( ExtendedPost . class , PointIm . class ) ; mPostId = postId ; }
public void setLocationProvider ( String provider ) { SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putString ( SettingsService . PREF_LOCATION_PROVIDER , provider ) ; editor . commit ( ) ; }
public void setPhotoTagColor ( @ Nullable final String photoTagColor ) { this . photoTagColor = photoTagColor ; }
public void hideList ( ) { mode = MODE_PIE ; resetScrollSilently ( ) ; setVerticalScrollBarEnabled ( false ) ; hidePieMenu ( ) ; resetFadeOutPieMenu ( ) ; invalidate ( ) ; }
public ArrayList < Entry > getEntries ( ) { return entries ; }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return AppsManager . instance ; }
public static com . coinomi . core . protos . Protos . Script parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void onFailure ( Call < List < CourseSection >> call , Throwable t ) { if ( callBack != null ) { callBack . onFailure ( t . getMessage ( ) , t ) ; } }
public String getDescription ( ) { return "Click ClickableSpan" ; }
public boolean onPreferenceClick ( Preference preference ) { Intent ipCheckerActivity = new Intent ( getActivity ( ) , IpAddressChecker . class ) ; startActivity ( ipCheckerActivity ) ; return true ; }
public MobileModeFeature ( JaxmppService service ) { jaxmppService = service ; }
public void launchContributionActivity ( ) { startActivityWithFlags ( this , ContributionsActivity . class , Intent . FLAG_ACTIVITY_CLEAR_TOP , Intent . FLAG_ACTIVITY_SINGLE_TOP ) ; }
public void syncWithDb ( ) { this . restaurantList = DatabaseManager . get ( ) . getFavorites ( ) ; notifyDataSetChanged ( ) ; setNoContent ( ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . iv_protect_your_inf_about2 : mIsFinished . activityFinish ( true ) ; break ; default : break ; } }
private double cmtoinch ( double num ) { return num * 0 . 394 ; }
public void run ( ) { view . setAlpha ( endAlpha ) ; Log . i ( "AnimateHelper" , getViewId ( view ) + " fade OUT [ GONE ] effect for 0ms with " + String . valueOf ( delay ) + "ms delay" ) ; }
private double yardtokm ( double num ) { return num * 0 . 0009144 ; }
private static void sendBroadcast ( Context context , @ SyncUtils . FetchStatus int status ) { Intent intent = new Intent ( ACTION_SYNC_FINISHED_CALLBACK ) ; intent . putExtra ( EXTRA_FETCH_STATUS , status ) ; LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( intent ) ; }
public ArrayList < ShopItem > getResults ( ) { return results ; }
private void setParametersToFragment ( Fragment fragment ) { Log . v ( TAG , "setParametersToFragment ( ) started" ) ; if ( fragment == null ) return ; setSortOrder ( fragment , sortOrder ) ; setSearchQueryOnFragment ( fragment , searchQuery ) ; }
public void whenPromptHasInvalidWidgetParameters_sliderIsDisabled ( ) { when ( rangeQuestion . getRangeStep ( ) ) . thenReturn ( new BigDecimal ( 2 ) ) ; RangeWidgetUtils . isWidgetValid ( rangeQuestion , slider ) ; assertFalse ( slider . isEnabled ( ) ) ; }
private int getPixel ( int dp ) { DisplayMetrics metrics = mXmppConnectionService . getResources ( ) . getDisplayMetrics ( ) ; return ( ( int ) ( dp * metrics . density ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { Bundle bundle = new Bundle ( ) ; rootComponent . saveInstanceState ( bundle ) ; outState . putBundle ( "root_component" , bundle ) ; }
public String getIconSize ( ) { return null ; }
private void tryAddAccount ( ) { AnswersProxy . get ( ) . logButton ( "Done Account" ) ; if ( addAccount ( ) ) { AnswersProxy . get ( ) . logEvent ( "Done Account" ) ; setResult ( RESULT_OK ) ; finish ( ) ; } }
public void onBindHeaderItemViewHolder ( HeaderViewHolder holder , int localPosition ) { applyFullSpanForStaggeredGridLayoutManager ( holder ) ; }
public void onNext ( byte [ ] bytes ) { mediaSaveHelper . onDataReady ( recordBuffer ) ; }
public Integer getId ( ) { return id ; }
public static boolean setLastPushNotification ( Context context , long timestamp ) { return sPreferences . edit ( ) . putLong ( "pref_last_push_notification" , timestamp ) . commit ( ) ; }
private void startTracking ( ) { mLocList = new LocationTracker ( mContext , mTrackerCallback ) ; }
public void onPause ( Context context ) { mRewardedVideoAd . pause ( context ) ; }
public ViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
private Uri getSoundUri ( int soundId ) { return Uri . parse ( "android . resource : }
private void getIntentExtras ( ) { Bundle intentExtras = getIntent ( ) . getExtras ( ) ; if ( intentExtras != null ) { id = intentExtras . getInt ( EXTRA_ID ) ; } }
public LessonDialogFragment ( ) { }
private void setListeners ( ) { mLogoutPreference . setOnPreferenceClickListener ( preference -> { mSettingsPresenter . logout ( ) ; return true ; } ) ; }
private int getUserSelectedNavigationItem ( ) { return AppSettings . getUserSelectedNavigationItem ( ) ; }
public SherlockFragment getFragment ( int item ) { return ( SherlockFragment ) mViewPagerAdapter . instantiateItem ( mViewPager , item ) ; }
public void onFragmentDestroy ( ) { ConnectionsManager . getInstance ( ) . cancelRpcsForClassGuid ( classGuid ) ; isFinished = true ; if ( actionBar != null ) { actionBar . setEnabled ( false ) ; } }
public Long getTimeOccurred ( ) { return timeOccurred ; }
public void run ( ) { game . setScreen ( new ShopScreen ( game ) ) ; }
public void onRefresh ( ) { makeNewsRequest ( 1 ) ; }
public void resetZoom ( ) { normalizedScale = 1 ; fitImageToView ( ) ; }
private void showPreview ( int keyIndex ) { showPreview ( keyIndex , 0 ) ; }
public com . google . protobuf . Any . Builder addEvidenceBuilder ( ) { return getEvidenceFieldBuilder ( ) . addBuilder ( com . google . protobuf . Any . getDefaultInstance ( ) ) ; }
public static boolean addDelay ( ) { return gPrefs . getBoolean ( ADD_DELAY , true ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; initBloggingReminders ( ) ; setupSiteDomainsSetting ( ) ; }
private static void addOplataHandlowaColumnTo ( org . greenrobot . greendao . database . Database db , String tableName ) { addColumnTo ( db , tableName , "OPLATA_HANDLOWA" ) ; }
public void setOnWalletClickListener ( WalletsAdapter . OnWalletClickListener listener ) { this . listener = listener ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( mRecyclerViewExpandableItemManager != null ) { outState . putParcelable ( SAVED_STATE_EXPANDABLE_ITEM_MANAGER , mRecyclerViewExpandableItemManager . getSavedState ( ) ) ; } }
public void die ( NamedEntityKind cause ) { Imp . Quest . process ( this ) ; super . die ( cause ) ; }
public String serialize ( Book book ) { final StringBuilder buffer = new StringBuilder ( ) ; serialize ( buffer , book ) ; return buffer . toString ( ) ; }
public void writeCharacteristic ( UUID uuid , byte [ ] value ) { GattOperation op = HIDDeviceBLESteamController . GattOperation . writeCharacteristic ( mGatt , uuid , value ) ; queueGattOperation ( op ) ; }
public void createEvent_WhenEmptyName_NotifyViewError ( ) { final EventViewModel eventViewModel = createEventViewModel ( ) ; eventViewModel . setName ( SampleBuilder . emptyText ) ; eventCreatePresenter . createEvent ( eventViewModel ) ; verify ( eventCreateView ) . onEmptyEventNameError ( ) ; verifyNoMoreInteractions ( createEventUseCase ) ; }
private void rateButtonClicked ( ) { this . mShowingMore = ! this . mShowingMore ; showMoreIfRequired ( ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . sample_view , null ) ; }
public static void cancel ( Context context ) { ComponentName receiver = new ComponentName ( context , BootReceiver . class ) ; PackageManager pm = context . getPackageManager ( ) ; pm . setComponentEnabledSetting ( receiver , PackageManager . COMPONENT_ENABLED_STATE_DISABLED , PackageManager . DONT_KILL_APP ) ; }
public void onSuccess ( List < Usuario > result ) { localDataSource . saveOrUpdateUsers ( result ) ; callback . onSuccess ( result ) ; }
public FontTextView ( Context context ) { super ( context ) ; decorator = new FontDecorator ( context ) ; }
public void notifyChildItemRangeRemoved ( int groupPosition , int childPositionStart , int itemCount ) { mAdapter . notifyChildItemRangeRemoved ( groupPosition , childPositionStart , itemCount ) ; }
public SongDigest create ( Cursor source ) { return new SongDigest ( source . getString ( source . getColumnIndex ( Views . SongsReadable . NAME . getName ( ) ) ) ) ; }
public void setIndex ( long index ) { this . index = index ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ NonNull Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
public MessItemViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new MessItemViewHolder ( View . inflate ( parent . getContext ( ) , R . layout . item_format_mess_menu , null ) ) ; }
public void onUserConnected ( IUser user ) throws RemoteException { mChannelListAdapter . updateChannels ( ) ; mChannelListAdapter . notifyDataSetChanged ( ) ; }
public ListeDeCours Func ( ) throws java . lang . Exception { return listeCoursIntervalleSessions ( codeAccesUniversel , motPasse , SesDebut , SesFin ) ; }
public static BaseNoteFragment newInstanceWithNewNote ( Note newNote ) { final BaseNoteFragment fragment = new NoteEditFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putSerializable ( PARAM_NEWNOTE , newNote ) ; fragment . setArguments ( args ) ; return fragment ; }
public String toString ( ) { return GrblController . getContext ( ) . getString ( R . string . text_grbl_error_format , errorCode , errorDescription ) ; }
public Loader < BucketedThreadMedia > onCreateLoader ( int i , Bundle bundle ) { return new BucketedThreadMediaLoader ( getContext ( ) , masterSecret , recipient . getAddress ( ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; unregisterReceiver ( screenStateReceiver ) ; unregisterReceiver ( pendingUpdateReceiver ) ; }
private void sendMessageToHandler ( int refreshLayout , int messgae ) { Message msg = mHandler . obtainMessage ( ) ; msg . arg1 = refreshLayout ; msg . what = messgae ; msg . sendToTarget ( ) ; }
public void openDrawer ( ) { mDrawerLayout . openDrawer ( Gravity . LEFT ) ; }
public void onDestroy ( ) { alarmio . removeListener ( this ) ; super . onDestroy ( ) ; }
public void clientAuthenticationFailed ( String inErrorMessage ) { Timber . e ( "clientAuthenticationFailed : %s" , inErrorMessage ) ; }
public void flowInterrupt ( String workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { getMvpView ( ) . showProgress ( false ) ; }
public InputStream getInputStream ( ) throws IOException { return new ByteArrayInputStream ( data ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { Intent i = new Intent ( android . provider . Settings . ACTION_BLUETOOTH_SETTINGS ) ; startActivity ( i ) ; }
private CursorViewAdapter adapter = new CursorViewAdapter ( this , null , selectionHandler ) { @ Override protected void onContentChanged ( ) { loadData ( ) ; } } ;
public void onProgressStarted ( int length ) { Message msg = obtainMessage ( BEGIN_PROGRESS , length , 0 ) ; sendMessage ( msg ) ; }
public void onFetchTimeChanged ( Date time ) { }
public void setSenseElements ( List < SenseElement > senseElements ) { mSenseElements = senseElements ; }
public static AilGolClient getInstance ( ) { if ( mAilGolClient == null ) { mAilGolClient = new AilGolClient ( ) ; } return mAilGolClient ; }
public static Bitmap . Config getBitmapConfig ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . O ) { return Bitmap . Config . RGBA_F16 ; } return Bitmap . Config . ARGB_8888 ; }
public void whenPermissionIsNotGranted_requestGeoPoint_doesNotLaunchAnyIntent ( ) { permissionsProvider . setPermissionGranted ( false ) ; activityGeoDataRequester . requestGeoPoint ( testActivity , prompt , "" , waitingForDataRegistry ) ; assertNull ( shadowActivity . getNextStartedActivity ( ) ) ; assertTrue ( waitingForDataRegistry . waiting . isEmpty ( ) ) ; }
public void pauseAudio ( AudioContentViewControl view ) { view . pause ( ) ; getAudioFragment ( ) . pausePlaying ( ) ; stopMediaPlayerUpdater ( ) ; setAudioStatus ( AudioContentView . STATUS_PAUSED ) ; releaseAudioFocus ( ) ; }
private boolean enoughToFilter ( ) { CharSequence line = getCurrentLine ( ) ; return ( line != null && line . length ( ) > 0 && line . charAt ( 0 ) == '/' ) ; }
public int getOldListSize ( ) { return mValues . size ( ) ; }
public void setDrawerLayout ( View layout ) { drawerLayout = layout ; addView ( drawerLayout ) ; if ( Build . VERSION . SDK_INT >= 21 ) { drawerLayout . setFitsSystemWindows ( true ) ; } }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . example . mv_series" , appContext . getPackageName ( ) ) ; }
private void searchInMainPage ( String query , boolean isSaveQuery ) { if ( isSaveQuery ) { TetroidSuggestionProvider . saveRecentQuery ( this , query ) ; } searchInMainPage ( query , mViewPagerAdapter . getMainFragment ( ) . getCurMainViewId ( ) ) ; }
public void setPhotoUrl ( String photoUrl ) { this . photoUrl = photoUrl ; }
public boolean isPlaying ( ) { AudioFragment audio = findAudioFragment ( ) ; return audio != null && audio . isPlaying ( ) ; }
public void seek ( ) { }
public void onError ( Throwable e ) { pbLoading . setVisibility ( View . GONE ) ; Toast . makeText ( mActivity , e . getLocalizedMessage ( ) , Toast . LENGTH_LONG ) . show ( ) ; }
public static void initialize ( Application context ) { if ( DAO == null ) DAO = Room . databaseBuilder ( context , LogDatabase . class , "user - logs" ) . addMigrations ( MIGRATION_1_2 , MIGRATION_2_3 ) . build ( ) . logDao ( ) ; }
public void setBPM ( float _bpm ) { bpm = _bpm ; }
public com . coinomi . core . protos . Protos . DeterministicKeyOrBuilder getDeterministicKeyOrBuilder ( ) { return deterministicKey_ ; }
public void setBounds ( BoundingBox bounds ) { this . bounds = bounds ; }
public FormSubmitManager providesFormSubmitManager ( Scheduler scheduler , SettingsProvider settingsProvider , Application application ) { return new SchedulerFormUpdateAndSubmitManager ( scheduler , settingsProvider , application ) ; }
public void setViewPager ( ViewPager viewPager ) { mTabStrip . removeAllViews ( ) ; mViewPager = viewPager ; if ( viewPager != null ) { viewPager . setOnPageChangeListener ( new InternalViewPagerListener ( ) ) ; populateTabStrip ( ) ; } }
public static String getSuraAyahString ( Context context , int sura , int ayah ) { String suraName = getSuraName ( context , sura , false , false ) ; return context . getString ( R . string . sura_ayah_notification_str , suraName , ayah ) ; }
public int getCompressedSize ( ) { return compressedSize ; }
public void resolveListView ( ) { if ( isGuiReady ( ) ) { getView ( ) . displayMessages ( mData ) ; } }
public Uri insert ( Uri uri , ContentValues values ) { throw new UnsupportedOperationException ( ) ; }
public void finish ( ) { super . finish ( ) ; overridePendingTransition ( 0 , R . anim . slide_out_from_top ) ; presentationManager . stopPlayer ( ) ; textToSpeechManager . shutdown ( ) ; }
public Location getLocation ( ) { return location ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . spinthechoice . garbage . android" , appContext . getPackageName ( ) ) ; }
private void setMaxTries ( int i ) { if ( i < 1 ) { throw new IllegalArgumentException ( "iterations < 1 : " + i ) ; } this . maxTries = i ; }
public void put ( double amount ) { double sum = curSum + decimals / 100 . 0 ; sum += amount ; curSum = getInteger ( sum ) ; decimals = getDecimal ( sum ) ; }
public String getCurrentJewelName ( ) { return Config . levels [ currentLevel ] . getJewelClass ( ) . getSimpleName ( ) ; }
private boolean matchesInProgressMedia ( final @ NonNull MediaModel media ) { return mCurrentDelete != null && media . getSiteId ( ) == mCurrentDelete . getSiteId ( ) && media . getMediaId ( ) == mCurrentDelete . getMediaId ( ) ; }
public FastAdapter . OnClickListener getOnMiniDrawerItemOnClickListener ( ) { return mOnMiniDrawerItemOnClickListener ; }
public boolean onMenuItemClick ( MenuItem menuItem ) { self . disconnectAll ( ) ; return false ; }
public void setBlock ( TLRPC . TL_pageBlockFooter block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
private void update ( ) { super . setAltitude ( altitude + altitudeOffset ) ; }
public void startQueryTelegrams ( final int direction ) { mSwipeRefreshLayout . post ( new Runnable ( ) { @ Override public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryTelegrams ( 0 , direction ) ; } } ) ; }
public static void postStickyEvent ( Object event ) { EventBus . getDefault ( ) . postSticky ( event ) ; }
private void removeNotification ( Note note ) { NotificationManager manager = ( NotificationManager ) getSystemService ( NOTIFICATION_SERVICE ) ; manager . cancel ( String . valueOf ( note . get_id ( ) ) , 0 ) ; }
public WndQuest ( Char questgiver , int . . . phrases ) { this ( questgiver , Game . getVar ( phrases [ Random . Int ( 0 , phrases . length ) ] ) ) ; }
private void setUpViews ( ) { resetColors ( ) ; setUpScrollView ( ) ; setUpFab ( ) ; setUpImageView ( ) ; }
public void set ( ProgressBar pb , Integer value ) { pb . setProgress ( value ) ; setProgressDrawable ( ) ; }
private void openTemplate ( int position ) { mContext . startActivity ( new Intent ( mContext , TemplateActivity . class ) . putExtra ( Constants . INTENT_ID , mDataList . get ( position ) . getKey ( ) ) ) ; }
public Type getType ( ) { return null ; }
public Date getCreatedAt ( ) { return preview . getPreview ( ) . getCreatedAt ( ) ; }
public List < String > getCategories ( ) { return Collections . < String > emptyList ( ) ; }
public static String getStravaName ( long id ) { return getString ( id , SportType . STARVA_NAME ) ; }
public void setGraphWeekXLabels ( String [ ] labels ) { chartWeek . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter < String > ( labels ) ) ; }
public void setHost ( String host ) { mHost = host ; }
private void checkConversionCanceled ( ) throws Exception { boolean cancelConversion ; synchronized ( videoConvertSync ) { cancelConversion = cancelCurrentVideoConversion ; } if ( cancelConversion ) { throw new RuntimeException ( "canceled conversion" ) ; } }
private void onActualPostReceived ( Post post ) { this . post = post ; setLoadingPostNow ( false ) ; resolveToolbarView ( ) ; resolveCommentsView ( ) ; resolveLikesView ( ) ; }
private void removeTuneDialog ( ) { Fragment proxmark3TuneDialogFragment = getSupportFragmentManager ( ) . findFragmentByTag ( PROXMARK3_TUNE_DIALOG_FRAGMENT_TAG ) ; if ( proxmark3TuneDialogFragment != null ) getSupportFragmentManager ( ) . beginTransaction ( ) . remove ( proxmark3TuneDialogFragment ) . commit ( ) ; }
public Usdtinr withOpen ( int open ) { this . open = open ; return this ; }
private static void setSummary ( Preference preference ) { setSummary ( preference , PreferenceManager . getDefaultSharedPreferences ( preference . getContext ( ) ) . getString ( preference . getKey ( ) , "" ) ) ; }
public static ILogsStore provideLogsStore ( ) { if ( isNull ( logsStore ) ) { synchronized ( Injection . class ) { if ( isNull ( logsStore ) ) { logsStore = new LogsStore ( provideApplicationContext ( ) ) ; } } } return logsStore ; }
public void testSafeToAddAuthToken15 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( wpcomAddress1 ) ) ) ; }
public void onClickSoonChain ( String clickedChainName ) { if ( getActivity ( ) != null ) { DonateDialog . getInstance ( ) . show ( getActivity ( ) . getSupportFragmentManager ( ) , DonateDialog . TAG ) ; } }
public WorldEvent ( boolean cancelable ) { super ( cancelable , false ) ; }
public Action run ( Context context ) { ParallelAction action = Actions . parallel ( ) ; for ( Instruction instruction : mInstructions ) { action . addAction ( instruction . run ( context ) ) ; } return action ; }
private boolean shouldShowServerItem ( ServerConnectionInfo info ) { return info . getChannels ( ) == null || info . getChannels ( ) . size ( ) == 0 ; }
public void onAnimationEnd ( Animation animation ) { if ( callback != null ) callback . onAnimationFinish ( 0 ) ; }
public void onRefresh ( ) { if ( storiesAdapter . getCount ( ) == 0 ) { fetchNewestStories ( ) ; } else { fetchNewStories ( false ) ; } }
private static String formatGenericCurrency ( Context ctx , Long balance ) { Locale current = ctx . getResources ( ) . getConfiguration ( ) . locale ; return String . format ( current , PrecisionEnum . FIVE_DIGIT . getFormat ( ) , ( balance / 1000000000F ) ) ; }
public void solveOneMoveRowTrue ( ) { Level solvedLevel = sut . solve ( levelTranslator . fromString ( LEVEL_ONE_MOVE_ROW ) ) ; assertThat ( solvedLevel , notNullValue ( ) ) ; assertThat ( solvedLevel . getMinimumMovesToSolve ( ) , is ( 1 ) ) ; }
public void signUpWithMagicLink ( ) { new SignupFlow ( ) . chooseContinueWithWpCom ( ) . enterEmail ( E2E_SIGNUP_EMAIL ) . openMagicLink ( mMagicLinkActivityTestRule ) . checkEpilogue ( E2E_SIGNUP_DISPLAY_NAME , E2E_SIGNUP_USERNAME ) . enterPassword ( E2E_SIGNUP_PASSWORD ) . dismissInterstitial ( ) . confirmSignup ( ) ; }
public void recycleBitmaps ( ) { rootLayer . recycleBitmaps ( ) ; }
public void toggleAlbumArtBackground ( int visibility ) { snappyRecyclerView . setTransparency ( ) ; }
public void goToPostAction ( ) { Intent intent = new Intent ( this , PostAction . class ) ; startActivity ( intent ) ; }
public void reset ( ) { mEventReceived = false ; mHandler . removeCallbacks ( mTransitionToIdle ) ; }
public ControlItem ( JSONObject object ) { item = object ; }
public static int colorByChangingValue ( int originalColor , float newValue ) { float [ ] hsv = ColorToHSV ( originalColor ) ; hsv [ 2 ] = newValue ; return HSVToColor ( alpha ( originalColor ) , hsv ) ; }
public void onBindViewHolder ( DownloadProgressViewHolder holder , int position ) { holder . bind ( downloadInfos . get ( position ) ) ; }
public void onClick ( View v ) { songsManager . shufflePlay ( songsManager . allSongs ( ) ) ; }
public com . coinomi . core . protos . Protos . DeterministicKeyOrBuilder getDeterministicKeyOrBuilder ( ) { if ( deterministicKeyBuilder_ != null ) { return deterministicKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return deterministicKey_ ; } }
public BitmapDescriptor [ ] getLabels ( ) { return labels ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; Title = itemView . findViewById ( R . id . event_name ) ; delete_but = itemView . findViewById ( R . id . delete_but ) ; }
public boolean onLoadFailed ( @ Nullable GlideException e , Object model , Target < Drawable > target , boolean isFirstResource ) { customFAB . hide ( ) ; return false ; }
public void update ( int points ) { if ( gameLogic . hasWon ( ) ) return ; score += points ; output ( ) ; }
public static int activeModVersion ( ) { if ( mActiveMod . equals ( ModdingMode . REMIXED ) ) { return RemixedDungeon . versionCode ; } JSONObject version = JsonHelper . tryReadJsonFromAssets ( "version . json" ) ; return version . optInt ( "version" ) ; }
public void pause ( ) { downloading = false ; }
public void setColumnName ( String columnName ) { this . columnName = columnName ; }
public void setTotalWaived ( Integer totalWaived ) { this . totalWaived = totalWaived ; }
private void setupBitmaps ( AboutBuilder bundle ) { setBitmap ( ivCover , bundle . getCover ( ) ) ; setBitmap ( ivPhoto , bundle . getPhoto ( ) ) ; setBitmap ( ivAppIcon , bundle . getAppIcon ( ) ) ; }
public void onFailure ( Call < FirebaseMessage > call , Throwable t ) { Log . d ( TAG , "Message Failed send" ) ; Log . d ( TAG , t . getMessage ( ) ) ; }
public void setWallet ( Wallet wallet ) { this . wallet = wallet ; }
public void setBotUser ( String value ) { if ( inlineReturn != 0 ) { MessagesController . getInstance ( ) . sendBotStart ( currentUser , value ) ; } else { botUser = value ; updateBottomOverlay ( ) ; } }
public AbstractFilter ( @ Nullable NetworkDataSink sink ) { this ( ) ; mDataSink = sink ; }
public String getPage ( ) { return page ; }
public void onGetBucketFailureTracking ( Throwable e ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsHelper . PARAM_MESSAGE , e . getMessage ( ) ) ; analyticsHelper . trackGetBucketFailure ( bundle ) ; }
public LocalProperties provideLocalProperties ( Context context ) { return new LocalProperties ( context ) ; }
public Podcast getPrevInfo ( ) { return prevInfo_ ; }
public void getTaskLists_returnsTaskLists ( ) { setupTaskLists ( ) ; Collection < EventSource > taskLists = tasksProvider . getTaskLists ( ) ; assertThat ( taskLists , equalTo ( createTaskListsSources ( ) ) ) ; }
public VenueListAdapter ( Context context ) { super ( context , 0 ) ; }
private RemoteMediaServer getServerWithHostNum ( String hostNum ) { return new RemoteMediaServer ( null , null , null , new HostNum ( hostNum ) ) ; }
public com . google . protobuf . Any getExtensionOptions ( int index ) { if ( extensionOptionsBuilder_ == null ) { return extensionOptions_ . get ( index ) ; } else { return extensionOptionsBuilder_ . getMessage ( index ) ; } }
public Result convert ( ) { Result result = new Result ( ) ; try { DatabaseEntry entry = convertEntry ( _obj ) ; result . addEntry ( entry ) ; } catch ( DatabaseImporterEntryException e ) { result . addError ( e ) ; } return result ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState ) ; Logger . info ( "WearMenuFragment onCreateView" ) ; return inflater . inflate ( R . layout . activity_wear_menu , container , false ) ; }
public com . google . protobuf . AnyOrBuilder getMisbehaviourOrBuilder ( ) { if ( misbehaviourBuilder_ != null ) { return misbehaviourBuilder_ . getMessageOrBuilder ( ) ; } else { return misbehaviour_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : misbehaviour_ ; } }
private String getEIP712SignHash ( JSONObject typedData ) { try { return new EIP712 ( typedData ) . toEIP712TransactionHash ( ) ; } catch ( Exception e ) { throw new OstError ( "km_rs_grrows_4" , ErrorCode . EIP712_FAILED ) ; } }
public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer ( ) { super . getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer ( ) ; W widget = getWidget ( ) ; IAnswerData answer = widget . getAnswer ( ) ; assertEquals ( widget . getAnswerText ( ) , answer . getDisplayText ( ) ) ; }
public void setPromptCheckBoxChecked ( boolean checked ) { if ( checkBoxPrompt != null ) checkBoxPrompt . setChecked ( checked ) ; }
private SensorEventListener accelerometerListener = new SensorEventListener ( ) { @ Override public void onAccuracyChanged ( Sensor sensor , int accuracy ) { } @ Override public void onSensorChanged ( SensorEvent event ) { preview . onAccelerometerSensorChanged ( event ) ; } } ;
public void nextDay ( ) { LocalDate date = SchoolWeek . nextFrom ( new DateTime ( 2015 , 06 , 14 , 0 , 0 ) ) ; assertEquals ( "Sunday to next week" , 15 , date . getDayOfMonth ( ) ) ; }
private void send ( ) { mRegistration . metrics ( payload ) . enqueue ( new VialerStatisticsRequestCallback ( mLogger ) ) ; log ( ) ; resetPayload ( ) ; }
public String getDayMonth ( ) { return dayMonth ; }
public AbsSmartPlaylist ( ) { super ( ) ; this . iconRes = R . drawable . ic_queue_music_black_24dp ; }
public SQLiteDatabase getInstance ( Context context ) { mContext = context ; if ( legendsDB == null || ! legendsDB . isOpen ( ) ) { openDatabase ( ) ; } return legendsDB ; }
public void setPenaltyChargesPortion ( Integer penaltyChargesPortion ) { this . penaltyChargesPortion = penaltyChargesPortion ; }
public void noInternetConnectionDialog ( Context mContext ) { showDialog ( mContext , "Oops ! " , getString ( R . string . no_internet_message ) ) ; }
private void setCurrentItem ( ) { final Calendar mToday = Calendar . getInstance ( ) ; final int DAY = mToday . get ( Calendar . DAY_OF_WEEK ) ; mListView . setSelection ( ( DAY - 2 ) %7 ) ; }
public TimelineComment ( @ NonNull GitHubComment comment ) { this . comment = comment ; this . file = null ; }
public boolean onEditorAction ( TextView textView , int i , KeyEvent keyEvent ) { PrintLog ( "I2maxMain" , "afterTextChanged" , "Confirmed text : " + etxtSellingData . getText ( ) , LOG_LEVEL_INFO ) ; return true ; }
public int getMetaState ( ) { return metaState ; }
public void updateScore ( int difficulty , int performance ) { if ( fileWriter != null ) { fileWriter . updateScore ( difficulty , performance ) ; } }
public boolean canDelete ( ) { return api ( ) . isLoggedIn ( ) ; }
public boolean onCabItemClicked ( MenuItem menuItem ) { onMultipleItemAction ( menuItem , new ArrayList <> ( checked ) ) ; cab . finish ( ) ; uncheckAll ( ) ; return true ; }
public void onImagesChosen ( List < ChosenImage > images ) { for ( ChosenImage image : images ) { Image . createFromPath ( image . getOriginalPath ( ) , Subterminal . getActiveModel ( ) ) ; openFragmentForEntity ( Subterminal . getActiveModel ( ) ) ; } }
public void onTabSelected ( TabLayout . Tab tab ) { mAppBarLayout . setExpanded ( tab . getPosition ( ) != 2 ) ; }
public void setBackgroundColor ( int color ) { paint . setColor ( color ) ; invalidate ( ) ; }
public void setWidth ( float width , SizeLayout layoutType ) { size . getWidth ( ) . set ( width , layoutType ) ; }
public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { for ( WelcomeScreenPage page : this ) { page . onPageScrolled ( position , positionOffset , positionOffsetPixels ) ; } }
public void setCheckBoxState ( int state ) { checkBoxTriStates . setState ( state ) ; }
public ExtraBuilder setContactsInterface ( @ Nullable ContactsInterface contactsInterface ) { this . contactsInterface = contactsInterface ; return this ; }
public void setCustomSuggestionAdapter ( SuggestionsAdapter suggestionAdapter ) { this . adapter = suggestionAdapter ; RecyclerView recyclerView = ( RecyclerView ) findViewById ( R . id . mt_recycler ) ; recyclerView . setAdapter ( adapter ) ; }
public String getEmail ( ) { return email ; }
public MealDetailParams ( @ NonNull Meal meal , @ Nullable View sharedView ) { this . meal = meal ; this . sharedView = sharedView ; }
private double sqinchToacre ( double num ) { return num * 1 . 594E - 7 ; }
public final int compare ( final Item parItem , final Item parAnother ) { return parItem . getName ( ) . compareTo ( parAnother . getName ( ) ) ; }
public ContactHandler ( Map < Integer , Entity > objects , ModelInstance planet ) { this . objects = objects ; tempVector = new Vector3 ( ) ; this . planet = planet ; }
public boolean checkPassword ( CharSequence password ) { checkNotNull ( password ) ; checkState ( getKeyCrypter ( ) != null , "Key chain not encrypted" ) ; return checkAESKey ( getKeyCrypter ( ) . deriveKey ( password ) ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( PreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . pref_maps_settings ) ; }
public void onMapReady ( ) { loadPlace ( ) ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . setupView ( savedAccounts . get ( position ) ) ; }
public Waveform ( @ NotNull Context context ) { super ( context ) ; init ( context ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfLightning_Info ) ; }
public void setScripts ( HashMap < String , String > scripts ) { this . scripts = scripts ; }
public void onTabSelected ( TabLayout . Tab tab ) { setFilter ( tab . getPosition ( ) ) ; }
private void pulseFlash ( int pulseLength ) { Log . d ( "Habpanelview" , "pulseFlash : pulseLength = " + pulseLength ) ; synchronized ( fRunning ) { fPulseLength . set ( pulseLength ) ; fOn . set ( false ) ; fRunning . notifyAll ( ) ; } }
private void init ( ) { setOnPreferenceClickListener ( new OnPreferenceClickListener ( ) { @ Override public boolean onPreferenceClick ( Preference preference ) { copyDatabase ( getContext ( ) ) ; return true ; } } ) ; }
public void draw ( Canvas canvas ) { for ( Point bodyPoint : current ) { Painter . getActorPainter ( ) . drawCell ( bodyPoint , canvas ) ; } mouse . draw ( canvas ) ; }
public void setImageUri ( @ NonNull Optional < Uri > uri ) { imageHolderDelegate . displayImage ( uri ) ; }
public void flip ( ) { flipped = ! flipped ; getStyle ( ) . imageUp = DrawContext . skin . getDrawable ( flipped ? "icon - up" : "icon - down" ) ; }
public void onNext ( List < Location > locations ) { for ( Location locationItem : locations ) { locationList . add ( locationItem . getName ( ) ) ; } }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsDidLoaded ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats ) ; }
public MissionDAO ( Context context ) { super ( Mission . class , context ) ; }
public void pause ( ) { if ( mMediaPlayer . isPlaying ( ) ) { mMediaPlayer . pause ( ) ; } setStatus ( Status . PAUSED ) ; }
public static String getForumForTopicLink ( String topicLink ) { Matcher pageTopicLinkNumberMatcher = pageTopicLinkNumberPattern . matcher ( topicLink ) ; if ( pageTopicLinkNumberMatcher . find ( ) ) { return "http : } else { return "" ; } }
public void setDiscoverJson ( String json ) { discoverJson = StringUtils . notNullStr ( json ) ; }
public void onPositiveButtonClicked ( ) { mOnResponse . onPositiveResponse ( ) ; gotResponse = true ; dismiss ( ) ; }
public Sched ( Collection col ) { super ( col ) ; }
public void spawnTile ( Tile tile ) { grid . insertTile ( tile ) ; aGrid . startAnimation ( tile . getX ( ) , tile . getY ( ) , SPAWN_ANIMATION , SPAWN_ANIMATION_TIME , MOVE_ANIMATION_TIME , null ) ; }
public synchronized static boolean deleteCache ( Context con ) { return getStore ( con ) . deleteCache ( ) ; }
private void showCommentsClosedMessage ( boolean show ) { TextView txtCommentsClosed = ( TextView ) findViewById ( R . id . text_comments_closed ) ; if ( txtCommentsClosed != null ) { txtCommentsClosed . setVisibility ( show ? View . VISIBLE : View . GONE ) ; } }
public void testMinimalEncoder15 ( ) throws Exception { verifyMinimalEncoding ( "A1" , "ALPHANUMERIC ( A1 ) , TERMINATOR ( ) " , null , false ) ; }
public LoginRequest ( String email , String password , boolean gdprConsent ) { this . email = email ; this . password = password ; this . gdprConsent = gdprConsent ; }
public int getItemViewType ( int section , int position ) { if ( section < sharedMediaData [ 1 ] . sections . size ( ) ) { if ( position == 0 ) { return 0 ; } else { return 1 ; } } return 2 ; }
static public User fromString ( String str ) { return ServiceGenerator . getGson ( ) . fromJson ( str , User . class ) ; }
private static String getApplicationId ( ) { String applicationId = BuildConfig . APPLICATION_ID ; if ( applicationId . length ( ) > LOG_TAG_MAX_LENGTH ) { applicationId = applicationId . substring ( 0 , LOG_TAG_MAX_LENGTH ) ; } return applicationId ; }
public static void redirectToWebSite ( Activity from , String url ) { redirectUsingCustomTab ( from , url ) ; }
public void run ( ) { if ( steemReplyFetchCallback != null ) { steemReplyFetchCallback . onReplyFetchError ( ) ; } }
public Float getWidth ( Integer origin_width ) { return getValue ( origin_width , m_bitmap_origin_width , canvasWidth ) ; }
public String toString ( ) { return title + '\n' + content + '\n' + dateModified + '\n' + languageLocale + '\n' + color + '\n' + category + '\n' ; }
public void updateForumList ( List < Forum > newForums ) { this . forums = new ArrayList <> ( newForums ) ; notifyDataSetChanged ( ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . ln ) ; }
public void goSched ( View view ) { Intent newIntent = new Intent ( this , scheduleActivity . class ) ; startActivity ( newIntent ) ; }
public String getText ( ) { return textOptiune ; }
public DefaultItemMoveAnimationManager ( BaseItemAnimator itemAnimator ) { super ( itemAnimator ) ; }
public Wand ( ) { super ( ) ; calculateDamage ( ) ; try { image = handler . image ( this ) ; wood = handler . label ( this ) ; } catch ( Exception e ) { } }
public final ArrayList < SAFItem > getChildren ( Uri u ) { return getChildren ( ctx , u ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { if ( ! ( showLoading && loadPolicy . isLoading && position == ( getItemCount ( ) - 1 ) ) ) { onBindViewHolder_ ( ( VH ) holder , position ) ; } }
private static float [ ] ColorToHSV ( int originalColor ) { float [ ] hsv = new float [ 3 ] ; RGBToHSV ( red ( originalColor ) , green ( originalColor ) , blue ( originalColor ) , hsv ) ; return hsv ; }
public boolean hasPoint ( ) { return point != null ; }
private void showImportExport ( ) { AnswersProxy . get ( ) . logButton ( "Show Import Export" ) ; startActivityForResult ( new Intent ( BaseDrawerActivity . this , ImportExportActivity . class ) , REQUEST_IMPORT_EXPORT ) ; }
public void onBackPressed ( ) { if ( contextMenuFix ) { U . startFreeformHack ( this ) ; } U . sendBroadcast ( this , Constants . ACTION_HIDE_DASHBOARD ) ; }
public void showAllAuthorBooks ( AuthorInfo authorInfo ) { BrowsingActivity . this . OnAuthorItemItemClick ( authorInfo ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_view_trash , menu ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public ViolationItem ( String videoUrl , String videoUrlPrev , long violationTime ) { this . videoUrl = videoUrl ; this . videoUrlPrev = videoUrlPrev ; this . violationTime = violationTime ; }
public void tryPushIfUpdated ( RevCommit commit ) throws IOException { if ( ! commit . equals ( currentHead ( ) ) ) { tryPush ( ) ; } }
private void refreshPeopleListFragment ( ) { PeopleListFragment peopleListFragment = getListFragment ( ) ; if ( peopleListFragment != null ) { peopleListFragment . refreshPeopleList ( ) ; } }
public Intent getIntent ( ) { return null ; }
public void create ( ) { menuScreen = new MenuScreen ( this ) ; setScreen ( menuScreen ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_8 . getText ( ) . toString ( ) ) ; }
public void onEvent ( EventBusMSGNormal msg ) { switch ( msg . MSGType ) { case EventBusMSG . TRACKLIST_SELECT : case EventBusMSG . TRACKLIST_DESELECT : EvaluateVisibility ( ) ; } }
private void setDateToday ( LocalDate date ) { portfolio . setDateToday ( date ) ; view . displayTodayDate ( portfolio . dateToday ( ) ) ; }
public ListPreferenceDialog < FormManagementPage > clickUpdateForms ( ) { clickOnString ( R . string . form_update_mode_title ) ; return new ListPreferenceDialog <> ( R . string . form_update_mode_title , this , rule ) . assertOnPage ( ) ; }
public void syncPostObjectWithUiAndSaveIt ( @ Nullable AfterSavePostListener listener ) { savePostAsync ( listener ) ; }
private void addNewColor ( ) { addNewColor ( Theme . getSimilarColor ( colors . get ( selectedColor ) ) ) ; }
public String getLastDownloadItemWithError ( ) { return mPerInstallationPrefs . getString ( QuranDownloadService . PREF_LAST_DOWNLOAD_ITEM , "" ) ; }
public void showEvents ( ArrayList < Event > events ) { eventListAdapter . replaceEvents ( events ) ; }
public void setTime ( String time ) { this . time = title ; }
public static UserPostListingURL getSaved ( String username ) { return new UserPostListingURL ( Type . SAVED , username , null , null , null , null ) ; }
public void setInitiator ( final Jid initiator ) { Preconditions . checkArgument ( initiator . isFullJid ( ) , "initiator should be a full JID" ) ; findChild ( "jingle" , Namespace . JINGLE ) . setAttribute ( "initiator" , initiator . toEscapedString ( ) ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `revision` INTEGER" ) ; }
public void setOnFoldRotationListener ( OnFoldRotationListener listener ) { mFoldRotationListener = listener ; }
public void setQuranMode ( ) { if ( mIsShowingTranslation ) { mIsShowingTranslation = false ; notifyDataSetChanged ( ) ; } }
public List < AnswerDbo > getAnswers ( ) { return answers ; }
private static void setDebugMode ( final boolean enabled ) { mLevel = enabled ? LOG_LEVEL_DEBUG : LOG_LEVEL_NORMAL ; }
public void onShowPreferences ( ) { Intent intent = new Intent ( this , Preferences . class ) ; startActivity ( intent ) ; }
public void process ( MapElement element ) { mapDataSink . process ( element ) ; }
public void currentChanged ( Track track , int index ) { updateTrackRecords ( track ) ; updateNextButton ( ) ; }
public static void setGutenbergBlockTypeImpressions ( Map < String , Double > newImpressions ) { String json = GSON . toJson ( newImpressions ) ; setString ( DeletablePrefKey . GUTENBERG_BLOCK_TYPE_IMPRESSIONS , json ) ; }
public String getQuality ( ) { return quality ; }
public void onTouchEvent ( RecyclerView rv , MotionEvent e ) { }
public void setType ( int blurType ) { type = blurType ; }
public void setPlaybackParameters ( @ Nullable PlaybackParameters playbackParameters ) { player . setPlaybackParameters ( playbackParameters ) ; }
public RecyclerView . ViewHolder createViewHolder ( View view ) { return new ViewHolder ( view ) ; }
public void onStartListening ( ) { super . onStartListening ( ) ; }
public void onDismiss ( DialogInterface dialogInterface ) { activity . onRefresh ( ) ; }
public AscendingPeriodClassifier getTodayClassifier ( ) { return TODAY ; }
public void onTabSelected ( TabLayout . Tab tab ) { viewPager . setCurrentItem ( tab . getPosition ( ) ) ; setPageTitle ( tab , pagerAdapter ) ; }
public void onKey ( int primaryCode , int mask ) { mKeyboardActionListener . onKey ( primaryCode , mask ) ; dismissPopupKeyboard ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { if ( mFile != null ) { mData . setOnCompletionListener ( null ) ; mListener . onRecordingSuccessful ( mFile ) ; mStatus = STATUS_SEND ; } }
public void performButtonBackPress ( ) { if ( buttonBackFunction == BUTTON_BACK_FUNCTION_SKIP ) { goToSlide ( getCount ( ) ) ; } else if ( buttonBackFunction == BUTTON_BACK_FUNCTION_BACK ) { previousSlide ( ) ; } }
public boolean hasPool ( ) { return ( ( bitField0_ & 0x00000004 ) == 0x00000004 ) ; }
public void run ( ) { pendingRefresh = false ; loadPlaylist ( ) ; }
public static boolean getCache ( Context context , String key , boolean defaultValue ) { SharedPreferences sp = context . getSharedPreferences ( TagsUtil . SHARED_PREFS_NAME , Context . MODE_PRIVATE ) ; return sp . getBoolean ( key , defaultValue ) ; }
public com . coinomi . core . protos . Protos . PeerAddress getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . PeerAddress . getDefaultInstance ( ) ; }
public com . google . protobuf . Any getEvidence ( int index ) { if ( evidenceBuilder_ == null ) { return evidence_ . get ( index ) ; } else { return evidenceBuilder_ . getMessage ( index ) ; } }
public NoteTag ( int noteId , @ NonNull String tagName ) { this . noteId = noteId ; this . tagName = tagName ; }
public Config setWarningIcon ( @ Nullable Drawable warningIcon ) { this . warningIcon = warningIcon ; return this ; }
public static void bootstrap ( ) throws Exception { hostKeyProvider = new TestKeyProvider ( ) ; userKeyProvider = new TestKeyProvider ( ) ; createSshServer ( ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { if ( getCurrentWord ( ) . length ( ) > 1 ) suggestionsVM . suggest ( getCurrentWord ( ) ) ; else onHideSuggestions ( ) ; }
public PointWithRadius ( String number , double east , double north , int _vertexNumber ) { super ( number , east , north , 0 . 0 , false ) ; this . radius = 0 . 0 ; this . vertexNumber = _vertexNumber ; }
public DBHelper ( Context context ) { super ( context , DB_NAME , null , DB_VERSION ) ; }
public ProfilManager ( Context context ) { this . context = context ; }
public synchronized List < MessageWithImage > get ( Integer appId ) { return combiner . combine ( state . state ( appId ) . messages , applicationHolder . get ( ) ) ; }
public Object getItem ( int section , int position ) { return mSource . getCategories ( ) . get ( section ) . getEntries ( ) . get ( position ) ; }
public StackValue get ( int position ) throws CalculatorException { this . requiresSize ( position + 1 ) ; return this . stack . get ( position ) ; }
public static void showAddDrink ( JalkametriActivity parent ) { LogUtil . i ( TAG , "Adding a drink" ) ; DrinkActivities . startSelectDrink ( parent ) ; }
public Location getCurrentLocation ( ) { if ( currentLocation == null ) { setDefaultLocation ( ) ; } return currentLocation ; }
public void onValueChanged ( Integer value ) { onAlphaChanged ( ) ; }
public static String getRecoveryPartition ( ) { if ( recovery == null ) for ( String partition : Recovery ) if ( Utils . existFile ( partition ) ) { recovery = partition ; return partition ; } return recovery ; }
public void subscribe ( ContentContract . View view ) { mView = view ; loadArticleHtml ( ) ; }
public void onCommentDeleted ( ) { removeCommentAt ( index ) ; }
public AddUserGroupRequest ( int gid , String userEmail ) { this . gid = gid ; this . userEmail = userEmail ; }
public String getWeatherKey ( ) { return prefs . getString ( Constants . OWM_KEY , Constants . OWM_APP_ID ) ; }
public void run ( ) { setViewState ( StatusCode . CONTENT ) ; s . dismiss ( ) ; }
private void sendJinglePacket ( JinglePacket packet ) { mXmppConnectionService . sendIqPacket ( account , packet , responseListener ) ; }
public List < Kd2QueryCode > getQuery_code ( ) { return query_code ; }
public boolean hasInputTimestamp ( ) { return ( ( bitField0_ & 0x00000010 ) == 0x00000010 ) ; }
public Number getDomainOrigin ( ) { return calculatedDomainOrigin ; }
public void onFailure ( Call < BeverageDetailsResponse > call , Throwable t ) { Log . e ( TAG , "Error getting beverage details" , t ) ; mException . setValue ( t ) ; }
public SessionRecord loadSession ( AxolotlAddress address ) { SessionRecord session = mXmppConnectionService . databaseBackend . loadSession ( this . account , address ) ; return ( session != null ) ? session : new SessionRecord ( ) ; }
public static Model getModel ( String uid , FragmentActivity activity ) { return ViewModelProviders . of ( activity , new UserProfileViewModelFactory ( uid ) ) . get ( Model . class ) ; }
public PlantCategory on ( API api ) { if ( apiIdToCategory . containsKey ( api . id ( ) ) ) { return apiIdToCategory . get ( api . id ( ) ) ; } return NULL ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor data ) { mDrinkAdapter . swapCursor ( data ) ; }
public void draw ( Canvas canvas ) { if ( canDraw ) { canvas . drawBitmap ( bitmap , bodySrc , bodyDst , null ) ; if ( ! gamePaused ) bodyDst . offsetTo ( bodyDst . left - 4f , bodyDst . top ) ; } }
public boolean setAudioSessionId ( final int sessionId ) { try { mCurrentMediaPlayer . setAudioSessionId ( sessionId ) ; return true ; } catch ( IllegalArgumentException | IllegalStateException e ) { return false ; } }
public PaletteTargetBuilder action ( @ NonNull PaletteBitmapViewTarget . PaletteAction action ) { actions . add ( action ) ; return this ; }
public int compare ( Messages message1 , Messages message2 ) { return message2 . getTsDate ( ) . compareTo ( message1 . getTsDate ( ) ) ; }
public void run ( ) { MessagesController . getInstance ( ) . processLoadedUserPhotos ( res , did , offset , count , max_id , true , classGuid ) ; }
public String getCisId ( ) { return cisId ; }
private boolean isChallengesLoaded ( ) { return this . groupChallenge != null ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new NotesFactory ( getApplicationContext ( ) , intent ) ; }
public void onStartTrackingTouch ( SeekBar seekBar ) { handler . removeCallbacks ( syncPlayer ) ; }
public void onChannelListChanged ( ServerConnectionInfo connection , List < String > newChannels ) { getActivity ( ) . runOnUiThread ( ( ) -> { mSectionsPagerAdapter . updateChannelList ( ) ; } ) ; }
public void run ( ) { openTransaction ( mRequestedTransactionWalletIndex , mRequestedTransactionID ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . brainovation . androidmvparchitecture" , appContext . getPackageName ( ) ) ; }
public boolean isSendingMessage ( int mid ) { return sendingMessages . containsKey ( mid ) ; }
public SearchBar ( @ NonNull Context context ) { super ( context ) ; }
public static void cancel ( final Context context ) { NotificationManager nm = ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ; nm . cancel ( NOTIF_ID ) ; }
private ShaderWallpaperEngine ( ) { super ( ) ; ShaderEditorApplication . preferences . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; setTouchEventsEnabled ( true ) ; }
public static ArrayList < CategoryNode > getSortedListOfCategoriesFromRoot ( CategoryNode node ) { ArrayList < CategoryNode > sortedCategories = new ArrayList < CategoryNode > ( ) ; preOrderTreeTraversal ( node , 0 , sortedCategories ) ; return sortedCategories ; }
private void changeSilentPrefs ( ) { boolean isChecked = binding . soundOptionPrefs . isChecked ( ) ; binding . soundOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdaySilentEnabled ( ! isChecked ) ; }
public boolean getAndroidBackupServiceEnabled ( ) { return getBoolean ( R . string . settings_key_enable_android_backup_service , false ) ; }
public AudioButton ( Context context ) { super ( context ) ; initView ( ) ; }
public KGammaProfiles getKGamma ( ) { try { if ( kgammaProfiles == null && JSON != null ) kgammaProfiles = new KGammaProfiles ( JSON . getJSONArray ( "k_gamma" ) ) ; return kgammaProfiles ; } catch ( JSONException e ) { return null ; } }
public All_EmojiLite_Provider ( Context context , EmojiTone emojiTone ) { this . context = context ; this . emojiDb = new EmojiDb ( context ) ; this . allEmoji = this . emojiDb . getAllEmojiLite ( ) ; this . tone = emojiTone ; }
public ImgurUploadTask ( Uri imageUri ) { Crashlytics . log ( Log . INFO , "IRCCloud" , "Uploading image to " + UPLOAD_URL ) ; mImageUri = imageUri ; mBuffer = buffer ; setActivity ( MainActivity . this ) ; }
public void onStartTrackingTouch ( @ NonNull Slider slider ) { activity . setTrackingTouch ( true ) ; }
public int getKey_symbol_offset_y ( ) { return key_symbol_offset_y ; }
public static TagViewModel createTagViewModel ( ) { return new TagViewModel ( id , name ) ; }
private void obtainReplyTextFromRemoteInputBundle ( Bundle bundle ) { CharSequence replyText = bundle . getCharSequence ( EXTRA_VOICE_OR_INLINE_REPLY ) ; if ( replyText != null ) { mReplyText = replyText . toString ( ) ; } }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitConditionalBooleanExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
private void startThread ( Runnable run ) { if ( thread != null ) thread . interrupt ( ) ; thread = new Thread ( run ) ; thread . start ( ) ; }
public void onAnimationEnd ( Animator animation ) { mBookmarkFrame . setVisibility ( View . INVISIBLE ) ; userDataDBHelper . RemoveBookmark ( pageRowId ) ; }
public static File getRawFile ( @ NonNull String rawFileName ) { return new File ( RAW_DIR + rawFileName ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . share_menu , menu ) ; return true ; }
private void setPolygonGrey ( GeoJsonLayer layer ) { GeoJsonPolygonStyle polyStyle = layer . getDefaultPolygonStyle ( ) ; polyStyle . setFillColor ( FILL_GREY ) ; polyStyle . setStrokeColor ( STROKE_GREY ) ; polyStyle . setStrokeWidth ( 3f ) ; }
public DAOMapperTreeSet ( Comparator < ? super E > comparator ) { super ( comparator ) ; this . daoList = new ArrayList < DAO > ( ) ; this . notifyOnChange = true ; }
public StoragePref getStoragePref ( ) { return storagePref ; }
public String getBody ( ) { return findChildContent ( "body" ) ; }
public void enqueue ( ImageViewTileLoader tile ) { synchronized ( mQueue ) { mQueue . addLast ( tile ) ; mThreads . triggerOne ( ) ; } }
public List < LatestRun > getRuns ( ) { return runs ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { photo = Photo . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; caption = stream . readString ( exception ) ; }
public static CommandResult execCommand ( String command , boolean isRoot , boolean isNeedResultMsg ) { return execCommand ( new String [ ] { command } , isRoot , isNeedResultMsg ) ; }
public static void redirectToPointsManagerActivity ( Activity currentActivity ) { Intent pointsManagerIntent = new Intent ( currentActivity , PointsManagerActivity . class ) ; currentActivity . startActivity ( pointsManagerIntent ) ; }
public ItemManager . WebItem getSelectedItem ( ) { return multiPaneListener . getSelectedItem ( ) ; }
public void onSelectAll ( ) { mCommandEditor . runOp ( mCommandEditor . selectAll ( ) ) ; }
public PostActivityVM ( int conversationId , String title ) { this . conversationId = conversationId ; this . title = title ; }
public void onBackPressed ( ) { Log . w ( TAG , "onBackPressed ( ) " ) ; if ( container . isInputOpen ( ) ) container . hideCurrentInput ( composeText ) ; else super . onBackPressed ( ) ; }
private CustomDecksDatabase ( @ Nullable Context context ) { super ( context , "custom_decks . db" , null , 14 ) ; }
public Long getKgNr ( ) { return kgNr ; }
public void testIsTest_isTestCompile ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . getName ( ) ) . thenReturn ( "testCompile" ) ; assertTrue ( dependencyTask . isTest ( configuration ) ) ; }
public Size getPreviewSize ( ) { return mPreviewSize ; }
public Integer getIcon ( ) { return icon ; }
public void onEvent ( RegisterVideoOutput videoOutput ) { if ( mPlaybackService != null && mPlaybackService instanceof MediaPlayerPlaybackService ) { ( ( MediaPlayerPlaybackService ) mPlaybackService ) . setVideoView ( videoOutput . surfaceView , videoOutput . parentResizableView ) ; } }
public void setFeedPoster ( String feedPoster ) { this . feedPoster = feedPoster ; }
private void dropSmState ( ) { smSessionId = null ; unacknowledgedStanzas = null ; ackPending = false ; }
public static void load ( ) { for ( String prop : sProps ) { ROM_VERSION = RootUtils . getProp ( prop ) ; if ( ! ROM_VERSION . isEmpty ( ) ) { break ; } } }
public void onLowMemory ( ) { super . onLowMemory ( ) ; mapView . onLowMemory ( ) ; }
public void onPropertyChanged ( Observable observable , int i ) { showToast ( viewModel . toastContent . get ( ) ) ; }
public void setCurrent ( int current ) { this . mCurrent = current ; updateView ( ) ; }
public void testObjectNotEqualsAddr ( ) { ComputerParcelable computerParcelable = new ComputerParcelable ( "com1" , "1" ) ; Object object = new ComputerParcelable ( "com1" , "2" ) ; assertTrue ( computerParcelable . equals ( object ) == false ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { historyDataManager . deleteHistory ( rngType ) ; historyAdapter . clear ( ) ; dialog . setContent ( R . string . no_history ) ; }
private void showPermissionsError ( ) { showErrorInternal ( R . string . import_data_permissions_error ) ; }
public void setEstado ( EstadoGuerrero estado ) { this . estado = estado ; }
public String humanReadableName ( Context context , boolean shorter ) { return humanReadablePath ( ) ; }
public SimpleDividerItemDecoration ( Context context ) { mDivider = ResourcesCompat . getDrawable ( getResources ( ) , R . drawable . line_divider , null ) ; }
public void radius ( float value ) { scale . set ( ( this . radius = value ) / RADIUS ) ; }
public void onBindViewHolder ( CollectionViewHolder holder , int position ) { BooksCollection booksCollection = booksCollections . exact ( position ) . getBooksCollection ( ) ; holder . setupRecyclerView ( booksCollection , bookCardEventsCallback , false ) ; }
public void onBufferedAmountChange ( long l ) { Log . w ( TAG , "onBufferedAmountChange : " + l ) ; }
public void setAutocompleteView ( ) { mSearchView . setAutocompleteView ( ) ; }
public void setItemClickListener ( ItemClickListener listener ) { this . listener = listener ; }
public void submit ( ) { this . setAttribute ( "type" , "submit" ) ; removeNonFieldChildren ( ) ; for ( Field field : getFields ( ) ) { field . removeNonValueChildren ( ) ; } }
private ScrollToTop getFragment ( int fragmentId ) { return Objects . requireNonNull ( mFragments . get ( fragmentId ) ) ; }
public Properties getProperties ( ) { return null ; }
public void act ( float delta ) { if ( mTriggered ) { mRacer . resetBonus ( ) ; mMine . drop ( ) ; mPool . free ( this ) ; } }
public T getTopDiscard ( ) { if ( ( order != null ) && ( ( tos + 1 ) < order . length ) ) { return order [ tos + 1 ] ; } return null ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; storeCorrectAnswers ( ) ; }
public final void detachView ( ) { onDetach ( ) ; disposables . clear ( ) ; view = null ; }
public void registerListener ( SharedPreferences . OnSharedPreferenceChangeListener listener ) { mSharedPref . registerOnSharedPreferenceChangeListener ( listener ) ; }
private void removeAssociations ( ) { removeForeignKeyColumns ( ) ; removeIntermediateTables ( ) ; }
private void enableRetry ( ) { retryDownload = true ; retry_counter ++ ; }
public void setDate ( String date ) { this . date = title ; }
public void setValueNum ( int valueNum ) { this . mValueNum = valueNum ; }
private Intent getCreatePassphraseIntent ( ) { return getRoutedIntent ( PassphraseCreateActivity . class , getIntent ( ) , null ) ; }
public void setColor ( final int _color ) { mCurColor = _color ; mBrushPaint . setColor ( mCurColor ) ; invalidate ( ) ; }
public TotalSpeedMode ( ) { super ( "total_speed" , "Total Speed" , 0 , 200 * Convert . MPHf ) ; }
public void onTimeSelected ( Date from , Date to ) { updateLabel ( ) ; }
public String undoName ( Resources res ) { Undoable type = undoType ( ) ; if ( type != null ) { return type . name ( res ) ; } return "" ; }
public void register ( ) { if ( ! pausing ) { return ; } pausing = false ; openCameraAsync ( ) ; }
private static int getFilePermissions ( String path ) throws RootNotPermittedException { String line = RootHelper . runShellCommand ( "stat - c %a \"" + path + "\"" ) . get ( 0 ) ; return Integer . valueOf ( line ) ; }
public void viewPagerRefreshOne ( ) { albumArtAdapter = new ImagePagerAdapter ( getSupportFragmentManager ( ) , songsManager . queue ( ) . size ( ) ) ; albumArtViewpager . setAdapter ( albumArtAdapter ) ; albumArtViewpager . setCurrentItem ( sharedPrefsUtils . readSharedPrefsInt ( "musicID" , 0 ) ) ; }
public boolean set ( T result ) { synchronized ( this ) { if ( completed || canceled ) return false ; this . result = result ; this . completed = true ; } notifyAllListeners ( ) ; return true ; }
public void onClick ( View v ) { ImportDialog . this . dismiss ( ) ; }
public TestComponentRule ( Context context ) { this . context = context ; DigitalismaApplication application = DigitalismaApplication . get ( context ) ; testComponent = DaggerTestComponent . builder ( ) . appTestModule ( new AppTestModule ( application ) ) . build ( ) ; }
public int getPriority ( ) { Duration duration = Duration . between ( ZonedDateTime . now ( ) , event . first . getStart ( ) ) ; return PriorityUtils . lerp ( ( int ) duration . toHours ( ) , 0 , 744 ) ; }
public static void refreshTokenOnServer ( ) { FirebaseMessageReceiver . refreshTokenOnServer ( ) ; }
public static Config getInstance ( ) { if ( sInstance == null ) { sInstance = new Config ( ) ; } return sInstance ; }
public void onProgressChanged ( WebView view , int progress ) { activity . setProgress ( progress * 1000 ) ; }
public static void setStringPreference ( Context context , String key , String value ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( key , value ) . commit ( ) ; }
public final void mark ( final int readlimit ) { mMark = getPosition ( ) ; }
public int getItemCount ( ) { return listaPerguntas . size ( ) ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent event ) { if ( actionId == EditorInfo . IME_ACTION_DONE ) { mAddButton . performClick ( ) ; return true ; } return false ; }
public void onClick ( View v ) { if ( null != mListener ) { mListener . startDetailScreen ( holder . mItem ) ; } }
public void setAllowedDocumentTypes ( List < IdentifierType > allowedDocumentTypes ) { this . allowedDocumentTypes = allowedDocumentTypes ; }
public void addItem ( View v ) { buttons . addView ( v ) ; }
public static void clear ( Activity context ) { getEditableSharedPreferences ( context ) . clear ( ) . apply ( ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mCallbacks = ( NavigationDrawerCallbacks ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( "Activity must implement NavigationDrawerCallbacks . " ) ; } }
public static com . coinomi . core . protos . Protos . AddressStatus parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public PhotoSizeEntity setW ( String w ) { this . w = w ; return this ; }
public boolean isBigger1_4 ( ) { return ( mCurrentTranslate - minPosition ) * 4 > ( getMaxPosition ( ) - minPosition ) ; }
private void thenListUpdated ( boolean expected ) { assertEquals ( expected , mListUpdated ) ; }
public void showPostSettingsTagsFragment ( ) { PostSettingsTagsFragment postSettingsTagsFragment = PostSettingsTagsFragment . newInstance ( mSite , mTags ) ; getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . fragment_container , postSettingsTagsFragment , PostSettingsTagsFragment . TAG ) . commit ( ) ; }
public ActionBarMenuItem addItemWithWidth ( int id , int icon , int width ) { return addItem ( id , icon , isActionMode ? parentActionBar . itemsActionModeBackgroundColor : parentActionBar . itemsBackgroundColor , null , width , null ) ; }
public Builder clearScriptBytes ( ) { bitField0_ = ( bitField0_ & ~0x00000002 ) ; scriptBytes_ = getDefaultInstance ( ) . getScriptBytes ( ) ; onChanged ( ) ; return this ; }
private RangeDecimalWidget createWidget ( FormEntryPrompt prompt ) { return new RangeDecimalWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) ) ; }
private void openSettings ( Context context , String packageName ) { Tuils . openSettingsPage ( context , packageName ) ; }
public void setType ( int mType ) { this . mType = mType ; }
private Model getAction ( String keyStr ) { Model model = new Model ( ) ; model . setType ( ActionType . ACTION ) ; model . setAction ( wrapper . getAction ( keyStr ) ) ; return model ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return ( new ListRemoteViewsFactory ( this . getApplication ( ) , intent ) ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( listAdapter != null ) { listAdapter . notifyDataSetChanged ( ) ; } }
public static void firstStart ( Context context ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; settings . edit ( ) . putBoolean ( "firstStart" , true ) . apply ( ) ; }
public List < RecipeMethodTable > getDbRecipeMethodTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getRecipeMethodTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public void setLines ( final int _lines ) { mLines = _lines ; }
public static Intent startLibraryActivity ( Context context ) { return new Intent ( context , LibraryActivity . class ) ; }
public void setAussersonder ( String aussersonder ) { this . _aussersonder = aussersonder ; }
public int getErr ( ) { return err ; }
private File getCachedFile ( ) { String dir = QuranFileUtils . getQuranDatabaseDirectory ( appContext ) ; return new File ( dir + File . separator + CACHED_RESPONSE_FILE_NAME ) ; }
public int findSordIdFromTorrentFields ( Context context , String [ ] fields ) { SortByFields [ ] sortByFields = getSortByFields ( context ) ; return TorrentUtils . findSordIdFromTorrentFields ( context , fields , sortByFields ) ; }
public void onBindViewHolder ( PreferenceViewHolder holder ) { super . onBindViewHolder ( holder ) ; switchButton = ( SwitchCompat ) holder . findViewById ( R . id . switchButton ) ; switchButton . setOnCheckedChangeListener ( listener ) ; switchButton . setChecked ( isChecked ( ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; context = this . getApplicationContext ( ) ; dbHelper = new DatabaseHelper ( ) ; DatabaseManager . initializeInstance ( dbHelper ) ; Logger . addLogAdapter ( new AndroidLogAdapter ( ) ) ; }
public void onEvent ( CommandEvents . RequestStartStop startStop ) { if ( startStop . start ) { StartLogging ( ) ; } else { StopLogging ( ) ; } EventBus . getDefault ( ) . removeStickyEvent ( CommandEvents . RequestStartStop . class ) ; }
private void thenOnErrorIsCalled ( boolean expected ) { assertEquals ( expected , mOnErrorCalled ) ; }
public void setType ( int type ) { Type = type ; }
public String getTabToken ( ) { return user . getValue ( ) . getTabToken ( ) ; }
public ContactSupportScreen setMessageText ( String text ) { populateTextField ( textInput , text ) ; return this ; }
public void onBindViewHolder ( final ViewHolder holder , int position ) { DeviceLogModel item = getItem ( position ) ; holder . contentView . setText ( item . getDeviceLog ( ) ) ; }
public void testThatDegreesNoUnitNotPreciseWorks ( ) { assertThat ( TemperatureFormatter . Companion . getFormattedTemp ( settings , 231 , true ) ) . isEqualTo ( "23" ) ; }
public IndexedTreeSet ( Collection < ? extends E > c ) { this ( ) ; addAll ( c ) ; }
public T getEntryForXValue ( float xValue , float closestToY , Rounding rounding ) { int index = getEntryIndex ( xValue , closestToY , rounding ) ; if ( index > - 1 ) return mValues . get ( index ) ; return null ; }
public boolean onLongClick ( View v ) { if ( onClickListener != null ) { onClickListener . onClick ( ) ; return true ; } return false ; }
private void whenPreferenceChange ( Object newValue ) { uut . onPreferenceChange ( mTemperatureUnitsPreference , newValue ) ; }
public void onClick ( View view ) { showResistanceDialog ( thirdColor ) ; }
public void shouldNotPassValidation_invalidGivenName ( ) { patient . getPerson ( ) . getName ( ) . setGivenName ( INVALID_NAME_1 ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
private TripItem ( ) { mUUID = UUID . randomUUID ( ) ; }
public boolean wasStarted ( ) { return started ; }
public void didPressedReplyMessage ( ChatMessageCell cell , int id ) { MessageObject messageObject = cell . getMessageObject ( ) ; scrollToMessageId ( id , messageObject . getId ( ) , true , messageObject . getDialogId ( ) == mergeDialogId ? 1 : 0 ) ; }
public void onResume ( ) { super . onResume ( ) ; Timber . d ( "onResume ( ) " ) ; activityCallback . setTitle ( null ) ; activityCallback . setToolbarButton ( Toolbar . BUTTON_CREDITS ) ; activityCallback . showNet ( ) ; }
private BroadcastReceiver hideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideTaskbar ( true ) ; } } ;
public static void enableFade ( boolean enable , Context context ) { run ( Control . write ( enable ? "1" : "0" , LED_RED_FADE ) , LED_RED_FADE , context ) ; }
public String saveTorrentFilesIn ( ) { return fs . normalizeFileSystemPath ( pref . getString ( appContext . getString ( R . string . pref_key_save_torrents_in ) , Default . saveTorrentFilesIn ( appContext ) ) ) ; }
public Object getItem ( int position ) { return entries . get ( position ) ; }
public LruCache getDumpCache ( ) { return memoryCache ; }
public ArrayList < Album > getDataSet ( ) { return dataSet ; }
public void setUp ( ) { mClientChargePresenter = new ClientChargePresenter ( mDataManager ) ; mClientChargePresenter . attachView ( mClientChargeMvpView ) ; chargesPage = FakeRemoteDataSource . getClientCharges ( ) ; }
private void closeDrawer ( ) { if ( mActivity . drawerLayout != null ) { mActivity . drawerLayout . closeDrawer ( GravityCompat . START , true ) ; } }
private boolean shouldCancelDragOnDataUpdated ( ) { if ( DEBUG_BYPASS_MOVE_OPERATION_MODE ) { return false ; } return isDragging ( ) ; }
public void missingKeySetsPreference ( ) { getForMissingKey ( ) ; Mockito . verify ( mockEditor ) . putString ( MISSING_KEY , LAMBDA_RETURN ) ; Mockito . verify ( mockEditor ) . apply ( ) ; }
private View . OnClickListener onSecureView = new View . OnClickListener ( ) { @ Override public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintSecureView . class ) ) ; } } ;
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; saver . onSaveState ( outState ) ; }
public boolean onQueryTextChange ( String s ) { String input = s . toLowerCase ( ) ; mViewModel . doSearch ( input ) ; return true ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; TupleFolderEx folder = filtered . get ( position ) ; holder . bindTo ( folder ) ; holder . wire ( ) ; }
public PlaceModelAssembler withPlate ( String pattern ) { if ( plates == null ) { plates = new ArrayList <> ( ) ; } plates . add ( PlateModel . create ( pattern , "" ) ) ; return this ; }
private double sqmTosqyard ( double num ) { return num * 1 . 1959900463 ; }
public MoveFileOperation ( String srcPath , String targetParentPath , Account account ) { mSrcPath = srcPath ; mTargetParentPath = targetParentPath ; if ( ! mTargetParentPath . endsWith ( OCFile . PATH_SEPARATOR ) ) { mTargetParentPath += OCFile . PATH_SEPARATOR ; } mFile = null ; }
public List < Person > loadInBackground ( ) { EspressoIdlingResource . increment ( ) ; return mPersonDebtsRepository . getAllPersons ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . kaushal . studentsearch" , appContext . getPackageName ( ) ) ; }
public int compareTo ( @ NonNull HistoryItem another ) { int compare = this . mTitle . compareTo ( another . mTitle ) ; if ( compare == 0 ) { return this . mUrl . compareTo ( another . mUrl ) ; } return compare ; }
public ThemeListPreference ( final Context context , final AttributeSet attrs , final int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public int getVersionCode ( Context context ) { return xml . getInt ( "android : versionCode" , context . getResources ( ) . getInteger ( R . integer . prop_version_code_default ) ) ; }
public void onPause ( ) { super . onPause ( ) ; this . monitoringController . stop ( ) ; }
public ArrayList < TLRPC . FileLocation > getImagesArrLocations ( ) { return null ; }
public void onPostSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) getSupportActivity ( ) ) . onPostSelected ( post ) ; }
public ReaderCardType getCardType ( ) { return cardType != null ? cardType : ReaderCardType . DEFAULT ; }
public void stop ( ) { if ( getNormal ( ) != null ) { getNormal ( ) . stop ( ) ; } setPadColorToDefault ( ) ; }
public MainMenuPage enableManualUpdates ( ) { return openProjectSettings ( ) . clickGeneralSettings ( ) . clickFormManagement ( ) . clickUpdateForms ( ) . clickOption ( R . string . manual ) . pressBack ( new ProjectSettingsPage ( ) ) . pressBack ( new MainMenuPage ( ) ) ; }
public void setPrincipalWrittenOff ( Integer principalWrittenOff ) { this . principalWrittenOff = principalWrittenOff ; }
public void setData ( SinglePlaylistViewModel . State state ) { mState = state ; notifyItemChanged ( 0 ) ; }
public boolean isUploading ( @ NonNull TrackFile trackFile ) { final TrackState state = trackState . get ( trackFile ) ; return state != null && state instanceof TrackState . TrackUploading ; }
public String getAuthorUuid ( ) { return this . authorUuid ; }
public void update ( ) { mPaintTextValue . setAntiAlias ( Settings . antiAlias ) ; updateButtonDimensions ( ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return FeedsFragment . newInstance ( ) ; case 1 : return MyGoalsFragment . newInstance ( ) ; case 2 : return RequestsFragment . newInstance ( ) ; } return null ; }
public int getDrawerFastScrollColor ( ) { return getInt ( R . string . pref_key__drawer_fast_scroll_color , ContextCompat . getColor ( Setup . appContext ( ) , R . color . op_red ) ) ; }
public Utility ( Context context ) { this . context = context ; }
public synchronized static Mediator getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new Mediator ( context ) ; } return mInstance ; }
private void addCreatedEventToAdapter ( Event event ) { int index = adapter . addItem ( event ) ; recyclerView . scrollToPosition ( index ) ; }
public void onFailure ( Call < ResTxInfo > call , Throwable t ) { WLog . w ( "onFetchClaimTx KAVA onFailure" ) ; if ( BaseConstant . IS_SHOWLOG ) t . printStackTrace ( ) ; onUpdateView ( ) ; }
public static boolean checkStoragePermission ( Context context ) { return ContextCompat . checkSelfPermission ( context , Manifest . permission . WRITE_EXTERNAL_STORAGE ) == PackageManager . PERMISSION_GRANTED ; }
public Object getChild ( int groupPosition , int childPosition ) { return groups . get ( groupPosition ) . children . get ( childPosition ) ; }
public void save ( ) { if ( cid != - 1 ) super . save ( ) ; }
public long getItemId ( int position ) { return filtered . get ( position ) . id ; }
public boolean forceBTdisconnect ( ) { return mBluetoothIcDevice . forceBTdisconnect ( ) ; }
public void shouldAddToDatabaseIfCorrectData ( ) { presenter . onSaveButtonPressed ( ) ; Mockito . verify ( runRepo ) . add ( run ) ; }
public void onCommentsUpdated ( ) { mComments = null ; setResult ( RESULT_OK ) ; setContentShown ( false ) ; forceLoaderReload ( 1 ) ; }
public void networkChange ( boolean samenetwork ) { if ( mWaitingForRelease ) releaseHold ( ) ; else if ( samenetwork ) managmentCommand ( "network - change\n" ) ; else managmentCommand ( "network - change\n" ) ; }
public void showRefreshing ( boolean refreshing ) { mTop10View . setRefreshing ( refreshing ) ; }
public void invalidateComposingKeys ( ) { List < Key > keys = mKeyboard . getComposingKeys ( ) ; if ( keys != null && keys . size ( ) > 5 ) invalidateAllKeys ( ) ; else invalidateKeys ( keys ) ; }
private List < String > extractNames ( ) { List < String > names = new ArrayList <> ( ) ; for ( Action action : list ) { names . add ( itemListSelector . getName ( ) ) ; } return names ; }
public StatisticsEntity ( String unit , ArrayList < String > values ) { this . unit = unit ; this . values = values ; }
public void onPlayingMetaChanged ( ) { Log . d ( TAG , "onPlayingMetaChanged" ) ; updatePlayingSongInfo ( ) ; updateQueuePosition ( ) ; }
public static boolean isClientActivated ( ) { synchronized ( sync ) { return currentUser != null ; } }
public ScaleAnimatedTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
private boolean checkAddress ( ) { boolean ok = checkAddressNoError ( ) ; if ( ! ok ) { etAddress . setError ( getString ( R . string . send_qr_address_invalid ) ) ; } else { etAddress . setError ( null ) ; } return ok ; }
public void onTapPhotoView ( ) { toggleTitle ( ) ; }
public void onSetRepeatMode ( int mode ) { mSession . setRepeatMode ( mode ) ; }
public void notifyDataSetChanged ( ) { hasHints = dialogsType == 0 && ! isOnlySelect && ! MessagesController . getInstance ( ) . hintDialogs . isEmpty ( ) ; super . notifyDataSetChanged ( ) ; }
public ItemLongClickListener ( EpisodeInfo info ) { info_ = info ; }
private float getMinFrame ( ) { if ( composition == null ) { return 0 ; } return minFrame == Integer . MIN_VALUE ? composition . getStartFrame ( ) : minFrame ; }
public ShareListAdapter ( LayoutInflater inflater , ProfileItemManager manager ) { this . inflater = inflater ; this . manager = manager ; this . profiles = new Vector < Model > ( ) ; updateProfileList ( null , false ) ; }
public DynamicAlertDialog show ( ) { final DynamicAlertDialog dialog = create ( ) ; dialog . show ( ) ; return dialog ; }
public void gotData ( long l , float [ ] f ) { if ( epFragment != null ) { epFragment . addValue ( f [ AttysComm . INDEX_Analogue_channel_1 ] ) ; } }
private int parse_add_char ( char c ) { if ( this . field_len == this . field_size ) return - 1 ; this . field [ this . field_len ++ ] = c ; return 0 ; }
public int getItemViewType ( int position ) { return isHeader ( position ) ? TYPE_HEADER : TYPE_CARD_ITEM ; }
public void onError ( Error error ) { mNewsDetailsView . showNewsItem ( null ) ; mNewsDetailsView . hideProgress ( ) ; }
private void setLocation ( ) { TextView tv = ( TextView ) rootView . findViewById ( R . id . location ) ; tv . setText ( location . trim ( ) ) ; }
public int getItemCount ( ) { return recentImages . size ( ) ; }
private @ FetchStatus int beginSync ( ) { if ( Utilities . isThereNetworkConnection ( getApplicationContext ( ) ) ) { return fetchClass ( ) ; } else { return SyncUtils . FETCH_STATUS_CLASS_UNSUCCESSFUL ; } }
public void filterLastPositions ( long startTimestamp ) { int [ ] contactIds = getContactIds ( chatId ) ; filterProvider . setLastPositionFilter ( startTimestamp ) ; applyFilters ( contactIds ) ; }
public void onServiceConnected ( ) { getService ( ) . registerOnApiChangeListener ( this ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { fab . show ( true ) ; }
public Event build ( ) { return new Event ( id , name , description , date , tags , favorite , reminder , reminderUnit , timeLapse , timeLapseUnit ) ; }
public void setPixel ( int x , int y , int color ) { bitmap . setPixel ( x , y , color ) ; }
public void setyPercent ( float yPercent ) { this . yPercent = yPercent ; }
private void hidePlotFragment ( ) { FrameLayout frameLayout = ( FrameLayout ) findViewById ( R . id . mainplotlayout ) ; frameLayout . setLayoutParams ( new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . MATCH_PARENT , LinearLayout . LayoutParams . MATCH_PARENT , 0 . 0f ) ) ; }
public static boolean isVibrateEnabled ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( PrefKeys . KEY_PREF_VIBRATE , false ) ; }
public void rotate ( ) throws Exception { mActivityRule . getActivity ( ) . setRequestedOrientation ( ActivityInfo . SCREEN_ORIENTATION_LANDSCAPE ) ; Thread . sleep ( 500 ) ; mActivityRule . getActivity ( ) . setRequestedOrientation ( ActivityInfo . SCREEN_ORIENTATION_PORTRAIT ) ; Thread . sleep ( 500 ) ; }
public boolean trySettingInputEnabled ( boolean inputEnabled ) { if ( mDoingTouch && ! inputEnabled ) { return false ; } mInputEnabled = inputEnabled ; mGrayBox . setVisibility ( inputEnabled? View . INVISIBLE : View . VISIBLE ) ; return true ; }
public DimPreferenceController ( final Context context ) { this . context = context ; this . preferences = context . getSharedPreferences ( "DimBlockPrefs" , Context . MODE_PRIVATE ) ; }
public static final Channel getChannel ( int channelId ) { for ( Channel c : Channel . values ( ) ) if ( c . getChannelId ( ) == channelId ) return c ; return null ; }
private void start ( ) { DesktopSecurityManager . setup ( ) ; new ClientCompatibility ( this , arg ) . startCubes ( ) ; }
public static void resetClass ( ) { machineStatus = new MachineStatusListner ( ) ; }
public static Factory getFactory ( ) { return new Factory ( ) { public CheapSoundFile create ( ) { return new CheapWAV ( ) ; } public String [ ] getSupportedExtensions ( ) { return new String [ ] { "wav" } ; } } ; }
public static String getKeyboardLayoutSetDisplayName ( @ NonNull final String layoutName ) { return sKeyboardLayoutToDisplayNameMap . get ( layoutName ) ; }
public void onClick ( View v ) { DialogFragment fragment = new DialogClearBellsFragment ( ) ; fragment . show ( getSupportFragmentManager ( ) , DIALOG_TAG_CLEAR_ALL_BELLS ) ; }
public ArticleTextExtractor addPositive ( String pos ) { return setPositive ( positiveStr + "|" + pos ) ; }
private long insert ( ContentValues values ) { return instancesDatabaseProvider . getWriteableDatabase ( ) . insertOrThrow ( INSTANCES_TABLE_NAME , null , values ) ; }
public void executeFileModel ( final FileModel fileModel , final View view ) { mFileLocalOverflowActions . show ( fileModel , view , mApplicationCallback . isLogged ( ) ) ; }
public void onVideoViewClick ( ) { Lg . i ( "onVideoViewClick" ) ; mLayoutCallControlButtons . setVisibility ( mLayoutCallControlButtons . getVisibility ( ) != View . VISIBLE ? View . VISIBLE : View . GONE ) ; }
public void onClick ( View v ) { if ( mListener != null ) { mListener . onItemClick ( ( ConversationListItem ) itemView , getAdapterPosition ( ) ) ; } */ }
public MatchListWriter matchListWriter ( Database db ) { return Mockito . mock ( MatchListWriter . class ) ; }
public void destroy ( ) { stopWallpaperTracking ( ) ; clear ( ) ; context = null ; tool = null ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnClickSettingsListener ) { mListener = ( OnClickSettingsListener ) context ; } else throw new ClassCastException ( ) ; }
public CleanPreKeysJob ( Context context ) { super ( context , JobParameters . newBuilder ( ) . withGroupId ( CleanPreKeysJob . class . getSimpleName ( ) ) . withMasterSecretRequirement ( ) . withRetryCount ( 5 ) . create ( ) ) ; }
public boolean hasPermalink ( ) { return ! TextUtils . isEmpty ( permaLink ) ; }
private void setMessageShape ( @ NonNull DcMsg current , boolean isGroupThread ) { int background ; background = current . isOutgoing ( ) ? R . drawable . message_bubble_background_sent_alone : R . drawable . message_bubble_background_received_alone ; bodyBubble . setBackgroundResource ( background ) ; }
public static void sort ( InternalItem [ ] a , int lo , int hi ) { int nRemaining = hi - lo ; if ( nRemaining < 2 ) { return ; } ZSORT . doSort ( a , zComparator , lo , hi ) ; }
public void setImage ( TLObject path , String filter , Bitmap thumb , int size ) { setImage ( path , null , filter , null , thumb , null , null , size ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintSecureDialog . class ) ) ; }
public void setStartAngle ( @ FloatRange ( from = 0f , to = 360f ) float startAngle ) { startAngle ( startAngle ) ; invalidate ( ) ; }
public boolean isNew ( ) { return isNew ; }
public void onClick ( DialogInterface dialogInterface , int i ) { OperationsHelper . wipeDB ( App . getInstance ( ) . getSettings ( ) ) ; }
public CustomItemDecorator ( Context context ) { divider = context . getResources ( ) . getDrawable ( R . drawable . divider_white ) ; }
public com . google . protobuf . Any . Builder getConsensusStateBuilder ( ) { onChanged ( ) ; return getConsensusStateFieldBuilder ( ) . getBuilder ( ) ; }
public void onResponse ( String response ) { Photobook . getPreferences ( ) . strPushRegID = strPushID ; Photobook . getPreferences ( ) . savePreferences ( ) ; Log . d ( Constants . LOG_TAG , "Delivered pushId to server" ) ; }
public void Browse ( View v ) { if ( User . user_authentication == false ) { return ; } friend_management . Browse ( contex ) ; }
public static String retrieve ( Context context , String key ) { SharedPreferences preferences = context . getSharedPreferences ( MasterSecretUtil . PREFERENCES_NAME , 0 ) ; return preferences . getString ( key , null ) ; }
public void onCancel ( final DialogInterface dialogInterface ) { General . quickToast ( CommentEditActivity . this , R . string . comment_reply_oncancel ) ; progressDialog . dismiss ( ) ; }
public void setBlock ( TLRPC . TL_pageBlockSubheader block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
public RecyclerItem ( String header ) { this . type = HEADER ; this . item = null ; title = header ; }
public static void handleFirstInstall ( @ NonNull final SharedPreferences sharedPrefs ) { for ( final FeatureFlag flag : FeatureFlag . values ( ) ) { setFeatureFlag ( sharedPrefs , flag ) ; } }
public void hideAttachedInput ( ) { if ( current != null ) current . hide ( true ) ; current = null ; }
public List < Line > getLineList ( ) { return lineList ; }
public void delete ( int userID ) { dbMain . delete ( tableNameMain , dbHelperMain . COLUMN_U_ID + " = " + userID , null ) ; }
public void onLocationChanged ( Location location ) { if ( mPrecise && mFastProvider != null ) { sLocationManager . removeUpdates ( sFastLocationListener ) ; mFastProvider = null ; } vehicleCallback ( mVehiclePcbid , location ) ; vehicleCallback ( mVehicleFcbid , 1 ) ; }
public Poi ( ) { }
public static void init ( SharedPreferences prefs ) { mPrefs = prefs ; getSelectedThemeFromPreferences ( false ) ; isOledMode ( false ) ; }
public boolean hasChild ( String name , String xmlns ) { return findChild ( name , xmlns ) != null ; }
public void setContainerType ( String containerType ) { this . containerType = containerType ; }
public void testTakePhotoPreviewPausedTrash2 ( ) throws InterruptedException { Log . d ( TAG , "testTakePhotoPreviewPausedTrash2" ) ; setToDefault ( ) ; subTestTakePhotoPreviewPaused ( false , false ) ; mPreview . count_cameraTakePicture = 0 ; subTestTakePhotoPreviewPausedTrash ( false ) ; }
private void loadAndShow ( String walletPath , String password ) { new AsyncShow ( ) . executeOnExecutor ( MoneroThreadPoolExecutor . MONERO_THREAD_POOL_EXECUTOR , walletPath , password ) ; }
public String onGetSummary ( ConnectedActivity activity , String value ) { return null ; }
private void whenTrackingOnActionEvent ( ) { uut . trackOnActionEvent ( mAnalyticsEvent ) ; }
public Integer getFeeChargesDueAtDisbursementCharged ( ) { return feeChargesDueAtDisbursementCharged ; }
public void setUp ( ) { String searchTeamKey = "frc195" ; mAllStats = ModelMaker . getModel ( JsonElement . class , "2015necmp_stats" ) ; mExtractor = new TeamStatsExtractor ( searchTeamKey ) ; }
public void setStrokeStyle ( int stroke ) { this . stroke = stroke ; if ( stroke == DOTTED ) { drawPaint . setPathEffect ( dpeffect ) ; } else { drawPaint . setPathEffect ( null ) ; } }
public static File createEmptyImageFile ( ) { return pictureFile ( PicturesUtil . PICTURE_FILE_NAME_FORMAT . format ( new Date ( ) ) + " . jpg" ) ; }
public void enableSaveConverter ( boolean enable ) { mItemSaveVisible = enable ; mItemSave . setVisible ( enable ) ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { EntityOperation a1 = prev . get ( oldItemPosition ) ; EntityOperation a2 = next . get ( newItemPosition ) ; return a1 . equals ( a2 ) ; }
private void onSecurityUpdated ( ) { Log . w ( TAG , "onSecurityUpdated ( ) " ) ; updateReminders ( recipient . hasSeenInviteReminder ( ) ) ; updateDefaultSubscriptionId ( recipient . getDefaultSubscriptionId ( ) ) ; }
public static void runWizard ( Context context , boolean skipWelcome ) { runWizard ( context , skipWelcome , false ) ; }
public RGBPanelData ( Context context ) { super ( context ) ; setupPanel ( context ) ; }
public void onBackPressed ( ) { if ( searchView . isSearchOpen ( ) ) searchView . closeSearch ( ) ; else super . onBackPressed ( ) ; }
private List < MySessionViewModel > convertToViewModel ( Context context , List < MySession > mySessions ) { return Stream . of ( mySessions ) . map ( mySession -> new MySessionViewModel ( context , mySession ) ) . toList ( ) ; }
public void testSafeToAddAuthToken1 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( wpcomAddress1 ) ) ; }
public boolean onShouldRetry ( Throwable throwable ) { if ( throwable instanceof NonSuccessfulResponseCodeException ) return false ; return true ; }
public boolean onPrepareOptionsMenu ( final Menu menu ) { menu . findItem ( R . id . menu_smilies ) . setVisible ( ! getSmileys ( ) . isEmpty ( ) ) ; return true ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_auth_sentCode . TLdeserialize ( stream , constructor , exception ) ; }
private void ensureTokensIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { tokens_ = new java . util . ArrayList < com . google . protobuf . Any > ( tokens_ ) ; bitField0_ | = 0x00000001 ; } }
public static boolean isSuRequest ( String input ) { return input . equals ( ShellUtils . COMMAND_SU ) ; }
public void onStop ( ) { super . onStop ( ) ; unsubscribeClipboardManager ( ) ; disposables . clear ( ) ; }
private void cloneTripClicked ( final int parPosition ) { Trip selectedTrip = ( Trip ) mTripListView . getItemAtPosition ( parPosition ) ; mSavingModule . cloneTrip ( selectedTrip . getUUID ( ) ) ; mActionMode . finish ( ) ; populateList ( ) ; }
public PrintJob createPdf ( WebView webview , String jobName ) { return print ( webview , jobName ) ; }
public Map getDirectionData ( ) throws RemoteException { return connections . get ( connectionClutch ) . getDirectionData ( ) ; }
public void addToFavourites ( long id ) { SQLiteDatabase db = getWritableDatabase ( ) ; ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( COLUMN_MOVIE_ID , id ) ; db . insert ( TABLE_FAVOURITES , null , contentValues ) ; db . close ( ) ; }
public LiveData < WorkEntity > load ( int workId ) { return mDataRepository . getDatabase ( ) . workDao ( ) . load ( workId ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( new TextView ( parent . getContext ( ) ) ) ; }
public void onBindViewHolder ( StickerViewHolder holder , int position ) { holder . fileName = stickerFiles [ position ] ; glideRequests . load ( Uri . parse ( "file : . diskCacheStrategy ( DiskCacheStrategy . NONE ) . into ( holder . image ) ; }
public Object getItem ( int i ) { return mLeDevices . get ( i ) ; }
public KeyboardAwareEditText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; correctDiretion ( ) ; }
private void logEvent ( String event , String argumentName , String argument ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( argumentName , argument ) ; analytics . logEvent ( event , bundle ) ; }
private void updateMediaSessionPlaybackState ( ) { mediaSession . setPlaybackState ( new PlaybackStateCompat . Builder ( ) . setActions ( MEDIA_SESSION_ACTIONS ) . setState ( isPlaying ( ) ? PlaybackStateCompat . STATE_PLAYING : PlaybackStateCompat . STATE_PAUSED , getPosition ( ) , 1 ) . build ( ) ) ; }
public boolean onCreate ( ) { mDatabaseHelper = DatabaseHelperM . get ( getContext ( ) ) ; Utils . setItemTableSortType ( SortTypeM . KINDSORT ) ; return true ; }
public void onDataSetChanged ( ) { logEvent ( "onDataSetChanged" ) ; reload ( true ) ; }
public static synchronized String renderEventDate ( Date date ) { return sEventRenderFormat . format ( date ) ; }
public Sensor ( int id , String name ) { this . id = id ; this . name = name ; }
public void onChildMoved ( DataSnapshot dataSnapshot , String previousChildKey ) { mainAdapter . addItem ( dataSnapshot ) ; }
public T withIconColor ( int iconColor ) { this . iconColor = ColorHolder . fromColor ( iconColor ) ; return ( T ) this ; }
private static int getPartCount ( final int size , final int partSize ) { if ( size % partSize == 0 ) { return size / partSize ; } return ( int ) FloatMath . ceil ( size / ( float ) partSize ) ; }
public int getId ( ) { return this . id ; }
public void moveItem ( int fromPosition , int toPosition ) { final ContentListItem model = list_items . remove ( fromPosition ) ; list_items . add ( toPosition , model ) ; notifyItemMoved ( fromPosition , toPosition ) ; }
public boolean trusted ( ) { Contact contact = this . getContact ( ) ; return status > STATUS_RECEIVED || ( contact != null && ( contact . mutualPresenceSubscription ( ) || contact . isSelf ( ) ) ) ; }
public NewsHeadersRetrofitService getNewsTapeService ( ) { return retrofit . create ( NewsHeadersRetrofitService . class ) ; }
public long getCommentId ( ) { return JSONUtil . queryJSON ( mNoteJSON , "meta . ids . comment" , 0 ) ; }
public void setImage ( TLObject path , String filter , Drawable thumb , int size ) { setImage ( path , null , filter , thumb , null , null , null , size ) ; }
public int getRepeatCount ( ) { return mRepeatCount ; }
public void setDTR ( boolean state ) { if ( state ) { setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SIO_SET_DTR_HIGH , 0 , null ) ; } else { setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SIO_SET_DTR_LOW , 0 , null ) ; } }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_mini_player , container , false ) ; }
public static TermuxAppSharedPreferences build ( @ NonNull final Context context , final boolean exitAppOnError ) { Context termuxPackageContext = PackageUtils . getContextForPackageOrExitApp ( context , TermuxConstants . TERMUX_PACKAGE_NAME , exitAppOnError ) ; if ( termuxPackageContext == null ) return null ; else return new TermuxAppSharedPreferences ( termuxPackageContext ) ; }
public SlideDeck ( Context context , Attachment attachment ) { Slide slide = MediaUtil . getSlideForAttachment ( context , attachment ) ; if ( slide != null ) slides . add ( slide ) ; }
public void setGroupId ( int groupId ) { this . groupId = groupId ; }
public Token ( TokenKind king , String text ) { mKind = king ; mText = text ; }
public int getScoresOfQuiz ( ) { return scoresOfQuiz ; }
public int [ ] args ( ) { return new int [ ] { CommandAbstraction . APP_GROUP , CommandAbstraction . VISIBLE_PACKAGE } ; }
public Single < Integer > delete ( @ NonNull Session session ) { cachedMySessions . remove ( session . id ) ; return localDataSourse . delete ( session ) ; }
public final void onBridgedAdapterChanged ( RecyclerView . Adapter source , Object tag ) { if ( LOCAL_LOGD ) { Log . d ( TAG , "onBridgedAdapterChanged" ) ; } onHandleWrappedAdapterChanged ( ) ; }
public CreateProduct ( Context context , Product product , OnProductsCreated callback ) { this . product = product ; this . dao = ProductDao . instance ( context ) ; this . callback = callback ; }
public static String formatDateTimeFilenameSafe ( final long utc_ms ) { final DateTime dateTime = new DateTime ( utc_ms ) ; final DateTime localDateTime = dateTime . withZone ( DateTimeZone . getDefault ( ) ) ; return dtFormatterFilename . print ( localDateTime ) ; }
public void hideResultView ( ) { enableEditText ( true ) ; animateViews ( false ) ; }
public < R > R accept ( OrderVisitor < TARGET , R > visitor ) { return visitor . visit ( this ) ; }
public boolean onSurfaceTextureDestroyed ( SurfaceTexture surfaceTexture ) { Log . d ( TAG , "surface destroyed : " + surfaceTexture ) ; return mSurface == null ; }
public void onAnimationCancel ( View view ) { view . setAlpha ( 1 ) ; view . setTranslationY ( 0 ) ; }
public void onCancelled ( @ NonNull DatabaseError databaseError ) { loginError ( "Firebase fetch user data failed . " ) ; }
public int getNumberOfSatellites ( ) { return _NumberOfSatellites ; }
public static void unsubscribeForNewCompetition ( ) { String topic = "competition" ; FirebaseMessaging . getInstance ( ) . unsubscribeFromTopic ( topic ) . addOnSuccessListener ( new OnSuccessListener < Void > ( ) { @ Override public void onSuccess ( Void aVoid ) { } } ) ; }
public Object getCacheKey ( ) { return mBoundItem ; }
private synchronized static AppDatabase getInstance ( Context context ) { if ( INSTANCE == null ) { INSTANCE = buildDatabase ( context ) ; } return INSTANCE ; }
public SQLiteDatabase getDatabase ( ) { return mDatabase ; }
public IoHelper ( Context context ) { this . mContext = context ; isConnected = SuperUtil . isConnected ( context ) ; mDrive = GoogleDrive . getInstance ( context ) ; mDropbox = new Dropbox ( context ) ; }
public void onLoaderReset ( Loader < Topic > loader ) { }
public static String getStatusMessage ( Context context ) { return getString ( context , "pref_status_message" , null ) ; }
public void run ( ) { Message message = new Message ( ) ; message . what = HANDLER_NEXT_DIR ; message . arg1 = _position ; mHandler . sendMessage ( message ) ; }
private DeviceCommandListener mCommandListener = new DeviceCommandListener ( ) { @ Override public void onCommand ( Device commandedDevice , String command ) { mActionsListener . sendCommand ( commandedDevice , command ) ; } } ;
public String getTopic ( ) { return mTopic ; }
public void onSuccess ( Usuario result ) { localDataSource . saveOrUpdateUser ( result ) ; callback . onSuccess ( result ) ; }
public void onFavoritesButton ( View view ) { if ( view . isSelected ( ) ) { favoriteService . removeFromFavorites ( movieEntity ) ; view . setSelected ( false ) ; } else { favoriteService . addToFavorites ( movieEntity ) ; view . setSelected ( true ) ; } }
public void addSongs ( List < SongWrapper > songs ) { this . songs . addAll ( songs ) ; }
public View getView ( int position , View convertView , @ NonNull ViewGroup parent ) { return Util . getSpinnerItemView ( getActivity ( ) , convertView , parent , getItem ( position ) . getName ( ) ) ; }
public AccountHeader withSelectionFirstLine ( String selectionFirstLine ) { this . mSelectionFirstLine = selectionFirstLine ; return this ; }
public DrawerBuilder withHeader ( View headerView ) { this . mHeaderView = headerView ; return this ; }
public void refresh ( boolean hard ) { if ( _showProgress ) { _progressBar . refresh ( ) ; } _adapter . refresh ( hard ) ; }
public MasonryAdapterHorizontal ( Context context ) { this . context = context ; utilidades = new Utilidades ( this . context ) ; }
public String name ( ) { return isKnown ( ) ? name : Utils . format ( Game . getVar ( R . string . Scroll_Name ) , rune ) ; }
private String getLongitude ( Location location ) { return String . format ( Locale . US , "%3 . 6f" , location . getLongitude ( ) ) ; }
public void setTopMiners ( Long topMiners ) { this . topMiners = topMiners ; }
public void updateSource ( int contactId ) { new DataCollectionTask ( dcContext , chatId , new int [ ] { contactId } , contactMapSources , featureCollections , lastPositions , boundingBuilder , this ) . execute ( ) ; }
public void onRegistrationSuccess ( User user ) { userPreference . saveUser ( user ) ; bakery . toastLong ( "Please verify your account with code send to your email" ) ; startActivityClearTop ( VerifyAccountActivity . class , null ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "schedule_lessons" ) ) { return ; } clearLocalCache ( ) ; }
private void initViews ( ) { root . setOnTouchListener ( this ) ; setTagMarkerColor ( noteTmp . getCategory ( ) ) ; initViewTitle ( ) ; initViewContent ( ) ; initViewLocation ( ) ; initViewAttachments ( ) ; initViewReminder ( ) ; initViewFooter ( ) ; }
private Intent getIntentOtherApps ( ) { Intent intent = new Intent ( Intent . ACTION_VIEW ) ; intent . setData ( Uri . parse ( Helper . isPlayStoreInstall ( ) ? Helper . PLAY_APPS_URI : Helper . XDA_APPS_URI ) ) ; return intent ; }
public LiveData < List < PinnableCalendarEvent >> getEventsBetweenDates ( @ NonNull List < DataSource > dataSources , @ NonNull Date firstDate , @ NonNull Date lastDate ) { return calendarDao . getEventsBetweenDates ( dataSources , firstDate , lastDate ) ; }
public static int dpToPx ( int dp , Context c ) { DisplayMetrics displayMetrics = c . getResources ( ) . getDisplayMetrics ( ) ; return Math . round ( dp * ( displayMetrics . xdpi / DisplayMetrics . DENSITY_DEFAULT ) ) ; }
public void run ( ) { sendPublicIntent ( PLAY_STATE_CHANGED ) ; }
public void setUp ( ) throws Exception { mDataManager = new DataManager ( mMockPrefsHelper , mMockDatabaseHelper , mMockGmsLocationHelper , mMockPermissionHelper , mMockGeocodingHelper , mPhrasebookHelper , mContactHelper , mImageController ) ; setupFakeResponseBuilder ( ) ; }
public void setStatType ( int mStatType ) { this . mStatType = mStatType ; }
public String getFormattedObjectType ( ) { if ( this . getObject_type ( ) == null ) { return "" ; } return object_types . get ( Integer . toString ( this . getObject_type ( ) ) ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeByteArray ( password_hash ) ; } } public static class TL_auth_requestPasswordRecovery extends TLObject {
public void dismiss ( ) { super . dismiss ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . liveLocationsChanged ) ; }
public Library ( String name , String url ) { this . name = name ; this . url = url ; }
public void cancelLoadFile ( TLRPC . FileLocation location , String ext ) { cancelLoadFile ( null , null , location , ext ) ; }
public void writeToParcel ( Parcel parcel , int i ) { parcel . writeInt ( type ) ; parcel . writeTypedList ( entries ) ; }
public ITileDataSource getDataSource ( ) { return new UrlTileDataSource ( this , new MapboxTileDecoder ( ) , getHttpEngine ( ) ) ; }
public void run ( ) { hasRoot [ 0 ] = Shell . SU . available ( ) ; }
public void onBindFastAccessItemViewHolder ( VH viewHolder , int position ) { int calculatedPosition = getCalculatedPosition ( position ) ; onBindItemViewHolder ( viewHolder , fastRecords . get ( calculatedPosition ) , calculatedPosition ) ; }
public IPresenterFactory < ChatMembersPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new ChatMembersPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , getArguments ( ) . getInt ( Extra . CHAT_ID ) , saveInstanceState ) ; }
public void drawTriangleStrip ( int vertices ) { mProgramCurrent . drawTriangleStrip ( vertices ) ; }
public void onSuccess ( int code , Client . Headers headers , String response ) { handler . onSuccess ( code , headers , response ) ; }
public void onSaveInstanceState ( Bundle savedInstanceState ) { if ( this . region != null ) { savedInstanceState . putString ( "region" , this . region ) ; } savedInstanceState . putBoolean ( "requesting_verification" , this . requestingVerification ) ; super . onSaveInstanceState ( savedInstanceState ) ; }
public boolean matchesSafely ( HostListActivity . HostAdapter . ViewHolder holder ) { return hasDrawableState ( holder . icon , android . R . attr . state_checked ) ; }
public void move ( Node node , Edge edge ) { setState ( new MovingState ( this , node , getPlayer ( ) , edge ) ) ; }
public void onCreate ( Context context ) { Log . v ( TAG , "onCreate" ) ; mConnectivityManager = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_resto , menu ) ; tintToolbarIcons ( menu , R . id . action_refresh ) ; return true ; }
public void onViewRecycled ( VH holder ) { }
public String getLocalNodeId ( ) { if ( status != null && status . getLocalNode ( ) != null ) { return status . getLocalNode ( ) . getId ( ) ; } return null ; }
public Builder ( @ NonNull final DialogFragment dialogFragment , int themeResId ) { this ( new SupportDialogFragmentResourceFinder ( dialogFragment ) , themeResId ) ; }
public void onListItemClick ( int position ) { launchBrowser ( adapter . getItem ( position ) . getHtml_url ( ) ) ; }
public DescendingPeriodClassifier getTodayClassifier ( ) { return TODAY ; }
public Cursor _getPadDataByUrl ( String padUrl ) { return this . _getPadDataFromDatabase ( PadContentProvider . URL , padUrl ) ; }
public void onClick ( View v ) { executor . submit ( ( ) -> presenter . onViewClicked ( v . getId ( ) ) ) ; }
public void moveCamera ( LatLng point ) { gMaps . animateCamera ( CameraUpdateFactory . newLatLngZoom ( point , MAX_ZOOM - 1 ) ) ; }
public void detectsNone ( ) { assertThat ( ContentType . getContentType ( "" ) , is ( contentTypes . NONE ) ) ; }
public void setZcuPk ( long zcuPk ) { this . zcuPk = zcuPk ; }
public FontDownloader ( FontPackage fontPackage ) { mFontPackage = fontPackage ; createCacheDirectory ( ) ; }
public static CommandResult execCommand ( String command , boolean isRoot ) { return execCommand ( new String [ ] { command } , isRoot , true ) ; }
public double getPatchSize ( ) { return patchSize ; }
public void setClickToShowDetails ( boolean clickable ) { if ( clickable ) { matchContainer . setClickable ( false ) ; matchContainer . setBackgroundResource ( R . drawable . transparent ) ; } else { matchContainer . setOnClickListener ( new MatchClickListener ( getContext ( ) ) ) ; } }
public static BusinessFilesList getBusinessFilesList ( ) { return scan_xml ; }
public void deleteLastKnownLocationAsString ( ) { mCityNamePreference . delete ( ) ; }
public String getParentPermlink ( ) { return parentPermlink ; }
private void disableGif ( ) { if ( currentGif != - 1 ) { currentGif = - 1 ; Glide . with ( getContext ( ) ) . load ( null ) . into ( mStateGif ) ; } }
public CharSequence replace ( CharSequence cs ) { return replace ( cs , - 1 , Integer . MAX_VALUE ) ; }
public boolean isActive ( ) { DateTime now = settings . clock ( ) . now ( zone ) ; return startDate . isBefore ( now ) && endDate . isAfter ( now ) ; }
public static String getFormatedDuration ( int millis ) { return String . format ( "%02d : %02d" , TimeUnit . MILLISECONDS . toMinutes ( millis ) , TimeUnit . MILLISECONDS . toSeconds ( millis - ( TimeUnit . MILLISECONDS . toMinutes ( millis ) *60000 ) ) ) ; }
public void onDonePressed ( ) { finish ( ) ; overridePendingTransition ( 0 , 0 ) ; }
public synchronized void reset ( ) { position = - 1 ; }
private double pintTogallon ( double num ) { return num * 0 . 125 ; }
public long getCurrentPosition ( ) { return player . getCurrentPosition ( ) ; }
public void notifyBookCollectionRemoved ( BooksCollection booksCollection ) { booksCollections . remove ( new BookCollectionRecyclable ( booksCollection ) ) ; notifyItemRemoved ( booksCollection . getOrder ( ) ) ; }
public void setLat ( double lat ) { this . lat = lat ; }
public boolean isVisible ( ) { return mVisible && ! mNode . getMeleeFactory ( ) . maxLevelReached ( ) && owner . getEnergy ( ) >= mNode . getMeleeFactory ( ) . getUpgradeCost ( ) ; }
public int getItemCount ( ) { return getFilteredCardDevices ( ) . size ( ) ; }
public ContactSpinnerAdapter ( Context context , List < ContactVo > contacts ) { super ( context , R . layout . contact_spinner_item ) ; this . mContext = context ; mValues = contacts ; }
public void setSearchString ( String searchString ) { mSearchString = searchString ; }
public static String getDateFormatString ( ) { return getString ( R . string . pref_key_date_format_string , context . getString ( R . string . def_date_format_string ) ) ; }
public void deleteHeader ( String uuid ) { DeleteHeaderInteractor interactor = new DeleteHeaderInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , uuid ) ; interactor . execute ( ) ; }
public void setSearchBarHeight ( @ NonNull final int height ) { mSearchBar . setMinimumHeight ( height ) ; mSearchBar . getLayoutParams ( ) . height = height ; }
public void onClick ( DialogInterface dialog , int id ) { Intent intent = new Intent ( AllianceSelectActivity . this , AllianceSelectActivity . class ) ; startActivity ( intent ) ; return ; }
private static boolean shouldOrder ( String table ) { return table . equals ( TEAM_TABLE ) ; }
private ZoneVisionAPI ( ) { executorService = Executors . newSingleThreadExecutor ( ) ; client = new OkHttpClient ( ) ; handler = new Handler ( Looper . getMainLooper ( ) ) ; }
public void write ( final JsonWriter out , final LocalDateTime value ) throws IOException { out . value ( value . toDateTime ( ) . toString ( ISO_FORMAT ) ) ; }
public static ProgressDialogFragment newInstance ( String message ) { ProgressDialogFragment fragment = new ProgressDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( CONTENT_ARG , message ) ; fragment . setArguments ( args ) ; return fragment ; }
public void onFailure ( Call < ForumData > call , Throwable t ) { if ( callBack != null ) { callBack . onFailure ( NETWORK_ERROR , t ) ; } }
public CommentsListAdapter ( OnListFragmentInteractionListener listener ) { mListener = listener ; }
public ObservableArrayList < DeviceCharacteristic > getNotifyCharacteristics ( ) { return deviceNotifyCharacteristics ; }
public String getDestinationAddress ( ) { return dst_addr ; }
public AddBookmarkResultLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initializeViews ( context ) ; }
public static void blendSrcAlphaOneMinusAlpha ( ) { GLES20 . glBlendFunc ( GL10 . GL_SRC_ALPHA , GL10 . GL_ONE_MINUS_SRC_ALPHA ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newSettingsFragmentComponent ( new SettingsFragmentModule ( this ) ) . inject ( this ) ; componentFactory = null ; }
public VolumeKeyEvent ( KeyEvent origEvent ) { super ( origEvent ) ; this . mVolumeKeyEventType = VOLUME_KEY_EVENT_NATIVE ; this . mPrevCurrentValue = null ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getSupportMenuInflater ( ) ; inflater . inflate ( R . menu . host , menu ) ; return true ; }
public void onClick ( DialogInterface dialog , int id ) { finish ( ) ; }
public void onSignalStrengthsChanged ( SignalStrength signalStrength ) { Log . v ( TAG , "onSignalStrengthsChanged : " + signalStrength ) ; mCurrentSignalStrengthDbm = mNetMonSignalStrength . getDbm ( signalStrength ) ; }
public void inputFileName ( String fileName ) { onView ( allOf ( withId ( R . id . foldername ) , isDisplayed ( ) ) ) . perform ( typeText ( fileName ) ) ; }
public void onNextPressed ( ) { showUnlockedRewardScreen ( rewards , ( ) -> getGame ( ) . showMainMenu ( ) ) ; }
public boolean hasInputId ( ) { return ( ( bitField0_ & 0x00000004 ) == 0x00000004 ) ; }
public Toolbar getAppBar ( ) { return appBar ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , terms . class ) ; inte . putExtra ( "url" , "http : startActivity ( inte ) ; }
public MPPointF getOffset ( ) { if ( mOffset == null ) { mOffset = new MPPointF ( - ( getWidth ( ) / 2 ) , - getHeight ( ) ) ; } return mOffset ; }
public void setWs ( Integer ws ) { this . ws = ws ; }
public EventListData ( String eveName , String short_desc ) { this . eveName = eveName ; this . short_desc = short_desc ; }
public void onProviderDisabled ( String s ) { }
public Builder setRequestedFps ( float fps ) { if ( fps <= 0 ) { throw new IllegalArgumentException ( "Invalid fps : " + fps ) ; } mCameraSource . mRequestedFps = fps ; return this ; }
private void throwIfSaveFailed ( long id ) { if ( id == - 1 ) { throw new DataSupportException ( DataSupportException . SAVE_FAILED ) ; } }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getFoodUsdaDbDao ( ) : null ; }
public static TracksDataSource getInstance ( ) { if ( mInstance == null ) { mInstance = new TracksDataSource ( Globals . getInstance ( ) ) ; } return mInstance ; }
public void onResponse ( Item response ) { if ( mItemFragment . get ( ) != null && mItemFragment . get ( ) . isAttached ( ) ) { mItemFragment . get ( ) . onItemLoaded ( response ) ; } }
private void setOverviewTitle ( ) { mTitle = getResources ( ) . getString ( R . string . title_activity_overview ) ; }
public void onResume ( ) { super . onResume ( ) ; deviceStatus = 0 ; identityCount = 0 ; setFilters ( ) ; startService ( UsbService . class , usbConnection , null ) ; }
public void run ( ) { if ( startAnimationRunnable != this ) { return ; } startAnimationRunnable = null ; startOpenAnimation ( ) ; }
public long getItemId ( int position ) { return position ; }
public void onClick ( View v ) { Dialog_Statistics . getDialog ( getActivity ( ) , since_boot ) . show ( ) ; }
public void onBackPressed ( ) { if ( ! imageEditorFragment . onBackPressed ( ) ) { super . onBackPressed ( ) ; } }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . COMMON_FUNCTIONS ; }
public void onClick ( View view ) { selectFontSize ( ) ; hideMenu ( ) ; }
public List < String > getTypes ( ) { if ( types != null &&! types . isEmpty ( ) ) { return types ; } return Collections . singletonList ( "general" ) ; }
public void onFailure ( Call < ResBnbTxInfo > call , Throwable t ) { WLog . w ( "onFetchClaimTx BNB onFailure" ) ; if ( BaseConstant . IS_SHOWLOG ) t . printStackTrace ( ) ; onUpdateView ( ) ; }
public static FileObj open ( @ NonNull String mFile ) { return new FileObj ( new File ( mFile ) ) ; }
public void onSkipToPrevious ( ) { playPreviousSong ( true ) ; }
public void onBackPressed ( ) { if ( mStepIndex == 0 ) { finish ( ) ; } else { previousStep ( ) ; } }
public void setChecked ( boolean checked ) { this . markBgPaint . setColor ( ContextCompat . getColor ( getContext ( ) , checked ? R . color . colorPrimary : R . color . description_marker_unselected ) ) ; invalidate ( ) ; }
public static boolean isCopyLoopPossible ( BaseFile sourceFile , HFile targetFile ) { return targetFile . getPath ( ) . contains ( sourceFile . getPath ( ) ) ; }
public ArrayList < String > getGroups ( ) { return groups ; }
public View getView ( Activity activity ) { return activity . findViewById ( R . id . bowmenu_right ) ; }
public Integer getPlayOrder ( ) { int matchNumber = getMatchNumber ( ) , setNumber = getSetNumber ( ) ; return type . getPlayOrder ( ) * 1000000 + matchNumber * 1000 + setNumber ; }
private void undoPostUnbookmarked ( final ReaderPost post , final int position ) { if ( ! post . isBookmarked ) { mOnPostListItemButtonListener . onButtonClicked ( post , ReaderPostCardActionType . BOOKMARK ) ; } }
public void whenThereIsNoAnswer_shouldDefaultTextBeDisplayed ( ) { assertThat ( getSpyWidget ( ) . binding . choicesSearchBox . getText ( ) . toString ( ) , is ( "Select Answer" ) ) ; }
public int getAnswer ( int i , int j ) { return answerArr [ i ] [ j ] ; }
public int getCount ( ) { if ( isInSub ( ) ) return colorsSub [ topIndex ( ) ] . length ; else return colorsTop . length ; }
public static Tag fromJSON ( JSONObject json , long siteID ) { if ( json == null ) { return null ; } String tag = JSONUtil . getString ( json , "name" ) ; return new Tag ( siteID , tag ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( MainNeoActivity ) getActivity ( ) ) . mFragment = this ; processNavigationLink ( ) ; }
public void onListItemClick ( ListView l , View v , int position , long id ) { if ( mOnItemClickListener != null ) { mOnItemClickListener . onItemClick ( l , v , position , id ) ; } }
public int getChildrenCount ( int groupPosition ) { if ( groupPosition == 0 ) { return savedBeacons . size ( ) ; } else { return beaconsInRange . size ( ) ; } }
public Object visit ( ArtistDigest artist ) { icon . setImageResource ( R . drawable . artist24 ) ; return null ; }
public TableOfContentRecyclerViewAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_table_of_content , parent , false ) ; return new ViewHolder ( v ) ; }
public void write ( byte [ ] b , int off , int len ) throws IOException { out . write ( b , off , len ) ; publishProgress ( len ) ; }
private void setParamsRight ( ) { if ( DeviceUtil . isVerge ( ) ) params . x = 0 ; else params . x = 0 ; position = POSITION_RIGHT ; MainService . setOverlayLauncherPosition ( position ) ; }
public String escapeImages ( String string ) { return escapeImages ( string , false ) ; }
public void onChanged ( FirebaseElement < User > firebaseElement ) { if ( firebaseElement . hasNoError ( ) ) { user = firebaseElement . getElement ( ) ; onDataGot ( ) ; } }
public void onPinCancel ( PinDialog dialog ) { enableForm ( ) ; }
public void onLoadFinished ( Loader < List < Object >> loader , List < Object > data ) { adapter . swapDataSet ( data ) ; }
public Drawable getFabImageDrawable ( Context context ) { if ( mFabImageDrawable != null ) { return mFabImageDrawable ; } else if ( mFabImageResource != NOT_SET ) { return AppCompatResources . getDrawable ( context , mFabImageResource ) ; } else { return null ; } }
public Integer getCommentVerticalBarColor1 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_1 , getDefaultColor ( "#0336FF" , "#0336FF" , "#0336FF" ) ) ; }
private static void setFeatures ( Context context , NotificationCompat . Builder builder ) { builder . setPriority ( NotificationCompat . PRIORITY_HIGH ) . setCategory ( NotificationCompat . CATEGORY_MESSAGE ) . setColor ( ContextCompat . getColor ( context , R . color . app_accent ) ) ; }
public void onClick ( View widget ) { if ( onNoteBlockTextClickListener != null ) { onNoteBlockTextClickListener . onNoteBlockTextClicked ( this ) ; } }
public static void zoom ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . zoom_enter , R . anim . zoom_exit ) ; }
public void setTonemapProfile ( TonemapProfile tonemap_profile , float log_profile_strength ) { }
public void setRegionName ( String n ) { regionName = n ; }
public void sendMessage ( final Message message ) { sendMessage ( message , false ) ; }
public void showVenues ( List < NamedDTO > venues ) { venueListAdapter . clear ( ) ; venueListAdapter . addAll ( venues ) ; }
private SensorEventListener magneticListener = new SensorEventListener ( ) { @ Override public void onAccuracyChanged ( Sensor sensor , int accuracy ) { } @ Override public void onSensorChanged ( SensorEvent event ) { preview . onMagneticSensorChanged ( event ) ; } } ;
public void storeLastKnownLocationAsBoundingBox ( final BoundingBox boundingBox ) { mLastKnownLocationBoundingBoxPreference . set ( boundingBox ) ; }
public void onFailure ( Call < ArrayList < Machine >> call , Throwable t ) { AnalyticsHelper . sendErrorHit ( t , false ) ; }
public String getAddressIndex ( ) { return addressIndex ; }
public void release ( ) { synchronized ( mCameraLock ) { stop ( ) ; mFrameProcessor . release ( ) ; } }
public boolean onMenuItemActionCollapse ( MenuItem item ) { mSearchQuery = null ; setSearchVisibility ( false ) ; return true ; }
public void testECIEnglishHiragana ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u3040' } , new float [ ] { 20f , 1f , 10f } , 102583 , 110914 ) ; }
public synchronized boolean bodyIsOnlyEmojis ( ) { if ( isEmojisOnly == null ) { isEmojisOnly = EmojiManager . isOnlyEmojis ( body . replaceAll ( "\\s" , "" ) ) ; } return isEmojisOnly ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . valueOf ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "ReplyAlias" , 1 ) ; else toggleAliasSetting ( "ReplyAlias" , 2 ) ; return true ; }
public void onBindViewHolder ( ProShowViewHolder holder , int position ) { Picasso . with ( ProShowActivity . this ) . load ( resId [ position ] ) . fit ( ) . centerCrop ( ) . into ( holder . img ) ; }
public void setMarkPointToEdit ( MarkPoint markPointToEdit ) { MortarCalculatorApplication . currentEditMarkPoint = markPointToEdit ; }
public FunctionType getFunctionType ( ) { return ( FunctionType ) termType ; }
public void destroyItem ( ViewGroup container , int position , Object object ) { items . remove ( position ) ; super . destroyItem ( container , position , object ) ; }
public static String getAyaPositionFileName ( ) { QuranScreenInfo qsi = QuranScreenInfo . getInstance ( ) ; if ( qsi == null ) { return null ; } return getAyaPositionFileName ( qsi . getWidthParam ( ) ) ; }
public static Comparator < ResultBean > getAttendComparator ( ) { return new AttendComparator ( ) ; }
public void onClick ( View v ) { gameSingleton . getCurrent_game ( ) . addHist_jeu ( " --- \nLe personnage " + role . getNom ( ) + " est mort . \n\n" ) ; display_next_role ( ) ; }
public void attachView ( @ NonNull LoadMvvm . View view , @ Nullable Bundle savedInstanceState ) { super . attachView ( view , savedInstanceState ) ; }
private static String makeLvString ( int level ) { return String . format ( "Lv %d" , level ) ; }
public void run ( ) { onConnectionLost ( R . string . failed_to_connect ) ; }
public void hideSuggestionsList ( ) { animateLastRequests ( getListHeight ( false ) , 0 ) ; }
public void setUri ( String uri ) { this . uri = uri ; }
public void setFilterField ( String txt ) { filter_field = txt ; notifyDataSetInvalidated ( ) ; }
public void run ( ) { Felix . this . apps = apps ; onAppsChanged ( ) ; }
public void onPause ( ) { super . onPause ( ) ; historicalRecordListPresenter . pause ( ) ; }
public String getEffectUrl ( ) { return "file : }
public LruCachePageService ( ) { Logging . debug ( "LruCachePageService instantiated" ) ; }
public Double getGpsLong ( ) { return gpsLong ; }
private void whenBindingViewHolder ( ) { uut . onBindViewHolder ( mModelViewHolder , 0 ) ; }
public ImageAdapter ( Context c , ArrayList < String > title , ArrayList < Bitmap > Imageid ) { mContext = c ; this . Imageid = Imageid ; this . title = title ; }
public static double getTotalExternalMemorySize ( int unit ) { try { return getTotaleSpace ( XMLPrefsManager . get ( File . class , XMLPrefsManager . Behavior . external_storage_path ) , unit ) ; } catch ( Exception e ) { return - 1 ; } }
public void onCreate ( ) { super . onCreate ( ) ; mAppExecutors = new AppExecutors ( ) ; }
public boolean backupExists ( ) { return backupDirectory . listFiles ( ) != null && backupDirectory . listFiles ( ) . length != 0 ; }
private void initFuturePrefs ( ) { binding . featureRemindersPrefs . setChecked ( mPrefs . isFutureEventEnabled ( ) ) ; binding . featureRemindersPrefs . setOnClickListener ( view -> changeFuturePrefs ( ) ) ; }
public static ImageHolderDelegate imageHolderDelegate ( WithoutPlaceholderImageHolderDelegate imageHolderDelegate ) { imageHolderDelegate . setImagePlaceholder ( R . drawable . ic_fork_and_knife_positive ) ; return imageHolderDelegate ; }
public void setUp ( ) { Context context = InstrumentationRegistry . getTargetContext ( ) ; favoriteConfig = new FavoriteConfig ( context ) ; favoriteConfig . clear ( ) ; }
public void onFailure ( Call < Results < Patient >> call , Throwable t ) { mPatientInfoView . setProgressBarVisibility ( false ) ; ToastUtil . error ( t . getMessage ( ) ) ; }
public void changeLesson ( Lesson changedLesson ) { mDataDb . changeItem ( changedLesson ) ; requery ( ) ; notifyItemChanged ( getRecyclerViewPosition ( changedLesson ) ) ; notifyItemChanged ( 0 ) ; }
public void bind ( RecyclerView . ViewHolder viewHolder , Object data ) { Run run = ( Run ) data ; ( ( TitleViewHolder ) viewHolder ) . bind ( run ) ; }
public void onLowMemory ( ) { super . onLowMemory ( ) ; Crashlytics . log ( Log . DEBUG , TAG , this . getClass ( ) . getName ( ) + "#onLowMemory ( ) " ) ; }
public int getKey_text_offset_y ( ) { return key_text_offset_y ; }
public String getOpenGTSServerCommunicationMethod ( ) { return prefs . getString ( PreferenceNames . OPENGTS_PROTOCOL , "" ) ; }
public void setPhoneNumbers ( List < String > phoneNumbers ) { mPhoneNumbers = phoneNumbers ; }
public static Rime get ( Context context , boolean full_check ) { if ( self == null ) { if ( full_check ) Config . deployOpencc ( context ) ; self = new Rime ( context , full_check ) ; } return self ; }
public static TestLog Tag ( final String _tagName ) { return new TestLog ( _tagName ) ; }
public void requestAcknowledged ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { }
public void afterTextChanged ( Editable editable ) { String method = editable . toString ( ) ; if ( apiMethods . has ( method ) ) db . updateParam ( "_method_telegraph" , method ) ; updateMethod ( ) ; }
public final int getX ( ) { return this . _x ; }
public void init ( ExtractorOutput output ) { extractorOutput = output ; trackOutput = extractorOutput . track ( 0 ) ; extractorOutput . endTracks ( ) ; }
public com . coinomi . core . protos . Protos . ScryptParameters getEncryptionParameters ( ) { if ( encryptionParametersBuilder_ == null ) { return encryptionParameters_ ; } else { return encryptionParametersBuilder_ . getMessage ( ) ; } }
public ClusterQuery offset ( int value ) { mOffset = String . valueOf ( value ) ; return this ; }
public DrawableRequestBuilder < String > getImage ( Context context ) { return Glide . with ( context ) . load ( image ) . placeholder ( R . drawable . placeholder ) . override ( 600 , 400 ) . centerCrop ( ) ; }
public @ RepeatMode int getRepeatMode ( ) { return player . getRepeatMode ( ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { insertDailyFitness ( person , getDailyFitnessFromIntraday ( dataSnapshot ) ) ; }
public AccountRunnable ( Handler handler , Context context ) { super ( handler ) ; this . context = ( MainActivity ) context ; }
public void setFontFamily ( @ NonNull String fontFamily ) { if ( ! fontFamily . equals ( Prefs . getFontFamily ( ) ) ) { Prefs . setFontFamily ( fontFamily ) ; bus . post ( new ThemeFontChangeEvent ( ) ) ; } }
public void whenChangedKeyIsPeriodicUpdatesCheck_schedulesUpdates ( ) { handler . onSettingChanged ( "projectId" , "anything" , GeneralKeys . KEY_PERIODIC_FORM_UPDATES_CHECK ) ; verify ( formUpdateScheduler ) . scheduleUpdates ( "projectId" ) ; }
public void setHomepage ( String homepage ) { putString ( Name . HOMEPAGE , homepage ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( ListeDeCours ) getResult ( ListeDeCours . class , __result , "listeCoursResult" , __envelope ) ; }
public TransactionHistory getHistory ( ) { if ( history == null ) { history = new TransactionHistory ( getHistoryJ ( ) ) ; } return history ; }
public FontSizeListPreference ( final Context context , final AttributeSet attrs ) { super ( context , attrs ) ; }
public void setFormatter ( Formatter formatter ) { this . mFormatter = formatter ; }
public Coordenada2D ( double x , double y ) { this . x = x ; this . y = y ; }
public void onRefresh ( ) { makeNetworkCall ( true , true ) ; }
public ArrayList < CustomDNSServer > getCustomDNSServers ( ) { if ( customDNSServers == null ) { customDNSServers = new ArrayList <> ( ) ; } return customDNSServers ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getGlobalInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded ) ; }
public void onAttachedToWindow ( ) { if ( _bioPrompt != null && _prefs . isPasswordReminderNeeded ( ) ) { showPasswordReminder ( ) ; } }
private void stopJingles ( ) { if ( jinglesAnimation != null ) { jinglesAnimation . stop ( ) ; jinglesAnimation = null ; empyListItem . setCompoundDrawablesWithIntrinsicBounds ( 0 , R . drawable . jingles_animation , 0 , 0 ) ; } }
public void emailButtonClicked ( View mi ) { EditText title = ( EditText ) findViewById ( R . id . title_of_entry ) ; onPauseNotTakingPic = false ; AnimusMiscMethods . email ( title . toString ( ) , entryTextET . toString ( ) , "" , context ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new SelectMinimalViewModel ( selectListAdapter , formEntryPrompt ) ; }
public SendDebugLogPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public void text ( int id ) { text ( Game . getVar ( id ) ) ; }
private Cursor getAllYearInfosCursorWith ( String query , String [ ] queryArgs , String orderBy ) { final SQLiteDatabase DB = this . getReadableDatabase ( ) ; return DB . query ( TABLE_YEARS , null , query , queryArgs , null , null , null ) ; }
public void onClick ( View view ) { BulkReadCardsDialogFragment . create ( sink , 0 ) . show ( getSupportFragmentManager ( ) , "card_data_io_dialog" ) ; }
private void processExitState ( int state ) { Log . d ( TAG , "call processExitState : " + state ) ; switch ( state ) { case STARTED : onExitStartedState ( ) ; break ; case STOPPED : onExitStoppedState ( ) ; break ; } ; }
public static BackupTool getInstance ( ) { if ( instance == null ) { synchronized ( BackupTool . class ) { if ( instance == null ) instance = new BackupTool ( ) ; } } return instance ; }
public void updateData ( List < Integer > fft , int sampleRate ) { mFFT = fft ; mSampleRate = sampleRate / 2000 ; invalidate ( ) ; }
public void onClicked ( Activity activity ) { LinkHandler . onLinkClicked ( activity , url , false ) ; }
public android . support . v4 . content . Loader < List < News >> onCreateLoader ( int id , Bundle args ) { return new NewsLoader ( ( ClubActivity ) getActivity ( ) , ValueStore . getURL ( 3 ) ) ; }
private void updateSortCategoryMenu ( ) { SortCategory category = getPreferences ( ) . getCurrentSortCategory ( ) ; _menu . findItem ( category . getMenuItem ( ) ) . setChecked ( true ) ; }
private void setOk ( ) { TextView v = ( TextView ) findViewById ( R . id . statusOutput ) ; v . setText ( "OK" ) ; }
public void onScrollStateChanged ( @ NonNull RecyclerView recyclerView , int newState ) { super . onScrollStateChanged ( recyclerView , newState ) ; if ( newState == RecyclerView . SCROLL_STATE_DRAGGING ) { UIUtils . hideKeyboard ( getActivity ( ) ) ; rootView . requestFocus ( ) ; } }
private double litreTopint ( double num ) { return num * 2 . 113 ; }
public synchronized void cancelRunningTasks ( ) { tasks . clear ( ) ; if ( active != null && active instanceof Cancellable ) { ( ( Cancellable ) active ) . cancel ( ) ; } }
public static void disablePushNotifications ( Context context ) { Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_PUSH_STOP ) ; context . startService ( i ) ; }
public RecordXYSensorDataWrapper ( SensorWrapper sensor , Context context , Vector < TimeValue > record ) { super ( sensor ) ; this . context = context ; this . record = record ; }
private NoteEditorTestBuilder getNoteEditorAdding ( NoteType noteType ) { JSONObject n = makeNoteForType ( noteType ) ; return new NoteEditorTestBuilder ( n ) ; }
private void showInStatusBar ( NoteItem item ) { new Notifier ( mContext ) . showNoteNotification ( item ) ; hideNoteView ( ) ; }
public void onReceive ( Context context , Intent intent ) { Log . w ( "MmsRadio" , "Got connectivity change . . . " ) ; issueConnectivityChange ( ) ; }
public String toString ( ) { return recordTitle + " : " + recordText + " ( " + recordTimestamp + " ) " ; }
private static final RestaurantsListener DUMMY_RESTAURANTS_LISTENER = new RestaurantsListener ( ) { @ Override public void onRestaurantsFetched ( List < Restaurant > places ) { } } ;
public void run ( ) { et_instance . setText ( "" ) ; et_instance . requestFocus ( ) ; }
public void onAnimationStart ( Animator animation ) { itemView . setClickable ( false ) ; }
public void onRecent ( int pos ) { onQueueItemClicked ( pos ) ; }
public void onViewRecycled ( RecyclerView . ViewHolder holder ) { final RecyclerViewRecyclerEventDistributor distributor = mRefDistributor . get ( ) ; if ( distributor != null ) { distributor . handleOnViewRecycled ( holder ) ; } }
private static void addOneIsland ( Resources res , GameViewInterface gameView , GameLevelInterface levelDesign ) { gameView . addSprite ( levelDesign . getIsland ( res , getDayOfWeek ( ) , 0 . 5f , 1 , ISLAND_HEIGHT_RATIO_1D ) ) ; }
public Maybe < Event > create ( Event entity ) { return Maybe . just ( entity ) ; }
public static int getLayoutResId ( int pos ) { return PAGER_MODELS . get ( pos ) . getLayoutResId ( ) ; }
public void onRequestSuccess ( User user ) { if ( user != null && user . isSuccess ( ) ) { ( ( UserInfoPostListAdapter ) getAdapter ( ) ) . setUserInfo ( user ) ; } }
private static void log ( String what , String value ) { if ( BuildConfig . AES_DEBUG ) Log . d ( TAG , what + " [ " + value . length ( ) + " ] [ " + value + " ] " ) ; }
public void setCurrentItem ( int item , boolean smoothScroll ) { if ( Math . abs ( getCurrentItem ( ) - item ) > 1 ) { super . setCurrentItem ( item , false ) ; } else { super . setCurrentItem ( item , smoothScroll ) ; } }
private void set ( int id , String value ) { EditText f = ( EditText ) findViewById ( id ) ; set ( f , value ) ; }
private String getImageDirectory ( ) { return exportParameters != null? exportParameters . imageDirectory : "" ; }
public Observable < Unit > onDevSettingsChanged ( ) { return mUpdateObservable ; }
public SingleLiveEvent < Integer > getHistoryDeleted ( ) { return mHistoryDeleted ; }
public Observable < CommandResponse < InsertResult , Cursor >> insert ( @ NonNull final Tag tag ) { return insert ( tag , Collections . < JointIngredientTag > emptyList ( ) ) ; }
public String getLanguage ( ) { return this . language ; }
private void refreshRates ( ) { dogeRatesObject . getRates ( getRatesHandler , spref . getString ( "fiat_list" , "USD" ) ) ; getFiatBalance ( ) ; }
public NoteHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = layoutInflater . inflate ( R . layout . child_note , parent , false ) ; return new NoteHolder ( itemView ) ; }
public void setChampionship ( Championship championship ) { mChampionship = championship ; mGameInfoConfig . championship = mChampionship . getId ( ) ; mGameInfoConfig . flush ( ) ; }
private boolean checkFreeSpace ( ) { long storageFreeSpace = info . getStorageFreeSpace ( ) ; return storageFreeSpace == - 1 || storageFreeSpace >= fileTree . selectedFileSize ( ) ; }
public void fetchCurrentLocation ( ) { if ( PermissionUtils . isPermissionGranted ( Manifest . permission . ACCESS_FINE_LOCATION ) ) { checkLocationServicesAndFetchLocationIfOn ( ) ; } else { requestLocationPermission ( ) ; } }
public Type getType ( ) { return type ; }
public void needSendTyping ( ) { if ( currentMessageObject != null ) { MessagesController . getInstance ( ) . sendTyping ( currentMessageObject . getDialogId ( ) , classGuid ) ; } }
public GameState getGameState ( ) { if ( ! isRunning ( ) ) { throw new RuntimeException ( "The game has not started yet ! " ) ; } else { return mGameState ; } }
public boolean isLinkTargetBlank ( ) { return linkTargetBlank ; }
private void showMarkerStyle ( ) { binding . markerStylePrefs . setViewResource ( ThemeUtil . getInstance ( mContext ) . getMarkerStyle ( ) ) ; }
public void setData ( List < UploadObject > data ) { this . data = data ; notifyDataSetChanged ( ) ; }
public AboutBuilder addYoutubeUserLink ( int user ) { return addYoutubeUserLink ( context . getString ( user ) ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( MailboxActivity . this , NewPostActivity . class ) ; intent . putExtra ( "private" , true ) ; startActivityForResult ( intent , REQUEST_NEW_POST ) ; }
private void openDrawer ( ) { if ( mActivity . drawerLayout != null ) { mActivity . drawerLayout . openDrawer ( GravityCompat . START , true ) ; } }
public void run ( ) { Log . i ( "IntentService" , "intentFinish" ) ; activity . overridePendingTransition ( R . anim . fade_out , R . anim . fade_in ) ; activity . finish ( ) ; }
public void onClose ( ) { setFindButtonsVisibility ( false ) ; }
private ArrayList < IField > getFieldsPrivate ( ) { if ( mFields == null ) { mFields = new ArrayList < IField > ( ) ; } return mFields ; }
public void setFetchingHighscores ( boolean fetchingHighscores ) { this . fetchingHighscores = fetchingHighscores ; }
private void setUpRecyclerView ( ) { mCourseListAdapter = new CourseListAdapter ( getActivity ( ) , mCourses , mToken , mSiteId ) ; mCourseListView . setHasFixedSize ( true ) ; mCourseListView . setLayoutManager ( new LinearLayoutManager ( getActivity ( ) ) ) ; mCourseListView . setAdapter ( mCourseListAdapter ) ; }
public String getProduct ( ) { return product ; } ;
private void showConnectivityErrorBar ( ) { connectivityText . setVisibility ( View . VISIBLE ) ; connectivityText . setText ( R . string . connectivity_lost ) ; connectivityText . setBackgroundColor ( getResources ( ) . getColor ( R . color . ConnectivityRed ) ) ; }
public void onClickAddCity ( ) { mCitiesView . onAddCityButtonSelected ( ) ; }
public boolean onDoubleTapEvent ( @ NonNull MotionEvent e ) { return GestureController . this . onDoubleTapEvent ( e ) ; }
public ProductsListAdapter ( Context context , ArrayList < Product > items ) { this . context = context ; this . products = items ; }
public String getPublished ( ) { return published ; }
public GroupItem createGroup ( Model model ) { return new GroupItem ( model . getSummary ( ) , new Random ( ) . nextInt ( 16 ) ) ; }
public Lyrics ( Song song , String data ) { this . song = song ; this . data = data ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . CLEAR ) ; }
private void sendSetWallpaperBroadcast ( BingWallpaperState state ) { SetWallpaperStateBroadcastReceiverHelper . sendSetWallpaperBroadcast ( mContext , state ) ; }
private String getCustomValue ( ) { return TextSecurePreferences . getStringPreference ( getContext ( ) , customPreference , "" ) ; }
private void putProperty ( String propName , String scheme , String value ) { if ( value != null ) { properties . put ( propName , value ) ; properties . put ( withUri ( propName ) , scheme + " : " + value ) ; } }
public void onBindGroupViewHolder ( MyGroupViewHolder holder , int groupPosition , int viewType ) { switch ( viewType ) { case GROUP_ITEM_VIEW_TYPE_SECTION_HEADER : onbBindSectionHeaderGroupViewHolder ( holder , groupPosition ) ; break ; case GROUP_ITEM_VIEW_TYPE_SECTION_ITEM : onBindItemGroupViewHolder ( holder , groupPosition ) ; break ; } }
private void load ( boolean force ) { thread . run ( ( ) -> load ( force , null ) ) ; }
public void run ( ) { mContentView . animate ( ) . alpha ( 1f ) . setDuration ( mShortAnimationDuration ) . start ( ) ; }
public Address getAuthor ( ) { return author ; }
public Device ( String uuid , String name , InetAddress host , int port ) { mUuid = uuid ; mName = name ; mHost = host ; mPort = port ; }
public boolean winTest ( ) { for ( int i = 5 ; i <= 8 ; i ++ ) if ( stacks [ i ] . getSize ( ) != 13 ) return false ; return true ; }
public CommentVideoEmbedBinder ( Comment model ) { comment = model ; }
private File makeBackupFile ( File originalFile ) { return new File ( originalFile . getPath ( ) + " . bak" ) ; }
public void setChecked ( boolean checked ) { if ( ! isCheckable ) return ; super . setChecked ( checked ) ; refreshView ( ) ; }
private void updateProgressBar ( ) { mHandler . postDelayed ( mUpdateTimeTask , 10 ) ; }
public int getLayoutRes ( ) { return R . layout . drawer_item_secondary ; }
public void onBackPressed ( ) { mPresenter . handleHomePressed ( ) ; }
private void rejectCall ( View view ) { requireRtpConnection ( ) . rejectCall ( ) ; finishAndReleaseWakeLock ( ) ; }
public String getModel ( ) { return model ; }
public ScheduleLessonsWidget ( ) { inject ( ) ; }
public void setFillFormatter ( FillFormatter formatter ) { if ( formatter == null ) mFillFormatter = new DefaultFillFormatter ( ) ; else mFillFormatter = formatter ; }
public void onResume ( ) { super . onResume ( ) ; if ( mFeedsPresenter != null ) mFeedsPresenter . start ( ) ; }
public MediaUploadCompletionProcessor ( String localId , MediaFile mediaFile , String siteUrl ) { mBlockProcessorFactory = new BlockProcessorFactory ( ) . init ( localId , mediaFile , siteUrl ) ; }
public void moveViewToX ( float xValue ) { Runnable job = new MoveViewJob ( mViewPortHandler , xValue , 0f , getTransformer ( AxisDependency . LEFT ) , this ) ; addViewportJob ( job ) ; }
public String getNumber ( ) { return number ; }
public void onError ( String utteranceId ) { Log . w ( TAG , "utteranceProgressListener . onError ( ) " + utteranceId ) ; onSpeakDoneListener ( utteranceId ) ; }
public void run ( ) { albumArt . setCurrentItem ( sharedPrefsUtils . readSharedPrefsInt ( "musicID" , 0 ) ) ; }
private static void doTest ( String input , CharSequence expected ) throws WriterException { BitMatrix result = new Code39Writer ( ) . encode ( input , BarcodeFormat . CODE_39 , 0 , 0 ) ; assertEquals ( input , expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
public ServiceConfig setApiKey ( @ NonNull String apiKey ) { mApiKey = apiKey ; return this ; }
public @ Consts . BUTTON_TYPE int getGoodNewButton ( ) { return 2 ; }
public void setCo ( int co ) { this . co = co ; }
public ArrayList < ColorLevel > getColorLevels ( ) { return colorLevels ; }
public static void updateLRU ( Context c , VpnProfile profile ) { profile . mLastUsed = System . currentTimeMillis ( ) ; if ( profile != tmpprofile ) saveProfile ( c , profile , false , false ) ; }
public String getFullname ( ) { return fullname ; }
public void bindDrawerLearned ( ) { boolean isDrawerLearned = this . mMainInteractor . isDrawerLearnedInPreferences ( ) ; this . mMainView . bindDrawerLearned ( isDrawerLearned ) ; }
public boolean hasResponseCurrentMetadata ( ) { return ( ( bitField0_ & 0x00020000 ) == 0x00020000 ) ; }
public void stopRecording ( ) { releaseLock ( ) ; if ( mRecorder != null ) { mRecorder . stop ( ) ; mRecorder . reset ( ) ; mRecorder . release ( ) ; mRecorder = null ; mStartTime = 0 ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; disposable . dispose ( ) ; }
public String getRoom ( ) { return this . room ; }
public int getUnderlineColor ( ) { return underlineColor ; }
public String formatPrecisionInt ( double amount ) { return String . format ( Locale . getDefault ( ) , "%d" , ( int ) amount ) ; }
public void run ( ) { final String text = readAssetFile ( LicensesActivity . this , "licenses . txt" ) ; runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { content . setText ( text ) ; } } ) ; }
public void onActivityResult ( int requestCode , int resultCode , Intent data ) { if ( resultCode == Activity . RESULT_OK && requestCode == layoutPlusId ) { onNewEntity ( data ) ; } }
public ArrayList < HashMap < String , String >> getCards ( ) { return mCards ; }
public final boolean isExpand ( ) { return mContentView == null || mMonthView . getVisibility ( ) == VISIBLE ; }
public void setToCompleted ( long startMillisec ) { this . status = HeroStatus . COMPLETED ; this . interpolator = new CycleInterpolator ( 512 ) ; this . jumpsAnimationStart = startMillisec ; this . updateBitmapToCompleted ( ) ; }
public void stop ( ) { if ( executor != null ) { executor . shutdown ( ) ; executor = null ; } }
public void setSort ( final PostCommentListingURL . Sort s ) { if ( mUrl . pathType ( ) == RedditURLParser . POST_COMMENT_LISTING_URL ) { mUrl = mUrl . asPostCommentListURL ( ) . order ( s ) ; } }
private Bitmap getMoneroLogo ( ) { if ( logo == null ) { logo = Helper . getBitmap ( getContext ( ) , R . drawable . ic_monero_qr ) ; } return logo ; }
public String toString ( ) { if ( time == 0 ) return mContext . getString ( R . string . prepTimeBellDescription_atFinish ) ; return mContext . getString ( R . string . prepTimeBellDescription_beforeFinish , DateUtils . formatElapsedTime ( time ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( QuickStartEvent . KEY , mQuickStartEvent ) ; }
public int getDrawable ( ) { return drawable ; }
public String exec ( ExecutePack pack ) { pack . context . startActivity ( Tuils . openFile ( new File ( Tuils . getFolder ( ) , AliasManager . PATH ) ) ) ; return null ; }
public void setProgressBarThickness ( @ FloatRange ( from = 0 ) float thickness ) { progressBarThickness ( thickness ) ; invalidate ( ) ; }
public String [ ] getTranslationNames ( ) { return translationItems ; }
public void onDowngrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + PLAYING_QUEUE_TABLE_NAME ) ; db . execSQL ( "DROP TABLE IF EXISTS " + ORIGINAL_PLAYING_QUEUE_TABLE_NAME ) ; onCreate ( db ) ; }
public void close ( ) { if ( dbHelper != null ) { dbHelper . close ( ) ; } }
public void scheduleDrawable ( Drawable who , Runnable what , long when ) { Callback callback = getCallback ( ) ; if ( callback == null ) { return ; } callback . scheduleDrawable ( this , what , when ) ; }
public static String getRosterVersion ( Context context ) { return getString ( context , "roster_version" , "" ) ; }
public static ArrayList < Song > getPlayingQueue ( ) { if ( musicService != null ) { return musicService . getPlayingQueue ( ) ; } return new ArrayList <> ( ) ; }
public MaterialSearchView ( Context context , AttributeSet attributeSet ) { this ( context , attributeSet , 0 ) ; init ( ) ; }
public void setPosition ( MutableFloatPoint2D mPositionOffset ) { mPositionX = mPositionOffset . x ; mPositionY = mPositionOffset . y ; }
public synchronized void addHandler ( IRCEventHandler handler ) { synchronized ( handlers ) { if ( ! handlers . contains ( handler ) ) handlers . add ( handler ) ; if ( saveTimerTask != null ) saveTimerTask . cancel ( ) ; saveTimerTask = null ; } }
private void openAboutUs ( ) { View view = View . inflate ( getActivity ( ) , R . layout . dialog_about_us , null ) ; new AlertDialog . Builder ( getActivity ( ) ) . setView ( view ) . show ( ) ; }
public MainMenuPage enableMatchExactly ( ) { return openProjectSettings ( ) . clickGeneralSettings ( ) . clickFormManagement ( ) . clickUpdateForms ( ) . clickOption ( R . string . match_exactly ) . pressBack ( new ProjectSettingsPage ( ) ) . pressBack ( new MainMenuPage ( ) ) ; }
public void onClick ( View view ) { saveFavourite ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . howtoplay_2 , container , false ) ; }
public static TVDatabase getInstance ( Context c ) { if ( INSTANCE == null ) { INSTANCE = Room . databaseBuilder ( c . getApplicationContext ( ) , TVDatabase . class , "layers . sqlite" ) . build ( ) ; } return INSTANCE ; }
public Integer getCommentVerticalBarColor2 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_2 , getDefaultColor ( "#EE02BE" , "#C300B3" , "#C300B3" ) ) ; }
public boolean deleteReminder ( long rowId ) { return db . delete ( TABLE_NAME , _ID + " = " + rowId , null ) > 0 ; }
public EighthActivityBuilder URL ( String URL ) { this . URL = URL ; return this ; }
public String getTotalresults ( ) { return totalresults ; }
private void answerIsCorrect ( ExerciseResult exerciseResult , int currentProgress ) { exerciseResult . setCorrect ( true ) ; int earnedPoints = PointCalculator . calcPoints ( currentProgress , maxProgress ) ; exerciseResult . setPoints ( earnedPoints ) ; }
public void testAwardWriter ( ) { mWriter . write ( mAward , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_AWARDS , null , mAward . getParams ( ) ) ; }
public void onNmeaSentence ( long timestamp , String nmeaSentence ) { if ( preferenceHelper . shouldLogToNmea ( ) ) { NmeaFileLogger nmeaLogger = new NmeaFileLogger ( Session . getCurrentFileName ( ) ) ; nmeaLogger . write ( timestamp , nmeaSentence ) ; } }
public boolean passwordSubmitted ( KeyEvent keyEvent ) { if ( keyEvent != null && keyEvent . getAction ( ) == KeyEvent . ACTION_DOWN ) { login ( false ) ; return true ; } return false ; }
private void share ( String text ) { Intent share = new Intent ( Intent . ACTION_SEND ) ; share . setType ( "text/plain" ) ; share . putExtra ( Intent . EXTRA_TEXT , text ) ; mContext . startActivity ( share ) ; }
public void onConnectionFailed ( @ NonNull ConnectionResult connectionResult ) { Toast . makeText ( getApplicationContext ( ) , "Connection Failed" , Toast . LENGTH_LONG ) . show ( ) ; }
private void finishWithAnimation ( ) { super . finishWithAnimation ( ActivityTransitionAnimation . DIALOG_EXIT ) ; }
public void writeBookToDB ( ) { bookUtilsDB . writeBookToDataBase ( bookDataDetail . getBookData ( ) ) ; }
public ExpenseDAO ( Context context ) { databaseHelper = new DatabaseHelper ( context ) ; decimalFormat = new DecimalFormat ( "00" ) ; dateUtils = new DateUtils ( ) ; }
public static DynamicDialogFragment newInstance ( ) { return new DynamicDialogFragment ( ) ; }
public DrawerBuilder withStickyDrawerItems ( @ NonNull ArrayList < IDrawerItem > stickyDrawerItems ) { this . mStickyDrawerItems = stickyDrawerItems ; return this ; }
public JsonBufferedArray getArray ( @ NonNull final String id ) { final JsonValue value = get ( id ) ; if ( value == null ) { return null ; } return value . asArray ( ) ; }
public boolean isOutdated ( ) { return new Date ( ) . getTime ( ) - pubDate >= App . DAY_IN_MILLIS ; }
public float getReverseRate ( ) { return reverserate ; }
public void onDestroy ( ) { super . onDestroy ( ) ; historicalRecordListPresenter . destroy ( ) ; }
public int getmType ( ) { return mType ; }
public IBinder onBind ( Intent intent ) { isServiceBound = true ; return musicBind ; }
public VolumeNavigationDelegate provideVolumeNavigationDelegate ( ) { return volumeNavigationDelegate ; }
public void clearFeatures ( ) { if ( map != null ) { for ( MapFeature feature : features . values ( ) ) { feature . dispose ( ) ; } } features . clear ( ) ; }
public void setValueDenom ( int valueDenom ) { this . mValueDenom = valueDenom ; }
public void onSaveInstanceState ( Bundle outState ) { FormFieldsWrapper formFieldsWrapper = new FormFieldsWrapper ( getInputFields ( ) , getSelectOneFields ( ) ) ; outState . putSerializable ( ApplicationConstants . BundleKeys . FORM_FIELDS_BUNDLE , formFieldsWrapper ) ; super . onSaveInstanceState ( outState ) ; }
public void adapt ( Track track , Activity activity ) { ( ( TextView ) activity . findViewById ( R . id . track_instant_filter_topline ) ) . setText ( track . getPath ( ) ) ; }
public ComposedChildAdapterDataObserver ( Subscriber subscriber , RecyclerView . Adapter sourceAdapter ) { super ( subscriber , sourceAdapter , new ArrayList < ComposedChildAdapterTag > ( ) ) ; }
private Runnable stopManagerRunnable = new Runnable ( ) { @ Override public void run ( ) { tracer . warn ( "Absolute timeout reached , giving up on this point" ) ; stopManagerAndResetAlarm ( ) ; } } ;
private void addMethodStubs ( Event event ) { CommonMocksInteractions . addDataStoreStubs ( dataStore , event ) ; CommonMocksInteractions . addScheduleReminderStubToEventRemindersManager ( eventRemindersManager ) ; }
private void givenInvalidRequestReturningException ( ) throws IOException { when ( mModelConverter . getForecastModel ( ) ) . thenThrow ( new IOException ( "someExec" ) ) ; }
public void rebuildAllFragments ( boolean last ) { if ( layersActionBarLayout != null ) { layersActionBarLayout . rebuildAllFragmentViews ( last , true ) ; } else { actionBarLayout . rebuildAllFragmentViews ( last , true ) ; } }
private ResCdpParam . KavaCollateralParam getCParam ( ) { return getSActivity ( ) . mCollateralParam ; }
public List < WeatherList > getList ( ) { return list ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( FicheEmploye ) getResult ( FicheEmploye . class , __result , "GetFicheDataResult" , __envelope ) ; }
private LocalDate aligneDateFinSurQuinzaine ( LocalDate dateFin ) { LocalDate dateFinAlignee ; if ( dateFin . getDayOfMonth ( ) > 16 ) { dateFinAlignee = dateFin . withDayOfMonth ( 16 ) ; } else { dateFinAlignee = dateFin . withDayOfMonth ( 1 ) ; } return dateFinAlignee ; }
public List < String > process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return CommonUtils . toStringsList ( obj . getJSONArray ( "result" ) , false ) ; }
public void onAttachFragment ( Fragment fragment ) { super . onAttachFragment ( fragment ) ; activeFragment = fragment ; if ( fragment instanceof NewLostAndFound ) { fab . hide ( ) ; activeFragment = fragment ; } }
private void updateCommonCode ( OstWorkflowContext ostWorkflowContext ) { if ( OstWorkflowContext . WORKFLOW_TYPE . UPDATE_BIOMETRIC_PREFERENCE . equals ( ostWorkflowContext . getWorkflowType ( ) ) ) { updateBiometricView ( mToggleBiometric ) ; } }
public PrivateKey getBridgePrivateKey ( ) throws PGPException { return PGP . convertPrivateKey ( mPair . signKey . getPrivateKey ( ) ) ; }
private < T extends RealmObject > List < T > createOrUpdateModel ( Iterable < T > objects ) { return createOrUpdateModel ( objects , null ) ; }
public static void checkNonNull ( Object object ) { if ( object == null ) { throw new RuntimeException ( "Object must not be null" ) ; } }
public void onResume ( ) { showPreferencesSummary ( ) ; if ( Session . isStarted ( ) ) { setActionButtonStop ( ) ; } else { setActionButtonStart ( ) ; } super . onResume ( ) ; }
public static boolean isAirplaneModeOn ( Context context ) { return Settings . System . getInt ( context . getContentResolver ( ) , Settings . Global . AIRPLANE_MODE_ON , 0 ) != 0 ; }
public PortalGate ( int pos ) { super ( pos ) ; }
public void eraseColor ( int color ) { bitmap . clear ( color ) ; }
public String getToken ( ) throws IOException , GoogleAuthException { String token = credential . getToken ( ) ; GoogleAuthUtil . invalidateToken ( context , token ) ; return token ; }
public boolean onCreate ( ) { mOpenHelper = new Moviedb ( getContext ( ) ) ; return true ; }
public void cancelAllTasks ( Class taskType ) { }
public void setAnswered ( boolean answered ) { this . answered = answered ; }
private void setMyLocationActivationViewVisibility ( boolean isVisible ) { ViewExtensions . setVisible ( mMyLocationActivationView , isVisible ) ; }
public Media getMediaAtPosition ( int i ) { return searchMediaFragment . getImageAtPosition ( i ) ; }
private static void reg ( final String type , final $Sprite2DView view ) { Locator . CELL_VIEWS . set ( type , view ) ; }
public void setDownloadKbit ( Long downloadKbit ) { this . downloadKbit = downloadKbit ; }
public static int generateRandomNumber ( int max ) { Random rand = new Random ( ) ; return rand . nextInt ( max ) + 1 ; }
public int getError ( ) { return this . error ; }
public void clearUserWord ( ) { _ueserCache . clear ( ) ; _users . clear ( ) ; }
public void onImageViewDLMException ( Throwable t ) { if ( ! mHaveReverted ) { General . quickToast ( this , R . string . imageview_decode_failed ) ; revertToWeb ( ) ; } }
public View findViewById ( int resId ) { return this . dialogFragment . getView ( ) . findViewById ( resId ) ; }
public static boolean isFirstTimeApplicationStarted ( Context inContext ) { boolean retVal = PreferenceManager . getDefaultSharedPreferences ( inContext ) . getBoolean ( PREF_IS_FIRST_TIME_APP_STARTED , true ) ; return retVal ; }
public void onOptionChoice ( ) { setUpImgChoiceLayout ( ) ; EventBus . getDefault ( ) . post ( new EventBusController . OptionChoiceEvent ( option . getId ( ) , OPTION_CHOICED , option . getCode ( ) ) ) ; }
private void thenShouldDelegateConnect ( ) { new Verifications ( ) { { mLocationRetriever . connect ( ) ; } } ; }
public void onLoginSuccessTracking ( UserModel userModel ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsHelper . PARAM_USER_UID , userModel . getUid ( ) ) ; analyticsHelper . trackLoginSuccess ( bundle ) ; }
public boolean onUnbind ( Intent intent ) { return true ; }
public JSONObject applyChanges ( JSONObject changes ) throws UnexpectedSchemaChange { mRChg = changes ; JSONObject lchg = changes ( ) ; mergeChanges ( lchg , mRChg ) ; return lchg ; }
public TimeZone getTimeZone ( ) { return mTimeZone ; }
public boolean isOpen ( ) { return mDatabase . isOpen ( ) ; }
public void shouldNotPassValidation_noGivenName ( ) { patient . getPerson ( ) . getName ( ) . setGivenName ( null ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public EventListSubscriber providesEventListRecyclerSubscriber ( Context context ) { return Mockito . mock ( EventListSubscriber . class ) ; }
private PolylineOptions getDrawPolylineOptions ( ) { PolylineOptions polylineOptions = new PolylineOptions ( ) ; polylineOptions . color ( getResources ( ) . getColor ( R . color . polyline_draw_color ) ) ; return polylineOptions ; }
public Fragment getItem ( int position ) { if ( position == 1 ) { return NfcFragment . newInstance ( ) ; } else { return QrCodeFragment . newInstance ( wifiNetwork ) ; } }
private int dpToPx ( int dp , Context context ) { Resources r = context . getResources ( ) ; return Math . round ( TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , dp , r . getDisplayMetrics ( ) ) ) ; }
public void testMinimalEncoder13 ( ) throws Exception { verifyMinimalEncoding ( "123456" , "NUMERIC ( 123456 ) , TERMINATOR ( ) " , null , false ) ; }
public DynamicDialogFragment setButtonColor ( @ ColorInt int buttonColor ) { this . mButtonColor = buttonColor ; return this ; }
public void onPasteFromClipboard ( View view ) { String text = Common . getFromClipboard ( this ) ; if ( text != null ) { mAC . setText ( text ) ; } }
public void textToHtml_nullBecomesEmptyString ( ) { CharSequence observed = StringUtils . textToHtml ( null ) ; assertThat ( observed , equalTo ( "" ) ) ; }
public static Observable < CnBetaApi . Result < List < HotComment >>> hotComment ( ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . hotComment ( timestamp , CnBetaSignUtil . hotCommentSign ( timestamp ) ) ; }
public void run ( ) { Toast . makeText ( MainActivity . this , R . string . finish_record_error , Toast . LENGTH_LONG ) . show ( ) ; mastShowClosingErrorExplanatoin = false ; }
public void onPageSelected ( int position ) { desktopOptionView . updateHomeIcon ( appSettings . getDesktopPageCurrent ( ) == position ) ; }
public void onLoadFinished ( Loader < List < T >> loader , List < T > data ) { items = data ; }
public boolean isEmpty ( ) { return mEditText . length ( ) == 0 ; }
public SearchCards ( String query , boolean order , int numCardsToRender , int column1Index , int column2Index ) { this . mQuery = query ; this . mOrder = order ; this . mNumCardsToRender = numCardsToRender ; this . mColumn1Index = column1Index ; this . mColumn2Index = column2Index ; }
private Account setupSecondAccount ( ) throws NextcloudHttpRequestFailedException { db . getAccountDao ( ) . insert ( new Account ( "https : return db . getAccountDao ( ) . getAccountByName ( "test @ example . org" ) ; }
public void copyDetours ( final OsmTrack source ) { detourMap = source . detourMap == null ? null : new FrozenLongMap < OsmPathElementHolder > ( source . detourMap ) ; }
public void toOffsetDateTimeNull ( ) { assertEquals ( null , DateTypeConverters . fromOffsetDateTime ( null ) ) ; }
public int getLayoutRes ( ) { return R . layout . device_items ; }
private boolean createAsFixed ( ) { return mode == SequencerModes . MODE_HOLD ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsTheme . class ) ; startActivityForResult ( i , RESTART_SETTINGS_RESULT ) ; }
public void showTimeoutError ( ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_timeout ) , getString ( R . string . dialog_error_message_no_internet ) ) ; }
public Builder setVersion ( int value ) { bitField0_ | = 0x00000200 ; version_ = value ; onChanged ( ) ; return this ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_input , menu ) ; return true ; }
public void commit ( ) { SharedPreferences . Editor editor = mPreferences . edit ( ) ; String json = new Gson ( ) . toJson ( mItems ) ; editor . putString ( mKey , json ) ; editor . commit ( ) ; }
public void onViewMedia ( int position , int attachmentIndex , @ NonNull View view ) { Status status = statuses . get ( position ) . asRightOrNull ( ) ; if ( status == null ) return ; super . viewMedia ( attachmentIndex , status , view ) ; }
private final Runnable mCheckItemSwappingRunnable = new Runnable ( ) { @ Override public void run ( ) { if ( mDraggingItemViewHolder != null ) { checkItemSwapping ( mRecyclerView ) ; } } } ;
public boolean onPreferenceChange ( Preference preference , Object o ) { setSummary ( defaultStartPage , o ) ; return true ; }
public void onDeleted ( Context context , int [ ] appWidgetIds ) { inject ( ) ; for ( int appWidgetId : appWidgetIds ) { deleteAppWidget ( context , appWidgetId ) ; } }
public void onClick ( View v ) { startActivity ( new Intent ( HomeActivity . this , ProfileActivity . class ) ) ; }
public void onClick ( View v ) { if ( ( ( CheckBox ) v ) . isChecked ( ) ) graphView . addSeries ( kalmanSeries ) ; else graphView . removeSeries ( kalmanSeries ) ; }
public AuthorList getAuthorList ( ) { return authorList ; }
public void resetStreamId ( ) { this . streamId = null ; }
public void onSuccess ( Void unused ) { Log . d ( TAG , "We successfully requested a connection" ) ; }
private void initTtsPrefs ( ) { binding . ttsPrefs . setChecked ( mPrefs . isBirthdayTtsEnabled ( ) ) ; binding . ttsPrefs . setReverseDependentView ( binding . globalOptionPrefs ) ; binding . ttsPrefs . setOnClickListener ( view -> changeTtsPrefs ( ) ) ; }
public void setEmail ( String email ) { this . _email = email ; }
public Builder setCallback ( @ NonNull BottomSheetCallback callback ) { bottomSheet . bottomSheetCallback = callback ; return this ; }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( CREATE_USER_TABLE ) ; }
public NotificationServiceImpl ( Context context ) { prepareLooper ( ) ; this . context = context ; this . handler = new Handler ( ) ; fillActionsMap ( ) ; createNotificationChannel ( ) ; registerStarsCountReceiver ( ) ; }
public void setFilter ( String filter ) { this . filter = filter ; if ( filter != null && ! filter . isEmpty ( ) ) this . filterAN = GGApp . deleteNonAlphanumeric ( filter ) ; else this . filterAN = filter ; }
private static void changeLocale ( String localeCode ) { LocaleManager . setNewLocale ( InstrumentationRegistry . getTargetContext ( ) , localeCode ) ; WordPress . updateContextLocale ( ) ; }
public int getIntrinsicHeight ( ) { return iconSize ; }
public List < MultiProfile > getProfiles ( ) { return getProfiles ( false ) ; }
public void remove ( Range range ) { remove ( range . index , range . length ) ; }
public void flee ( ) { say ( Utils . format ( Game . getVar ( R . string . Imp_Cya ) , Dungeon . hero . className ( ) ) ) ; destroy ( ) ; getSprite ( ) . die ( ) ; }
public boolean onIsMultiPane ( ) { return isXLargeTablet ( this ) ; }
public static boolean supported ( ) { return hasWake ( ) || hasCamera ( ) || hasPocket ( ) || hasTimeout ( ) || hasPowerKeySuspend ( ) || hasVibVibration ( ) ; }
public int maxDurability ( int lvl ) { if ( lvl <= 1 ) { return Integer . MAX_VALUE ; } else { return 80 * ( lvl < 16 ? 16 - lvl : 1 ) ; } }
public void setOverrideParam ( String overrideParam ) { if ( ! overrideParam . isEmpty ( ) ) { pageProvider . setOverrideParameter ( overrideParam ) ; } }
public void onClick ( View v ) { log . info ( "Clicked restore wallet" ) ; if ( mListener != null ) { mListener . onSeedCreated ( mnemonicView . getText ( ) . toString ( ) ) ; } }
public String getServerType ( ) { return serverType ; }
public AccountChooserAdapter ( @ NonNull List < LocalAccount > localAccounts , @ NonNull Consumer < LocalAccount > targetAccountConsumer ) { super ( ) ; this . localAccounts = localAccounts ; this . targetAccountConsumer = targetAccountConsumer ; }
public void onSuccess ( JSONObject jsonObject ) { Log . d ( LOG_TAG , "Activate User Sync Succeded" ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { flags = stream . readInt32 ( exception ) ; pinned = ( flags & 1 ) != 0 ; peer = Peer . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { binding = FragmentSessionFeedbackBinding . inflate ( inflater , container , false ) ; binding . setViewModel ( viewModel ) ; initView ( ) ; return binding . getRoot ( ) ; }
public void onTouchEvent ( RecyclerView rv , MotionEvent e ) { RecyclerViewSwipeManager . this . onTouchEvent ( rv , e ) ; }
private void changeLedPrefs ( ) { boolean isChecked = binding . ledPrefs . isChecked ( ) ; binding . ledPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdayLedEnabled ( ! isChecked ) ; }
public void setDownvotes ( int downvotes ) { this . downvotes = downvotes ; }
public void start ( ) { Main . musicService . unpausePlayer ( ) ; mFabView . setImageDrawable ( ( utils . getThemedIcon ( this , ContextCompat . getDrawable ( this , R . drawable . ic_pause ) ) ) ) ; }
public long getPersonID ( ) { return personID ; }
public boolean onLongClick ( View v ) { int adapterPosition = getAdapterPosition ( ) ; Bookmark bookmark = mSortedData . get ( adapterPosition ) ; if ( mClickHandler != null ) mClickHandler . onLongBookmarkClick ( bookmark ) ; return true ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_chatFull . TLdeserialize ( stream , constructor , exception ) ; }
public void onPause ( ) { mapView . onPause ( ) ; super . onPause ( ) ; }
public void onServiceDisconnected ( ComponentName name ) { BaseActivity . this . onServiceDisconnected ( ) ; }
public void loginWithSiteAddress ( ) { new LoginFlow ( ) . chooseEnterYourSiteAddress ( ) . enterSiteAddress ( E2E_WP_COM_USER_SITE_ADDRESS ) . enterEmailAddress ( E2E_WP_COM_USER_EMAIL ) . enterPassword ( E2E_WP_COM_USER_PASSWORD ) . confirmLogin ( ) ; }
public static Builder newBuilder ( org . thoughtcrime . securesms . backup . BackupProtos . SharedPreference prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public Tool ( int index , Chrome . Type chrome ) { this ( Size . valueOf ( RemixedDungeon . toolStyle ( ) ) , index , chrome ) ; }
public FormEntryPage swipeToPreviousQuestion ( String questionText ) { return new FormEntryPage ( formName , rule ) . swipeToPreviousQuestion ( questionText ) ; }
public void checkIntegrity ( ) { _removeSpaces ( ) ; _recoverOrphans ( ) ; _checkDeckTree ( ) ; }
public void onClick ( View view ) { uploadimage ( ) ; }
public void run ( ) { onWorkflowFinished ( context , null , false ) ; }
public void downloadAudioIfNeed ( ) { if ( buttonState == 2 ) { FileLoader . getInstance ( currentAccount ) . loadFile ( currentMessageObject . getDocument ( ) , true , 0 ) ; buttonState = 3 ; invalidate ( ) ; } }
public LinkHandler ( LinkViewHolder holder ) { this . holder = holder ; }
public void attachView ( CreateTaskMVP . View view ) { super . attachView ( view ) ; analyticsHelper . trackPageView ( AnalyticsHelper . VIEW_CREATE_TASK ) ; }
public void onReceive ( Context context , Intent intent ) { Log . v ( TAG , "onReceive : " + intent ) ; if ( ACTION_DISABLE . equals ( intent . getAction ( ) ) ) NetMonPreferences . getInstance ( context ) . setServiceEnabled ( false ) ; }
private static final Interpolator sDragViewScrollCapInterpolator = new Interpolator ( ) { public float getInterpolation ( float t ) { t -= 1 . 0f ; return t * t * t * t * t + 1 . 0f ; } } ;
public void addWidget ( ) throws Exception { device = UiDevice . getInstance ( InstrumentationRegistry . getInstrumentation ( ) ) ; device . pressHome ( ) ; device . pressHome ( ) ; }
public boolean onInfo ( MediaPlayer mp , int what , int extra ) { if ( what == MediaPlayer . MEDIA_INFO_VIDEO_RENDERING_START ) { app_logo . setVisibility ( View . VISIBLE ) ; } return false ; }
private void keepMaxSize ( ) { if ( size ( ) > maxSize ) { subList ( ( int ) ( maxSize * clearPercent ) , size ( ) ) ; } }
public int hashCode ( ) { return word . toLowerCase ( ) . hashCode ( ) ; }
public void onClick ( View view ) { LicenseActivity . start ( mActivity ) ; }
public void onClick ( DialogInterface dialog , int which ) { probeType = PROBE_TYPE_TOOL_OFFSET ; doProbing ( ) ; }
public Holder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new Holder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_fave_video , parent , false ) ) ; }
public void onFailure ( @ NonNull Exception e ) { e . printStackTrace ( ) ; callback . onError ( ) ; }
private String getUnitsDistancePref ( ) { return sharedPreferences . getString ( PreferenceKeys . UnitsDistancePreferenceKey , "preference_units_distance_m" ) ; } private String getTextStampPref ( ) { return sharedPreferences . getString ( PreferenceKeys . TextStampPreferenceKey , "" ) ; }
public void bindAdapter ( ContributionAdapter a , SwipeRefreshLayout layout ) throws ExecutionException , InterruptedException { this . adapter = a ; this . refreshLayout = layout ; loadMore ( a , subreddit , term , true ) ; }
public List < Cue > getCues ( long timeUs ) { return root . getCues ( timeUs , globalStyles , regionMap ) ; }
public String toString ( String setString , String unsetString ) { return toString ( setString , unsetString , "\n" ) ; }
public void onSaveAlarm ( ) { setAlarm ( ) ; detailPresenter . onSaveAlarm ( alarm , getApplicationContext ( ) ) ; finish ( ) ; }
public Cursor getSem ( ) { Cursor c = database . rawQuery ( "select distinct sem from subjects group by sem ; " , null ) ; return c ; }
public void movePlaneRight ( ) { boolean valid = m_PlaneRound . movePlaneRight ( m_Selected ) == 1 ? true : false ; updateBoards ( ) ; m_BottomPane . setDoneEnabled ( valid ) ; }
public void setSenseElementId ( int senseElementId ) { mSenseElementId = senseElementId ; }
public void deleteItem ( AdmissionPercentageMetaPojo item ) { deleteItem ( item . id ) ; }
public static FragmentMoviesList newInstance ( String state ) { FragmentMoviesList fragmentMoviesList = new FragmentMoviesList ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putString ( STATE , state ) ; fragmentMoviesList . setArguments ( bundle ) ; return fragmentMoviesList ; }
private BroadcastReceiver receiver1 = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { asyncTask . cancel ( true ) ; } } ;
public void onVideoSizeChanged ( IMediaPlayer mp , int width , int height , int sar_num , int sar_den ) { LogUtil . d ( "onVideoSizeChanged —— > width：" + width + "， height：" + height ) ; mTextureView . adaptVideoSize ( width , height ) ; }
public void onClick ( View v ) { Intent i = new Intent ( SIAApp . GG_APP . activity , FilterActivity . class ) ; SIAApp . GG_APP . activity . startActivityForResult ( i , 1 ) ; }
public boolean isDrawerOpen ( ) { if ( mDrawerBuilder . mDrawerLayout != null && mDrawerBuilder . mSliderLayout != null ) { return mDrawerBuilder . mDrawerLayout . isDrawerOpen ( mDrawerBuilder . mSliderLayout ) ; } return false ; }
private void onMenuEditAsNew ( final TupleMessageEx message ) { Intent asnew = new Intent ( context , ActivityCompose . class ) . putExtra ( "action" , "editasnew" ) . putExtra ( "reference" , message . id ) ; Helper . startActivity ( context , asnew ) ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { if ( isVisibleToUser && mArticleAdapter != null ) { mArticleAdapter . notifyDataSetChanged ( ) ; } super . setUserVisibleHint ( isVisibleToUser ) ; }
public JSONObject get ( String resource , Map < String , Object > queryParams ) throws IOException { return send ( GET_REQUEST , resource , queryParams ) ; }
public static PeopleInviteFragment newInstance ( SiteModel site ) { PeopleInviteFragment peopleInviteFragment = new PeopleInviteFragment ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putSerializable ( ActivityLauncher . EXTRA_SITE , site ) ; peopleInviteFragment . setArguments ( bundle ) ; return peopleInviteFragment ; }
public static boolean isSearchInRecordsNames ( ) { return getBoolean ( R . string . pref_key_search_records_names , DEF_SEARCH_IN_RECORDS_NAMES ) ; }
public static ApplicationBase getInstance ( ) { return applicationBase ; }
private void setupPaymentProcess ( ) { paymentManager . setPaymentProcess ( PaymentOrderManager . PROCESS_CART ) ; paymentManager . setReturnUrl ( "app . kuwas . android : /dev_supported" ) ; paymentManager . setUseSandboxEnabled ( true ) ; paymentManager . setShoppingCartMode ( false ) ; }
public void die ( NamedEntityKind src ) { if ( level ( ) . pit [ getPos ( ) ] ) { getSprite ( ) . fall ( ) ; } else { getSprite ( ) . die ( ) ; } destroy ( ) ; }
public void onScanFailed ( int errorCode ) { Log . e ( TAG , "ScanCallback . onScanFailed : " + errorCode ) ; }
private void userIsLoggedIn ( ) { Intent loginIntent = new Intent ( LoginActivity . this , MainActivity . class ) ; startActivity ( loginIntent ) ; finish ( ) ; }
private void setupFilesList ( ) { recyclerView . setHasFixedSize ( true ) ; layoutManager = new LinearLayoutManager ( this ) ; recyclerView . setLayoutManager ( layoutManager ) ; adapter = new FilesAdapter ( listFiles ) ; recyclerView . setAdapter ( adapter ) ; }
public static void inAndOut ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . in_out_enter , R . anim . in_out_exit ) ; }
public void onStopTrackingTouch ( SeekArc seekArc ) { PreferenceUtil . getInstance ( getActivity ( ) ) . setLastSleepTimerValue ( seekArcProgress ) ; }
public boolean onSwipeDown ( int i , long l , double v ) { return callback . onDrawerGesture ( desktop , Type . SwipeDown ) ; }
public boolean isCurrentlyRunning ( ) { return isCurrentlyRunning ; }
private void changeNotificationPrefs ( ) { boolean isChecked = binding . notificationOptionPrefs . isChecked ( ) ; binding . notificationOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setDistanceNotificationEnabled ( ! isChecked ) ; }
public float scaleX ( float horizontal ) { return horizontal * mOverlay . mWidthScaleFactor ; }
public int getLayoutResId ( ) { return R . layout . main_activity ; }
public void onBackPressed ( ) { if ( mRecyclerView . getAdapter ( ) instanceof PhotoAdapter ) { setAlbumAdapter ( ) ; return ; } super . onBackPressed ( ) ; }
public boolean containsItem ( long id ) { return ( id - baseId < getItemCount ( ) && id - baseId >= 0 ) ; }
public Speck ( ) { texture ( Assets . SPECKS ) ; if ( film == null ) { film = new TextureFilm ( texture , SIZE , SIZE ) ; } origin . set ( SIZE / 2f ) ; }
public IcyInputStream ( InputStream in , int window , PlayerCallback playerCallback ) { super ( in ) ; this . window = window ; bytesBeforeMetadata = window ; this . playerCallback = playerCallback ; }
private void showYearMonth ( ) { TextView year_month = ( TextView ) fragmentView . findViewById ( R . id . calendarYearMonthTextView ) ; year_month . setText ( String . format ( Locale . US , "%tB %tY" , calendar , calendar ) ) ; }
public int priority ( ) { return 1 ; }
public void run ( ) { iconView . setImageDrawable ( drawable ) ; }
public ChameleonMiniSlotPickerPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { Event e = mEvents . addEvent ( object ) ; if ( ! backlog ) { notifyHandlers ( EVENT_ALERT , object ) ; notifyHandlers ( EVENT_BUFFERMSG , e ) ; } }
public static int getUnsolvedTileColor ( ) { if ( Settings . colorMode == Constants . COLOR_MODE_DAY ) { return tilesDayUnsolved [ Settings . tileColor ] ; } else { return tilesNightUnsolved [ Settings . tileColor ] ; } }
public void onItemClick ( int position , String item ) { if ( listener != null ) { dismiss ( ) ; listener . onItemClick ( position , item ) ; } }
public void reloadBarcodes ( ) { try { api . fetchBarcodes ( ) ; } catch ( APIException ex ) { barcodes = new ArrayList <> ( ) ; Log . e ( "BarcodeRequest" , "failed to load barcodes" ) ; } }
public < T > FindExecutor findFirstAsync ( Class < T > modelClass ) { return findFirstAsync ( modelClass , false ) ; }
public void showFab ( ) { FloatingActionButton floatingActionButton = ( FloatingActionButton ) getActivity ( ) . findViewById ( R . id . button_floating_action_welcome ) ; floatingActionButton . show ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_userFull . TLdeserialize ( stream , constructor , exception ) ; }
public static void d ( String tagName , String message ) { if ( LEVEL >= DEBUG ) { Log . d ( tagName , message ) ; } }
public int getCurrentScrollY ( ) { return mScrollView == null ? 0 : mScrollView . getScrollY ( ) ; }
public com . coinomi . core . protos . Protos . PeerAddress getBroadcastBy ( int index ) { return broadcastBy_ . get ( index ) ; }
private void getLastQuery ( ) { String lastQuery = preferences . getStringPreference ( "last_query" ) ; view . setLastQuery ( lastQuery ) ; }
public boolean performClick ( ) { return super . performClick ( ) ; }
public void setTextSize ( float size ) { mMaxTextSize = size ; mTextCachedSizes . clear ( ) ; adjustTextSize ( getText ( ) . toString ( ) ) ; }
public SiaAPI ( ) { prefs = SIAApp . GG_APP . getSharedPreferences ( PREFS_NAME , Context . MODE_PRIVATE ) ; }
public void onClick ( View v ) { int time = Integer . parseInt ( pickerTimer . getText ( ) . toString ( ) ) ; if ( time <= 50 ) { time += 5 ; pickerTimer . setText ( time + "" ) ; } }
public Toolbar getToolbar ( ) { return mToolbar ; }
public void onDismiss ( DialogInterface dialog ) { if ( ! gotResponse ) { mOnResponse . onNegativeResponse ( ) ; } super . onDismiss ( dialog ) ; }
public NfcReceiver getReceiver ( ) { return new NfcReceiver ( ) ; }
public EllipsisTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void setImageBitmap ( Bitmap bitmap ) { if ( ! stopMovements ) { view . setImageBitmap ( bitmap ) ; } }
public final void disable ( ) { Assertions . checkState ( state == STATE_ENABLED ) ; state = STATE_DISABLED ; onDisabled ( ) ; stream = null ; streamIsFinal = false ; }
public ProvisionRequest getProvisionRequest ( ) { final MediaDrm . ProvisionRequest request = mediaDrm . getProvisionRequest ( ) ; return new DefaultProvisionRequest ( request . getData ( ) , request . getDefaultUrl ( ) ) ; }
public boolean syncOpen ( ) { boolean ret = openCP2102 ( ) ; if ( ret ) { createFlowControlThread ( ) ; setSyncParams ( inEndpoint , outEndpoint ) ; return true ; } else { return false ; } }
public void parse ( IRCCloudJSONObject object ) { if ( ! backlog ) notifyHandlers ( type , object ) ; }
public void onDrawerOpened ( View drawerView ) { super . onDrawerOpened ( drawerView ) ; reloadCountNumbersOfSlidingPaneAdapter ( ) ; syncState ( ) ; showTapLogoToSyncShowcaseView ( ) ; }
public boolean onTouchEvent ( MotionEvent event ) { mFingerTracker . onTouchEvent ( event ) ; requestRender ( ) ; return true ; }
public void onTimeout ( long age ) { mClientListener . onClientTimeout ( mClient ) ; closeAndSignalClient ( ) ; }
public void addHeader ( String title , String parentTodoListUuid ) { AddHeaderInteractor interactor = new AddHeaderInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , title , parentTodoListUuid ) ; interactor . execute ( ) ; }
public ExitController ( View view , GestureController gestureController ) { controller = gestureController ; animatorView = view instanceof AnimatorView ? ( ( AnimatorView ) view ) : null ; scrollThresholdScaled = UnitsUtils . toPixels ( view . getContext ( ) , SCROLL_THRESHOLD ) ; }
public void negativeStep ( ) { IntegerRange . getValues ( "10 - 20# - 5" ) ; }
public void showAddNewAlarmView ( ) { startActivityForResult ( new Intent ( this , DetailActivity . class ) , DetailRequest ) ; }
public StatComparator ( String key ) { sort_key = key ; }
public void collected ( ) { collected = true ; }
public void onSuccess ( Object data ) { BluetoothGattCharacteristic characteristic = ( BluetoothGattCharacteristic ) data ; Log . d ( TAG , "enableAuthNotifications success : " + Arrays . toString ( characteristic . getValue ( ) ) ) ; }
public HtmlTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; setMovementMethod ( LinkMovementMethod . getInstance ( ) ) ; setText ( fromHtml ( getText ( ) . toString ( ) ) ) ; }
public void onMovedToScrapHeap ( View view ) { if ( view instanceof MessageListItem ) { ( ( ContactsListItem ) view ) . unbind ( ) ; } }
public void onAdapterFetchMoreData ( ) { boolean hasFetchedAll = mFetchedAllFilters [ mFilter . value ] ; if ( ! hasFetchedAll ) { fetchMediaList ( true ) ; } }
private String getJoinTableName ( DataSupport baseObj , DataSupport associatedModel ) { return getIntermediateTableName ( baseObj , associatedModel . getTableName ( ) ) ; }
public void notifyItemChanged ( int position ) { try { super . notifyItemChanged ( position ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public void read ( DataInputStream dataInputStream ) throws Exception { areaX = dataInputStream . readInt ( ) ; areaZ = dataInputStream . readInt ( ) ; ySection = dataInputStream . readInt ( ) ; }
public static com . coinomi . core . protos . Protos . Key parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void changed ( ChangeEvent event , Actor actor ) { Gdx . net . openURI ( FACEBOOK_URL ) ; }
private static void setupMock ( RetrofitPatApi patapi ) { when ( patapi . getPatterns ( testRoute1 ) ) . thenReturn ( Observable . just ( patternResponse ) ) ; }
private void err ( ) { throw new RuntimeException ( "unknownFormat" ) ; }
public void onCheck ( PieceColor color ) { if ( color == biw . getMainColor ( ) ) { Toast . makeText ( getApplicationContext ( ) , getString ( R . string . check ) , Toast . LENGTH_SHORT ) . show ( ) ; } }
public SearchImageAdapter ( Context context ) { this . context = context ; this . images = new ArrayList <> ( ) ; this . requestManager = Glide . with ( context ) ; }
public ProfileDrawerItem withSelectedColorRes ( int selectedColorRes ) { this . selectedColor = ColorHolder . fromColorRes ( selectedColorRes ) ; return this ; }
public void setLastUpdt ( long l ) { Editor e = prefs . edit ( ) ; e . putLong ( KLASTUPDT , l ) ; e . commit ( ) ; }
public static Locale getSubtypeLocale ( @ NonNull final InputMethodSubtype subtype ) { final String localeString = subtype . getLocale ( ) ; return LocaleUtils . constructLocaleFromString ( localeString ) ; }
public Timestamp getLastAttempt ( ) { return lastAttempt ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mVpnConnect . unInit ( ) ; }
public void onClick ( View v ) { getLikesListView ( userProfileLayout , followers ) ; }
public LottieFontViewGroup ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void setMessageId ( String messageId ) { this . messageId = messageId ; }
public static void stopPlay ( ) { if ( mediaPlayer != null ) { mediaPlayer . stop ( ) ; } }
public void whenFontSizeChanged_CustomFontSizeShouldBeUsed ( ) { settingsProvider . getGeneralSettings ( ) . save ( KEY_FONT_SIZE , "30" ) ; assertThat ( ( int ) getWidget ( ) . binding . launchExternalAppButton . getTextSize ( ) , is ( 29 ) ) ; }
public WebCommentResult apply ( List < ClosedComment > comments ) throws Exception { result . setComments ( ModelUtil . toWebCommentMap ( comments ) ) ; return result ; }
private void getLocation ( OnGeoUtilResultListener onGeoUtilResultListener ) { PermissionsHelper . requestPermission ( getActivity ( ) , Manifest . permission . ACCESS_FINE_LOCATION , R . string . permission_coarse_location , snackBarPlaceholder , ( ) -> GeocodeHelper . getLocation ( onGeoUtilResultListener ) ) ; }
public IBinder onBind ( Intent intent ) { return null ; }
public EighthActivityBuilder description ( String description ) { if ( description . toLowerCase ( ) . equals ( "no description available" ) ) { this . description = null ; } else { this . description = description . trim ( ) ; } return this ; }
public void run ( ) { if ( currentDeletingTaskMids == null && ! gettingNewDeleteTask || currentDeletingTaskTime != 0 && minDate < currentDeletingTaskTime ) { getNewDeleteTask ( null ) ; } }
public void onClick ( DialogInterface dialog , int which ) { recordAudio ( ) ; lastPathAudio = AUDIO_FILE_PATH ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `identity` ADD COLUMN `plain_only` INTEGER NOT NULL DEFAULT 0" ) ; }
public void showMessage ( String title , String msg ) { showMessage ( title , msg , messageTimeout ) ; }
public static int getIdleTimeMillis ( Context context , int minValue ) { return getIntMinValue ( context , "pref_idle_time" , minValue , context . getResources ( ) . getInteger ( R . integer . pref_default_idle_time ) ) ; }
private void ensureExtensionOptionsIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000002 ) != 0 ) ) { extensionOptions_ = new java . util . ArrayList < com . google . protobuf . Any > ( extensionOptions_ ) ; bitField0_ | = 0x00000002 ; } }
public void checkEmptyDir ( ) { File emptyDir = createDir ( "testdir" ) ; fs . setUpFilters ( genericFilters , false ) ; fs . setEmptyDir ( true ) ; fs . startScan ( ) ; assertFalse ( emptyDir . exists ( ) ) ; }
public void register ( ) { if ( receiver == null ) receiver = getReceiver ( ) ; if ( receiver != null ) getContext ( ) . registerReceiver ( receiver , getIntentFilter ( ) ) ; onDrawableUpdate ( - 1 ) ; }
public void onViewStateRestored ( @ Nullable Bundle savedInstanceState ) { super . onViewStateRestored ( savedInstanceState ) ; if ( savedInstanceState != null ) downloadsListState = savedInstanceState . getParcelable ( TAG_DOWNLOADS_LIST_STATE ) ; }
public void onClick ( DialogInterface dialog , int id ) { if ( listener != null ) { listener . onCancel ( null ) ; } MonthYearPickerDialogFragment . this . getDialog ( ) . cancel ( ) ; }
public boolean attachTo ( Char target ) { if ( super . attachTo ( target ) ) { Sample . INSTANCE . play ( Assets . SND_MELD ) ; Dungeon . observe ( ) ; return true ; } else { return false ; } }
public void setParams ( RequestParams p ) { mParams = p ; }
public static PostBody watchlist ( String mediaType , int movieId , boolean watchlist ) { return new PostBody ( mediaType , movieId , null , watchlist ) ; }
public void setData ( List < SozlikDbModel > list ) { if ( list != null ) { this . data . clear ( ) ; this . data . addAll ( list ) ; notifyDataSetChanged ( ) ; } }
public void onClick ( View v ) { Intent result = new Intent ( ) ; result . putExtra ( "HEX" , mDisplayedValues . get ( position ) . hex ) ; setResult ( ColorPickerMainActivity . SEARCH_COMPLETE , result ) ; thisActivity . finish ( ) ; }
public long getReceivableMsat ( ) { return Math . max ( this . getCapacityMsat ( ) - this . getBalanceMsat ( ) - ( this . getChannelReserveSat ( ) / 1000 ) , 0 ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( drawerManager != null ) drawerManager . onTogglerConfigurationChanged ( newConfig ) ; }
public void onRelease ( int primaryCode ) { mKeyboardActionListener . onRelease ( primaryCode ) ; }
public void onClick ( View v ) { oFolder . expand = ! oFolder . expand ; refreshList ( ) ; }
public static boolean playFrom ( int ndx ) { if ( ndx >= mCurrentAudioQueue . size ( ) ) return false ; if ( isPlayingAudio ( ) ) stopAudio ( ) ; mCurrentAudioQueuePosition = ndx - 1 ; nextAudioItem ( ) ; return true ; }
private Model getNote ( String keyStr ) { keyStr = StringUtils . capitalize ( wrapper . clearNote ( keyStr ) ) ; Model model = new Model ( ) ; model . setSummary ( keyStr ) ; model . setType ( ActionType . NOTE ) ; return model ; }
private void detectAndSendKey ( int index , int x , int y , long eventTime ) { detectAndSendKey ( index , x , y , eventTime , 0 ) ; }
public String getAnreise ( ) { return this . _anreise ; }
public void onClick ( View v ) { cacheSaveGif ( uri , c , subreddit , true ) ; }
public void afterTextChanged ( Editable s ) { if ( passwordEditText . length ( ) == 4 && UserConfig . passcodeType == 0 ) { processDone ( ) ; } }
public BusinessAdapter ( Context context ) { BusinessAdapter . context = context ; this . businessList = new ArrayList <> ( ) ; }
public void setVideoQualityPref ( String video_quality ) { SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putString ( PreferenceKeys . getVideoQualityPreferenceKey ( cameraId , false ) , video_quality ) ; editor . apply ( ) ; }
public void hideEditButton ( ) { edit . show ( ) ; }
public MessageHoldersConfigurator setDateHeaderHolder ( @ NonNull Class < ? extends ViewHolder < Date >> holder ) { this . dateHeaderHolder = holder ; return this ; }
public boolean onSwipeUp ( int i , long l , double v ) { return callback . onDrawerGesture ( desktop , Type . SwipeUp ) ; }
public String getFormattedValue ( float value ) { return mActivities [ ( int ) value % mActivities . length ] ; }
private void initImage ( String tweakName ) { Common . loadImage ( this , ivTweak , FoodInfo . getTweakImage ( tweakName ) ) ; }
public void notifyDigitsChanged ( ) { integerPartTV . setText ( Digits . currentDigit . getIntegerPart ( ) + " . " ) ; onClickRestart ( ) ; }
public boolean getRollstuhl ( ) { return this . _rollstuhl ; }
public void attackProc ( Char attacker , Char defender , int damage ) { Buff . prolong ( defender , Stun . class , DURATION ) ; super . attackProc ( attacker , defender , damage ) ; }
public boolean isFirstTimeLaunch ( ) { return getStore ( ) . isFirstTimeLaunch ( ) ; }
private void setStartupState ( ) { GameInputHandlerFactory factory = mGame . getConfig ( ) . getPlayerInputHandlerFactory ( mPlayerIdx ) ; mSelector . setData ( factory ) ; updateConfigureButton ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . ingredient_detail_activity ) ; getAppComponent ( ) . newIngredientDetailActivityComponent ( new IngredientDetailModule ( this ) ) . inject ( this ) ; }
public void onAnimationEnd ( Animator animation ) { windowAnimatorSet = null ; setFocusable ( false ) ; try { ActionBarPopupWindow . super . dismiss ( ) ; } catch ( Exception e ) { } unregisterListener ( ) ; }
public int getNumberOfSatellitesUsedInFix ( ) { return _NumberOfSatellitesUsedInFix ; }
public void onClickStop ( View v ) { cancelEditingTheAlarmField ( ) ; timer . stop ( ) ; updateHandler . endScheduledUpdates ( ) ; updateUI ( ) ; }
public void onSendComplete ( ) { }
private View . OnGenericMotionListener ogml = ( view , motionEvent ) -> { if ( motionEvent . getAction ( ) == MotionEvent . ACTION_BUTTON_PRESS && motionEvent . getButtonState ( ) == MotionEvent . BUTTON_SECONDARY ) cellLongClick ( view ) ; return false ; } ;
public void addPeer ( SwanUser peer ) { nearbyPeers . add ( peer ) ; }
public void onStartTrackingTouch ( SeekBar s ) { seekingSong = getCurrentSong ( ) ; updateSeekBar = false ; }
public void touchPosToCoordinate ( @ NotNull Point coordinate , int mX , int mY , int xSpan , int ySpan , boolean checkAvailability ) { touchPosToCoordinate ( coordinate , mX , mY , xSpan , ySpan , checkAvailability , false ) ; }
public void setFeeChargesOverdue ( Integer feeChargesOverdue ) { this . feeChargesOverdue = feeChargesOverdue ; }
public void call ( final Object . . . args ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { localMessage ( getString ( R . string . connected ) ) ; } } ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; bindViews ( view ) ; }
public boolean isSilent ( ) { return mSoundInfo . getTimesToPlay ( ) == 0 ; }
public boolean onPreferenceChange ( final Preference preference , Object newValue ) { boolean enabled = ( Boolean ) newValue ; dcContext . setConfigInt ( "e2ee_enabled" , enabled? 1 : 0 ) ; return true ; }
public void requestTabComplete ( ) { updateCompletingCommandFlags ( ) ; performFiltering ( true ) ; }
private boolean canDismissWithSwipe ( ) { return true ; }
public Builder withLabel ( int labelId ) { TextView labelView = ( TextView ) v . findViewById ( R . id . label ) ; labelView . setText ( labelId ) ; return this ; }
public static < T > Single < T > doInBackground ( Single < T > upstream ) { return upstream . subscribeOn ( Schedulers . newThread ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { changedSpeed = true ; float animSpeed = progress/50 . 0f ; _mRenderer . changeAnimationSpeed ( animSpeed ) ; editor . putFloat ( "animSpeed" , animSpeed ) ; }
public void setUsername ( String username ) { this . username = username ; }
public void setIdentifier ( String identifier ) { this . identifier = identifier ; }
public Long getNetworkCountry ( ) { return networkCountry ; }
private boolean needsPassthroughWorkarounds ( ) { return Util . SDK_INT < 23 && ( targetEncoding == C . ENCODING_AC3 || targetEncoding == C . ENCODING_E_AC3 ) ; }
private Snacks . Action retryGetLinksAction ( ) { return new Snacks . Action ( R . string . action_retry , new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { getList ( ) ; } } ) ; }
public static void onLinkClicked ( Activity activity , String url , boolean forceNoImage ) { onLinkClicked ( activity , url , forceNoImage , null ) ; }
private int getTotalItemCount ( RecyclerView parent ) { return parent . getAdapter ( ) . getItemCount ( ) ; }
private Compat getCompat ( ) { return getProviderSpecVersionCode ( ) < BULK_INSERT_MIN_SPEC_VERSION ? new CompatV1 ( ) : new CompatV2 ( ) ; }
public void setListVisibility ( boolean visibility ) { mPatientsRecyclerView . setVisibility ( visibility ? View . VISIBLE : View . GONE ) ; }
public void onItemRangeMoved ( int fromPosition , int toPosition , int itemCount ) { showHide ( ) ; }
public void onClick ( View v ) { performDeleteTag ( tag . getTagName ( ) ) ; }
public Locale getLocale ( ) { return new Locale ( LocaleHelper . getLocaleCode ( settingsProvider . getGeneralSettings ( ) ) ) ; }
public ActionBarDrawerToggle createToggle ( Activity activity , DrawerView drawerView ) { return new ActionBarDrawerToggle ( activity , drawerView . getDrawer ( ) , drawerView . getToolbar ( ) , R . string . navigation_drawer_open , R . string . navigation_drawer_close ) ; }
public boolean addAll ( @ NonNull Collection < ? extends E > c ) { for ( E e : c ) if ( ! add ( e ) ) return false ; return true ; }
private double poundToton ( double num ) { return num * 0 . 000454 ; }
private void initView ( ) { CallerFragment callerFragment = new CallerFragment ( ) ; FragmentUtil . addFragment ( this , R . id . container , callerFragment ) ; }
public KonamiCodeLayout ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initalizeValiables ( ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; imageView = ( ScrollParallaxImageView ) itemView . findViewById ( R . id . img_sliding_single ) ; imageView . getLayoutParams ( ) . height = height ; imageView . requestLayout ( ) ; }
public void setEntries ( CharSequence [ ] entries ) { super . setEntries ( entries ) ; if ( dialog != null ) dialog . setItems ( entries ) ; }
public static boolean fragmentsAreAllClosed ( ) { return announcementsFragment == null && mapsFragment == null && countdownFragment == null && creditsFragment == null ; }
public Beverage ( String id , String name , String thumbnailUrl ) { this . mId = id ; this . mName = name ; this . mThumbnailUrl = thumbnailUrl ; }
public int getMapWidth ( ) { return mapWidth ; }
public ExtraBuilder setTimes ( @ NotNull String [ ] times ) { return new ExtraBuilder ( locale , times ) ; }
public void isNotCancellable ( ) { FragmentScenario < BackgroundAudioPermissionDialogFragment > scenario = DialogFragmentTest . launchDialogFragment ( BackgroundAudioPermissionDialogFragment . class ) ; scenario . onFragment ( f -> { assertThat ( f . isCancelable ( ) , is ( false ) ) ; } ) ; }
public void remove ( TextView view ) { viewList . remove ( view ) ; timestampMap . remove ( view ) ; }
private boolean isMatchExactlyEnabled ( ) { return SettingsUtils . getFormUpdateMode ( application , generalSharedPreferences ) == FormUpdateMode . MATCH_EXACTLY ; }
public static OfflineSubreddit getSubreddit ( String subreddit , boolean offline , Context c ) { return getSubreddit ( subreddit , 0l , offline , c ) ; }
public void setWidgetLayoutType ( WidgetLayoutType widgetLayoutType ) { this . mWidgetLayoutType = widgetLayoutType ; }
public void showBestSearchInPlacesSection ( Cursor cursor ) { if ( searchPlacesFragment . isViewCreated ( ) ) { searchPlacesFragment . setData ( cursor ) ; searchPlacesFragment . showList ( ) ; searchPlacesFragment . showQuickHeaders ( cursor . getCount ( ) ) ; } }
public void onRemoveFinished ( RecyclerView . ViewHolder item ) { assertTrue ( mRemoveFinished . add ( item ) ) ; onFinished ( ) ; }
private void updatePlaylistsAdapter ( ) { PlaylistsAdapter adapter = new PlaylistsAdapter ( context , MediaLibraryManager . getPlaylistInfoList ( ) ) ; RecyclerView listView = PlaylistsFragment . recyclerView ; listView . setAdapter ( adapter ) ; adapter . notifyDataSetChanged ( ) ; }
public IndexedTreeMap ( Map < ? extends K , ? extends V > m ) { comparator = null ; putAll ( m ) ; }
public void onSurfaceCreated ( SurfaceHolder holder ) { _surfaceCreated ( ) ; }
public boolean hasEncryptionType ( ) { return ( ( bitField0_ & 0x00000008 ) == 0x00000008 ) ; }
public int getIntrinsicWidth ( ) { return iconSize ; }
public void setColorSchemeColors ( int . . . colors ) { ensureTarget ( ) ; mProgress . setColorSchemeColors ( colors ) ; }
public GpxWriter ( OutputStreamWriter output ) { this . output = output ; }
public void setExchangeRate ( @ Nonnull final ExchangeRate exchangeRate ) { this . exchangeRate = exchangeRate ; update ( ) ; }
public HeartRateSummary ( ) { }
public String getUserPassword ( ) { return ENUM_String . STRING_USER_PASSWORD . value ; }
public void onRemoveStream ( MediaStream stream ) { Log . w ( TAG , "onRemoveStream : " + stream ) ; }
public static int getOption ( ) { return opcion ; }
public String getSub ( ) { return slug ; }
public void onPageSelected ( int position ) { String pageTitle = ( String ) getPageAdapter ( ) . getPageTitle ( position ) ; AppPrefs . setReaderSubsPageTitle ( pageTitle ) ; invalidateOptionsMenu ( ) ; }
public void onIceGatheringChange ( PeerConnection . IceGatheringState newState ) { Log . w ( TAG , "onIceGatheringChange : " + newState ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { float blurRadius = progress / step ; blurRadius = Math . max ( blurRadius , minBlurRadius ) ; topBlurView . blurRadius ( blurRadius ) ; bottomBlurView . blurRadius ( blurRadius ) ; }
public void setName ( String name ) { mUnreadNotificationSwitch . setText ( name ) ; }
public Collection < ? extends ICell > getCells ( ) { return cells ; }
public void onMoveFinished ( RecyclerView . ViewHolder item ) { assertTrue ( mMoveFinished . add ( item ) ) ; onFinished ( ) ; }
public int getGifMaxSize ( ) { return 25 * MB ; }
public boolean loadUsePalette ( ) { return PreferenceUtil . getInstance ( getActivity ( ) ) . songColoredFooters ( ) ; }
public void testTakeVideoExposureLock ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideoExposureLock" ) ; setToDefault ( ) ; subTestTakeVideo ( true , false , false , false , null , 5000 , false ) ; }
public boolean addPendingAnimation ( RecyclerView . ViewHolder item ) { resetAnimation ( item ) ; item . itemView . setAlpha ( 0 ) ; enqueuePendingAnimationInfo ( new AddAnimationInfo ( item ) ) ; return true ; }
private static void quickCache ( Info i ) { mTwoInfosAgo = mLastInfo ; mLastInfo = i ; }
public HttpActuator ( Bundle httpConfig ) { connection = new ServerConnection ( httpConfig ) ; }
public void setQuestion ( ModelQuestionInformation mqi ) { this . mqi = mqi ; setSoru ( mqi ) ; changeFavoriteFabColor ( ) ; setFavoriteFab ( ) ; }
public void tearDown ( ) throws Exception { }
public void onFailure ( Call < HackerNewsItem > call , Throwable t ) { notifyItem ( progressId , itemId , null ) ; }
public static Player getPlayer ( String playerId ) { return null ; }
public int getClipX ( ) { return clipRect . left - translateX ; }
public void setPath ( String path , String category ) { setPath ( path , - 1 , category ) ; }
public AndroidSensorManager ( DroidsorService service ) { droidsorService = service ; mSensorManager = ( SensorManager ) service . getSystemService ( Context . SENSOR_SERVICE ) ; resetManager ( ) ; }
private void refreshUi ( ) { handlePlaybackEvent ( RadioApplication . sPlaybackState ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return DateUtils . convertMilliSecondsToFormattedDate ( ( long ) value ) ; }
private int getCurrentPage ( ) { return QuranInfo . getPageFromPos ( mViewPager . getCurrentItem ( ) , mDualPages ) ; }
public void dispatchStarting ( AddAnimationInfo info , RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchAddStarting ( " + item + " ) " ) ; } mItemAnimator . dispatchAddStarting ( item ) ; }
public SearchBookRecyclerHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = mLayoutInflater . inflate ( R . layout . searched_book_item , parent , false ) ; return new SearchBookRecyclerHolder ( view ) ; }
private void setType ( ) { TextView tv = ( TextView ) rootView . findViewById ( R . id . type ) ; tv . setText ( type . trim ( ) ) ; }
public FreeStation ( boolean hasDAO ) { this ( 0 , hasDAO ) ; }
public void onClick ( View v ) { if ( v . getId ( ) == R . id . previous_page_button ) { gotoPreviousPage ( ) ; } else { gotoNextPage ( ) ; } }
public int addNote ( Note note ) { return addNote ( note , Models . AllowEmpty . ONLY_CLOZE ) ; }
public void deleteAllServers ( ) { synchronized ( this ) { while ( mServers . size ( ) > 0 ) deleteServer ( mServers . get ( mServers . size ( ) - 1 ) ) ; } }
public void run ( ) { gettingNewDeleteTask = true ; MessagesStorage . getInstance ( ) . getNewTask ( oldTask ) ; }
public void setUp ( ) { mActivity = mActivityRule . getActivity ( ) ; mFragment = ( ConverterFragment ) mActivity . getSupportFragmentManager ( ) . findFragmentByTag ( mActivity . CONVERTER_FRAGMENT_TAG ) ; }
public AppSettingsBase setIntList ( String key , List < Integer > value ) { setIntListOne ( key , value , _prefApp ) ; return this ; }
public int getStartHour ( ) { return getSharedPreferences ( SettingActivity . PREFERENCE_NAME , SettingActivity . PREFERENCE_MODE ) . getInt ( SettingActivity . WORD_NOTIFICATION_START_TIME_HOUR , 9 ) ; }
public void onConnected ( @ Nullable Bundle bundle ) { Auth . GoogleSignInApi . signOut ( googleApiClient ) . setResultCallback ( status -> googleSignInButton . setOnClickListener ( this ) ) ; }
public ItemManager . Item getParentItem ( ) { return null ; }
public void setCheckedMap ( HashMap < Integer , ? > map ) { checkedMap = map ; }
public int getNightModeTextBrightness ( ) { return mPrefs . getInt ( Constants . PREF_NIGHT_MODE_TEXT_BRIGHTNESS , Constants . DEFAULT_NIGHT_MODE_TEXT_BRIGHTNESS ) ; }
public List < RecipeLabelTable > getDbRecipeLabelTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getRecipeLabelTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
private void setPreviewImage ( String imagePath , int maxsize ) { if ( imagePath != null && ! "" . equals ( imagePath ) ) { File f = new File ( imagePath ) ; setImagePreview ( f , maxsize ) ; } }
public StatusCondition ( @ JsonProperty ( "status" ) VmStatus status ) { this . status = status ; }
public DefaultTeXFontParser ( ) throws ResourceParseException , IOException { this ( jLatexMath . getAssetManager ( ) . open ( RESOURCE_NAME ) , RESOURCE_NAME ) ; }
public static final Item TOMB = new Item ( ) { public int image ( ) { return ItemSpriteSheet . TOMB ; } } ;
public void onFailure ( Call < ApiResponse > call , Throwable t ) { t . printStackTrace ( ) ; Log . d ( "coopApi" , "Network Error" ) ; showFailMessage ( ) ; }
public void pause ( ) { Logging . debug ( "AnimationViewPlayer pause" ) ; isPlaying = false ; view . invalidate ( ) ; }
public WndError ( String message ) { super ( Icons . WARNING . get ( ) , Game . getVar ( R . string . WndError_Title ) , message ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( getSActivity ( ) , StarNameDomainDetailActivity . class ) ; intent . putExtra ( "domain" , domain . name ) ; startActivity ( intent ) ; }
public void testAddChecksumAndEncode ( ) throws WriterException { doTest ( "0509689" , "0000000000010101110010100111000101101011110110111001011101010100000000000" ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mProximityManager = new BLEManager ( this ) ; mProximityManager . init ( ) ; BeaconInitializer . getInstance ( getApplicationContext ( ) ) ; mEvaluationManager = new EvaluationManager ( this , mProximityManager ) ; }
public void testSafeToAddAuthToken16 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( wpcomAddress2 ) ) ) ; }
public String getLessonHash ( SLesson lesson ) throws Exception { return textUtils . crypt ( getLessonSignature ( lesson ) ) ; }
public void cleanupQueue ( ) { try { syncLatch . await ( ) ; handler . removeCallbacksAndMessages ( null ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onClick ( View v ) { if ( getActivity ( ) instanceof StartScreen ) { ( ( StartScreen ) getActivity ( ) ) . onPermissionListHeadlinePressed ( ) ; } }
public void onPause ( ) { super . onPause ( ) ; saveSettings ( ) ; saveAddtitionalSettings ( ) ; }
private void initViews ( ) { ( ( TextView ) findViewById ( R . id . nickTv ) ) . setText ( nick ) ; }
private View . OnClickListener mOnClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { showBlogPreview ( ) ; } } ;
public void setLng ( double lng ) { this . lng = lng ; }
public Reorder ( DeckConfig conf ) { this . conf = conf ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putSerializable ( WordPress . SITE , mSite ) ; outState . putString ( PublicizeConstants . ARG_SERVICE_ID , mServiceId ) ; }
public void backupCheckpoint ( ) { try { getWritableDatabase ( ) . execSQL ( "PRAGMA wal_checkpoint" ) ; } catch ( Exception e ) { LogTool . e ( e ) ; } }
public MutableLiveData < List < Barcode >> getBarcodes ( ) { return barcodes ; }
public static int dpToPx ( int dp ) { DisplayMetrics metrics = Resources . getSystem ( ) . getDisplayMetrics ( ) ; return ( int ) ( dp * metrics . density + 0 . 5f ) ; }
public void onClick ( DialogInterface dialog , int which ) { reallyStreamFile ( selectedFile ) ; }
public void onValueSelected ( Entry e , int dataSetIndex , Highlight h ) { Toast . makeText ( this , e . toString ( ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public String desc ( ) { return Game . getVar ( R . string . RogueArmor_Desc ) ; }
public SqlBuilder after ( final String afterOp ) { sql . append ( " AFTER " ) . append ( afterOp ) ; return this ; }
private void clearExtraFragment ( ) { FragmentManager manager = mCentralMap . getFragmentManager ( ) ; try { manager . popBackStack ( EXTRA_FRAGMENT_BACK_STACK , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; } catch ( IllegalStateException ise ) { } }
public LevelFileService ( Context context ) { levelCreator = new LevelCreator ( ) ; fileHandler = new FileHandler ( context ) ; }
public AppDetail [ ] newArray ( int size ) { return new AppDetail [ size ] ; }
public PathLayer ( Map map , LineStyle style ) { super ( map ) ; mLineStyle = style ; mPoints = new ArrayList <> ( ) ; mRenderer = new RenderPath ( ) ; mWorker = new Worker ( map ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item , parent , false ) ; return new MyViewHolder ( itemView ) ; }
public static boolean isLowLatencySupported ( ) { return lowLatencySupported ; }
public PlanGridAdapter ( boolean m ) { inflater = ( LayoutInflater ) getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; mode = m ; }
public static MainApplication get ( final Context context ) { return ( MainApplication ) context . getApplicationContext ( ) ; }
public void onClick ( View arg0 ) { JobActivity . this . jobTimeClicked ( ) ; }
public AcornTrophy ( String name , int scoreNeeded , String toastDescription , String trophyDescribtion , boolean visibleScore , int icon , int iconSolved ) { super ( name , scoreNeeded , toastDescription , trophyDescribtion , visibleScore , icon , iconSolved ) ; }
public void run ( ) { if ( waitingForKeyboardCloseRunnable != this ) { return ; } waitingForKeyboardCloseRunnable = null ; startLayoutAnimation ( false , true ) ; }
public void setRange ( int min , int max , int stepSize ) { mMin = min ; mMax = max ; mStepSize = stepSize ; mDivisor = NO_DIVISOR ; setValue ( getValue ( ) ) ; }
public static void setSupportName ( String name ) { setString ( UndeletablePrefKey . SUPPORT_NAME , name ) ; }
public void surfaceDestroyed ( SurfaceHolder holder ) { _thread . onPause ( ) ; MainActivity . saveData ( ) ; }
public void onAudioDisabled ( DecoderCounters counters ) { if ( audioDebugListener != null ) { audioDebugListener . onAudioDisabled ( counters ) ; } audioFormat = null ; audioDecoderCounters = null ; audioSessionId = AudioTrack . SESSION_ID_NOT_SET ; }
public Object visit ( Album album ) { icon . setImageResource ( R . drawable . album24 ) ; return null ; }
public void setActionBarPadding ( Activity activity ) { WindowService window = new WindowService ( ) ; Toolbar toolbar = ( Toolbar ) activity . findViewById ( TOOLBAR ) ; toolbar . setPadding ( 0 , window . getStatusBarFromPrefs ( activity ) , 0 , 0 ) ; }
public boolean pressBack ( ) { return mPathBar . pressBack ( ) ; }
public void setImageUploading ( String itemId ) { SharedPreferences . Editor editor = mSharedPreferences . edit ( ) ; editor . putBoolean ( KEY_IMAGE_UPLOADING + itemId , true ) ; editor . commit ( ) ; }
public void run ( ) { String result = Statusgo . VerifyAccountPassword ( newKeystoreDir , address , password ) ; callback . invoke ( result ) ; }
public void setLocationId ( Integer locationId ) { this . locationId = locationId ; }
public HexView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 , 0 ) ; }
public void playPageFlipSound ( ) { this . mediaPlayerPageFlip . start ( ) ; }
public void setToolbarLeftAndRightPadding ( int paddingLeft , int paddingRight ) { mToolbar . setPadding ( paddingLeft , mToolbar . getPaddingTop ( ) , paddingRight , mToolbar . getPaddingBottom ( ) ) ; }
public String getDateString ( final DateTime dateTime ) { return dateTime . format ( "YYYYMMDD" ) ; }
public boolean onOptionsItemSelected ( final MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { onBackPressed ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public ChoiceGridView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; Init ( ) ; }
public void setSunsetTime ( Double sunsetTime ) { this . sunsetTime = sunsetTime ; }
private boolean _resched ( @ NonNull Card card ) { DeckConfig conf = _cardConf ( card ) ; if ( conf . getInt ( "dyn" ) == 0 ) { return true ; } return conf . getBoolean ( "resched" ) ; }
public static boolean needsRegistration ( Context context ) { return ! isRegistered ( context ) || needsUpdate ( context ) ; }
public static ProfileManager getInstance ( Context context ) { if ( ourInstance == null ) { ourInstance = new ProfileManager ( context ) ; } return ourInstance ; }
public long getLong ( String key , long defValue ) { return Long . valueOf ( this . getString ( key , Long . toString ( defValue ) ) ) ; }
public void onPause ( ) { super . onPause ( ) ; getPresenterDelegate ( ) . onPause ( ) ; }
public String getTipp ( ) { return this . _tipp ; }
public void subscribeToPaletteColors ( final PaletteListener paletteListener ) { if ( paletteListener != null ) { mPlaletteListeners . add ( paletteListener ) ; paletteListener . onPaletteReady ( currentPaletteColor ) ; } }
public void onModified ( final Recipient recipient ) { Util . runOnMain ( ( ) -> { fromView . setText ( recipient ) ; contactPhotoImage . setAvatar ( recipient , false ) ; } ) ; }
private AnimatableShapeValue ( List < Keyframe < ShapeData >> keyframes ) { super ( keyframes ) ; }
public void setDataSet ( IPieDataSet dataSet ) { mDataSets . clear ( ) ; mDataSets . add ( dataSet ) ; init ( ) ; }
public int getCurrentPosition ( ) { return mMediaPlayer != null ? mMediaPlayer . getCurrentPosition ( ) : 0 ; }
public int seek ( final int whereto ) { try { mCurrentMediaPlayer . seekTo ( whereto ) ; return whereto ; } catch ( IllegalStateException e ) { return - 1 ; } }
public boolean getPressed ( ) { return isPressed ; }
public Double [ ] getPosition ( ) { return p . clone ( ) ; }
public void onClick ( boolean isPauseClick ) { if ( isPauseClick ) { pauseRecite ( false ) ; } else { stopPlayback ( true ) ; } }
public void onEndpointLost ( String endpointId ) { Log . d ( TAG , "A previously discovered endpoint has gone away" ) ; }
public List < RecipeFoodTable > getDbRecipeFoodTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getRecipeFoodTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { School s = School . LIST . get ( position ) ; showLoginDialog ( s . sid , s . loginNeeded ) ; }
public Drawable getViewInAppIcon ( ) { return ViewInAppIcon ; }
public void onStartTrackingTouch ( SeekBar sb ) { gestureInProgress = false ; limitedJump = false ; }
public void onUpdateAmbient ( ) { super . onUpdateAmbient ( ) ; adapter . notifyDataSetChanged ( ) ; Log . i ( "Auth2" , "Key Updated . " ) ; }
private void startWordListActivity ( char letter ) { Intent intent = new Intent ( this , WordListActivity . class ) ; intent . putExtra ( Constants . LETTER , letter ) ; startActivity ( intent ) ; }
public MenuBottomSheetAdapter ( List < String > items , Listener listener ) { this . items = items ; this . listener = listener ; }
public String [ ] getAlarmReminderArray ( ) { return new String [ ] { "15 Minutes Before" , "1 Hour Before" , "1 Day Before" } ; }
public DrawerBuilder withRecyclerView ( RecyclerView recyclerView ) { this . mRecyclerView = recyclerView ; return this ; }
public void run ( ) { localMessage ( getString ( R . string . connected ) ) ; }
public LiveData < List < SupplierProduct >> getBySupplierIdAndProductName ( long id ) { return supplierProductDao . getBySupplierIdAndProductName ( id ) ; }
public void shouldNotMatchGivenDifferentHumidity ( ) { givenForecastWithValues ( 1 , 1 , "someCity" , 1d , 1d , "someHumidity" , "someDate" , "someCountry" , 1d , "someDesc" ) ; givenWritingToParcel ( ) ; givenNewHumidity ( "newHumidity" ) ; whenCreatingFromParcel ( ) ; thenForecastCreatedShouldNotBeEqualTo ( forecast ) ; }
public void run ( ) { currentFetchPhotosCall = yelpService . fetchRestaurantPhotos ( restaurant . getId ( ) ) ; currentFetchPhotosCall . enqueue ( new FetchPhotosCallback ( ) ) ; }
public String name ( ) { return Game . getVar ( R . string . EarthrootBuff_Name ) ; }
public void testSafeToAddAuthToken14 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( notWpcomAddress2 ) ) ) ; }
public void setGame ( MainGame game ) { this . game = game ; }
private void givenInvalidRequestReturningNull ( ) throws IOException { when ( mModelConverter . getForecastModel ( ) ) . thenReturn ( null ) ; }
public void shootDoubleBall ( LinearVisionOpMode opMode ) { shootBalls ( true ) ; waitFor ( opMode , RobotConstants . shotWaitPeriod ) ; intakeBalls ( true ) ; waitFor ( opMode , 5 ) ; intakeBalls ( false ) ; shootBalls ( false ) ; }
public AccountControlEffectiveBalanceLeasing ( short period ) { this . period = period ; }
public static byte [ ] encryptTextBase64Bytes ( String text ) { if ( text == null ) return null ; return encryptBytesBase64Bytes ( text . getBytes ( CHARSET_UTF_8 ) ) ; }
public void setDomainStep ( XYStepMode mode , double value ) { setDomainStepMode ( mode ) ; setDomainStepValue ( value ) ; }
private void fillInPlantTypes ( ) { List < PlantCategory > categories = new ArrayList < PlantCategory > ( PlantCategory . all ( ) ) ; PlantCategoryAdapter adapter = new PlantCategoryAdapter ( this , categories ) ; plantTypesView . setAdapter ( adapter ) ; }
public APS ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public void test ( String name , String input , String expectedOutput ) throws Exception { Assert . assertEquals ( Long . parseLong ( expectedOutput ) , FBEvent . parseDateTime ( input ) ) ; }
public void setBitmap ( Bitmap doubleFire ) { this . forceField = doubleFire ; }
public SwipeDismissItemRemoveAnimationManager ( BaseItemAnimator itemAnimator ) { super ( itemAnimator ) ; }
public FormEntryPage clickGoToStart ( ) { onView ( withId ( R . id . jumpBeginningButton ) ) . perform ( click ( ) ) ; return new FormEntryPage ( formName , rule ) . assertOnPage ( ) ; }
public void onApply ( ) { initCryptPass ( passHash , true ) ; PINManager . askPINCode ( context , isNodeOpening , ( ) -> { loadStorage ( context , node , true , isOnlyFavorites , isOpenLastNode ) ; } ) ; }
public Nomenclature getSelectedItem ( ) { return mSelectedItem != null ? mSelectedItem . nomenclature : null ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( EventBus . getDefault ( ) . isRegistered ( this ) ) EventBus . getDefault ( ) . unregister ( this ) ; }
public String getLocalFolderName ( ) { return ENUM_String . STRING_LOCAL_FOLDER_NAME_1 . value ; }
public void resetPaint ( ) { reset ( ) ; setColor ( mCurColor ) ; invalidate ( ) ; }
public void addNewScore ( boolean movedFirstCard ) { long time = timer . getCurrentTime ( ) ; addNewHighScore ( score , time ) ; if ( movedFirstCard ) { addNewRecentScore ( score , time ) ; } setTotalTimePlayed ( time ) ; setTotalPointsEarned ( score ) ; }
public void onCryptDisciplineChanged ( String discipline , boolean isBasic , boolean isChecked ) { if ( ! restoring ) { filterModel . setDiscipline ( discipline , isBasic , isChecked ) ; updateSearchSettingsButtonState ( ) ; filterCryptCards ( ) ; } }
public VolumeKeyEvent ( int action , int code ) { super ( action , code ) ; this . mVolumeKeyEventType = VOLUME_KEY_EVENT_NATIVE ; this . mPrevCurrentValue = null ; }
public void save ( ) { mDataSource . save ( ) ; }
public long getNumberOfPoints_Processed ( ) { return NumberOfPoints_Processed ; }
public void onFinish ( ) { Futils . crossfadeInverse ( buttons , pathLayout ) ; }
public ContourPlotView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . prepare ( attrs ) ; }
public View findViewById ( @ IdRes int resId ) { return this . mDialog . findViewById ( resId ) ; }
public BookAdapter ( Context context , RealmResults < Book > books ) { super ( books , true , true ) ; this . mContext = context ; this . mContacts = books ; }
public void setTp ( Integer tp ) { this . tp = tp ; }
public void onAsteroidHit ( int score ) { if ( ! isTutorial && asteroidsHit == 0 && asteroidsPassed == 0 ) unlock ( R . string . achievememt_savage ) ; asteroidsHit ++ ; }
public Cursor runQuery ( CharSequence constraint ) { Cursor cursor ; if ( constraint != null && constraint . length ( ) > 0 ) cursor = getCursor ( constraint . toString ( ) ) ; else cursor = restoreCursor ( ) ; return cursor ; }
public boolean isMoving ( ) { return moving ; }
public void onCitySelectionChanged ( City city ) { presenter . loadAttractions ( city . getId ( ) ) ; }
public JSONObject getDevice ( String address ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/devices/%s/" , mUserId , address ) , requestMap ) ; }
public void setUp ( ) throws Exception { activity = Robolectric . setupActivity ( MainActivity_ . class ) ; rainAndTemperatureButton = activity . findViewById ( R . id . button_rain_temperature ) ; }
public void onPageScrolled ( int pos , float offset , int positionOffsetPixels ) { if ( offset > 0 . 95 ) { reflectionManager . stopPlayback ( ) ; } }
public void addValidation ( TextInputLayout confirmationTextInputLayout , TextInputLayout textInputLayout , String errMsg ) { mValidator . set ( confirmationTextInputLayout , textInputLayout , errMsg ) ; }
public static boolean clearMiddlePassCheckData ( ) { return DatabaseConfig . saveCheckData ( null ) ; }
public void onClick ( View v ) { autoCompleter . removeFromAutoComplete ( category ) ; resultList . remove ( category ) ; notifyDataSetChanged ( ) ; }
private void givenUut ( ) { uut = new AnalyticsManager ( mContext ) ; uut . addObserver ( mAnalyticsTestObserver ) ; }
public java . util . List < com . coinomi . core . protos . Protos . TransactionOutput > getTransactionOutputList ( ) { return transactionOutput_ ; }
private void setBoolean ( int keyId , boolean value ) { settings . edit ( ) . putBoolean ( getResString ( keyId ) , value ) . apply ( ) ; }
public LogListAdapter cloneInOtherLayout ( int resourceId ) { return new LogListAdapter ( mContext , resourceId , mTrajectorySpanList ) ; }
public void setFullSpan ( boolean fullspan ) { mFullspan = fullspan ; refresh ( ) ; }
public AsyncHttpClient getAsyncHttpClient ( ) { return mAsyncHttpClient ; }
public void render ( float delta ) { super . render ( delta ) ; act ( delta ) ; updateCamera ( ) ; drawMap ( ) ; drawSections ( ) ; }
private void hideBottomNavigationView ( ) { isBottomNavigationHidden = true ; bottomNavigation . animate ( ) . translationY ( bottomNavigation . getHeight ( ) ) . setDuration ( 100 ) ; }
public IAnswerData getAnswer ( ) { return binding . widgetAnswerText . getText ( ) . equals ( getContext ( ) . getString ( R . string . no_date_selected ) ) ? null : new DateData ( selectedDate . toDate ( ) ) ; }
public boolean isCachedValueEnabled ( float interpolatedProgress ) { throw new IllegalStateException ( "not implemented" ) ; }
public AboutBuilder addYoutubeUserLink ( String user ) { return addLink ( R . mipmap . youtube , R . string . youtube , util . openYoutubeUser ( user ) ) ; }
public AyahToolBarPip ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( ) ; }
public void setAlign ( String align ) { this . align = align ; }
public void setDuration ( long duration ) { mDuration = duration ; }
private void onSelect ( Beacon beacon ) { dialogCallback . accept ( beacon ) ; dismiss ( ) ; }
public boolean isAndroidN ( ) { return Build . VERSION . SDK_INT > Build . VERSION_CODES . M || Build . VERSION . CODENAME . equals ( "N" ) ; }
public Socket createSocket ( String s , int i , InetAddress inetAddress , int i2 ) throws IOException { return null ; }
public SayHi set ( String parameterName , Object value ) { return ( SayHi ) super . set ( parameterName , value ) ; }
public AirplaneModeReceiver getReceiver ( ) { return new AirplaneModeReceiver ( ) ; }
public void onLoaderReset ( Loader < List < CharSequence >> loader ) { mDocumentProperties = null ; }
public void onResponse ( Call < FavouriteShop > call , Response < FavouriteShop > response ) { if ( ! isVisible ( ) ) { return ; } if ( response . code ( ) == 201 ) { setFavouriteIcon ( true ) ; } }
public static MessageBase [ ] fromJson ( @ NonNull InputStream input ) throws IOException , EncryptionException { return decrypt ( arrayCompatMapper . readValue ( input , MessageBase [ ] . class ) ) ; }
public Loader < List < DeviceSetting >> onCreateLoader ( int id , Bundle args ) { return new DeviceSettingLoader ( context ) ; }
public String getX ( ) { return x ; }
public void showEmptyView ( ) { mPeopleAdapter . updatePersonListItems ( new ArrayList < Person > ( ) ) ; mTextViewEmptyDebts . setVisibility ( View . VISIBLE ) ; }
public void onRefresh ( ) { thread . run ( IGR , ( ) -> { log . v ( TAG , "refreshing" ) ; load ( true ) ; } ) ; }
public Category category ( ) { return category ; }
public boolean onQueryTextChange ( String newText ) { if ( mAdapter != null ) mAdapter . filter ( newText ) ; if ( ! getCallback ( ) . isFiltersVisible ( ) ) { showRemindersFilter ( ) ; } return false ; }
public static RecyclerSupport addTo ( RecyclerView view ) { RecyclerSupport support = ( RecyclerSupport ) view . getTag ( R . id . item_click_support ) ; if ( support == null ) { support = new RecyclerSupport ( view ) ; } return support ; }
private SimpleDateFormat getSimpleDateFormat ( ) { return new SimpleDateFormat ( getString ( R . string . edit_date_format ) , Locale . getDefault ( ) ) ; }
public CharSequence getPageTitle ( int position ) { return bookCatalogElements . get ( position ) . getName ( ) ; }
public ValueFormatter getValueFormatter ( ) { if ( mAxisValueFormatter == null || ( mAxisValueFormatter instanceof DefaultAxisValueFormatter && ( ( DefaultAxisValueFormatter ) mAxisValueFormatter ) . getDecimalDigits ( ) != mDecimals ) ) mAxisValueFormatter = new DefaultAxisValueFormatter ( mDecimals ) ; return mAxisValueFormatter ; }
public void needSendTyping ( ) { MessagesController . getInstance ( ) . sendTyping ( dialog_id , 0 , classGuid ) ; }
public void fireLocalPhotosForUploadSelected ( ArrayList < LocalPhoto > photos ) { List < UploadIntent > intents = UploadUtils . createIntents ( getAccountId ( ) , destination , photos , UploadObject . IMAGE_SIZE_FULL , true ) ; uploadManager . enqueue ( intents ) ; }
public void flowComplete ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { Log . i ( LOG_TAG , String . format ( "%s Flow Complete" , workflowId ) ) ; getMvpView ( ) . showProgress ( false ) ; getMvpView ( ) . goToDashBoard ( ) ; }
public AutoSaveTextHelper getAutoSaveTextHelper ( ) { return mAutoSaveTextHelper ; }
public void toggle ( ) { CheckBox c = ( CheckBox ) findViewById ( R . id . checkbox ) ; c . setChecked ( ! c . isChecked ( ) ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . auto_format ) ; }
public void onViewCreated ( @ NonNull View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; activity . addMusicServiceEventListener ( this ) ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; JobImportActivity . this . finish ( ) ; }
public void showTripDetails ( Trip trip ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AppConstants . KEY_TRIP_ID , trip . getId ( ) ) ; updateDisplayedFragment ( FRAGMENT_TRIP_DETAILS , bundle ) ; }
private String getIdName ( ) { return idName ; }
public void updatePlayCount ( Context context ) { playCount = playCount + 1 ; savePreferences ( context ) ; }
private static void prepareDocument ( Document doc ) { removeScriptsAndStyles ( doc ) ; }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . SUGGESTIONS ; }
public void onPhantomUpEvent ( final long eventTime ) { if ( DEBUG_EVENT ) { printTouchEvent ( "onPhntEvent : " , mLastX , mLastY , eventTime ) ; } onUpEventInternal ( mLastX , mLastY , eventTime ) ; cancelTrackingForAction ( ) ; }
public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( mAlert . onKeyDown ( keyCode , event ) ) { return true ; } return super . onKeyDown ( keyCode , event ) ; }
public Builder setFabIcon ( int icon ) { if ( icon <= 0 ) { Log . e ( "FabIcon" , "Impossible to set Fab Icon Resource lower than 0 ! Please Check it" ) ; } else { mFabIcon = icon ; } return this ; }
public void whenPermissionIGranted_requestGeoPoint_setsFormIndexWaitingForData ( ) { activityGeoDataRequester . requestGeoPoint ( testActivity , prompt , "" , waitingForDataRegistry ) ; assertTrue ( waitingForDataRegistry . waiting . contains ( formIndex ) ) ; }
public WPDialogSnackbar setPositiveButton ( CharSequence text , View . OnClickListener listener ) { setButtonTextAndVisibility ( ( TextView ) mContentView . findViewById ( R . id . button_positive ) , text , listener ) ; return this ; }
public String tileName ( int tile ) { switch ( tile ) { case Terrain . UNLOCKED_EXIT : case Terrain . LOCKED_EXIT : return Game . getVar ( R . string . PortalGate_Name ) ; default : return super . tileName ( tile ) ; } }
public void parse ( IRCCloudJSONObject object ) throws JSONException { if ( userInfo != null ) userInfo . num_invites = object . getInt ( "num_invites" ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . fragment_playlist , parent , false ) ; return new ViewHolder ( view ) ; }
public ScaleAnimatedTextView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void onClosed ( CameraDevice cam ) { if ( MyDebug . LOG ) Log . d ( TAG , "camera closed , first_callback? " + first_callback ) ; if ( first_callback ) { first_callback = false ; } }
public String desc ( ) { return Game . getVar ( R . string . PotionOfParalyticGas_Info ) ; }
private String expandedToNumericalDate ( String date ) { try { return NUMERICAL_FORMAT . format ( EXPANDED_FORMAT . parse ( date ) ) ; } catch ( ParseException e ) { FirebaseCrash . report ( e ) ; } return "" ; }
public final void addPageRight ( ) { _desktop . getPages ( ) . add ( getItemLayout ( ) ) ; notifyDataSetChanged ( ) ; }
public void goToVideoPreview ( int accountId , int videoId , int videoOwnerId ) { PlaceFactory . getVideoPreviewPlace ( accountId , videoOwnerId , videoId , null ) . tryOpenWith ( getActivity ( ) ) ; }
private void onSliderChanged ( float percent ) { setValue ( mMin + ( int ) ( percent * ( mMax - mMin ) ) ) ; fireChangeEvent ( ) ; }
public void setHolding ( List < Object > holding ) { this . holding = holding ; }
public void passwords_with_default_seed_are_correct ( ) { test_single_passwords ( using_default_seed , DEFAULT_SEED ) ; }
public int getOut ( ) { return out ; }
public static void convertActivityFromTranslucent ( Activity activity ) { try { Method method = Activity . class . getDeclaredMethod ( "convertFromTranslucent" ) ; method . setAccessible ( true ) ; method . invoke ( activity ) ; } catch ( Throwable t ) { } }
public Operator take ( Object operator ) { if ( operator . toString ( ) . equals ( "/" ) ) return this ; return next ( ) ; }
public ForceCompleteTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
private void createBackground ( ) { background = new Image ( new TextureRegion ( ( Texture ) game . getAssetManager ( ) . get ( "infoScreen . jpg" ) ) ) ; background . setFillParent ( true ) ; stage . addActor ( background ) ; }
public WellnessUser getUser ( ) { if ( this . user == null ) this . user = WellnessUser . getSavedInstance ( KEY_USER_DEF , this . context ) ; return this . user ; }
private GeoTraceWidget createWidget ( FormEntryPrompt prompt ) { return new GeoTraceWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) , waitingForDataRegistry , mapConfigurator , geoDataRequester ) ; }
private void setCustom ( boolean custom ) { TextSecurePreferences . setBooleanPreference ( getContext ( ) , customToggle , custom ) ; }
public long contentLength ( ) { return mEntity . getContentLength ( ) ; }
private OnClickListener retryDownload = new OnClickListener ( ) { @ Override public void onClick ( final View v ) { startListDownload ( ) ; } } ;
public ChoiceGridView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; Init ( ) ; }
private void setAdFreeHostingChecked ( boolean checked ) { mSiteSettings . enableAdFreeHosting ( checked ) ; mAdFreeHosting . setChecked ( checked ) ; mAdFreeHostingNested . setChecked ( checked ) ; }
public void onSuccess ( ) { progressDialog . cancel ( ) ; mListener . onAdded ( mUsername ) ; dismiss ( ) ; }
public float reqHeight ( ) { return text . baseLine ( ) + 4 ; }
public void onAllow ( ) { mSetWallpaperActionMenu . close ( true ) ; mDownloadHelper . saveWallpaper ( getActivity ( ) , getSaveUrl ( ) ) ; }
public String getUrl ( ) { return getBaseUrl ( ) + getContext ( ) . getString ( R . string . lists_path ) ; }
public void update ( Attraction updatedAttraction ) { attractionRepo . remove ( updatedAttraction . getId ( ) ) ; tourStorage . removeTour ( updatedAttraction . getId ( ) ) ; download ( updatedAttraction ) ; }
public boolean onScale ( ScaleGestureDetector detector ) { if ( ! detector . isInProgress ( ) ) { return false ; } scaleRadius ( detector . getScaleFactor ( ) ) ; drawView ( ) ; return true ; }
private boolean isClickOnItem ( int currentXPosition , int currentYPosition , GridSize gridSize ) { int positionPointed = ( ( GridView ) gridView ) . pointToPosition ( currentXPosition , currentYPosition ) ; return positionPointed < gridSize . getColumnCount ( ) *gridSize . getRowCount ( ) ; }
public int getCount ( ) { return mArrayList . size ( ) ; }
public String getMac ( ) { if ( mDevice != null ) return mDevice . getAddress ( ) ; return null ; }
public void onDetach ( ) { super . onDetach ( ) ; resultsFragmentCallback = null ; }
public void onSeekTo ( long pos ) { mPlayback . seekTo ( pos ) ; }
public void registerLocationManager ( ) { if ( ! isLocationManagerRegistered ) isLocationManagerRegistered = requestLocationUpdatesFromProvider ( LocationManager . NETWORK_PROVIDER ) && requestLocationUpdatesFromProvider ( LocationManager . GPS_PROVIDER ) ; }
public void run ( ) { if ( getInstance ( ) . wakeLock . isHeld ( ) ) { FileLog . d ( "tmessages" , "release wakelock" ) ; getInstance ( ) . wakeLock . release ( ) ; } }
public boolean isNormal ( ) { return mPlayerState == PLAYER_NORMAL ; }
public void animateToMin ( ) { mGestureListener . item = getMyPosition ( this ) ; animateTo ( minPosition ) ; }
private void startAbsoluteTimer ( ) { if ( AppSettings . getAbsoluteTimeoutForAcquiringPosition ( ) >= 1 ) { handler . postDelayed ( stopManagerRunnable , AppSettings . getAbsoluteTimeoutForAcquiringPosition ( ) * 1000 ) ; } }
public com . google . protobuf . AnyOrBuilder getContentOrBuilder ( ) { if ( contentBuilder_ != null ) { return contentBuilder_ . getMessageOrBuilder ( ) ; } else { return content_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : content_ ; } }
public void finishActionMode ( ) { if ( mMode != null ) { mMode . finish ( ) ; } }
public String getType ( ) { return ID ; }
public void showMenu ( ) { showMenu ( mMenu ) ; setVisibility ( VISIBLE ) ; mIsShowing = true ; }
public boolean onEditorAction ( TextView textView , int id , KeyEvent keyEvent ) { if ( id == R . id . login || id == EditorInfo . IME_NULL ) { attemptLogin ( ) ; return true ; } return false ; }
public void run ( ) { setupLockScreen ( ) ; }
public void onLongClicked ( AppCompatActivity activity ) { LinkHandler . onLinkLongClicked ( activity , url , false ) ; }
private void d ( String tag , String s ) { android . util . Log . d ( tag , s ) ; print ( "DEGUG" + TAG_DIVIDER + tag , s ) ; }
public SQLiteHelper ( Context context ) { super ( context , Database . NAME , null , Database . VERSION ) ; }
public Holder ( View itemView ) { super ( itemView ) ; root = itemView . findViewById ( R . id . root ) ; icon = ( ImageView ) itemView . findViewById ( R . id . icon ) ; }
public List < Contributor_ > getContributor ( ) { return contributor ; }
public void hideFab ( ) { FloatingActionButton floatingActionButton = ( FloatingActionButton ) getActivity ( ) . findViewById ( R . id . button_floating_action_welcome ) ; floatingActionButton . hide ( ) ; }
public NativeByteBuffer byteBufferValue ( int columnIndex ) throws SQLiteException { checkRow ( ) ; int ptr = columnByteBufferValue ( preparedStatement . getStatementHandle ( ) , columnIndex ) ; if ( ptr != 0 ) { return NativeByteBuffer . wrap ( ptr ) ; } return null ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . EncryptedData prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public boolean isValidBook ( ) { DBValidator dBValidator = new DBValidator ( DBValidator . BOOK_DATABASE_TYPE ) ; dBValidator . validate ( this ) ; return dBValidator . isValid ( ) ; }
public void disable ( ) { GLES20 . glDisableVertexAttribArray ( location ) ; }
public LiveData < ContactEntity > load ( int contactId ) { return mDataRepository . getDatabase ( ) . contactDao ( ) . load ( contactId ) ; }
public int getCount ( ) { return mPreferenceGroup . getPreferenceCount ( ) ; }
public void onEncode ( View view ) { mAC . setText ( Common . byte2Hex ( Common . acMatrixToACBytes ( mACMatrix ) ) ) ; }
public void close ( ) throws IOException { if ( activePlayer != null ) activePlayer . close ( ) ; if ( playlistPlayer != null ) playlistPlayer . close ( ) ; }
public String getTel ( ) { return this . _tel ; }
public void setNumber ( String number ) { mEditText . setText ( number ) ; mEditText . setSelection ( number . length ( ) ) ; }
public Executor mainThread ( ) { return mMainThread ; }
public void getDefaultMediaUrlWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "" ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public void setCardViewElevation ( int elevation ) { CardView cardView = ( CardView ) findViewById ( R . id . mt_container ) ; cardView . setCardElevation ( elevation ) ; }
public void onClick ( DialogInterface dialog , int which ) { conn . invite ( buffer . getCid ( ) , buffer . getName ( ) , input . getText ( ) . toString ( ) ) ; dialog . dismiss ( ) ; }
public void setExcerpt ( String excerpt ) { this . excerpt = excerpt ; }
private void _resetNew ( ) { _resetNewCount ( ) ; mNewDids = new LinkedList < Long > ( mCol . getDecks ( ) . active ( ) ) ; mNewQueue . clear ( ) ; _updateNewCardRatio ( ) ; }
public void add ( ) { new FileAddDialog ( getActivity ( ) , mApplicationCallback , - 1 , new IListener ( ) { @ Override public void execute ( ) { refreshListServer ( ) ; } } , null ) ; }
public void onWrite ( byte [ ] buffer ) { String hexbuf = IConsole . byteArrayToHex ( buffer ) + '\n' ; mHandler . obtainMessage ( Constants . MESSAGE_WRITE , - 1 , - 1 , hexbuf . getBytes ( ) ) . sendToTarget ( ) ; }
public String getEmptyFieldText ( ) { return getString ( R . string . editor_activity_view_empty_field ) ; }
public void loadList ( ) { typeCheck ( ) ; setupList ( ) ; setupTags ( ) ; }
public void run ( ) { updateTraffic ( ) ; }
public void whenPromptIsNotReadOnly_buttonShowsCorrectText ( ) { DateWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . widgetButton . getText ( ) , widget . getContext ( ) . getString ( R . string . select_date ) ) ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; eventListPresenter . attachView ( eventListView ) ; loadEventsAndVerify ( ) ; }
private void removeErrorPreferences ( ) { mQuranSettings . clearLastDownloadError ( ) ; }
public void shouldFormatDate ( ) { final String result = Dates . format ( LocalDate . of ( 2015 , Month . FEBRUARY , 22 ) ) ; assertEquals ( "22/02/2015" , result ) ; }
public void run ( ) { Toast . makeText ( MainActivity . this , R . string . error_network , Toast . LENGTH_SHORT ) . show ( ) ; progressBar . setVisibility ( View . GONE ) ; }
public void setLastUpdate ( String lastUpdate ) { tvLastUpdate . setText ( lastUpdate ) ; }
public void clearUserRules ( ) { setUserRules ( StringUtils . EMPTY ) ; preferencesService . setDisabledUserRules ( new HashSet < String > ( ) ) ; }
public void setRoundRadius ( int value ) { roundRadius = value ; getPaint ( ) . setFlags ( Paint . ANTI_ALIAS_FLAG ) ; }
private void cancelLongPress ( ) { if ( longPressRunnable != null ) { removeCallbacks ( longPressRunnable ) ; longPressRunnable = null ; } }
public static void addReceiver ( final Log . Receiver receiver ) { RECEIVERS . add ( receiver ) ; }
public NameFormatHelper provideNameFormatHelper ( ) { return mock ( NameFormatHelper . class ) ; }
public void onAnimationCancel ( Animator animation ) { if ( runningAnimation != null && runningAnimation . equals ( animation ) ) { runningAnimation = null ; } }
private static void setTranslucentStatusBarKiKat ( Window _window ) { _window . addFlags ( WindowManager . LayoutParams . FLAG_TRANSLUCENT_STATUS ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == R . id . action_filter ) { createFilterDialog ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void setOnFrameCapturedListener ( OnFrameCapturedListener onFrameCapturedListener ) { throw new UnsupportedOperationException ( "Not implemented yet ! " ) ; }
public void run ( ) { mListener . onPeersUpdate ( currentHosts ) ; }
public static boolean blockIPv6 ( boolean val ) { gPrefs . edit ( ) . putBoolean ( BLOCK_IPV6 , val ) . commit ( ) ; return val ; }
public void onClick ( View view ) { lastClickedField = findFieldForValueHolder ( view ) ; if ( lastClickedField == null ) { return ; } EnumFragment frag = EnumFragment . newInstance ( lastClickedField ) ; getTabActivity ( ) . pushFragment ( BaseTabActivity . TAB_SCAN , frag ) ; }
private static int getInt ( PrefKey key ) { return getInt ( key , 0 ) ; }
public static ChecksumException getChecksumInstance ( ) { return IS_STACK_TRACE ? new ChecksumException ( ) : INSTANCE ; }
public static boolean getOfflineModeUsed ( Context context ) { return getBoolean ( context , "offline_mode_used" , false ) ; }
public TeamLocal getTeamLocal ( ) { return teamLocal ; }
private void moveFAB ( View v , MotionEvent event ) { v . setX ( event . getRawX ( ) + dx ) ; v . setY ( event . getRawY ( ) + dy ) ; this . checkLocation ( event ) ; }
public void onFailure ( Throwable throwable ) { getMvpView ( ) . showProgress ( false ) ; getMvpView ( ) . showEconomyChangeDialog ( ) ; Log . e ( LOG_TAG , null != throwable ? throwable . getMessage ( ) : "" ) ; }
public void onBackPressed ( ) { if ( chatActivityEnterView . isPopupShowing ( ) ) { chatActivityEnterView . hidePopup ( ) ; return ; } super . onBackPressed ( ) ; }
public int execute ( ) throws LuaException { L . pushJavaObject ( ( Activity ) parent . getActivity ( ) ) ; return 1 ; }
public void onZeroItemsLoaded ( ) { Log . i ( "Boundary zero loaded" ) ; queue_load ( ) ; }
public void goToLoginFragment ( ) { getChildFragmentManager ( ) . popBackStack ( ) ; }
public void setTransactionAmount ( int transactionAmount ) { this . transactionAmount = transactionAmount ; }
public void saveWallet ( WalletRealmObject wallet ) { realm . executeTransaction ( realm -> saveSingleWallet ( wallet ) ) ; }
public Scheduler io ( ) { return Schedulers . io ( ) ; }
public void onActivityResultFragment ( int requestCode , int resultCode , Intent data ) { if ( chat_id != 0 ) { avatarUpdater . onActivityResult ( requestCode , resultCode , data ) ; } }
public void popBackStack ( FragmentManager manager ) { mDisposable . dispose ( ) ; FragmentManager . BackStackEntry first = manager . getBackStackEntryAt ( 0 ) ; manager . popBackStack ( first . getId ( ) , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public String tag ( ) { Builder builder = getBuilder ( ) ; if ( builder . tag != null ) return builder . tag ; else return super . getTag ( ) ; }
public final void setStationNumber ( int _stationNumber ) { this . stationNumber = _stationNumber ; }
private void unbind ( ) { subscriptions . unsubscribe ( ) ; }
public void onCommentsUpdated ( ) { if ( mPullRequestFragment != null ) { mPullRequestFragment . reloadEvents ( true ) ; } }
public void onClick ( View v ) { if ( mListenState == ListenState . LISTENING ) { mVoiceCalculator . Stop ( ) ; } else if ( mListenState == ListenState . NOT_LISTENING ) { mVoiceCalculator . Start ( ) ; } }
public void run ( ) { if ( ! formatterMonth . getTimeZone ( ) . equals ( TimeZone . getDefault ( ) ) ) { LocaleController . recreateFormatters ( ) ; } }
public Drawable tintDrawable ( @ DrawableRes int drawableRes , @ ColorInt int color ) { return tintDrawable ( rdrawable ( drawableRes ) , color ) ; }
private ActionBar getSupportActionBar ( ) { return getActivity ( ) != null ? ( ( ActionBarActivity ) getActivity ( ) ) . getSupportActionBar ( ) : null ; }
public void onResume ( ) { super . onResume ( ) ; historicalRecordListPresenter . resume ( ) ; }
public void setLastSuggestions ( List < String > suggestions ) { adapter . setSuggestions ( suggestions ) ; }
public Set < Integer > getOwnDeviceIds ( ) { return this . deviceIds . get ( account . getJid ( ) . toBareJid ( ) ) ; }
public PlaylistModel ( String playlistName , long playlistID , PLAYLIST_TYPES playlistType ) { this ( playlistName , playlistID , - 1 , null , playlistType ) ; }
public synchronized Uri getContactUri ( ) { return this . contactUri ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return "Organising Body" ; case 1 : return "Sports Senate" ; } return null ; }
public CharacterComicDataContainer getStories ( ) { return mStories ; }
public AboutBuilder addLink ( @ NonNull BitmapDrawable icon , int label , String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser ) { Constants . OPEN_ACTIVITY = "CHATS" ; Log . d ( "Open" , Constants . OPEN_ACTIVITY ) ; } }
public void onAvailable ( Network network ) { showConnectionType ( ) ; }
public boolean isReflectionExists ( int contentId ) { return reflectionManager . isReflectionResponded ( String . valueOf ( contentId ) ) ; }
public int getItemCount ( ) { return postList . size ( ) ; }
public void bind ( StockProduct item ) { itemBinding . setProduct ( item ) ; Picasso . get ( ) . load ( item . getProduct ( ) . getImageURL ( ) ) . into ( itemBinding . image ) ; }
private void stopBeingDiscoverable ( ) { Intent intent = new Intent ( context . getApplicationContext ( ) , UdpBroadcastService . class ) ; intent . putExtra ( UdpBroadcastService . BUNDLE_ACTION , UdpBroadcastService . ACTION_STOP_BROADCAST ) ; context . startService ( intent ) ; mDiscoverable = false ; }
public long getSpeed ( ) { return UNIT_MELEE_SPEED ; }
private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { Log . v ( TAG , "onReceive : intent = " + intent ) ; mHandler . post ( mBufferedRunnable ) ; } } ;
public XMLPrefsManager . XmlPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . TOOLBAR ; }
public void setUp ( ) { mStats = ModelMaker . getModel ( JsonObject . class , "2015necmp_stats" ) ; mCombiner = new JsonObjectAndKeyCombiner ( "2015necmp" ) ; }
public void onCancel ( DialogInterface dialog ) { if ( mCurrentTheme != mPreferences . getUseTheme ( ) ) { getActivity ( ) . onBackPressed ( ) ; } }
public static int getProfileColorForId ( int id ) { return Theme . getColor ( Theme . keys_avatar_backgroundInProfile [ getColorIndex ( id ) ] ) ; }
public Observable < EmptyResponse > skip ( ) { return controlService . skip ( ) ; }
public Batinr withOpen ( int open ) { this . open = open ; return this ; }
public void onReceive ( Context context , Intent intent ) { logger . i ( "Application started" ) ; controller . messageShort ( "Auto - sync timers have started" ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == android . R . id . home ) { finish ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public Texture ( String url , float scaleX , float scaleY ) { super ( url , scaleX , scaleY ) ; }
public void setListeners ( View . OnClickListener . . . listeners ) { nameButton . setOnClickListener ( listeners [ 0 ] ) ; }
public Alarm getViewModel ( ) { return new Alarm ( this . alarmId , getString ( R . string . def_alarm_name ) , getString ( R . string . def_alarm_message ) , false , false , true , 12 , 30 ) ; }
public static void hideProgressBar ( BaseProgressIndicator pb ) { pb . hide ( ) ; pb . setVisibility ( View . GONE ) ; }
public boolean onDependentViewChanged ( CoordinatorLayout parent , ViewGroup child , View dependency ) { if ( dependency instanceof Snackbar . SnackbarLayout ) { this . updateFabTranslationForSnackbar ( parent , child , dependency ) ; } return false ; }
public ILocalDBStorage provideLocalDBStorage ( LocalDBStorageImpl instance ) { instance . initialize ( ) ; return instance ; }
public void onClick ( View view ) { m_GameBoards . movePlaneDown ( ) ; }
public void onCreate ( final SQLiteDatabase db ) { createTable ( db , PLAYING_QUEUE_TABLE_NAME ) ; createTable ( db , ORIGINAL_PLAYING_QUEUE_TABLE_NAME ) ; }
public void onCancel ( ) { if ( ! isNodeOpening ) { loadStorage ( context , node , false , isOnlyFavorites , isOpenLastNode ) ; } }
public void setPenaltyChargesWrittenOff ( Integer penaltyChargesWrittenOff ) { this . penaltyChargesWrittenOff = penaltyChargesWrittenOff ; }
public boolean onCreate ( ) { Log . w ( TAG , "onCreate ( ) " ) ; return true ; }
public Uri getParentDirUri ( @ NonNull Uri filePath ) { File parent = new File ( filePath . getPath ( ) ) . getParentFile ( ) ; return ( parent . exists ( ) ? Uri . fromFile ( parent ) : null ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersListView , 0 ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public void onServiceConnected ( ComponentName componentName , IBinder service ) { mDroidsorService = ( ( DroidsorService . LocalBinder ) service ) . getService ( ) ; mDroidsorService . startOpenGLMode ( ) ; mDroidsorService . setMode ( DroidsorService . ALL_SENSORS_MODE ) ; }
public void downloadFile ( LXCFile file , File targetDir ) { if ( ! network . connectAndDownload ( file , targetDir ) ) { gui . showError ( "Download failed , host unreachable . " ) ; } }
public int getReminders ( ) { return reminders ; }
private void assertTranslationMatches ( String locale , int resourceId , String string ) { assertEquals ( LanguageHelper . getLocalizedString ( testContext , locale , resourceId ) , string ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "university" ) ) { return ; } news = null ; }
public void onAnimationEnd ( Animator animation ) { menu . setVisibility ( View . GONE ) ; if ( ! hideScore ) { scoreView . setVisibility ( View . VISIBLE ) ; } }
public int compare ( CardWrapper c1 , CardWrapper c2 ) { return c1 . getCard ( ) . getOrdinal ( ) - c2 . getCard ( ) . getOrdinal ( ) ; } ;
private String convertIndexToFilename ( int index ) { if ( index < 0 || index > mStylesList . size ( ) ) return null ; return mStylesList . get ( index ) . getFilename ( ) ; }
public double getSurfaceArea ( ) { double wl = width * length ; double wh = width * height ; double lh = length * height ; return 2 * ( wl + wh + lh ) ; }
public void collapseBrowser ( long did ) { JSONObject deck = get ( did ) ; boolean collapsed = deck . optBoolean ( "browserCollapsed" , false ) ; deck . put ( "browserCollapsed" , ! collapsed ) ; save ( deck ) ; }
public boolean onPrepareOptionsMenu ( Menu menu ) { MenuItem itemAddCoreProfile = menu . findItem ( R . id . action_add_core_profile ) ; if ( itemAddCoreProfile != null ) { itemAddCoreProfile . setVisible ( VuzeRemoteApp . isCoreAllowed ( ) ) ; } return super . onPrepareOptionsMenu ( menu ) ; }
private void onUploadStatusUpdate ( UploadObject upload ) { int index = findIndexById ( uploadsData , upload . getId ( ) ) ; if ( index != - 1 ) { callView ( view -> view . notifyUploadItemChanged ( index ) ) ; } }
public void showEmptyStateInPlatesSection ( ) { if ( searchPlatesFragment . isViewCreated ( ) ) { getNoResultsBitmap ( ) . subscribe ( searchPlatesFragment : : showNoResultsImage ) ; searchPlatesFragment . setData ( null ) ; searchPlatesFragment . hideList ( ) ; } }
public SettingsScheduleLessons getSettingsScheduleLessons ( ) { return settingsScheduleLessons ; }
public static int getChildViewType ( int rawViewType ) { return ExpandableAdapterHelper . getChildViewType ( rawViewType ) ; }
public static int getUserMaxItemCount ( ) { int max_item_size = 0 ; JsonObject basic_info = helper . getJsonObjectValue ( DB_KEY_BASICIFNO ) ; if ( basic_info != null ) max_item_size = basic_info . get ( "api_max_slotitem" ) . getAsInt ( ) ; return max_item_size ; }
public void setTitle ( @ StringRes int title ) { cardTitle . setText ( title ) ; }
private static String hashKeyForPIN ( String value ) { if ( TextUtils . isEmpty ( value ) ) return null ; try { } catch ( Exception e ) { CrashReportingManager . logException ( e ) ; } return value ; }
public void setData ( List < Data > data ) { mData = data ; }
private void hideConnectedView ( View view ) { LinearLayout connectedHeader = ( LinearLayout ) view . findViewById ( R . id . connected_header ) ; connectedHeader . setVisibility ( View . GONE ) ; }
private void stopVibrate ( ) { if ( mImpl == null ) { Lg . i ( LOGTAG , "not vibrating" ) ; return ; } mImpl . stopVibration ( ) ; mImpl = null ; Lg . i ( LOGTAG , "stopped" ) ; }
public int hashCode ( ) { return Objects . hash ( uuid , title , createdAt , changedAt , position , deadline , important , details , parentTodoListUuid , parentHeaderUuid ) ; }
public void insertList ( ArrayList < String > strings ) { mItems = strings ; notifyDataSetChanged ( ) ; }
public void discardBuffer ( long positionUs ) { for ( ChunkSampleStream < DashChunkSource > sampleStream : sampleStreams ) { sampleStream . discardUnselectedEmbeddedTracksTo ( positionUs ) ; } }
public static void finishActivityWithFade ( Activity activity ) { activity . finish ( ) ; ActivityTransitionAnimation . slide ( activity , ActivityTransitionAnimation . UP ) ; }
public void onClick ( View v ) { songsManager . play ( 0 , arrayList ) ; }
public ArrayList < String > actions ( Hero hero ) { ArrayList < String > actions = super . actions ( hero ) ; if ( level > 0 ) { actions . add ( AC_REFORGE ) ; } return actions ; }
private boolean checkFiltered ( String data , int id ) { return data . contains ( String . format ( "|%d|" , id ) ) ; }
public void onWindowFocusChanged ( final boolean hasWindowFocus ) { try { super . onWindowFocusChanged ( hasWindowFocus ) ; } catch ( NullPointerException ex ) { Log . e ( "WebView" , "WebView . onWindowFocusChanged" , ex ) ; } }
public void onAnimationEnd ( Object animation ) { shakeView ( view , num == 5 ? 0 : - x , num + 1 ) ; }
public HashMap < String , Boolean > getFormResult ( ) { return formResult ; }
public int getItemCount ( ) { return memberList . size ( ) ; }
private void initToolbar ( ) { Toolbar toolbar = ( Toolbar ) findViewById ( R . id . main_toolbar ) ; setSupportActionBar ( toolbar ) ; }
public void onCameraFail ( ) { Toast . makeText ( this , R . string . ConversationActivity_quick_camera_unavailable , Toast . LENGTH_SHORT ) . show ( ) ; quickAttachmentDrawer . hide ( false ) ; quickAttachmentToggle . disable ( ) ; }
public boolean isCenterAxisLabelsEnabled ( ) { return mCenterAxisLabels && mEntryCount > 1 ; }
public String toString ( ) { return "ID : " + id + " , hash : " + hash ; }
public void setPulledUp ( ) { if ( pulledUp ) { return ; } pulledUp = true ; AndroidUtilities . runOnUIThread ( ( ) -> notifyItemChanged ( liveLocationType == 0 ? 2 : 3 ) ) ; }
public IconStyleDialog setListener ( OnIconStyleListener listener ) { this . listener = listener ; return this ; }
public void testRequestResponseFailure ( ) throws Throwable { enqueue404 ( ) ; new CsrfTokenClient ( wikiSite ( ) , 1 , getApiService ( ) ) . getToken ( ) . test ( ) . await ( ) . assertError ( Exception . class ) ; }
public void pruneTemp ( ) { List < File > dirs = getCacheDirs ( context ) ; for ( File dir : dirs ) { pruneTemp ( dir ) ; } }
public static MidiDeviceMonitor getInstance ( MidiManager midiManager ) { if ( mInstance == null ) { mInstance = new MidiDeviceMonitor ( midiManager ) ; } return mInstance ; }
public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { Trailer trailer = trailers . get ( position ) ; ( ( TrailerViewHolder ) holder ) . bindTo ( trailer ) ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { isTouchTracking = false ; if ( seekBarTTSSpeed . getProgress ( ) != initialProgress ) { ttsSetSpeedFromSeekBar ( ) ; } }
public SwipeDismissRemoveAnimationInfo ( RecyclerView . ViewHolder holder ) { super ( holder ) ; }
public void onSkipPressed ( Fragment currentFragment ) { super . onSkipPressed ( currentFragment ) ; }
public void setup ( ) { forecast = new Forecast ( ) ; }
private void changeFuturePrefs ( ) { boolean isChecked = binding . featureRemindersPrefs . isChecked ( ) ; binding . featureRemindersPrefs . setChecked ( ! isChecked ) ; mPrefs . setFutureEventEnabled ( ! isChecked ) ; }
public void filterOutAllMarkers ( ) { hideAllMarkers ( ) ; updateNearbyList ( ) ; }
public void postAttack ( Char hero , Char tgt ) { script . runOptionalNoRet ( "postAttack" , tgt ) ; }
public void setParentFragment ( BaseFragment fragment ) { parentFragment = fragment ; }
public void onChanged ( @ Nullable List < WorkInfo > workInfos ) { handleResult ( context , moreAppsDialog , workInfos , workInfo , this , listener , constraints , dataBuilder , updateSettings , instance ) ; }
public PlaceAndPlateDtoAssembler withName ( String name ) { this . placeName = name ; return this ; }
private void runtimePermission ( ) { if ( ! hasRuntimeGPSPermission ( ) ) { ActivityCompat . requestPermissions ( this , new String [ ] { Manifest . permission . ACCESS_FINE_LOCATION } , 0 ) ; } else { setupStatusListener ( ) ; } }
public static int getDisplayHeight ( ) { DisplayMetrics metrics = new DisplayMetrics ( ) ; windowManager . getDefaultDisplay ( ) . getMetrics ( metrics ) ; return metrics . heightPixels ; }
public void afterTextChanged ( Editable s ) { doValidate ( true ) ; }
public void onFailure ( @ NonNull Exception e ) { customLogger ( "Discovery FAILED ! " + e . getMessage ( ) ) ; }
public void onSdkReady ( ) { try { mConnectIQ . openStore ( new IQApp ( IQ_APP_ID ) . getApplicationId ( ) ) ; } catch ( Exception e ) { Logger . logSevere ( e ) ; } }
public void onReceive ( Context context , Intent intent ) { progressHandler . setCancelled ( true ) ; }
public DocsInteractor ( INetworker networker , IDocsStore cache ) { this . networker = networker ; this . cache = cache ; }
private void onTweakServingsChanged ( ) { new TaskRunner ( ) . executeAsync ( new CalculateTweakStreakTask ( new StreakTaskInput ( day , rda ) ) ) ; }
public boolean getBackpackTfBanned ( ) { return backpackTfBanned ; }
public void onPause ( ) { cvCamera . stop ( ) ; ( ( AppCompatActivity ) getActivity ( ) ) . getSupportActionBar ( ) . hide ( ) ; super . onPause ( ) ; }
public void setScrollPosition ( int position ) { mLayoutManager . scrollToPosition ( position ) ; }
public Integer getSince ( ) { return since ; }
public synchronized void setCancelled ( boolean isCancelled ) { this . isCancelled = isCancelled ; }
public static float distance ( float aX , float aY , float bX , float bY ) { float xDiff = aX - bX ; float yDiff = aY - bY ; return ( float ) Math . sqrt ( xDiff * xDiff + yDiff * yDiff ) ; }
public int compare ( Business b1 , Business b2 ) { return b1 . compareByDistance ( b2 ) ; }
public void run ( ) { Toast . makeText ( MainActivity . this , R . string . error_network , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onProgressChanged ( SeekBar seekBar , int position , boolean fromUser ) { if ( fromUser ) { mp . seekTo ( position ) ; current_duration . setText ( getFormattedTimeDuration ( position ) ) ; } }
public boolean isItemChecked ( int position ) { return mCheckedState . get ( position ) ; }
public void setLocale ( String locale ) { setString ( R . string . settings_key_locale , locale ) ; }
public void deactivate ( Char ch ) { equipedTo = Belongings . Slot . NONE ; Buff . detachAllBySource ( ch , this ) ; }
private void notifySuccess ( final List < GitHubAuthRepo > list ) { if ( callback != null ) { callback . onSuccess ( list ) ; } }
public AccountCreatedEvent ( Account account ) { this . account = account ; }
public void testNormalMediaIDStructure ( ) throws Exception { String mediaID = MediaIDHelper . createMediaID ( "784343" , "BY_GENRE" , "Classic 70's" ) ; assertEquals ( "Classic 70's" , MediaIDHelper . extractBrowseCategoryValueFromMediaID ( mediaID ) ) ; assertEquals ( "784343" , MediaIDHelper . extractMusicIDFromMediaID ( mediaID ) ) ; }
private static SharedPreferences getStateSharedPreferences ( Context context ) { return context . getSharedPreferences ( "state" , Context . MODE_PRIVATE ) ; }
public void deleteDatabase ( Context ctx ) { ctx . deleteDatabase ( DATABASE_NAME ) ; }
public void onSuccess ( ) { showProgress ( false ) ; signupSuccessful ( ) ; finish ( ) ; }
public void onReceive ( Context context , Intent intent ) { if ( ! UploadUtils . isPowerSaveMode ( context ) ) { FilesSyncHelper . restartJobsIfNeeded ( ) ; } }
private CharSequence getCurrentLine ( ) { int tokenStart = findTokenStart ( ) ; if ( tokenStart != 0 && getText ( ) . charAt ( tokenStart - 1 ) != '\n' ) return null ; return getText ( ) . subSequence ( tokenStart , getSelectionStart ( ) ) ; }
private void onPlayerSelected ( int position ) { mSelectedPlayer = playersList . get ( position ) ; mSelectedPlayerPosition = position ; selectPlayer ( position ) ; updateSelectedPlayer ( ) ; }
public void onSortSelected ( final UserCommentListingURL . Sort order ) { commentListingController . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public void setDuration ( Integer duration ) { this . duration = duration ; totalDurationLabel . setText ( LengthFormatter . formatLength ( ( long ) duration ) ) ; seekBar . setMax ( duration ) ; setPosition ( 0 ) ; }
public void attachView ( ClientSearchMvpView mvpView ) { super . attachView ( mvpView ) ; }
public ExImageWidget createWidget ( ) { return new ExImageWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) , mediaUtils , fileRequester ) ; }
public void deleteCommand ( CommandHistoryEntity command ) { SQLite . delete ( ) . from ( CommandHistoryEntity . class ) . where ( CommandHistoryEntity_Table . id . eq ( command . getId ( ) ) ) ; loadCommandHistory ( ) ; }
public long position ( ) throws RemoteException { return mService . get ( ) . position ( ) ; }
public void testNoLatestVersion ( ) { mJsonData . get ( APIStatusDeserializer . ANDROID_SETTINGS_TAG ) . getAsJsonObject ( ) . remove ( APIStatusDeserializer . LATEST_APP_VERSION_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
private void showFragment ( Fragment fragment , String tag ) { getActivity ( ) . getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . container , fragment ) . addToBackStack ( tag ) . commit ( ) ; }
private Card _newCard ( Note note , JSONObject template , int due , boolean flush ) { int did = 0 ; return _newCard ( note , template , due , did , flush ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View rootView = inflater . inflate ( R . layout . fragment_setup , container , false ) ; return rootView ; }
private void generate2022BonusInsights ( JsonObject quals , JsonObject elims ) { mEventStats . add ( new EventTypeHeader ( mResources . getString ( R . string . breakdown2017_bonus_stats ) ) ) ; addQualVsElimInsightsWithPercentage ( quals , elims , bonusInsightTitles , bonusInsightKeys ) ; }
private void givenValidRequestReturningModel ( ) throws IOException { when ( mModelConverter . getForecastModel ( ) ) . thenReturn ( new ArrayList < ForecastData > ( ) { { add ( mock ( ForecastData . class ) ) ; } } ) ; }
private ListenableFuture < Boolean > initializeDraft ( ) { if ( isInitializedFromMailToIntent ( ) ) { return initializeDraftFromIntent ( ) ; } else { return initializeDraftFromDatabase ( ) ; } }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { ( ( ArchivedStickerSetCell ) holder . itemView ) . setStickersSet ( stickerSets . get ( position ) , position != stickerSets . size ( ) - 1 , false ) ; }
public BaseShortcutType ( Context context ) { mContext = context ; }
public void onClick ( View v ) { if ( isFinishing ( ) ) { return ; } AnalyticsUtils . trackWithInterceptedUri ( AnalyticsTracker . Stat . READER_SIGN_IN_INITIATED , mInterceptedUri ) ; ActivityLauncher . loginWithoutMagicLink ( ReaderCommentListActivity . this ) ; }
public void run ( ) { hideAttachedInput ( ) ; }
public long getNumOpens ( ) { return preferences . getLong ( "numAppOpens" , 0 ) ; }
public void setListener ( ItemAnimatorListener listener ) { mListener = listener ; }
public SingleItemRowHolder ( View view ) { super ( view ) ; ButterKnife . bind ( this , view ) ; view . setOnClickListener ( this ) ; }
public void onRefresh ( ) { clearDataset = true ; getDeliveryProfiles ( ) ; }
public void run ( ) { putUsers ( res . users , fromCache ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . dialogPhotosLoaded , did , offset , count , fromCache , classGuid , res . photos ) ; }
public static MovieDetailViewState makeLoadingState ( String id ) { return new MovieDetailViewState ( id , null , 0 , true , false ) ; }
public AfterTextChanged ( Consumer < Editable > afterTextChanged ) { this . afterTextChanged = afterTextChanged ; }
private QuranSettings ( @ NonNull Context appContext ) { mPrefs = PreferenceManager . getDefaultSharedPreferences ( appContext ) ; mPerInstallationPrefs = appContext . getSharedPreferences ( PREFS_FILE , Context . MODE_PRIVATE ) ; }
public com . coinomi . core . protos . Protos . UnspentOutput getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . UnspentOutput . getDefaultInstance ( ) ; }
public int getLayoutResId ( ) { return R . layout . fragment_main ; }
private void thenHumidityShouldBe ( long expected ) { assertEquals ( expected , mForecastData . getHumidity ( ) ) ; }
public String getUserName ( final String name ) { return ! TextUtils . isEmpty ( name ) ? name : "UNKNOWN" ; }
public void onClick ( View v ) { Intent marketIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( "market : getContext ( ) . startActivity ( marketIntent ) ; }
public void onStart ( ) { super . onStart ( ) ; onActivityResult ( 42 , RESULT_OK , null ) ; }
public long getItemId ( int position ) { position -- ; if ( position < 0 ) return - 2 ; return ( ( ArrayList < PlaylistSong > ) ( List ) dataSet ) . get ( position ) . idInPlayList ; }
public PlacementBlogPost ( String postID , String link , String title , String content , String published ) { this . postID = postID ; this . link = link ; this . title = title ; this . content = content ; this . published = published ; }
public static boolean isRequestPINCode ( ) { return getBoolean ( R . string . pref_key_request_pin_code , false ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( listeJoursRemplaces ) getResult ( listeJoursRemplaces . class , __result , "lireJoursRemplacesResult" , __envelope ) ; }
public void getSimpleThemeBLACKTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . BLACK_INDEX ) ; assertEquals ( AppTheme . BLACK , apptheme . getSimpleTheme ( ) ) ; }
public static void backgroundRipple ( @ NonNull View v , int color ) { RippleUtil . background ( v , getAdaptiveRippleDrawable ( color ) ) ; }
public Matrix ( ) { NumberofRows = 9 ; NumberofCols = 9 ; type = Type . Normal ; name = "New Matrix" ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { fieldPadprefix . setText ( "p/" ) ; } else { fieldPadprefix . setText ( "" ) ; } checkJquery . setChecked ( isChecked ) ; }
public void onClick ( DialogInterface dialog , int which ) { if ( which == 0 ) { LocationHistoryActivity . openItWithLocation ( activity , location ) ; } else if ( which == 1 ) { UserActivity . openIt ( activity , finalUser ) ; } }
public void setTransactionID ( @ Nullable BigInteger transactionID ) { this . transactionID = transactionID ; }
public void update ( byte [ ] input ) { if ( ! useCRC32 ) { messageDigest . reset ( ) ; messageDigest . update ( input ) ; } else { crc32 . reset ( ) ; crc32 . update ( input ) ; } }
public void addItem ( CardObject cardObject , int index ) { mCardSet . add ( index , cardObject ) ; notifyItemInserted ( index ) ; }
public int getCount ( ) { return 100 ; }
public void parse ( int mode , String txt ) throws NumberFormatException { if ( mode < 0 || mode >= TimeUnit . values ( ) . length ) { mode = 0 ; } parse ( TimeUnit . values ( ) [ mode ] , txt ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_5 . class ) ; startActivity ( i ) ; }
public void appendWayPoint ( CRecordWayPoint waypoint ) { listWaypointsPoints . add ( waypoint ) ; }
private void logError ( String error ) { if ( TermDebug . LOG_UNKNOWN_ESCAPE_SEQUENCES ) { Log . e ( TermDebug . LOG_TAG , error ) ; } finishSequence ( ) ; }
private void reloadDetailFragment ( ) { PublicizeDetailFragment detailFragment = getDetailFragment ( ) ; if ( detailFragment != null ) { detailFragment . getData ( ) ; } }
public PageInfo getLastPageInfo ( ) { return sGlobalUserDBHelper . getLastPageInfo ( bookId , context ) ; }
public String getName ( ) { return "Side buttons" ; }
private List < SelectChoice > getVisibleItems ( ) { return ( ( AbstractSelectListAdapter ) recyclerView . getAdapter ( ) ) . getProps ( ) . getFilteredItems ( ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mAwards ) ; }
public void onDialogUtilsStringCalledBack ( String text ) { createFile ( mCurrentDirectory . getPath ( ) + File . separator , text ) ; refreshCurrentList ( ) ; }
public static String getStatsWidgetsData ( ) { return getString ( PrefKey . STATS_WIDGET_DATA ) ; }
public int getThemeIndex ( ) { return getInt ( R . string . p_widget_theme , 0 ) ; }
private Note ( String key , JSONObject noteJSON ) { mKey = key ; mNoteJSON = noteJSON ; }
public int getItemPosition ( Object object ) { return isUpdateMonthView ? POSITION_NONE : super . getItemPosition ( object ) ; }
public void setHash1 ( Integer hash1 ) { this . hash1 = hash1 ; }
public List < SenseElement > getSenseElements ( ) { return mSenseElements ; }
public void onPlayStateChanged ( ) { for ( MusicServiceEventListener listener : mMusicServiceEventListener ) { if ( listener != null ) { listener . onPlayStateChanged ( ) ; } } }
public void onBindViewHolder ( RecyclerView . ViewHolder viewHolder ) { ( ( RedditInboxItemView ) viewHolder . itemView ) . reset ( InboxListingActivity . this , mChangeDataManager , mTheme , mItem , mListPosition != 0 ) ; }
public int getState ( ) { return mState ; }
public boolean layoutDependsOn ( CoordinatorLayout parent , FloatingActionButton child , View dependency ) { return dependency instanceof Snackbar . SnackbarLayout ; }
public User getUser ( ) { return mUser ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { pm . getUserManager ( ) . set ( R . string . preferences_user_display_messages , isChecked ) ; refreshTheme ( ) ; }
public static void openNotificationPolicyAccessSettings ( final Context context ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { context . startActivity ( new Intent ( Settings . ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS ) . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ) ; } }
public void setParent ( TopPane_Vertical top ) { m_Parent = top ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . POWE ) ; }
public int pageCount ( ) { return builder . pages . size ( ) ; }
public void run ( ) { callback . onHeaderRetrieved ( Lists . newArrayList ( headers ) ) ; }
private int getDiscoveryPort ( ) { SharedPreferences sharedPref = getSharedPreferences ( DISCOVERY_PREFS_NAME , Context . MODE_PRIVATE ) ; return sharedPref . getInt ( DISCOVERY_PREFS_PORT , 8888 ) ; }
public TagModifiedEvent ( Tag tag ) { this . tag = tag ; }
public static int getAccentColor ( Activity a ) { SharedPreferences sharedPref = a . getPreferences ( Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "accent" , 0 ) ; }
public void onClick ( View v ) { if ( mListener != null ) { mListener . onItemClick ( getAdapterPosition ( ) , v ) ; } }
public boolean onLongClick ( View b ) { if ( b instanceof ImageButton ) { return ViewUtils . showButtonDescription ( getContext ( ) , b ) ; } return false ; }
public void setIsSpeaker ( String isSpeaker ) { this . isSpeaker = isSpeaker ; }
public int getItemCount ( ) { return materiDetailsList . size ( ) ; }
public int compare ( PreviewCompareable first , PreviewCompareable scnd ) { return Long . compare ( scnd . getAccessCounter ( ) , first . getAccessCounter ( ) ) ; }
private void updateTimer ( ) { updateTimeHandler . removeMessages ( MSG_UPDATE_TIME ) ; if ( shouldTimerBeRunning ( ) ) { updateTimeHandler . sendEmptyMessage ( MSG_UPDATE_TIME ) ; } }
public Builder clearTimestamp ( ) { bitField0_ = ( bitField0_ & ~0x00000004 ) ; timestamp_ = 0L ; onChanged ( ) ; return this ; }
public boolean saveAutomaticallyWithImage ( @ NonNull String imageUrl ) { mPost . setImage ( imageUrl ) ; return saveAutomatically ( ) ; }
public void setImmature ( Integer immature ) { this . immature = immature ; }
public String toString ( ) { return String . format ( "%s | %s | %s | %s | %s | %s | %s" , hour , class_name , subject , newSubject , room , newRoom , info ) ; }
public void onClick ( boolean longClick ) { try { c . startActivity ( mapIntent ) ; } catch ( Exception e ) { Toast . makeText ( c , R . string . mal_activity_exception , Toast . LENGTH_SHORT ) . show ( ) ; } }
public boolean onBackPressed ( ) { if ( isComitted ( ) ) return true ; if ( spendViewPager . getCurrentItem ( ) == 0 ) { return false ; } else { spendViewPager . previous ( ) ; return true ; } }
private void whenCheckingIfHasPermission ( ) { hasPermission = uut . hasPermission ( ) ; }
public MarvelResult ( ) { mTotal = 0 ; mEntries = new ArrayList <> ( ) ; mAttribution = "" ; }
public LiveData < SkillEntity > getObservableSkill ( ) { return mObservableSkill ; }
public PercentageChartView animationInterpolator ( @ NonNull TimeInterpolator interpolator ) { if ( interpolator == null ) { throw new NullPointerException ( "Animation interpolator cannot be null" ) ; } renderer . setAnimationInterpolator ( interpolator ) ; return this ; }
public void moveRegion ( float _sx , float _sy , float _ex , float _ey ) { sx = _sx ; sy = _sy ; ex = _ex ; ey = _ey ; }
private void changeWakePrefs ( ) { boolean isChecked = binding . wakeScreenOptionPrefs . isChecked ( ) ; binding . wakeScreenOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setDeviceAwakeEnabled ( ! isChecked ) ; }
public void showCircle ( ) { isRefreshing . set ( true ) ; isRefreshing . notifyChange ( ) ; }
public void onTouch ( MotionEvent event ) { }
public Date getFirstDay ( ) { return firstDay ; }
public void onPhotoPickerMediaChosen ( @ NonNull final List < Uri > uriList ) { mEditorPhotoPicker . hidePhotoPicker ( ) ; mEditorMedia . onPhotoPickerMediaChosen ( uriList ) ; }
public void onClick ( View view ) { diag . dismiss ( ) ; Intent intent = new Intent ( OwnerListActivity . this , PurchaseProActivity . class ) ; startActivity ( intent ) ; }
public TextInputLayout getTextInputLayout ( ) { if ( isTextInputLayoutStyle ( ) ) { return isConfirmationType ( ) ? mConfirmationTextInputLayout : mTextInputLayout ; } else { return null ; } }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . fragment_songs , parent , false ) ; return new ViewHolder ( view ) ; }
public void onReceive ( Context context , Intent intent ) { String action = intent . getAction ( ) ; if ( action . equals ( Intent . ACTION_HEADSET_PLUG ) ) { sendState ( context , intent . getIntExtra ( "state" , 0 ) ) ; } }
public void set_fdWriteMem ( int addr , int len , int value ) { set_fdReadMem ( addr , len ) ; macWrite ( 0x11e , value ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , privacy . class ) ; inte . putExtra ( "url" , "http : startActivity ( inte ) ; }
public void addOnStateChangeListener ( OnStateChangeListener listener ) { stateListeners . add ( listener ) ; }
private ChatBot ( ) { }
public SendFinalizedFormPage clickSendFinalizedForm ( int formCount ) { onView ( withText ( getTranslatedString ( R . string . send_data_button , formCount ) ) ) . perform ( click ( ) ) ; return new SendFinalizedFormPage ( rule ) ; }
public int [ ] substringAsArray ( int start ) { final int [ ] result = new int [ pos - start ] ; System . arraycopy ( data , start , result , 0 , result . length ) ; return result ; }
public boolean onMediaButtonEvent ( @ NonNull Intent mediaButtonIntent ) { Log . d ( LOG_TAG , "MediaSessionCompat . Callback . onMediaButtonEvent " + mediaButtonIntent ) ; return super . onMediaButtonEvent ( mediaButtonIntent ) ; }
public DrawerBuilder withDrawerLayout ( DrawerLayout drawerLayout ) { this . mDrawerLayout = drawerLayout ; return this ; }
public List < Host . Status > getValues ( ) { return values ; }
public void initialize ( Context aContext ) { mContext = aContext ; sharedPref = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; }
private void injectGetPropertyEncoding ( ) { mv . visitLdcInsn ( "microedition . encoding" ) ; mv . visitMethodInsn ( Opcodes . INVOKESTATIC , "java/lang/System" , "getProperty" , " ( Ljava/lang/String ; ) Ljava/lang/String ; " , false ) ; }
public ColorPreference getColorPreference ( ) { return colorPreference ; }
public RedditMessage asMessage ( ) throws IllegalAccessException , InterruptedException , InstantiationException , InvocationTargetException , NoSuchMethodException , IOException { return data . asObject ( RedditMessage . class ) ; }
private void infoLog ( String tag , String msg ) { if ( this . enableLog ) { infoLog ( tag , msg ) ; } }
public void onBannerLoaded ( int i , boolean b ) { Ads . updateBanner ( adView ) ; }
public void setPositiveButtonEnabled ( Boolean enabled ) { try { getPositiveButton ( ) . setEnabled ( enabled ) ; } catch ( NullPointerException e ) { LOGD ( TAG , "Positive welcome button doesn't exist to set enabled . " ) ; } }
public int getQueuePosition ( ) throws RemoteException { return mService . get ( ) . getQueuePosition ( ) ; }
public void onConnectionSuspended ( int i ) { Toast . makeText ( this , "Connection Suspended" , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; saveSettings ( ) ; }
public int compareTo ( ApiVersion compare ) { if ( compare . getMajor ( ) > getMajor ( ) ) { return - 1 ; } else if ( compare . getMajor ( ) < getMajor ( ) ) { return 1 ; } return 0 ; }
public void setValue ( Integer value ) { this . value = value ; }
public static void saveBooleanPreference ( Context context , String key , boolean value ) { SharedPreferences . Editor appPreferences = getDefaultSharedPreferences ( context . getApplicationContext ( ) ) . edit ( ) ; appPreferences . putBoolean ( key , value ) . apply ( ) ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mServiceProvider . addServiceFragment ( this ) ; if ( mServiceProvider . getService ( ) != null && ! mBound ) onServiceAttached ( mServiceProvider . getService ( ) ) ; }
public void getHotVideosFeedCallback ( String jsonVideos ) { Log . d ( "dtube" , jsonVideos ) ; manageFeed ( jsonVideos , DtubeAPI . CAT_HOT ) ; }
public static void toParcel ( PGPDecryptedKeyPairRing pair , Parcel dest ) throws NoSuchProviderException , PGPException , IOException { writeKeyPairToParcel ( pair . authKey , dest ) ; writeKeyPairToParcel ( pair . signKey , dest ) ; writeKeyPairToParcel ( pair . encryptKey , dest ) ; }
public void onCallDisconnected ( ) { mSipServiceConnection . disconnect ( true ) ; endRinging ( ) ; }
private Order ( String sql ) { this . sql = sql ; }
public void onError ( @ NonNull final PickSource pPickSource , final int pRequestType , @ NonNull final String pErrorString ) { Log . e ( TAG , "Err : " + pErrorString ) ; }
private boolean shouldLoadIcon ( FileHolder item ) { return ! scrolling && item . getFile ( ) . isFile ( ) && ! item . getMimeType ( ) . equals ( "video/mpeg" ) ; }
public void registerToggle ( int position ) { if ( unfoldedindexes . contains ( position ) ) registerFold ( position ) ; else registerUnfold ( position ) ; }
public static int getColorIndex ( int id ) { if ( id >= 0 && id < 8 ) { return id ; } return Math . abs ( id % Theme . keys_avatar_background . length ) ; }
public static Completable . CompletableTransformer applyCompletableIoSchedulers ( ) { return completable -> completable . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) ; }
public List < CalendarEntry > queryEventEntries ( ) { return createEntryList ( getCalendarEventProvider ( ) . queryEvents ( ) ) ; }
private static API api ( ) { return API . instance ( ) ; }
private void saveFilter ( ) { SharedPreferences preferences = getPreferences ( MODE_PRIVATE ) ; filter . toSharedPreferences ( preferences ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . commit ( ) ; }
public void setFormattedPubDate ( int formattedPubDate ) { this . formattedPubDate = formattedPubDate ; }
public void takePhoto ( ) { Runnable runnable = new Runnable ( ) { @ Override public void run ( ) { magicalCameraObject . getActionPicture ( ) . takePhoto ( ) ; } } ; askPermissions ( runnable , MagicalPermissions . CAMERA ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . add_ingredient_activity ) ; getAppComponent ( ) . newAddIngredientActivityComponent ( new AddIngredientModule ( this ) ) . inject ( this ) ; }
public void onClickEdit ( View view ) { Log . v ( LOG_TAG , "onClickEdit ( ) called with : " + "view = [ " + view + " ] " ) ; editLink ( mLink ) ; }
public Builder setTextColor ( int color ) { this . textColor = color ; return this ; }
public SQLiteRosterStore ( Context context ) { super ( context , DATABASE_NAME , null , DATABASE_VERSION ) ; mContext = context ; }
public boolean isSupportBle ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR2 && mContext . getApplicationContext ( ) . getPackageManager ( ) . hasSystemFeature ( PackageManager . FEATURE_BLUETOOTH_LE ) ; }
public void recalculateStreak ( ) { if ( servings == food . getRecommendedServings ( ) ) { streak = getStreakFromDayBefore ( ) + 1 ; } else if ( servings < food . getRecommendedServings ( ) ) { streak = 0 ; } }
public void onText ( CharSequence text ) { mKeyboardActionListener . onText ( text ) ; dismissPopupKeyboard ( ) ; }
public long getFileSize ( ) { return 0 ; }
public void onClick ( View v ) { if ( current != 0 ) mPager . setCurrentItem ( 0 ) ; }
public void downloadFailedFileOk ( String problemFilePath ) { gui . showError ( "Download error , unable to create/write file : \n\"" + problemFilePath + "\"\nPossible reasons include missing write permissions and insufficient free space . " ) ; }
public void updateDrawState ( TextPaint paint ) { applyCustomTypeFace ( paint , newType ) ; }
public IntBuffer getDrawOrder ( ) { return drawOrderBuffer ; }
public static int getNotificationsFrequency ( SharedPreferences settings ) { return Integer . parseInt ( settings . getString ( FREQUENCY , " - 1" ) ) ; }
public SummaryNumber ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( ) ; }
public boolean onActivityBackPressed ( ) { if ( isSearchViewExpanded ( ) ) { mSearchMenuItem . collapseActionView ( ) ; return true ; } else return goBackInTagHistory ( ) ; }
public void replaceEvents ( List < Event > events ) { setEvents ( events ) ; notifyDataSetChanged ( ) ; }
public RoomEventSubscription ( StreamObserver < RoomEventUpdate > observer , Subscription subscription ) { this . observer = observer ; this . subscription = subscription ; }
public void post ( Object event ) { Log . i ( "EventBus" , "post ( ) " + event . getClass ( ) . getSimpleName ( ) + " : " + event ) ; super . post ( event ) ; }
private String getFeatureOverlayTablesPreferenceKey ( String database ) { return database + FEATURE_OVERLAY_TABLES_PREFERENCE_SUFFIX ; }
public void onBridgedAdapterItemRangeInserted ( @ NonNull RecyclerView . Adapter source , Object tag , int positionStart , int itemCount ) { onHandleWrappedAdapterItemRangeInserted ( source , ( List < ComposedChildAdapterTag > ) tag , positionStart , itemCount ) ; }
public void run ( ) { try { getListView ( ) . setSelection ( adapter . getCount ( ) - 1 ) ; } catch ( Exception e ) { } }
private void handleWordSeparator ( int primaryCode ) { if ( mKeyboardSwitcher . isCurrentKeyboardViewUseQwertyKeyboard ( ) && mTaigiCandidateController . hasRawInputSuggestion ( ) ) { commitRawInputSuggestion ( ) ; } sendKey ( primaryCode ) ; updateShiftIcon ( ) ; }
private boolean initFoodIcon ( ) { return Common . loadImage ( getContext ( ) , ivIcon , FoodInfo . getFoodIcon ( food . getName ( ) ) ) ; }
public boolean keyDown ( InputEvent event , int keycode ) { return keyListener . functionKeys ( keycode ) || super . keyDown ( event , keycode ) ; }
public Integer getTimestamp ( ) { return timestamp ; }
public void setup ( ) { MockitoAnnotations . initMocks ( RecentPageModelTest . this ) ; }
public static com . coinomi . core . protos . Protos . WalletPocket parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void recreating_whenPermissionsGrantedPreviously_doesNotShowPermissionDependantPreferences ( ) { FragmentScenario < FormMetadataPreferencesFragment > scenario = FragmentScenario . launch ( FormMetadataPreferencesFragment . class ) ; permissionsProvider . deny ( ) ; scenario . recreate ( ) ; verifyNoInteractions ( deviceDetailsProvider ) ; }
private void enqueueAllAlbums ( ) { try { ( ( GenericActivity ) getActivity ( ) ) . getPlaybackService ( ) . enqueueRecentAlbums ( ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
private void cleanUpError ( ) { cleanUp ( ) ; editor . errorExt ( editor . getResources ( ) . getString ( R . string . build_failed ) ) ; }
public final View getBackground ( ) { return findViewById ( R . id . background ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; mCallback = ( Callback ) context ; }
public TrackSelectionArray getCurrentTrackSelections ( ) { return player . getCurrentTrackSelections ( ) ; }
public void onClick ( View v ) { mPwDialog . dismiss ( ) ; sendPwDialog ( ) ; }
public void onClick ( Book book , int position ) { updateItem ( book , position ) ; }
public CustomTextWatcher ( DecimalFormatterEditText view , DecimalFormatterEditText other , CurrencyEditText amount ) { mView = view ; mOther = other ; mAmount = amount ; }
public void subscribe ( ObservableEmitter < Long > emitter ) throws Exception { emitter . onNext ( FileUtil . calculateDirectorySize ( mActivity . getCacheDir ( ) ) ) ; }
public void loadConfig ( Preferences preferences , String prefix ) { }
public ColorPickerDialog setTitle ( String title ) { mTitle = title ; return this ; }
public int compareTo ( FileHolder another ) { return mFile . compareTo ( another . getFile ( ) ) ; }
public void applyTexts ( ) { if ( saveConfig ( ) ) { done = true ; } }
public Object then ( @ NonNull Task < TransportService > task ) throws Exception { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . WATCHFACE_DATA , watchfaceData , taskCompletionSource ) ; return null ; }
public MaterialRatingBar ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
private void update ( Selector s ) { RemixedDungeon . moveTimeout ( selectedTimeout ) ; s . setText ( moveTimeoutText ( ) ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { switchStateToFinished ( ) ; InterventionActivity . super . onBackPressed ( ) ; }
public static void actionStart ( Context context ) { Intent intent = new Intent ( context , SaveSampleActivity . class ) ; context . startActivity ( intent ) ; }
public boolean hasKey ( ECKey key ) { lock . lock ( ) ; try { return basicKeyChain . hasKey ( key ) ; } finally { lock . unlock ( ) ; } }
public static boolean autoSync ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_auto_sync ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_auto_sync ) ) ; }
public ArrayList < String > getUsedAts ( ) { return xu . findAllElementTexts ( mInfoElement , R . string . xml2elemName_info_usedAt ) ; }
public void run ( ) throws Exception { storageLogic . updateAsync ( recipeFull , RecipeAction . PHOTO ) ; }
private NotificationCompat . Builder makeBaseBuilder ( ) { return new NotificationCompat . Builder ( getContext ( ) , CHANNEL_GITHUB_NOTIFICATIONS ) . setSmallIcon ( R . drawable . notification ) . setColor ( ContextCompat . getColor ( getContext ( ) , R . color . octodroid ) ) ; }
public static Connection login ( TaskListener listener , Payload data ) { data . taskType = LOGIN ; return launchConnectionTask ( listener , data ) ; }
public Object then ( @ NonNull Task < TransportService > task ) throws Exception { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . REVOKE_ADMIN_OWNER , null , taskCompletionSource ) ; return null ; }
public List < BaseKeyframeAnimation < ? , Path >> getMaskAnimations ( ) { return maskAnimations ; }
public LiveData < List < RecodingItem >> getListItems ( ) { return repository . getRecodingsList ( ) ; }
public void onAudioFocusChange ( int focusChange ) { if ( ( mCurrentStatus == SharedAudioPlayerUtils . AUDIO_PLAYER_STATUS_PLAYING ) && ( focusChange == AudioManager . AUDIOFOCUS_LOSS || focusChange == AudioManager . AUDIOFOCUS_LOSS_TRANSIENT ) ) { pause ( ) ; } }
public DbAdapter ( Context c ) { this . c = c ; webTextsUri = Utils . generateContentUri ( Constants . TableSelect . WEBTEXT ) ; accountsUri = Utils . generateContentUri ( Constants . TableSelect . ACCOUNTS ) ; }
public Attr setDownInterpolator ( int downInterpolator ) { this . downInterpolator = downInterpolator ; return this ; }
public String getRandomJoke ( ) { JokeListClass . JokeClass joke = getJoke ( ) ; return joke . getSetup ( ) + " \n" + joke . getPunchline ( ) ; }
public void setSelectionTracker ( SelectionTracker selectionTracker ) { mSelectionTracker = selectionTracker ; }
private static int getScore ( Element el ) { try { return Integer . parseInt ( el . attr ( "gravityScore" ) ) ; } catch ( Exception ex ) { return 0 ; } }
public String getPasswordFromPreferences ( ) { return generalSettings . getString ( GeneralKeys . KEY_PASSWORD ) ; }
private void sendPostToSteemBlockChain ( ) { showPublishingProgressDialog ( true , "Publishing . . . " ) ; steemPostCreator . createPost ( body , "" , images , tags , generated_permalink ) ; }
public void onValidationFailed ( List < ValidationError > errors ) { super . onValidationFailed ( errors ) ; mIsInputFieldFilled = false ; }
public String getText ( ) { return this . text ; }
public void execute ( MenuListActivity mainActivity ) { Intent intent = new Intent ( mainActivity , QifImportActivity . class ) ; mainActivity . startActivityForResult ( intent , ACTIVITY_QIF_IMPORT ) ; }
public com . coinomi . core . protos . Protos . KeyOrBuilder getSeedOrBuilder ( ) { if ( seedBuilder_ != null ) { return seedBuilder_ . getMessageOrBuilder ( ) ; } else { return seed_ ; } }
private int getArg0 ( int defaultValue ) { return getArg ( 0 , defaultValue ) ; }
public QoSTestResultEnum getResultType ( ) { return resultType ; }
public void onCancel ( final DialogInterface dialogInterface ) { General . quickToast ( PostSubmitActivity . this , getString ( R . string . comment_reply_oncancel ) ) ; progressDialog . dismiss ( ) ; }
public final void setNowPlaying ( ) { if ( mProgressBarInitializing == null ) { Lg . e ( "called setNowPlaying too early" ) ; return ; } mProgressBarInitializing . setVisibility ( View . GONE ) ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { addPreferencesFromResource ( R . xml . preferences ) ; PreferenceManager . setDefaultValues ( getActivity ( ) , R . xml . preferences , false ) ; }
public void onResume ( ) { super . onResume ( ) ; startForegroundTokenRenewalService ( ) ; }
public void onClick ( View v ) { Helper . viewFAQ ( getContext ( ) , 49 ) ; finish ( ) ; }
public String getPostAvatar ( ) { return StringUtils . notNullStr ( postAvatar ) ; }
public void run ( ) { recyclerView . setAdapter ( new FoodAdapter ( CalendarActivity . this ) ) ; UTILS . showToast ( CalendarActivity . this , getString ( R . string . toast_refreshed ) ) ; }
public void clear ( ) { while ( items . size ( ) > 0 ) removeItemAt ( items . size ( ) - 1 ) ; }
public void onError ( Exception e ) { AppLog . e ( AppLog . T . MEDIA , "VideoOptimizer > Can't optimize the video" , e ) ; trackVideoProcessingEvents ( true , e ) ; mListener . onVideoOptimizationFailed ( mMedia ) ; }
private void setLoadingMessage ( ) { emptyContentHeadline . setText ( R . string . file_list_loading ) ; emptyContentMessage . setText ( "" ) ; emptyContentIcon . setVisibility ( View . GONE ) ; emptyContentProgressBar . setVisibility ( View . VISIBLE ) ; }
public JmParser ( DatabaseHelper dbHelper ) { mDbHelper = dbHelper ; }
public static boolean shouldShowGutenbergInfoPopupForTheNewPosts ( String siteURL ) { return getBooleanPrefForKeyAndURL ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS , siteURL ) ; }
public static String getNotificationRingtone ( Context context ) { return getString ( context , "pref_ringtone" , context . getString ( R . string . pref_default_ringtone ) ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { return mOldPersonList . get ( oldItemPosition ) . getId ( ) . equals ( mNewPersonList . get ( newItemPosition ) . getId ( ) ) ; }
public void setVectorCoord ( double x1 , double x2 , double y1 , double y2 ) { this . x = x2 - x1 ; this . y = y2 - y1 ; setAbsValue ( ) ; }
public void setMessages ( Collection messages ) { this . messages = messages ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . main , menu ) ; }
public static String getJoke ( ) { int rnd = new Random ( ) . nextInt ( jokes . length ) ; joke = jokes [ rnd ] ; return joke ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { onBindViewHolder ( holder , mItems . get ( position ) , position ) ; }
private void setStatusText ( String text ) { new Handler ( getMainLooper ( ) ) . post ( ( ) -> { statusTextView . setText ( text ) ; } ) ; }
public Loader < Forum > onCreateLoader ( int id , Bundle args ) { AsyncContentLoader l = new AsyncContentLoader ( getSupportActivity ( ) ) ; showLoadingAnimation ( ) ; return l ; }
public void run ( ) { DeviceUtil . killBackgroundTasks ( mContext ) ; }
public RemoteCNPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { this ( context , attrs , defStyleAttr , defStyleAttr ) ; }
public long getMemberId ( ) { return getLongField ( MemberColumns . _ID ) ; }
private void editProduct ( int id ) { String stringId = Integer . toString ( id ) ; Bundle bundle = new Bundle ( ) ; bundle . putString ( "id" , stringId ) ; getLoaderManager ( ) . restartLoader ( LIST_PRODUCT_LOADER_ID , bundle , this ) ; }
public void typeOption_ShouldNotBeVisible ( ) { new MainMenuPage ( ) . openProjectSettings ( ) . clickGeneralSettings ( ) . clickAccessControl ( ) . openUserSettings ( ) . assertTextDoesNotExist ( "Type" ) . assertTextDoesNotExist ( "Submission transport" ) . assertText ( R . string . server_settings_title ) ; }
public float getLatitude ( ) { return mLatitude ; }
private boolean _updateViewedPad ( ) { boolean result = false ; long pad_id = this . _getPadId ( ) ; if ( pad_id != 0 ) { padlandDb . accessUpdate ( pad_id ) ; result = true ; } return result ; }
public final String getStartDate ( ) { return mStartDate ; }
public void onFailure ( Call < Details > call , Throwable t ) { detailsMutableLiveData . setValue ( null ) ; }
public void stopDrag ( float x , float y ) { mLine . unregister ( ) ; for ( IDropListener handler : mDropHandlers ) { handler . drop ( x , y ) ; } }
public QRCodePage assertOnPage ( ) { assertText ( R . string . configure_via_qr_code ) ; return this ; }
public void onFailure ( final RequestFailureType type , final Throwable t , final Integer status , final String readableMessage ) { revertToWeb ( ) ; }
public int getPosition ( ) { return mPosition ; }
public void format ( IRCCloudJSONObject event , Event e ) { if ( event != null ) { e . from = "" ; } e . color = colorScheme . networkErrorColor ; e . bg_color = colorScheme . errorBackgroundColor ; }
public void addRealmObject ( MedicineReminder medicineReminder ) { mSubscription = mMedicineReminderInteractor . realmCreate ( medicineReminder ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( realmBMI -> mMedicineReminderListView . showSaveSuccessMessage ( ) , throwable -> mMedicineReminderListView . showSaveErrorMessage ( ) ) ; }
public void onShowHelp ( View view ) { Intent intent = new Intent ( this , HelpActivity . class ) ; startActivity ( intent ) ; }
public CarouselViewListener ( Activity activity ) { this . activity = activity ; this . inflater = this . activity . getLayoutInflater ( ) ; }
public void onClick ( View v ) { nextSlide ( false ) ; }
private int _currentRevLimit ( ) { Deck d = mCol . getDecks ( ) . get ( mCol . getDecks ( ) . selected ( ) , false ) ; return _deckRevLimitSingle ( d ) ; }
public void onFailure ( Call < ResBnbTxInfo > call , Throwable t ) { WLog . w ( "onFetchSendTx BNB onFailure" ) ; if ( BaseConstant . IS_SHOWLOG ) t . printStackTrace ( ) ; }
public HistoricalRecordDataStore createCloudDataStore ( ) { HistoricalRecordEntityJsonMapper historicalRecordEntityJsonMapper = new HistoricalRecordEntityJsonMapper ( ) ; RestApi restApi = new RestApiImpl ( this . context , historicalRecordEntityJsonMapper ) ; return new CloudDataStore ( restApi , this . historicalRecordCache ) ; }
public LyricsSearchSuggestionsProvider ( Context context ) { super ( context , DATABASE_NAME , null , DATABASE_VERSION ) ; }
public void getLocalMusic ( FileModel fileModelDirectParent ) { mFileAudioManager . getLocalMusic ( fileModelDirectParent ) ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { super . onCreatePreferences ( savedInstanceState , rootKey ) ; addPreferencesFromResource ( R . xml . preferences_miscellaneous ) ; }
public static OstSdk get ( ) { if ( null == INSTANCE ) { throw new RuntimeException ( "OstSdk . init ( ) should be call before get" ) ; } return INSTANCE ; }
public String toString ( ) { return ( getLocalizedMessage ( ) != null ) ? ( c + " : " + getLocalizedMessage ( ) ) : c ; }
public String getAutoUpdateId ( ) { return sharedPreferences . getString ( AppConstants . SHARED_PREF_AUTO_UPDATE_ID , "" ) ; }
public void run ( ) { Toast . makeText ( activity , o . toString ( ) , Toast . LENGTH_SHORT ) . show ( ) ; }
private LogCode ( byte lcode , int ldd , String ldesc ) { logCode = ( int ) lcode ; logByteCode = lcode ; logDataDirection = ldd ; logDesc = ldesc ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { if ( dy <= 0 && fab . getId ( ) != 0 && SettingValues . fab ) { fab . show ( ) ; } else { fab . hide ( ) ; } }
public void onMapReady ( GoogleMap googleMap ) { googleMap . getUiSettings ( ) . setAllGesturesEnabled ( false ) ; googleMap . setOnMapClickListener ( mapClickListener ) ; this . googleMap = googleMap ; if ( restaurant != null ) { loadRestaurantLocationInMap ( ) ; } }
public void onEncryptSeedSuccess ( ) { checkWalletInit ( new File ( app . getFilesDir ( ) , Constants . ECLAIR_DATADIR ) ) ; }
public void run ( ) { if ( BuildConfig . DEBUG ) { Log . d ( TAG , "smoothScrollBy ( toStart [ " + ( - xscroll ) + " ] ) " ) ; } keyboardScroll . smoothScrollBy ( - xscroll , 0 ) ; }
public Integer getDecimalPlaces ( ) { return decimalPlaces ; }
public void failure ( RetrofitError error ) { setResult ( SpotifyConstants . RESULT_CODE_ERROR ) ; finish ( ) ; }
private void throwOpenDirectory ( ) throws IOException { if ( this . isDirectory ) { throw new IOException ( "Unable to open Stream on directory" ) ; } }
public Toolbar getToolbar ( ) { return toolbar ; }
public static synchronized void initialize ( Context context ) { if ( sInstance != null ) { throw new IllegalStateException ( "Extra call to initialize analytics trackers" ) ; } sInstance = new AnalyticsTrackers ( context ) ; }
public MutableLiveData < Integer > getTextAlignment ( ) { return mTextAlignment ; }
public void onClick ( View v ) { Intent it = new Intent ( WalletListActivity . this , SettingActivity . class ) ; startActivityForResult ( it , ORDER_REQUEST ) ; }
public TrackAdapter ( AudioItemHolder . ClickListener listener ) { mListener = listener ; AutoMusicTagFixer . getContextComponent ( ) . inject ( this ) ; if ( listener instanceof OnSortingListener ) mOnSortingListener = ( OnSortingListener ) listener ; }
public Vector ( ) { this . x = 0 ; this . y = 0 ; setAbsValue ( ) ; }
public void onChanged ( List < Movie > movies ) { MovieListFragment movieListFragment = MovieListFragment . getInstance ( new ArrayList <> ( movies ) ) ; loadFragment ( movieListFragment , null ) ; moviesList . removeObserver ( this ) ; }
public int getStartPositionHandle ( ) { return mStartPositionLoc ; }
public float getLineSize ( ) { return LineSize ; }
public DisableAssociationCommand ( Association association ) { this . association = association ; }
public List < String > getParagraphs ( ) { return paragraphs ; }
public void run ( ) { try { database . executeFast ( "DELETE FROM blocked_users WHERE uid = " + id ) . stepThis ( ) . dispose ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public int getLayoutId ( ) { return R . layout . list_item_notification_alliance_selection ; }
public void setList ( List < FileModel > list ) { Preconditions . checkNotNull ( list ) ; mFiles . clear ( ) ; mFiles . addAll ( list ) ; notifyDataSetChanged ( ) ; }
public void setR ( Integer r ) { this . r = r ; }
public int getEpoch ( ) { return epoch ; }
public int getCount ( ) { return ProfileList . size ( ) ; }
private void bindToolbarHeader ( ) { Shop shop = PrefShopHome . getShop ( getActivity ( ) ) ; if ( shop != null ) { shopName . setText ( shop . getShopName ( ) ) ; } }
public void onCreate ( ) { super . onCreate ( ) ; instance = this ; setupCrashlytics ( ) ; setupTaskConfig ( ) ; }
public static Cancellable fromJsonString ( String jsonString , OnCompositionLoadedListener l ) { ListenerAdapter listener = new ListenerAdapter ( l ) ; LottieCompositionFactory . fromJsonString ( jsonString ) . addListener ( listener ) ; return listener ; }
public String getFeedUrl ( ) { return StringUtils . notNullStr ( feedUrl ) ; }
public void onDateSet ( DatePicker view , int year , int month , int day ) { EditText et = ( EditText ) getActivity ( ) . findViewById ( R . id . et_model_year ) ; et . setText ( String . valueOf ( year ) ) ; }
public void onClick ( View view ) { checkForStoragePemrission ( ) ; }
public Object getThumbLocation ( ) { return currentThumbLocation ; }
public void onCategoryChosen ( String category ) { db . setCategory ( localAccount , note . getId ( ) , category ) ; note . setCategory ( category ) ; listener . onNoteUpdated ( note ) ; }
public void onClick ( View view ) { presenter . startPerformProgressAnimation ( adventureFragment ) ; }
public TagViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . reader_cardview_tag , parent , false ) ; return new TagViewHolder ( view ) ; }
public KeyboardAwareLinearLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public Binder < VideoEmbedView > createBinder ( TagEntry model ) { return new VideoEmbedBinder ( model ) ; }
public void showPicker2 ( View view ) { colorDialog . setPickerColor ( this , 2 , colourFont ) ; colorDialog . showColorPicker ( this , 2 ) ; }
public static MCReader get ( Tag tag ) { MCReader mcr = null ; if ( tag != null ) { mcr = new MCReader ( tag ) ; if ( mcr . isMifareClassic ( ) == false ) { return null ; } } return mcr ; }
public PlaceAndPlateDtoAssert hasName ( String name ) { assertEquals ( name , place . placeName ( ) ) ; return this ; }
public void migrate ( SupportSQLiteDatabase database ) { }
public void onEntryDrop ( VaultEntry entry ) { saveVault ( false ) ; }
public void updateList ( List < Patient > patientList ) { mAdapter = new LastViewedPatientRecyclerViewAdapter ( this . getActivity ( ) , patientList , this ) ; mPatientsRecyclerView . setAdapter ( mAdapter ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . sign_up , container , false ) ; setIds ( view ) ; setClickListeners ( ) ; return view ; }
public void onClick ( DialogInterface dialog , int which ) { OverlayViewManager . requestOverlayPermission ( ) ; }
private void swapInputProcessor ( ) { Gdx . input . setInputProcessor ( new EndGameInputProcessor ( ) ) ; }
public void onNetworkReachable ( final Core linphoneCore , final boolean b ) { Lg . i ( "onNetworkReachable reachable = " , Boolean . toString ( b ) ) ; }
public void onDestroy ( ) { DigitalismaApplication . get ( getActivity ( ) ) . getComponent ( ) . leakCanaryProxy ( ) . watch ( this ) ; super . onDestroy ( ) ; }
public void when_OpenSourcesLibrariesLicenses_should_openSourceLicensesTitleBeDisplayed ( ) { rule . startAtMainMenu ( ) . openProjectSettings ( ) . clickAbout ( ) . clickOnOpenSourceLibrariesLicenses ( ) ; }
public void onClick ( View v ) { parent . onClickMemoryKeyButton ( Constants . MEM_READ ) ; }
private Bitmap getMoneroLogo ( ) { if ( logo == null ) { logo = Helper . getBitmap ( getContext ( ) , R . drawable . ic_monero_logo_b ) ; } return logo ; }
public void setReceiver_ID ( String reciever_ID ) { this . receiver_ID = reciever_ID ; }
private long getFistInstalledOn_GB ( String packageName ) throws NameNotFoundException { PackageInfo packageInfo = context . getPackageManager ( ) . getPackageInfo ( packageName , 0 ) ; return packageInfo . firstInstallTime ; }
public String getUsername ( ) { assertLoaded ( ) ; return username ; }
public void onActivityCreated ( Activity activity , Bundle savedInstanceState ) { registerActivity ( activity ) ; }
public void testGetItemForceNetwork ( ) { client . getItem ( "1" , ItemManager . MODE_NETWORK , itemListener ) ; verify ( TestRestServiceFactory . hnRestService ) . networkItem ( eq ( "1" ) ) ; }
public void sendMessage ( String s ) { try { writeSocket . getOutputStream ( ) . write ( s . getBytes ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public HomeMenuEvent ( @ NonNull List < Plugin > menuItems ) { this . menuItems = menuItems ; }
private void setViewLogin ( ) { setViewHide ( ) ; viewGroupNeedLogin . setVisibility ( View . VISIBLE ) ; buttonViewSources . setVisibility ( View . VISIBLE ) ; }
public EighthActivityBuilder BID ( int BID ) { this . BID = BID ; return this ; }
public T getPreferenceValue ( Context context ) { if ( defaultValue != null ) { return getPreferenceValue ( context , defaultValue ) ; } else return preference . getSpecificValue ( context , args ) ; }
public void onClick ( View v ) { try { HitCount count = addHit ( cupNum ) ; button . setText ( Integer . toString ( count . getHits ( cupNum ) ) ) ; } catch ( IOException e ) { } }
public int onClickNext ( ) { if ( video_size_index != - 1 && video_size_index < video_sizes . size ( ) - 1 ) { video_size_index ++ ; update ( ) ; return video_size_index ; } return - 1 ; }
public static AdvancedPersonaFragment newInstance ( int personaID ) { AdvancedPersonaFragment advancedPersonaFragment = new AdvancedPersonaFragment ( ) ; Bundle args = new Bundle ( ) ; args . putInt ( "persona_id" , personaID ) ; advancedPersonaFragment . setArguments ( args ) ; return advancedPersonaFragment ; }
public boolean isGooglePlayBuild ( ) { return getBuildConfigBoolean ( "IS_GPLAY_BUILD" , true ) ; }
public void attachView ( DeviceListView mvpView ) { super . attachView ( mvpView ) ; updateDeviceList ( ) ; }
public void handleInboxLongClick ( final AppCompatActivity activity ) { if ( currentItem != null ) { currentItem . handleInboxLongClick ( activity ) ; } }
public ArrayList < MoodleModule > getModules ( ) { return modules ; }
public final void unpackAll ( ) { for ( Item oneItem : mListItem ) { oneItem . setPacked ( false ) ; } packingChange ( ) ; }
public void removeEventHandler ( BaseStationEvent handler ) { onEvents . remove ( handler ) ; }
public boolean needsIsti3athaAudio ( ) { return ! isGapless ( ) || mGaplessDatabasePath . contains ( "minshawi_murattal" ) ; }
public void onEventMainThread ( VideoOptimizer . ProgressEvent event ) { if ( ! isFinishing ( ) ) { float progress = UploadService . getUploadProgressForMedia ( event . media ) ; onUploadProgress ( event . media , progress ) ; } }
public OtherException ( String description ) { super ( GATT_CODE_OTHER , description ) ; }
public AccountHeader withSelectionListEnabled ( boolean selectionListEnabled ) { this . mSelectionListEnabled = selectionListEnabled ; return this ; }
public int getDrawerLabelColor ( ) { return getInt ( R . string . pref_key__drawer_label_color , Color . DKGRAY ) ; }
public String getCaption ( ) { return caption ; }
public static void removeReceiver ( final Log . Receiver receiver ) { RECEIVERS . remove ( receiver ) ; }
public void adapt ( Track track , Activity activity ) { ( ( TextView ) activity . findViewById ( R . id . track_instant_filter_right ) ) . setText ( track . getArtistName ( ) ) ; }
public void action ( String walletName , String password , boolean fingerprintUsed ) { if ( checkDevice ( walletName , password ) ) startDetails ( walletFile , password , GenerateReviewFragment . VIEW_TYPE_DETAILS ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case U . HIDDEN : return getString ( R . string . blacklist_dialog_title ) ; case U . TOP_APPS : return getString ( R . string . top_apps_dialog_title ) ; } return null ; }
public String getCommentText ( ) { return queryJSON ( "body [ last ] . text" , "" ) ; }
public void onClick ( View v ) { Intent setCustomLocation = new Intent ( CustomPoopActivity . this , CustomMarkerMapActivity . class ) ; startActivity ( setCustomLocation ) ; }
public void onGrblAlarmEvent ( GrblAlarmEvent event ) { consoleLogger . setMessages ( event . toString ( ) ) ; }
public void onCreate ( ) { try { readModels ( ) ; } catch ( final Exception e ) { throw new RuntimeException ( "Error reading models . " , e ) ; } }
private void doMySearch ( ) { sessionInfo . executeRpc ( new SessionInfo . RpcExecuter ( ) { @ Override public void executeRpc ( TransmissionRPC rpc ) { rpc . startMetaSearch ( searchString , MetaSearchActivity . this ) ; } } ) ; }
private void sendSmAcknowledgementInternal ( ) throws NotConnectedException { packetWriter . sendStreamElement ( new AckAnswer ( clientHandledStanzasCount ) ) ; }
public static String ayaDay ( Context context ) { return SaveManager . get ( context ) . getstring_appINFO ( ) . get ( SaveManager . jsonAppLanguage ) ; }
public void onNotFinishedError ( ) { Toast . makeText ( getContext ( ) , R . string . snackbar_authentication_method , Toast . LENGTH_SHORT ) . show ( ) ; }
public void ordinalShift ( ) { baseId += getItemCount ( ) + 1 ; }
public AvatarDownloadJob ( Context context , @ NonNull byte [ ] groupId ) { super ( context , JobParameters . newBuilder ( ) . withMasterSecretRequirement ( ) . withNetworkRequirement ( ) . create ( ) ) ; this . groupId = groupId ; }
public static void setIsRated ( ) { set ( IS_RATED , true ) ; }
public AccountResult ( Account account ) { this . account = account ; }
public static int getCoordinateDecimalRounding ( ) { return coordinateDecimalRounding ; }
public void onBackPressed ( ) { if ( getFragmentManager ( ) . getBackStackEntryCount ( ) > 0 ) { getFragmentManager ( ) . popBackStack ( ) ; } else { super . onBackPressed ( ) ; } }
public void onStop ( ) { super . onStop ( ) ; SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putBoolean ( savedViewMorePreference , viewModel . isViewDetailChecked . get ( ) ) ; editor . apply ( ) ; }
public String getSystemId ( ) { return systemId ; }
public void setProfileUrl ( String profileUrl ) { this . profileUrl = StringUtils . notNullStr ( profileUrl ) ; }
public void onDestroyView ( ) { EventBus . getDefault ( ) . unregister ( this ) ; super . onDestroyView ( ) ; ButterKnife . unbind ( this ) ; }
public DrawerBuilder withActionBarDrawerToggle ( ActionBarDrawerToggle actionBarDrawerToggle ) { this . mActionBarDrawerToggleEnabled = true ; this . mActionBarDrawerToggle = actionBarDrawerToggle ; return this ; }
public void onSelectedDayChange ( long dayMillis ) { mAdapter . setSelectedDay ( getCurrentItem ( ) , dayMillis , false ) ; notifyDayChange ( dayMillis ) ; }
public void onFetchDataFailed ( String errorMessage ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_generic ) , getString ( R . string . dialog_error_message_generic ) ) ; hideLoadingDialog ( ) ; }
public static com . coinomi . core . protos . Protos . UnspentOutput parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void setOffset ( Integer offset ) { this . offset = offset ; }
public void setLastTriggered ( long lastTriggered ) { this . lastTriggered = lastTriggered ; }
public void setBackground ( View v ) { background = v ; background . setOnTouchListener ( new View . OnTouchListener ( ) { @ Override public boolean onTouch ( View view , MotionEvent motionEvent ) { return hidePopups ( ) ; } } ) ; }
public long getFirstRetryTimeStamp ( ) { return Long . valueOf ( get ( "firstRetryTimeStamp" , "0" ) ) ; }
public PreferenceDialog setPreference ( T preference ) { this . preference = preference ; return this ; }
public boolean onCheckCanStartDrag ( MyViewHolder holder , int position , int x , int y ) { return true ; }
public int getCommunityId ( ) { return mCommunity . getmId ( ) ; }
public DelayQueryRunnable ( String text ) { this . mText = text ; }
public boolean onQueryTextSubmit ( String query ) { if ( adapter != null ) adapter . filterWithQuery ( query ) ; return true ; }
public void shouldReturnModelWithOneCountryGivenInputStreamByCityIdMoscow ( ) throws IOException { givenInputStreamByCityIdMoscow ( ) ; givenPojo ( ) ; whenGenerateModel ( ) ; thenShouldHaveFortyForecastDataElements ( ) ; }
private void iniciaComponentes ( ) { avaliacao = ( Avaliacao ) getIntent ( ) . getSerializableExtra ( "avaliação" ) ; criaGrafico ( ) ; findViews ( ) ; escreveTextos ( ) ; }
public void addSelectedEntry ( VaultEntry entry ) { if ( _highlightEntry ) { resetFocus ( ) ; } _selectedEntries . add ( entry ) ; updateDraggableStatus ( ) ; }
public void onClick ( View v ) { gotoFacebook ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . ramadan . imageloadinglib . test" , appContext . getPackageName ( ) ) ; }
public void onPageSelected ( int position ) { PreferenceUtil . getInstance ( getActivity ( ) ) . setLastPage ( position ) ; }
public void changeCursor ( Cursor cursor ) { checkCursorIfEmpty ( cursor ) ; Cursor old = swapCursor ( cursor ) ; if ( old != null ) { old . close ( ) ; } }
private void stopPlayer ( ) { if ( mPlayer != null ) { mPlayer . stop ( ) ; mPlayer . release ( ) ; mHandler . removeCallbacksAndMessages ( null ) ; } }
public void fireUploadRemoveClick ( UploadObject o ) { uploadManager . cancel ( o . getId ( ) ) ; }
private static boolean shouldShowDoneNotification ( int notId , boolean operationSuccessful ) { boolean durationAboveBound = notificationToStartTime . containsKey ( notId ) && currentTimeMillis ( ) - notificationToStartTime . get ( notId ) >= DONE_NOTIF_LOWER_BOUND ; return durationAboveBound || ! operationSuccessful ; }
public void setup ( ) { clock = mock ( Clock . class ) ; Settings generalSettings = TestSettingsProvider . getUnprotectedSettings ( ) ; generalSettings . clear ( ) ; viewModel = new BackgroundAudioViewModel ( audioRecorder , generalSettings , recordAudioActionRegistry , permissionsChecker , clock ) ; }
public String formatDate ( Date date ) { SimpleDateFormat formatter = new SimpleDateFormat ( Container . DATE_FORMAT ) ; return formatter . format ( date ) ; }
public static void set ( @ NonNull final int [ ] coords , final int x , final int y ) { coords [ INDEX_X ] = x ; coords [ INDEX_Y ] = y ; }
public AppIconAdapter ( Context context , PackageManager manager , List < AppDetail > apps ) { this . context = context ; this . manager = manager ; this . apps = apps ; }
public void setStories ( List < StoryVO > stories ) { mStories = stories ; }
public static long rawFetchId ( DatabaseAdapter db , String query , String [ ] selectionArgs ) { return rawFetchLong ( db , query , selectionArgs , - 1 ) ; }
public void decreaseFontSize ( ) { setFontSize ( fontSize - FONT_SIZE_STEP ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . menu_open_fs : startPlaylist ( 1 ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'FEED'" ; db . execSQL ( sql ) ; }
public String status ( @ NotNull Mob me ) { return StringsManager . maybeId ( script . runOptional ( "status" , "CustomAi : " + scriptFile , me ) ) ; }
public void onCapabilitiesChanged ( Network network , NetworkCapabilities networkCapabilities ) { showConnectionType ( ) ; }
public void setup ( ) { RobolectricHelpers . overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public QRCodeDecoder providesQRCodeDecoder ( ) { return fakeQRDecoder ; } } ) ; context = Robolectric . buildActivity ( Activity . class ) . get ( ) ; }
public void takeLightScreenshotsTest ( ) { takeSreenshots ( ) ; }
public boolean FtpUseFtps ( ) { return prefs . getBoolean ( PreferenceNames . FTP_USE_FTPS , false ) ; }
private void onChangedConnectionProperty ( String key ) { HyperLog . i ( TAG , "Changed parameter " + key ) ; new Scheduler ( this ) . scheduleNow ( ) ; }
public MyViewHolder ( View itemView ) { super ( itemView ) ; textView = ( TextView ) itemView . findViewById ( android . R . id . text1 ) ; }
private void openDrawFragment ( ) { replaceFragment ( DrawFragment . newInstance ( mItem ) ) ; }
public void adapt ( Track track , Activity activity ) { ( ( TextView ) activity . findViewById ( R . id . track_instant_filter_left ) ) . setText ( track . getAlbumName ( ) ) ; }
public BigDecimal getCapitalPlaceDebutAnnee ( ) { return this . capitalPlaceDebutAnnee ; }
public APICache provideApiCache ( Database db ) { return Mockito . mock ( APICache . class ) ; }
private void openPlayerActivity ( ) { Intent intent = getAudioIntent ( ) ; intent . setClass ( this , PlayerActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; startActivity ( intent ) ; }
public void setDeleteItemDisable ( int dId ) { if ( dId == mId ) { mStateBttn . setEnabled ( false ) ; mItemNameText . setText ( "Deleted" ) ; } }
public TextLabelWidget ( LayoutManager layoutManager , String title , Size size , TextOrientationType orientation ) { this ( layoutManager , size , orientation ) ; setText ( title ) ; }
public Location_NoeC getLocationtoPosition ( int position ) { return filteredData . get ( position ) ; }
public FormattableEditText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public IconLabelItem withOnClickListener ( @ Nullable View . OnClickListener listener ) { _onClickListener = listener ; return this ; }
public static File copyFile ( File srcFile , File destFile ) { return copyFile ( srcFile , destFile , false , false ) ; }
public MaterialRatingBar ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public boolean hasImageUrl ( ) { return ! TextUtils . isEmpty ( imageUrl ) ; }
public void set ( String key , String value ) { configuration . setProperty ( key , value ) ; }
public void setRecyclerViewList ( List < ResponseSingleCast > castCrewList ) { mCastCrewList = castCrewList ; notifyDataSetChanged ( ) ; }
public boolean isValid ( ) { boolean versionValid = ( majorVersion >= 11 ) ; return isSuccessful ( ) && versionValid && ( responseTime < Double . MAX_VALUE ) ; }
private static void clearUpdate ( Context context ) { AlarmManager alarmManager = ( AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ; alarmManager . cancel ( getAlarmIntent ( context ) ) ; }
public final VH onCreateViewHolder ( ViewGroup parent , int viewType ) { VH holder = create ( parent , viewType ) ; if ( viewType == VIEW_TYPE_FLAT ) { holder . mCardView . flatten ( ) ; } return holder ; }
public Command params ( Map < String , Object > params ) { this . params . putAll ( params ) ; return this ; }
public AnalyticsException ( String detailMessage ) { super ( detailMessage ) ; }
public void setComparator ( Comparator < Bookmark > comparator ) { mComparator = comparator ; sort ( ) ; notifyDataSetChanged ( ) ; }
public void setUpdateType ( Updater . UpdateType updateType ) { this . updateType = updateType ; }
public byte [ ] getOfflineLicenseKeySetId ( ) { return offlineLicenseKeySetId ; }
public void willHidePhotoViewer ( ) { updateVisibleRows ( ) ; }
public static ScriptVariable parseRawString ( String literalText ) throws ScriptingExecptions . ChameleonScriptingException { literalText . replace ( "\\" , "\\\\" ) ; ScriptVariable nextVar = new ScriptVariable ( ) ; nextVar . set ( literalText ) ; return nextVar ; }
public GeneralSettingsPage openConstraintProcessing ( ) { scrollToRecyclerViewItemAndClickText ( getTranslatedString ( R . string . constraint_behavior_title ) ) ; return this ; }
public void testTakeVideo ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideo" ) ; setToDefault ( ) ; subTestTakeVideo ( false , false , false , false , null , 5000 , false ) ; }
public ViewPagerAdapter ( FragmentManager fm , CharSequence mTitles [ ] , int mNumbOfTabsumb ) { super ( fm ) ; this . pageTitles = mTitles ; this . noOfTabs = mNumbOfTabsumb ; }
public void shouldNotPassValidation_invalidFamilyName ( ) { patient . getPerson ( ) . getName ( ) . setFamilyName ( INVALID_NAME_2 ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
private View . OnClickListener mOnUndoClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { mBookmarkPresenter . cancelDeletion ( ) ; mBookmarkPresenter . requestData ( true ) ; } } ;
private Selection ( String selectionString , String [ ] selectionArgs ) { this . selectionString = selectionString ; this . selectionArgs = selectionArgs ; }
public TorrentBuilder setSeedPath ( Uri path ) { String seedPathStr = SystemFacadeHelper . getFileSystemFacade ( context ) . makeFileSystemPath ( path ) ; builder . path ( new File ( seedPathStr ) ) ; return this ; }
public void onResponse ( Call < FirebaseMessage > call , Response < FirebaseMessage > response ) { Log . d ( TAG , call . request ( ) . toString ( ) ) ; }
public static int getQueueDurationMillis ( int position ) { if ( musicService != null ) { return musicService . getQueueDurationMillis ( position ) ; } return - 1 ; }
public NavigationMode ( ) { super ( "navigation" , "Navigation" , "distance" , 0 , 6096 , 0 ) ; }
public void addItem ( ModelSetting name , int position ) { itemsData . add ( position , name ) ; notifyItemInserted ( position ) ; }
private static Playlist getPlaylistFromCursorImpl ( @ NonNull final Cursor cursor ) { final int id = cursor . getInt ( 0 ) ; final String name = cursor . getString ( 1 ) ; return new Playlist ( id , name ) ; }
public boolean pepPersistent ( ) { synchronized ( XmppConnection . this . disco ) { ServiceDiscoveryResult info = disco . get ( account . getJid ( ) . toBareJid ( ) ) ; return info != null && info . getFeatures ( ) . contains ( "http : } }
public static synchronized AppPreferencesHelper getInstance ( Context context ) { if ( instance == null ) instance = new AppPreferencesHelper ( context ) ; return instance ; }
public FragmentedMp4Extractor ( @ Flags int flags , TimestampAdjuster timestampAdjuster ) { this ( flags , null , timestampAdjuster ) ; }
public boolean registerLocalImageListener ( GetLocalImageListener getLocalImageListener ) { synchronized ( mGetLocalImageListeners ) { if ( getLocalImageListener == null || mGetLocalImageListeners . contains ( getLocalImageListener ) ) { return false ; } return mGetLocalImageListeners . add ( getLocalImageListener ) ; } }
public int getCurMainViewId ( ) { return curMainViewId ; }
private static boolean isDebug ( ) { return BuildConfig . DEBUG || sLogFileWriter != null ; }
public void stopUpdateLeftTime ( ) { mReadThread . interrupt ( ) ; mTimeText . setText ( "" ) ; }
public void cbFunc ( RootShellService . RootCommand state ) { if ( state . exitCode == 0 ) { } else { } }
public void run ( ) { if ( Settings . getActiveSerialIOPort ( ) == null || ! ChameleonLogUtils . CONFIG_ENABLE_LIVE_TOOLBAR_STATUS_UPDATES ) { statsUpdateHandler . removeCallbacksAndMessages ( this ) ; postingStatsInProgress = false ; } else { updateAllStatusAndPost ( true ) ; } }
public void valueM4 ( float [ ] value ) { GLES20 . glUniformMatrix4fv ( location , 1 , false , value , 0 ) ; }
public void onTabUnselected ( Tab tab , FragmentTransaction ft ) { ft . detach ( mFragment ) ; }
public void run ( LottieComposition composition ) { reverseAnimation ( resetProgress ) ; }
public void setListData ( ) { CustomListViewValuesArr . clear ( ) ; CustomListViewValuesArr = new ArrayList <> ( songsManager . allSongs ( ) ) ; }
public FooterItemHelper withDrawerItems ( IDrawerItem . . . drawerItems ) { Collections . addAll ( this . mDrawerItems , drawerItems ) ; return this ; }
public void onFailure ( Call < ResLcdAccountInfo > call , Throwable t ) { }
public String visit ( Track track ) { String trackName = track . GetTitle ( ) ; int number = track . GetNumber ( ) ; if ( ! Shorty . isVoid ( number ) ) { return number + DELIMITER + trackName ; } return trackName ; }
public Holder onCreateViewHolder ( @ NonNull ViewGroup viewGroup , int i ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . sura_item , viewGroup , false ) ; return new Holder ( view ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonEditorDialog . this . getContext ( ) , ButtonEditorDialog . this , the_button . getData ( ) . getFlipColor ( ) , COLOR_FIELDS . COLOR_FLIPPED ) ; diag . show ( ) ; }
public void testIsNOTWPCOM4 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( buildURL ( notWpcomAddress2 ) ) ) ; }
public PeopleAdapter ( Fragment fragment , Context context , List < Person > persons ) { mPersons = persons ; mLayoutInflater = LayoutInflater . from ( context ) ; mContext = context ; mFragment = fragment ; }
public boolean isReady ( ) { Log . w ( TAG , "isReady" ) ; return ( passthrough != null && passthrough . isReady ( ) ) || ( bitmapRegionDecoder != null && ! bitmapRegionDecoder . isRecycled ( ) ) ; }
public int getAboutOrder ( ) { return aboutOrder ; }
public void run ( ) { Fragment fragment = mAcccountsActivity . getCurrentAccountListFragment ( ) ; ( ( AccountsListFragment ) fragment ) . refresh ( ) ; }
public void onClick ( View view ) { if ( onItemClickListener != null ) { onItemClickListener . onItemClick ( places . get ( position ) ) ; } }
public static boolean getMultiMarketMode ( Context context ) { return true ; }
public void run ( TLObject response , TLRPC . TL_error error ) { ConnectionsManager . getInstance ( ) . cleanUp ( ) ; }
private static File getOutgoingPictureFile ( Context context , Date date ) throws IOException { File path = new File ( context . getExternalFilesDir ( PICTURES_ROOT_TYPE ) , PICTURES_SENT_ROOT ) ; createDirectories ( path ) ; return createImageFile ( path , date ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = inflater . inflate ( R . layout . recycler_main_item , parent , false ) ; return new ViewHolder ( v ) ; }
public void restartFileObserver ( ) { Log . d ( Config . LOGTAG , "restarting file observer" ) ; mFileAddingExecutor . execute ( this . fileObserver : : restartWatching ) ; mFileAddingExecutor . execute ( this : : checkForDeletedFiles ) ; }
public void setNumCollectedJewels ( int numCollectedJewels ) { this . numCollectedJewels = numCollectedJewels ; }
public void onSurfaceChanged ( GL10 gl , int width , int height ) { GLES20 . glViewport ( 0 , 0 , width , height ) ; Game . width ( width ) ; Game . height ( height ) ; GameLoop . setNeedSceneRestart ( ) ; }
public String getSpotMarketId ( String denom ) { for ( HardMoneyMarket market : money_markets ) { if ( market . denom . equals ( denom ) ) { return market . spot_market_id + " : 30" ; } } return null ; }
private void loadGroupPeers ( boolean force ) { if ( mGroupJid != null && ( mGroupPeers == null || force ) ) { mGroupPeers = MessagesProvider . getGroupMembers ( mContext , mGroupJid ) ; } }
public void fetchProducts ( ) throws Exception { List l = Product . fetchProducts ( ) ; Log . d ( "rafael . timbo . fetch" , l . toString ( ) ) ; }
public void onClick ( View v ) { parentFragment . showDialog ( AndroidUtilities . buildTTLAlert ( getContext ( ) , parentFragment . getCurrentEncryptedChat ( ) ) . create ( ) ) ; }
public void run ( ) { floatingActionButton . setProgress ( downloadProgress , false ) ; }
public Instruction parse ( StreamTokenizer tokenizer , DimensionParser dimParser ) throws IOException { int count = parseCount ( tokenizer ) ; Array < Instruction > lst = mLoader . tokenize ( tokenizer , "end" , dimParser ) ; return new RepeatInstruction ( lst , count ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; shelfTestUtils . setupBook ( "local - book - 1" , "Content\n\n* Note" ) ; }
public ThumbnailView ( Context context ) { super ( context ) ; }
private SharedPreferences sharedPreferences ( ) { if ( mSharedPreferences == null ) { mSharedPreferences = mContext . getSharedPreferences ( SHARED_PREFERENCES_NAME , Context . MODE_PRIVATE ) ; } return mSharedPreferences ; }
private boolean hideEventTime ( ) { return spansOneFullDay ( ) && ! ( isStartOfMultiDayEvent ( ) || isEndOfMultiDayEvent ( ) ) || isAllDay ( ) ; }
public TrackModel getPlaylistSong ( int index ) throws RemoteException { return mService . get ( ) . getPlaylistTrack ( index ) ; }
public void appendMediaFiles ( ArrayList < Map < String , MediaFile >> mediaList ) { }
public boolean configJSONExists ( ) { File configFile = getFileStreamPath ( CONFIG_FILENAME ) ; return configFile . exists ( ) ; }
public void addEventHandler ( BaseStationEvent handler ) { if ( handler != null ) { onEvents . add ( handler ) ; } }
private BroadcastReceiver showReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { showTaskbar ( true ) ; } } ;
public void setData ( String data ) { myData = data ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; switch ( id ) { case R . id . action_addcurrency : showAddCurrencyMenu ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
private String buildNotificationSubtitleForPost ( PostModel post ) { String uploadingMessage = ( post != null && post . isPage ( ) ) ? mContext . getString ( R . string . uploading_subtitle_pages_only_one ) : mContext . getString ( R . string . uploading_subtitle_posts_only_one ) ; return uploadingMessage ; }
public void onGuiCreated ( @ NonNull IMessagesLookView viewHost ) { super . onGuiCreated ( viewHost ) ; viewHost . displayMessages ( getData ( ) ) ; resolveHeaders ( ) ; }
public void sleepNow ( View view ) { syncWakeUpTimeAndTimePicker ( ) ; Intent intent = new Intent ( this , SleepNowActivity . class ) ; startActivity ( intent ) ; }
public void playToggleSoundEffect ( boolean on ) { boolean tmp = isSoundOn ; isSoundOn = true ; if ( on ) soundEffectsUtil . play ( R . raw . toggle_on ) ; else soundEffectsUtil . play ( R . raw . toggle_off ) ; isSoundOn = tmp ; }
public MyBean provideJoke ( ) { MyBean response = new MyBean ( ) ; JokeProvider jokeProvider = new JokeProvider ( ) ; response . setData ( jokeProvider . funnyJokeResponse ( ) ) ; return response ; }
public Call < JsonElement > revokeAuthToken ( @ Header ( "Authorization" ) String authHeader , @ Body RevokeReqBody revoke ) { return null ; }
public String toString ( ) { return "SDay { " + "weekday = " + weekday + " , title = '" + title + '\'' + " , type = '" + type + '\'' + " , lessons = " + lessons + ' } ' ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container ) { return inflater . inflate ( R . layout . genre_child_tab , container , false ) ; }
public void callingClearAnswerShouldCallDeleteMediaAndRemoveTheExistingAnswer ( ) { super . callingClearShouldRemoveTheExistingAnswer ( ) ; W widget = getWidget ( ) ; verify ( widget ) . deleteFile ( ) ; }
public void goUp ( ) { mCommandEditor . runOp ( mCommandEditor . keyUp ( ) ) ; }
public ServiceCreator ( @ MockMode final Provider < Boolean > mockProvider ) { this . mockProvider = mockProvider ; }
private BroadcastReceiver sortDesktopIconsReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { sortDesktopIcons ( ) ; } } ;
private void inflate ( Context context ) { LayoutInflater inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; inflater . inflate ( R . layout . group_add_entry , this ) ; }
public void deleteFile ( ) { questionMediaManager . markOriginalFileOrDelete ( getFormEntryPrompt ( ) . getIndex ( ) . toString ( ) , getInstanceFolder ( ) + File . separator + binaryName ) ; binaryName = null ; }
public void onMore ( View view , final int position ) { super . more ( statuses . get ( position ) . asRight ( ) , view , position ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { final LayoutInflater inflater = LayoutInflater . from ( parent . getContext ( ) ) ; return new ImportDataAdapter . ViewHolder ( inflater . inflate ( R . layout . item_imported_data , parent , false ) ) ; }
public MusicPlaybackTrack ( long id , long sourceId , Utils . IdType type , int sourcePosition ) { mId = id ; mSourceId = sourceId ; mSourceType = type ; mSourcePosition = sourcePosition ; }
public DetailViewHolder ( View view ) { super ( view ) ; detailTitle = view . findViewById ( R . id . layout_detail_title ) ; itemRecycleView = view . findViewById ( R . id . layout_item_recycler_view ) ; }
public void sortCats ( ) { Comparator < FeedCategory > cmp = new CatTitleComparator ( ) ; Collections . sort ( m_cats , cmp ) ; try { m_adapter . notifyDataSetChanged ( ) ; } catch ( NullPointerException e ) { } }
public void ViewBookInfo ( View v ) { Intent intent = new Intent ( this , BookViewActivity . class ) ; intent . putExtra ( EXTRA_MESSAGE , ReadBookID ) ; startActivity ( intent ) ; BookReadActivity . this . finish ( ) ; }
public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { return false ; }
public void onClick ( View view ) { mCharacterPresenter . getCharacter ( mCharacter . getId ( ) ) ; }
private void unregisterAllSensorEventListeners ( ) { List < Sensor > availableSensors = sensorManager . getSensorList ( Sensor . TYPE_ALL ) ; for ( Sensor sensor : availableSensors ) { unregisterSensorEventListener ( sensor . getType ( ) ) ; } }
private void onAudioPlaybackAyahChanged ( @ Nullable SuraAyah suraAyah ) { if ( suraAyah != null ) { ensurePage ( suraAyah . sura , suraAyah . ayah , true ) ; } }
private double cucmTopint ( double num ) { return num * 0 . 00211 ; }
public static EighthActivityItem [ ] parseAll ( InputStream in ) throws JSONException , ParseException { return parseAll ( Utils . inputStreamToJSON ( in ) ) ; }
public Object getItem ( int position ) { return mRealmTeacherHelper . getLesson ( position ) ; }
public int getAttackDamage ( ) { return UNIT_TANK_ATTACK_DAMAGE ; }
public void browserIsNotInitiallyInMultiSelectModeWithNoCards ( ) { CardBrowser browser = getBrowserWithNoCards ( ) ; assertThat ( browser . isInMultiSelectMode ( ) , is ( false ) ) ; }
public void onDestroy ( ) { try { ( ( ViewGroup ) getParent ( ) ) . removeView ( this ) ; } catch ( Exception e ) { } try { removeAllViews ( ) ; } catch ( Exception e ) { } destroy ( ) ; }
public static UserPostListingURL getLiked ( String username ) { return new UserPostListingURL ( Type . UPVOTED , username , null , null , null , null ) ; }
public void goRule ( View view ) { Intent newIntent = new Intent ( this , rulePage . class ) ; startActivity ( newIntent ) ; }
public void onClick ( View v ) { refreshListener . onRefresh ( ) ; }
private void next ( ) { step ++ ; switch ( step ) { case STEP_BROWSER_CLOSE_SIDEBAR : activity . contentView . closeDrawer ( activity . browserListView ) ; break ; default : break ; } }
public String getInputMethod ( ) { String method = preferences . getString ( PREF_INPUT_METHOD , ARRAY_INPUT_METHOD_VOICE ) ; if ( ARRAY_INPUT_METHODS . contains ( method ) ) { method = ARRAY_INPUT_METHOD_VOICE ; } return method ; }
private static String getDateString ( Date date ) { SimpleDateFormat sdf = new SimpleDateFormat ( JSON_DATE_FORMAT ) ; return sdf . format ( date ) ; }
public Task < ResultShellCommand > then ( @ NonNull Task < TransportService > task ) throws Exception { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_SHELL_COMMAND , Transport . RESULT_SHELL_COMMAND , requestShellCommandData ) ; }
public PostListingController . Sort getOrder ( ) { return null ; }
public void clearAnswer ( ) { deleteFile ( ) ; widgetValueChanged ( ) ; hideButtonsIfNeeded ( ) ; }
public void forceFinished ( ) { mFinished = true ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . mytestingapp" , appContext . getPackageName ( ) ) ; }
public void setCategoryId ( int categoryId ) { this . categoryId = categoryId ; }
public void onLocationChanged ( Location location ) { Timber . i ( "Location changed : %s" , location . toString ( ) ) ; if ( locationListener != null ) { locationListener . onLocationChanged ( LocationUtils . sanitizeAccuracy ( location ) ) ; } }
public NoticonTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . setTypeface ( TypefaceCache . getTypefaceForTypefaceName ( context , FONT_NAME ) ) ; }
public void SetUp ( ) { MockitoAnnotations . initMocks ( this ) ; mRenderer = new MatchRenderer ( mDatafeed ) ; mMatch = ModelMaker . getModel ( Match . class , mMatchKey ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , CC_bus . class ) ; startActivity ( inte ) ; }
private void changeAutoLaunchPrefs ( ) { boolean isChecked = binding . autoLaunchPrefs . isChecked ( ) ; binding . autoLaunchPrefs . setChecked ( ! isChecked ) ; mPrefs . setAutoLaunchEnabled ( ! isChecked ) ; }
private void enableIntentAnimation ( Intent intent ) { if ( animationDisabled ( ) ) { disableIntentAnimation ( intent ) ; } else { } }
public SuggestionAutoCompleteText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; }
private int [ ] getCrossCheckStateCount ( ) { clearCounts ( crossCheckStateCount ) ; return crossCheckStateCount ; }
public Aria2Helper ( @ NonNull AbstractClient client ) { this . client = client ; }
public void setSelected ( Enum < AppsType > selected ) { appsType = ( AppsType ) selected ; }
public PersonView ( PersonEntity person , Context context ) { super ( context ) ; this . person = person ; this . context = context ; init ( ) ; }
public void onAddViewListener ( ViewType viewType , int numberOfAddedViews ) { Log . d ( TAG , "onAddViewListener ( ) called with : viewType = [ " + viewType + " ] , numberOfAddedViews = [ " + numberOfAddedViews + " ] " ) ; }
public LayerDataAdapter ( LayerPresenter _presenter ) { super ( ) ; presenter = _presenter ; }
public LinkedList ( ) { pool = new ArrayStack ( ) ; head = new LinkedEntry ( ) ; tail = new LinkedEntry ( ) ; head . insertBefore ( tail ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return auth_SentCode . TLdeserialize ( stream , constructor , exception ) ; }
public int getTime ( ) { return time ; }
public double getHumidity ( ) { return humidity ; }
private void hideButtonsIfNeeded ( String appearance ) { if ( selfie || ( ( appearance != null && appearance . toLowerCase ( Locale . ENGLISH ) . contains ( WidgetAppearanceUtils . NEW ) ) ) ) { chooseButton . setVisibility ( View . GONE ) ; } }
public void onTextChanged ( CharSequence charSequence , int i , int i2 , int i3 ) { checkUserName ( nameTextView . getText ( ) . toString ( ) ) ; }
public void setLink ( MessageObject messageObject , boolean divider ) { needDivider = divider ; message = messageObject ; requestLayout ( ) ; }
private void sendUnsentMessages ( final Conversation conversation ) { conversation . findWaitingMessages ( new Conversation . OnMessageFound ( ) { @ Override public void onMessageFound ( Message message ) { resendMessage ( message ) ; } } ) ; }
public void onAccessibilityEvent ( AccessibilityEvent event ) { if ( event . getEventType ( ) == AccessibilityEvent . TYPE_VIEW_SCROLLED && transliterated ) { removeTransliteration ( ) ; } }
public Integer getFeeChargesCharged ( ) { return feeChargesCharged ; }
public static EditIngredientResult fromIngredientDetailResult ( int resultCode ) { switch ( resultCode ) { case IngredientDetailsActivity . RESULT_OK : return EDIT ; case IngredientDetailsActivity . RESULT_REMOVE : return REMOVE ; default : return UNKNOWN ; } }
public boolean getClassifieds ( ) { return classifieds ; }
public ChatActor ( ) { super ( null , Menu . skin ) ; setWidget ( listActor ) ; listActor . setGap ( 4f ) ; }
public void onAddSpace ( ) { mCommandEditor . runOp ( mCommandEditor . replaceSel ( " " ) ) ; }
private void notifySuccess ( final GitHubAccessToken gitHubAccessToken ) { if ( callback != null ) { callback . onSuccess ( gitHubAccessToken ) ; } }
public boolean isDisplayPastAssignments ( ) { SharedPreferences settings = getApplication ( ) . getSharedPreferences ( MOODLE_PREFS , Context . MODE_PRIVATE ) ; return settings . getBoolean ( DISPLAY_PAST_ASSIGNMENTS_PREF , false ) ; }
public int getItemCount ( ) { return recipeNames . size ( ) ; }
public void onConnecting ( ) throws RemoteException { updateConnectionState ( getService ( ) ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . app . whatsapptools" , appContext . getPackageName ( ) ) ; }
public void addTodoList ( String title ) { AddTodoListInteractor interactor = new AddTodoListInteractorImpl ( mExecutor , mMainThread , this , mPreviewRepository , title ) ; interactor . execute ( ) ; }
private void removeGeofences ( ) { mGeofencingClient . removeGeofences ( getGeofencePendingIntent ( ) ) ; }
public int getItemCount ( ) { return files . size ( ) + 1 ; }
public void shouldFindUserNameToDisplayPreferenceOnCreating ( ) { givenPreviousValue ( ) ; whenCreatingGeneralPreferenceFragment ( ) ; thenShouldBindPreference ( USER_NAME_TO_DISPLAY ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return ScheduleFragment . newInstance ( ) ; case 1 : return StreamingFragment . newInstance ( ) ; default : return WTBUFragment . newInstance ( ) ; } }
private EmailAddress generateEmail ( String domain ) { return new EmailAddress ( String . format ( "%s @ %s" , RandomStringUtils . randomAlphanumeric ( 8 ) , domain ) , null ) ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . Attachment parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public UserInterfacePage assertOnPage ( ) { checkIsStringDisplayed ( R . string . client ) ; return this ; }
public void didPressedReplyMessage ( ChatActionCell cell , int id ) { MessageObject messageObject = cell . getMessageObject ( ) ; scrollToMessageId ( id , messageObject . getId ( ) , true , messageObject . getDialogId ( ) == mergeDialogId ? 1 : 0 ) ; }
public void loadShippingOptions ( ) { shippings . add ( new Shipping ( 1 , "POS Indonesia" , 0 ) ) ; shippings . add ( new Shipping ( 2 , "COD" , 15000 ) ) ; this . presenter . onShippingOptionListResponse ( shippings ) ; }
private void showProgress ( ) { RelativeLayout relativeLayout = ( RelativeLayout ) findViewById ( R . id . removing_downloads_frame ) ; relativeLayout . setVisibility ( View . VISIBLE ) ; }
private boolean isExpiredException ( Throwable e ) { do { if ( e instanceof CertificateExpiredException ) return true ; e = e . getCause ( ) ; } while ( e != null ) ; return false ; }
public static void fadeInView ( View view ) { fadeInView ( view , ANIMATION_DURATION_SHORT ) ; }
public SubredditPostListURL sort ( PostSort newOrder ) { return new SubredditPostListURL ( type , subreddit , newOrder , limit , before , after ) ; }
public Version getApiVersion ( ) { return authenticator . getResource ( AccountProperty . VERSION , Version . class ) ; }
public String getSaveString ( ) { return name + "|" + nameEnglish + "|" + shortName + "|" + pathToFile ; }
private void fetchResourceCredit ( ) { showProgress ( ) ; webScrapper . scrapResourceCreditInfo ( username , this ) ; }
public void requestUpdate ( UUID serverUUID , Runnable callback ) { mUpdateThreadHandler . post ( ( ) -> { performUpdate ( serverUUID ) ; callback . run ( ) ; } ) ; }
public void handleGetTopicList ( RoutingContext routingContext ) { routingContext . response ( ) . setStatusCode ( NO_CONTENT . code ( ) ) . end ( ) ; }
public static MovieApiService getInstance ( ) { synchronized ( sLock ) { if ( sInstance == null ) { sInstance = getRetrofitInstance ( ) . create ( MovieApiService . class ) ; } return sInstance ; } }
public void write ( DataOutputStream dataOutputStream ) throws Exception { }
public void onPause ( ) { super . onPause ( ) ; if ( preview != null ) preview . disableView ( ) ; }
public void die ( NamedEntityKind cause ) { Ghost . Quest . process ( getPos ( ) ) ; super . die ( cause ) ; }
private void init24TimePrefs ( ) { binding . time24hourPrefs . setChecked ( mPrefs . is24HourFormatEnabled ( ) ) ; binding . time24hourPrefs . setOnClickListener ( view -> change24Prefs ( ) ) ; }
public AboutBuilder addUpdateAction ( String appId ) { return addAction ( R . mipmap . update , R . string . update_app , util . openPlayStoreAppPage ( appId ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putBoolean ( STATE_EAGER_LOAD , mEagerLoad ) ; outState . putBoolean ( STATE_LOADED , false ) ; mNewInstance = false ; }
private void onCancelClientDialog ( DialogInterface dialog , int which ) { loginProgress . setVisibility ( View . INVISIBLE ) ; loginButton . setVisibility ( View . VISIBLE ) ; }
public void queryExchangeRate_shouldBeGetMethod ( ) throws InterruptedException , TimeoutException { exchangeApi . queryExchangeRate ( Wallet . ARQ_SYMBOL , "EUR" , mockExchangeCallback ) ; RecordedRequest request = mockWebServer . takeRequest ( ) ; assertEquals ( "GET" , request . getMethod ( ) ) ; }
private static LocationRequest getLocationRequest ( ) { return new LocationRequest ( ) . setFastestInterval ( Constants . LOCATION_FASTEST_UPDATE_INTERVAL_MILLISECONDS ) . setInterval ( Constants . LOCATION_UPDATE_INTERVAL_MILLISECONDS ) . setPriority ( LOCATION_ACCURACY ) ; }
public File getBackupFile ( ) { return new File ( getFilesDir ( ) , "dailydozen_backup . csv" ) ; }
public void onConnectionClosed ( ) { reportConnectionLost ( ) ; if ( isConnectedFast ( ) ) openConnection ( mApplicationName ) ; else if ( needsConnection ( ) ) notifyNeedsConnection ( ) ; }
public Completable restore ( int accountId , int audioId , int ownerId ) { return networker . vkDefault ( accountId ) . audio ( ) . restore ( audioId , ownerId ) . toCompletable ( ) ; }
public Location getLocation ( ) throws RemoteException { return mLastKnownLocation ; }
public void onLoadFailed ( Exception e , Drawable errorDrawable ) { super . onLoadFailed ( e , errorDrawable ) ; update ( null , MaterialValueHelper . getSecondaryTextColor ( appContext , true ) ) ; }
public SnappyRecyclerView ( Context context ) { super ( context ) ; }
public String getTimeLeave ( ) { return oraPlecarii ; }
public static void d ( final String msg , Throwable tr ) { if ( IS_DEBUGGING_ON ) { Log . d ( mTAG , getMessage ( msg ) , tr ) ; saveToFile ( ) ; } }
public String getImageFileName ( ) { return imageFileName ; }
private void restartApp ( ) { startActivity ( new Intent ( getContext ( ) , SplashScreen . class ) ) ; getActivity ( ) . finish ( ) ; }
public Address getItem ( final int position ) { if ( position == addresses . size ( ) ) { return null ; } return addresses . get ( position ) ; }
public UserProfile ( JSONObject obj ) throws JSONException { this ( obj , null ) ; }
public void setShapeRenderer ( ShapeRenderer shapeRenderer ) { mShapeRenderer = shapeRenderer ; }
public String toString ( ) { return String . format ( "%1$s - %2$s" , id , name ) ; }
public void onResume ( ) { super . onResume ( ) ; checkLogoSetting ( ) ; checkAllExchangeTrendColors ( ) ; checkFirstRun ( ) ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { menuItem . setChecked ( true ) ; mItemToOpenWhenDrawerCloses = menuItem . getItemId ( ) ; mDrawerLayout . closeDrawers ( ) ; return true ; }
public String name ( ) { return getName_objective ( ) ; }
public void testDistrictTeamExtractor ( ) { DistrictTeam extracted = mExtractor . call ( mDistrictTeams ) ; assertNotNull ( extracted ) ; assertEquals ( extracted . getTeamKey ( ) , mSearchTeamKey ) ; }
public void onClick ( View view ) { askLogout ( ) ; }
public void onResume ( ) { if ( movieAdapter != null ) { movieAdapter . notifyDataSetChanged ( ) ; } super . onResume ( ) ; checkEmpty ( ) ; }
public LiveData < Resource < MovieAndTrailers >> apply ( Long movieId ) { return repository . loadMovie ( movieId ) ; }
public String getBeschreibung ( ) { return this . _beschreibung ; }
public void onFailure ( Call call , IOException e ) { handleException ( call , e , callback ) ; }
public void checkServerTrusted ( X509Certificate [ ] chain , String authType ) throws CertificateException { MemorizingTrustManager . this . checkCertTrusted ( chain , authType , true , false ) ; }
public void setHyperLinkMode ( ByteView . LINK_MODE hyperLinkMode ) { this . hyperLinkMode = hyperLinkMode ; }
public InterventionWorkingDay ( @ NonNull Integer intervention_id , @ NonNull Date execution_date , @ NonNull Integer hour_duration ) { this . intervention_id = intervention_id ; this . execution_date = execution_date ; this . hour_duration = hour_duration ; }
public AppDetail createFromParcel ( Parcel in ) { return new AppDetail ( in ) ; }
public String getUsername ( ) { return user . getValue ( ) . getUsername ( ) ; }
public void seekTo ( int position ) { AudioFragment audio = findAudioFragment ( ) ; if ( audio != null ) audio . seekPlayerTo ( position ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . base_menu , menu ) ; return ! TextUtils . isEmpty ( mPathToArticle ) ; }
public void onPositionUpdate ( float pos , boolean isLeaving ) { parentView . setVisibility ( pos == 1f && ! isLeaving ? View . INVISIBLE : View . VISIBLE ) ; scrollHalfVisibleItems = pos == 1f ; }
private void closeInteractiveShell ( ) { if ( rootMode ) { if ( SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR2 ) { handlerThread . quitSafely ( ) ; } else handlerThread . quit ( ) ; shellInteractive . close ( ) ; } }
public static void sessionCancel ( Context context , SharedPreferences preferences ) { updateCurrentlyRunningServiceType ( preferences , context , POMODORO ) ; stopTimer ( context ) ; sendBroadcast ( context ) ; }
public void onUpgrade ( final SQLiteDatabase db , final int oldVersion , final int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + SongPlayCountColumns . NAME ) ; onCreate ( db ) ; }
public final InsetView getStatusView ( ) { return findViewById ( R . id . status_frame ) ; }
public void show ( ) { mBottomPanel . startAnimation ( slideUp ) ; mTopPanel . startAnimation ( slideDown ) ; mIsVisible = true ; mPlayPauseBtn . requestFocus ( ) ; }
public void setCount ( ) { editor = pref . edit ( ) ; editor . putInt ( Config . KEY_COUNT , getCount ( ) + 1 ) ; editor . apply ( ) ; }
public void uncheckAll ( ) { mCheckedState . clear ( ) ; notifyDataSetChanged ( ) ; }
public void presentFragment ( SupportFragment fragment ) { presentFragment ( fragment , true ) ; }
private void allTasksCompleted ( ) { AppLog . i ( AppLog . T . READER , "reader service > all tasks completed" ) ; mCompletionListener . onCompleted ( ) ; }
public OstRule getEntityById ( String id ) { return ( OstRule ) super . getById ( id . toLowerCase ( ) ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { JobList . this . mJobActivityClass = JobList . this . typeToActivityClass ( whichButton ) ; }
public void testSafeToAddAuthToken9 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( wpcomAddress2 ) ) ) ; }
public void testEncodeSystem1 ( ) throws WriterException { doTest ( "12345670" , "0000000000010100100110111101010001101110010000101001000101010100000000000" ) ; }
public void onImageRotationFixed ( final String filePath , final boolean fileShouldBeDeleted , final int uid ) { mHandler . post ( new Runnable ( ) { @ Override public void run ( ) { startUploading ( filePath , fileShouldBeDeleted , uid ) ; } } ) ; }
public void clearCachedItem ( ) { ( ( SavedListsAdapter ) this . mRecyclerView . getAdapter ( ) ) . setCachedItem ( null ) ; }
private boolean hasViewPagerX ( ) { return mViewPagerX < - 1 || mViewPagerX > 1 ; }
public void onInitializationSuccess ( YouTubePlayer . Provider provider , YouTubePlayer youTubePlayer , boolean wasRestored ) { if ( ! wasRestored ) { youTubePlayer . cueVideo ( trailer . getKey ( ) ) ; } }
public void setBlock ( TLRPC . TL_pageBlockSubtitle block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
public void run ( ) { if ( MyDebug . LOG ) main_activity . updateForSettings ( "" , true ) ; Log . d ( TAG , "update settings due to video capture rate change" ) ; }
public void setImageUrl ( String imageUrl ) { this . imageUrl = StringUtils . notNullStr ( imageUrl ) ; }
public String onArgNotFound ( ExecutePack pack ) { MainPack info = ( MainPack ) pack ; return info . res . getString ( R . string . output_filenotfound ) ; }
public void run ( ) { progressButtonView . hideLoading ( ) ; Toast . makeText ( ViewWithTwoBackgroundsActivity . this , R . string . visibility_response , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onWeekTypeOptionChanged ( WeekTypeOption weekTypeOption ) { preferences . setWeekTypeOption ( weekTypeOption ) ; weekType = getWeekType ( weekTypeOption ) ; view . setSubtitle ( getSubtitle ( weekTypeOption ) ) ; showScheduleIfLoadingDone ( ) ; }
private int measureHeight ( int measureSpec ) { int size = getPaddingTop ( ) + getPaddingBottom ( ) ; size += CustomAnswerPercent . this . getRootView ( ) . getMeasuredHeight ( ) ; return resolveSizeAndState ( size , measureSpec , 0 ) ; }
public Collection ( Context context , DB db , String path , boolean server ) { this ( context , db , path , false , false ) ; }
public void onDrawerClosed ( View arg0 ) { }
public boolean getGruppe ( ) { return this . _gruppe ; }
public void onSuccess ( Object data ) { Log . d ( "SWELL" , String . format ( "Set up success : %s" , data . toString ( ) ) ) ; }
public void clickingCharacter ( MenuItem item ) { Intent intent = new Intent ( NavD . this , CharacterActivity . class ) ; startActivity ( intent ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { StatsController . getInstance ( ) . resetStats ( currentType ) ; listAdapter . notifyDataSetChanged ( ) ; }
public MiniDrawer withOnMiniDrawerItemOnClickListener ( FastAdapter . OnClickListener < IDrawerItem > onMiniDrawerItemOnClickListener ) { this . mOnMiniDrawerItemOnClickListener = onMiniDrawerItemOnClickListener ; return this ; }
public String getDate ( ) { int m = ( this . startDate . getMonth ( ) + 1 ) %13 ; return this . startDate . getYear ( ) + "/ " + m + "/ " + this . startDate . getDate ( ) ; }
public void boldButtonClicked ( View bold ) { AnimusMiscMethods . bold ( entryTextET ) ; }
public void onShow ( DialogInterface dialog ) { try { tintButtons ( getDialog ( ) ) ; } catch ( Exception e ) { Crashlytics . logException ( e ) ; } }
public boolean accept ( File _pathname ) { return _pathname . isDirectory ( ) ; }
public void setPresenter ( FriendsPresenter presenter ) { mPresenter = presenter ; }
public int getCursorPosition ( ) { if ( messsageEditText == null ) { return 0 ; } return messsageEditText . getSelectionStart ( ) ; }
public boolean dispatchTouchEvent ( MotionEvent ev ) { mGestureDetector . onTouchEvent ( ev ) ; return super . dispatchTouchEvent ( ev ) ; }
public void addSingleComment ( SteemCommentModel steemCommentModel ) { commentsList . add ( 0 , steemCommentModel ) ; notifyItemInserted ( 0 ) ; }
public synchronized void stop ( ) { if ( currentState == STATE_STOPPED ) { return ; } startTimeMilli = 0 ; currentState = STATE_STOPPED ; stopCountdownRunnable ( ) ; notifyStateChanged ( ) ; }
public BookmarkModel provideBookmarkMode ( ) { return new BookmarkDatabase ( mApp ) ; }
public double getShitRatingOverall ( ) { return getShitRatingOverall ( ) ; }
public void vibrateLong ( ) { if ( vibrationEnabled ) vibrator . vibrate ( VIBRATION_LENGTH_LOING ) ; }
private void enableOrDisableHardwareLayer ( ) { boolean useHardwareLayer = this . useHardwareLayer && lottieDrawable . isAnimating ( ) ; setLayerType ( useHardwareLayer ? LAYER_TYPE_HARDWARE : LAYER_TYPE_NONE , null ) ; }
public void showFavorite ( Boolean favourite ) { if ( favourite ) { menuItem . setIcon ( R . drawable . ic_bookmark_ribbon ) ; } else { menuItem . setIcon ( R . drawable . ic_bookmark_outline ) ; } }
public void bind ( ViewHolder holder , DummyTwo item ) { }
private void whenPopulatingTheTemperatureViews ( WeatherInfo weatherInfo ) { uut . populateTemperatureViews ( mModelViewHolder , weatherInfo ) ; }
public com . google . protobuf . Parser < TransactionInput > getParserForType ( ) { return PARSER ; }
public void setStatus ( short status ) { Status = status ; }
public final String [ ] getValuePaths ( ) { return new String [ ] { ZERO_FIELD , ONE_FIELD , ALTERNATE_FIELD } ; }
public PagerViewHolder ( @ NonNull View itemView ) { super ( itemView ) ; mRoot = itemView ; ButterKnife . bind ( this , itemView ) ; }
public < D extends Page < D >> D clickOnDoNotAdd ( D destination ) { clickOnString ( R . string . dont_add_repeat ) ; return destination ; }
public void onDetach ( ) { super . onDetach ( ) ; mListener = null ; if ( getActivity ( ) instanceof BookCardEventListener ) ( ( BookCardEventListener ) getActivity ( ) ) . unRegisterListener ( this ) ; }
public void usingReaDOnly_shouldHideBarcodeButton ( ) { assertThat ( createWidget ( promptWithReadOnly ( ) ) . binding . getBarcodeButton . getVisibility ( ) , is ( View . GONE ) ) ; }
public void run ( ) { MessagesController . getInstance ( ) . getDifference ( ) ; }
public static Snackbar showSnackbar ( View view , String message , boolean indefinite ) { return showSnackbar ( view , message , false , null ) ; }
public void setOnFrameCapturedListener ( OnFrameCapturedListener onFrameCapturedListener ) { mMjpegView . setOnFrameCapturedListener ( onFrameCapturedListener ) ; }
public void onClick ( DialogInterface dialog , int which ) { WordService . deleteWord ( wordActivity , word ) ; words . remove ( word ) ; filteredWords . remove ( word ) ; notifyDataSetChanged ( ) ; }
public void onRestaurantsFetched ( List < Restaurant > places ) { }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "inline_images" , checked ) . apply ( ) ; }
private double mgToton ( double num ) { return num * 1E - 9 ; }
public View activeTextView ( ) { if ( exchangeDirection ) return coinAmountView . getTextView ( ) ; else return localAmountView . getTextView ( ) ; }
public void onImageAvailable ( ImageReader reader ) { if ( cameraCallback != null ) { cameraCallback . onPicture ( imageReader ) ; } }
public void onSuccess ( ) { feedbackAboutSettingsChange ( Settings . useOfflineMapAPI ( true ) ) ; update ( ) ; new Dialog ( SettingsActivity . this ) . alertSuccess ( R . string . success_offline_data_was_downloaded ) ; }
public void setHeight ( String height ) { this . height = height ; }
public void getPin ( String workflowId , OstWorkflowContext ostWorkflowContext , String userId , OstPinAcceptInterface ostPinAcceptInterface ) { showProgress ( false ) ; showGetPinFragment ( ostPinAcceptInterface ) ; }
public int getAccentColor ( ) { return getAttributeValue ( R . attr . colorAccent ) ; }
public void setAddtionalSubtitle ( String additionalSubtitle ) { mAdditionalSubtitleView . setText ( additionalSubtitle ) ; }
public void run ( ) { registration . listener . onTransactionBroadcastSuccess ( TransactionWatcherWallet . this , new BitTransaction ( tx ) ) ; }
private BlurTransformation ( Builder builder ) { super ( builder . context ) ; init ( builder ) ; }
public void onStartVisitResponse ( long id ) { mPatientVisitsView . goToVisitDashboard ( id ) ; mPatientVisitsView . dismissStartVisitDialog ( ) ; }
public void onMapClicked ( ) { eventsSubject . onNext ( new Events . GetEtdEvent ( ClickedItemType . MAP ) ) ; }
public void setFavorite ( Boolean favorite ) { this . favorite = favorite ; }
public void setMessageRcvdTime ( Date messageRcvdTime ) { this . messageRcvdTime = messageRcvdTime ; }
public boolean attachTo ( Char target ) { if ( super . attachTo ( target ) ) { target . getBelongings ( ) . discharge ( ) ; return true ; } else { return false ; } }
private boolean hasPendingKeyFetches ( ) { return mAccount != null && mAccount . getAxolotlService ( ) . hasPendingKeyFetches ( mAccount , contactJids ) ; }
public void writeToParcel ( Parcel parcel , int i ) { parcel . writeFloat ( quantity ) ; parcel . writeString ( measure ) ; parcel . writeString ( ingredient ) ; }
public void run ( ) { try { bluetoothAdapter . enable ( ) ; } catch ( RuntimeException e ) { EventBus . getDefault ( ) . post ( new UiToastEvent ( getString ( R . string . text_no_bluetooth_permission ) ) ) ; finish ( ) ; } }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = this . getMenuInflater ( ) ; inflater . inflate ( R . menu . calculations_points_list_context_menu , menu ) ; }
public void profileView ( String profileId ) { Intent intent = new Intent ( getActivity ( ) , DataViewerActivity . class ) ; intent . putExtra ( Arguments . ARG_PROFILE , profileId ) ; startActivity ( intent ) ; }
public void updateGraticule ( @ Nullable Graticule g ) { outlineGraticule ( g ) ; removeDestinationPoint ( ) ; requestStock ( g , mCalendar , StockService . FLAG_USER_INITIATED | StockService . FLAG_SELECT_A_GRATICULE ) ; }
public void getScheduleOfTeacher ( int teacherId , RequestListener < TeacherSchedule > listener ) { spiceManager . execute ( new ScheduleOfTeacherRequest ( teacherId ) , "getScheduleOfTeacher ( " + teacherId + " ) " , CACHE_EXPIRY_DURATION , listener ) ; }
public boolean isBlocked ( final Jid jid ) { return jid != null && blocklist . contains ( jid . toBareJid ( ) ) ; }
public int getFreeSpace ( ) { return freeSpace ; }
public static String getMiddlePassHash ( ) { return getString ( R . string . pref_key_pass_hash , null ) ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { MenuUtils . selectDrawerItem ( menuItem , mDrawer , BaseActivity . this ) ; return true ; }
public List < RecipeTable > getDbRecipeTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getRecipeTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public void onClick ( View v ) { Core . hideKeyboard ( getContext ( ) , getView ( ) . getWindowToken ( ) ) ; getActivity ( ) . onBackPressed ( ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . COSH ) ; }
public void setMembers ( String [ ] members ) { mMembers = members ; }
public void testIndexOfIgnoreCase1 ( ) { assertEquals ( 1 , StrUtil . indexOfIgnoreCase ( text , search ) ) ; }
public EmptyViewObserver ( RecyclerView recyclerView , View emptyView ) { this ( recyclerView , emptyView , new AdapterConsolidator ( recyclerView . getAdapter ( ) ) ) ; }
public FragmentModule ( @ NonNull AddIngredientFragment fragment , @ Nullable Bundle savedState ) { this . fragment = fragment ; this . savedState = savedState ; }
public Builder setMaxScale ( @ FloatRange ( from = 0 . 01 ) float scale ) { transformer . maxMinDiff = scale ; return this ; }
public void setMinDelay ( int minDelay ) { this . minDelay = minDelay ; }
public boolean isAnswered ( ) { return answered ; }
public LeagueAdapter ( ArrayList < LeagueTeam > lg ) { this . mLeagueTeams = lg ; }
public void setApparentTemperatureMinTime ( Double apparentTemperatureMinTime ) { this . apparentTemperatureMinTime = apparentTemperatureMinTime ; }
public List < AuthorTable > getDbAuthorTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getAuthorTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public String getStringAddress ( ) { return "bitcoin : " + getWalletAddress ( ) ; }
public ActionRequestChooseAccount ( int siteId , String serviceId , JSONObject jsonObject ) { mSiteId = siteId ; mServiceId = serviceId ; mJSONObject = jsonObject ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mCategory = ( Category ) getArguments ( ) . getSerializable ( ARG_CATEGORY ) ; mCategoryDeleteListener = ( CategoryDeleteListener ) getTargetFragment ( ) ; }
public void onSuccess ( Void aVoid ) { Intent mainIntent = new Intent ( SetupActivity . this , MainActivity . class ) ; startActivity ( mainIntent ) ; finish ( ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( TAG , String . format ( "Pair failed ( %d ) : %s" , errorCode , msg ) ) ; callback . onFail ( errorCode , msg ) ; }
public static void setLong ( Context context , String code , @ StringRes int keyId , long value ) { String key = String . format ( "%s_%s" , code , getKey ( context , keyId ) ) ; setLong ( context , key , value ) ; }
public void restoreInstanceState ( Bundle savedInstanceState ) { super . restoreInstanceState ( savedInstanceState ) ; choiceSpinner . setSelection ( savedInstanceState . getInt ( "choice" ) ) ; }
public void removeFromGame ( ) { view . setVisibility ( View . GONE ) ; isInvisible = true ; moveToStack ( this , currentGame . offScreenStack ) ; }
public LanguageChooser ( ) { mLocaleList = BuildLocalePriorityList ( LocaleListCompat . getAdjustedDefault ( ) ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `collapsed` INTEGER NOT NULL DEFAULT 0" ) ; }
public ProgressCountdownView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( listDecoration != null ) { listDecoration . invalidateLayouts ( ) ; } }
public void onBindViewHolder ( PreferenceViewHolder view ) { super . onBindViewHolder ( view ) ; this . rightSummary = ( TextView ) view . findViewById ( R . id . right_summary ) ; setSummary ( summary ) ; }
private void setTextAndMetadataToService ( ) { Log . v ( TAG , "setTextAndMetadataToService ( ) " ) ; if ( ttsService != null ) { ttsService . setTextInterface ( webViewText , artist , title , METADATA_ALBUM ) ; } }
public static boolean isPayloadEncryptionEnabled ( ) { return enabled ; }
public void onClick ( View v ) { mCompleteDialog . dismiss ( ) ; setResult ( Constants . RssultCode . SEND ) ; finish ( ) ; }
public AbstractCommandResponse ( @ NonNull Response response , boolean isUndoAvailable ) { this . response = response ; undoAvailability = new UndoAvailability ( isUndoAvailable ) ; }
public StringHolder getEmail ( ) { return email ; }
private void restoreScrollOffsetDelayed ( int delay ) { webView . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { restoreScrollOffset ( ) ; } } , delay ) ; }
private void whenCreatingFromParcel ( ) { forecastCreated = uut . createFromParcel ( someParcel ) ; someParcel . recycle ( ) ; }
private void rotateScreenAndCheckIt ( ) { mActivity . setRequestedOrientation ( ActivityInfo . SCREEN_ORIENTATION_LANDSCAPE ) ; Assert . assertEquals ( mActivity . getRequestedOrientation ( ) , ActivityInfo . SCREEN_ORIENTATION_LANDSCAPE ) ; }
public void visible ( RecipeCreationDialogView view ) { authorsPresenter . visible ( view . getAuthorsView ( ) ) ; categoriesPresenter . visible ( view . getCategoriesView ( ) ) ; }
public static ICommunitiesInteractor createCommunitiesInteractor ( ) { return new CommunitiesInteractor ( Injection . provideNetworkInterfaces ( ) , Injection . provideRepositories ( ) ) ; }
public void onItemClicked ( ) { if ( autoAdvance && listener != null ) { listener . advance ( ) ; } onClearNextLevelsOfCascadingSelect ( ) ; widgetValueChanged ( ) ; }
public void setInstrumentName ( String worldName ) { this . instrumentName = worldName ; }
public static boolean deleteConnection ( int connectionId ) { String args [ ] = { Integer . toString ( connectionId ) } ; int numDeleted = getReadableDb ( ) . delete ( CONNECTIONS_TABLE , "id = ?" , args ) ; return numDeleted > 0 ; }
public WeightDao dao ( ) { return session ( ) . getWeightDao ( ) ; }
public void reloadAdapter ( ) { mSubjectList . swapAdapter ( new SubjectAdapter ( this ) , false ) ; }
public boolean verifyTimestamp ( long timestamp ) { return true ; }
public static SpannableString span ( Context context , int size , String text ) { return span ( context , text , Integer . MAX_VALUE , size ) ; }
public AssetsUtil ( ) { }
public String getTime ( ) { return time ; }
public void makeTransfer ( ) { AnswersProxy . get ( ) . logButton ( "Add Transfer" ) ; startActivityForResult ( new Intent ( AccountsActivity . this , TransferActivity . class ) , REQUEST_TRANSFER ) ; }
public void setModeOnlyMonthView ( ) { mCalendarShowMode = CALENDAR_SHOW_MODE_ONLY_MONTH_VIEW ; }
public IPresenterFactory < FeedbackPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new FeedbackPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , saveInstanceState ) ; }
public void whenAutocompleteAppearanceExist_shouldKeyboardBeDisplayed ( ) { when ( formEntryPrompt . getAppearanceHint ( ) ) . thenReturn ( "autocomplete" ) ; SelectOneWidget widget = getSpyWidget ( ) ; verify ( widget . softKeyboardUtils ) . showSoftKeyboard ( widget . binding . choicesSearchBox ) ; }
private double carratToounce ( double num ) { return num * 0 . 00705 ; }
public SettingsProvider providesSettingsProvider ( Context context ) { return new SettingsProvider ( context ) ; }
public DownloadBookInfo ( OnDownloadComplete listener ) { this . listener = listener ; }
public void onCancel ( DialogInterface dialog ) { end ( ) ; }
public void onResume ( ) { super . onResume ( ) ; loadStats ( ) ; loadLogs ( ) ; loadLocationLogs ( ) ; }
private void initializeDictionaryRoot ( final String fileName ) throws DictionaryException { dictionaryRoot = DictionaryDataFile . pathNameDataFiles + File . separator ; boolean isRootInSubDirectory = fileExists ( fileName ) ; if ( ! isRootInSubDirectory ) { dictionaryRoot = "" ; } }
public void refreshCards ( Map < String , TwitterCard > cards ) { if ( cards . size ( ) == 0 ) { this . cards = cards ; } else { cards . putAll ( cards ) ; } cardsLoaded = true ; }
public PickSetup setPickTypes ( EPickTypes . . . pickTypes ) { this . pickTypes = pickTypes ; return this ; }
public PingResult doPing ( ) throws UnknownHostException { cancelled = false ; resolveAddressString ( ) ; return PingTools . doPing ( address , timeOutMillis ) ; }
public void clearDefaultImagesDirectory ( ) { perInstallationPrefs . edit ( ) . remove ( Constants . PREF_DEFAULT_IMAGES_DIR ) . apply ( ) ; }
public void fitScreen ( ) { Matrix save = mViewPortHandler . fitScreen ( ) ; mViewPortHandler . refresh ( save , this , false ) ; calculateOffsets ( ) ; postInvalidate ( ) ; }
public boolean isSaveResume ( ) { return saveResume > 0 ; }
private void log ( String message ) { Log . i ( TAG , message ) ; }
public AppointmentFragmentList getAppsFragment ( ) { if ( appsFragment == null ) appsFragment = new AppointmentFragmentList ( ) ; return appsFragment ; }
public DistrictRankingsSubscriber provideDistrictRankingsSubscriber ( Database db ) { return Mockito . mock ( DistrictRankingsSubscriber . class ) ; }
public void clearSuggestions ( ) { if ( suggestionsVisible ) animateLastRequests ( getListHeight ( false ) , 0 ) ; adapter . clearSuggestions ( ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int pos , long id ) { String selected = parent . getItemAtPosition ( pos ) . toString ( ) ; mPreferences . setConnectionPreference ( converseToPreference ( selected , this ) ) ; }
public void take ( double amount ) { double sum = curSum + decimals / 100 . 0 ; sum -= amount ; curSum = getInteger ( sum ) ; decimals = getDecimal ( sum ) ; }
public void onAdFailedToLoad ( int i ) { Log . d ( "Banner Ad Test" , "Add Loading Failed" ) ; }
public void didSetRights ( int rights , TLRPC . TL_chatAdminRights rightsAdmin , TLRPC . TL_chatBannedRights rightsBanned ) { removeSelfFromStack ( ) ; }
public void update ( final String fiatCode , final String prefUnit , final boolean displayAmountAsFiat ) { update ( this . payments , fiatCode , prefUnit , displayAmountAsFiat ) ; }
public void onRefresh ( ) { posts . loadMore ( adapter , "all" , "url : " + url , true ) ; }
public void person_isValid ( ) throws Exception { URLBuilder builder = new URLBuilder ( appContext ) ; String result = builder . buildFromPerson ( "Nicole Kidman" ) ; assertEquals ( result , "https : }
private void notifyPaletteListeners ( int color ) { for ( final PaletteListener listener : mPlaletteListeners ) { if ( listener != null ) { listener . onPaletteReady ( color ) ; } } }
private void preparePopuPosition ( View popup , Rect selectionRect ) { preparePopuPosition ( popup , selectionRect . left , selectionRect . bottom , selectionRect . top , selectionRect . right , 0 ) ; }
public boolean isWritePermissionsRequiredForLibrary ( Library library ) { return storageWritePermissionsRequirementsProvider . isWritePermissionsRequiredForLibrary ( library ) && ! storageWritePermissionArbitratorForOs . isWritePermissionGranted ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . account_list_fragment , null ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . patients , menu ) ; return true ; }
public void onResume ( ) { super . onResume ( ) ; LaunchPadFlightControllerActivity activity = ( ( LaunchPadFlightControllerActivity ) getActivity ( ) ) ; if ( activity != null && activity . mChatService != null ) updateButton ( ) ; }
public Kd2DatabaseHelper ( Context context ) { super ( context , String . format ( "%s/%s" , context . getExternalFilesDir ( null ) . getAbsolutePath ( ) , DATABASE_NAME ) , null , DATABASE_VERSION ) ; mContext = context ; }
private void abrirResultado ( Avaliacao avaliacao ) { Intent intentResultado = new Intent ( SensorsActivity . this , ResultadoActivity . class ) ; intentResultado . putExtra ( "avaliação" , avaliacao ) ; startActivity ( intentResultado ) ; finish ( ) ; }
public Flowable < List < UploadObject >> observeAdding ( ) { return addingProcessor . onBackpressureBuffer ( ) ; }
public Intent getIntent ( ) { return intent ; }
public void closeDb ( ) throws Exception { mDatabase . close ( ) ; }
public Long get_config ( @ NonNull String key , @ Nullable Long defaultValue ) { if ( ! mConf . has ( key ) ) { return defaultValue ; } return mConf . getLong ( key ) ; }
public void animateColorChange ( int newColor ) { super . animateColorChange ( newColor ) ; fragment . slidingUpPanelLayout . setBackgroundColor ( fragment . lastColor ) ; createDefaultColorChangeAnimatorSet ( fragment , newColor ) . start ( ) ; }
private void changeTeam ( int teamNumber ) { mSearchTeamView . setText ( String . valueOf ( teamNumber ) ) ; mTeamsLocationsMapPresenter . loadTeam ( teamNumber ) ; }
public void onClick ( String selected_option ) { if ( preview . getCameraController ( ) != null ) { preview . getCameraController ( ) . setColorEffect ( selected_option ) ; } }
public void onServiceDisconnected ( ComponentName name ) { Log . d ( TAG , "Service " + name . getShortClassName ( ) + " connected to " + TAG ) ; dismissProgressDialog ( ) ; }
public void getDisplayWidth ( ) throws Exception { assertThat ( OverlayViewManager . getDisplayWidth ( ) , is ( uiDevice . getDisplayWidth ( ) ) ) ; }
public StdItemQuery ( ) { this ( true ) ; }
public static void init ( ) { Themes . theme = App . getInstance ( ) . getSettings ( ) . getTheme ( ) ; }
public wallet_list_create ( Activity a , ArrayList b , ArrayList bod ) { activity = a ; this . title = b ; this . notice = bod ; inflater = ( LayoutInflater ) activity . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public static OffsetDateTime toOffsetDateTime ( String sqlValue ) { if ( sqlValue == null ) { return null ; } else { return OffsetDateTime . parse ( sqlValue , OFFSET_FORMATTER ) ; } }
private static String getDetailFromAnswer ( Question question , int responseIndex ) { return responseIndex != - 1 ? question . getRaspunsuriIntrebare ( ) . get ( responseIndex ) . getValue ( ) : "" ; }
public int getItemCount ( ) { return encryptionDataList . size ( ) ; }
public static MaterialAboutTitleItem createAppTitleItem ( String appName , Drawable applicationIcon ) { return new MaterialAboutTitleItem ( appName , applicationIcon ) ; }
public Iterator < T > listIterator ( ) { return mQueue . listIterator ( ) ; }
public void onBackPressed ( ) { if ( isDrawerOpen ( ) ) { Timber . i ( "Back key pressed" ) ; mDrawer . closeDrawer ( ) ; } else { super . onBackPressed ( ) ; } }
public RRGLRenderableBlend ( RRGLRenderable entity ) { super ( entity ) ; }
public URL getURL ( ) { return null ; }
public View getView ( Activity activity ) { return activity . findViewById ( R . id . bowmenu_left ) ; }
public static boolean isIPv4Address ( final String address ) { return IPV4_PATTERN . matcher ( address ) . matches ( ) ; }
public void parseTwitchUrl ( ) { Video video = new Video ( "https : assertTrue ( video . isFromTwitch ( ) ) ; assertEquals ( "v311439528" , video . getId ( ) ) ; }
public void testRenderAlliancesWithList ( ) { List < ListItem > elements = new ArrayList <> ( ) ; mRenderer . renderAlliances ( mAlliances , elements , null ) ; assertAllianceList ( elements ) ; }
private PendingIntent getBasicCommandIntent ( int command ) { return PendingIntent . getService ( this , command , new Intent ( this , WikiService . class ) . putExtra ( QueueService . COMMAND_EXTRA , command ) , 0 ) ; }
public void notifyGroupItemMoved ( int fromGroupPosition , int toGroupPosition ) { mAdapter . notifyGroupItemMoved ( fromGroupPosition , toGroupPosition ) ; }
public WeekViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public void onBindKavaMyPool ( Context context , BaseActivity activity , BaseData baseData , SwapPool myPool , SwapDeposit mySwapDeposit ) { }
public Long getIngredientTypeId ( ) { return ingredientTypeId ; }
public static Array < GameInputHandlerFactory > getAvailableFactories ( ) { init ( ) ; return mFactories ; }
public Item quickSlotContent ( ) { if ( ! stackable ) { return this ; } if ( quantity ( ) > 0 ) { return this ; } return ItemFactory . virtual ( getEntityKind ( ) ) ; }
public void onWebViewReceivedError ( ) { mViewModel . onError ( ) ; }
private boolean saveToMemory ( ) { return savePost ( false , true , null ) ; }
public int getItemCount ( ) { return mElements . length ; }
public KnownHostsAdapter ( Context context , int viewResourceId , List < String > mKnownHosts ) { super ( context , viewResourceId , new ArrayList <> ( ) ) ; domains = new ArrayList <> ( mKnownHosts ) ; }
public Integer getOrderID ( ) { return orderID ; }
public com . coinomi . core . protos . Protos . Key . Builder getMasterKeyBuilder ( ) { bitField0_ | = 0x00000004 ; onChanged ( ) ; return getMasterKeyFieldBuilder ( ) . getBuilder ( ) ; }
public void afterTextChanged ( Editable s ) { calculateCharactersRemaining ( ) ; if ( composeText . getTextTrimmed ( ) . length ( ) == 0 || beforeLength == 0 ) { composeText . postDelayed ( ConversationActivity . this : : updateToggleButtonState , 50 ) ; } }
public void onFollowStateChanged ( ) { followingsFragment . refreshData ( ) ; followCountManager . requestFollowInfo ( mUsername ) ; }
public void onValueChangedUp ( int value ) { mFileAudioPlayer . seekTo ( value ) ; }
public void technologyCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "technology" ) ; }
public void onPageScrollStateChanged ( int state ) { for ( WelcomeScreenPage page : this ) { page . onPageScrollStateChanged ( state ) ; } }
public void onClick ( View v ) { PointsImporterDialog . this . performImportAction ( ) ; }
public static String getHyphenatedDateString ( Calendar c ) { return HYPHENATED_DATE_FORMAT . format ( c . getTime ( ) ) ; }
public void testTeamListWriter ( ) { mWriter . write ( mTeam , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_TEAMS , null , mTeam . getParams ( ) ) ; }
public boolean attachTo ( Char target ) { if ( super . attachTo ( target ) ) { target . invisible ++ ; return true ; } else { return false ; } }
public boolean onTouch ( View v , MotionEvent event ) { if ( mModeMouse ) { return mKegsTouch . onTouchEvent ( event ) ; } else { return mJoystick . onTouchEvent ( event ) ; } }
public void onResponse ( ProgramInfoDto response ) { setRecTimer ( response . getTimerId ( ) ) ; }
public void d ( String tag , String message , Object . . . args ) { HyperLog . d ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public KeyBinding getKeyBinding ( ) { return context . getEditor ( ) . getKeyBindings ( ) . get ( "export_eclipse_project" ) ; }
private void searchForDepictions ( String query ) { presenter . searchForDepictions ( query ) ; }
public void run ( ) { tv . append ( "\n" + message ) ; }
public void call ( MenuListActivity activity ) { activity . startActivity ( new Intent ( activity , AboutActivity . class ) ) ; }
public JsonElement GET ( String endpoint ) throws IOException { HttpURLConnection connector = this . connectToServer ( "GET" , endpoint ) ; JsonElement payload = this . getPayloadFromServer ( connector ) ; return payload ; }
public static RecipesState makeErrorState ( ) { return new RecipesState ( new ArrayList <> ( 0 ) , false , true ) ; }
public String getTabletWidthParam ( ) { return "_" + pageProvider . getTabletWidthParameter ( ) ; }
public < E > void notifyAndRegisterListener ( final PropertyChangedListener < E > listener ) { notifyListener ( listener ) ; registerListener ( listener ) ; }
public void STR ( int sTR ) { STR = Scrambler . scramble ( sTR ) ; }
public GeneralSettingsPage setAdminPassword ( String password ) { scrollToRecyclerViewItemAndClickText ( R . string . set_admin_password ) ; inputText ( password ) ; clickOKOnDialog ( ) ; return this ; }
public void selectClusters ( Set < LocationClusterItem > clusterItems ) { renderer . selectItems ( clusterItems ) ; algorithm . setSelectedItems ( clusterItems ) ; cluster ( ) ; }
public Double getLatitude ( ) { return latitude ; }
public void setResourceCreditPercentage ( String resourceCreditPercentage ) { this . resourceCreditPercentage = resourceCreditPercentage ; }
public static boolean clearTrashFolder ( ) { File trashDir = new File ( SettingsManager . getTrashPath ( ) ) ; TetroidClipboard . clear ( ) ; return FileUtils . clearDir ( trashDir ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . new_item , menu ) ; return true ; }
public void uploadAppImageTest ( ) { File file = null ; Integer id = null ; }
public void onBackPressed ( ) { if ( mDrawerLayout . isDrawerOpen ( Gravity . LEFT ) ) { mDrawerLayout . closeDrawer ( Gravity . LEFT ) ; } else { backToMain ( ) ; } }
public void setVolumeKeyEvent ( VolumeKeyEvent volumeKeyEvent ) { VolumeKeyManager . getInstance ( this . mContext , VolumeKeyNative . TYPE , true ) . setVolumeKeyEvent ( volumeKeyEvent ) ; }
private void ensurePublicKeysIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { publicKeys_ = new java . util . ArrayList < com . google . protobuf . Any > ( publicKeys_ ) ; bitField0_ | = 0x00000001 ; } }
public LiveData < List < PinnableCalendarEvent >> getEventsBeforeDate ( @ NonNull DataSource dataSource , @ NonNull Date lastDate ) { return calendarDao . getEventsBeforeDate ( singletonList ( dataSource ) , lastDate ) ; }
public List < Lesson > getFilteredTeachers ( ) { return mFilteredTeachers ; }
public void enqueue ( String body ) { enqueue ( new MockResponse ( ) . setBody ( body ) ) ; }
public boolean hideSavingProgressDialog ( ) { if ( mSavingContentProgressDialog != null && mSavingContentProgressDialog . isShowing ( ) ) { mSavingContentProgressDialog . dismiss ( ) ; return true ; } return false ; }
public UndoTaskListener ( boolean isReview , DeckPicker deckPicker ) { super ( deckPicker ) ; this . mIsreview = isReview ; }
public SourceBusinessModel convert ( ) { return new SourceBusinessModel ( getId ( ) , getName ( ) , getTitle ( ) , getTitleShort ( ) , isEnabled ( ) , getOrder ( ) ) ; }
public View getFromView ( ) { return mFromView ; }
public SecretaryFragment ( ) { }
public void insertScore ( int score ) { SQLiteDatabase db = this . getWritableDatabase ( ) ; ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "Score" , score ) ; db . insert ( "Ranking" , null , contentValues ) ; }
public void addGroup ( int position , ListGroup group ) { groups . add ( position , group ) ; }
public LocationRequest buildLocationRequest ( ) { LocationRequest locationRequest = new LocationRequest ( ) . setPriority ( LocationRequest . PRIORITY_HIGH_ACCURACY ) . setInterval ( 4000 ) . setFastestInterval ( 4000 ) . setSmallestDisplacement ( 5 ) ; return locationRequest ; }
public void setPhoneNumber ( @ Nullable String phoneNumber ) { mPhoneNumber = phoneNumber ; }
public synchronized byte [ ] renewLicense ( byte [ ] offlineLicenseKeySetId ) throws DrmSessionException { Assertions . checkNotNull ( offlineLicenseKeySetId ) ; return blockingKeyRequest ( DefaultDrmSessionManager . MODE_DOWNLOAD , offlineLicenseKeySetId , null ) ; }
public NdefMessage createNdefMessage ( NfcEvent event ) { if ( shareUrl != null ) return new NdefMessage ( new NdefRecord [ ] { NdefRecord . createUri ( shareUrl ) } ) ; return null ; }
public void onClick ( View arg0 ) { confirmAccountSelection ( ) ; }
public Fragment getItem ( int position ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( LeaderboardFragment . RUN_TYPE_KEY , runTypes [ position ] ) ; LeaderboardFragment leaderboardFragment = new LeaderboardFragment ( ) ; leaderboardFragment . setArguments ( bundle ) ; return leaderboardFragment ; }
public void setPhotoTag ( @ Nullable final String photoTag ) { this . photoTag = photoTag ; }
public void afterTextChanged ( Editable target ) { afterTextViewChanged ( ( TextView ) target , USER_NAME ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitNumericAssign ( this ) ; else return visitor . visitChildren ( this ) ; }
public static LottieComposition fromJsonSync ( String json ) { return LottieCompositionFactory . fromJsonStringSync ( json ) . getValue ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { Toast . makeText ( MainActivity . this , "설정을 취소했습니다 . " , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { if ( this . recyclerView != null && items instanceof ObservableList ) { ( ( ObservableList < T > ) items ) . removeOnListChangedCallback ( callback ) ; } this . recyclerView = null ; }
public void testMp3 ( ) { String html = " < td >< a href = \"/speak - de/0/7/52qA5FttGIU . mp3\" > Mit Ihrem" ; String mp3 = BeolingusParser . getMp3AddressFromPronounciation ( html ) ; assertEquals ( "http : }
public AppSettingsBase setString ( String key , String value ) { setString ( key , value , _prefApp ) ; return this ; }
public void onCancelled ( DatabaseError databaseError ) { Log . d ( TAG , "Not admin" ) ; }
public void setSdcardPermissionsDialogPresented ( ) { mPerInstallationPrefs . edit ( ) . putBoolean ( Constants . PREF_DID_PRESENT_PERMISSIONS_DIALOG , true ) . apply ( ) ; }
public Etudiant Func ( ) throws java . lang . Exception { return infoEtudiant ( codeAccesUniversel , motPasse ) ; }
public void onNextSongClick ( ) { mPlayer . skipToNext ( ) ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; getActionBar ( ) . setTitle ( "DL Table" ) ; rowCreator ( ) ; }
private void hideLoadingCircle ( ) { circleLoad . stopSpinning ( ) ; circleLoad . setVisibility ( View . GONE ) ; }
public ImageProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public String getLanguageBook ( ) { return languageBook ; }
public final String transformUrl ( final Matcher match , String url ) { String klassenavn = match . group ( 1 ) ; return "http : }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , HealthActivity . class ) ; startActivity ( i ) ; }
private int getWeatherIcon ( String weatherStatus ) { int weatherIconId = 0 ; weatherIconId = weatherIconsList . get ( weatherStatus ) ; if ( weatherIconsList . get ( weatherStatus ) == null ) { weatherIconId = weatherIconsList . get ( "sky is clear" ) ; } return weatherIconId ; }
public void onDrawerClosed ( View drawerView ) { super . onDrawerClosed ( drawerView ) ; togglePodcastVideoViewAnimation ( ) ; syncState ( ) ; EventBus . getDefault ( ) . post ( new FeedPanelSlideEvent ( false ) ) ; }
public Measure ( Point _point ) { this ( _point , 0 . 0 ) ; }
public void setResolution ( float resolution ) { this . resolution = resolution ; }
public TextView getLabelTextView ( ) { return labelTextView ; }
private void onPreferenceChanged ( int key , boolean contextChanged ) { if ( ! contextChanged ) { mAdapter . initDisplayOptions ( getActivity ( ) ) ; } }
public String prompt ( ) { return Game . getVar ( R . string . Spell_SelectAChar ) ; }
public boolean onNavigationItemSelected ( MenuItem item ) { if ( item == null ) { return true ; } else { selectDrawerItem ( item ) ; return false ; } }
public BuildUpRule ( Player player ) { super ( player ) ; }
public MenuFragment ( ) { }
private String node2Text ( Element el ) { StringBuilder sb = new StringBuilder ( 200 ) ; appendTextSkipHidden ( el , sb , 0 ) ; return sb . toString ( ) ; }
public void formOpened_whenEntryInHistoryExist_autoCompleteShowUp ( ) { historyGenerator . generatePgeG11Bill ( 11 ) ; tester . skipCheckPricesDialogIfVisible ( ) . openForm ( Provider . PGE ) ; tester . autoCompleteContains ( "11" ) ; }
public void createOrder_shouldBePostMethod ( ) throws InterruptedException , TimeoutException { xmrToApi . createOrder ( 0 . 5 , "btcsomething" , mockOrderXmrToCallback ) ; RecordedRequest request = mockWebServer . takeRequest ( ) ; assertEquals ( "POST" , request . getMethod ( ) ) ; }
public void cleanupPlayer ( boolean notify , boolean stopService ) { cleanupPlayer ( notify , stopService , false ) ; }
public void show ( ) { super . show ( ) ; rebuild ( ) ; DrawContext . scene . setScrollFocus ( pane ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_about_us , container ) ; }
public void stopPlaying ( ) { playing = false ; interrupt ( ) ; try { is . close ( ) ; } catch ( final Throwable t ) { Log . e ( "GifDecoderThread" , "Exception while stopping" , t ) ; } }
public String info ( ) { return "A greater value will result in a bigger outline" ; }
private void dealAssociatedModel ( DataSupport baseObj , DataSupport associatedModel ) { if ( associatedModel . isSaved ( ) ) { baseObj . addAssociatedModelForJoinTable ( associatedModel . getTableName ( ) , associatedModel . getBaseObjId ( ) ) ; } }
public Result doWork ( ) { Intent i = new Intent ( getApplicationContext ( ) , AlarmService . class ) ; i . setAction ( STOCK_ALARM_NETWORK_BACK ) ; AlarmService . enqueueWork ( getApplicationContext ( ) , i ) ; return ListenableWorker . Result . success ( ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return "Notifications" ; case 1 : return "Account" ; case 2 : return "Settings" ; default : return null ; } }
public void onStopTrackingTouch ( SeekBar seekBar ) { editor . putInt ( "EXPIRED_TIME" , seekBar . getProgress ( ) + 1 ) ; editor . apply ( ) ; }
public int compareTo ( IItem another ) { int result = this . getValue ( ) . compareTo ( another . getValue ( ) ) ; if ( result == 0 ) result = this . getKey ( ) - another . getKey ( ) ; return result ; }
private void onCommand ( InetAddress origin , Command command ) { mCommandListener . onCommand ( origin , command ) ; }
public Object execute ( Object o , Connection c ) { c . service . doClearAllButtons ( ) ; return null ; }
public void w ( Throwable t , String tag , String message , Object . . . args ) { HyperLog . w ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public int blobAmountAt ( Class < ? extends Blob > blobClass , int cell ) { Blob blob = Dungeon . level . blobs . get ( blobClass ) ; if ( blob == null ) { return 0 ; } return blob . cur [ cell ] ; }
static public ExchangeApi getExchangeApi ( ) { return new com . m2049r . xmrwallet . service . exchange . krakenEcb . ExchangeApiImpl ( OkHttpHelper . getOkHttpClient ( ) ) ; }
public void onRequestMapChange ( String mapKey ) { monochrome . removeListener ( this ) ; }
public void setTitle ( String title ) { setArgument ( title , TITLE ) ; AlertDialog dialog = ( AlertDialog ) getDialog ( ) ; if ( dialog != null ) { setupView ( dialog ) ; } }
public CardView getCardViewAt ( int position ) { return mViews . get ( position ) ; }
public NavigationDrawerManager ( Context context ) { mProfileManager = ProfileManager . getInstance ( context ) ; mProfileManager . addOnProfileUpdateListener ( this ) ; }
public void remove ( DataSink sink ) { mDataSinkMap . values ( ) . removeAll ( Collections . singleton ( sink ) ) ; }
public void gotoDashboard ( String workflowId ) { mListener . activateAcknowledged ( workflowId ) ; }
public void activateUVBuffer ( FloatBuffer uvBuffer ) { GLES20 . glVertexAttribPointer ( mUVDataHandle , 2 , GLES20 . GL_FLOAT , false , 0 , uvBuffer ) ; }
public final boolean isKeyword ( String s ) { return _keywords . containsKey ( s ) ; }
public void run ( ) { listener . onSendFailure ( e ) ; }
public void swapItems ( List < DictionarySearchResultItem > items ) { this . searchResultItems = items ; notifyDataSetChanged ( ) ; }
public void encode ( final Context context , final Object id , final String html ) { findOrCreateInfo ( id ) . encode ( context , html , mLoadingGetter ) ; }
public SvgPathBuilder append ( final SvgPoint controlPoint1 , final SvgPoint controlPoint2 , final SvgPoint endPoint ) { mStringBuilder . append ( makeRelativeCubicBezierCurve ( controlPoint1 , controlPoint2 , endPoint ) ) ; mLastSvgCommand = SVG_RELATIVE_CUBIC_BEZIER_CURVE ; mLastPoint = endPoint ; return this ; }
public void setSensible ( boolean sensible ) { this . sensible = sensible ; }
public void setColorByResource ( int colorResId ) { if ( mContext == null ) { throw new RuntimeException ( "Context should be set before setting color for Underlabel style . " ) ; } else { mColor = ContextCompat . getColor ( mContext , colorResId ) ; } }
private Runnable checkForLimit = new Runnable ( ) { @ Override public void run ( ) { if ( counterCallback != null && ++ tryCounter == limit ) { counterCallback . onTryLimitReached ( ) ; } } } ;
public LoginFlow enterSiteAddress ( String siteAddress ) { populateTextField ( R . id . input , siteAddress ) ; clickOn ( R . id . primary_button ) ; return this ; }
public int getScrollback ( ) { int scrollback = 140 ; try { scrollback = Integer . parseInt ( prefs . getString ( PreferenceConstants . SCROLLBACK , "140" ) ) ; } catch ( Exception e ) { } return scrollback ; }
public CharArrSubstring substring ( int start ) { return new CharArrSubstring ( arr , this . start + start , length - start ) ; }
public void addListener ( MyLocationListener listener ) { listeners . add ( listener ) ; }
public boolean onMenuItemClick ( MenuItem item ) { resetSnoopFile ( ) ; return true ; }
public void die ( NamedEntityKind cause ) { super . die ( cause ) ; Badges . validateBossSlain ( Badges . Badge . BOSS_SLAIN_1 ) ; yell ( StringsManager . getVar ( R . string . Goo_Info2 ) ) ; }
public void loadData ( String data ) { mXWalkView . loadData ( data , "text/html" , "UTF - 8" ) ; }
public void processIncomingMessage ( MessageTransition message ) { eventBus . post ( message ) ; }
public int getItemCount ( ) { return mainFiles . size ( ) ; }
public ListPathsAsyncTask ( Context context , OnPathsListedCallback callback ) { super ( context , 500 ) ; onPathsListedCallbackWeakReference = new WeakReference <> ( callback ) ; }
public void onComplete ( @ NonNull Task < AuthResult > task ) { if ( task . isSuccessful ( ) ) { startActivity ( intent ) ; finish ( ) ; } else { } }
public int getColorOnSurface ( ) { return getAttributeValue ( R . attr . colorOnSurface ) ; }
public boolean hasPointerMotionEvents ( ) { return overlay == null ; }
public E pop ( ) { if ( index < 0 ) { return null ; } return ( E ) data [ index -- ] ; }
public void onClick ( View v ) { parent . onClickMemoryKeyButton ( Constants . MEM_MINUS ) ; }
public boolean isTrueReading ( ) { return mIsTrueReading ; }
public void onClick ( View v ) { mTargetAngleSeekBar . setProgress ( mTargetAngleSeekBar . getProgress ( ) - 10 ) ; }
public int getItemCount ( ) { return datalist . size ( ) ; }
public static com . coinomi . core . protos . Protos . PeerAddress parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void setSelectItemClickListener ( SelectOneItemClickListener listener ) { this . listener = listener ; }
public void setQuality ( String quality ) { this . quality = quality ; }
public VH onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return null ; }
public String toString ( ) { return "Status { " + "id = " + id + " , code = '" + code + '\'' + " , value = '" + value + '\'' + ' } ' ; }
private boolean getBooleanAttribute ( String key , boolean defaultValue ) { String value = this . getAttribute ( key ) ; if ( value == null ) { return defaultValue ; } else { return Boolean . parseBoolean ( value ) ; } }
private RangePickerIntegerWidget createWidget ( FormEntryPrompt prompt ) { return new RangePickerIntegerWidget ( widgetActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) ) ; }
public boolean getInvMatchType ( ) { return mRfidDevice . mRx000Device . mRx000Setting . getInvMatchType ( ) > 0 ? true : false ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . grid_unusual , parent , false ) ; return new ViewHolder ( v ) ; }
public Builder withImageOverlayColor ( int color ) { mImageFilterColor = color ; return this ; }
public boolean onCreateOptionsMenu ( final Menu menu ) { return true ; }
public void addRecordUsingContentValues ( ContentValues values , String tableName ) { SQLiteDatabase db = this . getWritableDatabase ( ) ; db . insert ( tableName , null , values ) ; db . close ( ) ; }
public void addForce ( float amount ) { angularVelocity += amount ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . fragment_genre , parent , false ) ; return new ViewHolder ( view ) ; }
private View getSnackbarParent ( ) { View coordinator = getActivity ( ) . findViewById ( R . id . coordinator ) ; if ( coordinator != null ) { return coordinator ; } return getView ( ) ; }
public void setPeriod ( Integer period ) { this . period = period ; }
public Point getHead ( ) { return new Point ( current . get ( 0 ) ) ; }
public void notifyItemMoved ( int fromPosition , int toPosition ) { updateRows ( ) ; try { super . notifyItemMoved ( fromPosition , toPosition ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onLoadFinished ( Loader < List < File >> loader , List < File > data ) { updateAdapter ( data ) ; }
public void setRotateDown ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotation ( 20 * fraction ) ; setPivotY ( getHeight ( ) ) ; setPivotX ( getWidth ( ) / 2 ) ; }
private void gotoPaint ( ) { Intent myIntent = new Intent ( this , FingerPaint . class ) ; startActivity ( myIntent ) ; }
private void configureGridView ( LayoutInflater inflater , View view ) { mGridView = ( HeaderGridView ) view . findViewById ( R . id . theme_listview ) ; addHeaderViews ( inflater ) ; mGridView . setRecyclerListener ( this ) ; }
public void calculateSizes ( float symbolSize ) { xmax = Math . round ( width * ( symbolSize + gap ) ) ; ymax = Math . round ( height * fontSize ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_channels_channelParticipants . TLdeserialize ( stream , constructor , exception ) ; }
public String rules_url ( ) { return rules_url ; }
public PhotoSizes setW ( String w ) { this . w = w ; return this ; }
public void awardPlayerPoints ( int awardedPoints ) { playerStats . awardPoints ( awardedPoints ) ; }
public int getItemViewType ( int position ) { if ( mMyStarNameAccounts . size ( ) == 0 ) { return TYPE_PROMOTION ; } else { return TYPE_MY_ACCOUNT ; } }
private boolean isDeviceOnline ( ) { final ConnectivityManager manager = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; final NetworkInfo networkInfo = manager . getActiveNetworkInfo ( ) ; return ( networkInfo != null && networkInfo . isConnected ( ) ) ; }
private void loadReferenceOverlay ( ) { clearOverlays ( ) ; if ( referenceLayerFile != null ) { addMbtiles ( referenceLayerFile . getName ( ) , referenceLayerFile ) ; } }
public Filter ( FilterElementClick elementClick ) { this . elementClick = elementClick ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_account_authorizations . TLdeserialize ( stream , constructor , exception ) ; }
public void setServings ( int servings ) { this . servings = servings ; recalculateStreak ( ) ; }
public void setGraph3MonthXLabel ( String [ ] values ) { barChart3Month . getXAxis ( ) . setValueFormatter ( new AxisValueFormatter ( values ) ) ; }
public List < Kd2ReadingMeaning > getReading_meaning ( ) { return reading_meaning ; }
private Completable deleteAccount ( AccountsDatabase accountsDatabase ) { return SavedAccountsUtils . deleteAccount ( getApplication ( ) , accountsDatabase , accountID ) ; }
public void onResultBack ( DataTransportResult dataTransportResult ) { log . d ( dataTransportResult . toString ( ) ) ; }
public void onLoaderReset ( Loader < Album > loader ) { this . album = new Album ( ) ; adapter . swapDataSet ( album . songs ) ; }
public void setUserAgent ( ) { final String ua = mSharedPrefs . getBoolean ( "pref_fake_user_agent" , false ) ? mDesktopUserAgent : mDefaultUserAgent ; Log . d ( "setting user agent to : " + ua ) ; mSettings . setUserAgentString ( ua ) ; }
public static String decryptBase64 ( String line ) { return decryptBase64 ( mCryptKey , line ) ; }
public void changed ( ChangeEvent event , Actor actor ) { GraphicalAdapter . instance . setMenu ( new SettingsMenu ( ) ) ; }
public void onServiceConnected ( ) { updateQueue ( ) ; updateCurrentSong ( ) ; updateIsFavorite ( ) ; updateLyrics ( ) ; }
private void UCampusContextInit ( Context context ) { if ( context == null ) return ; if ( UCampusConnection . context == null ) UCampusConnection . context = context ; }
public void onPause ( ) { thread . runOnUI ( ( ) -> { log . v ( TAG , "paused" ) ; if ( requestHandle != null && requestHandle . cancel ( ) ) { loaded = false ; } } ) ; }
public int compare ( TopCategoryChartListViewModel o1 , TopCategoryChartListViewModel o2 ) { return Long . compare ( o1 . getMoney ( ) , o2 . getMoney ( ) ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { if ( this . isPagindEnabled ) { return super . onInterceptTouchEvent ( event ) ; } return false ; }
private void thenShouldNotifyOnLocationPermissionFailure ( ) { new Verifications ( ) { { mLocationRetriever . onLocationPermissionFailure ( ) ; } } ; }
public boolean attachTo ( @ NotNull Char target ) { if ( target . immunities ( ) . contains ( getEntityKind ( ) ) ) { return false ; } this . target = target ; target . add ( this ) ; return true ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { download = new Download ( item , holder , onFinish , activity ) ; download . execute ( ) ; }
private void populateAdapter ( ) { adapter . loadEntries ( ) ; tagsDrawerAdapter . setTags ( createTagsMap ( adapter . getEntries ( ) ) ) ; adapter . filterByTags ( tagsDrawerAdapter . getActiveTags ( ) ) ; }
public void onProgressDownload ( String fileName , float progress ) { radialProgress . setProgress ( progress , true ) ; if ( buttonState != 3 ) { updateButtonState ( false ) ; } }
public static void showDisclaimer ( JalkametriActivity parent ) { LogUtil . i ( TAG , "Showing legal disclaimer" ) ; Intent i = new Intent ( parent , DisclaimerActivity . class ) ; parent . startActivity ( i ) ; }
public float getDistanceInProgress ( ) { return DistanceInProgress ; }
public void onViewAttachedToWindow ( RecyclerView . ViewHolder holder ) { if ( isInsertionEnabled ( ) ) { if ( ! ( holder instanceof OddPosItemViewHolder ) ) { super . onViewAttachedToWindow ( holder ) ; } } else { super . onViewAttachedToWindow ( holder ) ; } }
public static AlertDialog showFilterRecordCountChoiceDialog ( Context context , PreferenceDialog . PreferenceChoiceDialogListener listener ) { return showPreferenceChoiceDialog ( context , NetMonPreferences . PREF_FILTER_RECORD_COUNT , NetMonPreferences . PREF_FILTER_RECORD_COUNT_DEFAULT , R . array . preferences_filter_record_count_values , R . array . preferences_filter_record_count_labels , R . string . pref_title_filter_record_count , listener ) ; }
private void cancelSheetAnimation ( ) { if ( currentSheetAnimation != null ) { currentSheetAnimation . cancel ( ) ; currentSheetAnimation = null ; } }
private final RecyclerView . OnScrollListener mOnScrollListener = new RecyclerView . OnScrollListener ( ) { @ Override public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; hideNewPostsBar ( ) ; } } ;
public int lines ( ) { return 4 ; }
public void onClick ( DialogInterface dialog , int which ) { LinkHandler . onLinkClicked ( activity , linksArr [ which ] , false , post . src ) ; dialog . dismiss ( ) ; }
public NumberInput ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public void start ( Attributes attributes ) { mCurrentBookmark . setRemovetoken ( attributes . getValue ( Bookmark . Xml . REMOVE_ATTRIBUTE_VALUE ) ) ; }
public Category ( Category category ) { this . id = category . id ; this . name = category . name ; }
public void onClick ( View v ) { new OpenRedditLink ( SettingsAbout . this , "https : }
public void onBindViewHolder ( PaymentItemHolder holder , int position ) { final Payment payment = this . payments . get ( position ) ; holder . bindPaymentItem ( payment , this . fiatCode , this . prefUnit , this . displayAmountAsFiat ) ; }
public void onIngredientSelected ( @ NonNull IngredientTemplate ingredientTemplate ) { Intent result = new Intent ( ) ; result . putExtra ( AddMealFragmentModule . EXTRA_INGREDIENT_PARCEL , Parcels . wrap ( ingredientTemplate ) ) ; activity . setResult ( RESULT_OK , result ) ; activity . finish ( ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; mActivity = ( AppCompatActivity ) context ; }
public Dinner ( int id , Meal meal , Date date ) { this . id = id ; this . meal = meal ; this . date = date ; }
public AbstractExpandableItemViewHolder ( View itemView ) { super ( itemView ) ; }
public void onMatchingFinished ( List < MatchedBird > results ) { view . hideProgress ( ) ; view . showMatchResults ( results ) ; }
public void destroy ( ) { view = null ; RxUtils . unsubscribe ( fetchSubscription ) ; }
public static void resetSelftextEnabled ( String subreddit ) { prefs . edit ( ) . remove ( "cardtextenabled" + subreddit . toLowerCase ( ) ) . apply ( ) ; }
public ClusterQuery limit ( int value ) { mLimit = String . valueOf ( value ) ; return this ; }
public JSONObject getRecoveryOwnerAddress ( String recoveryAddress ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/recovery - owners/%s" , mUserId , recoveryAddress ) , requestMap ) ; }
public void getBalance ( ) { walletBalanceObject . getWalletBalance ( this , getBalanceHandler , viewedWalletAddress ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View v = inflater . inflate ( R . layout . nfc_reader_fragment , container , false ) ; ButterKnife . bind ( this , v ) ; return v ; }
public void setShortcut ( String shortcut ) { this . shortcut = shortcut ; }
private boolean isInitialized ( ) { return mImmWrapper != null ; }
public void run ( ) { DonationDialog . create ( ) . show ( getSupportFragmentManager ( ) , "DONATION_DIALOG" ) ; }
private void checkCoordinateData ( Activity activity ) { if ( activity instanceof PagerActivity && ( ! QuranFileUtils . haveAyaPositionFile ( activity ) || ! QuranFileUtils . hasArabicSearchDatabase ( activity ) ) ) { PagerActivity pagerActivity = ( PagerActivity ) activity ; pagerActivity . showGetRequiredFilesDialog ( ) ; } }
public static boolean getBoolean ( Activity context , String key ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( key , false ) ; }
public void setName ( String blogName ) { this . name = StringUtils . notNullStr ( blogName ) . trim ( ) ; }
private boolean isPaused ( TorrentStatus s ) { return s . flags ( ) . op_and ( TorrentFlags . PAUSED ) . op_bool ( ) ; }
public Builder setUpdatedAt ( long value ) { bitField0_ | = 0x00000010 ; updatedAt_ = value ; onChanged ( ) ; return this ; }
private void startActivity ( ) { Intent intent = UserActivity . Factory . getIntent ( getInstrumentation ( ) . getContext ( ) ) ; activityTestRule . launchActivity ( intent ) ; }
public void finish ( ) { super . finish ( ) ; overridePendingTransition ( 0 , R . anim . fade_out ) ; }
public List < Challenge > getChallenges ( ) { return this . challenges ; }
public MachineCheckerRunnable ( Machine m , String roomName , Handler handler , OnMachineInUse listener ) { this . listener = listener ; this . m = m ; this . roomName = roomName ; this . handler = handler ; }
public HeartRateSummary getHeartRateSummary ( ) { return heartRateSummary ; }
public void onClick ( View v ) { Snackbar . make ( visSnackBar , "OK , det her er en kort snackbar" , Snackbar . LENGTH_SHORT ) . show ( ) ; }
public float getValue ( ) { return this . year ; }
public void hideKeyboard ( ) { ActivityUtils . hideSoftKeyboard ( getActivity ( ) ) ; }
public void increaseHOTPCounter ( Token token ) { token . setCounter ( ( token . getCounter ( ) + 1 ) ) ; token . setCurrentOTP ( generate ( token ) ) ; tokenListInterface . notifyChange ( ) ; }
public void setUp ( ) { settingsPresenter = new SettingsPresenter ( view , logger ) ; PowerMockito . mockStatic ( OpenMRS . class ) ; PowerMockito . when ( OpenMRS . getInstance ( ) ) . thenReturn ( openMRS ) ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor data ) { new CursorToListAsyncTask ( data , this ) . execute ( ) ; }
private void addCategory ( String name ) { AddCategory addCategory = new AddCategory ( this , new Category ( name ) , this ) ; addCategory . execute ( ) ; }
public void setFieldFocused ( ) { if ( messageEditText != null ) { try { messageEditText . requestFocus ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } } }
public void onGeocodingProviderResult ( MessageLocation m ) { if ( m == lastLocationMessage ) { sendOngoingNotification ( ) ; } }
public int getPositionForSection ( int sectionIndex ) { if ( mSectionsEnabled ) { return mSectionPositions . get ( sectionIndex ) ; } else { return 0 ; } }
public void showAllCollectionBooks ( BooksCollection booksCollection ) { BookListFragment fragment = BookListFragment . newInstance ( BookListFragment . FILTER_BY_COLLECTION , booksCollection . getCollectionsId ( ) , booksCollection . getName ( ) ) ; if ( browsingActivityNavigationController != null ) { browsingActivityNavigationController . showCollectionDetails ( fragment ) ; } }
public Integer getHashrate ( ) { return hashrate ; }
public void setListeners ( View . OnClickListener clickListener ) { mClickListener = clickListener ; } @ Override
public void md5FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "0cbc6611f5540bd0809a388dc95a615b" , HashCalculator . newInstance ( HashType . MD5 ) . fromString ( inputText ) ) ; }
public void commitTabState ( ) { if ( tabList . isEmpty ( ) ) { Prefs . clearTabs ( ) ; initTabs ( ) ; } else { Prefs . setTabs ( tabList ) ; } }
public PointF getCenterOfView ( ) { return getCenter ( ) ; }
public void cancelFling ( ) { if ( scroller != null ) { setState ( State . NONE ) ; scroller . forceFinished ( true ) ; } }
public void value2f ( float v1 , float v2 ) { GLES20 . glUniform2f ( location , v1 , v2 ) ; }
public SquareLayout ( Context context ) { super ( context ) ; }
public static PendingIntent buildDisableSpecificDimensionsIntent ( Context context , Uri widgetUri ) { Intent intent = new Intent ( AixService . ACTION_UPDATE_ALL_MINIMAL_DIMENSIONS , widgetUri , context , AixService . class ) ; return PendingIntent . getService ( context , 0 , intent , 0 ) ; }
public void onClick ( View v ) { mContext . goToVisitDashboard ( mVisits . get ( position ) . getId ( ) ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( "SWELL" , "Battery info failed : " + msg ) ; }
private static String createFakePhotoString ( ) { try { return "file : } catch ( final NotInitedException e ) { Lg . ex ( LOGTAG , e , "PreferencesHelper . NotInitedException" ) ; return "" ; } }
public void onImportDump ( View view ) { mIsExport = false ; mIsDumpFile = true ; showTypeChooserMenu ( ) ; }
public void onCreate ( ) { super . onCreate ( ) ; db . openAsync ( this ) ; preferences . init ( this ) ; }
public void retrieveTitle ( String bookmarkUrl ) { bookmarkUrl = Utils . buildUrl ( bookmarkUrl , true ) ; new RetrieveIconThread ( bookmarkUrl , JobTypeEnum . BOOKMARK_TITLE ) . start ( ) ; }
private static synchronized BandwidthMeter getDefaultBandwidthMeter ( ) { if ( singletonBandwidthMeter == null ) { singletonBandwidthMeter = new DefaultBandwidthMeter . Builder ( ) . build ( ) ; } return singletonBandwidthMeter ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { userPreferences . setFilter_ProgramOwner ( parent . getItemAtPosition ( position ) . toString ( ) ) ; filterPrograms ( ) ; onResume ( ) ; }
public List < String > getVideos ( ) { return videos ; }
public Integer getAnnualInterestRate ( ) { return annualInterestRate ; }
public Loader < List < Suggestion >> onCreateLoader ( int id , Bundle args ) { String str = args . getString ( context . getString ( R . string . arg_input ) ) ; return new SuggestionLoader ( context , str , appManager , deviceSettingManager ) ; }
public void run ( ) { synchronized ( loadContactsSync ) { loadingContacts = false ; } NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . contactsDidLoaded ) ; }
public EndedSomeTimeAgo getEventsEnded ( ) { return EndedSomeTimeAgo . fromPreferenceValue ( sharedPreferences . getString ( PREF_EVENTS_ENDED , "" ) ) ; }
public HomeScreenInteractionFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public static void clearCache ( WebView view ) { if ( view == null ) return ; view . clearCache ( true ) ; }
public boolean onBackPressed ( ) { mainView . openMainPage ( ) ; return true ; }
public static SynchronizedSetting getLocalInstance ( Context context ) { return getRepository ( KEY_PATH ) . getLocalInstance ( SynchronizedSetting . class , context ) ; }
public void setCardType ( ReaderCardType cardType ) { this . cardType = cardType ; }
public void setFirstTimeUserTag ( boolean isFirstTimeUser ) { this . firstTimeUserTag = isFirstTimeUser ? 1 : 0 ; }
public void onMessageSent ( final Message message ) { stopSpinner ( message ) ; }
public ColorStateList getProgressBackgroundTintList ( ) { logProgressBarTintWarning ( ) ; return super . getProgressBackgroundTintList ( ) ; }
public void toggle ( ) { setSelected ( ! isChecked ) ; }
public boolean onItemLongClick ( AdapterView < ? > parent , View view , int position , long id ) { switchMode ( MODE . DELETE ) ; return true ; }
private void updateQueuePosition ( ) { playingQueueAdapter . setCurrent ( MusicPlayerRemote . getPosition ( ) ) ; if ( slidingUpPanelLayout . getPanelState ( ) == SlidingUpPanelLayout . PanelState . COLLAPSED ) { resetToCurrentPosition ( ) ; } }
public void onSaveInstanceState ( Bundle savedInstanceState ) { super . onSaveInstanceState ( savedInstanceState ) ; if ( mNation != null ) { savedInstanceState . putParcelable ( "mNationData" , mNation ) ; } }
public void addViewModel ( UUID uuid , T viewModel ) { Timber . w ( "addViewModel ( %s , %s ) " , uuid , viewModel ) ; viewModelMap . put ( uuid , viewModel ) ; }
public void onRedditAccountChanged ( ) { General . UI_THREAD_HANDLER . post ( new Runnable ( ) { @ Override public void run ( ) { rv . getAdapter ( ) . notifyDataSetChanged ( ) ; } } ) ; }
public void setAuthenticatedAccount ( @ NonNull Account account ) { activityContract . setAuthenticatedAccount ( account ) ; }
public void setTextColor ( int color ) { mTextPaint . setColor ( color ) ; }
public Uniform uniform ( String name ) { return new Uniform ( GLES20 . glGetUniformLocation ( handle , name ) ) ; }
private void notifySuccess ( final List < GitHubAuthUser > gitHubAuthUsers ) { if ( callback != null ) { callback . onSuccess ( gitHubAuthUsers ) ; } }
private void setType ( int type ) { mWallpaperType = type ; }
public void handleLongPress ( SuraAyah suraAyah ) { if ( isVisible ( ) ) { ayahTrackerPresenter . onLongPress ( suraAyah ) ; } }
public void setTextEncoding ( String encoding ) { putString ( Name . TEXT_ENCODING , encoding ) ; }
public void onClick ( DialogInterface dialog , int id ) { saveEveryting ( ) ; }
public Builder stepTitleTextSizeInPx ( int stepTitleTextSizeInPx ) { style . stepTitleTextSizeInPx = stepTitleTextSizeInPx ; return this ; }
public static boolean isTwoPane ( Context context ) { return context . getResources ( ) . getBoolean ( R . bool . isTwoPane ) ; }
public void onFailureContinue ( Throwable error ) { Log . w ( TAG , error ) ; sendMessage ( WebRtcViewModel . State . NETWORK_FAILURE , recipient , localVideoEnabled , remoteVideoEnabled , bluetoothAvailable , microphoneEnabled ) ; terminate ( ) ; }
public void open ( ) { setHeight ( defaultHeight ) ; }
public Cache provideOkCache ( Context context ) { return new Cache ( context . getCacheDir ( ) , CACHE_SIZE ) ; }
public void testLocationOn ( ) throws IOException { Log . d ( TAG , "testLocationOn" ) ; subTestLocationOn ( false ) ; }
public void run ( ) { view . setVisibility ( View . VISIBLE ) ; Log . i ( "AnimateHelper" , getViewId ( view ) + " fade IN [ VISIBLE ] effect for 0ms with " + String . valueOf ( delay ) + "ms delay" ) ; }
public void equippedCursed ( ) { GLog . n ( Utils . format ( Game . getVar ( R . string . Ring_Info2 ) , name ( ) ) ) ; }
public void removeMessageListener ( @ NonNull ServerMessageListener listener ) { messageListeners . remove ( listener ) ; }
public void onPageChanged ( int page ) { pageSystemButtons . updateVisibility ( false ) ; searchingText = false ; mEditor . clearHistory ( ) ; invalidateOptionsMenu ( ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( MapActivity . this , StationActivity . class ) ; intent . putExtra ( "station" , markerStation ) ; startActivity ( intent ) ; }
public final int getLastPage ( ) { return mPreferences . getInt ( LAST_PAGE , 0 ) ; }
public void subscribe ( ) { addSubscription ( visitDAO . getVisitsByPatientID ( mPatient . getId ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( visits -> { mPatientChartsView . populateList ( visits ) ; } ) ) ; }
public int duration ( ) { if ( ! mIsInitialized ) { return - 1 ; } try { return mCurrentMediaPlayer . getDuration ( ) ; } catch ( IllegalStateException e ) { return - 1 ; } }
public static CalendarDate today ( ) { return fromTime ( System . currentTimeMillis ( ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( ARG_ENTRY , entry ) ; }
public void accept ( @ NonNull Integer integer ) throws Exception { paint . setColor ( integer ) ; outlinePaint . setColor ( integer ) ; invalidate ( ) ; }
public Integer getArgument ( String string ) throws CommandParsingException { try { return Integer . parseInt ( string ) ; } catch ( NumberFormatException e ) { throw new CommandParsingException ( "command . common . value . intValue . parsing" ) ; } }
private void initSmartFold ( ) { binding . smartFoldPrefs . setChecked ( mPrefs . isFoldingEnabled ( ) ) ; binding . smartFoldPrefs . setOnClickListener ( mFoldingClick ) ; }
private TrackerBlocklist ( Context c ) { if ( c != null ) { loadSettings ( c ) ; } }
private void whenNotifyingOnAction ( ) { AnalyticsEvent analyticsEvent = new AnalyticsEvent ( mAction , null ) ; uut . notifyOnAction ( analyticsEvent ) ; }
public RevealBackgroundView ( Context context ) { this ( context , null , 0 ) ; }
public void onFailure ( Call < ArrayList < CollegeDetails >> call , Throwable t ) { emptyView . setVisibility ( View . VISIBLE ) ; ref . hide ( ) ; }
public void shutDown ( ) throws Exception { service . onDestroy ( ) ; }
public StreamTracksHorizontalAdapter . MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_card_layout , parent , false ) ; return new MyViewHolder ( itemView ) ; }
public static boolean checkMiddlePassHash ( String passHash ) throws DatabaseConfig . EmptyFieldException { String checkData = Instance . mDatabaseConfig . getMiddleHashCheckData ( ) ; return CryptManager . checkMiddlePassHash ( passHash , checkData ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; init ( view ) ; }
public void setPriorities ( List < Priority > priorities ) { mPriorities = priorities ; }
public com . google . protobuf . Any . Builder getConsensusPubkeyBuilder ( ) { onChanged ( ) ; return getConsensusPubkeyFieldBuilder ( ) . getBuilder ( ) ; }
public void run ( ) { selectDialog ( finalProjects ) ; }
private void init ( GoogleMap map ) { map . clear ( ) ; setMap ( map ) ; mMap . getUiSettings ( ) . setMyLocationButtonEnabled ( true ) ; setMyLocationButtonListner ( ) ; mCurrentPositionMarker = null ; }
public void setModeOnlyWeekView ( ) { mCalendarShowMode = CALENDAR_SHOW_MODE_ONLY_WEEK_VIEW ; }
private void fillViewHolder ( final VariableViewHolder holder , final VariableMap . VariableState data ) { if ( holder == null ) { return ; } textListeningActive = false ; holder . setData ( data , this . visibleVariables ) ; textListeningActive = true ; }
private static int klasseToSpinnerPos ( Context context , String klasse ) { return Arrays . asList ( context . getResources ( ) . getStringArray ( R . array . spinner_klasse_entries ) ) . indexOf ( klasse ) ; }
public static void initializeRussian ( ) { GAME_PAUSED_STRING = "Пауза" ; GAME_OVER_STRING = "Конец игры" ; PEAK_SCORE_STRING = "Счёт" ; }
public void testMinimalEncoder41 ( ) throws Exception { verifyMinimalEncoding ( "1001114670010%01201220%107211220%140045003267781" , "FNC1_FIRST_POSITION ( ) , NUMERIC ( 100111" + "4670010 ) , ALPHANUMERIC ( %01201220%107211220% ) , NUMERIC ( 140045003267781 ) , TERMINATOR ( ) " , null , true ) ; }
public int getItemCount ( ) { if ( castArrayList == null ) return 0 ; return castArrayList . size ( ) ; }
public void setAuthMethod ( AuthMethod authMethod ) { setString ( R . string . settings_key_auth , authMethod . name ( ) . toLowerCase ( ) ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , longterm_vehicle . class ) ; startActivity ( inte ) ; }
public static void setTint ( Drawable drawable , int tint ) { DrawableCompat . setTint ( drawable instanceof LayerDrawable ? ( ( LayerDrawable ) drawable ) . getDrawable ( 0 ) : drawable , tint ) ; }
public String getClasses ( ) { return classes ; }
public void onReceive ( final Context context , final Intent intent ) { SimlarService . this . keepAwake ( ) ; }
public void onAirplaneModeStatusChange ( AirplaneModeStatusChangeEvent event ) { mPostPresenter . handleLocationSettingsStatusChange ( ) ; }
public void attack ( Actor actor ) { this . healthPoints -= actor . attackPoints ; setActiveStance ( ) ; if ( healthPoints <= 0 ) { kill ( ) ; } }
private void selectLastCategoryForPayee ( long id ) { Payee p = em . get ( Payee . class , id ) ; if ( p != null ) { categorySelector . selectCategory ( p . lastCategoryId ) ; } }
public String getUuId ( ) { return uuId ; }
private void showAddMeasureDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; AddMeasureDialogFragment dialog = new AddMeasureDialogFragment ( ) ; dialog . show ( this . getFragmentManager ( ) , "MeasureDialogFragment" ) ; }
public void buttonsShouldNotLaunchIntentsWhenPermissionsDenied ( ) { stubAllRuntimePermissionsGranted ( false ) ; assertIntentNotStarted ( activity , getIntentLaunchedByClick ( R . id . capture_video ) ) ; }
public ArrayList < TripEntry > getUserTripEntries ( ) { return userTripEntries ; }
public LangSettingList ( int id , String text , String tag ) { this . id = id ; ; this . text = text ; this . Tag = tag ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor cursor ) { if ( cursor != null ) { if ( loader . getId ( ) == LOADER_MEMBER_SPEAKING_TIME ) { MeetingSpeakingTimeColumnChart . populateMeeting ( getContext ( ) , mBinding . chartMemberSpeakingTime , cursor ) ; } } }
public void onPlaybackStateChanged ( @ NonNull PlaybackStateCompat state ) { Log . d ( TAG , "onPlaybackstate changed" + state ) ; updatePlaybackState ( state ) ; }
public void onRebind ( Intent intent ) { isServiceInUse = true ; }
public void getThemeLightTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . LIGHT_INDEX ) ; assertEquals ( AppTheme . LIGHT , apptheme ) ; }
private void handleMove ( String newLocation ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . KITKAT || newLocation . equals ( mInternalSdcardLocation ) ) { moveFiles ( newLocation ) ; } else { showKitKatConfirmation ( newLocation ) ; } }
public void setHu ( Integer hu ) { this . hu = hu ; }
public String getDirPath ( @ NonNull Uri dir ) { FsModule fsModule = fsResolver . resolveFsByUri ( dir ) ; return fsModule . getDirPath ( dir ) ; }
public Integer getDatetime ( ) { return datetime ; }
private void startRegistrationQrActivity ( ) { new IntentIntegrator ( this ) . setCaptureActivity ( RegistrationQrActivity . class ) . initiateScan ( ) ; }
public void removeAllFragments ( ) { for ( int a = 0 ; a < fragmentsStack . size ( ) ; a ++ ) { removeFragmentFromStack ( fragmentsStack . get ( a ) ) ; a -- ; } }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { copyToClipboard ( context , output_result ) ; Api . toast ( context , context . getString ( R . string . result_copied_to_clipboard ) ) ; }
public void onBindViewHolder ( ViewHolder viewHolder , int i ) { viewHolder . bind ( reviews . get ( i ) ) ; viewHolder . itemView . setOnClickListener ( v -> reviewClickListener . read ( viewHolder . movieReview , viewHolder . getAdapterPosition ( ) ) ) ; }
public void onClick ( View view ) { m_GameBoards . movePlaneUp ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; PreferenceUtil . getInstance ( getActivity ( ) ) . unregisterOnSharedPreferenceChangedListener ( this ) ; }
public Date getPeriodEnd ( ) { return periodEnd ; }
public void visit ( MatchStartMessage message ) { player1Type = message . getPlayer1Type ( ) ; player2Type = message . getPlayer2Type ( ) ; GameActivityHelper . defineLabels ( getActivity ( ) , this , message ) ; showIndicator ( ) ; }
public SignedPreKeyStore create ( ) { return new TextSecureAxolotlStore ( context ) ; }
public void size ( float w , float h ) { scale . set ( w , h ) ; }
public GoogleDriveUploadHelper ( Context context , @ Assisted String authToken ) { this . authToken = authToken ; mContext = context ; }
public static ImageThreadLoader getOnDiskInstance ( Context context ) { return new ImageThreadLoader ( new DiskCache ( context ) ) ; }
public static Object getValue ( Map < ? , ? > m , String k , Object o ) { return m . containsKey ( k ) ? m . get ( k ) : o ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) formEntryViewModel ; }
public void onClick ( View v ) { contentView . closeDrawers ( ) ; }
public int getRole ( ) { return this . role ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsReddit . class ) ; startActivity ( i ) ; }
public boolean zza ( zzw zzw ) throws RemoteException { return false ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenu . ContextMenuInfo menuInfo ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . subscribe_topic_menu , menu ) ; toDelete = ( TopicEntity ) binding . getTopic ( ) ; }
public void run ( ) { try { BottomSheet . super . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onPageSelected ( int position ) { DBLastViewed . getInstance ( ) . saveSelection ( subjectPosition , position ) ; }
public WeatherWidgetProvider2x4 ( ) { super ( 4 ) ; }
public Settings ( final Context ctx ) { this . ctx = ctx ; }
public void onClick ( View v ) { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( "http : }
public void onBookmarkStateChange ( boolean newBookmarkState , int pageId ) { if ( pageId == pageRowId ) { changeBookMarkState ( newBookmarkState ) ; } }
public Song createFromParcel ( Parcel in ) { return new Song ( in ) ; }
public void decideMao11 ( Jogador j , boolean aceita ) { enviaLinha ( "H " + ( aceita ? "T" : "F" ) ) ; }
public void onChatRoomStateChanged ( final Core core , final ChatRoom chatRoom , final ChatRoom . State state ) { Lg . w ( "onChatRoomStateChanged : chatRoom" , chatRoom , " state = " , state ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mJustCreated = true ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mContentContainer = null ; mProgress = null ; mProgress = null ; }
public Cancellable repeat ( @ NotNull Runnable task , long repeatPeriod ) { increment ( ) ; return wrappedScheduler . repeat ( ( ) -> { task . run ( ) ; decrement ( ) ; } , repeatPeriod ) ; }
public PostList loadBefore ( long before ) throws Exception { return getService ( ) . getBlog ( before , ConnectionManager . getInstance ( ) . loginResult . login ) ; }
public void setOrderID ( Integer orderID ) { this . orderID = orderID ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( context , user ) . deleteFeed ( feed . getUrl ( ) , feed . getChannel ( ) ) ; items . remove ( position ) ; notifyDataSetChanged ( ) ; }
public float getXChartMax ( ) { return mXChartMax ; }
public void onAnimationEnd ( Animator animation ) { searchViewEditText . requestFocus ( ) ; InputMethodManager imm = ( InputMethodManager ) mainActivity . get ( ) . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; imm . showSoftInput ( searchViewEditText , InputMethodManager . SHOW_IMPLICIT ) ; enabled = true ; }
public void onDraw ( Canvas canvas , Rect bounds ) { long now = System . currentTimeMillis ( ) ; mCalendar . setTimeInMillis ( now ) ; drawBackground ( canvas ) ; drawComplications ( canvas , now ) ; drawNotificationCount ( canvas ) ; drawWatchFace ( canvas ) ; }
public void afterTextChanged ( Editable s ) { if ( isUrlConfimationTextValid ( ) ) { mDeleteButton . setEnabled ( true ) ; } else { mDeleteButton . setEnabled ( false ) ; } }
public void showLoadAllRealmErrorMessage ( ) { Snackbar . make ( mFab , R . string . medical_attention_load_realm_error , Snackbar . LENGTH_LONG ) . setAction ( R . string . retry , v -> mMedicalAttentionListPresenter . loadAllMedicalAttentions ( ) ) . show ( ) ; }
public static void diagonal ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . diagonal_right_enter , R . anim . diagonal_right_exit ) ; }
public void onTick ( long millisUntilFinished ) { milliSecondsLeft = millisUntilFinished ; updateTimer ( milliSecondsLeft ) ; }
private void createWallet ( String wname , String pubkey , String enckey ) { mThread = new DbInsertThread ( wname , pubkey , enckey ) ; mThread . start ( ) ; }
public void setAddedBitmaps ( List < Bitmap > addedBitmaps ) { this . addedBitmaps = addedBitmaps ; }
public ContextLinkCell ( Context context ) { super ( context ) ; linkImageView = new ImageReceiver ( this ) ; letterDrawable = new LetterDrawable ( ) ; radialProgress = new RadialProgress ( this ) ; TAG = MediaController . getInstance ( ) . generateObserverTag ( ) ; }
public void onBackPressed ( ) { if ( main != null ) { ui . onBackPressed ( ) ; } }
public static boolean atLeastNougat ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . N ; }
public boolean isSelected ( ) { return Selected ; }
public TransactionInput getDefaultInstanceForType ( ) { return defaultInstance ; }
public boolean highlightBookmarks ( ) { return mPrefs . getBoolean ( Constants . PREF_HIGHLIGHT_BOOKMARKS , true ) ; }
public boolean isEmpty ( ) { return showEmptyText && super . isEmpty ( ) ; }
public String getShitNote ( ) { return getShitNote ( ) ; }
public AppSettings ( Context context ) { super ( context , "app_preferences" ) ; }
public void onDisabledExchangeClick ( String clickedExchangeName ) { if ( getActivity ( ) != null ) { DonateDialog . getInstance ( ) . show ( getActivity ( ) . getSupportFragmentManager ( ) , DonateDialog . TAG ) ; } }
public Moongrace ( ) { imageIndex = 4 ; }
public static void setSummaryCardWithLargeImageVisibility ( View view , TwitterCard card ) { if ( card != null && card . isSummaryLargeImage ( ) && card . showLargeImage ) { view . setVisibility ( VISIBLE ) ; } else { view . setVisibility ( GONE ) ; } }
private void clearAddress ( boolean clearTextField ) { address = null ; if ( clearTextField ) setSendToAddressText ( null ) ; sendAmountType = pocket . getCoinType ( ) ; addressTypeCanChange = false ; }
public void addAll ( List < ActivitySegmentFit > activities ) { mActivities . addAll ( activities ) ; notifyDataSetChanged ( ) ; }
public void switchContent ( Fragment fragment , FragmentTransaction transaction , String tag ) { transaction . replace ( R . id . content_frame , fragment , tag ) ; contentFragment = fragment ; }
public void notifyGroupAndChildrenItemsChanged ( int groupPosition , Object payload ) { mAdapter . notifyGroupAndChildrenItemsChanged ( groupPosition , payload ) ; }
public void setUpvotes ( int upvotes ) { this . upvotes = upvotes ; }
private float distanceInfluenceForSnapDuration ( float f ) { f -= 0 . 5f ; f * = 0 . 3f * Math . PI / 2 . 0f ; return ( float ) Math . sin ( f ) ; }
public void didSetColor ( int color ) { }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_StickerSetInstallResult . TLdeserialize ( stream , constructor , exception ) ; }
private String rewriteResult ( String result ) { String newResult = IntentUtils . rewriteResultWithExtras ( this , mExtras , result ) ; if ( newResult == null || mUtteranceRewriter == null ) { return newResult ; } return IntentUtils . launchIfIntent ( this , mUtteranceRewriter , newResult ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_add_record , menu ) ; return true ; }
public void setApps ( List < AppDetail > apps ) { this . apps = apps ; notifyDataSetChanged ( ) ; }
public static ArrayList < Song > getRecentlyPlayedTracks ( @ NonNull Context context ) { return SongLoader . getSongs ( makeRecentTracksCursorAndClearUpDatabase ( context ) ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { Log . w ( TAG , "onPreferenceChange" ) ; preference . setSummary ( getSummaryForMediaPreference ( ( Set < String > ) newValue ) ) ; return true ; }
public Integer getPrecipIntensityMax ( ) { return precipIntensityMax ; }
public void onSaveInstanceState ( final Bundle savedInstanceState ) { if ( selectedAccount != null ) { savedInstanceState . putString ( STATE_SELECTED_ACCOUNT , selectedAccount . getJid ( ) . asBareJid ( ) . toString ( ) ) ; } super . onSaveInstanceState ( savedInstanceState ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , false ) ; return inflater . inflate ( R . layout . home_special_layout , container , false ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; onForeground = false ; btnListener . stop ( ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { if ( dataSnapshot . exists ( ) ) { String question = dataSnapshot . getValue ( String . class ) ; helloWorld . setText ( question ) ; } }
public Identifier ( PreferenceData preference , @ Nullable String title , SectionIdentifier sectionIdentifier ) { this ( preference , title , null , sectionIdentifier , null , ( String [ ] ) null ) ; }
public void onResponse ( JSONObject jsonObject ) { handleRelatedPostsResponse ( sourcePost , jsonObject , relatedPostsType ) ; }
private void updateDateInUse ( ) { DateFormat df = new DateFormat ( ) ; this . suitDateInUse . setText ( df . format ( myCalendar . getTime ( ) ) ) ; }
private void showProgressDialog ( String title ) { mDialog = ProgressDialog . show ( mContext , null , title , true , false ) ; }
public List < Integer > getmJudges ( ) { return mJudges ; }
public RecordingItem ( Parcel in ) { mName = in . readString ( ) ; mFilePath = in . readString ( ) ; mId = in . readInt ( ) ; mLength = in . readInt ( ) ; mTime = in . readLong ( ) ; }
public void startDemoMode ( View view ) { GUIConfiguration . setAppMode ( AppMode . DEMO ) ; startActivity ( new Intent ( MainActivity . this , DemoActivity . class ) ) ; }
private void notifyOnError ( ) { final OpenWeatherApiError error = new OpenWeatherApiError ( ) ; error . setMessage ( mWeatherLibApp . getString ( R . string . empty_result ) ) ; error . setCode ( ErrorCode . EMPTY ) ; mApiCallback . onError ( error ) ; }
public SuraAyah getSelectionStart ( ) { return mStart ; }
private int getMaxAnswerWeight ( Set < String > list ) { return ( int ) Math . floor ( Math . log ( ( double ) Integer . MAX_VALUE / ( list . size ( ) - 1 ) ) / Math . log ( 2 ) ) ; }
public void onRefresh ( ) { thread . runOnUI ( ( ) -> { log . v ( TAG , "refreshing" ) ; load ( true ) ; } ) ; }
public void setColour ( int colour ) { mPaint . setColor ( colour ) ; mBaseColourAlpha = Color . alpha ( colour ) ; mPaint . setAlpha ( mBaseColourAlpha ) ; }
public String getHour ( ) { return hour ; }
public HotpInfo ( byte [ ] secret ) throws OtpInfoException { this ( secret , 0 ) ; }
public String getPhaseToNumber ( ) { return PhaseNumber . phaseToNumber ( this . phase ) . getPhaseNumber ( ) ; }
public void testThatBottomRightGTPCoordinateIsValidInAnotherBoardSize ( ) throws Exception { final String tested = GTPHelper . coordinates2gtpstr ( new Cell ( 8 , 8 ) , 9 ) ; assertThat ( tested ) . isEqualTo ( "J1" ) ; }
public String [ ] getClipBoardCompare ( ) { return ClipBoardCompare ; }
public Callback getActionModeCallback ( ) { return mActionModeCallbackV7 ; }
public void setGridData ( List < PlayList > mGridData ) { this . mGridData . clear ( ) ; this . mGridData . addAll ( mGridData ) ; this . notifyDataSetChanged ( ) ; }
public void decreaseCount ( OrderProduct orderProduct ) { repo . decreasecount ( orderProduct ) ; }
public boolean hasWebsite ( ) { return websiteUrl != null && ! websiteUrl . isEmpty ( ) ; }
public Observable < String > getTopic ( ) { return mTopicPreference . asObservable ( ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { recentImages . clear ( ) ; if ( listAdapter != null ) { listAdapter . notifyDataSetChanged ( ) ; } MessagesStorage . getInstance ( ) . clearWebRecent ( type ) ; }
public void onBackPressed ( ) { mainActivity . closeDialog ( null ) ; }
public int getCount ( ) { return mIsLoading ? 0 : mComicsListManager . getCount ( ) ; }
public static int makePendingDraftNotificationId ( int localPostId ) { return PENDING_DRAFTS_NOTIFICATION_ID + localPostId ; }
public void onClick ( View v ) { Intent intent = new Intent ( mListItemContext , EditorActivity . class ) ; intent . putExtra ( "date" , mCurrentListDateStr ) ; startActivity ( intent ) ; }
public void onInstructionFinish ( int page ) { if ( page > 1 ) { showSkipMenu = true ; invalidateOptionsMenu ( ) ; } else if ( page == 0 ) { showSkipMenu = false ; invalidateOptionsMenu ( ) ; } }
public void run ( ) { showLogcatMessages ( ) ; timerHandler . postDelayed ( this , 1500 ) ; }
private void cancelMultipleDownloads ( Cursor c , int columnIndex ) { if ( BooksInformationDbHelper . databaseFileExists ( ) ) { BooksInformationDbHelper booksInformationDbHelper = BooksInformationDbHelper . getInstance ( this ) ; if ( booksInformationDbHelper != null ) { booksInformationDbHelper . cancelMultipleDownloads ( c , columnIndex ) ; } } }
public Loader < List < Transaction >> onCreateLoader ( int id , Bundle args ) { return new TransactionsLoader ( getActivity ( ) , pocket ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( getMainActivity ( ) , NativeTokenDetailActivity . class ) ; intent . putExtra ( "denom" , coin . denom ) ; startActivity ( intent ) ; }
public static String getNumberOfConnectFromPage ( String pageSource ) { Matcher numberOfConnectedMatcher = numberOfConnectedPattern . matcher ( pageSource ) ; if ( numberOfConnectedMatcher . find ( ) ) { return numberOfConnectedMatcher . group ( 1 ) ; } else { return "" ; } }
public synchronized void saveQueues ( final ArrayList < Song > playingQueue , final ArrayList < Song > originalPlayingQueue ) { saveQueue ( PLAYING_QUEUE_TABLE_NAME , playingQueue ) ; saveQueue ( ORIGINAL_PLAYING_QUEUE_TABLE_NAME , originalPlayingQueue ) ; }
public TravisRestClient provideTravisRestClientRx ( Retrofit retrofit , OkHttpClient okHttpClient , AppSettings appSettings ) { return new TravisRestClient ( retrofit , okHttpClient , appSettings ) ; }
public void onPrintPaletteEvent ( PrintPaletteEvent event ) { printColor ( event . message ) ; }
public String getAccessToken ( ) { return "Bearer " + accessToken ; }
public void cancelAnimation ( ) { lottieDrawable . cancelAnimation ( ) ; }
public void onResult ( Attraction result ) { viewInteractor . onAttractionLoaded ( result , TourAction . DOWNLOAD ) ; viewInteractor . hideProgress ( ) ; updateAttractionView ( User . dummy ( ) , attractionId ) ; }
private void finishInitialization ( ) { mIsInitialized = true ; for ( Runnable runnable : mPostInitializationWorkList ) { runnable . run ( ) ; } }
public Double get_config ( @ NonNull String key , @ Nullable Double defaultValue ) { if ( ! mConf . has ( key ) ) { return defaultValue ; } return mConf . getDouble ( key ) ; }
public LanguageListAdapter ( Context context ) { this . context = context ; this . showAuto = false ; initLanguages ( ) ; }
public static void saveShakeToRoll ( boolean isChecked ) { App . getTinyDB ( ) . putBoolean ( SHAKE_TO_ROLL , isChecked ) ; }
public Button getVideoButton ( ) { return videoButton ; }
public double getValue ( ) { if ( atomType != Atom . AtomType . INVALID ) { return parser . getX ( ) ; } else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
public void run ( ) { if ( getLifecycle ( ) . getCurrentState ( ) . isAtLeast ( Lifecycle . State . RESUMED ) ) adapter . checkInternet ( ) ; }
private void openItem ( ItemManager . Item item ) { mContext . startActivity ( new Intent ( mContext , ItemActivity . class ) . putExtra ( ItemActivity . EXTRA_ITEM , item ) ) ; }
public void undo ( ) { mUndo . pop ( ) ; mUndo . apply ( ) ; if ( undoSize ( ) == 0 && mActivity . get ( ) != null ) { mActivity . get ( ) . supportInvalidateOptionsMenu ( ) ; } }
public PlaceAndPlateDtoAssembler withId ( long id ) { this . placeId = id ; return this ; }
public void onItemClick ( int position ) { FileData fileData = fileExplorerAdapter . getItem ( position ) ; if ( fileData . isDirectory ( ) ) { loadFiles ( fileData . getPath ( ) ) ; } }
public void run ( ) { filterListAdapter . remove ( filterAddedByBack ) ; }
public boolean isImage ( ) { if ( mime != null && mime . contains ( "image/" ) ) return true ; for ( String s : IMAGE_STRINGS ) { if ( fileName . contains ( s ) ) return true ; } return false ; }
public void onPause ( ) { super . onPause ( ) ; ArtworkManager . getInstance ( getContext ( ) . getApplicationContext ( ) ) . unregisterOnNewAlbumImageListener ( ( AlbumsAdapter ) mAdapter ) ; }
public OstErrors . OstErrorCode getErrorCode ( ) { return mErrorCode ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , Main2Activity . class ) ; startActivity ( i ) ; }
public void onClick ( DialogInterface dialog , int i ) { shareLocationText ( formatLocation ( lastLocation , getResources ( ) . getStringArray ( R . array . link_templates ) [ i ] ) ) ; }
public void setButtonNextVisible ( boolean visible ) { binding . miButtonNext . setVisibility ( visible ? View . VISIBLE : View . INVISIBLE ) ; }
private void resetPressedLink ( int type ) { if ( pressedLink == null || pressedLinkType != type && type != - 1 ) { return ; } resetUrlPaths ( ) ; pressedLink = null ; pressedLinkType = - 1 ; invalidate ( ) ; }
public PostListRequest ( int before ) { super ( PostList . class , PointIm . class ) ; mBefore = before ; }
public synchronized static NotificationsRepository getRepository ( @ NonNull Context context , @ NonNull NotificationsServiceApi notificationsServiceApi ) { repository = new APINotificationProviderRepository ( notificationsServiceApi , context ) ; return repository ; }
private void notifyOnProgress ( final double progress , final long millis ) { Util . runOnMain ( new Runnable ( ) { @ Override public void run ( ) { getListener ( ) . onProgress ( progress , ( int ) millis ) ; } } ) ; }
public void onClick ( View v ) { mPlayers . remove ( mPlayer ) ; updateUi ( ) ; }
public Track ( Championship championship , String id , String name ) { mChampionship = new WeakReference <> ( championship ) ; mId = id ; mMapName = name ; loadMetaInformation ( ) ; }
public void success ( ArrayList < MultiReddit > multiReddits ) { InsertMultireddit . insertMultireddit ( mExecutor , new Handler ( ) , mRedditDataRoomDatabase , multiReddits , mAccountName , ( ) -> { mInsertMultiredditSuccess = true ; sectionsPagerAdapter . stopMultiRedditRefreshProgressbar ( ) ; } ) ; }
public static boolean isTestMode ( ) { return INSTRUMENTED_TEST_RUNNING || ( isDiagnosticMode ( ) && PreferencesUtil . getBoolean ( CaddisflyApp . getApp ( ) , R . string . testModeOnKey , false ) ) ; }
public boolean isOnHomeScreen ( ) { return isOnHomeScreen ( true , true ) ; }
private void updateScreenOrientationValue ( ) { int value = SettingsManager . get ( ) . get ( "app" ) . getInt ( "screen_orientation" , ModelDefaults . APP_SCREEN_ORIENTATION ) ; if ( value != controlledRotationLastValue ) { controlledRotationLastValue = value ; updateScreenOrientation ( ) ; } }
public static boolean isUserTagged ( String username ) { return Reddit . tags . contains ( "user - tag" + username . toLowerCase ( ) ) ; }
public Parcelable getSavedState ( ) { long [ ] adapterSavedState = null ; if ( mAdapter != null ) { adapterSavedState = mAdapter . getExpandedItemsSavedStateArray ( ) ; } return new SavedState ( adapterSavedState ) ; }
public void setTableTeams ( List < Standing > team ) { if ( team == null ) { return ; } mTableTeams . clear ( ) ; mTableTeams . addAll ( team ) ; notifyDataSetChanged ( ) ; }
private LocationCallback mLocationCallback = new LocationCallback ( ) { @ Override public void onLocationResult ( LocationResult locationResult ) { mFrag . onLocationChanged ( locationResult . getLastLocation ( ) ) ; } } ;
public void removeFrameCallback ( ) { isRunning = false ; }
private void updateWatcherUi ( ) { mWatcherRow . setText ( getResources ( ) . getQuantityString ( R . plurals . watcher , mRepository . watchersCount ( ) , mRepository . watchersCount ( ) ) ) ; mWatcherRow . setToggleState ( mIsWatching != null && mIsWatching ) ; }
private WeatherProvider getWeatherProvider ( ) { return mWeatherProvider ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { callback . onPreferenceChanged ( R . id . nav_contacts , Boolean . valueOf ( newValue . toString ( ) ) ) ; return true ; }
public void startPatientUpdateActivity ( long patientId ) { Intent updatePatient = new Intent ( this . getActivity ( ) , PatientInfoActivity . class ) ; updatePatient . putExtra ( ApplicationConstants . BundleKeys . PATIENT_ID_BUNDLE , String . valueOf ( patientId ) ) ; startActivity ( updatePatient ) ; }
public String [ ] getSupportedCipherSuites ( ) { return delegate . getSupportedCipherSuites ( ) ; }
public void onClick ( View view ) { loader . setWallpaper ( image . getLarge ( ) ) ; loader . setType ( WallpaperManager . FLAG_SYSTEM ) ; loader . execute ( ) ; mBottomSheetDialog . dismiss ( ) ; }
public NodeInfo ( ) { super ( ) ; }
public final int getPreferencesXML ( ) { return R . xml . server_preferences ; }
public ImportInspirationsView ( Context context ) { super ( context ) ; this . context = context ; }
public void setNo2 ( int no2 ) { this . no2 = no2 ; }
public void setConnectionID ( long id ) { if ( ( id != - 1 ) && ( ( id < 0 || id > 0xffffffffl ) ) ) { throw new IllegalArgumentException ( "Invalid connectionID " + id ) ; } this . connectionID = id ; }
public Long getGkzSa ( ) { return gkzSa ; }
public void setColor ( @ ColorInt int color ) { this . color = color ; paint . setColor ( color ) ; outlinePaint . setColor ( ColorUtils . isColorLight ( color ) ? Color . BLACK : Color . TRANSPARENT ) ; invalidate ( ) ; }
private void click ( ) { Attachment attachment = images . get ( mViewPager . getCurrentItem ( ) ) ; if ( attachment . getMime_type ( ) . equals ( Constants . MIME_TYPE_VIDEO ) ) { viewMedia ( ) ; } else { } }
public T withTextColorRes ( int textColorRes ) { this . textColor = ColorHolder . fromColorRes ( textColorRes ) ; return ( T ) this ; }
public void onBeforeStep ( ) { onHideKeyboard ( ) ; if ( mViewPager . getCurrentItem ( ) > 0 ) { mViewPager . setCurrentItem ( mViewPager . getCurrentItem ( ) - 1 , true ) ; } else { onBackPressed ( ) ; } }
public void onClick ( View view ) { mOnClickListenerMovies . OnItemClick ( mMoviesList [ getAdapterPosition ( ) ] ) ; }
public ReportAdapter . ReportViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card_view_reports , parent , false ) ; return new ReportViewHolder ( v ) ; }
public static AlbumCoverFragment newInstance ( final Song song ) { AlbumCoverFragment frag = new AlbumCoverFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putSerializable ( SONG_ARG , song ) ; frag . setArguments ( args ) ; return frag ; }
public ArrayList < IndexedSong > getOriginalPlayingQueue ( ) { return backupQueue ; }
public List < Item > getGroupItems ( ) { return items ; }
public void run ( ) { String res = Statusgo . CallRPC ( payload ) ; callback . invoke ( res ) ; }
public static StorageHelper getInstance ( Context context ) { if ( sStorage == null ) { sStorage = new StorageHelper ( context ) ; } return sStorage ; }
public void onRetry ( ) { SettingsFragment . showLoginDialog ( MainActivity . this , getSupportFragmentManager ( ) , LoginManager . load ( PreferenceManager . getDefaultSharedPreferences ( MainActivity . this ) ) ) ; }
private TermuxFloatAppSharedPreferences ( @ Nonnull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; setFontVariables ( context ) ; }
public void onAnimationEnd ( Animator animation ) { super . onAnimationEnd ( animation ) ; _runningObjectAnimators . remove ( view ) ; setFinalAlphaAndVisibility ( view , slideUp ) ; }
public void writeString ( String s ) { try { writeByteArray ( s . getBytes ( "UTF - 8" ) ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , "write string error" ) ; } }
public static void enqueueWork ( Context context , Intent work ) { enqueueWork ( context , PublicizeUpdateService . class , PUBLICIZE_UPDATE_SERVICE_JOB_ID , work ) ; }
public void onClick ( View v ) { String name = input . getText ( ) . toString ( ) ; ( new SongsManager ( getActivity ( ) ) ) . addPlaylist ( name ) ; playlistGridAdapter . notifyDataSetChanged ( ) ; alertDialog . cancel ( ) ; }
public Matrix ( int r , int c , Type t ) { this . NumberofRows = r ; this . NumberofCols = c ; this . type = t ; this . name = "New Normal 3" ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; getMenuInflater ( ) . inflate ( R . menu . main , menu ) ; return true ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsFilter . class ) ; startActivity ( i ) ; }
private ShapeData ( PointF initialPoint , boolean closed , List < CubicCurveData > curves ) { this . initialPoint = initialPoint ; this . closed = closed ; this . curves . addAll ( curves ) ; }
public static FriendFCMMessage fromRemoteMessage ( @ NonNull RemoteMessage remote ) { FriendFCMMessage message = new FriendFCMMessage ( ) ; message . uid = Integer . parseInt ( remote . getData ( ) . get ( "uid" ) ) ; return message ; }
private int getRandomNumberSlowly ( ) throws UnsupportedOperationException { try { Thread . sleep ( getRandomNumber ( ) *4000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } return getRandomNumber ( ) ; }
public void showPhotoEditDialog ( Photo photo , MutableString listener ) { PhotoDialogHelper . show ( getActivity ( ) , photo , listener ) ; }
public Object then ( @ NonNull Task < TransportService > task ) throws Exception { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . ENABLE_LOW_POWER , null , taskCompletionSource ) ; return null ; }
public void drawBackground ( Canvas canvas ) { drawDrawable ( canvas , backgroundRectangle , startingX , startingY , endingX , endingY ) ; }
public void clear ( ) { this . outgoingQueue . clear ( ) ; this . onNetworkQueueChange ( true ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( new RowView ( parent . getContext ( ) , viewType ) ) ; }
public void setLinkMode ( LINK_MODE mode ) { this . linkMode = mode ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "devesh . ephrine . depression . self . diagnosis" , appContext . getPackageName ( ) ) ; }
public void run ( ) { resultToFragment . sendData ( print ) ; }
public void setPages ( Set < Integer > pages ) { this . pages = pages ; }
public void setEveningTime ( String time ) { putString ( TIME_EVENING , time ) ; }
private static void saveStringPreferenceNow ( Context context , String key , String value ) { SharedPreferences . Editor appPreferences = getDefaultSharedPreferences ( context . getApplicationContext ( ) ) . edit ( ) ; appPreferences . putString ( key , value ) ; appPreferences . commit ( ) ; }
private void updateFilterRules ( int filterId ) throws IOException { final List < String > rules = ServiceApiClient . downloadFilterRules ( context , filterId ) ; filterRuleDao . setFilterRules ( filterId , rules ) ; }
public com . google . protobuf . Any . Builder addTokensBuilder ( ) { return getTokensFieldBuilder ( ) . addBuilder ( com . google . protobuf . Any . getDefaultInstance ( ) ) ; }
private void registerListener ( Context context ) { if ( context instanceof OnOverviewFragmentInteractionListener ) { mListener = ( OnOverviewFragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnOverviewFragmentInteractionListener" ) ; } }
public static void startActionUpdateWidgets ( Context context ) { Intent intent = new Intent ( context , SensorIntentService . class ) ; intent . setAction ( ACTION_UPDATE_WIDGET ) ; context . startService ( intent ) ; }
private void initGlobalPrefs ( ) { binding . globalOptionPrefs . setChecked ( mPrefs . isBirthdayGlobalEnabled ( ) ) ; binding . globalOptionPrefs . setOnClickListener ( view -> changeGlobalPrefs ( ) ) ; }
public void setLastAttempt ( Timestamp lastAttempt ) { this . lastAttempt = lastAttempt ; }
public NoticonTextView ( Context context ) { super ( context , null ) ; this . setTypeface ( TypefaceCache . getTypefaceForTypefaceName ( context , FONT_NAME ) ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { dialog . dismiss ( ) ; }
private void initComponents ( ) { initRecyclerView ( ) ; initDataSwipeRefresh ( ) ; }
private final void cancelJob ( ) { if ( this . mCursor != null ) { String tmp = this . mText . getText ( ) . toString ( ) ; this . mText . setText ( this . mOriginalContent ) ; this . mOriginalContent = tmp ; } }
public void onMissing ( Detector . Detections < Barcode > detectionResults ) { mOverlay . remove ( mGraphic ) ; }
public void showSuggestionsList ( ) { animateLastRequests ( 0 , getListHeight ( false ) ) ; }
public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { if ( count != after ) { mPostTitleOrBodyTextChanged = true ; mActivity . supportInvalidateOptionsMenu ( ) ; } }
private void initExportToStockPrefs ( ) { binding . exportToStockPrefs . setChecked ( mPrefs . isStockCalendarEnabled ( ) ) ; binding . exportToStockPrefs . setOnClickListener ( view -> changeExportToStockPrefs ( ) ) ; }
public void setSwapTargetTranslationInterpolator ( Interpolator interpolator ) { mSwapTargetTranslationInterpolator = interpolator ; }
public @ Nullable WindowAndMediaPeriodId getReadingMediaPeriod ( ) { return readingMediaPeriod ; }
public Wallet ( List < String > mnemonic ) throws IOException , MnemonicException { this ( mnemonic , "" ) ; }
public void setPrice ( BigDecimal [ ] [ ] price ) { Price = price ; }
public static void setAudibleMode ( @ NonNull String audibleMode ) { mode = AudibleModes . get ( audibleMode ) ; min = mode . defaultMin ; max = mode . defaultMax ; precision = mode . defaultPrecision ; }
public void setCenterJustify ( boolean centerJustify ) { this . centerJustify = centerJustify ; }
private void acceptDeletion ( ) { if ( mLastDeletionSavepointId != null ) DBSubjects . getInstance ( ) . releaseSavepoint ( mLastDeletionSavepointId ) ; NotificationGeneralHelper . removeAllAlarmsForSubject ( this , mLastDeletedSubjectId ) ; mLastDeletionSavepointId = null ; mDeletionSnackbar = null ; }
public BarcodeWidget createWidget ( FormEntryPrompt prompt ) { return new BarcodeWidget ( widgetTestActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) , waitingForDataRegistry , cameraUtils ) ; }
public Title createFromParcel ( Parcel source ) { return new Title ( source ) ; }
public boolean canAttack ( @ NotNull Char enemy ) { return adjacent ( enemy ) && ! pacified ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( activity ) . inflate ( itemLayoutRes , parent , false ) ; return new ViewHolder ( view ) ; }
public DynamicDialogFragment setIsCancelable ( boolean cancelable ) { this . mIsCancelable = cancelable ; setCancelable ( cancelable ) ; return this ; }
public void add ( AppInfo info ) { if ( ! infos . contains ( info ) ) { infos . add ( info ) ; update ( false ) ; } }
public PersonalKey [ ] newArray ( int size ) { return new PersonalKey [ size ] ; } ;
private void onNotifyOnOff ( ) { if ( Prefs . isChatMuted ( dcContext . getChat ( chatId ) ) ) { setMuted ( 0 ) ; } else { MuteDialog . show ( this , duration -> setMuted ( duration ) ) ; } }
public String name ( ) { return getClassParam ( "Name" , Game . getVar ( R . string . Item_Name ) ) ; }
public void calcMinMax ( float fromX , float toX ) { for ( T set : mDataSets ) { set . calcMinMax ( fromX , toX ) ; } calcMinMax ( ) ; }
public void setActivity ( Activity context ) { FruitRadarNotification . initialize ( ) ; TilesCache . initializeCachesOnDirectory ( context . getCacheDir ( ) ) ; }
public static IconCache getInstance ( ) { if ( theInstance == null ) theInstance = new IconCache ( ) ; return theInstance ; }
public void onEventMainThread ( ServiceEvents . LocationUpdate locationUpdate ) { DisplayLocationInfo ( locationUpdate . location ) ; }
public TcpForwarder ( InetSocketAddress form , InetSocketAddress to , String ruleName ) { super ( form , to , ruleName ) ; }
public static < T > Resource < T > error ( String msg , @ Nullable T data ) { return new Resource <> ( ERROR , data , msg ) ; }
public void hide ( int delay ) { try { anim . scaleOut ( floatingActionButton , delay , 400 , "fabOut" ) ; } catch ( NullPointerException e ) { Log . i ( "hideFab" , "Fab is not initialized" ) ; } }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent event ) { if ( actionId == EditorInfo . IME_ACTION_DONE && ! TextUtils . isEmpty ( v . getText ( ) ) ) { sedEditTextContent ( ) ; return true ; } return false ; }
public void start ( Attributes attributes ) { mCurrentBoard = new Board ( Integer . parseInt ( attributes . getValue ( Bookmark . Xml . BOARD_ATTRIBUTE_ID ) ) ) ; }
public Builder id ( int id ) { this . id = id ; return this ; }
public void setEntryId ( int entryId ) { mEntryId = entryId ; }
private void handleNow ( ) { Log . d ( TAG , "Short lived task is done . " ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { if ( post . getUid ( ) . equals ( getUid ( ) ) ) getMenuInflater ( ) . inflate ( R . menu . menu_read , menu ) ; return true ; }
public static void init ( ) { blockItemSheet = getPackedTextureSheet ( AssetType . block , AssetType . item ) ; getPackedTextureSheet ( AssetType . hud , AssetType . world ) ; }
public void handleEvent ( DcEvent event ) { getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; }
public void onClick ( View v ) { OnClickToastOrActionC . kindAction ( mContext , mAction ) ; }
public int compareTo ( Object otherSyncGroup ) { return this . syncGroupName . compareToIgnoreCase ( ( ( SyncGroup ) otherSyncGroup ) . syncGroupName ) ; }
public void onPageFinished ( String url ) { showUi ( ) ; }
public TeacherPickerAdapter ( Context context , ArrayList < STeacher > teachers ) { super ( context , R . layout . spinner_teacher_picker , teachers ) ; AppComponentProvider . getComponent ( ) . inject ( this ) ; this . context = context ; this . teachers = teachers ; }
public StationsAdapter ( onStationListener listener ) { this . listener = listener ; }
public void onGroupItemClicked ( MultiLevelListView parent , View view , Object item , ItemInfo itemInfo ) { TetroidNode node = ( TetroidNode ) item ; if ( ! node . isNonCryptedOrDecrypted ( ) ) { decryptStorage ( node ) ; } }
public void setScenery ( SceneryData data ) { sceneryData = data ; character . setScenery ( mapKey , data , characters , items ) ; scenery . setScenery ( mapKey , data , items ) ; }
public boolean verifyTimestamp ( long timestamp ) { return timestamp >= minTimestamp ; }
public void onReceive ( Context context , Intent intent ) { double lat = intent . getDoubleExtra ( "lat" , 0 ) ; double lon = intent . getDoubleExtra ( "lon" , 0 ) ; currentLocation = new LatLng ( lat , lon ) ; }
public void onFailure ( int statusCode , Client . Headers headers , int state ) { thread . runOnUI ( ( ) -> newsRecyclerViewAdapter . setState ( R . id . load_more ) ) ; }
public void getAddress ( View view ) { new IntentIntegrator ( this ) . setCaptureActivity ( SmallCaptureActivity . class ) . setRequestCode ( ADDRESS_REQUEST_CODE ) . initiateScan ( ) ; }
private AscendingAlphabeticalClassifier ( final String letter ) { super ( letter ) ; }
public XYMarkerView ( Context context , ValueFormatter xAxisValueFormatter ) { super ( context , R . layout . custom_marker_view ) ; this . xAxisValueFormatter = xAxisValueFormatter ; tvContent = findViewById ( R . id . tvContent ) ; format = new DecimalFormat ( "### . 0" ) ; }
public Double getPreferredMinPosition ( ) { LocalDate date = new LocalDate ( year , 1 , 1 ) ; LogUtil . INSTANCE . d ( TAG , "Preferred yearly min : %s" , date ) ; return dateToPosition ( date ) ; }
public Builder setItems ( @ ArrayRes int itemsId , final OnClickListener listener ) { P . mItems = P . mContext . getResources ( ) . getTextArray ( itemsId ) ; P . mOnClickListener = listener ; return this ; }
public boolean matchesSafely ( HostListActivity . HostAdapter . ViewHolder holder ) { return holder . host . getNickname ( ) . matches ( content ) ; }
public void changed ( ChangeEvent event , Actor actor ) { save . run ( ) ; game . setScreen ( new MainScreen ( game , uiAssets ) ) ; }
public int getCode ( ) { return getClick ( ) . code ; }
public int getCurrentWindowIndex ( ) { if ( shouldMaskPosition ( ) ) { return maskingWindowIndex ; } else { return playbackInfo . timeline . getPeriod ( playbackInfo . periodId . periodIndex , period ) . windowIndex ; } }
public ItemManager . WebItem getSelectedItem ( ) { return mSelectedItem ; }
public final void activatePixelMatrix ( float [ ] buf , int offset ) { GLES20 . glUniformMatrix4fv ( mPixelMatrixUniformHandle , 1 , false , buf , offset ) ; }
public MibCatalogArchiveManager ( Activity context , Uri locationToZip ) { this . context = context ; this . locationToZip = locationToZip ; this . archiveName = getArchiveName ( locationToZip ) ; }
public void pickUp ( ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . pickUp ( ) ; }
public static String getRandomUserFocusedMessage ( Context context ) { return getMessageToDisplay ( context , R . array . user_focused_messages , MOST_RECENT_USER_FOCUSED_MESSAGE_INDEX_KEY ) ; }
public static void closeSilently ( Closeable c ) { if ( c == null ) return ; try { c . close ( ) ; } catch ( Throwable t ) { } }
public ShaderWallpaperView ( ) { super ( ShaderWallpaperService . this , ShaderEditorApplication . preferences . isBatteryLow ( ) ? GLSurfaceView . RENDERMODE_WHEN_DIRTY : GLSurfaceView . RENDERMODE_CONTINUOUSLY ) ; }
public void setStartDate ( int startDate ) { this . startDate = startDate ; }
public void uploadFile ( List < File > files ) { for ( File f : files ) { tracer . debug ( f . getName ( ) ) ; uploadFile ( f . getName ( ) ) ; } }
public TLRPC . TL_stickerSet getStickersSet ( ) { return stickersSet ; }
static public boolean isExternalStorageWritable ( ) { String state = Environment . getExternalStorageState ( ) ; return Environment . MEDIA_MOUNTED . equals ( state ) ; }
public ExtendedSoapSerializationEnvelope CreateSoapEnvelope ( ) { ExtendedSoapSerializationEnvelope __envelope = createEnvelope ( ) ; SoapObject __soapReq = new SoapObject ( "http : "HelloWorld" ) ; __envelope . setOutputSoapObject ( __soapReq ) ; PropertyInfo __info = null ; return __envelope ; }
public List < BluetoothGattService > getSupportedGattServices ( ) { if ( mBluetoothGatt == null ) return null ; return mBluetoothGatt . getServices ( ) ; }
public final void resetPosition ( long positionUs ) throws ExoPlaybackException { streamIsFinal = false ; onPositionReset ( positionUs , false ) ; }
public AreaReference setFromAreaReference ( AreaReference areaReference ) { this . areaX = areaReference . areaX ; this . areaZ = areaReference . areaZ ; this . hashCode = areaReference . hashCode ; return this ; }
public MyFloatingActionButton ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public static final void info ( AppCompatActivity activity , String tag , String message ) { info ( activity . getSupportFragmentManager ( ) , tag , message ) ; }
public void onNotificationDeleteError ( String error ) { mDeviceDetailView . showNotificationDeletedError ( error ) ; }
public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder viewHolder , int i ) { if ( viewHolder instanceof ViewHolderItemCategoryHorizontal ) { ( ( ViewHolderItemCategoryHorizontal ) viewHolder ) . bindItemCategory ( dataset . get ( i ) ) ; } }
private void loadMedal ( ) { if ( person . getMedal ( ) != - 1 ) { medalha . setImageDrawable ( getResources ( ) . getDrawable ( person . getMedal ( ) ) ) ; medalha . setVisibility ( View . VISIBLE ) ; } }
private void setNewSwitchButtonText ( ) { @ StringRes int switchButtonTextRes ; if ( currentGameType == GameType . BASE ) { switchButtonTextRes = R . string . switch_base_game ; } else { switchButtonTextRes = R . string . switch_royal ; } switchGameButton . setText ( switchButtonTextRes ) ; }
public void onServiceDisconnected ( int profile ) { Log . w ( TAG , "onServiceDisconnected" ) ; if ( profile == BluetoothProfile . HEADSET ) { bluetoothHeadset = null ; handleBluetoothStateChange ( ) ; } }
public static void clearLastAdded ( Context context ) { PreferencesUtility . getInstance ( context ) . setLastAddedCutoff ( System . currentTimeMillis ( ) ) ; }
public boolean containsULChannel ( double channel ) { return channel > uplink_channel_lower_bound && channel < uplink_channel_upper_bound ; }
private void markNextCardAsGood ( Sched sched ) { Card toAnswer = sched . getCard ( ) ; assertThat ( toAnswer , notNullValue ( ) ) ; sched . answerCard ( toAnswer , AbstractFlashcardViewer . EASE_2 ) ; }
public void onSortSelected ( final PostListingController . Sort order ) { postListingController . setSort ( order ) ; requestRefresh ( RefreshableFragment . POSTS , false ) ; }
public Boolean isLocal ( ) { return local ; }
public MarkerHolder ( MapMarker mapMarker , Marker marker ) { this . mapMarker = mapMarker ; this . marker = marker ; }
public Long getNumThreads ( ) { return numThreads ; }
public StartScreenDialog ( @ NonNull Activity context , Blurry . ImageComposer image ) { super ( context , R . style . AppTheme_Dialog_FullScreen_Fading ) ; activity = context ; this . image = image ; setCancelable ( false ) ; }
public int getIntrinsicHeight ( ) { return AndroidUtilities . dp ( 10 ) ; }
public boolean fire ( ) { if ( fire . isFire ( ) ) { fire . turnOffFire ( ) ; return true ; } return false ; }
public void deleteTodoList ( String uuid ) { DeleteTodoListInteractor interactor = new DeleteTodoListInteractorImpl ( mExecutor , mMainThread , this , mPreviewRepository , uuid ) ; interactor . execute ( ) ; }
public void onClick ( View v ) { if ( forwardingMessages != null ) { forwardingMessages . clear ( ) ; } showReplyPanel ( false , null , null , foundWebPage , true , true ) ; }
public byte [ ] getBytesFromString ( String string ) { return string . getBytes ( Charset . defaultCharset ( ) ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_browse_product , parent , false ) ; return new ViewHolder ( view ) ; }
public Long addNewBasicModel ( String name ) { return addNewCustomModel ( name , BasicModel . FIELDS , BasicModel . CARD_NAMES , BasicModel . QFMT , BasicModel . AFMT , null , null ) ; }
private final TriggerableThread readThread = new TriggerableThread ( new Runnable ( ) { public void run ( ) { doRead ( ) ; } } , 0 ) ;
public void setIsModerator ( boolean isModerator ) { TextView moderatorIndicatorTextView = ( TextView ) view . findViewById ( R . id . item_person_moderator_indicator ) ; moderatorIndicatorTextView . setVisibility ( isModerator ? View . VISIBLE : View . GONE ) ; }
public void onStartListening ( ) { resetTileStatus ( ) ; }
public int compareTo ( FilesAdapterDisplayObject another ) { if ( ! ( another instanceof FilesAdapterDisplayFolder ) ) { return super . compareTo ( another ) ; } return folder . compareTo ( ( ( FilesAdapterDisplayFolder ) another ) . folder ) ; }
public void setmDrawableImage ( int mDrawableImage ) { this . mDrawableImage = mDrawableImage ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; selectItem ( mCurrentSelectedPosition ) ; }
public long getAskedRatingOn ( ) { return preferences . getLong ( "askedRatingOn" , 0 ) ; }
public void onCreate ( ) { super . onCreate ( ) ; if ( BuildConfig . DEBUG ) Logger . log ( "SensorListener onCreate" ) ; reRegisterSensor ( ) ; }
public int getType ( ) { return Type ; }
private byte [ ] bitmapToByteArray ( Bitmap image ) { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; image . compress ( Bitmap . CompressFormat . JPEG , 100 , outputStream ) ; return outputStream . toByteArray ( ) ; }
public void fromJson ( JSONObject json ) { try { sec = json . getInt ( "sec" ) ; usec = json . getInt ( "usec" ) ; } catch ( JSONException e ) { e . printStackTrace ( ) ; } }
public long selected ( ) { return mCol . get_config_long ( "curDeck" ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . Transaction prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onRefresh ( ) { hideError ( ) ; mPresenter . loadProgram ( ) ; }
public void onPause ( ) { super . onPause ( ) ; savedSharedData . unregisterOnSharedPreferenceChangeListener ( this ) ; activityCounter -- ; handlerStopBackgroundMusic . sendEmptyMessageDelayed ( 0 , 100 ) ; }
private void quit ( ) { pause ( ) ; playingNotification . stop ( ) ; closeAudioEffectSession ( ) ; getAudioManager ( ) . abandonAudioFocus ( audioFocusListener ) ; stopSelf ( ) ; }
public void onCancelled ( byte [ ] cover ) { if ( mListener != null ) mListener . onLoadingCancelled ( ) ; mListener = null ; }
public boolean removeAll ( Collection < ? > c ) { return values . removeAll ( c ) ; }
public static int getHardModeButtonsColor ( ) { return Settings . colorMode == Constants . COLOR_MODE_DAY ? 0xff373737 : 0xff787878 ; }
public static boolean store ( QueryResult result ) { QueryResultsStorage storage = theStorage ; if ( storage != null ) { storage . results . add ( result ) ; return ( storage == theStorage ) ; } return false ; }
public void stop ( ) throws RemoteException { mService . get ( ) . stop ( ) ; }
public String getRecentlyPlayedCutoffText ( Context context ) { return getCutoffText ( LAST_PLAYED_CUTOFF , context ) ; }
public void close ( ) { setHeight ( 0 ) ; }
public String getEnteredName ( ) { return mNameEditText . getText ( ) . toString ( ) . trim ( ) ; }
public void onHomeButton ( View v ) { Intent i = new Intent ( this , MainActivity . class ) ; i . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_CLEAR_TASK ) ; finish ( ) ; startActivity ( i ) ; }
public void onUnsubscribe ( ) { if ( postListingFragment != null ) postListingFragment . onUnsubscribe ( ) ; }
public boolean layoutDependsOn ( CoordinatorLayout parent , RelativeLayout child , View dependency ) { return dependency instanceof Snackbar . SnackbarLayout ; }
public static ArrayList < MuscleSet > fromString ( String value ) { Type listType = new TypeToken < MuscleSet > ( ) { } . getType ( ) ; return new Gson ( ) . fromJson ( value , listType ) ; }
public void onErrorResponse ( VolleyError error ) { Log . e ( General . ERROR_LOG , error . toString ( ) ) ; }
public void setUp ( ) { controller = Robolectric . buildService ( AuthenticatorService . class ) ; service = controller . attach ( ) . create ( ) . get ( ) ; }
public Double getTemperatureMinTime ( ) { return temperatureMinTime ; }
public void onSetStreamVolume ( float volume ) { Log . d ( TAG , "Session onSetStreamVolume : " + volume + " ( " + mSessionNumber + " ) " ) ; mPlayer . setVolume ( volume ) ; }
public static List < User > transformUsers ( List < VKApiUser > dtos ) { return MapUtil . mapAll ( dtos , Dto2Model : : transformUser ) ; }
public void afterTextChanged ( Editable s ) { if ( layout . getError ( ) != null && Fandem . isCorrectPeerKey ( s . toString ( ) ) ) { layout . setError ( null ) ; } }
public static BookFilterPagerFragment newInstance ( ) { return new BookFilterPagerFragment ( ) ; }
private void assertUrlsAre ( String text , String . . . urls ) { LinkedHashSet < String > expected = new LinkedHashSet <> ( ) ; Collections . addAll ( expected , urls ) ; Assert . assertEquals ( expected , UrlUtils . extractUrls ( text ) ) ; }
private MyAppAdapter ( List < Data > apps , Context context ) { this . parkingList = apps ; this . context = context ; }
public void run ( ) { showError ( R . string . msg_img_loading_error ) ; }
public static String formatDate ( Date date ) { return sThreadSafeSimpleDateFormat . formatDate ( date ) ; }
public SpeedWalkDirectionEditorDialog ( Context context , DirectionEditorDoneListener doneListener , DirectionData old , IStellarService service ) { super ( context ) ; this . doneListener = doneListener ; oldData = old ; isEditor = true ; this . service = service ; }
public void onErrorResponse ( VolleyError error ) { Toast . makeText ( getApplicationContext ( ) , error . getMessage ( ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public void showWarningMessage ( WarningMessageType messageType ) { if ( ! shouldShowWarningMessages ( ) ) { return ; } activeMessages . add ( messageType ) ; displayMessageForMessageType ( getHighestPriorityMessage ( ) ) ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseTranscoderStatus prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public static boolean isRecordsLoadedEnough ( int recordsNum ) { return ( BuildConfig . DEBUG && DEBUG_RECORDS_NUM > 0 && recordsNum >= DEBUG_RECORDS_NUM ) ; }
private Runnable refreshRun = new Runnable ( ) { @ Override public void run ( ) { adapter . notifyDataSetChanged ( ) ; } } ;
public void unregisterChildAdapterTag ( ComposedChildAdapterTag tag ) { getChildAdapterTags ( ) . remove ( tag ) ; }
public static void putFoodTypeVideos ( Resources res , String food , int urlId ) { foodTypeVideos . put ( food , getVideoLink ( res . getString ( urlId ) ) ) ; }
public void setDest ( String dest ) { this . dest = dest ; }
public void fromForecastPojo ( OpenWeatherForecastData pojo ) { mOpenWeatherForecastData = pojo ; }
public final static boolean isValidEmail ( CharSequence target ) { return ! TextUtils . isEmpty ( target ) && android . util . Patterns . EMAIL_ADDRESS . matcher ( target ) . matches ( ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . SINH_INVERSE ) ; }
public AppThemeManager ( SharedPreferences preferences ) { this . preferences = preferences ; String themeId = preferences . getString ( PreferencesConstants . PREFERENCE_THEME , "0" ) ; appTheme = AppTheme . getTheme ( Integer . parseInt ( themeId ) ) . getSimpleTheme ( ) ; }
public void closeSearch ( ) { clearFocus ( ) ; ( ( InputMethodManager ) getContext ( ) . getSystemService ( Context . INPUT_METHOD_SERVICE ) ) . hideSoftInputFromWindow ( getWindowToken ( ) , 0 ) ; }
public void setGraphMonthXLabel ( String [ ] values ) { barChartMonth . getXAxis ( ) . setValueFormatter ( new AxisValueFormatter ( values ) ) ; }
public void onHighlightClicked ( Highlight highlight ) { finishAndGoTo ( highlight . pageInfo . pageId ) ; }
public void getCORVOSession ( Callback errorCallback , Callback successCallback ) { try { successCallback . invoke ( fileWriter . getCORVOSession ( ) ) ; } catch ( Exception e ) { errorCallback . invoke ( e . getMessage ( ) ) ; } }
public void setJahr ( int jahr ) { this . _jahr = jahr ; }
public void onResume ( ) { super . onResume ( ) ; Toolbar toolbar = ( Toolbar ) getActivity ( ) . findViewById ( R . id . t_subreddit ) ; toolbar . setTitle ( "LiveThread" ) ; toolbar . setNavigationIcon ( R . mipmap . ic_launcher ) ; }
public void close ( ) { killWorkingThread ( ) ; killWriteThread ( ) ; stopFlowControlThread ( ) ; connection . releaseInterface ( mInterface ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_view_documents , menu ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public void setKanjiElementId ( int kanjiElementId ) { mKanjiElementId = kanjiElementId ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . openchat_fragment , menu ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelableArrayList ( SAVE_DATA , fileList ) ; outState . putSerializable ( SAVE_PATH , path ) ; outState . putParcelable ( SAVE_SCROLL_STATES , directoryScrollPositions ) ; }
public void testInit_withAttrs ( ) throws Exception { Plot plot = new MockPlot ( "MockPlot" ) ; AttributeSet attrs = mock ( AttributeSet . class ) ; plot . init ( RuntimeEnvironment . application , attrs , 0 ) ; }
public long setTotal ( long total ) { totalBytes = total ; curBytes = 0 ; return 0 ; }
public SearchOptions createFromParcel ( Parcel source ) { return new SearchOptions ( source ) ; }
public void onDetach ( ) { super . onDetach ( ) ; onMovieSelectedListener = null ; }
public void run ( ) { ReaderTagList interestTags = new ReaderTagList ( ) ; interestTags . addAll ( parseInterestTags ( jsonObject ) ) ; EventBus . getDefault ( ) . post ( new InterestTagsFetched ( interestTags ) ) ; taskCompleted ( UpdateTask . INTEREST_TAGS ) ; }
public void setVisibility ( boolean isVisible ) { if ( isVisible ) { mVisibility = "visible" ; } else { mVisibility = "hidden" ; } }
public Size previewSize ( ) { return mPreview ; }
public Distance ( double distance , Unit unit ) { if ( unit == Unit . MILE ) { distanceMi = distance ; distanceKm = mileToKm ( distance ) ; } else { distanceKm = distance ; distanceMi = kmToMile ( distance ) ; } }
public TagViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . site_settings_tag_list_row , parent , false ) ; return new TagListAdapter . TagViewHolder ( view ) ; }
private EncryptedState ( DatabaseFile file ) { super ( true ) ; _file = file ; }
private void updateLangSummary ( ) { languagePrefs . setSummary ( languagePrefs . getEntry ( ) ) ; }
public boolean isDrawBackgroundEnabled ( ) { return drawBackground ; }
private OpenHelper ( Context context ) { super ( context , "shaders . db" , null , 5 ) ; this . context = context ; }
public void cancelFind ( ) { if ( findInProgress ) { app . unregisterReceiver ( mReceiver ) ; mBt . cancelDiscovery ( ) ; findInProgress = false ; onStatusChange ( "Enabled" ) ; } }
private ActivityViewHeaderHolder ( View itemView ) { super ( itemView ) ; title = ( TextView ) itemView . findViewById ( R . id . title_header ) ; }
public StreamTracksHorizontalAdapter ( List < Track > streamList , Context ctx ) { this . streamList = streamList ; this . ctx = ctx ; imgLoader = new ImageLoader ( HomeActivity . ctx ) ; }
public void onReceive ( Context context , Intent intent ) { String workoutName = intent . getExtras ( ) . getString ( CalcExtremumValuesTask . FANCY_NAME ) ; editExportName . setText ( workoutName ) ; }
public boolean onLongClick ( View v ) { currentCalculation += "gcd ( " ; displayCalculation += "GCD ( " ; calculationView . setText ( displayCalculation ) ; return true ; }
public TouchInterceptHorizontalScrollView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public static HaprampPreferenceManager getInstance ( ) { if ( mInstance == null ) { mInstance = new HaprampPreferenceManager ( 0 ) ; } return mInstance ; }
public void showFilterDialog ( ) { FilterContestDialogFragment filterContestDialogFragment = new FilterContestDialogFragment ( ) ; filterContestDialogFragment . show ( getFragmentManager ( ) , "filter" ) ; }
public void onLogCollectionUploadStateChanged ( final Core lc , final LogCollectionUploadState state , final String info ) { Lg . w ( "onLogCollectionUploadStateChanged : state = " , state , " info = " , info ) ; }
public void onClick ( View v ) { if ( pager . getCurrentItem ( ) == 3 ) { finishOnboarding ( ) ; } else { pager . setCurrentItem ( pager . getCurrentItem ( ) + 1 , true ) ; } }
public void setCanopySerial ( String canopySerial ) { this . canopySerial = canopySerial ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnGetProfile ) listener = ( OnGetProfile ) context ; }
public void rest ( boolean tillHealthy ) { spendAndNext ( TIME_TO_REST ) ; if ( ! tillHealthy ) { getSprite ( ) . showStatus ( CharSprite . DEFAULT , Game . getVar ( R . string . Hero_Wait ) ) ; } restoreHealth = tillHealthy ; }
public void afterTextChanged ( Editable editable ) { String method = editable . toString ( ) ; if ( apiMethods . has ( method ) ) db . updateParam ( "_method" , method ) ; updateMethod ( ) ; }
public static boolean shouldShowGutenbergInfoPopupPhase2ForNewPosts ( String siteURL ) { return getBooleanPrefForKeyAndURL ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS_PHASE_2 , siteURL ) ; }
public CircularProgressDrawable ( int style , Context context ) { super ( new Drawable [ ] { new CircularProgressBackgroundDrawable ( ) , new SingleCircularProgressDrawable ( style ) , new SingleCircularProgressDrawable ( style ) , } , context ) ; }
public CreateGroupRequest ( int uid , String groupName ) { this . uid = uid ; this . groupName = groupName ; }
public int getChargeAlert ( ) { return mSharedPref . getInt ( CHARGE_ALERT , 95 ) ; }
private static String withUri ( String name ) { return "uri : " + name ; }
public Integer getId ( ) { return idOptiune ; }
public void setId ( Integer id ) { this . id = id ; }
public String name ( ) { return Game . getVar ( R . string . ChaosStaff_Name ) ; }
public void showLoadingIcon ( ) { setProgressBarIndeterminate ( true ) ; }
public void setLines ( String [ ] lines ) { this . lines = lines ; }
public PreferencesUtility getPreferencesUtility ( ) { return PreferencesUtility . getInstance ( App . this ) ; }
public static void setUploadToStrava ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_STRAVA , value ) . commit ( ) ; }
public char charAt ( int index ) { return arr [ start + index ] ; }
public Long getInstallationTime ( ) { return sharedPreferences . getLong ( KEY_LAST_COMMUNICATION_DATE , 0L ) ; }
public void onResume ( ) { super . onResume ( ) ; Reddit . setDefaultErrorHandler ( this ) ; }
public static void init ( Setup setup ) { Setup . setup = setup ; }
public MessagePatch setBody ( String body ) { this . body = body ; return this ; }
public void save ( SharedPreferences . Editor prefsEditor ) { prefsEditor . putBoolean ( PREF_IS_RUNNING , isRunning ) ; prefsEditor . putBoolean ( PREF_IS_PAUSED , isPaused ) ; prefsEditor . putLong ( PREF_START_TIME , startTime ) ; prefsEditor . putLong ( PREF_PAUSE_TIME , pauseTime ) ; }
private static boolean makeQuranDatabaseDirectory ( Context context ) { return makeDirectory ( getQuranDatabaseDirectory ( context ) ) ; }
public Districts getDistrictsTable ( ) { return mDistrictsTable ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { channel_id = stream . readInt32 ( exception ) ; max_id = stream . readInt32 ( exception ) ; }
public Completable addUser ( int accountId , int userId ) { return networker . vkDefault ( accountId ) . fave ( ) . addUser ( userId ) . toCompletable ( ) ; }
public TrainingBlogPost ( String postID , String link , String title , String content , String published ) { this . postID = postID ; this . link = link ; this . title = title ; this . content = content ; this . published = published ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . recordStopped , send == 2 ? 1 : 0 ) ; }
public void error ( int errorCode , Avatar avatar ) { finishInitialSetup ( avatar ) ; }
public boolean isAReplacer ( ) { return ( oldTeacher != null || subject != null ) && ! oldTeacher . equals ( "" ) && ! subject . equals ( "" ) ; }
public List < Song > getPlayingQueue ( ) { return playingQueue ; }
public void onBindViewHolder ( ContactEditViewHolder holder , int position ) { holder . bind ( position , contacts . get ( position ) , glideRequests , eventListener ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "schedule_attestations" ) ) { return ; } clearLocalCache ( ) ; }
public String desc ( ) { return Game . getVar ( R . string . WarHammer_Info ) ; }
public Hud ( Assets assets , Stage stage ) { mRoot = new AnchorGroup ( ) ; BUTTON_SIZE_PX = assets . findRegion ( "hud - right" ) . getRegionWidth ( ) ; stage . addActor ( mRoot ) ; }
public ShamanArmor ( ) { name = Game . getVar ( R . string . ElfArmor_Name ) ; image = 19 ; hasHelmet = true ; coverHair = true ; }
private String fetchText ( QuestionTextType type ) { switch ( type ) { case KANJI : if ( kanji != null ) return kanji ; case KANA : if ( kana != null ) return kana ; case ROMANJI : default : return romanji ; } }
public static AppearanceTheme appearance_theme ( final Context context , final SharedPreferences sharedPreferences ) { return AppearanceTheme . valueOf ( getString ( R . string . pref_appearance_theme_key , "red" , context , sharedPreferences ) . toUpperCase ( ) ) ; }
public Filter < I > getFilter ( ) { return filter ; }
public float scaleY ( float vertical ) { return vertical * mOverlay . mHeightScaleFactor ; }
private ShortcutInfo getShortcutForFileType ( ) { return getShortcut ( SHORTCUT_FILE_ID , R . string . common_file , R . drawable . ic_shortcut_file , ACTION_START_WITH_FILE_SELECTION ) ; }
private static boolean indexRangeInFFT ( List < Integer > fft , int pos ) { return ( pos + 1 ) << 1 >= 0 && ( ( pos + 1 ) << 1 | 1 ) < fft . size ( ) ; }
private void onItemViewClick ( View v , boolean pinned ) { int position = mRecyclerView . getChildPosition ( v ) ; if ( position != RecyclerView . NO_POSITION ) { ( ( SwipeableExampleActivity ) getActivity ( ) ) . onItemClicked ( position ) ; } }
public static PeopleListFragment newInstance ( SiteModel site ) { PeopleListFragment peopleListFragment = new PeopleListFragment ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putSerializable ( ActivityLauncher . EXTRA_SITE , site ) ; peopleListFragment . setArguments ( bundle ) ; return peopleListFragment ; }
public static boolean isPrefCustomValue ( String value ) { return value . startsWith ( CUSTOM_VALUE_PREFIX ) ; }
public void onProgressChanged ( final DiscreteSeekBar discreteSeekBar , final int i , final boolean b ) { comm . setBoosterTemperature ( i*10 ) ; }
public boolean isGutenbergPicker ( ) { return this == GUTENBERG_IMAGE_PICKER || this == GUTENBERG_SINGLE_IMAGE_PICKER || this == GUTENBERG_VIDEO_PICKER || this == GUTENBERG_SINGLE_VIDEO_PICKER || this == GUTENBERG_SINGLE_MEDIA_PICKER || this == GUTENBERG_MEDIA_PICKER || this == GUTENBERG_SINGLE_FILE_PICKER ; }
public static void setCurrentCount ( int count ) { c . set ( count ) ; }
private void initOptionsRecyclerView ( ) { optionAdapter = new OptionCreateItemAdapter ( optionList ) ; ryOptions . setAdapter ( optionAdapter ) ; }
public static double bitsFromSatoshis ( long pSatoshis ) { return ( double ) pSatoshis / 1000000 ; }
public SqlBuilder whereEq ( final Property col , final String val ) { sql . append ( " WHERE " ) . append ( col . columnName ) . append ( " = " ) . append ( val ) ; return this ; }
public void onFailure ( int code , Client . Headers headers , int state ) { if ( state != DeIfmoRestClient . FAILED_INTERRUPTED ) { w8andRequest ( context ) ; } else { finish ( ) ; } }
public String toString ( ) { String name = "" ; if ( getName ( ) != null ) name = getName ( ) . toString ( ) ; return "CategoryDrawerItem { " + "mCategory = '" + name + '\'' + ' } ' ; }
public void setForce ( String str ) { if ( str == null ) { return ; } this . force = str . equals ( "1" ) ; }
public static AppsListFragment newInstance ( Uri data ) { AppsListFragment fragment = new AppsListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putParcelable ( KEY_APP_PATH , data ) ; fragment . setArguments ( args ) ; return fragment ; }
public boolean onBackPressed ( ) { if ( isCommitted ( ) ) return true ; if ( spendViewPager . getCurrentItem ( ) == 0 ) { return false ; } else { spendViewPager . previous ( ) ; return true ; } }
public void onStop ( ) { super . onStop ( ) ; if ( mGoogleApiClient != null && mGoogleApiClient . isConnected ( ) ) { LocationServices . FusedLocationApi . removeLocationUpdates ( mGoogleApiClient , this ) ; mGoogleApiClient . disconnect ( ) ; } }
public static void showChangeLessonDialog ( FragmentManager fragmentManager , int apMetaId , int lessonId ) { LessonDialogFragment fragment = LessonDialogFragment . newInstance ( apMetaId , lessonId ) ; fragment . show ( fragmentManager , "ap_create_dialog" ) ; }
public void setRightButton ( View dialogLayout ) { this . mRightButton = ( Button ) dialogLayout . findViewById ( R . id . dialogFormButtonsSubmitButton ) ; }
public void onClick ( View v ) { navigateAway ( ) ; mainapp . buttonVibration ( ) ; }
public void onCompletion ( ) { VODUpdateRequestHandler . this . onCompletion ( ) ; }
public void onClick ( View v ) { Intent album = new Intent ( mActivity , SongListActivity . class ) ; album . putExtra ( "ItemId" , mBaseItem . getAlbumId ( ) ) ; mActivity . startActivity ( album ) ; }
public X509Certificate [ ] getAcceptedIssuers ( ) { logger . d ( "Issuers : " ) ; return new X509Certificate [ ] { cert } ; }
public MaintenanceRecyclerAdapter ( Context context , OnItemSelectedListener listener ) { this . context = context ; callback = listener ; }
public CircularArray ( int size ) { mItems = ( T [ ] ) new Object [ size ] ; }
private double sqyardTosqkm ( double num ) { return num * 8 . 3612736E - 7 ; }
public void testSafeToAddAuthToken13 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( notWpcomAddress1 ) ) ) ; }
public String [ ] getPackageList ( APDE context ) { return Build . packageListFromClassPath ( getClassPath ( context ) , context ) ; }
public final int getArtistGridSizeLand ( Context context ) { return mPreferences . getInt ( ARTIST_GRID_SIZE_LAND , context . getResources ( ) . getInteger ( R . integer . default_grid_columns_land ) ) ; }
public void onAddJudge ( JudgeModel judge ) { addJudge ( judge ) ; updateBottomBarView ( ) ; }
public void setShadowVisible ( boolean isVisible ) { if ( isVisible ) imageViewShadow . setBackgroundResource ( R . drawable . shadow ) ; else imageViewShadow . setBackgroundResource ( 0 ) ; }
public void setLineWidth ( float width ) { if ( width < 0 . 2f ) width = 0 . 5f ; if ( width > 12 . 0f ) width = 12 . 0f ; mLineWidth = Utils . convertDpToPixel ( width ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . iv_lets_continue : mFinished . activityFinish ( true ) ; } }
public String name ( ) { return Game . getVar ( R . string . RatSkullBuff_Name ) ; }
private String moveTimeoutText ( ) { return String . format ( Game . getVar ( R . string . WndSettings_moveTimeout ) , Double . toString ( GamePreferences . getMoveTimeout ( ) /1000 ) ) ; }
public void onClick ( ) { Intent intent = new Intent ( this , BirdListView . class ) ; startActivity ( intent ) ; }
public void onPause ( ) { super . onPause ( ) ; LocalBroadcastManager localBroadcastManager = LocalBroadcastManager . getInstance ( getActivity ( ) ) ; localBroadcastManager . unregisterReceiver ( bulkReadCardsServiceUpdateNotificationHandler ) ; localBroadcastManager . unregisterReceiver ( bulkReadCardDataSinkUpdateBroadcastReceiver ) ; getActivity ( ) . unbindService ( bulkReadCardsServiceConnection ) ; }
private void saveAndhide ( ) { if ( confirmSaveContainer . getVisibility ( ) == View . VISIBLE ) { fetchIssues ( ) ; hideFilterContainer ( ) ; } }
public void run ( ) { card . setCardData ( cardData , getCurrentBestLocation ( ) ) ; dirty = true ; updateUI ( ) ; }
public void onDismiss ( DialogInterface dialogInterface ) { fab . show ( true ) ; }
public static ViewThreadFragment newInstance ( String id ) { Bundle arguments = new Bundle ( ) ; ViewThreadFragment fragment = new ViewThreadFragment ( ) ; arguments . putString ( "id" , id ) ; fragment . setArguments ( arguments ) ; return fragment ; }
public AboutBuilder addPrivacyPolicyAction ( String url ) { return addAction ( R . mipmap . privacy , R . string . privacy , util . intent ( url ) ) ; }
public final void notifyScanStopped ( ) { removeHandlerMsg ( ) ; mHandlerThread . quit ( ) ; mMainHandler . post ( new Runnable ( ) { @ Override public void run ( ) { onScanFinished ( mBleDeviceList ) ; } } ) ; }
public void sipServiceHasConnected ( SipService sipService ) { super . sipServiceHasConnected ( sipService ) ; if ( isIncomingCall ( ) ) { onCallConnected ( ) ; updateUi ( ) ; } }
public boolean isPlaying ( ) throws RemoteException { return mService . get ( ) . isPlaying ( ) ; }
private void onOpenAnimationEnd ( ) { if ( transitionAnimationInProgress && onOpenAnimationEndRunnable != null ) { transitionAnimationInProgress = false ; transitionAnimationStartTime = 0 ; onOpenAnimationEndRunnable . run ( ) ; onOpenAnimationEndRunnable = null ; checkNeedRebuild ( ) ; } }
public OCSPrologReply parseDocument ( String strReply ) { android . util . Log . d ( "PrologReplyParser" , strReply ) ; ByteArrayInputStream bais = new ByteArrayInputStream ( strReply . getBytes ( ) ) ; return parseDocument ( bais ) ; }
private static void run ( String command , String id , Context context ) { Control . runSetting ( command , ApplyOnBootFragment . CPU , id , context ) ; }
public void takeScreenshotsOfBrowsingScreen ( ) throws Exception { SystemClock . sleep ( 5000 ) ; takeScreenshotsOfBrowsingView ( ) ; takeScreenshotsOfMenu ( ) ; takeScreenshotsOfOpenWithAndShare ( ) ; takeAddToHomeScreenScreenshot ( ) ; takeScreenshotofInsecureCon ( ) ; takeScreenshotOfFindDialog ( ) ; takeScreenshotOfTabsTrayAndErase ( ) ; takeScreenshotofSecureCon ( ) ; }
public void set3MonthsIncreaseText ( String text , StateChange change ) { TextView textView = rootView . findViewById ( R . id . stats_mileage_overview_item_3months ) . findViewById ( R . id . overview_item_increase_value ) ; setIncreaseText ( text , change , textView ) ; }
private List < PopupKeyCandidate > getCandidatesForNA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "ŋ" ) ) ; return candidates ; }
public String getZ ( ) { return z ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item , parent , false ) ) ; }
public void onClick ( View v ) { parent . onClickEqualButton ( ) ; }
public DashboardButtonData ( Intent intent , int id ) { this ( intent , id , null , null , null , null , true ) ; }
private void forceDiskLoaderError ( ) { mImage . filename = "" ; mImage . origin = DiskImage . ERROR ; ( ( KegsMain ) getActivity ( ) ) . runDiskLoader ( mImage ) ; }
public MovieAdapter ( Context context , ArrayList < String > dataSet ) { super ( context , R . layout . movie_item , dataSet ) ; this . context = context ; this . dataSet = dataSet ; }
public Map getTriggerData ( ) throws RemoteException { HashMap < String , TriggerData > triggers = connections . get ( connectionClutch ) . getTriggers ( ) ; return triggers ; }
public static boolean createDefault ( Context context ) { return ( NodesManager . createNode ( context , context . getString ( R . string . title_first_node ) , XMLManager . ROOT_NODE ) != null ) ; }
public String desc ( ) { return Game . getVar ( R . string . Quarterstaff_Info ) ; }
public void startIntents ( ) throws ActivityNotFoundException { Intent [ ] intents = getIntents ( ) ; if ( intents . length == 0 ) throw new ActivityNotFoundException ( "No intents found" ) ; context . startActivities ( getIntents ( ) ) ; }
public ScaleTransformer build ( ) { transformer . maxMinDiff = transformer . maxScale - transformer . minScale ; return transformer ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "net . exclaimindustries . geohashdroid" , appContext . getPackageName ( ) ) ; }
private void setCustomServerWithNoUrl ( ) { SharedPreferences userPreferences = AnkiDroidApp . getSharedPrefs ( AnkiDroidApp . getInstance ( ) ) ; userPreferences . edit ( ) . putBoolean ( "useCustomSyncServer" , true ) . commit ( ) ; }
private void initialiseIncomingCall ( ) { mLogger . d ( "incomingCall" ) ; mIncomingCallDetails = intent ; loadSip ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; Daedalus . configurations . save ( ) ; view = null ; adapter = null ; rule = null ; }
public StateSwitcher ( ) { this . currentState = TestState . Unknown ; this . viewMap = new HashMap <> ( ) ; this . drawableMap = new HashMap <> ( ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { game = TL_game . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public void onLoadFailed ( Exception e , Drawable errorDrawable ) { super . onLoadFailed ( e , errorDrawable ) ; if ( e != null ) { e . printStackTrace ( ) ; } retrieveFormulaOnlineImg ( builder , i + 1 ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "expand_read" , checked ) . apply ( ) ; }
public Maze ( ) { setNumberOfDecks ( 1 ) ; setNumberOfStacks ( ROWS * COLS + 1 ) ; setDealFromID ( 0 ) ; setLastTableauID ( ROWS * COLS - 1 ) ; setDiscardStackIDs ( ROWS * COLS ) ; }
public void setDueDate ( @ Nullable long dueDate ) { mDueDate = dueDate ; }
public static Observable < SearchResult > create ( @ NonNull final Searchable searchView ) { return Observable . create ( new RxSearchable ( searchView ) ) ; }
public void scanNodeURI ( View view ) { Intent intent = new Intent ( this , ScanActivity . class ) ; intent . putExtra ( ScanActivity . EXTRA_SCAN_TYPE , ScanActivity . TYPE_URI ) ; startActivity ( intent ) ; }
public Long getAccountId ( ) { return accountId ; }
public int getDrawablePath ( ) { return drawablePath ; }
public void setTableTeams ( List < Match > team ) { if ( team == null ) { return ; } mScoreArraList . clear ( ) ; mScoreArraList . addAll ( team ) ; notifyDataSetChanged ( ) ; }
public void surfaceDestroyed ( SurfaceHolder surface ) { mSurfaceAvailable = false ; }
public Settings put ( String key , boolean value ) { SharedPreferences . Editor editor = getPrefs ( ) . edit ( ) ; editor . putBoolean ( key , value ) ; editor . commit ( ) ; return this ; }
public Scheduler ui ( ) { return AndroidSchedulers . mainThread ( ) ; }
public void onFocus ( boolean resuming ) { resumeContentListener ( ) ; MessagingNotification . setPaused ( getUserId ( ) ) ; setActivityStatusUpdating ( ) ; processStart ( resuming ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( ! ( context instanceof OnCardDataSourceClickCallback ) ) { throw new RuntimeException ( "Parent doesn't implement fragment callback interface" ) ; } }
public PlumbleService getService ( ) { return mServiceProvider . getService ( ) ; }
public static boolean get ( String key , boolean _default ) { return prefs . getBoolean ( key , _default ) ; }
public static FrameLayout . LayoutParams createScroll ( int width , int height , int gravity ) { return new ScrollView . LayoutParams ( getSize ( width ) , getSize ( height ) , gravity ) ; }
public void onClick ( View v ) { MediaControllerCompat . TransportControls controls = MediaControllerCompat . getMediaController ( FullScreenPlayerActivity . this ) . getTransportControls ( ) ; controls . seekTo ( mLastPlaybackState . getPosition ( ) - 30000 ) ; }
public void setOn ( String str ) { if ( str == null ) { return ; } this . on = str . equals ( "1" ) ; }
public void openAbout ( ) { Utils . updateFragment ( new AboutFragment ( ) , getActivity ( ) ) ; }
public void setInstallationTime ( Long lastTimeCommunication ) { SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putLong ( KEY_LAST_COMMUNICATION_DATE , lastTimeCommunication ) ; editor . apply ( ) ; }
public void fromInstantNull ( ) { assertEquals ( null , DateTypeConverters . fromInstant ( null ) ) ; }
public boolean onStart ( @ NonNull Action action , @ NonNull PointF location , boolean isInside ) { return true ; }
public Request < Optional < OpeningHours >> forDay ( LocalDate date ) { return map ( openingHours -> StreamSupport . stream ( openingHours ) . filter ( o -> date . equals ( o . getDate ( ) ) ) . findFirst ( ) ) ; }
public boolean addAll ( Collection < ? extends FilterElement > c ) { return elements . addAll ( c ) ; }
public static SkipDialogFragment newInstance ( String seed ) { SkipDialogFragment newDialog = new SkipDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( Constants . ARG_SEED , seed ) ; newDialog . setArguments ( args ) ; return newDialog ; }
public void stop ( boolean reset ) { if ( reset ) { playbackError = null ; } PlaybackInfo playbackInfo = getResetPlaybackInfo ( pendingOperationAcks ++ ; internalPlayer . stop ( reset ) ; updatePlaybackInfo ( playbackInfo , TIMELINE_CHANGE_REASON_RESET , }
public LineChartItem ( ChartData cd , Context c ) { super ( cd ) ; mTf = Typeface . createFromAsset ( c . getAssets ( ) , "OpenSans - Regular . ttf" ) ; }
public void display ( ) { AndroidSingleton . serviceReady ( listener ) ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . RequestOpenPlaylist prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = mActivity . getMenuInflater ( ) ; inflater . inflate ( R . menu . bookmark_contextual_menu , menu ) ; return true ; }
public Collection < Song > getAllSongs ( ) { synchronized ( cache ) { return new ArrayList <> ( cache . songsById . values ( ) ) ; } }
public boolean getSoundEnabled ( ) { return prefs . getBoolean ( PREFS_PLAY_AUDIO , true ) ; }
public void onBrowseDirectory ( String directory ) { showDirectory ( directory ) ; }
public CharSequence getContent ( ) { return null ; }
public DeviceClass ( int record ) { this . record = record ; if ( ( record & 0xff000000 ) != 0 ) throw new IllegalArgumentException ( ) ; }
public void setDayOneEvents ( ArrayList < Events > dayOneEvents ) { this . dayOneEvents = dayOneEvents ; }
public void setReplies ( int replies ) { this . replies = replies ; notifyPropertyChanged ( BR . replies ) ; }
public static Text create ( String text , Font font ) { if ( ! ModdingMode . getClassicTextRenderingMode ( ) ) { return new SystemText ( text , font . baseLine*2 , false ) ; } return new BitmapText ( text , font ) ; }
public void run ( ) { InputMethodManager mgr = ( InputMethodManager ) activity . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; mgr . showSoftInput ( mnemonicTextView , InputMethodManager . SHOW_IMPLICIT ) ; }
public String getFormattedDistance ( Context context ) { if ( distance == null ) { return "" ; } return numberFormatter . format ( distance . floatValue ( ) ) ; }
public Cursor getDirectShareList ( ) { SQLiteDatabase db = databaseHelper . getReadableDatabase ( ) ; String query = createQuery ( MESSAGE_COUNT + " != 0" ) ; return db . rawQuery ( query , null ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_recycler_list_view , container , false ) ; }
public void run ( ) { printingStrings = newPrintingStrings ; }
public Reader readerFor ( Cursor cursor ) { return new Reader ( cursor ) ; }
public void onAnimationEnd ( ) { }
public void write ( byte [ ] buffer ) { try { mmOutStream . write ( buffer ) ; } catch ( IOException e ) { Log . e ( TAG , "Exception during write" , e ) ; } }
public void setData ( TLObject object , CharSequence name , CharSequence status , int resId ) { setData ( object , name , status , resId , false ) ; }
public void onBillingSetupFinished ( BillingResult billingResult ) { if ( billingResult . getResponseCode ( ) == BillingClient . BillingResponseCode . OK && billingClient . isReady ( ) ) { checkForActiveSubs ( ) ; checkPurchaseHistory ( BillingClient . SkuType . INAPP , false ) ; } }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { Bus . timeScaleSelected ( timeScaleSpinner . getSelectedItemPosition ( ) ) ; }
public String getUserUsername ( ) { return ENUM_String . STRING_USER_USERNAME . value ; }
public void setVisibleYRangeMaximum ( float maxYRange , AxisDependency axis ) { float yScale = getDeltaY ( axis ) / maxYRange ; mViewPortHandler . setMinimumScaleY ( yScale ) ; }
public void run ( ) { if ( eglThread != null ) { eglThread . requestRender ( false ) ; } }
public void onAttach ( Context context ) { super . onAttach ( context ) ; this . context = context . getApplicationContext ( ) ; }
private boolean canListenPhoneState ( ) { return getSystemService ( Context . TELEPHONY_SERVICE ) != null && ( Build . VERSION . SDK_INT < Build . VERSION_CODES . M || ActivityCompat . checkSelfPermission ( this , Manifest . permission . READ_PHONE_STATE ) == PackageManager . PERMISSION_GRANTED ) ; }
public void clearDisplayableView ( ) { synchronized ( paintsync ) { super . clearDisplayableView ( ) ; layout = null ; innerView = null ; } }
public void makeCurrent ( ) { if ( ! EGL14 . eglMakeCurrent ( mEGLDisplay , mEGLSurface , mEGLSurface , mEGLContext ) ) { throw new RuntimeException ( "eglMakeCurrent failed" ) ; } }
public Long diskSize ( ) { return fileSystemBlocks * fileSystemBlockSize ; }
public Track ( ) { this ( "" , false ) ; }
public BasePreferenceData ( Context context , Identifier identifier , OnPreferenceChangeListener < T > listener ) { this . context = context ; this . identifier = identifier ; this . listener = listener ; }
public boolean canRedo ( ) { return this . historyPointer < this . pathLists . size ( ) ; }
public void onProgressChanged ( CircularSeekBar circularSeekBar , float progress , boolean fromUser ) { if ( fromUser ) { seekTo ( ( int ) progress ) ; } }
private void initialiseCommandConnection ( ) throws IOException { mCommandConnection = new CommandConnection ( this ) ; mCommandConnection . start ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup viewGroup , int i ) { return ViewHolderSavedMarket . create ( viewGroup , context , subscriber ) ; }
public Preferences . DictionaryType getType ( ) { return type ; }
public void setAmountType ( AmountUnitType amountType ) { this . amountType = amountType ; }
public void assertAccountTotal ( Account account , long total ) { Account a = db . em ( ) . getAccount ( account . id ) ; assertEquals ( "Account " + account . id + " total" , total , a . totalAmount ) ; }
public void onSuccess ( Object o ) { UIUtils . showToast ( getActivity ( ) , R . string . pref_clear_cache_success ) ; }
public void setUrl ( String url ) { this . url = StringUtils . notNullStr ( url ) ; }
public void clear ( ) { args = null ; }
public void onFocusChange ( View v , boolean hasFocus ) { if ( hasFocus ) { lastSearchKeyboardLanguage = AndroidUtilities . getCurrentKeyboardLanguage ( ) ; DataQuery . getInstance ( currentAccount ) . fetchNewEmojiKeywords ( lastSearchKeyboardLanguage ) ; } }
public void accept ( Throwable e ) throws Exception { mArticlesView . showLoadingArticlesError ( ) ; }
public StorageReadFileException ( File file , Exception innerException ) { super ( "There was an error reading the serviceFile " + file + " . " , innerException ) ; this . file = file ; }
public GridAdapterFriends ( Context context , List < FriendsSmall > friends , HashMap < String , Locations > locations ) { this . context = context ; this . friends = friends ; this . locations = locations ; }
public Controller newController ( ) { return new TaskbarController ( this ) ; }
public String name ( long did , boolean _default ) { JSONObject deck = get ( did , _default ) ; if ( deck != null ) { return deck . getString ( "name" ) ; } return " [ no deck ] " ; }
public static Tag createTag ( ) { return new Tag ( id , name ) ; }
private final void closeOnError ( String message ) { this . listener . onExportDialogError ( message ) ; this . dismiss ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { ( ( PTSDApplication ) getActivity ( ) . getApplication ( ) ) . getFirebaseComponent ( ) . inject ( this ) ; super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences ) ; }
public void onMinus ( Selector s ) { selectedTimeout = RemixedDungeon . limitTimeoutIndex ( selectedTimeout - 1 ) ; update ( s ) ; }
public void afterTextChanged ( Editable s ) { if ( mOkButton . isEnabled ( ) && ! mServerInfo . mBaseUrl . equals ( normalizeUrl ( s . toString ( ) , mServerInfo . mIsSslConn ) ) ) { mOkButton . setEnabled ( false ) ; } }
private static Icon generateDefaultThemedIcon ( Context context , int iconId ) { return generateThemedIcon ( context , iconId , context . getColor ( R . color . app_shortcut_default_foreground ) , context . getColor ( R . color . app_shortcut_default_background ) ) ; }
public void makeEventSort_WhenSortTypeFavorite_ReturnCorrectComparator ( ) { Comparator < EventSortable > sut = EventSortFactory . makeEventSort ( SortType . FAVORITE ) ; int result = sut . compare ( event1 , event2 ) ; assertThat ( result , lessThan ( 0 ) ) ; }
public String [ ] getValidHostnameList ( ) { return authenticator . getResource ( AccountProperty . VALID_HOSTNAME_LIST , String [ ] . class ) ; }
private void switchToEarpiece ( View view ) { requireRtpConnection ( ) . getAudioManager ( ) . setDefaultAudioDevice ( AppRTCAudioManager . AudioDevice . EARPIECE ) ; }
public static boolean isSelftext ( String baseSubreddit ) { return filters . getBoolean ( baseSubreddit + "_selftext" , true ) ; }
private void requestFocus ( final EditText view ) { if ( note . get_id ( ) == null && ! noteTmp . isChanged ( note ) && afterSavedReturnsToList ) { KeyboardUtils . showKeyboard ( view ) ; } }
public void shouldWriteFromParcelWithNullValues ( ) { givenForecastWithValues ( 1 , 1 , "someCity" , 1d , 1d , null , null , "someCountry" , 1d , "someDesc" ) ; givenWritingToParcel ( ) ; whenCreatingFromParcel ( ) ; thenForecastCreatedShouldBeEqualTo ( forecast ) ; }
public void testIndented2 ( ) throws IOException { onBook ( "* Note 1\n : LOGBOOK : \n : END : " ) . onLoad ( ) . isWhenSaved ( "* Note 1\n : LOGBOOK : \n : END : \n\n" ) ; }
public File getFileStreamPath ( ) { return this . getFileStreamPath ( "recording_" + RandomAudioFileName + " . 3gp" ) ; }
public void onActivityDestroy ( ) { super . onActivityDestroy ( ) ; if ( dialog != null && dialog . isShowing ( ) ) dialog . dismiss ( ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; mMeetings = new Meetings ( ( FragmentActivity ) activity ) ; }
public int getViewId ( ) { return R . layout . stub_bus_stop_list ; }
public static Error deleteDirectoryFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , FileType . DIRECTORY . getValue ( ) ) ; }
public static String addMillisecondsToString ( String datetime , int milliseconds ) { Calendar calendar = convertStringDateToCalendar ( datetime , DATE_FORMAT_ISO_8601 ) ; calendar . add ( Calendar . MILLISECOND , milliseconds ) ; return formatDate ( calendar . getTimeInMillis ( ) , DATE_FORMAT_ISO_8601 ) ; }
public void setShowBook ( boolean showBook ) { isShowBook = showBook ; }
public static Boolean getPrefOnlyPluggedIn ( ) { return prefOnlyPluggedIn ; }
public DividerItemDecoration ( Drawable divider ) { mDivider = divider ; }
public SwanUser getPeerByRegId ( String regId ) { for ( SwanUser peer : nearbyPeers ) { if ( peer . getRegId ( ) . equals ( regId ) ) { return peer ; } } return null ; }
public void onStop ( ) { compositeSubscription . unsubscribe ( ) ; super . onStop ( ) ; }
private VideoTrack getVideoTrack ( ) { this . capturer = createCapturer ( ) ; return factory . createVideoTrack ( "video1" , factory . createVideoSource ( this . capturer ) ) ; }
public int hashCode ( ) { return 37 ; }
public void sha384FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "7b8f4654076b80eb963911f19cfad1aaf4285ed48e826f6cde1b01a79aa73fadb5446e667fc4f90417782c91270540f3" , HashCalculator . newInstance ( HashType . SHA_384 ) . fromString ( inputText ) ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { txtV . setText ( String . valueOf ( progress ) ) ; if ( run ) manageSend ( "V" + ( txtV . getText ( ) . toString ( ) ) ) ; }
public UnBondingStateTask ( BaseApplication app , TaskListener listener , Account account ) { super ( app , listener ) ; this . mAccount = account ; this . mResult . taskType = BaseConstant . TASK_FETCH_UNBONDING_STATE ; }
public void onSupportActionModeStarted ( ActionMode mode ) { supportActionMode = mode ; super . onSupportActionModeStarted ( mode ) ; }
public static void hideProgress ( ) { if ( pd != null ) { pd . dismiss ( ) ; } }
public void isPermissionGranted ( boolean isGranted , String permission ) { if ( isGranted ) { saveImage ( ) ; } }
public static void launchManageAccount ( XmppActivity xmppActivity ) { Account account = getFirstEnabled ( xmppActivity . xmppConnectionService ) ; xmppActivity . switchToAccount ( account ) ; }
public void computeHighlightAndFreePosts ( ) { if ( clusters == null ) return ; for ( Cluster cluster : clusters ) { cluster . computeHighlightAndFreePosts ( this , locations ) ; } }
private void setFavoritesButtonView ( ) { if ( favoriteService . isFavorite ( movieEntity ) ) { favoritesButton . setSelected ( true ) ; } else { favoritesButton . setSelected ( false ) ; } }
private void updateEventsYearSelector ( int selectedPosition ) { Resources res = getResources ( ) ; yearSelectorTitle . setText ( String . format ( res . getString ( R . string . year_selector_title_events ) , eventsDropdownItems [ selectedPosition ] ) ) ; }
public void setBackgroundColor ( @ ColorInt int color ) { backgroundColor ( color ) ; invalidate ( ) ; }
public PathHorizontalScrollView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public void setGkz ( Long gkz ) { this . gkz = gkz ; }
public void onAsyncOperationError ( String error ) { if ( mView != null ) { mView . hideProgress ( ) ; mView . onLoadError ( error ) ; } }
private void initFragment ( Fragment backupFragment ) { FragmentManager fragmentManager = getFragmentManager ( ) ; FragmentTransaction transaction = fragmentManager . beginTransaction ( ) ; transaction . add ( R . id . contentFrame , backupFragment ) ; transaction . commit ( ) ; }
private ConnectivityDetector ( Context context ) { this . mContext = context ; }
public PresentationSlideDeserializer ( IDeserializerStorage deserializerStorage ) { super ( deserializerStorage ) ; }
public void removePercentage ( int percentageId ) { int recyclerViewPosition = convertPercentageIdToPosition ( percentageId ) ; notifyItemRemoved ( recyclerViewPosition ) ; mPercentageDb . deleteItem ( percentageId ) ; requery ( ) ; }
public void onClick ( View view ) { showDialog ( toleranceColor ) ; }
public void onRefresh ( ) { posts . loadMore ( adapter , id ) ; }
public static void sendOutput ( int color , Context context , CharSequence s ) { sendOutput ( color , context , s , TerminalManager . CATEGORY_GENERAL ) ; }
public AboutBuilder addIntroduceAction ( Intent intent ) { return addIntroduceAction ( util . clickIntent ( intent ) ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidence . Builder getConfidenceBuilder ( ) { bitField0_ | = 0x00000800 ; onChanged ( ) ; return getConfidenceFieldBuilder ( ) . getBuilder ( ) ; }
private void zoomToNewLocation ( LatLng loc ) { mMap . animateCamera ( CameraUpdateFactory . newLatLngZoom ( loc , 14 ) ) ; }
public PemToKeyPairTask ( @ NonNull InputStream pemFile , AsyncTaskResult . Callback < AsyncTaskResult < KeyPair >> callback ) throws IOException { this ( IOUtils . readFully ( pemFile ) . toByteArray ( ) , callback , null ) ; }
public void openDir ( View v ) { Intent i = new Intent ( this , TextDisplayActivity . class ) ; i . putExtra ( "text" , "dir" ) ; startActivity ( i ) ; }
private List < Circuit > getCircuits ( @ NonNull String zoneName ) { return ContentProvider . getCircuits ( mContext , zoneName ) ; }
public SearchView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public TLRPC . Dialog getItem ( int i ) { if ( i < 0 || i >= dialogs . size ( ) ) { return null ; } return dialogs . get ( i ) ; }
public void refresh ( ) throws RemoteException { mService . get ( ) . refresh ( ) ; }
private void enableNotification ( UUID chrUuid ) { GattOperation op = HIDDeviceBLESteamController . GattOperation . enableNotification ( mGatt , chrUuid ) ; queueGattOperation ( op ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position , List < Object > payloads ) { mHolder . onBindHeaderItemViewHolder ( holder , position , payloads ) ; }
private static void mountFileSystemRO ( String path ) throws RootNotPermittedException { String command = "umount - r \"" + path + "\"" ; RootHelper . runShellCommand ( command ) ; }
public SubstPagerFragment getFragment ( GGPlan plan ) { return ( SubstPagerFragment ) instantiateItem ( viewPager , plans . indexOf ( plan ) + 1 ) ; }
public Uri getUriByFileProviderAuthority ( File file ) { return FileProvider . getUriForFile ( _context , getFileProviderAuthority ( ) , file ) ; }
public void startAyahMode ( SuraAyah suraAyah , AyahTracker tracker ) { if ( ! isInAyahMode ) { start = end = suraAyah ; updateToolbarPosition ( suraAyah , tracker ) ; ayahToolBar . showMenu ( ) ; showAyahModeHighlights ( suraAyah , tracker ) ; isInAyahMode = true ; } }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_home_screen , menu ) ; }
public String getBlogImageUrl ( ) { return StringUtils . notNullStr ( blogImageUrl ) ; }
private String [ ] getSelectionArgs ( DataSupport baseObj , DataSupport associatedModel ) { return new String [ ] { String . valueOf ( baseObj . getBaseObjId ( ) ) , String . valueOf ( associatedModel . getBaseObjId ( ) ) } ; }
public void downloadFiles ( Context context , RestServerInterface server ) throws StorytellingException { this . page . downloadFiles ( context , server ) ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; eventCreatePresenter . attachView ( eventCreateView ) ; }
public void cancelLoadImage ( ) { forceLoding = false ; ImageLoader . getInstance ( ) . cancelLoadingForImageReceiver ( this , 0 ) ; canceledLoading = true ; }
public ShaderListPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; String dummy [ ] = { "nix" } ; setEntries ( dummy ) ; setEntryValues ( dummy ) ; }
public void add ( AbstractMainFragment fragment ) { this . fragments . add ( fragment ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnSignUpInteractionListener ) { callback = ( OnSignUpInteractionListener ) context ; } }
public List < String > getPhoneNumbers ( ) { return mPhoneNumbers ; }
public void execute ( ) { Searchable . ProcessTVShows . ProcessData processData = new Searchable . ProcessTVShows . ProcessData ( ) ; processData . execute ( ) ; }
public ShapeRenderer getShapeRenderer ( ) { return mShapeRenderer ; }
public void notifyCommentChanged ( Comment c ) { mCommentAdapter . notifyItemChanged ( mCommentAdapter . indexOf ( c ) ) ; }
public void setTheme ( int resid ) { ThemeHelper helper = ThemeHelper . getInstance ( this ) ; helper . applyThemeToActivity ( this ) ; super . setTheme ( helper . getThemeIdToApply ( resid ) ) ; }
public SavedState createFromParcel ( Parcel in ) { return new SavedState ( null ) ; }
public static void destroy ( ) { songs . destroy ( ) ; }
public void onDestroy ( ) { Log . i ( "Destroy " + this ) ; this . dismiss ( ) ; owner = null ; }
private CustomFontManager ( AssetManager _mgr ) { assetManager = _mgr ; fonts = new HashMap <> ( ) ; }
public int compare ( AppData t0 , AppData t1 ) { return t0 . getAppName ( ) . compareTo ( t1 . getAppName ( ) ) ; }
public ScrollableEmoticonMaterialDialogBuilder ( @ NonNull Context context ) { super ( context ) ; mContext = context ; mScrollView = new HorizontalScrollView ( context ) ; mTextView = new TextView ( context ) ; }
private static void doTest ( String input , CharSequence expected ) throws WriterException { BitMatrix result = new ITFWriter ( ) . encode ( input , BarcodeFormat . ITF , 0 , 0 ) ; assertEquals ( expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
public void onFinishMapManagement ( ) { mMap . layers ( ) . remove ( mMapCoverageLayer ) ; mMapCoverageLayer . onDetach ( ) ; mMap . updateMap ( true ) ; mNativeMapIndex . clearSelections ( ) ; mMapCoverageLayer = null ; }
public void setup ( ) { RobolectricHelpers . overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public PermissionsProvider providesPermissionsProvider ( PermissionsChecker permissionsChecker ) { return permissionsProvider ; } @ Override public DeviceDetailsProvider providesDeviceDetailsProvider ( Context context , InstallIDProvider installIDProvider ) { return deviceDetailsProvider ; } } ) ; }
public void retry ( View view ) { raceLayout . setVisibility ( View . GONE ) ; startRace . setVisibility ( View . VISIBLE ) ; }
public void onPlus ( Selector s ) { RemixedDungeon . quickSlots ( Math . abs ( RemixedDungeon . quickSlots ( ) ) + 1 ) ; }
public boolean isShakeEnabled ( ) { return prefs . getBoolean ( ENABLE_SHAKE , true ) ; }
public PlaceAndPlateDtoAssembler special ( ) { this . placeType = PlaceType . SPECIAL ; return this ; }
public PreviewArea ( Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public String desc ( ) { return Game . getVar ( R . string . Glaive_Info ) ; }
public AboutBuilder setIconColor ( int color ) { this . iconColor = ColorUtil . get ( context , color ) ; return this ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeSerializable ( this . mFile ) ; dest . writeInt ( this . mScrollPos ) ; }
public synchronized void waitUntilInitialized ( ) throws InterruptedException { while ( lastSampleTimestamp == C . TIME_UNSET ) { wait ( ) ; } }
public int getFirstTimeUserTag ( ) { return firstTimeUserTag ; }
public void setMaxFrameLargerThanComposition ( ) { animator . setMaxFrame ( 9000 ) ; assertEquals ( animator . getMaxFrame ( ) , composition . getEndFrame ( ) ) ; }
public static BasemapSettingsLoader getInstance ( ) { return instance ; }
public String exec ( ExecutePack pack ) { int id = pack . getInt ( ) ; ( ( MainPack ) pack ) . rssManager . l ( id ) ; return null ; }
public AdaptiveActionsToolbar ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { this ( context , attrs , R . attr . toolbarStyle ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mBinding . executePendingBindings ( ) ; }
public static boolean canSwipeDown ( int reactionType ) { return ( extractDownReaction ( reactionType ) == REACTION_CAN_SWIPE ) ; }
public void onLoaderReset ( Loader < List < DataSource >> loader ) { }
public void addOnPageChangeListener ( OnPageChangeListener listener ) { super . addOnPageChangeListener ( new OnPageChangeListenerWrapper ( listener ) ) ; }
public void setText ( String text , boolean divider ) { textView . setText ( text ) ; valueTextView . setVisibility ( GONE ) ; valueImageView . setVisibility ( GONE ) ; needDivider = divider ; setWillNotDraw ( ! divider ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "projects . hobby . urdufontcomparator" , appContext . getPackageName ( ) ) ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new AppWidgetScheduleFactory ( this , intent , mStorIOSQLite ) ; }
public long getFileSize ( ) { if ( this . file != null ) { return this . file . getExpectedSize ( ) ; } else { return 0 ; } }
public void fireUserClick ( AppChatUser user ) { getView ( ) . openUserWall ( getAccountId ( ) , user . getUser ( ) ) ; }
public void setToListener ( @ NonNull OnRequestViewListener < ID > listener ) { mToListener = listener ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { WatchfaceUtil . setWfzWatchFace ( FileOpenerActivity . this , inputFileName ) ; finish ( ) ; }
public UnexpectedInternalStateException ( String message ) { super ( message ) ; }
public String getCategoryUuid ( ) { return this . categoryUuid ; }
public void setActivity ( Activity activity ) { this . activity = activity ; }
public CharSequence getTitle ( ) { return title ; }
public void onLoadMore ( int page , int totalItemsCount ) { eventsPage = page ; loaderManager . restartLoader ( 0 , null , cursorEventsAdapterLoader ) ; }
public AdapterSavedMarkets ( List < ServiceConfigurationGlobal > dataset , Context context , listItemMarketNotifications subscriber ) { this . dataset = dataset ; this . context = context ; this . subscriber = subscriber ; }
public void bind ( final TextView view , final String html , final Object id ) { unbind ( view ) ; findOrCreateInfo ( id ) . bind ( view , html , this ) ; }
public Date getPeriodStart ( ) { return periodStart ; }
private String getTwoDigitHexString ( int hexValue ) { String hexString = Integer . toHexString ( hexValue ) ; if ( hexString . length ( ) == 1 ) { hexString = "0" + hexString ; } return hexString ; }
public void onEnabled ( Context ctx ) { resetAlarm ( ctx ) ; }
public static boolean isImage ( Attachment attachment ) { return ContentType . isImageType ( attachment . getContentType ( ) ) ; }
public int hashCode ( ) { return Objects . hash ( weekday , title , type , lessons ) ; }
public boolean shouldAutoCreate ( ) { return autoCreate ; }
private void whenGettingWeather ( ) { mForecastData = mWeatherRepository . findWeather ( mRequestParameters ) ; }
public void onError ( Throwable e ) { failure ( isBackground , e ) ; }
public void onClick ( View view ) { close ( ) ; }
public void run ( ) { if ( mStopMillisecond > System . currentTimeMillis ( ) ) showDialogAfterDelay ( fm , tag ) ; }
private void registerScreenStateReceiver ( ) { unregisterScreenStateReceiver ( ) ; registerReceiver ( screenStateReceiver , new IntentFilter ( Intent . ACTION_SCREEN_ON ) ) ; if ( isDebug ) Log . w ( LOG_TAG , "screenStateReceiver registered" ) ; }
private void getLocation ( OnGeoUtilResultListener onGeoUtilResultListener ) { PermissionsHelper . requestPermission ( getActivity ( ) , Manifest . permission . ACCESS_COARSE_LOCATION , R . string . permission_coarse_location , snackBarPlaceholder , ( ) -> { GeocodeHelper . getLocation ( onGeoUtilResultListener ) ; } ) ; }
public SharedPreferences getPreferences ( ) { return PreferenceManager . getDefaultSharedPreferences ( getApplicationContext ( ) ) ; }
public void ring ( View v ) { Intent myIntent = new Intent ( getActivity ( ) , ringContactUs . class ) ; startActivity ( myIntent ) ; }
public static double getAverageCpuUsage ( int sockets , int coresPerSocket , double cpuUsage ) { int cores = sockets * coresPerSocket ; return cores == 0 ? 0 : cpuUsage / cores ; }
public void setUrl ( Bitmap url ) { this . url = url ; }
public float getY ( ) { return bitmapY ; }
public boolean isRunning ( ) { return running ; }
public void addNewOption ( ) { EventBus . getDefault ( ) . post ( new EventBusController . OptionControlEvent ( 0 , null , EventBusController . OptionControlEvent . OPTION_ADD , null ) ) ; }
public Loader < QueueManager > onCreateLoader ( int arg0 , Bundle arg1 ) { Loader < QueueManager > loader = new QuizQueueManagerLoader ( getApplicationContext ( ) , getDbPath ( ) , categoryId , startCardOrd , quizSize , shuffleCards ) ; loader . forceLoad ( ) ; return loader ; }
public HtmlTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public void onImageCapture ( @ NonNull final byte [ ] imageBytes ) { setMedia ( PersistentBlobProvider . getInstance ( this ) . create ( this , imageBytes , MediaUtil . IMAGE_JPEG , null ) , MediaType . IMAGE ) ; quickAttachmentDrawer . hide ( false ) ; }
public void onClick ( View v ) { new GetOptionsListTask ( 0 ) ; }
public void deliverResult ( D data ) { if ( ! isReset ( ) ) { this . mData = data ; super . deliverResult ( data ) ; } else { } }
public void setBackgroundDim ( float dim ) { mDimAmount = dim ; invalidate ( ) ; }
public static void setPushToken ( Context context , String pushToken ) { saveStringPreference ( context , PREF__PUSH_TOKEN , pushToken ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_botResults . TLdeserialize ( stream , constructor , exception ) ; }
public BigDecimal getInteretsObtenus ( ) { return this . interetsObtenus ; }
public void run ( ) { updateClock ( ) ; if ( Services . logger . isLogging ( ) ) { handler . postDelayed ( this , clockUpdateInterval ) ; } }
public void onNext ( Pair < Integer , Boolean > result ) { bookmarksCache . put ( result . first , result . second ) ; }
private RecyclerSupport ( RecyclerView recyclerView ) { this . recyclerView = recyclerView ; this . recyclerView . setTag ( R . id . item_click_support , this ) ; this . recyclerView . addOnChildAttachStateChangeListener ( mAttachListener ) ; }
public static Call < WebApi . Result > againstComment ( String token , int sid , int tid ) { return sWebApi . opForComment ( token , "against" , sid , tid ) ; }
public Observable < MjpegInputStream > open ( String url ) { return connect ( url ) . subscribeOn ( Schedulers . computation ( ) ) . observeOn ( Schedulers . io ( ) ) ; }
public void setEnabled ( boolean enabled ) { enabled_ = enabled ; }
public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { if ( isWrappedAdapterAlive ( ) ) mWrappedAdapter . onDetachedFromRecyclerView ( recyclerView ) ; }
private void initToolBar ( ) { actionBar = getDelegate ( ) . getSupportActionBar ( ) ; if ( actionBar != null ) { actionBar . setDisplayHomeAsUpEnabled ( true ) ; } }
public Completable clearUserData ( ) { return mDatabaseHelper . clearTables ( ) . doOnCompleted ( mPrefsHelper : : clearAuth ) ; }
public int maxDurability ( int lvl ) { return 4 * ( lvl < 16 ? 16 - lvl : 1 ) ; }
public void switchToAllUnreadItemsFolder ( ) { startDetailFragment ( SubscriptionExpandableListAdapter . SPECIAL_FOLDERS . ALL_UNREAD_ITEMS . getValue ( ) , true , null , true ) ; }
private static String formatTime ( long time ) { return TimeFormatter . getIsoDateTime ( time ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidence getConfidence ( ) { if ( confidenceBuilder_ == null ) { return confidence_ ; } else { return confidenceBuilder_ . getMessage ( ) ; } }
public int getCurrentSura ( ) { return mCurrentSura ; }
public void start ( Attributes attributes ) { mCurrentUser = new User ( Integer . parseInt ( attributes . getValue ( User . Xml . ID_ATTRIBUTE ) ) ) ; }
public void onClick ( View v ) { grafico_Click ( v ) ; }
public LocalDate getDate ( ) { return this . date ; }
private void requestFocusToField ( @ NonNull ErrorType firstError ) { view . requestFocusTo ( firstError . getInputType ( ) ) ; }
public void addSearchThisAreaButtonAction ( ) { searchThisAreaButton . setOnClickListener ( nearbyParentFragmentPresenter . onSearchThisAreaClicked ( ) ) ; }
public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder viewHolder , int i ) { if ( viewHolder instanceof ViewHolderSavedMarket ) { ( ( ViewHolderSavedMarket ) viewHolder ) . setItem ( dataset . get ( i ) ) ; } }
private static String getTimeStamp ( ) { return " [ " + new SimpleDateFormat ( "HH : mm : ss" , Locale . ENGLISH ) . format ( new Date ( ) ) + " ] " ; }
public List < Object > getHolding ( ) { return holding ; }
public void onClick ( View view ) { Intent intent = new Intent ( WelcomeActivity . this , LoginActivity . class ) ; intent . putExtra ( EXTRA_USER_TYPE , getString ( R . string . student_user_type ) ) ; startActivity ( intent ) ; finish ( ) ; }
private static AsyncHttpClient getClient ( ) { if ( mClient == null ) { mClient = init ( ) ; } return mClient ; }
public static synchronized String formatDoubleOnePlace ( double input ) { return sDoubleOnePlaceFormat . format ( input ) ; }
public void onClick ( DialogInterface dialog , int which ) { DataManager . getInstance ( HistoryCareDetailsActivity . this ) . deleteHistoryCareItem ( getIntent ( ) . getIntExtra ( "careItemPosition" , - 1 ) ) ; finish ( ) ; }
public String getComment ( ) { return comment ; }
public void onOpened ( @ NonNull CameraDevice pDevice ) { Log . i ( logTag , "Camera opened" ) ; mDevice = pDevice ; attemptCreateSession ( ) ; }
public UserTweetsFragment ( ) { this . listId = 0 ; }
public TrackAlbumImageRunner ( final TrackModel track , final int width , final int height ) { mTrack = track ; mWidth = width ; mHeight = height ; }
private TransportOptions initializeTransportOptions ( boolean media ) { TransportOptions transportOptions = new TransportOptions ( getContext ( ) , media ) ; transportOptions . addOnTransportChangedListener ( this ) ; setOnLongClickListener ( this ) ; return transportOptions ; }
public BeerLife ( Main gameManager ) { batch = gameManager . getBatch ( ) ; littleBeerTexture = new Texture ( Gdx . files . internal ( "littleBeer . png" ) ) ; lifesTexture = new Texture ( Gdx . files . internal ( "lifes . png" ) ) ; }
private void setProgressIndeterminateVisibility ( boolean visible ) { pullToRefreshAttacher . setRefreshing ( visible ) ; }
public JSONObject getToken ( ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( "/tokens/" , requestMap ) ; }
private void changeRepeatPrefs ( ) { boolean isChecked = binding . repeatNotificationOptionPrefs . isChecked ( ) ; binding . repeatNotificationOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setNotificationRepeatEnabled ( ! isChecked ) ; }
public Place cached ( MLocation current ) { if ( System . currentTimeMillis ( ) - lastQuery > ttl ) { lastQuery = System . currentTimeMillis ( ) ; lastPlace = get ( current ) ; return lastPlace ; } else { return lastPlace ; } }
public void testLongCompact ( ) throws Exception { String toEncode = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; BitMatrix result = encode ( toEncode , true , toEncode ) ; }
private static boolean isSystem ( String packageName , Context context ) { if ( ! cacheSystem . containsKey ( packageName ) ) cacheSystem . put ( packageName , Util . isSystem ( packageName , context ) ) ; return cacheSystem . get ( packageName ) ; }
public void onResponse ( ProgramInfoDto response ) { mSelectedView . setRecSeriesTimer ( response . getSeriesTimerId ( ) ) ; }
public static Display getDisplay ( MIDlet midlet ) { if ( instance == null && midlet != null ) { instance = new Display ( midlet ) ; } return instance ; }
public void onPlus ( Selector s ) { RemixedDungeon . fontScale ( RemixedDungeon . fontScale ( ) + 1 ) ; s . regen ( ) ; }
public RestClientCustomizableMock ( com . android . volley . RequestQueue queue , String token ) { super ( queue , token ) ; }
public void bind ( Object object ) { if ( mSortOrderListener != null ) { String str = mContext . getResources ( ) . getString ( SortOrderBottomSheet . mSortStringRes [ mSortOrderListener . getSavedOrder ( ) ] ) ; mSortText . setText ( str ) ; } }
public void onClick ( DialogInterface dialog , int which ) { DataManager . getInstance ( HistoryCareDetailsActivity . this ) . unarchiveCareItem ( getIntent ( ) . getIntExtra ( "careItemPosition" , - 1 ) ) ; finish ( ) ; }
public int getCurrentPeriodIndex ( ) { return player . getCurrentPeriodIndex ( ) ; }
private BroadcastReceiver tempShowReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { tempShowTaskbar ( ) ; } } ;
public int getAnimDuration ( ) { return animDurationMilli ; }
public void onLockClosed ( ) { if ( isSettingsClicked ) { showSecuritySettingsFragment ( ) ; } }
public ClubEventRecyclerAdapter ( Context context , OnFeedSelectedListener listener ) { this . context = context ; callback = listener ; }
public List < PercentageTrackerPojo > getAllItems ( ) { Cursor c = mDatabase . query ( true , DatabaseCreator . TABLE_NAME_ADMISSION_PERCENTAGES_META , null , null , null , null , null , DatabaseCreator . ADMISSION_PERCENTAGES_META_ID + " ASC" , null ) ; return listifyItems ( c ) ; }
public ApkInfo getApkInfo ( String packageName ) { return StreamSupport . stream ( apkExtractor . apkHelper . getInstalledApks ( ) ) . filter ( apkInfo -> apkInfo . getApk ( ) . equals ( packageName ) ) . findAny ( ) . orElse ( null ) ; }
public SubredditAdapter ( Context context , ArrayList < Subreddit > subreddits ) { super ( context , 0 , subreddits ) ; }
public int getTitleStringId ( ) { return R . string . activity_text ; }
public boolean close ( ) { return WalletManager . getInstance ( ) . close ( this ) ; }
public StickyHeaderGridAdapter . HeaderViewHolder onCreateHeaderViewHolder ( ViewGroup parent , int headerType ) { return new HeaderHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . profile_item_header , parent , false ) ) ; }
public void onErrorResponse ( ) { mPatientDetailsView . showToast ( R . string . synchronize_patient_error , true ) ; mPatientDetailsView . dismissDialog ( ) ; }
public IngredientHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new IngredientHolder ( parent , R . layout . item_ingredient ) ; }
public void onAdded ( ) { if ( ! isAdded ( ) ) { for ( RRGLRenderable entity : mChildren ) { entity . onAdded ( ) ; } } super . onAdded ( ) ; }
public int getItemCount ( ) { return 2 ; }
public void run ( ) { rescanProgressBar . setIndeterminate ( true ) ; rescanTogglePause . setImageDrawable ( getResources ( ) . getDrawable ( R . drawable . fs_scan_pause48 ) ) ; rescanProgressBarState . setVisibility ( View . VISIBLE ) ; }
public boolean isStartOfMultiDayEvent ( ) { return isPartOfMultiDayEvent ( ) && ! getEvent ( ) . getStartDate ( ) . isBefore ( getStartDate ( ) ) ; }
public SNoteRepo ( ) { sNote = new SNote ( ) ; }
public boolean shouldOverlayPageInfo ( ) { return mPrefs . getBoolean ( Constants . PREF_OVERLAY_PAGE_INFO , true ) ; }
public long getItemId ( int position ) { if ( getItemViewType ( position ) == TYPE_POST ) { return ( ( Post ) getItem ( position ) ) . getUuid ( ) . hashCode ( ) ; } else { return - 9999 ; } }
private String constructGravatarUrl ( Context context , SiteModel site ) { return FakeGravatarUtils . gravatarFromEmail ( site . getEmail ( ) , getAvatarSize ( context ) , STATUS_404 ) ; }
private PeriodicTask ( final Runnable regularTask ) { internalWraperRunnable = new Runnable ( ) { @ Override public void run ( ) { regularTask . run ( ) ; handler . postDelayed ( this , INTERVAL ) ; } } ; }
public void onClick ( DialogInterface dialog , int which ) { onClose ( ) ; switch ( which ) { case DialogInterface . BUTTON_POSITIVE : callback . yes ( ) ; break ; case DialogInterface . BUTTON_NEGATIVE : callback . no ( ) ; break ; } }
public String getSearchUrl ( ) { return mPrefs . getString ( Name . SEARCH_URL , Constants . GOOGLE_SEARCH ) ; }
public Boolean isViewed ( ) { return viewed ; }
public boolean setSleep ( int sleep ) { if ( sleep == this . sleep ) return false ; this . sleep = sleep ; return true ; }
public GanjoorCat ( int ID , int PoetID , String Text , int ParentID , String Url , int StartPoem ) { _ID = ID ; _PoetID = PoetID ; _Text = Text ; _ParentID = ParentID ; _Url = Url ; _StartPoem = StartPoem ; }
public static void openUrlByUsingGlobalWPCOMCredentials ( Context context , String url ) { openWPCOMURL ( context , url , null , null , false ) ; }
private void initToolbar ( ) { Toolbar toolbar = ( Toolbar ) findViewById ( R . id . toolbar ) ; toolbar . setTitleTextColor ( ContextCompat . getColor ( this , android . R . color . white ) ) ; setSupportActionBar ( toolbar ) ; }
public void value1f ( float value ) { GLES20 . glUniform1f ( location , value ) ; }
public void onLogoutStatusEvent ( LogoutStatusEvent logoutEvent ) { if ( logoutEvent . succeeded ) { Timber . i ( "LOGOUT SUCCEEDED" ) ; Answers . getInstance ( ) . logCustom ( new CustomEvent ( "Logout" ) ) ; } }
public void getTrendingVideosFeed ( ) { queURL ( "javascript : getTrendingVideosFeed ( ) ; " ) ; }
public byte [ ] getProfileKey ( ) { return profileKey ; }
public void setFetchTime ( long value ) { preferences . edit ( ) . putLong ( FETCH_TIME , value ) . apply ( ) ; }
public void GetFicheAsync ( final String numero , final String PathFiche ) { executeAsync ( new Functions . IFunc < String > ( ) { public String Func ( ) throws java . lang . Exception { return GetFiche ( numero , PathFiche ) ; } } ) ; }
public void removePresence ( String resource ) { this . presences . removePresence ( resource ) ; }
public static long since ( long timestamp ) { return utcCurrentTimeMillis ( ) - timestamp ; }
private void closeFile ( ) { autoSave ( ) ; editor . setOpenedFile ( null ) ; setSubtitle ( null ) ; editor . setText ( "" ) ; }
public void onCompletion ( MediaPlayer mp ) { startActivity ( new Intent ( getApplicationContext ( ) , MainActivity . class ) ) ; finish ( ) ; }
private ResCdpParam . Result getCdpParam ( ) { return getSActivity ( ) . mCdpParam ; }
public FingerprintDialog callback ( FingerprintDialogCallback fingerprintDialogCallback ) { this . fingerprintDialogCallback = fingerprintDialogCallback ; this . fingerprintView . callback ( fingerprintCallback ) ; return this ; }
public OwnCloudSyncAdapter ( Context context , boolean autoInitialize ) { super ( context , autoInitialize ) ; ( ( NewsReaderApplication ) context . getApplicationContext ( ) ) . getAppComponent ( ) . injectService ( this ) ; }
public void onEventMainThread ( ServiceEvents . LoggingStatus loggingStatus ) { if ( loggingStatus . loggingStarted ) { showPreferencesSummary ( ) ; clearLocationDisplay ( ) ; setActionButtonStop ( ) ; } else { SetSatelliteCount ( - 1 ) ; setActionButtonStart ( ) ; } }
public ChipsEditText ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( context ) ; }
public String getUnitOne ( ) { return this . unitOne ; }
public ForceCompleteTextView ( Context context ) { super ( context ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ Nullable View . OnClickListener onClickListener ) { return addAction ( IconUtil . getBitmap ( icon ) , label , onClickListener ) ; }
public Player getActivePlayer ( ) { return mActivePlayer . get ( ) ; }
public TrimmedEditTextPreference ( Context context ) { super ( context ) ; }
public void AddResultToGlobal ( Matrix mk ) { AddToGlobal ( mk ) ; AutoSaved ++ ; }
public void runJob ( View view ) { new Thread ( new Runnable ( ) { @ Override public void run ( ) { NotificationsUtils . run ( TestingActivity . this , ( AppClass ) getApplication ( ) ) ; } } ) . run ( ) ; }
public boolean exist ( String key ) { return mStorage . exist ( key ) ; }
public GeneralSettingsPage checkIfConstraintProcessingIsDisabled ( ) { onView ( withText ( getTranslatedString ( R . string . constraint_behavior_title ) ) ) . check ( matches ( not ( isEnabled ( ) ) ) ) ; return this ; }
public void finishRotationTask ( ) { t . cancel ( ) ; }
public void setValueFormatter ( ValueFormatter f ) { if ( f == null ) return ; else mValueFormatter = f ; }
public WikiClient ( String apiEndpoint , String userAgent ) { okHttpClient = new OkHttpClient ( ) ; this . apiEndpoint = HttpUrl . parse ( apiEndpoint ) ; this . USER_AGENT = userAgent ; }
public Number getMeaningId ( ) { return this . meaningId ; }
public LinkedList < Float > getMaxData ( ) { return acc_max_data ; }
public void setPhoto ( Uri uri ) { currentPhotoUri = uri ; photoPanelLayout . setVisibility ( View . VISIBLE ) ; Glide . with ( this ) . load ( uri ) . into ( photoImageView ) ; }
public void onRlSimpleStyleClicked ( ) { paperStyleResId = R . drawable . simple_style ; paperResId = R . drawable . simple_edit_text_paper ; setSelectedItemBackground ( rlSimpleStyle ) ; }
public boolean isRecording ( ) { return ( textdataFileStream != null ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mData . clear ( ) ; mDataHolder = null ; }
public List < RideRow > getCheckedItems ( ) { return checkedRides ; }
public void sendButtonPressed ( int index ) { }
public void shutdown ( ) { mNotificationHandler . cancelRestartNotification ( ) ; mRestartPostponed = false ; }
public void setVersion ( int version ) { this . version = version ; }
public void setChecked ( boolean checked ) { this . markBgPaint . setColor ( ContextCompat . getColor ( getContext ( ) , checked ? R . color . tusky_blue : R . color . description_marker_unselected ) ) ; invalidate ( ) ; }
public static int getNotificationId ( ) { notificationCount += 1 ; return new Integer ( notificationCount ) ; }
public PollEntity setAnswers ( List < AnswerDbo > answers ) { this . answers = answers ; return this ; }
public void onResume ( ) { super . onResume ( ) ; mPresenter . checkIfEventWillBeHappeningSoon ( ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . updateInterfaces ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . blockedUsersDidLoaded ) ; }
private void setColor ( ) { color = getPreferencesColor ( ) ; }
public SectionsPagerAdapter ( FragmentManager fm ) { super ( fm ) ; }
public void append ( String text , Object . . . what ) { appendWithFlags ( text , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE , what ) ; }
public static int [ ] toCodePointArray ( @ NonNull final CharSequence charSequence ) { return toCodePointArray ( charSequence , 0 , charSequence . length ( ) ) ; }
public static void loadIndicator ( View view , int color ) { view . setBackgroundResource ( new ThemeUtil ( view . getContext ( ) ) . getCategoryIndicator ( color ) ) ; }
public Main ( String rest , String reps , String weight , int viewType ) { this . rest = rest ; this . reps = reps ; this . weight = weight ; this . viewType = viewType ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Bundle args = getArguments ( ) ; if ( args != null ) { populateFragmentArguments ( args ) ; } }
public static void send_signal_to_client_process ( String inter_face ) { Log . d ( TAG , "Sending signal to master process for Interface : " + inter_face ) ; Shell . SU . run ( Arrays . asList ( "/system/bin/dhcp6ctl - C start interface " + inter_face ) ) ; }
public void onClickItemRefresh ( View view ) { loadPhoto ( ) ; }
public void onActivityStarted ( Activity activity ) { registerActivity ( activity ) ; }
public int compare ( MoodleDiscussion moodleDiscussion1 , MoodleDiscussion moodleDiscussion2 ) { if ( moodleDiscussion1 . getTimemodified ( ) < moodleDiscussion2 . getTimemodified ( ) ) return 1 ; return - 1 ; }
public void onSlotInitializationFailed ( int errorCode , @ NonNull CharSequence errString ) { if ( ! BiometricsHelper . isCanceled ( errorCode ) ) { Dialogs . showErrorDialog ( getContext ( ) , R . string . encryption_enable_biometrics_error , errString ) ; } }
public void setUsec ( int usec ) { this . usec = usec ; }
public com . google . protobuf . Any getUpgradedClientState ( ) { if ( upgradedClientStateBuilder_ == null ) { return upgradedClientState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : upgradedClientState_ ; } else { return upgradedClientStateBuilder_ . getMessage ( ) ; } }
public void onViewStateRestored ( @ Nullable Bundle bundle ) { super . onViewStateRestored ( bundle ) ; mDeleteButton . setEnabled ( areCheckedItems ( ) ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; drawerToggle . onConfigurationChanged ( newConfig ) ; }
public void setInterestWrittenOff ( Integer interestWrittenOff ) { this . interestWrittenOff = interestWrittenOff ; }
public boolean hasText ( ) { return canHazText ( ) && PreferenceData . ICON_TEXT_VISIBILITY . getSpecificOverriddenValue ( getContext ( ) , ! canHazDrawable ( ) , getIdentifierArgs ( ) ) ; }
public AbstractAddRemoveExpandableDataProvider getDataProvider ( ) { return ( ( AddRemoveExpandableExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public String getTitle ( ) { return preview . getPreview ( ) . getTitle ( ) ; }
public void execute ( ValidationHolder validationHolder , Matcher matcher ) { TextInputLayout textInputLayout = validationHolder . getTextInputLayout ( ) ; textInputLayout . setErrorTextAppearance ( mErrorTextAppearanceStyle ) ; textInputLayout . setErrorEnabled ( true ) ; textInputLayout . setError ( validationHolder . getErrMsg ( ) ) ; }
public void setText ( CharSequence text ) { if ( text == null ) text = "" ; mText = text ; measureContent ( ) ; }
private void acquireGooglePlayServices ( ) { final GoogleApiAvailability apiAvailability = GoogleApiAvailability . getInstance ( ) ; final int connectionStatusCode = apiAvailability . isGooglePlayServicesAvailable ( context ) ; if ( apiAvailability . isUserResolvableError ( connectionStatusCode ) ) { listener . onApiError ( connectionStatusCode ) ; } }
public void onCreate ( ) { registerReceiver ( receiver1 , new IntentFilter ( TAG_BROADCAST_EXTRACT_CANCEL ) ) ; cd = getApplicationContext ( ) ; }
public Book getBook ( ) { return book ; }
public void setWeatherDescription ( List < WeatherDescription > weatherDescription ) { mWeatherDescription = weatherDescription ; }
private void showProgress ( ) { final ProgressBar progress = ( ProgressBar ) findViewById ( R . id . progress_follow ) ; progress . setVisibility ( View . VISIBLE ) ; mEditAdd . setEnabled ( false ) ; mBtnAdd . setEnabled ( false ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; textView . append ( "\nonCreateOptionsMenu " + menu ) ; getMenuInflater ( ) . inflate ( R . menu . lekt03_benytmenuer2 , menu ) ; return true ; }
public float getCurr ( ) { return mCurrValue ; }
public Battle initBattle ( ) { return new Battle ( ) ; }
public void bindTo ( MovieEntity movie ) { Picasso . get ( ) . load ( movie . getPosterPath ( ) ) . placeholder ( R . drawable . ic_placeholder_empty ) . into ( binding . image ) ; }
public RemoteCNPreference ( Context context ) { this ( context , null ) ; }
public final void resetOccupiedSpace ( ) { if ( this . _cellSpanH > 0 && this . _cellSpanV > 0 ) { _occupied = new boolean [ _cellSpanH ] [ _cellSpanV ] ; } }
private static void openWPCOMURL ( Context context , String url , String shareableUrl , String shareSubject ) { openWPCOMURL ( context , url , shareableUrl , shareSubject , false ) ; }
public void setCallbacks ( MyTBAOnboardingFragmentCallbacks callbacks ) { mCallbacks = callbacks ; }
public String tileDesc ( ) { return Game . getVar ( R . string . ConfusionGas_Info ) ; }
public void attachView ( ClientReportDetailMvpView mvpView ) { super . attachView ( mvpView ) ; }
private void init ( ) { engine = new IndicatorEngine ( ) ; engine . onInitEngine ( this , getContext ( ) ) ; size = 2 ; }
private void startSummaryActivity ( String location ) { TravelerIoFacadeImpl . TravelerSettings . getInstance ( getActivity ( ) ) . setLocation ( location ) ; Intent intent = new Intent ( getActivity ( ) , LocationSummaryActivity . class ) ; startActivity ( intent ) ; }
public void testSafeToAddAuthToken20 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( notWpcomAddress1 ) ) ) ; }
public LineAndPointFormatter ( ) { this ( Color . RED , Color . GREEN , Color . BLUE ) ; }
public CharSequence getTemperature ( ) { return TextUtils . concat ( String . valueOf ( df . format ( this . temperature ) ) , C_DEGREE ) ; }
public CharSequence getTitle ( ) { return context . getResources ( ) . getString ( R . string . git_init ) ; }
public int defenseSkill ( Char enemy ) { float skillFactor = 1 ; if ( getDifficulty ( ) == 0 ) { skillFactor = 1 . 2f ; } return ( int ) ( super . defenseSkill ( enemy ) * skillFactor ) ; }
public InvalidApiUrlException ( ) { super ( ERROR_MESSAGE ) ; }
public void onClick ( View view ) { Toast . makeText ( getContext ( ) , m . GetType ( ) . toString ( ) + " Matrix" , Toast . LENGTH_SHORT ) . show ( ) ; }
private void setCommunities ( List < CommunityModel > communities ) { interestsView . setCommunities ( communities ) ; }
public void onEventMainThread ( ServiceEvents . LocationUpdate locationEvent ) { DisplayLocationInfo ( locationEvent . location ) ; }
public int onGetSwipeReactionType ( MyViewHolder holder , int position , int x , int y ) { return Swipeable . REACTION_CAN_SWIPE_BOTH_H ; }
public TextTree getBuffer ( ) { return the_tree ; }
public static Bitmap getBitmapAsset ( String relativePathPrefix , String src ) throws IOException { return getBitmapAsset ( relativePathPrefix , src , 0 , 0 , 100 ) ; }
public void run ( ) { for ( BaseStationEvent e : onEvents ) { e . onError ( ArduinoComm . this , err ) ; } }
public boolean onLongClick ( View v ) { int position = getAdapterPosition ( ) ; doAdapterItemClicked ( v , position , true ) ; return true ; }
public boolean onCheckCanExpandOrCollapseGroup ( MyGroupViewHolder holder , int groupPosition , int x , int y , boolean expand ) { return false ; }
public IBinder onBind ( Intent intent ) { if ( isDebug ) Log . d ( LOG_TAG , "ScreenStateService onBind" ) ; return null ; }
public void run ( LottieComposition composition ) { reverseAnimation ( ) ; }
public void setContents ( View contents ) { this . contents = contents ; if ( shownPosition != null ) { show ( shownPosition ) ; } }
public static String [ ] toStringArray ( String value ) { if ( value == null ) return new String [ 0 ] ; else return TextUtils . split ( " " , value ) ; }
public void onClick ( View v ) { Intent i = new Intent ( Chat . this , Chat . class ) ; startActivity ( i ) ; }
public void setOnBindListener ( OnBindListener listener ) { this . bindListener = listener ; }
public CsvImportOptions createDefaultOptions ( ) { Account a = createFirstAccount ( ) ; Currency c = a . currency ; return new CsvImportOptions ( c , CsvImportOptions . DEFAULT_DATE_FORMAT , a . id , WhereFilter . empty ( ) , null , ' , ' , true ) ; }
public void set ( String key , long value ) { defaultKVStore . putLong ( key , value ) ; }
private static int [ ] zzUnpackcmap_blocks ( ) { int [ ] result = new int [ 22528 ] ; int offset = 0 ; offset = zzUnpackcmap_blocks ( ZZ_CMAP_BLOCKS_PACKED_0 , offset , result ) ; return result ; }
public static SIBDatabase getSIBDatabase ( Context context ) { if ( INSTANCE == null ) { INSTANCE = Room . databaseBuilder ( context , SIBDatabase . class , "sib - database" ) . build ( ) ; } return INSTANCE ; }
public static synchronized FluentQuery select ( String . . . columns ) { FluentQuery cQuery = new FluentQuery ( ) ; cQuery . mColumns = columns ; return cQuery ; }
public void setAddress ( String address ) { this . address = address ; updateView ( ) ; }
public @ Nullable ListItem renderFromModel ( Void aVoid , Void a2void ) { return null ; }
public AccountHeader withProfileImagesClickable ( boolean profileImagesClickable ) { this . mProfileImagesClickable = profileImagesClickable ; return this ; }
public Fragment getItem ( int position ) { return PlaceholderFragment . newInstance ( position ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . export_eclipse_project ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( HomeActivity . this , RegisterActivity . class ) ) ; }
public void onBackPressed ( ) { Log . i ( TAG , " onBackPressed" ) ; finish ( ) ; }
public String getExtraValueOf ( @ NonNull final String key ) { return mSubtype . getExtraValueOf ( key ) ; }
public void onClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsModeration . class ) ; startActivity ( i ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( max_id ) ; }
public static String getAyahString ( int sura , int ayah , Context context ) { return getSuraName ( context , sura , true ) + " - " + context . getString ( R . string . quran_ayah , ayah ) ; }
private void updateDefaultSubscriptionId ( Optional < Integer > defaultSubscriptionId ) { Log . w ( TAG , "updateDefaultSubscriptionId ( " + defaultSubscriptionId . orNull ( ) + " ) " ) ; sendButton . setDefaultSubscriptionId ( defaultSubscriptionId ) ; }
public static String getCollectionPath ( Context context ) { return new File ( getCurrentAnkiDroidDirectory ( context ) , COLLECTION_FILENAME ) . getAbsolutePath ( ) ; }
public static Fraction toFraction ( Float value ) { return new Fraction ( value ) ; }
public void onPurchaseHistoryRestored ( ) { Toast . makeText ( getContext ( ) , R . string . restored_previous_purchases , Toast . LENGTH_SHORT ) . show ( ) ; }
public void setCustomLocation ( Location location ) { customLocation = location ; updateCell ( ) ; }
public Analytics providesAnalytics ( Application application , GeneralSharedPreferences generalSharedPreferences ) { return analytics ; }
private void getInfo ( String url ) { JsonObjectRequest jsonObjectRequest = createObject ( url , this ) ; Singleton . getInstance ( this ) . addToRequestQueue ( jsonObjectRequest ) ; }
public String getViewInApp ( ) { return ViewInApp ; }
public AboutBuilder addYoutubeChannelLink ( int user ) { return addYoutubeChannelLink ( context . getString ( user ) ) ; }
public RotateSignedPreKeyJob ( Context context ) { super ( context , JobParameters . newBuilder ( ) . withNetworkRequirement ( ) . withMasterSecretRequirement ( ) . withRetryCount ( 5 ) . create ( ) ) ; }
public String getFormattedDistance ( Context context ) { return destination != null ? destination . getFormattedDistance ( context ) : null ; }
public void setProvider ( EventsDataProvider provider ) { this . provider = provider ; }
public void run ( ) { try { database . executeFast ( "DELETE FROM web_recent_v3 WHERE type = " + type ) . stepThis ( ) . dispose ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public static boolean saveFile ( Context context , Uri file , String data ) { return saveFile ( context , file , data . getBytes ( Charsets . UTF_8 ) ) ; }
public Song getCurrentSong ( ) { return currentSong ; }
public Weather ( int intervention_id , String temperature , String wind_speed , String description ) { this . intervention_id = intervention_id ; this . temperature = temperature ; this . wind_speed = wind_speed ; this . description = description ; }
public void SetMyCard ( Word word ) { this . wishlist . add ( 0 , word ) ; }
private View . OnClickListener onClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { onFabItemClickedListener . OnFabItemClick ( v . getId ( ) ) ; } } ;
public void onActivityStopped ( MonitoredActivity activity ) { mDialog . hide ( ) ; }
public void onClick ( View v ) { getImportPermissions ( ) ; alertDialog . dismiss ( ) ; }
public ContentAdapter ( FragmentManager fm , List < String > fonts ) { super ( fm ) ; this . fonts = fonts ; }
public EBP ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public int getItemCount ( ) { int count = mChildAdapter . getItemCount ( ) ; return count + ( mHeaderView == null ? 0 : 1 ) + ( mFooterView == null ? 0 : 1 ) ; }
public Result call ( List < Definition > definitions ) { if ( definitions == null || definitions . isEmpty ( ) ) { return null ; } return new Result ( definitions ) ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( RandomOperationActivity . this ) ; Intent intent = new Intent ( RandomOperationActivity . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
public Builder setInputId ( int value ) { bitField0_ | = 0x00000008 ; inputId_ = value ; onChanged ( ) ; return this ; }
public void setGraphicX ( ) { this . setBackgroundResource ( R . drawable . gf_x ) ; }
public void handleRecordingUpdate ( final boolean isComplete ) { if ( ! isComplete ) { if ( ! Config . canRecord ( ) ) { _audio . setRecordingState ( false , "" ) ; requestRecordingSave ( false ) ; } } else { requestRecordingSave ( true ) ; } }
public void setViewModel ( BaseViewModel viewModel ) { this . viewModel = ( HomepageViewModel ) viewModel ; ActivityHomepageBinding binding = DataBindingUtil . setContentView ( this , R . layout . activity_homepage ) ; binding . setViewModel ( this . viewModel ) ; }
public LocationClient providesLocationClient ( @ NonNull Application application ) { return applicationComponent . locationClient ( ) ; }
public void onDestroyView ( ) { if ( getActivity ( ) instanceof MusicServiceActivity ) ( ( AppActivity ) getActivity ( ) ) . removeMusicServiceEventListener ( this ) ; super . onDestroyView ( ) ; }
public void onClick ( View view ) { showResistanceDialog ( firstColor ) ; }
public void onResume ( ) { super . onResume ( ) ; new ActivityFeatures . Builder ( ) . begin ( ) . setBlockNavigationDrawer ( true ) . setStatusBarColored ( false , false ) . build ( ) . apply ( getActivity ( ) ) ; }
public InfoScreen ( RPSParty game ) { this . game = game ; loadAssets ( ) ; camera = createCamera ( ) ; stage = new Stage ( ) ; Gdx . input . setInputProcessor ( stage ) ; createBackground ( ) ; }
public void didReceivedNotification ( int id , int account , Object . . . args ) { if ( id == NotificationCenter . emojiDidLoaded ) { if ( emojiView != null ) { emojiView . invalidateViews ( ) ; } } }
public void onDonePressed ( Fragment currentFragment ) { super . onDonePressed ( currentFragment ) ; PrefsUtil . isFirstTime ( this , false ) ; IntentUtils . startActivity ( this , LoginActivity . class ) ; finish ( ) ; }
private void setUpViews ( ) { setUpToolbar ( ) ; setUpAppVersion ( ) ; setUpIconTint ( ) ; setUpOnClickListeners ( ) ; }
private void updateUploadButtonActive ( ) { final boolean anySelected = mFileListFragment . getCheckedFilesCount ( ) > 0 ; uploadButton . setEnabled ( anySelected ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_collection_full_control , parent , false ) ; return new ViewHolder ( v ) ; }
public void setListener ( OnKeywhatListener listener ) { this . listener = listener ; }
public int getAnimationSpeed ( ) { return 100 - getInt ( R . string . pref_key__overall_animation_speed_modifier , 70 ) ; }
public boolean getCustomizations ( ) { return customizations ; }
private void setFabIcon ( Drawable mDrawable ) { mFab . setImageDrawable ( mDrawable ) ; }
public float getAccuracy ( ) { return UNIT_TANK_ACCURACY ; }
public UserAndDeviceIdentitySettingsPage assertOnPage ( ) { checkIsStringDisplayed ( R . string . user_and_device_identity_title ) ; return this ; }
public void setView ( View v ) { mMedicalAttentionMainView = ( MedicalAttentionMainView ) v ; }
private void setNorm ( ) { norm = Math . sqrt ( ( Math . pow ( x , 2 ) + Math . pow ( y , 2 ) ) ) * 10000 ; }
public void onResponse ( String response ) { MyPlace result = PlaceInterpreter . getMyPlace ( response ) ; if ( response == null ) { listener . error ( new Exception ( "interpreter error" ) ) ; } else { listener . placeResolved ( result ) ; } }
public Category ( String name ) { this . name = name ; }
public String getName ( ) { if ( name == null ) { String new_name = ColorUtil . getInstance ( ) . getClosestColor ( this ) ; try { name = new_name ; } catch ( Exception e ) { return new_name ; } } return name ; }
private void load ( ) { thread . run ( ( ) -> load ( COMMON ) ) ; }
public final void setBlockTouch ( boolean v ) { this . _blockTouch = v ; }
private String [ ] getRecord ( ) { return new String [ ] { this . id , this . name , String . valueOf ( this . price ) , String . valueOf ( this . quantity ) , this . category } ; }
public Image getPoster ( ) { return poster ; }
public void onCompletion ( ) { super . onCompletion ( ) ; followingUpdateRequestHandler . initiate ( ) . sendRequest ( ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { getActivity ( ) . setTitle ( "calendar" ) ; mCalendarView = view . findViewById ( R . id . calendarView ) ; mCalendarView . setOnDayClickListener ( listener ) ; getData ( ) ; }
public List < SensorsGridItem > getSensorsGridItems ( ) { return mSensorsGridItems ; }
public Maybe < Boolean > delete ( Event entity ) { return cacheManager . delete ( entity ) ; }
public void onReceive ( Context context , Intent intent ) { scheduleAlarms ( context ) ; }
public void setAction ( int action ) { this . action = action ; }
public void onClick ( View view ) { if ( idSwtTaskDiaInteiro . isChecked ( ) ) { idEdtTaksHour . setEnabled ( false ) ; } else { idEdtTaksHour . setEnabled ( true ) ; } }
public void onClick ( View v ) { getActivity ( ) . finish ( ) ; }
public SupportDarkenFrameLayout ( @ NonNull Context context ) { super ( context ) ; beforeStart ( ) ; }
public void displayData ( @ NonNull List < AdvancedItem > items ) { menuAdapter . setItems ( items , true ) ; }
public void cbFunc ( RootCommand state ) { if ( state . exitCode != 0 ) { errorNotification ( ctx ) ; } }
private void setActionButtonVisibilityAndListener ( Button actionButton ) { actionButton . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View view ) { calmingStatementFragmentListener . unlockStory ( view ) ; } } ) ; }
public void setAsyncHttpClient ( AsyncHttpClient asyncHttpClient ) { mAsyncHttpClient = asyncHttpClient ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt64 ( id ) ; }
public void onEventMainThread ( PlayerStateChanged event ) { if ( ! mTrackingTouch ) { updateAndExpandPlayerList ( ) ; } else { mUpdateWhileTracking = true ; } }
public boolean onLongClick ( View v ) { if ( mClickListener != null ) { int position = mRecyclerView . getLayoutManager ( ) . getPosition ( v ) ; mClickListener . onLongClick ( mItems . get ( position ) ) ; } return true ; }
public com . coinomi . core . protos . Protos . TransactionOutput getTransactionOutput ( int index ) { return transactionOutput_ . get ( index ) ; }
public void onFailure ( Call < ResTxInfo > call , Throwable t ) { if ( IS_SHOWLOG ) t . printStackTrace ( ) ; if ( isFinishing ( ) ) return ; }
public void onRequestFailure ( SpiceException e ) { restoreSemesterProgressBarDatesFromPrefs ( ) ; }
public boolean isMet ( double d ) { return false ; }
public String getUsername ( ) { return username ; }
public static byte [ ] getAssetFileInBytes ( String name ) throws IOException { return Files . toByteArray ( getAssetFile ( name ) ) ; }
public PeriodPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public static void setInt ( Context context , String keyId , int value ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; Editor editor = sharedPreferences . edit ( ) ; editor . putInt ( keyId , value ) ; editor . apply ( ) ; }
public static PostFlingAction pref_behaviour_fling_post_left ( final Context context , final SharedPreferences sharedPreferences ) { return PostFlingAction . valueOf ( getString ( R . string . pref_behaviour_fling_post_left_key , "downvote" , context , sharedPreferences ) . toUpperCase ( ) ) ; }
public void onErrorResponse ( ) { mPatientDetailsView . showToast ( R . string . synchronize_patient_error , true ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return UserProfilePhoto . TLdeserialize ( stream , constructor , exception ) ; }
public @ Nullable WindowAndMediaPeriodId getLastReportedPlayingMediaPeriod ( ) { return lastReportedPlayingMediaPeriod ; }
public void setHeartRateSummary ( HeartRateSummary heartRateSummary ) { this . heartRateSummary = heartRateSummary ; }
public void onBackPressed ( ) { if ( ! mLoginMode ) { showFillUsrPwdFragment ( false , null , null , true ) ; } else { super . onBackPressed ( ) ; } }
private static synchronized LinkedList < RRError > getErrors ( ) { final LinkedList < RRError > result = new LinkedList < RRError > ( errors ) ; errors . clear ( ) ; return result ; }
public void testIsNOTWPCOM6 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( buildURI ( notWpcomAddress2 ) ) ) ; }
public void setResult ( String result ) { this . result = result ; }
public static void applyTheme ( ThemeInfo themeInfo , boolean animated ) { applyTheme ( themeInfo , true , true , animated ) ; }
public void movePlaneLeft ( ) { m_PlayerBoard . movePlaneLeft ( ) ; }
public Single < Tag > getById ( String id ) { return Single . fromCallable ( ( ) -> { DbTag tagById = dao . getTagById ( id ) ; return dataMapper . toEntity ( tagById ) ; } ) ; }
public MaxAccuracyWithinTimeoutLocationClient ( LocationClient locationClient , LocationListener listener ) { this . locationClient = locationClient ; this . locationClient . setPriority ( DEFAULT_PRIORITY ) ; this . listener = listener ; this . timerHandler = new Handler ( Looper . getMainLooper ( ) ) ; }
public Integer getPrecipIntensity ( ) { return precipIntensity ; }
public static CurrentStatus create ( final State state , final LocalDateTime time ) { return new AutoValue_CurrentStatus ( state , time ) ; }
public void initGrid ( ) { resetGrid ( ) ; initGridByAutomaticGeneration ( ) ; computePlanePointsList ( true ) ; }
public String toString ( ) { return Localization . get ( "commands . common . value . command . string" ) ; }
public void setLanguage ( String language ) { this . language = language ; }
public Dictionary ( DictionaryDataFile file , String abbreviation , Preferences . DictionaryType type , String path ) { this . file = file ; this . type = type ; this . path = path ; this . abbreviation = abbreviation ; }
public static com . coinomi . core . protos . Protos . TransactionOutput parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void run ( ) { client . blockingConnect ( CONNECTION_TIME_OUT_MS , TimeUnit . MILLISECONDS ) ; Wearable . MessageApi . sendMessage ( client , telNodeId , " " , null ) ; client . disconnect ( ) ; }
private SimpleEvent msgSetImage = new SimpleEvent ( ) { @ Override public void process ( ) { BitmapDrawable bitmapDrawable = new BitmapDrawable ( image . getBitmap ( ) ) ; alertDialog . setIcon ( bitmapDrawable ) ; } } ;
public Consist ( Loco l ) { this ( ) ; this . add ( l ) ; leadAddr = l . getAddress ( ) ; trailAddr = l . getAddress ( ) ; }
private void showMainFragment ( ) { setTitle ( getString ( R . string . app_name ) ) ; getSupportFragmentManager ( ) . popBackStack ( "main" , 0 ) ; navigationView . setCheckedItem ( R . id . nav_all ) ; }
public void addMediaEventListener ( MediaEventListener l ) { if ( ! listeners . contains ( l ) && listeners != null ) { listeners . add ( l ) ; } }
private AccountManager accountManager ( ) { return AccountManager . get ( context ) ; }
public void onReceive ( Context context , Intent intent ) { Log . w ( TAG , "Got a challenge broadcast . . . " ) ; handleChallengeReceived ( intent . getStringExtra ( CHALLENGE_EXTRA ) ) ; }
private void addEditFragment ( Long id ) { . beginTransaction ( ) . replace ( R . id . fragment_container , BMIEditFragment . newInstance ( id ) ) . addToBackStack ( null ) . commit ( ) ; */ }
public void setData ( CandleData data ) { mCandleData = data ; init ( ) ; }
private LocationCallback mLocationCallback = new LocationCallback ( ) { @ Override public void onLocationResult ( LocationResult locationResult ) { mLastKnownLocation = locationResult . getLastLocation ( ) ; if ( mCurrentMode != null ) mCurrentMode . onLocationChanged ( mLastKnownLocation ) ; } } ;
public void onRepeatTypeChanged ( Spinner spinner , int position ) { repeatAfterCompletion = position == TYPE_COMPLETION_DATE ; repeatTypes . set ( 0 , repeatAfterCompletion ? repeatTypes . get ( 2 ) : repeatTypes . get ( 1 ) ) ; typeAdapter . notifyDataSetChanged ( ) ; }
public void onPause ( ) { super . onPause ( ) ; _mListener = null ; MainActivity . getActivity ( ) . getOptionsMenu ( ) . findItem ( R . id . action_filter ) . setVisible ( false ) ; }
public void onResume ( ) { super . onResume ( ) ; getPreferenceScreen ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public int getClientId ( ) { return ClientId ; }
public ChartMarkerView ( Context context , int layoutResource , int type ) { super ( context , layoutResource ) ; mType = type ; mContent = ( TextView ) findViewById ( R . id . tvContent ) ; }
public LottieAnimatableFloatValue getDashOffset ( ) { return offset ; }
public void onClick ( View v ) { checkIfAnsweredAndAnswer ( "kinda" ) ; }
public File getFile ( ) { return textdataFile ; }
private void updateLogs ( ) { new RefreshLogs ( ) . execute ( ) ; if ( ! isDestroyed ( ) ) { handler . postDelayed ( this : : updateLogs , 1000 ) ; } }
public int getEndpointQueue ( ) { return 0 ; }
public void onConfigurationChanged ( Configuration newConfig ) { if ( BuildConfig . LOG_DEBUG ) LogUtils . d ( TAG , newConfig ) ; super . onConfigurationChanged ( newConfig ) ; if ( mDrawerToggle != null ) { mDrawerToggle . onConfigurationChanged ( newConfig ) ; } }
public void onBindViewHolder ( LibraryHolder holder , int position ) { Library contact = this . mLibraries . get ( position ) ; holder . setTitle ( contact . getName ( ) ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_Messages . TLdeserialize ( stream , constructor , exception ) ; }
public void additionMedalsOftenEnough ( ) { assertFrequentEnoughMedals ( GameType . ADDITION ) ; }
public static synchronized boolean safeToAddWordPressComAuthToken ( String url ) { return UrlUtils . isHttps ( url ) && isWordPressCom ( url ) ; }
public void onDone ( ) { view . onDelegateRecognizedText ( this . recognizedText ) ; view . onClose ( ) ; }
public void swipeLeft ( ) { realObject . setCurrentItem ( realObject . getCurrentItem ( ) + 1 ) ; notifyListener ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; fastScrollerThumbView . cancelColorSubs ( ) ; }
public com . coinomi . core . protos . Protos . Key getMasterKey ( ) { if ( masterKeyBuilder_ == null ) { return masterKey_ ; } else { return masterKeyBuilder_ . getMessage ( ) ; } }
private void buildView ( ) { initLoginButton ( ) ; initServerButton ( ) ; addWidgets ( ) ; }
public static void initStatics ( ) { scale = initialScale ; clearHistory = false ; firstUrl = null ; webBundle = new Bundle ( ) ; }
public static void skipIfDefaultAccountDoesNotExist ( ) { assumeFalse ( "default account does not exist - skipping test" , Authenticator . getDefaultAccount ( InstrumentationRegistry . getTargetContext ( ) ) == null ) ; }
public boolean hasDataInCache ( String key ) { return memoryCache . get ( key ) != null ; }
public void onOpenChest ( MotionEvent event ) { }
public void onItemClick ( NatureItem natureItem , View natureView ) { fragmentNavigation . navigateToNatureDetailFragment ( natureItem . getDrawableResId ( ) , natureView ) ; }
private int getNthMostRecentIndex ( int n ) { if ( n >= len || n < 0 ) { throw new ArrayIndexOutOfBoundsException ( n ) ; } return ( start + len - n - 1 ) % positions . length ; }
public void deleteSuccessfully ( Tag tag , boolean deleted ) { if ( deleted ) { EventBus . getDefault ( ) . post ( new TagDeletedEvent ( tag ) ) ; finish ( ) ; } else { showSnackbarMessage ( R . string . msg_error_tag_could_not_be_deleted ) ; } }
private void addBackground ( ) { setBackground ( new Background ( Color . BLACK ) ) ; }
private void disconnect ( ) { this . hostNodeId = null ; NTPTime . close ( ) ; this . setState ( DeviceState . DISCONNECTED ) ; }
public void setUp ( ) throws Exception { mPostPresenter = new PostPresenter ( mMockDataManager ) ; mPostPresenter . setLatestLocation ( mMockLastestLocation ) ; mPostPresenter . attachView ( mMockPostMvpView ) ; }
public void onFetchPoolInfo ( ) { mTaskCount = 1 ; new OsmosisGrpcPoolInfoTask ( getBaseApplication ( ) , this , getSActivity ( ) . mBaseChain , getSActivity ( ) . mOsmosisPoolId ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void setOutputStream ( OutputStream out ) throws IOException { if ( out == null ) { throw new IOException ( ) ; } this . outputStream = new OutputStreamWriter ( out ) ; }
public void onErrorResponse ( VolleyError volleyError ) { AppLog . e ( T . READER , volleyError ) ; if ( resultListener != null ) { resultListener . onUpdateResult ( ReaderActions . UpdateResult . FAILED ) ; } }
public void onVisibilityChanged ( boolean visible ) { super . onVisibilityChanged ( visible ) ; if ( visible ) view . onResume ( ) ; else view . onPause ( ) ; }
public void setMidiChannel ( int midiChannel ) { synth . setMidiChannel ( midiChannel ) ; }
public int nReviewsDoneToday ( int tElapsed ) { return ( int ) ( nReviewsPerDay [ REVIEW_TYPE_YOUNG ] [ tElapsed ] + nReviewsPerDay [ REVIEW_TYPE_MATURE ] [ tElapsed ] ) ; }
public void onClick ( View v ) { String url = "http : Intent intentGithub = new Intent ( Intent . ACTION_VIEW ) ; intentGithub . setData ( Uri . parse ( url ) ) ; startActivity ( intentGithub ) ; }
public void setDescription ( Object description ) { this . description = description ; }
private void networkFail ( ) { getView ( ) . showBriefMessage ( stringResUtils . getNetworkFail ( ) ) ; }
private Bitmap getAppLogo ( ) { return BitmapFactory . decodeResource ( context . getResources ( ) , R . mipmap . ic_launcher ) ; }
public void testBothNull ( ) { DiffUpdate < Integer > update = new DiffUpdate <> ( null ) ; List < Integer > actualNewData = update . getNewData ( null ) ; assertNull ( actualNewData ) ; update . applyUpdatesTo ( callback ) ; verifyZeroInteractions ( callback ) ; }
public Editor putLong ( final String key , final long value ) { newValuesMap . put ( key , value ) ; return this ; }
public void historyChanged ( ) { setMenuItemEnabled ( undoStore . canUndo ( ) ) ; }
private void setupVehicleReward ( UiBuilder builder , VehicleDef vehicleDef ) { VehicleActor vehicle = builder . getActor ( "vehicle" ) ; vehicle . setVehicleDef ( vehicleDef ) ; setupRewardDetails ( builder , "New vehicle unlocked ! " , vehicleDef . name ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; compositeDisposable . dispose ( ) ; locationProvider . stopLocationUpdates ( locationCallback ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; PitchListener pitchListener = new PitchListener ( ) ; pitchListener . execute ( ) ; }
private void checkPlayingAt ( TimeIntervalMatcher time ) { checkPlaying ( ) ; timeView . check ( matches ( withText ( time ) ) ) ; }
public int getItemViewType ( int position ) { InfoAndPieces item = getItem ( position ) ; return StatusCode . isStatusCompleted ( item . info . statusCode ) ? VIEW_FINISH : VIEW_QUEUE ; }
public int getInventory ( ) { return inventory ; }
private void displayLoading ( ) { showProgressBar ( true ) ; recyclerView . setVisibility ( View . GONE ) ; }
public TrackModel ( ) { this ( null , null , null , null , 0 , 0 , null , - 1 , - 1 ) ; }
public static void viewAccountSettings ( Context context ) { Intent intent = new Intent ( context , AccountSettingsActivity . class ) ; AnalyticsUtils . trackWithCurrentBlogDetails ( AnalyticsTracker . Stat . OPENED_ACCOUNT_SETTINGS ) ; context . startActivity ( intent ) ; }
public void setUnread ( boolean unread ) { this . unread = unread ; }
public UsersLTE getItem ( int position ) { return users . get ( position ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_ORDINARY_DRINK , null , null , null , null ) ; }
public void setFilename ( String filename ) { mFilename = filename ; }
public void onGetProfileFailure ( ) { showProcessDialog . set ( false ) ; showToast . notifyChange ( ) ; toastContent . set ( getString ( R . string . network_err ) ) ; }
public static List < File > getMediaFiles ( Form form ) { String formMediaPath = form . getFormMediaPath ( ) ; return formMediaPath == null ? new ArrayList <> ( ) : FileUtils . listFiles ( new File ( formMediaPath ) ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfAmok_Info ) ; }
public StatusViewData . Concrete apply ( Status input ) { return ViewDataUtils . statusToViewData ( input , alwaysShowSensitiveMedia ) ; }
public long getActiveTime ( ) { return th . isValid ( ) ? th . status ( ) . activeDuration ( ) / 1000L : 0 ; }
public List < Recipe > loadNextRecipes ( Category category , int offset , int limit ) { return storage . getRecipes ( category , offset , limit ) ; }
public boolean appliesTo ( ResourceFolderType folderType ) { return folderType == ResourceFolderType . XML ; }
public static String getZipFileUrl ( String widthParam ) { String url = IMG_ZIP_BASE_URL ; url += "images" + widthParam + " . zip" ; return url ; }
public void clickMarks ( View v ) { Intent i = new Intent ( this , Marks . class ) ; startActivity ( i ) ; }
public void redo ( ) { if ( ! canRedo ( ) ) return ; index ++ ; stack . get ( stack . size - 1 + index ) . reapply ( ) ; }
public MusicStateReceiver ( final BaseActivity activity ) { reference = new WeakReference <> ( activity ) ; }
public void bindAdapter ( ContributionAdapter a , SwipeRefreshLayout layout ) throws ExecutionException , InterruptedException { this . adapter = a ; this . refreshLayout = layout ; loadMore ( a , subreddit , true ) ; }
private void initialize ( ) { if ( historicalRecordListPresenter == null ) { getComponent ( HistoricalRecordComponent . class ) . inject ( this ) ; historicalRecordListPresenter . setView ( this ) ; } }
public void readFromParcel ( Parcel in ) { coordinate . readFromParcel ( in ) ; velocity . readFromParcel ( in ) ; acceleration . readFromParcel ( in ) ; translated = Boolean . getBoolean ( in . readString ( ) ) ; }
public PrioritisedDownloadQueue ( final Context context ) { mContext = context ; new RedditQueueProcessor ( ) . start ( ) ; }
public void notifyFinishAttaching ( ) { getPresenter ( ) . getNewMovie ( ) ; }
public String toString ( ) { return isLevelKnown ( ) ? Utils . format ( Game . getVar ( R . string . Armor_ToString ) , super . toString ( ) , requiredSTR ( ) ) : super . toString ( ) ; }
public static Intent newInstance ( Context c , String eventKey , String tab ) { Intent intent = new Intent ( c , ViewEventActivity . class ) ; intent . putExtra ( EVENTKEY , eventKey ) ; intent . putExtra ( TAB , tab ) ; return intent ; }
public < T extends Object > Task < T > sendWithResult ( String action , String actionResult ) { return sendWithResult ( action , actionResult , null ) ; }
public boolean previousSlide ( ) { int currentItem = binding . miPager . getCurrentItem ( ) ; return goToSlide ( currentItem - 1 ) ; }
public void run ( ) { openVideoEditor ( startVideoEdit , false , false ) ; startVideoEdit = null ; }
public GeoPackageDatabases ( Context context , String prefix ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; this . context = context ; this . settings = preferences ; this . prefix = prefix ; DATABASES_PREFERENCE = prefix + "databases" ; loadFromPreferences ( ) ; }
public void categoryClicked ( View view ) { int checkboxId = ApiUtils . getCheckboxId ( view . getId ( ) ) ; CheckBox checkBox = ( CheckBox ) findViewById ( checkboxId ) ; processClick ( ApiUtils . getCategoryFromId ( view . getId ( ) ) , checkBox ) ; }
public void testIsFestivalDay ( ) { assertThat ( planetaryCalendar . isFestivalDay ( days ) , is ( festivalDay ) ) ; }
private void onUp ( ) { if ( ! flingAnimation . isAnimating ( ) ) { scrollToNearestPosition ( ) ; } }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsData . class ) ; startActivity ( i ) ; }
public static boolean isGcmEnabled ( ) { return BuildConfig . IS_GCM_ENABLED ; }
public void stopAnimation ( ) { stateScroller . forceFinished ( ) ; onAnimationStopped ( ) ; }
public void onLoadMore ( int page , int totalItemsCount ) { vmsPage = page ; loaderManager . restartLoader ( 1 , null , cursorVmsAdapterLoader ) ; }
public DbHelper ( Context context , String dbName , Integer version ) { super ( context , dbName , null , version ) ; }
private final int getDeviceIcon ( BluetoothDevice device ) { if ( bluetooth . isAlreadyPaired ( device ) ) { return R . drawable . ic_bluetooth_connected_black_24dp ; } else { return R . drawable . ic_bluetooth_disabled_black_24dp ; } }
public Integer getUpdated ( ) { return updated ; }
private void setDow ( String dowString ) { dow . clear ( ) ; String [ ] days = dowString . split ( " , " ) ; for ( String day : days ) { dow . add ( Util . parseDecimalIntOrZero ( day ) ) ; } }
public Long getTestDuration ( ) { return testDuration ; }
public ExerciseListAdapter ( Context context , ItemListener itemListener , boolean showSelectButton ) { super ( ) ; this . context = context ; this . itemListener = itemListener ; this . exercises = new ArrayList < Exercise > ( ) ; this . showSelectButton = showSelectButton ; }
public Config setTextSize ( int textSize ) { this . textSize = textSize ; return this ; }
private int getOriginalPosition ( int position ) { int correctedPosition ; if ( isDragging ( ) ) { correctedPosition = convertToOriginalPosition ( position , mDraggingItemInitialPosition , mDraggingItemCurrentPosition ) ; } else { correctedPosition = position ; } return correctedPosition ; }
public void pinchStop ( ) { }
public void onToggleAdvancedMode ( boolean advancedMode ) { getBaseActivity ( ) . collapseAppBar ( ) ; getBaseActivity ( ) . setAppBarLocked ( advancedMode ) ; mBottomSheet . resetPeekHeight ( ) ; }
private void makeToast ( String message , int length , int color ) { KcaCustomToast customToast = new KcaCustomToast ( getApplicationContext ( ) ) ; customToast . showToast ( message , length , color ) ; }
public String getValue ( ) { return spinner . getSelectedItem ( ) . toString ( ) == null?"" : spinner . getSelectedItem ( ) . toString ( ) ; }
public Bitmap getThumbForPhoto ( MessageObject messageObject , TLRPC . FileLocation fileLocation , int index ) { PhotoPickerPhotoCell cell = getCellForIndex ( index ) ; if ( cell != null ) { return cell . photoImage . imageReceiver . getBitmap ( ) ; } return null ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitNumericVariable ( this ) ; else return visitor . visitChildren ( this ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { textViewTTSSpeed . setText ( percentFormat . format ( getSpeedBarValue ( ) ) ) ; if ( ! isTouchTracking ) { ttsSetSpeedFromSeekBar ( ) ; } }
public Tls12SocketFactory ( SSLSocketFactory base ) { this . delegate = base ; }
public static ValueFormatter getDefaultValueFormatter ( ) { return mDefaultValueFormatter ; }
public boolean onNavigationItemSelected ( int position , long itemId ) { AppSettings . setUserSelectedNavigationItem ( position ) ; LoadFragmentView ( position ) ; return true ; }
public static SubnetDevices fromIPAddress ( @ NonNull InetAddress inetAddress ) { return fromIPAddress ( inetAddress . getHostAddress ( ) ) ; }
public Void visit ( DirFilter dirFilter ) { if ( ! dirFilter . filtersInPath ( mediaDir ) ) { removeFilter ( dirFilter ) ; } return null ; }
public void onErrorResponse ( VolleyError error ) { imageView . setImageResource ( R . drawable . ic_launcher ) ; }
private boolean isRecordingGranted ( @ NonNull int [ ] grantResults ) { return grantResults . length > 0 && ( grantResults [ 0 ] == PackageManager . PERMISSION_GRANTED ) ; }
public DetailPresenter providesPresenter ( ) { return new DetailPresenter ( activity ) ; }
public String getError ( ) { return Error ; }
public void respondeAumento ( Jogador j , boolean aceitou ) { if ( j . equals ( getJogadorHumano ( ) ) ) { if ( aceitou ) enviaLinha ( "D" ) ; else enviaLinha ( "C" ) ; } }
public void joinTagsShouldReturnEmptyStringWhenSetIsEmpty ( ) { assertEquals ( "" , Utils . joinTags ( new HashSet < String > ( ) ) ) ; }
public void push ( Screen screen ) { mStack . push ( screen ) ; mGame . setScreen ( screen ) ; }
public void submitList ( @ Nullable List < FileManagerNode > list ) { if ( list != null ) Collections . sort ( list , directoryFirstCmp ) ; super . submitList ( list ) ; }
public int getOwnDeviceId ( ) { return axolotlStore . loadRegistrationId ( ) ; }
public float convertRawYCoordinateToScaledCanvasCoordinate ( float rawY , MapScaleInfo scaleInfo ) { return ( rawY - scaleInfo . getPivotY ( ) ) /scaleInfo . getScaleFactor ( ) + scaleInfo . getPivotY ( ) ; }
public static int getUserID ( Context context ) { return getSharedPreferences ( context ) . getInt ( USER_ID , 5 ) ; }
public void onCompletion ( MediaPlayer mp ) { mImageButton . setImageResource ( R . drawable . play ) ; mProgressBarAnimator . end ( ) ; mStatus = STATUS_ENDED ; }
public void onChange ( RealmResults < EpisodeRealm > results ) { podcastId2Episode_ . put ( podcastId , result ) ; listener_ . notifyEpisodeListGroupChanged ( podcastId , results ) ; }
public PublicKey ( int id , ECPublicKeyParameters publicKey ) { this . publicKey = publicKey ; this . id = id ; }
public boolean onNavigationItemSelected ( final MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . pictures : break ; default : super . onNavigationItemSelected ( item ) ; } return true ; }
public UserBuilder street ( String street ) { this . address . setAddressLine ( 0 , street ) ; return this ; }
public static AddNoteFragment newInstance ( Integer idIntrebare ) { AddNoteFragment fragment = new AddNoteFragment ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putInt ( ARGS_QUESTION_ID , idIntrebare ) ; fragment . setArguments ( bundle ) ; return fragment ; }
public void onLoadFinished ( Loader < ArrayList < Playlist >> loader , ArrayList < Playlist > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
public Builder setHash ( com . google . protobuf . ByteString value ) { if ( value == null ) { throw new NullPointerException ( ) ; } bitField0_ | = 0x00000002 ; hash_ = value ; onChanged ( ) ; return this ; }
public boolean performExtraKeyButtonHapticFeedback ( View view , ExtraKeyButton buttonInfo , Button button ) { return false ; }
public Tutorial ( String tag , int bpm , Activity activity ) { this . tag = tag ; this . bpm = bpm ; this . activity = activity ; initViews ( ) ; }
public boolean onCallback ( Void result ) { Tool . logInfo ( "Retry to get read/write external storage permission" ) ; checkExternalStorageReadWritePermission ( ) ; return false ; }
public void onNewToken ( final String token ) { Lg . i ( "onTokenRefresh : " , token ) ; sendToServer ( token ) ; }
public CSVReader ( Reader reader , char separator , char quotechar ) { this ( reader , separator , quotechar , 0 ) ; }
private void onDisconnect ( ) { close ( ) ; bridge . dispatchDisconnect ( false ) ; }
public void setColorEdit ( EditText colorEdit ) { this . colorEdit = colorEdit ; if ( this . colorEdit != null ) { this . colorEdit . setVisibility ( View . VISIBLE ) ; this . colorEdit . addTextChangedListener ( colorTextChange ) ; setColorEditTextColor ( pickerTextColor ) ; } }
private void onAlert ( String message ) { for ( BlackboardListener listener : listeners ) { listener . onAlert ( message ) ; } }
public void notifyAllObserver ( ) { for ( Observer observer : observers ) { observer . update ( ) ; } }
public void gotXmlRpcEndpoint ( String inputSiteAddress , String endpointAddress ) { LoginUsernamePasswordFragment loginUsernamePasswordFragment = LoginUsernamePasswordFragment . newInstance ( inputSiteAddress , endpointAddress , null , null , null , null , false ) ; slideInFragment ( loginUsernamePasswordFragment , true , LoginUsernamePasswordFragment . TAG ) ; }
public void onClick ( View view ) { showInductanceDialog ( secondColor ) ; }
public void pickDirectoryWithNoSchemeAndNoType ( ) { launch ( buildIntent ( IntentConstants . ACTION_PICK_DIRECTORY , null , null ) ) ; }
public void onBindViewHolder ( final VH holder , final int position ) { if ( position == 0 ) { onBindHeaderItemViewHolder ( holder , position ) ; } else { onBindContentItemViewHolder ( holder , position - HEADER_SIZE ) ; } }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( listeDesActivitesEtProf ) getResult ( listeDesActivitesEtProf . class , __result , "listeHoraireEtProfResult" , __envelope ) ; }
private void setErrNameAlready ( ) { mTvNameNone . setVisibility ( View . GONE ) ; mTvNameAlready . setVisibility ( View . VISIBLE ) ; mTvLengthErr . setVisibility ( View . GONE ) ; mTvPwMatch . setVisibility ( View . GONE ) ; }
public void onLocationChanged ( Location location ) { if ( mWaitingOnFindClosest ) { mWaitingOnFindClosest = false ; if ( ! isCleanedUp ( ) ) { mCentralMap . getErrorBanner ( ) . animateBanner ( false ) ; applyFoundGraticule ( location ) ; } } }
public void moveFiles ( String newLocation ) { mMoveFilesTask = new MoveFilesAsyncTask ( getActivity ( ) , newLocation ) ; mMoveFilesTask . execute ( ) ; }
private void parseDictionaryList ( final JSONArray array ) throws JSONException { for ( int i = 0 ; i < array . length ( ) ; i ++ ) { JSONObject dictionary = array . getJSONObject ( i ) ; parseDictionary ( dictionary ) ; } }
public void setOnLongClickListener ( OnLongClickListener l ) { openUrlButton . setOnLongClickListener ( l ) ; }
public void shouldAddRequestParametersBeforeExecuting ( ) { givenRequestParametersWithCityId ( 123456 ) ; givenApiRequest ( ) ; whenGettingWeatherAsync ( ) ; thenShouldHaveRequestParametersWhenExecuting ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . place_item , parent , false ) ; return new QuizRecyclerViewAdapter . ViewHolder ( view ) ; }
public static void showSnackBar ( View view , String message ) { snackbar = Snackbar . make ( view , message , Snackbar . LENGTH_SHORT ) ; snackbar . show ( ) ; }
public IdentifyUserPromptPage clickOnFormWithIdentityPrompt ( String formName ) { scrollToAndClickOnForm ( formName ) ; return new IdentifyUserPromptPage ( formName , rule ) . assertOnPage ( ) ; }
public void expandAll ( ) { if ( mAdapter != null ) { mAdapter . expandAll ( ) ; } }
public void onCreate ( ) { addHelper ( "PREFS_BACKUP_KEY" , new SharedPreferencesBackupHelper ( this , GeneralPreferences . SHARED_PREFERENCES_FILE , getPackageName ( ) + "_preferences" ) ) ; addHelper ( "DB_BACKUP_KEY" , new DbBackupHelper ( this , Database . DB_NAME ) ) ; }
private void handleShiftForSwitchKeyboard ( ) { if ( mKeyboardSwitcher . isCurrentKeyboardViewUseQwertyKeyboard ( ) ) { checkToggleCapsLock ( ) ; mTaigiKeyboardView . setShifted ( mIsCapsLock || ! mTaigiKeyboardView . isShifted ( ) ) ; } else { mKeyboardSwitcher . handleShift ( ) ; } updateShiftIcon ( ) ; }
public void drag ( int from , int to ) { LogUtil . i ( TAG , "Drag from %d to %d" , from , to ) ; }
public void onClick ( DialogInterface dialog , int which ) { newTab ( url , true ) ; mShouldClose = true ; LightningView tab = mTabsModel . lastTab ( ) ; if ( tab != null ) { tab . setTag ( true ) ; } }
public AddNewRepeatDialog swipeToNextQuestionWithRepeatGroup ( String repeatName ) { flingLeft ( ) ; return waitFor ( ( ) -> new AddNewRepeatDialog ( repeatName , rule ) . assertOnPage ( ) ) ; }
public String getFeaturedVideo ( ) { return StringUtils . notNullStr ( featuredVideo ) ; }
public void startConnector ( ) { if ( checkBluetoothEnabled ( ) ) { startMuseManager ( ) ; startConnectorThread ( ) ; } manager . startListening ( ) ; }
public SignalProtocolAddress getOwnAxolotlAddress ( ) { return new SignalProtocolAddress ( account . getJid ( ) . toBareJid ( ) . toPreppedString ( ) , getOwnDeviceId ( ) ) ; }
public com . google . protobuf . Parser < ScryptParameters > getParserForType ( ) { return PARSER ; }
public void showVideoDurationLimitWarning ( @ NonNull String fileName ) { ToastUtils . showToast ( this , R . string . error_media_video_size_exceeds_limit , ToastUtils . Duration . LONG ) ; }
private ImageReader . OnImageAvailableListener onImageAvailable = new ImageReader . OnImageAvailableListener ( ) { @ Override public void onImageAvailable ( ImageReader reader ) { if ( cameraCallback != null ) { cameraCallback . onPicture ( imageReader ) ; } } } ;
public View createView ( ViewGroup viewGroup , int viewType ) { return View . inflate ( context , R . layout . physical_activity_item , null ) ; }
public RawClient provideRawRestClientRx ( Retrofit retrofit , OkHttpClient okHttpClient , AppSettings appSettings ) { return new RawClient ( retrofit , okHttpClient , appSettings ) ; }
public void onClick ( View view ) { saveSensorAttrs ( ) ; finish ( ) ; }
public void run ( ) { if ( messageEditText != null ) { try { messageEditText . requestFocus ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } } }
public void onError ( String errorMessage ) { view . showProgressIndicator ( false ) ; view . showErrorMessage ( errorMessage ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( LAYOUT_MANAGER_STATE , getLayoutManager ( ) . onSaveInstanceState ( ) ) ; }
public void setRemovedMembers ( String [ ] members ) { mRemoved = members ; }
public void onStart ( ) { super . onStart ( ) ; presenter . onStart ( ) ; }
private void init ( ) { if ( initialized ) { return ; } initialized = true ; checkRestore ( ) ; DataStore . cleanIfNeeded ( this ) ; updateCacheCounter ( ) ; }
public void onServiceStateChanged ( ServiceState serviceState ) { Log . v ( TAG , "onServiceStateChanged " + serviceState ) ; if ( serviceState . getState ( ) != ServiceState . STATE_IN_SERVICE ) { mCurrentSignalStrengthDbm = NetMonSignalStrength . SIGNAL_STRENGTH_NONE_OR_UNKNOWN ; } }
private int getTransactionCount ( ) { return mTransactionsDbAdapter . getAllTransactionsForAccount ( DUMMY_ACCOUNT_UID ) . size ( ) ; }
public Cursor getAllNotes ( ) { return db . query ( DATABASE_TABLE , new String [ ] { NOTE_ID , TITLE , NOTE , DATE_TIME , REMINDER , PENDING_INTENT_ID , REPEAT_REMINDER } , null , null , null , null , NOTE_ID + " DESC" ) ; }
public void onNewPressed ( View v ) { TriggerEditorDialog editor = new TriggerEditorDialog ( BetterTriggerSelectionDialog . this . getContext ( ) , null , service , triggerEditorDoneHandler , currentPlugin ) ; editor . show ( ) ; }
public static int colorForLabel ( Label label ) { return Color . parseColor ( "#" + label . getColor ( ) ) ; }
public void setQuantities ( ArrayList < AmountUnitPhone > quantities ) { this . quantities = quantities ; }
public List < Wrapper > getAsWrappers ( ) { return StreamSupport . stream ( choices ) . map ( Wrapper : : new ) . collect ( Collectors . toList ( ) ) ; }
public void hideSecondSpace ( ) { secondSpaceMessage . setInfo ( R . string . secondSpace_selectDownload ) ; secondSpaceContainer . setVisibility ( View . GONE ) ; secondSpaceAdapter = null ; }
public void onCreateOptionsMenu ( @ NonNull Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_resto , menu ) ; requireBaseActivity ( this ) . tintToolbarIcons ( menu , R . id . action_history ) ; }
public void accept ( Integer integer ) throws Exception { outlinePaint . setColor ( integer ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; inflater . inflate ( R . menu . menu_main , menu ) ; } @ Override
public void onBackPressed ( ) { if ( searchToolbar . isVisible ( ) ) searchToolbar . collapse ( ) ; else if ( isRelayingMessageContent ( this ) ) { handleResetRelaying ( ) ; } else super . onBackPressed ( ) ; }
public VolumeBar ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public int getPoiId ( ) { return poiId ; }
public static TokenSearchView settingsView ( Activity activity ) { TokenSearchView searchView = ( TokenSearchView ) activity . findViewById ( R . id . tags_search_view ) ; searchView . getSearchTextView ( ) . setSplitChar ( new char [ ] { 0xAD } ) ; return searchView ; }
private void needHideProgress ( ) { if ( progressDialog == null ) { return ; } try { progressDialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } progressDialog = null ; }
public int getDeterminationNo ( ) { return this . determinationNo ; }
private final Handler mHandler = new Handler ( ) { @ Override public void handleMessage ( Message msg ) { CustomAutoCompleteTextView . super . performFiltering ( ( CharSequence ) msg . obj , msg . arg1 ) ; } } ;
private void showAddStationDialog ( ) { EditStationDialogFragment fragment = EditStationDialogFragment . newInstance ( ) ; fragment . show ( getFragmentManager ( ) , "AddStationDialog" ) ; }
public String desc ( ) { return Game . getVar ( R . string . Spear_Info ) ; }
private FileMessageViewHolder ( View itemView ) { super ( itemView ) ; messageText = ButterKnife . findById ( itemView , R . id . message_text ) ; }
public static boolean exist ( String key ) { return book ( ) . contains ( key ) ; }
public static String format ( String format , Object . . . args ) { return String . format ( Locale . ENGLISH , format , args ) ; }
public void endBatchedUpdates ( ) { throwIfMerging ( ) ; if ( mCallback instanceof BatchedCallback ) { ( ( BatchedCallback ) mCallback ) . dispatchLastEvent ( ) ; } if ( mCallback == mBatchedCallback ) { mCallback = mBatchedCallback . mWrappedCallback ; } }
public void onClick ( View v ) { Intent result = new Intent ( ) ; result . putExtra ( "HEX" , mDisplayedValues . get ( position ) . getHex ( ) ) ; setResult ( ColorPickerMainActivity . SEARCH_COMPLETE , result ) ; thisActivity . finish ( ) ; }
public void testParseInvalidJson ( ) throws BasicModel . FieldNotDefinedException { List < ListItem > data = DatafeedTestDriver . getParsedData ( mSubscriber , new JsonObject ( ) ) ; assertNotNull ( data ) ; assertEquals ( data . size ( ) , 0 ) ; }
public File ( DocumentFile file ) throws ParseException { _file = file ; _info = FileInfo . parseFilename ( file . getName ( ) ) ; }
public boolean loadUsePalette ( ) { return PreferenceUtil . getInstance ( getActivity ( ) ) . artistColoredFooters ( ) ; }
public static IntBuffer createIntBuffer ( int integers ) { return createNativeByteBuffer ( integers*4 ) . asIntBuffer ( ) ; }
public SessionsRepository ( SessionsLocalDataSource localDataSource , SessionsRemoteDataSource remoteDataSource ) { this . localDataSourse = localDataSource ; this . remoteDataSourse = remoteDataSource ; this . cachedSessions = new LinkedHashMap <> ( ) ; this . isDirty = true ; }
public void onClick ( final DialogInterface dialog , final int which ) { action ( activity , comment , RedditAPI . RedditAction . DELETE , changeDataManager ) ; }
public List < DeckDueTreeNode > deckDueList ( ) { return deckDueList ( null ) ; }
public void showPostActivity ( long siteId , long postId ) { if ( isFinishing ( ) ) return ; ReaderActivityLauncher . showReaderPostDetail ( this , siteId , postId ) ; }
private void syncChildFragment ( ) { Fragment fragment = getChildFragmentManager ( ) . findFragmentById ( R . id . child_container ) ; if ( fragment instanceof BaseSearchFragment ) { ( ( BaseSearchFragment ) fragment ) . syncYourCriteriaWithParent ( ) ; } }
public boolean isDeveloperOptionSavingDisabled ( ) { return isDeveloperOptionLockEnabled ( ) && savedSharedData . getBoolean ( PREF_KEY_DEVELOPER_OPTION_NO_SAVING , DEFAULT_DEVELOPER_OPTION_NO_SAVING ) ; }
public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj instanceof PreviewSong ) { return mSong . equals ( ( ( PreviewSong ) obj ) . mSong ) ; } return false ; }
public void setVoiceLocale ( int locale ) { putInt ( VOICE_LOCALE , locale ) ; }
public AsyncDrawable ( Resources res , Bitmap bitmap , BitmapWorkerTask bitmapWorkerTask ) { super ( res , bitmap ) ; bitmapWorkerTaskReference = new WeakReference < BitmapWorkerTask > ( bitmapWorkerTask ) ; }
public boolean onCallback ( Void result ) { Tool . logInfo ( "Retry to get media projection" ) ; requestMediaProjection ( ) ; return false ; }
public Review ( Integer rating , Integer version , Long date ) { this . rating = rating ; this . version = version ; this . date = date ; }
public void run ( ) { onAnimationEndCheck ( false , true ) ; }
public void setLastUpdatedTranslationDate ( long date ) { mPerInstallationPrefs . edit ( ) . putLong ( Constants . PREF_LAST_UPDATED_TRANSLATIONS , date ) . apply ( ) ; }
public void onConnectionInfoChanged ( ServerConnectionInfo connection ) { mContext . runOnUiThread ( ( ) -> { notifyItemChanged ( getActiveHeaderIndex ( ) + 1 + ServerConnectionManager . getInstance ( ) . getConnections ( ) . indexOf ( connection ) ) ; } ) ; }
public Maybe < Boolean > delete ( Event entity ) { return Maybe . just ( true ) ; }
public static void setViewedFlightsForRate ( ) { int flightViewed = getViewedFlightCountForRate ( ) ; flightViewed ++ ; set ( FLIGHT_VIEWED , flightViewed ) ; }
private UrlWidget createWidget ( FormEntryPrompt prompt ) { return new UrlWidget ( spyActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) , externalWebPageHelper ) ; }
private void explicitlyLoadPreferences ( ) { PreferenceManager . setDefaultValues ( this , R . xml . preferences , false ) ; }
public static boolean isEmpty ( @ Nullable final CharSequence str ) { return ( str == null || str . length ( ) == 0 ) ; }
public void onClick ( View v ) { int position = getAdapterPosition ( ) ; if ( listener != null && position != RecyclerView . NO_POSITION ) { listener . onItemClick ( foodList . get ( position ) , position ) ; } }
public void testParcelable ( ) { assertThat ( HackerNewsClient . HackerNewsItem . CREATOR . newArray ( 1 ) ) . hasSize ( 1 ) ; assertEquals ( 0 , item . describeContents ( ) ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( limit ) ; }
private void doPostConnectOperations ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { doPair ( ) ; btnFindDevices . setText ( "Connected" ) ; } } ) ; }
public Track ( String name , boolean show ) { this . name = name ; this . show = show ; distance = 0 ; }
public void setStartValue ( ) { setScore ( 0 ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , bMultiBankInventory | bBapInventory ) ; return inflater . inflate ( R . layout . fragment_inventory_rfid_multi , container , false ) ; }
public void setPageBounds ( RectF rect ) { mPageBounds = rect ; }
public byte [ ] transformMasterKey ( byte [ ] seed , byte [ ] key , int rounds ) throws IOException { NativeLib . init ( ) ; return nTransformMasterKey ( seed , key , rounds ) ; }
public boolean isCenterJustify ( ) { return centerJustify ; }
public VH onCreateViewHolder ( final ViewGroup parent , final int viewType ) { switch ( viewType ) { case TYPE_HEADER : return onCreateHeaderItemViewHolder ( parent ) ; case TYPE_CONTENT : return onCreateContentItemViewHolder ( parent ) ; default : throw new IllegalStateException ( ) ; } }
public com . coinomi . core . protos . Protos . TransactionConfidence . Type getType ( ) { return type_ ; }
public void setGraphYearXLabels ( String [ ] labels ) { chartYear . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter < String > ( labels ) ) ; }
public void notifyGroupItemRangeInserted ( int groupPositionStart , int itemCount ) { notifyGroupItemRangeInserted ( groupPositionStart , itemCount , false ) ; }
public int pushAndScale ( float factorX , float factorY ) { mTopMatrixPos += 16 ; Matrix . scaleM ( mMatrices , mTopMatrixPos , mMatrices , mTopMatrixPos - 16 , factorX , factorY , 0 ) ; return mTopMatrixPos - 16 ; }
public Builder clearBlockHash ( ) { blockHash_ = java . util . Collections . emptyList ( ) ; bitField0_ = ( bitField0_ & ~0x00000100 ) ; onChanged ( ) ; return this ; }
public CubesException ( String arg0 , Throwable arg1 ) { super ( arg0 , arg1 ) ; c = Thread . currentThread ( ) . getStackTrace ( ) [ 2 ] . getClassName ( ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { mEvents . deleteEventsBeforeEid ( object . bid ( ) , object . eid ( ) ) ; }
public void setData_updatesWidgetDisplayedAnswer ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( answer ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) . toString ( ) , answer ) ; }
public Base64DecoderException ( String s ) { super ( s ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . comment_uncomment ) ; }
public void setSelectedTime ( int hourOfDay , int minuteOfHour ) { selectedTime . postValue ( new LocalDateTime ( ) . withTime ( hourOfDay , minuteOfHour , 0 , 0 ) ) ; }
public void onResume ( ) { super . onResume ( ) ; IntentFilter intentFilter = new IntentFilter ( CardDeviceManager . ACTION_DEVICE_UPDATE ) ; intentFilter . addAction ( CardDevice . ACTION_STATUS_UPDATE ) ; LocalBroadcastManager . getInstance ( getActivity ( ) ) . registerReceiver ( deviceUpdateBroadcastReceiver , intentFilter ) ; }
public @ NonNull String getDefaultPostFormatDisplay ( ) { String defaultFormat = getFormats ( ) . get ( getDefaultPostFormat ( ) ) ; if ( TextUtils . isEmpty ( defaultFormat ) ) defaultFormat = STANDARD_POST_FORMAT ; return defaultFormat ; }
public PortScan setPortsAll ( ) { ports . clear ( ) ; for ( int i = 1 ; i < 65535 ; i ++ ) { ports . add ( i ) ; } return this ; }
public void onProgressChanged ( WebView view , int newProgress ) { if ( mLightningView . isShown ( ) ) { mActivity . updateProgress ( newProgress ) ; } }
public static void shrink ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . shrink_enter , R . anim . shrink_exit ) ; }
public void StartRecording ( ) { button . setImageResource ( R . drawable . exo_icon_stop ) ; String filename = String . valueOf ( System . currentTimeMillis ( ) / 1000 ) ; recordAudio ( filename + " . 3gp" ) ; }
public static synchronized SharedPrefsHelper getInstance ( @ NonNull Context context ) { if ( instance == null ) { instance = new SharedPrefsHelper ( context ) ; } return instance ; }
public void eventDataStatus ( String event , boolean whilePaused ) { updateButtonPanel ( ) ; }
public void editHeader ( String uuid , String title , int position , boolean expanded ) { EditHeaderInteractor interactor = new EditHeaderInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , uuid , title , position , expanded ) ; interactor . execute ( ) ; }
public void openFriends ( int accountId , int userId , int tab , FriendsCounters counters ) { PlaceFactory . getFriendsFollowersPlace ( accountId , userId , tab , counters ) . tryOpenWith ( getActivity ( ) ) ; }
public String getActualValue ( ) { return actualValue ; }
private PhoneStateListener listener = new PhoneStateListener ( ) { @ Override public void onSignalStrengthsChanged ( SignalStrength signalStrength ) { try { cellStrength = signalStrength . getLevel ( ) ; } catch ( SecurityException e ) { cellStrength = - 1 ; } } } ;
public boolean exists ( @ NotNull Uri filePath ) { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . exists ( filePath ) ; }
public Settings put ( String key , String value ) { SharedPreferences . Editor editor = getPrefs ( ) . edit ( ) ; editor . putString ( key , value ) ; editor . commit ( ) ; return this ; }
public boolean awaitTermination ( long l , @ NonNull TimeUnit timeUnit ) throws InterruptedException { throw new UnsupportedOperationException ( ) ; }
public void next ( ) { removeInventoryActors ( ) ; gameScreen . setCurrentEvent ( EventState . MOVING ) ; gameScreen . hud . toggle ( true ) ; ended = false ; }
public void testCheckIsNotTextInputLayoutValidatorThrowsException ( ) throws Exception { Whitebox . invokeMethod ( mSpiedAwesomeValidationTextInputLayoutStyle , "checkIsNotTextInputLayoutValidator" ) ; }
public int getItemCount ( ) { return options . length ; }
public HelpListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; addView ( LayoutInflater . from ( context ) . inflate ( R . layout . help_list , this , false ) ) ; }
public BottomSheet setUseFullscreen ( boolean value ) { bottomSheet . fullscreen = value ; return bottomSheet ; }
public void onCreate ( ) { super . onCreate ( ) ; U . registerReceiver ( this , powerMenuReceiver , Constants . ACTION_ACCESSIBILITY_ACTION ) ; }
public Adapter ( Context context , List < BaseSetting > settings , ChangeListener changeListener ) { this . context = context ; this . settings = settings ; this . changeListener = changeListener ; }
public void setKey ( @ NonNull final String key ) { this . key = key ; }
private void showSettings ( ) { AnswersProxy . get ( ) . logButton ( "Show Settings" ) ; startActivityForResult ( new Intent ( BaseDrawerActivity . this , SettingsActivity . class ) , REQUEST_SETTINGS ) ; }
public void tagListReceived ( @ Nullable List < Map < ? , ? >> tags ) { updateTags ( ) ; }
public AbsMultiSelectAdapter ( Context context , @ Nullable CabHolder cabHolder , int menuRes ) { this . cabHolder = cabHolder ; checked = new ArrayList <> ( ) ; this . menuRes = menuRes ; this . context = context ; }
public void run ( ) { mTutorialController . updateIndicator ( ) ; }
public void init ( ) { addConfirmationStepIfRequested ( ) ; formLayout . initializeForm ( listener , style , steps ) ; }
public void onDestroy ( ) { stopForeground ( true ) ; super . onDestroy ( ) ; }
public static com . coinomi . core . protos . Protos . EncryptedData parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public AboutBuilder setPhoto ( @ NonNull BitmapDrawable photo ) { return setPhoto ( IconUtil . getBitmap ( photo ) ) ; }
public Node < T > getParent ( ) { return parent ; }
public void onFailure ( Call < Results > call , Throwable t ) { t . printStackTrace ( ) ; }
public void setExerciseResult ( UserAnswer userAnswer ) { sharedPreferences . edit ( ) . putInt ( "ExerciseResult" , userAnswer . getColor ( ) ) . commit ( ) ; }
public IBinder onBind ( Intent intent ) { return this . mBinder ; }
private void migrateZonesRemoval ( ) { List < String > zoneNames = Arrays . asList ( "bochum" , "balingen" ) ; migrateZonesRemoval ( zoneNames ) ; }
public void onCancelled ( DatabaseError databaseError ) { showSnackbar ( R . string . error_loading_news ) ; newsCard . setVisibility ( View . GONE ) ; }
private int mod ( int a , int b ) { int c = a % b ; return ( c < 0 ) ? c + b : c ; }
public void onAnimationEnd ( View view ) { animation . setListener ( null ) ; dispatchAddFinished ( holder ) ; mAddAnimations . remove ( holder ) ; dispatchFinishedWhenDone ( ) ; }
public void onSuccess ( ) { Log . i ( TAG , " [ synchronizeCapabilitiesAndNotes ] Synchronize notes for " + localAccount . getAccountName ( ) ) ; synchronizeNotes ( localAccount , callback ) ; }
public String desc ( ) { return Game . getVar ( R . string . StoneBloodBuff_Info ) ; }
public NFCSoundManager ( Resources res , DataManager dm ) { resources = res ; data_manager = dm ; media = new MediaPlayer ( ) ; active_name = data_manager . find ( DEFAULT_TAG_TEXT ) ; }
public void notifyChildItemInserted ( int groupPosition , int childPosition ) { mAdapter . notifyChildItemInserted ( groupPosition , childPosition ) ; }
public static Context onAttach ( Context context , String defaultLanguage ) { final String lang = getPersistedData ( context , defaultLanguage ) ; return setLocale ( context , lang ) ; }
public void setChecked ( boolean checked ) { if ( mChecked == checked ) { return ; } mChecked = checked ; setBackgroundColor ( mChecked ? mHighlightColor : mBackgroundColor ) ; }
public FontEditText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; decorator = new FontDecorator ( context ) ; decorator . initFromAttributes ( this , attrs ) ; }
public DB ( String ankiFilename ) { this ( ankiFilename , null ) ; }
public void onAdDismissedFullScreenContent ( ) { mCinemaRewardAd = null ; GLog . debug ( "reward state " + rewardEarned ) ; GameLoop . runOnMainThread ( GoogleRewardVideoAds . this : : loadNextVideo ) ; returnTo . returnToWork ( rewardEarned ) ; rewardEarned = false ; }
public void onPause ( ) { Log . d ( TAG , "onPause ( ) " ) ; savePrefs ( ) ; super . onPause ( ) ; }
private OnSharedPreferenceChangeListener preferenceListener = new OnSharedPreferenceChangeListener ( ) { @ Override public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( getActivity ( ) != null && ! key . equals ( PreferenceFragment . PREFS_THEME ) ) refresh ( ) ; } } ;
public void onTransferStarted ( String s , long l ) { }
public void setCheckBtn ( ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( this ) ; svcbtn . setChecked ( prefs . getBoolean ( "svcenabled" , false ) ) ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( CountObjectsActivity . this ) ; Intent intent = new Intent ( CountObjectsActivity . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
private final MyLocationListener nmeaListener = new MyLocationListener ( ) { @ Override public void onLocationChanged ( @ NonNull MLocation loc ) { if ( ! bluetooth . preferences . preferenceEnabled ) { updateLocation ( loc ) ; } } } ;
private boolean notEnoughDataToSaveWord ( ) { return ( TextUtils . isEmpty ( mongolEditText . getText ( ) ) && TextUtils . isEmpty ( etDefinition . getText ( ) ) && TextUtils . isEmpty ( etPronunciation . getText ( ) ) ) ; }
public int operate ( ) throws ErrorWithExplanation { int success = loginAsync ( username , password ) ; isLoggedIn = success == TASK_SUCCEEDED ; return success ; }
public static void start ( Activity activity ) { activity . startActivity ( new Intent ( activity , MainActivity . class ) ) ; }
public RRGLMatrixStack ( RRGLContext glContext ) { mGLContext = glContext ; setIdentity ( ) ; }
public void onTitleClick ( ) { if ( mFragment instanceof ComposeMessageFragment ) ( ( ComposeMessageFragment ) mFragment ) . viewContact ( ) ; else if ( mFragment instanceof GroupMessageFragment ) ( ( GroupMessageFragment ) mFragment ) . viewGroupInfo ( ) ; }
public void onDismiss ( DialogInterface dialog ) { SWIPE_MIN_DISTANCE = DEFAULT_SWIPE_MIN_DISTANCE ; }
public LogDataSource ( Context context ) { dbHelper = new SQLiteHandler ( context ) ; }
private void setupFavoritesButton ( ) { if ( favoriteService . isFavorite ( movieEntity ) ) { favoriteButton . setSelected ( true ) ; } else { favoriteButton . setSelected ( false ) ; } }
public ListItem getItem ( int position ) { return items . get ( position ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mDrinkAdapter . swapCursor ( null ) ; }
public static boolean isText ( String mimeType ) { return ( mimeType != null && mimeType . toLowerCase ( ) . startsWith ( "text/" ) ) ; }
public int numKeys ( ) { lock . lock ( ) ; try { maybeLookAhead ( ) ; return basicKeyChain . numKeys ( ) ; } finally { lock . unlock ( ) ; } }
public static String cleanTashkeel ( String s ) { Matcher matcher = CLEANING_TASHKEEL . matcher ( s ) ; return matcher . replaceAll ( "" ) ; }
public String sendIqPacket ( final IqPacket packet , final OnIqPacketReceived callback ) { packet . setFrom ( account . getJid ( ) ) ; return this . sendUnmodifiedIqPacket ( packet , callback ) ; }
public EntityEvent ( boolean cancelable ) { super ( cancelable , false ) ; }
public void onError ( Throwable throwable ) { Log . e ( "MainActivity" , "Could not initialize player : " + throwable . getMessage ( ) ) ; }
public Integer getCommentVerticalBarColor5 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_5 , getDefaultColor ( "#EE0220" , "#EE0219" , "#EE0219" ) ) ; }
public void onSuccess ( List < Usuario > results ) { callback . onSuccess ( results ) ; getUsersFromRemoteAndUpdateLocalSource ( callback ) ; }
public void setTheme ( String theme ) { mTheme = theme ; }
public void onServiceDisconnected ( ComponentName arg0 ) { mBound = false ; }
private void addNetworkRequest ( NetworkRequest networkParams ) { if ( ! this . outgoingQueue . contains ( networkParams ) ) { this . outgoingQueue . add ( networkParams ) ; this . onNetworkQueueChange ( false ) ; } }
public int getProtein ( ) { return protein ; }
public FanView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
private RxBroadcastReceiver ( final Context context , final IntentFilter filter ) { this . context = context . getApplicationContext ( ) ; this . filter = filter ; }
public void setOnItemClickListener ( GenRecyclerAdapter . MyClickListener myClickListener ) { this . myClickListener = myClickListener ; }
public void run ( ) { try { Thread . sleep ( 2000 ) ; Utils . saveBoolean ( "profileclicked" , false , context ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } }
public MonitConnection [ ] newArray ( int i ) { return new MonitConnection [ 0 ] ; }
public void setInvite_ID ( String invite_ID ) { this . invite_ID = invite_ID ; >>>>>>> master }
public void onDeleted ( PostData post ) { if ( ! isDetached ( ) ) getActivity ( ) . finish ( ) ; }
public void setOnItemClickListener ( ItemClickListener itemClickListener ) { this . itemClickListener = itemClickListener ; }
public static synchronized EsProgressDialog getInstance ( ) { if ( null == esProgressDialog ) { esProgressDialog = new EsProgressDialog ( ) ; } return esProgressDialog ; }
public JSONObject getTokenHolder ( ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/token - holder" , mUserId ) , requestMap ) ; }
public void setShowShadow ( boolean showShadow ) { this . mShowShadow = showShadow ; invalidate ( ) ; }
private static Activity getCurrentActivity ( ) { return ContentUtils . currentActivity . get ( ) ; }
private boolean isJobSchedulerEnabled ( ) { return Prefs . getBoolean ( Constants . PREF_NOTIFICATION_SCHEDULER , Constants . PREF_DEFAULT_NOTIFICATION_SCHEDULER ) ; }
public void updateProvider ( Provider provider ) { providerRepository . updateProvider ( restApi , provider , this ) ; }
public void onClick ( DialogInterface dialog , int which ) { deleteBackup ( backupName ) ; }
public Servings ( Day day , Food food ) { this . day = day ; this . food = food ; }
public AboutBuilder setSubTitleColor ( int color ) { this . subTitleColor = ColorUtil . get ( context , color ) ; return this ; }
public void onAttach ( Activity a ) { activity = ( FilterActivity ) a ; super . onAttach ( a ) ; }
public String getValidHostnames ( ) { return authenticator . getResource ( AccountProperty . VALID_HOSTNAMES , String . class ) ; }
static public ExchangeApi getExchangeApi ( ) { return new com . uplexa . upxwallet . service . exchange . coinmarketcap . ExchangeApiImpl ( OkHttpHelper . getOkHttpClient ( ) ) ; }
public void setPurchaseDate ( @ Nullable String purchaseDate ) { mPurchaseDate = purchaseDate ; }
public void run ( ) { count -- ; if ( count < 0 ) { screenshotHiddenCountdown ( ctx , true ) ; } else { handler . postDelayed ( this , 1000 ) ; } }
public List < FoodTable > getDbFoodTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getFoodTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
private double sqcmToacre ( double num ) { return num * 2 . 47E - 8 ; }
public String getConvertedDate ( ) { return DateUtils . convertForumPost ( getDate ( ) ) ; }
public void dateResetSuccessfully ( EventViewModel event ) { adapter . updateItem ( event ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfShadows_Info ) : super . desc ( ) ; }
public ClientActivate [ ] newArray ( int size ) { return new ClientActivate [ size ] ; }
public SummaryRecord ( String title , String currency , double amount , int recordsCount ) { this . title = makeTitle ( title , recordsCount ) ; this . currency = currency ; this . amount = amount ; }
public String toString ( ) { return String . format ( "%s : % . 2f ( %d ) " , day , portions , nDrinks ) ; }
public void run ( ) { sizeText . setText ( readableFileSize ( size ) ) ; }
public boolean isIntersecting ( Unit that ) { return ( ( HashSet < Point > ) this . ship . clone ( ) ) . retainAll ( that . getUnitArea ( ) ) ; }
public void onClick ( View v ) { ( ( BaseActivity ) getActivity ( ) ) . onChoiceNet ( BaseChain . SECRET_MAIN ) ; getDialog ( ) . dismiss ( ) ; }
public RemoteLogger forceRemoteLogging ( boolean forced ) { mRemoteLoggingEnabled = forced ; return this ; }
private void requestInputMethod ( Dialog dialog ) { Window window = dialog . getWindow ( ) ; if ( window == null ) return ; window . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_STATE_ALWAYS_VISIBLE ) ; }
public void onFailed ( ) { Log . e ( "SWELL" , String . format ( "Error uploading %s fitness data" , currentPerson . getPerson ( ) . getName ( ) ) ) ; }
public void register ( ) { Game . getInstance ( ) . register ( this , mLayer ) ; }
public void onSuccess ( int statusCode , Client . Headers headers , String response ) { data = new Room101Request ( ) ; data . setDone ( statusCode == 302 ) ; currentStage ++ ; proceedStage ( ) ; }
public void playButtonClickSound ( ) { if ( preferences . getBoolean ( PrefsKeys . ENABLE_SOUND ) ) soundClick . play ( ) ; }
public void loadTable ( final Runnable . . . preLoadTasks ) { new LoadTableTask ( this , preLoadTasks ) . execute ( ) ; }
public void setPlace ( String place ) { this . place = place ; }
private EBook makeEmptyBook ( ZipFile zipFile ) { return makeBook ( zipFile ) ; }
public Call < NotesSettings > putServerSettings ( @ NonNull SingleSignOnAccount ssoAccount , @ NonNull NotesSettings settings , @ Nullable ApiVersion preferredApiVersion ) { return ApiProvider . getNotesAPI ( context , ssoAccount , preferredApiVersion ) . putSettings ( settings ) ; }
public boolean onQueryTextSubmit ( String query ) { Log . v ( LOG_TAG , "onQueryTextSubmit ( ) called with : " + "query = [ " + query + " ] " ) ; handleSearch ( query ) ; return true ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { mFirstRowContainsHeader = isChecked ; renderPreview ( ) ; }
public AyahTrackerItem [ ] getAyahTrackerItems ( ) { if ( ayahTrackerItems == null ) { ayahTrackerItems = new AyahTrackerItem [ ] { new AyahTranslationTrackerItem ( pageNumber , translationView ) } ; } return ayahTrackerItems ; }
public void onResponse ( Call call , Response response ) { if ( response . isSuccessful ( ) || response . code ( ) == 403 ) { skydive . delete ( ) ; } UIHelper . setProgressBarVisibility ( View . GONE ) ; }
private String getBaseId ( ) { return id . replaceAll ( "/ . *" , "" ) ; }
public static boolean isSupported ( ) { return false ; }
public static String formatTimeStampToString ( final Context context , final long timestamp ) { Date date = new Date ( timestamp ) ; return DateFormat . getDateTimeInstance ( DateFormat . MEDIUM , DateFormat . MEDIUM , Locale . getDefault ( ) ) . format ( date ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; sendRefreshBroadcast ( ) ; finish ( ) ; }
public Observable < Boolean > resolvePermissions ( String . . . permissions ) { return new RxPermissions ( this ) . request ( permissions ) ; }
public void untruncateText ( ) { String untrunucatedText = text + MARKER_UNTRUNCATED ; setText ( untrunucatedText ) ; }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , BookListActivity2 . class ) ; i . putExtra ( BookListActivity2 . EXTRA_BOOK_GROUP_TYPE , BookGroup . BookGroupType . TO_READ ) ; startActivity ( i ) ; }
public BitmapDownloaderTask ( ImageView imageView ) { imageViewReference = new WeakReference < ImageView > ( imageView ) ; }
public CircleCheckBox ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( attrs ) ; }
public void run ( ) { NotificationsController . getInstance ( ) . repeatNotificationMaybe ( ) ; }
public String getPhotoUuid ( ) { return this . photoUuid ; }
public static long getGroupItemId ( long rawId ) { return ExpandableAdapterHelper . getGroupItemId ( rawId ) ; }
public void setmJudges ( List < Integer > mJudges ) { this . mJudges = mJudges ; }
public void onRequestFailed ( SubredditRequestFailure failureReason ) { onError ( failureReason . asError ( context ) ) ; }
public long getHeaderId ( int position ) { if ( getConversationResult ( position ) != null ) { return TYPE_CONVERSATIONS ; } else if ( getContactResult ( position ) != null ) { return TYPE_CONTACTS ; } else { return TYPE_MESSAGES ; } }
public final void setBitmapDecoderFactory ( DecoderFactory < ? extends ImageDecoder > bitmapDecoderFactory ) { if ( bitmapDecoderFactory == null ) { throw new IllegalArgumentException ( "Decoder factory cannot be set to null" ) ; } this . bitmapDecoderFactory = bitmapDecoderFactory ; }
public void onDismiss ( DialogInterface dialog ) { super . onDismiss ( dialog ) ; if ( callback != null ) { callback . onFolderChooserDismissed ( this ) ; } }
public static void openIt ( Context context , UserLTE user ) { if ( user != null ) { Intent intent = getIntent ( context , user ) ; context . startActivity ( intent ) ; } }
public Object then ( @ NonNull Task < TransportService > task ) throws Exception { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . INCOMING_NOTIFICATION , notificationData , taskCompletionSource ) ; return null ; }
private float multiHeight ( float array [ ] , int start , int end ) { float sum = 0 ; for ( int a = start ; a < end ; a ++ ) { sum += array [ a ] ; } return maxSizeWidth / sum ; }
public boolean isFullScreen ( ) throws RemoteException { return connections . get ( connectionClutch ) . isFullScren ( ) ; }
public void onResume ( ) { super . onResume ( ) ; ppF = new PreProcessorFactory ( ) ; mAddPersonView . enableView ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; dateManager = new DateManager ( ) ; viewsManager = new ViewsManager ( ) ; setRetainInstance ( true ) ; }
public void onProviderDisabled ( String provider ) { if ( MyDebug . LOG ) Log . d ( TAG , "onProviderDisabled" ) ; this . location = null ; this . test_has_received_location = false ; }
public void run ( ) { try { sleep ( 3 * 1000 ) ; Intent i = new Intent ( getBaseContext ( ) , HordeorAllianceActivity . class ) ; startActivity ( i ) ; finish ( ) ; } catch ( Exception e ) { } }
public int getDescriptionResId ( ) { return mDescriptionResId ; }
public void setCallbacks ( ModernPlayerAlbumCoverFragment . Callbacks listener ) { callbacks = listener ; }
public void addUsersToBan ( int accountId , int groupId , ArrayList < User > users ) { PlaceFactory . getCommunityAddBanPlace ( accountId , groupId , users ) . tryOpenWith ( getActivity ( ) ) ; }
private static void addAuthPushNotificationToNotificationMap ( Bundle data ) { ACTIVE_NOTIFICATIONS_MAP . put ( AUTH_PUSH_NOTIFICATION_ID . getValue ( ) , data ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( listeDesProgrammes ) getResult ( listeDesProgrammes . class , __result , "listeProgrammesResult" , __envelope ) ; }
public Object getItem ( int parPosition ) { return mTripsList . get ( parPosition ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( getContext ( ) , PlaceSelectionActivity . class ) ) ; }
private void openUserProfile ( ) { openPage ( ConstantUtil . USER_PROFILE_SELF_FAKE_URL , getString ( R . string . profile ) ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . brus5 . lukaszkrawczak . fitx" , appContext . getPackageName ( ) ) ; }
public void setDebts ( ArrayList < Debt > debts ) { mDebts = debts ; }
public static boolean isFavorite ( @ NonNull final Context context , @ NonNull final Song song ) { return PlaylistsUtil . doPlaylistContains ( context , getFavoritesPlaylist ( context ) . id , song . id ) ; }
public void onShown ( SnackProgressBar snackProgressBar , int onDisplayId ) { }
public UniversityFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; eventBus . register ( this ) ; }
private static boolean canSend ( ) { return sAppContext != null && mFirebaseAnalytics != null && ! BuildConfig . DEBUG ; }
public void enableContentLogOnCrashes ( AztecExceptionHandler . ExceptionHandlerHelper helper ) { content . enableCrashLogging ( helper ) ; }
public boolean isAccountSelected ( ) { return credential . getSelectedAccountName ( ) != null ; }
public void handleSwipeRight ( ) { NavHostFragment . findNavController ( this ) . navigate ( R . id . nav_camera ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { saveCurrentStateOfIntervention ( ) ; InterventionActivity . super . onBackPressed ( ) ; }
public void set ( List < Tracker > items ) { mValues = items ; notifyDataSetChanged ( ) ; }
public final void setItem ( final Item parRetrievedItem ) { mItem = parRetrievedItem ; }
public void onGamepadDisconnected ( ) { GamepadInputWatcher . this . onGamepadDisconnected ( ) ; }
public synchronized void setResolution ( int x , int y ) { mResX = x ; mResY = y ; }
public Boolean loadVibrateState ( ) { return mySharedPref . getBoolean ( "Vibrate" , false ) ; }
public void bindVoiceHolderById ( int holderId , boolean play , boolean paused , float progress ) { }
public SortDialogAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemLayoutView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . sort_item_layout , parent , false ) ; return new ViewHolder ( itemLayoutView ) ; }
public void onCreate ( ) { super . onCreate ( ) ; context = this ; setupNetworkHandler ( ) ; }
public void onClick ( View v ) { duracao = 30 ; dialog . dismiss ( ) ; mostrarDialogTimer ( ) ; }
public AliasData ( ) { pre = "" ; post = "" ; }
public static DownloadedAyat getInstance ( Context context ) { if ( instance == null ) instance = new DownloadedAyat ( context ) ; return instance ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_options , menu ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public Attachment ( String attachmentId , String fileName , String secret , int postId ) { this ( attachmentId , fileName , secret , postId , 0 , 0 ) ; }
public PollOptionEntry ( View v ) { super ( v ) ; pollOptionContent = ( TextView ) v . findViewById ( R . id . basic_nation_name ) ; v . setOnClickListener ( this ) ; }
public int getViewTypeCount ( ) { Log . v ( DbgU . getAppTag ( ) , DbgU . getMethodName ( ) ) ; return 1 ; }
public VoicesPlayer ( ) { sinT = new FloatSinTable ( ISCALE ) ; TwoPi = ISCALE ; want_shutdown = false ; setPriority ( Thread . MAX_PRIORITY ) ; volume = DEFAULT_VOLUME ; }
public int describeContents ( ) { return hashCode ( ) ; }
public File getExitstingMediaPath ( ) { File existingPath = getExistingParentFolderFile ( get ( Keys . MEDIA_DIR ) ) ; set ( Keys . MEDIA_DIR , existingPath . getPath ( ) ) ; return existingPath ; }
public void onNotificationUpdateError ( String error ) { mDeviceDetailView . showNotificationRedeemError ( error ) ; }
public static ReferenceListFragment newListChildrenInstance ( @ Nullable String parentId ) { ReferenceListFragment fragment = new ReferenceListFragmentEx ( ) ; Bundle args = new Bundle ( ) ; args . putString ( "parentId" , parentId ) ; fragment . setArguments ( args ) ; return fragment ; }
public MovieListItem ( int id , String posterPath ) { this . id = id ; this . posterPath = posterPath ; }
public long getStartFrame ( ) { return startFrame ; }
public boolean onPreferenceClick ( Preference preference ) { Intent intent = new Intent ( ) ; intent . setData ( Uri . parse ( GIT_HUB_REPO_URL ) ) ; startActivity ( intent ) ; return true ; }
public DateTimeZone getTimeZone ( ) { return mTimeZone ; }
private boolean shouldNotify ( final Context context , final String threadId ) { final Thread thread = mDatabaseHelper . getThread ( context , threadId ) ; return thread . getState ( ) != ThreadTable . State . MUTED ; }
public void onDestroy ( ) { app . getSharedPreferences ( Constants . PREFS_NAME , app . MODE_MULTI_PROCESS ) . edit ( ) . remove ( Constants . PREF_WIDGET_PREFIX + String . valueOf ( appWidgetId ) ) . commit ( ) ; }
public boolean hasTimestamp ( ) { return ( ( bitField0_ & 0x00000004 ) == 0x00000004 ) ; }
public void addHandler ( TimeHandler timeHandler , int . . . millisecondIntervals ) { for ( int ms : millisecondIntervals ) { handlers . add ( new TimeHandlerWrapper ( timeHandler , ms ) ) ; } }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . transaction_item , parent , false ) ; return new ViewHolder ( view ) ; }
public OsmcSymbolFactory ( ) { mBitmapCache = new HashMap <> ( ) ; }
public void onClick ( View view ) { mRenameLayerListener . onClick ( view , DetailActionListener . RENAME_LAYER , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
private void updateTextArea ( final String text ) { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { consoleText . append ( "\n" + text ) ; } } ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { wordTypeNotificationSelectIndex = i ; }
public void onAnimationEnd ( Object animator ) { onDrawerAnimationEnd ( false ) ; }
public Observable < Tag > tagsObservable ( ) { return tagPublishSubject . hide ( ) ; }
private static SharedPreferences getSharedPreferences ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public void onBackPressed ( ) { Timber . i ( "Back clicked" ) ; if ( ! presenter . handleBackPressed ( ) && ! fabsMenuHandler . handleBackPressed ( ) ) { super . onBackPressed ( ) ; } }
public SpinnerWithCloseEvent ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void permissionDenied ( ) { Log . i ( "Denied" , "Permission" ) ; if ( ActivityCompat . shouldShowRequestPermissionRationale ( ( Activity ) mContext , Manifest . permission . ACCESS_COARSE_LOCATION ) ) { showRationale ( ) ; } else { showNoRationale ( ) ; } }
public void onTileRemoved ( ) { SharedPreferences pref = U . getSharedPreferences ( this ) ; pref . edit ( ) . putBoolean ( prefix + Constants . PREF_ADDED_SUFFIX , false ) . apply ( ) ; }
private DataBatch getDataBatch ( int sensorType ) { DataBatch dataBatch = sensorDataBatches . get ( sensorType ) ; if ( dataBatch == null ) { dataBatch = createDataBatch ( sensorType ) ; sensorDataBatches . put ( sensorType , dataBatch ) ; } return dataBatch ; }
public LiveData < AvailableChallengesInterface > getGroupChallenges ( ) { if ( this . groupChallengeLiveData == null ) { this . groupChallengeLiveData = new MutableLiveData <> ( ) ; this . loadChallenges ( ) ; } return this . groupChallengeLiveData ; }
public void onRequestFailed ( SubredditRequestFailure failureReason ) { synchronized ( result ) { if ( stillOkay . get ( ) ) { stillOkay . set ( false ) ; handler . onRequestFailed ( failureReason ) ; } } }
public void onEvent ( Events . QueueChanged e ) { Timber . e ( "queue changed %s" , e . getNewLength ( ) ) ; this . queueLength = e . getNewLength ( ) ; notifyPropertyChanged ( BR . endpointQueue ) ; }
private ChannelTransformer ( @ NonNull PublishSubject < T > target ) { this . target = target ; }
public ExAudioWidget createWidget ( ) { return new ExAudioWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , audioPlayer , new FakeWaitingForDataRegistry ( ) , mediaUtils , fileRequester ) ; }
public XmppAxolotlSession ( Account account , SQLiteAxolotlStore store , AxolotlAddress remoteAddress ) { this . cipher = new SessionCipher ( store , remoteAddress ) ; this . remoteAddress = remoteAddress ; this . sqLiteAxolotlStore = store ; this . account = account ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : Utils . showHome ( this ) ; break ; } return super . onOptionsItemSelected ( item ) ; }
private static AppMsg makeText ( Activity context , CharSequence text , Style style , View view , boolean floating ) { return makeText ( context , text , style , view , floating , 0 , null ) ; }
public void onProgressChanged ( SeekBar view , int size , boolean user ) { this . sample . setTextSize ( getTextSize ( size ) ) ; }
public void getFutureVisits ( Token token , Callback callback ) { webServiceGETMethod ( token , callback , "FutureVisits" ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( FoodTypeItemBinding . inflate ( LayoutInflater . from ( parent . getContext ( ) ) , parent , false ) ) ; }
private static void enforceInit ( Context c ) { if ( alarmManager == null ) alarmManager = ( AlarmManager ) c . getSystemService ( Context . ALARM_SERVICE ) ; if ( alarms == null ) alarms = new LinkedList <> ( ) ; }
public void defineVariable ( String name ) { mVariables . add ( name ) ; }
public void testMinimalEncoder21 ( ) throws Exception { verifyMinimalEncoding ( "A1234567" , "ALPHANUMERIC ( A1234567 ) , TERMINATOR ( ) " , null , false ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitParenthesisBooleanExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
public void onFailure ( @ NonNull Exception e ) { mDialog . dismiss ( ) ; Toast . makeText ( MainActivity . this , "" + e . getMessage ( ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public MainView ( Context context ) { super ( context ) ; bus . register ( this ) ; mContext = context ; }
public String desc ( ) { return Game . getVar ( R . string . ClothArmor_Desc ) ; }
public void setData_updatesWidgetAnswer ( ) { BearingWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( "blah" ) ; assertThat ( widget . binding . answerText . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { conn . ignore ( cid , input . getText ( ) . toString ( ) ) ; dialog . dismiss ( ) ; }
public boolean hideDelete ( String channelId ) { return ! channelId . equals ( "pixelfed_my_posts" ) ; }
public void onClickCancel ( ) { mSelectionId = null ; HomeActivity . super . onBackPressed ( ) ; }
public boolean isConnected ( ) { return socket != null && socket . isConnected ( ) && isRunning ( ) ; }
public List < String > sdkVersions ( ) { return new ArrayList <> ( Arrays . asList ( "23 . 0 . 0" ) ) ; }
public void granted ( ) { displayUIFor ( viewModel . locationPermissionsGranted ( ) ) ; }
public void onConnectionSuspended ( int i ) { placeArrayAdapter . setGoogleApiClient ( null ) ; }
public void onSuccess ( Void aVoid ) { pushNotif ( own ) ; playSound ( ) ; if ( thrill ) updateThreshold ( ) ; ownWarn = own ; }
public ScoresFeedResponse ( int page , String totalresults , List < ScoresFeed > docs , int totalPages ) { this . page = page ; this . totalresults = totalresults ; this . docs = docs ; this . totalPages = totalPages ; }
public String getFavouritesCount ( ) { return favouritesCount ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . TransactionOutput prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_4 . getText ( ) . toString ( ) ) ; }
public FontEditText ( Context context ) { super ( context ) ; decorator = new FontDecorator ( context ) ; }
public int getT ( ) { return tElapsed ; }
public String getName ( ) { return "List Selection" ; }
public void clearAnswer ( ) { ratingBar . setRating ( 0 . 0F ) ; }
public Person createFromParcel ( Parcel source ) { return new Person ( source ) ; }
public SearchScrubBar ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void saveMacAddress ( String macAdress , String macAddressName ) { SharedPreferences . Editor editor = mSharedPref . edit ( ) ; editor . putString ( OW_MAC_ADDRESS , macAdress ) ; editor . putString ( OW_MAC_NAME , macAddressName ) ; editor . commit ( ) ; }
public VendorWiseViewModel ( DataManager dataManager , SchedulerProvider schedulerProvider ) { super ( dataManager , schedulerProvider ) ; onFirmsNameLoad ( ) ; }
public int getItemCount ( ) { return sponsor_url . size ( ) ; }
public void getAnswerToDisplay_whenAnswerIsNull_returnsEmptyString ( ) { assertEquals ( GeoWidgetUtils . getAnswerToDisplay ( context , null ) , "" ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_peerSettings . TLdeserialize ( stream , constructor , exception ) ; }
public void testUpdateWithStaticUpdateButNotExistsRecord ( ) { ContentValues values = new ContentValues ( ) ; values . put ( "TEACHERNAME" , "Toy" ) ; int rowsAffected = DataSupport . update ( Teacher . class , values , 998909 ) ; assertEquals ( 0 , rowsAffected ) ; }
public Fragment getItem ( int position ) { ScheduleFragment scheduleFragment = new ScheduleFragment ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putInt ( "position" , position ) ; scheduleFragment . setArguments ( bundle ) ; return scheduleFragment ; }
private void bindToService ( ) { Intent intent = new Intent ( getActivity ( ) , AudioRecordService . class ) ; getActivity ( ) . bindService ( intent , serviceConnection , Context . BIND_AUTO_CREATE ) ; }
public static < T extends FragmentActivity > T createThemedActivity ( Class < T > clazz ) { return RobolectricHelpers . createThemedActivity ( clazz , R . style . Theme_Collect_Light ) ; }
public boolean isUserAdmin ( ) { return ENUM_Boolean . BOOLEAN_USER_ADMIN . value ; }
public void refreshSettingsFromDatabase ( ) { new CreateSubscriptionPanel ( getActivity ( ) , mAccountController , this , savedStateBundle , modelType ) . execute ( modelKey ) ; }
public void onConfigurationChanged ( final Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mImageViewDisplayerManager != null ) { mImageViewDisplayerManager . resetTouchState ( ) ; } }
public void onClick ( View v ) { switch ( v . getId ( ) ) { case R . id . btnScan : startBarcodeScanning ( ) ; break ; } }
public void onLoaderReset ( Loader < ImportResult > loader ) { }
public TaskVisualizer ( Context context , int widgetId ) { super ( context , widgetId ) ; this . taskProvider = new TaskProvider ( context , widgetId ) ; }
public OrthogonalBase ( Point _origin , Point _extremity ) { this ( _origin , _extremity , MathUtils . IGNORE_DOUBLE ) ; }
public void onFragmentDestroy ( ) { ConnectionsManager . getInstance ( ) . cancelRequestsForGuid ( classGuid ) ; isFinished = true ; if ( actionBar != null ) { actionBar . setEnabled ( false ) ; } }
public int getItemCount ( ) { return popularGoalArray . length ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return MediaPlayerConstants . TITLE_SONGS ; case 1 : return MediaPlayerConstants . TITLE_PLAYLISTS ; default : return null ; } }
private void playPlaylist ( int position ) { try { ( ( GenericActivity ) getActivity ( ) ) . getPlaybackService ( ) . playPlaylist ( mPlaylistModel , position ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . TRIGONOMETRIC_FUNCTIONS ; }
public ScheduleLessonsFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public ArrayAdapter_Visited ( Context context , List < DB_Location_NoeC > list ) { super ( context , R . layout . listitem_visited , list ) ; this . context = context ; this . filteredData = list ; this . originalData = list ; }
public MunitionsFactory ( int shipMoveDistance , long initialVelocityTime , Context context ) { this ( initial_bullets , shipMoveDistance , initialVelocityTime , context ) ; }
private void vibrate ( ) { if ( feedback ) ContextHolder . vibrateKey ( FEEDBACK_DURATION ) ; }
public void onBindViewHolder ( ContactFieldViewHolder holder , int position ) { holder . bind ( fields . get ( position ) , selectable ) ; }
public Competition getCompetition ( ) { return competition ; }
public void onSensorChanged ( SensorEvent ev ) { if ( ev . values [ 0 ] < 0 . 0 ) { decideZeroFs ( ) ; } sensorManager . unregisterListener ( this , sensor ) ; }
private void hidePrepareFileToast ( final Toast prepareFileToast ) { if ( prepareFileToast != null ) { activity . runOnUiThread ( prepareFileToast : : cancel ) ; } }
public void setDate ( String mDate ) { this . date = mDate ; }
private int getEventColor ( Cursor cursor ) { return cursor . getInt ( cursor . getColumnIndex ( Instances . DISPLAY_COLOR ) ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { loadNextItemsIfNeeded ( recyclerView ) ; }
public void onPause ( ) { super . onPause ( ) ; mThread . onPause ( ) ; }
public double getLat ( ) { return lat ; }
public void reset ( ) { mState = STATE_PRIMING ; mPreviousUnderrunCount = 0 ; setBufferSizeInFrames ( mInitialSize ) ; }
public static boolean machinesOffline ( List < Machine > machines ) { for ( Machine m : machines ) { if ( ! ( m . getStatus ( ) . equals ( "Not online" ) ) ) { return false ; } } return true ; }
public void postKeyReleased ( int keyCode ) { Display . postEvent ( CanvasEvent . getInstance ( this , CanvasEvent . KEY_RELEASED , convertKeyCode ( keyCode ) ) ) ; }
public void makeDatabasePristine ( ) { Context testContext = InstrumentationRegistry . getTargetContext ( ) ; PubkeyDatabase . resetInMemoryInstance ( testContext ) ; mActivityRule . launchActivity ( new Intent ( ) ) ; }
public int getCount ( ) { return mComments . size ( ) ; }
public int getItemCount ( ) { return dataArray . size ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , false ) ; return inflater . inflate ( R . layout . fragment_select_axzon , container , false ) ; }
public boolean isShowing ( ) { return mIsShowing ; }
private void onInputChanged ( ) { GameInputHandlerFactory factory = mSelector . getData ( ) ; mGame . getConfig ( ) . setPlayerInputHandlerFactory ( mPlayerIdx , factory ) ; mGame . getConfig ( ) . flush ( ) ; updateConfigureButton ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = ActivitySettingsBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
public Data < Game > getGame ( ) { return game ; }
private final ImportReplaceListener importReplaceListener ( ) { return new ImportReplaceListener ( this ) ; }
private void stopAudioDispatcher ( ) { if ( ! audioDispatcher . isStopped ( ) ) { audioDispatcher . stop ( ) ; IS_RECORDING = false ; } }
public BluetoothReceiver ( BluetoothIconData iconData ) { super ( iconData ) ; }
public void onClick ( View v ) { presenter . loadLanguages ( ) ; }
public void run ( ) { MessagesProvider . markThreadAsRead ( mContext , mThreadId ) ; MessagingNotification . updateMessagesNotification ( mContext . getApplicationContext ( ) , false ) ; }
public MutableLiveData < Boolean > getHistoryWhenDone ( ) { return mHistoryWhenDone ; }
public void setMarkerStyle ( int markerStyle ) { putInt ( MARKER_STYLE , markerStyle ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( checkAndAskForContactsReadPermission ( PermissionUtil . PERMISSIONS_READ_CONTACTS_AUTOMATIC ) ) { if ( isChecked ) { setAutomaticBackup ( true ) ; } else { setAutomaticBackup ( false ) ; } } }
public AbstractTransaction getTransaction ( String transactionId ) { lock . lock ( ) ; try { return rawtransactions . get ( new Sha256Hash ( transactionId ) ) ; } finally { lock . unlock ( ) ; } }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; gridView . setOnItemClickListener ( ( AdapterView . OnItemClickListener ) getActivity ( ) ) ; initList ( ) ; }
public String getBaseUrl ( ) { return mBaseUrl ; }
public void onBitmapFailed ( Drawable errorDrawable ) { }
public void setCustomTicker ( String ticker ) { mCustomTicker = ticker ; createNotification ( ) ; }
private void finishSequenceAndLogError ( String error ) { if ( LOG_ESCAPE_SEQUENCES ) mClient . logWarn ( LOG_TAG , error ) ; finishSequence ( ) ; }
public void onResume ( ) { super . onResume ( ) ; Optional . ofNullable ( getActivity ( ) ) . ifPresent ( a -> a . setTitle ( ApplicationPreferences . getWidgetInstanceName ( a ) ) ) ; }
public String exec ( ExecutePack pack ) { pack . context . startActivity ( Tuils . openFile ( new File ( Tuils . getFolder ( ) , RssManager . PATH ) ) ) ; return null ; }
private void unmuteIfNecessary ( ) { mGame . getAudioManager ( ) . setMuted ( ! mGame . getConfig ( ) . audio ) ; }
private void gpsFixingStarted ( ) { valueNumSatellites . setText ( " - " ) ; gpsFixLabel . setVisibility ( View . VISIBLE ) ; }
public ImageContent ( List < Bitmap > images ) { super ( new ArrayList < Object > ( images ) ) ; }
private void selectDrink ( DrinkSize size ) { DrinkSelection sel = new DrinkSelection ( selectedDrink , size ) ; sel . setTime ( new Date ( ) ) ; setResult ( RESULT_OK , DrinkActivities . createDrinkSelectionResult ( sel , null ) ) ; finish ( ) ; }
public Intent createViewIntent ( TaskEvent event ) { Intent intent = CalendarIntentUtil . createCalendarIntent ( ) ; intent . setData ( ContentUris . withAppendedId ( AstridCloneTasksContract . Tasks . VIEW_URI , event . getId ( ) ) ) ; return intent ; }
private void scheduleMoodChange ( ) { mMoodTimer . scheduleTask ( new Timer . Task ( ) { @ Override public void run ( ) { degradeMood ( ) ; } } , mMoodDelay ) ; }
public CubesException ( String arg0 ) { super ( arg0 ) ; c = Thread . currentThread ( ) . getStackTrace ( ) [ 2 ] . getClassName ( ) ; }
private void load ( ) { Log . d ( "RECYCLER" , "load start" ) ; plants = Plant . all ( ) ; Collections . sort ( plants ) ; Log . d ( "RECYCLER" , "load stop" ) ; }
private static double getLongitudeHash ( String hash ) { String chunk = hash . substring ( 16 , 32 ) ; return HexFraction . calculate ( chunk ) ; }
private static synchronized HistoryDataSource getSync ( ) { if ( instance == null ) { instance = new HistoryDataSource ( ) ; } return instance ; }
public synchronized void close ( ) { if ( state != CLOSED ) { player . release ( ) ; } source . disconnect ( ) ; state = CLOSED ; postEvent ( PlayerListener . CLOSED ) ; }
public SearchHistoryAssembler searchedFor ( PlaceModel place ) { this . placeId = place . getId ( ) ; this . plate = place . plates ( ) . get ( 0 ) . pattern ( ) ; return this ; }
public NowPlayingInformation getNowPlayingInformation ( ) throws RemoteException { return mService . get ( ) . getNowPlayingInformation ( ) ; }
private void autoSendLogFileOnStop ( ) { if ( AppSettings . isAutoSendEnabled ( ) && AppSettings . shouldAutoSendOnStopLogging ( ) ) { autoSendLogFile ( null ) ; } }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; }
public Loader < ArrayList < Song >> onCreateLoader ( int id , Bundle args ) { return new GenreDetailActivity . AsyncGenreSongLoader ( this , genre ) ; }
public void RemoveBookmark ( int pageId ) { sGlobalUserDBHelper . RemoveBookmark ( pageId , bookId ) ; }
public < T > T read ( String key ) { return read ( key , null ) ; }
public MyGoalsRecycler ( FragmentActivity context , MyGoalsPresenter myGoalsPresenter ) { super ( context ) ; mMyGoalsPresenter = myGoalsPresenter ; setupDataSet ( ) ; }
public Double getApparentTemperatureMinTime ( ) { return apparentTemperatureMinTime ; }
public void pause ( ) { if ( ttsController . isSpeaking ( ) ) { ttsController . stop ( ) ; setStatus ( Status . PAUSED ) ; } }
public static void log ( Context context , String s , Exception ex ) { log ( context , s + " : " + getExceptionInfo ( ex ) , Types . ERROR ) ; }
public HeaderHolder ( View v ) { super ( v ) ; mText = ( TextView ) v . findViewById ( R . id . server_list_header ) ; }
public com . coinomi . core . protos . Protos . TransactionOutput . Builder addTransactionOutputBuilder ( ) { return getTransactionOutputFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . TransactionOutput . getDefaultInstance ( ) ) ; }
public int getCount ( ) { return recipients . size ( ) ; }
public Socket createSocket ( Socket socket , String host , int port , boolean autoClose ) throws IOException , UnknownHostException { return sslContext . getSocketFactory ( ) . createSocket ( socket , host , port , autoClose ) ; }
public boolean canSelectMultiple ( ) { return ! destroyed ; }
public void run ( ) { onBluetoothSerialRead ( message . trim ( ) , grblUsbSerialService ) ; }
public static boolean isPublishDateInTheFuture ( String dateCreated , Date now ) { Date pubDate = DateTimeUtils . dateFromIso8601 ( dateCreated ) ; return pubDate != null && pubDate . after ( now ) ; }
public void run ( ) { getChannelDifference ( update . channel_id , 1 , 0 ) ; }
public void onDrawerOpened ( View drawerView ) { super . onDrawerOpened ( drawerView ) ; mDrawerToggle . setDrawerIndicatorEnabled ( true ) ; invalidateOptionsMenu ( ) ; }
public void localeThreeLetterCodeResolves ( ) { assertThat ( "A locale with a 3 - letter code resolves correctly" , LanguageUtil . getLocale ( "fil" ) . getDisplayLanguage ( ) , is ( "Filipino" ) ) ; }
public static void applyTheme ( ThemeInfo themeInfo ) { applyTheme ( themeInfo , true , true ) ; }
public void onClick ( View v ) { dataSet . posts . add ( pos , ( PublicContribution ) old ) ; notifyItemInserted ( pos + 1 ) ; Hidden . undoHidden ( old ) ; }
public static PendingIntent getNotificationIntentNext ( Context context ) { return getPendingIntent ( context , ACTION_NEXT ) ; }
public void notifyItemRangeRemoved ( int positionStart , int itemCount ) { updateRows ( ) ; try { super . notifyItemRangeRemoved ( positionStart , itemCount ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void run ( ) { abortProgress ( true ) ; startValidationCode ( REQUEST_MANUAL_VALIDATION , sender , challenge , brandImage , brandLink , canFallback ) ; }
public void put ( String key , int value ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; prefs . edit ( ) . putInt ( key , value ) . apply ( ) ; }
private void putAccounts ( List < Account > accounts ) { preferences . putString ( AppConstants . PREFS . ACCOUNTS , new ListAccountSerializer ( ) . serialize ( accounts ) ) ; }
public Integer getSuccess ( ) { return success ; }
private void load ( String id ) { mCurrentState . setValue ( MovieDetailViewState . makeLoadingState ( id ) ) ; new LoadMovieDetailTask ( Dependecies . getRepository ( ) , LocalDB . get ( getApplication ( ) ) , mCurrentState ) . execute ( id ) ; }
public void onResume ( ) { log . v ( TAG , "Fragment resumed" ) ; firebaseAnalyticsProvider . setCurrentScreen ( activity , fragment ) ; }
public void afterTextChanged ( Editable editable ) { checkFieldsForEmptyValues ( ) ; }
public void setStep ( int step ) { this . mStep = step ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . ScryptParameters prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public String toSql ( ) { return " LIMIT " + i + " " ; }
private void publishProgress ( long add ) { this . transferred += add ; if ( this . transferred >= this . size || publishTimer . isStep ( ) ) this . listener . progress ( conn , this . transferred ) ; }
public void onLoadFailed ( Drawable errorDrawable ) { super . onLoadFailed ( errorDrawable ) ; onColorReady ( getView ( ) . getContext ( ) . getResources ( ) . getColor ( R . color . FlatBlue ) ) ; }
public com . coinomi . core . protos . Protos . Key getSeed ( ) { return seed_ ; }
public void onDefault ( Selector s ) { RemixedDungeon . quickSlots ( - 1 ) ; }
public void newEmptySelection_Always_ReturnNotNullValue ( ) { assertThat ( sut . newEmptySelection ( ) , Matchers . notNullValue ( ) ) ; }
private static boolean check ( Context context ) { return ! SettingUtils . isCrashReport ( context ) || BuildConfig . DEBUG ; }
public boolean onFragmentCreate ( ) { chat_id = getArguments ( ) . getInt ( "chat_id" ) ; NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded ) ; return super . onFragmentCreate ( ) ; }
public void onFileProviderAudioLoaded ( List < String > fileAudioPaths ) { super . onFileProviderAudioLoaded ( fileAudioPaths ) ; }
public void onModifySettingsFailure ( int statusCode ) { showProcessDialog . set ( false ) ; showToast . notifyChange ( ) ; toastContent . set ( getString ( R . string . fail_on_modifying ) ) ; }
public void onStatusChanged ( TransferStatus transferStatus ) { broadcastTransferStatus ( transferStatus ) ; mTransferNotificationManager . updateTransfer ( transferStatus ) ; }
public ListeDeSessions Func ( ) throws java . lang . Exception { return listeSessions ( codeAccesUniversel , motPasse ) ; }
public void applyDatacenterAddress ( int datacenterId , String ipAddress , int port ) { native_applyDatacenterAddress ( datacenterId , ipAddress , port ) ; }
public void onResourceReady ( BitmapPaletteWrapper resource , GlideAnimation < ? super BitmapPaletteWrapper > glideAnimation ) { super . onResourceReady ( resource , glideAnimation ) ; onColorReady ( PhonographColorUtil . getColor ( resource . getPalette ( ) , getDefaultBarColor ( ) ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . meu_main_activity , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public static int getColor ( @ AttrRes final int attr , final Context context ) { return context . getResources ( ) . getColor ( getAttrIdValue ( attr , context ) ) ; }
public int [ ] args ( ) { return new int [ ] { CommandAbstraction . INT , CommandAbstraction . VISIBLE_PACKAGE } ; }
public void onClick ( View v ) { getTime ( ) ; DatePickerDialog datePickerDialog = new DatePickerDialog ( CustomPoopActivity . this , CustomPoopActivity . this , year , month , day ) ; datePickerDialog . show ( ) ; }
public AboutBuilder addIntroduceAction ( View . OnClickListener onClickListener ) { return addAction ( R . mipmap . intrduce , R . string . introduce_app , onClickListener ) ; }
public void setCurrentMinute ( Integer currentMinute ) { this . mCurrentMinute = currentMinute . intValue ( ) ; updateMinuteDisplay ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setupBtnListener ( ) ; Logger . info ( "WearCameraFragment onCreate" ) ; }
public String getTitle ( ) { if ( mContext != null ) return String . format ( getString ( R . string . search_found_mask ) , foundCount ) ; else return null ; }
public boolean onTouch ( View v , MotionEvent event ) { if ( MotionEventCompat . getActionMasked ( event ) == MotionEvent . ACTION_DOWN ) { mItemInteractListener . onItemDrag ( this ) ; } return false ; }
public boolean onMenuItemActionCollapse ( MenuItem item ) { mSearchQuery = null ; setSearchMode ( false ) ; return true ; }
public long contentLength ( ) { return content . length ; }
public JsonCommand param ( String tag , Object value ) { params . put ( tag , value ) ; return this ; }
public boolean handleBack ( ) { if ( mWebView . canGoBack ( ) ) { mWebView . goBack ( ) ; return true ; } return false ; }
public ReceiverBundle ( ReceiverBeacon receiverBeacon ) { this . receiverBeacon = receiverBeacon ; this . beaconCount = 0 ; this . aircrafts = new ArrayList < String > ( ) ; }
public boolean isLongPressDragEnabled ( ) { return true ; }
public void setAccountName ( String accountName ) { this . accountName = accountName ; }
public void scrollToPosition ( int position ) { if ( position < 0 || position >= getItemCount ( ) ) { return ; } requestedPosition = position ; requestLayout ( ) ; }
public ItemClickListener ( EpisodeInfo info ) { info_ = info ; }
public void onFailure ( Call < JsonObject > call , Throwable t ) { KLog . e ( t . getLocalizedMessage ( ) ) ; home_line_chart . setVisibility ( View . GONE ) ; }
public JingleConnection createNewConnection ( JinglePacket packet ) { JingleConnection connection = new JingleConnection ( this ) ; this . connections . add ( connection ) ; return connection ; }
public long insert ( CoNaObiadDbHelper dbHelper , String name ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "name" , name ) ; return dbHelper . insert ( tableName , contentValues ) ; }
public int hashCode ( ) { return mUID . hashCode ( ) ; }
public EventsList ( BigInteger blockHeight , List < EventInfo > events ) { this . blockHeight = blockHeight ; this . events = events ; }
public static com . coinomi . core . protos . Protos . Script parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void setAnchor ( AnchorPosition anchor ) { this . anchor = anchor ; }
public boolean isFinishOnLaunchEnabled ( ) { return mSharedPreferences . getBoolean ( KEY_FINISH_ON_LAUNCH , false ) ; }
public final int checkPermission ( String str ) { return - 1 ; }
public void updateIndividualRoute ( final Route route ) { super . updateRoute ( route ) ; this . distance = route . getDistance ( ) ; if ( postRealRouteDistance != null ) { postRealRouteDistance . postRealDistance ( distance ) ; } }
public void read ( DataInputStream dataInputStream ) throws Exception { angle = VectorUtil . stream ( dataInputStream ) ; position = VectorUtil . stream ( dataInputStream ) ; }
public DrawerBuilder ( ) { }
public String getDirName ( ) { return dirName ; }
public void onError ( ) { mNewsListView . hideProgress ( ) ; mNewsListView . showError ( ) ; updateIfNeeded ( ) ; }
public void onMoved ( int fromPosition , int toPosition ) { Log . i ( Helper . TAG , "Moved " + fromPosition + " > " + toPosition ) ; }
private MasterKey decryptPasswordSlot ( PasswordSlot slot , SecretKey key ) throws SlotException , SlotIntegrityException { Cipher cipher = slot . createDecryptCipher ( key ) ; return slot . getKey ( cipher ) ; }
public TodoListHeader ( String title , int position , String parentTodoListUuid ) { this ( UUID . randomUUID ( ) . toString ( ) , title , new Date ( ) , new Date ( ) , position , parentTodoListUuid ) ; }
public void onStop ( String utteranceId , boolean interrupted ) { Log . d ( TAG , "utteranceProgressListener . onStop ( ) " + utteranceId + " , " + interrupted ) ; onSpeakDoneListener ( utteranceId ) ; }
public JsonBufferedObject getObject ( @ NonNull final String id ) { final JsonValue value = get ( id ) ; if ( value == null ) { return null ; } return value . asObject ( ) ; }
public Control [ ] getControls ( ) { return controls . values ( ) . toArray ( new Control [ 0 ] ) ; }
public long getSpeed ( ) { return UNIT_TANK_SPEED ; }
public Item remove ( int group , int pos ) { updated ( ) ; return remove ( group , pos , true ) ; }
public void onClick ( View v ) { Fragment current = manager . findFragmentById ( R . id . frame_maintenance ) ; Fragment next = new NewMaintenanceFragment ( ) ; showFragmentWithTransition ( current , next ) ; }
public void setFirstStart ( boolean isFirstStart ) { sharedPref . edit ( ) . putBoolean ( "pref_key_isFirstStart" , isFirstStart ) . apply ( ) ; }
public ListSongsAsyncTask ( Context context , Object extra , OnSongsListedCallback callback ) { super ( context ) ; this . extra = extra ; contextWeakReference = new WeakReference <> ( context ) ; callbackWeakReference = new WeakReference <> ( callback ) ; }
public static String formatCurrency ( Context ctx , Long balance , CurrencyEnum cur ) { return formatGenericCurrency ( ctx , balance ) + " " + cur . name ( ) ; }
public Entity ( String type ) { this ( UUID . randomUUID ( ) , type , new Vector3 ( ) , new Vector3 ( 1f , 0f , 0f ) ) ; }
public void resetIfNeeded ( ConnectedActivity activity ) { if ( ! get ( activity , "pref_default_values_applied" , false ) ) { put ( activity , "pref_default_values_applied" , true ) ; reset ( activity , false ) ; } }
public int compare ( Subreddit c1 , Subreddit c2 ) { return c2 . getAge ( ) . intValue ( ) - c1 . getAge ( ) . intValue ( ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new MyViewHolder ( inflater . inflate ( R . layout . custom_main_row , parent , false ) ) ; }
public void facultyDetailsClick ( View v ) { Intent i = new Intent ( this , FacultyDetails . class ) ; startActivity ( i ) ; }
public void setGroupPS ( String ps ) { TextView group_ps = ( TextView ) findViewById ( R . id . group_ps ) ; group_ps . setText ( ps ) ; }
private void initInfiniteVibratePrefs ( ) { binding . infiniteVibrateOptionPrefs . setOnClickListener ( mInfiniteVibrateClick ) ; binding . infiniteVibrateOptionPrefs . setChecked ( mPrefs . isInfiniteVibrateEnabled ( ) ) ; binding . infiniteVibrateOptionPrefs . setDependentView ( binding . vibrationOptionPrefs ) ; }
private void changeRemindersPrefs ( ) { boolean isChecked = binding . reminderInCalendarPrefs . isChecked ( ) ; binding . reminderInCalendarPrefs . setChecked ( ! isChecked ) ; mPrefs . setRemindersInCalendarEnabled ( ! isChecked ) ; }
public void noResult ( ) { activityDetailresultsBinding . recyclerViewDetailedResult . setVisibility ( View . GONE ) ; activityDetailresultsBinding . NA . setVisibility ( View . VISIBLE ) ; }
private static long getLong ( Context context , String key , long defaultValue ) { return sPreferences . getLong ( key , defaultValue ) ; }
public int getyLoc ( ) { return yLoc ; }
public void onNotes ( ) { navigateTo ( AddNoteFragment . newInstance ( questions . get ( currentQuestion ) . getQuestion ( ) . getId ( ) ) ) ; }
public void onClick ( View widget ) { displayInitialView ( e164number ) ; registrationState = new RegistrationState ( RegistrationState . State . INITIAL , null , null , null ) ; }
public boolean onCabFinished ( MaterialCab materialCab ) { setStatusbarColor ( ColorUtil . withAlpha ( toolbarColor , toolbarAlpha ) ) ; return callback . onCabFinished ( materialCab ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( MainActivity . this , NewPostActivity . class ) ) ; }
public void setView ( ImageView view ) { this . view = view ; }
public FileModelBuilder count ( long count ) { this . mCount = count ; return this ; }
public Silence ( int durationInMs , int _sampleRate ) { super ( durationInMs , _sampleRate ) ; for ( int sampleNum = 0 ; sampleNum < this . numSamples ; sampleNum ++ ) { this . samples [ sampleNum ] = SILENCE_VAL ; } }
public Resources . Theme getTheme ( ) { return this . dialogFragment . requireActivity ( ) . getTheme ( ) ; }
public void no ( ) { }
public void onServiceConnected ( ComponentName className , IBinder binder ) { OgnService . LocalBinder localBinder = ( OgnService . LocalBinder ) binder ; ognService = localBinder . getService ( ) ; ognServiceConnected = true ; changeAircraftTimeout ( ) ; updateKnownMarkers ( ) ; startLocationUpdates ( ) ; }
public Object [ ] getSections ( ) { return sections ; }
public void onRemoved ( int position , int count ) { Log . i ( Helper . TAG , "Removed @ " + position + " #" + count ) ; }
private CacheManaging ( Context applicationContext ) { this . filename = applicationContext . getCacheDir ( ) . getPath ( ) + File . separator + BuildConfig . APPLICATION_ID ; }
public long getItemId ( int position ) { return projectsUsersList . get ( position ) . id ; }
private void addTitle ( String text ) { mMenu . addTitleLabel ( text ) ; }
public void setNumberOfPoints_Processed ( long numberOfPoints_Processed ) { NumberOfPoints_Processed = numberOfPoints_Processed ; }
public WeatherWidgetProvider4x3 ( ) { super ( 6 ) ; }
public boolean isAnyCategorySaved ( SQLiteOpenHelper helper ) { return isAnyRecordSaved ( helper , tableName ) ; }
public void putInt ( int value , String key ) { SharedPreferences . Editor editor = mSharedPref . edit ( ) ; editor . putInt ( key , value ) ; editor . commit ( ) ; }
private void onFetchingFailed ( FetchingStatus status , String msg ) { this . status . setValue ( status ) ; Log . e ( "SWELL" , "Fetching fitness data failed : " + msg ) ; }
public BtnsRecyclerAdapter ( MainActivity pMainActivity ) { mClickListener = pMainActivity ; }
public List < String > getImages ( ) { List < String > images = new ArrayList <> ( ) ; for ( Result r : results ) { images . add ( r . getPoster ( ) ) ; } return images ; }
public String getInfoString ( @ NonNull Context context ) { String cutoff = PreferenceUtil . getInstance ( ) . getRecentlyPlayedCutoffText ( context ) ; return MusicUtil . buildInfoString ( cutoff , super . getInfoString ( context ) ) ; }
public boolean moveToNext ( ) { return cur . moveToNext ( ) ; }
public Object call ( ) throws Exception { return AppDatabase . getAppDatabase ( getActivity ( ) ) . appointmentsDao ( ) . getAllTitles ( ) ; }
public UserAdapter . UserViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View userRow = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . user_tablerow , parent , false ) ; return new UserViewHolder ( userRow ) ; }
private @ WarningMessageType int getHighestPriorityMessage ( ) { int highestPriority = Integer . MIN_VALUE ; for ( int type : activeMessages ) { if ( type > highestPriority ) { highestPriority = type ; } } return highestPriority ; }
public WeatherWidgetProvider4x1 ( ) { super ( 2 ) ; }
public DeckAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = mLayoutInflater . inflate ( R . layout . deck_item , parent , false ) ; return new ViewHolder ( v ) ; }
private SunraySprite getSunraySprite ( Resources res ) { return new SunraySprite ( res , Constants . SUNRAY_DRAWABLE , 0 . 8f , 0 . 92f , 0 . 2f ) ; }
public AppThemeManagerInterface getThemeManager ( ) { return appThemeManager ; }
public boolean isRefreshing ( ) { return mArticlesView . isRefreshing ( ) ; }
public static void disabled ( Context context ) { RemoteWorkManager . getInstance ( context ) . cancelUniqueWork ( WORKER_TAG ) ; }
public static Formula compile ( final String expression ) { return compile ( expression , 0 , null ) ; }
public void drop ( int from , int to ) { LogUtil . i ( TAG , "Drop from %d to %d" , from , to ) ; }
private static String parseStupidNull ( @ NonNull JSONObject obj , @ NonNull String key ) { String str = CommonUtils . optString ( obj , key ) ; if ( Objects . equals ( str , "null" ) ) return null ; else return str ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setHasOptionsMenu ( true ) ; }
public void onLoadCleared ( Drawable placeholder ) { super . onLoadCleared ( placeholder ) ; setColors ( getDefaultBarColor ( ) , holder ) ; }
public static WidgetOptions getDefaultOptions ( ) { return new WidgetOptions ( "#121314" , 100 , "#ffffff" , "#A0A0A0" , false , true ) ; }
public String toString ( ) { return lat + lon ; }
public UserProfileURL ( String username ) { this . username = username ; }
public void setUpServiceConfig ( ) { mWeatherRepository = spy ( ServiceConfig . getInstance ( ) . getWeatherRepository ( ) ) ; }
public Response ( Bitmap bitmap ) { mBitmap = bitmap ; }
public void activateUVBuffer ( FloatBuffer uvBuffer ) { mProgramTexture . activateUVBuffer ( uvBuffer ) ; }
public LiveData < Pair < NavigationCategory , CategorySortingMethod >> getCategorySortingMethodOfSelectedCategory ( ) { return switchMap ( getSelectedCategory ( ) , selectedCategory -> map ( db . getCategoryOrder ( selectedCategory ) , sortingMethod -> new Pair <> ( selectedCategory , sortingMethod ) ) ) ; }
private void saveFileData ( Uri uri , String key ) { if ( ! mRememberKeyfile ) { key = "" ; } App . getFileHistory ( ) . createFile ( uri , key ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "collapse_quotes" , checked ) . apply ( ) ; }
public void onClick ( View view ) { showLocationPickerOrPopupMenu ( view ) ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfLevitation_Info ) ; }
private boolean isWalletsAvailable ( ) { RealmResults < WalletRealmObject > wallets = RealmManager . getAssetsDao ( ) . getWallets ( ) ; return wallets != null && wallets . size ( ) > 0 ; }
public void destroy ( ) { videoPlayer . releasePlayer ( ) ; if ( currentTask != null ) { currentTask . cancel ( true ) ; currentTask = null ; } webView . stopLoading ( ) ; }
public void setContainerSerial ( String containerSerial ) { this . containerSerial = containerSerial ; }
public void setVisibleXRangeMaximum ( float maxXRange ) { float xScale = mDeltaX / ( maxXRange ) ; mViewPortHandler . setMinimumScaleX ( xScale ) ; }
public ActionBar getActionbar ( ) { return getSupportActivity ( ) . getSupportActionBar ( ) ; }
public void configNowVoiceMessagePlaying ( int id , float progress , boolean paused ) { }
public static com . coinomi . core . protos . Protos . DeterministicKey parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public static String getFileName ( ) { return fileName ; }
public void clearUndo ( ) { mUndo = new LinkedList <> ( ) ; }
public void extractGoogleRedirectUrl ( ) throws Exception { assertEquals ( Uri . parse ( "https : new IntentParser ( ) . removeRedirect ( Uri . parse ( "https : }
public static boolean isImage ( String filename ) { return filename . toLowerCase ( ) . matches ( " . *\\ . ( jpg|jpeg|bmp|gif|png ) $" ) ; }
private synchronized void publishResults ( List < HistoryItem > list ) { mFilteredList . clear ( ) ; mFilteredList . addAll ( list ) ; notifyDataSetChanged ( ) ; }
public void testConvertToExtended ( ) throws Exception { String src = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ - . $/ + %" ; String dst = Code93Writer . convertToExtended ( src ) ; assertEquals ( src , dst ) ; }
public void logoutPermanently ( @ NonNull final Context context , @ Nullable final Callable callback ) { logoutPermanently ( context , null , callback ) ; }
public void put ( @ Nullable String cacheKey , @ Nullable LottieComposition composition ) { if ( cacheKey == null ) { return ; } cache . put ( cacheKey , composition ) ; }
public CaptureData ( String captureDataUUID ) { this . captureDataUUID = captureDataUUID ; this . hostDeviceData = null ; this . clientDeviceData = null ; this . subjectInfo = null ; this . activityName = null ; this . additionalInfo = null ; }
public boolean hasDeterministicKey ( ) { return ( ( bitField0_ & 0x00000040 ) == 0x00000040 ) ; }
public int getLayoutRes ( ) { return R . layout . item_minibar_edit ; }
public void bind ( @ NonNull GlideRequests glideRequests , int type , DcContact contact , String name , String number , String label , int color , boolean multiSelect , boolean enabled ) { this . label . setText ( name ) ; }
public void onSurfaceDestroyed ( SurfaceHolder holder ) { _surfaceDestroyed ( ) ; }
public void onViewDetachedFromWindow ( RecyclerView . ViewHolder holder ) { if ( isInsertionEnabled ( ) ) { if ( ! ( holder instanceof OddPosItemViewHolder ) ) { super . onViewDetachedFromWindow ( holder ) ; } } else { super . onViewDetachedFromWindow ( holder ) ; } }
public void onAttach ( Context activity ) { super . onAttach ( activity ) ; mActivity = ( AMActivity ) activity ; settings = PreferenceManager . getDefaultSharedPreferences ( mActivity ) ; editor = settings . edit ( ) ; }
public boolean hasPeer ( String username ) { for ( SwanUser peer : nearbyPeers ) { if ( peer . getUsername ( ) . equals ( username ) ) { return true ; } } return false ; }
public T getCachedViewModel ( ) { return viewModelRepository != null ? viewModelRepository . getViewModel ( ) : null ; }
public String defaultValue ( ) { return "true" ; }
private CacheEntry ( V data ) { this ( data , new WeakReferenceListManager < UpdatedVersionListener < K , V >> ( ) ) ; }
public static boolean canShowRemoval ( String subreddit ) { return Toolbox . getConfig ( subreddit ) != null && Toolbox . getConfig ( subreddit ) . getRemovalReasons ( ) != null ; }
public Project ( ) { }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_messageEditData . TLdeserialize ( stream , constructor , exception ) ; }
public void startFormDisplayActivityWithEncounter ( ) { addSubscription ( encounterDAO . getLastVitalsEncounter ( mPatient . getUuid ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( encounter -> { mPatientVitalsView . startFormDisplayActivity ( encounter ) ; } ) ) ; }
public UElementHandler createUastHandler ( @ NotNull JavaContext context ) { return new UElementHandler ( ) { @ Override public void visitImportStatement ( @ NotNull UImportStatement node ) { ImportStatementDetector . this . visitImportStatement ( context , node ) ; } } ; }
public static boolean isNotificationEnabled ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( PrefKeys . KEY_PREF_IS_NOTIFICATION_ENABLED , false ) ; }
public void handleMessage ( Message _msg ) { MainActivity activity = mActivity . get ( ) ; if ( activity != null ) { activity . handleMessage ( _msg ) ; } }
private void setUpSongListPadding ( ) { songListView . setPadding ( 0 , artistImageViewHeight + titleViewHeight , 0 , 0 ) ; }
public void setNumber ( String number ) { this . number = number ; }
public Integer getTypeId ( ) { return idTipIntrebare ; }
public void draw ( Canvas canvas ) { canvas . drawRect ( mBounds , mPaint ) ; }
public int getSpanY ( ) { return spanY ; }
public static boolean isPowerIndicatorShown ( final Context context ) { SharedPreferences sp = PreferenceManager . getDefaultSharedPreferences ( context ) ; return sp . getBoolean ( PREF_POWER_INDICATOR , true ) ; }
public Observable < Charges > createCharges ( int clientId , ChargesPayload payload ) { return mBaseApiManager . getChargeApi ( ) . createCharges ( clientId , payload ) ; }
public void expandHeaderOfItem ( String uuid , String title , int position ) { EditHeaderInteractor interactor = new EditHeaderInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , uuid , title , position , EXPANDED ) ; interactor . execute ( ) ; }
public static boolean toggleChecked ( ListView lv ) { if ( lv == null ) return false ; boolean newCheckState = lv . getCount ( ) > lv . getCheckedItemCount ( ) ; setAllToCheckedState ( lv , newCheckState ) ; return newCheckState ; }
public boolean isViewFromObject ( View view , Object object ) { ViewHolder holder = ( ViewHolder ) object ; return holder . itemView == view ; }
public void findCitiesByPartOfTheName ( String partOfTheName ) { mRepository . findCitiesByPartOfTheName ( partOfTheName , new WeatherDataSource . FindCityListCallback ( ) { @ Override public void onDataFound ( List < City > cityList ) { mView . showCityList ( cityList ) ; } } ) ; }
public String info ( ) { return Game . getVar ( R . string . ChaosStaff_Info ) ; }
public void onBindViewHolder ( final SuggestionViewHolder holder , int position ) { SozlikDbModel item = data . get ( position ) ; if ( item != null ) { holder . populateModel ( item , suggestionListener ) ; } }
public < T extends ViewModel > T create ( Class < T > modelClass ) { return ( T ) new Model ( uid ) ; }
public Builder setContent ( Spanned content ) { this . contnet = content ; return this ; }
public void getLastCoordinates ( @ NonNull final int [ ] outCoords ) { CoordinateUtils . set ( outCoords , mLastX , mLastY ) ; }
public void onError ( ) { organisatorImage . setLayoutParams ( new LinearLayout . LayoutParams ( 0 , 0 ) ) ; }
public void loadMenuSceneFromJustPlayGameScene ( ) { startSceneService ( loadingSceneService ) ; endSceneService ( justPlaySceneService ) ; menuSceneService . start ( ) ; }
public MathEval setVariable ( String nam , double val ) { return setVariable ( nam , new Double ( val ) ) ; }
public void showUnavailableMessage ( Context context ) { ToastUtils . showLongToast ( context . getString ( R . string . basemap_source_unavailable , context . getString ( sourceLabelId ) ) ) ; }
public static FavoriteListFragment newInstance ( ) { Bundle args = new Bundle ( ) ; FavoriteListFragment fragment = new FavoriteListFragmentEx ( ) ; fragment . setArguments ( args ) ; return fragment ; }
public String name ( ) { return Game . getVar ( R . string . SungrassBuff_Name ) ; }
public String getString ( String key ) { return mSharedPreferences . getString ( key , null ) ; }
public void onBindViewHolder ( MainAdapter . ViewHolder holder , int position ) { holder . reset ( ) ; holder . render ( dataset . get ( position ) ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( this . pageId ) ; dest . writeInt ( this . partNumber ) ; dest . writeInt ( this . pageNumber ) ; }
public String key ( ) { return null ; }
public static String getZipFileUrl ( String widthParam ) { String url = IMG_HOST ; url += "images" + widthParam + " . zip" ; return url ; }
private static boolean isZip ( String type ) { return type . endsWith ( fileExtensionZip ) || type . endsWith ( fileExtensinJar ) || type . endsWith ( fileExtensionApk ) ; }
public void onEvent ( Events . MonitoringChanged e ) { setupLocationRequest ( ) ; sendOngoingNotification ( ) ; }
public ArrayList < Song > getSongs ( @ NonNull Context context ) { return TopAndRecentlyPlayedTracksLoader . getRecentlyPlayedTracks ( context ) ; }
public boolean isEnabled ( RecyclerView . ViewHolder holder ) { int type = holder . getItemViewType ( ) ; return type == 0 || type == 1 || type == 4 || type == 7 || type == 10 || type == 11 ; }
public void function ( ) { getTemperatures ( ) ; loadChart ( ) ; }
public void setSeries ( List < SeriesVO > series ) { mSeries = series ; }
public void setBook ( Book book ) { this . book = book ; }
public void notifyGroupItemChanged ( int groupPosition ) { mAdapter . notifyGroupItemChanged ( groupPosition , null ) ; }
public int getColorPrimary ( ) { return getAttributeValue ( R . attr . colorPrimary ) ; }
public void onClick ( View view ) { actionListener . onClick ( view , DetailActionListener . RENAME_GP , textName . getText ( ) . toString ( ) ) ; }
public boolean onQueryTextSubmit ( String query ) { executeSearchShow ( query ) ; mSearchView . clearFocus ( ) ; return true ; }
public void loadFile ( SecureDocument secureDocument , int priority ) { if ( secureDocument == null ) { return ; } loadFile ( null , secureDocument , null , null , null , null , 0 , priority , 1 ) ; }
private void startAuthentication ( ) { mProgressbar . show ( ) ; mAccountManager . getAuthToken ( mAccount , mAuthToken , null , mActivity , this , null ) ; }
private void removeLevel ( String worldName , GameType gameType ) { File saveFile = new File ( savesDir , worldName + getExtension ( gameType ) ) ; saveFile . delete ( ) ; }
public void onItemClick ( AdapterView < ? > adapterView , View view , int i , long l ) { ForgeAccount account = ( ForgeAccount ) adapterView . getItemAtPosition ( i ) ; ( ( Forge ) getActivity ( ) ) . loadAccount ( account ) ; }
private Category ( Parcel in ) { setId ( in . readInt ( ) ) ; setName ( in . readString ( ) ) ; setDescription ( in . readString ( ) ) ; setColor ( in . readString ( ) ) ; }
public ArrayList < Genre > getDataSet ( ) { return dataSet ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = mode . getMenuInflater ( ) ; inflater . inflate ( R . menu . context_menu , menu ) ; return true ; }
public int getAvatarPlaceholder ( ) { return 0 ; }
public Field ( String name , Bitmap photo , String phone , String day ) { this . name = name ; this . photo = photo ; this . phone = phone ; this . day = day ; }
public void show ( FragmentActivity fragmentActivity ) { show ( fragmentActivity . getSupportFragmentManager ( ) ) ; }
public PagerAdapter ( FragmentManager fm , LinkedHashMap < String , Fragment > fragments ) { super ( fm ) ; mFragments = fragments ; }
public static CharSequence replace ( CharSequence cs , int color ) { return replace ( cs , - 1 , color ) ; }
public List < ArticleSummary > apply ( CnBetaApi . Result < List < ArticleSummary >> listResult ) throws Exception { if ( ! listResult . isSuccess ( ) ) { throw new RequestFailedException ( ) ; } return listResult . result ; }
public void onCreateOptionsMenu ( final Menu menu , final MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_user_list , menu ) ; new SearchHelper . Default ( ) . styleSearchView ( menu , this ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( ArrayOfFicheEmployeDate ) getResult ( ArrayOfFicheEmployeDate . class , __result , "RechercheDateResult" , __envelope ) ; }
public HostEntity ( @ NonNull String host ) { this . host = host ; timeout = 1000 ; }
public void onPhotoPickerMediaChosen ( @ NonNull List < Uri > uriList ) { if ( uriList . size ( ) > 0 ) { doMediaUrisSelected ( uriList , PhotoPickerMediaSource . APP_PICKER ) ; } }
public void onFail ( int errorCode , String msg ) { Log . d ( TAG , "enableAuthNotifications failed : " + msg ) ; }
public void setResults ( ArrayList < ShopItem > results ) { this . results = results ; }
public String convertResultToString ( Object resultValue ) { return ( ( Epithet ) resultValue ) . show ; }
public int getAdapterSegment ( ComposedChildAdapterTag tag ) { return mAdapterTags . indexOf ( tag ) ; }
public void Login ( View v ) { Intent i = new Intent ( getApplicationContext ( ) , Menu . class ) ; startActivity ( i ) ; }
public int getContentItemsTotal ( ) { return expanded ? list . size ( ) : 0 ; }
public static long genID ( ) { return MathUtils . random ( Long . MAX_VALUE - 1 ) ; }
public long getTotalBufferedDuration ( ) { return player . getTotalBufferedDuration ( ) ; }
private void initCalligraphy ( ) { CalligraphyConfig . initDefault ( new CalligraphyConfig . Builder ( ) . setDefaultFontPath ( "fonts/Regular . ttf" ) . setFontAttrId ( R . attr . fontPath ) . build ( ) ) ; }
public boolean attachTo ( Char target ) { if ( super . attachTo ( target ) ) { postpone ( TICK ) ; return true ; } else { return false ; } }
public void setPrimaryItem ( ViewGroup container , int position , Object object ) { super . setPrimaryItem ( container , position , object ) ; doSetPrimary ( object , position ) ; }
public AboutBuilder addEmailLink ( int email , String subject ) { return addEmailLink ( context . getString ( email ) , subject , null ) ; }
public List < WalletAccount > getAccounts ( Address address ) { if ( wallet != null ) { return wallet . getAccounts ( address ) ; } else { return ImmutableList . of ( ) ; } }
public void viewSchedule ( View v ) { Intent iSchedule = new Intent ( MainActivity . this , Schedule . class ) ; startActivity ( iSchedule ) ; finish ( ) ; }
public String getImageUrl ( ) { return image != null ? NetworkConstants . FOODTRUCK_API_FOODTRUCK_IMAGES_BASE_URL + image : null ; }
private void swapCursor ( long monthMillis , Cursor cursor ) { mPagerAdapter . swapCursor ( monthMillis , cursor , new PagerContentObserver ( monthMillis ) ) ; }
public InputStream openInputStream ( Context context ) { return ContactsContract . Contacts . openContactPhotoInputStream ( context . getContentResolver ( ) , contactPhotoUri , false ) ; }
public static DBAdmissionPercentageData getInstance ( ) { return mInstance ; }
public void setSwipeBackEnable ( boolean enable ) { getSwipeBackLayout ( ) . setEnableGesture ( enable ) ; }
public ColorPickerDialog setTitle ( int titleId ) { mTitle = mContext . getString ( titleId ) ; return this ; }
public Builder centerCrop ( ) { request . centerCrop ( ) ; return this ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { SwitchCompat favSwitch = ( SwitchCompat ) getView ( ) . findViewById ( R . id . fdFavorite ) ; mContainerActivity . getFileOperationsHelper ( ) . toggleOfflineFile ( getFile ( ) , favSwitch . isChecked ( ) ) ; }
public @ Nullable String getLocationProvider ( ) { return null ; }
public String getType ( Uri uri ) { return null ; }
private void showError ( final int resId ) { String error = getString ( resId ) ; Log . e ( TAG , error ) ; setStatus ( error ) ; }
public void onDestroy ( ) { cancelCurrentTask ( ) ; dbAdapter . close ( ) ; super . onDestroy ( ) ; }
public void usingReadOnlyOption_doesNotShowButton ( ) { DateWidget widget = createWidget ( promptWithReadOnlyAndQuestionDef ( questionDef ) ) ; assertEquals ( widget . binding . widgetButton . getVisibility ( ) , View . GONE ) ; }
public GeneralSettingsPage checkIfUserInterfaceOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . client ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public String getWholeDate ( ) { SimpleDateFormat wholeDate = new SimpleDateFormat ( "EEEE , dd . MM . yyyy" , Locale . GERMANY ) ; return wholeDate . format ( date ) ; }
public void writeToParcel ( Parcel parcel , int i ) { parcel . writeInt ( roomId ) ; parcel . writeInt ( movieId ) ; parcel . writeString ( key ) ; parcel . writeString ( name ) ; parcel . writeString ( site ) ; }
public ExampleInteractor provideExampleInteractor ( ) { return new ExampleInteractorImpl ( ) ; }
public void onClick ( View v ) { View layout = mLayout . get ( ) ; if ( layout == null ) return ; setVisibility ( View . GONE , View . VISIBLE , View . GONE ) ; loadImage ( this , mPosition ) ; }
public String getLimit ( ) { return limit ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . wwk . livetranslator" , appContext . getPackageName ( ) ) ; }
public void run ( ) { setBlurred ( false ) ; }
public QariItem getItem ( int position ) { return mItems . get ( position ) ; }
public void stopPlaying ( ) { Ln . v ( "Stop playing" ) ; cancelNotification ( ) ; cardPlayerContext . getState ( ) . transition ( cardPlayerContext , CardPlayerMessage . STOP_PLAYING ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; if ( mAdapter != null ) { mAdapter . destroy ( ) ; mAdapter = null ; } getBaseActivity ( ) . removeAppBarOffsetListener ( mBottomSheetOnOffsetChangedListener ) ; }
private void deleteOnContinue ( boolean ok ) { if ( ok ) { PresenceBeaconManager . getInstance ( ) . removeBeacon ( getContext ( ) , beaconId ) ; } }
public void onSuccess ( File file ) { olderCallback . onSuccess ( file ) ; callback . onSuccess ( file ) ; Log . d ( "JOINED CALLBACK" , "onSuccess ( \"" + file . toString ( ) + "\" ) " ) ; }
public int getGroupId ( ) { return gid ; }
public void onAnimationStart ( Animator animation ) { super . onAnimationEnd ( animation ) ; view . setAlpha ( initialValue ) ; view . setVisibility ( View . VISIBLE ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( progress == max ) textView . setText ( R . string . infinity ) ; else textView . setText ( Integer . toString ( progress ) ) ; }
public boolean onPreferenceClick ( Preference preference ) { startDiscoverTrackersActivity ( Keys . ROLE_CHILD ) ; return true ; }
public void setDateTime ( long dateTime ) { this . dateTime = dateTime ; }
public void setOnClick ( View . OnClickListener onClick ) { this . onClick = onClick ; }
public void handleMessage ( Message msg ) { String filename = ( String ) msg . obj ; try { service . ExportSettingsToPath ( filename ) ; } catch ( RemoteException e ) { throw new RuntimeException ( e ) ; } }
public Float getSize ( Integer origin_size ) { return getValue ( origin_size , m_bitmap_origin_height , canvasHeight ) ; }
public void onChanged ( SwitchView switchView , boolean isChecked ) { Wakelocks . enableWlanrx ( isChecked , getActivity ( ) ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { if ( mIsUndoOrRedo ) { return ; } mAfterChange = s . subSequence ( start , start + count ) ; makeBatch ( start ) ; }
public void setContent ( String content ) { contentView . setText ( content ) ; }
public void setPublicKey ( String publicKey ) { this . publicKey = publicKey ; }
public boolean onContainerTouchEvent ( MotionEvent event ) { return false ; }
public void reSort ( Item [ ] items_ ) { if ( items_ == null ) return ; ItemComparator comp = new ItemComparator ( mode & MODE_SORTING , true , ascending ) ; Arrays . sort ( items_ , comp ) ; }
private boolean isAppLocationSet ( ) { return perInstallationPrefs . getString ( Constants . PREF_APP_LOCATION , null ) != null ; }
public Attr setCurrentTranslate ( float current ) { mCurrentTranslate = current ; if ( mCurrentTranslate > getMaxPosition ( ) ) mCurrentTranslate = getMaxPosition ( ) ; return this ; }
public PlayerListAdapter ( PlayerListBaseActivity activity ) { mActivity = activity ; }
public void reset ( ) { Random random = new Random ( ) ; _idValue = random . nextInt ( ) ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; when ( mAddDebtView . isActive ( ) ) . thenReturn ( true ) ; mAddEditDebtPresenter = new AddEditDebtPresenter ( mDebtsRepository , mAddDebtView , null , null ) ; }
public void onTrimMemory ( int level ) { if ( level > TRIM_MEMORY_MODERATE && Build . VERSION . SDK_INT < Build . VERSION_CODES . KITKAT ) { Log . d ( TAG , "Low Memory , Free Memory" ) ; mTabsManager . freeMemory ( ) ; } }
public MessageHolder ( View v ) { super ( v ) ; mText = ( TextView ) v . findViewById ( R . id . chat_message ) ; mText . setMovementMethod ( LinkMovementMethod . getInstance ( ) ) ; }
private void updateUi ( ) { updateUi ( false , null ) ; }
public int compareTo ( Post another ) { if ( this . timestamp > another . timestamp ) { return - 1 ; } else if ( this . timestamp == another . timestamp ) { return 0 ; } else { return 1 ; } }
public void onErrorMessageEvent ( ErrorMessageEvent event ) { Snackbar . make ( findViewById ( android . R . id . content ) , event . message , Snackbar . LENGTH_SHORT ) . show ( ) ; }
public void onLoadFinished ( Loader < ArrayList < Song >> loader , ArrayList < Song > data ) { if ( adapter != null ) adapter . swapDataSet ( data ) ; }
public IPS ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
private void createLayout ( ) { setTabLayout ( ) ; setViewPager ( ) ; fillStats ( ) ; }
public void cancelLoadImage ( ) { ImageLoader . getInstance ( ) . cancelLoadingForImageReceiver ( this , 0 ) ; canceledLoading = true ; }
public void clearItems ( ) { mTotalPrice . setValue ( 0 ) ; if ( mView != null ) { mView . updatePrices ( mTotalPrice ) ; mView . clearItems ( ) ; } mContentResolver . delete ( DatabaseContract . CalculatorEntry . CONTENT_URI , null , null ) ; }
public static boolean isEnableLog ( Context context ) { return SettingUtils . isEnableLog ( context ) ; }
public int execute ( ) throws LuaException , RemoteException { String desired = this . getParam ( 2 ) . getString ( ) ; boolean result = parent . isPluginInstalled ( desired ) ; L . pushBoolean ( result ) ; return 1 ; }
public void setFormat ( String format ) { this . format = StringUtils . notNullStr ( format ) ; }
public ClientInfo getOriginalClientInfo ( ) { return clientInfoOriginal ; }
public boolean onSupportNavigateUp ( ) { if ( activityBinding . toolbar . getVisibility ( ) == VISIBLE ) { updateToolbars ( false ) ; return true ; } else { return super . onSupportNavigateUp ( ) ; } }
public static boolean syncOnNoteUpdate ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_auto_sync_on_note_update ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_auto_sync_on_note_update ) ) ; }
public void onStoreComplete ( boolean success ) { }
public void setLocationPermissionChecked ( boolean locationPermissionChecked ) { LocationPermissionChecked = locationPermissionChecked ; }
public void testValidateInputInvalidPassword ( ) { assertThat ( validateInput ( "user" , "foo" , "password" , "" ) , is ( ValidateResult . INVALID_PASSWORD ) ) ; }
public void onSortSelected ( final PostCommentListingURL . Sort order ) { controller . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public void listen ( OnMessageReceivedListener listener ) { mRun = true ; if ( socket != null ) return ; SocketThread st = new SocketThread ( serverIp , serverPort , listener ) ; st . start ( ) ; }
public com . coinomi . core . protos . Protos . AddressStatus getAddressStatus ( int index ) { return addressStatus_ . get ( index ) ; }
public OrderSet ( Order < TARGET > . . . order ) { Collections . addAll ( orders , order ) ; }
public static PendingIntent buildWidgetProviderAutoIntent ( Context context , Uri widgetUri ) { Intent intent = new Intent ( AixService . ACTION_UPDATE_ALL_PROVIDER_AUTO , widgetUri , context , AixService . class ) ; return PendingIntent . getService ( context , 0 , intent , 0 ) ; }
public static boolean isPostInConflictWithRemote ( PostModel post ) { return ! post . getLastModified ( ) . equals ( post . getRemoteLastModified ( ) ) && post . isLocallyChanged ( ) ; }
public void clear ( ) { optionDaoConfig . clearIdentityScope ( ) ; promotionDaoConfig . clearIdentityScope ( ) ; userDaoConfig . clearIdentityScope ( ) ; voteDataDaoConfig . clearIdentityScope ( ) ; }
private int getRandomPaletteColor ( ) { int [ ] paletteArray = getResources ( ) . getIntArray ( R . array . material_colors ) ; return paletteArray [ new Random ( ) . nextInt ( ( paletteArray . length ) + 1 ) ] ; }
public void inform ( final String text ) { hidePrepareFileToast ( prepareFileToast ) ; getActivity ( ) . runOnUiThread ( ( ) -> activity . replaceToast ( text ) ) ; }
public void onServiceConnected ( ComponentName componentName , IBinder iBinder ) { bulkReadCardsServiceBinder = ( BulkReadCardsService . ServiceBinder ) iBinder ; threadsView . getAdapter ( ) . notifyDataSetChanged ( ) ; }
public void afterTextChanged ( Editable editable ) { JobActivity . this . mUpdateCalendarEvent = true ; }
public boolean isTransactionFeasible ( users user , int amount ) { return amount > 0 && amount <= user . amount ; }
public float getDistance ( ) { return distance ; }
private void signIn ( ) { Intent signInIntent = mGoogleSignInClient . getSignInIntent ( ) ; startActivityForResult ( signInIntent , RC_SIGN_IN ) ; }
private void enqueueCurrentFolderAndSubFolders ( ) { try { ( ( GenericActivity ) getActivity ( ) ) . getPlaybackService ( ) . enqueueDirectoryAndSubDirectories ( mCurrentDirectory . getPath ( ) , mSearchString ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return initializeForView ( new Sit ( ) ) ; }
public ArrayList < ColorInfo > getMaterialList ( ) { return this . materialList ; }
public void setParentActivity ( SceneformActivity activity ) { this . parentActivity = activity ; }
public void pickFont ( String fontName ) { Bundle params = new Bundle ( ) ; params . putString ( FirebaseAnalytics . Param . ITEM_NAME , fontName ) ; appTracker . trackEvent ( EventExtendedParamValue . EVENT_FONT_SELECT . getName ( ) , params ) ; }
public static String toUpperFirstLetter ( String name ) { return name . substring ( 0 , 1 ) . toUpperCase ( ) + name . substring ( 1 ) ; }
public static String getTrashPath ( ) { return getString ( R . string . pref_key_temp_path , null ) ; }
private void switchFragment ( Fragment fragment ) { FragmentTransaction transaction = getSupportFragmentManager ( ) . beginTransaction ( ) ; transaction . replace ( R . id . main_layout , fragment ) ; transaction . commit ( ) ; }
private void cleanUpHalt ( ) { cleanUp ( ) ; editor . messageExt ( editor . getResources ( ) . getString ( R . string . build_halted ) ) ; }
public void onPause ( ) { super . onPause ( ) ; if ( mAutoDismiss ) { dismiss ( ) ; } }
public ContactFilterToolbar ( Context context , AttributeSet attrs ) { this ( context , attrs , R . attr . toolbarStyle ) ; }
public boolean isNeeded ( TagEntry model ) { return true ; }
public void setAvailableData ( String currentExchange , String [ ] exchangeAvailableName ) { this . currentExchange = currentExchange ; this . exchangeAvailableName = exchangeAvailableName ; notifyDataSetChanged ( ) ; }
private void selectSite ( int localId ) { setResult ( RESULT_OK , new Intent ( ) . putExtra ( SitePickerActivity . KEY_LOCAL_ID , localId ) ) ; finish ( ) ; }
public static Uri getContentUri ( @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( ContentResolver . SCHEME_CONTENT ) . path ( path ) . build ( ) ; }
public Call < NotesSettings > getServerSettings ( @ NonNull SingleSignOnAccount ssoAccount , @ Nullable ApiVersion preferredApiVersion ) { return ApiProvider . getNotesAPI ( context , ssoAccount , preferredApiVersion ) . getSettings ( ) ; }
public synchronized void goForward ( ) { if ( mWebView != null ) { mWebView . goForward ( ) ; } }
public void clearAnswer ( ) { triggerButton . setChecked ( false ) ; }
public void research ( ) { showGlobalSearchActivity ( ) ; }
public static AddToPlaylistDialog create ( Song song ) { ArrayList < Song > list = new ArrayList <> ( ) ; list . add ( song ) ; return create ( list ) ; }
public RotationVector ( Context context ) { super ( context , Sensor . TYPE_ROTATION_VECTOR , SensorType . Accelerometer ) ; }
public void setOnResultMode ( ) { currentStatus = StatusEnum . ADD_ON_RESULT ; }
public com . google . protobuf . Any . Builder addAccountsBuilder ( ) { return getAccountsFieldBuilder ( ) . addBuilder ( com . google . protobuf . Any . getDefaultInstance ( ) ) ; }
private static int [ ] zzUnpackAttribute ( ) { int [ ] result = new int [ 2940 ] ; int offset = 0 ; offset = zzUnpackAttribute ( ZZ_ATTRIBUTE_PACKED_0 , offset , result ) ; return result ; }
public static void removeCustomNotification ( String key ) { sendRequestDeleteNotification ( key ) ; customNotifications . remove ( key ) ; keyMap . remove ( ( key ) ) ; }
public int getCount ( ) { return stickers . size ( ) ; }
public static boolean isContentUri ( Uri uri ) { return uri != null && uri . getScheme ( ) != null && uri . getScheme ( ) . equals ( "content" ) ; }
private void calculateUnitToLocal ( ) { double currentNumber = getParseResultFromUser ( ) ; double conversion = unitValue * currentNumber ; String format = "$# , ### . 00" + "MXN" ; mResultView . setText ( createFormatToShow ( format , conversion ) ) ; }
public AboutBuilder addLink ( @ NonNull BitmapDrawable icon , int label , Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public int getSelectedIconColor ( ) { return selectedIconColor ; }
public static File createImageFile ( ) throws IOException { String timeStamp = new SimpleDateFormat ( "yyyyMMdd_HHmmss" ) . format ( new Date ( ) ) ; String imageFileName = "JPEG_" + timeStamp + "_" ; File storageDir = Environment . getExternalStoragePublicDirectory ( Environment . DIRECTORY_PICTURES ) ; ) ; }
public boolean waitToFinishConcrete ( Integer timeoutSeconds ) { return true ; }
public String getSubjectAN ( ) { if ( subjectAN == null ) subjectAN = GGApp . deleteNonAlphanumeric ( subject ) ; return subjectAN ; }
public void putString ( String key , String value ) { mPreferences . edit ( ) . putString ( key , value ) . commit ( ) ; }
public void onCreate ( ) { LogUtil . i ( TAG , "Service created . " ) ; AsrApplication . Companion . getApplicationComponent ( this ) . inject ( this ) ; }
public void cancel ( ) { LogUtil . v ( "cancelling" ) ; video . suspend ( ) ; }
public IPresenterFactory < CommunitiesPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new CommunitiesPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , getArguments ( ) . getInt ( Extra . USER_ID ) , saveInstanceState ) ; }
public PathHorizontalScrollView ( Context context ) { super ( context ) ; init ( ) ; }
public void setMainView ( IMainView main ) { this . mainView = main ; }
public void run ( ) { if ( substAdapter != null ) { substAdapter . update ( ( GGPlan . GGPlans ) getFragment ( ) . getData ( ) ) ; mTabLayout . setupWithViewPager ( mViewPager ) ; } }
public static final GpsDetailedViewFragment newInstance ( ) { GpsDetailedViewFragment fragment = new GpsDetailedViewFragment ( ) ; Bundle bundle = new Bundle ( 1 ) ; bundle . putInt ( "a_number" , 1 ) ; fragment . setArguments ( bundle ) ; return fragment ; }
public String getPrimaryText ( ) { return mPrimaryText ; }
public CanvasView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . setup ( context ) ; }
public void onClick ( View v ) { calculateAge ( ) ; }
public String toString ( ) { return "BLEDiscoveryEvent" ; }
public Preferences ( Context context ) { sp = PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public void tearDown ( ) throws Exception { businessService . destroy ( ) ; }
public List < String > getLastSuggestions ( ) { return adapter . getSuggestions ( ) ; }
public void setQualPoints ( int qualPoints ) { this . qualPoints = qualPoints ; }
public void error ( String error ) { }
public void onDateSet ( DatePicker view , int year , int month , int dayOfMonth ) { mYear = year ; mMonth = month ; mDay = dayOfMonth ; updateDisplay ( ) ; }
public boolean onEditorAction ( TextView textView , int i , KeyEvent keyEvent ) { if ( i == EditorInfo . IME_ACTION_DONE ) { processDone ( ) ; return true ; } return false ; }
public ImportAdd ( String path ) { this . path = path ; }
static public int getDecoTileForTerrain ( Level level , int cell , int terrain ) { return xTilemapConfigurationCache . get ( TILES_X_DEFAULT_JSON ) . getDecoTileForTerrain ( cell , terrain ) ; }
public void run ( ) { if ( ! keyboardVisible ( ) && ( scrollTop <= 0 ) && ! editActive ) { swipeRefresher . setEnabled ( true ) ; } else { swipeRefresher . setEnabled ( false ) ; swipeRefresher . setRefreshing ( false ) ; } }
public boolean hasBlogName ( ) { return ! TextUtils . isEmpty ( blogName ) ; }
public void setAlti ( MyAltimeter alti ) { this . alti = alti ; }
private void startVpn ( ) { try { OpenVpnConnector . startVpnInternal ( this , mConfig , mUsername , mPw ) ; } catch ( RuntimeException e ) { } }
public void onError ( ) { endProgress ( ) ; showErrorDialogAvatar ( getString ( R . string . signup_epilogue_error_avatar ) ) ; AppLog . e ( T . NUX , "Uploading image to Gravatar failed" ) ; }
public String getCpu ( ) { return cpu ; }
public Date getLastUpdate ( ) { return lastUpdate ; }
public void onClick ( DialogInterface dialogInterface , int i ) { if ( pos [ 0 ] != null ) editor . gotoLine ( Integer . parseInt ( pos [ 0 ] ) ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; adapter = new CurrencyAdapter ( presenter , this ) ; adapter . setNumCode ( getArguments ( ) . getInt ( NUM_CODE ) ) ; }
public void onCancel ( DialogInterface dialog ) { lockListener . onUnlock ( ) ; }
public void onRefresh ( ) { initArticles ( ) ; }
public void onResume ( ) { super . onResume ( ) ; SettingsManager . getSettings ( ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public static Integer getVersionCodeForPackage ( @ Nullable final PackageInfo packageInfo ) { return packageInfo != null? packageInfo . versionCode : null ; }
public void updateVisibleItems ( ) { if ( ! ContextHelper . isNetworkAvailable ( activity ) ) { setProgressIndeterminateVisibility ( false ) ; } else { doUpdateVisibleItems ( ) ; } }
public void onClick ( View v ) { songsManager . addToPlaylist ( songsManager . queue ( ) . get ( sharedPrefsUtils . readSharedPrefsInt ( "musicID" , 0 ) ) ) ; }
public void onFailure ( Call < ClubEventItem . ClubEventSuper > call , Throwable t ) { Log . e ( "failure" , t . getMessage ( ) ) ; }
public void onCreateFailure ( String s ) { super . onCreateFailure ( s ) ; log ( "failure : " + s ) ; }
public final String toString ( ) { if ( mFriend == null || mFriend . getAddress ( ) == null ) { return "" ; } return mFriend . getAddress ( ) . getUsername ( ) ; }
public void waitToFinish ( ) { }
public Attr setDownDuration ( int downDuration ) { this . downDuration = downDuration ; return this ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mContestAdapter . swapCursor ( null ) ; }
public Unit ( @ NonNull String name , double value , boolean isEnabled ) throws IllegalArgumentException { this . name = checkNotNull ( name ) ; this . value = value ; this . isEnabled = isEnabled ; }
public boolean onPinch ( int i , long l , double v ) { return callback . onDrawerGesture ( desktop , Type . Pinch ) ; }
public String getAndroidVersion ( ) { return Build . VERSION . RELEASE + " ( " + Build . VERSION . SDK_INT + " ) " ; }
public void setItems ( ArrayList < Comment > items ) { partManager . setItemsForBinding ( items ) ; notifyDataSetChanged ( ) ; }
public Settings getSettings ( ) { return mSettings ; }
public String getSuggestion ( int position ) { Cursor cursor = ( Cursor ) getItem ( position ) ; if ( cursor != null ) { return cursor . getString ( cursor . getColumnIndex ( ReaderSearchTable . COL_QUERY ) ) ; } else { return null ; } }
public static void applyColor ( Drawable d , @ ColorInt int color ) { if ( d instanceof RippleDrawable ) ( ( RippleDrawable ) d ) . setColor ( ColorStateList . valueOf ( color ) ) ; }
public void destroyItem ( ViewGroup container , int position , Object object ) { registeredFragments . remove ( position ) ; super . destroyItem ( container , position , object ) ; }
private void updateContainerDate ( ) { DateFormat df = new DateFormat ( ) ; this . containerDateInUse . setText ( df . format ( myCalendar . getTime ( ) ) ) ; }
public void switchToMatch ( @ SuppressWarnings ( "UnusedParameters" ) View view ) { Intent intent = new Intent ( Launcher . this , Match . class ) ; startActivity ( intent ) ; }
public int compareTo ( @ NonNull Route o ) { return o . getRouteId ( ) . compareTo ( routeId ) ; }
public CustomMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; mTextView = ( TextView ) findViewById ( R . id . marker_tv ) ; }
public int getVersion ( ) throws RecordStoreNotOpenException { if ( ! open ) { throw new RecordStoreNotOpenException ( ) ; } synchronized ( this ) { return version ; } }
public static boolean isExternalStorageDocument ( Uri uri ) { return "com . android . externalstorage . documents" . equals ( uri . getAuthority ( ) ) ; }
public void onTransactionBroadcast ( Transaction tx ) { lock . lock ( ) ; try { log . info ( "Transaction sent { } " , tx ) ; addNewTransactionIfNeeded ( tx ) ; } finally { lock . unlock ( ) ; } }
public void onDestroy ( ) { AppLog . i ( AppLog . T . NOTIFS , "notifications service > destroyed" ) ; super . onDestroy ( ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "all_images" , checked ) . apply ( ) ; }
public void setDuration ( int duration ) { changed = true ; mDuration = duration ; }
public DefaultExtractorInput ( DataSource dataSource , long position , long length ) { this . dataSource = dataSource ; this . position = position ; this . streamLength = length ; peekBuffer = new byte [ 8 * 1024 ] ; }
public void scrollToCalendar ( int year , int month , int day ) { scrollToCalendar ( year , month , day , false ) ; }
public void onOffsetChanged ( AppBarLayout appBarLayout , int verticalOffset ) { if ( - verticalOffset > appBarLayout . getHeight ( ) /3 ) { fab . hide ( ) ; } else { fab . show ( ) ; } }
private void rollback ( ) { appMenu . icons . clear ( ) ; appMenu . icons . addAll ( backup ) ; }
public ActionBar getSupportActionBar ( ) { ActionBar actionBar = super . getSupportActionBar ( ) ; if ( actionBar == null ) throw new NullPointerException ( "Action bar was not initialized" ) ; return actionBar ; }
public T withIconColorRes ( int iconColorRes ) { this . iconColor = ColorHolder . fromColorRes ( iconColorRes ) ; return ( T ) this ; }
public boolean onQueryTextChange ( String query ) { mPresenter . updateLastViewedList ( query ) ; return true ; }
private void generateTargetBurger ( ) { int count = mCustomers . get ( mActiveCustomerIndex ) . getBurgerSize ( ) ; LinkedList < BurgerItem > items = mBurgerGenerator . run ( count ) ; mTargetBurger . setItems ( items ) ; mTargetBurger . resetArrow ( ) ; }
public Builder setTextColor ( @ ColorInt int color ) { _view . _textPaint . setColor ( color ) ; return this ; }
public TimeTable ( ) { className = "5a" ; }
private void clear ( ) { recyclerViewIndicator . setAdapter ( getDotsGreyAdapter ( ) ) ; step = STEP_ENTER ; pin = "" ; textViewTitle . setText ( R . string . enter_new_pin ) ; inputPin . setText ( "" ) ; }
public void onClick ( View v ) { if ( RadioApplication . sPlaybackState == PlaybackEvent . PLAY ) { RadioApplication . sBus . post ( PlaybackEvent . PAUSE ) ; } else { RadioApplication . sBus . post ( PlaybackEvent . PLAY ) ; } }
public long getItemId ( int position ) { return dataSet . get ( position ) . id ; }
private boolean minimalinTimesConflicting ( int hour , int minute ) { return hour % 12 == ( minute + 2 ) / 5 ; }
public com . coinomi . core . protos . Protos . DeterministicKey getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . DeterministicKey . getDefaultInstance ( ) ; }
public int getContactId ( ) { return contactId ; }
public RestResponseHandlerJoiner ( RestResponseHandler handler ) { this . handler = handler ; }
private void saveTests ( TestList tests ) { save ( new Wrapper ( tests ) , TestKey ) ; }
public void onError ( Throwable e ) { Timber . e ( e ) ; }
public void handleLongPress ( SuraAyah suraAyah ) { if ( isVisible ( ) ) { readingEventPresenter . onAyahSelection ( new AyahSelection . Ayah ( suraAyah , translationView . getToolbarPosition ( suraAyah . sura , suraAyah . ayah ) ) ) ; } }
public void addListener ( ValueAnimator . AnimatorListener listener ) { listeners . add ( listener ) ; }
public boolean hasFeaturedVideo ( ) { return ! TextUtils . isEmpty ( featuredVideo ) ; }
public long scanProgress ( long numFolders , long numFiles , String path ) { totalFiles = numFiles ; return 0 ; }
public void deleteDatabase ( ) { mContext . deleteDatabase ( String . format ( "%s/%s" , mContext . getExternalFilesDir ( null ) . getAbsolutePath ( ) , DATABASE_NAME ) ) ; }
public static String getLastNodeId ( ) { return getString ( R . string . pref_key_selected_node_id , null ) ; }
public void init ( ExtractorOutput output ) { extractorOutput = output ; trackOutput = output . track ( 0 ) ; wavHeader = null ; output . endTracks ( ) ; }
public void setIndent ( int indent ) { this . indent = indent ; }
public void uncaughtException ( Thread thread , Throwable throwable ) { FirebaseCrash . report ( throwable ) ; defaultHandler . uncaughtException ( thread , throwable ) ; }
public AxolotlService makeNew ( ) { Log . d ( Config . LOGTAG , account . getJid ( ) . toBareJid ( ) + " : make new axolotl service" ) ; return new AxolotlService ( this . account , this . mXmppConnectionService ) ; }
public void setEditText ( FormattableEditText editText ) { mEditText = editText ; updateFormattingAtCursor ( ) ; }
public void onActivityResultFragment ( int requestCode , int resultCode , Intent data ) { avatarUpdater . onActivityResult ( requestCode , resultCode , data ) ; }
public void testParseMultiTeamWinner ( ) { assertItemsEqual ( 0 ) ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( NumberOrderActivity . this ) ; Intent intent = new Intent ( NumberOrderActivity . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
public void release ( ) { con . clear ( ) ; leadAddr = "" ; trailAddr = "" ; }
public BaseResponse ( ) { super ( ) ; }
public CategoryVH onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . row_category , parent , false ) ; return ( new CategoryVH ( view ) ) ; }
public void performFileSearch ( ) { Intent intent = new Intent ( Intent . ACTION_OPEN_DOCUMENT ) ; intent . addCategory ( Intent . CATEGORY_OPENABLE ) ; startActivityForResult ( intent , READ_REQUEST_CODE ) ; }
public ProgramAdapter . ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int viewType ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . programs_list , viewGroup , false ) ; return new ViewHolder ( view ) ; }
public void onBindViewHolder ( MyViewHolder holder , int position ) { holder . textView . setText ( "Item " + position ) ; }
public void onTouchEvent ( RecyclerView view , MotionEvent motionEvent ) { }
public void setOrigin ( float x , float y ) { this . origin . set ( x , y ) ; dirtyMatrix = true ; } }
public FingerprintException ( Exception e ) { super ( e ) ; }
public void onFailure ( Call < JsonObject > call , Throwable t ) { KLog . e ( t ) ; }
public FileDataSource getItem ( int position ) { return mData . get ( position ) ; }
public static void add ( int featureResourceId ) { add ( Game . getVar ( featureResourceId ) ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_config . TLdeserialize ( stream , constructor , exception ) ; }
public void run ( ) { if ( waitingForKeyboardCloseRunnable != this ) { return ; } startLayoutAnimation ( true , true ) ; }
public LiveData < Integer > getPingValue ( @ NonNull String host ) { synchronized ( mPingValue ) { return mPingValue . get ( host ) ; } }
public Fragment getItem ( int position ) { Fragment fragment = null ; switch ( position ) { case 0 : fragment = MedicalAttentionListFragment . newInstance ( ) ; break ; case 1 : fragment = MedicalAttentionListFragment . newInstance ( ) ; break ; } return fragment ; }
public void setup ( WelcomeConfiguration config ) { super . setup ( config ) ; if ( this . titleTypefacePath == null ) { titleTypeface ( config . getDefaultHeaderTypefacePath ( ) ) ; } }
public boolean supportsLayer ( File file ) { return MbtilesFile . getLayerType ( file ) != null ; }
public static void dropAllTables ( Database db , boolean ifExists ) { LancherInfoDao . dropTable ( db , ifExists ) ; AppInfoDao . dropTable ( db , ifExists ) ; }
public void UpdateDatasetIMKO ( ArrayList < IMKOLesson > listItems ) { IMKOGradesListAdapter adapter = new IMKOGradesListAdapter ( getContext ( ) , listItems ) ; list . setAdapter ( adapter ) ; }
public void setTintColor ( int color ) { mTintView . setBackgroundColor ( color ) ; }
private TorrentDecodeTask ( AddTorrentViewModel viewModel ) { this . viewModel = new WeakReference <> ( viewModel ) ; }
public DataAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card_entries , parent , false ) ; return new ViewHolder ( view ) ; }
public void updateStages ( List < Integer > totalPage ) { this . totalPage = totalPage ; notifyDataSetChanged ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return PeerNotifySettings . TLdeserialize ( stream , constructor , exception ) ; }
private void onLoginFailed ( ) { Toast . makeText ( mActivity , R . string . login_failed , Toast . LENGTH_SHORT ) . show ( ) ; }
public void setWallets ( List < WalletRealmObject > wallets ) { this . wallets = wallets ; }
public String info ( ) { return super . info ( ) + "\n\n" + Game . getVar ( R . string . DriedRose_Info2 ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mIsPaused = false ; mTimeHandler . removeMessages ( REFRESH_TIME ) ; mBroadcastDisposable . dispose ( ) ; try { getActivity ( ) . unregisterReceiver ( mPlaybackStatus ) ; } catch ( final Throwable ignored ) { } }
public IntentUtil ( Context context ) { this . context = context ; }
public String [ ] getSuggestedApps ( ) { if ( appsHolder == null ) return new String [ 0 ] ; return appsHolder . getSuggestedApps ( ) ; }
private static void drawPinItem ( Canvas canvas ) { HabiticaIcons . drawPinItem ( canvas , new RectF ( 0f , 0f , 40f , 40f ) , ResizingBehavior . AspectFit ) ; }
public void onClick ( View v ) { if ( mButtonState == ButtonState . PLAY ) { startQRCodeGeneration ( ) ; } else { stopQRCodeGeneration ( ) ; } }
public void render ( float dt ) { super . render ( dt , currentWorldIndex ) ; }
public Maybe < Tag > create ( Tag entity ) { return cacheManager . create ( entity ) ; }
public static LatestRunsState displayLoading ( ) { return new LatestRunsState ( true , false , new ArrayList < Run > ( ) ) ; }
public void start ( ) { mRefreshing = true ; updateRefreshSpinner ( ) ; }
public static boolean isImage ( final String mimetype ) { return General . asciiLowercase ( mimetype ) . startsWith ( "image/" ) ; }
public void setState ( String state ) { mState = state ; refreshDrawableState ( ) ; }
public String getTheme ( ) { return getString ( R . string . pref_key__theme , "0" ) ; }
public SummitAttendee getOwner ( ) { return owner ; }
public boolean hasModifier ( int modifiers ) { return ( mMetaState & modifiers ) != 0 ; }
public TreasureListLiveData ( DatabaseReference ref ) { this . query = ref ; }
public void onClick ( View v ) { if ( v . getId ( ) == R . id . sqlite_manager_add_fab ) { mSharedPrefManagerPresenter . onAddPrefItemClicked ( ) ; } }
public void setSourceBlogId ( long blogId ) { this . sourceBlogId = blogId ; }
public String getIdentity ( ) { return identity ; }
public int getItemCount ( ) { return mWpOrgPlugins . size ( ) ; }
public FacebookAdapter ( ArrayList < Facebook . FacebookPost > posts ) { this . posts = posts ; }
public void onClick ( View v ) { Intent intent = new Intent ( Intent . ACTION_PICK , ContactsContract . Contacts . CONTENT_URI ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET ) ; startActivityForResult ( intent , PICK_CONTACT ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getFoodMeasureDbDao ( ) : null ; }
public int proxyType ( ) { return pref . getInt ( appContext . getString ( R . string . pref_key_max_active_torrents ) , Default . proxyType ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . alex . interactiveresume" , appContext . getPackageName ( ) ) ; }
public void run ( ) { Log . i ( "IntentHelper" , "intent" ) ; Intent animActivity = new Intent ( activity , classToLoad ) ; animActivity . putExtra ( extra_name , extra ) ; activity . startActivity ( animActivity ) ; }
public void onBookCollectionRemoved ( BooksCollection booksCollection ) { homeScreenRecyclerViewAdapter . notifyBookCollectionRemoved ( booksCollection ) ; }
public Dialog showDialog ( Dialog dialog ) { return showDialog ( dialog , false ) ; }
private void init ( ) { setLayoutManager ( new GridLayoutManager ( getContext ( ) , SPANS_COUNT ) ) ; setHasFixedSize ( true ) ; setCalendar ( CalendarDate . today ( ) ) ; }
public void highlightValue ( float x , int dataSetIndex , boolean callListener ) { highlightValue ( x , Float . NaN , dataSetIndex , callListener ) ; }
public void onViewStop ( ) { getView ( ) . hideSoftKeyboardAndClearEditFocus ( ) ; TimeManager . INSTANCE . removeListener ( timeManagerListener ) ; }
public AccountSwitcherAdapter ( @ NonNull Consumer < LocalAccount > onAccountClick ) { this . onAccountClick = onAccountClick ; setHasStableIds ( true ) ; }
public void addMode ( String todoListUuid ) { DisplayHeadersInteractor interactor = new DisplayHeadersInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , todoListUuid ) ; interactor . execute ( ) ; }
public synchronized void closeConnection ( ) { mContext . unbindService ( this ) ; mPlaybackService = null ; if ( mNotifier != null ) { mNotifier . onDisconnect ( ) ; } }
private void animateColorChange ( final int newColor ) { impl . animateColorChange ( this , newColor ) ; lastColor = newColor ; }
public Waveform ( @ NotNull Context context , @ NotNull AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context ) ; }
public int colorAccent ( ) { return colorAccent ( Prefs . getInstance ( mContext ) . getAppThemeColor ( ) ) ; }
public double getFat ( ) { return this . fat ; }
public static void setSpeed ( int value , Context context ) { run ( Control . write ( String . valueOf ( value ) , LED_RED_SPEED ) , LED_RED_SPEED , context ) ; }
public void run ( ) { loadMessages ( dialog_id , count , load_type == 2 && queryFromServer ? first_unread : max_id , offset_date , false , 0 , classGuid , load_type , last_message_id , isChannel , loadIndex , first_unread , unread_count , last_date , queryFromServer ) ; }
public Bundle getAuthToken ( AccountAuthenticatorResponse response , Account account , String authTokenType , Bundle options ) throws NetworkErrorException { throw new UnsupportedOperationException ( ) ; }
public void onPropertiesClicked ( ClientItem clientItem ) { if ( listener != null ) listener . onPropertiesClicked ( this , clientItem ) ; }
public Attr setMaxPosition ( boolean m ) { mM = m ; return this ; }
public void setMinZoom ( int minZoom ) { this . minZoom = minZoom ; hasChanged ( ) ; notifyObservers ( MIN_ZOOM_PROP ) ; }
public void onDestroy ( ) { rewardedVideoAd . destroy ( this ) ; super . onDestroy ( ) ; } */
public void attachVisual ( ) { target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaBleeding ) ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_7 . getText ( ) . toString ( ) ) ; }
public void unlockLevel ( int levelId ) { if ( levelId <= getLevelCount ( ) ) { Level levelById = getLevelById ( levelId ) ; levelById . getLevelInfo ( ) . setLocked ( false ) ; updateLevelInfo ( levelById . getLevelInfo ( ) ) ; } }
public List < MyFilter > getFilters ( ) { return mList ; }
public void notifyBookCollectionRenamed ( BooksCollection booksCollection , String newName ) { notifyItemChanged ( booksCollection . getOrder ( ) , new UpdatePayload ( NAME_CHANGE_UPDATE , newName ) ) ; collectionController . renameCollection ( booksCollection , newName ) ; }
public void setCustomFont ( String fontFamily ) { decorator . setCustomFont ( this , fontFamily ) ; }
private boolean observing ( String path ) { for ( SingleFileObserver observer : mObservers ) { if ( path . equals ( observer . path ) ) { return true ; } } return false ; }
public void reloadInfoFromFile ( ) { try { readMetainfo ( ) ; } catch ( BookReadingException e ) { } }
private void setBookHoldersToView ( Book book ) { getView ( ) . setBookHolders ( book . getAddedByLogin ( ) , book . getOwnedByLogin ( ) ) ; }
public void onClick ( View view ) { alertDialog ( ) ; }
public void onListFragmentInteraction ( TestInfo testInfo ) { this . testInfo = testInfo ; navigateToTestDetails ( false ) ; }
public int getValidMap ( ) { return ValidMap ; }
private File getDir ( ) { return new File ( Config . getProfilesDir ( ) , name ) ; }
public int getSiteId ( ) { return JSONUtil . queryJSON ( mNoteJSON , "meta . ids . site" , 0 ) ; }
public void unbind ( boolean unbindViews ) { super . unbind ( unbindViews ) ; if ( unbindViews && unbinder != null ) { unbinder . unbind ( ) ; } }
public PermissionsProvider providesPermissionsProvider ( PermissionsChecker permissionsChecker , StorageStateProvider storageStateProvider ) { return fakePermissionsProvider ; }
public void onSwipeLeft ( ) { playLeft ( ) ; setPadColorToDefault ( ) ; }
public void setHash2 ( Integer hash2 ) { this . hash2 = hash2 ; }
public void menuActiviated ( ) { startAction ( 2 ) ; }
public GenreDigest create ( Cursor source ) { return new GenreDigest ( source . getString ( source . getColumnIndex ( Views . GenresReadable . NAME . getName ( ) ) ) ) ; }
public int answerButtons ( @ NonNull Card card ) { DeckConfig conf = _cardConf ( card ) ; if ( card . getODid ( ) != 0 && ! conf . getBoolean ( "resched" ) ) { return 2 ; } return 4 ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitNumericEquality ( this ) ; else return visitor . visitChildren ( this ) ; }
private void setRepeatModeInternal ( @ Player . RepeatMode int repeatMode ) throws ExoPlaybackException { this . repeatMode = repeatMode ; if ( ! queue . updateRepeatMode ( repeatMode ) ) { } updateLoadingMediaPeriodId ( ) ; }
public void clearDumpCache ( String key ) { memoryCache . remove ( key ) ; }
public void setModifier ( ModifiedLesson modifier ) { this . modifier = modifier ; }
public void setLayoutVisibleBounds ( Rect visibleBounds ) { mTopPart . setVisibleBounds ( visibleBounds ) ; mBottomPart . setVisibleBounds ( visibleBounds ) ; }
public int update ( SQLiteDatabase db , ContentValues values ) { assertTable ( ) ; LogUtil . d ( TAG , "update ( ) " + this ) ; return db . update ( mTable , values , getSelection ( ) , getSelectionArgs ( ) ) ; }
public List < Result > Results ( ) { return results ; }
public void play ( Clip clip ) { getViewModel ( ) . play ( clip ) ; }
public SignalServiceUrl [ ] getConfiguration ( Context context ) { String localNumber = TextSecurePreferences . getLocalNumber ( context ) ; return getConfiguration ( localNumber ) ; }
public void clearVideoSurface ( Surface surface ) { if ( surface != null && surface == this . surface ) { setVideoSurface ( null ) ; } }
public boolean delete ( ) { for ( Jump jump : this . getJumps ( ) ) { jump . setGear_id ( null ) ; jump . save ( ) ; } return super . delete ( ) ; }
public int compareTo ( SideActionsInfo another ) { return AndroidUtils . integerCompare ( menuItem . getItemId ( ) , another . menuItem . getItemId ( ) ) ; }
public float getDistanceInMeters ( Location loc ) { return loc . distanceTo ( getFinalLocation ( ) ) ; }
public List < Avaliacao > getAvaliacoes ( ) { return avaliacoes ; }
private static Intent getBatteryStatusIntent ( Context context ) { HyperLog . i ( TAG , "Retrieving battery value" ) ; IntentFilter filter = new IntentFilter ( Intent . ACTION_BATTERY_CHANGED ) ; return context . registerReceiver ( null , filter ) ; }
private static Tag getTagFromCursor ( Cursor c ) { final String tag = c . getString ( c . getColumnIndex ( "tag" ) ) ; long siteId = c . getLong ( c . getColumnIndex ( "site_id" ) ) ; return new Tag ( siteId , tag ) ; }
public int getItemCount ( ) { return 14 ; }
public void sortTest ( ) throws Exception { checkOrder ( EXPECTED_ORDER_DEFAULT ) ; checkOrder ( EXPECTED_ORDER_HEPBURN ) ; checkOrder ( EXPECTED_ORDER_NIHON ) ; checkOrder ( EXPECTED_ORDER_KUNREI ) ; checkOrder ( EXPECTED_ORDER_NIHON_CAPITAL ) ; checkOrder ( EXPECTED_ORDER_MULTICHAR ) ; }
private Tls12SocketFactory ( SSLSocketFactory base ) { this . delegate = base ; }
public void onClick ( DialogInterface dialog , int which ) { startDialog ( activity ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnSignInInteractionListener ) { callback = ( OnSignInInteractionListener ) context ; } }
public SongAdapter ( ArrayList < SongModel > list , Context context , SongClickListener mListener ) { this . list = list ; this . context = context ; this . mListener = mListener ; }
public void setCouId ( int couId ) { this . couId = couId ; }
public void executeFileAudioModel ( final FileAudioModel fileAudioModel , final View view ) { mFileAudioOverflowActions . show ( fileAudioModel , view , mApplicationCallback . isLogged ( ) ) ; }
public ArbitraryFileWidget createWidget ( ) { return new ArbitraryFileWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , mediaUtils , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) ) ; }
public static Position descend ( Position current ) { return descendOrAscend ( current , true ) ; }
public void run ( ) { MessagesController . getInstance ( ) . processLoadedUserPhotos ( res , uid , offset , count , max_id , true , classGuid ) ; }
public void setRoundedCorner ( int corner ) { roundedCorner = Math . max ( 0 , corner ) ; setup ( ) ; }
public int getItemCount ( ) { return gameList . size ( ) ; }
public void start ( ) { loadEvents ( ) ; }
public float getGrip ( ) { if ( this == ICE ) { return 0 . 3f ; } return 1 ; }
public static SupportSQLiteQuery createQueryFor ( Bounds bounds , boolean isCountry ) { String query = createQueryHeader ( isCountry ) + " AND " + createBoundQueryPart ( bounds ) ; return new SimpleSQLiteQuery ( query ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new RecyclerListView . Holder ( new TextSettingsCell ( mContext ) ) ; }
public void onScrollStateChanged ( RecyclerView view , int scrollState ) { }
public static void i ( final String msg ) { Log . i ( mTAG , getMessage ( msg ) ) ; saveToFile ( ) ; }
public static Texture create ( Bitmap bmp ) { Texture tex = new Texture ( ) ; tex . bitmap ( bmp ) ; return tex ; }
public ListAdapterExpertises ( Context context , List < ExpertisesUsers > expertisesUsersList ) { this . expertisesUsersList = expertisesUsersList ; this . context = context ; }
public void showBriefMessage ( @ NonNull String message ) { BriefMessage . showLong ( rootLayout , message ) ; }
public void handleTagEdit ( QuranActivity activity , List < QuranRow > selected ) { if ( selected . size ( ) == 1 ) { QuranRow row = selected . get ( 0 ) ; activity . editTag ( row . tagId , row . text ) ; } }
public void setPreference ( String key , boolean newValue ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit ( ) . putBoolean ( key , newValue ) . apply ( ) ; }
public static void setCurrentJobName ( String name ) { App . setCurrentJobName ( name ) ; }
public Integer getFeeChargesPaid ( ) { return feeChargesPaid ; }
public void setFoldShading ( FoldShading shading ) { mFoldShading = shading ; }
public void onServiceConnected ( ComponentName name , IBinder binder ) { Log . v ( TAG , "ServiceConnection . onServiceConnected ( ) " ) ; mService = ( ISqueezeService ) binder ; NowPlayingFragment . this . onServiceConnected ( ) ; }
public static boolean isSupported ( String format ) { try { SupportedPointsFileTypes . valueOf ( format . toUpperCase ( App . locale ) ) ; } catch ( IllegalArgumentException e ) { return false ; } return true ; }
public void register ( ) { super . register ( ) ; int level = WifiManager . calculateSignalLevel ( wifiManager . getConnectionInfo ( ) . getRssi ( ) , 5 ) ; if ( level > 0 ) onDrawableUpdate ( level ) ; }
public void setProfile ( Profile profile ) { this . profile = profile ; }
public Single < List < Measurement >> getMeasurementsForCategory ( String c ) { return db . getJoinDAO ( ) . getMeasurementsforCategory ( c ) ; }
public boolean interact ( final Char hero ) { say ( Random . element ( Game . getVars ( R . array . WandOfFlock_SheepBaa ) ) ) ; return false ; }
public void getDataOnOtherThread ( ) throws IOException , RuntimeException { expertisesList = CacheExpertise . getAllowInternet ( app . cacheSQLiteHelper , app ) ; if ( expertisesList == null || expertisesList . size ( ) == 0 ) throw new RuntimeException ( ) ; }
public DeleteTask ( ContentResolver c , Context cd , CompressedExplorerFragment compressedExplorerFragment ) { this . cd = cd ; rootMode = PreferenceManager . getDefaultSharedPreferences ( cd ) . getBoolean ( PreferencesConstants . PREFERENCE_ROOTMODE , false ) ; this . compressedExplorerFragment = compressedExplorerFragment ; }
public void setServerType ( String serverType ) { this . serverType = serverType ; if ( serverType . equals ( "MRC" ) ) { web_server_port = 80 ; } else if ( serverType . equals ( "Digitrax" ) ) { } }
public int getItemCount ( ) { return filteredLists . size ( ) ; }
public ConversationUpdateItem ( Context context ) { super ( context ) ; }
public View getRootView ( ) { return binding . getRoot ( ) ; }
public void onRefresh ( ) { showDownloadDialog ( ) ; }
public DrawerBuilder withAccountHeader ( AccountHeader accountHeader ) { return withAccountHeader ( accountHeader , false ) ; }
public void onSkipPressed ( Fragment currentFragment ) { super . onSkipPressed ( currentFragment ) ; Configuration . setLastSeenIntroduction ( mLastSeenIntroduction ) ; finish ( ) ; }
public void shouldNotifyMultipleObservers ( ) { givenCleanObserver ( ) ; givenObserver ( ) ; givenSecondObserver ( ) ; whenNotifyOnScreen ( "test" ) ; thenOnScreenNotified ( ) ; thenScreenNotEmpty ( ) ; thenSecondObserverNotifiedScreen ( ) ; }
public void showMessage ( String message ) { View parentLayout = findViewById ( R . id . ServiceActivityContent ) ; Snackbar . make ( parentLayout , message , Snackbar . LENGTH_LONG ) . show ( ) ; }
public void refreshPreferences ( ) { mUseGoogle = mPreferenceManager . getGoogleSearchSuggestionsEnabled ( ) ; }
public SchemeData ( UUID uuid , String mimeType , byte [ ] data ) { this ( uuid , mimeType , data , false ) ; }
private void startBuildTask ( BuildTask task ) { runningTasks = getSynchronizedSet ( ) ; finishedTasks = buildContext . getCompletedTasks ( ) ; completionListeners = getSyncrhonizedMap ( ) ; successes = getSyncrhonizedMap ( ) ; executeWithDependencies ( task ) ; }
public void onCancel ( DialogInterface dialog ) { if ( showDonateDialogCheckBox . isChecked ( ) ) { sharedEditor . putBoolean ( "show_donate_dialog" , false ) ; sharedEditor . commit ( ) ; } mResume = true ; checkNfc ( ) ; }
public boolean hasFileOnRemoteHost ( ) { return isFileOrImage ( ) && getImageParams ( ) . url != null ; }
public void afterTextChanged ( Editable s ) { if ( s . length ( ) != 0 ) { setEnabledAddButton ( addCollectionButton , true ) ; } else { setEnabledAddButton ( addCollectionButton , false ) ; } }
public IngredientTemplate getExtraIngredient ( ) { return extraIngredient ; }
public boolean equals ( Object o ) { Track other = ( Track ) o ; return other . id == id ; }
public ActivityStageIdlingResource ( String targetActivityClassName , Set < Stage > stages ) { mMatchingStages = stages ; mTargetActivityClassName = targetActivityClassName ; }
public void addItem ( Account account , int position ) { if ( position < 0 || position > accountList . size ( ) ) { return ; } accountList . add ( position , account ) ; notifyItemInserted ( position ) ; }
public Phrase getPhrase ( ) { return this . phrase ; }
public int compareTo ( String another ) { return regionCode != null && another != null ? regionCode . compareTo ( another ) : 0 ; }
public JResult setDate ( String date ) { this . dateString = date ; return this ; }
public ServiceWatcherUtil ( ProgressHandler progressHandler ) { this . progressHandler = progressHandler ; POSITION = 0L ; HALT_COUNTER = - 1 ; handlerThread = new HandlerThread ( "service_progress_watcher" ) ; handlerThread . start ( ) ; handler = new Handler ( handlerThread . getLooper ( ) ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; photo . serializeToStream ( stream ) ; stream . writeString ( caption ) ; }
public void onDeleted ( Context context , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { NoteWidgetConfigureActivity . deleteTitlePref ( context , appWidgetId ) ; } }
public SwitchNationEntry ( View v ) { super ( v ) ; nationName = ( TextView ) v . findViewById ( R . id . basic_nation_name ) ; v . setOnClickListener ( this ) ; }
public void fabMenuClick ( ) { CloseFabMenu ( ) ; } ;
public void onDialogShow ( String url ) { dialog = new PhotoPreviewDialogFragment ( ) . newInstance ( 32 , 4 , false , false , url ) ; dialog . show ( getActivity ( ) . getFragmentManager ( ) , "" ) ; }
public Locale getLocale ( ) { return new Locale ( "jp" ) ; }
public static void clearAll ( ) { adapter . clear ( ) ; saveChanges ( adapter ) ; }
public void ready ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { mSpinner . setVisibility ( View . GONE ) ; } } ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_3 . getText ( ) . toString ( ) ) ; }
public static TypeAdapter < CurrentStatus > typeAdapter ( final Gson gson ) { return new AutoValue_CurrentStatus . GsonTypeAdapter ( gson ) ; }
public int getExpansionMode ( ) { return mExpansionMode ; }
public void onClick ( View view ) { view . getContext ( ) . startActivity ( new Intent ( Intent . ACTION_VIEW ) . setData ( AppUtils . createUserUri ( by ) ) ) ; }
public void testCorrectParsedType ( ) throws BasicModel . FieldNotDefinedException { List < ListItem > data = DatafeedTestDriver . getParsedData ( mSubscriber , mPoints ) ; assertTrue ( data instanceof DistrictPointsListSubscriber . Type ) ; }
public String toString ( ) { return WalletPocketHD . class . getSimpleName ( ) + " " + id . substring ( 0 , 4 ) + " " + coinType ; }
private void stopRefresherAfterSomeTime ( ) { final Handler handler = new Handler ( ) ; handler . postDelayed ( ( ) -> homeTripEntrySwipe . setRefreshing ( false ) , 5000 ) ; }
public void onSaveInstanceState ( Bundle outState ) { if ( mHighlightedAyah > 0 ) { outState . putInt ( SI_HIGHLIGHTED_AYAH , mHighlightedAyah ) ; } super . onSaveInstanceState ( outState ) ; }
public void setLastCalmingPromptSetId ( int lastCalmingPromptSetId ) { this . lastCalmingPromptSetId = lastCalmingPromptSetId ; }
public CoordinatorLayout getCoordinatorLayout ( ) { return mCoordinatorLayout ; }
public MyListAdapter ( Context context , List < String > expandableListTitle , HashMap < String , List < String >> expandableListDetail ) { this . context = context ; this . expandableListTitle = expandableListTitle ; this . expandableListDetail = expandableListDetail ; }
private void setIncidentType ( String incidentType ) { this . incidentType = incidentType ; }
private void stop ( ) { stopwatchHelper . stop ( prefsSmartStopwatch ) ; setStopwatchLastTime ( ) ; manageStopwatchState ( AppConstants . PREFS . DEFAULTS . STOPWATCH_MILLI ) ; }
public final void onRenderedFirstFrame ( Surface surface ) { EventTime eventTime = generateReadingMediaPeriodEventTime ( ) ; for ( AnalyticsListener listener : listeners ) { listener . onRenderedFirstFrame ( eventTime , surface ) ; } }
public static void log ( Context context , String s , Types type ) { log ( context , s , type , isWriteToFile , DURATION_NONE ) ; }
public void reloadAdapter ( ) { mAdapter . notifyForReload ( ) ; }
public static boolean isReportingEnabled ( Context context ) { return getBoolean ( context , "pref_reporting" , context . getResources ( ) . getBoolean ( R . bool . pref_default_reporting ) ) ; }
private synchronized void setFailed ( final Throwable t ) { status = Status . FAILED ; failReason = t ; notifyAll ( ) ; }
public AnyExpectorView ( ) { super ( "cells/expector/fg . png" ) ; }
public static double getPreviousLatitude ( ) { Location loc = getPreviousLocationInfo ( ) ; return loc != null ? loc . getLatitude ( ) : 0 ; }
public void onQrcodeFound ( final Core core , final String s ) { Lg . w ( "onQrcodeFound : " , s ) ; }
public com . coinomi . core . protos . Protos . UnspentOutput . Builder addUnspentOutputBuilder ( ) { return getUnspentOutputFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . UnspentOutput . getDefaultInstance ( ) ) ; }
private static void saveStringPreference ( Context context , String key , String value ) { SharedPreferences . Editor appPreferences = getDefaultSharedPreferences ( context . getApplicationContext ( ) ) . edit ( ) ; appPreferences . putString ( key , value ) ; appPreferences . apply ( ) ; }
public static String getAbsoluteURL ( String url ) { return null ; }
public void setViewport ( int width , int height ) { GLES20 . glViewport ( 0 , 0 , width , height ) ; }
public void swipeRight ( ) { realObject . setCurrentItem ( realObject . getCurrentItem ( ) - 1 ) ; notifyListener ( ) ; }
private RelativeLayout getSuggestionSignIn ( ) { return createSuggestionLayout ( getString ( R . string . recommendation_sign_in ) , new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { signIn ( ) ; } } ) ; }
public void setFeedUrl ( String feedUrl ) { this . feedUrl = StringUtils . notNullStr ( feedUrl ) ; }
public int compareTo ( SubtitleInputBuffer other ) { long delta = timeUs - other . timeUs ; if ( delta == 0 ) { return 0 ; } return delta > 0 ? 1 : - 1 ; }
public CustomMontserratSemiBoldEditText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; applyFont ( context ) ; }
public long getLastRun ( ) { return mLastRun ; }
public QuoteAdapter ( Context c , QuoteList q ) { mContext = c ; quotes = q ; }
public List < Priority > getPriorities ( ) { return mPriorities ; }
public void save ( double width , double length , double height ) { this . width = width ; this . length = length ; this . height = height ; }
public void onAttach ( Activity activity ) { Log . i ( TAG , "onAttach ( Activity ) " ) ; super . onAttach ( activity ) ; }
public void onClick ( View view ) { Intent in = new Intent ( getBaseContext ( ) , MarcaSelectActivity . class ) ; startActivity ( in ) ; }
public void onFailure ( Call < PostList > call , Throwable error ) { onFailure . call ( editedPost , new ApiFailure <> ( error ) ) ; }
public String getName ( ) { return "Background" ; }
public Single < T > getById ( String id ) { return localRepository . getById ( id ) ; }
public String bodyForNotification ( final Context context ) { String body = body ( ) ; if ( body == null ) { return context . getString ( state ( ) . getDescriptionResId ( ) ) ; } return body ; }
public void firebaseAuthSignInSucceeds_HidesProgressBar ( ) { mAuthPresenter . handleFirebaseSignInResult ( true , USER_ID ) ; verify ( mView ) . setProgressIndicator ( false ) ; }
private void initFragment ( Fragment controllerFragment ) { FragmentManager fragmentManager = getFragmentManager ( ) ; FragmentTransaction transaction = fragmentManager . beginTransaction ( ) ; transaction . add ( R . id . contentFrame , controllerFragment ) ; transaction . commit ( ) ; }
public static String getAbsoluteURL ( String path , java . util . Map < String , String > params ) { return null ; }
public void onClick ( View v ) { listener . onListItemClick ( viewHolder . getAdapterPosition ( ) , v ) ; }
public void onNegativeButtonClicked ( ) { mOnResponse . onNegativeResponse ( ) ; gotResponse = true ; dismiss ( ) ; }
public void addDirectListener ( NotificationListener listener ) { if ( ! directListeners . contains ( listener ) ) { directListeners . add ( listener ) ; } }
public static void setUploadToDropbox ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_DROPBOX , value ) . commit ( ) ; }
public void onAnimationUpdate ( ValueAnimator animation ) { if ( ! systemAnimationsAreDisabled ) { progress = ( float ) animation . getAnimatedValue ( ) ; } }
public void SimpleActivityLifecycleCallbacks_onActivityDestroyed ( ) throws Exception { { debugOverlayTree . registeredActivities = weakReferenceCache ; debugOverlayTree . activityLifecycleCallbacks . onActivityDestroyed ( activity ) ; verify ( weakReferenceCache , times ( 1 ) ) . remove ( activity ) ; } }
public void onSingleClick ( View view ) { Intent i = new Intent ( MainActivity . this , ManageHistory . class ) ; startActivity ( i ) ; }
public DiscoverType getDiscoverType ( ) { return discoverType ; }
public void setOpen ( int open ) { this . open = open ; }
public Builder clearInputId ( ) { bitField0_ = ( bitField0_ & ~0x00000008 ) ; inputId_ = 0 ; onChanged ( ) ; return this ; }
private void resetAnimation ( ViewHolder holder ) { clearInterpolator ( holder . itemView ) ; endAnimation ( holder ) ; }
public void onBookCollectionCahnged ( BooksCollection booksCollection ) { homeScreenRecyclerViewAdapter . notifyBookCollectionChanged ( booksCollection ) ; }
public boolean hasResponseSongOffer ( ) { return ( ( bitField0_ & 0x04000000 ) == 0x04000000 ) ; }
public String getImei ( ) { return imei ; } ;
public void onClick ( DialogInterface dialog , int which ) { handler . sendEmptyMessage ( STOP_PROGRESS_MSG ) ; }
private void setFullscreenMode ( ) { if ( book != null && book . hasDataDir ( ) ) { setFullscreen ( book . getFlag ( "fullscreen" , true ) ) ; } }
static public JSONObject readJsonFromAsset ( String fileName ) { try { return readJsonFromStream ( ModdingMode . getInputStream ( fileName ) ) ; } catch ( JSONException e ) { throw ModdingMode . modException ( e ) ; } }
public AyahToolBarPip ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public LessonHolder ( View itemView , int viewType ) { super ( itemView ) ; itemView . setTag ( viewType ) ; }
public void onPause ( ) { super . onPause ( ) ; mMedicalAttentionMainPresenter . onPause ( ) ; }
public Socket createSocket ( String host , int port , InetAddress localHost , int localPort ) throws IOException , UnknownHostException { return patch ( delegate . createSocket ( host , port , localHost , localPort ) ) ; }
public final int getY ( ) { return this . _y ; }
private void checkKey ( String key ) { if ( key == null || key . isEmpty ( ) ) throw new NullPointerException ( "key can not be null or empty ! " ) ; }
public List < Winners > getmWinners ( ) { return mWinners ; }
public Attribute getSystemAttribute ( SystemAttribute a ) { Attribute sa = getAttribute ( a . id ) ; sa . name = context . getString ( a . titleId ) ; return sa ; }
public GenericAPIInterface getService ( ) { return this . service ; }
public UploadObject setProgress ( int progress ) { this . progress = progress ; return this ; }
public void downloadAudioIfNeed ( ) { if ( buttonState == 2 ) { FileLoader . getInstance ( ) . loadFile ( currentMessageObject . getDocument ( ) , true , 0 ) ; buttonState = 3 ; invalidate ( ) ; } }
public GeneralSettingsPage checkIfFormManagementOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . form_management_preferences ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public void updateAccountsLastTransactionDate ( ) { List < Account > accounts = em . getAllAccountsList ( ) ; for ( Account account : accounts ) { updateAccountLastTransactionDate ( account . id ) ; } }
private static Attachment attachmentFromUri ( @ Nullable Uri uri ) { if ( uri == null ) return null ; return new UriAttachment ( uri , MediaUtil . IMAGE_JPEG , AttachmentDatabase . TRANSFER_PROGRESS_DONE , 0 , null , false , false ) ; }
public void setCubeBack ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotationY ( 90 * fraction ) ; setPivotY ( getHeight ( ) / 2 ) ; setPivotX ( getWidth ( ) ) ; }
public boolean canZoomInMoreX ( ) { return ( mScaleX < mMaxScaleX ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . settings_activity ) ; getAppComponent ( ) . newSettingsActivityComponent ( new SettingsActivityModule ( this ) ) . inject ( this ) ; }
public void onSuccess ( final AlbumInfo info ) { mListener . onSuccess ( info ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { Utils . deleteTracks ( context , list ) ; adapter . notifyItemRemoved ( pos ) ; }
private String toJsonString ( Context context , int widgetId ) { try { return toJson ( context , widgetId ) . toString ( 2 ) ; } catch ( JSONException e ) { return "Error while formatting data " + e ; } }
public void run ( ) { preferences = ApplicationLoader . applicationContext . getSharedPreferences ( "uploadinfo" , Activity . MODE_PRIVATE ) ; for ( int a = 0 ; a < maxRequestsCount ; a ++ ) { startUploadRequest ( ) ; } }
public Builder withJuzOverlayText ( String text ) { mJuzOverlayText = text ; return this ; }
public void onEvent ( MessageUpdate event ) { if ( event . type == MessageUpdate . Type . REPORT_UPDATE ) { invalidateOptionsMenu ( ) ; } }
private void postDelayed ( ) { if ( mCheckHandler == null ) { return ; } mCheckHandler . postDelayed ( mCheckRunnable , Constants . DEF_LIVE_WALLPAPER_CHECK_PERIODIC ) ; }
public void onDestroy ( ) { mFileLocalFabManager . removeFabContainer ( mPositionInViewPager ) ; super . onDestroy ( ) ; }
public void onHiddenChanged ( boolean hidden ) { if ( ! hidden ) { setActionBarTitle ( R . string . content ) ; } }
public void onFailure ( String url ) { getBaseActivity ( ) . runOnUiThread ( new Runnable ( ) { public void run ( ) { hideLoadingAnimation ( ) ; showError ( R . string . msg_img_loading_error ) ; } } ) ; hideLoadingAnimation ( ) ; }
public void setMessageTime ( Date messageTime ) { this . messageTime = messageTime ; }
public void run ( ) { while ( alive ) { try { processInput ( ) ; } catch ( SocketException | SocketTimeoutException e ) { onDisconnected ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
private void groupCreateDone ( ) { Intent intent = new Intent ( this , ConversationActivity . class ) ; intent . putExtra ( ConversationActivity . THREAD_ID_EXTRA , groupChatId ) ; startActivity ( intent ) ; finish ( ) ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . EditText" ) ; if ( hintLayout != null ) info . setContentDescription ( hintLayout . getText ( ) ) ; }
public int getItemCount ( ) { return 1 + ( mMembers != null ? mMembers . size ( ) : 0 ) ; }
public WinAuthImporter . State read ( InputStream stream , boolean isInternal ) throws DatabaseImporterException { GoogleAuthUriImporter importer = new GoogleAuthUriImporter ( getContext ( ) ) ; DatabaseImporter . State state = importer . read ( stream ) ; return new State ( state ) ; }
public void showTimeoutError ( ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_timeout ) , getString ( R . string . dialog_error_message_no_internet ) ) ; hideLoadingDialog ( ) ; }
private Ingredient ( Parcel in ) { this . ingredient = in . readString ( ) ; this . measure = in . readString ( ) ; this . quantity = in . readInt ( ) ; }
public LastEntryVisualizer ( Context context , int widgetId ) { super ( new EventProvider ( EventProviderType . EMPTY , context , widgetId ) ) ; }
public FolderChooserDialog show ( ) { FolderChooserDialog dialog = build ( ) ; dialog . show ( context ) ; return dialog ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . TANH ) ; }
public int getViewType ( ) { if ( isSame ( type , BY_DATE_SHOP ) ) return SHOPPING ; else return REMINDER ; }
public void setTitle ( String title ) { this . title = title ; }
public void saveFormsVersion ( List < Version > versions ) { Realm realm = Realm . getDefaultInstance ( ) ; realm . beginTransaction ( ) ; realm . copyToRealmOrUpdate ( versions ) ; realm . commitTransaction ( ) ; realm . close ( ) ; }
public static Intent showMoreApps ( Activity activity ) { Uri uri = Uri . parse ( "market : return new Intent ( Intent . ACTION_VIEW , uri ) ; }
public FileDescriptorWrapper getFD ( @ NonNull Uri path ) { FsModule fsModule = fsResolver . resolveFsByUri ( path ) ; return fsModule . openFD ( path ) ; }
private void init ( String name , String path , Date created , Date edited ) { this . mName = name ; this . mPath = path ; this . mCreated = created ; this . mEdited = edited ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; Button authorise = view . findViewById ( R . id . authorise ) ; authorise . setOnClickListener ( this ) ; }
public static < T > Resource < T > success ( @ NonNull T data ) { return new Resource <> ( SUCCESS , data , null ) ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfHealing_Info ) ; }
public void onPageStarted ( WebView view , String url , Bitmap favicon ) { super . onPageStarted ( view , url , favicon ) ; pd . setMessage ( "Loading dungeon info , just one second more . . . " ) ; }
public java . util . List < com . coinomi . core . protos . Protos . Transaction > getTransactionList ( ) { return transaction_ ; }
public int hashCode ( ) { return Objects . hash ( super . hashCode ( ) , event , destinationName , destinationCategories , distance ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , false ) ; return inflater . inflate ( R . layout . fragment_about , container , false ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getRecipeMethodDbDao ( ) : null ; }
public void i ( String tag , String message , Object . . . args ) { HyperLog . i ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public boolean handle ( Event event ) { if ( ! ( event instanceof SettingsSaveEvent ) ) return false ; set ( textField . getText ( ) ) ; return true ; }
public void onLoadFinished ( @ NonNull Loader < ArrayList < Song >> loader , ArrayList < Song > data ) { if ( adapter != null ) adapter . swapDataSet ( data ) ; }
public void onResponse ( Player player , Request request , Message message ) { parseMessage ( "artists_loop" , message ) ; }
public int hashCode ( ) { return Objects . hash ( lesson , weekday , teacher , parity , days ) ; }
public void renamesKeyAndTranslatesValues ( ) { initPrefs ( prefs , "colour" , "red" ) ; translateKey ( "colour" ) . toKey ( "couleur" ) . fromValue ( "red" ) . toValue ( "rouge" ) . apply ( prefs ) ; assertPrefs ( prefs , "couleur" , "rouge" ) ; }
private double cucmTogallon ( double num ) { return num * 0 . 000264 ; }
public Double getPrecipIntensityMaxTime ( ) { return precipIntensityMaxTime ; }
private boolean isEdit ( ) { return editGroupChatId != null ; }
public AESProvider ( ) { super ( "AESProvider" , 1 . 0 , "" ) ; put ( "Cipher . AES" , com . android . keepass . crypto . NativeAESCipherSpi . class . getName ( ) ) ; }
public long getItemId ( int position ) { return getItem ( position ) . getAlbumID ( ) ; }
public void compatRequestFineLocationPermission ( ) { PermissionUtil . requestFineLocationPermission ( this ) ; }
public float biasedRandom ( float low , float high , float bias ) { float biasedFloat = ( float ) Math . pow ( random . nextFloat ( ) , bias ) ; return low + ( high - low ) * biasedFloat ; }
public int hashCode ( ) { return Objects . hash ( task , googletask , caldavTask , location , tags , children , primarySort , secondarySort , indent , targetIndent ) ; }
public void setDirName ( String dirName ) { this . dirName = dirName ; }
public Builder setScriptBytes ( com . google . protobuf . ByteString value ) { if ( value == null ) { throw new NullPointerException ( ) ; } bitField0_ | = 0x00000002 ; scriptBytes_ = value ; onChanged ( ) ; return this ; }
public List < Tuc > getTuc ( ) { return this . tuc ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "UPDATE attachment SET disposition = lower ( disposition ) WHERE NOT disposition IS NULL" ) ; }
public void reload ( ) { loaderManager . restartLoader ( LoaderUtils . APP_LOADER , null , this ) ; }
public DatasetEntry ( View v ) { super ( v ) ; datasetName = ( TextView ) v . findViewById ( R . id . basic_nation_name ) ; v . setOnClickListener ( this ) ; }
public Socket createSocket ( String host , int port ) throws IOException , UnknownHostException { return enableTLSOnSocket ( internalSSLSocketFactory . createSocket ( host , port ) ) ; }
public Fragment getItem ( int position ) { Fragment f = new KarruselFrag ( ) ; Bundle b = new Bundle ( ) ; b . putInt ( "position" , position ) ; f . setArguments ( b ) ; return f ; }
private boolean notificationsFromStrangers ( ) { return mXmppConnectionService . getBooleanPreference ( "notifications_from_strangers" , R . bool . notifications_from_strangers ) ; }
public static void start ( Activity activity , Host participant ) { Intent intent = new Intent ( activity , ChatActivity . class ) ; intent . putExtra ( BUNDLE_PARTICIPANT , participant ) ; activity . startActivity ( intent ) ; }
public void onSaveInstanceState ( Bundle outState ) { outState . putString ( "searchText" , searchText ) ; super . onSaveInstanceState ( outState ) ; }
public static void showCustomStory ( @ NotNull String text ) { Game . addToScene ( new WndStory ( text ) ) ; }
public int getIconColor ( ) { return getAttributeValue ( R . attr . colorOnSurface ) ; }
public ArrayList < Song > getSongs ( @ NonNull Context context ) { return TopAndRecentlyPlayedTracksLoader . getTopTracks ( context ) ; }
public ContactsAdapter ( Context context , int onlyUsersType , boolean arg2 , HashMap < Integer , TLRPC . User > arg3 , boolean arg4 ) { mContext = context ; onlyUsers = onlyUsersType ; needPhonebook = arg2 ; ignoreUsers = arg3 ; isAdmin = arg4 ; }
public void testThatTopLeftGTPCoordinateIsValidInAnotherBoardSize ( ) throws Exception { final String tested = GTPHelper . coordinates2gtpstr ( new Cell ( 0 , 0 ) , 9 ) ; assertThat ( tested ) . isEqualTo ( "A9" ) ; }
public static Boolean readNullableBoolean ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) return null ; return readBoolean ( in ) ; }
public int getRepeat ( ) { return mRepeat ; }
public List < FoodUsdaTable > getDbFoodUsdaTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getFoodUsdaTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public boolean onNavigationItemSelected ( final MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . tags : break ; default : super . onNavigationItemSelected ( item ) ; } return true ; }
public Integer getPrincipalDisbursed ( ) { return principalDisbursed ; }
private String getCurrentRef ( ) { if ( ! TextUtils . isEmpty ( mSelectedRef ) ) { return mSelectedRef ; } return mRepository . getDefaultBranch ( ) ; }
public Servo getServo ( String id ) { return servos . get ( id ) ; }
private void getCoursesFromDatabase ( ) { mCourses = new Select ( ) . all ( ) . from ( MoodleCourse . class ) . execute ( ) ; }
public static boolean syncUserData ( ) { boolean b = sync_user_data ( ) ; destroy ( ) ; get ( true ) ; return b ; }
private void ensureNext ( ) { if ( next == null ) { next = new Bucket ( ) ; } }
private void setMatchingPatients ( Patient patient , List < Patient > matchingPatients ) { mRecyclerView . setLayoutManager ( new LinearLayoutManager ( getContext ( ) ) ) ; mRecyclerView . setAdapter ( new MergePatientsRecycleViewAdapter ( ( getActivity ( ) ) , mPresenter , matchingPatients , patient ) ) ; }
public void onSettingsClicked ( ) { if ( currentlySelected == settingsButton ) { return ; } currentlySelected . setTextColor ( darkGray ) ; currentlySelected = settingsButton ; settingsButton . setTextColor ( blue ) ; listener . onNavItemSelected ( R . id . settings ) ; }
private void validateTransactionListDisplayed ( ) { onView ( withId ( R . id . fragment_transaction_list ) ) . check ( matches ( isDisplayed ( ) ) ) ; }
public Area setArea ( Area area ) { if ( area == null ) throw new IllegalArgumentException ( "Null" ) ; return setArea ( area . areaX , area . areaZ , area ) ; }
public void setBlogImageUrl ( String imageUrl ) { this . blogImageUrl = StringUtils . notNullStr ( imageUrl ) ; }
public int getPlaybackState ( ) { return player . getPlaybackState ( ) ; }
public static float dpToPx ( Context context , int dp ) { return TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , dp , context . getResources ( ) . getDisplayMetrics ( ) ) ; }
public void setTrueReading ( boolean trueReading ) { mIsTrueReading = trueReading ; }
private void notifyDiscographyChanged ( ) { if ( mainActivityTaskQueue != null ) { final long COALESCENCE_DELAY = 500 ; for ( Runnable listener : changedListeners ) { mainActivityTaskQueue . removeCallbacks ( listener ) ; mainActivityTaskQueue . postDelayed ( listener , COALESCENCE_DELAY ) ; } } }
public static int getCurrentCount ( ) { return c . get ( ) ; }
public void onSuccess ( OpenWeatherApiResponse apiResponse ) { mIsSuccess = true ; }
public long getStartTimeStamp ( ) { return Long . valueOf ( get ( "startTimeStamp" , String . valueOf ( System . currentTimeMillis ( ) ) ) ) ; }
public void popUpPlaylistTab ( ) { if ( mPlayingQueueController != null ) mPlayingQueueController . popUp ( ) ; }
public AccountHeader withHeaderBackgroundScaleType ( ImageView . ScaleType headerBackgroundScaleType ) { this . mHeaderBackgroundScaleType = headerBackgroundScaleType ; return this ; }
public void onDataChange ( final DataSnapshot dataSnapshot ) { mMessage = dataSnapshot . getValue ( String . class ) ; mEditor . putString ( USER_PREFERENCES_MISC_CARD_MESSAGE , mMessage ) ; mEditor . apply ( ) ; }
public Maybe < T > create ( T entity ) { return remoteRepository . create ( entity ) . doOnSuccess ( result -> localRepository . create ( result ) . subscribe ( ) ) ; }
private int getDecFlagsMask ( int argument ) { if ( argument >= 1 && argument <= 9 ) { return ( 1 << argument ) ; } return 0 ; }
public LiveData < List < EducationEntity >> getEducations ( ) { return mObservableEducations ; }
public void run ( ) { try { database . executeFast ( "DELETE FROM user_photos WHERE uid = " + uid ) . stepThis ( ) . dispose ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public SQLiteDatabase getDatabase ( ) { return db ; }
private void cancelWhenNotShowing ( ) { final Handler handler = new Handler ( ) ; handler . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { dismissAllowingStateLoss ( ) ; } } , DELAY_MILLISECOND ) ; }
public ModelLoader < IconDataParcelable , Bitmap > build ( MultiModelLoaderFactory multiFactory ) { return new CloudIconModelLoader ( context ) ; }
public float getAccuracy ( ) { return UNIT_SPRINTER_ACCURACY ; }
private static boolean any ( boolean [ ] booleans ) { for ( boolean b : booleans ) { if ( b ) { return true ; } } return false ; }
public void run ( ) { remove ( items . indexOf ( item ) ) ; }
public void onPrintJobCreated ( PoemFile poemFile , PrintJob printJob ) { mLatch . countDown ( ) ; mPoemFile = poemFile ; mPrintJob = printJob ; }
public void setSharingButtonStyle ( String sharingButtonStyle ) { if ( TextUtils . isEmpty ( sharingButtonStyle ) ) { mSettings . sharingButtonStyle = STANDARD_SHARING_BUTTON_STYLE ; } else { mSettings . sharingButtonStyle = sharingButtonStyle . toLowerCase ( ) ; } }
public void onFetchingLocationsShouldGetEmptyListIfTableIsEmpty ( ) throws InterruptedException { List < VisitedLocation > LocationList = visitedLocationDao . getAllVisitedLocations ( ) ; assertTrue ( LocationList . isEmpty ( ) ) ; }
public void run ( ) { if ( ! isPlaying ( ) ) return ; seek ( currentSkipPos ) ; currentSkipPos = 0 ; updateProgress = true ; }
public void setNetworkCountry ( Long networkCountry ) { this . networkCountry = networkCountry ; }
public void showLevelEvents ( int position ) { String level = levels . get ( position ) ; wireframe . showLevelSchedule ( level , view . getActivity ( ) ) ; }
private Model getGroup ( String keyStr ) { keyStr = StringUtils . capitalize ( wrapper . clearNote ( keyStr ) ) ; Model model = new Model ( ) ; model . setSummary ( keyStr ) ; model . setType ( ActionType . GROUP ) ; return model ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . COS_INVERSE ) ; }
public CardView getLabelBackground ( ) { return mLabelBackground ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { MenuUtils . selectDrawerItem ( menuItem , mDrawer , DescriptionActivity . this , null ) ; return true ; }
private void updateUploadButtonVisibility ( ) { mUploadButton . setVisibility ( mBase64Data != null ? View . VISIBLE : View . GONE ) ; }
public void onReceive ( Context context , Intent intent ) { NotificationUtil . showUpdateReminderNotification ( context ) ; }
private void goToActivityWithFinishCurrent ( Class targetActivity ) { goToActivity ( targetActivity ) ; new Handler ( ) . postDelayed ( mCurrentDrawerActivity : : finish , ITEM_ACTION_DELAY ) ; }
public void onTopicChanged ( String topic , String topicSetBy , Date topicSetOn ) { mChannelTopic = topic ; mChannelTopicSetBy = topicSetBy ; mChannelTopicSetOn = topicSetOn ; if ( getUserVisibleHint ( ) ) updateParentCurrentChannel ( ) ; }
public boolean onQueryTextSubmit ( String query ) { moveToDepartureActivity ( query ) ; return false ; }
public void onCompletion ( MediaPlayer mp ) { audioManager . setStreamVolume ( soundType , userVolume , 0 ) ; }
public static void slideUp ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . slide_up_enter , R . anim . slide_up_exit ) ; }
public int getOpacity ( ) { return 0 ; }
public void setSelectedLicense ( String licenseName ) { this . license = licensesByName . get ( licenseName ) ; store . putString ( Prefs . DEFAULT_LICENSE , license ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mEvent ) ; }
public void onEndOfSpeech ( ) { mState = State . TRANSCRIBING ; mButtonMicrophone . setState ( mState ) ; if ( audioCue != null ) { audioCue . playStopSound ( ) ; } }
private void SairModoPesquisa ( ) { this . idAppBarLayoutSearch . setVisibility ( View . INVISIBLE ) ; this . idAppBarLayout . setVisibility ( View . VISIBLE ) ; FunctionsTools . closeKeyboard ( ListClientActivity . this , this . View ) ; }
public void onAnimationEnd ( Object animation ) { AndroidUtilities . runOnUIThread ( new Runnable ( ) { @ Override public void run ( ) { if ( animationEndRunnable != null ) { animationEndRunnable . run ( ) ; animationEndRunnable = null ; } } } ) ; }
public void listen ( FindCallback callback ) { cb = callback ; execute ( ) ; }
public com . google . protobuf . Any . Builder getClientStateBuilder ( ) { onChanged ( ) ; return getClientStateFieldBuilder ( ) . getBuilder ( ) ; }
public void setCommunity ( CommunityModel model ) { this . community = model ; communityTitle . setText ( model . getmName ( ) ) ; communityIcon . setImageResource ( CommunityUtils . getCommunityIcon ( community . getCommunityId ( ) ) ) ; }
public void setRollstuhl ( boolean rollstuhl ) { this . _rollstuhl = rollstuhl ; }
private void dismissPopup ( ) { mPopupWindow . setContentView ( null ) ; mPopupWindow . dismiss ( ) ; mPopupWindow = null ; }
public void onPause ( ) { log . v ( TAG , "Fragment paused" ) ; thread . standalone ( ( ) -> { if ( requestHandle != null && requestHandle . cancel ( ) ) { loaded = false ; } } ) ; }
public void onReadyForSpeech ( Bundle params ) { mState = State . RECORDING ; mButtonMicrophone . setState ( mState ) ; }
public void saveUser ( User user ) { mPrefsHelper . setCurrentUser ( user ) ; }
public void addAnnouncement ( Announcement announcement ) { adapter . addItem ( announcement ) ; if ( announcement . getImageUrl ( ) != null && announcement . getImageUrl ( ) . length ( ) > 0 ) { preloadAnnouncementImage ( announcement ) ; } }
public void textToHtml_SupportsEscapedLt ( ) { String [ ] tests = { " < 1" , } ; for ( String testCase : tests ) { assertEquals ( testCase , StringUtils . textToHtml ( testCase ) . toString ( ) ) ; } }
private SExams convertIfmoSchedule ( String type , String query , SExams itmoSchedule ) { return setupSchedule ( itmoSchedule , type , query ) ; }
public void onCurrentQueueIndexUpdated ( int queueIndex ) { Log . d ( TAG , "onCurrentQueueIndexUpdated , queue index = " + queueIndex ) ; }
public GeneralSettingsPage checkIfMapsOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . maps ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public List < LottieAnimatableFloatValue > getLineDashPattern ( ) { return lineDashPattern ; }
private void skipToNextCmd ( ) { if ( this . textInterface != null ) { this . textInterface . skipToNext ( ) ; } }
public void setImeOptions ( Resources resources , int imeOptions ) { mImeOptions = imeOptions ; getCurrentKeyboard ( ) . setImeOptions ( resources , imeOptions ) ; }
public AsyncDownloadBook ( File file ) { this . file = file ; }
public void run ( ) { try { Log . i ( "IRCCloud" , "Invalidating session" ) ; fetch ( new URL ( "https : } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public void surfaceDestroyed ( SurfaceHolder holder ) { _ui . pause ( ) ; _audio . pause ( ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnListFragmentInteractionListener ) { mListener = ( OnListFragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnCalibrationSelectedListener" ) ; } }
public Theme getTheme ( ) { return theme ; }
private boolean exportSettings ( File backupDir ) { File preferences = StorageManager . getSharedPreferencesFile ( this ) ; return ( StorageManager . copyFile ( preferences , new File ( backupDir , preferences . getName ( ) ) ) ) ; }
public int compareTo ( @ NonNull Card card ) { return Integers . compare ( this . getPriority ( ) , card . getPriority ( ) ) ; }
private void showSnackBar ( CharSequence c ) { Snackbar . make ( mCommentView , c , Snackbar . LENGTH_SHORT ) . show ( ) ; }
public void onSignOutSuccess ( ) { Toast . makeText ( this , R . string . sign_out_success , Toast . LENGTH_SHORT ) . show ( ) ; }
public Template ( Constructor constructor , Object . . . constants ) { this . constructor = constructor ; this . constants = constants ; }
public void onResume ( ) { super . onResume ( ) ; ArtworkManager . getInstance ( getContext ( ) . getApplicationContext ( ) ) . registerOnNewArtistImageListener ( ( ArtistsAdapter ) mAdapter ) ; }
public static int x ( @ NonNull final int [ ] coords ) { return coords [ INDEX_X ] ; }
public void onPause ( ) { super . onPause ( ) ; super . stopForegroundTokenRenewalService ( ) ; }
public void switchToAccount ( Account account ) { switchToAccount ( account , false ) ; }
public void onBookCollectionRemoved ( BooksCollection booksCollection ) { if ( bookCollections . remove ( booksCollection ) ) { notifyItemRemoved ( booksCollection . getOrder ( ) ) ; } }
public void say ( String str ) { GLog . i ( Game . getVar ( R . string . Mob_Yell ) , getName ( ) , StringsManager . maybeId ( str ) ) ; }
public int compareTo ( @ NonNull Gallery other ) { if ( this . getName ( ) . equals ( other . getName ( ) ) ) { return 0 ; } else { return - 1 ; } }
private TagSpanGenerator ( Context context ) { this . context = context ; stringBuilder = new SpannableStringBuilder ( ) ; }
public void onCreate ( ) { mData . clear ( ) ; cs = ThemeUtil . getInstance ( mContext ) ; map . clear ( ) ; }
public String getHost ( ) { return host ; }
private UserCommentListingURL . Sort defaultUserOrder ( ) { return PrefsUtility . pref_behaviour_user_commentsort ( ) ; }
public void addLast ( ArrayList < UserModel > list ) { users . addAll ( users . size ( ) , list ) ; notifyDataSetChanged ( ) ; }
public void setBackgroundImage ( Drawable bitmap ) { backgroundDrawable = bitmap ; }
public TextView getPlaceHolder ( ) { return placeHolder ; }
public void getAnswer_whenPromptHasAnswer_returnsPromptAnswer ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( answer ) ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , new GeoPointData ( ActivityGeoDataRequester . getLocationParamsFromStringAnswer ( answer . getDisplayText ( ) ) ) . getDisplayText ( ) ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_icon_preference , parent , false ) ) ; }
public void onPause ( ) { super . onPause ( ) ; mHandler = null ; if ( App . mClementineConnection != null ) { App . mClementineConnection . setUiHandler ( null ) ; } }
public void onSwipeRight ( ) { playRight ( ) ; setPadColorToDefault ( ) ; }
private void setFavourite ( ) { if ( dictionaryItem . getIsFavourite ( ) ) { floatingActionButton . setImageDrawable ( ContextCompat . getDrawable ( getContext ( ) , R . drawable . ic_star_white ) ) ; } floatingActionButton . setEnabled ( true ) ; }
public boolean isPagerIndicatorVisible ( ) { return binding . miPagerIndicator . getVisibility ( ) == View . VISIBLE ; }
public void setMetroList ( ArrayList < ColorInfo > list ) { this . metroList = list ; }
public void onChildViewDetachedFromWindow ( View view ) { }
private boolean appearanceDoesNotShowControls ( String appearance ) { return appearance . startsWith ( WidgetAppearanceUtils . MINIMAL ) || appearance . startsWith ( WidgetAppearanceUtils . COMPACT ) || appearance . contains ( NO_BUTTONS ) ; }
public LiveData < PersonaShadowDetail [ ] > getShadowsForPersona ( int id ) { return personaDao . getShadowsForPersona ( id ) ; }
public static int remove ( String selection , String [ ] selectionArgs , SQLiteDatabase db ) { return db . delete ( TABLE_NAME , selection , selectionArgs ) ; }
public boolean isChildSelectable ( int groupPosition , int childPosition ) { return false ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; configureStatus ( ) ; }
public void start ( ) { mLastCheckEventTimestamp = System . currentTimeMillis ( ) + 900 ; mLastRequestTimestamp = mLastCheckEventTimestamp ; mConnectionCheckTimer . scheduleAtFixedRate ( this , 900 , 500 ) ; }
public void setPhotoUrl ( @ NonNull final String photoUrl ) { this . photoUrl = photoUrl ; }
public void onDismiss ( ) { if ( ( ( AppItemView ) itemView ) . getIcon ( ) != null ) { ( ( GroupIconDrawable ) ( ( AppItemView ) itemView ) . getIcon ( ) ) . popBack ( ) ; } }
public void setProxyHost ( String proxyHost ) { putString ( Name . USE_PROXY_HOST , proxyHost ) ; }
public static GeneralFragment newInstance ( @ NonNull final String fragmentId ) { final GeneralFragment fragment = new GeneralFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putString ( SECTION , fragmentId ) ; fragment . setArguments ( args ) ; return fragment ; }
private void checkStop ( ) { if ( stopRequested && torrentTasks . isEmpty ( ) && addTorrentsList . isEmpty ( ) ) super . stop ( ) ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . Attachment parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
private void offlineModeWarning ( ) { if ( Preferences . getOfflineMode ( getActivity ( ) ) && ! mOfflineModeWarned ) { mOfflineModeWarned = true ; Toast . makeText ( getActivity ( ) , R . string . warning_offline_mode , Toast . LENGTH_LONG ) . show ( ) ; } }
private void saveCurrentSectionID ( ) { Log . d ( "Book" , "saving section " + currentSectionIDPos ) ; data . edit ( ) . putInt ( "sectionID" , currentSectionIDPos ) . apply ( ) ; }
public Artist ( String id ) { this . id = Shorty . avoidNull ( id ) ; }
private final void displayTrip ( ) { FragmentTripDetailBinding mBinding = DataBindingUtil . bind ( mRootView ) ; mBinding . setTrip ( mRetrievedTrip ) ; mBinding . setTripFormatter ( new TripFormatter ( getContext ( ) ) ) ; mBinding . executePendingBindings ( ) ; }
public boolean onLongClick ( View v ) { currentCalculation += "e" ; displayCalculation += "e" ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; onAllClicks ( ) ; return true ; }
public int getDisplayW ( ) { return mosaicView . getDisplayW ( ) ; }
public boolean onActionItemClicked ( ActionMode mode , MenuItem item ) { boolean result = mFragment != null && mFragment . onContextualActionClicked ( item . getItemId ( ) ) ; finishActionMode ( ) ; return result ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; findView ( ) ; setListener ( ) ; }
public String getCanopyManufacturer ( ) { return canopyManufacturer ; }
public ActionBarMenuItem addItemWithWidth ( int id , int icon , int width , CharSequence title ) { return addItem ( id , icon , isActionMode ? parentActionBar . itemsActionModeBackgroundColor : parentActionBar . itemsBackgroundColor , null , width , title ) ; }
public IbcToken getIbcToken ( String denom ) { String ibcHash = denom . replace ( "ibc/" , "" ) ; for ( IbcToken ibcToken : mIbcTokens ) { if ( ibcToken . hash . equals ( ibcHash ) ) { return ibcToken ; } } return null ; }
public void setCustomType ( String type ) { mRangeType = NoteBlockRangeType . fromString ( type ) ; }
public void stop ( ) { if ( Objects . nonNull ( mPlayer ) ) { mPlayer . stop ( ) ; mPlayer . release ( ) ; mPlayer = null ; } changeStatusTo ( Status . NO_PLAYBACK ) ; }
public void reload ( ) { ( ( MyGoalsRecycler ) mGoalList . getAdapter ( ) ) . notifyDataSetHasChanged ( ) ; showEmptyWhenNecessary ( ) ; }
private void speechRecognizerStopped ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "speechRecognizerStopped" ) ; main_activity . getMainUI ( ) . audioControlStopped ( ) ; speechRecognizerIsStarted = false ; }
public String getDonationAddress ( int donationCode ) { DonateFeatureEntity donateFeature = realm . where ( DonateFeatureEntity . class ) . equalTo ( DonateFeatureEntity . FIELD_FEATURE_CODE , donationCode ) . findFirst ( ) ; return donateFeature == null ? null : donateFeature . getDonationAddress ( ) ; }
public void onProgress ( double progress , int millis ) { }
public STLLoaderTask ( Activity parent , Uri uri , Callback callback ) { super ( parent , uri , callback ) ; }
public IAnswerData getAnswer ( ) { return TextWidgetUtils . getIntegerData ( getAnswerText ( ) , getFormEntryPrompt ( ) ) ; }
public void onClick ( View v ) { mCallbacks . onTestUpdated ( mTest ) ; Intent browserIntent = new Intent ( getActivity ( ) , AboutFormalActivity . class ) ; startActivity ( browserIntent ) ; }
public void onClick ( View v ) { mainLayout . requestFocus ( ) ; hideSoftKeyboard ( CardAddEditActivity . this ) ; fieldSelectDialog ( "card" ) ; }
public void goBack ( ) { getActivity ( ) . onBackPressed ( ) ; }
public int getLevelId ( ) { return 0 ; }
public void setFocus ( Context context ) { if ( WidgetAppearanceUtils . isAutocomplete ( getQuestionDetails ( ) . getPrompt ( ) ) && ! questionDetails . isReadOnly ( ) ) { softKeyboardController . showSoftKeyboard ( binding . choicesSearchBox ) ; } }
public static Animator createTextColorTransition ( final TextView v , final int startColor , final int endColor ) { return createColorAnimator ( v , "textColor" , startColor , endColor ) ; }
public Loader < Cursor > onCreateLoader ( int arg0 , Bundle arg1 ) { return new ConversationListLoader ( getActivity ( ) , queryFilter ) ; }
public Fragment createFragment ( int index ) { return builder . pages . get ( index ) . createFragment ( ) ; }
public void onClick ( View v ) { onAutoConfig ( ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( HomeActivity . this , BoardActivity . class ) ) ; }
public void addDeleteListener ( AppDeleteListener deleteListener ) { deleteListeners . add ( deleteListener ) ; }
private OnClickListener acceptJoin = new OnClickListener ( ) { @ Override public void onClick ( View v ) { conversation . setAttribute ( "accept_non_anonymous" , true ) ; activity . xmppConnectionService . updateConversation ( conversation ) ; activity . xmppConnectionService . joinMuc ( conversation ) ; } } ;
public void onReceive ( Context context , Intent intent ) { SharedPreferences pref = U . getSharedPreferences ( getActivity ( ) ) ; CheckBoxPreference checkBox = ( CheckBoxPreference ) findPreference ( "launcher" ) ; checkBox . setChecked ( pref . getBoolean ( "launcher" , false ) ) ; }
public static ScreenOrientation pref_behaviour_screen_orientation ( final Context context , final SharedPreferences sharedPreferences ) { return ScreenOrientation . valueOf ( getString ( R . string . pref_behaviour_screenorientation_key , ScreenOrientation . AUTO . name ( ) , context , sharedPreferences ) . toUpperCase ( ) ) ; }
public void setErsparnis ( String ersparnis ) { this . _ersparnis = ersparnis ; }
public void onSaveInstanceState ( Bundle out ) { out . putInt ( STATE_PREFIX + "status" , mStatus ) ; if ( mFile != null ) { out . putString ( STATE_PREFIX + "file" , mFile . toString ( ) ) ; } }
public QoSTestResultEnum getTestType ( ) { return testType ; }
public void onTransactionBroadcastFailure ( WalletPocket pocket , Transaction transaction ) { handler . sendMessage ( handler . obtainMessage ( TX_BROADCAST_ERROR , transaction ) ) ; }
public void onStart ( ) { super . onStart ( ) ; mapView . onStart ( ) ; }
private void send ( final Context context ) { Intent intent = new Intent ( BROADCAST_NAME ) ; intent . putExtra ( INTENT_EXTRA , this ) ; LocalBroadcastManager . getInstance ( context ) . sendBroadcast ( intent ) ; }
public void moveLeftInNet ( ) { setFalseNet ( zeroNet ) ; moveFigure ( ) ; resetNetAfterMoving ( figure . coordinatesInNet . x + figure . getWidthInSquare ( ) ) ; }
public void onClick ( View view ) { addSelectedProducts ( ) ; finish ( ) ; }
public void onClick ( View view ) { NetUtils . search ( context , Config . webApplication ) ; }
public void whenPromptHasAnswer_answerTextViewShowsCorrectAnswer ( ) { BarcodeWidget widget = createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) ; assertThat ( widget . stringAnswer . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public void onJumpToPageInDocument ( final int selected_page ) { if ( selected_page >= 1 && selected_page <= mNumPages && mPage != selected_page ) { mPage = selected_page ; renderPage ( 0 ) ; showPageNumber ( ) ; } }
public static AppObject get ( ) { return instance ; }
public void onToolbarInfoClick ( ) { redirectToAnotherScreen ( ViewMapActivity . class , null ) ; }
public static com . coinomi . core . protos . Protos . Key parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public LibrariesAdapter ( Context context , RealmResults < Library > contacts ) { super ( context , contacts , true ) ; this . mContext = context ; this . mLibraries = contacts ; }
public void onFailure ( Call < WalletsResponse > call , Throwable t ) { viewModel . isLoading . setValue ( false ) ; t . printStackTrace ( ) ; }
public void setUser ( de . aaronoe . picsplash . data . model . photos . User user ) { this . user = user ; }
public void goToPostCreation ( int accountId , int ownerId , @ EditingPostType int postType ) { PlaceUtil . goToPostCreation ( getActivity ( ) , accountId , ownerId , postType , null ) ; }
public DownloadBatch add ( String url ) { urls . add ( url ) ; return this ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . valueOf ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "FeedAlias" , 1 ) ; else toggleAliasSetting ( "FeedAlias" , 2 ) ; return true ; }
public boolean shouldSendArea ( int areaX , int areaZ ) { synchronized ( this ) { return ! ( Math . abs ( areaX - playerArea . areaX ) > renderDistance || Math . abs ( areaZ - playerArea . areaZ ) > renderDistance ) ; } }
private double cmtofoot ( double num ) { return num * 0 . 0328 ; }
public void doesNotDetectErrorInEmptySet ( ) { List < SelectChoice > items = Lists . newArrayList ( ) ; subject . check ( items ) ; assertEquals ( subject . hasInvalidValues ( ) , false ) ; }
private void setAlpha ( float alpha ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) mView . setAlpha ( alpha ) ; }
private void resetTouch ( ) { if ( mVelocityTracker != null ) { mVelocityTracker . clear ( ) ; } stopNestedScroll ( ) ; releaseGlows ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `keywords` TEXT" ) ; }
private void saveAndUpdate ( ) { SCNSettings . inst ( ) . save ( ) ; updateUI ( ) ; SCNApp . getMainActivity ( ) . adpTabs . tab1 . touchHelper . updateEnabled ( ) ; }
public void onSuccess ( ) { Toast . makeText ( getApplicationContext ( ) , "Email sent to " + destEmail + "from here by " + idMitt , Toast . LENGTH_LONG ) . show ( ) ; }
private ViewHolder ( View view ) { super ( view ) ; this . view = view ; this . divider = view . findViewById ( R . id . divider ) ; }
public boolean onPreferenceChange ( Preference preference , Object o ) { FontPrefTextView . typeface = null ; HoloEditText . typeface = null ; return true ; }
private int getArg1 ( int defaultValue ) { return getArg ( 1 , defaultValue ) ; }
public static MonthYearPickerDialog newInstance ( ) { Calendar cal = Calendar . getInstance ( ) ; return MonthYearPickerDialog . newInstance ( cal . get ( Calendar . MONTH ) , cal . get ( Calendar . YEAR ) ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnFragmentInteractionListener ) { mListener = ( OnFragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnFragmentInteractionListener" ) ; } }
public void onLoaderReset ( Loader < ExportResult > loader ) { }
public String desc ( ) { return Game . getVar ( R . string . WarriorArmor_Desc ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { autoFollowIntervalValueText . setText ( String . valueOf ( autoFollowIntervalValue . getProgress ( ) + 1 ) ) ; }
private void logEvent ( Context context , String event ) { FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics . getInstance ( context ) ; mFirebaseAnalytics . logEvent ( "playlist_open" , new Bundle ( ) ) ; }
public long getItemId ( int position ) { return items . get ( position ) . id ; }
public GifSlide ( Context context , Uri uri , long size , int width , int height ) { super ( context , constructAttachmentFromUri ( context , uri , MediaUtil . IMAGE_GIF , size , width , height , true , null , false ) ) ; }
public void onConfigure ( SQLiteDatabase db ) { db . execSQL ( "PRAGMA foreign_keys = ON" ) ; db . rawQuery ( "PRAGMA secure_delete = ON" , null ) ; }
public boolean isInBoundsBottom ( float y ) { y = ( float ) ( ( int ) ( y * 100 . f ) ) / 100 . f ; return mContentRect . bottom >= y ? true : false ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preference_activity_dim ) ; initialize ( ) ; AdController . initAd ( getActivity ( ) ) ; }
private boolean isMy ( ) { return getAccountId ( ) == ownerId ; }
public void setConnectionPropertiesForDiscover ( ) throws ProtocolException { conn . setRequestMethod ( "GET" ) ; }
public void onDrawerOpened ( ) { mTimer = new Timer ( ) ; mTimer . schedule ( new TimerTask ( ) { @ Override public void run ( ) { updateGui ( ) ; } } , 0 , SyncthingService . GUI_UPDATE_INTERVAL ) ; }
public void setViewRoot ( @ NonNull View viewRoot ) { mAlert . setViewRoot ( viewRoot ) ; }
public void run ( ) { _app . gotoErrorScreen ( "NOOO ! We lost contact with the host ! " ) ; }
public void updateList ( List < Course > courses ) { this . courses = new ArrayList <> ( courses ) ; notifyDataSetChanged ( ) ; }
public void fetchRestaurant ( ) { restClient . cancelPhotosFetch ( ) ; restClient . cancelReviewsFetch ( ) ; if ( restaurantPool . isEmpty ( ) ) { restClient . findRestaurants ( location , searchTerm ) ; } else { returnRestaurant ( ) ; } }
public boolean isKeepLast ( ) throws RemoteException { return connections . get ( connectionClutch ) . isKeepLast ( ) ; }
public void onClick ( View v ) { final Handler handler = new Handler ( ) ; handler . postDelayed ( ( ) -> { MusicPlayerRemote . openQueue ( mData , getAdapterPosition ( ) , true ) ; randommize ( ) ; } , 100 ) ; }
public Object getItem ( int position ) { if ( isInSub ( ) ) return colorsSub [ topIndex ( ) ] [ position ] ; else return colorsTop [ position ] ; }
public void getDetails ( ) { String address = getAddress ( ) ; view . ShowDetails ( poi . getName ( ) , address , poi . getDrawable ( ) ) ; }
public Boolean getFavorite ( ) { return favorite ; }
private double sqfootTosqm ( double num ) { return num * 0 . 0929 ; }
private String getType ( ) { return queryJSON ( "type" , NOTE_UNKNOWN_TYPE ) ; }
public void didSetImage ( ImageReceiver imageReceiver , boolean set , boolean thumb ) { extTextView . setVisibility ( set ? INVISIBLE : VISIBLE ) ; placeholderImabeView . setVisibility ( set ? INVISIBLE : VISIBLE ) ; }
public static Value parse ( final String currencyCode , final String str ) { return Value . parseValue ( FiatType . get ( currencyCode ) , str ) ; }
public String getBody ( ) { return cardBody . getText ( ) . toString ( ) ; }
public UserAccount getUserAccess ( ) { return classUserAccount ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; if ( activity instanceof GenericRemoteProfileListener ) { mListener = ( GenericRemoteProfileListener ) activity ; } }
public boolean isCanceled ( ) { return canceled ; }
public com . coinomi . core . protos . Protos . EncryptedDataOrBuilder getEncryptedDataOrBuilder ( ) { if ( encryptedDataBuilder_ != null ) { return encryptedDataBuilder_ . getMessageOrBuilder ( ) ; } else { return encryptedData_ ; } }
public void onRemoveFailure ( @ Nullable String reason ) { AnswersProxy . get ( ) . logEvent ( "Remove Failure" ) ; Timber . d ( "Remove failure . " ) ; if ( isFinishing ( ) ) return ; stopProgress ( ) ; showToast ( reason ) ; }
private void removeJetpackSearchSettings ( ) { WPPrefUtils . removePreference ( this , R . string . pref_key_site_screen , R . string . pref_key_jetpack_search_settings ) ; }
public Integer getPenaltyChargesWrittenOff ( ) { return penaltyChargesWrittenOff ; }
public TetroidEditor ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; }
public static void setConntectedVpnProfileDisconnected ( Context c ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( c ) ; Editor prefsedit = prefs . edit ( ) ; prefsedit . putString ( LAST_CONNECTED_PROFILE , null ) ; prefsedit . apply ( ) ; }
public Observable < List < PaymentTypeOption >> getPaymentTypeOption ( String paymentType ) { return mDatabaseHelperLoan . getPaymentTypeOption ( paymentType ) ; }
public void setDecimalPlaces ( Integer decimalPlaces ) { this . decimalPlaces = decimalPlaces ; }
public String getOctave ( ) { return octave ; }
public AnswerFrame ( Context context ) { super ( context ) ; init ( null , 0 ) ; }
public int getItemCount ( ) { return mVisitList . size ( ) ; }
public IItemAdapter < IDrawerItem , IDrawerItem > getItemAdapter ( ) { return mDrawerBuilder . mItemAdapter ; }
private int getMonthViewTop ( ) { return mDelegate . getYearViewMonthMarginTop ( ) + mDelegate . getYearViewMonthHeight ( ) + mDelegate . getYearViewMonthMarginBottom ( ) + mDelegate . getYearViewWeekHeight ( ) ; }
public A getValue ( ) { return valueCallback . getValueInternal ( 0f , 0f , null , null , getProgress ( ) , getProgress ( ) , getProgress ( ) ) ; }
private static int positionInCursor ( int positionInAdapter ) { return positionInAdapter - SPACE_TOP ; }
public void onActionModeFinished ( ActionMode mode ) { if ( currentActionBar != null ) { currentActionBar . setVisibility ( VISIBLE ) ; } inActionMode = false ; }
private void signedOut ( ) { account = null ; firebaseAnalytics . setUserId ( null ) ; updateAuthState ( new AuthState . SignedOut ( ) ) ; }
public void remove ( String message ) { messageQueue . remove ( message ) ; }
public static MatrixCursor getEmptyCursor ( ) { return getEmptyCursor ( true ) ; }
public void onSkipToPrevious ( ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessage . getMessage ( MsgType . PREVIOUS ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public GammaProfiles ( String json ) { try { JSON = new JSONObject ( json ) ; } catch ( JSONException e ) { Log . e ( Constants . TAG , "Failed to read gamma profiles" ) ; e . printStackTrace ( ) ; } }
public void onRequestFailed ( SubredditRequestFailure failureReason ) { General . UI_THREAD_HANDLER . post ( new Runnable ( ) { @ Override public void run ( ) { CacheManager . getInstance ( context ) . makeRequest ( mRequest ) ; } } ) ; }
public void onSuccess ( ) { if ( ! isFinishing ( ) ) { followBlogUrl ( blogUrl ) ; } }
public ArrayList < Song > getSongs ( @ NonNull Context context ) { return LastAddedLoader . getLastAddedSongs ( context ) ; }
private static void addOplataOzeColumnTo ( org . greenrobot . greendao . database . Database db , String tableName ) { addColumnTo ( db , tableName , "OPLATA_OZE" ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeFloat ( progress ) ; }
public void run ( ) { if ( ( gpsStatus == GPS_OK ) || ( gpsStatus == GPS_STABILIZING ) ) { gpsStatus = GPS_TEMPORARYUNAVAILABLE ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_FIX ) ; } }
public Database ( Context context , SQLiteOpenHelper databaseHelper ) { this . context = context ; this . databaseHelper = databaseHelper ; }
private void playAudio ( int position ) { playAudio ( position , false ) ; }
public List < LottieLayer > getLayers ( ) { return layers ; }
private static SharedPreferences getSp ( ) { return ChaoliApplication . getSp ( MODE , MODE_PRIVATE ) ; }
public AlbumSongAdapter ( AppCompatActivity activity , ArrayList < Song > dataSet , @ LayoutRes int itemLayoutRes , boolean usePalette , @ Nullable CabHolder cabHolder ) { super ( activity , dataSet , itemLayoutRes , usePalette , cabHolder ) ; }
public void setNumJewels ( int numJewels ) { this . numJewels = numJewels ; }
public void launchLoginActivity ( ) { startActivity ( new Intent ( getActivity ( ) , LoginActivityView . class ) ) ; getActivity ( ) . finish ( ) ; }
public void deleteChoices ( ) { this . removeAllViews ( ) ; btnChoices = new ArrayList <> ( ) ; }
public void run ( ) { performWriteContactsToPhoneBookInternal ( ) ; }
public boolean onQueryTextChange ( String newText ) { if ( adapter != null ) adapter . filter ( newText ) ; return false ; }
public void testGetStoriesNoListener ( ) { client . getStories ( ItemManager . TOP_FETCH_MODE , ItemManager . MODE_DEFAULT , null ) ; verify ( TestRestServiceFactory . hnRestService , never ( ) ) . topStories ( ) ; }
public DrawerBuilder withOnDrawerItemLongClickListener ( Drawer . OnDrawerItemLongClickListener onDrawerItemLongClickListener ) { this . mOnDrawerItemLongClickListener = onDrawerItemLongClickListener ; return this ; }
public boolean isCurrentMonth ( ) { return currentMonth ; }
private LimitingRequestQueue ( Cache cache , Network network ) { super ( cache , network , 1 ) ; mLimitingRequestQueue = new LinkedBlockingQueue <> ( ) ; mLimiterTimer = null ; super . addRequestFinishedListener ( this ) ; }
public ArrayList < CategoryInfo > getCategoryInfos ( ) { return categoryInfos ; }
private void openItem ( ItemManager . Item item ) { mContext . startActivity ( new Intent ( mContext , ItemActivity . class ) . putExtra ( ItemActivity . EXTRA_ITEM , item ) . putExtra ( ItemActivity . EXTRA_OPEN_COMMENTS , true ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mConfigManager = new ConfigManager ( this ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `read_only` INTEGER NOT NULL DEFAULT 0" ) ; }
public void free ( ) { if ( isFreeable ) { freeEngine ( enginePtr ) ; freeRenderer ( rendererPtr ) ; freeLevel ( levelPtr ) ; isFree = true ; isFreeable = false ; } else { throw new RuntimeException ( "Wrappers are already free" ) ; } }
public static long getLastConnection ( Context context ) { return getLong ( context , "pref_last_connection" , - 1 ) ; }
public int getC6h6 ( ) { return c6h6 ; }
public void loadGraphics ( ) { this . texture = Assets . getPackedTextureFromID ( id , "item" ) ; }
public void onFragmentDestroy ( ) { NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; }
public void closeDrawers ( ) { if ( mLocked ) return ; super . closeDrawers ( ) ; }
public void afterTextChanged ( final Editable editable ) { if ( editable . toString ( ) . isEmpty ( ) ) { campusWatchTitle . setError ( getString ( R . string . required ) ) ; } else { campusWatchTitle . setError ( null ) ; } }
public void setB ( Integer b ) { this . b = b ; }
public WallpaperAdapter ( int [ ] mIds , RequestManager glide ) { this . mIds = mIds ; this . mGlide = glide ; }
public void onBackKeyPressed ( ) { sceneService . loadMenuSceneFromSettingsScene ( ) ; }
public void resetCounts ( ) { resetCounts ( true ) ; }
private void clearCache ( ) { mCacheAllLocalMusics . clear ( ) ; mCacheLocalMusicFolders . clear ( ) ; }
public void testShouldRespectWhenWeGetNewList ( ) { AppInfo appInfo4 = new AppInfo ( getActivity ( ) , SERIALIZED_APPINFO4 ) ; tested . update ( asList ( appInfo4 ) ) ; assertThat ( tested . get ( 0 ) ) . isEqualTo ( appInfo4 ) ; }
public void onImageSelected ( boolean b ) { if ( b ) { selectGroup . clearCheck ( ) ; } else { ( ( RoboRadioButton ) findViewById ( R . id . defaultCheck ) ) . setChecked ( true ) ; } }
public TemplateItem ( String title , String date ) { this . title = title ; this . date = date ; this . key = UUID . randomUUID ( ) . toString ( ) ; }
public void testDefaultTitleTypefacePath ( ) { builder . defaultTitleTypefacePath ( "title" ) ; assertEquals ( "title" , builder . build ( ) . getDefaultTitleTypefacePath ( ) ) ; }
public void onResponse ( JSONObject jsonObject ) { handleRecommendedBlogsResponse ( jsonObject , resultListener ) ; }
public void setBooks ( List < BookDetail > books ) { this . bookList = books ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_icon_style , null ) ) ; }
public GridViewItem ( final Context context , final ScrollSpeedAdapter adapter ) { super ( context , R . layout . gridview_item , R . id . grid_item_cover_image , R . id . grid_item_view_switcher , adapter ) ; mTitleView = findViewById ( R . id . grid_item_title ) ; }
public void editTodoList ( String uuid , String title , int position ) { EditTodoListInteractor interactor = new EditTodoListInteractorImpl ( mExecutor , mMainThread , this , mPreviewRepository , uuid , title , position ) ; interactor . execute ( ) ; }
private void stopKeepAwake ( ) { if ( mKeepAwakeReceiver == null ) { return ; } unregisterReceiver ( mKeepAwakeReceiver ) ; ( ( AlarmManager ) getSystemService ( Context . ALARM_SERVICE ) ) . cancel ( mKeepAwakePendingIntent ) ; }
public void unselectAllThreads ( ) { this . batchSet . clear ( ) ; this . notifyDataSetChanged ( ) ; }
public VersionedRook renameBook ( Uri fromUri , String name ) throws IOException { SystemClock . sleep ( SLEEP_FOR_STORE_BOOK ) ; return localDbRepo . renameBook ( fromUri , name ) ; }
public long getItemId ( int position ) { return products . get ( position ) . getProduct ( ) . getId ( ) ; }
public void update ( ) { if ( hit || bodyDst . left > screenWidth ) { canDraw = false ; hit = false ; bodyDst . set ( - screenWidth , 0 , - screenWidth + width , 0 ) ; } }
public Integer getCommentVerticalBarColor3 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_3 , getDefaultColor ( "#02DFEE" , "#00B8DA" , "#00B8DA" ) ) ; }
private int getActualCategoryType ( long parentId , Category category ) { int type = category . type ; if ( parentId > 0 ) { Category parent = getCategory ( parentId ) ; type = parent . type ; } return type ; }
public int getShortCutId ( ) { return shortCutId ; }
public void switchFavorite ( ) { disposables . add ( favoriteInteractor . switchCurrentFavorite ( ) . subscribeWith ( new RxUtils . ErrorCompletableObserver ( view ) ) ) ; }
public void postKeyRepeated ( int keyCode ) { Display . postEvent ( CanvasEvent . getInstance ( this , CanvasEvent . KEY_REPEATED , convertKeyCode ( keyCode ) ) ) ; }
public SectionsPagerAdapter ( FragmentManager fm ) { super ( fm ) ; RANK_TITLES = getResources ( ) . getStringArray ( R . array . rank_types ) ; }
public void onFailure ( Call < Account . LoginRespond > call , Throwable t ) { callback . onError ( t ) ; }
public void removeOnPageChangeListener ( ViewPager . OnPageChangeListener listener ) { if ( listener != this . listener ) binding . miPager . removeOnPageChangeListener ( listener ) ; }
public void onSortSelected ( final PostCommentListingURL . Sort order ) { }
public void onBindViewHolder ( InquiryViewHolder inquiryViewHolder , int i ) { final Stocktake model = mStocktakeList . get ( i ) ; inquiryViewHolder . bind ( model ) ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . CheckBox" ) ; info . setCheckable ( true ) ; info . setChecked ( isChecked ( ) ) ; }
public void setStrokeColor ( @ ColorInt int strokeColor ) { this . strokeColor = strokeColor ; setup ( ) ; }
public static long getCombinedGroupId ( long groupId ) { return ExpandableAdapterHelper . getCombinedGroupId ( groupId ) ; }
public TypefaceSpan ( Typeface typeface ) { mTypeface = typeface ; }
public boolean onResourceReady ( Bitmap resource , Object model , Target < Bitmap > target , DataSource dataSource , boolean isFirstResource ) { doAfterAnimation ( ) ; return false ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . item_news , parent , false ) ; return new NewsHolder ( view ) ; }
public HeaderBinder ( TagEntry viewObject ) { tagEntry = viewObject ; }
public void onServerUpdate ( Packet . Update update ) { }
public void onConfigureFailed ( final CameraCaptureSession cameraCaptureSession ) { showToast ( "Failed" ) ; }
public int getIcon ( Context context ) { return RecognitionServiceManager . getServiceIcon ( context , mComponentName ) ; }
public void enableSwipeRefresh ( boolean enabled ) { mSwipeRefreshLayout . setEnabled ( enabled ) ; }
public static boolean isRun ( ) { return gPrefs . getBoolean ( RUN_NOTIFICATION , false ) ; }
public void onDowngrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + RecentStoreColumns . NAME ) ; onCreate ( db ) ; }
public AboutBuilder addShareAction ( int subject , int message ) { return addShareAction ( context . getString ( subject ) , context . getString ( message ) ) ; }
public void clearEntries ( ) { _entries . clear ( ) ; _shownEntries . clear ( ) ; notifyDataSetChanged ( ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( BranchesListener ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( activity . toString ( ) + " must implement BranchesListener" ) ; } }
public void initOptions ( ) { view . initOptions ( mapInteractor . getMapMode ( ) ) ; }
public void smoothScrollLayoutTo ( int y ) { mScrollView . smoothScrollTo ( mScrollView . getScrollX ( ) , y ) ; }
public final void updateHomeLayout ( ) { updateSearchBar ( true ) ; updateDock ( true , 0 ) ; updateDesktopIndicator ( true ) ; }
public void onData ( NetworkDevice networkDevice , SensorData sensorData ) { newLine . addPoint ( sensorData . data [ axis ] ) ; repaint ( ) ; }
public static EditDialogFragment newInstance ( final Actions action ) { return EditDialogFragment . newInstance ( action , "" ) ; }
public void onBackPressed ( ) { if ( ! this . recalculating ) { new SettingsStorage ( this . getApplicationContext ( ) , settings ) . store ( ) ; super . onBackPressed ( ) ; this . finish ( ) ; } return ; }
public void doPowerOff ( ) { if ( ! mReady ) { return ; } mPowerWait . lock ( ) ; mEventQueue . add ( new Event . KeyKegsEvent ( 120 + 0x80 , true ) ) ; }
public void before ( ) { function = mock ( Runnable . class ) ; }
public void addPoint ( MapPoint point ) { markers . add ( createMarker ( map , point , this ) ) ; update ( ) ; }
public Date getCreatedAt ( ) { return getInitialComment ( ) . getCreatedAt ( ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . LOLLIPOP ) inflater . inflate ( R . menu . configmenu , menu ) ; }
public int compare ( MoodlePost lhs , MoodlePost rhs ) { if ( lhs . getCreated ( ) > rhs . getCreated ( ) ) return 1 ; else return - 1 ; }
public String getHighlightsString ( ) { return String . valueOf ( highlights ) ; }
public static long hoursToMs ( long hours ) { return minsToMs ( hours * 60 ) ; }
private void showKeyChangedWarning ( ) { showKeyWarning ( R . string . warning_public_key_changed , R . string . title_public_key_changed_warning , R . string . msg_public_key_changed_warning ) ; }
public ItemDecoration ( int gridSpacingPx , int gridSize ) { mSizeGridSpacingPx = gridSpacingPx ; mGridSize = gridSize ; }
public void onResponse ( Call < R > call , Response < R > response ) { Log . d ( LOG_LABEL , "onResponse" ) ; postValue ( new ApiResponse <> ( response ) ) ; }
public static String getFullTag ( String tag ) { if ( DEFAULT_LOG_TAG . equals ( tag ) ) return tag ; else return DEFAULT_LOG_TAG + " : " + tag ; }
public void onClick ( View v ) { parent . onClickMemoryKeyButton ( Constants . MEM_CLEAR ) ; }
public CalendarQueryRow setEnd ( Object obj ) { return setColumn ( CalendarContract . Instances . END , obj ) ; }
public void run ( ) { finish ( ) ; }
private void openDrawer ( ) { if ( drawerLayout == null ) { return ; } drawerLayout . openDrawer ( menuFrame ) ; }
public String tileDesc ( ) { return Game . getVar ( R . string . Foliage_Info ) ; }
public BoundingBox getBounds ( ) { return bounds ; }
public void sortByComparator ( Comparator < EventViewModel > comparator ) { currentComparator = comparator ; Collections . sort ( events , comparator ) ; notifyDataSetChanged ( ) ; }
public double [ ] getStripArea ( ) { return stripArea . clone ( ) ; }
public void notifyFinishAttaching ( ) { getPresenter ( ) . getTopMovieAndDisplay ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `subscribed` INTEGER" ) ; }
public void onDraftUpdated ( boolean success ) { }
public void testShazam ( ) { Lyrics result = idDecoder . doInBackground ( "http : assertNotNull ( result ) ; assertEquals ( result . getArtist ( ) , "Tycho" ) ; assertEquals ( result . getTrack ( ) , "A Walk" ) ; }
public boolean onLongClick ( View v ) { currentCalculation += "lcm ( " ; displayCalculation += "LCM ( " ; calculationView . setText ( displayCalculation ) ; return true ; }
public static int getTitleStringResId ( int pos ) { return PAGER_MODELS . get ( pos ) . getTitleStringResId ( ) ; }
public void cancelAllRequests ( Context context ) { LimitingRequestQueue . getInstance ( context ) . cancelAll ( request -> true ) ; }
public void setWidth ( float width ) { sizeMetrics . getWidthMetric ( ) . setValue ( width ) ; }
public static LottieComposition fromJsonSync ( @ SuppressWarnings ( "unused" ) Resources res , JSONObject json ) { return LottieCompositionFactory . fromJsonSync ( json ) . getValue ( ) ; }
public RealmResults < Screening > getScreenings ( ) { return mScreenings ; }
public void onPrepared ( MediaPlayer mp ) { if ( mp != mPlayer ) return ; changeStatusTo ( STATUS_PREPARED ) ; if ( mSupposedToPlay ) { mPlayer . start ( ) ; } }
public int getCount ( ) { return mWdManager . getPeerCount ( ) ; }
private void failed ( String message ) { log . v ( TAG , "failed | " + message ) ; notificationMessage . snackBar ( activity , message ) ; close ( false ) ; }
public DecimalWidget createWidget ( ) { return new DecimalWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" , readOnlyOverride ) ) ; }
public CustomAdapter ( ArrayList < Fixture > fixtures , Context context ) { this . fixtures = fixtures ; this . context = context ; mAuth = FirebaseAuth . getInstance ( ) ; userId = mAuth . getCurrentUser ( ) . getUid ( ) ; }
public boolean supportsLayer ( File file ) { return MbtilesFile . getLayerType ( file ) == LayerType . RASTER ; }
public void testMinimalEncoder2 ( ) throws Exception { verifyMinimalEncoding ( "AB" , "ALPHANUMERIC ( AB ) , TERMINATOR ( ) " , null , false ) ; }
public void run ( ) { notifyLoadSucceeded ( filePaths , fileAudioPaths , fileImagePaths , fileProviderListener ) ; }
public boolean isFinished ( ) { return finished ; }
public UPS ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
private void clear ( ) { Canvas canvas = holder . lockCanvas ( ) ; if ( canvas != null ) { canvas . drawBitmap ( background , 0 , 0 , backPaing ) ; holder . unlockCanvasAndPost ( canvas ) ; } }
public static void getPendingRecovery ( @ NonNull String userId , @ NonNull OstJsonApiCallback callback ) { getAsyncQueue ( ) . submit ( new Runnable ( ) { @ Override public void run ( ) { execGetBalance ( userId , callback ) ; } } ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { if ( dy > 0 || dy < 0 && fab . isShown ( ) ) fab . hide ( ) ; }
public static String getEventCode ( String matchOrEventOrDistrictKey ) { Matcher m = eventKeyPattern . matcher ( matchOrEventOrDistrictKey ) ; return m . find ( ) ? m . group ( ) . toUpperCase ( Locale . US ) : "" ; }
public void onConnectionFailed ( ConnectionResult result ) { onConnectionEvent . onConnectedFail ( ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { Group g = groupsAdapter . getItem ( ( int ) info . id ) ; TracksDataSource . getInstance ( ) . deleteGroup ( g ) ; loadGroups ( ) ; }
private float viewToSourceX ( float vx ) { if ( vTranslate == null ) { return Float . NaN ; } return ( vx - vTranslate . x ) /scale ; }
private void openPreview ( ItemManager . Item item ) { mContext . startActivity ( new Intent ( mContext , ThreadPreviewActivity . class ) . putExtra ( ThreadPreviewActivity . EXTRA_ITEM , item ) ) ; }
public TextSizeScale getTextSizeScale ( ) { return TextSizeScale . fromPreferenceValue ( sharedPreferences . getString ( PREF_TEXT_SIZE_SCALE , "" ) ) ; }
private void reset ( ) throws UsbException { final byte [ ] dummy = new byte [ REPORT_TYPE_FEATURE_DATA_SIZE ] ; dummy [ REPORT_TYPE_FEATURE_DATA_SIZE - 1 ] = DUMMY_REPORT ; this . write ( Slot . DUMMY , dummy ) ; }
private void startReceivers ( ) { for ( UUID uuid : SERVICE_UUIDS ) { BTReceiver btReceiver = new BTReceiver ( this , context , uuid ) ; btReceivers . add ( btReceiver ) ; btReceiver . start ( ) ; } }
public void restartActivity ( ) { ( ( QuranApplication ) getApplication ( ) ) . refreshLocale ( true ) ; Intent intent = getIntent ( ) ; finish ( ) ; startActivity ( intent ) ; }
public void setAdapter ( BubblePickerAdapter adapter ) { mAdapter = adapter ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( url ) ; dest . writeString ( cloudinaryId ) ; dest . writeInt ( width ) ; dest . writeInt ( height ) ; }
public void waitForOpening ( ) { clear ( ) ; for ( Book book : Collection . recentBooks ( ) ) { new BookWithAuthorsTree ( this , book ) ; } }
private void removeAllTileOverlays ( ) { for ( Layer l : layer_stack ) map . removeTile ( tileOverlays . get ( l . getIdentifier ( ) ) , l ) ; tileOverlays . clear ( ) ; }
public Decks getDecks ( ) { return mDecks ; }
public CampusMapView ( Context context , AttributeSet attr ) { super ( context , attr ) ; initialise ( ) ; }
public void setBrushSize ( int size ) { brushSize = ScreenUtils . dpToPx ( context , size ) ; paint . setStrokeWidth ( brushSize ) ; }
public void onSingleClick ( View view ) { Reddit . appRestart . edit ( ) . remove ( "forceoffline" ) . commit ( ) ; Reddit . forceRestart ( MainActivity . this ) ; }
public void setNewRoundStage ( ) { m_GameStage = GameStages . GameNotStarted ; invalidate ( ) ; }
private static boolean hasPermission ( Context context , String permission ) { return ContextCompat . checkSelfPermission ( context , permission ) == PackageManager . PERMISSION_GRANTED ; }
public String lessText ( String text ) { if ( text == null ) return "" ; if ( maxTextLength >= 0 && text . length ( ) > maxTextLength ) return text . substring ( 0 , maxTextLength ) ; return text ; }
public void register ( ) { super . register ( ) ; NfcAdapter adapter = manager . getDefaultAdapter ( ) ; if ( adapter != null && adapter . isEnabled ( ) ) onDrawableUpdate ( 0 ) ; }
public SavedState ( int [ ] adapterSavedState ) { this . adapterSavedState = adapterSavedState ; }
public long getDate ( ) { return date ; }
public int hashCode ( ) { return Objects . hash ( _id , institutionId , location , measurements , timestamp , climatized ) ; }
public AddMovieViewModel ( AppDatabase database ) { movies = database . movieDao ( ) . getFavoriteMoviesFromDB ( ) ; }
public static void setBoolean ( Activity context , String key , boolean b ) { getEditableSharedPreferences ( context ) . putBoolean ( key , b ) . apply ( ) ; }
private synchronized void setLoaded ( ) { status = Status . LOADED ; notifyAll ( ) ; }
public boolean hasInputDirection ( ) { return ( ( bitField0_ & 0x00000008 ) == 0x00000008 ) ; }
public AirplaneModeReceiver ( AirplaneModeIconData iconData ) { super ( iconData ) ; }
public void setOnPageChangeListener ( ViewPager . OnPageChangeListener listener ) { mViewPagerPageChangeListener = listener ; }
public BubblePickerAdapter getAdapter ( ) { return mAdapter ; }
public PostList load ( ) throws Exception { return getService ( ) . getBlog ( ConnectionManager . getInstance ( ) . loginResult . login ) ; }
public DialogsInteractor ( INetworker networker , IStores repositories ) { this . networker = networker ; this . repositories = repositories ; }
private int generateAnnotation ( int planeNo , boolean isHead ) { int annotation = 1 ; int bitsShifted = 2 * planeNo ; if ( isHead ) bitsShifted ++ ; annotation = annotation << bitsShifted ; return annotation ; }
public EventCalendarView ( Context context ) { super ( context ) ; }
public void clearAll ( ) { mContext . getContentResolver ( ) . delete ( HistoryContract . HistoryEntry . CONTENT_URI , null , null ) ; }
public void onBindViewHolder ( @ NonNull AccountChooserViewHolder holder , int position ) { holder . bind ( entityToLocalAccount ( localAccounts . get ( position ) ) , targetAccountConsumer ) ; }
public void accept ( @ NonNull Boolean needLoading ) throws Exception { setLoading ( true , viewRef ) ; }
public int getVersion ( ) { return version ; }
private static Object getObject ( Field field , Object object ) { field . setAccessible ( true ) ; try { return field . get ( object ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } return null ; }
public void onRemoveSuccess ( ) { AnswersProxy . get ( ) . logEvent ( "Remove Success" ) ; Timber . d ( "Remove success . " ) ; if ( isFinishing ( ) ) return ; stopProgress ( ) ; fetchBackups ( ) ; }
public static String getPatchFileUrl ( String widthParam , int toVersion ) { return IMG_HOST + "patches/v" + toVersion + "/patch" + widthParam + "_v" + toVersion + " . zip" ; }
public void run ( ) { MessagesController . getInstance ( ) . loadFullChat ( channel . id , 0 , true ) ; }
public void openFileChooser ( ValueCallback < Uri > uploadMsg , String acceptType , String capture ) { mActivity . openFileChooser ( uploadMsg ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . activity_our_vision , container ) ; }
public void onSortValidator ( ) { WUtil . onSortByOKValidatorPower ( mTopValidators ) ; }
public void setName ( String name ) { TextView nameTextView = ( TextView ) view . findViewById ( R . id . item_person_list_name ) ; nameTextView . setText ( name ) ; }
public void onBackClick ( ) { mInterface . setFullScreenMode ( false ) ; }
public void onReceive ( Context context , Intent intent ) { asyncTask . cancel ( true ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_phone_groupCall . TLdeserialize ( stream , constructor , exception ) ; }
public void onPageSelected ( int position ) { e . onNext ( QuranInfo . getPageFromPos ( position , isDualPages ) ) ; }
public List < String > results ( ) { return Collections . unmodifiableList ( results ) ; }
public Boolean isEventScheduledByLoggedMember ( int eventId ) { return scheduleableInteractor . isEventScheduledByLoggedMember ( eventId ) ; }
public void loadUrl ( String url , Map < String , String > additionalHttpHeaders ) { addJavascriptInterface ( ) ; super . loadUrl ( url , additionalHttpHeaders ) ; }
private void onAttachmentsAdded ( List < Pair < Integer , AbsModel >> pairs ) { onDataReceived ( create ( pairs ) ) ; }
public void onLogWarning ( String message ) throws RemoteException { mMessageLog . add ( new IChatMessage . InfoMessage ( IChatMessage . InfoMessage . Type . WARNING , message ) ) ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { String tag = mTagsList . get ( position ) ; holder . mTagItemCheckedTextView . setText ( tag ) ; holder . mTagItemCheckedTextView . setChecked ( mCurrentTags . contains ( tag ) ) ; }
public void updateSetting ( String key , String value ) { Connection . this . handleWindowSettingsChanged ( window , key , value ) ; }
public TouchToSelectView ( Context context ) { super ( context ) ; }
public void openDocPreview ( int accountId , @ NonNull Document document ) { PlaceFactory . getDocPreviewPlace ( accountId , document ) . tryOpenWith ( getActivity ( ) ) ; }
public Long getLandCover ( ) { return landCover ; }
public void onClick ( ) { callback . onTagClicked ( position . get ( ) , this ) ; }
public List getFieldOrder ( ) { return Arrays . asList ( "op_count" , "op" ) ; } } public static class OpInfo extends Capstone . OpInfo {
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setHasOptionsMenu ( true ) ; permissions = new Permissions ( getActivity ( ) ) ; configureAppbar ( getActivity ( ) , true ) ; }
public void onBackPressed ( ) { showAlertDialog ( ) ; }
public ActiveVisitsRecyclerViewAdapter ( Context context , List < Visit > items ) { this . mContext = context ; this . mVisitList = items ; }
private void setErrPwNone ( ) { mTvNameNone . setVisibility ( View . GONE ) ; mTvNameAlready . setVisibility ( View . GONE ) ; mTvLengthErr . setVisibility ( View . GONE ) ; mTvPwMatch . setVisibility ( View . GONE ) ; }
public void run ( ) { MessagesController . getInstance ( ) . getChannelDifference ( channelId , newDialogType , taskId ) ; }
public void onLoaderReset ( Loader < List < File >> loader ) { updateAdapter ( new LinkedList <> ( ) ) ; }
public void run ( ) { MessagesStorage . getInstance ( ) . getCachedPhoneBook ( true ) ; }
public void onResume ( ) { super . onResume ( ) ; editDescriptionText . setText ( getActivity ( ) . getString ( R . string . drawer_edit ) ) ; settingsDescriptionText . setText ( getActivity ( ) . getString ( R . string . action_show_settings ) ) ; }
public void getAllAvailableSensorTypes ( List < Integer > sensors ) { for ( int i = 0 ; i < listenedSensors . size ( ) ; i ++ ) { sensors . add ( listenedSensors . keyAt ( i ) ) ; } }
public AdaptiveActionsToolbar ( @ NonNull Context context ) { this ( context , null ) ; }
private PendingIntent createContentIntent ( final Conversation conversation ) { return createContentIntent ( conversation . getUuid ( ) , null ) ; }
public TourDownloadRetryAction ( Button button , TourDetailPresenter presenter ) { super ( button ) ; this . presenter = presenter ; text = "Retry Download" ; enable = true ; init ( ) ; }
public void goBack ( ) { if ( isAdded ( ) && canGoBack ( ) ) { getActivity ( ) . getSupportFragmentManager ( ) . popBackStack ( ) ; } }
public void onTryLimitReached ( ) { counterCallback . onTryLimitReached ( FingerprintDialog . this ) ; }
public void run ( ) { try { final R result = callable . call ( ) ; handler . post ( new RunnableTaskForHandler ( callable , result ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public NoteCard ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initialize ( context , attrs , defStyleAttr ) ; }
public boolean matchesSafely ( View view ) { ViewParent parent = view . getParent ( ) ; return parent instanceof ViewGroup && parentMatcher . matches ( parent ) && view . equals ( ( ( ViewGroup ) parent ) . getChildAt ( position ) ) ; }
public void goToAlbumCreation ( int accountId , int ownerId ) { PlaceFactory . getCreatePhotoAlbumPlace ( accountId , ownerId ) . targetTo ( this , REQUEST_CREATE_ALBUM ) . tryOpenWith ( getActivity ( ) ) ; }
public RemoteViews getLoadingView ( ) { try { return new RemoteViews ( context . getPackageName ( ) , R . layout . schedule_lessons_widget_item_loading ) ; } catch ( Exception e ) { return null ; } }
private static IHttpClientFactory mFactoryInstance = new IHttpClientFactory ( ) { @ Override public HttpClient createHttpClient ( ) { final DefaultHttpClient client = new DefaultHttpClient ( ) ; client . getParams ( ) . setParameter ( CoreProtocolPNames . USER_AGENT , "osmdroid" ) ; return client ; } } ;
public void setStopwatchTimeLastTime ( @ NonNull String text ) { layoutStopwatchTime . setLastText ( text ) ; }
public void answerTextViewShouldShowCorrectAnswer ( ) { GeoPointWidget widget = createWidget ( promptWithAnswer ( answer ) ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) , GeoWidgetUtils . getAnswerToDisplay ( widget . getContext ( ) , answer . getDisplayText ( ) ) ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { phone_call = PhoneCall . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public LiveData < ListFragment . ViewWrapper > actionIsTrackInaccessible ( ) { return mTrackInaccessible ; }
public static void main ( String [ ] args ) { SoundHandler . get ( ) . loadAudios ( new HashMap < String , Sound > ( ) ) ; }
public ArrayList < IProfile > getProfiles ( ) { return mAccountHeaderBuilder . mProfiles ; }
private boolean playServicesAvailable ( ) { return GoogleApiAvailability . getInstance ( ) . isGooglePlayServicesAvailable ( mXmppConnectionService ) == ConnectionResult . SUCCESS ; }
public void onPageStarted ( android . webkit . WebView view , String url , Bitmap favicon ) { super . onPageStarted ( view , url , favicon ) ; if ( getActivity ( ) != null ) { getActivity ( ) . supportInvalidateOptionsMenu ( ) ; } }
public void remove ( String key ) { synchronized ( cacheLock ) { Entry e = entries . remove ( key ) ; if ( e == null ) return ; size -= e . size ; } }
public void setMaxFrameBeforeComposition ( ) { LottieValueAnimator animator = createAnimator ( ) ; animator . setMaxFrame ( 100 ) ; animator . setComposition ( composition ) ; assertEquals ( 100 . 0f , animator . getMaxFrame ( ) ) ; }
public void onDestroy ( ) { connectivityDetector = null ; super . onDestroy ( ) ; }
public void onClick ( View widget ) { listener . tagClicked ( fMapTag , word ) ; if ( AndroidUtils . hasTouchScreen ( ) ) { Selection . removeSelection ( ( Spannable ) tvTags . getText ( ) ) ; } widget . invalidate ( ) ; }
private void saveStateAndUpdateUI ( Context context , ApplicationState state ) { state . save ( context ) ; updateAllWidgets ( context , state ) ; AlarmReceiver . updateNotifications ( context ) ; }
public void onClick ( View v ) { requestPermissions ( ) ; }
private void load ( boolean force ) { thread . run ( IGR , ( ) -> load ( force , null ) ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { this . threadPhotoRailView . setCursor ( masterSecret , glideRequests , null ) ; }
public static Factory getFactory ( ) { return new Factory ( ) { public CheapSoundFile create ( ) { return new CheapAAC ( ) ; } public String [ ] getSupportedExtensions ( ) { return new String [ ] { "aac" , "m4a" } ; } } ; }
public int getComputeNDays ( ) { return computeNDays ; }
public Converter ( @ NonNull String name , @ NonNull List < Unit > units ) { this ( name , units , null , 0 , "1" ) ; }
public void setAuthorName ( String authorName ) { this . authorName = StringUtils . notNullStr ( authorName ) ; }
public Cursor getSessionsViewData ( ) { SQLiteDatabase db = this . getWritableDatabase ( ) ; Cursor res = db . rawQuery ( "select date , location , time_spent , num_shoes , net_change from " + TABLE_NAME , null ) ; return res ; }
public final DrmSessionException getError ( ) { return state == STATE_ERROR ? lastException : null ; }
public void onCreate ( ) { super . onCreate ( ) ; setTheme ( R . style . Hydra_DayNight ) ; }
public void gotoDashboard ( long workflowId ) { goBack ( ) ; }
public void onSlidedDown ( View v ) { RadarChartView radar_chart = ( RadarChartView ) v . findViewById ( R . id . radar_chart ) ; if ( radar_chart != null ) { radar_chart . startAnimation ( ) ; } }
public static void deleteAll ( ) { LogDatabase . DAO . deleteAllDailyRecords ( ) ; LogDatabase . DAO . deleteAllKanaRecords ( ) ; LogDatabase . DAO . deleteAllAnswerRecords ( ) ; }
public void requestArticleHtml ( ) { mPresenter . loadArticleHtml ( ) ; }
public static Error deleteSymlinkFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , FileType . SYMLINK . getValue ( ) ) ; }
public WalletRealmObject getWallet ( ) { return this . wallet . getValue ( ) ; }
public int getEpisodeProductionCode ( ) { return mEpisodeProductionCode ; }
public static void createFtsTable ( SQLiteDatabase db ) { db . execSQL ( SQL_CREATE_NAMES_FTS ) ; logger . error ( "Populate fts" ) ; db . execSQL ( SQL_INSERT_NAMES_FTS ) ; logger . error ( "Finished populating fts" ) ; }
private String getDefaultPathFromPreferences ( ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) ; return preferences . getString ( FTPService . KEY_PREFERENCE_PATH , FTPService . DEFAULT_PATH ) ; }
public void onMetadataChanged ( @ Nullable MediaMetadata metadata ) { scrobbler . updateTrackInfo ( metadata ) ; }
public void seek ( long position ) { synchronizedHeaderData = 0 ; basisTimeUs = C . TIME_UNSET ; samplesRead = 0 ; sampleBytesRemaining = 0 ; }
public void changed ( ChangeEvent event , Actor actor ) { if ( TDGalaxy . onlineServices != null ) TDGalaxy . onlineServices . signOut ( ) ; game . preferences . changePref ( "autoSignIn" , false ) ; }
public static Boolean authenticate ( String name , String password , String url ) { return true ; }
public void onClick ( View v ) { final EditText editTextFilter = ( EditText ) findViewById ( R . id . EditTextFilter ) ; editTextFilter . setText ( "" ) ; }
public boolean sizeIn ( int min , int max , Integer integer ) { return integer != null && integer > min && integer < max ; }
public int getYear ( ) { return year ; }
public void start ( Attributes attributes ) { mBoard . setPage ( Integer . parseInt ( attributes . getValue ( Board . Xml . THREADS_ATTRIBUTE_PAGE ) ) ) ; }
public static Toast makeText ( Context context , @ StringRes int resId , int duration ) throws Resources . NotFoundException { return makeText ( context , context . getResources ( ) . getText ( resId ) , duration ) ; }
public void onProgressChanged ( SeekBar seekBar , int newProgress , boolean fromUser ) { if ( fromUser ) { swipingPosition = newProgress ; renderPosition ( swipingPosition ) ; } }
public String getNotificationType ( ) { JsonObject message = JSONManager . getasJsonObject ( convertToJson ( ) ) ; return message . get ( "message_type" ) . getAsString ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return User . TLdeserialize ( stream , constructor , exception ) ; }
public void onPositive ( MaterialDialog dialog ) { Intent intent = new Intent ( mainActivity , CategoryActivity . class ) ; intent . putExtra ( "noHome" , true ) ; startActivityForResult ( intent , TAG ) ; }
public Card getCard ( ) { return card ; }
public BookmarkCard ( Context context ) { this ( context , null ) ; }
public void setInputMethodAndSubtype ( final IBinder token , final InputMethodSubtype subtype ) { mImmWrapper . mImm . setInputMethodAndSubtype ( token , getInputMethodIdOfThisIme ( ) , subtype ) ; }
public void takePicture ( ) { sendMessage ( What . TAKE_PICTURE , 0 , 0 , null ) ; }
public static boolean isList ( int idx ) { int [ ] list = { 2 , 5 , 7 , 20 , 22 } ; return ( Arrays . binarySearch ( list , idx ) >= 0 ) ; }
public StorageProgressBarWrapper ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context ) ; }
public void onResume ( ) { super . onResume ( ) ; checkCalendarPermission ( ) ; }
public void onFailure ( final Call call , IOException e ) { Log . e ( TAG , "Failed to fetch item names from server " + serverUrl , e ) ; mNames . clear ( ) ; l . validationUnavailable ( ) ; }
public static int getOverlayTextColor ( ) { return overlayText [ Settings . colorMode ] ; }
public String getFormattedValue ( float value , AxisBase axis ) { if ( mValues . length < value - 1 ) { return mValues [ 0 ] ; } return mValues [ ( int ) value ] ; }
public Result getLastResult ( ) { return lastResult ; }
private void selectFromAccount ( long accountId ) { if ( accountId > 0 ) { Account account = em . getAccount ( accountId ) ; rateView . selectCurrencyFrom ( account . currency ) ; } }
public void onViewUrl ( String url ) { bottomSheetActivity . viewUrl ( url ) ; }
public static String toPlural ( long value , String text ) { text = String . format ( text , value ) ; if ( value > 1 ) { text += "s" ; } return text ; }
public MathEval setConstant ( String nam , double val ) { return setConstant ( nam , new Double ( val ) ) ; }
public void onResume ( ) { super . onResume ( ) ; Scene . setMode ( "levelsTest" ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; U . registerReceiver ( getActivity ( ) , homeToggleReceiver , Constants . ACTION_LAUNCHER_PREF_CHANGED ) ; }
public Pair < Integer , Integer > getCameraResolutionPref ( ) { return null ; }
public void onClick ( View v ) { Intent configIntent = new Intent ( MainActivity . this , TabActivity . class ) ; configIntent . putExtra ( "key" , 2 ) ; startActivity ( configIntent ) ; }
public void renamesKeys ( ) { initPrefs ( prefs , "colour" , "red" ) ; renameKey ( "colour" ) . toKey ( "couleur" ) . apply ( prefs ) ; assertPrefs ( prefs , "couleur" , "red" ) ; }
public void setOverallAlpha ( float alpha ) { mEntity . setOverallAlpha ( alpha ) ; }
public GGPlan getPlanByDate ( Date d ) { for ( GGPlan plan : this ) if ( plan . date . equals ( d ) ) return plan ; return null ; }
public static void playPreviousSong ( ) { if ( musicService != null ) { musicService . back ( true ) ; } }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "CREATE INDEX `index_message_ui_flagged` ON `message` ( `ui_flagged` ) " ) ; }
public void run ( ) { try { context . startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( TargetStore . STORE_URL + app_info . getPackageName ( ) ) ) ) ; } catch ( android . content . ActivityNotFoundException anfe ) { } }
private int score ( boolean win ) { return ( Statistics . goldCollected + Dungeon . hero . lvl * Dungeon . depth * 100 ) * ( win ? 2 : 1 ) ; }
public String toString ( ) { return String . format ( " [ %s ] [ %s ] [ Servings %s ] " , food . toString ( ) , day . toString ( ) , getServings ( ) ) ; }
public void run ( ) { walletFragment . onProgress ( text ) ; }
public NotificationData createFromParcel ( Parcel in ) { return new NotificationData ( in ) ; }
public void onSkipToNext ( ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessage . getMessage ( MsgType . NEXT ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public void vibrateVeryLong ( ) { if ( vibrationEnabled ) vibrator . vibrate ( VIBRATION_LENGTH_VERY_LOING ) ; }
private void unregisterReceiver ( ) { mLocalBroadcastManager . unregisterReceiver ( this ) ; }
public static TBLegalPersonDatabase newInstance ( Context context ) { return new TBLegalPersonDatabase ( context ) ; }
public int getTokenSplitGroupSize ( ) { return Integer . valueOf ( getString ( R . string . settings_key_split_group_size , R . string . settings_default_split_group_size ) ) ; }
public XMLPrefsManager . XMLPrefsList getValues ( ) { return defaultApps ; }
public int getCount ( ) { if ( isPlaceHolderAccount ( ) ) return 1 ; else return DEFAULT_NUM_PAGES ; }
public void setShowHint ( boolean value ) { mShowHint = value ; }
public void run ( ) { try { progressDialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , gridView , 0 , previewDelegate ) ; return super . onInterceptTouchEvent ( event ) || result ; }
private void bg2sFadeOut ( ) { aBg2s -= 0 . 075 ; if ( a <= 0 ) { a = 0 ; } bg2S . setAlpha ( a ) ; }
public CheapSoundFile create ( ) { return new CheapMP3 ( ) ; }
public void setUrl ( String url ) { this . mUrl = ( url == null ) ? "" : url ; }
public Fragment createFragment ( Object inAttachedData ) { refFragment = ( Fragment ) FileChooserFragmentC . newInstance ( ) ; return refFragment ; }
public ScannerView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; mScanner = null ; }
public void setCardBack ( ) { view . setImageBitmap ( background ) ; }
public void onClick ( View view ) { getActivity ( ) . getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . content_frame , new LoginFragment ( ) ) . commit ( ) ; }
public void setup ( ) { presenter = new SettingsPresenter ( mockTutorialsRepository ) ; presenter . attachView ( mockSettingsView ) ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { EntityContact c1 = prev . get ( oldItemPosition ) ; EntityContact c2 = next . get ( newItemPosition ) ; return c1 . equals ( c2 ) ; }
public void setGenericon ( String Genericon ) { mGenericon = StringUtils . notNullStr ( Genericon ) ; }
public int STR ( ) { return Scrambler . descramble ( STR ) ; }
public void onPause ( ) { super . onPause ( ) ; Log . w ( "myApp" , " [ # ] SettingsActivity . java - onPause ( ) " ) ; }
public String info ( ) { return isKnown ( ) ? desc ( ) : Utils . format ( Game . getVar ( R . string . Scroll_Info ) , rune ) ; }
public void run ( ) { bar . setVisibility ( View . VISIBLE ) ; }
public boolean canZoomInMoreY ( ) { return ( mScaleY < mMaxScaleY ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { Log . e ( TAG , "onStartCommand" ) ; super . onStartCommand ( intent , flags , startId ) ; return START_STICKY ; }
public void onClick ( View v ) { signIn ( ) ; }
private boolean isRtl ( ) { return mSettings . isArabicNames ( ) || QuranUtils . isRtl ( ) ; }
public void writeToParcel ( Parcel parcel , int i ) { parcel . writeInt ( roomId ) ; parcel . writeString ( reviewAuthor ) ; parcel . writeString ( reviewContent ) ; parcel . writeInt ( movieId ) ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createMammal ( data ) ; }
public synchronized void goBack ( ) { if ( mWebView != null ) { mWebView . goBack ( ) ; } }
public ZipFile getCbz ( ) { try { cbz = new ZipFile ( new File ( mFileName ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return cbz ; }
public static synchronized boolean safeToAddWordPressComAuthToken ( URL url ) { return UrlUtils . isHttps ( url ) && isWordPressCom ( url ) ; }
public void setMaxRefreshRate ( float refreshRate ) { sleepTime = ( long ) ( 1000 / refreshRate ) ; Log . d ( TAG , "Set Redrawer refresh rate to " + refreshRate + " ( " + sleepTime + " ms ) " ) ; }
private void startBreak ( ) { ContentValues values = getContentValues ( ) ; values . put ( Job . LAST_START_BREAK , Long . valueOf ( System . currentTimeMillis ( ) ) ) ; updateDatabase ( values ) ; updateFromCursor ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "eu . hithredin . easingdate . test" , appContext . getPackageName ( ) ) ; }
public void connectToMuse ( ) { connectHandler . postDelayed ( connectRunnable , 100 ) ; }
public String getAppInstallID ( ) { String id = Prefs . getAppInstallId ( ) ; if ( id == null ) { id = UUID . randomUUID ( ) . toString ( ) ; Prefs . setAppInstallId ( id ) ; } return id ; }
public void onDeleted ( Context context , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { TodayWidgetConfigureActivity . deleteTranslucentPref ( context , appWidgetId ) ; } }
public void setDataSource ( List < Movie > movieList ) { this . movies = movieList ; this . mCursor = null ; this . notifyDataSetChanged ( ) ; }
public void setPenaltyChargesOutstanding ( Integer penaltyChargesOutstanding ) { this . penaltyChargesOutstanding = penaltyChargesOutstanding ; }
public void onRequestSuccess ( TagList tags ) { Log . d ( "TAG" , "tags : " + tags ) ; if ( tags != null ) { mTagsListAdapter . clear ( ) ; mTagsListAdapter . addAll ( tags ) ; mTagsListAdapter . notifyDataSetChanged ( ) ; } }
public static String getRandomDefaultMessage ( Context context ) { return getMessageToDisplay ( context , R . array . default_messages , MOST_RECENT_DEFAULT_MESSAGE_INDEX_KEY ) ; }
public IqPacket retrieveBookmarks ( ) { return retrieve ( Namespace . BOOKMARK , null ) ; }
public Time_t ( int sec , int usec ) { this . sec = sec ; this . usec = usec ; }
public void onPermissionDenied ( String reason ) throws RemoteException { AlertDialog . Builder adb = new AlertDialog . Builder ( PlumbleActivity . this ) ; adb . setTitle ( R . string . perm_denied ) ; adb . setMessage ( reason ) ; adb . show ( ) ; }
public static boolean getIsSigned ( ) { return isSigned ; }
public void onClick ( DialogInterface dialog , int which ) { LevePolaireResultsActivity . this . savePoints ( ) ; LevePolaireResultsActivity . this . adapter . notifyDataSetChanged ( ) ; }
public void onSaveSuccessful ( ) { if ( mCloseAfterSuccessfulSave ) { finish ( ) ; } mKeyChanged = false ; }
public static IStickersInteractor createStickersInteractor ( ) { return new StickersInteractor ( Injection . provideNetworkInterfaces ( ) , Injection . provideRepositories ( ) . stickers ( ) ) ; }
public void setBool ( String key , boolean value ) { set ( key , value?"true" : "false" ) ; }
public boolean hasResponseSongFileChunk ( ) { return ( ( bitField0_ & 0x02000000 ) == 0x02000000 ) ; }
public Conversation getConversation ( ) { return this . conversation ; }
public static void slideLeft ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . slide_left_enter , R . anim . slide_left_exit ) ; }
public void switchActivities ( int c ) { Intent intent = new Intent ( ColorPickerMainActivity . this , ConvertMainActivity . class ) ; intent . putExtra ( "color" , colorUtil . colorToHex ( c ) ) ; startActivity ( intent ) ; }
public LifecycleOwner getViewLifecycle ( ) { return this ; }
public static void setupChart ( @ NonNull LineChart chart , boolean small ) { setupChart ( chart , small , 0 ) ; }
public static String getHostFromUrl ( String url ) { Uri uri = Uri . parse ( url ) ; return uri . getHost ( ) ; }
private void finishWithSuccess ( Uri uri ) { ImageController . passResult ( uri ) ; finish ( ) ; }
public static CommandResult execCommand ( String [ ] commands , boolean isRoot ) { return execCommand ( commands , isRoot , true ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( user_id ) ; stream . writeString ( phone ) ; }
private static String getRandomMealsQuery ( int size ) { return "SELECT " + _ID + " , " + columnName + " , " + columnRecipe + " FROM " + tableName + " ORDER BY RANDOM ( ) LIMIT " + size ; }
public YValueMarker ( Number value , String text ) { super ( value , text , new XPositionMetric ( 3 , XLayoutStyle . ABSOLUTE_FROM_LEFT ) ) ; }
public void onImeBack ( ) { mIsKeyboardOpen = false ; showActionBarIfNeeded ( ) ; }
public void removeTabs ( ) { tabsContainer . removeAllViews ( ) ; tabCount = 0 ; currentPosition = 0 ; }
public void onQuitPressed ( ) { stopGamepadInputWatcher ( ) ; getGame ( ) . showMainMenu ( ) ; }
public InspiracaoEntity getInspiration ( long id ) { DatabaseHelper helper = new DatabaseHelper ( contex ) ; RuntimeExceptionDao < InspiracaoEntity , String > simpleDao = helper . getInspirationSimpleDataDao ( ) ; return simpleDao . queryForId ( String . valueOf ( id ) ) ; }
public static String get ( ) { return android . text . TextUtils . join ( "\n" , protocol ) ; }
public void run ( ) { AppDatabase db = AppDatabase . getAppDatabase ( getActivity ( ) ) ; db . investigationDao ( ) . delete ( thisinvestigation ) ; ( ( MainActivity ) getActivity ( ) ) . switchFragment ( AppointmentsSection . newInstance ( ) ) ; }
public StockViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = getLayoutInflater ( ) . inflate ( R . layout . stock_media_picker_thumbnail , parent , false ) ; return new StockViewHolder ( view ) ; }
public RefreshTask ( Repository repository , HashMap < String , PingTask > active , ExecutorService executor ) { mRepository = repository ; mActive = active ; mExecutor = executor ; }
private void selectApp ( ) { Intent intent = U . getThemedIntent ( this , PersistentShortcutSelectAppActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; intent . putExtra ( Constants . PREF_QS_TILE , tileNumber ( ) ) ; startActivityAndCollapse ( intent ) ; }
public String provideBaseUrl ( ) { return Config . BASE_URL ; }
public int onGetNextFocusId ( CustomEditText owner , FocusChangeIf . NextFocusType focusType ) { return parentFormula . getNextFocusId ( text , focusType ) ; } ;
public void playAudio ( AudioContentViewControl view , long messageId ) { if ( acquireAudioFocus ( ) ) { view . play ( ) ; getAudioFragment ( ) . startPlaying ( ) ; setAudioStatus ( AudioContentView . STATUS_PLAYING ) ; startMediaPlayerUpdater ( view ) ; } }
public void onErrorResponse ( VolleyError error ) { Log . d ( Constants . LOG_TAG , "Error : " + new String ( error . getMessage ( ) ) ) ; handleFailure ( ) ; }
public AboutBuilder addAndroidLink ( String url ) { return addLink ( R . mipmap . android , R . string . android , url ) ; }
private void releaseTts ( ) { if ( tts != null ) { tts . stop ( ) ; tts . shutdown ( ) ; } }
public void endGame ( ) { aGrid . startAnimation ( - 1 , - 1 , FADE_GLOBAL_ANIMATION , NOTIFICATION_ANIMATION_TIME , NOTIFICATION_DELAY_TIME , null ) ; if ( score >= highScore ) { highScore = score ; recordHighScore ( ) ; } }
private void ensureServiceRunning ( ) { if ( ! isMyServiceRunning ( MainService . class ) ) { Intent i = new Intent ( this , StartReceiver . class ) ; sendBroadcast ( i ) ; } updateRunningSP ( true ) ; mServiceRunning = true ; }
public void onItemPinned ( int position ) { ( ( MainActivity ) getActivity ( ) ) . onItemPinned ( position ) ; }
public TetroidEditor ( Context context ) { super ( context ) ; }
public AwardRenderer provideAwardRenderer ( APICache cache ) { return Mockito . mock ( AwardRenderer . class ) ; }
public PduBody getBody ( ) { return body ; }
public void top ( ) { mBinding . listWork . smoothScrollToPosition ( 0 ) ; }
private void beforeSave ( DataSupport baseObj , List < Field > supportedFields , ContentValues values ) throws SecurityException , IllegalArgumentException , NoSuchMethodException , IllegalAccessException , InvocationTargetException { putFieldsValue ( baseObj , supportedFields , values ) ; putForeignKeyValue ( values , baseObj ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; Log . i ( "EXIT" , "Destroyed sync service ! " ) ; sendBroadcast ( new Intent ( " . services . TimetableRestarterBroadcastReceiver" ) ) ; stopTimer ( ) ; }
private void init ( Context context ) { this . mContext = context ; View view = LayoutInflater . from ( context ) . inflate ( R . layout . commmunity_filter_view , this ) ; ButterKnife . bind ( this , view ) ; }
public void onStart ( ) { super . onStart ( ) ; registerReceiver ( mReceiver , new IntentFilter ( ConnectivityManager . CONNECTIVITY_ACTION ) ) ; mDispatcher . register ( this ) ; EventBus . getDefault ( ) . registerSticky ( this ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "university" ) ) { return ; } history . clear ( ) ; }
private Card _newCard ( Note note , JSONObject template , int due , int did ) { boolean flush = true ; return _newCard ( note , template , due , did , flush ) ; }
public Object getItem ( int i ) { return stickers . get ( i ) ; }
public static boolean reliableService ( Context context ) { try { return getBooleanPreference ( context , "pref_reliable_service" , true ) ; } catch ( Exception e ) { return false ; } }
private void processSendIntent ( ) { SendIntentReceiver . processSendIntent ( this , sendIntent , mFragment ) ; sendIntent = null ; }
public static Boolean getBooleanPreferences ( Context ctx , String key ) { SharedPreferences pref = ctx . getSharedPreferences ( "pref" , ctx . MODE_PRIVATE ) ; return pref . getBoolean ( key , false ) ; }
public void onMapClick ( LatLng latLng ) { if ( mDirectionsPolyLine != null ) { mDirectionsPolyLine . remove ( ) ; } }
public @ NonNull String getDatabaseFolder ( ) { return DATABASE_FOLDER ; }
public static String getStatsWidgetsKeys ( ) { return getString ( PrefKey . STATS_WIDGET_KEYS_BLOGS ) ; }
public Builder withData ( int labelId ) { TextView labelView = ( TextView ) v . findViewById ( R . id . data ) ; labelView . setText ( labelId ) ; return this ; }
private void changeNoteReminder ( ) { boolean isChecked = binding . noteReminderPrefs . isChecked ( ) ; binding . noteReminderPrefs . setChecked ( ! isChecked ) ; mPrefs . setNoteReminderEnabled ( ! isChecked ) ; }
private static String getDbFilename ( String type , RedditAccount user ) { return General . sha1 ( user . username . getBytes ( ) ) + "_" + type + "_subreddits . db" ; }
public ArrayList < Machine > getAllMachines ( ) { return allMachines ; }
private String formatUsername ( AccountResult result ) { return String . format ( " @ %s" , result . account . getUsername ( ) ) ; }
public int getItemCount ( ) { return dialogs . size ( ) + 1 ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { view = inflater . inflate ( R . layout . total_view , container , false ) ; return view ; }
public static void clearVideoQueue ( ) { mCurrentVideoQueue = new ArrayList <> ( ) ; }
private void updateCurrentSong ( ) { impl . updateCurrentSong ( this , MusicPlayerRemote . getCurrentSong ( ) ) ; }
public void setFloors ( int floors ) { this . floors = floors ; }
private String getWhereForJoinTableToDelete ( DataSupport baseObj ) { StringBuilder where = new StringBuilder ( ) ; where . append ( getForeignKeyColumnName ( baseObj . getTableName ( ) ) ) ; where . append ( " = ?" ) ; return where . toString ( ) ; }
public PagerAdapter ( FragmentManager fm , List < F > fragments ) { super ( fm ) ; this . fragments = fragments ; }
private void addFiltered ( String filterText ) { filtered . clear ( ) ; addRecent ( filterText ) ; for ( App app : appsManager . getPkg ( ) ) { addFiltredIfMatch ( filterText , app ) ; } }
public String getAddress ( ) { return address ; }
public void onClick ( View v ) { ipField . setText ( foundIP ) ; ipField . setSelection ( ipField . getText ( ) . length ( ) ) ; }
public boolean shouldFetchPages ( ) { return mPerInstallationPrefs . getBoolean ( Constants . PREF_SHOULD_FETCH_PAGES , false ) ; }
public void onLongClicked ( final AppCompatActivity activity ) { LinkHandler . onLinkLongClicked ( activity , url ) ; }
public void onMultiSelectionStart ( ) { ( ( AppCompatActivity ) getActivity ( ) ) . startSupportActionMode ( new SelectorCallback ( ) ) ; adapter . startSelectionMode ( ) ; }
public void onClick ( View view ) { update ( ) ; }
public static String getCurrentDay ( int dayIndex ) { String daysArray [ ] = { "Sunday" , "Monday" , "Tuesday" , "Wednesday" , "Thursday" , "Friday" , "Saturday" } ; return daysArray [ dayIndex ] ; }
public void init ( CardPlayerFragment fragment ) { }
public boolean wantsToPlay ( ) { return ToroUtil . visibleAreaOffset ( this , itemView . getParent ( ) ) >= mStartAutoplayVisibleAreaOffset ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new PlaylistTrackViewModel ( mApplication , mPath ) ; }
public void getVisitIdByUuid_ShouldGetCorrectVisitId ( ) { Long id = database . visitRoomDAO ( ) . saveVisit ( expectedVisitEntity ) ; Long visitId = database . visitRoomDAO ( ) . getVisitsIDByUUID ( "uuid" ) ; Assert . assertEquals ( id , visitId ) ; }
public boolean isUnfolding ( ) { return isUnfolding ; }
public void onClick ( DialogInterface dialog , int id ) { list . archived = true ; IO . getInstance ( ) . saveAndSync ( ) ; ( ( ListerActivity ) getActivity ( ) ) . loadActivity ( ) ; }
public BaseSQLiteOpenHelper ( Context context ) { super ( context , TableDefinitions . DBNAME , null , 3 ) ; }
public ProfileSettingDrawerItem withSelectedColorRes ( int selectedColorRes ) { this . selectedColor = ColorHolder . fromColorRes ( selectedColorRes ) ; return this ; }
public void failure ( RetrofitError error ) { Log . d ( TAG , error . toString ( ) ) ; swipeRefreshLayout . setRefreshing ( false ) ; }
public int getCount ( ) { return mLeDevices . size ( ) ; }
public void setContributor ( List < Contributor_ > contributor ) { this . contributor = contributor ; }
public int getAudioId ( ) { return audioId ; }
public void testIsWPCOMString1 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( wpcomAddress1 ) ) ; }
public void refreshListFoldersInside ( final FileModel fileModel ) { mCurrentFolder = fileModel ; mCurrentPage = PAGE_FOLDER_INSIDE ; mFileAudioModels . clear ( ) ; refreshCurrentList ( ) ; }
public SavedState createFromParcel ( Parcel in ) { return new SavedState ( in ) ; }
public void onFailure ( @ NonNull Exception e ) { Log . d ( TAG , "onFailure ( ) called with : " + "e = [ " + e + " ] " ) ; }
public void describeTo ( Description description ) { description . appendText ( "Child at position " + position + " in parent " ) ; parentMatcher . describeTo ( description ) ; }
public ContentDescriptor ( String contentType ) { encoding = contentType ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_HIGHBALL_GLASS , null , null , null , null ) ; }
public Button getAudioButton ( ) { return audioButton ; }
public Dialog show ( ) { return FancyAlertDialog . getInstance ( ) . show ( activity , this ) ; }
public void onScrollStateChanged ( AbsListView view , int scrollState ) { if ( getActivity ( ) instanceof StartScreen ) { ( ( StartScreen ) getActivity ( ) ) . setScrollMessageVisiblility ( false ) ; firstTimeScrollhint = false ; } }
public void onComplete ( ) { if ( mProgressBar != null ) { mProgressBar . setVisibility ( View . GONE ) ; } if ( ! isDataBound ( ) ) { bindNoDataView ( ) ; } }
public DownloadFormat getDownloadFormat ( ) { return downloadFormat ; }
private void userCutsFileInList ( File file ) { user . selects ( ) . longFileInList ( file ) ; user . selects ( ) . operationsAction ( ) ; user . selects ( ) . moveAction ( ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeLong ( clientTime ) ; }
public ParsingLoadable ( DataSource dataSource , Uri uri , int type , Parser < ? extends T > parser ) { this ( dataSource , new DataSpec ( uri , DataSpec . FLAG_ALLOW_GZIP | DataSpec . FLAG_ALLOW_CACHING_UNKNOWN_LENGTH ) , type , parser ) ; }
public void onClick ( View v2 ) { ( ( AlbumPager ) getActivity ( ) ) . doImageSave ( false , url , i ) ; }
public void onSandboxReturned ( @ NonNull final R result ) { handler . post ( ( ) -> listener . onResult ( result ) ) ; }
public IconStyleImageView ( Context context ) { super ( context ) ; init ( ) ; }
public boolean haveDefaultImagesDirectory ( ) { return mPerInstallationPrefs . contains ( Constants . PREF_DEFAULT_IMAGES_DIR ) ; }
public static void sendOutput ( Context context , CharSequence s , int type ) { sendOutput ( SkinManager . COLOR_NOT_SET , context , s , type ) ; }
public void updateList ( @ NonNull List < WeatherInfo > weatherInfoList ) { mListUpdated = true ; }
public AboutBuilder setCover ( int cover ) { return setCover ( IconUtil . getBitmap ( context , cover ) ) ; }
public void onClick ( View v ) { if ( SystemClock . elapsedRealtime ( ) - mLastClickTime < INTERVALO_CLICK ) { return ; } mLastClickTime = SystemClock . elapsedRealtime ( ) ; lanzarOtrosJuegos ( ) ; }
public void checkHiScores ( int restartGame ) { int peakScore = m_gameWorld . getPeakScore ( ) ; AstroSmashActivity . toDebug ( "HiScore is : " + peakScore ) ; addScore ( peakScore , restartGame ) ; }
public void onClickLayout ( View view ) { Log . v ( LOG_TAG , "onClickLayout ( ) called with : " + "view = [ " + view + " ] " ) ; if ( mActivity != null ) mActivity . openLink ( getPosition ( ) ) ; }
public UserCommentListingURL limit ( Integer newLimit ) { return new UserCommentListingURL ( user , order , newLimit , after ) ; }
public int getValueHigh ( ) { return valueHigh ; }
public long getItemId ( int position ) { return baseId + position ; }
private boolean parseTimerValue ( JSONObject options ) { return DeckConfig . parseTimerOpt ( options , true ) ; }
private List < PopupKeyCandidate > getCandidatesForSA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "ʃ" ) ) ; return candidates ; }
public void setDownloadClickListener ( SlideClickListener listener ) { this . downloadClickListener = listener ; }
public double getBbr ( ) { return ( weight/ ( height - 100 ) *100 ) ; }
public void setItemsPresenter ( ) { MockitoAnnotations . initMocks ( this ) ; mItemsPresenter = new ItemsPresenter ( mView , mRepository , mSharedPreferencesHelper , mFirebaseAuth ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case OVERVIEW_TAB : return regionOverviewSubFragment ; case COMMUNITY_TAB : return regionCommunitySubFragment ; case CENSUS_TAB : return censusSubFragment ; case HAPPEN_TAB : return regionHappeningSubFragment ; default : return new Fragment ( ) ; } }
public RateMyAppDialog ( FragmentActivity context ) { this . context = context ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; dao = AppDatabase . getInMemoryDatabase ( getContext ( ) ) . airportDao ( ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . playlist_card_holder , parent , false ) ; return new MyViewHolder ( itemView ) ; }
private static int getInt ( Context context , String key , int defaultValue ) { return sPreferences . getInt ( key , defaultValue ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return WebPage . TLdeserialize ( stream , constructor , exception ) ; }
public void requestLayout ( ) { if ( mEatRequestLayout == 0 && ! mLayoutFrozen ) { super . requestLayout ( ) ; } else { mLayoutRequestEaten = true ; } }
private GattOperation ( BluetoothGatt gatt , GattOperation . Operation operation , UUID uuid ) { mGatt = gatt ; mOp = operation ; mUuid = uuid ; }
public void execute ( Realm realm ) { realm . delete ( MessItem . class ) ; }
public boolean onDoubleTap ( MotionEvent e ) { return false ; }
public boolean matchesSafely ( TextView textView ) { for ( Drawable drawable : textView . getCompoundDrawables ( ) ) { if ( sameBitmap ( textView . getContext ( ) , drawable , resourceId ) ) { return true ; } } return false ; }
public void afterTextChanged ( Editable editable ) { updateButtonIfEnabled ( checkIfAllRequiredFieldsAreNotEmpty ( ) ) ; llError . setVisibility ( View . INVISIBLE ) ; }
public WifiIconData ( Context context ) { super ( context ) ; wifiManager = ( WifiManager ) getContext ( ) . getSystemService ( Context . WIFI_SERVICE ) ; connectivityManager = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; }
public void setAdapter ( PlaceItemAdapter adapter ) { this . adapter = adapter ; }
private void initialize ( ) { if ( TEST ) { setVisibility ( View . INVISIBLE ) ; } }
private void setUpRecyclerViewPadding ( ) { recyclerView . setPadding ( 0 , albumArtViewHeight + titleViewHeight , 0 , 0 ) ; }
private void preserveAppLanguage ( ) { appLanguage = WikipediaApp . getInstance ( ) . getAppLanguageCode ( ) ; }
public Builder setFocusMode ( @ FocusMode String mode ) { mCameraSource . mFocusMode = mode ; return this ; }
public boolean onCreateOptionsMenu ( final Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_audio_activity , menu ) ; mFileAudioChromeCast . onCreateOptionsMenu ( menu . findItem ( R . id . action_cast ) ) ; return true ; }
public TermSession ( ) { this ( false ) ; }
public void loadGalleryPhotos ( ) { if ( MediaController . allPhotosAlbumEntry == null && Build . VERSION . SDK_INT >= 21 ) { MediaController . loadGalleryPhotosAlbums ( 0 ) ; } }
public void testSafeToAddAuthToken19 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( wpcomAddress5 ) ) ) ; }
public void shareRhymesTest ( ) { search ( "merge" ) ; openMenuItem ( R . string . share ) ; verifyShareIntentContains ( "upsurge" ) ; }
public void setMeanings ( List < Meaning > meanings ) { this . meanings = meanings ; }
public Response intercept ( Chain chain ) throws IOException { throw new IOException ( "No network during tests ! " ) ; }
public void onCheckedChanged ( final CompoundButton button , final boolean checked ) { if ( checked ) { holder . cancel . setChecked ( false ) ; item . setCancel ( false ) ; } item . setPostpone ( checked ) ; invokeChangeListener ( item ) ; }
public void onTimelineChanged ( Timeline timeline , Object manifest ) { }
public View getView ( int position , View convertView , ViewGroup parent ) { return Util . getActionBarSpinnerItemView ( actionBarContext , convertView , parent , getItem ( position ) . getName ( ) ) ; }
public static boolean isDebugFps ( ) { return sDebugFps ; }
public void onWalletBackup ( String walletName ) { Log . d ( TAG , "backup for wallet . " + walletName + " . " ) ; new AsyncBackup ( ) . execute ( walletName ) ; }
public final int getPreferencesXML ( ) { return R . xml . rain_preferences ; }
public void invalidSettingReturnsCorrectResultWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "" ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public String getName ( ) { return "Hiding Searchbar" ; }
public void copyNumbers ( ) { String numbersText = results . getText ( ) . toString ( ) ; TextUtils . copyResultsToClipboard ( numbersText , snackbarDisplay ) ; }
public void cleanUp ( ) { if ( ! AccountUtils . Companion . wipe ( context ) ) { throw new IllegalStateException ( "failed to wipe" ) ; } }
public ColorPickerDialog setOnColorChangeListener ( OnColorChangeListener listener ) { mListener = listener ; return this ; }
public boolean hasSingleCard ( ) { return movingCards . getSize ( ) < 2 ; }
public List < Item > getItems ( ) { return items ; }
public Object getGroup ( int i ) { return _cbsData . get ( i ) ; }
public void handleMessage ( int what , Object object ) throws ExoPlaybackException { }
public Tile getTileAt ( int x , int y , int z ) { return new Tile ( new TilePosition ( x , y , z ) ) ; }
public int getButtonColor ( ) { return mButtonColor ; }
public void setUp ( ) throws Exception { service = create ( ) ; }
public void clickingChooseButton_requestsAudioFile ( ) { FormEntryPrompt prompt = promptWithAnswer ( null ) ; AudioWidget widget = createWidget ( prompt ) ; widget . binding . chooseButton . performClick ( ) ; verify ( audioDataRequester ) . requestFile ( prompt ) ; }
public String getDisplayName ( ) { return StringUtils . notNullStr ( displayName ) ; }
public void setFileName ( File file ) { preferences . edit ( ) . putString ( FILE_NAME , file . getAbsolutePath ( ) ) . apply ( ) ; }
public void onDeleteTaskFailureTracking ( Throwable e ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsHelper . PARAM_MESSAGE , e . getMessage ( ) ) ; analyticsHelper . trackDeleteFailure ( bundle ) ; }
private void reacquireAllConsists ( ) { for ( int i = 0 ; i < maxThrottles ; i ++ ) reacquireConsist ( consists [ i ] , i ) ; }
public void getKeyFromTag ( ) { String tag = this . questionObject . getTag ( ) ; String expectedValue = this . questionObject . getAnswer_yes ( ) ; String actualValue = Answers . getAnswerMap ( ) . get ( tag ) ; assertEquals ( expectedValue , actualValue ) ; }
public void onClick ( final DialogInterface dialog , final int which ) { post . action ( activity , RedditAPI . RedditAction . REPORT ) ; }
public void getProgressOnFinally ( int progress , float progressFloat ) { }
private void doNearbyPoints ( Info [ ] nearby ) { removeNearbyPoints ( ) ; if ( nearby != null ) { for ( Info info : nearby ) addNearbyPoint ( info ) ; } }
public static boolean unZipInPlace ( String zipFilePath ) { String destinationPath = new File ( zipFilePath ) . getParent ( ) + File . separator ; return unzip ( zipFilePath , destinationPath ) ; }
public MovieVideosResponse ( long movieId , ArrayList < MovieVideoEntity > trailers ) { this . movieId = movieId ; this . trailers = trailers ; }
public void deleteContact ( String publicKey ) { int idx = this . findContact ( publicKey ) ; if ( idx >= 0 ) { this . contacts . remove ( idx ) ; } }
public void refreshInstances ( ) { scheduler . immediate ( ( ) -> { new InstacesDirDiskInstancesSynchronizer ( settingsProvider ) . doInBackground ( ) ; instancesAppState . update ( ) ; return null ; } , ignored -> { } ) ; }
public TransformFieldMove ( int _idx , int _oldidx ) { idx = _idx ; oldidx = _oldidx ; }
public boolean removeEntryByXValue ( float xValue ) { T e = getEntryForXValue ( xValue ) ; return removeEntry ( e ) ; }
private synchronized int nextExpressionId ( ) { return curExpressionId ++ ; }
public List < RecipePhotoTable > getDbRecipePhotoTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getRecipePhotoTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public AttendanceAdapter ( Context context , List < AttendanceData > dataList , int pref_minimum_attendance ) { this . ctx = context ; this . dataList = dataList ; this . pre_minimum_attendance = pref_minimum_attendance ; }
public XYStepMode getMode ( ) { return mode ; }
public void run ( ) { dataSet . refreshLayout . setRefreshing ( false ) ; currentSelectedItem = s ; dataSet . loadMoreReply ( CommentAdapter . this ) ; }
public void run ( ) { mCheckinSQLite . insert ( entry ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . suggestedLangpack ) { checkContinueText ( ) ; } }
public void hideBlurView ( ) { LRealtimeBlurView . setVisibility ( GONE ) ; }
public int getKey_hint_offset_x ( ) { return key_hint_offset_x ; }
public void setExpire ( int data ) { this . expire = data ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( StockItemBinding . inflate ( LayoutInflater . from ( parent . getContext ( ) ) , parent , false ) ) ; }
public PlaybackException ( IPlaybackHandler playbackHandler , Throwable cause ) { super ( cause ) ; this . playbackHandler = playbackHandler ; }
public TelephonyUtil ( ) { }
public TcpClientPacketSender ( PacketSenderListener listener , String hostname , int port ) throws IOException { mHostname = hostname ; mPort = port ; mListener = listener ; mQueue = new ArrayBlockingQueue ( 1024 ) ; mWorker = new Thread ( this ) ; mWorker . start ( ) ; }
private void onMute ( String accountId , String accountUsername ) { MuteAccountDialog . showMuteAccountDialog ( this . getActivity ( ) , accountUsername , ( notifications ) -> { timelineCases . mute ( accountId , notifications ) ; return Unit . INSTANCE ; } ) ; }
public JsonBufferedArray asArray ( ) { switch ( type ) { case NULL : return null ; default : return ( JsonBufferedArray ) value ; } }
public void onFailure ( ) { Log . e ( TAG , "user action failure" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_SET_PASSWORD_FAILURE , new ArrayList < String > ( ) ) ; }
public StartCheck setContext ( Context context ) { this . context = context ; return this ; }
public View getLastChild ( ) { return getChildAt ( getChildCount ( ) - 1 ) ; }
public void onRefresh ( ) { thread . run ( ( ) -> { log . v ( TAG , "refreshing" ) ; load ( COMMON , true ) ; } ) ; }
public void sayRandomPhrase ( int . . . phrases ) { int index = Random . Int ( 0 , phrases . length ) ; say ( Game . getVar ( phrases [ index ] ) ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . xiiilab . metrix" , appContext . getPackageName ( ) ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "me . varunon9 . fito" , appContext . getPackageName ( ) ) ; }
public void run ( ) { Log . d ( TAG , "BT receiver started for uuid " + uuid ) ; if ( BTManager . SYNCHRONOUS_WORKERS ) { runWithSynchronousWorkers ( ) ; } else { runWithAsynchronousWorkers ( ) ; } }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_3 . getText ( ) . toString ( ) ) ; }
public String getCommandDescriptionLogString ( ) { return getSingleLineLogStringEntry ( "Command Description" , commandDescription , " - " ) ; }
public static Book bookOn ( String location ) { return bookOn ( location , DEFAULT_DB_NAME ) ; }
public static String getWebViewErrorMessage ( ) { Throwable error = getInstance ( ) . mWebViewError ; if ( error == null ) { Timber . w ( "getWebViewExceptionMessage called without webViewFailedToLoad check" ) ; return null ; } return error . getLocalizedMessage ( ) ; }
public void setBirthdayMonth ( int birthdayMonth ) { this . birthdayMonth . setValue ( birthdayMonth ) ; }
public void showCommunityWall ( int accountId , Community community ) { PlaceFactory . getOwnerWallPlace ( accountId , community ) . tryOpenWith ( getActivity ( ) ) ; }
public Observable < NetworkState > getNetworkState ( ) { return mState . hide ( ) ; }
public void onAnimationEnd ( Animator animator ) { outView . setVisibility ( View . GONE ) ; outView . setX ( 0 ) ; }
public String getString ( ) { return name ; }
public void connectionChange ( final String type , final boolean isExpensive ) { Log . d ( TAG , "ConnectionChange : " + type + " , is expensive " + isExpensive ) ; Statusgo . ConnectionChange ( type , isExpensive ? 1 : 0 ) ; }
public void performAction ( TimestampedValue [ ] newValues ) { if ( tag != null ) { Log . println ( priority , tag , message ) ; } else { Log . println ( priority , TAG , message ) ; } }
public String getUnlockText ( Track track ) { Championship championship = findTrackChampionship ( track ) ; return getUnlockText ( Reward . get ( championship ) ) ; }
public void registerExpression ( String id , String expression , String location ) { CloudCommunication cloudCommunication = new CloudCommunication ( ) ; cloudCommunication . sendRegisterRequest ( id , expression , location ) ; }
private void updateTitle ( String text ) { try { folderName . setText ( text ) ; } catch ( Exception e ) { FirebaseCrash . report ( e ) ; folderName . setText ( R . string . app_name ) ; } }
public void onPageSelected ( int position ) { updateTitle ( position ) ; }
public static String toDateText ( Context context , Date date ) { initDateFormat ( context ) ; return DATE_FORMAT . format ( date ) ; }
public FormEndPage clickOnEmptyForm ( String formName ) { clickOnFormButton ( formName ) ; return new FormEndPage ( formName , rule ) . assertOnPage ( ) ; }
private void initTweakShort ( String tweakName ) { tvTweakShort . setText ( FoodInfo . getTweakShort ( tweakName ) ) ; }
private void turnRoaming ( FakeSystemFacade systemFacade , boolean enable ) { systemFacade . isRoaming = enable ; }
public void onMonthSelected ( int year , int month ) { int position = 12 * ( year - mDelegate . getMinYear ( ) ) + month - mDelegate . getMinYearMonth ( ) ; mDelegate . isShowYearSelectedLayout = false ; closeSelectLayout ( position ) ; }
public static TimestampSearchResult targetFoundResult ( long resultBytePosition ) { return new TimestampSearchResult ( RESULT_TARGET_TIMESTAMP_FOUND , C . TIME_UNSET , resultBytePosition ) ; }
public void toggleShuffle ( ) { playingQueue . toggleShuffle ( ) ; shuffleChangeSignaling ( ) ; }
public void onPause ( ) { thread . run ( ( ) -> { log . v ( TAG , "Activity paused" ) ; daysRemainingWidget . stop ( ) ; } ) ; }
public void restartLoader ( ) { getLoaderManager ( ) . restartLoader ( 0 , null , cursorAdapterLoader ) ; }
private String getName ( PublicizeConnection connection ) { String name = connection . getExternalDisplayName ( ) ; if ( name . isEmpty ( ) ) { name = connection . getExternalName ( ) ; } return name ; }
public void onBeginningOfSpeech ( ) { Log . d ( TAG , "onBeginningOfSpeech : " ) ; }
public TimerUpdater ( ) { super ( PreferenceUtils . getInstance ( getActivity ( ) ) . getNextSleepTimerElapsedRealTime ( ) - SystemClock . elapsedRealtime ( ) , 1000 ) ; }
public static void setTweetPhoto ( ImageView view , Tweet tweet ) { TweetUtil . loadImage ( view , tweet ) ; }
public void onRedditDataChange ( final String thingIdAndType ) { HANDLER . dispatchMessage ( Message . obtain ( HANDLER , HANDLER_REQUEST_COMMENT_CHANGED , this ) ) ; }
public AppSettingsBase setBool ( String key , boolean value ) { setBool ( key , value , _prefApp ) ; return this ; }
public void setPreviewEnabled ( boolean previewEnabled ) { mShowPreview = previewEnabled ; }
public final boolean isBasePackage ( String s ) { return _bases . containsKey ( s ) ; }
public void syncRoster ( final Account account ) { mDatabaseWriterExecutor . execute ( ( ) -> databaseBackend . writeRoster ( account . getRoster ( ) ) ) ; }
public void run ( ) { if ( walletFragment != null ) { walletFragment . onLoaded ( ) ; } }
public boolean isYearSelectLayoutVisible ( ) { return mSelectLayout . getVisibility ( ) == VISIBLE ; }
public ImageReceiver ( View view ) { parentView = view ; roundPaint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; currentAccount = UserConfig . selectedAccount ; }
public boolean onOptionsItemSelected ( final MenuItem item ) { if ( mFragment != null && mFragment . onOptionsItemSelected ( item ) ) { return true ; } return super . onOptionsItemSelected ( item ) ; }
public ClementineLibraryDownloader ( Context context ) { mContext = context ; mLibrary = new MyLibrary ( context ) ; mSharedPref = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; }
public Fragment getCurrentFragment ( ) { return mCurrentFragment ; } @ Override public int getItemPosition ( Object object ) { if ( object != storedFragment ) return POSITION_NONE ; return POSITION_UNCHANGED ; }
public void firebaseAuthSignInFails_HidesProgressBar ( ) { mAuthPresenter . handleFirebaseSignInResult ( false , USER_ID ) ; verify ( mView ) . setProgressIndicator ( false ) ; }
public Pr0Number getPreviousNumber ( ) { return previousNumber ; }
public void setDay ( Schedule schedule , int day ) { this . schedule = schedule ; this . day = day ; update ( ) ; }
public void onItemSelected_Fragment_LocationList ( int id , int year ) { detailItemChosen ( id , year , Fragment_LocationList . TAG ) ; }
private void initSettings ( ) { initSetting ( the_settings . getSettings ( ) . getOptions ( ) ) ; }
public void onClick ( View v ) { if ( null != mListener ) { mListener . onListFragmentInteraction ( holder . mItem ) ; } }
public void doStopPlay ( ) { this . reflectionManager . stopPlayback ( ) ; }
public void setItems ( final List < T > list ) { this . originalItemList . clear ( ) ; this . originalItemList . addAll ( list ) ; initializeFromOriginalList ( true ) ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { MenuUtils . selectDrawerItem ( menuItem , mDrawer , BaseActivity . this , BaseActivity . this ) ; return true ; }
public DiffCallback ( List < Track > newTracks , List < Track > oldTracks ) { this . newTracks = newTracks ; this . oldTracks = oldTracks ; }
public void notifyItemChanged ( final int groupId , final Item item ) { final int position = getItemPositionInternal ( groupId , item ) ; notifyItemChanged ( position ) ; }
public void onAdditionalButtonClick ( ) { Fragment fragment = getChildFragmentManager ( ) . findFragmentById ( R . id . child_container ) ; if ( fragment instanceof BaseSearchFragment ) { ( ( BaseSearchFragment ) fragment ) . openSearchFilter ( ) ; } }
public boolean onResourceReady ( Drawable resource , Object model , Target < Drawable > target , DataSource dataSource , boolean isFirstResource ) { holder . userProgressImage . setVisibility ( View . GONE ) ; return false ; }
public void setSortOrder ( FileSortOrder sortOrder ) { PreferenceManager . setSortOrder ( mContext , sortOrder ) ; mFiles = sortOrder . sortLocalFiles ( mFiles ) ; notifyDataSetChanged ( ) ; }
public boolean contains ( String key ) { return mStorage . exists ( key ) ; }
public void onAnimationEnd ( final Animation animation ) { RingingActivity . this . animateCircles ( ) ; }
public void removeNumber ( int position ) { excludedNumbers . remove ( position ) ; Collections . sort ( excludedNumbers ) ; notifyDataSetChanged ( ) ; setNoContent ( ) ; }
public boolean onPrepareActionMode ( ActionMode mode , Menu menu ) { if ( mFragment != null ) { mFragment . prepareContextualMenu ( menu ) ; } return true ; }
public void playPreviousSong ( boolean force ) { playSongAt ( getPreviousPosition ( force ) ) ; }
public static String toString ( Context context , boolean value ) { return value ? context . getString ( R . string . yes ) : context . getString ( R . string . no ) ; }
public WeatherWidgetProvider2x1 ( ) { super ( 1 ) ; }
public void onCreate ( Context context ) { Log . v ( TAG , "onCreate" ) ; mContext = context ; mWifiManager = ( WifiManager ) context . getApplicationContext ( ) . getSystemService ( Context . WIFI_SERVICE ) ; }
public List < Event > getEvents ( ) { return events ; }
private DBAlarm ( Context context ) { super ( context , DB_NAME , null , 1 ) ; readableDB = getReadableDatabase ( ) ; writableDB = getWritableDatabase ( ) ; }
private boolean isContainer ( String key ) { return key . equals ( "__container" ) ; }
public static void setSavedPaths ( Context context , StringBuilder stringBuilder ) { getEditor ( context ) . putString ( "savedPaths" , stringBuilder . toString ( ) ) . commit ( ) ; }
public void deleteFile ( ) { questionMediaManager . deleteAnswerFile ( getFormEntryPrompt ( ) . getIndex ( ) . toString ( ) , answerFile . getAbsolutePath ( ) ) ; answerFile = null ; }
public void onDriveRestoreSuccess ( DriveRestoreSuccess event ) { dissmissProgressDialog ( ) ; Toast . makeText ( this , R . string . restore_database_success , Toast . LENGTH_LONG ) . show ( ) ; }
public void removeListener ( OnPreferenceChangedListener listener ) { onPreferenceChangedListeners . remove ( listener ) ; }
public void onRebind ( Intent intent ) { Log . d ( TAG , "onRebind ( ) " ) ; }
public void fetch ( @ NonNull Listener listener ) { mListener = listener ; mAsyncTask = new AsyncGetTask ( mUsername , mPassword ) ; mAsyncTask . execute ( ) ; }
public final void activateMatrix ( float [ ] buf , int offset ) { GLES20 . glUniformMatrix4fv ( mMatrixUniformHandle , 1 , false , buf , offset ) ; }
public String toString ( ) { return "number of coordinates = " + mLatLngCoordinates . size ( ) ; }
public void goToWallSearch ( int accountId , int ownerId ) { WallSearchCriteria criteria = new WallSearchCriteria ( "" , ownerId ) ; PlaceFactory . getSingleTabSearchPlace ( accountId , SearchContentType . WALL , criteria ) . tryOpenWith ( getActivity ( ) ) ; }
public Long getDownloadKbit ( ) { return downloadKbit ; }
private ScheduleRepository ( SpiceManager spiceManager ) { this . spiceManager = spiceManager ; }
public void markupHeavy ( ) throws IOException { test ( markup ) ; }
public void handleMessage ( @ NonNull final Message msg ) { if ( usageId != msg . what ) { return ; } thumbnailView . setImageBitmap ( ( Bitmap ) msg . obj ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { if ( holder instanceof CardViewHolder ) { Card card = cards . get ( position ) ; ( ( CardViewHolder ) holder ) . bind ( card ) ; } }
public boolean onItemClick ( View view , int position ) { if ( ! actionBar . isActionModeShowed ( ) ) { createMenu ( view , false ) ; return true ; } return false ; }
public void setVideo ( boolean video ) { this . video = video ; }
private boolean isBackgroundLocationEnabled ( ) { return DaggerUtils . getComponent ( Collect . getInstance ( ) ) . settingsProvider ( ) . getGeneralSettings ( ) . getBoolean ( KEY_BACKGROUND_LOCATION ) ; }
public void onClick ( View view ) { addEntry ( ) ; }
public int waistToHeightRatio ( double waist , double height ) { return ( int ) Math . round ( ( waist/height ) *100 ) ; }
public Data ( onGpsServiceUpdate onGpsServiceUpdate ) { this ( ) ; setOnGpsServiceUpdate ( onGpsServiceUpdate ) ; }
public void endVisit ( ) { visitDAO . getVisitByID ( visitId ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( this : : endVisitByUUID ) ; }
public StackedBarsMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; tvContent = ( TextView ) findViewById ( R . id . tvContent ) ; }
public IBinder onBind ( Intent intent ) { Log . d ( TAG , "onBind ( ) " ) ; return new TaskServiceBinder ( ) ; }
public AddFeedViewModel ( @ NonNull Application application ) { super ( application ) ; repo = FeedRepository . getInstance ( application ) ; mode = Mode . ADD ; }
public void testMinimalEncoder37 ( ) throws Exception { verifyMinimalEncoding ( "\u0150\u015C" , "ECI ( UTF - 8 ) , BYTE ( . . ) , TERMINATOR ( ) " , null , false ) ; }
public Bus getBus ( ) { return bus ; }
public void restoreState ( Parcelable savedState ) { restoreState ( savedState , false , false ) ; }
public void didLongPressed ( ChatActionCell cell ) { createMenu ( cell , false ) ; }
public void saveAndExit ( OnNoteSaved mOnNoteSaved ) { if ( isAdded ( ) ) { exitMessage = getString ( R . string . note_updated ) ; exitCroutonStyle = ONStyle . CONFIRM ; goBack = true ; saveNote ( mOnNoteSaved ) ; doBeforeLeave ( ) ; } }
public AriaFiles process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return new AriaFiles ( obj . getJSONArray ( "result" ) ) ; }
public void replace ( @ Nonnull final Collection < Transaction > transactions ) { this . transactions . clear ( ) ; this . transactions . addAll ( transactions ) ; showEmptyText = true ; notifyDataSetChanged ( ) ; }
private void initSettingsBackupPrefs ( ) { binding . syncSettingsPrefs . setChecked ( mPrefs . isSettingsBackupEnabled ( ) ) ; binding . syncSettingsPrefs . setOnClickListener ( view -> changeSettingsBackupPrefs ( ) ) ; }
private void openSlideShow ( ) { Intent intent = new Intent ( getActivity ( ) , SlideshowActivity . class ) ; startActivity ( intent ) ; getActivity ( ) . finish ( ) ; }
public Builder setFlashMode ( @ FlashMode String mode ) { mCameraSource . mFlashMode = mode ; return this ; }
public void onAddFinished ( RecyclerView . ViewHolder item ) { assertTrue ( mAddFinished . add ( item ) ) ; onFinished ( ) ; }
public Optional < Integer > getDefaultSubscriptionId ( ) { return defaultSubscriptionId != - 1 ? Optional . of ( defaultSubscriptionId ) : Optional . < Integer > absent ( ) ; }
public void onCreate ( SurfaceHolder surfaceHolder ) { super . onCreate ( surfaceHolder ) ; PreferenceManager . getDefaultSharedPreferences ( ChameleonWallpaperService . this ) . registerOnSharedPreferenceChangeListener ( this ) ; registerReceiver ( colorExtractedReceiver , new IntentFilter ( COLOR_CARRY_FILTER ) ) ; }
public Observable < Group > call ( ) { groupPayload . save ( ) ; return Observable . just ( new Group ( ) ) ; }
public void hideLoadingIcon ( ) { setProgressBarIndeterminate ( false ) ; }
private void onFABClicked ( ) { saveNotesToDB ( ) ; actionAddNewNote ( ) ; }
public static void setGuideline ( Guideline guideline , Context context ) { guideline . setGuidelinePercent ( PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( "icon_size" , false ) ? 0 . 25f : 0 . 2f ) ; }
public void run ( ) { MessagesController . getInstance ( ) . updateTimerProc ( ) ; }
private void changeUIStateToRetry ( ) { voiceIcon . setText ( R . string . voice_icon_recognizer_blue ) ; voiceIcon . setBackgroundResource ( R . drawable . recognizable_voice_error ) ; message . setText ( R . string . did_not_catch_speech ) ; tryAgain . setVisibility ( View . VISIBLE ) ; }
public void onResume ( ) { super . onResume ( ) ; presenter . start ( ) ; }
public void unbind ( QuranPageScreen screen ) { this . screen = null ; compositeDisposable . dispose ( ) ; }
public int getItemViewType ( int position ) { return getItem ( position ) . getType ( ) . ordinal ( ) ; }
public static synchronized CacheManager getInstance ( final Context context ) { if ( singleton == null ) singleton = new CacheManager ( context . getApplicationContext ( ) ) ; return singleton ; }
public void onClick ( DialogInterface dialogInterface , int i ) { AccountsActivity . createDefaultAccounts ( Money . DEFAULT_CURRENCY_CODE , mActivity ) ; }
public void onClick ( View v ) { recyclerView . smoothScrollToPosition ( 0 ) ; }
public void setUpScreenshots ( ) { Instrumentation instrumentation = InstrumentationRegistry . getInstrumentation ( ) ; targetContext = instrumentation . getTargetContext ( ) ; device = UiDevice . getInstance ( instrumentation ) ; Screengrab . setDefaultScreenshotStrategy ( new HostScreencapScreenshotStrategy ( device ) ) ; device . waitForIdle ( ) ; }
public int getMaximumCoinCount ( ) { return HAPPY_COIN_COUNT * mCustomers . size ; }
public void showActionMode ( String title , Boolean canEdit ) { }
public static LocalDB get ( Context context ) { if ( instance == null ) { instance = Room . databaseBuilder ( context , LocalDB . class , DB_NAME ) . build ( ) ; } return instance ; }
public int getDataDirectionMarker ( ) { if ( dataDirection == LogUtils . DATADIR_INCOMING ) return R . drawable . incoming_arrow16 ; else if ( dataDirection == LogUtils . DATADIR_OUTGOING ) return R . drawable . outgoing_arrow16 ; else return R . drawable . xfer16 ; }
private void updateSelectionOverlay ( ReferenceItem item ) { if ( selectionMode && isSelected ( item ) ) { selectionOverlay . setVisibility ( View . VISIBLE ) ; } else { selectionOverlay . setVisibility ( View . GONE ) ; } }
public void onFailure ( Call < ItemCategory > call , Throwable t ) { if ( isDestroyed ) { return ; } showToastMessage ( "Add failed ! " ) ; buttonUpdateItem . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public synchronized void stopAddSamples ( ) { if ( holder != null ) { if ( canvas != null ) { try { holder . unlockCanvasAndPost ( canvas ) ; } catch ( Exception e ) { } canvas = null ; } } }
public void run ( ) { MessagesController . getInstance ( ) . updateConfig ( message ) ; }
public CourseDecorator ( Context context , Collection < CalendarDay > dates ) { this . dates = new HashSet <> ( dates ) ; this . context = context ; }
public void removeFile ( LXCFile file ) { CLITools . out . println ( "REM ID " + file . id + " , internal " + usedIds . get ( file . id ) ) ; usedIds . remove ( file . id ) ; }
public void onGetFileAudio ( final List < String > fileAudioPaths ) { new Thread ( ) { @ Override public void run ( ) { threadWorkerCreateLocalMusicFolders ( fileAudioPaths ) ; } } . start ( ) ; }
public Activity getActivity ( ) { return activity ; }
private Block latestBlock ( ) { return blocks . get ( blocks . size ( ) - 1 ) ; }
public void copy ( FileHolder tbc ) { ArrayList < FileHolder > tbcl = new ArrayList < FileHolder > ( ) ; tbcl . add ( tbc ) ; copy ( tbcl ) ; }
public void Unlink_WhenCalled_KeyCleared ( ) { PreferenceHelper pm = mock ( PreferenceHelper . class ) ; DropBoxManager dropBoxManager = new DropBoxManager ( pm ) ; dropBoxManager . unLink ( ) ; verify ( pm ) . setDropBoxAccessKeyName ( null ) ; }
public String getColor ( String lineCode ) { for ( Color color : colors ) { if ( TextUtils . equals ( color . lineCode , lineCode ) ) { return color . hexa ; } } return "#000000" ; }
public void backTop ( View view ) { mRecyclerView . smoothScrollToPosition ( 0 ) ; }
public CustomerFragmentList getCustomersFragment ( ) { if ( customersFragment == null ) customersFragment = new CustomerFragmentList ( ) ; return customersFragment ; }
private void setTagSlug ( String slug ) { this . tagSlug = StringUtils . notNullStr ( slug ) ; }
public MessagePatch setEncrypted ( boolean encrypted ) { this . encrypted = encrypted ; return this ; }
public void deleteExchangeRate ( int position ) { AnswersProxy . get ( ) . logButton ( "Delete Exchange Rate" ) ; rateController . deleteExchangeRatePair ( exchangeRateList . get ( position ) ) ; update ( ) ; setResult ( RESULT_OK ) ; }
public Loader < ArrayList < Artist >> onCreateLoader ( int id , Bundle args ) { return new AsyncArtistLoader ( getActivity ( ) ) ; }
public static com . coinomi . core . protos . Protos . Transaction parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public static int getBackgroundColor ( Activity a ) { SharedPreferences sharedPref = a . getPreferences ( Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "bgColor" , 0 ) ; }
public void onError ( Exception e ) { FileLog . e ( e ) ; }
private static PostResponse makePost ( String url , RequestBody requestBody ) throws IOException , JSONException { Request request = new Request . Builder ( ) . url ( url ) . post ( requestBody ) . build ( ) ; return submitPost ( request ) ; }
public JsonElement POST ( JsonObject object , String endpoint ) throws IOException { HttpURLConnection connector = this . connectToServer ( "POST" , endpoint ) ; this . sendToServer ( connector , object ) ; JsonElement payload = this . getPayloadFromServer ( connector ) ; return payload ; }
public void setVisibleXRange ( float minXRange , float maxXRange ) { float maxScale = mXAxis . mAxisRange / minXRange ; float minScale = mXAxis . mAxisRange / maxXRange ; mViewPortHandler . setMinMaxScaleY ( minScale , maxScale ) ; }
public void hideSmokeScreen ( ) { Futils . revealShow ( fabBgView , false ) ; }
public static String getPassword ( Context context ) { context = MyApplicationCoreNew . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( TAG_PASSWORD_GLOBAL , "" ) ; }
public boolean dispatchKeyEvent ( KeyEvent event ) { if ( event . getKeyCode ( ) == KeyEvent . KEYCODE_BACK && searchEnabled ) { animateSuggestions ( getListHeight ( false ) , 0 ) ; disableSearch ( ) ; return true ; } return super . dispatchKeyEvent ( event ) ; }
public Builder clearType ( ) { bitField0_ = ( bitField0_ & ~0x00000001 ) ; type_ = com . coinomi . core . protos . Protos . TransactionConfidence . Type . UNKNOWN ; onChanged ( ) ; return this ; }
public RingModeRenderer ( IPercentageChartView view ) { super ( view ) ; init ( ) ; }
public int getInt ( @ NonNull String key ) throws ItemNotFoundException , WrongTypeException { return 0 ; }
public List < String > getTags ( ) { return mTags ; }
private void finishWithError ( Throwable throwable ) { ImageController . passError ( throwable ) ; finish ( ) ; }
public int operate ( ) throws ErrorWithExplanation { return deletePlantAsync ( id ) ; }
public void pauseRescan ( ) { runOnUiThread ( new Runnable ( ) { public void run ( ) { rescanTogglePause . setImageDrawable ( getResources ( ) . getDrawable ( R . drawable . fs_scan_unpause48 ) ) ; } } ) ; }
public void yes ( ) { Helper . deleteDir ( Settings . mapTilesCacheDirectory ( SettingsActivity . this ) ) ; setOfflineMapStatisticsText ( ) ; }
private void editItemClicked ( final int parPosition ) { Item selectedItem = ( Item ) mItemListView . getItemAtPosition ( parPosition ) ; setHotItem ( selectedItem ) ; mIHostingActivity . openItemDetailFragment ( selectedItem ) ; mActionMode . finish ( ) ; }
public boolean onBackPressed ( ) { Theme . applyPreviousTheme ( ) ; parentLayout . rebuildAllFragmentViews ( false ) ; return super . onBackPressed ( ) ; }
private void setBatchState ( boolean batch ) { setSelected ( batch && selectedThreads . contains ( threadId ) ) ; }
public static float easeOutQuad ( float t , float b , float c , float d ) { t / = d ; return - c * t* ( t - 2 ) + b ; } ;
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser ) { try { mPatientDashboardActivity . hideFABs ( false ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
public MmsSmsDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public void setIs24HourView ( Boolean is24HourView ) { if ( this . mIs24HourView != is24HourView ) { this . mIs24HourView = is24HourView ; configurePickerRanges ( ) ; updateHourDisplay ( ) ; } }
public DataLoggingInput ( String profileId , String sessionId , String sensorId , ScienceToolkitSQLiteOpenHelper helper ) { this . profileId = profileId ; this . sessionId = sessionId ; this . sensorId = sensorId ; this . helper = helper ; }
public long getDid ( ) { return did ; }
public int centerAlign ( String text ) { layout . setText ( AssetLoader . font , text ) ; float centerWidth = ( 136/2 ) - ( layout . width/2 ) ; return ( int ) centerWidth ; }
public void run ( ) { disconnectAll ( false ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonSetEditor . this . getContext ( ) , ButtonSetEditor . this , newsettings . getPrimaryColor ( ) , COLOR_FIELDS . COLOR_MAIN ) ; diag . show ( ) ; }
public boolean isError ( ) { return mErrorId != SUCCESS || Util . isNullOrEmpty ( mResult1 ) || Util . isNullOrEmpty ( mResult2 ) ; }
public void deleteClientTest ( ) { Integer id = null ; }
public void onBookCollectionRenamed ( BooksCollection booksCollection , String newName ) { homeScreenRecyclerViewAdapter . notifyBookCollectionRenamed ( booksCollection , newName ) ; }
public CharacterComicDataContainer getComics ( ) { return mComics ; }
public int getJahr ( ) { return this . _jahr ; }
public void onAuthStateChanged ( @ NonNull FirebaseAuth firebaseAuth ) { if ( firebaseAuth . getCurrentUser ( ) != null ) { callback . onError ( ) ; return ; } callback . onSuccess ( ) ; }
private BroadcastReceiver toggleReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { toggleStartMenu ( ) ; } } ;
public void onError ( ) { if ( MyDebug . LOG ) Log . e ( TAG , "error from takePicture" ) ; count_cameraTakePicture -- ; applicationInterface . onPhotoError ( ) ; phase = PHASE_NORMAL ; startCameraPreview ( ) ; applicationInterface . cameraInOperation ( false ) ; }
public static SeekbarDialog newInstance ( final Actions action ) { return SeekbarDialog . newInstance ( action , 0 , 50 , 100 ) ; }
public void startTimerFinish ( ) { Logger . debug ( "LauncherWearGridActivity startTimerFinish" ) ; if ( activityFinishRunnable != null ) handler . removeCallbacks ( activityFinishRunnable ) ; handler . postDelayed ( activityFinishRunnable , 8000 ) ; }
public List < File > getFiles ( ) { return files ; }
public String name ( ) { return Game . getVar ( R . string . DarkVeilBuff_Name ) ; }
public SuraAyah getSelectionStart ( ) { final AyahSelection currentSelection = readingEventPresenter . currentAyahSelection ( ) ; return AyahSelectionKt . startSuraAyah ( currentSelection ) ; }
public String toString ( ) { return this . name ; }
public float getRangeCursorPosition ( ) { return rangeCursorPosition ; }
public void onClick ( View view ) { mMyGoalsPresenter . toggleFAB ( ) ; startActivityForResult ( PopularGoalActivity . newIntent ( getActivity ( ) ) , RESULT_GOAL_SET ) ; }
public AccountHeaderBuilder withEmailTypeface ( Typeface typeface ) { this . mEmailTypeface = typeface ; return this ; }
public Fighter ( Bitmap shipBitmap , Bitmap shipHit , boolean isWorthEnemyDestroyedPoint ) { super ( shipBitmap , shipHit , EnemyType . FIGHTER , isWorthEnemyDestroyedPoint ) ; }
public void pressStop ( View v ) { countdownPlayer . toggleStop ( ) ; isStoppedFromFileLoad = false ; }
private void escreveDados ( ) { Intent intent = getIntent ( ) ; paciente = ( Paciente ) intent . getSerializableExtra ( "paciente" ) ; activity . setTitle ( paciente . getNome ( ) ) ; escreveDadosCadastrais ( ) ; escreveDadosContato ( ) ; escreveInfoClinicas ( ) ; }
public void call ( MenuListActivity activity ) { activity . startActivity ( new Intent ( activity , MassOpActivity . class ) ) ; }
public void onClick ( View v ) { dismissAllowingStateLoss ( ) ; ( ( SortingOrderDialogFragment . OnSortingOrderListener ) getActivity ( ) ) . onSortingOrderChosen ( ( int ) v . getTag ( ) ) ; }
public int getCount ( ) { return mPois . size ( ) ; }
public int getSpanSize ( int position ) { switch ( sectionAdapter . getSectionItemViewType ( position ) ) { case SectionedRecyclerViewAdapter . VIEW_TYPE_HEADER : return 5 ; default : return 1 ; } }
public void onClick ( View v ) { new GetOptionsListTask ( ) . execute ( 4 ) ; }
public ReadGaplessDataTask ( String database ) { mDatabasePath = database ; }
public StoredFileUriProvider ( ISelectedBrowserLibraryProvider selectedBrowserLibraryProvider , IStoredFileAccess storedFileAccess , IStorageReadPermissionArbitratorForOs externalStorageReadPermissionsArbitrator ) { this . selectedBrowserLibraryProvider = selectedBrowserLibraryProvider ; this . externalStorageReadPermissionsArbitrator = externalStorageReadPermissionsArbitrator ; this . storedFileAccess = storedFileAccess ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { final LayoutInflater inflater = LayoutInflater . from ( parent . getContext ( ) ) ; return new ViewHolder ( inflater . inflate ( R . layout . item_home_spendings , parent , false ) ) ; }
public boolean isGroupChat ( ) { loadGroupPeers ( false ) ; return mGroupId != null ; }
public int maxExpoBracketingNImages ( ) { return preview . maxExpoBracketingNImages ( ) ; }
public Builder displayBottomNavigation ( boolean displayBottomNavigationBar ) { style . displayBottomNavigation = displayBottomNavigationBar ; return this ; }
public int getCount ( ) { return localDataSource . getCount ( ) ; }
public void testThatTopLeftGTPCoordinateIsValid ( ) throws Exception { final String tested = GTPHelper . coordinates2gtpstr ( new Cell ( 0 , 0 ) , 19 ) ; assertThat ( tested ) . isEqualTo ( "A19" ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( ListeDesElementsEvaluation ) getResult ( ListeDesElementsEvaluation . class , __result , "listeElementsEvaluationResult" , __envelope ) ; }
public void onDistanceReceived ( String distance ) { BottomSheetStationFragment stationFrag = ( BottomSheetStationFragment ) getSupportFragmentManager ( ) . findFragmentById ( mBottomSheetStationFragmentId ) ; if ( stationFrag != null ) { stationFrag . updateDistance ( distance ) ; } }
public int dr ( ) { return Math . max ( getBelongings ( ) . getItemFromSlot ( Belongings . Slot . ARMOR ) . effectiveDr ( ) , 0 ) ; }
public void addEllipsesListener ( EllipsisListener listener ) { if ( listener == null ) { throw new NullPointerException ( ) ; } ellipsesListeners = listener ; }
public void getUnformattedCustomMediaUrlWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "" ) ; setCustomServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void run ( ) { callback . onOstJsonApiError ( error , data ) ; }
public static File getCacheDir ( ) { return getContext ( ) . getExternalCacheDir ( ) ; }
public void onRetrieveKeyError ( RetrieveKeyError event ) { onError ( event . exception ) ; }
public listeCoursHoraire Func ( ) throws java . lang . Exception { return lireHoraire ( pSession , prefixeSigleCours ) ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { EntityRule r1 = prev . get ( oldItemPosition ) ; EntityRule r2 = next . get ( newItemPosition ) ; return r1 . equals ( r2 ) ; }
private static int getLabelIcon ( Status . MediaAttachment . Type type ) { switch ( type ) { default : case IMAGE : return R . drawable . ic_photo_24dp ; case GIFV : case VIDEO : return R . drawable . ic_videocam_24dp ; } }
public String getUrl ( int position ) { return items . get ( position ) . get ( ROW_URL ) ; }
public RecyclerMovieAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . recyclerview_movie_item , parent , false ) ; return new RecyclerMovieAdapter . ViewHolder ( view ) ; }
public int generateClassGuid ( ) { return lastClassGuid ++ ; }
public static MediaModel getPendingOrInProgressFeaturedImageUploadForPost ( PostModel postModel ) { return MediaUploadHandler . getPendingOrInProgressFeaturedImageUploadForPost ( postModel ) ; }
public int spellCost ( ) { if ( spellCost == 0 ) { ModError . doReport ( "Spell cost for " + getClassName ( ) + "must be > 1" , new Exception ( "spell cost is 0" ) ) ; spellCost = 1 ; } return spellCost ; }
public OkHttpClient getHttpClient ( ) { if ( client == null ) { client = new OkHttpClient ( ) ; } return client ; }
public boolean onNavigationItemSelected ( MenuItem item ) { DrawerLayout drawer = findViewById ( R . id . drawer_layout ) ; drawer . closeDrawer ( GravityCompat . START ) ; return true ; }
public void addItem ( UserConnectionModel name , int position ) { itemsData . add ( position , name ) ; notifyItemInserted ( position ) ; }
public void setKanjiReadingPriority ( boolean kanjiReadingPriority ) { mIsKanjiReadingPriority = kanjiReadingPriority ; }
public void onReferReceived ( final Core core , final String s ) { Lg . w ( "onReferReceived : " , s ) ; }
public String getId ( ) { return this . id ; }
public Tutorial ( String tag , Activity activity ) { this . tag = tag ; this . activity = activity ; initViews ( ) ; }
public void run ( ) { activityComponents ( ) . errorUtil ( ) . showNonFatalError ( "Error retrieving initial list . Please log out and try again" , e ) ; }
public AccountHeader withOnAccountHeaderSelectionViewClickListener ( OnAccountHeaderSelectionViewClickListener onAccountHeaderSelectionViewClickListener ) { this . mOnAccountHeaderSelectionViewClickListener = onAccountHeaderSelectionViewClickListener ; return this ; }
public void onCloseClick ( View view ) { setResult ( Activity . RESULT_CANCELED , new Intent ( ) ) ; finish ( ) ; }
public void onClick ( View view ) { SparkleHelper . startExploring ( context , SparkleHelper . getIdFromName ( telegram . regionTarget ) , SparkleHelper . CLICKY_REGION_MODE ) ; }
public void removeAllItems ( ) { mDrawerBuilder . getAdapter ( ) . clearDrawerItems ( ) ; }
public AppPreferenceData ( Context context , String componentName ) { this . componentName = componentName ; }
public UndoChangeDeckMulti ( Card [ ] cards , long [ ] originalDids ) { super ( R . string . undo_action_change_deck_multi ) ; this . cards = cards ; this . originalDids = originalDids ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = getLayoutInflater ( ) . inflate ( R . layout . item_detail , parent , false ) ; return new MyViewHolder ( view ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "fr . frogdevelopment . nihongo . dico" , appContext . getPackageName ( ) ) ; }
public void onClick ( View view ) { AppList . getSomeApps ( getApplicationContext ( ) , ApplicationInfo . FLAG_SYSTEM | ApplicationInfo . FLAG_UPDATED_SYSTEM_APP , true , null , 3 ) ; }
private void show ( int bottom ) { popupWindow . showAtLocation ( rootView , Gravity . BOTTOM , 0 , bottom ) ; }
public void onAnimationCancel ( Object animation ) { if ( runningAnimation2 != null && runningAnimation2 . equals ( animation ) ) { runningAnimation2 = null ; } }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitAbsoluteNumericExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
private void showKursDialog ( Kurs kurs ) { EditKursDialog editKursDialog = EditKursDialog . newInstance ( kurs ) ; editKursDialog . setTargetFragment ( this , EditKursDialog . REQUEST_CODE_GET_KURS ) ; editKursDialog . show ( getChildFragmentManager ( ) , EditKursDialog . TAG ) ; }
public void cancelRepeatPrompt_afterPromptForNewRepeatAndAddRepeat_doesNotJumpBack ( ) { viewModel . promptForNewRepeat ( ) ; viewModel . addRepeat ( true ) ; viewModel . cancelRepeatPrompt ( ) ; verify ( formController , never ( ) ) . jumpToIndex ( startingIndex ) ; }
public Date getCreatedAt ( ) { return comment . getCreatedAt ( ) ; }
public void onProgressChanged ( WebView view , int newProgress ) { super . onProgressChanged ( view , newProgress ) ; if ( newProgress == 100 ) { mProgress . setVisibility ( View . GONE ) ; } }
public void onSaveInstanceState ( Bundle savedInstanceState ) { if ( DEBUG ) Log . i ( TAG , "onSaveInstanceState" ) ; savedInstanceState . putInt ( SELECTED_FRAGMENT_ID , mSelectedFragmentId ) ; savedInstanceState . putBoolean ( CALCULATING_EXTREMUM_VALUES , mCalculatingExtremumValues ) ; super . onSaveInstanceState ( savedInstanceState ) ; }
public UnexpectedLoaderException ( Exception cause ) { super ( "Unexpected " + cause . getClass ( ) . getSimpleName ( ) + " : " + cause . getMessage ( ) , cause ) ; }
public void addHandler ( CommandHandler h ) { synchronized ( mHandlers ) { if ( ! mHandlers . contains ( h ) ) { mHandlers . add ( h ) ; } } }
public static int getTerminalMarginVerticalInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNotInRange ( TermuxPropertyConstants . KEY_TERMINAL_MARGIN_VERTICAL , DataUtils . getIntFromString ( value , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_VERTICAL_MARGIN ) , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_VERTICAL_MARGIN , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_VERTICAL_MIN , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_VERTICAL_MAX , true , true , LOG_TAG ) ; }
private void launchDetailActivity ( int position ) { Intent intent = new Intent ( this , DetailActivity . class ) ; intent . putExtra ( DetailActivity . EXTRA_POSITION , position ) ; startActivity ( intent ) ; }
private int ave ( int s , int d , float p ) { return s + java . lang . Math . round ( p * ( d - s ) ) ; }
public void clearFontsize ( ) { data . edit ( ) . remove ( "fontsize" ) . apply ( ) ; }
public double getRadius ( ) { return this . radius ; }
public static void logInvalidFormHash ( String url ) { Analytics . log ( NULL_OR_EMPTY_FORM_HASH , "host" , getHostFromUrl ( url ) ) ; }
public void onRedditAccountChanged ( ) { addSubscriptionListener ( ) ; postInvalidateOptionsMenu ( ) ; requestRefresh ( RefreshableFragment . ALL , false ) ; }
public Boolean requestBooleanPrompt ( String instructions , String hint ) { Boolean value = null ; try { value = ( Boolean ) requestPrompt ( instructions , hint , Boolean . class ) ; } catch ( Exception e ) { } return value ; }
public void terminate ( ) { mPingProgram . terminate ( ) ; }
public void initFromCursorHelper ( CursorHelper cursorHelper ) { super . initFromCursorHelper ( cursorHelper ) ; setVersion ( cursorHelper . getString ( VERSION ) ) ; setStatus ( cursorHelper . getEnum ( STATUS , DataCenter . Status . class ) ) ; }
public DrawerBuilder withOnDrawerListener ( Drawer . OnDrawerListener onDrawerListener ) { this . mOnDrawerListener = onDrawerListener ; return this ; }
public void setFragmentList ( List < OpenHABWidgetListFragment > fragmentList ) { this . fragmentList = fragmentList ; }
public void connectingToSimlarServerTimedOut ( ) { Lg . w ( LOGTAG , "connecting to simlar server timed out" ) ; mGuiCallState = GuiCallState . ENDED ; mLinphoneCallState = LinphoneCallState . CALL_END ; mCallEndReason = CallEndReason . SERVER_CONNECTION_TIMEOUT ; }
public void setComics ( CharacterComicDataContainer comics ) { mComics = comics ; }
public void onFailure ( Throwable error ) { Log . w ( TAG , error ) ; }
public float convertPixelsToDp ( float px ) { DisplayMetrics dm = getResources ( ) . getDisplayMetrics ( ) ; float dp = px / ( dm . densityDpi / 160f ) ; return Math . round ( dp ) ; }
private Actor getActorAt ( int x , int y ) { if ( tileMap [ x ] [ y ] . getOccupant ( ) instanceof Actor ) return ( ( Actor ) tileMap [ x ] [ y ] . getOccupant ( ) ) ; else return null ; }
private void updateBalance ( Value newBalance ) { currentBalance = newBalance . toCoin ( ) ; updateView ( ) ; }
public EventListAdapter ( Context context , List < Event > events ) { this . events = new ArrayList <> ( events ) ; this . context = context ; }
public static final Set < String > REMOTE_STYLE_NAMES = new HashSet < String > ( ) { { for ( int i = 0 ; i < 11 ; i ++ ) add ( values ( ) [ i ] . getRemoteName ( ) ) ; } } ;
public URLEntity [ ] getUrl_contained ( ) { return url_contained ; }
public ArrayList < String > getErrorLog ( ) { return mErrorLog ; }
public void singleNumber ( ) { List < Integer > values = IntegerRange . getValues ( "42" ) ; assertEquals ( 1 , values . size ( ) ) ; assertEquals ( 42 , values . get ( 0 ) . intValue ( ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( mIsClassConfigured && mOnDestroyListener != null ) mOnDestroyListener . onDestroy ( getContext ( ) ) ; mRealm . close ( ) ; }
public boolean isAudio ( ) { return ! ( mIsDirectory || mType == null ) && mType . equals ( FileTypeModelENUM . AUDIO . type ) ; }
public void setWebcasts ( String webcasts ) { this . webcasts = webcasts ; }
public void onClick ( View v ) { openInstagramId ( ) ; }
public void onGainedAudioFocus ( ) { mAudioFocus = AudioFocus . Focused ; if ( State . Playing == mState ) { configAndStartMediaPlayer ( false ) ; } }
public void run ( ) { try { sleep ( 5 * 1000 ) ; Intent i = new Intent ( getBaseContext ( ) , NavD . class ) ; startActivity ( i ) ; finish ( ) ; } catch ( Exception e ) { } }
public List < ForecastData > findWeather ( OpenWeatherApiRequestParameters requestParameters ) { throw new UnsupportedOperationException ( "This repository doesn't perform sync calls" ) ; }
public void clear ( ) { this . state . clear ( ) ; }
public boolean isEnabled ( ) { return labelTextView . isEnabled ( ) && imageView . isEnabled ( ) ; }
public org . thoughtcrime . securesms . backup . BackupProtos . SharedPreference getDefaultInstanceForType ( ) { return org . thoughtcrime . securesms . backup . BackupProtos . SharedPreference . getDefaultInstance ( ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( "SWELL" , "Get current time failed : " + msg ) ; }
public List < LottieCubicCurveData > getCurves ( ) { return curves ; }
public void onClick ( View view ) { adapterPresenter . onLikeClicked ( post ) ; }
public static boolean hasMultipleTypes ( String addressStr ) { try { return getPossibleTypes ( addressStr ) . size ( ) > 1 ; } catch ( AddressFormatException e ) { return false ; } }
public int getItemCount ( ) { return ethTokenList . size ( ) ; }
public HtmlTextView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public Integer getPrincipal ( ) { return principal ; }
public String getName ( ) { return "Request feature" ; }
public void explore ( View v ) { Intent exploreIntent = new Intent ( Cart . this , MainActivity . class ) ; startActivity ( exploreIntent ) ; }
public static int [ ] getWidgetIds ( Context context ) { AppWidgetManager appWidgetManager = AppWidgetManager . getInstance ( context ) ; return appWidgetManager == null ? new int [ ] { } : appWidgetManager . getAppWidgetIds ( new ComponentName ( context , EventAppWidgetProvider . class ) ) ; }
public Home getHome_location ( ) { return home_location ; }
public ProfileDrawerItem withTextColorRes ( int textColorRes ) { this . textColor = ColorHolder . fromColorRes ( textColorRes ) ; return this ; }
public void run ( ) { mCPUVoltage . reload ( ) ; }
public long getTotalWanted ( ) { return th . isValid ( ) ? th . status ( ) . totalWanted ( ) : 0 ; }
public LiveData < BeverageDetails > getBeverageDetails ( ) { return mBeverageDetails ; }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return NotificationManager . instance ; }
public Button ( Context pContext , @ Nullable AttributeSet pAttributeSet ) { super ( pContext , pAttributeSet ) ; }
public static int getColumnsCount ( SQLiteDatabase database ) { return database . query ( TABLE_NAME , null , null , null , null , null , null ) . getColumnCount ( ) ; }
public void onPause ( ) { super . onPause ( ) ; if ( deleteConfirmationDialog != null ) { deleteConfirmationDialog . dismiss ( ) ; deleteConfirmationDialog = null ; } }
public static com . coinomi . core . protos . Protos . TransactionInput parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public boolean isFossBuild ( ) { return getBuildConfigBoolean ( "IS_FOSS_BUILD" , false ) ; }
public boolean statefulCheckConnection ( ) { if ( endpoint == null ) loadOutgoingMessageProcessor ( ) ; if ( endpoint instanceof StatefulServiceMessageProcessor ) return ( ( MessageProcessorEndpointMqtt ) endpoint ) . checkConnection ( ) ; else return true ; }
public void setColour ( int colour ) { mPaint . setColor ( colour ) ; mBaseAlpha = Color . alpha ( colour ) ; mPaint . setAlpha ( mBaseAlpha ) ; }
public void setImages ( List < NoteImage > images ) { this . images = images ; }
public static String formatRank ( int rank ) { return format ( "%d . " , rank ) ; }
public static boolean isAlbums ( String baseSubreddit ) { return filters . getBoolean ( baseSubreddit + "_albums" , true ) ; }
public BookBuilder setQuality ( String quality ) { this . quality = quality ; return this ; }
public void save ( ) { save ( null ) ; }
public void setShowOriginal ( boolean value ) { if ( showOriginal == value ) { return ; } showOriginal = value ; if ( eglThread != null ) { eglThread . requestRender ( ) ; } }
public void setProgressColor ( @ ColorInt int color ) { progressColor ( color ) ; invalidate ( ) ; }
public int compare ( ContactSort lhs , ContactSort rhs ) { return lhs . getClassYear ( ) . compareTo ( rhs . getClassYear ( ) ) ; }
public VH onCreateViewHolder ( ViewGroup parent , int viewType ) { final VH holder = super . onCreateViewHolder ( parent , viewType ) ; if ( holder instanceof DraggableItemViewHolder ) { ( ( DraggableItemViewHolder ) holder ) . setDragStateFlags ( STATE_FLAG_INITIAL_VALUE ) ; } return holder ; }
public void thumbsChange ( int thumbs ) { if ( gameTime ) this . player . setShowsThumbs ( thumbs ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . find_in_reference ) ; }
public boolean hasBlogUrl ( ) { return ! TextUtils . isEmpty ( blogUrl ) ; }
public static long put ( CacheSQLiteHelper base , User user ) { return put ( base , user , ServiceGenerator . getGson ( ) . toJson ( user ) ) ; }
public ViewEventFragmentPagerAdapter ( FragmentManager fm , String eventKey ) { super ( fm ) ; mEventKey = eventKey ; }
private void showFab ( ) { if ( shouldShowFab ( ) && mFabView . getVisibility ( ) != View . VISIBLE ) { AniUtils . scaleIn ( mFabView , AniUtils . Duration . SHORT ) ; } }
private static double getBallVelocity ( ) { return Math . sqrt ( ball . getXVel ( ) *ball . getXVel ( ) + ball . getYVel ( ) *ball . getYVel ( ) ) ; }
public LabelMenuItem ( String text , Skin skin ) { this ( text , skin , "" ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "crux . bphc . cms" , appContext . getPackageName ( ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . meu_search_activity , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public Time getTime ( ) { return time ; }
public void onDismiss ( DialogInterface dialog ) { isSpaceDialogVisible = false ; cancel ( ) ; }
public void onClick ( View view ) { if ( mOnImgClickListener != null ) { mOnImgClickListener . onImgClick ( imageView ) ; } }
private void register ( ) { final IntentFilter intentFilter = new IntentFilter ( SunsetService . ACTION_UPDATE ) ; intentFilter . addCategory ( Intent . CATEGORY_DEFAULT ) ; this . sunsetBroadcastReceiver = new SunsetBroadcastReceiver ( ) ; registerReceiver ( this . sunsetBroadcastReceiver , intentFilter ) ; }
public long getItemId ( final int position ) { if ( position == transactions . size ( ) ) return 0 ; return WalletUtils . longHash ( transactions . get ( position ) . getHash ( ) ) ; }
public static void gem ( Object obj , String filnavn ) throws IOException { FileOutputStream datastrøm = new FileOutputStream ( filnavn ) ; ObjectOutputStream objektstrøm = new ObjectOutputStream ( datastrøm ) ; objektstrøm . writeObject ( obj ) ; objektstrøm . close ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { if ( highlightedAyah > 0 ) { outState . putInt ( SI_HIGHLIGHTED_AYAH , highlightedAyah ) ; } outState . putInt ( SI_SCROLL_POSITION , translationView . findFirstCompletelyVisibleItemPosition ( ) ) ; super . onSaveInstanceState ( outState ) ; }
public Builder ( @ Nullable String syncId , boolean isGroupSchedule ) { this . syncId = syncId ; this . isGroupSchedule = isGroupSchedule ; }
private void reloadSubs ( ) { int current = pager . getCurrentItem ( ) ; adapter = new OverviewPagerAdapter ( getSupportFragmentManager ( ) ) ; pager . setAdapter ( adapter ) ; pager . setCurrentItem ( current ) ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor cursor ) { Log . d ( LOG_TAG , "Transactions loader finished . Swapping in cursor" ) ; mCursorAdapter . swapCursor ( cursor ) ; mCursorAdapter . notifyDataSetChanged ( ) ; }
public ConnectButton ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( context ) ; }
public void onConnected ( @ Nullable Bundle bundle ) { Log . d ( TAG , "GoogleApiClient connection connected" ) ; nativeNearbyStatus ( 2 ) ; }
public String getJoke ( ) { mJokeString = JokeProvider . getJoke ( ) ; return mJokeString ; }
public AboutBuilder addChangeLogAction ( Intent intent ) { return addChangeLogAction ( util . clickIntent ( intent ) ) ; }
public Event ( String dialogTag , EventType type ) { this . dialogTag = dialogTag ; this . type = type ; }
public void onAnimationEnd ( Animation animation ) { mItemPanel . setVisibility ( View . VISIBLE ) ; }
public static void windmill ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . windmill_enter , R . anim . windmill_exit ) ; }
public static float get ( String key , float _default ) { return prefs . getFloat ( key , _default ) ; }
public String getLevel ( ) { return level ; }
public int getItemCount ( ) { return mUploadSessions . size ( ) + mDownloads . size ( ) + mPendingUploads . size ( ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . closeChats ) { removeSelfFromStack ( ) ; } }
public List < WorkshopData > loadInBackground ( ) { if ( mUrl == null ) { return null ; } List < WorkshopData > lecturesDataList = ExtractWorkshop . extLectures ( mUrl ) ; return lecturesDataList ; }
public void testMp3 ( ) { @ Language ( "HTML" ) String html = " < td >< a href = \"/speak - de/0/7/52qA5FttGIU . mp3\" > Mit Ihrem" ; String mp3 = BeolingusParser . getMp3AddressFromPronounciation ( html ) ; assertEquals ( "https : }
private TimePickerPreference ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public static boolean isVibrationEnabled ( ) { return Utils . readFile ( VIBRATION ) . equals ( "1" ) ; }
public void signout ( View v ) { FirebaseAuth . getInstance ( ) . signOut ( ) ; LoginManager . getInstance ( ) . logOut ( ) ; this . finish ( ) ; }
public String getVideoQualityPref ( ) { return sharedPreferences . getString ( PreferenceKeys . getVideoQualityPreferenceKey ( cameraId , false ) , "" ) ; }
public FadeAnimationController ( View view ) { this ( view , View . GONE ) ; }
public void disconnect ( BleDevice bleDevice ) { if ( bleBluetoothPool != null ) { bleBluetoothPool . disconnect ( bleDevice ) ; } }
public void addComponent ( Component component ) { mComponents . add ( component ) ; if ( component instanceof Collidable ) { mCollidableComponents . add ( ( Collidable ) component ) ; } }
public LeaderboardViewholder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new LeaderboardViewholder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_featured_projects , parent , false ) ) ; }
public void onClick ( View v ) { scrollToMessageId ( info . pinned_msg_id , 0 , true , 0 ) ; }
public static Map < Integer , InstanceSettings > getInstances ( Context context ) { ensureLoadedFromFiles ( context ) ; return instances ; }
public URI getAddressRequestUriResponse ( Address address ) { return getAddressRequestUriResponse ( address . toString ( ) ) ; }
public void onClick ( View v ) { dispatchOnItemClick ( v , position ) ; }
public boolean onTouchEvent ( MotionEvent e ) { return _ui . handleTouchEvent ( e ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfThorns_Info ) : super . desc ( ) ; }
public SearchEngine findEngine ( String id ) { if ( cachedEngines == null ) return null ; for ( SearchEngine engine : cachedEngines ) if ( Objects . equals ( engine . id , id ) ) return engine ; return null ; }
public DaoMaster ( Database db ) { super ( db , SCHEMA_VERSION ) ; registerDaoClass ( LancherInfoDao . class ) ; registerDaoClass ( AppInfoDao . class ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( context , user ) . deleteChannel ( channel . getUid ( ) ) ; channels . remove ( position ) ; notifyDataSetChanged ( ) ; }
private String getTileTablesPreferenceKey ( String database ) { return database + TILE_TABLES_PREFERENCE_SUFFIX ; }
public void setColors ( Integer idleColor , Integer playingColor ) { this . idleColor = idleColor ; this . playingColor = playingColor ; }
public void put ( String key , Boolean value ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; prefs . edit ( ) . putBoolean ( key , value ) . apply ( ) ; }
public static BaseNoteFragment newInstance ( String content ) { final BaseNoteFragment fragment = new NoteReadonlyFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putString ( PARAM_CONTENT , content ) ; fragment . setArguments ( args ) ; return fragment ; }
public void setTextFormatter ( @ Nullable ProgressTextFormatter textFormatter ) { this . mProvidedTextFormatter = textFormatter ; updateText ( ) ; mView . invalidate ( ) ; }
public void onClick ( View view ) { GistFile file = ( GistFile ) view . getTag ( ) ; startActivity ( GistViewerActivity . makeIntent ( this , mGistId , file . getFilename ( ) ) ) ; }
public void bindGroup ( Category category ) { ImageLoader . get ( ) . source ( category . getPhoto ( ) ) . bar ( bar ) . completer ( barFree ) . load ( imageBackground ) ; nameButton . setText ( category . getName ( ) ) ; }
public void onUserFollowingFail ( ) { Toast . makeText ( context , R . string . follow_failed , Toast . LENGTH_SHORT ) . show ( ) ; }
public void sha512FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "c6ee9e33cf5c6715a1d148fd73f7318884b41adcb916021e2bc0e800a5c5dd97f5142178f6ae88c8fdd98e1afb0ce4c8d2c54b5f37b30b7da1997bb33b0b8a31" , HashCalculator . newInstance ( HashType . SHA_512 ) . fromString ( inputText ) ) ; }
public Spanned toSpanned ( Context context , FileAudioModel fileAudioModel ) { return mFileAudioManager . toSpanned ( context , fileAudioModel ) ; }
public void setYear ( int year ) { this . year = year ; }
public void enableSubmitButton ( boolean enabled ) { mBtnFinish . setEnabled ( enabled ) ; }
public void setHeight ( Integer height ) { this . height = height ; }
private void animateToCheckedState ( boolean newCheckedState ) { isCheckAnimation = newCheckedState ; checkAnimator = ObjectAnimatorProxy . ofFloatProxy ( this , "progress" , newCheckedState ? 1 : 0 ) ; checkAnimator . setDuration ( 300 ) ; checkAnimator . start ( ) ; }
public Observable < Integer > getLatestPageObservable ( ) { return lastPageSubject . asObservable ( ) ; }
public final void repaint ( int x , int y , int width , int height ) { limitFps ( ) ; postEvent ( paintEvent ) ; }
public List < MovieRatingEntity > getTopSellingMovies ( ) { return topSellingMovies ; }
public void onDetach ( ) { mPrefs . unregisterOnSharedPreferenceChangeListener ( mPrefsListener ) ; super . onDetach ( ) ; }
public List < MyFilter > getFilter ( ) { return mFilterRvAdapter . getFilters ( ) ; }
public MsgType getMessageType ( ) { if ( mErrorMessage != ErrorMessage . NO ) { throw new Error ( "This is an error message . This should be handled ! Error : " + mErrorMessage ) ; } return mMessage . getType ( ) ; }
public void rotatePlane ( ) { m_PlayerBoard . rotatePlane ( ) ; }
public LiveData < List < PinnableCalendarEvent >> getEventsAfterDate ( @ NonNull List < DataSource > dataSources , @ NonNull Date firstDate ) { return calendarDao . getEventsAfterDate ( dataSources , firstDate ) ; }
public void showFullSearchInPlatesSection ( Cursor cursor ) { if ( searchPlatesFragment . isViewCreated ( ) ) { searchPlatesFragment . setData ( cursor ) ; searchPlatesFragment . showList ( ) ; searchPlatesFragment . showFullHeaders ( cursor . getCount ( ) ) ; } }
public void onAnimationRepeat ( ValueAnimatorCompat animation ) { }
public void setAuthenticatedAccount ( Account authenticatedAccount ) { this . authenticatedAccount = authenticatedAccount ; sharedPreferencesRepository . updateAuthenticatedAccount ( authenticatedAccount ) ; }
public void invalidateData ( ) { mIncidentAdapter . setIncidentData ( null ) ; }
public int getItemViewType_ ( int position ) { return 0 ; }
public BleConnector withUUIDString ( String serviceUUID , String charactUUID ) { return withUUID ( formUUID ( serviceUUID ) , formUUID ( charactUUID ) ) ; }
public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) super . onBackPressed ( ) ; }
public String getWebseite ( ) { return this . _webseite ; }
public int getCount ( ) { return cursor . getCount ( ) ; }
public Item randomUnequipped ( ) { Item ret = Random . element ( backpack . items ) ; if ( ret == null ) { return CharsList . DUMMY_ITEM ; } return ret ; }
public void setPower ( float power ) { this . power = power ; }
public int getDuration ( ) { return mMediaPlayer != null ? mMediaPlayer . getDuration ( ) : 0 ; }
public void testSafeToAddAuthToken22 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( notWpcomAddress3 ) ) ; }
public BluetoothSerialInterface ( Context appContext ) { notifyContext = appContext ; activeDevice = null ; btGattConnectorBLEDevice = new BluetoothGattConnector ( notifyContext ) ; btGattConnectorBLEDevice . setBluetoothSerialInterface ( this ) ; baudRate = Settings . serialBaudRate ; serialConfigured = false ; receiversRegistered = false ; }
public Genre ( String id ) { this . id = Shorty . avoidNull ( id ) ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { mode . getMenuInflater ( ) . inflate ( R . menu . account_options , menu ) ; mode . setTitle ( account . getDescription ( ) ) ; return true ; }
public void onResume ( ) { super . onResume ( ) ; BubblePopImageView tableImageView = ( BubblePopImageView ) getActivity ( ) . findViewById ( R . id . table ) ; if ( tableImageView != null ) tableImageView . setProgress ( 1f ) ; }
public void addItems ( final Collection < GroupedRecyclerViewAdapter . Item > items ) { General . checkThisIsUIThread ( ) ; mAdapter . appendToGroup ( GROUP_ITEMS , items ) ; doWorkaround ( ) ; }
public AboutBuilder addShareAction ( String subject , String message ) { return addAction ( share , R . string . share_app , util . shareThisApp ( subject , message ) ) ; }
public static ErrorSyncServerMessage getFailureServerResponse ( ) { return mTestDataFactory . getObjectTypePojo ( ErrorSyncServerMessage . class , FakeJsonName . FAILURE_SERVER_RESPONSE ) ; }
public void setContainerManufacturer ( String containerManufacturer ) { this . containerManufacturer = containerManufacturer ; }
public void setPrincipal ( Integer principal ) { this . principal = principal ; }
public TagDeletedEvent ( Tag tag ) { this . tag = tag ; }
public List < ForecastData > getWeatherModel ( ) throws IOException { List < ForecastData > forecastData = new LinkedList <> ( ) ; if ( mOpenWeatherCurrentData != null ) { forecastData = populateWeatherFromPojo ( forecastData ) ; } return forecastData ; }
public void onClick ( View v ) { addressSearch . search ( searchText . getText ( ) . toString ( ) ) ; startSearch ( ) ; }
public Long getUploadKbit ( ) { return uploadKbit ; }
private void onError ( ) { ViewUtil . showLongToast ( this , getResources ( ) . getString ( R . string . error_occurred ) ) ; progressBar . setVisibility ( View . GONE ) ; }
public void setTopRatedMovies ( List < MovieRatingEntity > topRatedMovies ) { this . topRatedMovies = topRatedMovies ; }
public java . util . List < com . google . protobuf . Any > getNonCriticalExtensionOptionsList ( ) { if ( nonCriticalExtensionOptionsBuilder_ == null ) { return java . util . Collections . unmodifiableList ( nonCriticalExtensionOptions_ ) ; } else { return nonCriticalExtensionOptionsBuilder_ . getMessageList ( ) ; } }
public void setETag ( String eTag ) { this . eTag = eTag ; }
public ArrayOfFicheEmployeDate Func ( ) throws java . lang . Exception { return RechercheDate ( FiltreNom , FiltrePrenom , FiltreServiceCode ) ; }
public boolean addAll ( int index , Collection < ? extends E > c ) { throw new UnsupportedOperationException ( ) ; }
public void removeItem ( final long songId ) { final SQLiteDatabase database = mMusicDatabase . getWritableDatabase ( ) ; deleteEntry ( database , String . valueOf ( songId ) ) ; }
public int getItemCount ( ) { return images . size ( ) ; }
public void run ( ) { loadPlaylist ( ) ; }
public WritableHashSet ( CreationData creationData ) { this . timestamp = creationData . timestamp ; this . key = creationData . key ; }
public int getConfigType ( ) { return ConfigRecyclerViewAdapter . TYPE_BACKGROUND_COMPLICATION_IMAGE_CONFIG ; }
public void onCreate ( ) { super . onCreate ( ) ; if ( ! BuildConfig . DEBUG ) { Fabric . with ( this , new Crashlytics ( ) ) ; } initImageLoader ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater myMenuInflater = getMenuInflater ( ) ; myMenuInflater . inflate ( R . menu . home_menu , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void onError ( SteemConnectException e ) { mHandler . post ( steemCancellingVoteExceptionRunnable ) ; }
public static int decrementAndGetCurrentCount ( ) { if ( c . get ( ) > 0 ) return c . decrementAndGet ( ) ; else return 0 ; }
public static boolean isPropActive ( String key ) { return executeCommandWithOutput ( "getprop | grep " + key + "\n" ) . split ( " ] : " ) [ 1 ] . contains ( "running" ) ; }
public void hide ( ) { popupWindow . dismiss ( ) ; }
private String getLimitWarning ( int limit ) { return Utils . format ( Game . getVar ( R . string . Spells_SummonLimitReached ) , this . name ( ) , limit ) ; }
public void enable ( ) { if ( mCheckHandler == null ) { return ; } disable ( ) ; mCheckHandler . postDelayed ( this : : timing , 300 ) ; }
public List < Track > getTrackList ( ) { return _ArrayListTracks ; }
public void onError ( Error error ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Failed to pause music" ) ; }
public void onLocationSent ( SuccessfullySentLocationToServerEvent event ) { LogUtil . i ( TAG , "received successfully sent location event" ) ; mLocationRecordsAdapter . replaceLocationRecord ( event . getDeletedUnsentLocationRecord ( ) , event . getReceivedLocationRecord ( ) ) ; EventUtil . removeStickyEvent ( event ) ; }
public void onEvent ( PodcastCompletedEvent podcastCompletedEvent ) { collapsePodcastView ( ) ; sliding_layout . setPanelState ( SlidingUpPanelLayout . PanelState . COLLAPSED ) ; }
public boolean isKanjiReadingPriority ( ) { return mIsKanjiReadingPriority ; }
public void onItemDeleted ( @ NonNull Item item ) { Intent intent = new Intent ( ) ; intent . putExtra ( EXTRA_DELETED_ITEM , item ) ; setResult ( REQUEST_CODE_ITEM_DELETED , intent ) ; }
public Binder < CommentFooterView > createBinder ( Comment model ) { return new CommentFooterBinder ( model ) ; }
private BookSettings sampleBookSettings ( String filename ) { BookSettings bs = new BookSettings ( filename ) ; bs . rotation = BookRotationType . UNSPECIFIED ; bs . viewMode = DocumentViewMode . VERTICALL_SCROLL ; return bs ; }
public boolean getImproveAutoMove ( ) { return savedSharedData . getBoolean ( PREF_KEY_IMRPOVE_AUTO_MOVE , DEFAULT_IMPROVE_AUTO_MOVE ) ; }
public void cleanUpAll ( ) { this . editor . remove ( KEY_SHORTCUT ) ; this . editor . remove ( KEY_DB_PERSIST ) ; this . editor . commit ( ) ; Logger . d ( this . getClass ( ) , "AppInfoStorage . cleanUpAll DONE" ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . platypii . baseline" , appContext . getPackageName ( ) ) ; }
private boolean isDirectory ( LayoutElementParcelable path ) { return path . isDirectory ( ) ; }
public void onResults ( Bundle results ) { mState = State . INIT ; mButtonMicrophone . setState ( mState ) ; onSuccess ( intentRecognizer . getStringExtra ( RecognizerIntent . EXTRA_LANGUAGE ) , results ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . PERSENTAGE ) ; }
public String getLinkRel ( ) { return linkRel ; }
private void checkNotDisposed ( ) { if ( mDisposed ) throw new IllegalStateException ( "IabHelper was disposed of , so it cannot be used . " ) ; }
public static void resetClass ( ) { fileSenderListner = new FileSenderListner ( ) ; }
public void onChartLongPressed ( MotionEvent me ) { Log . i ( "LongPress" , "Chart longpressed . " ) ; }
public KcaItemAdapter ( Context context , int layout , List < Integer > data ) { this . context = context ; this . layout = layout ; this . item = data ; inf = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public String tripDurationTimeRemainingText ( int pos ) { timeCalculation ( pos ) ; return getTripDurationText ( ) + " " + getTripDayYearText ( ) + getDaysRemainingText ( ) ; }
public float getMinZoom ( State state ) { return zoomBounds . set ( state ) . getMinZoom ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return help_AppUpdate . TLdeserialize ( stream , constructor , exception ) ; }
public void testIsWPCOMURI4 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( wpcomAddress4 ) ) ) ; }
public int getCurrentStoryId ( ) { return this . currentStory . getId ( ) ; }
public E pop ( ) { return null ; }
public byte [ ] getBufferCompatible ( ) { return readBuffer_compatible ; }
public void setFeeChargesPortion ( Integer feeChargesPortion ) { this . feeChargesPortion = feeChargesPortion ; }
public void onClickCancel ( View view ) { Log . v ( LOG_TAG , "onClickCancel ( ) called with : " + "view = [ " + view + " ] " ) ; finish ( ) ; }
public void showCurRecord ( ) { showRecord ( curRecord ) ; }
public void unregisterListener ( ) { mAuthStatelistener = null ; }
private void wakeUpScreenForBell ( long wakeTime ) { if ( mActivityActive ) { int flags = PowerManager . ACQUIRE_CAUSES_WAKEUP | PowerManager . FULL_WAKE_LOCK ; PowerManager . WakeLock temporaryWakeLock = mPowerManager . newWakeLock ( flags , "Debatekeeper - bell" ) ; temporaryWakeLock . acquire ( wakeTime ) ; } }
public static String normalizeMagnetHash ( String hash ) { return INFOHASH_PREFIX + hash ; }
public boolean isErrorMessage ( ) { return ( mErrorMessage != ErrorMessage . NO ) ; }
public static void e ( final String msg , Throwable tr ) { Log . e ( mTAG , getMessage ( msg ) , tr ) ; saveToFile ( ) ; }
public void setDrinks ( ArrayList < Food > drinks ) { this . drinks = drinks ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { state . setRawState ( switc . isChecked ( ) ) ; checked ( state , activator ) ; }
public static String formatProfileName ( Context context , Instance instance , Profile profile ) { String instanceName = formatInstanceUrl ( instance ) ; return context . getString ( R . string . saved_profile_display_name , instanceName , profile . getDisplayName ( ) ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : this . finish ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public AsyncExecOperationTask ( StacklrExpActivity activity , List < TasksRequest > lst ) { super ( activity ) ; lst_ = lst ; }
public void onItemSelected ( AdapterView av , View v , int arg2 , long arg3 ) { int controlsSelection = controlsSpinner . getSelectedItemPosition ( ) ; activity . setControlSide ( controlsSelection ) ; clientModel . setControlSide ( controlsSelection ) ; clientModel . savePreferences ( activity ) ; }
public void setPrimaryItem ( ViewGroup container , int position , Object object ) { if ( mCurrentFragment != object ) { mCurrentFragment = ( Fragment ) object ; } super . setPrimaryItem ( container , position , object ) ; }
public void getDefaultMediaUrlWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "" ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public void onStartTrackingTouch ( final SeekBar _seekBar ) { }
public ScanResult createFromParcel ( Parcel in ) { return new ScanResult ( in ) ; }
public void setHiddenAppsList ( ArrayList < String > value ) { setStringList ( R . string . pref_key__hide_apps , value ) ; }
public void start ( ) { ParsingLoadable < HlsPlaylist > masterPlaylistLoadable = new ParsingLoadable <> ( dataSourceFactory . createDataSource ( ) , initialPlaylistUri , C . DATA_TYPE_MANIFEST , playlistParser ) ; initialPlaylistLoader . startLoading ( masterPlaylistLoadable , this , minRetryCount ) ; }
public void handleEvent ( DcEvent event ) { refresh ( ) ; }
private void setBitmap ( @ NonNull ImageView iv , @ Nullable Bitmap bitmap ) { if ( bitmap == null ) { iv . setVisibility ( GONE ) ; } else { iv . setImageBitmap ( bitmap ) ; } }
public void editStyle ( RPSParty game ) { skin . add ( "createPartyImage" , game . getAssetManager ( ) . get ( "join . jpg" ) ) ; style = new ButtonStyle ( ) ; style . up = skin . getDrawable ( "createPartyImage" ) ; }
private void handleOnItemViewClicked ( View v ) { int position = mRecyclerView . getChildAdapterPosition ( v ) ; if ( position != RecyclerView . NO_POSITION ) { ( ( UnderSwipeableExampleActivity ) getActivity ( ) ) . onItemClicked ( position ) ; } }
private void SetupList ( ) { if ( tp . playlist . IsEmpty ( ) ) { tp . playlist . UpdateList ( ) ; } }
public static Observable < CnBetaApi . Result < List < ArticleSummary >>> top10 ( ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . top10 ( timestamp , CnBetaSignUtil . top10Sign ( timestamp ) ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; sortingDialogPresenter . destroy ( ) ; ButterKnife . unbind ( this ) ; }
public void maybeThrowSourceInfoRefreshError ( ) throws IOException { playlistTracker . maybeThrowPrimaryPlaylistRefreshError ( ) ; }
public void toInstantNull ( ) { assertEquals ( null , DateTypeConverters . toInstant ( null ) ) ; }
public int getTextColor ( ) { return textColor ; }
public void onUserStateUpdated ( IUser user ) throws RemoteException { mChannelListAdapter . animateUserStateUpdate ( user , mChannelView ) ; getActivity ( ) . supportInvalidateOptionsMenu ( ) ; }
public void onEvent ( CommandEvents . RequestToggle requestToggle ) { if ( Session . isStarted ( ) ) { stopLogging ( ) ; } else { startLogging ( ) ; } }
public void onClick ( View v ) { startAnimation ( hide ) ; }
public void onSearchViewClosed ( ) { fragment . search ( "" ) ; }
public void onDialogResult ( int dialogButton , int actionId ) { if ( actionId == DELETE_ACTION && dialogButton == DialogInterface . BUTTON_POSITIVE ) { MovirtAccount account = getSelectedAccount ( ) ; clearSelection ( ) ; accountRxStore . removeAccount ( account ) ; } }
public GroupSchedule loadDataFromNetwork ( ) throws Exception { return new GroupSchedule ( getService ( ) . getScheduleOfGroup ( groupId ) ) ; }
private void ensureSelectionArgs ( ) { if ( mSelectionArgs == null ) { mSelectionArgs = new ArrayList < String > ( ) ; } }
public void onEvent ( SaveUserEvent event ) { mSorularAdapter . removeAdapterItems ( ) ; tempAnswer . clear ( ) ; modControl . clear ( ) ; answerAndTempQuestionControl . clear ( ) ; addQuestionsToAdapter ( 10 ) ; EventBus . getDefault ( ) . removeStickyEvent ( event ) ; }
private void whenClicking ( ) { uut . onClick ( mTextView ) ; }
public void run ( ) { toggleAnalyzingUI ( true ) ; }
public BigDecimal getCapitalPlaceFinAnnee ( ) { return this . capitalPlaceFinAnnee ; }
public static String getCache ( Context context , String key , String defaultValue ) { SharedPreferences sp = context . getSharedPreferences ( TagsUtil . SHARED_PREFS_NAME , Context . MODE_PRIVATE ) ; return sp . getString ( key , defaultValue ) ; }
public void doPositiveClickLvLDialog ( int newMaxLvl ) { updateMaxLVL ( newMaxLvl ) ; }
public Worker createWorker ( ) { return new ExecutorScheduler . ExecutorWorker ( Runnable : : run ) ; }
public void setProgress ( @ FloatRange ( from = 0f , to = 1f ) float progress ) { super . setProgress ( progress ) ; if ( matte != null ) { matte . setProgress ( progress ) ; } }
public void onSwiped ( RecyclerView . ViewHolder viewHolder , int direction ) { }
public QuerySqlite ( Mapping < Select , I , Cursor > mapping ) { this . mapping = mapping ; }
public Dialog onCreateDialog ( Bundle savedInstanceState ) { restoreArguments ( ) ; return datePickerFialog ( ) ; }
public void setLandCover ( Long landCover ) { this . landCover = landCover ; }
static public slog ( String tag , String txt ) { Log . i ( tag , txt ) ; }
public static int getBackColor ( Activity a ) { SharedPreferences sharedPref = a . getPreferences ( Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "back" , 0 ) ; }
public ModifiedLesson getModifier ( ) { return modifier ; }
public boolean shouldStream ( ) { return mPrefs . getBoolean ( Constants . PREF_PREFER_STREAMING , false ) ; }
private Fragment getCurrentFragment ( ) { return getSupportFragmentManager ( ) . findFragmentById ( R . id . content_frame ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponsePlaylistSongs . Builder getResponsePlaylistSongsBuilder ( ) { bitField0_ | = 0x00080000 ; onChanged ( ) ; return getResponsePlaylistSongsFieldBuilder ( ) . getBuilder ( ) ; }
public Account getItem ( int position ) { return mAccounts [ position ] ; }
private void whenTrackingOnScreen ( ) { uut . trackOnScreen ( mScreenName ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { getLoaderManager ( ) . initLoader ( LOADER_ID , null , this ) ; super . onActivityCreated ( savedInstanceState ) ; }
public boolean attachTo ( Char target ) { if ( target . isFlying ( ) ) { return false ; } return super . attachTo ( target ) ; }
public MinerViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . row_miner , parent , false ) ; return new MinerAdapter . MinerViewHolder ( view ) ; }
public void setmType ( int mType ) { this . mType = mType ; }
public void run ( ) { JobList . this . updateTotal ( ) ; JobList . this . updateDisplay ( 1000 ) ; }
public void testEntrySet ( ) throws Exception { assertEquals ( entries . entrySet ( ) , repls . entrySet ( ) ) ; }
public void onClick ( DialogInterface dialog , int id ) { shareWith ( getString ( R . string . app_name ) , getString ( R . string . share_text ) ) ; }
public boolean propagateToChildren ( String key , int depth ) { if ( key . equals ( "__container" ) ) { return true ; } return depth < keys . size ( ) - 1 || keys . get ( depth ) . equals ( "**" ) ; }
public void onItemClicked ( RecyclerView recyclerView , int position , View v ) { searchForPostsWithTag ( adapter . getItem ( position ) . getName ( ) , true ) ; }
public void run ( ) { CardDeviceManager . INSTANCE . scanForDevices ( ProjectWalrusApplication . this ) ; }
private void verifyDataStoreMockInteractions ( Event event ) { Mockito . verify ( dataStore , Mockito . times ( 1 ) ) . editEvent ( event ) ; Mockito . verifyNoMoreInteractions ( dataStore ) ; }
public boolean onKeyDown ( int keyCode , KeyEvent event ) { if ( keyCode == KeyEvent . KEYCODE_BACK && event . getRepeatCount ( ) == 0 ) { finishActivity ( ) ; } return super . onKeyDown ( keyCode , event ) ; }
public CustomSelectionCallback ( Activity activity ) { this . mActivity = activity ; }
public void editStyle ( RPSParty game ) { skin . add ( "Paper" , game . getAssetManager ( ) . get ( "paper . png" ) ) ; style = new Button . ButtonStyle ( ) ; style . up = skin . getDrawable ( "Paper" ) ; }
private void initTabLayout ( ) { TabLayout tabLayout = ( TabLayout ) findViewById ( R . id . tab_layout ) ; tabLayout . setupWithViewPager ( viewPager ) ; setupTabIcons ( tabLayout ) ; }
public void scrollToTop ( ) { mRecyclerView . smoothScrollToPosition ( 0 ) ; }
public Attr setUpDuration ( int upDuration ) { this . upDuration = upDuration ; return this ; }
public CircleImageView ( Context context ) { this ( context , null ) ; }
public static String getTopicLinkFromPermalinkPage ( String sourcePage ) { Matcher topicLinkMatcher = topicLinkInPermalinkPattern . matcher ( sourcePage ) ; if ( topicLinkMatcher . find ( ) ) { return "http : } return "" ; }
public EventListener < SinglePlaylistViewModel . State > getEventListener ( ) { return mEventListener ; }
public void onItemClick ( AdapterView < ? > arg0 , View arg1 , int position , long arg3 ) { ShaarliAccount clickedAccount = ( ShaarliAccount ) accountsListView . getItemAtPosition ( position ) ; AddOrEditAccount ( clickedAccount ) ; }
public Builder setFabType ( String fabType ) { mFabType = fabType ; return this ; }
public void onFailure ( Call < ResTxInfo > call , Throwable t ) { WLog . w ( "onFetchSendTx KAVA onFailure" ) ; if ( BaseConstant . IS_SHOWLOG ) t . printStackTrace ( ) ; }
public static ArrayList < Song > matchFilesWithMediaStore ( @ NonNull Context context , @ Nullable List < File > files ) { return SongLoader . getSongs ( makeSongCursor ( context , files ) ) ; }
public GoogleAccountPicker providesGoogleAccountPicker ( Context context ) { return new GoogleAccountCredentialGoogleAccountPicker ( GoogleAccountCredential . usingOAuth2 ( context , Collections . singletonList ( DriveScopes . DRIVE ) ) . setBackOff ( new ExponentialBackOff ( ) ) ) ; }
public void onErrorResponse ( VolleyError error ) { Toast . makeText ( GuestOne . this , error . getMessage ( ) , Toast . LENGTH_LONG ) . show ( ) ; }
public MessagePatch setImportant ( boolean important ) { this . important = important ; return this ; }
public void finish ( ) { if ( gaTracker != null ) { gaTracker . stop ( ) ; } }
public SquareLayout ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public int execute ( ) throws LuaException { L . pushString ( Integer . toString ( ( int ) Window . this . parent . getStatusBarHeight ( ) ) ) ; return 1 ; }
public Card ( ) { name = ProjectWalrusApplication . getContext ( ) . getString ( R . string . default_card_name ) ; }
public static void slideDown ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . slide_down_enter , R . anim . slide_down_exit ) ; }
public static boolean isVideo ( String mimeType ) { return BASE_TYPE_VIDEO . equals ( getTopLevelType ( mimeType ) ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { cancelScheduledNotification ( ) ; }
private void closeCursor ( boolean notify ) { Cursor cursor = this . cursor ; this . cursor = null ; if ( cursor != null ) { if ( notify ) notifyDataSetChanged ( ) ; cursor . close ( ) ; } }
public void onClick ( View view ) { setDecoder38 ( ) ; }
public SayHi setFields ( java . lang . String fields ) { return ( SayHi ) super . setFields ( fields ) ; }
public static List < ModInstance > getMods ( ) { return mods ; }
public void onResourceReady ( Bitmap bitmap , Transition < ? super Bitmap > transition ) { update ( bitmap , Color . TRANSPARENT ) ; }
public NegatedConditional ( String mKey , ParsedNode child ) { this . mKey = mKey ; this . mChild = child ; }
public void setFile ( File file ) { this . mFile = file ; }
public void openChatWith ( int accountId , int messagesOwnerId , @ NonNull Peer peer ) { PlaceFactory . getChatPlace ( accountId , messagesOwnerId , peer ) . tryOpenWith ( getActivity ( ) ) ; }
public void needSendTyping ( ) { if ( currentMessageObject != null ) { MessagesController . getInstance ( ) . sendTyping ( currentMessageObject . getDialogId ( ) , 0 , classGuid ) ; } }
public void onBindViewHolder ( ViewHolder holder , int position ) { BooksCollection booksCollection = bookCollections . exact ( position ) ; holder . booksCollection = booksCollection ; holder . setEnabledButtons ( ) ; holder . collectionNameTextView . setText ( booksCollection . getName ( ) ) ; }
public void logPageAccess ( PageInfo pageId ) { sGlobalUserDBHelper . logPageAccess ( pageId , bookId ) ; }
public Iterator < Candidate > iterator ( ) { return list . iterator ( ) ; }
public String toString ( ) { if ( ! hasExecuted ( ) ) return getExecutionInputLogString ( this , true , true ) ; else { return getExecutionOutputLogString ( this , true , true ) ; } }
public void release ( ) { removeCallbacks ( null ) ; mHolder = null ; }
public void testLoadingTextDv ( ) throws IOException { onBookFile ( "html/dv . org" ) . onLoad ( ) . onGet ( ) ; }
public VideoThumbnailsView ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; }
public void paintShouldNotDrawAnythingIfValuesAreZero ( ) { pieChart = new PieChart ( plot , new double [ ] { 0 , 0 } , new ColorWrap [ ] { ColorWrap . RED , ColorWrap . GREEN } ) ;
private ReaderPostListFragment getListFragment ( ) { Fragment fragment = getFragmentManager ( ) . findFragmentByTag ( getString ( R . string . fragment_tag_reader_post_list ) ) ; if ( fragment == null ) { return null ; } return ( ( ReaderPostListFragment ) fragment ) ; }
public void setPrincipalDisbursed ( Integer principalDisbursed ) { this . principalDisbursed = principalDisbursed ; }
public void onDetach ( ) { if ( BuildConfig . LOG_DEBUG ) LogUtils . d ( TAG ) ; super . onDetach ( ) ; mListener = null ; }
private float getMatrixComponent ( final float [ ] matrix , int row , int col ) { return matrix [ row*3 + col ] ; }
public boolean onUnbind ( Intent intent ) { Log . d ( TAG , "onUnbind ( ) " ) ; return true ; }
private MessageSearchTask ( XmppConnectionService xmppConnectionService , String term , OnSearchResultsAvailable onSearchResultsAvailable ) { this . xmppConnectionService = xmppConnectionService ; this . term = term ; this . onSearchResultsAvailable = onSearchResultsAvailable ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . say ( b . getCid ( ) , null , "/join " + input . getText ( ) . toString ( ) , null ) ; dialog . dismiss ( ) ; }
private void changeAutoCallPrefs ( ) { boolean isChecked = binding . autoCallPrefs . isChecked ( ) ; binding . autoCallPrefs . setChecked ( ! isChecked ) ; mPrefs . setAutoCallEnabled ( ! isChecked ) ; }
public static int getAccentColor ( Context context ) { SharedPreferences pref = getSharedPreferences ( context ) ; return pref . getInt ( SP_KEY_ACCENT_COLOR , context . getResources ( ) . getInteger ( R . integer . tb_translucent_white ) ) ; }
public void onClick ( View view ) { launchMediaGalleryActivity ( ) ; }
public void run ( ) { AppDatabase db = AppDatabase . getAppDatabase ( getActivity ( ) ) ; db . medicineDao ( ) . delete ( thismedicine ) ; ( ( MainActivity ) getActivity ( ) ) . switchFragment ( Medicine . newInstance ( ) ) ; }
public void cancel ( ) { if ( hasListener ( ) ) getListener ( ) . onCancel ( ) ; if ( isShowing ( ) ) dismiss ( ) ; }
public void logOnce ( ) { Session . setSinglePointMode ( true ) ; if ( Session . isStarted ( ) ) { startGpsManager ( ) ; } else { startLogging ( ) ; } }
private void changeFragment ( Fragment targetFragment ) { resideMenu . clearIgnoredViewList ( ) ; getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . fragment_container , targetFragment , "fragment" ) . setTransitionStyle ( FragmentTransaction . TRANSIT_FRAGMENT_FADE ) . commit ( ) ; }
private int getLayout ( ) { if ( this . position == 0 ) { return R . layout . view_keypad_primary ; } else { return R . layout . view_keypad_secondary ; } }
public Operator take ( Object operator ) { return next ( ) ; }
public boolean appliesTo ( ResourceFolderType folderType ) { return folderType == ResourceFolderType . VALUES ; }
public HtspDataSource createDataSourceInternal ( ) { return new HtspChannelDataSource ( mContext , mConnection , mStreamProfile ) ; }
public void setUpForCreateAccount ( ) { uniqueId = "cacophonometer_test_" + UUID . randomUUID ( ) ; nowNavigateRight ( ) ; }
public void hideMiniPlayer ( ) { miniBarRl . setVisibility ( View . GONE ) ; }
public int hashCode ( ) { return Objects . hash ( arcana , level , name , rare , special , dlc , id , gameType ) ; }
public int getCurrentParentForum ( ) { return currentParentForumId ; }
public void setLocalUri ( @ Nullable final String localUri ) { this . localUri = localUri ; }
public void onDown ( @ NonNull MotionEvent e ) { }
public void onResume ( ) { super . onResume ( ) ; Log . d ( TAG , "onResume" ) ; mScannerView . setResultHandler ( this ) ; mScannerView . startCamera ( ) ; }
public com . coinomi . core . protos . Protos . TransactionInput getTransactionInput ( int index ) { return transactionInput_ . get ( index ) ; }
private static boolean isAudioFormat ( MediaFormat format ) { return MediaConverter . getMimeTypeFor ( format ) . startsWith ( "audio/" ) ; }
public void switchToPreferences ( @ SuppressWarnings ( "UnusedParameters" ) View view ) { Intent intent = new Intent ( MainMenu . this , Preferences . class ) ; startActivity ( intent ) ; }
public boolean onLongEntryClick ( DatabaseEntry entry ) { _listener . onLongEntryClick ( entry ) ; return true ; }
public void onViewDetachedFromWindow ( RecyclerView . ViewHolder holder ) { if ( holder instanceof PatientViewHolder ) { ( ( PatientViewHolder ) holder ) . clearAnimation ( ) ; } }
public int getNeighbors ( ) { return neighborCoords . size ( ) ; }
public void launchSAF ( HFile file , HFile file1 ) { }
private APIResponseHandler ( AppCompatActivity context ) { this . context = context ; }
public LoadIntoRecycler ( @ NotNull String url , @ NotNull Activity baseActivity ) { super ( url , baseActivity ) ; this . url = url ; }
public void addNoteToHighlight ( Highlight mSelectedHighlight ) { sGlobalUserDBHelper . addNoteToHighlight ( mSelectedHighlight , bookId ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'PGE_PRICES'" ; db . execSQL ( sql ) ; }
public void onDestroy ( ) { if ( stickersGridAdapter != null ) { NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . stickersDidLoaded ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . recentDocumentsDidLoaded ) ; } }
public void setCreated ( Date created ) { this . created = created ; }
public IPresenterFactory < FeedPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new FeedPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , saveInstanceState ) ; }
public int getSuccessCounter ( QoSTestResultEnum key ) { if ( key != null ) { QoSResultStats stats = resultCounter . get ( key ) ; return ( stats != null ? stats . getSuccessCounter ( ) : 0 ) ; } else { return successCounter ; } }
public void onSignalingChange ( PeerConnection . SignalingState signalingState ) { Log . d ( Config . LOGTAG , "onSignalingChange ( " + signalingState + " ) " ) ; }
public Set < String > getExtAppList ( ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return prefs . getStringSet ( PREFERENCES_KEY , new HashSet < String > ( ) ) ; }
public void percentLoadFailed ( LoadFailedEvent event ) { percentLoadStatus = LoadStatus . FAILED ; dataUsedText . setText ( event . errorMessage ) ; percentDataUsedView . setProgress ( 0 ) ; }
private Card getCardInDefaultDeck ( Sched s ) { selectDefaultDeck ( ) ; s . reset ( ) ; return s . getCard ( ) ; }
public void setBgColor ( @ ColorInt int bgColor ) { this . mBgColor = bgColor ; this . mShadowPaint . setColor ( bgColor ) ; invalidate ( ) ; }
private void clear ( ) { mInfixExpression . clear ( ) ; updateText ( ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . buttonAddSeries : trainingGenerateNextSet ( ) ; break ; case R . id . buttonShowDescription : getTrainingDescAsynch ( TrainingDetailsActivity . this ) ; break ; } }
private void selectPdfFileFromSystem ( ) { selectFileFromSystem ( "application/pdf" , Actions . CONVERT ) ; }
public String getDescription ( ) { return StringUtils . notNullStr ( description ) ; }
public void setDomainLowerBoundaryMode ( BoundaryMode domainLowerBoundaryMode ) { this . domainLowerBoundaryMode = domainLowerBoundaryMode ; }
public int getCount ( ) { return mReactions != null ? mReactions . size ( ) : 1 ; }
public com . google . protobuf . AnyOrBuilder getNewPubKeyOrBuilder ( ) { if ( newPubKeyBuilder_ != null ) { return newPubKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return newPubKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : newPubKey_ ; } }
public void saveHardwareAccelerationDialogShown ( ) { Logger . debug ( "Saving hardware acceleration dialog is shown" ) ; SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putBoolean ( SettingsService . PREF_HW_ACCEL_DIALOG_SHOWN , true ) ; editor . commit ( ) ; }
public int getItemCount ( ) { return Daedalus . configurations . getCustomDnsServers ( ) . size ( ) ; }
public void cleanup ( ) { imageView . setImageDrawable ( null ) ; subsamplingImageView . recycle ( ) ; }
private void wire ( ) { view . setOnClickListener ( this ) ; ivExpander . setOnClickListener ( this ) ; if ( listener == null ) view . setOnLongClickListener ( this ) ; if ( btnHelp != null ) btnHelp . setOnClickListener ( this ) ; }
public void notifyChildItemChanged ( int groupPosition , int childPosition ) { mAdapter . notifyChildItemChanged ( groupPosition , childPosition , null ) ; }
public long getZcuPk ( ) { return this . zcuPk ; }
public Game ( long timestamp ) { this . timestamp = timestamp ; }
public void onFail ( int errorCode , String msg ) { Log . d ( "SWELL" , String . format ( "Pair failed ( %d ) : %s" , errorCode , msg ) ) ; }
public void onClick ( View v ) { onResume ( ) ; selectedText . clear ( ) ; Toast . makeText ( SavedTextActivity . this , "Deleted Item Restored" , Toast . LENGTH_SHORT ) . show ( ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( ListeDeCours ) getResult ( ListeDeCours . class , __result , "listeCoursIntervalleSessionsResult" , __envelope ) ; }
public Fragment fragment ( ) { return WelcomeParallaxFragment . newInstance ( layoutResId , title , description , firstParallaxFactor , lastParallaxFactor , parallaxRecursive , headerTypefacePath , descriptionTyefacePath , headerColor ) ; }
public void onMute ( boolean mute , String id , int position ) { }
private int createDecisionId ( MTMDecision d ) { int myId ; synchronized ( openDecisions ) { myId = decisionId ; openDecisions . put ( myId , d ) ; decisionId += 1 ; } return myId ; }
public View getDropDownView ( int position , View convertView , ViewGroup parent ) { return _getView ( position , convertView ) ; }
public void whenPlayingIsTrue_showsPlayingIcon ( ) { button . setPlaying ( true ) ; assertThat ( getCreatedFromResId ( button ) , equalTo ( R . drawable . ic_stop_black_24dp ) ) ; }
public static double bitsFromBitcoins ( double pBitcoins ) { return pBitcoins * 1000000 . 0 ; }
public void setFragmentShader ( String source ) { fTimeMax = parseFTime ( source ) ; resetFps ( ) ; fragmentShader = indexTextureNames ( source ) ; }
public void setUp ( ) { mDocumentListPresenter = new DocumentListPresenter ( mDataManager ) ; mDocumentListPresenter . attachView ( mDocumentListMvpView ) ; documentList = FakeRemoteDataSource . getDouments ( ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getServingTableDao ( ) : null ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new ListRemoteViewsFactory ( this . getApplicationContext ( ) , intent ) ; }
public void setFeedTitle ( String feedTitle ) { this . feedTitle = feedTitle ; }
public String repoPath ( ) { return git . getRepository ( ) . getDirectory ( ) . getAbsolutePath ( ) ; }
private SharedPreferences getRepoPreferences ( ) { return context . getSharedPreferences ( getRepoPreferencesFilename ( ) , Context . MODE_PRIVATE ) ; }
public void run ( ) { ( new ImageUtils ( getContext ( ) ) ) . getFullImageByPicasso ( ( ( new SongsManager ( getActivity ( ) ) ) . queue ( ) ) . get ( mImageNum ) . getAlbumID ( ) , mImageView ) ; }
public void refreshUiReal ( ) { xmppConnectionService . populateWithOrderedConversations ( mConversations , this . share != null && this . share . uris . size ( ) == 0 ) ; mAdapter . notifyDataSetChanged ( ) ; }
public void setContent ( String author ) { contentView . setText ( author ) ; }
public boolean addRecipe ( CoNaObiadDbHelper helper , String recipe , long mealId ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "recipe" , recipe ) ; helper . update ( tableName , contentValues , mealId ) ; return true ; }
public int getMealId ( ) { return mealId ; }
public int getDimNumber ( ) { return dimensions == null ? ViewUtils . INVALID_INDEX : dimensions . length ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . CheckBox" ) ; info . setCheckable ( true ) ; info . setChecked ( isChecked ) ; }
public Boolean isCommentType ( ) { synchronized ( mSyncLock ) { return ( isAutomattcherType ( ) && JSONUtil . queryJSON ( mNoteJSON , "meta . ids . comment" , - 1 ) != - 1 ) || isType ( NOTE_COMMENT_TYPE ) ; } }
public boolean deleteGeoPackage ( String geoPackageName ) { if ( repository . deleteGeoPackage ( geoPackageName ) ) { generateGeoPackageList ( ) ; regenerateGeoPackageTableList ( ) ; return true ; } return false ; }
public CircleCheckBox ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void onPageSelected ( int i ) { updateScreen ( i ) ; mPrefs . setLastGoogleList ( i ) ; currentPos = i ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public void update ( ) { long time = System . currentTimeMillis ( ) ; int deltaMS = ( int ) ( time - lastTime ) ; for ( TimeHandlerWrapper handler : handlers ) { handler . update ( deltaMS ) ; } lastTime = time ; }
public String getTitle ( ) { String title ; if ( mIsNew ) title = "New admission counter" ; else { title = "Change " + mDb . getItem ( mAdmissionCounterId ) . name ; } return title ; }
public List < DataCenter > fire ( ) { if ( isV3Api ) { return mapToEntities ( restClient . getDataCentersV3 ( ) ) ; } return mapToEntities ( restClient . getDataCentersV4 ( ) ) ; }
public PublicKey getPublic ( ) throws IOException { return privateKey . getPublic ( ) ; }
public void stopPlayback ( ) { if ( nativeMode ) { mVideoView . stopPlayback ( ) ; } else { mVlcPlayer . stop ( ) ; } }
public void onPause ( ) { Log . d ( TAG , "onPause ( ) " ) ; super . onPause ( ) ; }
public String getTitle ( ) { return prefTitle . getText ( ) . toString ( ) ; }
public static String getString ( @ AttrRes final int attr , final Context context ) { return context . getString ( getAttrIdValue ( attr , context ) ) ; }
public void setCommentFontStyle ( FontStyle style ) { edit ( ) . putString ( FONT_STYLE_COMMENT , style . name ( ) ) . commit ( ) ; }
public Commodity getCommodity ( ) { return mCommodity ; }
public boolean onFailedToRecycleView ( VH holder ) { return false ; }
public CardsAdapter ( ) { }
private void setOnClickListeners ( ) { mBtnBegin = ( Button ) findViewById ( R . id . btnBegin ) ; mBtnBegin . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { goToPrepActivity ( ) ; } } ) ; }
public void finish ( ) { Utils . hideKeyboard ( this ) ; super . finish ( ) ; overridePendingTransition ( R . anim . slide_right_out , R . anim . slide_right_in ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; operationRead = false ; readWriteOperation ( ) ; }
public UserBuilder lastName ( String last ) { if ( last != null ) { this . name [ 2 ] = last ; } return this ; }
public Boolean getAllowReblogButton ( ) { return mSettings . allowReblogButton ; }
public void compare_WhenFirstNameIsGreater_ReturnGreaterThanZero ( ) { int result = sut . compare ( event2 , event1 ) ; assertThat ( result , greaterThan ( 0 ) ) ; }
private void waitUntilLoadingEnds ( ) throws InterruptedException { while ( activity . findViewById ( R . id . progressBar ) . getVisibility ( ) == View . VISIBLE ) { Thread . sleep ( 1000 ) ; } }
public Profile findItemById ( int id ) { return realm . where ( Profile . class ) . equalTo ( "id" , id ) . findFirst ( ) ; }
public void registerOnSharedPreferenceChangeListener ( OnSharedPreferenceChangeListener listener ) { listeners . add ( listener ) ; }
public String toString ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSNetwork o : networks ) { strOut . append ( o . toString ( ) ) ; } return strOut . toString ( ) ; }
public ChoiceGridView ( Context context ) { super ( context ) ; Init ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( KEY_NUMBER , mNumber ) ; outState . putInt ( KEY_ERROR_STATE , mErrorState ) ; }
public void stop ( ) { if ( ! listeners . isEmpty ( ) ) { Log . e ( providerName ( ) , "Stopping location service , but listeners are still listening" ) ; } }
public UdpDataSource ( @ Nullable TransferListener listener , int maxPacketSize ) { this ( listener , maxPacketSize , DEAFULT_SOCKET_TIMEOUT_MILLIS ) ; }
public static boolean makeQuranDatabaseDirectory ( Context context ) { return makeDirectory ( getQuranDatabaseDirectory ( context ) ) ; }
public void onReceive ( Context context , Intent intent ) { if ( intent . getAction ( ) . equals ( AudioManager . ACTION_AUDIO_BECOMING_NOISY ) ) { pause ( ) ; } }
public void setUp ( ) throws Exception { TestDependencies . inject ( this ) ; applicationRepo . markFirstLaunch ( ) ; testRule . launchActivity ( null ) ; }
public void setChecked ( boolean checked ) { CheckBox c = ( CheckBox ) findViewById ( R . id . checkbox ) ; c . setChecked ( checked ) ; }
public LoadTwitter ( @ NotNull WebView view , @ NotNull String url ) { this . view = view ; this . url = url ; client = Reddit . client ; gson = new Gson ( ) ; }
public String getLinkClassName ( ) { return linkClassName ; }
public void onCountdownTimeChanged ( ) { updateNotification ( ) ; }
public int getItemCount ( ) { if ( dataSet . posts == null || dataSet . posts . size ( ) == 0 ) { return 0 ; } else { return dataSet . posts . size ( ) + 2 ; } }
public void cancelSwipe ( ) { finishSwiping ( RESULT_CANCELED ) ; }
public XMLPrefsManager . XMLPrefsSave defaultParamReference ( ) { return null ; }
public String toString ( ) { if ( this == Delivery ) return "Delivery" ; else return "Processing" ; }
public void onSaveInstanceState ( Bundle outBundle ) { Log . d ( Utils . getAppTag ( ) , Utils . getMethodName ( refListType ) ) ; outBundle . putInt ( EXTRA_LIST_TYPE , refListType ) ; super . onSaveInstanceState ( outBundle ) ; }
public void update ( ) { context . pollEvents ( ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . COSH_INVERSE ) ; }
public static boolean isEnterSendsEnabled ( Context context ) { return getBooleanPreference ( context , ApplicationPreferencesActivity . ENTER_SENDS_PREF , false ) ; }
private int getActiveNetworkType ( ) { NetworkInfo info = connManager . getActiveNetworkInfo ( ) ; if ( info == null ) return - 1 ; if ( ! info . isConnected ( ) ) return - 1 ; return info . getType ( ) ; }
public void onMapClick ( LatLng latLng ) { for ( MapLayer layer : layers ) { layer . onMapClick ( latLng ) ; } }
private long getLastUpdatedOn_GB ( String packageName ) throws NameNotFoundException { PackageInfo packageInfo = context . getPackageManager ( ) . getPackageInfo ( packageName , 0 ) ; return packageInfo . lastUpdateTime ; }
public static Boolean isGrblProbeMessage ( final String response ) { return PROBE_PATTERN . matcher ( response ) . find ( ) ; }
public boolean shouldHideStatusBar ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP && priority >= NotificationCompat . PRIORITY_HIGH ; }
public void onAttach ( @ NotNull Context context ) { super . onAttach ( context ) ; mPatientDashboardActivity = ( PatientDashboardActivity ) context ; }
public ArrayList < Machine > getCurrentMachines ( ) { return currentMachines ; }
private void unimplementedSequence ( byte b ) { if ( TermDebug . LOG_UNKNOWN_ESCAPE_SEQUENCES ) { logError ( "unimplemented" , b ) ; } finishSequence ( ) ; }
public void startNewPost ( ) { clickOn ( "fab_button" ) ; }
public void onClick ( View v ) { listener . onClick ( v , getPosition ( ) , false ) ; }
public RingModeRenderer ( IPercentageChartView view , TypedArray attrs ) { super ( view , attrs ) ; init ( attrs ) ; }
public void setText ( String text ) { button . setText ( text ) ; }
public void format ( IRCCloudJSONObject event , Event e ) { if ( event != null ) { e . target_mode = event . getString ( "newmode" ) ; e . chan = event . getString ( "channel" ) ; } }
public Result doWork ( ) { Log . i ( "Running " + getName ( ) ) ; ServiceSynchronize . process ( getApplicationContext ( ) ) ; return Result . success ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . carlisle . ben . newtoniangravitysimulator" , appContext . getPackageName ( ) ) ; }
public int compareTo ( @ NonNull UserItem o ) { return this . name . compareTo ( o . name ) ; }
private Tts getTts ( ) { return ( ( TestAppComponent ) DaggerHelper . getAppComponent ( mActivityTestRule . getActivity ( ) ) ) . getTts ( ) ; }
public void paintShouldDrawTwoSectorsWithGivenColors ( ) throws Exception { pieChart = new PieChart ( plot , new double [ ] { 1 , 1 } , new ColorWrap [ ] { ColorWrap . RED , ColorWrap . GREEN } ) ;
public boolean canReuseUpdatedViewHolder ( @ NonNull RecyclerView . ViewHolder holder ) { return ( holder instanceof RecipeSingleCardHolder ) || super . canReuseUpdatedViewHolder ( holder ) ; }
public void run ( ) { updatePosition ( ) ; }
public void flush ( ) { playbackPositionUs = 0 ; while ( ! queuedInputBuffers . isEmpty ( ) ) { releaseInputBuffer ( queuedInputBuffers . pollFirst ( ) ) ; } if ( dequeuedInputBuffer != null ) { releaseInputBuffer ( dequeuedInputBuffer ) ; dequeuedInputBuffer = null ; } }
public void onBackPressed ( ) { super . onBackPressed ( ) ; Notes . updateLastInteraction ( ) ; }
public void onAvailable ( Network network ) { super . onAvailable ( network ) ; Log . w ( TAG , "onAvailable ( ) " ) ; checkState ( ) ; }
public String getDateString ( ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( "dd . MM . yyyy" , Locale . GERMANY ) ; return dateFormat . format ( date ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , EditCardsLayout . class ) ; startActivity ( i ) ; }
public void onInterstitialShowFailed ( ) { EventCollector . logException ( "appodeal_error" ) ; AdsUtilsCommon . interstitialFailed ( AppodealInterstitialProvider . this , returnTo ) ; }
public void established ( ) { JingleConnection . this . transport . send ( file , onFileTransmissionSatusChanged ) ; }
public static TestListFragment newInstance ( TestType testType ) { TestListFragment fragment = new TestListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "type" , testType ) ; fragment . setArguments ( args ) ; return fragment ; }
public boolean hasStableIds ( ) { return true ; }
public List < ExerciseImage > getImages ( ) { return images ; }
public void editStyle ( RPSParty game ) { skin . add ( "helpImage" , game . getAssetManager ( ) . get ( "badlogic . jpg" ) ) ; style = new ButtonStyle ( ) ; style . up = skin . getDrawable ( "helpImage" ) ; }
private void close ( Closeable closeable ) { try { if ( closeable != null ) { closeable . close ( ) ; } } catch ( Exception e ) { FirebaseCrash . report ( e ) ; } }
public static void quickToast ( final Context context , final int textRes ) { quickToast ( context , context . getString ( textRes ) ) ; }
public void onAnimationEnd ( Animator animation ) { if ( animation . equals ( animatorSet ) ) { hideCamera ( true ) ; setVisibility ( GONE ) ; } }
public ApplicationTest ( ) { super ( Application . class ) ; }
public static MarvelService makeMarvelService ( boolean withLoggingInterceptor ) { return makeMarvelService ( makeOkHttpClient ( withLoggingInterceptor ) ) ; }
public void testGetPlateMatchingPatternNull ( ) { String mainPlatePattern = "TAB" ; Place malbork = createPlaceWithPlates ( mainPlatePattern , "BAT" , "GAP" ) ; LicensePlate plate = malbork . getPlateMatchingPattern ( null ) ; assertEquals ( mainPlatePattern , plate . getPattern ( ) ) ; }
public void setTopRightRadius ( int radius ) { radii [ 2 ] = radii [ 3 ] = radius ; invalidate ( ) ; }
public void onAnimationCancel ( Animator animation ) { itemView . setClickable ( true ) ; }
public boolean onClusterItemClick ( Location_NoeC item ) { return false ; }
public String getTitle ( String defaultTitle ) { String title = super . getTitle ( ) ; if ( title != null && title . length ( ) > 0 ) { return title ; } else { return defaultTitle ; } }
public static Observable < List < ClosedComment >> closedComments ( int sid ) { long timestamp = System . currentTimeMillis ( ) ; return sMobileApi . closedComments ( timestamp , CnBetaSignUtil . closedCommentsSign ( timestamp , sid ) , sid ) ; }
public List < Payee > getAllPayeeList ( ) { return getAllEntitiesList ( Payee . class , true , false ) ; }
public int getItemCount ( ) { return issues . size ( ) ; }
public void onRefresh ( ) { forceLoaderReload ( 0 ) ; setContentShown ( false ) ; super . onRefresh ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_4 . class ) ; startActivity ( i ) ; }
public String getP ( ) { return p ; }
public LanguagePreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; loadLangs ( context , attrs ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( MainActivity . this , Pregnancy . class ) ) ; }
public boolean getBool ( String key ) { String value = get ( key ) ; return ( value != null ) && isYes ( value ) ; }
public void setCallbacks ( ItemCallback itemCallback , ButtonCallback buttonCallback ) { this . itemCallback = itemCallback ; this . buttonCallback = buttonCallback ; }
public void back ( boolean force ) { if ( getSongProgressMillis ( ) > 2000 ) { seek ( 0 ) ; } else { playPreviousSong ( force ) ; } }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , WebActivity . class ) ; i . putExtra ( "Webside" , "https : i . putExtra ( "Title" , "BSBZ Homepage" ) ; startActivity ( i ) ; }
public static @ ColorRes int getColorId ( Context context , @ AttrRes int attribute ) { TypedValue value = new TypedValue ( ) ; context . getTheme ( ) . resolveAttribute ( attribute , value , true ) ; return value . resourceId ; }
public int indexOfCurrentTab ( ) { return mTabList . indexOf ( mCurrentTab ) ; }
private int calculateRadius ( Location location ) { return round ( location . getAccuracy ( ) * 15 ) ; }
public BatteryIconData ( Context context ) { super ( context ) ; receiver = new BatteryReceiver ( ) ; }
public DrawerBuilder withSliderBackgroundDrawableRes ( int sliderBackgroundDrawableRes ) { this . mSliderBackgroundDrawableRes = sliderBackgroundDrawableRes ; return this ; }
public static Spannable style ( Context context , Jid jid ) { return style ( jid , Color . get ( context , R . attr . color_warning ) ) ; }
public PostListingURL limit ( final Integer limit ) { return new UnknownPostListURL ( uri . buildUpon ( ) . appendQueryParameter ( "limit" , String . valueOf ( "limit" ) ) . build ( ) ) ; }
public Exporter ( Collection col , @ NonNull Long did ) { mCol = col ; mDid = did ; }
public void onEvent ( MessageTransition message ) { Timber . v ( "transition isIncoming : %s topic : %s" , message . isIncoming ( ) , message . getTopic ( ) ) ; if ( message . isIncoming ( ) ) sendEventNotification ( message ) ; }
public void invalidateActionMode ( boolean startIfStopped ) { if ( mMode != null ) { mMode . invalidate ( ) ; } else if ( startIfStopped ) { startActionMode ( ) ; } }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . privacyRulesUpdated ) { if ( listAdapter != null ) { listAdapter . notifyDataSetChanged ( ) ; } } }
public void onChatRoomSubjectChanged ( final Core core , final ChatRoom chatRoom ) { Lg . w ( "onChatRoomSubjectChanged chatRoom = " , chatRoom ) ; }
public ArticleTextExtractor setNegative ( String negativeStr ) { this . negativeStr = negativeStr ; NEGATIVE = Pattern . compile ( negativeStr ) ; return this ; }
private void putReadings ( Intent intent , int from , int to ) { intent . putExtra ( BillActivityIntentFactory . READING_FROM , from ) ; intent . putExtra ( BillActivityIntentFactory . READING_TO , to ) ; putDates ( intent , DATE_FROM , DATE_TO ) ; }
private BroadcastReceiver updateMarginsReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { updateMargins ( ) ; } } ;
private void publishAvatar ( Account account ) { Intent intent = new Intent ( getApplicationContext ( ) , PublishProfilePictureActivity . class ) ; intent . putExtra ( "account" , account . getJid ( ) . toString ( ) ) ; startActivity ( intent ) ; }
public Observable < HistoricalRecord > getHistoricalRecord ( int historicalRecordId ) { final HistoricalRecordDataStore historicalRecordDataStore = this . historicalRecordDataStoreFactory . create ( historicalRecordId ) ; return historicalRecordDataStore . getHistoricalRecordEntityDetails ( historicalRecordId ) . map ( historicalRecordEntity -> this . historicalRecordEntityDataMapper . transform ( historicalRecordEntity ) ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidence . Builder getConfidenceBuilder ( ) { bitField0_ | = 0x00000400 ; onChanged ( ) ; return getConfidenceFieldBuilder ( ) . getBuilder ( ) ; }
public void forceUpdate ( ) { try { onRefreshed ( getWallet ( ) , true ) ; } catch ( IllegalStateException ex ) { Log . e ( TAG , ex . getLocalizedMessage ( ) ) ; } }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { setPrivacy ( dialog . getContext ( ) , PRIVACY_UNBLOCK ) ; }
private double carratTopound ( double num ) { return num * 0 . 000441 ; }
public void onStartFailure ( int errorCode ) { super . onStartFailure ( errorCode ) ; Log . d ( TAG , "Advertising failed" ) ; sendFailureIntent ( errorCode ) ; stopSelf ( ) ; }
public StringNumberWidget createWidget ( ) { return new StringNumberWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" , readOnlyOverride ) ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { mChannels . updateURL ( object . bid ( ) , object . getString ( "url" ) ) ; }
public void onFailure ( Call < User > call , Throwable t ) { ToastUtil . error ( t . getMessage ( ) ) ; }
public AboutBuilder addTwitterLink ( int user ) { return addTwitterLink ( context . getString ( user ) ) ; }
public int getPort ( ) { return port ; }
public void onPublishStateChanged ( final Core core , final Event event , final PublishState publishState ) { Lg . w ( "onPublishStateChanged : event = " , event , " publishState = " , publishState ) ; }
public void onPause ( ) { paused = true ; quickCamera . onPause ( ) ; }
private void selectTheme ( ) { startActivity ( new Intent ( mContext , SelectThemeActivity . class ) ) ; }
static void android_tox_callback_friend_request_cb_method ( String friend_public_key , String friend_request_message , long length ) { String friend_public_key__ = friend_public_key . substring ( 0 , TOX_PUBLIC_KEY_SIZE * 2 ) ; HelperFriend . add_friend_to_system ( friend_public_key__ , false , null ) ; }
private Gson constructGsonConverter ( ) { return new GsonBuilder ( ) . setDateFormat ( "yyyy' - 'MM' - 'dd'T'HH' : 'mm' : 'ss' . 'SSS'Z'" ) . registerTypeAdapterFactory ( new ItemTypeAdapterFactory ( ) ) . create ( ) ; }
public int maxMessageSize ( ) { return 0 ; }
public int getWeekday ( ) { return weekday ; }
public int getIndicator ( ) { return getIndicator ( Prefs . getInstance ( mContext ) . getAppThemeColor ( ) ) ; }
private void handleResult ( O result ) { if ( inProgress . get ( ) ) { doHandleResult ( result ) ; } else { HyperLog . w ( TAG , "Skipping result because initialization not in progress for " + getName ( ) ) ; } }
private HttpSyncer getServerWithHostNum ( String hostNum ) { return new HttpSyncer ( null , null , new HostNum ( hostNum ) ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "unified_system" , checked ) . apply ( ) ; }
public static Collection Collection ( Context context , String path ) { return Collection ( context , path , false , false ) ; }
public boolean accept ( File pathname ) { String s = pathname . getName ( ) . toLowerCase ( ) ; return s . endsWith ( " . mod" ) ; }
public static double getCurrentLongitude ( ) { if ( getCurrentLocationInfo ( ) != null ) { return getCurrentLocationInfo ( ) . getLongitude ( ) ; } else { return 0 ; } }
public int getSpanX ( ) { return spanX ; }
public void onClick ( ) { toast ( "Negative Button Clicked" ) ; }
public void onClick ( View view ) { DrawerLayout layout = ( DrawerLayout ) findViewById ( R . id . drawer_layout ) ; layout . openDrawer ( GravityCompat . START ) ; }
private void thenSecondObserverNotifiedScreen ( ) { verify ( mSecondMockObserver , times ( 1 ) ) . onScreen ( anyString ( ) , any ( AnalyticsBaseData . class ) ) ; }
public boolean seemsNotNew ( ) { return ( ( description != null && ! description . trim ( ) . equals ( "" ) ) || ( tags != null && ! tags . trim ( ) . equals ( "" ) ) ) ; }
public void save ( @ NonNull String key , String value ) { preferences . edit ( ) . putString ( key , value ) . apply ( ) ; }
public void onClick ( View view ) { ActivityCompat . requestPermissions ( SessionActivity . this , new String [ ] { Manifest . permission . ACCESS_FINE_LOCATION } , REQUEST_PERMISSIONS_REQUEST_CODE ) ; }
private List < PopupKeyCandidate > getCandidatesForYA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "w" ) ) ; return candidates ; }
private void applyGoogleBasemap ( GoogleMap map ) { int mapType = prefs . getInt ( BasemapSettingsLoader . MAP_TYPE_KEY , 1 ) ; map . setMapType ( mapType ) ; }
public void showProgressBar ( ) { ProgressBar progressBar = ( ProgressBar ) findViewById ( R . id . progress_bar ) ; if ( progressBar != null ) { progressBar . setVisibility ( View . VISIBLE ) ; } }
public boolean getAdBlockEnabled ( ) { return mPrefs . getBoolean ( Name . BLOCK_ADS , false ) ; }
public ScheduleViewHolder ( View itemView ) { super ( itemView ) ; schedule_text = itemView . findViewById ( R . id . event_card_text ) ; schedule_cardView = itemView . findViewById ( R . id . carousel_item_cardview ) ; }
public String getSaturatedFat ( ) { return saturatedFat ; }
public PreferenceRepository providePreferenceRepository ( Context context ) { return new SharedPreferenceRepository ( context ) ; }
public static boolean isNotificationPolicyAccessGranted ( final Context context ) { return Build . VERSION . SDK_INT < Build . VERSION_CODES . N || ( ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ) . isNotificationPolicyAccessGranted ( ) ; }
private ColorUtil ( ) { initColorList ( ) ; }
public Fragment getItem ( int position ) { return ReaderFragement . newInstance ( position , filename . getPath ( ) ) ; }
public boolean deleteFavourite ( long index ) { DBDataObject . enforceBackedObject ( index ) ; int deleted = adapter . getDatabase ( ) . delete ( TABLE_NAME , getIndexClause ( index ) , null ) ; return deleted > 0 ; }
public void onAnimationEnd ( View view ) { ViewPropertyAnimatorCompat animator = ViewCompat . animate ( view ) ; animator . setListener ( null ) ; ViewCompat . setTranslationX ( view , 0 ) ; ViewCompat . setTranslationY ( view , 0 ) ; }
private void setFilesize ( long fileSize ) { TextView tv = ( TextView ) getView ( ) . findViewById ( R . id . fdSize ) ; if ( tv != null ) { tv . setText ( DisplayUtils . bytesToHumanReadable ( fileSize ) ) ; } }
public boolean onQueryTextSubmit ( String arg0 ) { return prefs . getBoolean ( "settings_instant_search" , false ) ; }
private DrawerAction ( ) { }
public int getCount ( ) { return items . size ( ) ; }
public void onClick ( View view ) { layoutError . setVisibility ( View . GONE ) ; progressBar . setVisibility ( View . VISIBLE ) ; getDates ( ) ; }
public DefaultIncomingTextMessageViewHolder ( View itemView ) { super ( itemView ) ; }
public void hideRefreshIndicator ( ) { progressBar . setVisibility ( View . GONE ) ; }
public int compare ( ResultBean r1 , ResultBean r2 ) { return r1 . getAttend ( ) . compareTo ( r2 . getAttend ( ) ) ; }
public float getIconSize ( ) { return iconSize ; }
public void putBoolean ( String key , boolean value ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putBoolean ( key , value ) . commit ( ) ; }
public void onTimeShiftSeekTo ( long timeMs ) { Log . d ( TAG , "onTimeShiftSeekTo : " + timeMs ) ; mPlayer . seek ( timeMs ) ; }
public void testAddAll ( ) { List < Integer > toTest = new ArrayList <> ( ) ; CollectionUtils . addAll ( toTest , testList ) ; assertEqualsArrayList ( new Integer [ ] { 1 , 2 , 3 } , toTest ) ; }
public Builder ( @ NonNull final Fragment fragment ) { this ( fragment . getActivity ( ) , 0 ) ; }
public void clearAnswer ( ) { selectedTime = DateTimeUtils . getCurrentDateTime ( ) ; binding . widgetAnswerText . setText ( R . string . no_time_selected ) ; widgetValueChanged ( ) ; }
private void setInitialPoint ( float x , float y ) { if ( initialPoint == null ) { initialPoint = new PointF ( ) ; } initialPoint . set ( x , y ) ; }
public void setBackgroundOffset ( @ IntRange ( from = 0 ) int offset ) { backgroundOffset ( offset ) ; invalidate ( ) ; }
public void taskEdited ( ) { getTasksFromServer ( ) ; this . mainActivity . setPermissionRequired ( null ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitBooleanAssign ( this ) ; else return visitor . visitChildren ( this ) ; }
private void onCallMediaUnavailable ( ) { mRemoteLogger . d ( "onCallMediaUnavailable" ) ; }
public void onClick ( DialogInterface dialog , int which ) { try { service . LoadSettingsFromPath ( items [ which ] ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public PlaceAndPlate createFromCursor ( Cursor cursor ) { return new PlaceAndPlate ( dtoFactory . createFromCursor ( cursor ) , formatHelper ) ; }
private static int daysInLunarMonth ( int year , int month ) { if ( ( LUNAR_INFO [ year - CalendarViewDelegate . MIN_YEAR ] & ( 0x100000 >> month ) ) == 0 ) return 29 ; else return 30 ; }
public void setPanelEventListenerListener ( final SlidingPanelEventsListener panelEventsListener ) { if ( panelEventsListener != null ) { mslidingPanelEventsListeners . add ( panelEventsListener ) ; panelEventsListener . onPanelStateChanged ( mSlidingUpPanelLayout , null , mSlidingUpPanelLayout . getPanelState ( ) ) ; } }
public static void removeHiddenPreferences ( Context context ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; if ( getSdkVersion ( ) >= 16 ) { preferences . edit ( ) . remove ( "fixHebrewText" ) . commit ( ) ; } }
private void setTariff ( ) { Views . setTV ( this , R . id . tv_tariff , getString ( R . string . grupa_taryfowa , getTariff ( ) ) ) ; }
public void addLocation ( String label , Double x , Double y , Boolean grayPatch ) { Location loc = new Location ( x , y , grayPatch ) ; this . locations . put ( label , loc ) ; }
public boolean onLongClick ( View view ) { onItemPressed . onItemPressed ( resultHolder . get ( pos ) ) ; return true ; }
public void onServiceStopped ( ) { mConnected = false ; finishAfterDelay ( ) ; }
public void notifyGroupItemRemoved ( int groupPosition ) { mAdapter . notifyGroupItemRemoved ( groupPosition ) ; }
public File execute ( ProgressListener listener ) { Log . v ( TAG , "export" ) ; return export ( 0 , listener ) ; }
public LoginProcess ( HtmlWebSelector c ) { context = c ; }
private void update ( float delta ) { game . update ( delta ) ; }
public void onCreate ( final Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; song = ( Song ) getArguments ( ) . getParcelable ( SONG_ARG ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeByte ( type . ordinal ( ) ) ; }
public static MaterialAboutItemOnClickListener createEmailOnClickAction ( final Context c , String email , String emailSubject ) { return createEmailOnClickAction ( c , email , emailSubject , c . getString ( R . string . mal_send_email ) ) ; }
public void onAttachedToRecyclerView ( RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; setupFullSpanForGridLayoutManager ( recyclerView ) ; }
private int getSelected ( ArrayList < CategoryInfo > categories ) { int selected = 0 ; for ( CategoryInfo categoryInfo : categories ) { if ( categoryInfo . visible ) selected ++ ; } return selected ; }
public int getPrimaryPriority ( ) { return initiator . priority ; }
public void onCreate ( SQLiteDatabase db ) { LogUtil . w ( TAG , "Creating the database tables from scratch" ) ; dbCreator . updateDB ( context , db , 0 , DATABASE_VERSION ) ; }
public com . google . protobuf . Any getAccounts ( int index ) { if ( accountsBuilder_ == null ) { return accounts_ . get ( index ) ; } else { return accountsBuilder_ . getMessage ( index ) ; } }
public ArrayList < OCSSection > getSections ( ) { ArrayList < OCSSection > lst = new ArrayList < OCSSection > ( ) ; lst . add ( getSection ( ) ) ; return lst ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new LatestNewsFragment ( ) ; case 1 : return new TopNewsFragment ( ) ; case 2 : return new NewsAllFragment ( ) ; } return null ; }
public void onBindViewHolder ( TestViewHolder holder , int position ) { throw new IllegalStateException ( "not implemented" ) ; }
public void setGraph6MonthXLabel ( String [ ] values ) { barChart6Month . getXAxis ( ) . setValueFormatter ( new AxisValueFormatter ( values ) ) ; }
public void onMetadataChanged ( MediaMetadataCompat metadata ) { Log . d ( TAG , "onMetadataChanged : called" ) ; displayMetadata ( metadata ) ; }
public FontTextView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; decorator = new FontDecorator ( context ) ; decorator . initFromAttributes ( this , attrs ) ; }
private void setMuted ( final long duration ) { if ( chatId != 0 ) { Prefs . setChatMuteDuration ( dcContext , chatId , duration ) ; } }
public SipCall ( SipService sipService , SipAccount sipAccount ) { super ( sipAccount ) ; mSipService = sipService ; mRemoteLogger = mSipService . getRemoteLogger ( ) ; mSipBroadcaster = mSipService . getSipBroadcaster ( ) ; }
public void detach ( ) { target . remove ( this ) ; }
public Collection < Ingredient > getIngredients ( ) { return ingredients ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_remove , menu ) ; return true ; }
private void updateSearchResults ( final ArrayList < LocaleController . LocaleInfo > arrCounties ) { AndroidUtilities . RunOnUIThread ( new Runnable ( ) { @ Override public void run ( ) { searchResult = arrCounties ; searchListViewAdapter . notifyDataSetChanged ( ) ; } } ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_coordinator , container , false ) ; return view ; }
public void onPositiveClick ( ) { bakery . toastShort ( "Deleting . . " ) ; presenter . deleteAttraction ( attraction ) ; updateAdapter ( ) ; }
public void run ( ) { walletFragment . onProgress ( n ) ; }
private void showQuickStartSnackbar ( ) { Spannable title = mQuickStartUtilsWrapper . stylizeThemedQuickStartPrompt ( requireContext ( ) , R . string . quick_start_dialog_enable_sharing_message_short_connections ) ; mSnackbarSequencer . enqueue ( new SnackbarItem ( new Info ( mRecycler , new UiStringText ( title ) , Snackbar . LENGTH_LONG ) ) ) ; }
public boolean hasAvatarUrl ( ) { return ! TextUtils . isEmpty ( avatarUrl ) ; }
public String getVisitType ( ) { return visitType ; }
public String getTemperatureMinInCelsius ( ) { return String . valueOf ( weather . getTemperature ( ) . getMinimun ( ) ) + "\u00b0" + "C" ; }
public void setList ( List < Commodity > commodityList ) { if ( mCommodityList != null ) { mCommodityList . clear ( ) ; mCommodityList . addAll ( commodityList ) ; } else { mCommodityList = commodityList ; } }
private boolean isNotificationsDisabledWhenScreenOn ( ) { return Prefs . getBoolean ( Constants . PREF_DISABLE_NOTIFATIONS_WHEN_SCREEN_ON , false ) && Screen . isInteractive ( this ) ; }
private void initExportToCalendarPrefs ( ) { binding . exportToCalendarPrefs . setOnClickListener ( mCalendarClick ) ; binding . exportToCalendarPrefs . setChecked ( mPrefs . isCalendarEnabled ( ) ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { finish ( ) ; return true ; }
public GeneralSettingsPage openFormManagement ( ) { clickOnString ( R . string . form_management_preferences ) ; return this ; }
public void afterTextChanged ( Editable editable ) { if ( ! mMessageIsRead ) { setMessageAsRead ( ) ; mMessageIsRead = true ; } cancelFinishWithDelay ( ) ; if ( Objects . nonNull ( notifier ) ) { notifier . notifyAboutTyping ( peerId ) ; } }
public PreferenceBasedLocationService ( ) { Logging . debug ( "PreferenceBasedLocationService instantiated" ) ; }
public void run ( ) { if ( mDraggingItemViewHolder != null ) { checkItemSwapping ( mRecyclerView ) ; } }
public static boolean showSyncNotifications ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_show_sync_notifications ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_show_sync_notifications ) ) ; }
public boolean isChargingThroughAC ( ) { return chargePlug == BatteryManager . BATTERY_PLUGGED_AC ; }
private HttpURLConnection getHttpConnectionToAResource ( URL url , String auth ) throws MalformedURLException , IOException { HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; connection . addRequestProperty ( "Authorization" , auth ) ; return connection ; }
public CachePageViewHolder onCreateChildViewHolder ( @ NonNull ViewGroup childViewGroup , int viewType ) { View view = LayoutInflater . from ( childViewGroup . getContext ( ) ) . inflate ( R . layout . cache_basic_view , childViewGroup , false ) ; return new CachePageViewHolder ( view ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; stopServer ( ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mAdapter . swapCursor ( null ) ; }
public RTLOnlyViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
private final TextUtils . SnackbarDisplay mSnackbarDisplay = new TextUtils . SnackbarDisplay ( ) { @ Override public void showSnackbar ( String message ) { ( ( MainActivity ) getActivity ( ) ) . showSnackbar ( message ) ; } } ;
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . medical_attention_details , menu ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public HashMap < QoSTestResultEnum , QoSResultStats > get ( ) { return resultCounter ; }
private final LottieComposition . OnCompositionLoadedListener loadedListener = new LottieComposition . OnCompositionLoadedListener ( ) { @ Override public void onCompositionLoaded ( LottieComposition composition ) { setComposition ( composition ) ; } } ;
public void setBirthdayDay ( int birthdayDay ) { this . birthdayDay . setValue ( birthdayDay ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . action_bar , menu ) ; return true ; }
public BaseItem getItem ( int position ) { return itemList . get ( position ) ; }
public List < Map > getTraining ( ) { return lastTraining = storage . getTrainingForPeriod ( timeStart , timeEnd ) ; }
public void setImageBitmap ( Bitmap bm ) { recycleBitmaps ( ) ; cancelLoaderTask ( ) ; super . setImageBitmap ( bm ) ; }
public String getString ( String key ) { return pref . getString ( key , null ) ; }
public boolean onBackPressed ( ) { if ( getLifecycle ( ) . getCurrentState ( ) . isAtLeast ( Lifecycle . State . RESUMED ) ) onExit ( ) ; return true ; }
public int getNewListSize ( ) { return mNewList . size ( ) ; }
public void setMaxZoom ( int maxZoom ) { this . maxZoom = maxZoom ; hasChanged ( ) ; notifyObservers ( MAX_ZOOM_PROP ) ; }
public void stopAllAsync ( ) { for ( ServerClient client : connections . values ( ) ) { client . stopAsync ( ) ; } connections . clear ( ) ; }
public DataContext ( Context context , String name , SQLiteDatabase . CursorFactory factory , int version ) { super ( context , "mys3chat . db" , factory , 2 ) ; }
public static com . coinomi . core . protos . Protos . WalletPocket parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void getHttpMethod_CustomMethodNames_AlwaysCapitalized ( ) { CustomUrlRequest cur = new CustomUrlRequest ( "http : String expected = "BLAH" ; assertThat ( "Custom HTTP Method shoudl also be capitalized" , cur . getHttpMethod ( ) , is ( expected ) ) ; }
public FileCopyException ( int resId ) { this . resId = resId ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; inflater . inflate ( R . menu . main , menu ) ; }
public void changeFragmentShader ( String fragmentShader ) { GLES20 . glDeleteProgram ( mProgram ) ; mProgram = createProgram ( VERTEX_SHADER , fragmentShader ) ; if ( mProgram == 0 ) { throw new RuntimeException ( "failed creating program" ) ; } }
public VideoFrameReleaseTimeHelper ( Context context ) { this ( getDefaultDisplayRefreshRate ( context ) , true ) ; }
public void testEncode ( ) throws WriterException { doTest ( "B515 - 3/B" , "00000" + "1001001011" + "0110101001" + "0101011001" + "0110101001" + "0101001101" + "0110010101" + "01101101011" + "01001001011" + "00000" ) ; }
public int getSupportFlags ( ) { return 0 ; }
public String getUserFullNameCapslock ( ) { return userFullName . toUpperCase ( ) ; }
public void onResourceReady ( BitmapPaletteWrapper resource , GlideAnimation < ? super BitmapPaletteWrapper > glideAnimation ) { update ( resource . getBitmap ( ) , VinylMusicPlayerColorUtil . getColor ( resource . getPalette ( ) , Color . TRANSPARENT ) ) ; }
public static void setAdviceState ( long advice ) { long state = loadLong ( PREF_ADVICE_STATES , 0L ) ; saveLong ( PREF_ADVICE_STATES , state | advice ) ; }
public SpinnerWithCloseEvent ( Context context ) { super ( context ) ; }
private void dismissDialog ( ) { if ( progressDialog . isShowing ( ) ) progressDialog . dismiss ( ) ; }
public IStores getStores ( ) { throw new UnsupportedOperationException ( ) ; }
private void updateNavigationPanel ( ) { if ( mListener != null ) mListener . updateNavigationPanel ( ) ; }
public void update ( ) { updateEngine ( enginePtr ) ; }
public void shouldReturnExceptionThisRepositoryDoesNotAcceptSyncCalls ( ) { givenRequestParametersWithCityId ( 123456 ) ; whenGettingWeather ( ) ; }
public void onCopyToClipboard ( View view ) { Common . copyToClipboard ( mAC . getText ( ) . toString ( ) , this ) ; }
public void onStepClicked ( Step step , int index ) { throw new RuntimeException ( "onStepClicked not set in fragment" ) ; }
public int getItemCount ( ) { if ( genreArrayList == null ) return 0 ; return genreArrayList . size ( ) ; }
public boolean swipeRight ( Category category ) { openTheSelectedCategory ( category ) ; return true ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , pt_goodsauto_private . class ) ; startActivity ( inte ) ; }
public void addTag ( ) { if ( ! mIsPaused ) { FragmentManager fm = getSupportFragmentManager ( ) ; AddTagDialog addTagDialog = new AddTagDialog ( ) ; addTagDialog . show ( fm , AddTagDialog . TAG ) ; } }
public int getLastDownloadErrorCode ( ) { return mPerInstallationPrefs . getInt ( QuranDownloadService . PREF_LAST_DOWNLOAD_ERROR , 0 ) ; }
public void onResponse ( Call < Page . GetPageRespond > call , Response < Page . GetPageRespond > response ) { if ( response . isSuccessful ( ) ) { callback . onSuccess ( response . body ( ) . getData ( ) ) ; } }
public boolean removeEntry ( float xPos , int dataSetIndex ) { Log . e ( "MPAndroidChart" , "removeEntry ( . . . ) not supported for CombinedData" ) ; return false ; }
public int getItemCount ( ) { return categoryList . size ( ) + 2 ; }
public void onCropImageComplete ( CropImageView view , CropImageView . CropResult result ) { croppedImage = result . getBitmap ( ) ; Intent intent = new Intent ( CropAndRotate . this , Umbralization . class ) ; startActivity ( intent ) ; }
public boolean onLongClick ( View view ) { Log . v ( LOG_TAG , "onLongClick ( ) called with : " + "view = [ " + view + " ] " ) ; mActivity . displayBottomSheet ( getPosition ( ) ) ; return true ; }
public boolean shouldDeleteSavedFormButtonBeVisible ( ) { return adminSettings . getBoolean ( AdminKeys . KEY_DELETE_SAVED ) ; }
public void testPlayingResetsValue ( ) { animator . setFrame ( 500 ) ; animator . playAnimation ( ) ; assertEquals ( 0f , animator . getFrame ( ) ) ; assertEquals ( 0f , animator . getAnimatedFraction ( ) ) ; }
public Double getMagnitud ( ) { return mMagnitud ; }
private void errorLoadingResults ( Throwable throwable ) { if ( throwable instanceof LocationNotFoundException ) errorLoadingResults ( getString ( R . string . gps_error ) ) ; else errorLoadingResults ( getString ( R . string . va_loading_error ) ) ; }
public AboutBuilder addBitbucketLink ( int user ) { return addBitbucketLink ( context . getString ( user ) ) ; }
public void onClick ( MaterialDialog dialog , DialogAction which ) { new AsyncGetSubreddit ( ) . execute ( input ) ; }
public int getTransactionAmount ( ) { return transactionAmount ; }
public void setCollapsed ( HashSet < Long > collapsed ) { setString ( R . string . p_widget_collapsed , Joiner . on ( " , " ) . join ( collapsed ) ) ; }
public void failed ( ) { show ( getString ( R . string . error ) ) ; }
public void clearFilter ( ) { setPhrasebookItems ( mAllPhrasebookItems ) ; notifyDataSetChanged ( ) ; }
public ClipViewHolder ( View view ) { super ( view ) ; view . setOnClickListener ( this ) ; view . setOnLongClickListener ( this ) ; ButterKnife . inject ( this , view ) ; }
private void sendAccept ( ) { mJingleStatus = JINGLE_STATUS_ACCEPTED ; this . mStatus = Transferable . STATUS_DOWNLOADING ; this . jingleConnectionManager . updateConversationUi ( true ) ; if ( initialTransport == Transport . SOCKS ) { sendAcceptSocks ( ) ; } else { sendAcceptIbb ( ) ; } }
private void load ( boolean force ) { thread . run ( ( ) -> load ( force , null , 0 ) ) ; }
public void onActivityPreCreated ( @ NonNull Activity activity , @ Nullable Bundle savedInstanceState ) { if ( activity instanceof BaseActivity ) { ( ( BaseActivity ) activity ) . setCustomFont ( typeface , titleTypeface , contentTypeface ) ; } }
public String tileName ( int tile ) { switch ( tile ) { case Terrain . WATER : return Game . getVar ( R . string . Prison_TileWater ) ; default : return super . tileName ( tile ) ; } }
private static WaypointParser createParser ( final String prefix ) { return new WaypointParser ( null , prefix ) ; }
public SayHi setQuotaUser ( java . lang . String quotaUser ) { return ( SayHi ) super . setQuotaUser ( quotaUser ) ; }
private String getUnlockText ( Reward reward ) { if ( mUnlockedRewards . contains ( reward ) ) { return "" ; } else { return mRules . get ( reward ) . getUnlockText ( mGameStats ) ; } }
public void onDoneClick ( View view ) { Intent intent = new Intent ( ) ; mAlarm . toIntent ( intent ) ; setResult ( RESULT_OK , intent ) ; finish ( ) ; LActivityUtil . tranIn ( getActivity ( ) ) ; }
public void getProgressOnActionUp ( BubbleSeekBar bubbleSeekBar , int progress , float progressFloat ) { EnhancedSharedPreferences . Editor editor = sharedPref . edit ( ) ; editor . putDouble ( getString ( R . string . jogging_feed_rate ) , progress ) . commit ( ) ; }
public void draw ( Batch batch , ZLevel zLevel ) { }
public static int determineArtistLimit ( Activity mainActivity ) { if ( HelperMethods . isTablet ( mainActivity ) || HelperMethods . getOrientation ( mainActivity ) == Configuration . ORIENTATION_LANDSCAPE ) { return 10 ; } return 6 ; }
public Data ( ) { isRunning = false ; distanceKm = 0 ; distanceM = 0 ; curSpeed = 0 ; maxSpeed = 0 ; timeStopped = 0 ; }
public void run ( ) { execGetRedemptions ( userId , requestPayload , callback ) ; }
public void rotatePlane ( ) { boolean valid = m_PlaneRound . rotatePlane ( m_Selected ) == 1 ? true : false ; updateBoards ( ) ; m_BottomPane . setDoneEnabled ( valid ) ; }
public void setRating ( int rating ) { this . rating = rating ; initPainting ( ) ; invalidate ( ) ; }
private synchronized void showTab ( final int position ) { mTabsManager . switchToTab ( position ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { if ( progress == 0 ) textView2 . setText ( R . string . infinity ) ; else textView2 . setText ( Double . toString ( progress * 0 . 5 ) ) ; }
public Store getStore ( ) { return store ; }
private void _removeFromFiltered ( @ NonNull Card card ) { if ( card . getODid ( ) != 0 ) { card . setDid ( card . getODid ( ) ) ; card . setODue ( 0 ) ; card . setODid ( 0 ) ; } }
public SerialUSBInterface ( Context context ) { notifyContext = context ; serialPort = null ; baudRate = Settings . serialBaudRate ; serialConfigured = false ; receiversRegistered = false ; }
public static Intent hide ( Context context , String id ) { return intent ( context , id , ACTION_HIDE ) ; }
public Updater . UpdateType getUpdateType ( ) { return updateType ; }
public int image ( ) { return script . runOptional ( "image" , super . image ( ) ) ; }
public void setDetector ( GestureDetectorCompat detector ) { this . mDetector = detector ; }
public void BuscaLancamentos ( ) { filmeService . getFilmeLancamento ( this ) ; filmeService . getFilmeLancamentoPage2 ( this ) ; }
private LocationItemListener mItemListener = new LocationItemListener ( ) { @ Override public void onLocationClick ( Location clickedLocation ) { mActionsListener . openLocationDetails ( clickedLocation ) ; } @ Override public void onLocationDeleteClick ( Location clickedLocation ) { mActionsListener . deleteLocation ( clickedLocation ) ; } } ;
public boolean hasPlaylistId ( ) { return ( ( bitField0_ & 0x00000001 ) == 0x00000001 ) ; }
public void setTopViewMarginBottom ( int topFragmentMarginBottom ) { transformer . setMarginBottom ( topFragmentMarginBottom ) ; }
public void onClick ( View v ) { Intent editintent = new Intent ( mContext , EventActivity . class ) ; editintent . putExtra ( "eventname" , getname ) ; mContext . startActivity ( editintent ) ; }
private void notifyState ( NetworkStateReceiverListener listener ) { if ( connected == null || listener == null ) return ; if ( connected == true ) listener . networkAvailable ( ) ; else listener . networkUnavailable ( ) ; }
public void removeAnimatorListener ( Animator . AnimatorListener listener ) { rootLayer . removeAnimatorListener ( listener ) ; }
public void onFailure ( Call < MovieResponse > call , Throwable t ) { searchProgressBar . setVisibility ( View . INVISIBLE ) ; showErrorMessage ( ) ; }
public void onMediaStoreChanged ( ) { triggerSyncWithMediaStore ( false , null ) ; }
public Builder setLength ( int value ) { bitField0_ | = 0x00000004 ; length_ = value ; onChanged ( ) ; return this ; }
public FastAdapter . OnLongClickListener getOnMiniDrawerItemLongClickListener ( ) { return mOnMiniDrawerItemLongClickListener ; }
public Collection < Track > getCurrTracks ( ) { return db . getTracks ( getCompressedFilter ( ) ) ; }
public void setIcon ( Bitmap icon ) { this . icon = icon ; }
public void shouldNotPassValidation_notFullAddress ( ) { patient . getPerson ( ) . setAddresses ( Collections . singletonList ( new PersonAddress ( ) ) ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public void onRefresh ( ) { refresh ( true ) ; }
public Cursor listAllProjectsWithCountry ( ) { Cursor cursor = database . query ( PROJECT_JOIN , null , null , null , null , null , null ) ; return cursor ; }
public void setPushNotifications ( boolean enabled ) { mPushNotifications = enabled ; if ( mPushNotifications ) { if ( mPushRegistrationId == null ) gcmRegister ( ) ; } else { gcmUnregister ( ) ; } }
public static synchronized Symbols getInstance ( ) { if ( INSTANCE == null ) { INSTANCE = new Symbols ( ) ; } return INSTANCE ; }
public void afterTextChanged ( Editable editable ) { inputLayoutName . setErrorEnabled ( false ) ; boolean newTextValid = validateInput ( inputLayoutName , inputName ) ; }
public DataViewHolder < Tuple > onCreateViewHolder ( ViewGroup parent , int viewType ) { return new DescriptionMultiSelectListViewHolder <> ( ViewUtils . inflate ( parent , R . layout . item_checkbox_string_description ) , this , Tuple : : getTitle , Tuple : : getDescription ) ; }
public void onNothingSelected ( AdapterView < ? > adapterView ) { Log . d ( "Bitcoin" , "Nothing selected" ) ; }
public AsyncAlbumLoader ( Context context , int albumId ) { super ( context ) ; this . albumId = albumId ; }
public void run ( ) { searchItem . getSearchField ( ) . requestFocus ( ) ; AndroidUtilities . showKeyboard ( searchItem . getSearchField ( ) ) ; }
private void overlayVideoIcon ( int overlayLevel , AztecText . AttributePredicate predicate ) { Drawable videoDrawable = getResources ( ) . getDrawable ( R . drawable . ic_overlay_video ) ; content . setOverlay ( predicate , overlayLevel , videoDrawable , Gravity . BOTTOM | Gravity . START ) ; }
public String compressVideo ( Uri videoFileUri , String destinationDir ) throws URISyntaxException { return compressVideo ( videoFileUri , destinationDir , 0 , 0 , 0 ) ; }
public int getKat ( ) { return this . _kat ; }
public int getFtpPort ( ) { return Utilities . parseIntWithDefault ( prefs . getString ( PreferenceNames . FTP_PORT , "21" ) , 21 ) ; }
public void put ( String key , long value ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; prefs . edit ( ) . putLong ( key , value ) . apply ( ) ; }
private static boolean isChildBatteryLevelLow ( FitnessSyncInfo fitnessSyncInfo ) { return fitnessSyncInfo . getChildDeviceInfo ( ) . getBtBatteryLevel ( ) <= MIN_BATTERY_LEVEL ; }
private boolean canShowSettings ( ) { return mPlugin . isInstalled ( ) && mPlugin . isActive ( ) && ! TextUtils . isEmpty ( mPlugin . getSettingsUrl ( ) ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . SIGN ) ; }
private static String getAfterLabelEnd ( @ NonNull final String keySpec , final int labelEnd ) { }
public Jid getWith ( ) { return conversation == null ? null : conversation . getJid ( ) . toBareJid ( ) ; }
public void setIsometricShift ( boolean isometricShift ) { if ( Dungeon . isometricMode ) { this . isometricShift = isometricShift ; } }
public static IStores getInstance ( ) { return Injection . provideStores ( ) ; }
private static boolean getBoolean ( PrefKey key , boolean def ) { String value = getString ( key , Boolean . toString ( def ) ) ; return Boolean . parseBoolean ( value ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setStyle ( AppCompatDialogFragment . STYLE_NO_TITLE , 0 ) ; }
public XMPPTCPConnection ( CharSequence jid , String password ) { this ( XmppStringUtils . parseLocalpart ( jid . toString ( ) ) , password , XmppStringUtils . parseDomain ( jid . toString ( ) ) ) ; }
private void getIntentExtras ( ) { Bundle intentExtras = getIntent ( ) . getExtras ( ) ; if ( intentExtras != null ) { id = intentExtras . getInt ( AppKeys . E_ID ) ; } }
public void setTermType ( String termType ) { mKeyListener . setTermType ( termType ) ; mTermType = termType ; }
public RecyclerViewClickListener getmListener ( ) { return mListener ; }
private void updateScrollBarPositionHoneycomb ( ) { mListView . setVerticalScrollbarPosition ( View . SCROLLBAR_POSITION_LEFT ) ; }
public boolean getReloadBookList ( ) { synchronized ( LOCK_RELOAD_BOOK_LIST ) { return mReloadBookList ; } }
public void setCubeVerticalBack ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotationX ( - 90 * fraction ) ; setPivotX ( getWidth ( ) / 2 ) ; setPivotY ( getHeight ( ) ) ; }
public Loader < List < WorkshopData >> onCreateLoader ( int i , Bundle bundle ) { return new LectureLoader ( this , LECTURES_URL ) ; }
public ItemChangeAnimationManager ( BaseItemAnimator itemAnimator ) { super ( itemAnimator ) ; }
public void isPlayingReturnsFalse_andShowsPlayIcon ( ) { assertThat ( button . isPlaying ( ) , equalTo ( false ) ) ; assertThat ( getCreatedFromResId ( button ) , equalTo ( R . drawable . ic_volume_up_black_24dp ) ) ; }
public FormHierarchyPage clickGoToArrow ( ) { onView ( withId ( R . id . menu_goto ) ) . perform ( click ( ) ) ; return new FormHierarchyPage ( formName , rule ) ; }
public Route ( ) { this ( "" , "" , false ) ; }
public Maybe < Boolean > delete ( Event entity ) { return crudHelper . delete ( entity ) ; }
private static Playlist getOrCreateFavoritesPlaylist ( final Context context ) { return PlaylistLoader . getPlaylist ( context , PlaylistsUtil . createPlaylist ( context , context . getString ( R . string . favorites ) ) ) ; }
public Reminder setType ( String type ) { this . type = type ; return this ; }
public static IRelationshipInteractor createRelationshipInteractor ( ) { return new RelationshipInteractor ( Injection . provideRepositories ( ) , Injection . provideNetworkInterfaces ( ) ) ; }
public void setUpPresenter ( ) { MockitoAnnotations . initMocks ( this ) ; mAuthPresenter = new AuthPresenter ( mView , mSharedPreferencesHelper ) ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createBirds ( data ) ; }
public void bindKeyboardToInputView ( ) { if ( mainKeyboardView != null ) { Keyboard sk = keyboardSwitcher . getCurrentKeyboard ( ) ; mainKeyboardView . setKeyboard ( sk ) ; updateCursorCapsToInputView ( ) ; } }
public Loader < List < Post >> onCreateLoader ( int id , Bundle args ) { return new PostsLoader ( getActivity ( ) ) ; }
public final boolean isMet ( Object obj ) { return false ; }
public void onError ( ) { Intent i = new Intent ( TumblrPager . this , Website . class ) ; i . putExtra ( Website . EXTRA_URL , url ) ; startActivity ( i ) ; finish ( ) ; }
private void emit ( byte b ) { if ( mAlternateCharSet && b < 128 ) { emit ( ( int ) mSpecialGraphicsCharMap [ b ] ) ; } else { emit ( ( int ) b ) ; } }
public void setup ( ) { mView = mock ( PopularGoalView . class ) ; mPresenter = spy ( new PopularGoalPresenter ( mView ) ) ; }
public void initSearchBar ( ) { _searchBar . setCallback ( this ) ; _searchBar . _searchClock . setOnClickListener ( this ) ; _home . updateSearchClock ( ) ; }
public AppsHolder ( List < LaunchInfo > infos , XMLPrefsManager . XMLPrefsList values ) { this . infos = infos ; this . values = values ; update ( true ) ; }
private void openOwnerWall ( ) { PlaceFactory . getOwnerWallPlace ( accountId , ownerId , null ) . tryOpenWith ( getActivity ( ) ) ; }
public long getNumberOfPoints_Total ( ) { return NumberOfPoints_Total ; }
public static ArrayList < Song > getTopTracks ( @ NonNull Context context ) { return SongLoader . getSongs ( makeTopTracksCursorAndClearUpDatabase ( context ) ) ; }
public static com . coinomi . core . protos . Protos . TransactionInput parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void clearAll ( ) { LogUtil . INSTANCE . i ( TAG , "Clearing entire history database ! " ) ; adapter . getDatabase ( ) . delete ( TABLE_NAME , null , null ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsBackup . class ) ; startActivity ( i ) ; }
public static final DrinkSize getPint ( ) { DrinkSize pint = new DrinkSize ( "Pint" , 0 . 568d , "size_pint_pint" ) ; return pint ; }
private void hidePlaces ( ) { if ( isPlacesVisible ( ) ) { ViewUtils . slideOutDown ( mContext , placesListCard ) ; } }
private void nextSerie ( ) { linearLayout . addView ( INFLATER . trainingSetGenerator ( ) ) ; }
private static boolean isCacheExists ( Context context , String filename ) { String cachePath = context . getCacheDir ( ) . getAbsolutePath ( ) + filename ; File cacheFile = new File ( cachePath ) ; return cacheFile . exists ( ) ; }
public void onLowMemory ( ) { super . onLowMemory ( ) ; mMapView . onLowMemory ( ) ; }
public void onFailure ( int statusCode , Header [ ] headers , String responseString , Throwable throwable ) { if ( listrikLoadedListener != null ) { listrikLoadedListener . onFail ( ) ; } }
private void setUpRecyclerView ( ) { final NewsListAdapter adapter = new NewsListAdapter ( this ) ; recyclerBookmarksList . setAdapter ( adapter ) ; recyclerBookmarksList . getLayoutManager ( ) . onRestoreInstanceState ( mRecyclerBookmarksListState ) ; recyclerBookmarksList . setHasFixedSize ( true ) ; }
public int getItemCount ( ) { return mSortedData . size ( ) ; }
public static AppMsg makeText ( Activity context , CharSequence text , Style style ) { return makeText ( context , text , style , R . layout . app_msg ) ; }
public boolean hasTokenId ( ) { return ( ( bitField0_ & 0x00000080 ) == 0x00000080 ) ; }
public void setFeeChargesPaid ( Integer feeChargesPaid ) { this . feeChargesPaid = feeChargesPaid ; }
private PlaceAndPlateDtoAssembler assemblePlace ( ) { return new PlaceAndPlateDtoAssembler ( ) ; }
private void addTheme ( ) { WaveLinesApp . db . insertTheme ( new Theme ( ) ) ; queryThemesAsync ( ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . main_custom_query_options_menu , menu ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; mOweMeAdapter = new OweMeAdapter ( this , new ArrayList < PersonDebt > ( 0 ) ) ; }
public void setCards ( ArrayList < HashMap < String , String >> cards ) { mCards = cards ; }
public MediaPlayer getPlayer ( ) { return player ; }
public void onClick ( View v ) { hideSubmission ( submission , posts , baseSub , recyclerview ) ; }
public void setValue ( String value ) { this . value = value ; }
public String getReminderType ( ) { return reminderType ; }
private void displayMovies ( ) { showProgressBar ( false ) ; recyclerView . setVisibility ( View . VISIBLE ) ; }
public boolean onUnpinch ( int i , long l , double v ) { return callback . onDrawerGesture ( desktop , Type . Unpinch ) ; }
public EventCreatedEvent ( Event event ) { this . event = event ; }
public void removeItem ( Event item ) { int index = events . indexOf ( item ) ; if ( index != - 1 ) { events . remove ( index ) ; notifyItemRemoved ( index ) ; } }
public boolean onLongClick ( View v ) { rv . getLayoutManager ( ) . scrollToPosition ( 0 ) ; return true ; }
public void setShortName ( String shortName ) { this . shortName = shortName ; }
private static Object getWindowManagerService ( ) throws Exception { return Class . forName ( "android . view . WindowManagerGlobal" ) . getMethod ( "getWindowManagerService" ) . invoke ( null ) ; }
public BaseFile createFromParcel ( Parcel in ) { return new BaseFile ( in ) ; }
public final int getPointXNumber ( ) { return this . pointXNumber ; }
public void unregisterReceiver ( Context context ) { context . unregisterReceiver ( this ) ; }
public void onClick ( View view ) { onBackPressed ( ) ; }
private void bindFooter ( RecyclerView . ViewHolder holder , int position ) { if ( holder instanceof GeoPackageFooterViewHolder ) { GeoPackageFooterViewHolder viewHolder = ( GeoPackageFooterViewHolder ) holder ; } }
public RGBPanelData ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; setupPanel ( context ) ; }
public void setDy ( int dy ) { changed = true ; mDy = dy ; }
public boolean closeFragment ( ) { FrameLayout layout = ( FrameLayout ) getActivity ( ) . findViewById ( R . id . filter_container ) ; layout . setVisibility ( View . GONE ) ; return true ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . about , menu ) ; return true ; }
public void setPushConnectionEnabled ( boolean value ) { native_setPushConnectionEnabled ( value ) ; }
public void pause ( ) { currentScreen . pause ( ) ; }
public AdminPasswordProvider providesAdminPasswordProvider ( SettingsProvider settingsProvider ) { return new AdminPasswordProvider ( settingsProvider . getAdminSettings ( ) ) ; }
private void userFollowedOnSteem ( ) { showFollowProgress ( false ) ; setFollowState ( true ) ; syncFollowings ( ) ; refreshFollowingInfo ( ) ; t ( "You started following " + mUsername ) ; }
public boolean isQueueFixes ( ) { return prefs . getBoolean ( QUEUE_FIXES , false ) ; }
public String getPluginAPIHelpLogString ( ) { return getSingleLineLogStringEntry ( "Plugin API Help" , pluginAPIHelp , " - " ) ; }
public double getLongitude ( ) { return longitude ; } } \ No newline at end of file
public static ListAdapter createCurrencyAdapter ( Context context , List < Currency > currencies ) { return new MyEntityAdapter < Currency > ( context , android . R . layout . simple_spinner_dropdown_item , android . R . id . text1 , currencies ) ; }
private void loadSleepView ( ) { replaceFragment ( sleepListFragment ) ; mBuBottomNavigationView . getMenu ( ) . getItem ( 1 ) . setChecked ( true ) ; Objects . requireNonNull ( getSupportActionBar ( ) ) . setTitle ( R . string . title_sleep ) ; lastViewIndex = 1 ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , gridView , 0 ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public void onEnter ( @ NonNull Action action , @ NonNull PointF location ) { dragHandler . post ( runnable ) ; leftDragHandle . animate ( ) . alpha ( 0 . 9f ) ; }
public void onPause ( ) { mIsPaused = true ; super . onPause ( ) ; }
public CloudData getCloudData ( @ NonNull TrackFile trackFile ) { final TrackState state = trackState . get ( trackFile ) ; if ( state instanceof TrackState . TrackUploaded ) { return ( ( TrackState . TrackUploaded ) state ) . cloudData ; } else { return null ; } }
public EventBuilder setReminder ( Integer reminder ) { this . reminder = reminder ; return this ; }
public void dontScheduleDueDateReminderWhenTimeNotSet ( ) { service . scheduleAlarm ( null , newTask ( with ( ID , 1L ) , with ( REMINDERS , NOTIFY_AT_DEADLINE ) ) ) ; verify ( jobs ) . cancel ( 1 ) ; }
public @ NonNull MediaExtractor createExtractor ( ) throws IOException { MediaExtractor extractor = new MediaExtractor ( ) ; extractor . setDataSource ( file . getAbsolutePath ( ) ) ; return extractor ; }
public void testParseNullData ( ) { mSubscriber . call ( null ) ; }
public void onClick ( View v ) { dismissPopupKeyboard ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_navigation , null ) ; }
public String getSerializedHighlights ( int pageRowId ) { return sInternalUserDBHelper . getSerializedHighlights ( pageRowId , bookId ) ; }
public void remove ( AppInfo info ) { infos . remove ( info ) ; update ( true ) ; }
private void maybeForceBuilderInitialization ( ) { if ( com . google . protobuf . GeneratedMessage . alwaysUseFieldBuilders ) { getLyricsFieldBuilder ( ) ; } }
public String toString ( ) { return Localization . get ( "command . common . value . coordinate . string" ) ; }
public List < String > getLicenses ( ) { return localDataSource . getLicenses ( ) ; }
public static Realm mockRealm ( ) { mockStatic ( Realm . class ) ; Realm mockRealm = PowerMockito . mock ( Realm . class ) ; when ( Realm . getDefaultInstance ( ) ) . thenReturn ( mockRealm ) ; return mockRealm ; }
public void run ( ) { localMessage ( getString ( R . string . disconnected ) ) ; }
public void onFailure ( Call < R > call , Throwable throwable ) { Log . e ( LOG_LABEL , "onFailure" ) ; postValue ( new ApiResponse <> ( throwable ) ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . appDidLogout ) { callEnded ( ) ; } }
private double linearToDecibel ( final double value ) { return 20 . 0 * Math . log10 ( value ) ; }
private void changeFTPServerPath ( String path ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) ; preferences . edit ( ) . putString ( FTPService . KEY_PREFERENCE_PATH , path ) . apply ( ) ; updateStatus ( ) ; }
public DownloadProgressViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_download , parent , false ) ; return new DownlandProgressRecyclerViewAdapter . DownloadProgressViewHolder ( view ) ; }
public void onSortValidator ( ) { WUtil . onSortByOKValidatorPower ( mMyValidators ) ; }
public boolean isIdleNow ( ) { return mEventReceived ; }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . CMD ; }
public String getFormattedValue ( float value ) { return format . format ( value ) + " - " + format . format ( value + 10 ) ; }
public void setRank ( int rank ) { this . rank = rank ; }
public Long getId ( ) { return id ; }
private SavedState ( Parcel in ) { super ( in ) ; this . isFocused = ( in . readInt ( ) == 1 ) ; }
public synchronized static DevicesRepository getRepository ( @ NonNull Context context , @ NonNull DevicesServiceApi devicesServiceApi ) { repository = new APIDeviceProviderRepository ( devicesServiceApi , context ) ; return repository ; }
public PhotoSizeEntity setR ( String r ) { this . r = r ; return this ; }
public void setFocused ( boolean focused ) { if ( mCurrentIndex == - 1 ) { return ; } mFocusIndicators . get ( mCurrentIndex ) . setFocused ( focused ) ; }
public void setViewModel ( BaseViewModel viewModel ) { this . viewModel = ( LoginActivityViewModel ) viewModel ; LoginActivityBinding binding = DataBindingUtil . setContentView ( this , R . layout . login_activity ) ; binding . setViewModel ( this . viewModel ) ; }
public void accept ( WebApi . Result result ) throws Exception { mCommentView . showAddCommentSucceed ( ) ; }
public final Throwable fillInStackTrace ( ) { return null ; }
public IBinder onBind ( Intent intent ) { return mIBinder ; }
public void onEvent ( NewPodcastPlaybackListener newListener ) { sendMediaStatus ( ) ; }
public void setTableVerticalPivotHeight ( float fraction ) { setRotationX ( 90 * fraction ) ; setPivotX ( getWidth ( ) / 2 ) ; setPivotY ( getHeight ( ) ) ; }
public void onSubscriptionStateChanged ( final Core lc , final Event ev , final SubscriptionState state ) { Lg . w ( "onSubscriptionStateChanged ev = " , ev . getName ( ) , " SubscriptionState = " , state ) ; }
public static void addResolver ( Intent intent ) { RobolectricPackageManager packageManager = ( RobolectricPackageManager ) RuntimeEnvironment . application . getPackageManager ( ) ; packageManager . addResolveInfoForIntent ( intent , ShadowResolveInfo . newResolveInfo ( "label" , "com . android . chrome" , "DefaultActivity" ) ) ; }
public void goHome ( ) { Fragment fabFragment = getCurrentFragment ( ) ; if ( fabFragment != null ) { if ( fabFragment instanceof FileCloudFragment ) { } else if ( fabFragment instanceof FileMyCloudFragment ) { } } }
public void userInputRequried ( PendingIntent pi , Contact contact ) { activity . runIntent ( pi , REQUEST_ENCRYPT_MESSAGE ) ; }
public int getItemCount ( ) { return mCursor . getCount ( ) ; }
public int compare ( Goal a1 , Goal a2 ) { return ( int ) ( a2 . endDate - a1 . endDate ) ; }
public void onUpdate ( ) { searchInput . setText ( null ) ; updateAppsAdapter ( ) ; }
public void onChanged ( NumberPicker picker , int oldVal , int newVal ) { activity . setTuningCents ( tuningCents . getCurrent ( ) ) ; clientModel . setTuningCents ( tuningCents . getCurrent ( ) ) ; clientModel . savePreferences ( activity ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; if ( type == 0 ) { NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . didSetPasscode ) ; } }
public RectF getGridClippingRect ( ) { mGridClippingRect . set ( mViewPortHandler . getContentRect ( ) ) ; mGridClippingRect . inset ( - mAxis . getGridLineWidth ( ) / 2 . f , 0 . f ) ; return mGridClippingRect ; }
public void onConversationsListItemUpdated ( ) { Fragment fragment = getFragmentManager ( ) . findFragmentById ( R . id . main_fragment ) ; if ( fragment != null && fragment instanceof ConversationsOverviewFragment ) { ( ( ConversationsOverviewFragment ) fragment ) . refresh ( ) ; } }
public boolean isAnyMealSaved ( SQLiteOpenHelper helper ) { return isAnyRecordSaved ( helper , tableName ) ; }
private void downloadPlaceDetailsAndUpdateUi ( ) { showProgressView ( ) ; TravelerIoFacadeImpl ioFacade = new TravelerIoFacadeImpl ( getActivity ( ) ) ; ioFacade . getPlaceDetails ( placeId ) ; }
public boolean onPreferenceStartScreen ( final PreferenceFragmentCompat preferenceFragmentCompat , final PreferenceScreen preferenceScreen ) { mReplaceFragmentStrategy . onPreferenceStartScreen ( getSupportFragmentManager ( ) , preferenceFragmentCompat , preferenceScreen ) ; return true ; }
public void finishClick ( ) { savePlayersStats ( ) ; openStatsActivity ( ) ; }
public DbResultsEntry ( ) { this ( 0 , null ) ; }
public Maybe < Event > create ( Event entity ) { return crudHelper . create ( entity ) ; }
public boolean canSwipe ( ) { return menuSpinner != null && menuSpinner . getSelectedItemPosition ( ) != 0 ; }
public static boolean isApplication ( String mimeType ) { return BASE_TYPE_APPLICATION . equals ( getTopLevelType ( mimeType ) ) ; }
public void setItemStack ( ItemStack itemStack ) { label . setText ( itemStack . item . getName ( ) ) ; pack ( ) ; }
public void reset ( ) { mSched . reset ( ) ; }
public void enable ( View v ) { setProperty ( PORT ) ; setIp ( null ) ; }
public void initialize ( Activity contextActivity ) { this . contextActivity = contextActivity ; setupStatusUpdates ( ) ; setupGoogleApis ( ) ; setupTrackingManager ( ) ; setupMessageHandlers ( ) ; setupSensorDataManager ( ) ; setupReachabilityChecker ( ) ; status . setInitialized ( true ) ; }
public void pause ( ) { player . setPlayWhenReady ( false ) ; }
public boolean onLongClick ( View v ) { currentCalculation += " [ phi ] " ; displayCalculation += "φ" ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; onAllClicks ( ) ; return true ; }
public static < T > Subject < T , T > create ( ) { return new QueueSubject <> ( new State < T > ( ) ) ; }
public String desc ( ) { return Game . getVar ( R . string . Sword_Info ) ; }
public void setVm ( Vm vm ) { this . vm = vm ; }
public void onCompletion ( ) { recyclerView . post ( ( ) -> lurkAdapter . datasetChanged ( false ) ) ; }
public RelativeLayout getBottomToolbar ( ) { return mBottomToolbar ; }
public void testCanBeResolved_isFalse ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . isCanBeResolved ( ) ) . thenReturn ( false ) ; assertFalse ( dependencyTask . canBeResolved ( configuration ) ) ; }
public static long getAssetLength ( String assetName ) throws IOException { Activity context = ClientModel . getClientModel ( ) . getContext ( ) ; return context . getAssets ( ) . openFd ( assetName ) . getLength ( ) ; }
private void addMediaList ( @ NonNull List < Uri > uriList , boolean isNew ) { List < Uri > fetchedUriList = fetchMediaList ( uriList ) ; mAddMediaListThread = new AddMediaListThread ( fetchedUriList , isNew ) ; mAddMediaListThread . start ( ) ; }
private void initBirthdayTimePrefs ( ) { binding . reminderTimePrefs . setOnClickListener ( view -> showTimeDialog ( ) ) ; binding . reminderTimePrefs . setValueText ( mPrefs . getBirthdayTime ( ) ) ; binding . reminderTimePrefs . setDependentView ( binding . birthReminderPrefs ) ; }
public ActiveSelection ( MovirtAccount account , String clusterId ) { super ( account , clusterId ) ; }
public void run ( ) { dropIn ( finalView ) ; }
public boolean onTouchEvent ( MotionEvent event ) { selectionChangedByUser = true ; try { return super . onTouchEvent ( event ) ; } catch ( NullPointerException e ) { return false ; } }
public String getExpiry ( ) { return mExpiry ; }
public int getMinimumDistanceInterval ( ) { return ( Utilities . parseIntWithDefault ( prefs . getString ( PreferenceNames . MINIMUM_DISTANCE , "0" ) , 0 ) ) ; }
public void setUp ( ) throws Exception { MockitoAnnotations . initMocks ( this ) ; OverlayWindowManager . setInstance ( overlayWindowManager ) ; ScreenMonitor . setInstance ( screenMonitor ) ; overlayView = OverlayView . create ( view ) ; }
public void onError ( Throwable e ) { dismissProgressDialog ( ) ; }
public void onSubsequentExceptions ( ) { AbstractClient . invalidate ( ) ; LoadingActivity . startActivity ( this , null ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { b . titleView . setText ( String . valueOf ( progress ) ) ; }
public static boolean canSwipeRight ( int reactionType ) { return ( extractRightReaction ( reactionType ) == REACTION_CAN_SWIPE ) ; }
public void setProgressBackgroundTintList ( @ Nullable ColorStateList tint ) { logProgressBarTintWarning ( ) ; super . setProgressBackgroundTintList ( tint ) ; }
public boolean isInOperation ( ) { return fragment . isInOperation ( ) ; }
private void onHistoryItemClicked ( ) { if ( historyListener != null && model != null ) { historyListener . onHistoryClicked ( model . getId ( ) ) ; } }
public void openGymkhana ( View v ) { setTitle ( "Students' Gymkhana Office" ) ; setNavFragment ( iitbbs . iitbhubaneswar . R . layout . gymkhana ) ; }
public int getScrollOffset ( ) { return mView . getScrollOffset ( ) ; }
public static RxDnssd getRxDnssd ( @ NonNull Context context ) { return ( ( BonjourApplication ) context . getApplicationContext ( ) ) . mRxDnssd ; }
private void checkWordCountTap ( MotionEvent event ) { if ( event . getX ( ) >= wordCountPosXLeft && event . getX ( ) <= wordCountPosXRight && event . getY ( ) >= wordCountPosYTop ) { ( ( GameActivity ) getContext ( ) ) . showCurrentlyFoundWords ( ) ; } }
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + RecentStoreColumns . NAME ) ; onCreate ( db ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { deleteConversation ( false ) ; }
public Completable leave ( int accountId , int groupId ) { return networker . vkDefault ( accountId ) . groups ( ) . leave ( groupId ) . toCompletable ( ) ; }
public static void enableBackLightDimmer ( boolean enable , Context context ) { run ( Control . write ( enable ? "Y" : "N" , LM3630_BACKLIGHT_DIMMER ) , LM3630_BACKLIGHT_DIMMER , context ) ; }
public void toggleCamera ( ) { ( ( GameActivity ) getContext ( ) ) . toggleCamera ( ) ; mCurrentCameraMode = ECameraMode . values ( ) [ ( mCurrentCameraMode . ordinal ( ) + 1 ) % ECameraMode . values ( ) . length ] ; }
public void stopSensor ( ) { mRemoteLogger . v ( "stopSensor ( ) " ) ; if ( mProximitySensor != null ) { mSensorManager . unregisterListener ( this ) ; } }
public void run ( ) { Toast . makeText ( getContext ( ) , "KamerabilledeProvider + " + tekst , Toast . LENGTH_LONG ) . show ( ) ; }
private void requestUpdateFromState ( ) { mIsFromUpdated = false ; }
public IngredientTemplate removeExtraIngredientType ( ) { IngredientTemplate extra = extraIngredient ; extraIngredient = null ; return extra ; }
private int getDefaultColor ( ) { return PreferenceData . STATUS_COLOR . getIntValue ( getContext ( ) ) ; }
public SearchAdapter ( Context context , ArrayList < Result > data ) { this . dataSet = data ; this . context = context ; }
public Scheduler ( @ AppContext Context context ) { this . context = context ; }
public int skipData ( long positionUs ) { if ( positionUs > 0 && streamState != STREAM_STATE_END_OF_STREAM ) { streamState = STREAM_STATE_END_OF_STREAM ; sendFormat ( ) ; return 1 ; } return 0 ; }
public AboutView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public float getStartDeg ( ) { return startDeg ; }
public void onClick ( View v ) { selectAudioAttachment ( ) ; toggleAttachmentView ( ) ; }
private void cancelNotification ( ) { NotificationManager notificationManager = ( NotificationManager ) getSystemService ( Context . NOTIFICATION_SERVICE ) ; notificationManager . cancel ( 999 ) ; }
public com . coinomi . core . protos . Protos . ScryptParametersOrBuilder getEncryptionParametersOrBuilder ( ) { if ( encryptionParametersBuilder_ != null ) { return encryptionParametersBuilder_ . getMessageOrBuilder ( ) ; } else { return encryptionParameters_ ; } }
public void onAdLoaded ( ) { Log . d ( "Banner Ad Test" , "Add Finished Loading" ) ; }
private void maybeAddToActive ( ) { JSONObject c = current ( ) ; select ( c . getLong ( "id" ) ) ; }
public void refreshItem ( int swipedLessonId , int percentageMetaId ) { notifyItemChanged ( getRecyclerViewPosition ( new AdmissionPercentageDataPojo ( percentageMetaId , swipedLessonId , - 1 , - 1 ) ) ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { Log . d ( TAG , "Service Started" ) ; return START_NOT_STICKY ; }
public boolean onClick ( View v , IAdapter < IconLabelItem > adapter , IconLabelItem item , int position ) { if ( onAppSelectedListener != null ) onAppSelectedListener . onAppSelected ( apps . get ( position ) ) ; dialog . dismiss ( ) ; return true ; }
public void onClick ( DialogInterface dialog , int which ) { SparkleHelper . removeActiveUser ( getApplicationContext ( ) ) ; Intent nationActivityLaunch = new Intent ( StatelyActivity . this , LoginActivity . class ) ; startActivity ( nationActivityLaunch ) ; finish ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mContext = getActivity ( ) ; mActivity = ( HomeActivity ) getActivity ( ) ; mFragmentManager = mActivity . getSupportFragmentManager ( ) ; }
public boolean containsGeometryInformation ( ) { for ( LowEmissionZone childZone : childZones ) { if ( childZone . containsGeometryInformation ( ) ) { return true ; } } return false ; }
public void onResume ( ) { super . onResume ( ) ; mIsPageBookmarked = userDataDBHelper . isPageBookmarked ( pageRowId ) ; if ( mBookmarkFrame != null ) { mBookmarkFrame . setVisibility ( mIsPageBookmarked ? View . VISIBLE : View . GONE ) ; } }
public void setHashRate ( long [ ] [ ] hashRate ) { HashRate = hashRate ; }
public FragmentData getFragment ( ) { return SIAApp . GG_APP . school . fragments . get ( getArguments ( ) . getInt ( "fragment" ) ) ; }
public void onClick ( View v ) { skipIfEnabled ( ) ; }
public String getRecipeUuid ( ) { return this . recipeUuid ; }
public void toggleMute ( long delay ) { toggleMuteTask = new ToggleMuteTask ( audioManager , delay ) ; toggleMuteTask . execute ( ) ; }
public DownloadLocationTextWatcher ( EditText getDownload , int errorColor , int regularColor ) { this . getDownload = getDownload ; this . errorColor = errorColor ; this . regularColor = regularColor ; }
private void doSetKeepWifiAlive ( final Boolean value ) { mSettings . setKeepWifiActive ( value ) ; if ( value ) { mService . EnableWifiKeepAlive ( ) ; } else { mService . DisableWifiKeepAlive ( ) ; } }
public static void showSaveError ( Context context , CoordinatorLayout coordinatorLayout , Exception e ) { showError ( context . getString ( R . string . msg_save_failed , e . getMessage ( ) ) , coordinatorLayout ) ; }
public void onCreate ( SimpleDialog d , LinearLayout dLayout ) { d . disableButton ( R . id . dialog_button_ok ) ; final TextView prompt = ( TextView ) dLayout . findViewById ( R . id . fman_message_dialog_prompt ) ; prompt . setText ( errMsg ) ; }
public String getApiUrl ( ) { return get ( API_URL , "" ) ; }
public boolean hasNestedScrollingParent ( ) { return mChildHelper . hasNestedScrollingParent ( ) ; }
public void onAttach ( Context context ) { callback = ( OnOtpListener ) getActivity ( ) ; super . onAttach ( context ) ; }
public void onClick ( View view ) { new DialogAuthorLabel ( getActivity ( ) , mApplicationCallback ) ; }
public boolean onDown ( MotionEvent e ) { return true ; }
private SoundHandler ( ) { if ( instance != null ) throw new RuntimeException ( "I don't think so . " ) ; audios = new HashMap < String , Sound > ( ) ; }
public void setIntervals ( int interval ) { mLocationRequest . setInterval ( interval ) ; if ( interval > 2000 ) { mLocationRequest . setFastestInterval ( interval / 2 ) ; } else { mLocationRequest . setFastestInterval ( interval ) ; } }
public CharSequence getCurrentWord ( ) { return getText ( ) . subSequence ( getWordStart ( getSelectionStart ( ) ) , getWordEnd ( getSelectionEnd ( ) ) ) ; }
public void run ( ) { mvf . setArguments ( b ) ; messageTxt . setTextWithEmoji ( "" ) ; if ( buffer != null && buffer . getDraft ( ) != null ) messageTxt . append ( buffer . getDraft ( ) ) ; }
public void onResult ( Status status ) { if ( status . isSuccess ( ) ) { onConnectionEvent . onConnectedSuccess ( ) ; } else { onConnectionEvent . onConnectedFail ( ) ; } }
public static synchronized LightNovelsDatabase getInstance ( Context context ) { if ( instance == null ) { instance = create ( context ) ; } return instance ; }
public void subscribeSocketsUpdate ( ) { socketManager = new SocketManager ( ) ; socketManager . connect ( rates , null ) ; }
public void aumentaAposta ( Jogador j ) { if ( j . equals ( getJogadorHumano ( ) ) ) enviaLinha ( "T" ) ; }
public RecentsListHorizontalAdapter ( List < UnifiedTrack > recentslyPlayed , Context ctx ) { this . recentslyPlayed = recentslyPlayed ; this . ctx = ctx ; imgLoader = new ImageLoader ( HomeActivity . ctx ) ; }
public void updateLayer ( ProfileLayerEvent . ProfileLayerUpdated event ) { flightProfile . invalidate ( ) ; }
public void deferReset ( Card card ) { mHaveQueues = false ; mHaveCounts = false ; setCurrentCard ( card ) ; }
public void changeText ( String newText ) { TextView text = ( TextView ) view . findViewById ( R . id . text_acorn_count ) ; text . setText ( newText ) ; text . setTextColor ( Color . BLACK ) ; }
public int getStrokeSize ( ) { return ( int ) Math . round ( this . strokeSize ) ; }
public File getCacheDir ( ) { return new File ( context . getCacheDir ( ) , "lottie_network_cache" ) ; }
public com . google . protobuf . Any . Builder getContentBuilder ( ) { onChanged ( ) ; return getContentFieldBuilder ( ) . getBuilder ( ) ; }
private XmppAxolotlSession recreateUncachedSession ( AxolotlAddress address ) { IdentityKey identityKey = axolotlStore . loadSession ( address ) . getSessionState ( ) . getRemoteIdentityKey ( ) ; return ( identityKey != null ) ? new XmppAxolotlSession ( account , axolotlStore , address , identityKey ) : null ; }
public static boolean add ( TetroidRecord record ) { boolean res = mFavorites . add ( record ) ; if ( res ) { record . setIsFavorite ( true ) ; saveFavorites ( ) ; } return res ; }
public void onError ( Throwable e ) { Timber . e ( "onError : error retrieving location" , e ) ; }
public static com . coinomi . core . protos . Protos . EncryptedData parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void scrollTo ( int offset ) { mView . scrollTo ( mView . getScrollX ( ) , offset ) ; }
public SheltersAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_shelter , parent , false ) ; return new ViewHolder ( v ) ; }
private static void addScore ( Element el , int score ) { int old = getScore ( el ) ; setScore ( el , score + old ) ; }
public void loginWithMagicLink ( ) { new LoginFlow ( ) . chooseContinueWithWpCom ( ) . enterEmailAddress ( E2E_WP_COM_USER_EMAIL ) . chooseMagicLink ( ) . openMagicLink ( mMagicLinkActivityTestRule ) . confirmLogin ( false ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( getArguments ( ) != null ) { clusterName = getArguments ( ) . getString ( ARG_HOST_PREFIX ) ; } activity = ( ClusterMapActivity ) getActivity ( ) ; }
public boolean equals ( Object obj ) { return obj instanceof ProfileLayer && ( ( ProfileLayer ) obj ) . id . equals ( id ) ; }
public void testParseJsonNull ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . parseJsonNull ( mSubscriber ) ; }
public String getTheme ( ) { return null ; }
public void onPageStarted ( WebView view , String url , Bitmap favicon ) { findViewById ( R . id . progress ) . setVisibility ( View . VISIBLE ) ; }
public void onClick ( View v ) { if ( onClickListener != null ) { onClickListener . onClick ( ) ; } }
public void onBufferReceived ( byte [ ] bytes ) { Log . d ( TAG , "onBufferReceived : " ) ; }
public GalleryAdapter ( Context context , List < Image > images ) { mContext = context ; this . images = images ; }
private void updatedAlarmTimeText ( ) { alarmTimeTextView . setText ( getStepDataAsString ( ) ) ; }
public void onError ( FacebookException exception ) { Rollbar . reportException ( exception ) ; Log . e ( TAG , "Error while connecting to facebook" , exception ) ; }
public void setAddressAndLabel ( Address address ) { this . address = address ; updateView ( ) ; }
public FigureType getRotatedFigure ( ) { return FigureType . J_FIGURE ; }
public Bundle getResult ( ) { Bundle result = new Bundle ( ) ; result . putInt ( "type" , Care . TEXT ) ; result . putInt ( "color" , gridColorPickerView . getSelectedColor ( ) ) ; return result ; }
public void onDrawerClosed ( View drawerView ) { super . onDrawerClosed ( drawerView ) ; if ( ! isAdded ( ) ) { return ; } getLoaderManager ( ) . restartLoader ( DATA_LOADER , null , NavigationDrawerFragment . this ) ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public void selectAllIsNotVisibleWhenNoCardsInDeck ( ) { CardBrowser browser = getBrowserWithNoCards ( ) ; assertThat ( browser . isShowingSelectAll ( ) , is ( false ) ) ; }
public SearchTeamView ( Context context , AttributeSet attrs ) { this ( context , attrs , R . attr . autoCompleteTextViewStyle ) ; }
public void onRepeatModeChanged ( ) { for ( MusicServiceEventListener listener : mMusicServiceEventListener ) { if ( listener != null ) { listener . onRepeatModeChanged ( ) ; } } }
public EighthActivityBuilder capacity ( int capacity ) { this . capacity = capacity ; return this ; }
public void onSkipToNext ( ) { gotoNext ( true ) ; }
public boolean isNetFreeToMoveRight ( ) { boolean result = false ; if ( figure . coordinatesInNet . x + figure . getWidthInSquare ( ) < horizontalSquaresCount && isNetFreeToMoveDown ( ) && ! isFigureRight ( ) ) { result = true ; } return result ; }
public void setUp ( ) throws Exception { mContext = getInstrumentation ( ) . getTargetContext ( ) ; }
private static Date getDummyDate ( ) { try { SimpleDateFormat sdf = new SimpleDateFormat ( FitnessManager . JSON_DATE_FORMAT ) ; return sdf . parse ( DEFAULT_DATE ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; return new Date ( ) ; } }
public String getNetwork ( ) { return network ; }
public int getSeconds ( ) { return seconds ; }
public void onItemPinned ( int position ) { ( ( UnderSwipeableExampleActivity ) getActivity ( ) ) . onItemPinned ( position ) ; }
private void showFilterMode ( ) { Preference preference = findPreference ( InstanceSettings . PREF_FILTER_MODE ) ; if ( preference != null ) { preference . setSummary ( ApplicationPreferences . getFilterMode ( getActivity ( ) ) . summaryResId ) ; } }
private static String getShortcutId ( Contact contact ) { return contact . getAccount ( ) . getJid ( ) . asBareJid ( ) . toString ( ) + "#" + contact . getJid ( ) . asBareJid ( ) . toString ( ) ; }
public void onFailure ( Call < User > call , Throwable t ) { if ( isDestroyed ) { return ; } bindUserProfile ( ) ; swipeContainer . setRefreshing ( false ) ; }
public void setRadius ( double radius ) { this . radius = radius ; }
public int getErrorCounter ( int x , int y ) { return errorCounter [ x ] [ y ] ; }
public CircleView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; init ( ) ; }
public void onFailedLoadingData ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { Snackbar . make ( parentLayout , R . string . something_went_wrong , Snackbar . LENGTH_LONG ) . show ( ) ; } } ) ; }
public void onAsyncOperationFinished ( Boolean result ) { mShowProgress . setValue ( false ) ; sharedPreferences . putBoolean ( "first_time_read" , true ) ; if ( result ) { mEmptyList . setValue ( true ) ; mOnMessage . setValue ( R . string . no_items_found ) ; } }
public static void actionStart ( Context context ) { Intent intent = new Intent ( context , OperateDatabaseActivity . class ) ; context . startActivity ( intent ) ; }
public void delete ( int refID ) { dbMain . delete ( tableNameMain , dbHelperMain . COLUMN_LP_ID + " = " + refID , null ) ; }
public List < CategoryTable > getDbCategoryTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getCategoryTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public static void startServiceBackground ( Context context , Intent i ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . O ) context . startForegroundService ( i ) ; else context . startService ( i ) ; }
public void sendMessageToNode ( final String path , final String data , final String nodeId ) throws Exception { sendMessageToNode ( path , data . getBytes ( DEFAULT_CHARSET ) , nodeId ) ; }
public void onChange ( RealmResults < PodcastRealm > results ) { adapter_ . notifyDataSetChanged ( ) ; }
public void updateSyncFrequencySettings ( int index ) { mNewsSharedPreferences . put ( mNewsSharedPreferences . getStringFromResId ( R . string . pref_sync_frequency_key ) , getSyncFrequencyValue ( index ) ) ; }
public void addValidation ( TextInputLayout textInputLayout , Range range , String errMsg ) { mValidator . set ( textInputLayout , new NumericRange ( range ) , errMsg ) ; }
public void setPresenter ( RecipeCreationDialogPresenter presenter ) { this . presenter = presenter ; }
public void notifyDataSetChanged ( ) { paginationRequestSent = false ; mWalletPresenter . getTransactionRecyclerViewAdapter ( ) . notifyDataSetChanged ( ) ; if ( mWalletPresenter . getTransactionRecyclerViewAdapter ( ) . getItemCount ( ) > 0 ) { mEmptyWalletLL . setVisibility ( View . GONE ) ; } }
public AuditEvent ( long start , AuditEventType auditEventType ) { this ( start , auditEventType , false , false , null , null , null ) ; }
public void addWalletTransaction ( WalletTransaction wtx ) { lock . lock ( ) ; try { addWalletTransaction ( wtx . getPool ( ) , wtx . getTransaction ( ) , true ) ; } finally { lock . unlock ( ) ; } }
public void start ( Attributes attributes ) { mCurrentCategory = new Category ( Integer . parseInt ( attributes . getValue ( Category . Xml . ID_ATTRIBUTE ) ) ) ; }
public boolean onStartNestedScroll ( View child , View target , int nestedScrollAxes ) { return ! dismissed && nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL && ! canDismissWithSwipe ( ) ; }
public void showUserProfile ( int accountId , User user ) { PlaceFactory . getOwnerWallPlace ( accountId , user ) . tryOpenWith ( getActivity ( ) ) ; }
public static void reset ( ) { for ( SmartToastType type : SmartToastType . values ( ) ) { AppPrefs . setInt ( type . shownKey , 0 ) ; AppPrefs . setInt ( type . usageKey , 0 ) ; } }
public void run ( ) { hideMenu ( ) ; }
public int getItemViewType ( int i ) { if ( singlePhoto ) { return 0 ; } if ( i == 0 ) { return 1 ; } return 0 ; }
public Map < String , String > queryKeyStatus ( ) { return null ; }
private void showViewLoading ( ) { this . viewListView . showLoading ( ) ; }
public void paintShouldDrawFullRedCircleIfOneValue ( ) throws Exception { pieChart = new PieChart ( plot , new double [ ] { 1 . } , new ColorWrap [ ] { ColorWrap . RED } ) ;
public void dealCards ( ) { moveToStack ( dealFromStack ( ) . getTopCard ( ) , stacks [ 0 ] , OPTION_NO_RECORD ) ; stacks [ 0 ] . getTopCard ( ) . flipUp ( ) ; }
public int compare ( File o1 , File o2 ) { return o1 . getInfo ( ) . getDate ( ) . compareTo ( o2 . getInfo ( ) . getDate ( ) ) ; }
public final void addItem ( final Item parItem ) { mListItem . add ( parItem ) ; setTotalWeight ( recomputeTotalWeight ( ALL_ITEMS ) ) ; setPackedWeight ( recomputeTotalWeight ( PACKED_ITEMS_ONLY ) ) ; }
public void applyBrand ( int mainColor , int textColor ) { applyBrandToPrimaryToolbar ( binding . toolbar ) ; }
public void setClientId ( Integer clientId ) { this . clientId = clientId ; }
public String getRosterVersion ( ) { return Preferences . getRosterVersion ( ) ; }
public void onBindViewHolder ( MyFavoritesAdapter . ViewHolder holder , int position ) { holder . setIsRecyclable ( false ) ; holder . bind ( mList . get ( position ) , position ) ; }
public void onClick ( DialogInterface dialog , int which ) { onSave ( true ) ; }
private void onGenAccount ( int path ) { onShowWaitDialog ( ) ; new GenerateAccountTask ( getBaseApplication ( ) , mChain , this , mIsNewBip44 , mIsFetchNewBip ) . execute ( "" + path , mEntropy , "" + mWordSize ) ; }
public void updateFow ( @ NotNull FogOfWar fog ) { fog . updateVisibility ( Dungeon . visible , level . visited , level . mapped ) ; }
public void addValidation ( EditText editText , String regex , String errMsg ) { mValidator . set ( editText , regex , errMsg ) ; }
public void onServiceConnected ( ComponentName name , IBinder service ) { mService = ( ( JumbleService . JumbleBinder ) service ) . getService ( ) ; synchronized ( mServiceLock ) { mServiceLock . notify ( ) ; } }
public void setPlay ( boolean animate ) { if ( animate ) { if ( ! isPlaySet ) { togglePlayPause ( ) ; } } else { isPlaySet = true ; isPlay = true ; setProgress ( 1 ) ; } }
public void changed ( ChangeEvent event , Actor actor ) { Menu prev = MenuManager . getPrevious ( menu ) ; if ( prev == null ) return ; GraphicalAdapter . instance . setMenu ( prev ) ; }
public void setBlockID ( BigInteger blockID ) { this . blockID = blockID ; }
public void setNoAnimatedPosition ( NoAnimatedPosition noAnimatedPosition ) { mNoAnimatedPosition = noAnimatedPosition ; }
public int getAdultSteps ( ) throws PersonDoesNotExistException { if ( this . isDemoMode ) { return 10000 ; } return this . getPersonTotalSteps ( Person . ROLE_PARENT ) ; }
private void addNotifyOnAvailableButton ( ) { notifyButton . setVisibility ( View . VISIBLE ) ; }
private boolean isLyricsLayoutVisible ( ) { return lyrics != null && lyrics . isSynchronized ( ) && lyrics . isValid ( ) && PreferenceUtil . getInstance ( getActivity ( ) ) . synchronizedLyricsShow ( ) ; }
private PemToKeyPairTask ( @ NonNull byte [ ] pemContent , AsyncTaskResult . Callback < AsyncTaskResult < KeyPair >> callback ) { this . pemFile = pemContent ; this . callback = callback ; }
public boolean syncOpen ( ) { boolean ret = openCH34X ( ) ; if ( ret ) { setSyncParams ( inEndpoint , outEndpoint ) ; asyncMode = false ; return true ; } else { return false ; } }
public final void setPointYNumber ( int pointYNumber ) { this . pointYNumber = pointYNumber ; }
public static TypeAdapter < Response > typeAdapter ( final Gson gson ) { return new AutoValue_Response . GsonTypeAdapter ( gson ) ; }
public void handleMessage ( Message msg ) { try { cmd . notifyMe ( msg ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public static int smallFontSize ( ) { if ( Game . smallResScreen ( ) ) { return 8 ; } else { return 6 ; } }
public void playPreviousSong ( View view ) { if ( musicService != null ) { musicService . playNext ( ) ; } }
public static boolean isHackerNewsUrl ( ItemManager . WebItem item ) { return ! TextUtils . isEmpty ( item . getUrl ( ) ) && item . getUrl ( ) . equals ( String . format ( HackerNewsClient . WEB_ITEM_PATH , item . getId ( ) ) ) ; }
public void onItemClick ( View view , int position ) { Library item = adapter . getItematPosition ( position ) ; goToUrl ( item . getUrl ( ) ) ; }
private void addButtonPlay ( ) { addButton ( R . drawable . ic_play , R . color . header_background , false ) ; }
public void testSimpleParsing ( ) { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mTeam ) ; }
private View newSelectionRect ( Rect selectionRect ) { View popup = getView ( ) . findViewById ( R . id . selection_menu_card ) ; preparePopuPosition ( popup , selectionRect ) ; return popup ; }
public UserBuilder postalCode ( String postalCode ) { this . address . setPostalCode ( postalCode ) ; return this ; }
public boolean onCabFinished ( MaterialCab materialCab ) { setStatusBarColor ( ColorUtil . getColorWithAlpha ( toolbarAlpha , toolbarColor ) ) ; return callback . onCabFinished ( materialCab ) ; }
public String tileDesc ( ) { return Game . getVar ( R . string . Darkness_Info ) ; }
public TsExtractor ( ) { this ( new TimestampAdjuster ( 0 ) ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; document . serializeToStream ( stream ) ; }
public void onLocationChanged ( Location location ) { values [ 0 ] = ( float ) location . getLatitude ( ) ; values [ 1 ] = ( float ) location . getLongitude ( ) ; this . fireInput ( values , 2 ) ; }
public void connectToDevice ( BluetoothDevice device ) { Timber . d ( "connectToDevice : " + device . getName ( ) ) ; device . connectGatt ( context , false , mGattCallback ) ; }
public void onAddFileClicked ( boolean allowMultipleSelection ) { mMediaPickerLauncher . showFilePicker ( this , allowMultipleSelection ) ; }
public static String getFontSize ( Context context ) { return getString ( context , "pref_font_size" , context . getString ( R . string . pref_default_font_size ) ) ; }
public void onAdded ( ) { tracer . debug ( "ownCloud Job : onAdded" ) ; }
public boolean onQueryTextSubmit ( String query ) { setFilterConstraint ( query ) ; return true ; }
public void registerReceiverViaLocalBroadcastManager ( BroadcastReceiver broadcastReceiver , String . . . events ) { mLocalBroadcastManager . registerReceiver ( broadcastReceiver , eventsToIntentFilter ( events ) ) ; }
public GroupFitnessInterface getMultiDayFitness ( Date startDate , Date endDate ) throws IOException , JSONException { return getMultiDayFitness ( startDate , endDate , getCacheExpiryDate ( ) ) ; }
public int getTitle ( ) { return R . string . title_bar_chart ; }
public void run ( ) throws CertificateException , SignatureException , PGPException , IOException , NoSuchProviderException { revokeCurrentKey ( ) ; setupKeyPairReceiver ( ) ; generateKeyPair ( ) ; }
public void setFavicon ( @ Nullable Bitmap favicon ) { if ( favicon == null ) { mFavicon = mDefault ; } else { mFavicon = Utils . padFavicon ( favicon ) ; } }
private void onCallStartRingback ( ) { mRemoteLogger . d ( "onCallStartRingback : " + mRingbackStarted ) ; if ( ! mRingbackStarted ) { mRemoteLogger . d ( "Ringback not started . Start it . " ) ; mRingbackStarted = true ; mSipService . startRingback ( ) ; } }
public void run ( ) { synchronized ( loadContactsSync ) { loadingContacts = false ; } NotificationCenter . getInstance ( ) . postNotificationName ( MessagesController . contactsDidLoaded ) ; }
public void setTagState ( String tag , Boolean state ) { if ( tagsState . containsKey ( tag ) ) tagsState . put ( tag , state ) ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return OstWorkflowContext . WORKFLOW_TYPE . PERFORM ; }
public void flowComplete ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { updateCommonCode ( ostWorkflowContext ) ; }
private String formatHashtag ( HashtagResult result ) { return String . format ( "#%s" , result . hashtag ) ; }
public Static getStaticUtil ( ) { return staticUtil ; }
public AudioRecorder ( ) { this . audioSaveHelper = new AudioSaveHelper ( ) ; }
public static int [ ] toSortedCodePointArray ( @ NonNull final String string ) { final int [ ] codePoints = toCodePointArray ( string ) ; Arrays . sort ( codePoints ) ; return codePoints ; }
public void onIsComposingReceived ( final Core lc , final ChatRoom cr ) { Lg . w ( "onIsComposingReceived PeerAddress = " , cr . getPeerAddress ( ) ) ; }
public void onProviderDisabled ( String provider ) { }
public void checkFirstMovement ( ) { if ( ! movedFirstCard ) { incrementPlayedGames ( ) ; movedFirstCard = true ; } }
public String requestStringPrompt ( String instructions , String hint ) { String value = null ; try { value = ( String ) requestPrompt ( instructions , hint , String . class ) ; } catch ( Exception e ) { } return value ; }
public TeamListSubscriber provideTeamListSubscriber ( ) { return new TeamListSubscriber ( ) ; }
public List < Comment > getComments ( ) { return comments ; }
public AboutBuilder addDonateAction ( View . OnClickListener onClickListener ) { return addAction ( R . mipmap . donate , R . string . donate , onClickListener ) ; }
public void readFromParcel ( Parcel in ) { colorMap = ColorMap . valueOf ( in . readString ( ) ) ; zLabelsNumber = in . readInt ( ) ; }
public void onCancel ( final DialogInterface dialogInterface ) { General . quickToast ( CommentReplyActivity . this , getString ( R . string . comment_reply_oncancel ) ) ; progressDialog . dismiss ( ) ; }
public void setCallbacks ( LoaderCallbacks callbacks ) { this . callbacks = callbacks ; }
public ArrayList < Song > getSongs ( ) { ArrayList < Song > songs = new ArrayList <> ( ) ; for ( Album album : albums ) { songs . addAll ( album . songs ) ; } return songs ; }
public void openItemDetailFragment ( final Item parItem ) { Log . d ( TAG , "openItemDetailFragment ( . . . ) faked" ) ; }
private void checkSmartLockPasswordAndStartLogin ( ) { checkSmartLockPassword ( ) ; if ( mSmartLockHelperState == SmartLockHelperState . FINISHED ) { startLogin ( ) ; } }
public void initiateThemePurchase ( ) { purchaseHelper . purchase ( dialogBuilder , this , getString ( R . string . sku_themes ) , getString ( R . string . p_purchased_themes ) , REQUEST_PURCHASE , this ) ; }
public boolean isSameQueryRequested ( ) { return lastQuery != null && query != null && lastQuery . equals ( query ) ; }
private double acreTosqkm ( double num ) { return num * 0 . 00405 ; }
public GeometryBuffer scale ( float scaleX , float scaleY ) { for ( int i = 0 ; i < pointPos ; i += 2 ) { points [ i ] * = scaleX ; points [ i + 1 ] * = scaleY ; } return this ; }
public void enteredActionMode ( @ NonNull AriaFile trigger ) { isInActionMode = true ; selectedFiles . clear ( ) ; selectedFiles . add ( trigger ) ; postNotifyDataSetChanged ( ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { thread . initialize ( UE ) ; log . v ( TAG , "Fragment created" ) ; firebaseAnalyticsProvider . logCurrentScreen ( activity , fragment ) ; }
public static String getRandomUserNotFocusedMessage ( Context context ) { return getMessageToDisplay ( context , R . array . user_not_focused_messages , MOST_RECENT_USER_NOT_FOCUSED_MESSAGE_INDEX_KEY ) ; }
private void updateListenersTo ( UdpBroadcastListener listener ) { mListener = listener ; synchronized ( this ) { for ( StaleHostHandler hostHandler : mHostHandlerMap . values ( ) ) { hostHandler . setListener ( listener ) ; } } }
public int hashCode ( ) { return ( errorCorrectionLevel . ordinal ( ) << 3 ) | ( int ) dataMask ; }
public void onConfigure ( SQLiteDatabase db ) { db . execSQL ( "PRAGMA foreign_keys = ON" ) ; db . execSQL ( "PRAGMA secure_delete = ON" ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeIntArray ( this . adapterSavedState ) ; }
public void unregisterFavorite ( LightNovel . . . lightNovels ) { new FavoriteLNsAsyncTask ( lndb , ACTION . UNREGISTER_FAVORITE ) . execute ( lightNovels ) ; }
public static TetroidNode getNode ( String id ) { return getNodeInHierarchy ( Instance . mRootNodesList , id ) ; }
public TypeItem ( final Object data , final int type ) { this . data = data ; this . type = type ; }
public void onClick ( DialogInterface dialog , int which ) { finish ( ) ; }
public AppBarLayout getAppBar ( ) { return mAppBarLayout ; }
public void onClick ( View v ) { toggleFilterAction ( filter ) ; }
public AboutBuilder addSkypeLink ( String phone ) { return addLink ( R . mipmap . skype , R . string . skype , util . openSkype ( phone ) ) ; }
private static void printHelp ( JCommander jCommander ) { jCommander . usage ( SEND . name ( ) ) ; jCommander . usage ( RECEIVE . name ( ) ) ; }
public Day ( Date date ) { this . calendar = DateUtils . getCalendar ( date ) ; this . current = DateUtils . isCurrentDate ( date ) ; this . selected = false ; }
public void shouldReturnCorrectName ( ) throws Exception { String appName = activity . getResources ( ) . getString ( R . string . app_name ) ; assertThat ( appName , equalTo ( "Helsinki Testbed Viewer 2 . 0" ) ) ; }
public void add ( String key , Integer value ) { mTags . put ( key , value ) ; }
public static UserPostListingURL getSubmitted ( String username ) { return new UserPostListingURL ( Type . SUBMITTED , username , null , null , null ) ; }
private static List < ClassGroup > fetchAbnormalClasses ( Realm realm ) { return realm . where ( ClassGroup . class ) . equalTo ( "grade" , 0 ) . and ( ) . equalTo ( "number" , 0 ) . findAll ( ) ; }
public void removePositionUpdateListener ( PositionUpdateListener listener ) { if ( iteratingListeners ) { listenersToRemove . add ( listener ) ; } else { listeners . remove ( listener ) ; } }
public void cancelActiveTranslation ( ) { translations . cancelActiveFilter ( ) ; }
public TeamVisitor getTeamVisitor ( ) { return teamVisitor ; }
public void setTimestampStart ( long timestamp ) { timestamp_start = new UnixTimestamp ( timestamp ) ; return ; }
public void setVoteAverage ( Double voteAverage ) { this . voteAverage = voteAverage ; }
public boolean onPreferenceClick ( Preference preference ) { deleteAllAccounts ( ) ; return true ; }
public void updateList ( ) { setItemListShown ( false ) ; Loader loader = getLoaderManager ( ) . getLoader ( 0 ) ; if ( loader != null && loader . isStarted ( ) ) { loader . forceLoad ( ) ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; timeTableDataBaseHelper . close ( ) ; }
static public BigDecimal getDecimalAmount ( long amount ) { return new BigDecimal ( amount ) . scaleByPowerOfTen ( - 12 ) ; }
public static boolean makeQuranAyahDatabaseDirectory ( Context context ) { return makeQuranDatabaseDirectory ( context ) && makeDirectory ( getQuranAyahDatabaseDirectory ( context ) ) ; }
public Patcher ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { patchFile = patch ; romFile = rom ; outputFile = output ; this . resourceProvider = resourceProvider ; this . fileUtils = fileUtils ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; mPeopleAdapter = new PeopleAdapter ( this , getActivity ( ) , new ArrayList < Person > ( 0 ) ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; inflater . inflate ( R . menu . context , menu ) ; }
public static AsyncHttpClient getAsyncHttpClient ( ) { return mAsyncHttpClient ; }
public void setOutgoing ( Contact contact , int status ) { }
private NotifyErrorRunnable ( Throwable mError ) { this . mError = mError ; }
public Integer getTotalWaived ( ) { return totalWaived ; }
public void onLoaderReset ( Loader < ArrayList < Incident >> loader ) { }
public void onFail ( int errorCode , String msg ) { Log . d ( TAG , String . format ( "Connect failed ( %d ) : %s" , errorCode , msg ) ) ; callback . onFail ( errorCode , msg ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( EventsHomeActivity . this , EventsShowMoreActivity . class ) ) ; overridePendingTransition ( R . anim . slide_up , R . anim . stay ) ; finish ( ) ; }
public void onClick ( View view ) { mClickListener . onGridCellClick ( Integer . parseInt ( value_textView . getText ( ) . toString ( ) ) , view ) ; }
public void before ( ) { Context context = ApplicationProvider . getApplicationContext ( ) ; _securityService = new SecurityService ( context ) ; SecurityService . loadMinisignPublicKey ( UNIT_TEST_PUBLIC_KEY ) ; }
public String getExchangeCurrencyCode ( ) { return getExchangeCurrencyCode ( false ) ; }
public void run ( ) { getMetar ( ICAO ) ; stopRefreshing ( ) ; }
public SmartTexture ( @ NotNull Bitmap bitmap ) { this ( bitmap , NEAREST , CLAMP ) ; }
public static Context onAttach ( Context context ) { final String lang = getPersistedData ( context , Locale . getDefault ( ) . getLanguage ( ) ) ; return setLocale ( context , lang ) ; }
public Object getItem ( int position ) { return mThemes . get ( position ) ; }
public Operator take ( Object operator ) { if ( operator . toString ( ) . equals ( "*" ) ) return this ; return next ( ) ; }
public void setItems ( ArrayList < ServersDataSource . Server > items ) { data = items ; }
public boolean isOnResultMode ( ) { return currentStatus == StatusEnum . ADD_ON_RESULT ; }
public HashMap < Integer , String > getTopMoviePoster ( ) { return topMoviePoster ; }
public DeleteDeck ( long did ) { this . did = did ; }
public List < Object > getCoordinators ( ) { return coordinators ; }
public static void setStartAppAlarm ( @ NonNull Context appContext , int time ) { setStartStopAppAlarm ( appContext , SCHEDULER_WORK_START_APP , time ) ; }
public BasePreferenceData ( Context context , Identifier identifier ) { this . context = context ; this . identifier = identifier ; listener = null ; }
public static String fromOffsetDateTime ( OffsetDateTime dateTime ) { if ( dateTime == null ) { return null ; } else { return dateTime . format ( OFFSET_FORMATTER ) ; } }
public void setLastReview ( int lastReview ) { this . lastReview = lastReview ; }
public void onClick ( View v ) { Intent i = new Intent ( context , DetailActivity . class ) ; i . putExtra ( "NEWS_TITLE" , title ) ; i . putExtra ( "NEWS_URL" , link ) ; context . startActivity ( i ) ; }
public void onBindViewHolder ( ViewHolder viewHolder , int position ) { viewHolder . mOnlineJudgeName . setText ( mOnlineJudges . get ( position ) . getName ( ) ) ; viewHolder . mOnlineJudgeCover . setImageResource ( mOnlineJudges . get ( position ) . getCoverResource ( ) ) ; }
public static synchronized double average ( Class < ? > modelClass , String column ) { return average ( BaseUtility . changeCase ( DBUtility . getTableNameByClassName ( modelClass . getName ( ) ) ) , column ) ; }
public void initMultiSelect ( ) { this . multiSelect = true ; fetchEntities ( ) ; }
private void givenPermissionChecker ( ) { uut . permissionChecker = mPermissionChecker ; }
public void getMedicalHistory ( Token token , Callback callback ) { webServiceGETMethod ( token , callback , "getHistory" ) ; }
public void setRadius ( int radius ) { putInt ( RADIUS , radius ) ; }
public void removeCounter ( int admissionCounterId ) { int recyclerViewPosition = convertCounterIdToPosition ( admissionCounterId ) ; notifyItemRemoved ( recyclerViewPosition ) ; mCounterDb . deleteItem ( admissionCounterId ) ; requery ( ) ; }
public void setMinFrameBeforeComposition ( ) { LottieValueAnimator animator = createAnimator ( ) ; animator . setMinFrame ( 100 ) ; animator . setComposition ( composition ) ; assertEquals ( 100 . 0f , animator . getMinFrame ( ) ) ; }
private static int getTaskbarDisplayID ( ) { LauncherHelper helper = LauncherHelper . getInstance ( ) ; if ( helper . isOnSecondaryHomeScreen ( ) ) return helper . getSecondaryDisplayId ( ) ; else return Display . DEFAULT_DISPLAY ; }
public void run ( ) { Intent i = new Intent ( LogoActivity . this , LogInActivity . class ) ; startActivity ( i ) ; overridePendingTransition ( android . R . anim . fade_in , android . R . anim . fade_out ) ; finish ( ) ; }
public static void init ( final String mySimlarId , final String password , final Date createAccountRequestTimestamp ) { mMySimlarId = mySimlarId ; mPassword = password ; mCreateAccountRequestTimestamp = createAccountRequestTimestamp ; createPasswordHash ( ) ; }
public int compare ( MarketItem o1 , MarketItem o2 ) { return o1 . localized . compareTo ( o2 . localized ) ; }
private void stopEngine ( ) { shuttingDown . set ( true ) ; forceUpdateForeground ( ) ; engine . doStop ( ) ; }
public int getCount ( ) { return 365 ; }
private void pasteClipboard ( ) { String clip = "" ; if ( clipboard . hasText ( ) ) { clip = clipboard . getText ( ) . toString ( ) ; } parent . bridge . injectString ( clip ) ; }
public EighthBlockItem createFromParcel ( Parcel in ) { return new EighthBlockItem ( in ) ; }
private void cacheInstanceMetadata ( @ NotNull AccountEntity activeAccount ) { InstanceEntity instanceEntity = new InstanceEntity ( activeAccount . getDomain ( ) , emojiList , maximumTootCharacters ) ; database . instanceDao ( ) . insertOrReplace ( instanceEntity ) ; }
public RedditPost asPost ( ) throws InstantiationException , IllegalAccessException , InterruptedException , IOException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditPost . class ) ; }
public Observable < Long > saveLocation ( LocationEntity location ) { return createObservableIO ( ( ) -> locationRoomDAO . addLocation ( location ) ) ; }
public TimerUpdater ( ) { super ( PreferenceUtil . getInstance ( getActivity ( ) ) . getNextSleepTimerElapsedRealTime ( ) - SystemClock . elapsedRealtime ( ) , 1000 ) ; }
private void startSmoothPendingScroll ( ) { LinearSmoothScroller scroller = new DiscreteLinearSmoothScroller ( context ) ; scroller . setTargetPosition ( currentPosition ) ; startSmoothScroll ( scroller ) ; }
public static Settings getSharedPrefs ( ) { return DaggerUtils . getComponent ( Collect . getInstance ( ) ) . settingsProvider ( ) . getGeneralSettings ( ) ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable String label , @ Nullable Intent intent ) { return addLink ( icon , label , util . clickIntent ( intent ) ) ; }
public Boolean Func ( ) throws java . lang . Exception { return donneesAuthentificationValides ( codeAccesUniversel , motPasse ) ; }
public NotificationListAdapter ( Context context , List < NotificationInfo > items ) { mInflater = LayoutInflater . from ( context ) ; this . items = items ; }
public void stopStateAnimation ( ) { if ( isAnimatingState ( ) ) { mStateScroller . forceFinished ( ) ; onStateAnimationFinished ( true ) ; } }
public Builder setOnClickListener ( MaterialAboutActionItem . OnClickListener onClickListener ) { this . onClickListener = onClickListener ; return this ; }
public void onCardDeviceClick ( CardDevice cardDevice ) { ( ( OnCardDataSourceClickCallback ) getActivity ( ) ) . onCardDeviceClick ( cardDevice , getArguments ( ) . getInt ( "callback_id" ) ) ; }
private void load ( boolean force ) { thread . run ( ISSA , ( ) -> load ( force , null ) ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'TAURON_G12_BILL'" ; db . execSQL ( sql ) ; }
public void onReadRemoteRssi ( BluetoothGatt gatt , int rssi , int status ) { if ( status == BluetoothGatt . GATT_SUCCESS ) { mUiCallback . uiNewRssiAvailable ( mBluetoothGatt , mBluetoothDevice , rssi ) ; } } ;
public AutoFitGridLayout ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public int hashCode ( ) { return Objects . hash ( internalName ) ; }
public void sendCommand ( Command command ) { new SendCommand ( ) . execute ( command ) ; }
public static int getStandardMargin ( Context context ) { Resources resources = context . getResources ( ) ; int marginStandard = dpFromPx ( context , resources . getDimensionPixelSize ( R . dimen . margin_standard ) ) ; return marginStandard - FIELD_HORIZONTAL_MARGIN_MODIFIER ; }
public AppData ( @ DrawableRes int drawable , String label , Intent intent , ApplicationInfo applicationInfo ) { this . drawable = drawable ; this . label = label ; this . intent = intent ; this . applicationInfo = applicationInfo ; }
public void onClick ( View v ) { hideKeyBoard ( v ) ; onServiceButtonClicked ( ) ; }
private Coordinate2D mapIndexToQPoint ( int idx ) { int temp = idx / 4 ; int row = temp % m_row ; int col = temp / m_row ; return new Coordinate2D ( row , col ) ; }
public void copyToClipboard ( String text ) { ClipData clip = ClipData . newPlainText ( text , text ) ; getClipboard ( ) . setPrimaryClip ( clip ) ; messageShort ( "Copied to clipboard" ) ; }
private void showToast ( final String message , final int offset_y_dp , final boolean use_fake_toast ) { showToast ( null , message , offset_y_dp , use_fake_toast ) ; }
public IStores getStores ( ) { return mRepositoryContext ; }
public void setUserAdmin ( Context context , boolean value ) { if ( ENUM_Boolean . BOOLEAN_USER_ADMIN . value != value ) { ENUM_Boolean . BOOLEAN_USER_ADMIN . value = value ; save ( context ) ; } }
public Integer getSize ( ) { return size ; }
public void onSuccess ( String url ) { ShareUtil . shareViaIntent ( PagerActivity . this , url , R . string . share_ayah ) ; dismissProgressDialog ( ) ; }
public Loader < ArrayList < Song >> onCreateLoader ( int id , Bundle args ) { return new AsyncSongLoader ( getActivity ( ) ) ; }
public Loader < BucketedThreadMediaLoader . BucketedThreadMedia > onCreateLoader ( int i , Bundle bundle ) { return new BucketedThreadMediaLoader ( getContext ( ) , chatId , DcMsg . DC_MSG_FILE , DcMsg . DC_MSG_AUDIO , 0 ) ; }
public void onAnimationCancel ( Object animation ) { if ( runningAnimation != null && runningAnimation . equals ( animation ) ) { runningAnimation = null ; } }
public Player getPlayer ( String playerId ) throws PlayerNotFoundException { for ( Player player : getPlayers ( ) ) { if ( player . getId ( ) . equals ( playerId ) ) { return player ; } } throw new PlayerNotFoundException ( playerId ) ; }
private double kmtoyard ( double num ) { return num * 1093 . 613 ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; a1 = createFirstAccount ( ) ; a2 = createSecondAccount ( ) ; categoriesMap = CategoryBuilder . createDefaultHierarchy ( db ) ; CurrencyCache . initialize ( db . em ( ) ) ; }
public void testGetShift ( ) { assertThat ( planetaryCalendar . getShift ( days ) , is ( shift ) ) ; }
public void onEvent ( Events . WaypointAdded e ) { publishWaypointMessage ( e . getWaypointModel ( ) ) ; if ( e . getWaypointModel ( ) . hasGeofence ( ) ) { removeGeofences ( ) ; setupGeofences ( ) ; } }
private void onInvalidLogin ( ApiException e ) { loginButton . setVisibility ( View . VISIBLE ) ; loginProgress . setVisibility ( View . INVISIBLE ) ; Utils . showSnackBar ( this , getString ( R . string . wronguserpw ) ) ; }
public void onClick ( View v ) { ExportDialog . this . performExportAction ( ) ; }
public void afterTextChanged ( Editable e ) { if ( updateAfterTextChange ) { updateAppsAdapter ( ) ; } }
public Money ( Money money ) { setCurrency ( money . getCurrency ( ) ) ; setAmount ( money . asBigDecimal ( ) ) ; }
public Coin getAmount ( ) { return ( Coin ) parameterMap . get ( FIELD_AMOUNT ) ; }
private void onUploadStatusUpdate ( UploadObject upload ) { int index = findIndexById ( uploads , upload . getId ( ) ) ; if ( index != - 1 ) { callView ( view -> view . notifyUploadItemChanged ( index ) ) ; } }
private String versionError ( String url , ApiException exception ) { return getString ( R . string . version_failed , url + "/version" , exception . code ( ) ) ; }
private ShapePath ( String name , int index , AnimatableShapeValue shapePath ) { this . name = name ; this . index = index ; this . shapePath = shapePath ; }
public String toString ( ) { return value + "/" + subject + "/" + teacher + "/" + date + "/" + description + "/" + save_date ; }
public final AbsListView getListView ( ) { return listView ; }
public List < Long > findCards ( String query , boolean _order ) { return findCards ( query , _order , null ) ; }
public void onSuccess ( ) { mLoginView . updateProgress ( false ) ; mLoginView . registerSuccess ( welcome ) ; }
public ProfileDrawerItem withEmail ( String email ) { this . email = email ; return this ; }
public void testSoundHound ( ) { Lyrics result = idDecoder . doInBackground ( "http : assertNotNull ( result ) ; assertEquals ( "Tycho" , result . getArtist ( ) ) ; assertEquals ( "Melanine" , result . getTrack ( ) ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { }
public void setShowphoto ( Integer showphoto ) { this . showphoto = showphoto ; }
private static < E > Set < E > setFromArray ( E [ ] data ) { final HashSet < E > result = new HashSet < E > ( data . length ) ; Collections . addAll ( result , data ) ; return result ; }
public int getItemCount ( ) { return schedule . getDay ( day ) . length ; }
public void setBotInfo ( HashMap < Integer , TLRPC . BotInfo > info ) { botInfo = info ; }
public void onLogError ( String message ) throws RemoteException { mMessageLog . add ( new IChatMessage . InfoMessage ( IChatMessage . InfoMessage . Type . ERROR , message ) ) ; }
public FlextHelper ( ) { }
public String desc ( ) { return Game . getVar ( R . string . Sungrass_Desc ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromTouch ) { mKpSeekBarValue . setText ( String . format ( "% . 2f" , ( float ) progress / 100 . 0f ) ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( MainActivity . this , Hiv . class ) ) ; }
public void onDashboardClick ( ) { startActivity ( FragmentHandlerActivity . newIntent ( this , FragmentHandlerActivity . DASHBOARD ) ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { clientModel . setColorIcons ( 1 ) ; } else { clientModel . setColorIcons ( 0 ) ; } activity . setColorIcons ( isChecked ) ; clientModel . savePreferences ( activity ) ; }
public long getNumberOfLocations ( ) { return NumberOfLocations ; }
public void exportPersonalKey ( OutputStream out , String exportPassphrase ) throws CertificateException , PGPException , IOException , KeyStoreException , NoSuchAlgorithmException { Authenticator . exportDefaultPersonalKey ( this , out , getCachedPassphrase ( ) , exportPassphrase , true ) ; }
public RealmResults < Link > getAllLinks ( @ FilterMode int filterMode , @ SortMode int sortMode ) { Log . v ( LOG_TAG , "getAllLinks ( ) " ) ; return applyQuerySort ( mRealm . where ( Link . class ) , null , filterMode , sortMode ) ; }
private boolean isResolvable ( Intent intent ) { PackageManager manager = getContext ( ) . getPackageManager ( ) ; List < ResolveInfo > resolveInfo = manager . queryIntentActivities ( intent , 0 ) ; return ! resolveInfo . isEmpty ( ) ; }
public void pickCreateNewWallet ( View view ) { Intent intent = new Intent ( getBaseContext ( ) , CreateWalletFromScratchActivity . class ) ; startActivity ( intent ) ; }
public Note getNoteWithId ( String id ) { for ( Note note : mNoteList ) { if ( note . getId ( ) . equalsIgnoreCase ( id ) ) { return note ; } } return null ; }
public static boolean isLegacyExternalStoragePossible ( @ NonNull Context context ) { return ! ( PackageUtils . getTargetSDKForPackage ( context ) >= Build . VERSION_CODES . R && Build . VERSION . SDK_INT >= Build . VERSION_CODES . R ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsSynccit . class ) ; startActivity ( i ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . updateInterfaces ) ; return true ; }
public Date getReleaseDate ( ) { return releaseDate ; }
public Number getRangeCursorVal ( ) { return getYVal ( getRangeCursorPosition ( ) ) ; }
public void onCommentsAvailable ( ArrayList < CommentModel > comments ) { this . comments = comments ; if ( commentLoadingProgressBar != null ) { commentLoadingProgressBar . setVisibility ( View . GONE ) ; } addAllCommentsToView ( comments ) ; }
public NxtFamilyAddress getReceiveAddress ( boolean isManualAddressManagement ) { return this . address ; }
private final boolean isDigit ( char ch ) { return ch >= 48 && ch <= 57 ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_main_rgb_tab_details , container ) ; unbinder = ButterKnife . bind ( this , view ) ; return view ; }
public void stop ( ) { stopPingTimer ( ) ; if ( mConnection != null && mConnection . isOpen ( ) ) { mConnection . disconnect ( ) ; } }
public void whenKeyNotInPrefs_doesNothing ( ) { initPrefs ( prefs , "otherKey" , "value" ) ; translateValue ( "value" ) . toValue ( "newValue" ) . forKey ( "key" ) . apply ( prefs ) ; assertPrefs ( prefs , "otherKey" , "value" ) ; }
public void clearAnswer ( ) { answerLayout . setVisibility ( GONE ) ; deleteFile ( ) ; widgetValueChanged ( ) ; }
public int getSortOrder ( ) { return mSortOrder ; }
public int getO3 ( ) { return o3 ; }
private void chooseAccount ( ) { startActivityForResult ( credential_ . newChooseAccountIntent ( ) , REQUEST_ACCOUNT_PICKER ) ; }
private void showEventEntryLayout ( ) { Preference preference = findPreference ( ApplicationPreferences . PREF_EVENT_ENTRY_LAYOUT ) ; if ( preference != null ) { preference . setSummary ( ApplicationPreferences . getEventEntryLayout ( getActivity ( ) ) . summaryResId ) ; } }
public static com . coinomi . core . protos . Protos . WalletPocket parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
private void changeInfiniteVibratePrefs ( ) { boolean isChecked = binding . infiniteVibrateOptionPrefs . isChecked ( ) ; binding . infiniteVibrateOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setInfiniteVibrateEnabled ( ! isChecked ) ; }
public AwardListWriter awardListWriter ( Database db ) { return Mockito . mock ( AwardListWriter . class ) ; }
private void notifyColorChange ( int color ) { if ( onColorChangedListener != null ) onColorChangedListener . onColorChanged ( color ) ; }
public Builder title ( String title ) { this . title = title ; this . titleRes = 0 ; return this ; }
public void testIsCacheableFalse ( ) { Request req = new Request . Builder ( ) . url ( Service . WIKIPEDIA_URL ) . build ( ) ; assertThat ( OfflineCacheInterceptor . isCacheableForOffline ( req ) , is ( false ) ) ; }
public RequestQueue getRequestQueue ( ) { if ( mRequestQueue == null ) { mRequestQueue = Volley . newRequestQueue ( mContext . getApplicationContext ( ) ) ; } return mRequestQueue ; }
public static void w ( String msg ) { if ( BaseConstant . IS_SHOWLOG ) { Log . w ( BaseConstant . LOG_TAG , msg + "\n" ) ; } }
public int getItemCount ( ) { return lande . size ( ) ; }
public OkDialog clickGetSelected ( ) { onView ( withText ( getTranslatedString ( R . string . download ) ) ) . perform ( click ( ) ) ; return new OkDialog ( ) . assertOnPage ( ) ; }
public void setUp ( ) throws Exception { testList = new ArrayList <> ( ) ; }
public EventTeamWriter eventTeamWriter ( Database db ) { return Mockito . mock ( EventTeamWriter . class ) ; }
public CustomUrlRequest ( String logUrl , String httpMethod ) { this ( logUrl , httpMethod , "" , "" ) ; }
public int getColorResId ( ) { return mColorResId ; }
public CalendarDBHelper ( Context context , String name , SQLiteDatabase . CursorFactory factory , int version ) { super ( context , name , null , version ) ; }
private void failIntent ( final IntentContextData intentContextData ) { failIntent ( intentContextData . requestCode , intentContextData . callOnFailure ) ; }
public void onEvent ( PlaceDetailsResponse result ) { progressView . hide ( ) ; placeResponse = result ; updateUi ( ) ; }
public String name ( ) { return Game . getVar ( R . string . StoneBloodBuff_Name ) ; }
public void onClick ( final View v ) { onProfileClick ( v , true ) ; }
public static void setIntensity ( int value , Context context ) { run ( Control . write ( String . valueOf ( value ) , LED_RED_INTENSITY ) , LED_RED_INTENSITY , context ) ; }
public LiveData < List < OrderProduct >> getOrders ( ) { return orderProductLive ; }
public void onCaptureClick ( ) { if ( mIsRecordingVideo ) { startViolationRecording ( ) ; } }
public int getItemCount ( ) { return rideRows . size ( ) ; }
public String getDatabaseName ( ) { return mDatabaseName ; }
private void initiateFinishBtn ( ) { Button finishBtn = ( Button ) findViewById ( R . id . finish_btn ) ; finishBtn . setOnClickListener ( v -> { saveConfiguration ( ) ; finish ( ) ; } ) ; }
public void onClick ( View view ) { setNotGate ( ) ; }
public void refreshAdapter ( ) { allEmails = ( ArrayList < EmailMessage > ) EmailMessage . getAllMailsOfUser ( currentUser ) ; Collections . reverse ( allEmails ) ; mailAdapter . setEmails ( allEmails ) ; mailAdapter . notifyDataSetChanged ( ) ; }
public PhotoSizes setY ( String y ) { this . y = y ; return this ; }
public void setIsAttendee ( String isAttendee ) { this . isAttendee = isAttendee ; }
public AboutBuilder setCover ( @ NonNull BitmapDrawable cover ) { return setCover ( IconUtil . getBitmap ( cover ) ) ; }
public void cancelUpdateBatchInputTimer ( @ NonNull final PointerTracker tracker ) { removeMessages ( MSG_UPDATE_BATCH_INPUT , tracker ) ; }
public Number getXVal ( PointF point ) { return getGraphWidget ( ) . getXVal ( point ) ; }
public void init ( MainActivity mainActivity , OWDevice mOWDevice ) { Timber . d ( "init" ) ; this . mainActivity = mainActivity ; this . owDevice = mOWDevice ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; Picasso . get ( ) . cancelRequest ( mPhotoView ) ; }
public void whenPermissionIsNotGranted_requestGeoTrace_doesNotLaunchAnyIntent ( ) { permissionsProvider . setPermissionGranted ( false ) ; activityGeoDataRequester . requestGeoTrace ( testActivity , prompt , "" , waitingForDataRegistry ) ; assertNull ( shadowActivity . getNextStartedActivity ( ) ) ; assertTrue ( waitingForDataRegistry . waiting . isEmpty ( ) ) ; }
private void triggerLongTouchEvent ( ) { stopTriggeredLongTouchEvent ( ) ; mHandler . postDelayed ( mLongTouchTask , 500 ) ; }
public void run ( ) { for ( BaseStationEvent e : onEvents ) { e . onStatus ( ArduinoComm . this , stat ) ; } }
private boolean typeAnswer ( ) { return mShowTypeAnswerField && null != mTypeCorrect ; }
public int getAppComponent ( ) { return appComponent ; }
public RequestsRecycler ( FragmentActivity context , RequestsPresenter requestsPresenter ) { super ( context , true ) ; setupDataSet ( ) ; mRequestsPresenter = requestsPresenter ; }
public OtpInfo ( byte [ ] secret ) throws OtpInfoException { this ( secret , "SHA1" , 6 ) ; }
public Instruction parse ( StreamTokenizer tokenizer , DimensionParser dimParser ) throws IOException { Array < Instruction > lst = mLoader . tokenize ( tokenizer , "end" , dimParser ) ; return new ParallelInstruction ( lst ) ; }
public RequiredDataMissingException ( String message , Throwable caused ) { super ( message , caused ) ; }
public synchronized LottieTask < T > removeListener ( LottieListener < T > listener ) { successListeners . remove ( listener ) ; stopTaskObserverIfNeeded ( ) ; return this ; }
public static String [ ] getPadgroupFieldsList ( ) { return new String [ ] { _ID , NAME , LAST_USED_DATE , CREATE_DATE , ACCESS_COUNT } ; }
public ProductsListView ( Context context , ProductListViewObserver observer ) { super ( R . layout . view_category_products , observer , new ViewContainer ( ) ) ; this . adapter = new ProductAvailableAdapter ( context ) ; }
private CalendarEntry ( ) { super ( 30 ) ; }
private BroadcastReceiver mVoipDisabledReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { updateAndPopulate ( ) ; } } ;
public int getVerseRepeatCount ( ) { return mRepeatInfo . getRepeatCount ( ) ; }
public boolean finiteTimeout ( ) { return timeout >= 0 && countCommands ( ) < 2 ; }
public void run ( ) { if ( totalBytesCount != 0 && downloadedBytes == totalBytesCount ) { try { onFinishLoadingFile ( ) ; } catch ( Exception e ) { onFail ( true , 0 ) ; } } else { startDownloadRequest ( ) ; } }
public void resumeSmAck ( ) throws NotConnectedException , StreamManagementNotEnabledException { synchronized ( clientHandledStanzasCountLock ) { if ( smAckSuspend ) { smAckSuspend = false ; if ( ackPending ) { sendSmAcknowledgement ( ) ; ackPending = false ; } } } }
public void afterTextChanged ( Editable s ) { parMButton . setEnabled ( s . length ( ) > 0 ) ; }
private void hideWarning ( ) { warningText . setVisibility ( View . GONE ) ; }
public void enableSuggestions ( ) { if ( suggestionsManager != null ) suggestionsManager . show ( ) ; }
public void handleDbLocked ( ) { Timber . i ( "Displaying Database Locked" ) ; showDatabaseErrorDialog ( DatabaseErrorDialog . DIALOG_LOAD_FAILED ) ; }
public void whenPermissionIsNotGranted_requestGeoShape_doesNotLaunchAnyIntent ( ) { permissionsProvider . setPermissionGranted ( false ) ; activityGeoDataRequester . requestGeoShape ( testActivity , prompt , "" , waitingForDataRegistry ) ; assertNull ( shadowActivity . getNextStartedActivity ( ) ) ; assertTrue ( waitingForDataRegistry . waiting . isEmpty ( ) ) ; }
public void onPageFinished ( WebView view , String url ) { findViewById ( R . id . progress ) . setVisibility ( View . GONE ) ; mWebView . setVisibility ( View . VISIBLE ) ; }
public void onClick ( DialogInterface dialog , int which ) { manager . delete ( database ) ; active . removeDatabase ( database ) ; update ( ) ; }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable String label , @ Nullable Intent intent ) { return addLink ( icon , label , util . clickIntent ( intent ) ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidence getConfidence ( ) { return confidence_ ; }
public void accept ( Throwable throwable ) throws Exception { if ( view != null ) { view . showError ( "Error loading card" ) ; } }
public void sendMessageToNearbyNodes ( final String path , final String data ) throws Exception { sendMessageToNearbyNodes ( path , data . getBytes ( DEFAULT_CHARSET ) ) ; }
public void setSingleLine ( boolean isSingleLine ) { if ( isSingleLine ) { view . setOrientation ( LinearLayout . HORIZONTAL ) ; } else { view . setOrientation ( LinearLayout . VERTICAL ) ; } }
public void onClick ( View view ) { Setup . appSettings ( ) . setSearchUseGrid ( ! Setup . appSettings ( ) . isSearchUseGrid ( ) ) ; updateSwitchIcon ( ) ; updateRecyclerViewLayoutManager ( ) ; }
private void replaceFragment ( Fragment fragment ) { if ( fragment != null ) { FragmentTransaction transaction = getSupportFragmentManager ( ) . beginTransaction ( ) ; transaction . replace ( R . id . welcome_content , fragment ) . commit ( ) ; } }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . contactsImported ) { fetchContacts ( ) ; } }
public String getSchemaVersion ( ) { return schemaVersion ; }
public static ListAdapter createPayeeAdapter ( Context context , List < Payee > payees ) { return new MyEntityAdapter < Payee > ( context , android . R . layout . simple_spinner_dropdown_item , android . R . id . text1 , payees ) ; }
public void activateService ( ) { Intent intent = VpnService . prepare ( OpenDnsUpdater . getInstance ( ) ) ; if ( intent != null ) { startActivityForResult ( intent , 3 ) ; } else { onActivityResult ( 3 , Activity . RESULT_OK , null ) ; } }
public void onGetFileAudio ( final List < String > fileAudioPaths ) { new Thread ( ) { @ Override public void run ( ) { threadWorkerCreateAllLocalMusic ( fileAudioPaths ) ; } } . start ( ) ; }
private int getAdditionX ( ) { if ( currentEditMode != 0 ) { return AndroidUtilities . dp ( 14 ) ; } return 0 ; }
public void update ( ) { super . update ( ) ; left -= Game . elapsed ; if ( left <= 0 ) { kill ( ) ; } else { float p = 1 - left / lifespan ; updateByEvolutionType ( p ) ; } }
public void onFailure ( Call < Expertises > call , Throwable t ) { callBack . message ( t . getMessage ( ) ) ; }
public LocationExtended getCurrentLocationExtended ( ) { return _currentLocationExtended ; }
public void cancelLongPressTimersOf ( @ NonNull final PointerTracker tracker ) { removeMessages ( MSG_LONGPRESS_KEY , tracker ) ; removeMessages ( MSG_LONGPRESS_SHIFT_KEY , tracker ) ; }
public void drawList ( ) { this . adapter = new ArrayAdapter <> ( this , R . layout . history_list_item , SharedResources . getCalculationsHistory ( ) ) ; this . list . setAdapter ( this . adapter ) ; }
public boolean isShowNotification ( ) { return showNotification ; }
public Timer ( GameManager gm ) { timerHandler = new TimerHandler ( gm ) ; }
public ThemeListPreference ( final Context context , final AttributeSet attrs ) { super ( context , attrs ) ; }
public boolean isChecked ( ) { return Settings . useErrorReport ( ) ; }
public Observable < ApiResult > getBuses ( String lineNo ) { return apiClient . getBuses ( API_KEY , lineNo ) ; }
public void onSuccess ( BatteryInfo batteryInfo ) { Log . d ( "SWELL" , "Battery : " + batteryInfo . toString ( ) ) ; }
public static String fromOpenWeatherDataCoords ( OpenWeatherDataCoords weatherForWeek ) { Gson gson = new Gson ( ) ; return gson . toJson ( weatherForWeek ) ; }
public void addPoint ( MapPoint point ) { if ( map == null ) { return ; } markers . add ( createMarker ( map , point , true ) ) ; update ( ) ; }
public void setDedication ( RealmDate dedication ) { this . dedication = dedication ; }
public int getItemCount ( ) { return mTopValidators . size ( ) ; }
public static void signInError ( Throwable t ) { Bundle params = new Bundle ( ) ; params . putString ( EVENT_LOG_API_ERROR_BODY , t . getMessage ( ) ) ; firebaseAnalytics . logEvent ( "sign_in_error" , params ) ; }
public KeyCrypter getKeyCrypter ( ) { return basicKeyChain . getKeyCrypter ( ) ; }
public float getDue ( ) { return due ; }
public void onResume ( ) { super . onResume ( ) ; mGoogleApiClient . connect ( ) ; }
private BitmapCache ( ) { mCache = new LruCache < String , Bitmap > ( mCacheSize ) { @ Override protected int sizeOf ( String key , Bitmap bitmap ) { return bitmap . getByteCount ( ) / 1024 ; } } ; }
public void unregister ( Listener listener ) { this . listener = null ; }
private void continueOnBackPressed ( ) { ( ( GeneralPreferencesActivity ) getActivity ( ) ) . setOnBackPressedListener ( null ) ; getActivity ( ) . onBackPressed ( ) ; }
public void setAsn ( Integer asn ) { this . asn = asn ; }
public void onClick ( View v ) { mOnGoToFragmentListener . onGoToFragment ( TransitionType . ZOOM_OUT , 1 ) ; }
public void onAccuracyChanged ( Sensor sensor , int i ) { currentAccuracy = i ; }
public void startActivityForResultWithAnimation ( Intent intent , int requestCode , int animation ) { enableIntentAnimation ( intent ) ; startActivityForResult ( intent , requestCode ) ; enableActivityAnimation ( animation ) ; }
public T withIcon ( int iconRes ) { this . icon = new ImageHolder ( iconRes ) ; return ( T ) this ; }
private static File getStartPageFile ( @ NonNull Application application ) { return new File ( application . getFilesDir ( ) , FILENAME ) ; }
public BigDecimal [ ] [ ] getPrice ( ) { return Price ; }
public void setDateLiked ( String dateStr ) { this . dateLiked = StringUtils . notNullStr ( dateStr ) ; }
public Editor putBoolean ( final String key , final boolean value ) { newValuesMap . put ( key , value ) ; return this ; }
private boolean handleSelectTask ( BaseTask task ) { m_currentSelectedTask = task ; invalidateOptionsMenu ( ) ; return m_taskRankListAdapter . setCurrSelectedTask ( task ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { return mValues . get ( oldItemPosition ) . getId ( ) == skillList . get ( newItemPosition ) . getId ( ) ; }
public Observable < EmptyResponse > request ( long songId ) { return controlService . request ( songId ) ; }
public IBinder onBind ( Intent intent ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) { mMediaSession = new MediaSession ( getApplicationContext ( ) , "squeezer" ) ; } return ( IBinder ) squeezeService ; }
public void clearOnItemLaunchedListener ( ) { onItemLaunchedListener = null ; }
public boolean onDown ( MotionEvent event ) { return false ; }
public boolean onInterceptTouchEvent ( MotionEvent ev ) { switch ( ev . getAction ( ) ) { case MotionEvent . ACTION_UP : case MotionEvent . ACTION_CANCEL : case MotionEvent . ACTION_POINTER_UP : return false ; default : return isGuestureEnabled && super . onInterceptTouchEvent ( ev ) ; } }
public static String formatQuote ( String quote ) { return removeQuote ( replaceCode ( quote ) ) ; }
public void goToPostComments ( int accountId , int postId , int ownerId ) { Commented commented = new Commented ( postId , ownerId , CommentedType . POST , null ) ; PlaceFactory . getCommentsPlace ( accountId , commented , null ) . tryOpenWith ( getActivity ( ) ) ; }
public static String logOperErrorMore ( Context context , Objs obj , Opers oper , int length ) { return logOperError ( context , obj , oper , null , true , length ) ; }
public void showFab ( ) { if ( fab != null && fabAllowed && fabHidden ) { animateFab ( 0 , View . VISIBLE , View . VISIBLE ) ; fabHidden = false ; } }
private void createTotalGroup ( StudentCredit studentCredit ) { total_group = new CreditGroupView ( getActivity ( ) ) ; total_group . setGroupTitle ( getString ( R . string . overview_credit ) ) ; refreshTotal ( ) ; credit . addView ( total_group ) ; }
public final void setEndDate ( final String parEndDate ) { mEndDate = parEndDate ; }
private void selectTimeLapseReset ( ) { editEventHelper . selectTimeLapseReset ( getSupportFragmentManager ( ) ) ; }
private void displayWarning ( int pWarning ) { warningText . setText ( getResources ( ) . getString ( pWarning ) ) ; warningText . setVisibility ( View . VISIBLE ) ; }
public int getVideoMaxSize ( ) { return 100 * MB ; }
public int getMovementFlags ( RecyclerView recyclerView , RecyclerView . ViewHolder viewHolder ) { int dragFlags = ItemTouchHelper . UP | ItemTouchHelper . DOWN ; return makeMovementFlags ( dragFlags , 0 ) ; }
private static String getString ( Cursor cursor , int index ) { return cursor . isNull ( index ) ? null : cursor . getString ( index ) ; }
public void onShutter ( ) { if ( mDelegate != null ) { mDelegate . onShutter ( ) ; } }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_guide , container , false ) ; }
public void showEmptyInfo ( ) { mRecyclerView . setVisibility ( View . GONE ) ; mEmptyInfoTextView . setVisibility ( View . VISIBLE ) ; }
public void setCurrent ( Displayable disp ) { current = disp ; ViewHandler . postEvent ( msgSetCurrent ) ; }
public SelectUnitViewHolder provideVolumeHolder ( UnitsViewHolder unitsViewHolder ) { return new SelectUnitViewHolder ( unitsViewHolder . getVolume ( ) ) ; }
public ServerSettingsPage assertOnPage ( ) { checkIsStringDisplayed ( R . string . server_preferences ) ; return this ; }
private void notifyItemPinnedDialogDismissed ( boolean ok ) { final int position = getArguments ( ) . getInt ( KEY_ITEM_POSITION ) ; ( ( MainActivity ) getActivity ( ) ) . onNotifyItemPinnedDialogDismissed ( position , ok ) ; }
public OwnerPhotoUploadable ( Context context , INetworker networker , IWalls walls ) { this . context = context ; this . networker = networker ; this . walls = walls ; }
public void onSuccess ( GetFilteredNews . ResponseValue response ) { mNewsListView . showNews ( response . getNewsItemFilteredList ( ) ) ; mNewsListView . hideProgress ( ) ; checkForErrors ( response . getNewsItemFilteredList ( ) ) ; updateIfNeeded ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getSupportMenuInflater ( ) . inflate ( R . menu . activity_category_lookup , menu ) ; return true ; }
private void onDeleteItem ( int position ) { mDataManager . remove ( position ) ; mDataManager . commit ( ) ; mAdapter . notifyDataSetChanged ( ) ; }
private void getDiscussionsFromDatabase ( ) { mDiscussions = new Select ( ) . from ( MoodleDiscussion . class ) . where ( "forumid = ?" , mForumId ) . execute ( ) ; }
public void notifyFail ( ) { Toast . makeText ( getApplicationContext ( ) , "Retrieving thread failed - Network error?" , Toast . LENGTH_LONG ) . show ( ) ; finish ( ) ; }
public final void setCardViewEnabled ( boolean cardViewEnabled ) { this . mCardViewEnabled = cardViewEnabled ; }
public static void close ( Closeable closeable ) { if ( closeable == null ) return ; try { closeable . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public void onAttach ( Context context ) { Log . i ( TAG , "onAttach ( Context ) " ) ; super . onAttach ( context ) ; in_update_data = false ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mTeams ) ; }
public void render ( ) { String utilizedText = getString ( dashboardType == DashboardType . PHYSICAL ? R . string . most_utilized_hosts : R . string . most_utilized_vms ) ; mostUtilizedText . setText ( utilizedText ) ; switchLoader ( ) ; }
public DeviceAdapter ( ArrayList < BluetoothDevice > deviceList ) { mDeviceList = deviceList ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . TAN_INVERSE ) ; }
private ThreadRecord getThreadRecord ( @ NonNull Cursor cursor ) { return threadDatabase . readerFor ( cursor , masterCipher ) . getCurrent ( ) ; }
public Binder < ImageEmbedView > createBinder ( TagEntry model ) { return new ImageEmbedBinder ( model ) ; }
public void loadChatInfo ( final int chat_id , Semaphore semaphore , boolean force ) { MessagesStorage . getInstance ( ) . loadChatInfo ( chat_id , semaphore , force ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( headline ) ; dest . writeString ( imgUrl ) ; }
public void onCompletion ( MediaPlayer mp ) { onHideCustomView ( ) ; }
public void onNothingSelected ( AdapterView < ? > parent ) { createDinnerBarChart ( ) ; }
public void onResume ( ) { super . onResume ( ) ; mPresenter . start ( ) ; MessagingServiceUtil . setMessagingServiceListener ( "Profile" , this ) ; }
public String getData ( ) { return data ; }
public GeometryBuffer translate ( float dx , float dy ) { for ( int i = 0 ; i < pointPos ; i += 2 ) { points [ i ] += dx ; points [ i + 1 ] += dy ; } return this ; }
public void onClick ( final View v ) { deleteMagicCreatedAccountAndReturnIfNecessary ( ) ; finish ( ) ; }
public void onError ( ) { Toast . makeText ( getActivity ( ) , R . string . image_load_fail , Toast . LENGTH_LONG ) . show ( ) ; }
public EighthActivityBuilder restricted ( boolean restricted ) { this . restricted = restricted ; return this ; }
public boolean getAll ( ) { return all ; }
public static DataSource provideRemoteSource ( @ NonNull Context context ) { return new FakeRemoteDataSource ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; compositeDisposable . dispose ( ) ; locationProvider . stopLocationUpdates ( locationCallback ) ; }
public JSONArray getJSONArray ( String name ) { try { return JSONArray . arrayToArray ( super . getJSONArray ( name ) ) ; } catch ( org . json . JSONException e ) { throw new RuntimeException ( e ) ; } }
public Object getCacheKey ( ) { return comment ; }
public Point clone ( ) { return new Point ( 0 , this . east , this . north , this . altitude , this . basePoint , false ) ; }
public OverviewViewModel ( TransactionRepository repository ) { this . repository = repository ; this . setPeriod ( 0 ) ; transactions = repository . loadRecentTransactions ( ) ; periodicByCurrency = repository . getExpensesInPeriod ( period ) ; }
public void onAttach ( @ NotNull Context context ) { super . onAttach ( context ) ; DaggerUtils . getComponent ( context ) . inject ( this ) ; ( ( GeneralPreferencesActivity ) context ) . setOnBackPressedListener ( this ) ; }
private BroadcastReceiver finishReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { reallyFinish ( ) ; } } ;
public void setAmountFormattingListener ( EditText amoutView , TextView currencyTextView ) { setOnCheckedChangeListener ( new OnTypeChangedListener ( amoutView , currencyTextView ) ) ; }
public void setArguments ( Bundle arg ) { trophyName = arg . getString ( "trophyName" ) ; icon = arg . getInt ( "icon" ) ; trophyDescription = arg . getString ( "trophyDescribtion" ) ; }
public String getAttachmentId ( ) { return attachmentId ; }
public void onDestroy ( ) { Log . d ( TAG , "onDestroy" ) ; if ( mNotificationDownloadImages != null ) { if ( maxCount == 0 ) mNotificationManager . cancel ( NOTIFICATION_ID ) ; } super . onDestroy ( ) ; }
private void showImportDialog ( ) { ImportDialog dialog = new ImportDialog ( ) ; dialog . show ( this . getSupportFragmentManager ( ) , "ImportDialogFragment" ) ; }
private void setEvents ( List < Event > events ) { this . events = checkNotNull ( events ) ; }
public static void startFullscreenMap ( Context context , Pass pass ) { }
public void execute ( @ NotNull Char chr , @ NotNull String action ) { super . execute ( chr , action ) ; script . run ( "execute" , chr , action ) ; }
public void onDeleteLeftChar ( ) { runOp ( mCommandEditor . deleteLeftChars ( 1 ) ) ; }
public void onEnter ( @ NonNull Action action , @ NonNull PointF location ) { dragHandler . post ( runnable ) ; rightDragHandle . animate ( ) . alpha ( 0 . 9f ) ; }
private static final Migration MIGRATION_1_2 = new Migration ( 1 , 2 ) { @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) { } } ;
public void onClick ( View v ) { userActionsListener . play ( ) ; }
public DataListPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public String getAuthor ( ) { return ( isCrypted && isDecrypted ) ? decryptedAuthor : author ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . onlinejudge_list_item , parent , false ) ; return new ViewHolder ( v ) ; }
private void assertAxis ( Pivot pivot , @ Pivot . Axis int axis ) { if ( pivot . getAxis ( ) != axis ) { throw new IllegalArgumentException ( "You passed a Pivot with wrong axis . " ) ; } }
private void loadContactsFromCsv ( ) throws IOException { InputStream csvStream = mAssetManager . open ( Constants . CONTACT_CSV_ASSET_PATH ) ; List < String [ ] > csvRows = CsvUtil . getRowsFromStream ( csvStream ) ; mContactRows = ContactCsvRowsParserUtil . createContactRowsFromCsvRows ( csvRows ) ; }
public void onClick ( View v ) { mCallback2 . onQueueSave ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = ActivityDebateBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
public void onClick ( View v ) { onFabItemClickedListener . OnFabItemClick ( v . getId ( ) ) ; }
private void reminderSchedule ( Event event ) { if ( event . hasReminder ( ) ) { eventRemindersManager . scheduleReminder ( event , true , false ) ; } }
public static ProjectsDoingFragment newInstance ( ) { return new ProjectsDoingFragment ( ) ; }
public void finishCurrentGame ( ) { openStatsActivity ( ) ; }
public void die ( NamedEntityKind cause ) { super . die ( cause ) ; Badges . validateBossSlain ( Badges . Badge . BOSS_SLAIN_3 ) ; yell ( StringsManager . getVar ( R . string . DM300_Info2 ) ) ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return OstWorkflowContext . WORKFLOW_TYPE . REGISTER_DEVICE ; }
public void onPause ( ) { super . onPause ( ) ; Log . d ( TAG , "onPause called" ) ; if ( forcedOrientation && bound != null ) bound . setResizeAllowed ( false ) ; }
public LocationRecord createFromParcel ( Parcel in ) { return new LocationRecord ( in ) ; }
public void onClick ( ViewHolder viewHolder ) { StopViewHolder stopViewHolder = ( StopViewHolder ) viewHolder ; observer . onStopSelected ( stopViewHolder . getStop ( ) ) ; }
public ArrayList < String > getFilterKeys ( String key ) { ArrayList < String > arr = mapFilters . get ( key ) ; if ( arr != null ) { return new ArrayList < String > ( arr ) ; } return null ; }
public boolean eof ( ) { return ch == 0 ; }
public OfxExporter ( ExportParams params ) { super ( params , null ) ; }
public void onItem ( @ Nullable File item ) { Preconditions . checkNonNull ( item ) ; settings . setAppCachePath ( item . getPath ( ) ) ; }
private double sqfootTosqfoot ( double num ) { return num * 1 ; }
public void openAttachmentsManager ( int accountId , Integer draftCommentId , int sourceOwnerId , String draftCommentBody ) { PlaceFactory . getCommentCreatePlace ( accountId , draftCommentId , sourceOwnerId , draftCommentBody ) . targetTo ( this , REQUEST_CODE_ATTACHMENTS ) . tryOpenWith ( getActivity ( ) ) ; }
private void onToggleAddresses ( TupleMessageEx message ) { boolean addresses = ! properties . getValue ( "addresses" , message . id ) ; properties . setValue ( "addresses" , message . id , addresses ) ; bindExpanded ( message ) ; }
public static void setWorkingFolder ( Context context , String value ) { getEditor ( context ) . putString ( "working_folder" , value ) . commit ( ) ; }
public PostCommentListingURL context ( Integer context ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
private static String sqlSelectAllSettings ( ) { return "SELECT * FROM " + SETTINGS_TABLE_NAME + " " ; }
public void insertAll ( List < Tag > entities ) { cacheSource . insertAll ( entities ) ; }
public String getSaveLocation ( ) { return SaveLocation ; }
public SawVoice ( ) { mOscillator = createOscillator ( ) ; mEnvelope = new EnvelopeADSR ( ) ; }
private void setErrPwNone ( ) { mTvPwNone . setVisibility ( View . VISIBLE ) ; mTvPwMatch . setVisibility ( View . GONE ) ; }
public void set ( State other ) { x = other . x ; y = other . y ; zoom = other . zoom ; rotation = other . rotation ; matrix . set ( other . matrix ) ; }
public void addValidation ( TextInputLayout textInputLayout , String regex , String errMsg ) { mValidator . set ( textInputLayout , regex , errMsg ) ; }
public void setPhotoChecked ( int index ) { }
public void onClick ( DialogInterface dialog , int which ) { super . onClick ( dialog , which ) ; listView = null ; captionView = null ; if ( getDialog ( ) != null ) { getDialog ( ) . dismiss ( ) ; } }
public void post201802 ( ) { assertTrue ( isInRange ( getHeight ( "2018 - 02 - 19" ) , 1507579 , 1511127 ) ) ; }
public float getStart ( ) { return mStartValue ; }
public void saveRecord ( RecordStoreImpl recordStoreImpl , int recordId ) throws RecordStoreNotOpenException , RecordStoreException { saveToDisk ( recordStoreImpl , recordId ) ; }
private void scroll ( ) { mScrollCounter ++ ; mScreen . scroll ( mTopMargin , mBottomMargin ) ; }
public void i ( String tag , String message , Object . . . args ) { log ( android . util . Log . INFO , tag , message , args ) ; }
public void setRecyclerViewBinderMapper ( RecyclerViewBinderMapper mapper ) { mMapper = mapper ; }
public boolean onKey ( View view , int i , KeyEvent keyEvent ) { if ( i == KeyEvent . KEYCODE_ENTER ) { btnSearch . callOnClick ( ) ; } return false ; }
public Observable < Response > getAllChargesV3 ( int loanId ) { return mBaseApiManager . getChargeApi ( ) . getAllChargev3 ( loanId ) ; }
private void handleRefreshError ( Throwable e ) { mbRequestOngoing = false ; if ( NetworkUtils . isUnauthorized ( e ) ) { login ( ) ; } else { mListener . onUnrecoverableFailure ( ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_highScores . TLdeserialize ( stream , constructor , exception ) ; }
public void onBackPressed ( ) { if ( mSlidingPanelLayout . getPanelState ( ) == PanelState . EXPANDED ) { mSlidingPanelLayout . setPanelState ( PanelState . COLLAPSED ) ; } else { super . onBackPressed ( ) ; } }
public SendDebugLogPreference ( Context context ) { super ( context ) ; init ( ) ; }
public void onCompleted ( ) { AppLog . i ( AppLog . T . READER , "reader service > all tasks completed" ) ; stopSelf ( ) ; }
public Single < Post > getEditingPost ( int accountId , int ownerId , int type , boolean withAttachments ) { return repositories . wall ( ) . getEditingPost ( accountId , ownerId , type , withAttachments ) . compose ( dbo2model ( accountId ) ) ; }
public void menuActiviated ( ) { relativeLayout = ( RelativeLayout ) findViewById ( R . id . widgetCircle ) ; relativeLayout . removeAllViews ( ) ; finish ( ) ; }
public ContentListItem removeItem ( int position ) { final ContentListItem model = list_items . remove ( position ) ; notifyItemRemoved ( position ) ; return model ; }
public void run ( ) { Intent mainIntent = new Intent ( SplashActivity . this , MainActivity . class ) ; SplashActivity . this . startActivity ( mainIntent ) ; SplashActivity . this . finish ( ) ; }
public void onClick ( View v ) { mCallback4 . newPlaylistListener ( ) ; }
public void onClick ( String selected_option ) { switchToWhiteBalance ( selected_option ) ; }
public CoverBitmapLoader ( Context context , CoverBitmapReceiver listener ) { mContext = context . getApplicationContext ( ) ; mListener = listener ; }
public void seek ( long position ) { startedPacket = false ; reader . seek ( ) ; }
public String getManufacturer ( ) { return manufacturer ; } ;
public void onClick ( DialogInterface dialogInterface , int i ) { cleanCurrentSave ( ) ; InterventionActivity . super . onBackPressed ( ) ; }
private void handleUri ( Uri uri ) { handleUri ( uri , false ) ; }
public Element getJingleElement ( ) { return jingleElement ; }
public void setDraggingItemShadowDrawable ( NinePatchDrawable drawable ) { mShadowDrawable = drawable ; }
public void send ( Object o ) { _bus . onNext ( o ) ; }
public void onPause ( ) { super . onPause ( ) ; this . yearsAdapter . getCursor ( ) . close ( ) ; }
public void showFoundWords ( ) { synch . abort ( ) ; saveGamePersistent ( ) ; Intent scoreIntent = createScoreIntent ( ) ; scoreIntent . addFlags ( ScoreActivity . ONLY_FOUND_WORDS ) ; startActivity ( scoreIntent ) ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . setupView ( brokenPeers . get ( position ) ) ; }
private static int getContentID ( Submission submission ) { return getContentID ( getContentType ( submission . getUrl ( ) ) , submission . isNsfw ( ) ) ; }
public static synchronized BLEServer getInstance ( ) { if ( singleton == null ) singleton = new BLEServer ( ) ; return singleton ; }
public MifosGroupReusableViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
public void onBindViewHolder ( @ NonNull final DataHolder holder , final int position ) { final EncryptionData file = encryptionDataList . get ( position ) ; holder . bindData ( file ) ; }
public Object instantiateItem ( ViewGroup container , int pos ) { ViewGroup layout = pages . get ( pos ) ; container . addView ( layout ) ; return layout ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { mUrl = null ; mShouldAutoStart = null ; FlyveLog . log ( this , "InventoryAgentApp = " + this . toString ( ) , Log . VERBOSE ) ; }
public String getTrackName ( ) throws RemoteException { return mService . get ( ) . getTrackName ( ) ; }
public static boolean isEnableLogProvider ( Context context ) { return SettingUtils . isEnableLogProvider ( context ) ; }
private void thenDegShouldBe ( double expected ) { assertEquals ( expected , mForecastData . getDeg ( ) , 0 . 1 ) ; }
public void loop ( boolean loop ) { rootLayer . loop ( loop ) ; }
public ClockView ( Context context ) { super ( context ) ; initView ( context , null , 0 ) ; }
public boolean isAnimatingFling ( ) { return ! mFlingScroller . isFinished ( ) ; }
public String removeTitleFromText ( String text , String title ) { return text ; }
public AbstractDraggableSwipeableItemViewHolder ( View itemView ) { super ( itemView ) ; }
public void rejectedExecution ( Runnable runnable , ThreadPoolExecutor threadPoolExecutor ) { tracer . warn ( SessionLogcatAppender . MARKER_INTERNAL , "Could not queue task , some points may not be logged . " ) ; }
private Source getJetpackConnectSource ( ) { String value = ( mUri != null && mUri . getQueryParameterNames ( ) != null && mUri . getQueryParameter ( PARAMETER_SOURCE ) != null ) ? mUri . getQueryParameter ( PARAMETER_SOURCE ) : "" ; return Source . fromString ( value ) ; }
public void updateData ( List < CollectionDetailsPojo > data ) { if ( this . data . containsAll ( data ) ) { this . data . addAll ( data ) ; notifyDataSetChanged ( ) ; } }
public Loader < ArrayList < Genre >> onCreateLoader ( int id , Bundle args ) { return new GenresFragment . AsyncGenreLoader ( getActivity ( ) ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; presenter . onDetachView ( ) ; subscribe . dispose ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { connectionTestOnSuccess ( suggestedUrl , suggestedUrlServerVersion ) ; }
public void removeItem ( int position ) { remove ( position ) ; count -- ; onCountUpdated ( ) ; notifyDataSetChanged ( ) ; }
public boolean isEmpty ( ) { return firstNonEmptyString ( s , m , x , o , p , q , r , y , z , w ) == null ; }
public RootCommand clone ( ) { RootCommand rootCommand = null ; try { rootCommand = ( RootCommand ) super . clone ( ) ; rootCommand . isv6 = true ; } catch ( CloneNotSupportedException e ) { e . printStackTrace ( ) ; } return rootCommand ; }
public void onResume ( ) { super . onResume ( ) ; showFabIfHidden ( ) ; }
private static boolean isEmpty ( String s ) { return s . contentEquals ( " . default" ) ; }
public void onMediaStoreChanged ( ) { for ( MusicServiceEventListener listener : mMusicServiceEventListener ) { if ( listener != null ) { listener . onMediaStoreChanged ( ) ; } } }
public void setFirstRun ( boolean run ) { preferences . edit ( ) . putBoolean ( PREF_FIRST_RUN , run ) . commit ( ) ; }
public void end ( String body ) { currentFeedItem . setDate ( body ) ; }
public ReusableGroupViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
public HeartbeatTask ( ) { b = buffer ; Log . d ( "IRCCloud" , "Heartbeat task created . Ready : " + ready + " BID : " + buffer . bid ) ; Thread . dumpStack ( ) ; */ }
public void setLongitude ( double longitude ) { this . _longitude = longitude ; }
public ExArbitraryFileWidget createWidget ( ) { return new ExArbitraryFileWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , mediaUtils , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) , fileRequester ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { getActivity ( ) . setTitle ( "Settings" ) ; super . onViewCreated ( view , savedInstanceState ) ; }
public static Retrofit retrofit = new Retrofit . Builder ( ) . baseUrl ( "https : . addConverterFactory ( GsonConverterFactory . create ( ) ) . build ( ) ; public static CallInterface callInterface = retrofit . create ( CallInterface . class ) ; }
public boolean deleteFile ( @ NonNull Uri path ) throws FileNotFoundException { FsModule fsModule = fsResolver . resolveFsByUri ( path ) ; return fsModule . delete ( path ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mStats ) ; }
public static int getFrontColor ( Activity a ) { SharedPreferences sharedPref = a . getPreferences ( Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "front" , 0 ) ; }
public long getDayStartCutoff ( int collectionCreatedTime ) { long today = getToday ( collectionCreatedTime ) ; return ( collectionCreatedTime + ( today * SECONDS_PER_DAY ) ) * 1000 ; }
public static boolean isVideoWebDocument ( TLRPC . TL_webDocument webDocument ) { return webDocument != null && webDocument . mime_type . startsWith ( "video/" ) ; }
public void accept ( WebApi . Result result ) throws Exception { c . setAgainst ( c . getAgainst ( ) + 1 ) ; mView . notifyItemChanged ( c ) ; }
public void close ( ) { if ( mBluetoothGatt == null ) { return ; } mBluetoothGatt . close ( ) ; mBluetoothGatt = null ; }
public void onResume ( ) { super . onResume ( ) ; lazyAds . onResume ( this ) ; }
public void setCategoryCounter ( QoSTestResultEnum key , int successCounter , int failureCounter ) { this . resultCounter . put ( key , new QoSResultStats ( successCounter , failureCounter ) ) ; }
public void setOnChangeListener ( OnChangedListener listener ) { this . mListener = listener ; }
private int getCursorX ( float x ) { return ( int ) ( x / mRenderer . mFontWidth ) ; }
private String buildSnackbarErrorMessage ( String newErrorMessage , String detailErrorMessage ) { String snackbarMessage = new String ( newErrorMessage ) ; if ( newErrorMessage . length ( ) > 0 ) { newErrorMessage += "\n" + detailErrorMessage ; } else { newErrorMessage = detailErrorMessage ; } return snackbarMessage ; }
public NoteEditorTestBuilder ( JSONObject model ) { if ( model == null ) { throw new IllegalArgumentException ( "model was null" ) ; } this . mModel = model ; }
public void onColorsChanged ( TerminalSession changedSession ) { if ( mActivity . getCurrentSession ( ) == changedSession ) updateBackgroundColor ( ) ; }
public Object getInternalPropertyValueFromValue ( Context context , String key , String value ) { return getInternalTermuxPropertyValueFromValue ( context , key , value ) ; }
public static String getServiceURL_SDS ( Context context ) { context = MyApplicationCoreNew . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( TAG_SDS_URL , SERVICE_URL_SDS ) ; }
public void saveCurrentPhrasebookLanguagePosition ( int languagePosition ) { mPrefsHelper . setCurrentPhrasebookLanguagePosition ( languagePosition ) ; }
public void reboot ( ) { execCommandInternally ( ShellCommandHelper . getReboot ( ) ) ; FirebaseAnalytics . getInstance ( this ) . logEvent ( FirebaseEvents . SHELL_COMMAND_REBOOT , null ) ; }
public void onCreateSuccess ( SessionDescription sessionDescription ) { log ( "success" ) ; super . onCreateSuccess ( sessionDescription ) ; connection . setLocalDescription ( new DefaultSdpObserver ( ) , sessionDescription ) ; }
public int getOrientation ( final AppSettings appSettings ) { if ( rotation == null || rotation == BookRotationType . UNSPECIFIED ) { final RotationType defRotation = appSettings . rotation ; return defRotation . getOrientation ( ) ; } return rotation . getOrientation ( ) ; }
public static MarkdownPreviewDialog newInstance ( String markdown ) { final MarkdownPreviewDialog dialog = new MarkdownPreviewDialog ( ) ; final Bundle args = new Bundle ( 1 ) ; args . putString ( "markdown" , markdown ) ; dialog . setArguments ( args ) ; return dialog ; }
public String getString ( String key ) { return defaultKVStore . getString ( key ) ; }
public void setPointNumber ( int pointNumber ) { this . pointNumber = pointNumber ; }
public Coin getSoftDustLimit ( ) { return checkNotNull ( softDustLimit , "A coin failed to set a soft dust limit" ) ; }
public FicheEmploye Func ( ) throws java . lang . Exception { return GetFicheData ( Id ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mCreateSessionPresenter . detachView ( ) ; }
public boolean collideTest ( float [ ] triangleArray , float [ ] modelMatrix , Box unused ) { return TriangleCollision . AreCollided ( crashableMesh . cloneVertices ( ) , mModelMatrix . clone ( ) , triangleArray , modelMatrix ) ; }
public void setTrackViewer ( ExternalViewer trackViewer ) { TrackViewer = trackViewer ; }
public void onServiceDisconnected ( ComponentName pComponentName ) { Log . d ( logTag , "Bitcoin service disconnected" ) ; mServiceIsBound = false ; mServiceIsUnbinding = false ; mService . removeCallBacks ( mServiceCallBacks ) ; mService = null ; }
public int getItemViewType ( int i ) { if ( singlePhoto || selectedMode == 1 ) { return 0 ; } if ( i == 0 ) { return 1 ; } return 0 ; }
private void changeStatus ( Task task ) { if ( task . status != Status . PENDING ) return ; doOp ( String . format ( "Task '%s' marked done" , task . description ) , task . uuid . toString ( ) , "done" ) ; }
public void setAltitude ( double altitude ) { this . altitude = altitude ; invalidate ( ) ; }
public List < EpisodeInfo > getCurrentPlaylist ( ) { return currentPlaylist_ ; }
public void onClick ( View v ) { DialogFragment fragment = new DialogAddOrEditBellFragment ( ) ; fragment . show ( getSupportFragmentManager ( ) , DIALOG_TAG_ADD_BELL ) ; }
public SimpleQuery ( String title , boolean skipListened ) { this ( title , skipListened , APPEARANCE_ORDER ) ; }
public void setRemoteFolderSummary ( String path ) { mSyncedFolder . setRemotePath ( path ) ; mRemoteFolderSummary . setText ( path ) ; }
public MessagePatch setAttachments ( List < Entity > attachments ) { this . attachments = attachments ; return this ; }
private void onItemViewClick ( View v , boolean pinned ) { int position = mRecyclerView . getChildAdapterPosition ( v ) ; if ( position != RecyclerView . NO_POSITION ) { ( ( LegacySwipeableExampleActivity ) getActivity ( ) ) . onItemClicked ( position ) ; } }
public void stop ( ) { Log . e ( TAG , " @ stop" ) ; AlarmManager alarmManager = ( AlarmManager ) mContext . getSystemService ( Context . ALARM_SERVICE ) ; alarmManager . cancel ( getSyncPendingIntent ( ) ) ; }
public void onLoaderReset ( @ NonNull Loader < ArrayList < Genre >> loader ) { getAdapter ( ) . swapDataSet ( new ArrayList <> ( ) ) ; }
public UserSensitivityMultiplicator ( NetworkDataSink sink ) { super ( sink ) ; }
public static UserPostListingURL getLiked ( String username ) { return new UserPostListingURL ( Type . UPVOTED , username , null , null , null ) ; }
public void onRetry ( ) { SyncUtils . syncDatabase ( getContext ( ) ) ; }
private void setBoundingBox ( BoundingBox bbox ) { boundingBox = bbox ; }
public void onPlayingMetaChanged ( ) { for ( MusicServiceEventListener listener : mMusicServiceEventListeners ) { if ( listener != null ) { listener . onPlayingMetaChanged ( ) ; } } }
public ArrayList < Long > getMissingIds ( ) { return mMissingIds ; }
public String getArabicSearchDatabaseUrl ( ) { return DATABASE_BASE_URL + QuranDataProvider . QURAN_ARABIC_DATABASE ; }
public String getUrl ( ) { return StringUtils . notNullStr ( url ) ; }
public void onClick ( View widget ) { editText . setText ( parentKey ) ; displayMap ( ) ; }
private static Drawable getFolderIcon ( Context c ) { return c . getDrawable ( R . drawable . ic_item_folder_tinted ) ; }
private void setDataSelected ( CensusHistoryPoint point ) { date . setText ( SparkleHelper . getDateNoYearFromUTC ( point . timestamp ) ) ; value . setText ( SparkleHelper . getPrettifiedNumber ( point . score ) ) ; }
public static String latLngToAprsFilter ( double lat , double lon , double radius ) { return String . format ( Locale . US , "r/%1$ . 3f/%2$ . 3f/%3$ . 1f" , lat , lon , radius ) ; }
public int getBackgroundResId ( ) { if ( paperStyleId == 0 ) { return R . drawable . line_edit_text ; } return paperStyleId ; }
public List < OpenHABWidgetListFragment > getFragmentList ( ) { return fragmentList ; }
private int getDirectionIcon ( boolean desc ) { return CurrentTheme . getResIdFromAttribute ( requireActivity ( ) , desc ? R . attr . toolbarDoubleDownIcon : R . attr . toolbarDoubleUpIcon ) ; }
public void setX ( int x ) { this . _x = x ; }
public int hashCode ( ) { int result = name . hashCode ( ) ; result += totalValue ; result = result / 5 ; return result ; }
public void setCinemaHost ( String host ) { mSchauburgUrlProvider . setHost ( host ) ; mView . navigateToGuide ( ) ; mMovieRepository . loadMovieData ( ) ; }
public final ActivityTestRule < SplashActivity > mActivityRule = new ActivityTestRule < SplashActivity > ( SplashActivity . class ) { @ Override protected void beforeActivityLaunched ( ) { super . beforeActivityLaunched ( ) ; resetApp ( InstrumentationRegistry . getTargetContext ( ) ) ; } } ;
public void onResume ( ) { super . onResume ( ) ; String URL = sharedPref . getString ( "openURL" , "http : if ( URL . equals ( "settings_recreate" ) ) { updateSettings ( ) ; } }
private boolean isEditingExistingIssue ( ) { return getIntent ( ) . hasExtra ( "issue" ) ; }
public void setDrawBackgroundEnabled ( boolean enabled ) { drawBackgroundEnabled ( enabled ) ; invalidate ( ) ; }
public com . coinomi . core . protos . Protos . ScryptParameters . Builder getEncryptionParametersBuilder ( ) { bitField0_ | = 0x00000010 ; onChanged ( ) ; return getEncryptionParametersFieldBuilder ( ) . getBuilder ( ) ; }
private void maybeAdjustProgress ( ) { if ( mChoice . isFinish ( ) ) { new Progress ( this ) . setInProgress ( false ) ; } }
private static int [ ] zzUnpackAction ( ) { int [ ] result = new int [ 253 ] ; int offset = 0 ; offset = zzUnpackAction ( ZZ_ACTION_PACKED_0 , offset , result ) ; return result ; }
public boolean useRedirectService ( ) { return sharedPref . getBoolean ( "pref_key_use_redirection_service" , false ) ; }
public void onComplete ( SaveToDiskResult saveToDiskResult ) { handleTaskResult ( saveToDiskResult , saveRequest ) ; }
public void notifyClear ( ) { App . arePointsExported = false ; for ( DAO dao : this . daoList ) { dao . deleteAll ( ) ; } }
public GestureControllerForPager getController ( ) { return mController ; }
public void onStepClick ( int index ) { mCallback . onStepClicked ( index ) ; }
public void run ( ) { if ( mSecondsLeft <= 0 ) { return ; } h . postDelayed ( this , 1000 ) ; }
public boolean onPreDraw ( ) { if ( fragmentView != null ) { needLayout ( ) ; fragmentView . getViewTreeObserver ( ) . removeOnPreDrawListener ( this ) ; } return false ; }
public Fragment getItem ( int position ) { return mConfiguration . createFragment ( position ) ; }
public View newView ( Context context , Cursor c , ViewGroup parent ) { return LayoutInflater . from ( context ) . inflate ( R . layout . list_item , parent , false ) ; }
public static String getWLMEndDate ( ) { return "31 Oct" ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return help_TermsOfServiceUpdate . TLdeserialize ( stream , constructor , exception ) ; }
public void onClick ( KAlertDialog sDialog ) { Intent intent = new Intent ( Settings . ACTION_LOCATION_SOURCE_SETTINGS ) ; intent . addCategory ( Intent . CATEGORY_DEFAULT ) ; startActivity ( intent ) ; sDialog . cancel ( ) ; }
public void onCreate ( @ Observes OnCreateEvent onCreate ) { broadcastReceiver = getBroadcastReceiver ( ) ; activity . registerReceiver ( broadcastReceiver , createFilter ( ) ) ; }
public LottieAnimatableShapeValue getMaskPath ( ) { return maskPath ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; channel . serializeToStream ( stream ) ; user_id . serializeToStream ( stream ) ; role . serializeToStream ( stream ) ; }
public void filter ( String [ ] text ) { if ( all_ != null ) { new FilterAsyncTask ( null ) . execute ( text ) ; } else { apps_ . clear ( ) ; notifyDataSetChanged ( ) ; } }
public void setCardFront ( ) { view . setImageBitmap ( drawables [ ( color - 1 ) * 13 + value - 1 ] ) ; }
public boolean noCursorCatching ( ) { return hud . noCursorCatching ( ) ; }
public String name ( ) { return Game . getVar ( R . string . CorpseDustBuff_Name ) ; }
public void run ( ) { upperImage . setVisibility ( View . INVISIBLE ) ; upperImage2 . setVisibility ( View . VISIBLE ) ; }
public ActivityBuilder setCropShape ( @ NonNull CropImageView . CropShape cropShape ) { mOptions . cropShape = cropShape ; return this ; }
private void update ( ) { updateStatus ( ) ; updateChargePlug ( ) ; updateBatteryLevel ( ) ; updateHealth ( ) ; updateTechnology ( ) ; updateTemperature ( ) ; updateVoltage ( ) ; }
public static List < IChannel > getChannelList ( IChannel channel ) throws RemoteException { LinkedList < IChannel > channels = new LinkedList < IChannel > ( ) ; getChannelList ( channel , channels ) ; return channels ; }
public int getTotalLapCount ( ) { return Debug . instance . oneLapOnly ? 1 : 3 ; }
public void loadSettingsFromMenuScene ( ) { setScene ( loadingScene ) ; endSceneService ( menuSceneService ) ; startSceneService ( settingsSceneService ) ; }
public DebateFormatBuilderFromXmlForSchema2 ( Context context ) { super ( ) ; mContext = context ; mDocumentBuilderFactory = DocumentBuilderFactory . newInstance ( ) ; mPeriodInfoManager = new PeriodInfoManager ( context ) ; xu = new XmlUtilities ( context . getResources ( ) ) ; }
public static boolean isIntentAvailable ( Context context , Intent intent ) { final PackageManager packageManager = context . getPackageManager ( ) ; List < ? > list = packageManager . queryIntentActivities ( intent , PackageManager . MATCH_DEFAULT_ONLY ) ; return list . size ( ) > 0 ; }
public void bitmap ( Bitmap bitmap ) { bind ( ) ; GLUtils . texImage2D ( GLES20 . GL_TEXTURE_2D , 0 , bitmap , 0 ) ; }
private void addToBasicChain ( DeterministicKey key ) { basicKeyChain . importKeys ( ImmutableList . of ( key ) ) ; }
public void run ( ) { initLogList ( ) ; dismissProgress ( ) ; }
public static String createLocalpart ( String uid ) { return MessageUtils . sha1 ( uid ) ; }
public static boolean isFavoritesMode ( ) { return Instance != null && Instance . mIsFavoritesMode ; }
public void onClick ( DialogInterface dialog , int whichButton ) { JobActivity . this . startJob ( ) ; }
public void setBlock ( TLRPC . TL_pageBlockParagraph block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
public void draw ( ShapeRenderer renderer ) { Pilot pilot = mRacer . getPilot ( ) ; if ( pilot instanceof AIPilot ) { renderAITargetWaypoint ( renderer , ( AIPilot ) pilot ) ; } else { renderWaypoints ( renderer ) ; } }
public void onDateSet ( DatePickerDialog view , int year , int monthOfYear , int dayOfMonth ) { String date = new String ( dayOfMonth + "/" + ( monthOfYear + 1 ) + "/" + year ) ; binding . addQrLayoutEdittextEndDate . setText ( date ) ; }
public AltitudeSegment getSegment ( ) { return segment ; }
public void reload ( Activity activity ) { load ( activity ) ; }
public void onServiceConnected ( ComponentName name , IBinder binder ) { service = ( ISqueezeService ) binder ; BaseActivity . this . onServiceConnected ( ) ; }
private boolean onPressMainFAB ( View view , MotionEvent motionEvent ) { if ( motionEvent . getAction ( ) != MotionEvent . ACTION_DOWN ) { return false ; } expandFABMenu ( ) ; isFABMenuExpanded = true ; return true ; }
public void getNewVoteList ( int offset , @ NonNull User user ) { getVoteList ( offset , EventBusController . RemoteServiceEvent . GET_VOTE_LIST_NEW , user ) ; }
public void onReceive ( Context context , Intent intent ) { if ( ConnectivityManager . CONNECTIVITY_ACTION . equals ( intent . getAction ( ) ) ) { if ( mMediaStore . hasSiteMediaToDelete ( mSite ) ) { startMediaDeleteService ( ) ; } } }
public ViewPagerAdapter ( FragmentManager fm ) { super ( fm ) ; fragments . add ( new LatestFragment ( ) ) ; titles . add ( "NEW ON HAPRAMP" ) ; }
private void storeReading ( long http_status ) { putValueTrimSize ( HTTP_STATUS_FIELD , null , System . currentTimeMillis ( ) , http_status ) ; }
public static int getSmallYear ( ) { return Integer . parseInt ( String . valueOf ( Calendar . getInstance ( ) . get ( Calendar . YEAR ) ) . substring ( 2 ) ) ; }
public void setPictureUri ( Uri pictureUri ) { SimpleDraweeView draweeView = ( SimpleDraweeView ) view . findViewById ( R . id . item_person_list_pic ) ; draweeView . setImageURI ( pictureUri ) ; }
public SetPassword ( Context ctx , Database db , String password , String keyfile , OnFinish finish , boolean dontSave ) { super ( finish ) ; mDb = db ; mPassword = password ; mKeyfile = keyfile ; mDontSave = dontSave ; this . ctx = ctx ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) Calendar . setEnableCalendarWithAutoSelect ( context , true ) ; else AppSettings . Notifications . setEnableCalendar ( context , false ) ; }
public Object getGesturePinch ( ) { return getGesture ( R . string . pref_key__gesture_pinch ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . patient_dashboard_menu , menu ) ; }
public boolean isAppEnabled ( ) { return enableApp == null ? enableApp = isAppEnabled ( false ) : enableApp ; }
public CertUtils . SSLSettings sslSettings ( ) { return new CertUtils . SSLSettings ( validateSSL ( ) , cert ( ) ) ; }
public void onClick ( View v ) { loginOrSignUpProcess = new LoginOrSignUpProcess ( loginSignUpManager ) ; loginOrSignUpProcess . execute ( ) ; }
public Typeface getSourceSansProBold ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/SourceSansPro - Bold . ttf" ) ; }
public void onTlsCheckedChanged ( final View v , boolean isChecked ) { setTls ( isChecked ) ; }
public Resource < BitmapPaletteWrapper > transcode ( Resource < Bitmap > bitmapResource ) { Bitmap bitmap = bitmapResource . get ( ) ; BitmapPaletteWrapper bitmapPaletteWrapper = new BitmapPaletteWrapper ( bitmap , ColorUtil . generatePalette ( bitmap ) ) ; return new BitmapPaletteResource ( bitmapPaletteWrapper , bitmapPool ) ; }
public void onClick ( View view ) { if ( mDrawerLayout . isDrawerOpen ( mDrawerLinear ) ) { mDrawerLayout . closeDrawer ( mDrawerLinear ) ; } else mDrawerLayout . openDrawer ( mDrawerLinear ) ; }
public void run ( ) { Intent intent = new Intent ( getApplicationContext ( ) , MapsActivity . class ) ; startActivity ( intent ) ; finish ( ) ; }
public FormTemplate build ( ) { FormTemplate formTemplate = new FormTemplate ( ) ; formTemplate . setUuid ( uuid ) ; formTemplate . setHtml ( html ) ; formTemplate . setModel ( model ) ; formTemplate . setModelJson ( modelJson ) ; return formTemplate ; }
public void onTaskSuccess ( String s ) { presenter . sendInventory ( s , Utils . loadJsonHeader ( s ) ) ; inventoryTask . getXMLSyn ( ) ; }
public void onConnected ( Bundle connectionHint ) { onClientConnected ( onConnectionEvent , onMessageReceived ) ; }
public LocationGpsSensorWrapper ( Context applicationContext ) { super ( applicationContext ) ; values = new float [ 2 ] ; }
public String getStudyGroups ( ) { return studyGroups ; }
public FaqItem ( ) { section = "General" ; originalDate = Calendar . getInstance ( ) . getTime ( ) ; updateDate = originalDate ; question = "" ; answer = "" ; author = AHC . DEFAULT_AUTHOR ; desc = "" ; }
public void onClick ( DialogInterface dialog , int which ) { showProgress ( ) ; Intent intent = new Intent ( FileManager . this , OpenConstructor . class ) ; intent . putExtra ( AbstractActivity . RESOLUTION_KEY , which ) ; startActivity ( intent ) ; }
public void setPresenter ( LoginPresenter presenter ) { mPresenter = presenter ; }
public void events ( List < String > settingsEvents , List < String > projectEvents , List < String > dataEvents , boolean whilePaused ) { adapter . updateData ( ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mCallbacks = sExpListCallbacks ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . PLUS ) ; }
private static Tweet tweet ( int i ) { return tweet ( i , entities ( ) , null , null , user ( i ) ) ; }
public void subscribeForTimer ( Consumer < AudioRecorder . RecordTime > timerConsumer ) { audioRecorder . subscribeTimer ( timerConsumer ) ; }
public void setRetries ( int retries ) { this . retries = retries ; }
public void swapDataSet ( ArrayList < Album > dataSet ) { this . dataSet = dataSet ; notifyDataSetChanged ( ) ; }
public boolean act ( ) { if ( getSourceId ( ) != EntityIdSource . INVALID_ID ) { detach ( ) ; } return super . act ( ) ; }
public SnappyRecyclerView ( Context context , @ Nullable AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `identity` ADD COLUMN `sender_extra` INTEGER NOT NULL DEFAULT 0" ) ; }
public void setShuffleMode ( final int shuffleMode ) { playingQueue . setShuffle ( shuffleMode ) ; shuffleChangeSignaling ( ) ; }
public void onStop ( ) { stopPlaying ( ) ; }
public String getPowiat ( ) { return nameFormatHelper . formatPowiat ( dto . powiat ( ) ) ; }
public static long getLongSp ( Context context , String name , String tag ) { SharedPreferences sp = context . getSharedPreferences ( name , mode ) ; return sp . getLong ( tag , 0 ) ; }
public void loadTodoList ( String uuid ) { DisplayTodoListInteractor interactor = new DisplayTodoListInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , uuid ) ; interactor . execute ( ) ; }
public void fromIsHigherThanTo ( ) { IntegerRange . getValues ( "30 - 20" ) ; }
public void action ( Action . JsonAction action ) { if ( mService == null ) { return ; } mService . action ( action ) ; }
public void setDataSet ( ArrayList < Item > dataSet , ArrayList < Integer > count ) { mDataSet = dataSet ; mCountSet = count ; }
public void onlineStateChanged ( boolean isOnline ) { runOnUiThread ( new Runnable ( ) { public void run ( ) { if ( isFinishing ( ) ) { return ; } supportInvalidateOptionsMenu ( ) ; } } ) ; }
public void onServiceDisconnected ( ComponentName className ) { adapter . notifyDataSetChanged ( ) ; updateEmptyVisible ( ) ; bound = null ; }
public void onClick ( View v ) { Intent browserIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( diseaseUrl ) ) ; mActivity . startActivity ( browserIntent ) ; }
public TextOrientationType getOrientation ( ) { return orientation ; }
private void downloadVideos ( ) { progressView . show ( ) ; TravelerIoFacade ioFacade = new TravelerIoFacadeImpl ( getActivity ( ) ) ; ioFacade . getVideos ( ) ; }
public boolean isAvailable ( ) { return validSettings ( preferenceHelper . getOwnCloudServerName ( ) , preferenceHelper . getOwnCloudUsername ( ) , preferenceHelper . getOwnCloudPassword ( ) , preferenceHelper . getOwnCloudDirectory ( ) ) ; }
public void setChecked ( boolean checked ) { mSwitch . setChecked ( checked ) ; }
public void onStop ( ) { mDispatcher . unregister ( this ) ; super . onStop ( ) ; }
public DestinationsDB ( Context context ) { mContext = context ; mDbHelper = new Database_Destinations ( context ) ; }
public void onPageScrollStateChanged ( int arg0 ) { if ( mListener != null ) { mListener . onPageScrollStateChanged ( arg0 ) ; } }
public ArrayList < ColorInfo > getMetroList ( ) { return this . metroList ; }
private void setUpMiniPlayer ( ) { setUpPlayPauseButton ( ) ; progressBar . setSupportProgressTintList ( ColorStateList . valueOf ( ThemeStore . accentColor ( getActivity ( ) ) ) ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { userPreferences . setFilter_CardOwner ( parent . getItemAtPosition ( position ) . toString ( ) ) ; filterCards ( ) ; onResume ( ) ; }
public String getDay ( ) { String date = DateFormat . getDateInstance ( DateFormat . LONG , Locale . getDefault ( ) ) . format ( day . getTime ( ) ) ; return ( date ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new SearchManualFragment ( ) ; case 1 : return new SearchManualFragment ( ) ; default : throw new IllegalStateException ( ) ; } }
public void setNavigationStatus ( SearchNavigationStatus status ) { setPreviousButtonEnabled ( status . hasPrevious ) ; setNextButtonEnabled ( status . hasNext ) ; setSearchBarMatchText ( status . numMatchesBeforeSpread , status . numMatches , status . currentSpreadContainsMatch ) ; }
public Tree ( ) { this ( null , null ) ; }
public void setImage ( TLObject path , String filter , Drawable thumb ) { setImage ( path , null , filter , thumb , null , null , null , 0 ) ; }
private static float centerFromEnd ( int [ ] stateCount , int end ) { return ( float ) ( end - stateCount [ 4 ] - stateCount [ 3 ] ) - stateCount [ 2 ] / 2 . 0f ; }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . USER_FUNCTIONS ; }
public final boolean isName ( String s ) { return _names . containsKey ( s ) ; }
public static Message handlerMessage ( int what , Object obj ) { final Message msg = new Message ( ) ; msg . what = what ; msg . obj = obj ; return msg ; }
public boolean onLongClick ( View view , TetroidNode node , int pos ) { showPopupMenu ( view , node , pos ) ; return true ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . contactsImported ) ; }
private void updateScrollPositions ( ) { updateBackground ( ) ; updateButtonCta ( ) ; updateButtonBackPosition ( ) ; updateButtonNextPosition ( ) ; updatePagerIndicatorPosition ( ) ; updateParallax ( ) ; updateFullscreen ( ) ; updateBackgroundFade ( ) ; }
private void initWakePrefs ( ) { binding . wakeScreenOptionPrefs . setChecked ( mPrefs . isBirthdayWakeEnabled ( ) ) ; binding . wakeScreenOptionPrefs . setReverseDependentView ( binding . globalOptionPrefs ) ; binding . wakeScreenOptionPrefs . setOnClickListener ( view -> changeWakePrefs ( ) ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . setAllowedNotificationsDutingAnimation ( new int [ ] { NotificationCenter . dialogsNeedReload , NotificationCenter . closeChats } ) ; NotificationCenter . getInstance ( ) . setAnimationInProgress ( true ) ; animatorSet . start ( ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull final ViewGroup parent , int viewType ) { final View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( viewType , parent , false ) ; return new ViewHolder ( view ) ; }
private void bindHeader ( View container ) { try { tryRegisterClickListener ( container , R . id . scholarship_assigned_container , null ) ; } catch ( Exception e ) { log . exception ( e ) ; } }
public int get ( String key , int defaultValue ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return prefs . getInt ( key , defaultValue ) ; }
public void afterTextChanged ( Editable editable ) { if ( mDialog != null ) { boolean disabled = TextUtils . isEmpty ( editable ) ; mDialog . getButton ( Dialog . BUTTON_POSITIVE ) . setEnabled ( ! disabled ) ; } }
private Note getNoteAtPosition ( int position ) { if ( isValidPosition ( position ) ) { return mNotes . get ( position ) ; } return null ; }
public NoteName getName ( ) { return A ; }
public HtspFileInputStreamDataSource ( Context context , SimpleHtspConnection connection ) { super ( context , connection ) ; mDataSourceNumber = sDataSourceCount . incrementAndGet ( ) ; Log . d ( TAG , "New HtspSubscriptionDataSource instantiated ( " + mDataSourceNumber + " ) " ) ; }
public void unLink ( ) { preferenceHelper . setDropBoxAccessKeyName ( null ) ; preferenceHelper . setDropBoxOauth1Secret ( null ) ; }
public void clearFileSaveStatus ( final int mediaId ) { mWPAndroidGlueCode . clearFileSaveStatus ( mediaId ) ; }
public void setAvatarType ( int value ) { avatarType = value ; if ( avatarType == AVATAR_TYPE_ARCHIVED ) { color = Theme . getColor ( Theme . key_avatar_backgroundArchivedHidden ) ; } else { color = Theme . getColor ( Theme . key_avatar_backgroundSaved ) ; } }
public static QuranRow fromTag ( Tag tag ) { return new QuranRow . Builder ( ) . withType ( QuranRow . BOOKMARK_HEADER ) . withText ( tag . getName ( ) ) . withTagId ( tag . getId ( ) ) . build ( ) ; }
public void describeTo ( Description description ) { description . appendText ( "has compound drawable resource " + resourceId ) ; }
public static void unsubscribe ( Subscription . . . subscriptions ) { for ( Subscription subscription : subscriptions ) { unsubscribe ( subscription ) ; } }
public int getItemCount ( ) { return mFiles . length ; }
public String getDest ( ) { return this . dest ; }
public static void d ( String tag , String msg ) { if ( Constants . DEBUG ) { android . util . Log . d ( tag , msg ) ; } }
private void initializeContentTextView ( ) { newsArticleContentTextView . setOnClickListener ( this : : onWholeViewClick ) ; }
public Builder clearInputTimestamp ( ) { bitField0_ = ( bitField0_ & ~0x00000020 ) ; inputTimestamp_ = 0L ; onChanged ( ) ; return this ; }
public static SongDetailDialog create ( Song song ) { SongDetailDialog dialog = new SongDetailDialog ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "song" , song ) ; dialog . setArguments ( args ) ; return dialog ; }
public boolean hasNote ( String input ) { return input . startsWith ( "заметка" ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_clipboard , container ) ; mClipList = ( ListView ) view . findViewById ( R . id . list_Clip ) ; return view ; }
public void setViewPager ( OsmObject poi , PoiContract listOfQuestions ) { FragmentPagerAdapter adapterViewPager = new MyPagerAdapter ( getSupportFragmentManager ( ) , poi , listOfQuestions , getApplicationContext ( ) ) ; viewPager . setAdapter ( adapterViewPager ) ; }
public void onRefreshFeeds ( ) { if ( currentSelectedTag . equals ( ALL ) ) { refreshAllPosts ( ) ; } else if ( currentSelectedTag . equals ( EXPLORE ) ) { refreshExplorePosts ( ) ; } else { refreshCommunityPosts ( currentSelectedTag ) ; } }
public PlaylistModel ( String playlistName , long playlistID , int mPlaylistTracks , PLAYLIST_TYPES playlistType ) { this ( playlistName , playlistID , mPlaylistTracks , null , playlistType ) ; }
public String getType ( ) { return type ; }
public ExVideoWidget createWidget ( ) { return new ExVideoWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) , mediaUtils , fileRequester ) ; }
public static MediaProcessor createMediaProcessor ( String aContentType ) throws MediaException { return null ; }
public void onError ( @ NonNull Throwable e ) { Log . v ( TAG , " [ syncRssItems ] - onError ( ) called with : throwable = [ " + e + " ] " ) ; ThrowException ( e ) ; }
public void showMenu ( View v ) { PopupMenu popup = new PopupMenu ( mContext , v ) ; popup . setOnMenuItemClickListener ( this ) ; popup . inflate ( R . menu . menu_workshop_item_options ) ; popup . show ( ) ; }
public void onReceive ( Context context , Intent intent ) { findViewById ( R . id . llProgress ) . setVisibility ( View . GONE ) ; mCalculatingExtremumValues = false ; }
public void setRelatedPostsFlags ( int flags ) { showRelatedPosts = ( flags & RELATED_POSTS_ENABLED_FLAG ) > 0 ; showRelatedPostHeader = ( flags & RELATED_POST_HEADER_FLAG ) > 0 ; showRelatedPostImages = ( flags & RELATED_POST_IMAGE_FLAG ) > 0 ; }
private void filterRoster ( ) { prefRosterFilter = filter_roster_text . getText ( ) . toString ( ) . trim ( ) ; prefs . edit ( ) . putString ( "prefRosterFilter" , prefRosterFilter ) . apply ( ) ; refresh_roster_list ( ) ; }
public void onShown ( Snackbar sb ) { if ( ! isNetworkAvailable ( ) ) { noInternetMessage . show ( ) ; } }
public void onFailure ( Call < ResLcdVestingAccountInfo > call , Throwable t ) { }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "university" ) ) { return ; } events = null ; }
public GooglePlacesAdapter ( final Context context , List < GooglePlaceItem > array ) { this . array = array ; isDark = new ThemeUtil ( context ) . isDark ( ) ; }
public void onDeleteTaskSuccessTracking ( ) { analyticsHelper . trackDeleteTaskSuccess ( null ) ; }
private void postPreviews ( final Iterable < TodoListPreview > previews ) { mMainThread . post ( new Runnable ( ) { @ Override public void run ( ) { callback . onPreviewsRetrieved ( Lists . newArrayList ( previews ) ) ; } } ) ; }
public int getJobProgress ( ) { return JobProgress ; }
public boolean onFragmentCreate ( ) { NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded ) ; return super . onFragmentCreate ( ) ; }
public AxolotlAddress getRemoteAddress ( ) { return remoteAddress ; }
public XValueMarker ( Number value , String text , YPositionMetric textPosition , int linePaint , int textPaint ) { super ( value , text , textPosition , linePaint , textPaint ) ; }
public int compare ( Subreddit c1 , Subreddit c2 ) { return ( c2 . getSubmissions ( ) + c2 . getComments ( ) ) - ( c1 . getSubmissions ( ) + c1 . getComments ( ) ) ; }
public final void setHideGrid ( boolean hideGrid ) { this . _hideGrid = hideGrid ; invalidate ( ) ; }
public WORKFLOW_TYPE getWorkFlowType ( ) { return WORKFLOW_TYPE . REVOKE_DEVICE_WITH_QR_CODE ; }
public void onClick ( DialogInterface dialog , int which ) { DataManager . getInstance ( CareDetailsActivity . this ) . archiveCareItem ( getIntent ( ) . getIntExtra ( "careItemPosition" , - 1 ) ) ; finish ( ) ; }
public void onResume ( ) { super . onResume ( ) ; view . onResume ( ) ; gameLoop . onResume ( ) ; }
public void goToPlayStoreDeveloper ( ) { try { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . app_developerPlayStoreURL ) ) ) ) ; } catch ( Exception ignored ) { showUnknownError ( ) ; } }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsHandling . class ) ; startActivity ( i ) ; }
public void onWindowFocusChanged ( boolean hasFocus ) { super . onWindowFocusChanged ( hasFocus ) ; if ( hasFocus ) { mHandler . sendEmptyMessageDelayed ( MSG_HIDE_ACTIONBAR , DEFAULT_HIDE_AFTER_TIME ) ; } else { mHandler . removeMessages ( MSG_HIDE_ACTIONBAR ) ; } }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . medical_attention_edit , menu ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public TopRatedView createView ( ) { return null ; }
public void onSignupSuccess ( ) { _signupButton . setEnabled ( true ) ; setResult ( RESULT_OK , null ) ; finish ( ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . TAN ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; context = this ; setContentView ( R . layout . activity_settings_screen ) ; ButterKnife . bind ( this ) ; initToolbar ( ) ; replaceFragment ( new SettingsFragment ( ) ) ; }
public IItemAdapter < IDrawerItem , IDrawerItem > getHeaderAdapter ( ) { return mDrawerBuilder . mHeaderAdapter ; }
private void loadAdapter ( String header ) { mHeader . setText ( header ) ; mAdapter = new CustomListAdapter ( this , items ) ; listView . setAdapter ( mAdapter ) ; listView . addOnScrollListener ( mOnScrollListener ) ; listView . setClickListener ( this ) ; }
public Hashtable < String , Integer > getPresences ( ) { return this . presences ; }
public void onNothingSelected ( AdapterViewCompat < ? > arg0 ) { }
public int getAlliancePoints ( ) { return alliancePoints ; }
public InterventionMaterial ( int materialId ) { this . quantity = 0 ; this . unit = "unity" ; this . intervention_id = - 1 ; this . material_id = materialId ; this . approximative_value = false ; }
public RadioGroupHelper ( View rootView , int . . . radiosIDs ) { super ( ) ; for ( int radioButtonID : radiosIDs ) { add ( ( RadioButton ) rootView . findViewById ( radioButtonID ) ) ; } }
public void startUpdate ( View container ) { }
public TagsArrayAdapter ( ) { mTagsList = new ArrayList < String > ( ) ; mTagsList . addAll ( mAllTags ) ; sortData ( ) ; }
public Integer getPr ( ) { return pr ; }
public byte getDataSeparator ( ) { return data_separator ; }
public void onClick ( View v ) { if ( ( ( CheckBox ) v ) . isChecked ( ) ) graphView . addSeries ( gyroSeries ) ; else graphView . removeSeries ( gyroSeries ) ; }
public static LottieComposition fromInputStreamSync ( InputStream stream ) { return LottieCompositionFactory . fromJsonInputStreamSync ( stream ) . getValue ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; pager . removeOnPageChangeListener ( this ) ; ButterKnife . unbind ( this ) ; }
public void onLoginUpdated ( @ Observes LoginUpdatedEvent event ) { LoginManager . save ( PreferenceManager . getDefaultSharedPreferences ( this ) , event . getLogin ( ) ) ; loadVertretungsplan ( ) ; }
public void setGruppe ( boolean gruppe ) { this . _gruppe = gruppe ; }
public void endTracks ( ) { tracksBuilt = true ; handler . post ( maybeFinishPrepareRunnable ) ; }
private boolean gitRepoIsClean ( ) { try { Status status = git . status ( ) . call ( ) ; return status . hasUncommittedChanges ( ) ; } catch ( GitAPIException e ) { return false ; } }
public String getWeek ( ) { return this . week ; }
public ChallengeManagerInterface getChallengeManager ( boolean useSaved ) { this . challengeManager = ChallengeManager . create ( this . getServer ( ) , useSaved , this . context ) ; return this . challengeManager ; }
public EventViewHolder ( View itemView ) { super ( itemView ) ; event_cardView = itemView . findViewById ( R . id . carousel_item_cardview ) ; event_cardText = itemView . findViewById ( R . id . event_card_text ) ; }
private void updateNotification ( ) { mNotificationHelper . buildNotification ( getApplicationContext ( ) , getArtistName ( ) , getTrackName ( ) , isPlaying ( ) , getAlbumCover ( ) , mMediaSession . getSessionToken ( ) ) ; }
public UploadData getData ( ) { return data ; }
public void setListSortOrder ( ArticlesListFragment . SortOrder sortOrder ) { setString ( R . string . pref_key_ui_lists_sortOrder , sortOrder . toString ( ) ) ; }
private void updateUI ( ) { if ( mAdapter == null ) { mAdapter = new Adapter ( mCouples ) ; mPlayersList . setAdapter ( mAdapter ) ; } else { mAdapter . setCouples ( mCouples ) ; mAdapter . notifyDataSetChanged ( ) ; } }
private double sqmTosqcm ( double num ) { return num * 10000 ; }
public int getItemCount ( ) { if ( reviewArrayList == null ) return 0 ; return reviewArrayList . size ( ) ; }
public int getPriorityId ( ) { return mPriorityId ; }
public static void dropAllTables ( Database db , boolean ifExists ) { OptionDao . dropTable ( db , ifExists ) ; PromotionDao . dropTable ( db , ifExists ) ; UserDao . dropTable ( db , ifExists ) ; VoteDataDao . dropTable ( db , ifExists ) ; }
private void requestOwnerInfo ( ) { final int accountId = super . getAccountId ( ) ; appendDisposable ( ownersInteractor . getBaseOwnerInfo ( accountId , userId , IOwnersInteractor . MODE_ANY ) . compose ( RxUtils . applySingleIOToMainSchedulers ( ) ) }
public void clickingDungeons ( MenuItem item ) { Intent intent = new Intent ( NavD . this , DungeonActivity . class ) ; startActivity ( intent ) ; }
private void setStatus ( boolean isShowing ) { if ( isShowing ) { StatusManager . getInstance ( ) . setOnActionMenuMode ( ) ; return ; } StatusManager . getInstance ( ) . unsetStatus ( ) ; }
public void onAnimationCancel ( Object animation ) { if ( currentTopViewAnimation != null && currentTopViewAnimation . equals ( animation ) ) { currentTopViewAnimation = null ; } }
public HashMap < String , String > getAliases ( ) { return Aliases ; }
public void incRef ( ) { synchronized ( mLock ) { acquireWifiLockIfNecessaryLocked ( ) ; mNetworkRef += 1 ; } }
public Device ( @ ForApplication Context context , Locale locale ) { this . context = context ; this . locale = locale ; }
private int getDefaultVibration ( ) { return Integer . valueOf ( Prefs . getString ( Constants . PREF_NOTIFICATIONS_VIBRATION , Constants . PREF_DEFAULT_NOTIFICATIONS_VIBRATION ) ) ; }
public void setDefaultImagesDirectory ( String directory ) { mPerInstallationPrefs . edit ( ) . putString ( Constants . PREF_DEFAULT_IMAGES_DIR , directory ) . apply ( ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; myUtil . showUnityAdsRandom ( this ) ; }
private GeoShapeWidget createWidget ( FormEntryPrompt prompt ) { return new GeoShapeWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) , waitingForDataRegistry , geoDataRequester ) ; }
public void setUp ( ) { TestUtils . skipIfDefaultAccountExists ( ) ; super . setUp ( ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfTeleportation_Info ) ; }
public Bitmap getPhoto ( ) { return photo ; }
public boolean isHistoryItemsListIsEmpty ( ) { try { return getDao ( HistoryItem . class ) . countOf ( ) > 0 ; } catch ( SQLException e ) { LogTool . e ( e ) ; return false ; } }
public void run ( ) { LocalFileListAdapter localFileListAdapter = ( LocalFileListAdapter ) mAdapter ; localFileListAdapter . filter ( query ) ; }
public String name ( ) { return isKnown ( ) ? name : Utils . format ( Game . getVar ( R . string . Ring_Name ) , gem ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( getBaseContext ( ) , EditActivity . class ) ; startActivityForResult ( intent , 20000 ) ; }
public void onFailure ( String s ) { Log . d ( TAG , "onFailure : " + s ) ; handler . sendEmptyMessage ( FFMPEG_FAILURE_MSG ) ; }
public TypefaceSpan ( Typeface typeface , int size ) { mTypeface = typeface ; textSize = size ; }
public void onResume ( ) { Log . v ( TAG , "Resume view" ) ; super . onResume ( ) ; Log . v ( TAG , "Resumed view" ) ; refreshChatlist ( ) ; MessageNotification . cancelSummaryNotification ( getContext ( ) ) ; }
public void setMaximumRange ( float maximumRange ) { this . maximumRange = maximumRange ; }
public MainRow ( double textViewBig , int textViewSmall , int viewType ) { this . textViewBig = textViewBig ; this . textViewSmall = textViewSmall ; this . viewType = viewType ; }
public DynamicDialog getDynamicDialog ( ) { return ( DynamicDialog ) getDialog ( ) ; }
public FadeAnimationController ( View view , int invisibleValue , float visibleAlpha ) { this . mView = view ; this . mVisibility = view . getVisibility ( ) ; this . mInvisibleValue = invisibleValue ; this . mVisibleAlpha = visibleAlpha ; }
public void filterByMarkerType ( ArrayList < Label > selectedLabels , int i , boolean b , boolean b1 ) { presenter . filterByMarkerType ( selectedLabels , i , b , b1 ) ; }
public void die ( NamedEntityKind cause ) { super . die ( cause ) ; Badges . validateBossSlain ( Badge . BOSS_SLAIN_2 ) ; say ( StringsManager . getVar ( R . string . Tengu_Info1 ) ) ; }
public void onAnimationEnd ( ValueAnimatorCompat animation ) { if ( ! mEnded ) { mViewHolder . setIsRecyclable ( true ) ; } mEnded = true ; }
public Speakerbox get ( ) { return Preconditions . checkNotNull ( applicationComponent . getSpeakerbox ( ) , "Cannot return null from a non - @ Nullable component method" ) ; }
public DistrictListWriter districtListWriter ( Database db ) { return Mockito . mock ( DistrictListWriter . class ) ; }
public void onLogError ( String message ) throws RemoteException { addChatMessage ( new IChatMessage . InfoMessage ( IChatMessage . InfoMessage . Type . ERROR , message ) , true ) ; }
public void setMaxPings ( MaxPingsPreferenceType mMaxPings ) { this . mMaxPings = mMaxPings ; }
public MainMenuPage pressClose ( ) { onView ( withContentDescription ( getTranslatedString ( R . string . close ) ) ) . perform ( click ( ) ) ; return new MainMenuPage ( rule ) . assertOnPage ( ) ; }
public static ArrayList < Song > getSongs ( @ NonNull final Context context , final int genreId ) { return SongLoader . getSongs ( makeGenreSongCursor ( context , genreId ) ) ; }
private void retryFeaturedImageUpload ( @ NonNull SiteModel site , @ NonNull PostImmutableModel post ) { MediaModel mediaModel = mFeaturedImageHelper . retryFeaturedImageUpload ( site , post , OriginType . EDIT_POST_SETTINGS ) ; if ( mediaModel == null ) { clearFeaturedImage ( ) ; } }
public void handleInboxLongClick ( final AppCompatActivity activity ) { final RedditChangeDataManager changeDataManager = RedditChangeDataManager . getInstance ( RedditAccountManager . getInstance ( activity ) . getDefaultAccount ( ) ) ; RedditAPICommentAction . showActionMenu ( activity , null , this , null , changeDataManager , false ) ; }
public void refreshSubtypeCaches ( ) { mInputMethodInfoCache . clear ( ) ; updateCurrentSubtype ( mImmWrapper . mImm . getCurrentInputMethodSubtype ( ) ) ; updateShortcutIme ( ) ; }
public void setUp ( ) throws Exception { activityRule . launchActivity ( null ) ; }
public void onAvailable ( Network network ) { if ( alive ) sendMessage ( What . NETWORK_AVAILABLE , 0 , 0 , null ) ; }
public int getCount ( ) { return items != null ? items . size ( ) : 0 ; }
public String getHeaderName ( ) { return LocaleController . getString ( "YourName" , R . string . YourName ) ; }
public void setTranslationMode ( ) { if ( ! mIsShowingTranslation ) { mIsShowingTranslation = true ; notifyDataSetChanged ( ) ; } }
public static Message handlerMessage ( int what , Object obj ) { final Message msg = Message . obtain ( ) ; msg . what = what ; msg . obj = obj ; return msg ; }
public void onBindFooterItemViewHolder ( FooterViewHolder holder , int localPosition ) { applyFullSpanForStaggeredGridLayoutManager ( holder ) ; }
public void tearDown ( ) { polylinePresenterSubscription . unsubscribe ( ) ; }
private void animateRemoveFromFavorites ( ) { bounceAnimation ( R . drawable . ic_heart_outline_grey ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `identity` ADD COLUMN `last_connected` INTEGER" ) ; }
public static FancyAlertDialog getInstance ( ) { return instance ; }
public int onGetNextFocusId ( CustomEditText owner , NextFocusType focusType ) { return R . id . main_list_view ; }
private void updateInterCharSpace ( ) { interCharSpace = new Silence ( farnsworthDitLenMs * 3 , SAMPLE_RATE_HZ ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { menu . clear ( ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public boolean usableByHero ( ) { return quantity ( ) >= 1 && ( Dungeon . hero . getItem ( getClassName ( ) ) . valid ( ) || isEquipped ( Dungeon . hero ) ) ; }
public void run ( ) { bleManager . addExecQueueItem ( new BLEManager . ExecReadChar ( characteristic , gatt ) ) ; }
public void lockDatabase ( ) { synchronized ( databaseLock ) { close ( ) ; databaseLocked = true ; LogUtil . d ( TAG , "Locked database" ) ; } }
public void onClick ( DialogInterface dialog , int which ) { deleteDraft ( draftID , draftType ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersGridView , EmojiView . this . getMeasuredHeight ( ) ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public int getItemCount ( ) { if ( dataSet . posts == null || dataSet . posts . size ( ) == 0 ) { return 0 ; } else { return dataSet . posts . size ( ) + 1 ; } }
public void closeAsSuccess ( ) { getActivity ( ) . onBackPressed ( ) ; }
public static boolean isVideo ( String mimetype ) { return mimetype . startsWith ( "video/" ) ; }
public void checkText ( ) { String hashValue = getHashValueForTestText ( ) ; assertNotNull ( hashValue ) ; String hashFromString = hashCalculator . fromString ( getTestingText ( ) ) ; assertNotNull ( hashFromString ) ; assertEquals ( hashFromString , hashValue ) ; }
public void onClick ( DialogInterface dialog , int which ) { createKeyMapForBlock ( sector ) ; }
public void testMinimalEncoder25 ( ) throws Exception { verifyMinimalEncoding ( "AB1" , "ALPHANUMERIC ( AB1 ) , TERMINATOR ( ) " , null , false ) ; }
public void onSuccess ( ) { Log . d ( TAG , "Successfully synchronized notes for " + nextAccount . getAccountName ( ) ) ; }
public boolean fileExists ( @ NonNull Uri filePath ) { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . fileExists ( filePath ) ; }
public Map < String , ? extends BaseMetarCode > decodeToMap ( final String block ) throws MetarDecodeException { Map < String , BaseMetarCode > result = new HashMap <> ( ) ; result . put ( block , LocationCodes . LOC_ID ) ; return result ; }
public static boolean isStartNumber ( String s ) { return Character . isDigit ( s . charAt ( 1 ) ) && s . charAt ( 0 ) == 'a' ; }
public String getTermCode ( ) { return termType == null? "" : termType . getLowerCaseName ( ) ; }
public void invalidSettingReturnsCorrectResultWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "1" ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
public AboutBuilder addFeedbackAction ( String email ) { return addFeedbackAction ( email , null ) ; }
public Observable < EmptyResponse > moveDown ( long songId ) { return controlService . moveDown ( songId ) ; }
private void clearInterpolator ( View view ) { if ( mDefaultInterpolator == null ) { mDefaultInterpolator = new ValueAnimator ( ) . getInterpolator ( ) ; } view . animate ( ) . setInterpolator ( mDefaultInterpolator ) ; }
private void ensurePipPosition ( PipPosition position ) { mPipPosition = position ; mToolBarPip . ensurePosition ( position ) ; }
public Integer getCommentVerticalBarColor6 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_6 , getDefaultColor ( "#02EE6E" , "#00B925" , "#00B925" ) ) ; }
private APIResponseHandler ( Activity context ) { this . context = context ; }
public void onResponse ( String response ) { if ( ! showUnread && ! preview ) { Utility . saveCache ( getApplicationContext ( ) , user . getMeWithoutProtocol ( ) , "timeline" , response , channelId , pagerAfter ) ; } parseTimelineResponse ( response , false ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfElements_Info ) : super . desc ( ) ; }
public TeamTabBinder ( ) { super ( ) ; mInitialTab = 0 ; }
public void deliveryComplete ( IMqttDeliveryToken token ) { }
public void onChanged ( SwitchView switchView , boolean isChecked ) { IO . enableExternalRotational ( isChecked , getActivity ( ) ) ; }
public void onNegative ( MaterialDialog dialog ) { super . onNegative ( dialog ) ; disableDialog ( editor ) ; }
public int getValue ( ) { return this . value ; }
private SqueezeboxServerMock ( Starter starter ) { username = starter . username ; password = starter . password ; canRamdomplay = starter . canRandomplay ; canMusicFolder = starter . canMusicFolder ; albumsSortOrder = starter . albumsSortOrder ; }
private void savePositionInTrack ( ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit ( ) . putInt ( SAVED_POSITION_IN_TRACK , getSongProgressMillis ( ) ) . apply ( ) ; }
public void addFilteredSample ( float [ ] sample ) { System . arraycopy ( sample , 0 , ringBuffer [ inPtr ] , 0 , sample . length ) ; inPtr ++ ; nSamplesInBuffer ++ ; if ( inPtr == RINGBUFFERSIZE ) { inPtr = 0 ; } }
public void handlePush ( RoutingContext routingContext ) { routingContext . response ( ) . setStatusCode ( NO_CONTENT . code ( ) ) . end ( ) ; }
private ArrayList < IDrawerItem > getDrawerItems ( ) { return mDrawer . getOriginalDrawerItems ( ) != null ? mDrawer . getOriginalDrawerItems ( ) : mDrawer . getDrawerItems ( ) ; }
public Control getControl ( String controlType ) { if ( ! controlType . contains ( " . " ) ) { controlType = "javax . microedition . media . control . " + controlType ; } return controls . get ( controlType ) ; }
public double getDistanceFrom ( @ NonNull Info info ) { return ( double ) LocationUtil . latLngToLocation ( mLocation ) . distanceTo ( info . getFinalLocation ( ) ) ; }
public String desc ( ) { return Game . getVar ( R . string . HuntressArmor_Desc ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "neuromancers . iitbbs . iitbhubaneswar" , appContext . getPackageName ( ) ) ; }
public void setBlockID ( @ Nullable BigInteger blockID ) { this . blockID = blockID ; }
public void onFailure ( Call < PlanetaryCalendar > call , Throwable t ) { t . printStackTrace ( ) ; }
public boolean isJetpackMonitorEnabled ( ) { return mSettings . monitorActive ; }
private void setShareIntent ( Intent shareIntent ) { if ( mShareActionProvider != null ) { mShareActionProvider . setShareIntent ( shareIntent ) ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; IdlingRegistry . getInstance ( ) . register ( searchIdlingResource ) ; viewModel = of ( this ) . get ( SearchViewModel . class ) ; handleIntent ( ) ; }
public String getPublicKey ( ) { return pubkey ; }
public void stop ( ) { if ( mTimer != null ) { mTimer . cancel ( ) ; mTimer = null ; } mState = DebatingTimerState . STOPPED_BY_USER ; mAlertManager . makeInactive ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { if ( formulas . getXmlLoaderTask ( ) != null ) { outState . putString ( FILE_READING_OPERATION , FILE_READING_OPERATION ) ; formulas . stopXmlLoaderTask ( ) ; } else { formulas . writeToBundle ( outState ) ; } }
private void createShortcut ( String windowSize ) { int num = getIntent ( ) . getIntExtra ( "qs_tile" , 0 ) ; if ( num > 0 ) createQuickSettingTileShortcut ( windowSize , num ) ; else createHomeScreenShortcut ( windowSize ) ; finish ( ) ; }
public void onLocationChanged ( @ NonNull MLocation loc ) { if ( bluetooth . preferenceEnabled ) { updateLocation ( loc ) ; } }
public NetworkInfo getActiveNetworkInfo ( ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; return cm . getActiveNetworkInfo ( ) ; }
public CalculatorPresenter ( BptfApplication application ) { application . getPresenterComponent ( ) . inject ( this ) ; mTotalPrice . setCurrency ( Currency . METAL ) ; PRICE_LIST_COLUMNS [ 1 ] = Utility . getRawPriceQueryString ( application ) + " price_raw" ; }
public void render ( GameSnapshot gameSnapshot ) { GameActivityHelper . showPlayerScore ( this , gameSnapshot . getScore ( ) ) ; animatePlayerSelection ( ) ; BoardAndroidDrawer . draw ( this , gameSnapshot , gameType ) ; }
public static int formatPressureUnit ( Context context ) { switch ( AppPreferences . pressureUnits ( context ) ) { case 0 : return R . string . pressure_unit_rus ; case 2 : return R . string . pressure_unit_imp ; default : return R . string . pressure_unit_metric ; } }
private void onPreferenceScreenChangedPriv ( PreferenceFragmentCompat preferenceFragmentCompat , PreferenceScreen preferenceScreen ) { setDividerVisibility ( isDividerVisible ( ) ) ; onPreferenceScreenChanged ( preferenceFragmentCompat , preferenceScreen ) ; updatePreferenceChangedListeners ( true ) ; }
public void setImage ( String httpUrl , String filter , Drawable thumb , String ext , int size ) { setImage ( null , httpUrl , filter , thumb , null , null , size , ext , true ) ; }
public boolean retainBackBufferFromKeyframe ( ) { return false ; }
private void setClassPrefStatus ( boolean status ) { ListPreference classPref = ( ListPreference ) mainOptionFragment . findPreference ( "Klasse" ) ; classPref . setEnabled ( status ) ; classPref . setSelectable ( status ) ; }
public static void setLockedTimeZoneId ( Context context , String value ) { lockedTimeZoneId = value ; setString ( context , PREF_LOCKED_TIME_ZONE_ID , value ) ; }
public void onClick ( View v ) { actionAnimation ( ) ; Intent intent = new Intent ( self , SettingsActivity . class ) ; startActivity ( intent ) ; }
public void onClick ( View v ) { showProgress ( ) ; }
public Line getLast ( ) { return lineList . get ( lineList . size ( ) - 1 ) ; }
public String getSubTitle ( ) { return subTitle ; }
public boolean isTutorial ( ) { return isTutorial ; }
public ClientActivate createFromParcel ( Parcel source ) { return new ClientActivate ( source ) ; }
public void notifyChanged ( int position , String id ) { NoteItem newItem = RealmDb . getInstance ( ) . getNote ( id ) ; getUsedData ( ) . set ( position , newItem ) ; notifyItemChanged ( position ) ; }
public CategoryListRecyclerAdapter ( List < Category > categories ) { this . categories = categories ; }
public String desc ( ) { return String . format ( Game . getVar ( R . string . ConcreteBlock_Description ) , requiredStr ) ; }
public void onPlaybackStop ( ) { Log . d ( TAG , "onPlaybackStop : called" ) ; mMediaSession . setActive ( false ) ; stopForeground ( true ) ; }
public void destroy360container ( ) { physicsWorld . destroyContainer ( ) ; }
public void permissionGranted ( ) { editTask ( ) ; }
public MasterbarComponent clickBlogPosts ( ) { clickOn ( R . id . row_blog_posts ) ; return this ; }
public BrowseAdapter ( Activity context ) { super ( context , R . layout . media_list_item , new ArrayList < MediaBrowserCompat . MediaItem > ( ) ) ; }
public String next ( ) { if ( messageQueue . size ( ) > 0 ) { return messageQueue . get ( 0 ) ; } return null ; }
public com . google . protobuf . Any getConsensusState ( ) { if ( consensusStateBuilder_ == null ) { return consensusState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : consensusState_ ; } else { return consensusStateBuilder_ . getMessage ( ) ; } }
public void bindAdapter ( InboxAdapter a , SwipeRefreshLayout layout ) throws ExecutionException , InterruptedException { this . adapter = a ; this . refreshLayout = layout ; loadMore ( a , where , true ) ; }
public java . util . List < com . coinomi . core . protos . Protos . Key > getKeyList ( ) { return key_ ; }
public void attachView ( LoginMVP . View view ) { super . attachView ( view ) ; analyticsHelper . trackPageView ( AnalyticsHelper . VIEW_LOGIN ) ; }
public void onColorsChanged ( ) { mChangeCallback . onColorsChanged ( this ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . increase_indent ) ; }
public GeneralSettingsPage checkIfUserAndDeviceIdentityIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . user_and_device_identity_title ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public void openHierarchy ( ) { formController . getAuditEventLogger ( ) . logEvent ( AuditEvent . AuditEventType . HIERARCHY , true , clock . getCurrentTime ( ) ) ; }
public void onConfirmed ( String tag , Parcelable data ) { long id = ( ( Bundle ) data ) . getLong ( "id" ) ; doDeleteComment ( id ) ; }
public static ContextComponent getContextComponent ( ) { return mContextComponent ; }
public void onClick ( View v ) { historyActivity = ACTIVITY ; selectedSession = SESSION ; editedView = VIEW ; ACTIVITY . onEntryOpsMenu ( ) ; }
private void setImage ( Wallpaper image ) { if ( isDestroyed ( ) ) { return ; } setTitle ( image . getCopyright ( ) ) ; mNavigationHeaderCoverStoryTitleView . setText ( image . getCopyright ( ) ) ; loadMenuImage ( ) ; }
private static void setInt ( PrefKey key , int value ) { setString ( key , Integer . toString ( value ) ) ; }
private void givenModel ( WeatherInfo weatherInfo ) { mModels . add ( weatherInfo ) ; }
public EmojiFull getEmojiFull ( EmojiLite emoji ) { return this . emojiDb . getEmojiFull ( emoji . getUnicode ( ) ) ; }
public void delete ( String title , String path ) { utilsHandler . removeBookmarksPath ( title , path ) ; refreshDrawer ( ) ; }
public void setStackBlur ( int stackBlur ) { this . stackBlur = stackBlur ; }
public boolean dispatchKeyEvent ( KeyEvent event ) { if ( viewHandlesBackButton && event . getKeyCode ( ) == KeyEvent . KEYCODE_BACK ) { U . sendBroadcast ( getContext ( ) , Constants . ACTION_HIDE_START_MENU ) ; return true ; } return super . dispatchKeyEvent ( event ) ; }
public boolean onStopJob ( JobParameters job ) { return true ; }
public int helpRes ( ) { return R . string . help_community ; }
public void destroyItem ( ViewGroup container , int position , Object object ) { container . removeView ( ( ConstraintLayout ) object ) ; }
public EventSource ( int id , String title , String summary , int color ) { this . id = id ; this . title = title ; this . summary = summary ; this . color = color ; }
public void onStart ( ) { super . onStart ( ) ; subscribeAlertDialog ( ) ; subscribeMsgViewModel ( ) ; subscribeSessionStats ( ) ; subscribeNeedStartEngine ( ) ; }
public void setConsumer ( DataConsumer < V > consumer ) { mConsumer = consumer ; }
public List < RawGroupOfLesson > getGroups ( ) { return groups ; }
private String getBaseURL ( ) { return "https : }
public int hashCode ( ) { return new HashCodeBuilder ( 17 , 37 ) . append ( data ) . append ( format ) . toHashCode ( ) ; }
private boolean checkStopService ( ) { if ( downloadsApplyingParams || rescheduleDownloads ) return false ; return ! engine . hasActiveDownloads ( ) ; }
private Bitmap vectorToBitmap ( @ DrawableRes int vectorResource ) { return Util . vectorToBitmap ( this , vectorResource , 0xEE ) ; }
public FixScrollingFooterBehavior ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void onClearPressed ( View v ) { LogUtil . d ( TAG , "Clearing calculator" ) ; calc . clear ( ) ; updateUI ( ) ; }
public List < Sponsors > getSponsors ( ) { return sponsors ; }
private void startActivity ( @ NonNull Class < ? extends Activity > activityClass ) { Activity activity = getActivity ( ) ; Intent intent = new Intent ( activity , activityClass ) ; activity . startActivity ( intent ) ; }
private void updateButtonAccept ( ) { final boolean enabled = ! Util . isNullOrEmpty ( mEditNumber . getText ( ) . toString ( ) ) ; Lg . i ( LOGTAG , "updateButtonAccept enabled = " , enabled ) ; mButtonAccept . setEnabled ( enabled ) ; }
public RRError ( String title , String message , Throwable t , StatusLine httpStatus , String url ) { this . title = title ; this . message = message ; this . t = t ; this . httpStatus = httpStatus ; this . url = url ; }
public void conditionallyEnableSaveButton ( ) { if ( saveButton != null ) { saveButton . setEnabled ( viewModel . canSaveWaypoint ( ) ) ; saveButton . getIcon ( ) . setAlpha ( viewModel . canSaveWaypoint ( ) ? 255 : 130 ) ; } }
private void dispatchUpdates ( DownloadInfoUpdate newItems ) { newItems . diffResult . dispatchUpdatesTo ( this ) ; downloadInfos . clear ( ) ; downloadInfos . addAll ( newItems . downloadInfos ) ; }
public static String getSyncAppName ( Context context ) { return getString ( context , R . string . pref_key_app_for_sync , context . getString ( R . string . app_mgit ) ) ; }
private void onActionCompose ( ) { Helper . startActivity ( context , new Intent ( context , ActivityCompose . class ) . putExtra ( "action" , "new" ) . putExtra ( "answer" , answer . id ) ) ; }
public void onAnimationUpdate ( ValueAnimator animation ) { lp . height = ( int ) animation . getAnimatedValue ( ) ; last . setLayoutParams ( lp ) ; }
public SendButton ( Context context ) { super ( context ) ; this . transportOptions = initializeTransportOptions ( false ) ; ViewUtil . mirrorIfRtl ( this , getContext ( ) ) ; }
public void onConnected ( Bundle bundle ) { centerMapToCurrentLocation ( ) ; }
public static File getBackupDir ( String backupName ) { File backupDir = new File ( getExternalStoragePublicDir ( ) , backupName ) ; if ( ! backupDir . exists ( ) && backupDir . mkdirs ( ) ) { createNoMediaFile ( backupDir ) ; } return backupDir ; }
public static Uri parseDefaultFile ( Uri uri ) { if ( Utils . isNullOrEmpty ( uri . getScheme ( ) ) ) { uri = uri . buildUpon ( ) . scheme ( "file" ) . authority ( "" ) . build ( ) ; } return uri ; }
private static void runOnUI ( Runnable runnable ) { uiHandler . post ( runnable ) ; }
public void call ( ) { user . attack ( targets . get ( this ) ) ; targets . remove ( this ) ; if ( targets . isEmpty ( ) ) { user . spendAndNext ( user . attackDelay ( ) ) ; } }
public int getItemCount ( ) { return mState . list . size ( ) ; }
public void close_match_is_displayed_correctly ( ) throws IOException { isDisplayedCorrectly ( R . drawable . close , "close" , new PitchDifference ( Note . G3 , 2 . 4 ) ) ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ NonNull Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public void play ( ) { player . setPlayWhenReady ( true ) ; }
public boolean eat ( final int charToEat ) { nextNonWhitespace ( ) ; if ( ch == charToEat ) { next ( ) ; return true ; } return false ; }
public ObscureRegion ( int _startTime , float _sx , float _sy ) { this ( _startTime , _sx - DEFAULT_X_SIZE/2 , _sy - DEFAULT_Y_SIZE/2 , _sx + DEFAULT_X_SIZE/2 , _sy + DEFAULT_Y_SIZE/2 , DEFAULT_MODE ) ; }
public static void clearSearch ( boolean swapAdapters ) { filteredAdapter . clear ( ) ; if ( swapAdapters ) listView . setAdapter ( adapter ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseActiveChanged . Builder getResponseActiveChangedBuilder ( ) { bitField0_ | = 0x00800000 ; onChanged ( ) ; return getResponseActiveChangedFieldBuilder ( ) . getBuilder ( ) ; }
private PersonalKey ( Parcel in ) throws PGPException , IOException { mPair = PGP . fromParcel ( in ) ; }
public void reset ( ) { stop ( ) ; mCurrentTime = 0 ; mCurrentPeriodInfo = mSpeechFormat . getFirstPeriodInfo ( ) ; mState = DebatingTimerState . NOT_STARTED ; }
public void getCustomMediaUrlWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "" ) ; setCustomServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void appBackClick ( ) { UITools . removeFragment ( getActivity ( ) . getSupportFragmentManager ( ) , this ) ; }
public void onResume ( ) { super . onResume ( ) ; showEventEntryLayout ( ) ; getPreferenceManager ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public void setCustomFont ( TextView textView , String family ) { Typeface typeface = fontManager . get ( family , Typeface . NORMAL ) ; textView . setTypeface ( typeface ) ; }
public Object getItem ( int position ) { if ( null != mFeatures ) { return mFeatures . get ( position ) ; } return null ; }
public void selectDataAsync ( ) { new AsyncLibraryTask ( ) . execute ( ) ; }
public void setStateQueued ( boolean stateQueud ) { this . stateQueued = stateQueud ; sessionInfo . getRemoteProfile ( ) . setAddStateQueued ( stateQueud ) ; }
public void onTransitionAnimationEnd ( boolean isOpen , boolean backward ) { NotificationCenter . getInstance ( ) . setAnimationInProgress ( false ) ; if ( isOpen ) { openAnimationEnded = true ; } }
public boolean canZoomOutMoreX ( ) { return ( mScaleX > mMinScaleX ) ; }
public void onClick ( View v ) { mCallback4 . onEqualizerClicked ( ) ; }
public Builder withLabel ( String label ) { TextView labelView = ( TextView ) v . findViewById ( R . id . label ) ; labelView . setText ( label ) ; return this ; }
private long calculateNextSnoozeReminder ( Task task ) { if ( task . getReminderSnooze ( ) > DateUtilities . now ( ) ) { return task . getReminderSnooze ( ) ; } return NO_ALARM ; }
public HashMap < String , FormDetails > getFormDetailsByFormId ( ) { return formDetailsByFormId ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonEditorDialog . this . getContext ( ) , ButtonEditorDialog . this , the_button . getData ( ) . getSelectedColor ( ) , COLOR_FIELDS . COLOR_SELECTED ) ; diag . show ( ) ; }
public void add ( Drawable drawable ) { counter ++ ; mDrawables . add ( drawable ) ; }
public void setAllowDrawCursor ( boolean value ) { allowDrawCursor = value ; }
public float getPercent ( ) { return ( mCurrentTranslate - minPosition + 0f ) / ( getMaxPosition ( ) - minPosition + 0f ) ; }
public String getItem ( int position ) { return dataSet . get ( position ) ; }
private void hideEmulatedKeys ( ) { if ( keyboardAlwaysVisible == false ) { if ( keyboardGroupHider != null ) handler . removeCallbacks ( keyboardGroupHider ) ; keyboardGroup . setVisibility ( View . GONE ) ; } hideActionBarIfRequested ( ) ; }
public void execute ( LifecycleService service , Bundle args , String name ) { run ( service , service , args , name ) ; }
public void showPersonDebtDeleted ( ) { ViewUtil . showToast ( getActivity ( ) , getString ( R . string . msg_success_message_deleted ) ) ; getActivity ( ) . finish ( ) ; }
private void loadMobileApiComments ( ) { refreshComments ( 1 ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; adapter = new AtividadesAdapter ( getActivity ( ) , atividadeList ) ; }
public String desc ( ) { return Game . getVar ( R . string . Knuckles_Info ) ; }
public int getNativePixelFormat ( ) { return TYPE_INT_8888_ARGB ; }
private void parse ( ) { mProgressBar . setIndeterminate ( true ) ; mReadabilityClient . parse ( mItem . getId ( ) , mItem . getUrl ( ) , new ReadabilityCallback ( this ) ) ; }
public SummaryNumber ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public InterventionFertilizer ( Integer quantity , String unit , @ NonNull Integer intervention_id , @ NonNull Integer ferti_id ) { this . quantity = quantity ; this . unit = unit ; this . intervention_id = intervention_id ; this . ferti_id = ferti_id ; }
public UpdatePostsStarted ( ReaderPostServiceStarter . UpdateAction action ) { mAction = action ; }
public boolean addPendingAnimation ( RecyclerView . ViewHolder holder ) { resetAnimation ( holder ) ; enqueuePendingAnimationInfo ( new RemoveAnimationInfo ( holder ) ) ; return true ; }
public RevealBackgroundView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void onSaveInstanceState ( Bundle outState ) { removeMoreScreenToolbar ( ) ; removeJetpackSecurityScreenToolbar ( ) ; super . onSaveInstanceState ( outState ) ; outState . putSerializable ( WordPress . SITE , mSite ) ; setupMorePreferenceScreen ( ) ; setupJetpackSecurityScreen ( ) ; }
public static PushSingleton getInstance ( ) { if ( mInstance == null ) { Log . i ( TAG , "create instance Singleton" ) ; mInstance = new PushSingleton ( ) ; } return mInstance ; }
public void setIconSize ( float iconSize ) { this . iconSize = iconSize ; }
public static int floorMod ( int x , int y ) { return x - floorDiv ( x , y ) * y ; }
public Builder setView ( int layoutResId ) { P . mView = null ; P . mViewLayoutResId = layoutResId ; P . mViewSpacingSpecified = false ; return this ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; saveMapBoundsAndScaleFactor ( ) ; orientation = newConfig . orientation ; updatePreferencesToView ( ) ; }
public static Error deleteFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , FileTypes . FILE_TYPE_NORMAL_FLAGS ) ; }
public void setDataSet ( ArrayList < Item > dataSet ) { this . mDataSet = dataSet ; }
private boolean isInBounds ( int itemPosition ) { return itemPosition >= 0 && itemPosition < getItemCount ( ) ; }
public void getUserFavoriteVoteList ( int offset , @ NonNull User loginUser , User targetUser ) { if ( targetUser == null ) { getVoteList ( offset , EventBusController . RemoteServiceEvent . GET_VOTE_LIST_FAVORITE , loginUser ) ; } else { getPersonalFavoriteVoteList ( offset , loginUser , targetUser ) ; } }
public boolean onStopJob ( JobParameters params ) { Logger . debug ( "NotificationJobService onStopJob id : " + params . getJobId ( ) ) ; return true ; }
public final void clearSchemeDate ( ) { this . mDelegate . mSchemeDatesMap = null ; this . mDelegate . clearSelectedScheme ( ) ; mSelectLayout . update ( ) ; mMonthPager . updateScheme ( ) ; mWeekPager . updateScheme ( ) ; }
public List < DataCenter . Status > getValues ( ) { return values ; }
public void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { response . sendRedirect ( "market : }
public void testMinimalEncoder20 ( ) throws Exception { verifyMinimalEncoding ( "A123456" , "ALPHANUMERIC ( A123456 ) , TERMINATOR ( ) " , null , false ) ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { EntityIdentity i1 = prev . get ( oldItemPosition ) ; EntityIdentity i2 = next . get ( newItemPosition ) ; return i1 . equals ( i2 ) ; }
public void setText ( String text ) { mText = text != null ? text : "" ; }
public DeterministicKey findKeyFromPubKey ( byte [ ] pubkey ) { lock . lock ( ) ; try { return ( DeterministicKey ) basicKeyChain . findKeyFromPubKey ( pubkey ) ; } finally { lock . unlock ( ) ; } }
public double getBMI ( double height , double weight , boolean metric ) { if ( metric ) { height = height/100 ; return weight/ ( height*height ) ; } else { return weight/ ( height*height ) *703 ; } }
private Currency getCurrency ( ) { if ( selectedOriginCurrencyId > 0 ) { return CurrencyCache . getCurrency ( em , selectedOriginCurrencyId ) ; } if ( selectedAccount != null ) { return selectedAccount . currency ; } return Currency . EMPTY ; }
public void selectTime ( ) { TimeUtil . showTimePicker ( mContext , this , mHour , mMinute ) ; }
public static DatabaseReference getMessagesRef ( String friendId ) { return getRootReference ( ) . child ( AppRules . USER_MESSAGES ) . child ( getUserId ( ) ) . child ( friendId ) ; }
public File getSettingsFolder ( ) { return dir ; }
private SimlarServiceBroadcast ( final Type type , final Parameters parameters ) { this . mType = type ; this . mParameters = parameters ; }
public void afterTextChanged ( Editable s ) { find ( findTextField . getText ( ) . toString ( ) , false ) ; }
public void onClick ( View v ) { if ( swAutoPass . isChecked ( ) ) threadAutoPass . interrupt ( ) ; startNewWordExam ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `plain_only` INTEGER" ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_recycler_list_view , container , false ) ; }
private static boolean getBooleanPreference ( Context context , String key , boolean defaultValue ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( key , defaultValue ) ; }
public CharSequence convertResultToString ( Object resultValue ) { return ( ( HistoryItem ) resultValue ) . getUrl ( ) ; }
public void ping ( ) { }
public void setSurfaceTextureSize ( int width , int height ) { surfaceWidth = width ; surfaceHeight = height ; Intro . onSurfaceChanged ( width , height , Math . min ( surfaceWidth / 148 . 0f , surfaceHeight / 148 . 0f ) , 0 ) ; }
public TrackGroupArray getCurrentTrackGroups ( ) { return player . getCurrentTrackGroups ( ) ; }
private static int [ ] zzUnpackAction ( ) { int [ ] result = new int [ 311 ] ; int offset = 0 ; offset = zzUnpackAction ( ZZ_ACTION_PACKED_0 , offset , result ) ; return result ; }
public boolean onPreferenceClick ( Preference preference ) { PreferenceFragmentPermissionsDispatcher . backupFavoritesWithCheck ( PreferenceFragment . this ) ; return true ; }
public void toggleContentWarning ( ) { contentWarningButton . toggle ( ) ; }
public void onChanged ( @ Nullable final StoryListInfo metadata ) { storyCoverAdapter . setMetadata ( metadata ) ; }
public void uploadNote ( ) { upload ( Constants . DIR_NOTES_SD ) ; }
public void onFailure ( Call < String > call , Throwable error ) { onFailure . call ( localPost , new ApiFailure <> ( error ) ) ; }
public void getDetails ( ) { getLastQuery ( ) ; getCheckDistance ( ) ; getLastNotificationTime ( ) ; getLastQueryTime ( ) ; getQueryDistance ( ) ; getAccuracy ( ) ; getLocation ( ) ; getReason ( ) ; }
public void onDestroy ( ) { Logger . logVerbose ( LOG_TAG , "onDestroy" ) ; ShellUtils . clearTermuxTMPDIR ( true ) ; actionReleaseWakeLock ( false ) ; if ( ! mWantsToStop ) killAllTermuxExecutionCommands ( ) ; runStopForeground ( ) ; }
private double sqinchTosqcm ( double num ) { return num * 6 . 4516 ; }
private boolean autostartFirstApp ( ) { return filtered . size ( ) == 1 && appsManager . getPkg ( ) . size ( ) > 1 && autostartSpinner . isOn ( ) ; }
public static PostSort valueOfOrNull ( @ NonNull final String string ) { try { return valueOf ( General . asciiUppercase ( string ) ) ; } catch ( final IllegalArgumentException e ) { return null ; } }
public void draw ( Canvas canvas ) { for ( Drawable drawableItem : drawables ) { drawableItem . draw ( canvas ) ; } }
private void updateTitle ( ) { updateTitle ( mBottomNav . getCurrentPosition ( ) ) ; }
public UploadService ( ) { super ( ) ; }
private void writeMetar ( final String ICAO ) { Thread myThread = new Thread ( new Runnable ( ) { @ Override public void run ( ) { getMetar ( ICAO ) ; stopRefreshing ( ) ; } } ) ; myThread . start ( ) ; }
public MainActivityPagerAdapter ( Context context , FragmentManager fm ) { super ( fm ) ; this . context = context ; }
public boolean isPhone ( ) { return layoutVariant == 1 || layoutVariant == 2 ; }
public File getPrivateKeyFile ( ) { return new File ( getSshDir ( ) , PRIVATE_KEY_FILE ) ; }
public ShareUtil ( Context context ) { _context = context ; _chooserTitle = "➥" ; }
public void onClick ( DialogInterface dialog , int which ) { Uri uri = Uri . parse ( etLink . getText ( ) . toString ( ) ) ; Helper . view ( getContext ( ) , getActivity ( ) , uri , false ) ; }
public void setCanShowReplyMenu ( boolean canShowReplyMenu ) { this . canShowReplyMenu = canShowReplyMenu ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; BUS = EventBus . getDefault ( ) ; BUS . register ( this ) ; }
public void onClick ( View view ) { IonDownloadMethod ( image . getLarge ( ) ) ; mBottomSheetDialog . dismiss ( ) ; }
private void initData ( ) { Intent i = getIntent ( ) ; number = i . getStringExtra ( Constants . INTENT_ID ) ; }
public Item degrade ( ) { DR -= tier ; STR ++ ; return super . degrade ( ) ; }
public static String getBalloonTheme ( Context context ) { if ( sBalloonTheme == null ) sBalloonTheme = getString ( context , "pref_balloons" , context . getString ( R . string . pref_default_balloons ) ) ; return sBalloonTheme ; }
public Sitelinks ( Sitelinks . Builder builder ) { this . wikidataLink = builder . wikidataLink ; this . wikipediaLink = builder . wikipediaLink ; this . commonsLink = builder . commonsLink ; }
private void openCustomPasswordGeneration ( ) { Fragment f = new CustomPasswordGeneration ( ) ; startFragment ( f , true ) ; selectNavigationDrawerItem ( R . id . nav_custom_password_generation ) ; }
public boolean getRecordAudioPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . getRecordAudioPreferenceKey ( ) , true ) ; }
public Optional < UploadObject > getCurrent ( ) { synchronized ( this ) { return Optional . wrap ( current ) ; } }
public void joinFieldsShouldJoinWhenListIsValid ( ) { String fieldList [ ] = { "A" , "B" , "C" } ; assertEquals ( "A" + delimiter + "B" + delimiter + "C" , Utils . joinFields ( fieldList ) ) ; }
public void setRotateUp ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotation ( - 20 * fraction ) ; setPivotY ( 0 ) ; setPivotX ( getWidth ( ) / 2 ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; Log . w ( "KeyCachingService" , "KCS Is Being Destroyed ! " ) ; handleClearKey ( ) ; }
public void setLoans ( ArrayList < LoanCollectionSheet > loans ) { this . loans = loans ; }
public HistoricalRecordModule ( int historicalRecordId ) { this . historicalRecordId = historicalRecordId ; }
public long getTimestampOffsetUs ( ) { return firstSampleTimestampUs == DO_NOT_OFFSET ? 0 : lastSampleTimestamp == C . TIME_UNSET ? C . TIME_UNSET : timestampOffsetUs ; }
public void read ( DataInputStream dataInputStream ) throws Exception { progress = dataInputStream . readFloat ( ) ; }
public void run ( ) { game . setScreen ( new PlayScreen ( game ) ) ; }
public void onBackPressed ( ) { if ( sv . getVisibility ( ) != View . GONE ) { sv . setIconified ( true ) ; sv . setVisibility ( View . GONE ) ; } else super . onBackPressed ( ) ; }
public Integer getFeeChargesAtDisbursementCharged ( ) { return feeChargesAtDisbursementCharged ; }
public ChatModel ( String senderID , String receiverID , String message , String timeStamp ) { this . senderID = senderID ; this . receiverID = receiverID ; this . message = message ; this . timeStamp = timeStamp ; }
public void updateDrawState ( TextPaint ds ) { }
public void onCloseContextualActionMenu ( ) { mBookmarksAdapter . uncheckAll ( ) ; }
private Typeface getTypeface ( int position ) { return AssetsUtil . getTypeface ( ActivityCreateNote . this , position ) ; }
public void onClick ( DialogInterface dialog , int index ) { user = new Accounts ( getApplicationContext ( ) ) . getUser ( accounts . get ( index ) , false ) ; sendBasePost ( null ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; errorMessage = getArguments ( ) . getString ( LibraryActivity . ERROR_MESSAGE ) ; }
public void getOptions ( ) { assertNotNull ( mPresenter . getSublimePickerOptions ( ) ) ; }
public int compare ( ServiceRequest serviceRequest , ServiceRequest t1 ) { return serviceRequest . getUpdatedDatetime ( ) . compareTo ( t1 . getUpdatedDatetime ( ) ) ; }
public String getPreviewRotationPref ( ) { return sharedPreferences . getString ( PreferenceKeys . getRotatePreviewPreferenceKey ( ) , "0" ) ; }
public void clicked ( InputEvent event , float x , float y ) { game . setScreen ( new MenuScreen ( game ) ) ; }
private void bindTo ( EntityLog log ) { tvTime . setText ( DF . format ( log . time ) ) ; tvData . setText ( log . data ) ; }
public void run ( ) { JNI . onToggleButtonClicked ( m3drRunning ) ; }
public JSONObject get ( long did ) { return get ( did , true ) ; }
private List < Form > queryForForms ( String selection , String [ ] selectionArgs ) { try ( Cursor cursor = queryAndReturnCursor ( null , selection , selectionArgs , null , null ) ) { return getFormsFromCursor ( cursor , formsPath , cachePath ) ; } }
public void setUpWebServer ( ) throws IOException { webServer = new MockWebServer ( ) ; webServer . enqueue ( new MockResponse ( ) . setBody ( TestHelper . readTestAsset ( "plain_test . html" ) ) ) ; }
public void onShowComment ( ) { mViewPager . setCurrentItem ( 1 , true ) ; }
public void run ( ) { ImageHandler . load ( ProfileEditActivity . this , profileCoverImageView , imagePath ) ; showCoverImageProgress ( ) ; }
public void addConnectGattCallback ( BleGattCallback callback ) { bleGattCallback = callback ; }
public void onClick ( View view ) { scrollRecycleViewToPosition ( 0 ) ; refreshPosts ( ) ; }
public void onLost ( Network network ) { super . onLost ( network ) ; Log . w ( TAG , "onLost ( ) " ) ; checkState ( ) ; }
public void onPastPosts ( ) { final SessionListDialog sessionListDialog = SessionListDialog . newInstance ( controller . getUri ( ) , controller . getSession ( ) , SessionChangeType . POSTS ) ; sessionListDialog . show ( getFragmentManager ( ) , "SessionListDialog" ) ; }
public static ArrayAdapter < String > createDropDownAdapter ( Context context , LocalizableEnum [ ] values ) { String [ ] items = getLocalizedValues ( context , values ) ; return new ArrayAdapter < String > ( context , android . R . layout . simple_spinner_dropdown_item , items ) ; }
public void onNetworkError ( String error ) { Toast toast = Toast . makeText ( this . getContext ( ) , error , Toast . LENGTH_SHORT ) ; toast . show ( ) ; }
public boolean hasAmount ( ) { return getAmount ( ) != null ; }
public static void showFaqDialog ( final Context context ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; i . setData ( Uri . parse ( "http : context . startActivity ( i ) ; }
public Long getRoamingType ( ) { return roamingType ; }
public void run ( ) { mRequestHandle . cancel ( true ) ; }
public void getCourseSuccess ( ) { courseAdapter . setCourseList ( ) ; courseAdapter . notifyDataSetChanged ( ) ; }
public AuthUserAPIDataSource ( @ NonNull Network network , @ NonNull BasicCache cache ) { this . network = network ; this . cache = cache ; }
private void getPrefs ( ) { LegendsPreferences legendsPrefs = LegendsPreferences . getInstance ( getContext ( ) ) ; prefsLang = legendsPrefs . getLangPref ( ) ; prefsNormalization = legendsPrefs . usingNormalization ( ) ; prefsWildcardOn = legendsPrefs . usingWildcards ( ) ; }
public void startActivityForResult ( Intent intent , int requestCode ) { Notes . updateLastInteraction ( ) ; super . startActivityForResult ( intent , requestCode ) ; }
public int getColumnCount ( ) { return super . getColumnCount ( ) + 1 ; }
public Cursor getAllRows ( ) { return getAllRows ( null ) ; }
public RecyclerViewGenreAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . recyclerview_genre_item , parent , false ) ; return new RecyclerViewGenreAdapter . ViewHolder ( view ) ; }
public boolean validDatabase ( ) { return mDatabase != null && mDatabase . isOpen ( ) ; }
public void onClick ( View view ) { m_GameBoards . movePlaneLeft ( ) ; }
public void attach ( Shader shader ) { GLES20 . glAttachShader ( handle , shader . handle ( ) ) ; }
private void getTrainsSymbol ( ) { List < Train > list = Settings . allTrains ; for ( Train train : list ) { mTcpClient . getTrainSymbol ( train . getId ( ) ) ; } }
private static void UpdateModule ( MoodleModule old_module , MoodleModule new_module ) { old_module = new_module ; old_module . save ( ) ; }
public Socket createSocket ( InetAddress address , int port , InetAddress localAddress , int localPort ) throws IOException { return patch ( delegate . createSocket ( address , port , localAddress , localPort ) ) ; }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , TestListActivity . class ) ; startActivityForResult ( i , 0 ) ; }
public void setMainActivityIsVisible ( boolean mainActivityIsVisible ) { this . mainActivityIsVisible = mainActivityIsVisible ; }
public NonLayerDataAdapter ( NonLayerPresenter p ) { super ( ) ; presenter = p ; }
private SQLiteDatabase getSqLiteDatabase ( ) { if ( sqLiteDatabase == null ) { sqLiteDatabase = databaseHelper . getWritableDatabase ( ) ; } return sqLiteDatabase ; }
public void open ( ) { db = sqlDataBase . getWritableDatabase ( ) ; }
public void onCompleted ( GestureDescription gestureDescription ) { Log . i ( "tone" , "onCompleted" ) ; mMutex = false ; super . onCompleted ( gestureDescription ) ; }
public static void datachanged ( int adaptorPosition2 ) { adaptorPosition = adaptorPosition2 ; }
public Patch getPatch ( ) { return patch ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean b ) { edited = true ; enable = b ; }
public Uri insert ( @ NonNull Uri arg0 , ContentValues arg1 ) { Log . w ( TAG , "insert ( ) called" ) ; return null ; }
public void testEncodeAuto ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "ABCD" , Compaction . AUTO , StandardCharsets . UTF_8 ) ; assertEquals ( "\u039f\u001A\u0385ABCD" , encoded ) ; }
private void onUndo ( Pair < Integer , ToDo > undoObj ) { textEmpty . setVisibility ( View . GONE ) ; mToDoListAdapter . insertAt ( undoObj . first , undoObj . second ) ; }
public void onClick ( View v ) { ( ( BaseActivity ) getActivity ( ) ) . onChoiceNet ( CRYTO_MAIN ) ; getDialog ( ) . dismiss ( ) ; }
public void onCancelled ( GestureDescription gestureDescription ) { Log . i ( "tone" , "onCancelled" ) ; mMutex = false ; super . onCancelled ( gestureDescription ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; getChannelParticipants ( 0 , 200 ) ; return true ; }
public static int getTileColor ( ) { if ( Settings . colorMode == Constants . COLOR_MODE_DAY ) { return tilesDay [ Settings . tileColor ] ; } else { return tilesNight [ Settings . tileColor ] ; } }
public void compare_WhenFirstNameIsLower_ReturnLessThanZero ( ) { int result = sut . compare ( event1 , event2 ) ; assertThat ( result , lessThan ( 0 ) ) ; }
public static UserForumFragment newInstance ( ) { return new UserForumFragment ( ) ; }
public DeviceListLoader ( Context context , TextSecureAccountManager accountManager ) { super ( context ) ; this . accountManager = accountManager ; }
public void onReply ( int position ) { super . reply ( notifications . get ( position ) . getAsRight ( ) . getStatus ( ) ) ; }
public IndexedTreeSet ( SortedSet < E > s ) { this ( s . comparator ( ) ) ; addAll ( s ) ; }
public void showOnScreenKeyboard ( boolean show ) { listener . preventSoftKeyboardFromShowingUp ( editText , show ) ; TransitionManager . beginDelayedTransition ( container ) ; keyboard . setVisibility ( show ? View . VISIBLE : View . GONE ) ; }
public boolean isSelected ( int position ) { return getSelectedItems ( ) . contains ( position ) ; }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new level2 ( game ) ) ; }
private AnimatablePointValue ( List < Keyframe < PointF >> keyframes ) { super ( keyframes ) ; }
public void clearVariables ( ) { editTitle = "" ; editDueDate = "" ; editAppBarTitle = "New Task" ; editDifficulty = "" ; editTags = "" ; editTimeToComplete = 0 . 0 ; editPreviousTask = null ; }
public void setOuterShapeColor ( int outerShapeColor ) { this . outerShapeColor = outerShapeColor ; invalidate ( ) ; }
public void onStart ( ) { super . onStart ( ) ; subscribeTorrentInfo ( ) ; subscribeAlertDialog ( ) ; subscribeMsgViewModel ( ) ; }
public String getStringValue ( ) { return mSensorType . getMyFormater ( ) . format ( getValue ( ) ) ; }
public void onScrubStart ( TimeBar timeBar , long position ) { }
public AppModule ( DigitalismaApplication application ) { this . application = application ; }
public void trackChanged ( Track track , int lengthInMillis ) { progressBar . setMax ( lengthInMillis ) ; duration . setText ( ConvertToMinutes ( lengthInMillis ) ) ; tp . playlist . preferences . set ( Keys . LAST_TRACK_PLAYED , track . GetSrc ( ) ) ; }
public void removeFromFavourite ( BookCollectionInfo bookCollectionInfo , BooksCollection booksCollection ) { removeFromCollection ( bookCollectionInfo , booksCollection ) ; if ( bookCollectionsControllerCallback != null ) { bookCollectionsControllerCallback . notifyBookCollectionCahnged ( booksCollection ) ; } }
public MultiDeviceBlockedUpdateJob ( Context context ) { super ( context , JobParameters . newBuilder ( ) . withNetworkRequirement ( ) . withMasterSecretRequirement ( ) . withGroupId ( MultiDeviceBlockedUpdateJob . class . getSimpleName ( ) ) . create ( ) ) ; }
public void onCommentStatusChanged ( CommentStatus newStatus ) { mCommentStatus = newStatus ; }
public com . google . protobuf . Any . Builder getHeaderBuilder ( ) { onChanged ( ) ; return getHeaderFieldBuilder ( ) . getBuilder ( ) ; }
public void cancel ( ) { running = false ; interrupt ( ) ; delegate . onCancelled ( ) ; Log . i ( TAG , "interrupted" ) ; }
public boolean onKeyUp ( int keyCode , KeyEvent msg ) { return _ui . doKeyUp ( keyCode , msg ) ; }
public State ( List < JSONObject > entries ) { super ( false ) ; _entries = entries ; }
public NoteHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { LayoutInflater inflater = LayoutInflater . from ( parent . getContext ( ) ) ; return new NoteHolder ( NoteListItemBinding . inflate ( inflater , parent , false ) . getRoot ( ) , mEventListener ) ; }
public void onAnimationUpdate ( ValueAnimator animator ) { bgScale = ( float ) animator . getAnimatedValue ( ) ; }
public void cancel ( ) { MsgManager . getInstance ( ) . clearMsg ( this ) ; }
public boolean onCallback ( Void result ) { Tool . logInfo ( "Retry to get draw overlay permission" ) ; checkDrawOverlayPermission ( ) ; return false ; }
public boolean onLongClick ( View v ) { currentCalculation += " ! " ; displayCalculation += " ! " ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; return true ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . DeterministicKey prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
private AnimatableColorValue ( List < Keyframe < Integer >> keyframes ) { super ( keyframes ) ; }
private void startBluetoothScan ( ) { this . miBand2Scanner = new MiBandScanner ( ) ; this . miBand2Scanner . startScan ( scanCallback ) ; }
public void asked ( ) { pref . edit ( ) . putBoolean ( ASKED , true ) . commit ( ) ; }
public static Rime get ( ) { return get ( false ) ; }
private Task taskFromSimpleTask ( SimpleTask simpleTask ) { if ( simpleTask == null ) { Log . d ( tag , "taskFromActionRequest ( ) request is null" ) ; return null ; } return simpleTask : : run ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { checkScroll ( ) ; checkStickersTabY ( recyclerView , dy ) ; }
public boolean isFinished ( ) { return mFinished ; }
public CsvWriter ( FileHandle handle ) { mHandle = handle ; }
public void removeEmptyView ( ) { animateViews ( false , emptyViewHeader , emptyViewImage , emptyViewText ) ; }
public IActivePlayer startPlayback ( PreparedPlayableFileQueue preparedPlaybackQueue , final long filePosition ) throws IOException { close ( ) ; playlistPlayer = new PlaylistPlayer ( preparedPlaybackQueue , filePosition ) ; activePlayer = new ActivePlayer ( playlistPlayer , volumeManagement ) ; return activePlayer ; }
public void selectedPhotosChanged ( ) { if ( photoPickerBottomLayout != null ) { photoPickerBottomLayout . updateSelectedCount ( selectedPhotos . size ( ) + selectedWebPhotos . size ( ) , true ) ; } }
public ColorViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ColorViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_color , parent , false ) ) ; }
public void startVisit ( ) { if ( patient . getDead ( ) ) { ToastUtil . error ( getString ( R . string . cannot_start_visit_for_deceased ) ) ; } else { ( ( PatientDashboardVisitsPresenter ) mPresenter ) . startVisit ( ) ; } }
public void onClick ( View v ) { Intent galleryIntent = new Intent ( ) ; galleryIntent . setAction ( Intent . ACTION_GET_CONTENT ) ; startActivityForResult ( galleryIntent , GALLERY_REQUEST ) ; }
public SharedPreferencesUtil getSharedPreferences ( ) { if ( sharedPreferencesUtil == null ) { sharedPreferencesUtil = new SharedPreferencesUtil ( ) ; } return sharedPreferencesUtil ; }
public static String getLocalNumber ( Context context ) { return getStringPreference ( context , LOCAL_NUMBER_PREF , "No Stored Number" ) ; }
public void setCorrectAnswers ( float correctAnswers ) { this . correctAnswers = correctAnswers ; updateAnswers ( ) ; }
public boolean isPermissionNeeded ( Context context , String permission ) { return getSettings ( ) . getResultsStorage ( ) == null && PermissionsUtil . isPermissionNeeded ( context , permission ) ; }
public CollectionRecyclerViewAdapter ( ArrayList < BooksCollection > bookCollections , BookCollectionsController bookCollectionsController ) { this . bookCollections . addAll ( bookCollections ) ; this . bookCollectionsController = bookCollectionsController ; }
public FreeStation ( String _stationNumber , boolean hasDAO ) { this ( _stationNumber , 0 . 0 , hasDAO ) ; }
private void getComics ( ) { mComics = Storage . getStorage ( getActivity ( ) ) . listComics ( mPath ) ; filterContent ( ) ; }
public com . google . protobuf . Any . Builder getPubKeyBuilder ( ) { onChanged ( ) ; return getPubKeyFieldBuilder ( ) . getBuilder ( ) ; }
public static DeletePlaylistDialog create ( Playlist playlist ) { ArrayList < Playlist > list = new ArrayList <> ( ) ; list . add ( playlist ) ; return create ( list ) ; }
public Fragment ( ) { }
public static boolean checkSelfPermission ( Context context , String permission ) { return ContextCompat . checkSelfPermission ( context , permission ) != android . content . pm . PackageManager . PERMISSION_GRANTED ; }
public void addToHistory ( Integer id , String word ) { addToWords ( id , word , HISTORY_KEY , 30 ) ; }
public static float getOneDps ( Context context ) { if ( oneDPs !=- 1 ) return oneDPs ; oneDPs = getPixelsFromDPs ( ( Activity ) context , 1 ) ; return oneDPs ; }
public NewsfeedCommentsPresenter ( int accountId , @ Nullable Bundle savedInstanceState ) { super ( accountId , savedInstanceState ) ; this . data = new ArrayList <> ( ) ; this . interactor = Injection . provideNewsfeedInteractor ( ) ; loadAtLast ( ) ; }
public LiveData < Resource < MovieAndTrailers >> getResult ( ) { return result ; }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable String label , @ NonNull Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
private void clearUiVisibilityListener ( ) { mViewPager . setOnSystemUiVisibilityChangeListener ( null ) ; }
public DraftsAdapter ( Context context ) { this . mContext = context ; drafts = new ArrayList <> ( ) ; draftsHelper = new DraftsHelper ( mContext ) ; }
public void onClick ( final DialogInterface dialog , final int which ) { action ( activity , comment , RedditAPI . RedditAction . REPORT , changeDataManager ) ; }
public int getMovementFlags ( RecyclerView recyclerView , RecyclerView . ViewHolder viewHolder ) { final int dragFlags = ItemTouchHelper . UP | ItemTouchHelper . DOWN | ItemTouchHelper . LEFT | ItemTouchHelper . RIGHT ; return makeMovementFlags ( dragFlags , 0 ) ; }
public long getLong ( @ NonNull String key ) throws ItemNotFoundException , WrongTypeException { return 0 ; }
public void run ( ) { Tool . visibleViews ( _appDrawerIndicator ) ; Tool . invisibleViews ( _homeActivity . getDesktop ( ) ) ; _homeActivity . updateDesktopIndicator ( false ) ; _homeActivity . updateDock ( false ) ; _homeActivity . updateSearchBar ( false ) ; }
public static NetworkStateViewHolder create ( ViewGroup parent , MoviesViewModel viewModel ) { LayoutInflater layoutInflater = LayoutInflater . from ( parent . getContext ( ) ) ; ItemNetworkStateBinding binding = ItemNetworkStateBinding . inflate ( layoutInflater , parent , false ) ; return new NetworkStateViewHolder ( binding , viewModel ) ; }
private void initVars ( ) { pm = new PreferenceManager ( getApplicationContext ( ) ) ; setRequestedOrientation ( ActivityInfo . SCREEN_ORIENTATION_NOSENSOR ) ; }
public void setRotateRight ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotation ( - 20 * fraction ) ; setPivotX ( getWidth ( ) ) ; setPivotY ( getHeight ( ) / 2 ) ; }
public ArrayList < MaterialColorInfo > getMaterialColorInfoList ( ) { return this . materialColorInfoList ; }
public AccountHeader withCompactStyle ( boolean compactStyle ) { this . mCompactStyle = compactStyle ; return this ; }
public void loadImageWithoutPlaceHolder ( int drawable , ImageView target ) { Picasso . with ( mContext ) . load ( drawable ) . into ( target ) ; }
public void forceRefreshData ( ) { cards = new ArrayList < Parcelable > ( ) ; initData ( ) ; initRecyclerAdapter ( ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( LoginListActivity . this , SettingsActivity . class ) ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonSetEditor . this . getContext ( ) , ButtonSetEditor . this , newsettings . getLabelColor ( ) , COLOR_FIELDS . COLOR_LABEL ) ; diag . show ( ) ; }
public void setData_updatesWidgetDisplayedAnswer ( ) { GeoShapeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( answer ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) . toString ( ) , answer ) ; }
public MenuInflater getMenuInflater ( ) { return getDelegate ( ) . getMenuInflater ( ) ; }
public void createRandomHelpDialog ( Activity activity , String tag ) { int rand = ( int ) ( Math . random ( ) * numOfTipDialogs ) ; createTipDialog ( activity , rand , tag , true ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; if ( ! ( activity instanceof Callbacks ) ) { throw new IllegalStateException ( "Activity must implement fragment's callbacks . " ) ; } mCallbacks = ( Callbacks ) activity ; }
public void onClick ( View v ) { toggleFollowStatus ( v ) ; }
public void onEventsLoaded ( EventList data ) { view . insertList ( data . list ) ; }
public ListAdapterExpertises generateAdapter ( List < ExpertisesUsers > list ) { return new ListAdapterExpertises ( getContext ( ) , list ) ; }
public ScalingImageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . menu_app_settings : AppSettingsActivity . Launch ( this ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
private static int [ ] zzUnpackTrans ( ) { int [ ] result = new int [ 15318 ] ; int offset = 0 ; offset = zzUnpackTrans ( ZZ_TRANS_PACKED_0 , offset , result ) ; return result ; }
public CustomAnswerPercent ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; }
public BlurViewFacade setBlurAutoUpdate ( final boolean enabled ) { blurView . getViewTreeObserver ( ) . removeOnPreDrawListener ( drawListener ) ; if ( enabled ) { blurView . getViewTreeObserver ( ) . addOnPreDrawListener ( drawListener ) ; } return this ; }
public void onFriendListCreated ( final Core lc , final FriendList linphoneFriendList ) { Lg . w ( "onFriendListCreated : linphoneFriendList = " , linphoneFriendList ) ; }
public static boolean isTempProfile ( ) { return mLastConnectedVpn == tmpprofile ; }
public void setLabel ( @ Nullable String label ) { this . label = label ; }
public static String numberToString ( Number number ) { try { return org . json . JSONObject . numberToString ( number ) ; } catch ( org . json . JSONException e ) { throw new RuntimeException ( e ) ; } }
private void onUpdateClick ( ) { binding . refreshLayout . setRefreshing ( true ) ; UpdateService . startManualUpdate ( this ) ; }
public ReaderWebView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( ) ; }
public < T > void set ( Key < T > key , T object ) { SharedPreferencesAccess . putValue ( context , key , object ) ; notify ( key ) ; }
public void onPaintingClick ( int position ) { animator . enter ( position , true ) ; }
public void updateDatabase ( ) { db . updateRecord ( new ContentValues ( ) , DatabaseManager . tables [ DatabaseManager . PRODUCT ] , tbl_product_fields , this . getRecord ( ) ) ; }
public static Class < ? extends Activity > getActivity ( ) { return mNotificationActivity ; }
private String getComparableName ( ) { Contact contact = getContact ( ) ; if ( contact != null ) { return contact . getDisplayName ( ) ; } else { String name = getName ( ) ; return name == null ? "" : name ; } }
public AdapterObserver ( Adapter < D , ? > adapter ) { this . adapter = adapter ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return mHolder . onCreateFooterItemViewHolder ( parent , viewType ) ; }
public void set_fdWrite ( int addr , int value ) { macWrite ( 0x118 , addr ) ; macWrite ( 0x119 , value ) ; }
public String getUrl ( ) { return url ; }
public void onPuzzleSolved ( ) { if ( mShowTime ) { mGameTimer . stop ( ) ; } mSudokuBoard . setReadOnly ( true ) ; if ( mSudokuGame . mUsedSolver ) { showDialog ( DIALOG_USED_SOLVER ) ; } else { showDialog ( DIALOG_WELL_DONE ) ; } }
private MinimalEncoder ( ) { assert false ; }
private float pixelsToSp ( float px ) { float scaledDensity = getResources ( ) . getDisplayMetrics ( ) . scaledDensity ; return px/scaledDensity ; }
public void onClick ( View v ) { if ( ! songsManager . queue ( ) . isEmpty ( ) ) { MediaControllerCompat . getMediaController ( getActivity ( ) ) . getTransportControls ( ) . play ( ) ; } }
public void showGenericError ( ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_generic ) , getString ( R . string . dialog_error_message_generic ) ) ; }
public void onLaserSync ( @ NonNull LaserSyncEvent event ) { listAdapter . populateItems ( ) ; }
public int getItemCount ( ) { return getSActivity ( ) . mAllValidators . size ( ) ; }
public List < StorageDomain > fire ( ) { if ( isV3Api ) { return mapToEntities ( restClient . getStorageDomainsV3 ( ) ) ; } return mapToEntities ( restClient . getStorageDomainsV4 ( ) ) ; }
public SavedState createFromParcel ( Parcel in , ClassLoader loader ) { return new SavedState ( in , loader ) ; }
public Builder setCustomView ( @ NonNull View view ) { bottomSheet . customView = view ; return this ; }
public int getItemCount ( ) { return getTabsManager ( ) . size ( ) ; }
public static double getCurrentLatitude ( ) { if ( getCurrentLocationInfo ( ) != null ) { return getCurrentLocationInfo ( ) . getLatitude ( ) ; } else { return 0 ; } }
public String getPath ( ) { if ( ! isRootRelativePath ( ) ) return "/" + relativeDirectory ; else return "" ; }
public String getModel ( ) { return model ; } ;
public AboutBuilder addTwitterLink ( String user ) { return addLink ( R . mipmap . twitter , R . string . twitter , util . openTwitter ( user ) ) ; }
public boolean isLongPressDragEnabled ( ) { return ModeManager . getMode ( ) == Mode . Edit ; }
public RtlViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . RequestDownloadSongs prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
private FanartTVProvider ( final Context context ) { mRequestQueue = LimitingRequestQueue . getInstance ( context ) ; }
public void onDestroy ( ) { Log . d ( "DESTROY" , "DESTROY" ) ; if ( serverSocket != null ) { try { serverSocket . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } stopServer ( ) ; }
public void onClick ( View view ) { Integer newCurrentProgress = habit . getCurrentProgress ( ) + 1 ; currentProgress . setText ( newCurrentProgress . toString ( ) ) ; habit . setCurrentProgress ( newCurrentProgress ) ; updateCurrentProgress ( ) ; controller . updateHabit ( habit ) ; }
public IconLabelItem withIconPadding ( Context context , int iconPadding ) { _iconPadding = Tool . dp2px ( iconPadding ) ; return this ; }
public boolean onPreferenceClick ( Preference preference ) { Log . i ( "Preferences" , "about clicked" ) ; startActivity ( new Intent ( NadgetSettings . this , AboutNadget . class ) ) ; return true ; }
public PathItemView ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( ) ; }
private void handleLoadAllTeamsError ( Throwable throwable ) { mRxAllTeamsCacheHelper . clearCache ( ) ; getMvpView ( ) . setAllTeamsProgress ( false ) ; getMvpView ( ) . showError ( mErrorHandler . getMessage ( throwable ) ) ; }
public static String getSyncCommand ( ) { return getString ( R . string . pref_key_sync_command , null ) ; }
public void setCompositionDuration ( long compositionDuration ) { this . compositionDuration = compositionDuration ; updateValues ( ) ; }
public void setDate ( @ NonNull String date ) { this . date = date ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; manager = requireActivity ( ) . getSupportFragmentManager ( ) ; preferences = PreferenceManager . getDefaultSharedPreferences ( requireContext ( ) ) ; }
public Cursor rawQuery ( String query , String [ ] selectionArgs ) { mSQLiteDatabase = mSqliteHelper . getWritableDatabase ( ) ; return mSQLiteDatabase . query ( query , selectionArgs ) ; }
public void onReceive ( final Context context , final Intent intent ) { setColorsFromPhaseName ( ) ; }
private void setFirebase ( ) { FirebaseCrashlyticsProvider . setEnabled ( this ) ; FirebaseAnalyticsProvider . setEnabled ( this ) ; }
public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( String node : this . nodes ) { sb . append ( node ) . append ( " ; " ) ; } return sb . toString ( ) ; }
public static com . coinomi . core . protos . Protos . TransactionConfidence parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public boolean hasResponsePlaylistSongs ( ) { return ( ( bitField0_ & 0x00080000 ) == 0x00080000 ) ; }
public static void shareVerses ( Activity activity , List < QuranText > verses ) { String text = getShareText ( activity , verses ) ; shareViaIntent ( activity , text , R . string . share_ayah_text ) ; }
public void onResourceReady ( BitmapPaletteWrapper resource , GlideAnimation < ? super BitmapPaletteWrapper > glideAnimation ) { super . onResourceReady ( resource , glideAnimation ) ; onColorReady ( VinylMusicPlayerColorUtil . getColor ( resource . getPalette ( ) , getDefaultFooterColor ( ) ) ) ; }
public void onDownButtonClicked ( ) { mWebView . scrollToBottom ( ) ; }
public void testShortShiftJIS1 ( ) { doTest ( new byte [ ] { ( byte ) 0x8b , ( byte ) 0xe0 , ( byte ) 0x8b , ( byte ) 0x9b , } , "SJIS" ) ; }
public void forEachObject ( final Consumer < JsonBufferedObject > consumer ) { for ( final JsonValue value : mContents ) { consumer . consume ( value . asObject ( ) ) ; } }
public void setShadowColor ( int dividerColor ) { this . mShadowColor = dividerColor ; initElements ( ) ; }
public int getLevel ( ) { return level ; }
public void sideInit ( Side side ) { if ( side != null ) Side . getEventBus ( ) . register ( this ) ; }
private static void UpdateCourse ( MoodleCourse old_course , MoodleCourse new_course ) { old_course . setFullname ( new_course . getFullname ( ) ) ; old_course . setShortname ( new_course . getShortname ( ) ) ; old_course . save ( ) ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_num_1 . getText ( ) . toString ( ) ) ; }
public void init ( ExtractorOutput output ) { TrackOutput trackOutput = output . track ( 0 ) ; output . endTracks ( ) ; streamReader . init ( output , trackOutput ) ; }
public int compareTo ( SideTagInfo another ) { return AndroidUtils . longCompare ( id , another . id ) ; }
private static List < MultiProfile > loadProfiles ( @ NonNull Context context ) { return ProfilesManager . get ( context ) . getNotificationProfiles ( ) ; }
public boolean isYes ( String v ) { v = v . trim ( ) ; return ( v . equals ( "true" ) || v . equals ( "1" ) || v . equals ( "yes" ) ) ; }
private void refreshUserReview ( ) { Toast . makeText ( this , R . string . refreshing_user_review , Toast . LENGTH_LONG ) . show ( ) ; getPresenter ( ) . refreshUserReview ( getSupportFragmentManager ( ) , swipeRefreshLayout ) ; }
public void pickDirectoryWithFileSchemeAndNoType ( ) { launch ( buildIntent ( IntentConstants . ACTION_PICK_DIRECTORY , "file" , null ) ) ; }
public String getCanonicalUsername ( ) { return General . asciiLowercase ( username . trim ( ) ) ; }
public void testBeanMeetsEqualsContract ( ) { BeanTestCase . assertMeetsEqualsContract ( HostBean . class , FIELDS ) ; }
private static Set < String > getLocusFieldKeys ( List < LocusField > fields ) { Set < String > keys = new HashSet <> ( ) ; for ( LocusField field : fields ) { keys . add ( field . mTaskerName ) ; } return keys ; }
public WorkEntity loadSync ( int workId ) { return mDataRepository . getDatabase ( ) . workDao ( ) . loadSync ( workId ) ; }
public Tags getTags ( ) { return mTags ; }
private int getPref ( ) { return pref . getInt ( Config . KEY_PREF , 5 ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( downloadsListState != null ) layoutManager . onRestoreInstanceState ( downloadsListState ) ; }
public void onStart ( ) { super . onStart ( ) ; showWelcomeText ( ) ; }
public void onClick ( ) { Intent intent = new Intent ( this , BirdListView . class ) ; startActivity ( intent , ActivityOptions . makeSceneTransitionAnimation ( this ) . toBundle ( ) ) ; }
public static List < MediaModel > getPendingOrInProgressMediaUploadsForPost ( PostModel post ) { return MediaUploadHandler . getPendingOrInProgressMediaUploadsForPost ( post ) ; }
public static String getHeroYouNowHave ( ) { return Game . getVar ( R . string . Hero_YouNowHave ) ; }
public void setUp ( ) { testSubject = PublishSubject . create ( ) ; }
public void run ( ) { mChartAdapter . notifyDataSetChanged ( ) ; mHandler . postDelayed ( triggerRefresh , OpenVPNManagement . mBytecountInterval*1500 ) ; }
public void onReceive ( Context context , Intent intent ) { EntityLog . log ( context , account . name + " keep alive wake lock = " + wl0 . isHeld ( ) ) ; state . release ( ) ; }
public DeleteState ( Parcel in ) { super ( ) ; in . readTypedList ( entries , EntryState . CREATOR ) ; }
public void onSystemUiVisibilityChange ( int visibility ) { if ( ( visibility & SYSTEM_UI_FLAG_FULLSCREEN ) == 0 ) { relativeLayout . setVisibility ( VISIBLE ) ; } else { relativeLayout . setVisibility ( INVISIBLE ) ; } }
public void setEmail ( String email ) { HashMap < String , String > parameters = new HashMap <> ( ) ; parameters . put ( ResponseKeys . EMAIL_USER_PARAMETER_KEY , email ) ; getRequest ( Endpoints . SET_EMAIL , parameters , General . REQUEST_SET_EMAIL ) ; }
private Uri uriOrNull ( final String url ) { if ( url != null ) { return Uri . parse ( url ) ; } return null ; }
private void responseStateToTile ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . N ) { IntentUtility . setTileState ( this , this . enabled , this . stopUntilScreenOff , this . disableTimeString ) ; } }
public void setTopLeftRadius ( int radius ) { radii [ 0 ] = radii [ 1 ] = radius ; invalidate ( ) ; }
public void setxPercent ( float xPercent ) { this . xPercent = xPercent ; }
public String getUrlIntra ( ) { if ( user != null ) return getString ( R . string . base_url_intra_profile ) + "users/" + user . login ; return null ; }
public void notifyMsgInit ( ) { handler . removeMessages ( BleMsg . MSG_CHA_NOTIFY_START ) ; }
private float getYVelocity ( ) { mVelocityTracker . computeCurrentVelocity ( 1000 , mMaximumVelocity ) ; return VelocityTrackerCompat . getYVelocity ( mVelocityTracker , mActivePointerId ) ; }
public void onDetachedFromRecyclerView ( @ NonNull RecyclerView recyclerView ) { homeItems . removeAllChangeListeners ( ) ; super . onDetachedFromRecyclerView ( recyclerView ) ; }
public boolean onActionSelected ( SpeedDialActionItem actionItem ) { if ( mOnActionSelectedListener != null ) { boolean consumed = mOnActionSelectedListener . onActionSelected ( actionItem ) ; if ( ! consumed ) { close ( ) ; } return consumed ; } else { return false ; } }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . sorcererxw . rxactivityresult . test" , appContext . getPackageName ( ) ) ; }
public void onProgressChanged ( SeekBar seekBar , int i , boolean b ) { if ( b ) { seekTo ( i ) ; } }
private boolean isNotFinalQuestion ( ) { return getProgress ( ) != cat . size ( ) - 1 ; }
public void onClick ( View v ) { mCallback3 . onAboutClicked ( ) ; }
public abstract PwDatabase openDatabase ( InputStream inStream , String password , String keyfile , UpdateStatus status ) throws IOException , InvalidDBException ; }
public EventTeam inflate ( Cursor cursor ) { return ModelInflater . inflateEventTeam ( cursor ) ; }
private static String parseXmlValue ( XmlResourceParser parser , int index , Resources resources ) { return parseXmlValue ( parser , index , resources , 0 , 0 ) ; }
public void setRooms ( @ Nullable final RealmList < Room > rooms ) { this . rooms = rooms ; }
public AyahInfoDatabaseHandler getAyahInfoHandler ( ) { if ( databaseHandler == null ) { String filename = QuranFileUtils . getAyaPositionFileName ( widthParameter ) ; databaseHandler = AyahInfoDatabaseHandler . getAyahInfoDatabaseHandler ( context , filename ) ; } return databaseHandler ; }
public void onDismiss ( @ Nullable DialogInterface dialog ) { super . onDismiss ( dialog ) ; if ( mOnDismissListener != null ) { mOnDismissListener . onDismiss ( dialog ) ; } }
public void setEnabled ( boolean enabled ) { composeText . setEnabled ( enabled ) ; emojiToggle . setEnabled ( enabled ) ; quickAudioToggle . setEnabled ( enabled ) ; quickCameraToggle . setEnabled ( enabled ) ; }
public int hashCode ( ) { return Objects . hashCode ( account . getJid ( ) , with , sessionId ) ; }
public LogAdapterViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_log_entry , parent , false ) ; return new LogAdapterViewHolder ( v ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { commodityFavAdapter . setList ( null ) ; }
public boolean shouldShowExcerpt ( ) { return isJetpack && useExcerpt ; }
public static boolean enableAdmin ( boolean val ) { gPrefs . edit ( ) . putBoolean ( ENABLE_ADMIN , val ) . commit ( ) ; return val ; } */
public MatchWriter matchWriter ( Database db ) { return Mockito . mock ( MatchWriter . class ) ; }
public void raiseHUD ( ) { star . setY ( scoreHeight ) ; scoreWrapper . setY ( scoreHeight ) ; speedometer . setY ( scoreHeight - 50 ) ; speedLabel . setY ( scoreHeight - 50 ) ; pauseBtn . setY ( scoreHeight ) ; }
private Controller ( ) { }
private void subIndex ( int value ) { if ( colorsSub == null ) return ; getArguments ( ) . putInt ( "sub_index" , value ) ; }
public void setArtistList ( List < Artist > artistList ) { this . artistList = artistList ; }
public static Intent getIntentFromString ( String string ) { try { return new Intent ( ) . parseUri ( string , 0 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
public String formatLabel ( double value , boolean isValueX ) { NumberFormat formatter = NumberFormat . getInstance ( ) ; formatter . setMaximumIntegerDigits ( 1 ) ; formatter . setMaximumFractionDigits ( 1 ) ; return formatter . format ( value ) ; }
public void test_shouldNotFindPlace_whenPlaceHasNoOwnPlate ( ) throws Exception { givenPlace ( ) . withPlate ( "BZ" ) ; isAddedToDatabase ( ) ; whenSearched ( finder . findPlaceListForPlateStart ( "B" , null ) ) ; thenFoundPlaces ( ) . areNone ( ) ; }
public void onFailure ( Call < UIDResponse > call , Throwable t ) { Toast . makeText ( GroupsActivity . this , R . string . call_failed , Toast . LENGTH_LONG ) . show ( ) ; }
public String getSummary ( ) { return taskField . getText ( ) . toString ( ) . trim ( ) ; }
public void openLoginFrom ( Context context ) { Intent intent = new Intent ( context , LoginActivity . class ) ; intent . putExtra ( LoginActivity . ARG_API_ID , api . id ( ) ) ; context . startActivity ( intent ) ; }
private void init ( ) { this . gpxData = new StringBuffer ( "" ) ; }
public void removeFragmentFromStack ( BaseFragment fragment ) { fragment . onPause ( ) ; fragment . onFragmentDestroy ( ) ; fragment . setParentLayout ( null ) ; fragmentsStack . remove ( fragment ) ; }
public static void cancelAlarmForUpdateReminderNotification ( final Context context , UpdateReminderPref pref ) { Log . d ( TAG , "cancelAlarmForUpdateReminderNotification" ) ; getAlarmManager ( context ) . cancel ( getAlarmPendingIntent ( context , pref ) ) ; }
public DefaultContentMetadata copyWithMutationsApplied ( ContentMetadataMutations mutations ) { Map < String , byte [ ] > mutatedMetadata = applyMutations ( metadata , mutations ) ; if ( isMetadataEqual ( mutatedMetadata ) ) { return this ; } return new DefaultContentMetadata ( mutatedMetadata ) ; }
public List < Computer > getResults ( ) { return new ArrayList ( this . mResults ) ; }
public boolean hasDescription ( ) { return ! TextUtils . isEmpty ( description ) ; }
public static boolean isValidMACAddress ( final String macAddress ) { return PATTERN_MAC . matcher ( macAddress ) . matches ( ) ; }
public void updateGameforNextExercise ( final RPSGame rpsGame ) { rpsGame . setMaxProgress ( gameConfig . getMaxProgress ( ) ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new PlaylistViewModel ( mApplication , mAddHeader ) ; }
public void clearEventOpenWordWidget ( ) { preferences . edit ( ) . remove ( STAT_OPEN_WORD_WIDGET_KEY ) . commit ( ) ; }
private void stopService ( ) { disposables . clear ( ) ; engine . removeListener ( engineListener ) ; stopUpdateForegroundNotify ( ) ; setKeepCpuAwake ( false ) ; isAlreadyRunning . set ( false ) ; stopForeground ( true ) ; stopSelf ( ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . emojiDidLoaded ) ; }
public void onCreate ( Bundle savedInstance ) { super . onCreate ( savedInstance ) ; ( ( NewsReaderApplication ) getActivity ( ) . getApplication ( ) ) . getAppComponent ( ) . injectFragment ( this ) ; }
public Context getContext ( ) { return this . dialogFragment . requireContext ( ) ; }
public RunnableWithObject ( Object o ) { object = o ; }
public void onStorySaveResult ( final String storyFirstMediaId , final boolean success ) { mWPAndroidGlueCode . storySaveResult ( storyFirstMediaId , success ) ; }
public void disableReminderAlarm ( MedicineReminder medicineReminder ) { Reminders . getInstance ( getContext ( ) . getApplicationContext ( ) ) . cancelReminder ( medicineReminder ) ; }
public void setSunriseTime ( Double sunriseTime ) { this . sunriseTime = sunriseTime ; }
public Tile getTile ( Vector2 coords ) { return tileMap [ ( int ) ( coords . x * mapWidth + coords . y ) ] ; }
public final void files ( AbstractClient . OnResult < AriaFiles > listener ) { client . send ( AriaRequests . getFiles ( gid ) , listener ) ; }
public String toString ( ) { return String . format ( " [ ReadableCacheFile : id %d ] " , id ) ; }
public void onAnimationStart ( Animation animation ) { getServerConfig ( ) ; }
public boolean onDependentViewChanged ( CoordinatorLayout parent , View child , View dependency ) { float translationY = Math . min ( 0 , dependency . getTranslationY ( ) - dependency . getHeight ( ) ) ; child . setTranslationY ( translationY ) ; return true ; }
public void setColorIconDefault ( int color ) { checkData ( ) . setColorAppIcon ( color ) ; }
public void getProviders ( Fragment fragment ) { providerRepository . getProviders ( restApi ) . observe ( fragment , this : : updateViews ) ; }
private void forceRefresh ( ) { new BiblioAsyncTask . ScanSaveDirectory ( viewModel ) . execute ( ) ; }
private void doSavePairing ( ) { if ( this . currentDeviceAddress != null ) { finishActibityAndPassAddress ( this . currentDeviceAddress ) ; } }
public void onSaveInstanceState ( final Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( KEY_EDITOR_CONTENT , richEditor . getHtml ( ) ) ; }
public static String base91 ( int num ) { return base62 ( num , BASE91_EXTRA_CHARS ) ; }
private void updateView ( ) { final MonetarySpannable text ; if ( amount != null ) { text = new MonetarySpannable ( format , alwaysSigned , amount , type ) ; } else { text = null ; } setText ( text ) ; }
public SynthVoice createVoice ( int program ) { if ( ( program & 1 ) == 1 ) { return new SineVoice ( ) ; } else { return new SawVoice ( ) ; } }
public void newArtistImage ( ArtistModel artist ) { if ( artist . equals ( mArtist ) ) { if ( ! mHideArtwork ) { int width = getView ( ) . getWidth ( ) ; mBitmapLoader . getArtistImage ( mArtist , width , width ) ; } } }
public void onEvent ( NotesUpdatedEvent event ) { alreadyInitialized = false ; }
public void stopAnim ( ) { if ( valueAnimator != null ) { clearAnimation ( ) ; valueAnimator . setRepeatCount ( 0 ) ; valueAnimator . cancel ( ) ; valueAnimator . end ( ) ; eatErPositonX = 0 ; postInvalidate ( ) ; } }
public void onReceive ( Context context , Intent intent ) { NotificationUtil . initUpdateReminderNotificationAlarm ( context ) ; }
private void setListShown ( boolean shown ) { switcher . setDisplayedChild ( shown ? 0 : 1 ) ; }
public void onStop ( ) { mI2PHelper . unbind ( ) ; sI2PHelperBound = false ; }
public void networkNotAvailable ( ) { Timber . e ( "networkNotAvailable" ) ; }
public JSONObject getModel ( ) { return mEditedModel ; }
public TapUser ( int id , String profilePictureURL , Product favoriteItem , boolean isPrivate , boolean favoriteItemHidden ) { this . id = id ; this . profilePictureURL = profilePictureURL ; this . favoriteItem = favoriteItem ; this . isPrivate = isPrivate ; this . favoriteItemHidden = favoriteItemHidden ; }
public String getPurchaseDate ( ) { return mPurchaseDate ; }
public Bitmap getBitmap ( ) { return doubleFire ; }
public Proxy getProxy ( ) throws IOException { return new Proxy ( Proxy . Type . HTTP , new InetSocketAddress ( InetAddress . getByAddress ( new byte [ ] { 127 , 0 , 0 , 1 } ) , 8118 ) ) ; }
public void setCircleColor ( @ ColorInt int circleColor ) { mCircleColor = circleColor ; mCirclePaint . setColor ( mCircleColor ) ; }
public static Resources getResources ( ) { return Game . instance ( ) . getResources ( ) ; }
public String getLabelUuid ( ) { return this . labelUuid ; }
public MusicPlaybackTrack ( Parcel in ) { mId = in . readLong ( ) ; mSourceId = in . readLong ( ) ; mSourceType = Utils . IdType . getTypeById ( in . readInt ( ) ) ; mSourcePosition = in . readInt ( ) ; }
public void onDestroy ( ) { DcHelper . getContext ( getActivity ( ) ) . eventCenter . removeObservers ( this ) ; super . onDestroy ( ) ; }
public void onClick ( @ NonNull View view ) { ModManager modman = new ModManager ( ) ; modman . uninstallModAsync ( getContext ( ) , mod ) ; }
public void setFreqMaj ( String f ) { Editor e = prefs . edit ( ) ; e . putString ( KFREQMAJ , f ) ; e . commit ( ) ; }
public static String formatUSDCurrency ( Context ctx , Long balance ) { Locale current = ctx . getResources ( ) . getConfiguration ( ) . locale ; return String . format ( current , PrecisionEnum . TWO_DIGIT . getFormat ( ) , ( balance / 1000000000F ) ) ; }
public final boolean fileExists ( final String fileName ) throws DictionaryException { File file = new File ( directory + fileName ) ; return file . exists ( ) ; }
public TextureRegion getTextureRegion ( ) { return texture ; }
public int getItemCount ( ) { if ( jaxmpps == null ) return 0 ; return jaxmpps . size ( ) ; }
public LoadingCell ( Context context ) { super ( context ) ; ProgressBar progressBar = new ProgressBar ( context ) ; addView ( progressBar , LayoutHelper . createFrame ( LayoutHelper . WRAP_CONTENT , LayoutHelper . WRAP_CONTENT , Gravity . CENTER ) ) ; }
public void enablePreviousButton ( boolean enable ) { buttonPrevious . setClickable ( enable ) ; buttonPrevious . setEnabled ( enable ) ; }
public void setContentDescription ( int i , String desc ) { mContentDescriptions . put ( i , desc ) ; }
public AboutBuilder addFeedbackAction ( int email , int subject ) { return addFeedbackAction ( context . getString ( email ) , context . getString ( subject ) ) ; }
public ArrayList < ItemManager . Item > getItems ( ) { return mItems ; }
public void init ( ICell cell ) { IExpectation expectation = cell . grid ( ) . getGameState ( ) . addExpectation ( ) ; cell . setState ( expectation ) ; }
private void pushData ( ) { ComicDataObject dataObject = new ComicDataObject ( boxName , pathList ) ; databaseReference . push ( ) . setValue ( dataObject ) ; }
public boolean isCountdownOver ( ) { return getElapsedTime ( ) >= getCountdownTime ( ) ; }
public GeneralSettingsPage clickGeneralSettings ( ) { onView ( withText ( getTranslatedString ( R . string . project_settings ) ) ) . perform ( click ( ) ) ; return new GeneralSettingsPage ( ) . assertOnPage ( ) ; }
public float getAdultProgress ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException , FitnessException { if ( this . isDemoMode ) { return 1f ; } return getPersonProgress ( Person . ROLE_PARENT , dateToVisualize ) ; }
private void goBackIfPossible ( ) { if ( verticalStepperForm . isAnyStepCompleted ( ) ) { showCloseConfirmationDialog ( ) ; } else { goBack ( null ) ; } }
public void onSuccess ( ) { Log . i ( TAG , "deassociate success" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_DISASSOCIATE_SUCCESS , new ArrayList < String > ( ) ) ; }
public int getSquaresCountInRow ( ) { return preferences . getInt ( SQARES_COUNT_IN_ROW_KEY , DEFAULT_SQARES_COUNT_IN_ROW ) ; }
private void onCallStopRingback ( ) { mRemoteLogger . d ( "onCallStopRingback" ) ; mSipService . stopRingback ( ) ; }
public static void setGoogleDriveAccount ( Context context , String accountName ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; sharedPreferences . edit ( ) . putString ( "google_drive_backup_account" , accountName ) . commit ( ) ; }
public Double getPopularity ( ) { return popularity ; }
public boolean isUploadingMedia ( ) { return ( mUploadingMedia . size ( ) > 0 ) ; }
public Tracker provideAndroidTracker ( Context context ) { return Mockito . mock ( Tracker . class ) ; }
public Observable < Ignore > observeLongClickEnd ( ) { return onLongClickEndSubject ; }
public static Drawable createCircleDrawableWithIcon ( int size , int iconRes ) { return createCircleDrawableWithIcon ( size , iconRes , 0 ) ; }
public static String getString ( Context context , String keyId , String defaultValue ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return sharedPreferences . getString ( keyId , defaultValue ) ; }
private void reminderSchedule ( Event event ) { if ( event . hasReminder ( ) ) { eventRemindersManager . scheduleReminder ( event , true , true ) ; } }
public String getToolbarName ( ) { return getString ( R . string . time ) ; }
public boolean onCheckCanStartDrag ( ViewHolder holder , int position , int x , int y ) { return ViewUtil . hitTest ( holder . image , x , y ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `receipt_to` TEXT" ) ; }
private void loadMoreIfLastRowHit ( int position ) { boolean lastRowHit = ( position == places . size ( ) - 1 ) ; if ( lastRowHit && ! taskInProgress ) { if ( listener != null ) { listener . onLoadMore ( ) ; } } }
private void updateMentionUsers ( ) { Set < User > users = mAdapter . getUsers ( ) ; if ( mIssue . getUser ( ) != null ) { users . add ( mIssue . getUser ( ) ) ; } mBottomSheet . setMentionUsers ( users ) ; }
public int getNumbertoPosition ( int position ) { return filteredData . get ( position ) . getNummer ( ) ; }
public void setSession ( UUID session ) { this . session = session ; }
public com . google . protobuf . Parser < TransactionOutput > getParserForType ( ) { return PARSER ; }
public void addEntry ( DatabaseEntry entry ) { _entries . add ( entry ) ; }
private String getCrossValue ( JsonObject data , String key ) { int crossCount = getIntDefaultValue ( data , key ) ; return getContext ( ) . getString ( R . string . breakdown2016_cross_format , crossCount ) ; }
public void beginTransaction ( ) { getDatabase ( ) ; db . beginTransaction ( ) ; }
public static SqlBuilder deleteFrom ( final String tablename ) { final StringBuilder sql = new StringBuilder ( "DELETE FROM " + tablename ) ; return new SqlBuilder ( sql ) ; }
public void getNextWithRed ( ) throws Exception { assertThat ( LowEmissionZoneNumbers . getNext ( LowEmissionZoneNumbers . RED ) ) . isEqualTo ( LowEmissionZoneNumbers . YELLOW ) ; }
public StorageReference getBookUrlStorageRef ( ) { if ( bookUrl == null || bookUrl . isEmpty ( ) ) { return null ; } StorageReference storageRef = FirebaseStorage . getInstance ( ) . getReferenceFromUrl ( FirebaseConfig . STORAGE_PREFIX ) ; return storageRef . child ( bookUrl ) ; }
public FileBackedPassClassifier ( final File backed_file , final PassStore passStore , final Moshi moshi ) { super ( getBase ( backed_file , moshi ) , passStore ) ; this . backed_file = backed_file ; adapter = getAdapter ( moshi ) ; }
public int getAffiliation ( ) { return this . affiliation ; }
public void run ( ) { getListener ( ) . onProgress ( progress , ( int ) millis ) ; }
private void showOpenAsDialog ( String statusUrl , CharSequence dialogTitle ) { BaseActivity activity = ( BaseActivity ) getActivity ( ) ; activity . showAccountChooserDialog ( dialogTitle , false , account -> openAsAccount ( statusUrl , account ) ) ; }
public void emit ( Emitter emitter , int index , float x , float y ) { ( ( ForceParticle ) emitter . recycle ( ForceParticle . class ) ) . reset ( x , y ) ; }
public void restoreStateParams ( Bundle bundle ) { currentParams = bundle . getBundle ( "resetview_params" ) ; if ( currentParams != null ) { setParams ( currentParams ) ; } }
public void run ( ) { displayProgress ( ) ; handler . postDelayed ( this , 5000 ) ; }
private void changeVibratePrefs ( ) { boolean isChecked = binding . vibrationOptionPrefs . isChecked ( ) ; binding . vibrationOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setVibrateEnabled ( ! isChecked ) ; }
public T withDisabledTextColor ( int disabledTextColor ) { this . disabledTextColor = ColorHolder . fromColor ( disabledTextColor ) ; return ( T ) this ; }
public void onDataLoaded ( boolean isEmpty ) { showEmptyView ( isEmpty ) ; }
public void setText ( String text ) { this . text = StringUtils . notNullStr ( text ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_prefs = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) . getApplicationContext ( ) ) ; m_activity = ( OfflineActivity ) activity ; }
public static String getEncodedId ( byte [ ] groupId , boolean mms ) { return mms ? ENCODED_MMS_GROUP_PREFIX : ENCODED_SIGNAL_GROUP_PREFIX + Hex . toStringCondensed ( groupId ) ; }
public void onEvent ( Short msg ) { if ( msg == EventBusMSG . UPDATE_TRACK ) { Update ( ) ; } }
public void showActivityLayout ( boolean visibility ) { moviePredictionLayout . setVisibility ( visibility? View . VISIBLE : View . INVISIBLE ) ; }
public int getCount ( ) { return packages . size ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , ExampleMaterialAboutActivity . class ) ; startActivity ( i ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { Logger . debug ( "TransportService onStartCommand" ) ; startPersistentNotification ( ) ; return START_STICKY ; }
public int getItemCount ( ) { return events . size ( ) ; }
public void handleAdjustVolumeEvent ( AdjustVolumeEvent event ) { if ( mSkipOverwrite ) { mSkipOverwrite = false ; } else { mAdjustVolumeAfterGain = false ; } mRadioPlayerManager . setVolume ( event . volume ) ; }
private void load ( ) { thread . run ( ( ) -> load ( "" ) ) ; }
public void addBookmark ( Integer id , String word ) { addToWords ( id , word , BOOKMARK_KEY , 30 ) ; }
private Tracker getItem ( int position ) { return mValues . get ( position - 1 ) ; }
public void handleResponse ( HtspMessage response ) { notifyAll ( ) ; }
public void onClick ( View v ) { showDialogFragment ( new SelectWeekDayFragment ( ) , "selectDay" ) ; }
public void testMinimalEncoder16 ( ) throws Exception { verifyMinimalEncoding ( "A12" , "ALPHANUMERIC ( A12 ) , TERMINATOR ( ) " , null , false ) ; }
public LetterAnimation ( FunnyDisplay display ) { super ( display ) ; }
private boolean shouldOverrideUrlLoading ( String url ) { if ( TextUtils . isEmpty ( url ) ) { return false ; } if ( url . equals ( licenseFilePath ) ) { return false ; } else { callback . showExternalLink ( url ) ; return true ; } }
public Collection < TimetableSubject > getPrimarySubjects ( ) { return Collections . unmodifiableCollection ( primarySubjects ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { tvExpire . setText ( String . format ( "%d" , progress ) ) ; }
private void initUI ( ) { setSupportActionBar ( toolbar ) ; getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; getSupportActionBar ( ) . setHomeButtonEnabled ( true ) ; }
public List < Jid > getAcceptedCryptoTargets ( ) { if ( mode == MODE_SINGLE ) { return Collections . singletonList ( getJid ( ) . toBareJid ( ) ) ; } else { return getJidListAttribute ( ATTRIBUTE_CRYPTO_TARGETS ) ; } }
public void disableHWAcceleration ( ) { getView ( ) . setLayerType ( View . LAYER_TYPE_SOFTWARE , null ) ; }
public Format getFormat ( ) { return mFormat ; }
public void onPause ( ) { super . onPause ( ) ; SettingsManager . getSettings ( ) . unregisterOnSharedPreferenceChangeListener ( this ) ; }
public ListWidget createWidget ( ) { return new ListWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) , false , false ) ; }
public ScheduleExamsFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public float units ( ) { return Convert . metric? 1f : ( float ) Convert . FT ; }
public String validateBitcoinAddress ( final String address ) { if ( isValidBitcoinAddress ( address ) ) { return address ; } else { String addr = uri2BitcoinAddress ( address ) ; if ( addr != null ) { return addr ; } else { return null ; } } }
public CameraPosition ( LatLng center , StreetViewPanoramaCamera camera ) { this . center = center ; this . camera = camera ; }
public static boolean isSameLanguage ( @ NonNull String language ) { Locale newLocale = languageLocale ( language ) ; return Locale . getDefault ( ) . getLanguage ( ) . equals ( newLocale . getLanguage ( ) ) ; }
public GameService ( Board board ) { if ( board != null ) { this . board = board ; } else { this . board = new Board ( "NULL" , ConfigVariable . configField , GameType . LOCAL ) ; } }
public static void showPreferences ( JalkametriActivity parent ) { LogUtil . i ( TAG , "Showing preferences" ) ; Intent i = new Intent ( parent , PreferencesActivity . class ) ; parent . startActivityForResult ( i , Common . ACTIVITY_CODE_SHOW_PREFERENCES ) ; }
public void testEncodeIllegalCharacters ( ) throws WriterException { new ITFWriter ( ) . encode ( "00123456789abc" , BarcodeFormat . ITF , 0 , 0 ) ; }
private void stopAdvertising ( ) { Log . d ( TAG , "Service : Stopping Advertising" ) ; if ( mBluetoothLeAdvertiser != null ) { mBluetoothLeAdvertiser . stopAdvertising ( mAdvertiseCallback ) ; mAdvertiseCallback = null ; } }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; LocaleHelper . onAttach ( getBaseContext ( ) ) ; }
public void onDestroyActionMode ( ActionMode mode ) { Intent intent = new Intent ( ACTION_CLEAR_SELECTION ) ; LocalBroadcastManager . getInstance ( mContext ) . sendBroadcast ( intent ) ; }
public static String getUsername ( Context context ) { context = MyApplication . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( "username" , "" ) ; }
private void setBingWallpaperError ( Throwable throwable ) { dismissProgressDialog ( ) ; String error = CrashReportHandle . loadFailed ( this , TAG , throwable ) ; mErrorTextView . setText ( getString ( R . string . pull_refresh ) + error ) ; }
public SetPassword ( Context ctx , Database db , String password , String keyfile , OnFinish finish ) { this ( ctx , db , password , keyfile , finish , false ) ; }
public void setPaymentId ( int paymentTypeId ) { this . paymentTypeId = paymentTypeId ; }
public void run ( ) { if ( mSecondsLeft <= 0 ) return ; try { gameTick ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } h . postDelayed ( this , 10 ) ; }
public BigDecimal getInteretsFinAnnee ( ) { return this . interetsFinAnnee ; }
public static FragmentNavigationController navigationController ( @ NonNull FragmentManager fragmentManager , @ IdRes int containerViewId ) { return new FragmentNavigationController ( fragmentManager , containerViewId ) ; }
public JSONObject getSalt ( ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/salts" , mUserId ) , requestMap ) ; }
private File getLangsFile ( ) { File dir = mContext . getFilesDir ( ) ; return new File ( dir , LANGS ) ; }
private final KeyframeAnimation . AnimationListener < Integer > alphaChangedListener = new KeyframeAnimation . AnimationListener < Integer > ( ) { @ Override public void onValueChanged ( Integer value ) { onAlphaChanged ( ) ; } } ;
public void onProductPurchased ( String productId , TransactionDetails details ) { }
public void deleteUserItem ( UserItem userItem ) { String id = userItem . getId ( ) ; database . delete ( DatabaseHelper . TABLE_USER , COLUMN_ID + " = " + id , null ) ; }
public void updatePosts ( List < Post > newPosts ) { postList = new ArrayList <> ( newPosts ) ; notifyDataSetChanged ( ) ; }
public final static boolean isValidEmail ( String target ) { if ( isEmpty ( target ) ) { return false ; } else { return android . util . Patterns . EMAIL_ADDRESS . matcher ( target ) . matches ( ) ; } }
public Maybe < Tag > edit ( Tag entity ) { return crudHelper . edit ( entity ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; ButterKnife . unbind ( this ) ; }
private void appendDebugOutput ( String string ) { TextView v = ( TextView ) findViewById ( R . id . debugOutput ) ; v . append ( string + NEWLINE ) ; }
public ActivityTestRule < MainActivity > mActivityTestRule = new MainActivityFirstrunTestRule ( false ) { @ Override protected void beforeActivityLaunched ( ) { super . beforeActivityLaunched ( ) ; } } ;
public String exec ( ExecutePack pack ) { int index = pack . getInt ( ) ; return TimeManager . replace ( "%t" + index ) . toString ( ) ; }
public Response ( String status , String mimeType , StreamSource data ) { this . status = status ; this . mimeType = mimeType ; this . data = data ; }
public Long getNumThreadsRequested ( ) { return numThreadsRequested ; }
public SimpleHeaderRecyclerAdapter ( Context context , List < RecyclerItem < T >> items ) { this . context = context ; this . inflater = LayoutInflater . from ( context ) ; this . items = items ; }
public boolean waitForAllToFinish ( Integer timeoutSeconds ) { return true ; }
public Timing ( ) { handlers = new ArrayList < TimeHandlerWrapper > ( ) ; lastTime = System . currentTimeMillis ( ) ; }
public void testEncodeNumeric ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "1234" , Compaction . NUMERIC , StandardCharsets . UTF_8 ) ; assertEquals ( "\u039f\u001A\u0386\f\u01b2" , encoded ) ; }
public boolean playerGuess_IsPlayerWinner ( ) { return false ; }
public boolean isCeremony ( ) { return isSameType ( Type . CEREMONY ) ; }
private void setupToolbar ( ) { toolbar . setTitle ( R . string . history ) ; collapsingToolbarLayout . setTitle ( toolbar . getTitle ( ) ) ; setSupportActionBar ( toolbar ) ; }
public void addListener ( OnPreferenceChangedListener listener ) { onPreferenceChangedListeners . add ( listener ) ; }
public void launchPurchaseFlow ( Activity act , String sku , int requestCode , OnIabPurchaseFinishedListener listener ) { launchPurchaseFlow ( act , sku , requestCode , listener , "" ) ; }
public void setHolidays ( final Set < HolidayRef > holidays ) { this . holidays = holidays ; }
public ConnectionListener getListener ( ) { return listener ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mData ) ; verify ( mEventBus ) . post ( any ( ActionBarTitleEvent . class ) ) ; }
public PlaceAndPlateDtoAssembler inPowiat ( String powiat ) { this . powiat = powiat ; return this ; }
public boolean canCreateDialog ( ) { return isStarted ; }
public void onBackPressed ( ) { if ( presenter . onBackPressed ( ) ) { super . onBackPressed ( ) ; } }
public void updateForSettings ( ) { updateForSettings ( null ) ; }
private void processExitState ( int state ) { Log . d ( TAG , "call processExitState : " + state ) ; switch ( state ) { case STARTED : onExitStartedState ( ) ; break ; case STOPPED : onExitStoppedState ( ) ; break ; } }
public boolean sameMonth ( CalendarDate other ) { return get ( YEAR ) == other . get ( YEAR ) && get ( MONTH ) == other . get ( MONTH ) ; }
public void setDeviceUid ( String uid ) { Editor e = prefs . edit ( ) ; e . putString ( KDEVICEUID , uid ) ; e . commit ( ) ; }
public void updateAppWidget ( Context context , AppWidgetManager appWidgetManager , int appWidgetId , boolean force ) { updateAppWidget ( context , appWidgetManager , appWidgetId , force , false ) ; }
public static String decryptString ( int [ ] key , byte [ ] bytes ) { byte [ ] out = decrypt ( key , bytes ) ; if ( out != null ) return new String ( out ) ; return null ; }
public static Fitness calc ( File trieDir , Genome genome , Language language ) throws IOException { return calc ( trieDir , genome , language , BOARDS_TO_GENERATE_FOR_FITNESS_CALC ) ; }
private void clickChoice ( int index ) { if ( WidgetAppearanceUtils . isNoButtonsAppearance ( formEntryPrompt ) ) { clickNoButtonChoice ( index ) ; } else { clickButtonChoice ( index ) ; } }
public void writeToParcel ( Parcel dest , int flags ) { super . writeToParcel ( dest , flags ) ; dest . writeInt ( this . playlistId ) ; dest . writeInt ( this . idInPlayList ) ; }
public AuthException ( String auth ) { super ( "authorization error - auth : " + auth ) ; }
public boolean shouldEnforceBounds ( ) { return mEnforceBounds ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { this . rootView = inflater . inflate ( R . layout . fragment_main , container , false ) ; init ( rootView ) ; return rootView ; }
public boolean getTrust ( ) { return trust ; }
private String getNationalOnly ( ) { if ( mPhoneNumber == null ) { return "" ; } return Long . toString ( mPhoneNumber . getNationalNumber ( ) ) ; }
public void setAndShowSpeed ( Location location ) { if ( gpsSpeedCounter != null ) setSpeed ( gpsSpeedCounter . getSpeed ( location ) ) ; showInfoText . set ( false ) ; showLoader . set ( false ) ; showSpeed . set ( true ) ; }
public boolean remove ( E obj ) { return mData . remove ( obj ) ; }
public ApplicationListener createApplicationListener ( ) { return new MyGdxGame ( ) ; }
private void deleteEvent ( String eventUri ) { if ( ! TextUtils . isEmpty ( eventUri ) ) { deleteEvent ( Uri . parse ( eventUri ) ) ; } }
public DeckConfig _cardConf ( Card card ) { return mCol . getDecks ( ) . confForDid ( card . getDid ( ) ) ; }
public void onPeriodFromClick ( ) { new DatePickerFragment ( ) . show ( getSupportFragmentManager ( ) , "periodFrom" ) ; }
public void onClick ( View v ) { Reddit . defaultShare ( "https : }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mDistricts ) ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { processVideo ( true ) ; }
public static Key createSignature ( Artist artist ) { return ArtistSignatureUtil . getInstance ( App . getInstance ( ) ) . getArtistSignature ( artist . getName ( ) ) ; }
public void onStopPressed ( ) { startService ( AudioUtils . getAudioIntent ( this , AudioService . ACTION_STOP ) ) ; mAudioStatusBar . switchMode ( AudioStatusBar . STOPPED_MODE ) ; unHighlightAyahs ( HighlightType . AUDIO ) ; mLastAudioRequest = null ; }
public SearchBar ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; }
public void permissionGranted ( ) { addTask ( ) ; }
public Result createFromParcel ( Parcel source ) { return new Result ( source ) ; }
public void fillPolygon ( int xPoints [ ] , int xOffset , int yPoints [ ] , int yOffset , int nPoints , int argbColor ) { setARGBColor ( argbColor ) ; graphics . fillPolygon ( xPoints , xOffset , yPoints , yOffset , nPoints ) ; }
public static boolean isMerger ( int codepoint ) { return codepoint == ZWJ || FITZPATRICK . contains ( codepoint ) ; }
public static Toast makeText ( Context context , int resId , int duration ) throws Resources . NotFoundException { return makeText ( context , context . getText ( resId ) , duration ) ; }
private void setContent ( String content ) { String html = generateMarkdownHtml ( EncodingUtils . toBase64 ( content ) , mCssTheme ) ; loadDataWithBaseURL ( "file : }
public StreamingFinderExtension ( ) { super ( "StreamingFinderExtension" ) ; }
public boolean presentFragment ( BaseFragment fragment , boolean removeLast ) { return presentFragment ( fragment , removeLast , false , true ) ; }
public Observable < List < ProductLoans >> getAllLoans ( ) { return mBaseApiManager . getLoanApi ( ) . getAllLoans ( ) ; }
public int getInt ( @ NonNull String key , int defaultValue ) throws WrongTypeException { return 0 ; }
public long countByEventType ( int eventTypeId ) { RealmQuery < SummitEvent > query = RealmFactory . getSession ( ) . where ( SummitEvent . class ) ; query = query . equalTo ( "eventType . id" , eventTypeId ) ; return query . count ( ) ; }
private long saving ( DataSupport baseObj , ContentValues values ) { if ( values . size ( ) == 0 ) { values . putNull ( "id" ) ; } return mDatabase . insert ( baseObj . getTableName ( ) , null , values ) ; }
public CategorySelector ( Activity activity , DatabaseAdapter db , ActivityLayout x , long exclSubTreeId ) { this . activity = activity ; this . db = db ; this . x = x ; this . excludingSubTreeId = exclSubTreeId ; }
public double getInter1EndOver ( ) { return this . inter1EndOver ; }
public FormHierarchyPage clickOnForm ( String formName , String instanceName ) { scrollToAndClickOnForm ( instanceName ) ; return new FormHierarchyPage ( formName ) ; }
public void dipose ( ) { if ( mConnectivityReceiver != null ) { context . unregisterReceiver ( mConnectivityReceiver ) ; mConnectivityReceiver = null ; } }
public void onBindViewHolder ( MyViewHolder holder , int position ) { holder . textView . setText ( mSectionTitle ) ; }
public void updateBookmarkButtonBackgroundResource ( int reosurceId ) { showBookMarkedItemsButton . setImageResource ( reosurceId ) ; }
public StdModels ( CreateStdModels fun , @ StringRes int defaultName ) { this . fun = fun ; this . defaultName = defaultName ; }
public ArtistModel ( String name , long artistID ) { if ( name != null ) { mArtistName = name ; } else { mArtistName = "" ; } mArtistID = artistID ; }
public Album ( ArrayList < Song > songs ) { this . songs = songs ; }
public void invalidSettingReturnsCorrectResultWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "1" ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
public void setNoonTime ( String time ) { putString ( TIME_DAY , time ) ; }
public void onBillingInitialized ( ) { readyToPurchase = true ; checkStatus ( ) ; getProducts ( ) ; }
public boolean attachTo ( Char target ) { return target . hasBuff ( RageBuff . class ) || super . attachTo ( target ) ; }
public int getId ( ) { return mId ; }
public AssociationViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new AssociationViewHolder ( ViewUtils . inflate ( parent , R . layout . item_checkbox_string ) , this ) ; }
public boolean canUndo ( ) { return ! ( stack . size - 1 + index < 1 ) ; }
public final void setEventListener ( final SimpleListener listener ) { this . mEventListener = listener ; }
public IncomingJoinedMessage ( Address sender ) { super ( sender , 1 , System . currentTimeMillis ( ) , null , Optional . < SignalServiceGroup > absent ( ) , 0 ) ; }
private void updateFieldsFromMap ( Model newModel ) { FieldChangeType type = FieldChangeType . refreshWithMap ( newModel , mModelChangeFieldMap ) ; populateEditFields ( type , true ) ; updateCards ( newModel ) ; }
public void run ( ) { NewEntryCategoriesAdapter adapter = ( NewEntryCategoriesAdapter ) selectCategorySpinner . getAdapter ( ) ; selectCategorySpinner . setSelection ( adapter . getItemIndex ( walletEntry . categoryID ) ) ; }
public void listeSessionsAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < ListeDeSessions > ( ) { public ListeDeSessions Func ( ) throws java . lang . Exception { return listeSessions ( codeAccesUniversel , motPasse ) ; } } ) ; }
public void onClick ( View view ) { getBatteryInfo ( ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { runLinkRequest ( username , group , sticker , botUser , botChat , message , hasUrl , messageId , game , 1 ) ; }
private void toFirstDay ( int position ) { mAdapter . setSelectedDay ( position , CalendarUtils . monthFirstDay ( mAdapter . getMonth ( position ) ) , true ) ; }
public int getInputType ( ) { return 2 ; }
public com . google . protobuf . Parser < Attachment > getParserForType ( ) { return PARSER ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( className ) ; dest . writeParcelableArray ( days , 0 ) ; }
public void play_NumbersMode ( ) { this . PlayMp3 ( R . raw . az_numbers_mode ) ; }
public ThemeListPreference ( final Context context , final AttributeSet attrs , final int defStyleAttr , final int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; }
public void onResume ( ) { super . onResume ( ) ; loadDataOcariot ( ) ; }
public void onLoaderReset ( Loader < Artist > loader ) { this . artist = Artist . EMPTY ; songAdapter . swapDataSet ( artist . getSongs ( ) ) ; albumAdapter . swapDataSet ( artist . albums ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { return Globals . onOptionsItemsSelected ( this , item ) ; }
public void run ( ) { notifyLocalMusicFoldersListenerSucceeded ( fileModels , requestKey ) ; }
public void onProviderDisabled ( String provider ) { lastProviderStatus = false ; if ( gpsListenerCallback != null ) gpsListenerCallback . onProviderStatusChanged ( false ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { EntityRule r1 = prev . get ( oldItemPosition ) ; EntityRule r2 = next . get ( newItemPosition ) ; return r1 . id . equals ( r2 . id ) ; }
public void onAnimationEnd ( Animator animation ) { Log . d ( "c3nav" , "splash animation done" ) ; mDrawerLayout . setDrawerLockMode ( DrawerLayout . LOCK_MODE_UNLOCKED ) ; splashScreenDone = true ; unloadSplashVideo ( ) ; }
private void reportError ( ) { hide ( ) ; GameLoop . addToScene ( new WndError ( Game . getVar ( R . string . WndRanking_Error ) + "\n" + error ) ) ; }
public static List < WeatherEntity > loadDataFromDb ( Context context ) { AppDatabase db = AppDatabase . getAppDatabase ( context ) ; Log . i ( TAG , "AQI data loaded from DB" ) ; return db . weatherDao ( ) . getAll ( ) ; }
public void testNullRenderFromKey ( ) { when ( mDatafeed . fetchMatch ( mMatchKey ) ) . thenReturn ( Observable . just ( null ) ) ; MatchListElement element = mRenderer . renderFromKey ( mMatchKey , ModelType . MATCH , ) ; assertNull ( element ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_activity = ( OfflineFeedsActivity ) activity ; m_prefs = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) . getApplicationContext ( ) ) ; m_prefs . registerOnSharedPreferenceChangeListener ( this ) ; }
public void restart ( ) { sendMessage ( What . RESTART , 0 , 0 , null ) ; }
private void showReceive ( @ NonNull String name ) { activityCallback . onWalletReceive ( name , isTestnet ( ) ) ; }
public void nextPage ( ) { if ( showingSearchResult ) return ; if ( moviesInteractor . isPaginationSupported ( ) ) { currentPage ++ ; displayMovies ( ) ; } }
public int getCount ( ) { return ( mFilteredUsers != null ) ?mFilteredUsers . size ( ) : 0 ; }
public void onStopPressed ( ) { startService ( AudioUtils . getAudioIntent ( this , AudioService . ACTION_STOP ) ) ; audioStatusBar . switchMode ( AudioStatusBar . STOPPED_MODE ) ; unHighlightAyahs ( HighlightType . AUDIO ) ; lastAudioRequest = null ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "project . android . com . android_secondapp" , appContext . getPackageName ( ) ) ; }
public void setG ( Integer g ) { this . g = g ; }
public static void dropTable ( SQLiteDatabase db , String table ) { CustomSQLiteQueryBuilder . begin ( db ) . dropIfExists ( table ) . end ( ) ; }
public boolean isSingleMediaPicker ( ) { return this == GUTENBERG_SINGLE_MEDIA_PICKER || this == GUTENBERG_SINGLE_FILE_PICKER ; }
private void clearAllButtons ( ) { for ( int gameButton : gameButtons ) { final Button tile = ( Button ) findViewById ( gameButton ) ; tile . getBackground ( ) . clearColorFilter ( ) ; tile . setText ( "" ) ; } }
public SnapshotNicsFragment ( ) { super ( Nic . class ) ; }
public Integer getHeight ( ) { return height ; }
public CharSequence getPageTitle ( int position ) { TerminalBridge bridge = getItemAtPosition ( position ) ; if ( bridge == null ) { return "???" ; } return bridge . host . getNickname ( ) ; }
private void checkLocalAccess ( ) { if ( app . seedHash != null && BackupHelper . Local . hasLocalAccess ( getApplicationContext ( ) ) ) { applyLocalAccessGranted ( ) ; } else { applyLocalAccessDenied ( ) ; } }
public String getSrc ( ) { return src ; }
public void close ( ) { super . close ( ) ; etudiantDao = null ; }
public double getFatAmount ( double tdee ) { return ( tdee*0 . 25 ) /FAT_CAL_GRAM ; }
public void onChargingConnected ( int battery ) { if ( settingsManager . isChargingAnimation ( ) && ! isAnimationActive ) { isAnimationActive = true ; tempBatteryLevel = batteryLevel ; animation ( ) ; } }
public NextCard ( View v ) { super ( v ) ; v . findViewById ( R . id . card_generic_title ) . setVisibility ( View . GONE ) ; nextUpdate = ( TextView ) v . findViewById ( R . id . card_generic_content ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new WebviewFragment ( ) ; case 1 : return new SummariesFragment ( ) ; case 2 : return new ProfileFragment ( ) ; default : return null ; } }
public void openWikiPage ( int accountId , @ NonNull WikiPage page ) { PlaceFactory . getWikiPagePlace ( accountId , page . getViewUrl ( ) ) . tryOpenWith ( getActivity ( ) ) ; }
public void setMeasureNumber ( int measureNumber ) { this . measureNumber = measureNumber ; }
public int getType ( ) { return mType ; }
public void showCommentView ( ) { mCommentsView . setVisibility ( View . VISIBLE ) ; mCommentEditText . requestFocus ( ) ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = this . getMenuInflater ( ) ; inflater . inflate ( R . menu . abriss_results_context_menu , menu ) ; }
public void centerOnRangeOrigin ( Number origin ) { centerOnRangeOrigin ( origin , null , BoundaryMode . AUTO ) ; }
public List < LabelTable > getDbLabelTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getLabelTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public void onDeleteSession ( Session session ) { this . deleteSession ( dataStore , session ) ; this . updateAllSessionsList ( ) ; }
public synchronized void shutdown ( ) { for ( LightningView tab : mTabList ) { tab . onDestroy ( ) ; } mTabList . clear ( ) ; mCurrentTab = null ; }
private PrimaryEditorAction getPrimaryAction ( ) { return mEditorActionsProvider . getPrimaryAction ( mEditPostRepository . getStatus ( ) , UploadUtils . userCanPublish ( mSite ) ) ; }
public void onReceive ( Context context , Intent intent ) { if ( Intent . ACTION_BOOT_COMPLETED . equals ( intent . getAction ( ) ) ) { context . startService ( new Intent ( context , BootService . class ) ) ; } }
public void onClick ( View v ) { Prefs . saveInt ( "banner_size" , seekBar . getProgress ( ) + minHeight , getActivity ( ) ) ; NavigationActivity . restart ( ) ; getActivity ( ) . finish ( ) ; }
public void onNext ( ResultBean resultBean ) { list . add ( resultBean ) ; }
public static String getLastActivityStr ( ) { return getString ( PrefKey . LAST_ACTIVITY_STR , ActivityId . UNKNOWN . name ( ) ) ; }
public void onItemAtEndLoaded ( final TupleMessageEx itemAtEnd ) { Log . i ( "Boundary at end" ) ; queue_load ( false ) ; }
public boolean hasImages ( ) { return hasText ( ) && text . contains ( " < img " ) ; }
public Boolean get ( String key , Boolean defaultValue ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return prefs . getBoolean ( key , defaultValue ) ; }
public boolean isCollided ( Item other ) { return other . collideTest ( crashableMesh . cloneVertices ( ) , mModelMatrix . clone ( ) , makeBox ( ) ) ; }
public SaveCollection ( boolean syncIgnoresDatabaseModification ) { this . syncIgnoresDatabaseModification = syncIgnoresDatabaseModification ; }
public void onMinus ( Selector s ) { RemixedDungeon . quickSlots ( Math . max ( Math . abs ( RemixedDungeon . quickSlots ( ) ) - 1 , 0 ) ) ; }
public void onChanged ( List < TupleAccountEx > accounts ) { hasAccount = ( accounts != null && accounts . size ( ) > 0 ) ; }
public FillFormatter getFillFormatter ( ) { return mFillFormatter ; }
public NewmApplication provideNewmApplication ( ) { return application ; }
public boolean onError ( MediaPlayer mp , int what , int extra ) { return false ; }
public synchronized int count ( Class < ? > modelClass ) { return count ( BaseUtility . changeCase ( modelClass . getSimpleName ( ) ) ) ; }
public void cancelDeletion ( ) { if ( pendingRemoval != null ) { pendingRemoval . unsubscribe ( ) ; pendingRemoval = null ; itemsToRemove = null ; } }
private PendingIntent createOpenConversationsIntent ( ) { return PendingIntent . getActivity ( mXmppConnectionService , 0 , new Intent ( mXmppConnectionService , ConversationActivity . class ) , 0 ) ; }
public ArrayList < Song > loadInBackground ( ) { return GenreLoader . getSongs ( getContext ( ) , genre . id ) ; }
public void setArcana ( Enumerations . Arcana arcana ) { this . arcana = arcana ; }
public void setValue ( String mValue ) { this . mValue = mValue ; }
public void onClick ( DialogInterface dialog , int which ) { mPreferences . setUrlBoxContentChoice ( which ) ; if ( which < mUrlOptions . length ) { urlcontent . setSummary ( mUrlOptions [ which ] ) ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { Intent myIntent = new Intent ( getApplicationContext ( ) , CriarRota . class ) ; startActivityForResult ( myIntent , 0 ) ; return true ; }
public void setFactor ( double factor ) { this . factor = factor ; }
public void setLineSize ( float lineSize ) { LineSize = lineSize ; }
public void onDismissClick ( View view ) { finish ( ) ; LActivityUtil . tranIn ( getActivity ( ) ) ; }
public void cancelTyping ( int action , long dialog_id ) { HashMap < Long , Boolean > typings = sendingTypings . get ( action ) ; if ( typings != null ) { typings . remove ( dialog_id ) ; } }
public void onCancel ( DialogInterface dialog ) { sendDecision ( MTMDecision . DECISION_ABORT ) ; }
public boolean onPreferenceClick ( Preference preference ) { switch ( preference . getKey ( ) ) { case SETTINGS_THEME : themePicker ( ) ; return true ; case SETTINGS_TEXTSIZE : textSizePicker ( ) ; return true ; default : return false ; } }
public OutputFormatter ( ) { this ( MIN_PARAGRAPH_TEXT , NODES_TO_REPLACE ) ; }
public SoundPlayer createSoundPlayer ( Sound sound ) { DefaultSoundPlayer player = new DefaultSoundPlayer ( sound ) ; player . setMuted ( mSoundFxMuted ) ; mSoundPlayers . add ( new WeakReference <> ( player ) ) ; return player ; }
private void initializeListAdapter ( ) { list . setAdapter ( new ConversationListAdapter ( getActivity ( ) , masterSecret , GlideApp . with ( this ) , locale , null , this ) ) ; getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; }
private boolean isBlockAt ( int x , int y ) { return tileMap [ x ] [ y ] . isBlock ( ) ; }
public static MovieDetailViewState makeErrorState ( String id ) { return new MovieDetailViewState ( id , null , 0 , false , true ) ; }
public MappingTable ( Table table , CreatorForList < I , Cursor , Cursor > creator ) { this . table = table ; this . creator = creator ; }
public void refreshUI ( ) { mProviderManagementRecyclerView . setVisibility ( View . GONE ) ; mProgressBar . setVisibility ( View . VISIBLE ) ; mPresenter . getProviders ( this ) ; }
public List < Client > getPageItems ( ) { return pageItems ; }
public int getItemCount ( ) { if ( mMyStarNameDomains . size ( ) == 0 ) { return 1 ; } else { return mMyStarNameDomains . size ( ) ; } }
public RRError ( String title , String message ) { this ( title , message , null , null ) ; }
public Builder withJuzType ( int juzType ) { mJuzType = juzType ; return this ; }
public String getLogTag ( ) { return "About" ; }
public Config setDisableIcon ( boolean disableIcon ) { this . disableIcon = disableIcon ; return this ; }
public void onConfigurationChanged ( Configuration newConfig ) { mRecyclerView . stopScroll ( ) ; mGridLayoutManager . setSpanCount ( newConfig . orientation == Configuration . ORIENTATION_LANDSCAPE ? 2 : 1 ) ; super . onConfigurationChanged ( newConfig ) ; }
public void onClick ( View v ) { if ( exploreActivity != null ) { exploreActivity . showSuperweaponDialog ( ) ; } }
private void refreshUI ( ) { updateColorDetails ( ) ; updateColorSample ( ) ; updateRGBValues ( ) ; setRGBOValuesClickListener ( ) ; updateHSBValues ( ) ; updateHSLValues ( ) ; }
public void onClick ( View v ) { editProfileViaDialog ( v ) ; }
public String getDiscoverJson ( ) { return StringUtils . notNullStr ( discoverJson ) ; }
public void setSwipeResult ( int result ) { mSwipeResult = result ; }
public int getPaymentId ( ) { return paymentTypeId ; }
public void press ( ) { pressedOffset = Config . FONT_OFFSET_ON_BUTTON_PRESS ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `ondemand` INTEGER NOT NULL DEFAULT 0" ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { scrollToFinishActivity ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( DraggableWithLongPressExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public void onReceive ( Context context , Intent intent ) { Log . d ( "Tickmate" , "NotificationInstallerStartUp . onReceive" ) ; TickmateNotificationBroadcastReceiver . activateAlarm ( context ) ; }
public void fillInputBuffer ( byte [ ] input ) { inputBuffer = input ; inputIndex = 0 ; }
public void startActivityWithAnimation ( Intent intent , int animation ) { enableIntentAnimation ( intent ) ; super . startActivity ( intent ) ; enableActivityAnimation ( animation ) ; }
public JSONArray next ( ) { JSONArray array = getJSONArray ( index ) ; index ++ ; return array ; }
public String toString ( ) { return "MenuStatusEvent { " + "playerId = '" + playerId + '\'' + " , menuDirective = '" + menuDirective + '\'' + " , menuItems = " + Arrays . toString ( menuItems ) + ' } ' ; }
public LoadData < ByteBuffer > buildLoadData ( @ NonNull DatabaseEntry model , int width , int height , @ NonNull Options options ) { return new LoadData <> ( new UUIDKey ( model . getUUID ( ) ) , new Fetcher ( model ) ) ; }
public int getGroupCount ( ) { int length = 0 ; if ( this . houses != null ) length = this . houses . length ; return length ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . cm_grammar , menu ) ; }
public void whenPermissionIGranted_requestGeoShape_setsFormIndexWaitingForData ( ) { activityGeoDataRequester . requestGeoShape ( testActivity , prompt , "" , waitingForDataRegistry ) ; assertTrue ( waitingForDataRegistry . waiting . contains ( formIndex ) ) ; }
public long getDistance ( ) { return distance ; }
public static void spin ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . spin_enter , R . anim . spin_exit ) ; }
public static void trimCache ( Context context ) { try { File dir = context . getCacheDir ( ) ; if ( dir != null && dir . isDirectory ( ) ) { deleteDir ( dir ) ; } } catch ( Exception ignored ) { } }
public int getNo2 ( ) { return no2 ; }
public void blogLink_withBlogInPath__opensBrowser ( ) throws Exception { assertRedirectsToBrowser ( parseLink ( "https : assertRedirectsToBrowser ( parseLink ( "https : }
public MockSuccessResponse ( Resource resource ) { response = Response . success ( resource ) ; }
public void afterTextChanged ( Editable editable ) { SpanUtils . highlightSpans ( editable , mentionColour ) ; updateVisibleCharactersLeft ( ) ; }
public void onSellerClick ( int position , Seller seller ) { view . startSellerDetailScreen ( position , seller ) ; }
public void setItemQuantity ( int itemQuantity ) { this . itemQuantity = itemQuantity ; }
public void testGetShift_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . getShift ( ) , is ( shift ) ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `parent` INTEGER" ) ; }
public void init ( RegionFactbookCardData d ) { data = d ; SparkleHelper . setBbCodeFormatting ( context , cardContent , data . factbook , fragmentManager ) ; }
private List < Either < Placeholder , Status >> liftStatusList ( List < Status > list ) { return CollectionUtil . map ( list , statusLifter ) ; }
private void showProgress ( boolean visible ) { ProgressBar bar = ( ProgressBar ) findViewById ( R . id . progressBarLoadingRecite ) ; bar . setVisibility ( visible ? View . VISIBLE : View . INVISIBLE ) ; }
public void run ( ) { utils . setUpButtons ( status , counts , buttons , false , true ) ; }
public static boolean isInternalUrl ( String url , boolean forceBrowser [ ] ) { return isInternalUri ( Uri . parse ( url ) , forceBrowser ) ; }
public void setPointImages ( List < Object > pointImages ) { this . pointImages = pointImages ; }
private void setupToolbar ( ) { mBinding . SettingsButton . setOnClickListener ( view -> { Intent data = new Intent ( TimerActivity . this , SettingsActivity . class ) ; startActivityForResult ( data , THEME_REQUEST_CODE ) ; } ) ; }
public void addComments ( final Collection < RedditCommentListItem > comments ) { final Collection < GroupedRecyclerViewAdapter . Item > filteredComments = filter ( comments ) ; addItems ( filteredComments ) ; mCommentCount += filteredComments . size ( ) ; }
public void getCustomMediaUrlWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "" ) ; setCustomMediaServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public com . google . protobuf . Parser < Script > getParserForType ( ) { return PARSER ; }
public PreviewArea ( Context context ) { super ( context ) ; init ( ) ; }
private OnClickListener leaveMuc = new OnClickListener ( ) { @ Override public void onClick ( View v ) { activity . xmppConnectionService . archiveConversation ( conversation ) ; } } ;
public void startStop ( ) { if ( service == null ) { return ; } if ( service . isRecording ( ) ) { service . stop ( ) ; } else { startService ( new Intent ( this , MotoScoreService . class ) ) ; } }
public boolean isNeeded ( CommentModel model ) { return model . embedModel != null ; }
public void applyBasemaps ( GoogleMap map ) { applyGoogleBasemap ( map ) ; BasemapSettings settings = BasemapSettingsLoader . getInstance ( ) . loadSettings ( activity , prefs ) ; applyUserBasemap ( map , settings ) ; applyGridOverlay ( map , settings ) ; }
public void onItemCountUpdated ( int count ) { if ( count == 0 ) layout . showInfo ( R . string . noBatchAdd ) ; else layout . showList ( ) ; }
private void revert ( ) { queue = new ArrayList <> ( backupQueue ) ; songsIsStale = true ; }
public void setMinDate ( Date minDate ) { if ( minDate == null ) { minDateTime = null ; } else { minDateTime = CalendarHelper . convertDateToDateTime ( minDate ) ; } }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . menu_notifications , menu ) ; notificationmenuitem = menu . findItem ( R . id . archived ) ; setMenuItemTitle ( ) ; return true ; }
public void onClick ( View v ) { parent . onClickNumberButton ( bt_1 . getText ( ) . toString ( ) ) ; }
public void fetchWpComThemesIfSyncTimedOut ( boolean force ) { long currentTime = System . currentTimeMillis ( ) ; if ( force || currentTime - AppPrefs . getLastWpComThemeSync ( ) > WP_COM_THEMES_SYNC_TIMEOUT ) { mDispatcher . dispatch ( ThemeActionBuilder . newFetchWpComThemesAction ( ) ) ; } }
public static String prettifyTime ( String dateTime ) { String dateToDisplay = getDate ( dateTime ) ; String timeToDisplay = getTime ( dateTime ) ; return dateToDisplay + " " + timeToDisplay ; }
public void onClick ( DialogInterface dialog , int id ) { ( ( Fragment_gameturn_night ) ( ( Activity_gameturn ) getActivity ( ) ) . getAndReleaseFragment_game ( ) ) . display_next_role ( ) ; dialog . dismiss ( ) ; }
private NotificationCompat . Builder createBuilder ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . O ) { return new NotificationCompat . Builder ( mService , CHANNEL_ID ) ; } else { return new NotificationCompat . Builder ( mService ) ; } }
public void btnAddFeedClick ( ) { InputMethodManager imm = ( InputMethodManager ) getSystemService ( Context . INPUT_METHOD_SERVICE ) ; imm . hideSoftInputFromWindow ( mFeedUrlView . getWindowToken ( ) , 0 ) ; attemptAddNewFeed ( ) ; }
public void clickRandomItemTest ( ) { int x = getRandomRecyclerPosition ( R . id . list ) ; onView ( withId ( R . id . list ) ) . perform ( RecyclerViewActions . actionOnItemAtPosition ( x , click ( ) ) ) ; }
public boolean onTouchEvent ( TextView widget , Spannable buffer , MotionEvent event ) { boolean result = false ; if ( isSelectionModeEnabled ) { result = super . onTouchEvent ( widget , buffer , event ) ; } itemView . onTouchEvent ( event ) ; return result ; }
public void onChildRemoved ( DataSnapshot dataSnapshot ) { mainAdapter . removeItem ( dataSnapshot ) ; }
public Hangout_collegeLocations . LocationGroup getGroup ( int groupPosition ) { return LocationItems . get ( groupPosition ) ; }
public void onClick ( View v ) { SharedPreferences . Editor editor = preferences . edit ( ) ; editor . putBoolean ( "schedule_change_notification" , scheduleChangeSwitch . isChecked ( ) ) ; editor . apply ( ) ; }
public String [ ] getHistory ( ) { return LyricsSearchSuggestionsProvider . getHistory ( getContext ( ) ) ; }
public boolean isRunning ( ) { return super . isRunning ( ) ; }
public boolean onHookGroupCollapse ( int groupPosition , boolean fromUser , Object payload ) { return onHookGroupCollapse ( groupPosition , fromUser ) ; }
private void signMessage ( ) { if ( pocket . isEncrypted ( ) ) { showUnlockDialog ( ) ; } else { maybeStartSigningTask ( ) ; } }
public void notifyCleared ( ) { for ( DbObserver observer : observers ) { observer . cleared ( ) ; } }
public int getPageNumber ( ) { return mPageNumber ; }
public static List < WeatherEntity > getLastData ( Context context ) { AppDatabase db = AppDatabase . getAppDatabase ( context ) ; Log . i ( TAG , "AQI data loaded from DB" ) ; return db . weatherDao ( ) . getLast ( ) ; }
private CheckBox addSupport ( View convertView , boolean action , int id ) { CheckBox check = ( CheckBox ) convertView . findViewById ( id ) ; check . setVisibility ( View . VISIBLE ) ; check . setOnCheckedChangeListener ( this ) ; } */ return check ; }
static public void logScene ( final String scene ) { if ( ! mDisabled ) { GameLoop . runOnMainThread ( ( ) -> mFirebaseAnalytics . setCurrentScreen ( Game . instance ( ) , scene , null ) ) ; } }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return MovieViewHolder . create ( parent , glide ) ; }
public static boolean checkAction ( Intent i , String action ) { return i . getAction ( ) . equals ( action ) ; }
public AMUiUtil ( Context context ) { mContext = context ; }
private void stopBackgroundThread ( ) { backgroundThread . quitSafely ( ) ; try { backgroundThread . join ( ) ; backgroundThread = null ; backgroundHandler = null ; } catch ( InterruptedException e ) { notifyError ( e . getLocalizedMessage ( ) ) ; } }
private Card _newCard ( Note note , JSONObject template , int due , int parameterDid , boolean flush ) { Card card = new Card ( this ) ; return getNewLinkedCard ( card , note , template , due , parameterDid , flush ) ; }
public void onAnimationStart ( ValueAnimatorCompat animation ) { }
public RestServer . ResponseType tryLoadStoryDef ( Context context , RestServer server ) { return RestServer . ResponseType . NO_INTERNET ; } ;
public static Message create ( final State state , final String body , final LocalDateTime time ) { return new AutoValue_Message ( state , body , time ) ; }
private static void hideTheCountdown ( RemoteViews rv ) { rv . setViewVisibility ( R . id . countdownFlipper , View . GONE ) ; rv . setChronometer ( R . id . countdownChronometer , 0 , null , false ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; viewVideoActivity = ( ViewVideoActivity ) context ; }
private static void doTest ( String input , CharSequence expected ) throws WriterException { BitMatrix result = encode ( input ) ; assertEquals ( expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
public AnalogAltimeterSettable ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; setLongClickable ( true ) ; setOnTouchListener ( this ) ; gestures = new GestureDetector ( getContext ( ) , this ) ; }
public int launcherIcon ( ) { return R . mipmap . ic_launcher ; }
public void run ( ) { download ( holder , onFinish , activity ) ; }
public void setTimezone ( String timezone ) { this . timezone = TimeZone . getTimeZone ( timezone ) ; }
public BookIntentService ( ) { super ( "Capstone" ) ; }
private LinkParser . ParseResult parseLink ( String uriString ) { return LinkParser . parseUri ( mActivity , Uri . parse ( uriString ) ) ; }
public void onClick ( View v ) { new SshCommand ( command ) . start ( ) ; }
public DownloadedDrawable ( BitmapDownloaderTask bitmapDownloaderTask ) { bitmapDownloaderTaskReference = new WeakReference < BitmapDownloaderTask > ( bitmapDownloaderTask ) ; }
public CursorAdapter getAdapter ( ) { return ( CursorAdapter ) mAdapter ; }
public void onClick ( View view ) { showToc ( ) ; hideMenu ( ) ; }
public void GetFicheDataAsync ( final String Id ) { executeAsync ( new Functions . IFunc < FicheEmploye > ( ) { public FicheEmploye Func ( ) throws java . lang . Exception { return GetFicheData ( Id ) ; } } ) ; }
private Collection < Trigger < E >> getCachedTriggers ( boolean refreshCache ) { if ( cachedTriggers == null || refreshCache ) { cachedTriggers = ( hasTriggerResolver ( ) ) ? Collections . emptyList ( ) : triggerResolver . getAllTriggers ( ) ; } return cachedTriggers ; }
public void shouldGetRepositoryInstanceForValidConfig ( ) { givenSomeProvider ( ) ; whenRetrievingRepository ( ) ; thenShouldHaveRepositoryInstance ( ) ; }
public static boolean setNotificationLEDColor ( Context context , int color ) { return sPreferences . edit ( ) . putInt ( "pref_notification_led_color" , color ) . commit ( ) ; }
public void update ( long points ) { if ( gameLogic . hasWon ( ) ) return ; score += points ; output ( ) ; }
public View makeView ( ) { TextView view = ( TextView ) getLayoutInflater ( ) . inflate ( R . layout . view_title , null ) ; if ( view != null ) { view . setTextColor ( titleTextColor ) ; } return view ; }
private void fail ( ) { mHttpConnectionManager . finishUploadConnection ( this ) ; message . setTransferable ( null ) ; mXmppConnectionService . markMessage ( message , Message . STATUS_SEND_FAILED ) ; FileBackend . close ( mFileInputStream ) ; }
public aboutPageRVAdapter . aboutPageViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . row1 , parent , false ) ; return new aboutPageRVAdapter . aboutPageViewHolder ( view ) ; }
public void run ( TLObject response , TLRPC . TL_error error ) { if ( error != null ) { return ; } MessagesController . getInstance ( ) . processUpdates ( ( TLRPC . Updates ) response , false ) ; }
public SecurityService ( Context context ) { _context = context ; loadMinisignPublicKey ( BuildConfig . MINISIGN_SIGNATURE_VALIDATION_PUBLIC_KEY ) ; }
public void onClick ( DialogInterface dialog , int id ) { removeDialog ( DIALOG_DONATE ) ; displayFacebookShare ( ) ; }
private void startSplashScreenActivity ( ) { Intent intent = new Intent ( this , SplashScreenActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_CLEAR_TOP|Intent . FLAG_ACTIVITY_NEW_TASK ) ; startActivity ( intent ) ; finish ( ) ; }
public void testSafeToAddAuthToken8 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( wpcomAddress1 ) ) ) ; }
public static void showPermissionRequestDialog ( @ NonNull FragmentManager fragmentManager , @ StringRes int appNameId ) { PermissionRequestDialogFragment dialog = PermissionRequestDialogFragment . newInstance ( appNameId ) ; dialog . show ( fragmentManager , "PermissionRequestDialogFragment" ) ; }
public void delete ( List < String > ids ) { SharedPreferences . Editor editor = getSetting ( ) . edit ( ) ; for ( String id : ids ) { editor . remove ( id ) ; } editor . apply ( ) ; }
public void onClick ( View view ) { DbExecutor . getInstance ( ) . deleteItem ( item ) ; new MyAsyncTask ( IgnoreActivity . this ) . execute ( ) ; }
public LocationOverlay ( Map map ) { super ( map ) ; mRenderer = new LocationIndicator ( ) ; setEnabled ( false ) ; }
public void getEvents ( long characterId , Integer offset , Integer limit , Callback < DataWrapper < List < Comic >>> listener ) { getComicListByType ( characterId , COMIC_TYPE_EVENTS , offset , limit ) . enqueue ( listener ) ; }
public int getCount ( ) { return msgs . length ( ) ; }
public static boolean getAutoAcceptSubscriptions ( Context context ) { return getBoolean ( context , "pref_auto_accept_subscriptions" , context . getResources ( ) . getBoolean ( R . bool . pref_default_auto_accept_subscriptions ) ) ; }
public void onClick ( View v ) { checkIfAnsweredAndAnswer ( "no" ) ; }
public FileMeta [ ] newArray ( int size ) { return new FileMeta [ size ] ; }
public void onClick ( DialogInterface dialog , int which ) { new DeleteVocab ( ) . execute ( mCurrentVocabItem ) ; }
public void onResume ( ) { super . onResume ( ) ; Lg . i ( "onResume" ) ; }
public void open ( ) { if ( db != null ) { return ; } db = helper . getWritableDatabase ( ) ; }
public int compareTo ( SideSortInfo another ) { return AndroidUtils . longCompare ( id , another . id ) ; }
public void testLoadingHindiLipsum ( ) throws IOException { onBookFile ( "lipsum/Hindi - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
public void setDayMonth ( String dayMonth ) { this . dayMonth = dayMonth ; }
private ConfigManager ( ) { configDir = new File ( Environment . getExternalStorageDirectory ( ) , "Mercury - SSH" ) ; mapper = new ServerMapper ( ) ; servers = new ArrayList <> ( ) ; }
private ClassLoader getClassLoader ( String componentFilePath ) { if ( mClassLoader == null ) { mClassLoader = new StyleClassLoader ( this , componentFilePath , getCacheDir ( ) . getAbsolutePath ( ) , null , getBaseContext ( ) . getClassLoader ( ) ) ; } return mClassLoader ; }
public SuggestionsAdapter ( final Context context ) { super ( context , new SearchSuggestionCursor ( ) , 0 ) ; }
public void setFontColor ( int color ) { mTitleFontColor = color ; }
public boolean isVariable ( ) { if ( mathType != MathType . INVALID ) { return expression . isVariable ( ) ; } else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
public AndroidFragmentFrameLayout getRootLayout ( ) { return innerRootLayout ; }
public static String getExtraKeysInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNull ( value , TermuxPropertyConstants . DEFAULT_IVALUE_EXTRA_KEYS ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( index ) ; dest . writeString ( content ) ; dest . writeString ( header ) ; }
public void setWebseite ( String webseite ) { this . _webseite = webseite ; }
public ScheduleItem ( int id , String name ) { this . id = id ; this . name = name ; }
public void setData ( UserList users ) { mUsers = users ; notifyDataSetChanged ( ) ; }
public void testGetHttpFileName ( ) { String actual = Utils . getHttpFileName ( fs , "http : assertEquals ( "file . txt" , actual ) ; actual = Utils . getHttpFileName ( fs , "http : assertEquals ( "file . txt" , actual ) ; }
public void onCreate ( ) { authenticator = new Authenticator ( this ) ; }
public boolean setSelection ( int position ) { return setSelection ( position , true ) ; }
public FormEndPage clickForwardButtonToEndScreen ( ) { onView ( withText ( getTranslatedString ( R . string . form_forward ) ) ) . perform ( click ( ) ) ; return new FormEndPage ( formName , rule ) . assertOnPage ( ) ; }
public static int codePointCount ( @ Nullable final CharSequence text ) { if ( isEmpty ( text ) ) { return 0 ; } return Character . codePointCount ( text , 0 , text . length ( ) ) ; }
public void onBackPressed ( ) { ReaderPostListFragment fragment = getListFragment ( ) ; if ( fragment == null || ! fragment . goBackInTagHistory ( ) ) { super . onBackPressed ( ) ; } }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { UTILS . showToast ( BrowserActivity . this , R . string . text_loadFailed ) ; } } ) ; }
public DB openCollectionDatabase ( String path ) { return new DB ( path ) ; }
public void onViewCreated ( boolean isLaunched ) { view . setupView ( ) ; if ( isLaunched ) { retrieveCollections ( ) ; } }
public void hide ( ) { if ( ! consentChoosen ) { Game . toast ( Game . getVar ( R . string . gdpr_choose ) ) ; } else { super . hide ( ) ; } }
public int getItemCount ( ) { return GRID_SIZE * GRID_SIZE ; }
public int getKeyStates ( ) { return key ; }
public XmppAxolotlSession ( Account account , SQLiteAxolotlStore store , AxolotlAddress remoteAddress , IdentityKey identityKey ) { this ( account , store , remoteAddress ) ; this . identityKey = identityKey ; }
public ActivityBuilder setRequestedSize ( int reqWidth , int reqHeight ) { return setRequestedSize ( reqWidth , reqHeight , CropImageView . RequestSizeOptions . RESIZE_INSIDE ) ; }
public void onBindLastSeenViewHolder ( HeaderViewHolder viewHolder , int position ) { viewHolder . setText ( getContext ( ) . getResources ( ) . getQuantityString ( R . plurals . chat_n_unread_messages , ( position + 1 ) , ( position + 1 ) ) ) ; }
public TranslationsHandler ( String uri ) { super ( uri ) ; }
public void onClick ( View view ) { setVisible ( false ) ; switchActivities ( domColor ) ; finish ( ) ; }
public void onFinish ( ) { restoreDefaultVolume ( ) ; }
public void setReadingElementValue ( String readingElementValue ) { mReadingElementValue = readingElementValue ; }
public void onResume ( ) { super . onResume ( ) ; getLoaderManager ( ) . restartLoader ( VEHICLE_LOADER , null , this ) ; }
public void setHoldingsCount ( Long holdingsCount ) { this . holdingsCount = holdingsCount ; }
public synchronized String getMessages ( ) { StringBuilder messages = new StringBuilder ( ) ; for ( String msg : loggedMessaagesQueue ) messages . append ( msg ) ; return messages . toString ( ) ; }
public int getStatementHandle ( ) { return sqliteStatementHandle ; }
public static boolean getPremiumStatus ( Activity a ) { SharedPreferences sharedPref = a . getSharedPreferences ( "APP_SETTINGS" , Context . MODE_PRIVATE ) ; return sharedPref . getBoolean ( "premium" , false ) ; }
public static String getPushSenderId ( Context context ) { return getString ( context , "pref_push_sender" , null ) ; }
private void showAllLinks ( ) { mLinksAdapter = new LinksAdapter ( this , mLinkStorage . getAllLinks ( mFilterMode , mSortMode ) ) ; updateUiAfterAdapterChange ( ) ; }
private boolean isAnotherItemCloserThanCurrent ( ) { return Math . abs ( scrolled ) >= scrollToChangeCurrent * 0 . 6f ; }
public DataEstimator getEstimator ( ) { return mApp . estimator ; }
public JResult extractContent ( JResult res , String html ) throws Exception { return extractContent ( res , html , formatter ) ; }
public void onActionModeStarted ( ActionMode mode ) { if ( currentActionBar != null ) { currentActionBar . setVisibility ( GONE ) ; } inActionMode = true ; }
public void handleError ( ) { App . clearPreferences ( this ) ; Intent intentBackToWelcome = new Intent ( this , WelcomeActivity . class ) ; intentBackToWelcome . putExtra ( "login_failed" , true ) ; startActivity ( intentBackToWelcome ) ; }
public Builder clearLockTime ( ) { bitField0_ = ( bitField0_ & ~0x00000008 ) ; lockTime_ = 0 ; onChanged ( ) ; return this ; }
public void onClick ( DialogInterface dialog , int which ) { switch ( which ) { case 0 : mPreferenceManager . setDownloadDirectory ( DownloadHandler . DEFAULT_DOWNLOAD_PATH ) ; downloadloc . setSummary ( DownloadHandler . DEFAULT_DOWNLOAD_PATH ) ; break ; case 1 : downPicker ( ) ; break ; } }
private void initLedColorPrefs ( ) { binding . chooseLedColorPrefs . setOnClickListener ( mLedColorClick ) ; binding . chooseLedColorPrefs . setDependentView ( binding . ledPrefs ) ; }
public void testMinimalEncoder14 ( ) throws Exception { verifyMinimalEncoding ( "123A" , "ALPHANUMERIC ( 123A ) , TERMINATOR ( ) " , null , false ) ; }
public void installModAsync ( Context context , @ NonNull Mod mod , @ NonNull File zip , String path ) { ModInstallService . startActionInstall ( context , srr , mod . name , zip , path ) ; }
public void update ( API . Callback cb ) { api ( ) . updatePlant ( plant , id , cb ) ; }
public void run ( ) { doTurnOnContinuousHeartRateSensor ( ) ; }
public void initializeCategories ( ) { initializeTable ( "categories . txt" , CategoryContract . columnName , CategoryContract . getTableName ( ) ) ; }
public void onFocalPressed ( ) { if ( ! mDismissing ) { onPromptStateChanged ( STATE_FOCAL_PRESSED ) ; if ( mView . mPromptOptions . getAutoFinish ( ) ) { finish ( ) ; } } }
public void clearImage ( ) { for ( int a = 0 ; a < 3 ; a ++ ) { recycleBitmap ( null , a ) ; } ImageLoader . getInstance ( ) . cancelLoadingForImageReceiver ( this , 0 ) ; }
public static String [ ] getScopes ( String resourceServerBaseUrl ) { return new String [ ] { String . format ( SummitRead , resourceServerBaseUrl ) , } ; }
public static void show ( Context context , @ StringRes int resId , Object . . . formatArgs ) { if ( isShow ) show ( context , context . getString ( resId , formatArgs ) ) ; }
public void run ( ) { AsyncHttpLoader . this . onNetworkFailure ( 0 , null , "" , throwable ) ; }
public void onClick ( View view ) { SystemUtils . dial ( CodeValidation . this , senderCall . getText ( ) ) ; }
public String getSectionName ( int position ) { return MusicUtil . getSectionName ( dataSet . get ( position ) . name ) ; }
public void reconcileSelectedTransactions ( long [ ] ids ) { String sql = "UPDATE " + TRANSACTION_TABLE + " SET " + TransactionColumns . status + " = '" + TransactionStatus . RC ; runInTransaction ( sql , ids ) ; }
public void deleteSuccessfully ( Tag tag ) { adapter . deleteTag ( tag ) ; showSnackbarMessage ( listView , R . string . msg_tag_removed ) ; }
public void setShowChartLines ( boolean in ) { mChartLines = in ; }
public void clearSaved ( ) { e . clear ( ) . apply ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . main ) ; registerForContextMenu ( getListView ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( ApplicationPreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . text_secure_normal__menu_settings ) ; setCategorySummaries ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; mapView . onSaveInstanceState ( outState ) ; }
public void setOrientation ( int orientation ) { if ( orientation != HORIZONTAL_LIST && orientation != VERTICAL_LIST ) { throw new IllegalArgumentException ( "invalid orientation" ) ; } mOrientation = orientation ; }
public void onFailedDownload ( String name ) { updateFileExistIcon ( ) ; }
public void setFieldOfApplication ( List < String > fieldOfApplication ) { mFieldOfApplication = fieldOfApplication ; }
public WebApi . Result apply ( WebApi . Result result ) { if ( result . isSuccess ( ) ) { return result ; } else { throw new RequestFailedException ( ) ; } }
public long getPostId ( ) { return postId ; }
public void onClick ( DialogInterface dialog , int which ) { savePrefConvertWarn ( ! dontShowAgain . isChecked ( ) ) ; doConvertPdf ( pdfPath , txtPath ) ; }
public void setRangeRepeatCount ( int rangeRepeatCount ) { mRangeRepeatInfo . setRepeatCount ( rangeRepeatCount ) ; }
public void onCallUnhold ( ) { mOnHold = false ; }
public void setFrame ( int frame ) { if ( this . frame == frame ) { return ; } this . frame = MiscUtils . clamp ( frame , getMinFrame ( ) , getMaxFrame ( ) ) ; lastFrameTimeNs = 0 ; notifyUpdate ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == R . id . action_settings ) { return true ; } return super . onOptionsItemSelected ( item ) ; } */
public void getRootIdShouldReturnTheProperRootFolderId ( ) throws IOException { String rootId = "root_id" ; doReturn ( rootId ) . when ( mockedDriveService ) . getFileId ( "root" , "id" ) ; assertEquals ( rootId , driveHelper . getRootFolderId ( ) ) ; }
public void onClick ( View v ) { if ( isPositiveButtonOnClickDismiss ) { dismiss ( ) ; } if ( positiveClickListener != null ) { positiveClickListener . onClick ( BUTTON_POSITIVE ) ; } }
public void doNegativeClickContinueDialog ( ) { mSelectedPlayer . setWinner ( true ) ; mSelectedPlayer . incrementLvl ( ) ; finishClick ( ) ; }
public void handleRetryClicked ( ) { hidePageDownloadError ( ) ; quranPagePresenter . downloadImages ( ) ; }
public FormattableEditText ( Context context ) { super ( context ) ; }
public AboutBuilder addShareAction ( String subject ) { return addShareAction ( subject , context . getString ( R . string . uri_play_store_app_website , context . getPackageName ( ) ) ) ; }
public void onActivityCreated ( Activity activity , Bundle savedInstanceState ) { handleActivity ( activity ) ; }
public void reset ( ) { for ( Card card : cards ) { card . stopAnim ( ) ; } }
public void cancelKeyTimersOf ( @ NonNull final PointerTracker tracker ) { cancelKeyRepeatTimerOf ( tracker ) ; cancelLongPressTimersOf ( tracker ) ; }
public void showProgress ( ) { pbProgress . setVisibility ( View . VISIBLE ) ; inProgress = true ; }
public void run ( ) { while ( cardDevices . values ( ) . remove ( cardDevice ) ) ; }
public void setSeekParameters ( @ Nullable SeekParameters seekParameters ) { player . setSeekParameters ( seekParameters ) ; }
public void run ( ) { try { finalProgress . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
private void resetUsageCount ( ) { getPreferences ( ) . resetUsageCount ( _origEntry . getUUID ( ) ) ; _textUsageCount . setText ( "0" ) ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { super . onCreatePreferences ( savedInstanceState , rootKey ) ; addPreferencesFromResource ( R . xml . preferences_gestures ) ; }
public void testGetItemNoListener ( ) { client . getItem ( "1" , ItemManager . MODE_DEFAULT , null ) ; verify ( TestRestServiceFactory . hnRestService , never ( ) ) . itemRx ( anyString ( ) ) ; }
public Call < ResponseBody > addWallet ( Context context , WalletRealmObject wallet ) { return api . addWallet ( wallet ) ; }
public void onResponse ( JSONObject response ) { callback . onResponse ( response , type ) ; }
public void onDeleteSession ( Session session ) { this . deleteSession ( dataStore , session ) ; this . update ( ) ; }
public void put ( String type , String extension , int icon ) { put ( type , extension ) ; mIcons . put ( extension , icon ) ; }
public static void showSimpleSnackbar ( Activity activity , int mainTextResource , boolean shortLength ) { View root = activity . findViewById ( R . id . root_layout ) ; showSnackbar ( activity , mainTextResource , shortLength , - 1 , null , root ) ; }
public static String getString ( Context context , String code , @ StringRes int keyId , String defaultValue ) { String key = String . format ( "%s_%s" , code , getKey ( context , keyId ) ) ; return getString ( context , key , defaultValue ) ; }
public void resetQueryFilter ( ) { if ( ! Util . isEmpty ( this . queryFilter ) ) { setQueryFilter ( "" ) ; } }
public static void setReaderSubsPageTitle ( String pageTitle ) { setString ( PrefKey . READER_SUBS_PAGE_TITLE , pageTitle ) ; }
public void onPanelExpanded ( View view ) { if ( sliding_layout != null ) sliding_layout . setDragView ( viewSwitcherProgress ) ; viewSwitcherProgress . setDisplayedChild ( 1 ) ; }
public static boolean syncOnNoteCreate ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_auto_sync_on_note_create ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_auto_sync_on_note_create ) ) ; }
public void onClick ( View v ) { mainLayout . requestFocus ( ) ; hideSoftKeyboard ( CardAddEditActivity . this ) ; fieldSelectDialog ( "owner" ) ; }
public float getFinal ( ) { return mFinalValue ; }
public synchronized void setAccessToken ( RedditOAuth . AccessToken token ) { accessToken = token ; }
public CharSequence getPageTitle ( int position ) { if ( usedArray != null ) { return abbreviate ( usedArray . get ( position ) , 25 ) ; } else { return "" ; } }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return ( ( ShopFragment ) getParentFragment ( ) ) . setPageChosen ( this . mPage - 1 , inflater , container ) ; }
private boolean isLoadableExceptionFatal ( IOException e ) { return e instanceof ExtractorMediaSource . UnrecognizedInputFormatException ; }
public void clear ( ) { mDispatcher . unregister ( this ) ; mContext = null ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( JobsListener ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( activity . toString ( ) + " must implement JobsListener" ) ; } }
public static boolean isDebugAnimator ( ) { return sDebugAnimator ; }
private void thenShouldCreateAnArrayWithSize ( int expectedSize ) { assertNotNull ( expectedSize ) ; assertEquals ( expectedSize , forecastArray . length ) ; }
public int icon ( ) { return BuffIndicator . HEALING ; }
public void setDiagnosesToDisplay ( List < String > encounters ) { ArrayAdapter < String > adapter = new ArrayAdapter <> ( getActivity ( ) , android . R . layout . simple_list_item_1 , encounters ) ; mDiagnosisList . setAdapter ( adapter ) ; }
public MessagePatch setDate ( long date ) { this . date = date ; return this ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { TupleAccountEx f1 = prev . get ( oldItemPosition ) ; TupleAccountEx f2 = next . get ( newItemPosition ) ; return f1 . equals ( f2 ) ; }
public void setCallbacks ( final Playback . PlaybackCallbacks callbacks ) { this . callbacks = callbacks ; }
public void onClick ( View view ) { String geoName = detailPageAdapter . getGeoPackageName ( ) ; if ( geoName != null ) { newTileLayerWizard ( geoName ) ; } }
public int hashCode ( ) { return Objects . hash ( appid , date , id , message , priority , title ) ; }
public StringAdapter ( final Context context , final List objects ) { this ( context , objects , 0 ) ; }
private void handleLocationUpdate ( fr . free . nrw . commons . location . LatLng latLng , LocationServiceManager . LocationChangeType locationChangeType ) { this . lastKnownLocation = latLng ; NearbyController . currentLocation = lastKnownLocation ; presenter . updateMapAndList ( locationChangeType ) ; }
public void onRefresh ( ) { updateBody ( ) ; }
public void onClick ( View v ) { intent . intentSharedElementWithExtra ( a , "activity . AboutActivity" , R . id . cardview_dev_image , "transition" , "about" , "dev" , 0 , v ) ; }
public String name ( ) { if ( hungerLevel < STARVING ) { return Game . getVar ( R . string . HungerBuff_Name1 ) ; } else { return Game . getVar ( R . string . HungerBuff_Name2 ) ; } }
public void write ( byte [ ] buffer ) throws IOException { out . write ( buffer ) ; publishProgress ( buffer . length ) ; }
private static String generateId ( ) { return UUID . randomUUID ( ) . toString ( ) ; }
public Line getFirst ( ) { return lineList . get ( 0 ) ; }
private void prepareNextExercise ( ) { if ( gameMode != null ) { gameMode . updateGameforNextExercise ( gameView ) ; } }
public static String getSubtypeNameForLogging ( @ Nullable final InputMethodSubtype subtype ) { if ( subtype == null ) { return " < null subtype > " ; } return getSubtypeLocale ( subtype ) + "/" + getKeyboardLayoutSetName ( subtype ) ; }
public @ NonNull CategoryModel [ ] getCategories ( ) { if ( mSettings . categories == null ) mSettings . categories = new CategoryModel [ 0 ] ; return mSettings . categories ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_battery_chart , container , false ) ; ButterKnife . bind ( this , view ) ; return view ; }
public ListMapper ( InverseMapper < M1 , M2 > mapper ) { this . mapper = mapper ; }
public long getViewDataId ( ) { return getId ( ) . hashCode ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { adp1 . removeCustomAircraftDescriptor ( cad ) ; resetListAdapter ( ) ; }
public void testEncodeIllegalCharacters ( ) throws WriterException { new UPCEWriter ( ) . encode ( "05096abc" , BarcodeFormat . UPC_E , 0 , 0 ) ; }
public void setMaxDelay ( int maxDelay ) { this . maxDelay = maxDelay ; }
private boolean isInLowPingTimeoutMode ( Account account ) { synchronized ( mLowPingTimeoutMode ) { return mLowPingTimeoutMode . contains ( account . getJid ( ) . toBareJid ( ) ) ; } }
public OffsetLinearLayout ( Context context ) { super ( context ) ; }
public void onClick ( View v ) { submit ( login_username , login_password ) ; }
public void onDestroyActionMode ( ActionMode mode ) { actionMode = null ; }
public String getCondition ( ) { return condition ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . SIN ) ; }
public void onClick ( View view ) { mGridPagerAdapter . removeAll ( ) ; mListPresenter . getCharacters ( ) ; }
public boolean isExist ( int sessionId ) { return localDataSourse . isExist ( sessionId ) ; }
public void setPm10 ( int pm10 ) { this . pm10 = pm10 ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; mActivity . subscribeToMusicEvents ( this ) ; mActivity . subscribeToPaletteColors ( this ) ; }
public void setLink ( String link ) { this . link = link ; notifyPropertyChanged ( BR . link ) ; }
public CustomWeekBar ( Context context ) { super ( context ) ; LayoutInflater . from ( context ) . inflate ( R . layout . english_week_bar , this , true ) ; setBackgroundColor ( Color . WHITE ) ; }
public com . coinomi . core . protos . Protos . Key getSeed ( ) { if ( seedBuilder_ == null ) { return seed_ ; } else { return seedBuilder_ . getMessage ( ) ; } }
public int getNumNames ( ) { return names . size ( ) ; }
public void testGetCaste ( ) { assertThat ( planetaryCalendar . getCaste ( days ) , is ( caste ) ) ; }
public void setVertretungsplan ( Vertretungsplan vertretungsplan ) { this . vertretungsplan = vertretungsplan ; }
public void describeTo ( Description description ) { description . appendText ( "is displayed" ) ; }
public void onCommentDeleted ( ) { removeItemAt ( position ) ; }
public static com . coinomi . core . protos . Protos . ScryptParameters parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public CharSequence getTitle ( ) { return context . getResources ( ) . getString ( R . string . git_clone ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . aiprog . template" , appContext . getPackageName ( ) ) ; }
public boolean isRunning ( ) { return mRunning ; }
public void setTopSellingMovies ( List < MovieRatingEntity > topSellingMovies ) { this . topSellingMovies = topSellingMovies ; }
public void usingReadOnlyOption_doesNotShowButton ( ) { assertThat ( createWidget ( promptWithReadOnly ( ) ) . launchOpenMapKitButton . getVisibility ( ) , is ( View . GONE ) ) ; }
private void canNotHandlePayment ( final String message ) { mBinding . readError . setText ( message ) ; mBinding . setPaymentStep ( READ_ERROR ) ; }
private static @ NonNull File getExternalDir ( Context context ) throws IOException { final File externalDir = context . getExternalFilesDir ( null ) ; if ( externalDir == null ) throw new IOException ( "no external files directory" ) ; return externalDir ; }
public void onCancel ( DialogInterface d ) { if ( d != null ) { d . cancel ( ) ; } }
public static void deleteQueryString ( @ NonNull String query ) { String [ ] args = new String [ ] { query } ; ReaderDatabase . getWritableDb ( ) . delete ( "tbl_search_history" , "query_string = ?" , args ) ; }
public ArrayList < PairUp > getPairUps ( ) { return pairUps ; }
private OnClickListener mScrollButtonListener = new OnClickListener ( ) { @ Override public void onClick ( View v ) { stopScrolling ( ) ; setSelection ( binding . messagesView . getCount ( ) - 1 , true ) ; } } ;
public boolean pause ( ) { try { mCurrentMediaPlayer . pause ( ) ; return true ; } catch ( IllegalStateException e ) { return false ; } }
public final int getMaxProgress ( ) { if ( progressBar == null ) return - 1 ; return progressBar . getMax ( ) ; }
public void onClick ( View view ) { itemClickListener . onAudioItemClick ( postion ) ; }
public ViewPageAdapter ( FragmentManager fm ) { super ( fm ) ; }
private static RuntimeException citiesReadOnly ( ) { return new RuntimeException ( "Cannot write cities , they are read - only . " ) ; }
public int getMaxHealth ( ) { return UNIT_TANK_HEALTH ; }
public void testECIEnglishCzechCyrillic1 ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u010c' , '\u042f' } , new float [ ] { 10f , 1f , 10f , 10f } , 91482 , 124525 ) ; }
public MainViewModel ( @ NonNull Application application , @ NonNull SavedStateHandle savedStateHandle ) { super ( application ) ; this . db = NotesDatabase . getInstance ( application ) ; this . state = savedStateHandle ; }
public void dayTwo ( View v ) { Intent one = new Intent ( Schedule . this , DayTwo . class ) ; startActivity ( one ) ; }
public PostCommentListingURL order ( final Sort order ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public static InternetBlocklist getInstance ( Context c ) { if ( instance == null ) { instance = new InternetBlocklist ( c ) ; } return instance ; }
public void setModified ( Calendar modified ) { this . modified = modified ; }
public static ISavingModule getNewSavingModule ( final Context parContext ) { return new PrefsSavingModule ( parContext ) ; }
private void resetOriginalNotification ( ) { GCMMessageService . rebuildAndUpdateNotificationsOnSystemBarForThisNote ( mContext , mNoteId ) ; }
public void onClick ( View v ) { displayFacebookShare ( ) ; }
public void onStop ( ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessage . getMessage ( MsgType . STOP ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public void onClick ( View arg0 ) { JobActivity . this . rateButtonClicked ( ) ; }
public void onClick ( View v ) { IconSelectionDialog id = new IconSelectionDialog ( false ) ; id . setCallback ( EditorFragment . this ) ; id . show ( getBaseActivity ( ) . getSupportFragmentManager ( ) , "icondialog" ) ; }
public static boolean isShipCVE ( int id ) { int [ ] ship_cve = { 396 , 380 , 381 , 526 , 529 , 534 , 536 , 544 , 560 } ; return Arrays . binarySearch ( ship_cve , id ) >= 0 ; }
public long getEndTime ( ) { return endTime ; }
public void removeListener ( EventListener listener ) { player . removeListener ( listener ) ; }
private void setShuffleModeEnabledInternal ( boolean shuffleModeEnabled ) throws ExoPlaybackException { this . shuffleModeEnabled = shuffleModeEnabled ; if ( ! queue . updateShuffleModeEnabled ( shuffleModeEnabled ) ) { } updateLoadingMediaPeriodId ( ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeUTF ( msg ) ; }
public void showsOnlyDirectoriesIfSpecifiedInExtra ( ) { android . launches ( ) . pickFileWithDirOnlyExtra ( ) ; user . sees ( ) . fileInList ( SDCARD_MARKER_DIR_NAME ) ; user . cannotSee ( ) . fileInList ( textFile . getName ( ) ) ; }
public static List < UploadableFile > handleExternalImagesPicked ( Intent data , Activity activity ) { try { return getFilesFromGalleryPictures ( data , activity ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return new ArrayList <> ( ) ; }
public static float dpToPix ( float dp ) { return TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , dp , metrics ) ; }
public void loop ( ) { left = gamepad1 . left_stick_y ; right = gamepad1 . right_stick_y ; simpleRobot . leftMotor . setPower ( left ) ; simpleRobot . rightMotor . setPower ( right ) ; }
public void run ( ) { mListener . onSettingsSaved ( error ) ; }
private void givenViewHolder ( View view ) { givenViewsFound ( view ) ; mModelViewHolder = uut . onCreateViewHolder ( mock ( ViewGroup . class ) , 0 ) ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "taking picture due to audio trigger" ) ; takePicture ( ) ; }
public void onPositiveClick ( ) { String attractionName = attraction . getName ( ) ; tourDownloader . delete ( attraction ) ; bakery . toastShort ( String . format ( "%s deleted" , attractionName ) ) ; updateAdapter ( ) ; }
public void onAdOpened ( ) { Log . d ( "MA Banner Ad Test" , "Add is Visible Now" ) ; }
public void flushCurrentDevice ( ) { this . currentDevice = null ; }
public void addItemAtPosition ( @ NonNull IDrawerItem drawerItem , int position ) { mDrawerBuilder . getAdapter ( ) . addDrawerItem ( position , drawerItem ) ; }
public int getPublishedBy ( ) { return publishedBy ; }
public void onThemeChanged ( boolean darkModeEnabled ) { saveRNGSettings ( ) ; setSettingsDialog ( ) ; }
public int getStatus ( ) throws RemoteException { return mGpsStatus ; }
public void run ( ) { startActivity ( new Intent ( SplashActivity . this , MainActivity . class ) ) ; }
public ButtonSetEditor ( Context context , IStellarService the_service , String selected_set , Handler use_this_handler ) { super ( context ) ; service = the_service ; set = selected_set ; notifychanged = use_this_handler ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mCardLayerController != null ) mCardLayerController . onConfigurationChanged ( newConfig ) ; }
public void remove ( Download download ) { int index = indexOf ( download ) ; if ( index != - 1 ) { downloads . remove ( index ) ; notifyItemRemoved ( index ) ; } }
public void testFrameConvertsToAnimatedFraction ( ) { animator . setFrame ( 500 ) ; animator . resumeAnimation ( ) ; assertEquals ( 0 . 5f , animator . getAnimatedFraction ( ) ) ; assertEquals ( 0 . 5f , animator . getAnimatedValueAbsolute ( ) ) ; }
public Integer getG ( ) { return g ; }
private void onShowWeekView ( ) { if ( mWeekPager . getVisibility ( ) == VISIBLE ) { return ; } if ( mDelegate . mViewChangeListener != null && ! isWeekView ) { mDelegate . mViewChangeListener . onViewChange ( false ) ; } }
public void disableSuggestions ( ) { if ( suggestionsManager != null ) suggestionsManager . hide ( ) ; }
public Boolean downloadVideos ( ) { String lb = mSharedPreferences . getString ( PREF_KEY_LOAD_VIDEOS , "0" ) ; return ! ( lb . equals ( "0" ) || ( lb . equals ( "1" ) && Network . getConnectionType ( mContext ) != Network . NETWORK_WIFI ) ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : onBackPressed ( ) ; break ; } return super . onOptionsItemSelected ( item ) ; }
public void saveAnnouncementsToLocal ( AnnouncementList announcementsToSave ) { SharedPreferences . Editor editor = this . sharedPreferences . edit ( ) ; String announementsListJson = gson . toJson ( announcementsToSave ) ; editor . putString ( StringConstants . SAVE_ANNOUNCEMENTS_PREFERENCE , announementsListJson ) . apply ( ) ; }
public int selectedSize ( ) { if ( getDefaultValue ( ) ) { return items . size ( ) ; } else { return booleanArray . size ( ) ; } }
public static boolean getIntroductionFinished ( SharedPreferences settings ) { return settings . getBoolean ( PREFERENCE_INTRODUCTION_FINISHED , true ) ; }
public static UserPostListingURL getSubmitted ( String username ) { return new UserPostListingURL ( Type . SUBMITTED , username , null , null , null , null ) ; }
public void updateData ( GGPlan plan , int type , boolean messages ) { updateData ( plan , type , messages , null ) ; }
public FamilyGroup findItemById ( int id ) { return realm . where ( FamilyGroup . class ) . equalTo ( "id" , id ) . findFirst ( ) ; }
public void setHeader ( @ NonNull View view ) { setHeader ( view , true ) ; }
public void onSuccess ( DeleteBookmark . ResponseValue response ) { getNews ( ) ; mNewsListView . hideProgress ( ) ; mNewsListView . showMessage ( "Favorito borrado" ) ; }
private void setNotificationColor ( final Builder mBuilder ) { mBuilder . setColor ( ContextCompat . getColor ( mXmppConnectionService , R . color . primary500 ) ) ; }
public ItemDraggableRange onGetItemDraggableRange ( MyViewHolder holder , int position ) { return null ; }
public void onBackPressed ( ) { hide ( ) ; RemixedDungeon . resetScene ( ) ; }
public static void onLinkLongClicked ( final AppCompatActivity activity , final String uri ) { onLinkLongClicked ( activity , uri , false ) ; }
public static String getEncoding ( Context context ) { return getPrefs ( context ) . getString ( "editor_encoding" , "UTF - 8" ) ; }
public static MultiReddit getMultiredditByDisplayName ( String displayName ) { if ( multireddits != null ) for ( MultiReddit multiReddit : multireddits ) { if ( multiReddit . getDisplayName ( ) . equals ( displayName ) ) { return multiReddit ; } } return null ; }
private void showInStatusBar ( String id ) { NoteItem item = RealmDb . getInstance ( ) . getNote ( id ) ; if ( item != null ) { new Notifier ( mContext ) . showNoteNotification ( item ) ; } }
public void setOwner ( SummitAttendee owner ) { this . owner = owner ; }
public static void permissionCheckFailed ( CommandSender commandSender ) { commandSender . print ( Localization . get ( "commands . common . failedPermissionCheck" ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . main_menu , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void setState ( Serializable state ) { data . setState ( state ) ; notifyDataChanged ( ) ; }
private int translatedChildPosition ( int position ) { if ( recyclerView == null ) { return position ; } return isReverseLayout ( recyclerView ) ? recyclerView . getAdapter ( ) . getItemCount ( ) - 1 - position : position ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "ost . com . sampleostsdkapplication" , appContext . getPackageName ( ) ) ; }
private List < IChannel > channelSearch ( IChannel root , String str ) throws RemoteException { List < IChannel > list = new LinkedList < IChannel > ( ) ; channelSearch ( root , str , list ) ; return list ; }
public static void main ( String [ ] arg ) { LwjglApplicationConfiguration config = new LwjglApplicationConfiguration ( ) ; config . width = 800 ; config . height = 480 ; config . title = "UI Gallery" ; new LwjglApplication ( new Gallery ( ) , config ) ; }
public static boolean showLogToasts ( boolean val ) { gPrefs . edit ( ) . putBoolean ( SHOW_LOG_TOAST , val ) . commit ( ) ; return val ; }
public boolean hasSDCard ( ) { return mSDCardDirectory != null ; }
public CopyFileOperation ( String srcPath , String targetParentPath , Account account ) { mSrcPath = srcPath ; mTargetParentPath = targetParentPath ; if ( ! mTargetParentPath . endsWith ( OCFile . PATH_SEPARATOR ) ) { mTargetParentPath += OCFile . PATH_SEPARATOR ; } mFile = null ; }
private void getUCamLoginInterface ( ) { uCampusInterface = retrofit . create ( Interface . class ) ; }
public void addAll ( int position , List < StatusViewData > statuses ) { this . statuses . addAll ( position , statuses ) ; notifyItemRangeInserted ( position , statuses . size ( ) ) ; }
private int getSeekCn ( ) { return Integer . valueOf ( getStringPreferences ( getApplicationContext ( ) , PREF_KCA_SEEK_CN ) ) ; }
public Fragment createFragment ( Object inAttachedData ) { refFragment = ( Fragment ) BookmarkChooserFragmentC . newInstance ( ) ; return refFragment ; }
public int getItemCount ( ) { return mComments . size ( ) ; }
private void finalizarPartida ( ) { results . guardarPuntuacion ( new Date ( ) , aciertos , fallos ) ; finish ( ) ; }
public List < TetroidFile > getDataSet ( ) { return dataSet ; }
public String getFormat ( ) { return StringUtils . notNullStr ( format ) ; }
public void onManageCategories ( ) { Intent intent = new Intent ( this , ManageCategoriesActivity . class ) ; startActivity ( intent ) ; }
public int getUploadSpeedLimit ( ) { return th . isValid ( ) ? th . getUploadLimit ( ) : 0 ; }
public static boolean isAztecEditorToolbarExpanded ( ) { return getBoolean ( DeletablePrefKey . AZTEC_EDITOR_TOOLBAR_EXPANDED , false ) ; }
public void run ( ) { Logger . log ( out ) ; }
public Single < String > fetchData ( String url ) { return androidNetworkService . fetchData ( url ) ; }
public static boolean canRecord ( ) { final int requiredSize = BufferUtility . millisecondsToBuffer ( RECORDING_FRAGMENT_SIZE , NativeAudioRenderer . SAMPLE_RATE ) * 2 ; return FileSystem . hasSpaceFor ( ( requiredSize * NativeAudioRenderer . BYTES_PER_SAMPLE ) + 2048 ) ; }
public MyHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( context ) . inflate ( R . layout . item_user , parent , false ) ; return new UserAdapter . MyHolder ( v ) ; }
public Item ( Activity context ) { this . context = context ; }
public void onChildAdded ( DataSnapshot dataSnapshot , String s ) { Log . d ( "Child listener" , "new child was added to invited ! " ) ; getEvent ( dataSnapshot . getKey ( ) , eAdapterInvited ) ; }
public boolean matchesSafely ( View view ) { return matcher . matches ( view ) && currentIndex ++ == index ; }
public void testCapacityZero ( ) { new FixedRingBuffer ( 0 ) ; }
public void add ( T graphic ) { synchronized ( lock ) { graphics . add ( graphic ) ; } postInvalidate ( ) ; }
public void getWordCounterForChineseSimplified ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . SIMPLIFIED_CHINESE ) ; assertEquals ( IdeogramsWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
public boolean onEditorAction ( TextView textView , int i , KeyEvent keyEvent ) { if ( i == EditorInfo . IME_ACTION_NEXT ) { lastNameField . requestFocus ( ) ; return true ; } return false ; }
public PwGroupIdV4 newGroupId ( ) { PwGroupIdV4 id = new PwGroupIdV4 ( UUID_ZERO ) ; while ( true ) { id = new PwGroupIdV4 ( UUID . randomUUID ( ) ) ; if ( ! isGroupIdUsed ( id ) ) break ; } return id ; }
public void run ( ) { dismissAllowingStateLoss ( ) ; }
private MeFragment getMeFragment ( ) { Fragment fragment = mBottomNav . getFragment ( PAGE_ME ) ; if ( fragment instanceof MeFragment ) { return ( MeFragment ) fragment ; } return null ; }
private int getSourceId ( ) { return source ; }
public BigDecimal getBase ( ) { return inML ; }
public PointF computeScrollVectorForPosition ( int targetPosition ) { return new PointF ( targetPosition - getAnchorPosition ( ) , 0 ) ; }
static public int getHeightBar ( Activity activity ) { return activity . findViewById ( R . id . toolbar ) . getHeight ( ) ; }
public long getItemId ( int position ) { MetaSearchEnginesInfo item = getItem ( position ) ; if ( item == null ) { return - 1 ; } return item . uid . hashCode ( ) ; }
public int getItemCount ( ) { return mChildAdapters . size ( ) ; }
public EventBuilder setDate ( Date date ) { this . date = date ; return this ; }
public boolean equals ( Object obj ) { if ( obj instanceof ScrollListenerAdapter ) { return adaptee . equals ( ( ( ScrollListenerAdapter ) obj ) . adaptee ) ; } else { return super . equals ( obj ) ; } }
public ProximityScreenLockerFallback ( final Activity activity ) { mActivity = activity ; mSensorManager = ( SensorManager ) mActivity . getSystemService ( Context . SENSOR_SERVICE ) ; }
public CalendarQueryRow setAllDay ( Object obj ) { return setColumn ( CalendarContract . Instances . ALL_DAY , obj ) ; }
public Typeface getSourceSansProRegular ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/SourceSansPro - Regular . ttf" ) ; }
public void setParent ( Forum parent ) { this . parent = parent ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { manageFilterSelection ( position ) ; }
public static void createAllTables ( Database db , boolean ifNotExists ) { OptionDao . createTable ( db , ifNotExists ) ; PromotionDao . createTable ( db , ifNotExists ) ; UserDao . createTable ( db , ifNotExists ) ; VoteDataDao . createTable ( db , ifNotExists ) ; }
public NewButtonSetEntryDialog ( Context context , Handler reportto , IStellarService theService ) { super ( context ) ; dispatcher = reportto ; service = theService ; }
private void showEmptyMessageIfRequired ( ArrayList < Birthday > birthdays ) { if ( birthdays . isEmpty ( ) ) { emptyView . setVisibility ( View . VISIBLE ) ; } else { emptyView . setVisibility ( View . INVISIBLE ) ; } }
private void swap ( ) { final int input = mSpinnerInput . getSelectedItemPosition ( ) ; final int output = mSpinnerOutput . getSelectedItemPosition ( ) ; mSpinnerInput . setSelection ( output ) ; mSpinnerOutput . setSelection ( input ) ; }
public void onPreExecute ( DeckTask task ) { mProgressDialog = StyledProgressDialog . show ( DeckPicker . this , "" , getResources ( ) . getString ( R . string . emtpy_cards_finding ) , false ) ; }
public final LiveData < String > getFormattedDate ( ) { return Transformations . map ( localDate , input -> input . format ( DateTimeFormatter . ofPattern ( "dd . MM . yyyy" ) ) ) ; }
public void sendMessage ( String message , String dest , boolean internet , Listeners . OnMessageSentListener onMessageSentListener ) { if ( connectBLETask != null ) connectBLETask . sendMessage ( message , dest , internet , onMessageSentListener ) ; else onMessageSentListener . OnCommunicationError ( "Client non inizializzato" ) ; }
public static boolean showShareImageHint ( Context context ) { Toast . makeText ( context , R . string . btn_share_image_link_hint , Toast . LENGTH_SHORT ) . show ( ) ; return true ; }
public void onFinished ( ) { for ( CallBacks callBacks : mCallBacks ) callBacks . onFinish ( ) ; stopSelf ( ) ; }
public void run ( ) { mList . remove ( pos ) ; notifyDataSetChanged ( ) ; D . show ( context , "删除成功！" ) ; }
public static boolean useProgram ( int shaderProgram ) { if ( shaderProgram < 0 ) { shader = - 1 ; } else if ( shaderProgram != shader ) { gl . useProgram ( shaderProgram ) ; shader = shaderProgram ; return true ; } return false ; }
private Screen createSelectVehicleScreen ( ) { if ( mPlayerCount == PlayerCount . ONE ) { return createOnePlayerVehicleScreen ( ) ; } else { return createMultiPlayerVehicleScreen ( ) ; } }
public static boolean isAlarm ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return sharedPreferences . getBoolean ( SettingsActivity . PREF_SET_WALLPAPER_DAY_AUTO_UPDATE , false ) ; }
public UUID getSession ( ) { return session ; }
public void setInitialPoint ( float x , float y ) { if ( initialPoint == null ) { initialPoint = new PointF ( ) ; } initialPoint . set ( x , y ) ; }
private void onGoogleSignInFailed ( GoogleSignInResult result ) { Log . d ( TAG , "HandleGoogleSignInResult : Failed . Status code " + result . getStatus ( ) . getStatusCode ( ) ) ; view . stopLoadingAnimation ( ) ; view . showGoogleSignInFailedToast ( ) ; }
public void run ( ) { if ( foundWebPage != null ) { showReplyPanel ( false , null , null , foundWebPage , false , true ) ; foundWebPage = null ; } }
private boolean checkForSolution ( int playerTurn , Pair pos ) { int counter = objectives ; boolean temp = checkForSolutionHelper ( pos , counter ) ; if ( temp ) { gameFinished = 1 ; } return temp ; }
public String getValue ( ) { return value ; }
public void setHEXValue ( int touchedRGB ) { if ( mHEXValue != null ) { mHEXValue . setText ( ( "#" + Integer . toHexString ( touchedRGB ) ) . toUpperCase ( ) ) ; } }
public void onResult ( ReaderBlog serverBlogInfo ) { if ( isAttachedToWindow ( ) ) { showBlogInfo ( serverBlogInfo ) ; } }
public String getNotificationTitle ( Context context ) { String formatString = context . getString ( R . string . notification_title_dateformat ) ; SimpleDateFormat sdf = new SimpleDateFormat ( formatString , Locale . GERMANY ) ; return sdf . format ( this . date ) ; }
public void testIsWPCOMURL3 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( wpcomAddress3 ) ) ) ; }
public static int getWakeupTimeMillis ( Context context , int minValue ) { return getIntMinValue ( context , "pref_wakeup_time" , minValue , context . getResources ( ) . getInteger ( R . integer . pref_default_wakeup_time ) ) ; }
public void onHeadsetConnected ( Headset headset ) { if ( alive ) sendMessage ( What . HEADSET_CONNECTED , 0 , 0 , headset ) ; }
private final OnFingerGestureListener getGestureListener ( ) { return new DesktopGestureListener ( _desktop , Setup . desktopGestureCallback ( ) ) ; }
public boolean onFragmentCreate ( ) { fillLanguages ( ) ; LocaleController . getInstance ( ) . loadRemoteLanguages ( ) ; NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . suggestedLangpack ) ; return super . onFragmentCreate ( ) ; }
public static Boolean isGrblStatusString ( final String response ) { return STATUS_PATTERN . matcher ( response ) . find ( ) ; }
public void showFieldPanelForForward ( boolean show , ArrayList < MessageObject > messageObjectsToForward ) { showFieldPanel ( show , null , null , messageObjectsToForward , null , false , true ) ; }
public Intent getIntent ( ) throws CommandParseException { Intent intent = new Intent ( Intent . ACTION_WEB_SEARCH ) ; intent . putExtra ( SearchManager . QUERY , mCommand ) ; return intent ; }
public static boolean isUnicodeWhitespace ( int codepoint ) { return unicodeWhitespace . contains ( codepoint ) ; }
public void onError ( String msg , Throwable e ) { Log . e ( TAG , msg , e ) ; }
public String getInProduction ( ) { return mInProduction ; }
public AboutBuilder setAppName ( int text ) { return setAppName ( context . getString ( text ) ) ; }
public boolean isSameList ( ReaderUserIdList compareIds ) { if ( compareIds == null || compareIds . size ( ) != this . size ( ) ) return false ; return this . containsAll ( compareIds ) ; }
public void onCreate ( ) { pref = RepositoryHelper . getSettingsRepository ( getApplicationContext ( ) ) ; engine = TorrentEngine . getInstance ( getApplicationContext ( ) ) ; stateProvider = TorrentInfoProvider . getInstance ( getApplicationContext ( ) ) ; makeForegroundNotify ( ) ; }
public void onClick ( KAlertDialog kAlertDialog ) { if ( WIFI_Manger . isWifiEnabled ( ) == true ) { kAlertDialog . cancel ( ) ; WIFI_Conneted ( ) ; } }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { setPreferencesFromResource ( R . xml . cube2_settings , rootKey ) ; }
public CircleMask ( ) { ensureTexture ( ) ; texture ( CACHE_KEY ) ; origin . set ( RADIUS ) ; }
public void startActivityForResultWithoutAnimation ( Intent intent , int requestCode ) { disableIntentAnimation ( intent ) ; super . startActivityForResult ( intent , requestCode ) ; disableActivityAnimation ( ) ; }
public void startEditTriggersActivity ( ActiveSelection selection ) { final Intent intent = new Intent ( this , EditTriggersActivity_ . class ) ; intent . putExtra ( EditTriggersActivity . EXTRA_SELECTION , selection ) ; startActivity ( intent ) ; }
public BitMatrix encode ( String contents , BarcodeFormat format , int width , int height ) throws WriterException { return encode ( contents , format , width , height , null ) ; }
public RemoteCNPreference ( Context context , AttributeSet attrs ) { super ( context , attrs , 0 ) ; }
public static void deleteTitlePref ( Context context , int appWidgetId ) { SharedPreferences . Editor prefs = context . getSharedPreferences ( PREFS_NAME , 0 ) . edit ( ) ; prefs . remove ( PREF_PREFIX_KEY + appWidgetId ) ; prefs . commit ( ) ; }
public String getSerializedHighlights ( ) { return userDataDBHelper . getSerializedHighlights ( pageRowId ) ; }
public void onMore ( View view , int position ) { Notification notification = notifications . get ( position ) . asRight ( ) ; super . more ( notification . getStatus ( ) , view , position ) ; }
public EighthActivityBuilder presign ( boolean presign ) { this . presign = presign ; return this ; }
public void setUpdateInterval ( long interval ) { mapRemote . put ( ID_UPDATEINTERVAL , interval ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { if ( holder instanceof VHVoteWallItem ) { ( ( VHVoteWallItem ) holder ) . setLayout ( voteList . get ( position ) ) ; } }
private File getLogFile ( ) { return new File ( getLogDir ( ) , "mercury . log" ) ; }
public long getLastUpdatedTranslationDate ( ) { return mPerInstallationPrefs . getLong ( Constants . PREF_LAST_UPDATED_TRANSLATIONS , System . currentTimeMillis ( ) ) ; }
private MyAdapter ( Context context , ArrayList < ColorUtil . ColorName > mColorNameArrayList ) { this . mOriginalValues = mColorNameArrayList ; this . mDisplayedValues = mColorNameArrayList ; inflater = LayoutInflater . from ( context ) ; }
public String getCanopySerial ( ) { return canopySerial ; }
private void setPendingActions ( RealmList < PendingAction > pendingActions ) { this . pendingActions = pendingActions ; }
public void onDetach ( ) { super . onDetach ( ) ; mSetToolbarCallback = null ; }
public Maybe < Event > edit ( Event entity ) { return crudHelper . edit ( entity ) ; }
public SayHi setOauthToken ( java . lang . String oauthToken ) { return ( SayHi ) super . setOauthToken ( oauthToken ) ; }
public ArrayList < Matrix > GetCompleteList ( ) { return createdValues ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitRankConstantNumericExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
public void setUserIdFileProfilePicture ( Activity activity , int value ) { if ( ENUM_Int . INTEGER_USER_ID_FILE_PROFILE_PICTURE . value != value ) { ENUM_Int . INTEGER_USER_ID_FILE_PROFILE_PICTURE . value = value ; save ( activity ) ; } }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "CREATE INDEX `index_operation_name` ON `operation` ( `name` ) " ) ; }
public void onClick ( View v ) { Intent numbersIntent = new Intent ( Advertise . this , EditMyBook . class ) ; numbersIntent . putExtra ( "ABook" , myBook ) ; startActivity ( numbersIntent ) ; }
public void onStop ( SeekBarView seekBarView , int position , String value ) { KSM . setSleepMilliseconds ( position , getActivity ( ) ) ; }
public double getWeight ( ) { return this . weight ; }
public void tearDown ( ) throws Exception { QueryResultsStorage . setNeedToStoreResults ( false ) ; super . tearDown ( ) ; }
private void voteDeleteSuccess ( ) { if ( starView != null ) { starView . deletedVoteSuccessfully ( ) ; } fetchUpdatedBalance ( ) ; }
public void onStop ( ) { mBookmarkPresenter . unbind ( this ) ; mBookmarksContextualModePresenter . unbind ( this ) ; super . onStop ( ) ; }
public ExpandableListAdapter ( Context context , List < String > values ) { super ( context , - 1 , values ) ; this . context = context ; this . values = values ; }
public void trackTappedNotification ( @ NotNull StoryNotificationType storyNotificationType ) { mSystemNotificationsTracker . trackShownNotification ( translateNotificationTypes ( storyNotificationType ) ) ; }
public String getSugars ( ) { return sugars ; }
public void test_getClientSecret ( ) { String clientSecret = getClientSecret ( api ) ; assertThat ( clientSecret , notNullValue ( ) ) ; assertThat ( clientSecret . length ( ) , is ( 12 ) ) ; }
public void onTemperatureUpdated ( ThermostatInfo aThermostatInfo ) { for ( ITemperatureListener aListener : tempListenerList ) { aListener . onTemperatureChanged ( aThermostatInfo ) ; } }
public MoveFiles ( ArrayList < ArrayList < BaseFile >> files , MainFragment ma , Context context , OpenMode mode ) { mainFrag = ma ; this . context = context ; this . files = files ; this . mode = mode ; }
public void setMaxScale ( float max ) { this . maxScale = max ; if ( gestureImageViewTouchListener != null ) { gestureImageViewTouchListener . setMaxScale ( max * startingScale ) ; } }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( ! isUpdatingUI ) { TemperatureController . getInstance ( ) . setTemperatureProgram ( isChecked ) ; } }
private void initializeSensorEventListeners ( ) { sensorDataBatches = new HashMap <> ( ) ; }
public static String getQuranAyahDatabaseDirectory ( Context context ) { String base = getQuranBaseDirectory ( context ) ; return base == null ? null : base + "/" + AYAHINFO_DIRECTORY ; }
private static boolean isSDCardMounted ( ) { String state = Environment . getExternalStorageState ( ) ; return state . equals ( Environment . MEDIA_MOUNTED ) ; }
public static String getUrlFromUglyFacebookRedirect ( String url ) { if ( url . startsWith ( "https : url = url . substring ( "https : return urlDecode ( url ) ; } return null ; }
public void writeToParcel ( Parcel out , int flags ) { super . writeToParcel ( out , flags ) ; out . writeList ( startXs ) ; out . writeArray ( colors ) ; }
private void initFoodName ( ) { tvName . setText ( String . format ( "%s %s" , food . getName ( ) , getContext ( ) . getString ( R . string . icon_info ) ) ) ; }
private void reloadStorage ( ) { saveLastSelectedNode ( ) ; reinitStorage ( ) ; }
public void onNext ( Response response ) { getMvpView ( ) . showProgressbar ( false ) ; getMvpView ( ) . showAllChargesV3 ( response ) ; }
public void setGranularityEnabled ( boolean enabled ) { mGranularityEnabled = true ; }
public boolean isSelected ( String id ) { return mSelectedPlaylistIds . contains ( id ) ; }
public static void addOrUpdateUser ( ReaderUser user ) { if ( user == null ) return ; ReaderUserList users = new ReaderUserList ( ) ; users . add ( user ) ; addOrUpdateUsers ( users ) ; }
private void ensureAccountsIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { accounts_ = new java . util . ArrayList < com . google . protobuf . Any > ( accounts_ ) ; bitField0_ | = 0x00000001 ; } }
public void unregisterDirectListener ( String key , NotificationListener listener ) { getAggregator ( key , true ) . removeDirectListener ( listener ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( webViewOpen ) { if ( getTag ( ) . equals ( "NewsListFragment_Saved" ) ) { loadListFromSharedPreferences ( ) ; } } }
public void onClick ( View v ) { Log . d ( LOGTAG , "onclick for upDirButton" ) ; loadDirectoryUp ( ) ; loadFileList ( ) ; adapter . notifyDataSetChanged ( ) ; updateCurrentDirectoryTextView ( ) ; }
public Period ( int day , RealmList < Lesson > lessons , int periodNum ) { this . day = day ; this . lessons = lessons ; this . periodNum = periodNum ; isSingleChild = false ; changeTypeColors = new RealmList <> ( ) ; }
private void selectMainImage ( ) { startActivity ( new Intent ( mContext , MainImageActivity . class ) ) ; }
public QuranRow build ( ) { return new QuranRow ( mText , mMetadata , mRowType , mSura , mAyah , mPage , mImageResource , mImageFilterColor , mJuzType , mJuzOverlayText , mBookmarkId , mTagId ) ; }
public void setData ( List < Tag > data ) { adapter . setData ( data ) ; }
public void delayedHide ( int delayMillis ) { mHideHandler . removeCallbacks ( mHideControlsRunnable ) ; mHideHandler . postDelayed ( mHideControlsRunnable , delayMillis ) ; }
public void onComplete ( ) { Singleton . getInstance ( ) . clearLogEntries ( ) ; shuffleColors ( colors ) ; }
private static void cancelToast ( ) { ToastInterface toast = ToastHelper . getInstance ( ) . getLastToast ( ) ; if ( toast != null ) toast . cancel ( ) ; }
private void editReminder ( String uuId ) { startActivity ( new Intent ( mContext , CreateReminderActivity . class ) . putExtra ( Constants . INTENT_ID , uuId ) ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_account_privacyRules . TLdeserialize ( stream , constructor , exception ) ; }
public RequestResult ( final Result result ) { super ( result ) ; }
public void onAnimationEnd ( ) { callFunction ( "onAnimationEnd" ) ; }
public static String [ ] splitFields ( String fields ) { return fields . split ( "\\x1f" , - 1 ) ; }
public void onDismiss ( DialogInterface dialog ) { super . onDismiss ( dialog ) ; if ( whichButtonClicked == DialogAction . POSITIVE ) { PreferenceUtil . getInstance ( ) . setNowPlayingScreen ( NowPlayingScreen . values ( ) [ viewPagerPosition ] ) ; } }
public void shatter ( int cell ) { GLog . i ( Utils . format ( Game . getVar ( R . string . Potion_Shatter ) , color ( ) ) ) ; Sample . INSTANCE . play ( Assets . SND_SHATTER ) ; splash ( cell ) ; }
public void onDrawerOpened ( View arg0 ) { }
public Integer getB ( ) { return b ; }
public float getDomainCursorPosition ( ) { return domainCursorPosition ; }
public void onRegisterFailureTracking ( Throwable e ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsHelper . PARAM_MESSAGE , e . getMessage ( ) ) ; analyticsHelper . trackRegisterFailure ( bundle ) ; }
public File getAnswerFile ( String fileName ) { File result ; if ( currentFile == null ) { result = super . getAnswerFile ( fileName ) ; } else { result = fileName . equals ( ANSWER_TEXT ) ? currentFile : null ; } return result ; }
public void setCurrentForumPage ( int currentForumPage ) { this . currentForumPage = currentForumPage ; }
public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( schedules ) ; }
public void onSearchCollapse ( ) { search ( null ) ; searching = false ; searchWas = false ; if ( listView != null ) { emptyTextView . setVisibility ( View . GONE ) ; listView . setAdapter ( listAdapter ) ; } }
public void onLoadFinished ( Loader < ArrayList < Artist >> loader , ArrayList < Artist > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { Log . d ( TAG , "onStartCommand . . . " ) ; startTracking ( ) ; return START_NOT_STICKY ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ Nullable View . OnClickListener onClickListener ) { return addLink ( IconUtil . getBitmap ( icon ) , label , onClickListener ) ; }
public void setUp ( ) throws Exception { hour = "3 - 4" ; class_name = "10a" ; subject = "D" ; newSubject = "E" ; room = "H105" ; newRoom = "H207" ; info = "" ; }
public final void remove ( RRGLRenderable child ) { if ( isAdded ( ) ) { child . onRemoved ( ) ; } mChildren . remove ( child ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; overridePendingTransitionExit ( ) ; if ( Variables . needCheckPIN ( ) ) moveTaskToBack ( true ) ; }
public void cancel ( ) { if ( request != null ) request . cancel ( ) ; }
public void setCloudCover ( Integer cloudCover ) { this . cloudCover = cloudCover ; }
public void onSeekTo ( long position ) { LogHelper . d ( TAG , "onSeekTo : " , position ) ; mPlayback . seekTo ( ( int ) position ) ; }
public void showColorChooserAccent ( ) { new ColorChooserDialog . Builder ( this , R . string . color_palette ) . titleSub ( R . string . colors ) . accentMode ( true ) . preselect ( accentPreselect ) . show ( getSupportFragmentManager ( ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { Log . d ( TAG , "which : " + which ) ; switch ( which ) { case 0 : fetchPastMarathonEvents ( ) ; break ; default : fetchNewMarathonEvents ( ) ; } }
public DrawingGrid ( ) { gridimage = new GridImage ( 1 , 1 ) ; alphaimage = new AlphaImage ( 1 , 1 ) ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mEvents . get ( 0 ) ) ; }
public void onOpen ( SupportSQLiteDatabase db ) { Log . i ( "Database version = " + db . getVersion ( ) ) ; super . onOpen ( db ) ; }
public void onVideoTapped ( @ NotNull AztecAttributes attrs ) { onMediaTapped ( attrs , 0 , 0 , MediaType . VIDEO ) ; }
public void setAdapter ( CitiesAdapter adapter ) { this . mCitiesAdapter = adapter ; }
public String getSecret ( ) { return secret ; }
public long getLastModified ( ) throws RecordStoreNotOpenException { if ( ! open ) { throw new RecordStoreNotOpenException ( ) ; } synchronized ( this ) { return lastModified ; } }
private int checkFromBuffer ( ) { if ( bufferSize > 0 && pointer < bufferSize ) { return buffer [ pointer ++ ] ; } else { pointer = 0 ; bufferSize = - 1 ; return - 1 ; } }
public boolean onQueryTextSubmit ( String query ) { mPresenter . findPatients ( query ) ; return true ; }
public final int getPositionAfter ( ) { return this . positionAfter ; }
public void onCancelled ( @ NonNull DatabaseError databaseError ) { Timber . e ( databaseError . getMessage ( ) ) ; SnackbarHelper . showAddingTipError ( activity . getLayout ( ) ) ; activity = null ; }
public void setTypeface ( Typeface typeface , int style ) { this . tabTypeface = typeface ; this . tabTypefaceStyle = style ; updateTabStyles ( ) ; }
public static CategorySortingMethod findById ( int id ) { for ( CategorySortingMethod csm : values ( ) ) { if ( csm . getId ( ) == id ) { return csm ; } } return SORT_MODIFIED_DESC ; }
public void setTextDialogSubtitle ( String subtitle ) { mTextDialogSubtitle = subtitle ; }
public void run ( ) { LogUtil . INSTANCE . i ( TAG , "Recalculating portions in history database" ) ; HistoryDB history = new HistoryDB ( adapter , context ) ; history . recalculatePortions ( ) ; }
public IntroDialog ( Context context ) { super ( context , R . style . DialogTheme ) ; }
public String getMimeType ( File file ) { return getMimeType ( Uri . fromFile ( file ) ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; GlobalSearchManager . getInstance ( ) . removeOnGlobalSearchResponseListerner ( this ) ; }
public void reset ( ) { blockX = 0 ; blockY = 0 ; blockZ = 0 ; }
public void onBookCollectionAdded ( BooksCollection booksCollection ) { homeScreenRecyclerViewAdapter . notifyBookCollectionAdded ( booksCollection ) ; }
public long newDyn ( String name ) { long did = id ( name , true , defaultDynamicDeck ) ; select ( did ) ; return did ; }
public void testGetCasteDay ( ) { assertThat ( planetaryCalendar . getCasteDay ( days ) , is ( casteDay ) ) ; }
public RecyclerView getRecyclerView ( ) { return recyclerView ; }
public void onClick ( View v ) { ExportDialog . this . dismiss ( ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof CommitSelectionCallback ) { mCommitCallback = ( CommitSelectionCallback ) context ; } else { throw new ClassCastException ( "No callback provided" ) ; } }
public @ NonNull PrefListItems getSelectedItems ( ) { PrefListItems selectedItems = new PrefListItems ( ) ; for ( PrefListItem item : this ) { if ( item . mIsChecked ) { selectedItems . add ( item ) ; } } return selectedItems ; }
public void addNmeaListener ( GpsStatus . NmeaListener nmeaListener ) { listeners . add ( nmeaListener ) ; }
public void setColour ( Colour colour ) { colours = colour . colours ; resetColours ( ) ; }
private void changeInfiniteVibrationPrefs ( ) { boolean isChecked = binding . infiniteVibrateOptionPrefs . isChecked ( ) ; binding . infiniteVibrateOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdayInfiniteVibrationEnabled ( ! isChecked ) ; }
public int getCount ( ) { return mColorList . size ( ) ; }
public void artCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "art" ) ; }
public int onGetSwipeReactionType ( MyViewHolder holder , int position , int x , int y ) { return Swipeable . REACTION_CAN_SWIPE_LEFT | Swipeable . REACTION_MASK_START_SWIPE_LEFT | Swipeable . REACTION_CAN_SWIPE_RIGHT | Swipeable . REACTION_MASK_START_SWIPE_RIGHT | Swipeable . REACTION_START_SWIPE_ON_LONG_PRESS ; }
private void cancelOutstandingTask ( ) { if ( outstandingTask != null ) { if ( outstandingTask . getStatus ( ) != AsyncTask . Status . FINISHED ) { outstandingTask . cancel ( true ) ; } outstandingTask = null ; } }
public static Track getInfo ( String artist , String trackOrMbid , String apiKey ) { return getInfo ( artist , trackOrMbid , null , null , apiKey ) ; }
public void setUp ( ) throws Exception { presenter = new SortingDialogPresenter ( interactor ) ; presenter . setView ( view ) ; }
public PGPKeyPairRing storeNetwork ( String userId , String network , String name , String passphrase ) throws PGPException { return store ( name , userId + ' @ ' + network , null , passphrase ) ; }
public WifiReceiver getReceiver ( ) { return new WifiReceiver ( ) ; }
private double mmtofoot ( double num ) { return num * 0 . 00328 ; }
public static long getTotalBytes ( ArrayList < BaseFileParcelable > files , Context context ) { long totalBytes = 0L ; for ( BaseFileParcelable file : files ) { totalBytes += getBaseFileSize ( file , context ) ; } return totalBytes ; }
public void presentFragment ( SupportFragment fragment ) { if ( isNavigationControllerInit ( ) ) { mNavigationController . setPresentStyle ( fragment . getPresentTransition ( ) ) ; mNavigationController . presentFragment ( fragment , true ) ; } }
public void testMinimalEncoder29 ( ) throws Exception { verifyMinimalEncoding ( "ABC1" , "ALPHANUMERIC ( ABC1 ) , TERMINATOR ( ) " , null , false ) ; }
public void setNestedScrollingEnabled ( boolean enabled ) { mScrollingChildHelper . setNestedScrollingEnabled ( enabled ) ; }
public static Button createSimpleButton ( Context context , @ IdRes int id , boolean readOnly , int answerFontSize , QuestionWidget listener ) { return createSimpleButton ( context , id , readOnly , null , answerFontSize , listener ) ; }
public String getIdentifier ( ) { return event . first . getIdentifier ( ) ; }
public void onClickRetry ( View view ) { Log . v ( LOG_TAG , "onClickRetry ( ) called with : " + "view = [ " + view + " ] " ) ; addLink ( mLink ) ; }
public List < Attachment > getAttachmentsList ( ) { return ( List < Attachment > ) super . getAttachmentsList ( ) ; }
public void onConnectivityChanged ( ) { onConnectionCompleted ( ) ; }
private void reloadIsbns ( ) { mIsbnListAdapter . clear ( ) ; mLastItem = - 1 ; mLastPage = 1 ; loadMoreIsbns ( ) ; }
public Observable < ResponseBody > getAllChargesV2 ( int clientId ) { return mBaseApiManager . getChargeApi ( ) . getAllChargesS ( clientId ) ; }
public void testSafeToAddAuthToken5 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( wpcomAddress5 ) ) ; }
public static com . coinomi . core . protos . Protos . Script parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void openBookForReading ( BookInfo bookInfo ) { BrowsingUtils . openBookForReading ( bookInfo , context ) ; }
public static boolean exist ( String key ) { return book ( ) . exists ( key ) ; }
public void testParseTestbedPageTaskAborted ( ) throws Exception { initHTMLPage ( "testbed_rain_15 . html" ) ; when ( task . isAbort ( ) ) . thenReturn ( true ) ; TestbedParsedPage page = lruCachePageService . downloadAndParseTestbedPage ( "http : assertNull ( page ) ; }
public void rotateImageLeft ( ) { imageUtil . rotateImage ( this , - FLIP_ANGLE ) ; }
public TourStartAction ( Button button ) { super ( button ) ; Injector . instance ( ) . inject ( this ) ; text = "Begin IthakaTale" ; enable = true ; init ( ) ; }
public void setExpiry ( @ NonNull String expiry ) { mExpiry = expiry ; }
public void pause ( ) { if ( isInitialized ( ) ) { resetSyncParams ( ) ; audioTrackUtil . pause ( ) ; } }
public static org . thoughtcrime . securesms . backup . BackupProtos . Attachment parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public String getSource ( ) { return source ; }
private void buildCategoriesMenu ( ) { CategoryMenuTask task = new CategoryMenuTask ( this , this ) ; task . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public final void options ( AbstractClient . OnResult < OptionsMap > listener ) { client . send ( AriaRequests . getDownloadOptions ( gid ) , listener ) ; }
private void thenDelegateShouldOnConfigurationChanged ( final Configuration newConfig ) { new Verifications ( ) { { mAppCompatDelegate . onConfigurationChanged ( newConfig ) ; } } ; }
public Integer getPenaltyChargesWaived ( ) { return penaltyChargesWaived ; }
public QoSTestResultEnum getTestType ( ) { return QoSTestResultEnum . DNS ; }
public int compare ( StatItem lhs , StatItem rhs ) { return ( int ) ( rhs . getCorrectPercent ( ) - lhs . getCorrectPercent ( ) ) ; }
public void run ( ) { mBt . stopLeScan ( scanLeDevices ) ; finding = false ; stopFindTask = null ; onStatusChange ( "Enabled" ) ; }
public void loginWithEmailPassword ( ) { new LoginFlow ( ) . chooseContinueWithWpCom ( ) . enterEmailAddress ( E2E_WP_COM_USER_EMAIL ) . enterPassword ( E2E_WP_COM_USER_PASSWORD ) . confirmLogin ( ) ; }
public void validate ( ) { Mockito . validateMockitoUsage ( ) ; }
public void run ( ) { if ( controller == null ) return ; int netType = getStatsNetworkType ( ) ; StatsController . getInstance ( ) . incrementTotalCallsTime ( netType , 5 ) ; AndroidUtilities . runOnUIThread ( this , 5000 ) ; }
public static void showSimpleDialogWithoutTitle ( Context context , String content ) { createAndShowDialog ( context , null , content ) ; }
public SayHi setKey ( java . lang . String key ) { return ( SayHi ) super . setKey ( key ) ; }
public static String getSecondary ( ) { return String . valueOf ( DNSServerHelper . checkServerId ( Integer . parseInt ( Daedalus . getPrefs ( ) . getString ( "secondary_server" , "1" ) ) ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . getMenuInflater ( ) . inflate ( R . menu . run_calculation_action , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public static CreatePlaylistDialog create ( ArrayList < Song > songs ) { CreatePlaylistDialog dialog = new CreatePlaylistDialog ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "songs" , songs ) ; dialog . setArguments ( args ) ; return dialog ; }
public void invalidateView ( ) { if ( mWebView != null ) mWebView . invalidate ( ) ; }
public void onMessageLogged ( IMessage message ) throws RemoteException { addChatMessage ( new IChatMessage . TextMessage ( message ) , true ) ; }
private void changeInfiniteSoundPrefs ( ) { boolean isChecked = binding . infiniteSoundOptionPrefs . isChecked ( ) ; binding . infiniteSoundOptionPrefs . setChecked ( ! isChecked ) ; mPrefs . setBirthdayInfiniteSoundEnabled ( ! isChecked ) ; }
public void onAdDismissedFullScreenContent ( ) { mInterstitialAd = null ; ret . returnToWork ( true ) ; }
private User ( String name , String url ) { this . name = name ; this . url = url ; }
public static boolean isModelNew ( Model m ) { return m . getLong ( "id" ) == 0 ; }
private static void add ( List < OrderedEventSource > list , EventSource source ) { if ( source != EMPTY ) { list . add ( new OrderedEventSource ( source , list . size ( ) + 1 ) ) ; } }
private void fadeOut ( ) { mFadeState = FADE_OUT ; update ( ) ; }
private double mitofoot ( double num ) { return num * 5280 . 0197 ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , CC_motorcycle . class ) ; startActivity ( inte ) ; }
public void taskAdded ( ) { getTasksFromServer ( ) ; this . mainActivity . setPermissionRequired ( null ) ; }
public void onTimerCountChanged ( ) { PreferenceData . TIMER_LENGTH . setValue ( this , alarms . size ( ) ) ; }
private File getDestinationFile ( ) { File outputFile = new File ( mMapFilenamePath , mMapValues . mMapName + " . tmp" ) ; outputFile . getParentFile ( ) . mkdir ( ) ; return outputFile ; }
public static void handleClockAdjustment ( Context context ) { updateNotifications ( context ) ; }
private Model getAnswer ( String keyStr ) { Model model = new Model ( ) ; model . setType ( ActionType . ANSWER ) ; model . setAction ( wrapper . getAnswer ( keyStr ) ) ; return model ; }
public com . google . protobuf . Any getTokens ( int index ) { if ( tokensBuilder_ == null ) { return tokens_ . get ( index ) ; } else { return tokensBuilder_ . getMessage ( index ) ; } }
public int getItemCount ( ) { return itemNames . size ( ) ; }
private void verifyMockInteractions ( Event event ) { Mockito . verify ( dataStore , Mockito . times ( 1 ) ) . deleteEvent ( event ) ; Mockito . verifyNoMoreInteractions ( dataStore ) ; }
public InputStream fetchMediaFile ( String mediaFileURL ) throws FormSourceException { throw new UnsupportedOperationException ( ) ; }
public ScoreCalculator ( Board board , Bounds bounds ) { this . bounds = bounds ; this . board = board ; this . finder = new CombinationFinder ( board ) ; }
private void declareAssociations ( DataSupport baseObj , AssociationsInfo associationInfo ) { baseObj . addEmptyModelForJoinTable ( getAssociatedTableName ( associationInfo ) ) ; }
public void run ( ) { srl . setRefreshing ( active ) ; }
public void run ( ) { try { clearCache ( MainActivity . context_s ) ; } catch ( Exception e ) { } }
public void fadeOut ( ) { mKeypad . setAlpha ( 0 . 3f ) ; mCallButton . fadeOut ( ) ; }
public void setUnreadCount ( int unreadCount ) { this . unreadCount = unreadCount ; }
public SpendPagerAdapter ( FragmentManager fm ) { super ( fm ) ; }
private void setProfileName ( String name ) { TextView profileName = ( TextView ) mNavigationView . getHeaderView ( 1 ) . findViewById ( R . id . header_profile_name ) ; profileName . setText ( name ) ; }
private @ Nullable Context getContext ( ) { Callback callback = getCallback ( ) ; if ( callback == null ) { return null ; } if ( callback instanceof View ) { return ( ( View ) callback ) . getContext ( ) ; } return null ; }
public int image ( ) { return 0 ; }
public int compare ( ResultBean r1 , ResultBean r2 ) { return r1 . getEarly ( ) . compareTo ( r2 . getEarly ( ) ) ; }
public static int getSortBy ( Context context ) { return Integer . parseInt ( PreferenceManager . getDefaultSharedPreferences ( context ) . getString ( PREFS_SORTBY , "1" ) ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "id . kopas . berkarya . usbkclient" , appContext . getPackageName ( ) ) ; }
public void onAnimationEnd ( Object animation ) { if ( currentAnimation != null && currentAnimation . equals ( animation ) ) { currentAnimation = null ; } }
public boolean apply ( Request < ? > request ) { if ( request instanceof ImageRequest ) return false ; return true ; }
public String getServerUrlFromPreferences ( ) { return generalSettings . getString ( GeneralKeys . KEY_SERVER_URL ) ; }
public String developmentUrl ( ) { return ExponentBuildConstants . DEVELOPMENT_URL ; }
public void openRecordFolder ( ) { if ( ! RecordsManager . openRecordFolder ( this , mRecord ) ) { LogManager . log ( R . string . log_missing_file_manager , Toast . LENGTH_LONG ) ; } }
public boolean isVisible ( ) { return isVisible ; }
public int getClipY ( ) { return clipRect . top - translateY ; }
private Teacher ( ) { }
public void onEmptyCursor ( ) { updateTrailersView . updateTrailersView ( ) ; }
public void setItems ( List < CityWeather > items , Utils . TemperatureUnits temperatureUnits ) { mTempUnits = temperatureUnits ; mItems = items ; }
public boolean hasResponseEngineStateChanged ( ) { return ( ( bitField0_ & 0x00100000 ) == 0x00100000 ) ; }
public String getWidth ( ) { return width ; }
private LastFMProvider ( final Context context ) { mRequestQueue = LimitingRequestQueue . getInstance ( context ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitBooleanVariable ( this ) ; else return visitor . visitChildren ( this ) ; }
public void onLostFoundSelected ( String image ) { Intent i = new Intent ( LostAndFoundActivity . this , ImageViewerActivity . class ) ; i . putExtra ( "image_url" , image ) ; startActivity ( i ) ; }
public static DownloadWithUpdate create ( AbstractClient client , JSONObject obj , boolean small ) throws JSONException { DownloadWithUpdate download = new DownloadWithUpdate ( obj . getString ( "gid" ) , client ) ; download . update ( obj , small ) ; return download ; }
public Channel getChannel ( ) { return mChannel ; }
public static void pauseSong ( ) { if ( musicService != null ) { musicService . pause ( false ) ; } }
public Flowable < List < DepictedItem >> searchAllEntities ( String query ) { return depictModel . searchAllEntities ( query ) ; }
public int getItemViewType ( int position ) { if ( showAd ( position ) ) return LIST_ITEM_TYPE_ADVERTISEMENT ; return LIST_ITEM_TYPE_DOCUMENT ; }
public void activate ( @ NotNull Char ch ) { super . activate ( ch ) ; buff = buff ( ) ; if ( buff != null ) { buff . setSource ( this ) ; buff . attachTo ( ch ) ; } }
public void newAlbumImage ( AlbumModel album ) { if ( album . equals ( mAlbum ) ) { if ( ! mHideArtwork ) { int width = getView ( ) . getMeasuredWidth ( ) ; mBitmapLoader . getAlbumImage ( mAlbum , width , width ) ; } } }
public void onChampionshipFinished ( ChampionshipGameInfo gameInfo ) { mGameStats . onChampionshipFinished ( gameInfo . getChampionship ( ) . getId ( ) , gameInfo . getBestRank ( ) ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; TupleIdentityEx identity = filtered . get ( position ) ; holder . bindTo ( identity ) ; holder . wire ( ) ; }
public void setLayoutType ( SizeLayout layoutType ) { super . setLayoutType ( layoutType ) ; }
public int getTargetSdk ( Context context ) { return xml . getChild ( "uses - sdk" ) . getInt ( "android : targetSdkVersion" , context . getResources ( ) . getInteger ( R . integer . prop_target_sdk_default ) ) ; }
public void setDay ( int day ) { this . day = day ; }
public void enableShutterSound ( boolean enabled ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR1 ) { camera . enableShutterSound ( enabled ) ; } }
public void play ( Uri uri ) { holdResources ( ) ; if ( player == null ) createPlayer ( ) ; preparePlayer ( uri ) ; resume ( ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . album_card , parent , false ) ; return new MyViewHolder ( itemView ) ; }
public void setData ( BarData data ) { mBarData = data ; init ( ) ; }
public AboutBuilder addAndroidLink ( int url ) { return addAndroidLink ( context . getString ( url ) ) ; }
public boolean dispatchTouchEvent ( MotionEvent ev ) { if ( getTitle ( ) == MainActivity . TITLE_MENU_SETTINGS ) { return super . dispatchTouchEvent ( ev ) ; } else { return resideMenu . dispatchTouchEvent ( ev ) ; } }
public static RecyclerView . Adapter releaseAll ( RecyclerView . Adapter adapter ) { return releaseCyclically ( adapter ) ; }
public static boolean supportsAc3 ( ) { return isGreaterThan51 ( ) ; }
public final int getIndicatorColor ( int position ) { return mIndicatorColors [ position % mIndicatorColors . length ] ; }
public static boolean hasSpellForName ( String name ) { if ( mSpellsList . get ( name ) != null ) { return true ; } return script . run ( "haveSpell" , name ) . checkboolean ( ) ; }
public String getApiToken ( ) { return sharedPref . getString ( "pref_key_token" , "" ) ; }
public LiveData < List < SupplierProduct >> getAll ( ) { return supplierProductDao . getAll ( ) ; }
public void removeEntry ( DatabaseEntry entry ) { _adapter . removeEntry ( entry ) ; updateEmptyState ( ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsSubreddit . class ) ; startActivityForResult ( i , RESTART_SETTINGS_RESULT ) ; }
public NecroLevel ( ) { color1 = 0x534f3e ; color2 = 0xb9d661 ; viewDistance = 6 ; }
private void setUpShuffleButton ( ) { updateShuffleState ( ) ; shuffleButton . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { MusicPlayerRemote . toggleShuffleMode ( ) ; } } ) ; }
public Long getAmount ( ) { return amount ; }
private double kgToounce ( double num ) { return num * 35 . 274 ; }
public void testTakeVideoFocusArea ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideoFocusArea" ) ; setToDefault ( ) ; subTestTakeVideo ( false , true , false , false , null , 5000 , false , false ) ; }
public HexView ( Context context ) { this ( context , null , 0 , 0 ) ; }
public void whenUserTriesToAddMoreThanFiveAlarms ( ) { Alarm alarm = new Alarm ( ALARM_ID , TITLE , true , false , false , MINUTE , HOUR ) ; presenter . onCreateAlarmButtonClick ( 5 , alarm ) ; view . makeToast ( R . string . msg_alarm_limit_reached ) ; }
public ChoiceGridView ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; Init ( ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mDistrictTeams ) ; }
public long getExpenseId ( ) { return expenseId ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `keywords` TEXT" ) ; }
public FolderEntry ( View v ) { super ( v ) ; folderName = ( TextView ) v . findViewById ( R . id . basic_nation_name ) ; v . setOnClickListener ( this ) ; }
public void testMinimalEncoder11 ( ) throws Exception { verifyMinimalEncoding ( "1234" , "NUMERIC ( 1234 ) , TERMINATOR ( ) " , null , false ) ; }
private static boolean isWifiOnly ( Context context ) { String wifiValue = context . getString ( R . string . offline_data_wifi ) ; return TextUtils . equals ( wifiValue , get ( context , R . string . pref_offline_data , wifiValue ) ) ; }
public Fee getFee ( ) { return fee ; }
public long startSeek ( ) { return 0 ; }
public @ Nullable StatusViewData . Concrete getConcreteStatusAtPosition ( int position ) { return concreteStatusList . get ( position - accountList . size ( ) ) ; }
public void onPasteTextFromClipboard ( TerminalSession session ) { }
public void testParseSinglePersonWinner ( ) { assertItemsEqual ( 1 ) ; }
public void goToCommentEdit ( int accountId , Comment comment ) { PlaceFactory . getEditCommentPlace ( accountId , comment ) . targetTo ( this , REQUEST_EDIT ) . tryOpenWith ( getActivity ( ) ) ; }
public static void v ( String tag , String msg , Throwable tr ) { if ( Constants . DEBUG ) { android . util . Log . v ( tag , msg , tr ) ; } }
public void addItemList ( final List < Speaker > speakers ) { realm . executeTransaction ( new Realm . Transaction ( ) { @ Override public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( speakers ) ; } } ) ; }
public EventBuilder setName ( String name ) { this . name = name ; return this ; }
private void showEmbeddedCard ( TweetView view ) { embeddedTweetCard . addView ( view . getView ( ) ) ; startAlphaAnimation ( embeddedTweetCard , 0 , AppSettings . getInstance ( context ) . darkTheme ? . 75f : 1 . 0f ) ; }
private Phrasebook receivePhrasebook ( ) throws IOException { if ( mPhrasebook == null ) { loadPhrasebookFromCsv ( ) ; } return mPhrasebook ; }
public void onReceive ( Context context , Intent intent ) { searchQuery = intent . getStringExtra ( "mentionsQuery" ) ; searchQuery = searchQuery . replace ( " - RT" , "" ) ; doUserSearch ( searchQuery ) ; }
private void setUpPageDetails ( ) { recyclerView . setLayoutManager ( new LinearLayoutManager ( getActivity ( ) ) ) ; mSongsInArtistAdapter = new SongsInArtistAdapter ( new ArrayList <> ( ) , getActivity ( ) , mArtist ) ; recyclerView . setAdapter ( mSongsInArtistAdapter ) ; }
public int getMonth ( ) { return month ; }
public int getItemCount ( ) { return mFilterQuery == null ? mEntries . size ( ) : mFilteredEntries . size ( ) ; }
public EmojiTextView ( Context context ) { super ( context ) ; }
public void setHeight ( int value ) { textView . setMinHeight ( AndroidUtilities . dp ( height ) - ( ( LayoutParams ) textView . getLayoutParams ( ) ) . topMargin ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonEditorDialog . this . getContext ( ) , ButtonEditorDialog . this , the_button . getData ( ) . getFlipLabelColor ( ) , COLOR_FIELDS . COLOR_FLIPLABEL ) ; diag . show ( ) ; }
public boolean hasRepeat ( ) { return ( ( bitField0_ & 0x00004000 ) == 0x00004000 ) ; }
private void onComplete ( ) { eventsSubject . onNext ( new CompleteEvent ( bartList ) ) ; }
public Number getMaxY ( ) { return yLineRegion . getMaxVal ( ) ; }
public static int getDayNightTheme ( Context context ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; String theme = settings . getString ( Settings . PREF_KEY_THEME , "1" ) ; return getDayNightTheme ( theme ) ; }
public Entry ( WalletAccount account ) { iconRes = WalletUtils . getIconRes ( account ) ; title = WalletUtils . getDescriptionOrCoinName ( account ) ; accountOrCoinType = account ; }
public void setUp ( ) throws Exception { when ( resourceProvider . getString ( R . string . notify_error_patch_corrupted ) ) . thenReturn ( PATCH_CORRUPTED ) ; fileUtils = new UFileUtils ( context , resourceProvider ) ; }
public Importer ( Collection col , String file ) { mFile = file ; mLog = new ArrayList <> ( ) ; mCol = col ; mTotal = 0 ; mContext = col . getContext ( ) ; }
public synchronized WaypointDbDataSource getWaypointDbDataSource ( ) { if ( mWaypointDbDataSource == null ) { File waypointsFile = new File ( getExternalFilesDir ( "databases" ) , "waypoints . sqlitedb" ) ; mWaypointDbDataSource = new WaypointDbDataSource ( this , waypointsFile ) ; } return mWaypointDbDataSource ; }
public static Executors getInstance ( ) { if ( instance == null ) synchronized ( Executors . class ) { if ( instance == null ) instance = new Executors ( ) ; } return instance ; }
public void setAnreise ( String anreise ) { this . _anreise = anreise ; }
private double sqinchTosqyard ( double num ) { return num * 0 . 0007716049 ; }
public boolean isFoldingBack ( ) { return isFoldingBack ; }
private double ounceTokg ( double num ) { return num * 0 . 0283 ; }
public boolean onResourceReady ( Drawable resource , Object model , Target < Drawable > target , DataSource dataSource , boolean isFirstResource ) { showAvatarImageOptions ( true ) ; ivAvatar . setImageDrawable ( resource ) ; hideLoadingDialog ( ) ; return true ; }
public AvatarDrawable ( TLRPC . Chat chat , boolean profile ) { this ( ) ; isProfile = profile ; if ( chat != null ) { setInfo ( chat . id , chat . title , null , chat . id < 0 ) ; } }
public void onAuthenticationError ( int errMsgId , CharSequence errString ) { if ( ! selfCancelled ) { showFingerprintError ( errString ) ; } }
public String getRemainingDownhill ( ) { if ( mError != null ) { return mError ; } return Integer . toString ( mRemainingDownhill ) ; }
public Set < IdentityKey > getKeysWithTrust ( FingerprintStatus status , Jid jid ) { return axolotlStore . getContactKeysWithTrust ( jid . toBareJid ( ) . toPreppedString ( ) , status ) ; }
public void checkClientTrusted ( X509Certificate [ ] chain , String authType ) throws CertificateException { MemorizingTrustManager . this . checkCertTrusted ( chain , authType , false , false ) ; }
public void setLastPostMember ( String lastPostMember ) { this . lastPostMember = lastPostMember ; notifyPropertyChanged ( BR . lastPostMember ) ; }
public static boolean displayImage ( Type t ) { switch ( t ) { case ALBUM : case DEVIANTART : case IMAGE : case XKCD : case TUMBLR : case IMGUR : case SELF : return true ; default : return false ; } }
public boolean attachTo ( Char target ) { return target . hasBuff ( Regeneration . class ) || super . attachTo ( target ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { pendingEdits . add ( object ) ; process_pending_edits ( ) ; }
public GeneralSettingsPage checkIfServerOptionIsNotDisplayed ( ) { onView ( withText ( "Server" ) ) . check ( doesNotExist ( ) ) ; return this ; }
public void onSuccess ( ) { mProgressDialog . cancel ( ) ; feed . upvoteCount ++ ; feed . hasVoted = true ; mHasVoted . add ( feed . guid ) ; notifyItemChanged ( pos ) ; }
public void onLoadFinished ( Loader < String [ ] > loader , String [ ] data ) { recyclerView . setAdapter ( new StickersAdapter ( getActivity ( ) , data ) ) ; }
public String getDescription ( ) { return "Custom view action to set rating . " ; }
public static void openFoodHistory ( final Context context , final Food food ) { startSelectableDateActivity ( context , createFoodIntent ( context , FoodHistoryActivity . class , food ) ) ; }
public void setNumThreads ( Long numThreads ) { this . numThreads = numThreads ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; logTheConfiguration ( newConfig ) ; }
public void updatesPropertyManager ( ) { handler . onSettingChanged ( "blah" , "anything" ) ; verify ( propertyManager ) . reload ( ) ; }
public void removeItems ( int . . . identifiers ) { if ( identifiers != null ) { for ( int identifier : identifiers ) { removeItem ( identifier ) ; } } }
public String getKey ( ) { if ( mDevice != null ) return mDevice . getName ( ) + mDevice . getAddress ( ) ; return "" ; }
public void getContentWithNoSchemeAndAnyType ( ) { launch ( buildIntent ( ACTION_GET_CONTENT , null , "fu/bar" ) ) ; }
private void setArgument ( String key , String value ) { if ( getArguments ( ) == null ) { setArguments ( new Bundle ( ) ) ; } getArguments ( ) . putString ( value , key ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; finder = new DaoSearchHistoryFinder ( databaseHelper . getPlaceDao ( ) ) ; }
public void notifyItemChanged ( int position , Object payload ) { mObservable . notifyItemRangeChanged ( position , 1 , payload ) ; }
public TodoListPreview ( TodoList todoList , TodoListHeader header , Iterable < TodoListItem > items ) { this . todoList = todoList ; this . header = header ; this . items = items ; }
public ArrayList < Category > getAllCategoriesList ( boolean includeNoCategory ) { return getAllEntitiesList ( Category . class , includeNoCategory ) ; }
public void getSimpleThemeLIGHTTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . LIGHT_INDEX ) ; assertEquals ( AppTheme . LIGHT , apptheme . getSimpleTheme ( ) ) ; }
public int getBackgroundDark ( ) { return backgroundDark ; }
public void onClick ( View v ) { choice = 5 ; if ( selectedImageUri != null ) { executeFadeInFadeOutCommand ( ) ; } else Snackbar . make ( mainlayout , "Please upload a video" , 4000 ) . show ( ) ; }
private void changeLedPrefs ( ) { boolean isChecked = binding . ledPrefs . isChecked ( ) ; binding . ledPrefs . setChecked ( ! isChecked ) ; mPrefs . setLedEnabled ( ! isChecked ) ; }
public Notification getExportProgressNotification ( ExportInfo exportInfo ) { mNotificationBuilder . setProgress ( 0 , 0 , false ) . setContentText ( getExportMessage ( exportInfo ) ) ; return mNotificationBuilder . getNotification ( ) ; }
private void userCopiesFileInList ( File file ) { user . selects ( ) . longFileInList ( file ) ; user . selects ( ) . operationsAction ( ) ; user . selects ( ) . copyAction ( ) ; }
private final TimeManagerListener timeManagerListener = new TimeManagerListener ( ) { @ Override public void onStateChanged ( ) { if ( prefsSmartStopwatch && TimeManager . INSTANCE . isRunning ( ) && ! stopwatchHelper . isRunning ( ) ) { play ( ) ; } } } ;
public static void background ( View v , Bitmap b ) { background ( v , new BitmapDrawable ( v . getResources ( ) , b ) ) ; }
public void setName ( String parName ) { mName = parName ; }
public static String getCredits2Russian ( ) { StringBuffer localStringBuffer = new StringBuffer ( "Авторы Lavastorm\n ----------------- \nПродюсер - Jason Loia\nРазработчик - Albert So\nРазработчик - Horace Lin\nРазработчик - Veeramurthy Veeraprakash\nХудожник - Mark Keavney\n\nОтдельная благодарность\n ----------------- \nJohn P . Sohl\n" ) ; return localStringBuffer . toString ( ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . TransactionConfidence prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent event ) { if ( actionId == EditorInfo . IME_ACTION_DONE ) { calculateAge ( ) ; return true ; } return false ; }
public ExchangeAdapter ( ExchangeType type , Listener listener ) { this . type = type ; this . listener = listener ; }
private static void openScreenshotPermissionRequester ( Context context ) { final Intent intent = new Intent ( context , AcquireScreenshotPermission . class ) ; intent . addFlags ( FLAG_ACTIVITY_NEW_TASK ) ; intent . putExtra ( AcquireScreenshotPermission . EXTRA_REQUEST_PERMISSION_SCREENSHOT , true ) ; context . startActivity ( intent ) ; }
public UnprintableWatcher ( TextView textView ) { textView . addTextChangedListener ( this ) ; }
public void setPrimaryItem ( ViewGroup container , int position , Object object ) { if ( getCurrentFragment ( ) != object ) { currentFragment = ( ( AbstractMainFragment ) object ) ; } super . setPrimaryItem ( container , position , object ) ; }
public void onDestroy ( ) { Log . d ( "Engine_Driver" , "gamepad_test . onDestroy ( ) " ) ; if ( tg != null ) { tg . release ( ) ; } super . onDestroy ( ) ; }
private final BroadcastReceiver mReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { mFullscreen = intent . getBooleanExtra ( BaseWebFragment . EXTRA_FULLSCREEN , false ) ; setFullscreen ( ) ; } } ;
public static String getPatchFileUrl ( String widthParam , int toVersion ) { return PATCH_ZIP_BASE_URL + toVersion + "/patch" + widthParam + "_v" + toVersion + " . zip" ; }
public void disablePreferences ( Intent intent ) { intent . putExtra ( mPreferenceKey + "_enabled" , mSensor != null ) ; }
private boolean hasBadName ( File pathname ) { for ( String name : BAD_NAMES ) { if ( pathname . getName ( ) . startsWith ( "values - " + name ) ) { return true ; } } return false ; }
public boolean onQueryTextSubmit ( String query ) { key = query ; newSearchQuery ( ) ; return true ; }
private void initAnimator ( ViewPositionAnimator animator ) { for ( PositionUpdateListener listener : mListeners ) { animator . addPositionUpdateListener ( listener ) ; } }
public SectionAdapter ( Context context , @ SectionVO . Type int type , OnItemClickListener listener ) { super ( listener ) ; mImageTransitionName = context . getString ( R . string . transition_section_image ) + type ; mType = type ; }
public static void setOrientation ( boolean portrait , Activity activity ) { int value = ActivityInfo . SCREEN_ORIENTATION_PORTRAIT ; if ( ! portrait ) value = ActivityInfo . SCREEN_ORIENTATION_LANDSCAPE ; activity . setRequestedOrientation ( value ) ; }
public void sendSkipAndClose ( ) { getActivity ( ) . setResult ( Activity . RESULT_CANCELED ) ; getActivity ( ) . finish ( ) ; }
public void onSuccess ( ) { doCompleteOneBtDevice ( storywellPerson ) ; }
public void onPlay ( ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessage . getMessage ( MsgType . PLAY ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
public String toString ( ) { return mString ; }
public void onSuccess ( String url ) { shareUtil . shareViaIntent ( PagerActivity . this , url , R . string . share_ayah ) ; dismissProgressDialog ( ) ; }
public @ NonNull MediaExtractor createExtractor ( ) throws IOException { MediaExtractor extractor = new MediaExtractor ( ) ; extractor . setDataSource ( context , uri , null ) ; return extractor ; }
public String getSubText ( ) { return null ; }
public CardAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card , parent , false ) ) ; }
public void onItemSelected ( MaterialSpinner view , int position , long id , String item ) { mPresenter . fetchRooms ( regionsArrayList . get ( position ) ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mNotifications ) ; }
public void setIsBot ( boolean bot ) { bot = isBot ; }
public FigureCreator ( ) { random = new Random ( ) ; currentFigureType = null ; nextFigureType = selectFigure ( ) ; }
public static String toStringForEditText ( double value ) { if ( MathUtils . isIgnorable ( value ) ) { return "" ; } return String . format ( App . numberOfDecimals , value ) ; }
private void loadModelFromRepository ( ) { if ( AndroidUtils . checkPermission ( this , Manifest . permission . INTERNET , REQUEST_INTERNET_ACCESS ) ) { new LoadRepoIndexTask ( ) . execute ( ) ; } }
public void onError ( String msg , Throwable th ) { Log . i ( TAG , "There was an error clearing favorites . " + msg , th ) ; }
public void run ( ) { try { database . commitTransaction ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onPageSelected ( int inPos ) { Log . d ( "ViewPager . OnPageChangeListener ( ) " , "onPageSelected ( ) " ) ; Utils . setItemTableSortType ( SortTypeM . KINDSORT ) ; mWeakRefToMainActivity . get ( ) . getActionBar ( ) . setSelectedNavigationItem ( inPos ) ; }
public String Func ( ) throws java . lang . Exception { return GetFiche ( numero , PathFiche ) ; }
public int getCurrentAdGroupIndex ( ) { return player . getCurrentAdGroupIndex ( ) ; }
public List < Movie > getMovies ( ) { return movies ; }
public static String convertName ( FileHeader file ) { String name = file . getFileNameString ( ) . replace ( '\\' , '/' ) ; if ( file . isDirectory ( ) ) return name + "/" ; else return name ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; unbinder = ButterKnife . bind ( this , view ) ; setUpMusicControllers ( ) ; updateProgressTextColor ( ) ; }
public boolean hasNext ( ) { return index < length ( ) ; }
public void setUp ( ) throws Exception { mSettingsPresenter = new SettingsPresenter ( mMockDataManager ) ; mSettingsPresenter . attachView ( mMockSettingsMvpView ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_info ) ; presenter = new LicensePresenterImpl ( ) ; setupTextInfo ( ) ; }
public ThreadUpdate ( final String name , final String threadId ) { super ( VoltageContentProvider . Uris . THREADS , values ( name ) ) ; setWhere ( ThreadTable . Columns . ID + " = ?" , threadId ) ; }
public String getFlashMode ( ) { return mFlashMode ; }
public com . coinomi . core . protos . Protos . Key . Type getType ( ) { return type_ ; }
public boolean getSensible ( ) { return sensible ; }
public synchronized void updateFromPreferences ( SharedPreferences prefs ) { super . updateFromPreferences ( prefs ) ; mSensitivityStr = prefs . getString ( Constants . PREF_PREFIX + mPreferenceKey + Constants . PREF_SUFFIX_SENSITIVITY , "3 . 0" ) ; mSensitivity = Float . valueOf ( mSensitivityStr ) ; }
public void onAccountInvalidState ( Account account , Throwable fault ) { mRemoteLogger . d ( "onAccountInvalidState" ) ; }
public void onReceive ( Context context , Intent intent ) { try { MessagesController . getInstance ( ) . setReferer ( intent . getExtras ( ) . getString ( "referrer" ) ) ; } catch ( Exception ignore ) { } }
public void refreshSourcesList ( ) { checkAndUpdateSources ( interactor . createSourceStreamFromCache ( ) ) ; }
public static int getImageOptimizeQuality ( ) { int quality = getInt ( DeletablePrefKey . IMAGE_OPTIMIZE_QUALITY , 0 ) ; return quality > 1 ? quality : WordPressMediaUtils . OPTIMIZE_IMAGE_ENCODER_QUALITY ; }
public void onNotify ( int steps ) { Log . d ( "SWELL" , String . format ( "Steps : %d" , steps ) ) ; }
public NavDrawerCategoryAdapter ( Activity mActivity , List < Category > categories ) { this ( mActivity , categories , null ) ; }
public void setOnSaveMapPositionListener ( OnSaveMapPositionListener listener ) { onSaveStateListener = listener ; }
public PushMediaSendJob ( Context context , long messageId , Address destination ) { super ( context , constructParameters ( context , destination ) ) ; this . messageId = messageId ; }
public void bindViews ( ) { if ( ! mAreViewsBound ) { ButterKnife . bind ( this , mRootView ) ; mAreViewsBound = true ; } }
private View . OnClickListener onClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { onFabItemClickedListener . onFabItemClick ( v . getId ( ) ) ; } } ;
public void onClick ( View v ) { if ( ! isAWarningClicked ) { GPSActivity gpsActivity = ( GPSActivity ) getActivity ( ) ; gpsActivity . CheckLocationPermission ( ) ; } }
public static < T > Resource < T > loading ( @ Nullable T data ) { return new Resource <> ( LOADING , data , null ) ; }
public void onException ( Exception e ) { e . printStackTrace ( ) ; updateEncryptionPreferences ( ) ; Dialogs . showErrorDialog ( getContext ( ) , R . string . encryption_set_password_error , e ) ; }
public void run ( ) { try { Process . setThreadPriority ( mThreadPriority ) ; } catch ( Throwable t ) { } runnable . run ( ) ; }
public com . coinomi . core . protos . Protos . KeyOrBuilder getMasterKeyOrBuilder ( ) { return masterKey_ ; }
public @ Nullable Recipient getNext ( ) { if ( ! cursor . moveToNext ( ) ) { return null ; } return getCurrent ( ) ; }
public String getDateInUse ( ) { return dateInUse ; }
public boolean isDimBlocked ( ) { final PowerManager pm = ( PowerManager ) activityContext . getSystemService ( Context . POWER_SERVICE ) ; return WakeLockManager . getInstance ( pm ) . isLocked ( ) ; }
public ResultProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public Bitmap getImage ( int index ) { return ( Bitmap ) this . contents . get ( index ) ; }
public static Setting getInstance ( Context context ) { if ( setting == null ) { setting = new Setting ( ) ; } sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return setting ; }
public void editStyle ( RPSParty game ) { skin . add ( "Rock" , game . getAssetManager ( ) . get ( "rock . png" ) ) ; style = new Button . ButtonStyle ( ) ; style . up = skin . getDrawable ( "Rock" ) ; }
public void testMinimalEncoder36 ( ) throws Exception { verifyMinimalEncoding ( "\u015C" , "ECI ( ISO - 8859 - 3 ) , BYTE ( . ) , TERMINATOR ( ) " , null , false ) ; }
public void clear ( long style ) { Arrays . fill ( mText , ' ' ) ; Arrays . fill ( mStyle , style ) ; mSpaceUsed = ( short ) mColumns ; }
public void launchPreferences ( ) { Intent intent = new Intent ( getContext ( ) , PreferencesActivity . class ) ; startActivity ( intent ) ; }
public void addListener ( Player . EventListener listener ) { player . addListener ( listener ) ; }
private void showBottomSheet ( ) { DiceBottomSheetFragment bottomSheet = new DiceBottomSheetFragment ( ) ; bottomSheet . show ( requireFragmentManager ( ) , "DiceBottomSheetFragment" ) ; bottomSheet . setOnDismissListener ( d -> updateOnDismiss ( ) ) ; }
public void setCirclesColor ( @ ColorInt int circlesColor ) { this . mCirclesColor = circlesColor ; this . mCirclePaint . setColor ( circlesColor ) ; invalidate ( ) ; }
public Builder setInputDirection ( int value ) { bitField0_ | = 0x00000010 ; inputDirection_ = value ; onChanged ( ) ; return this ; }
public AboutBuilder addFacebookLink ( String user ) { return addLink ( R . mipmap . facebook , R . string . facebook , util . openFacebook ( user ) ) ; }
public int compare ( ContactSort lhs , ContactSort rhs ) { return lhs . getStreet ( ) . compareTo ( rhs . getStreet ( ) ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { binding = FragmentTweaksBinding . inflate ( inflater , container , false ) ; return binding . getRoot ( ) ; }
public boolean onTouch ( View v , MotionEvent event ) { if ( MotionEventCompat . getActionMasked ( event ) == MotionEvent . ACTION_DOWN ) mDragListener . onStartDrag ( this ) ; return false ; }
public boolean removeFromActive ( RecyclerView . ViewHolder item ) { return mActive . remove ( item ) ; }
public void onBackPressed ( ) { if ( ! drawerPresenter . onBackPressed ( ) ) super . onBackPressed ( ) ; }
public Object getStepData ( ) { return null ; }
public boolean handleTouchEvent ( MotionEvent event , EventType eventType , int page ) { return isVisible ( ) && ayahTrackerPresenter . handleTouchEvent ( getActivity ( ) , event , eventType , page , ayahSelectedListener , ayahCoordinatesError ) ; }
public void onAppExiting ( ) { if ( getCurrentFragment ( ) instanceof ServerListFragment ) ( ( ServerListFragment ) getCurrentFragment ( ) ) . getAdapter ( ) . unregisterListeners ( ) ; getDrawerHelper ( ) . unregisterListeners ( ) ; }
public void levelUp ( ) { dark = new Dark ( ) ; darks . add ( dark ) ; }
public List < String > getGroups ( ) { return groups ; }
public com . coinomi . core . protos . Protos . TransactionInput . Builder addTransactionInputBuilder ( ) { return getTransactionInputFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . TransactionInput . getDefaultInstance ( ) ) ; }
public boolean onLoadFailed ( @ Nullable GlideException e , Object model , Target < Drawable > target , boolean isFirstResource ) { showAvatarImageOptions ( false ) ; hideLoadingDialog ( ) ; return false ; }
public void notifyChildItemRangeChanged ( int groupPosition , int childPositionStart , int itemCount ) { mAdapter . notifyChildItemRangeChanged ( groupPosition , childPositionStart , itemCount , null ) ; }
public void finish ( ) { this . finshed = true ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . screenshotTook ) ; checkScreenshots ( screenshotDates ) ; }
public void setFeaturedImage ( String featuredImage ) { this . featuredImage = StringUtils . notNullStr ( featuredImage ) ; }
public JSONObject model ( ) { return mModel ; }
public Integer getWd ( ) { return wd ; }
public Uri getUri ( ) { return localDbRepo . getUri ( ) ; }
public String onArgNotFound ( ExecutePack pack ) { MainPack info = ( MainPack ) pack ; return info . res . getString ( R . string . output_commandnotfound ) ; }
public void onStart ( ) { Log . d ( logTag , "Starting" ) ; mBitcoin . appIsOpen = true ; startBitcoinService ( ) ; mBitcoin . clearFinishTime ( ) ; startUpdateRates ( ) ; updateStatus ( ) ; super . onStart ( ) ; }
public PlaceItemAdapter getAdapter ( ) { return adapter ; }
public FileHandle getBaseFolder ( ) { return Gdx . files . external ( Branding . NAME ) ; }
public void destroyItem ( ViewGroup container , int position , Object object ) { TextView layout = ( TextView ) object ; container . removeView ( layout ) ; }
public void updateMosaic ( @ NonNull SlicedBitmap slicedBitmap ) { BitmapUtils . drawMosaicOnBitmap ( mosaicBitmap , slicedBitmap ) ; if ( mosaicView != null ) { mosaicView . setMosaicBitmap ( mosaicBitmap ) ; } }
public void finish ( MainList frag , List < JSONObject > result ) { frag . adapter . update ( result , frag . info ) ; }
public void pinValidated ( String workflowId , OstWorkflowContext ostWorkflowContext , String userId ) { }
private void onScheduleEnd ( Intent data ) { int minutes = data . getIntExtra ( "minutes" , 0 ) ; tvScheduleEnd . setTag ( minutes ) ; tvScheduleEnd . setText ( formatHour ( getContext ( ) , minutes ) ) ; cbScheduleEnd . setChecked ( true ) ; }
public void run ( ) { getChannelParticipants ( 0 , 200 ) ; }
public boolean isReady ( ) { return format != null && ! waitingForKeys && ( isSourceReady ( ) || hasOutputBuffer ( ) || ( codecHotswapDeadlineMs != C . TIME_UNSET && SystemClock . elapsedRealtime ( ) < codecHotswapDeadlineMs ) ) ; }
public void onClick ( View hvadBlevDerKlikketPå ) { System . out . println ( "Der blev klikket på " + hvadBlevDerKlikketPå ) ; teksten = editText . getText ( ) . toString ( ) ; minGrafik . invalidate ( ) ; }
public void onMovieLongClicked ( Movie movie ) { AlertDialog dialog = getDialog ( movie ) ; dialog . show ( ) ; }
public void setTitle ( String title ) { this . title = title ; notifyPropertyChanged ( BR . title ) ; }
private LibraryActivity getLibraryActivity ( ) { return ( ( LibraryActivity ) getActivity ( ) ) ; }
public static void initializeSync ( Context context ) { BlichSync . initializePeriodicSync ( context ) ; syncDatabase ( context ) ; }
public void onStartListening ( ) { super . onStartListening ( ) ; IntentFilter f = new IntentFilter ( ) ; f . addAction ( FTPService . ACTION_STARTED ) ; f . addAction ( FTPService . ACTION_STOPPED ) ; registerReceiver ( ftpReceiver , f ) ; updateTileState ( ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( getLayout ( ) ) ; mPresenter = providePresenter ( ) ; ButterKnife . bind ( this ) ; setupView ( ) ; }
public void cancelLoadFile ( TLRPC . Document document ) { cancelLoadFile ( document , null , null , null ) ; }
public void clearItemContentView ( ) { imgview = null ; }
public int getResId ( ) { return resId ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { changeTrackerType ( 1 ) ; showHideCustFields ( View . INVISIBLE ) ; } }
public String get_config ( @ NonNull String key , @ Nullable String defaultValue ) { if ( ! mConf . has ( key ) ) { return defaultValue ; } return mConf . getString ( key ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'CURRENT_RSS_ITEM_VIEW'" ; db . execSQL ( sql ) ; }
public static void showNoSiteToReblog ( Activity activity ) { Intent intent = new Intent ( activity , ReaderPostNoSiteToReblogActivity . class ) ; activity . startActivityForResult ( intent , RequestCodes . NO_REBLOG_SITE ) ; }
public SelectTagsDialog ( ) { }
public Vector < OCFile > sortCloudFiles ( Vector < OCFile > files ) { return sortCloudFilesByFavourite ( files ) ; }
public void setInEditMode ( boolean inEditMode ) { this . inEditMode = inEditMode ; refreshList ( ) ; }
public String getSenderId ( ) { return mLocalProperties . readLocalProperty ( PREF_SENDER_ID ) ; }
private void cancelActivityWithAssertionFailure ( String logMessage ) { Timber . wtf ( logMessage ) ; UIUtils . showThemedToast ( this , getString ( R . string . mutimedia_editor_assertion_failed ) , false ) ; finishCancel ( ) ; }
private void init ( Context context , AttributeSet attrs ) { this . context = context ; PrefUtil . setLayoutResource ( context , this , attrs ) ; if ( Build . VERSION . SDK_INT <= Build . VERSION_CODES . GINGERBREAD_MR1 ) setWidgetLayoutResource ( 0 ) ; }
public int getCarbsPercent ( ) { if ( getWeight ( ) == 0 || carbs == 0 ) return 0 ; return Math . round ( carbs / getWeight ( ) ) * 100 ; }
public void onBindViewHolder ( BlockViewHolder holder , int position ) { holder . bindBlock ( blocksArray . get ( position ) , cur ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new SavedAccountViewModel ( burstBlockchainService , accountsDatabase ) ; }
public static Book book ( ) { return getBook ( DEFAULT_DB_NAME ) ; }
public void onStartTrackingTouch ( SeekBar seekBar ) { initialProgress = seekBarTTSSpeed . getProgress ( ) ; isTouchTracking = true ; }
public void onBindViewHolder ( MyViewHolder holder , int position ) { MyItem item = mItems . get ( position ) ; holder . textView . setText ( item . text ) ; }
public void addSiteList ( @ NonNull List < ReaderSiteModel > sites ) { mSites . addAll ( sites ) ; notifyDataSetChanged ( ) ; }
public void onLoaderReset ( Loader < ArrayList < Song >> loader ) { if ( adapter != null ) adapter . swapDataSet ( new ArrayList <> ( ) ) ; }
public void setZoomSlideVertical ( float fraction ) { setTranslationY ( getHeight ( ) * fraction ) ; setPivotX ( getWidth ( ) / 2 ) ; setPivotY ( getHeight ( ) / 2 ) ; }
public RadioConditionsAdapter ( @ NonNull Context context , @ NonNull List < MultiProfile . ConnectivityCondition > objects ) { super ( context , R . layout . item_radio_condition , objects ) ; this . context = context ; }
public int getItemViewType ( int position ) { return items . get ( position ) . getCardType ( ) ; }
public JSONObject sanityCheck2 ( JSONObject client ) throws UnknownHttpResponseException { return _run ( "sanityCheck2" , client ) ; }
public void run ( ) { startHeartRateNotifications ( ) ; }
public Integer getWindBearing ( ) { return windBearing ; }
public void reset ( View loader ) { if ( ! isConnected ( ) ) return ; ServerCommunication . update ( user_id , user_key , loader ) ; }
public void swapDataSet ( ArrayList < Artist > dataSet ) { this . dataSet = dataSet ; notifyDataSetChanged ( ) ; }
public void onClick ( View view ) { BUS . post ( new RepositoryBeginEditingEvent ( item ) ) ; }
public AdmissionPercentageMetaPojo getItem ( AdmissionPercentageMetaPojo idItem ) { return getItem ( idItem . id ) ; }
private ActivityBase . IBackPressedListener onBackPressedListener = new ActivityBase . IBackPressedListener ( ) { @ Override public boolean onBackPressed ( ) { if ( getLifecycle ( ) . getCurrentState ( ) . isAtLeast ( Lifecycle . State . RESUMED ) ) onExit ( ) ; return true ; } } ;
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { intent . intentLink ( a , getStringFromId ( "info_berict_action_translate_dialog_github_url" , a ) , 0 ) ; }
public void setSecretKey ( String secretKey ) { this . secretKey = secretKey ; }
public void setPseudoId ( String pseudoId ) { this . pseudoId = StringUtils . notNullStr ( pseudoId ) ; }
public static String getDeviceModel ( ) { return Build . DEVICE ; }
private void setLottieDrawable ( ) { boolean wasAnimating = isAnimating ( ) ; setImageDrawable ( null ) ; setImageDrawable ( lottieDrawable ) ; computeRenderMode ( ) ; if ( wasAnimating ) { lottieDrawable . resumeAnimation ( ) ; } }
public void run ( ) { onMessageReceived . onMessageReceived ( message ) ; }
private BroadcastReceiver addWidgetReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { fadeIn ( ) ; addWidget ( intent ) ; } } ;
public Number getMinY ( ) { return yLineRegion . getMinVal ( ) ; }
public void setMonoStableMode ( ) { timerModeImageView . setBackgroundResource ( R . drawable . timer_555_monostable ) ; hideR2 ( ) ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . headlines_action_menu , menu ) ; return true ; }
private List < BluetoothGattService > getSupportedGattServices ( ) { if ( mBluetoothGatt == null ) return null ; return mBluetoothGatt . getServices ( ) ; }
public boolean isDebugEnabled ( ) { return false ; }
private void onInterfaceResult ( String value ) { result [ 0 ] = result [ 0 ] . replace ( sig , "/signature/" + value ) ; semaphore . release ( ) ; }
public void onPause ( ) { super . onPause ( ) ; presenter . stop ( ) ; }
private void initSoundInSilentModePrefs ( ) { binding . soundOptionPrefs . setOnClickListener ( mSoundClick ) ; binding . soundOptionPrefs . setChecked ( mPrefs . isSoundInSilentModeEnabled ( ) ) ; }
public void editStyle ( RPSParty game ) { skin . add ( "Scissors" , game . getAssetManager ( ) . get ( "scissor . png" ) ) ; style = new Button . ButtonStyle ( ) ; style . up = skin . getDrawable ( "Scissors" ) ; }
public void onSuccess ( BookmarkResult result ) { pendingRemoval = null ; cachedData = result ; if ( fragment != null ) { fragment . onNewData ( result ) ; } }
public void setGkzSa ( Long gkzSa ) { this . gkzSa = gkzSa ; }
public String streamToString ( InputStream is , String enc ) { return streamToString ( is , maxBytes , enc ) ; }
public void requestVideoUpdate ( final boolean enable ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . requestVideoUpdate ( enable ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitLitteralNumericExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
public void startCoverImageTask ( ) { if ( mLoaderTask == null && mHolder . artworkManager != null && mHolder . modelItem != null && ! mCoverDone ) { mLoaderTask = new AsyncLoader ( getContext ( ) ) ; mLoaderTask . execute ( mHolder ) ; } }
public Animator buildHideAnimator ( @ NonNull View view , boolean isDelaySet ) { Animator animator = buildAlphaAnimator ( view , 1f , 0f ) ; animator . setStartDelay ( isDelaySet ? START_DELAY : 0 ) ; return animator ; }
private BearingWidget createWidget ( FormEntryPrompt prompt ) { return new BearingWidget ( widgetActivity , new QuestionDetails ( prompt , "formAnalyticsID" ) , fakeWaitingForDataRegistry , sensorManager ) ; }
public String get ( Song song ) { return song . getName ( ) ; }
public void onAttachedToRecyclerView ( RecyclerView recyclerView ) { }
public void deleteAnswerFile_whenAnswerFileHasAlreadyBeenDeleted_actuallyDeletesNewFile ( ) { viewModel . deleteAnswerFile ( "index" , "blah1" ) ; viewModel . deleteAnswerFile ( "index" , "blah2" ) ; verify ( mediaUtils ) . deleteImageFileFromMediaProvider ( "blah2" ) ; }
public DetailViewAdapter ( List < SenseElement > items ) { mItems = items ; }
public void setInProduction ( String inProduction ) { mInProduction = inProduction ; }
public void moveToLoginActivity ( ) { Intent intent = new Intent ( getCurrentContext ( ) , LoginActivity . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; getCurrentContext ( ) . startActivity ( intent ) ; }
public void updateStickyFooterItem ( @ NonNull IDrawerItem drawerItem ) { updateStickyFooterItemAtPosition ( drawerItem , getFooterPosition ( drawerItem ) ) ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor data ) { mCache = data ; if ( mView != null ) { mView . showPrices ( data ) ; } }
public int getCount ( ) { return mTabTitles . length ; }
private String validateDuration ( String duration ) { if ( name . equals ( "" ) ) { return "Fill in duration" ; } else { return null ; } }
public String itemSlotName ( EquipableItem item ) { if ( usedSlots . containsKey ( item ) ) { return usedSlots . get ( item ) . name ( ) ; } return Slot . NONE . name ( ) ; }
private void getMembersFromDatabase ( ) { mMembers = new Select ( ) . from ( MoodleMember . class ) . where ( "courseid = ?" , mCourseid ) . execute ( ) ; }
public int computeHorizontalScrollOffset ( RecyclerView . State state ) { return computeScrollOffset ( state ) ; }
public Speaker findItemById ( int id ) { return realm . where ( Speaker . class ) . equalTo ( "id" , id ) . findFirst ( ) ; }
public void onEventMainThread ( ConnectionEstablishedEvent event ) { TCPClientApplication . getInstance ( ) . send ( " - ; HELLO ; 1 . 0" ) ; }
public final void peers ( AbstractClient . OnResult < Peers > listener ) { client . send ( AriaRequests . getPeers ( gid ) , listener ) ; }
public int getItemCount ( ) { return 3 ; }
public void onResume ( ) { super . onResume ( ) ; refresh ( ) ; if ( myPreferences . getDisplayFAB ( ) ) { fab . show ( ) ; } else { fab . hide ( ) ; } }
public void run ( ) { updateDialogsWithReadMessagesInternal ( null , inbox ) ; }
public Fragment getItem ( int position ) { String font = fonts . get ( position ) ; return ContentFragment . newInstance ( font ) ; }
public boolean onTouch ( View v , MotionEvent event ) { return StickerPreviewViewer . getInstance ( ) . onTouch ( event , stickersGridView , StickerMasksView . this . getMeasuredHeight ( ) , stickersOnItemClickListener ) ; }
public void onBindViewHolder ( FallacyListAdapter . ViewHolder holder , int position ) { holder . bindFallacy ( fallaciesItems . get ( position ) ) ; }
private void handleChecksumFailed ( final Context context , final GcmChecksumFailed gcmChecksumFailed ) { final String threadId = gcmChecksumFailed . getThreadId ( ) ; final String senderId = gcmChecksumFailed . getSenderId ( ) ; OperationService . start ( context , new SyncRequestOperation ( threadId , senderId ) ) ; }
public void onAttach ( Context context ) { getControllerComponent ( ) . inject ( this ) ; super . onAttach ( context ) ; }
public void setBitmap ( Bitmap slowTime ) { this . slowTime = slowTime ; }
public void onSaveDialogPositiveClick ( ) { NoteEditFragment fragment = ( NoteEditFragment ) getFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onSaveDialogPositiveClick ( ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; sensor = SensorWrapperManager . get ( ) . getSensor ( getArguments ( ) . getString ( Arguments . ARG_SENSOR ) ) ; return ; }
public String desc ( ) { return Game . getVar ( R . string . ScrollOfTerror_Info ) ; }
private void thenDelegateShouldDestroy ( ) { new Verifications ( ) { { mAppCompatDelegate . onDestroy ( ) ; } } ; }
public Observable < String > observeSelectedItem ( ) { return selectedItemSubject ; }
public static void d ( String tag , String message ) { if ( D ) Log . d ( TAG + tag , message ) ; }
private Word getPreviousWord ( int wordId ) { if ( wordId <= 0 ) { wordId = Constants . WORDS_COUNT ; } Word word = service . getWord ( -- wordId ) ; return word != null ? word : getPreviousWord ( wordId - 1 ) ; }
public Player ( String name , HashSet < String > dbOfPlayer ) { this . name = name ; this . dbOfPlayer = dbOfPlayer ; }
public void run ( ) { if ( imageView . getScale ( ) == 1F ) { imageView . center ( true , true ) ; } latch . countDown ( ) ; }
public int getActionValue ( ) { return actionValue ; }
public static Class < ? extends CardData > [ ] getCardDataClasses ( ) { return new Class [ ] { HIDCardData . class , ISO14443ACardData . class } ; }
public static < T > Set < T > newSet ( T . . . items ) { Set < T > set = new HashSet < T > ( ) ; Collections . addAll ( set , items ) ; return set ; }
public void onFileProviderAudioLoaded ( final List < String > fileAudioPaths ) { }
public void trackSocialButtonStart ( ) { mUnifiedLoginTracker . track ( Flow . LOGIN_SOCIAL , Step . START ) ; }
public void onSuccess ( Object data ) { Log . d ( "SWELL" , String . format ( "Paired : %s" , data . toString ( ) ) ) ; }
public XPositionMetric getXPositionMetric ( ) { return xPositionMetric ; }
public void attachView ( CardsContract . View view ) { this . view = view ; if ( view != null ) { view . setTitle ( "Krypto Cards" ) ; } loadCards ( ) ; }
public void onClick ( View v ) { itemView . getContext ( ) . startActivity ( NoteActivity . getStartIntent ( itemView . getContext ( ) , stringTitle ) ) ; }
public Bundle updateCredentials ( AccountAuthenticatorResponse response , Account account , String authTokenType , Bundle options ) throws NetworkErrorException { throw new UnsupportedOperationException ( ) ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { if ( key . equals ( PreferencesUtils . CURRENT_POMODORO_KEY ) ) { updateCurrentPomodoro ( ) ; } }
public void PesquisaFilme ( String tituloFilme ) { String nomefilme = tituloFilme . trim ( ) ; if ( TextUtils . isEmpty ( nomefilme ) ) { myView . nomeFilmeemBranco ( ) ; } else { filmeService . getFilmeArrayList ( this , nomefilme ) ; } }
public int getItemCount ( ) { return this . edges . length ; }
public FileAdapter ( Context context ) { super ( context , android . R . layout . simple_list_item_1 ) ; }
public DeleteItemInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , TodoListRepository repository , String uuid ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . uuid = uuid ; }
public void onCameraFail ( FailureReason reason ) { Toast . makeText ( this , R . string . quick_camera_unavailable , Toast . LENGTH_SHORT ) . show ( ) ; quickAttachmentDrawer . hide ( false ) ; quickAttachmentToggle . disable ( ) ; }
public void deleteAll ( ) { SQLiteDatabase db = App . dbHelper . getWritableDatabase ( ) ; db . delete ( PointsTable . TABLE_NAME_POINTS , null , null ) ; }
public void onResponse ( Call < FilesResponse > call , Response < FilesResponse > response ) { if ( response . isSuccess ( ) && listener != null ) { listener . execute ( ) ; } }
public JSONObject deepClone ( ) { JSONObject clone = new JSONObject ( ) ; deepClonedInto ( clone ) ; return clone ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putStringArrayList ( STATE_KEY_DIR_STACK , new ArrayList <> ( mDirStack ) ) ; outState . putStringArrayList ( STATE_KEY_INITIAL_PATH , mInitialPathToLoad ) ; mStateSaved = true ; }
private void onShowMonthView ( ) { if ( mMonthView . getVisibility ( ) == VISIBLE ) { return ; } if ( mDelegate . mViewChangeListener != null && isWeekView ) { mDelegate . mViewChangeListener . onViewChange ( true ) ; } }
public void testMinimalEncoder5 ( ) throws Exception { verifyMinimalEncoding ( "ABCDE" , "ALPHANUMERIC ( ABCDE ) , TERMINATOR ( ) " , null , false ) ; }
public void onClick ( View view ) { diag1 . dismiss ( ) ; }
private void showMediaDetailPagerFragment ( ) { setupViewForMediaDetails ( ) ; showFragment ( mediaDetailPagerFragment , MEDIA_DETAIL_PAGER_FRAGMENT_TAG ) ; }
public Subject getItem ( Subject item ) { return getItem ( item ) ; }
public boolean clipboardHasText ( ) { return mClipMgr . hasText ( ) ; }
public void onPause ( ) { super . onPause ( ) ; settingsProvider . getAdminSettings ( ) . unregisterOnSettingChangeListener ( this ) ; }
public ListeDesElementsEvaluation Func ( ) throws java . lang . Exception { return listeElementsEvaluation ( codeAccesUniversel , motPasse , pSigle , pGroupe , pSession ) ; }
public void UpdateDatasetJKO ( ArrayList < JKOLesson > listItems ) { JKOGradesListAdapter adapter = new JKOGradesListAdapter ( getContext ( ) , listItems ) ; list . setAdapter ( adapter ) ; }
public void onPreviewFrame ( byte [ ] bytes , Camera camera ) { Log . d ( getString ( R . string . app_name ) , "on Preview Frame" ) ; } }
public PushDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public String toString ( ) { return String . format ( "Point ( % . 1f , % . 1f ) " , x , y ) ; }
public void setUp ( ) { this . device = UiDevice . getInstance ( InstrumentationRegistry . getInstrumentation ( ) ) ; }
public NavDrawerHeaderView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initView ( context , attrs ) ; }
public void onTaskError ( Throwable error ) { FlyveLog . e ( error . getMessage ( ) ) ; presenter . showError ( error . getMessage ( ) ) ; }
public final void setDesktopEditListener ( @ Nullable OnDesktopEditListener v ) { this . _desktopEditListener = v ; }
public void setTextColor ( @ ColorInt int color ) { textColor ( color ) ; invalidate ( ) ; }
public I create ( Cursor queryResult ) { if ( ! queryResult . isAfterLast ( ) ) { return creator . create ( queryResult ) ; } else { return null ; } }
public void onPlay ( ) { super . onPlay ( ) ; playSong ( ) ; }
public GtasksMetadataServiceTestModule ( Context context ) { service = new GtasksTestPreferenceService ( new Preferences ( context , null , null ) ) ; }
public void OnFetchComplete ( Calendar startDate , List < Integer > steps ) { insertIntradayStepsToRepo ( startDate , steps ) ; }
public void onChanged ( ) { assertNotInLayoutOrScroll ( null ) ; mState . mStructureChanged = true ; setDataSetChangedAfterLayout ( ) ; if ( ! mAdapterHelper . hasPendingUpdates ( ) ) { requestLayout ( ) ; } }
public void onClick ( View v ) { mKiSeekBar . setProgress ( mKiSeekBar . getProgress ( ) + 10 ) ; }
public static com . coinomi . core . protos . Protos . Wallet parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public static String [ ] getSavedPaths ( Context context ) { return getPrefs ( context ) . getString ( "savedPaths" , "" ) . split ( " , " ) ; }
public void onSaveInstanceState ( Bundle outState ) { outState . putStringArray ( "lines" , mLines ) ; outState . putString ( "file_name" , mFileName ) ; }
public void setUploadKbit ( Long uploadKbit ) { this . uploadKbit = uploadKbit ; }
public void testNoMessageExpiration ( ) { mJsonData . get ( APIStatusDeserializer . MESSAGE_DICT ) . getAsJsonObject ( ) . remove ( APIStatusDeserializer . MESSAGE_EXPIRATION ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public void onFailure ( Call < NewsFeedResponse > call , Throwable t ) { Toast . makeText ( getContext ( ) , "Failed to fetch events ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public FooterItemHelper withOnDrawerItemClickListener ( OnDrawerItemClickListener onDrawerItemClickListener ) { mOnDrawerItemClickListener = onDrawerItemClickListener ; return this ; }
public void onImageClick ( int itemPos , int imagePos ) { openImageInPager ( pagerAdapter , itemPos , imagePos ) ; }
public String getJid ( ) { return mJid ; }
public void notice ( ) { super . notice ( ) ; yell ( Game . getVar ( R . string . Goo_Info3 ) ) ; }
public boolean getSearchBarStartsWith ( ) { return getBool ( R . string . pref_key__search_bar_startswith , true ) ; }
public void onProgressChanged ( SeekBar seekBar , int value , boolean b ) { setTextValue ( value ) ; saveValue ( value * 1000 ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { adapter . swapCursor ( null ) ; }
public void reset ( ) { numMen = Config . INITIAL_NUM_MEN ; numCollectedJewels = 0 ; lastX = 0 ; isHurt = false ; alreadyTouchingEnemy = false ; alreadyTouchingWall = false ; facingRight = true ; }
public void onExpired ( ) { super . onExpired ( ) ; Log . i ( TAG , "subscription expired" ) ; mActivity . nativeNearbySubscription ( - 1 , 3 ) ; }
public final TripItem addItem ( Item parItem ) { TripItem newTripItem = new TripItem ( this , parItem ) ; mListItem . add ( newTripItem ) ; return newTripItem ; }
public GameManager ( ) { this . _shop = new HandspinnerShop ( ) ; this . _player = new Player ( ) ; this . _handspinnerRotationAngleChanged = BehaviorSubject . create ( ) ; }
public LiveData < Event > getEvent ( long eventId ) { return destinationRepository . getEvent ( eventId ) ; }
public void onClick ( View v ) { TinyTimeTracker . checkAndRequestPermission ( ( AppCompatActivity ) getActivity ( ) , Manifest . permission . ACCESS_COARSE_LOCATION , 1 ) ; }
public int getItemCount ( ) { if ( mShowAll ) { return mItemPositions . size ( ) ; } else { return mUpdatedPositions . size ( ) ; } }
public TrackModel getCurrentSong ( ) throws RemoteException { return mService . get ( ) . getCurrentTrack ( ) ; }
public void run ( ) { notifyAllLocalMusicListenerSucceeded ( fileModels , requestKey ) ; }
public ChangeItemHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . item_changes , parent , false ) ; return new ChangeItemHolder ( view , context ) ; }
public String getDescription ( ) { return description ; }
public boolean isUsbConnected ( ) { return connection != null ; }
public static UserPostListingURL getSaved ( String username ) { return new UserPostListingURL ( Type . SAVED , username , null , null , null ) ; }
public void onPhotoTaken ( String photoPath ) { nextPage ( ) ; }
public void start ( ) { mLoaderManager . initLoader ( IOWe_QUERY , null , this ) ; }
public ConfSetSubdecks ( Deck deck , DeckConfig conf ) { this . deck = deck ; this . conf = conf ; }
public com . coinomi . core . protos . Protos . ScryptParameters getEncryptionParameters ( ) { return encryptionParameters_ ; }
public void onClick ( View view ) { finish ( ) ; }
public void onUserRemoved ( IUser user , String reason ) { if ( ! getService ( ) . isSynchronized ( ) ) return ; mChannelListAdapter . updateChannels ( ) ; mChannelListAdapter . notifyDataSetChanged ( ) ; }
public String defaultValue ( ) { return " - 1" ; }
public void start ( ) { if ( mFps != null ) { mFps . start ( ) ; } scheduleNextStep ( ) ; }
public List < Cookie > loadForRequest ( HttpUrl httpUrl ) { if ( null != cookies ) { return cookies ; } else { return new ArrayList < Cookie > ( ) ; } }
public void characterClick ( @ NonNull View heroView , @ NonNull CharacterVO characterVO ) { mView . openCharacter ( heroView , characterVO ) ; }
public void attachVisual ( ) { target . getSprite ( ) . add ( CharSprite . State . PARALYSED ) ; target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaParalysed ) ) ; }
private void onRecordingInitialized ( ) { if ( mOnRecordingInitialized != null ) { mOnRecordingInitialized . run ( ) ; } }
public int getColorError ( ) { return getAttributeValue ( R . attr . colorError ) ; }
public void onTransferStateChanged ( final Core lc , final Call call , final Call . State state ) { Lg . w ( "onTransferStateChanged number = " , new CallLogger ( call ) , " State = " , state ) ; }
public static Boolean isBuildOptionsMessage ( final String response ) { return BUILD_OPTIONS_PATTERN . matcher ( response ) . find ( ) ; }
public void run ( ) { if ( ConnectionUtils . isConnected ( HomeActivity . this ) ) { logout ( ) ; } }
private Completable checkInternet ( ) { return Completable . fromCallable ( ( ) -> { if ( ! networkChecker . isAvailableNet ( ) ) { throw new MessageException ( R . string . error_network ) ; } return null ; } ) ; }
private WritableHashSet ( String serializedData , long timestamp , String key ) { this . timestamp = timestamp ; this . key = key ; serialised = serializedData ; }
public void run ( ) { if ( ! mHaveReverted ) { mHaveReverted = true ; LinkHandler . onLinkClicked ( ImageViewActivity . this , mUrl . toString ( ) , true ) ; finish ( ) ; } }
public void onResume ( ) { paused = false ; if ( drawerState . isVisible ( ) ) quickCamera . onResume ( ) ; }
public Mode getMode ( ) { return mCurrentMode ; }
public String toString ( ) { return Localization . get ( "command . common . value . blockCoordinate . string" ) ; }
public void setOverallAlpha ( float alpha ) { for ( int i = 0 ; i < mChildren . size ( ) ; i ++ ) { RRGLRenderable entity = mChildren . get ( i ) ; entity . setOverallAlpha ( alpha ) ; } }
private boolean importSettings ( File backupDir ) { File preferences = StorageManager . getSharedPreferencesFile ( this ) ; File preferenceBackup = new File ( backupDir , preferences . getName ( ) ) ; return ( StorageManager . copyFile ( preferenceBackup , preferences ) ) ; }
public void onSurfaceTextureAvailable ( SurfaceTexture surface , int width , int height ) { initCamera ( isFrontface ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( FILESFRAGMENT_SAVED_INSTANCE_SEARCH_STRING , mSearchString ) ; }
public void onLocationChanged ( Location location ) { updateLatestLocation ( ) ; }
public void onClick ( View v ) { Log . d ( "onClick" , category . toString ( ) ) ; result . resolve ( category ) ; }
public ChildZoneBuilder setListOfCities ( List < String > listOfCities ) { mListOfCities = listOfCities ; return this ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equal ( list , ( ( GtasksFilter ) other ) . list ) ; }
public int getKey_text_offset_x ( ) { return key_text_offset_x ; }
private void bindListener ( View parentView , final int position , final VH holder ) { if ( mOnBindListener != null ) { mOnBindListener . onBind ( position , getItem ( position ) , holder ) ; } }
public Builder backgroundColorOfDisabledElements ( int backgroundColorOfDisabledElements ) { style . backgroundColorOfDisabledElements = backgroundColorOfDisabledElements ; return this ; }
public com . coinomi . core . protos . Protos . EncryptedData getEncryptedData ( ) { if ( encryptedDataBuilder_ == null ) { return encryptedData_ ; } else { return encryptedDataBuilder_ . getMessage ( ) ; } }
public static PosterViewState makeErrorState ( Filter filter ) { return new PosterViewState ( null , 0 , filter , false , true ) ; }
public void run ( ) { setGPSLocationUpdates ( false ) ; setGPSLocationUpdates ( true ) ; updateGPSLocationFrequency ( ) ; }
public void addNote ( ) { Intent intent = new Intent ( DeckPicker . this , NoteEditor . class ) ; intent . putExtra ( NoteEditor . EXTRA_CALLER , NoteEditor . CALLER_DECKPICKER ) ; startActivityForResultWithAnimation ( intent , ADD_NOTE , LEFT ) ; }
public void onFailure ( Call < Patient > call , Throwable t ) { ToastUtil . error ( t . getMessage ( ) ) ; }
public void onReceive ( Context c , Intent i ) { Log . i ( TAG , "WiFi Scan successfully completed" ) ; handler . removeCallbacks ( stopOnTimeout ) ; getWiFiNetworks ( ) ; }
public void onClick ( View view ) { validate ( ) ; }
public CharSequence getLux ( ) { return TextUtils . concat ( df . format ( this . lux ) , LUX ) ; }
public CacheDataSink ( Cache cache , long maxCacheFileSize ) { this ( cache , maxCacheFileSize , 0 ) ; }
public void onBackPressed ( ) { saveConfig ( ) ; mGame . popScreen ( ) ; }
public MyWalletEntry remove ( int position ) { return items . remove ( position ) ; }
public void download ( ) { downloadConfig ( ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeString ( hash ) ; }
public void onClick ( View v ) { if ( mClickListener != null ) mClickListener . onItemClick ( getAdapterPosition ( ) , mTrailerPaths . get ( getAdapterPosition ( ) ) ) ; }
public Mothership ( Bitmap shipBitmap , Bitmap btmHit , boolean isWorthEnemyDestroyedPoint ) { super ( shipBitmap , btmHit , EnemyType . MOTHERSHIP , isWorthEnemyDestroyedPoint ) ; }
public void clickingDungeonsAc ( View view ) { Intent intent = new Intent ( NavD . this , DungeonActivity . class ) ; startActivity ( intent ) ; }
public PhotoSizeEntity setX ( String x ) { this . x = x ; return this ; }
public ViewGroupIterator ( final ViewGroup parent ) { this . parent = parent ; }
public ProgressCountdownView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
private void doHandleFetchingSuccess ( Fragment fragment ) { try { this . doProcessFitnessChallenge ( fragment ) ; this . trySyncFitnessData ( fragment ) ; } catch ( ChallengeDoesNotExistsException e ) { Log . e ( LOG_TAG , "Fitness challenge does not exist" ) ; } }
public static String getMasteryTitleByAffinity ( String affinity ) { return Utils . getClassParam ( "Abilities" , affinity , Game . getVar ( R . string . Abilities_Default ) , false ) ; }
public void onIconClick ( NavigationAdapter . NavigationItem item ) { onItemClick ( item ) ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . suggestedLangpack ) { if ( listAdapter != null ) { fillLanguages ( ) ; listAdapter . notifyDataSetChanged ( ) ; } } }
private double distance ( double x , double y ) { if ( x > y ) { return x - y ; } else { return y - x ; } }
public synchronized < T > T max ( Class < ? > modelClass , String columnName , Class < T > columnType ) { return max ( BaseUtility . changeCase ( modelClass . getSimpleName ( ) ) , columnName , columnType ) ; }
private void launchWPStoriesCamera ( ) { Intent intent = new Intent ( ) . putExtra ( EXTRA_LAUNCH_WPSTORIES_CAMERA_REQUESTED , true ) ; setResult ( RESULT_OK , intent ) ; finish ( ) ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . AntiEntropy_Txt ) , weaponName ) ; }
public void setShuffleMode ( final int shufflemode ) throws RemoteException { mService . get ( ) . setShuffleMode ( shufflemode ) ; }
public void onHomeButton ( View v ) { Intent intent = new Intent ( this , MainActivity . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_CLEAR_TASK ) ; finish ( ) ; startActivity ( intent ) ; }
public void run ( ) { SendMessagesHelper . getInstance ( ) . sendMessage ( documentFinal , null , messageObject . messageOwner . attachPath , dialog_id , reply_to_msg , null , params ) ; }
public Date getChangedAt ( ) { return preview . getPreview ( ) . getChangedAt ( ) ; }
public void run ( ) { admissionPercentageItem . setVisible ( navDrawerClosing && testPC ) ; admissionCountersItem . setVisible ( navDrawerClosing && testAC ) ; }
public void onAnimationEnd ( Animator animation ) { onAnimationEndCheck ( false , true ) ; }
public int getY ( ) { return y ; }
public BookPartsInfo createFromParcel ( Parcel source ) { return new BookPartsInfo ( source ) ; }
public FastMarkReadMotionListener ( View fabMarkAllAsRead ) { this . fabMarkAllAsRead = fabMarkAllAsRead ; this . targetView = ( ImageView ) fabMarkAllAsRead . findViewById ( R . id . target_done_all ) ; }
public static void notifyDatabaseModification ( Context context ) { ContentResolver cr = context . getContentResolver ( ) ; cr . notifyChange ( Task . CONTENT_URI , null ) ; }
public Grid getSelectedGrid ( ) { return selectedGrid ; }
public GetContactNames ( OnContactLoadingComplete listener , ContentResolver cr ) { super ( ) ; this . listener = listener ; this . cr = cr ; }
public final int getDefaultStartPage ( ) { return Integer . parseInt ( mPreferences . getString ( DEFAULT_START_PAGE , " - 1" ) ) ; }
public SendRequest sendCoinsOffline ( NxtFamilyAddress address , Value amount ) throws WalletAccountException { return sendCoinsOffline ( address , amount , ( KeyParameter ) null ) ; }
private double sqinchTosqm ( double num ) { return num * 0 . 00064516 ; }
public void forSelectPhoto_whenDataIsNull_doesNothing ( ) { QRCodeActivityResultDelegate delegate = new QRCodeActivityResultDelegate ( context , settingsImporter , fakeQRDecoder , analytics , project ) ; delegate . onActivityResult ( SELECT_PHOTO , Activity . RESULT_OK , null ) ; }
public void removeOffsets ( ) { _offsets . clear ( ) ; }
private void addPipe ( ) { pipeList . add ( new Pipe ( measuredWidth + pipeWidth / 2 . 0f , base + ( measuredHeight - 2 * base ) * new Random ( ) . nextFloat ( ) ) ) ; }
private void drawView ( long delta ) { Canvas canvas = surfaceHolder . lockCanvas ( ) ; if ( canvas == null ) { return ; } drawView ( canvas , delta ) ; surfaceHolder . unlockCanvasAndPost ( canvas ) ; }
public void execute ( ) { isRunning = true ; executor . execute ( this : : runTask ) ; }
public int getStatType ( ) { return mStatType ; }
public void setWasShowingTranslation ( boolean wasShowingTranslation ) { mPerInstallationPrefs . edit ( ) . putBoolean ( Constants . PREF_WAS_SHOWING_TRANSLATION , wasShowingTranslation ) . apply ( ) ; }
public void onClick ( View v ) { PagerInspirations . this . finish ( ) ; }
public void hasTelephone ( ) throws Exception { Library empty = new Library ( ) ; assertFalse ( empty . hasTelephone ( ) ) ; Library full = generate ( Library . class ) ; assertTrue ( full . hasTelephone ( ) ) ; }
public void createTag_WhenEmptyName_NotifyViewError ( ) { tagCreatePresenter . createTag ( SampleBuilder . emptyText ) ; verify ( tagCreateView ) . onEmptyTagNameError ( ) ; verifyNoMoreInteractions ( createTagUseCase ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . decrease_indent ) ; }
public MmsDatabase ( Context context , SQLiteOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; this . jobManager = ApplicationContext . getInstance ( context ) . getJobManager ( ) ; }
public int getItemCount ( ) { return mValues . size ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mEnterMnemonicsPresenter . detachView ( ) ; }
public int getReg ( ) { return this . _reg ; }
public void setAnimationDuration ( int animationDuration ) { this . mAnimationDuration = animationDuration ; }
private void updateSwitchIcon ( ) { _switchButton . setImageResource ( Setup . appSettings ( ) . getSearchUseGrid ( ) ? R . drawable . ic_view_grid_white_24dp : R . drawable . ic_view_list_white_24dp ) ; }
public void onClick ( View view ) { attemptLogin ( ) ; }
public boolean isEnd ( ) { return mIsEnd ; }
public int compare ( Location_NoeC item1 , Location_NoeC item2 ) { return Double . valueOf ( item2 . getDistance ( ) ) . compareTo ( item1 . getDistance ( ) ) * ( - 1 ) ; }
public void onFailure ( @ NonNull Call < Results < Concept >> call , @ NonNull Throwable t ) { stopSelf ( ) ; }
public void goToCommunityControl ( int accountId , Community community , GroupSettings settings ) { PlaceFactory . getCommunityControlPlace ( accountId , community , settings ) . tryOpenWith ( getActivity ( ) ) ; }
public void updateComments ( ) { if ( ssReadComments != null ) { ssReadViewBridge . setComments ( ssReadComments . comments ) ; } }
public void clearView ( RecyclerView recyclerView , RecyclerView . ViewHolder viewHolder ) { final View foregroundView = ( ( StocktakeAdapter . MyViewHolder ) viewHolder ) . viewForeground ; getDefaultUIUtil ( ) . clearView ( foregroundView ) ; }
public boolean getAutoLaunchBubblePref ( ) { return preferences . getBoolean ( MyConstants . PREF_AUTO_LAUNCH_BUBBLE , true ) ; }
public void run ( ) { try { client . connect ( 5000 , host , port ) ; } catch ( IOException ex ) { ex . printStackTrace ( ) ; } }
public void multiplicationFewEnoughMedals ( ) { assertFewEnoughMedals ( GameType . MULTIPLICATION ) ; }
public static int getBitPrecision ( ) { return bitPrecision ; }
public String getEventName ( ) { return Analytics . getEvents ( ) . viewItem ( ) ; }
public void showDownloadedBooks ( List < BookDetail > books ) { downloadsAdapter . setBooks ( books ) ; downloadsAdapter . notifyDataSetChanged ( ) ; listDownloadsRecyclerView . setVisibility ( View . VISIBLE ) ; }
private int generateRequestCode ( Conversation conversation , int actionId ) { return generateRequestCode ( conversation . getUuid ( ) , actionId ) ; }
public void onClick ( View view ) { mListener . onClick ( view , getAdapterPosition ( ) , mDatabase ) ; }
public void onSaveInstanceState ( final Bundle savedInstanceState ) { if ( selectedAccount != null ) { savedInstanceState . putString ( STATE_SELECTED_ACCOUNT , selectedAccount . getJid ( ) . toBareJid ( ) . toString ( ) ) ; } super . onSaveInstanceState ( savedInstanceState ) ; }
public void setIngredientTypeId ( Long ingredientTypeId ) { this . ingredientTypeId = ingredientTypeId ; }
public Double getSunsetTime ( ) { return sunsetTime ; }
public void start ( ) { startTimestamp = System . currentTimeMillis ( ) ; }
public boolean isSelectedGymParnas ( int selectedGym ) { return selectedGym == GYM_PARNAS ; }
public int getNumPlayers ( ) { return numPlayers ; }
public void setCurrentUserName ( String currentUserName ) { this . currentUserName = currentUserName ; Log . i ( PROG , "****************** current - username : " + this . currentUserName ) ; }
public String getPrettyVersion ( Context context ) { return xml . getString ( "android : versionName" , context . getResources ( ) . getString ( R . string . prop_pretty_version_default ) ) ; }
public void notifyGroupAndChildrenItemsChanged ( int groupPosition ) { mAdapter . notifyGroupAndChildrenItemsChanged ( groupPosition , null ) ; }
private void setLogin ( boolean isLogin , String serverUrl ) { mOpenMRS . setUserLoggedOnline ( isLogin ) ; mOpenMRS . setLastLoginServerUrl ( serverUrl ) ; }
public NoteViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
public void onClick ( View v ) { showSubjectCreator ( ADD_SUBJECT_CODE ) ; }
public void run ( ) { progressButtonView . hideLoading ( ) ; Toast . makeText ( ViewWithWrongAttributesActivity . this , R . string . no_crash_response , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onStickersSettingsClick ( ) { if ( parentFragment != null ) { parentFragment . presentFragment ( new StickersActivity ( ) ) ; } }
public void onUserTalkStateUpdated ( IUser user ) { mChannelListAdapter . animateUserStateUpdate ( user , mChannelView ) ; }
public void onClick ( View v ) { if ( activityCallback . getFavouriteNodes ( ) . isEmpty ( ) ) activityCallback . onNodePrefs ( ) ; else findBestNode ( ) ; }
public void getExcise ( ) throws Exception { consumption = 100 ; assertEquals ( new BigDecimal ( "2 . 00" ) , sut . getExcise ( ) ) ; }
public CurrencyHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { LayoutInflater inflater = LayoutInflater . from ( parent . getContext ( ) ) ; return new CurrencyHolder ( inflater . inflate ( R . layout . currency_drop_item , parent , false ) ) ; }
public int getSleep ( ) { return sleep ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : drawer . openDrawer ( GravityCompat . START ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void setDelegate ( PhotoCropActivityDelegate delegate ) { this . delegate = delegate ; }
public void setOnGroupClickListener ( OnGroupClickListener onGroupClickListener ) { super . setOnGroupClickListener ( onGroupClickListener ) ; this . hasOnGroupClickListener = true ; }
public int getNewPerDay ( ) { return newPerDay ; }
public void onClick ( View v ) { searchBar . enableSearch ( ) ; }
public Object instantiateItem ( ViewGroup container , int position ) { Fragment fragment = ( Fragment ) super . instantiateItem ( container , position ) ; registeredFragments . put ( position , fragment ) ; return fragment ; }
public void showColorChooserCustomColors ( ) { new ColorChooserDialog . Builder ( this , R . string . colors ) . dynamicButtonColor ( false ) . preselect ( selectedColor ) . show ( ) ; }
public void onStop ( ) { super . onStop ( ) ; PtsdUtilities . dismissKeyboard ( getActivity ( ) ) ; }
private static void bindPreferenceSummaryToValue ( Preference preference ) { preference . setOnPreferenceChangeListener ( mSummaryUpdater ) ; mSummaryUpdater . onPreferenceChange ( preference , PreferenceManager . getDefaultSharedPreferences ( preference . getContext ( ) ) . getString ( preference . getKey ( ) , "" ) ) ; }
public int compare ( AppData t0 , AppData t1 ) { return t1 . getAppName ( ) . compareTo ( t0 . getAppName ( ) ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . view_holder_question_overview , parent , false ) ; return new QuestionsOverviewViewHolder ( itemView ) ; }
public DownloadsModel provideDownloadsMode ( ) { return new DownloadsDatabase ( mApp ) ; }
public final void addPageLeft ( ) { _desktop . getPages ( ) . add ( 0 , getItemLayout ( ) ) ; notifyDataSetChanged ( ) ; }
public int getCount ( ) { return dataSet . size ( ) ; }
public int getTogglePlayPauseOrder ( ) { if ( mStatus == SharedAudioPlayerUtils . AUDIO_PLAYER_STATUS_PAUSED ) { return SharedAudioPlayerUtils . AUDIO_PLAYER_ORDER_PLAY ; } else { return SharedAudioPlayerUtils . AUDIO_PLAYER_ORDER_PAUSE ; } }
public String getEnergyDensityUnit ( ) { String energy = settingsModel . getUnitName ( getEnergyUnit ( ) ) ; String amount = settingsModel . getUnitName ( getAmountUnit ( ) ) ; return energyDensityUnitOf ( energy , amount ) ; }
public final void addViewToGrid ( @ NotNull View view ) { addView ( view ) ; }
private void updateButtonBackDrawable ( ) { if ( buttonBackFunction == BUTTON_BACK_FUNCTION_SKIP ) { binding . miButtonBack . setImageResource ( R . drawable . mi_ic_skip ) ; } else { binding . miButtonBack . setImageResource ( R . drawable . mi_ic_previous ) ; } }
public BagelImageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public boolean onScroll ( MotionEvent e1 , MotionEvent e2 , float distanceX , float distanceY ) { if ( e1 . getY ( ) - e2 . getY ( ) > SWIPE_MIN_DISTANCE ) { showListaAttivita ( null ) ; } return false ; }
private DcChatlist . Item getConversationResult ( int position ) { if ( position < searchResult . getConversations ( ) . getCnt ( ) ) { return searchResult . getConversations ( ) . getItem ( position ) ; } return null ; }
public void showLoadFailed ( ) { showSnackBar ( R . string . load_articles_failed ) ; }
public ExtrapolatedXYSeries ( XYSeries series , XY first , XY last ) { this . series = series ; this . first = first ; this . last = last ; }
public DeathStroke ( ) { super ( Effects . get ( Effects . Type . DEATHSTROKE ) ) ; origin . set ( width / 2 , height / 2 ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_activity = ( FeedsActivity ) activity ; m_prefs = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) . getApplicationContext ( ) ) ; m_prefs . registerOnSharedPreferenceChangeListener ( this ) ; }
public void yes ( ) { context . startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( Constants . GP_MARKET + context . getPackageName ( ) ) ) ) ; PrefUtils . appRated ( ) ; dismiss ( ) ; }
public void onReceive ( Context context , Intent intent ) { if ( adapter != null ) adapter . notifyDataSetChanged ( ) ; }
public void onGamepadConnected ( ) { GamepadInputWatcher . this . onGamepadConnected ( ) ; }
public DeleteTodoListInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , PreviewRepository repository , String uuid ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . uuid = uuid ; }
public int getOutputEncoding ( ) { return C . ENCODING_PCM_16BIT ; }
public Attachment ( ) { this ( 0 , "" , "" , 0 ) ; }
public DependencyProvider ( Context ctx ) { super ( ctx ) ; Log . d ( TAG , "Dependency provider initialization . . . " ) ; dbOpenHelper = new DbOpenHelper ( ctx ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . pref_double_tap ) ; setHasOptionsMenu ( true ) ; }
public NodeId getNode ( int pos ) { return stack . peek ( ) . get ( pos ) ; }
public void testLoadingArabicLipsum ( ) throws IOException { onBookFile ( "lipsum/Arabic - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; peer . serializeToStream ( stream ) ; media . serializeToStream ( stream ) ; stream . writeInt64 ( random_id ) ; }
private void setText ( int resId , String str ) { if ( str != null ) { TextView tvTitle = ( TextView ) findViewById ( resId ) ; tvTitle . setText ( str ) ; } }
private static void storeType ( @ NonNull Context context , int type ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putInt ( KEY_TYPE , type ) . commit ( ) ; }
public List < MovieRatingEntity > getTopRatedMovies ( ) { return topRatedMovies ; }
public void onEntryClick ( DatabaseEntry entry ) { _listener . onEntryClick ( entry ) ; }
public static void enqueueWork ( Context context , Intent intent ) { enqueueWork ( context , RegistrationIntentService . class , REG_JOB_ID , intent ) ; }
public String getAuthorUrl ( ) { return StringUtils . notNullStr ( authorUrl ) ; }
public void setPressed ( boolean value ) { isPressed = value ; }
public CommunitiesInteractor ( INetworker networker , IStores repositories ) { this . networker = networker ; this . stores = repositories ; }
public void onReadyForSpeech ( Bundle params ) { mResultListener . IsListening ( VoiceResultListener . ListenState . LISTENING ) ; }
public void endConversation ( AbstractComposeFragment composer ) { getFragmentManager ( ) . beginTransaction ( ) . remove ( composer ) . commit ( ) ; }
public boolean hasScriptBytes ( ) { return ( ( bitField0_ & 0x00000002 ) == 0x00000002 ) ; }
public void processFinish ( String output , String url ) { ladeFaecher ( ) ; ProgressBar bar = findViewById ( R . id . progressBarInhalt ) ; bar . setVisibility ( View . GONE ) ; }
public Observable < TopicChange > getTopicChanges ( ) { return mTopicPreference . asObservable ( ) . scan ( TopicChange . create ( ) , TopicChange : : pushTopic ) . skip ( 2 ) ; }
private void updateFromCursor ( ) { this . mCursor . requery ( ) ; this . mCursor . moveToFirst ( ) ; updateFromCursorWithoutRequery ( ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( ! permissionChecker . canAccessLocation ( ) ) { dismiss ( ) ; } }
public static boolean isRootAvailable ( ) { return ( findBinary ( "su" ) ) . size ( ) > 0 ; }
public static ThreadChecker newSingleThreadChecker ( Thread thread ) { if ( thread == null ) { throw new IllegalArgumentException ( "thread should not be null" ) ; } return new SingleThreadChecker ( thread ) ; }
public double getLatitude ( ) { return this . _latitude ; }
public boolean onKey ( View view , int i , KeyEvent keyEvent ) { if ( i == KeyEvent . KEYCODE_ENTER ) { searchMarker ( btnSearch ) ; } return false ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . bitmap . setImageBitmap ( files . get ( position ) ) ; }
public TripItem ( @ NonNull Trip parTrip , Item parItem ) { super ( parItem ) ; mUUID = UUID . randomUUID ( ) ; setTripUUID ( parTrip . getUUID ( ) ) ; mAdditionDate = new Date ( ) ; }
public static Setup get ( ) { if ( setup == null ) { throw new RuntimeException ( "Setup has not been initialised ! " ) ; } return setup ; }
private PendingIntent createClockTickIntent ( Context context ) { Intent intent = new Intent ( mClockTickAction ) ; PendingIntent pendingIntent = PendingIntent . getBroadcast ( context , 0 , intent , 0 ) ; return pendingIntent ; }
public AboutBuilder addInstagramLink ( int user ) { return addInstagramLink ( context . getString ( user ) ) ; }
public void removeAnalyticsListener ( AnalyticsListener listener ) { analyticsCollector . removeListener ( listener ) ; }
public void onInput ( @ NonNull MaterialDialog dialog , @ NonNull CharSequence input ) { changeCity ( input . toString ( ) ) ; fab . show ( ) ; }
public Model setProgressConverter ( ProgressConverter progressConverter ) { this . progressConverter = progressConverter ; return this ; }
public AccountHeaderBuilder withActivity ( Activity activity ) { this . mActivity = activity ; return this ; }
public int compare ( StatItem lhs , StatItem rhs ) { return lhs . getCorrect ( ) - rhs . getCorrect ( ) ; }
public synchronized E dequeue ( ) { if ( queue . isEmpty ( ) ) return null ; final E result = queue . removeFirst ( ) ; set . remove ( result ) ; return result ; }
public void onNewIntent ( Intent intent ) { Common . treatAsNewTag ( intent , this ) ; if ( NfcAdapter . ACTION_TECH_DISCOVERED . equals ( intent . getAction ( ) ) ) { updateTagInfos ( Common . getTag ( ) ) ; } }
private View . OnClickListener onView = new View . OnClickListener ( ) { @ Override public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintView . class ) ) ; } } ;
public void onDismiss ( DialogInterface dialog ) { super . onDismiss ( dialog ) ; if ( onDismissListener != null ) { onDismissListener . onDismiss ( dialog ) ; } }
private void toggleHideMedia ( ) { statusMarkSensitive = ! statusMarkSensitive ; updateHideMediaToggleColor ( ) ; }
public DialogPreferenceMenuOrder ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; setDialogLayoutResource ( R . layout . activity_list_view ) ; setDialogIcon ( null ) ; }
public DevInfoRequestHandler ( WeakReference < Activity > weakActivity , WeakReference < Context > weakContext ) { super ( weakActivity , weakContext , null ) ; }
public void commitPickedSuggestion ( String pickedSuggestion ) { getCurrentInputConnection ( ) . commitText ( pickedSuggestion , 0 ) ; mComposing . setLength ( 0 ) ; updateInputForCandidate ( ) ; }
public void onResponse ( JSONObject response ) { setReport ( response ) ; }
public void run ( ) { fragment . startActivityForResult ( Intent . createChooser ( getIntentFragment ( ) , "My Header Example" ) , MagicalCamera . SELECT_PHOTO ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( getArguments ( ) != null ) { playListName = getArguments ( ) . getString ( "name" ) ; all = Main . songs . getSongsByPlaylist ( playListName ) ; } }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . uninstall_sketch ) ; }
public void onButtonPressed ( Intent intent , String password ) throws Exception { EncryptDecryptUtils . startEncryption ( context , rowItem . generateBaseFile ( ) . getPath ( ) , password , intent ) ; }
private void testChangeLightFunction ( ) { testChangeBackLightToMin ( ) ; testChangeFrontLightToMax ( ) ; testChangeBackLightToMax ( ) ; testChangeFrontLightToMin ( ) ; }
public int getCount ( ) { return mTrajectorySpanList . size ( ) ; }
private void resetPlayer ( ) { if ( player != null ) { player . stop ( ) ; } }
public ScheduleOfGroupRequest ( int groupId ) { super ( GroupSchedule . class , ScheduleApi . class ) ; this . groupId = groupId ; }
public LanguagePreference ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; loadLangs ( context , attrs ) ; }
public boolean isLockOrientation ( ) { return mPrefs . getBoolean ( Constants . PREF_LOCK_ORIENTATION , false ) ; }
public Long readKey ( Cursor cursor , int offset ) { return cursor . getLong ( offset ) ; }
public final void onCreate ( @ Nullable final Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Bundle args = getArguments ( ) ; if ( args != null ) { mItem = ( Item ) args . getSerializable ( BUNDLE_PAR_ITEM ) ; } }
public void testDoneButtonTypeface ( ) { builder . doneButtonTypefacePath ( "doneButton" ) ; assertEquals ( "doneButton" , builder . build ( ) . getDoneButtonTypefacePath ( ) ) ; }
public void onClick ( View v ) { new FetchDeepData ( ) . execute ( ) ; }
public CharSequence getBarPressure ( ) { return TextUtils . concat ( df . format ( this . barPressure ) , H_PA ) ; }
public void drop ( ) { scale . set ( 1 ) ; am = 1 ; }
public void onRequestPermissionsResult ( int requestCode , @ NonNull String [ ] permissions , @ NonNull int [ ] grantResults ) { PermissionsManager . getInstance ( ) . notifyPermissionsChange ( permissions ) ; super . onRequestPermissionsResult ( requestCode , permissions , grantResults ) ; }
public void detectsSearch ( ) { assertThat ( getType ( formatURL ( "https : is ( RedditLinkType . SEARCH ) ) ; }
public void onReload ( ) { setSoftKeyboardState ( false , true ) ; setTerminalCursorBlinkerState ( true ) ; }
public void setUp ( ) throws Exception { MockitoAnnotations . initMocks ( this ) ; }
public GoalFeed ( ) { guid = "" ; wager = 0 ; goalCompleteResult = Goal . GoalCompleteResult . None ; createdUsername = "" ; upvoteCount = 0 ; hasVoted = false ; }
public static String getAthleteName ( ) { return cSharedPreferences . getString ( SP_ATHLETHE_NAME , DEFAULT_ATHLETE_NAME ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; addPreferencesFromResource ( R . xml . main_preferences ) ; }
private DemoViewHolder ( View view ) { super ( view ) ; textView = ( TextView ) view . findViewById ( R . id . textView ) ; }
public void onMinus ( Selector s ) { Gizmo . isometricModeShift -= 1 ; s . setText ( Utils . format ( "Shift : %2 . 1f" , Gizmo . isometricModeShift ) ) ; }
public int compareTo ( @ NonNull SozlikDbModel o ) { return this . getNormalizedWord ( ) . compareTo ( o . getNormalizedWord ( ) ) ; }
public EquipableItem getSecondaryWeapon ( ) { EquipableItem leftItem = getBelongings ( ) . getItemFromSlot ( Belongings . Slot . LEFT_HAND ) ; if ( leftItem . goodForMelee ( ) ) { return leftItem ; } return ItemsList . DUMMY ; }
public void doesNotTranslateOtherValues ( ) { initPrefs ( prefs , "key" , "otherValue" ) ; translateValue ( "value" ) . toValue ( "newValue" ) . forKey ( "key" ) . apply ( prefs ) ; assertPrefs ( prefs , "key" , "otherValue" ) ; }
public Long getGkz ( ) { return gkz ; }
public ModelType . MODELS getType ( ) { return type ; }
public Promise < Void > pause ( ) { return playlistPlayer . pause ( ) ; }
public void run ( ) { handleExpressions ( ClientPaths . ACTUATE , null , id ) ; }
public void execute ( MenuListActivity mainActivity ) { Intent intent = new Intent ( mainActivity , CsvImportActivity . class ) ; mainActivity . startActivityForResult ( intent , ACTIVITY_CSV_IMPORT ) ; }
public void onChanged ( ) { super . onChanged ( ) ; showEmptyMessageIfEmpty ( ) ; }
private static void sendIntent ( Intent i , Context context ) { getBroadcasManager ( context ) . sendBroadcast ( i ) ; }
public boolean getBoolean ( @ NonNull String key ) throws ItemNotFoundException { return false ; }
public void onLoaderReset ( Loader < Cursor > loader ) { listAdapter . swapCursor ( null ) ; }
public boolean handles ( DecryptableUri decryptableUri ) { return true ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . berviantoleopratama . rgbcounter" , appContext . getPackageName ( ) ) ; }
public boolean setException ( Throwable throwable ) { synchronized ( this ) { if ( completed || canceled ) return false ; this . exception = throwable ; this . completed = true ; } notifyAllListeners ( ) ; return true ; }
public PadLandDataActivity . PadData getChild ( int groupPosition , int childPosition ) { long id = getChildId ( groupPosition , childPosition ) ; return padDatas . get ( id ) ; }
public void onPrepared ( MediaPlayer mp ) { serviceState = ServiceState . Playing ; setMediaSessionMetaData ( ) ; player . start ( ) ; mMediaSessionCompat . setActive ( true ) ; mDelayedStopHandler . removeCallbacksAndMessages ( null ) ; setMediaPlaybackState ( PlaybackStateCompat . STATE_PLAYING ) ; notifyCurrentSong ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_main , menu ) ; configureSearchView ( menu ) ; return true ; }
public int getMinimumLoggingInterval ( ) { return Utilities . parseIntWithDefault ( prefs . getString ( PreferenceNames . MINIMUM_INTERVAL , "60" ) , 60 ) ; }
public Status getStatus ( ) { return status ; }
public LiveData < EducationEntity > getObservableEducation ( ) { return mObservableEducation ; }
public void onCreate ( ) { Dialogs . create ( getContext ( ) , this : : createFolder ) ; }
public void setRedeemed ( boolean redeemed ) { notificationRedeemed = true ; }
public void run ( ) { goToFragment ( item . getItemId ( ) ) ; }
public int getItemViewType ( int position ) { return ( mMenuItems . get ( position ) . getType ( ) == ReaderPostCardActionType . SPACER_NO_ACTION ) ? 0 : 1 ; }
public void switchCamera ( ) { if ( cameraSession != null ) { CameraController . getInstance ( ) . close ( cameraSession , null ) ; cameraSession = null ; } initied = false ; isFrontface = ! isFrontface ; initCamera ( isFrontface ) ; }
public boolean onBackPressed ( ) { if ( canGoBack ( ) ) { stopLoading ( ) ; goBack ( ) ; return false ; } else { return true ; } }
public void setBitmap ( Bitmap image ) { mBitmap = image ; }
public long removeTripExpenseSharesByTripId ( String tripId ) { return delete ( DatabaseConstants . EXPENSE_SHARE_TABLE , EXPENSE_SHARE_TRIP_ID + " = ?" , new String [ ] { tripId } ) ; }
public void onFinish ( ) { Round . generate ( getContext ( ) ) ; ( ( Player ) getParent ( ) ) . start ( ) ; }
private boolean operationNotAllowed ( ) { return swig ( ) == null || stopRequested ; }
public void setGrade ( int grade ) { this . grade = grade ; }
public ItemBuilder locked ( boolean locked ) { this . locked = locked ; return this ; }
public void start ( ) { stop ( ) ; go = true ; mThread = new Thread ( new MyRunnable ( ) ) ; mEventScheduler = new MidiEventScheduler ( ) ; mThread . start ( ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { JobList . this . leaveTemplate ( ) ; }
public static ReplyFragment newInstance ( String post ) { ReplyFragment fragment = new ReplyFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( ARG_POST , post ) ; fragment . setArguments ( args ) ; return fragment ; }
public static boolean isVoiceWebDocument ( TLRPC . TL_webDocument webDocument ) { return webDocument != null && webDocument . mime_type . equals ( "audio/ogg" ) ; }
public String toString ( ) { return "symbold" ; }
public static com . coinomi . core . protos . Protos . EncryptedData parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void onResponse ( Player player , Request request , Message message ) { parseMessage ( "albums_loop" , message ) ; }
public void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; if ( mDrawPending || mBuffer == null || mKeyboardChanged ) { onBufferDraw ( ) ; } canvas . drawBitmap ( mBuffer , 0 , 0 , null ) ; }
private void initializeClipListAdapter ( ) { clipListAdapter = new ClipListAdapter ( this ) ; rvClipList . setAdapter ( clipListAdapter ) ; }
private static byte [ ] calculatePBKDF2Hash ( String pass , byte [ ] salt ) throws NoSuchAlgorithmException , InvalidKeySpecException { return PBKDF2 . encrypt ( pass , salt , CRYPT_CHECK_ROUNDS , CRYPT_CHECK_HASH_LEN ) ; }
public int hashCode ( ) { return Objects . hash ( type , period , counter , digits , algorithm , secret , label ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersGridView , EmojiView . this . getMeasuredHeight ( ) , stickerPreviewViewerDelegate ) ; return super . onInterceptTouchEvent ( event ) || result ; }
private void performAction ( View v ) { if ( fabExpanded ) { fab . toggle ( ) ; fabExpanded = false ; } else { onFabItemClickedListener . OnFabItemClick ( v . getId ( ) ) ; } }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeValue ( page ) ; dest . writeList ( searchItems ) ; dest . writeValue ( totalResults ) ; dest . writeValue ( totalPages ) ; }
public void setRefreshController ( RefreshController refreshController ) { mRefreshController = refreshController ; }
public void onClick ( View v ) { mPlaybackController . skip ( 30000 ) ; }
public void setAutoScaleEnabled ( boolean isAutoScaleEnabled ) { mIsAutoScaleEnabled = isAutoScaleEnabled ; }
public void onClick ( View klikPåHvad ) { if ( klikPåHvad == knap ) { minModel . startBeregning ( 500 , 50 ) ; } else if ( klikPåHvad == annullerknap ) { minModel . annullereret = true ; } }
public boolean winTest ( ) { for ( int i = 0 ; i <= getLastTableauId ( ) ; i ++ ) if ( ! stacks [ i ] . isEmpty ( ) ) return false ; return true ; }
public void setData_callsValueChangeListener ( ) { BarcodeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setBinaryData ( "blah" ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void run ( ) { cell . setState ( 0 , false ) ; AlertsCreator . processError ( error , parentFragment , req , true ) ; }
public com . coinomi . core . protos . Protos . EncryptedData getEncryptedData ( ) { return encryptedData_ ; }
public final void onReadingStarted ( int windowIndex , MediaPeriodId mediaPeriodId ) { mediaPeriodQueueTracker . onReadingStarted ( windowIndex , mediaPeriodId ) ; EventTime eventTime = generateEventTime ( windowIndex , mediaPeriodId ) ; for ( AnalyticsListener listener : listeners ) { listener . onReadingStarted ( eventTime ) ; } }
public void run ( ) { mScanning = false ; mBluetoothAdapter . stopLeScan ( mLeScanCallback ) ; invalidateOptionsMenu ( ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; inflater . inflate ( R . menu . submit_done_menu , menu ) ; }
public void testBadAndroidSettings ( ) { mJsonData . addProperty ( APIStatusDeserializer . ANDROID_SETTINGS_TAG , "hello" ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { _menu = menu ; getMenuInflater ( ) . inflate ( R . menu . menu_scanner , menu ) ; updateCameraIcon ( ) ; return true ; }
public void onBackPressed ( ) { Intent intent = new Intent ( this , DecidePlayOptionsNormalActivity . class ) ; startActivity ( intent ) ; finish ( ) ; }
public void deleteUnusedVideo ( final int video_method , final Uri uri , final String filename ) { }
public void onCameraStarted ( boolean b , Throwable throwable ) { if ( throwable != null ) { Toast . makeText ( this , "Failed to start camera . " , Toast . LENGTH_LONG ) . show ( ) ; } }
public CalendarViewHolder ( View itemView ) { super ( itemView ) ; this . time = itemView . findViewById ( R . id . cal_time ) ; this . event = itemView . findViewById ( R . id . cal_event ) ; }
public EpisodeInfo getCurrentPodInfo ( ) { if ( null != currentPlaylist_ ) { return currentPlaying_ ; } return null ; }
public void onSessionStarted ( ) { initSession ( ) ; }
public static String generateFilename ( String prifix ) { return prifix + "_" + String . valueOf ( ( ( new Date ( ) . getTime ( ) ) / ( 1000000000 ) ) /1000 ) ; }
public void onSuccess ( ) { subscriber . onSuccess ( true ) ; Log . d ( LogTag . LOG_PLAYER_SERVICE , "Set Spotify Player custom playback bitrate successfully" ) ; sendPlayingStatusBroadcast ( false ) ; mediaSessionHandler . setSessionActive ( ) ; }
public void onAnimationStart ( Object animation ) { editorDoneLayout . setVisibility ( View . VISIBLE ) ; photoCropView . setVisibility ( View . VISIBLE ) ; }
public boolean isResumeSyncable ( ) { try { return ! VersionSupport . NICS_POLLED_WITH_VMS . isSupported ( environmentStore . getVersion ( account ) ) ; } catch ( AccountDeletedException ignore ) { return false ; } }
public List < T > getValues ( ) { return mValues ; }
public static String readRawFile ( String basename ) throws FileNotFoundException { return readFile ( getRawFile ( basename ) ) ; }
public void setUp ( ) { super . setUp ( ) ; presenter = new FormEntryPatientListPresenter ( view , patientDAO ) ; PowerMockito . mockStatic ( StringUtils . class ) ; patientList = new ArrayList < Patient > ( ) ; }
public void setExpanded ( boolean expanded ) { this . expanded = expanded ; }
public void setChange_index ( int change_index ) { this . _change_index = change_index ; }
public void setDatePublished ( String dateStr ) { this . datePublished = StringUtils . notNullStr ( dateStr ) ; }
public String id ( ) { return "expector" ; }
public AnimCheckBox ( Context context ) { this ( context , ( AttributeSet ) null ) ; }
private double sqyardToacre ( double num ) { return num * 0 . 0002066116 ; }
public void cancelLongPress ( ) { super . cancelLongPress ( ) ; answer . cancelLongPress ( ) ; launchIntentButton . cancelLongPress ( ) ; }
public boolean onSwipeLeft ( int i , long l , double v ) { return callback . onDrawerGesture ( desktop , Type . SwipeLeft ) ; }
public void setData ( LineData data ) { mLineData = data ; init ( ) ; }
public FigureType getRotatedFigure ( ) { return null ; }
public void writeToParcel ( Parcel parcel , int flags ) { parcel . writeInt ( getId ( ) ) ; parcel . writeString ( getUri ( ) . toString ( ) ) ; parcel . writeString ( getMime_type ( ) ) ; }
public int getConfigType ( ) { return ConfigRecyclerViewAdapter . TYPE_PREVIEW_AND_COMPLICATIONS_CONFIG ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mRecyclerView . setAdapter ( getTagAdapter ( ) ) ; getTagAdapter ( ) . refresh ( ) ; }
private boolean isNewLoginEpilogueScreenEnabled ( ) { return ! mBuildConfigWrapper . isJetpackApp ( ) && ! mShowAndReturn ; }
public void onAnimationUpdate ( ValueAnimatorCompat animation ) { setFraction ( animation . getAnimatedFraction ( ) ) ; }
public long getMillisTillNextRefresh ( ) { return TotpInfo . getMillisTillNextRotation ( _adapter . getUniformPeriod ( ) ) ; }
public void notifyChildrenOfGroupItemChanged ( int groupPosition , Object payload ) { mAdapter . notifyChildrenOfGroupItemChanged ( groupPosition , payload ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( CRUMBS , breadCrumbs . getStateWrapper ( ) ) ; }
public UserItem ( ) { this . uid = "" ; email = "" ; photoUrl = "" ; name = "" ; desc = "" ; admin = false ; }
public int getRendererCount ( ) { return player . getRendererCount ( ) ; }
public void onStorySaveResult ( String storyFirstMediaId , boolean success ) { if ( ! success ) { mFailedMediaIds . add ( storyFirstMediaId ) ; mUploadingMediaProgressMax . remove ( storyFirstMediaId ) ; } getGutenbergContainerFragment ( ) . onStorySaveResult ( storyFirstMediaId , success ) ; }
public void onClick ( View v ) { new DatePickerDialog ( getContext ( ) , canopyDate , calendar . get ( Calendar . YEAR ) , calendar . get ( Calendar . MONTH ) , calendar . get ( Calendar . DAY_OF_MONTH ) ) . show ( ) ; }
public static int i ( Throwable ex ) { return android . util . Log . w ( TAG , ex + "\n" + android . util . Log . getStackTraceString ( ex ) ) ; }
public WindParticle ( ) { lifespan = Random . Float ( 1 , 2 ) ; scale . set ( size = Random . Float ( 3 ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; view . destroy ( ) ; view = null ; stopSelf ( ) ; }
public static void resolveSensor ( SensorEvent event , List < SensorData > sensorDataList ) { sensorDataList . add ( new SensorData ( event . sensor . getType ( ) , resolveSensor ( event ) , SensorData . getTime ( ) ) ) ; }
private final HandleEmptyCardListener handlerEmptyCardListener ( ) { return new HandleEmptyCardListener ( this ) ; }
public String getAlbumName ( ) throws RemoteException { return mService . get ( ) . getAlbumName ( ) ; }
public boolean isNeeded ( Comment model ) { return ! model . body . isEmpty ( ) ; }
private void scheduleWaitingTone ( ) { this . currentTone = JingleConnectionManager . SCHEDULED_EXECUTOR_SERVICE . scheduleAtFixedRate ( ( ) -> { this . toneGenerator . startTone ( ToneGenerator . TONE_CDMA_DIAL_TONE_LITE , 750 ) ; } , 0 , 3 , TimeUnit . SECONDS ) ; }
public static Test suite ( ) { return new TestSuiteBuilder ( AllTests . class ) . includePackages ( "com . android . keepass . tests . output" ) . build ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . filter : startFilterActivity ( ) ; return true ; default : return super . onOptionsItemSelected ( item ) ; } }
public Cursor getAllAttributes ( ) { return db ( ) . query ( ATTRIBUTES_TABLE , AttributeColumns . NORMAL_PROJECTION , AttributeColumns . ID + " > 0" , null , null , null , AttributeColumns . NAME ) ; }
private final BroadcastReceiver deviceUpdateBroadcastReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( adapter != null ) adapter . notifyDataSetChanged ( ) ; } } ;
public boolean layoutDependsOn ( CoordinatorLayout parent , View child , View dependency ) { return dependency instanceof Snackbar . SnackbarLayout ; }
public long getQueueDurationMillis ( int position ) { long duration = 0 ; for ( int i = position + 1 ; i < queue . size ( ) ; i ++ ) duration += queue . get ( i ) . song . duration ; return duration ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . DIVIDE ) ; }
public String getAccess ( ) { return access ; }
public String toString ( ) { return "Filter { " + "after = " + after + " , before = " + before + " , associations = " + associations + " , term = '" + term + '\'' + ' } ' ; }
public static void setExportToCSV ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_EXPORT_TO_CSV , value ) . commit ( ) ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { addPreferencesFromResource ( R . xml . preferences_chameleon_mini ) ; }
public int clampViewPositionVertical ( View child , int top , int dy ) { return MathUtils . constrain ( top , mMinOffset , mHideable ? mParentHeight : mMaxOffset ) ; }
public void attachVisual ( ) { target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaCrippled ) ) ; }
public void bindService ( Context context ) { Intent intent = new Intent ( context , BtPusherService . class ) ; mBound = context . bindService ( intent , mServiceConnection , Activity . BIND_AUTO_CREATE ) ; }
private void setSelection ( boolean selected ) { if ( selected ) { communityBackground . setBackgroundResource ( CommunityUtils . getFilledBackground ( community . getCommunityId ( ) ) ) ; } else { communityBackground . setBackgroundResource ( CommunityUtils . getBorder ( community . getCommunityId ( ) ) ) ; } }
public static void addNote ( Note note ) { adapter . insert ( note , 0 ) ; saveChanges ( adapter ) ; }
private double offset ( ) { return robot . getSensor ( ) . getGyro ( "imu" ) . getAngularOrientation ( AxesReference . INTRINSIC , AxesOrder . ZYX , AngleUnit . DEGREES ) . firstAngle ; }
public static int get_random_positive_int ( ) { Random random = new Random ( ) ; return Math . abs ( random . nextInt ( ) ) ; }
public Devour ( ) { super ( Effects . get ( Effects . Type . DEVOUR ) ) ; origin . set ( width / 2 , height / 2 ) ; }
public void setAztecImageLoader ( Html . ImageGetter imageLoader ) { this . aztecImageLoader = imageLoader ; }
public int getItemPosition ( @ NonNull Object object ) { return - 2 ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( mArtistName ) ; dest . writeLong ( mArtistID ) ; dest . writeString ( mMBID ) ; dest . writeByte ( ( byte ) ( mImageFetching ? 1 : 0 ) ) ; }
public ValueStringArray ( long [ ] value , String [ ] string ) { this . values = value ; this . strings = string ; this . size = Math . min ( values . length , string . length ) ; }
public void setMessageData ( String messageData ) { this . messageData = messageData ; }
public void onRecyclerViewListSwipeUpdate ( ) { updateArticles ( true , Updater . UpdateType . FAST ) ; }
public String toJson ( @ NonNull MessageBase message ) throws IOException { return encryptString ( toJsonPlain ( message ) ) ; }
private BroadcastReceiver refreshEventListReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { eventListFragment . refreshEventList ( ) ; } } ;
public ParseAppsAdapter ( @ NonNull Context context , @ NonNull List < ParseServerConfig > objects ) { super ( context , R . layout . card_list_item , objects ) ; }
private void askSystemDownloadsPermission ( Runnable cb ) { askSystemDownloadsPermission ( cb , false ) ; }
private String getHighlightColor ( ) { return mColorHelper . getColorResourceAsHexCode ( R . color . color_primary ) ; }
public void readEntity ( Cursor cursor , Folder entity , int offset ) { entity . setId ( cursor . getLong ( offset ) ) ; entity . setLabel ( cursor . getString ( offset + 1 ) ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . SINH ) ; }
public boolean isNull ( ) { return type == Type . NULL ; }
public Callback getCallback ( ) { return mCallback ; }
public void onCompletion ( ) { super . onCompletion ( ) ; FollowersUpdateRequestHandler . this . onCompletion ( ) ; }
public static boolean hasValidLocation ( ) { return ( getCurrentLocationInfo ( ) != null && getCurrentLatitude ( ) != 0 && getCurrentLongitude ( ) != 0 ) ; }
public void updateSelectedItems ( List < Selection > items ) { ODKView odkView = getCurrentViewIfODKView ( ) ; if ( odkView != null ) { QuestionWidget widgetGettingNewValue = getWidgetWaitingForBinaryData ( ) ; setBinaryWidgetData ( items ) ; widgetValueChanged ( widgetGettingNewValue ) ; } }
public void onCommentClicked ( Post post ) { Bundle b = new Bundle ( ) ; b . putParcelable ( Constants . EXTRA_POST , post ) ; postModel . increasePostViews ( post , this ) ; view . startCommentsActivity ( b ) ; }
public Photos getPhotosResponse ( ) { return photos ; }
public InboxAdapter ( Context mContext , InboxMessages dataSet , RecyclerView listView ) { this . mContext = mContext ; this . listView = listView ; this . dataSet = dataSet . posts ; boolean isSame = false ; }
public boolean isOnSpeaker ( ) { return getMediaManager ( ) . isCallOnSpeaker ( ) ; }
private ArrayList < HashMap < String , String >> getCards ( ) { if ( mCards == null ) { mCards = new ArrayList <> ( ) ; } return mCards ; }
public Loader < Artist > onCreateLoader ( int id , Bundle args ) { return new AsyncArtistDataLoader ( this , args . getInt ( EXTRA_ARTIST_ID ) ) ; }
public void onStart ( ) { super . onStart ( ) ; v = getView ( ) ; ad . requestLoadNativeAd ( ad . getNativeAdView ( R . id . adView_about , a ) ) ; setPresetInfo ( ) ; }
private void showAddPointDialog ( ) { AddPointWithRadiusDialogFragment dialog = new AddPointWithRadiusDialogFragment ( ) ; dialog . show ( this . getFragmentManager ( ) , "AddPointWithRadiusDialogFragment" ) ; }
public long getValueDenom ( ) { return mValueDenom ; }
public boolean isIgnoreSpaceAfterQueryActivated ( ) { return mSharedPreferences . getBoolean ( KEY_IGNORESPACEAFTERQUERY , false ) ; }
private void closeDrawer ( ) { if ( drawerLayout == null ) { return ; } drawerLayout . closeDrawer ( menuFrame ) ; }
public com . google . protobuf . AnyOrBuilder getAccountOrBuilder ( ) { if ( accountBuilder_ != null ) { return accountBuilder_ . getMessageOrBuilder ( ) ; } else { return account_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : account_ ; } }
private void setAdapter ( JSONArray languages ) { LanguageAdapter languageAdapter = new LanguageAdapter ( accessToken , this , filterLanguages ( languages ) , getOnClickCallback ( ) ) ; recyclerView . setAdapter ( languageAdapter ) ; }
public boolean isConnected ( ) { return cli . isConnected ( ) ; }
public void backup ( ) { }
public void onClick ( View v ) { mViewModel . load ( ) ; }
public String getFormattedValue ( float value ) { int index = Math . round ( value ) ; if ( index < 0 || index >= mValueCount || index != ( int ) value ) return "" ; return mValues [ index ] ; }
public String getAddressString ( ) { String addr = null ; if ( StringUtils . notNull ( address1 ) ) addr += address1 + "\n" ; if ( StringUtils . notNull ( address2 ) ) addr += address2 ; return addr ; }
public void onBindViewHolder ( @ NonNull DraftListItemViewHolder holder , int position ) { holder . bind ( draftModels . get ( position ) ) ; }
public ArrayList < int [ ] > getNReviews ( ) { return nReviews ; }
public DrawerMenuItem drawerMenuItem ( ) { return DrawerMenuItem . OVERVIEW ; }
public AboutBuilder addHelpAction ( Intent intent ) { return addHelpAction ( util . clickIntent ( intent ) ) ; }
public static Call < WebApi . Result > addComment ( String token , String content , String captcha , int sid ) { return replyComment ( token , content , captcha , sid , 0 ) ; }
public List < Podcast > getAuthRequiredList ( ) { return authRequired_ ; }
public static void openBodyFragment ( Body body , FragmentActivity fragmentActivity ) { updateFragment ( getBodyFragment ( body ) , fragmentActivity ) ; }
public String getSearchPhrase ( ) { return localizationHelper . formatPlaceToSearch ( this ) ; }
public PresenterKeeper < MvpPresenter > providePresenterKeeper ( ) { return new PresenterKeeper <> ( ) ; }
public void setCorreo ( String correo ) { this . correo = correo ; }
public void onEvent ( OnLogEntryChanged event ) { if ( currentTracker != null && currentTracker . id == event . entry . tracker_id ) { refresh ( event . entry ) ; } }
private void initConfiguration ( ) { Log . d ( TAG , "initConfiguration" ) ; setTileSource ( PUBLIC_TRANSPORT ) ; setBuiltInZoomControls ( true ) ; setMultiTouchControls ( true ) ; setTilesScaledToDpi ( true ) ; }
public static SaveProfileAlert getInstance ( String parent ) { SaveProfileAlert saveProfileAlert = new SaveProfileAlert ( ) ; Bundle bundleSave = new Bundle ( ) ; bundleSave . putString ( CONFIG_PATH_KEY , parent ) ; saveProfileAlert . setArguments ( bundleSave ) ; return saveProfileAlert ; }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . OPERATORS ; }
public boolean focusIsVideo ( ) { if ( camera_controller != null ) { return camera_controller . focusIsVideo ( ) ; } return false ; }
public final boolean isBaseWord ( String p , String s ) { String [ ] pkg = _bases . get ( p ) ; for ( String n : pkg ) { if ( n . equals ( s ) ) return true ; } return false ; }
public void onEvent ( Short msg ) { if ( msg == EventBusMSG . UPDATE_FIX ) { Update ( ) ; } }
public void onRetry ( ) { view . showProgress ( R . string . getting_user_info ) ; usersRepository . getUserById ( userID , this ) ; }
public double getReadableValue ( ) { return value / ( double ) getPowerOf1024 ( getExponentOfPower1024 ( value ) ) ; }
public Completable searchStations ( ) { return checkInternet ( ) . andThen ( search ( false ) ) . toCompletable ( ) ; }
public void hideProgress ( ) { pbProgress . setVisibility ( View . INVISIBLE ) ; }
public void setBlock ( TLRPC . TL_pageBlockBlockquote block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
public void die ( NamedEntityKind cause ) { say ( StringsManager . getVar ( R . string . RatKing_Died ) ) ; super . die ( cause ) ; }
public static TIME_LIMIT getEnumFromValue ( int value ) { switch ( value ) { case 0 : return TIME_LIMIT . SECONDS_3 ; case 1 : return TIME_LIMIT . SECONDS_10 ; default : return TIME_LIMIT . INFINITE ; } }
private void clear ( ) { calendarName = null ; calendarId = null ; eventUri = null ; refreshDisplayView ( ) ; }
public void sendMessage ( String message ) { lstMessage . add ( message ) ; }
private void getFacility ( String key ) { mFacility = mRealm . where ( Facility . class ) . equalTo ( "mName" , key ) . findFirst ( ) ; }
public void onImagePreviewRequested ( String mediaSource ) { MediaPreviewActivity . showPreview ( this , null , mediaSource ) ; }
public BaseFile [ ] newArray ( int size ) { return new BaseFile [ size ] ; }
public void setBitmap ( Bitmap healthPack ) { this . healthPack = healthPack ; }
public ContactAdapter ( ) { allContacts = new ArrayList <> ( ) ; }
public void onFailure ( Call < FileResponse > call , Throwable t ) { Log . d ( applicationContext . getString ( R . string . app_name ) , "failed" ) ; fileUrlList = new ArrayList < String > ( ) ; }
public int getGroupCount ( ) { return changelog . size ( ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_COCKTAIL , null , null , null , null ) ; }
public Consumer < Exception > getExceptionLogger ( ) { return ( Exception e ) -> CrashLoggingUtils . logException ( e , T . EDITOR ) ; }
public static void scrollToBottom ( final ListView listView ) { int count = listView . getAdapter ( ) . getCount ( ) ; if ( count > 0 ) { setSelection ( listView , count - 1 , true ) ; } }
public void setTo ( final Jid to ) { if ( to != null ) { setAttribute ( "to" , to . toEscapedString ( ) ) ; } }
private void _updateEarlyRevIvl ( Card card , @ Consts . BUTTON_TYPE int ease ) { card . setIvl ( _earlyReviewIvl ( card , ease ) ) ; }
public void dismissCurrentDialig ( ) { if ( visibleDialog == null ) { return ; } try { visibleDialog . dismiss ( ) ; visibleDialog = null ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public boolean onCheckCanExpandOrCollapseGroup ( MyGroupViewHolder holder , int groupPosition , int x , int y , boolean expand ) { return holder . itemView . isEnabled ( ) && holder . itemView . isClickable ( ) ; }
public void onClick ( View v ) { bookCollectionsController . collectionActionHandler ( v . getId ( ) , booksCollection , view . getContext ( ) , null ) ; }
public void onAdClosed ( ) { loadInterstitial ( ) ; Intent inte = new Intent ( home_activity . this , CC_commercialvehiclepublic . class ) ; startActivity ( inte ) ; }
public static int getAutomaticUpdateInterval ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return Integer . parseInt ( Objects . requireNonNull ( sharedPreferences . getString ( SettingsActivity . PREF_SET_WALLPAPER_DAY_FULLY_AUTOMATIC_UPDATE_INTERVAL , String . valueOf ( Constants . DEF_SCHEDULER_PERIODIC ) ) ) ) ; }
public int getIndicatorColor ( int position ) { return getResources ( ) . getColor ( R . color . actionbar_dark ) ; }
private boolean isInHole ( ) { return mGameWorld . getTrack ( ) . getMaterialAt ( mVehicle . getPosition ( ) ) . isHole ( ) ; }
private void launchImageChooser ( ) { Intent i = new Intent ( Intent . ACTION_GET_CONTENT ) ; preferencesFragment . startActivityForResult ( i , UserInterfacePreferences . IMAGE_CHOOSER ) ; }
public boolean isAnimatedItem ( int position ) { return mIsInsideFolder || position != 0 ; }
private void toastError ( final String message ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { Toast . makeText ( MainActivity . this , message , Toast . LENGTH_LONG ) ; } } ) ; }
public PlaceAndPlateDtoAssembler inVoivodeship ( String voivodeship ) { this . voivodeship = voivodeship ; return this ; }
public static Collection Collection ( Context context , String path , boolean server , boolean log ) { return Collection ( context , path , server , log , new SystemTime ( ) ) ; }
public void run ( ) { Toast . makeText ( getContext ( ) , message , Toast . LENGTH_SHORT ) . show ( ) ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; mRenderer = new MyTbaModelRenderer ( mDatafeed , mEventRenderer , mTeamRenderer , mMatchRenderer ) ; }
private void processTogglePlaybackRequest ( ) { if ( State . Paused == mState || State . Stopped == mState ) { processPlayRequest ( ) ; } else { processPauseRequest ( ) ; } }
public RecyclerItem ( T item ) { this . type = ITEM ; this . item = item ; title = null ; }
public static Uri getHillshadeIndexUri ( ) { return new Uri . Builder ( ) . scheme ( "https" ) . authority ( "maptrek . mobi" ) . appendPath ( "hillshades" ) . appendPath ( "index" ) . build ( ) ; }
public void openComments ( int accountId , Commented commented , Integer focusToCommentId ) { PlaceFactory . getCommentsPlace ( accountId , commented , focusToCommentId ) . tryOpenWith ( getActivity ( ) ) ; }
public void getFlightTime_isCorrect ( ) throws Exception { String time = Utilities . getFlightTime ( "13 : 15 : 30" , "14 : 30 : 30" ) ; Assert . assertEquals ( "1 : 15" , time ) ; }
public void onExitPressed ( ) { stopPolling ( ) ; if ( mListener != null ) { mListener . onFinish ( ) ; } }
public void migrate ( @ NonNull SupportSQLiteDatabase database ) { database . execSQL ( "ALTER TABLE `ConversationEntity` ADD COLUMN `s_tags` TEXT NOT NULL" ) ; database . execSQL ( "ALTER TABLE `TimelineStatusEntity` ADD COLUMN `tags` TEXT" ) ; }
public void centerOnDomainOrigin ( Number origin ) { centerOnDomainOrigin ( origin , null , BoundaryMode . AUTO ) ; }
public void onClick ( View v ) { int position = holder . getAdapterPosition ( ) ; boolean expanded = ! expandPositions . remove ( position ) && expandPositions . add ( position ) ; holder . setExpanded ( expanded , true ) ; }
public Date getPublishDate ( ) { return publishDate ; }
public void refreshListArtist ( ) { mCurrentPage = PAGE_ARTIST ; showProgressBar ( ) ; refreshCurrentList ( ) ; }
private void setUpToolbar ( ) { getWindow ( ) . setStatusBarColor ( Color . TRANSPARENT ) ; setSupportActionBar ( toolbar ) ; getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; getSupportActionBar ( ) . setTitle ( "" ) ; }
public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryIssueInfo ( ) ; }
public void onError ( String msg , Throwable th ) { Log . i ( TAG , "There was an error computing smart favorites . " + msg , th ) ; }
public RankingWidget createWidget ( ) { return new RankingWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) ) ; }
public static Calendar getUtc5Calendar ( ) { Calendar cal = new GregorianCalendar ( ) ; cal . setTimeZone ( SparkleHelper . TIMEZONE_TORONTO ) ; return cal ; }
public boolean mustLogin ( ) { return ! api . isLoggedIn ( ) ; }
public final void onConnected ( ) { SENSOR_NAME = "WiFi Sensor" ; wifiManager = ( WifiManager ) getSystemService ( Context . WIFI_SERVICE ) ; }
private void reload ( ) { integerPart . setText ( Digits . currentDigit . getIntegerPart ( ) + " . " ) ; setFractionalPartText ( ) ; fractionalPart . setTextSize ( TypedValue . COMPLEX_UNIT_SP , textSize ) ; }
public static void syncDatabase ( Context context ) { PreferenceUtils . getInstance ( ) . putBoolean ( R . string . pref_is_syncing_key , true ) ; BlichSync . startImmediateSync ( context ) ; }
public void run ( ) { try { setNoAwake ( ) ; Log . d ( "Reader" , "Clear FLAG_KEEP_SCREEN_ON" ) ; } catch ( Throwable t ) { Log . e ( TAG , t . getMessage ( ) , t ) ; } }
public void onPlaylistRefreshRequired ( HlsUrl url ) { playlistTracker . refreshPlaylist ( url , this ) ; }
public void onGrblErrorEvent ( GrblErrorEvent event ) { consoleLogger . setMessages ( event . toString ( ) ) ; }
private void setPopupOffset ( int x , int y ) { mMiniKeyboardOffsetX = x ; mMiniKeyboardOffsetY = y ; if ( mPreviewPopup . isShowing ( ) ) { mPreviewPopup . dismiss ( ) ; } }
public Station build ( ) { return new Station ( id , name , marketCity , frequency , band , audioStreams , podcasts , tagline , image ) ; }
public void setBirthdayYear ( int birthdayYear ) { this . birthdayYear . setValue ( birthdayYear ) ; }
public View getView ( ) { return mToast . getView ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new WallpaperViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) , parent , mListener ) ; }
public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { openExternalLink ( view . getContext ( ) , request . getUrl ( ) . toString ( ) ) ; return true ; }
public void setTopCornerSizes ( boolean topLeftLarge , boolean topRightLarge ) { rootView . setTopLeftRadius ( topLeftLarge ? largeCornerRadius : smallCornerRadius ) ; rootView . setTopRightRadius ( topRightLarge ? largeCornerRadius : smallCornerRadius ) ; }
public void setCocktailList ( ArrayList < CocktailDetails > cocktailList ) { mCocktailDetails = cocktailList ; notifyDataSetChanged ( ) ; }
public void onBookCollectionVisibilityChanged ( BooksCollection booksCollection , boolean isVisible ) { if ( isVisible ) notifyBookCollectionAdded ( booksCollection ) ; else notifyBookCollectionRemoved ( booksCollection ) ; }
public static void launch ( @ NonNull Context context , @ NonNull String url ) { final Intent intent = new Intent ( context , ReadingActivity . class ) ; intent . putExtra ( Constants . LOAD_READING_URL , url ) ; context . startActivity ( intent ) ; }
public Map < String , ? extends BaseMetarCode > decodeToMap ( String block ) throws MetarDecodeException { Map < String , UnknownCodes > result = new HashMap <> ( ) ; result . put ( block , UnknownCodes . UKNWN ) ; return result ; }
private ChangeInfo ( ViewHolder oldHolder , ViewHolder newHolder ) { this . oldHolder = oldHolder ; this . newHolder = newHolder ; }
public void run ( ) { closeVideoViewIfOpen ( ) ; }
public static boolean checkPass ( String pass ) throws DatabaseConfig . EmptyFieldException { String salt = Instance . mDatabaseConfig . getCryptCheckSalt ( ) ; String checkHash = Instance . mDatabaseConfig . getCryptCheckHash ( ) ; return CryptManager . checkPass ( pass , salt , checkHash ) ; }
public HeaderHolder ( View view ) { super ( view ) ; mText = ( TextView ) view . findViewById ( R . id . title ) ; }
public List < DrinkSize > getSizes ( Drink drink ) { DBDataObject . enforceBackedObject ( drink ) ; DrinkSizeConnectionDB conn = new DrinkSizeConnectionDB ( adapter ) ; return conn . getDrinkSizes ( drink , this ) ; }
private void addItemSelection ( ReferenceItem item ) { selectedItems . add ( item ) ; notifyDataSetChanged ( ) ; }
private void performUpdate ( ) { performUpdate ( EnumSet . of ( UpdateTask . TAGS , UpdateTask . FOLLOWED_BLOGS , UpdateTask . RECOMMENDED_BLOGS ) ) ; }
public static String getFormattedSteps ( float steps ) { if ( steps == FitnessChallengeViewModel . ZERO_DATA ) { return STRING_NO_DATA ; } else { return WellnessStringFormatter . getFormattedSteps ( Math . round ( steps ) ) ; } }
public Flowable < Pair < UploadObject , UploadResult < ? >>> observeResults ( ) { return completeProcessor . onBackpressureBuffer ( ) ; }
public TrimmedEditTextPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void onLongItemClick ( View v , Activity item ) { }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "io . pjhjohn . kotlin . androidwidget" , appContext . getPackageName ( ) ) ; }
public boolean handles ( @ NonNull DatabaseEntry model ) { return true ; }
public Gson providesGson ( ) { return GsonProvider . provideGsonIntance ( ) ; }
public void onFailure ( Call < String > call , Throwable t ) { showFetchEventsFailure ( ) ; alertDialog . dismiss ( ) ; }
public void onAnimationEnd ( Object animator ) { onSlideAnimationEnd ( backAnimation ) ; }
public void setShowmap ( Integer showmap ) { this . showmap = showmap ; }
public boolean onStartNestedScroll ( @ NonNull View child , @ NonNull View target , int nestedScrollAxes ) { return ! dismissed && nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL && ! canDismissWithSwipe ( ) ; }
public Parcelable onSaveInstanceState ( ) { SavedState state = new SavedState ( ) ; state . anchorPos = getAnchorPosition ( ) ; return state ; }
public void clearAnswer ( ) { answerText . setText ( null ) ; }
public int getItemCount ( ) { return ItemList . size ( ) ; }
public boolean onQueryTextSubmit ( String query ) { if ( mAdapter != null ) mAdapter . filter ( query ) ; scrollFacilityListToTop ( ) ; return true ; }
public Settings put ( String key , float value ) { SharedPreferences . Editor editor = getPrefs ( ) . edit ( ) ; editor . putFloat ( key , value ) ; editor . commit ( ) ; return this ; }
public synchronized static void clearInstance ( Context context ) { sDatabasePath = null ; sInstance = null ; getInstance ( context ) ; }
public String generateQRCode ( Collection < String > selectedPasswordKeys , JsonPreferencesGenerator jsonPreferencesGenerator ) { return getQRCodeFilePath ( ) ; }
public static void pruneAllUsers ( ) { pruneAllUsers ( PrefsUtility . pref_cache_maxage_entry ( ) ) ; }
public int getSQLiteHandle ( ) { return sqliteHandle ; }
public boolean start ( ) { return start ( null , 0 ) ; }
public boolean sendTimelineAccessToken ( String channelId ) { boolean send = true ; if ( channelId . equals ( CHANNEL_NAME_ANONYMOUS ) ) { send = false ; } return send ; }
public static < T > FindExecutor findLastAsync ( Class < T > modelClass ) { return findLastAsync ( modelClass , false ) ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "autoclose" , checked ) . apply ( ) ; swAutoNext . setEnabled ( ! checked ) ; }
public Builder clearEncryptionType ( ) { bitField0_ = ( bitField0_ & ~0x00000010 ) ; encryptionType_ = com . coinomi . core . protos . Protos . Wallet . EncryptionType . UNENCRYPTED ; onChanged ( ) ; return this ; }
public String getTokenType ( ) { return getType ( ) == User . TYPE_GUEST ? User . TYPE_TOKEN_GUEST : User . TYPE_TOKEN_MEMBER ; }
public RuntimeException getUnexpectedException ( ) { Assertions . checkState ( type == TYPE_UNEXPECTED ) ; return ( RuntimeException ) getCause ( ) ; }
public void onDestroy ( ) { AppLog . i ( AppLog . T . READER , "reader post service > destroyed" ) ; super . onDestroy ( ) ; }
public boolean onPreferenceClick ( Preference preference ) { resetTask ( ) ; return true ; }
private static Locale getLocaleUsedForToTitleCase ( @ NonNull final Locale locale ) { if ( LANGUAGE_GREEK . equals ( locale . getLanguage ( ) ) ) { return Locale . ROOT ; } return locale ; }
public float getTerminalToolbarHeightScaleFactor ( ) { return rangeTerminalToolbarHeightScaleFactorValue ( ( float ) getInternalPropertyValue ( TermuxPropertyConstants . KEY_TERMINAL_TOOLBAR_HEIGHT_SCALE_FACTOR , true ) ) ; }
public < T > T get ( Key < T > key ) { return SharedPreferencesAccess . getValue ( context , key ) ; }
public void initialize ( ) { }
public void set ( float i ) { this . f = i ; }
private void handleFriendRequest ( final Context context , final GcmFriendRequest gcmFriendRequest ) { final String senderId = gcmFriendRequest . getSenderId ( ) ; OperationService . start ( context , new FriendResponseOperation ( senderId ) ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean enabled ) { Log . d ( TAG , "Setting sting ( " + stingName + " ) activation to : " + enabled ) ; setSensortActivation ( stingName , enabled ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; activity . addMusicServiceEventListener ( this ) ; }
public void onStart ( ) { super . onStart ( ) ; if ( fragmentListener == null ) { throw new ClassCastException ( "Parent activity must implements FragmentListener" ) ; } }
public void finishUpdate ( View container ) { }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser ) { tracker . sendScreenView ( TAG ) ; } }
public SyncMessageId ( String address , long timetamp ) { this . address = address ; this . timetamp = timetamp ; }
public void notifyHasConnection ( ) { mBroadcastManager . sendBroadcast ( new Intent ( Constants . ACTION_HAS_CONNECTION ) ) ; }
public Builder clearHash ( ) { bitField0_ = ( bitField0_ & ~0x00000002 ) ; hash_ = getDefaultInstance ( ) . getHash ( ) ; onChanged ( ) ; return this ; }
public XYStepModel getDomainStepModel ( ) { return domainStepModel ; }
public JSONObject getItem ( int index ) { return teachers . get ( index ) ; }
private DataSetObserver mDataSetObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { mDataValid = true ; notifyDataSetChanged ( ) ; } @ Override public void onInvalidated ( ) { mDataValid = false ; notifyDataSetChanged ( ) ; } } ;
public void onCreate ( SurfaceHolder holder ) { super . onCreate ( holder ) ; view = new ShaderWallpaperView ( ) ; isRunning = true ; setShader ( ) ; }
public void setTime ( Date time ) { this . time = time ; }
public void setRepeatMode ( final int repeatmode ) throws RemoteException { mService . get ( ) . setRepeatMode ( repeatmode ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( getLayoutRes ( ) , container , false ) ; ButterKnife . bind ( this , view ) ; return view ; }
private JSONObject getCurrentlySelectedModel ( ) { return getCol ( ) . getModels ( ) . get ( mAllModelIds . get ( mNoteTypeSpinner . getSelectedItemPosition ( ) ) ) ; }
public Object onRetainCustomNonConfigurationInstance ( ) { return mPresenter ; }
public void setDownloaderListener ( FormDownloaderListener sl ) { synchronized ( this ) { stateListener = sl ; } }
public MediaItem getMediaItemFor ( int position ) { return new MediaItem ( null , uri , mediaType , - 1 , true ) ; }
public int compare ( CardWrapper c1 , CardWrapper c2 ) { return c1 . getCard ( ) . getOrdinal ( ) - c2 . getCard ( ) . getOrdinal ( ) ; }
public void onClick ( final View view ) { observer . onChooseColor ( ui . hoursMarkColor . getDisplayedColor ( ) , new ColorPickerCallback ( ) { @ Override public void onColorChosen ( int color ) { view . setBackgroundColor ( color ) ; } } ) ; }
public void rssiMsgInit ( ) { handler . removeMessages ( BleMsg . MSG_READ_RSSI_START ) ; }
public void setNummer ( int nummer ) { this . _nummer = nummer ; }
public void onOptionItemClicked ( int row ) { super . onOptionItemClicked ( row ) ; this . hideOptionsMenu ( ) ; if ( row < 3 ) return ; buildList ( ) ; }
private static int setRotorBonus ( Resources res , ImageView icon , TextView text , JsonObject data ) { return bonusCommon ( res , icon , text , data , "rotorRankingPointAchieved" , "rotorBonusPoints" ) ; }
private boolean removeEventListener ( ConnectionEventListener listener ) { return ListenerRegistration . removeFromList ( listener , eventListeners ) ; }
private void attachListeners ( ) { closeBtn . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { ProfileActivity . super . onBackPressed ( ) ; } } ) ; }
public HostNum ( String hostNum ) { mHostNum = hostNum ; }
public void onBindViewHolder ( @ NonNull AccountSwitcherViewHolder holder , int position ) { holder . bind ( entityToLocalAccount ( localAccounts . get ( position ) ) , onAccountClick ) ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { MenuUtils . selectDrawerItem ( menuItem , mDrawer , HciDebuggerActivity . this , HciDebuggerActivity . this ) ; return true ; }
public AlarmReceiver getReceiver ( ) { return new AlarmReceiver ( ) ; }
public void addFragment ( AbstractDrawerFragment fragment ) { fragments . add ( fragment ) ; }
public CpuThresholdCondition ( @ JsonProperty ( "percentageLimit" ) int percentageLimit ) { this . percentageLimit = percentageLimit ; }
public void run ( ) { try { dismissInternal ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
private void send ( Packet packet , PacketCloneThread cloneThread ) { cloneThread . input . add ( packet ) ; }
private void changeSmartFoldMode ( ) { boolean isChecked = binding . smartFoldPrefs . isChecked ( ) ; mPrefs . setFoldingEnabled ( ! isChecked ) ; binding . smartFoldPrefs . setChecked ( ! isChecked ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setHasOptionsMenu ( true ) ; receiver = new BottinReceiver ( ) ; }
public String getInfo ( ) { return info ; }
public Socket createSocket ( InetAddress inetAddress , int i , InetAddress inetAddress2 , int i2 ) throws IOException { return null ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { EventsDataSource . getInstance ( ) . clearCaches ( ) ; return true ; }
public IPresenterFactory < CommunityManagersPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new CommunityManagersPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , getArguments ( ) . getInt ( Extra . GROUP_ID ) , saveInstanceState ) ; }
private static IntentFilter makeUpdateIntentFilter ( ) { final IntentFilter intentFilter = new IntentFilter ( ) ; intentFilter . addAction ( SensorService . ACTION_DATA_AVAILABLE ) ; return intentFilter ; }
public ArrayList < Playlist > getDataSet ( ) { return dataSet ; }
private static Bitmap loadBitmapFromCache ( Context context , int id ) { synchronized ( AvatarHandler . class ) { if ( sCache == null ) { initialize ( context ) ; } return sCache . get ( id ) ; } }
public Cursor _getPadById ( long pad_id ) { return this . _getPadFromDatabase ( PadContentProvider . _ID , String . valueOf ( pad_id ) ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { document = Document . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; caption = stream . readString ( exception ) ; }
public void setActivity ( GameActivity activity ) { this . activity = activity ; }
public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryIssues ( mainView ) ; }
public void onResume ( ) { onScreen = true ; if ( requestAcknowledgedActionPending ) { getMvpView ( ) . showProgress ( false ) ; ( getMvpView ( ) ) . gotoDashboard ( null ) ; } }
public boolean isShowingImage ( String object ) { return ! disableShowCheck && object != null && currentPathObject != null && object . equals ( currentPathObject ) ; }
public void setData_callsValueChangeListeners ( ) { BearingWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setBinaryData ( "blah" ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
private BroadcastReceiver removeDesktopWallpaperReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { removeCustomWallpaper ( ) ; } } ;
public AuthorInfo createFromParcel ( Parcel source ) { return new AuthorInfo ( source ) ; }
public void onClickCover ( @ SuppressWarnings ( "unused" ) View view ) { if ( callback != null ) { callback . close ( ) ; } }
public String getRoBuildDisplayId ( ) { return roBuildDisplayId ; }
public int getCount ( ) { return mDisplayedValues . size ( ) ; }
public void bind ( DCCManager . DownloadInfo download ) { mDownload = download ; mSession = null ; mStatusIcon . setImageResource ( R . drawable . ic_file_download_white_24dp ) ; mName . setText ( download . getUnescapedFileName ( ) ) ; updateProgress ( ) ; }
public void onSortSelected ( final PostSort order ) { controller . setSort ( order ) ; requestRefresh ( RefreshableFragment . POSTS , false ) ; }
private double sqfootTosqinch ( double num ) { return num * 144 ; }
public boolean hasText ( ) { return ! TextUtils . isEmpty ( text ) ; }
public void setBodyUserFollows ( Boolean bodyUserFollows ) { this . bodyUserFollows = bodyUserFollows ; }
public static int getPageNumberForSura ( int sura ) { return suraPageStart [ sura - 1 ] ; }
public void launchCreateAccountView ( ) { FragmentUtils . addFragment ( R . id . layout_container , CreateAccountFragment . newInstance ( true ) , this , CREATE_ACCOUNT_TAG ) ; mOnBoardingPresenter . checkForEconomy ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( final ViewGroup viewGroup ) { final RedditPostView view = new RedditPostView ( mActivity , mFragment , mActivity ) ; return new RecyclerView . ViewHolder ( view ) { } ; }
public void onCancelled ( ) { mProgressDialog . dismiss ( ) ; showSyncLogMessage ( R . string . sync_cancelled ) ; updateDeckList ( ) ; }
private void requestPermission ( String permission , ToggleButton toggleButton ) { toggleButton . setChecked ( false ) ; ActivityCompat . requestPermissions ( this , new String [ ] { permission } , 0 ) ; }
public Executor networkIO ( ) { return mNetworkIO ; }
public static synchronized < T > T sum ( Class < ? > modelClass , String columnName , Class < T > columnType ) { return sum ( BaseUtility . changeCase ( DBUtility . getTableNameByClassName ( modelClass . getName ( ) ) ) , columnName , columnType ) ; }
public GestureDetector getGestureDetector ( ) { return gestureDetector ; }
public Conversation find ( Account account , String jid ) { return find ( getConversations ( ) , account , jid ) ; }
public NetworkHandler ( String ip , Integer port ) { this . ip = ip ; this . port = port ; }
public static boolean remindersForDeadlineEnabled ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_use_reminders_for_deadline_times ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_use_reminders_for_deadline_times ) ) ; }
public int getItemViewType ( int position ) { PingItem item = mItems . get ( position ) ; return item == null ? ItemType . PLACEHOLDER : ItemType . ITEM ; }
public void sendWithAccessToken ( String token ) { mRequest . setAccessToken ( token . toString ( ) ) ; mRestClient . send ( mRequest ) ; }
public boolean isRoundVideo ( ) { if ( isRoundVideoCached == 0 ) { isRoundVideoCached = type == 5 || isRoundVideoMessage ( messageOwner ) ? 1 : 2 ; } return isRoundVideoCached == 1 ; }
public void reloadSaveList ( ) { StoreFragment storage = forgePagerAdapter . getStoreFragment ( ) ; storage . reload ( this ) ; }
private void onFinished ( ) { FinishedOverlay overlay = new FinishedOverlay ( mGame , mListener , mGameWorld . getRacers ( ) ) ; mHudStage . addActor ( overlay ) ; }
public DerivationTask ( Context context , Callback cb ) { super ( context , context . getString ( R . string . encrypting_vault ) ) ; _cb = cb ; }
public void press ( Button button ) { initLevel ( levelId ) ; }
public int getItemCount ( ) { return calendar . getDatesAfter ( new Date ( ) ) . size ( ) ; }
public void goToComments ( int accountId , @ NonNull Topic topic ) { PlaceFactory . getCommentsPlace ( accountId , Commented . from ( topic ) , null ) . tryOpenWith ( getActivity ( ) ) ; }
public Context getContext ( ) { return formulaRoot . getFormulaList ( ) . getContext ( ) ; }
public void userInputRequried ( PendingIntent pi , Contact contact ) { activity . runIntent ( pi , attachmentChoice ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { super . onOptionsItemSelected ( item ) ; switch ( item . getItemId ( ) ) { case android . R . id . home : super . onBackPressed ( ) ; return true ; } return false ; }
public SharedContactView ( Context context ) { super ( context ) ; initialize ( ) ; }
public BeverageDetails getFavouriteBeverageDetails ( String id ) { return mDatabase . beverageDao ( ) . getBeverageDetailsWithInredients ( id ) ; }
public void onChanged ( SwitchView switchView , boolean isChecked ) { IO . enableInternalRotational ( isChecked , getActivity ( ) ) ; }
private void clickClear ( View view ) { Analytics . logEvent ( getContext ( ) , "click_laser_edit_clear" , null ) ; laserText . setText ( "" ) ; }
public void onMessageDoubleClicked ( Event event ) { if ( event == null ) return ; String from = event . from ; if ( from == null || from . length ( ) == 0 ) from = event . nick ; onUserDoubleClicked ( from ) ; }
public void markAsForcedSms ( long id ) { updateTypeBitmask ( id , 0 , Types . MESSAGE_FORCE_SMS_BIT ) ; }
public void setGestureDetector ( GestureDetectorCompat detector ) { this . gestureDetector = detector ; }
public Filter < Tables . Tracks > getCompressedFilter ( ) { return filters . isEmpty ( ) ? new FilterSet < Tables . Tracks > ( ) : new FilterSet < Tables . Tracks > ( filters ) ; }
public void setAmount ( BigDecimal amount ) { this . amount = amount ; }
private static RuntimeException invalidUri ( Uri uri ) { return new RuntimeException ( "URI not recognized : " + uri . toString ( ) ) ; }
public boolean onIsMultiPane ( ) { return isXLargeTablet ( this ) && ! isSimplePreferences ( this ) ; }
private void selectReminder ( ) { editEventHelper . selectReminder ( getSupportFragmentManager ( ) ) ; }
public static Drawable getUnTickedButtonDrawable ( Context context ) { if ( sUnTickedButton == null ) { sUnTickedButton = context . getDrawable ( R . drawable . off_64 ) ; } return sUnTickedButton ; }
public void onTokenReceived ( byte [ ] token ) { mToken = token ; Log . i ( TAG , "token received sending association status request" ) ; sendBitmap ( ( byte ) ButtonPusherCmd . COMMAND_ASSOCIATION_STATUS . ordinal ( ) , buildAssociationStatusRequest ( mToken ) ) ; }
private void insertInitalTextures ( SQLiteDatabase db , Context context ) { DataSource . insertTexture ( db , context . getString ( R . string . texture_name_noise ) , BitmapFactory . decodeResource ( context . getResources ( ) , R . drawable . texture_noise ) , textureThumbnailSize ) ; }
public Editor putString ( final String key , @ Nullable final String value ) { newValuesMap . put ( key , value ) ; return this ; }
public PDF417 ( boolean compact ) { this . compact = compact ; compaction = Compaction . AUTO ; encoding = PDF417HighLevelEncoder . DEFAULT_ENCODING ; minCols = 2 ; maxCols = 30 ; maxRows = 30 ; minRows = 2 ; }
public void onResume ( ) { super . onResume ( ) ; alarmPresenter . checkMissedAlarms ( context , mNotificationService ) ; mAdapter . notifyDataSetChanged ( ) ; supportStartPostponedEnterTransition ( ) ; updateAlarmNotification ( ) ; }
public int getAttachedFilesCount ( ) { return files . size ( ) ; }
public Dimension ( char symbol ) { _pseudoUnit = new BaseUnit < Dimensionless > ( " [ " + symbol + " ] " ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfHaggler_Info ) : super . desc ( ) ; }
private void registerNetworkReceiver ( ) { if ( getActivity ( ) != null ) getActivity ( ) . registerReceiver ( broadcastReceiver , intentFilter ) ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( MainActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public String getThumbUrl ( ) { return StringUtils . defaultString ( thumbUrl ) ; }
private static String hexEncode ( int integer ) { return "0x" + Integer . toHexString ( integer ) . toUpperCase ( Locale . US ) ; }
public static void setPreviousLocationInfo ( Location previousLocationInfo ) { Session . previousLocationInfo = previousLocationInfo ; }
public void onUserResolvableLocationSettings ( Status status ) { IntentUtil . startGmsStatusForResolution ( this , status , CHECK_LOCATION_SETTINGS_REQUEST_CODE ) ; mPostPresenter . setIsLocationSettingsStatusForResultCalled ( true ) ; }
public void launchSAF ( HFile file ) { }
public static boolean hasFade ( ) { return Utils . existFile ( LED_RED_FADE ) ; }
public void run ( ) { update_subtitle ( ) ; show_topic_popup ( ) ; }
private void updatePlayButton ( boolean isWorking ) { fabAction . setIconResource ( isWorking ? R . drawable . ic_stop_white_32dp : R . drawable . ic_play_arrow_white_32dp ) ; fabAction . setText ( isWorking ? R . string . label_stop : R . string . label_stop ) ; }
public boolean isUsingSliceColorAsValueLineColor ( ) { return mUsingSliceColorAsValueLineColor ; }
public ArrayList < JSONObject > allConf ( ) { ArrayList < JSONObject > confs = new ArrayList < JSONObject > ( ) ; for ( JSONObject c : mDconf . values ( ) ) { confs . add ( c ) ; } return confs ; }
public boolean onNavigationItemSelected ( MenuItem item ) { onItemSelected ( item . getItemId ( ) , true ) ; return true ; }
public static boolean isLocked ( ) { KeyguardManager keyguardManager = ( KeyguardManager ) appContext . getSystemService ( Context . KEYGUARD_SERVICE ) ; return keyguardManager . isKeyguardLocked ( ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; EntityAttachment attachment = filtered . get ( position ) ; holder . bindTo ( attachment ) ; holder . wire ( ) ; }
public boolean isEmpty ( ) { return ( appInfoList . isEmpty ( ) ) ; }
public void onLocationUpdated ( Location location ) { locationChecker . removeCallbacks ( locationCheckTask ) ; locationFetched = true ; fetchSuggestions ( LocationUtils . getAddressFromLocation ( location ) ) ; }
public void clearFilters ( ) { for ( CheckBox box : checkBoxList ) { box . setChecked ( false ) ; } }
public Builder setInputTimestamp ( long value ) { bitField0_ | = 0x00000020 ; inputTimestamp_ = value ; onChanged ( ) ; return this ; }
public TimePreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public AlbumCoverPagerAdapter ( FragmentManager fm , ArrayList < Song > dataSet ) { super ( fm ) ; this . dataSet = dataSet ; }
public void onTokenRefresh ( ) { final String refreshedToken = FirebaseInstanceId . getInstance ( ) . getToken ( ) ; Log . d ( TAG , "Refreshed token : " + refreshedToken ) ; }
public void setTranslationY ( float translationY ) { super . setTranslationY ( translationY ) ; checkCameraViewPosition ( ) ; }
public void loadMenuSceneFromLevelChoiceScene ( ) { setScene ( loadingScene ) ; endSceneService ( levelModeSceneService ) ; startSceneService ( menuSceneService ) ; }
public StatusView ( Context context ) { super ( context ) ; }
public void onPrevious ( ) { hideFocusedKeyboard ( ) ; if ( currentQuestion > 1 ) { showQuestion ( currentQuestion - 1 ) ; } else { SyncAdapter . requestUploadSync ( getActivity ( ) ) ; navigateBack ( ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_nearestDc . TLdeserialize ( stream , constructor , exception ) ; }
public boolean matchesSafely ( HostListActivity . HostAdapter . ViewHolder holder ) { return hasDrawableState ( holder . icon , android . R . attr . state_expanded ) ; }
public TLRPC . BotInlineResult getResult ( ) { return result ; }
public void toggleSelection ( MessageRecord messageRecord ) { if ( ! batchSelected . remove ( messageRecord ) ) { batchSelected . add ( messageRecord ) ; } }
public void setRosterVersion ( String version ) { this . rosterVersion = version ; }
public ListViewModel ( Application application ) { super ( application ) ; repository = new NoteRepository ( application ) ; notesList = repository . getNotesList ( ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; Trip testTrip = new Trip ( ) ; mTestItemBefore = new Item ( testTrip , ITEM_TEST_NAME_A ) ; mTestItemAfter = new Item ( testTrip , ITEM_TEST_NAME_B ) ; }
public synchronized @ Nullable String getProfileName ( ) { return profileName ; }
private void updateForegroundNotification ( @ Nullable PostModel post ) { updateNotificationBuilder ( post ) ; updateNotificationProgress ( ) ; }
public OrientationObserver ( OrientationIconData iconData ) { super ( new Handler ( ) ) ; reference = new SoftReference <> ( iconData ) ; }
private static void addBlockText ( Activity activity , LinearLayout layout , String text ) { addBlockText ( activity , layout , text , textSize - 4 ) ; }
public AnchorPosition getAnchor ( ) { return anchor ; }
public String getString ( String key , String def ) { return mPreferences . getString ( key , def ) ; }
public void setPost ( @ NonNull Post post ) { mPost = post ; onShow ( ) ; }
public LocationArrayAdapter ( Context context , List < String > objects ) { super ( context , android . R . layout . simple_spinner_item , objects ) ; setDropDownViewResource ( android . R . layout . simple_spinner_dropdown_item ) ; }
public void onError ( int i ) { Log . e ( "Erro aou ouvir" , "textoEscutado : " + textoEscutado ) ; }
public static void resetBlockchain ( final Context context ) { context . startService ( new Intent ( BlockchainService . ACTION_RESET_BLOCKCHAIN , null , context , BlockchainService . class ) ) ; }
private void deactivate ( Cursor cursor ) { if ( cursor != null ) { cursor . unregisterContentObserver ( mObservers . get ( cursor ) ) ; mObservers . remove ( cursor ) ; cursor . close ( ) ; } }
private void whenGettingWeatherAsync ( ) { mWeatherRepository . findWeather ( mRequestParameters , mock ( ApiCallback . class ) ) ; }
public void onCreateFailure ( String s ) { if ( alive ) { Log . e ( TAG , "Failed to create offer : " + s ) ; sendMessage ( What . SDP_CREATE_FAILURE , 0 , 0 , null ) ; } }
public void setAddressLine3 ( Object addressLine3 ) { this . addressLine3 = addressLine3 ; }
public void textToHtml_shouldBeTrimmed ( ) { CharSequence observed = StringUtils . textToHtml ( " < p style = \"text - align : center\" > Text < /p > " ) ; assertThat ( observed . toString ( ) , equalTo ( "Text" ) ) ; }
public void onClick ( View v ) { songsManager . info ( songsManager . queue ( ) . get ( sharedPrefsUtils . readSharedPrefsInt ( "musicID" , 0 ) ) ) . show ( ) ; }
public boolean isNeeded ( Comment model ) { return true ; }
public @ NonNull String getThreadingDescription ( ) { return getThreadingDescriptionForLevel ( getThreadingLevelsForDescrpition ( ) ) ; }
public void run ( ) { notifyPrivateChange ( MEDIA_STORE_CHANGED ) ; }
public int getValueCount ( ) { return 2 ; }
public Imperial ( Bitmap bmp , Bitmap bmpHit , boolean isWorthEnemyDestroyedPoint ) { super ( bmp , bmpHit , EnemyType . IMPERIAL , isWorthEnemyDestroyedPoint ) ; }
public CharSequence format ( CharSequence value , int index ) { return NOT_DIGITS_OR_PLUS . matcher ( PhoneNumberUtils . formatNumber ( value . toString ( ) ) ) . replaceAll ( "" ) ; }
public void onSuccess ( Post result ) { view . update ( result ) ; }
public void doOperate ( float time , int cell ) { spend ( time ) ; getSprite ( ) . operate ( cell ) ; if ( ! Dungeon . realtime ( ) ) { onOperateComplete ( ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return Updates . TLdeserialize ( stream , constructor , exception ) ; }
public PDF417BlackBox4TestCase ( ) { super ( "src/test/resources/blackbox/pdf417 - 4" , null , BarcodeFormat . PDF_417 ) ; testResults . add ( new TestResult ( 2 , 2 , 0 , 0 , 0 . 0f ) ) ; }
public IconStyleImageView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( ) ; }
public void setIndicatorId ( String id ) { this . indicatorId = id ; }
public void onNext ( List < TopScorersResponse > topScorersResponses ) { setUpAdapter ( topScorersResponses ) ; }
public void updateView ( ) { if ( isAdded ( ) ) { quranPageLayout . updateView ( quranSettings ) ; if ( ! quranSettings . highlightBookmarks ( ) ) { imageView . unHighlight ( HighlightType . BOOKMARK ) ; } quranPagePresenter . refresh ( ) ; } }
private void openChildrenManagerActivity ( boolean isFirst ) { Intent it = new Intent ( this , ChildrenManagerActivity . class ) ; it . putExtra ( ChildrenManagerActivity . EXTRA_IS_FIRST_OPEN , isFirst ) ; startActivityForResult ( it , FIRST_OPEN_CHILDREN_MANAGER ) ; }
public static boolean isApp ( String url ) { return url . endsWith ( " . exe" ) || url . endsWith ( " . bin" ) || url . endsWith ( " . bat" ) || url . endsWith ( " . dmg" ) ; }
public void setUsername ( String username ) { username_ = username ; }
public void onReceive ( Context context , Intent intent ) { updateUI ( intent ) ; bar . setVisibility ( VISIBLE ) ; button . setVisibility ( GONE ) ; }
public FolderChooserDialogCreate build ( ) { FolderChooserDialogCreate dialog = new FolderChooserDialogCreate ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "builder" , this ) ; dialog . setArguments ( args ) ; return dialog ; }
public Object getItem ( int position ) { return appList . get ( position ) ; }
public void run ( ) { markMessagesAsDeletedInternal ( messages ) ; }
public void fireViewCreated ( ) { getPresenterDelegate ( ) . onViewCreated ( ) ; }
public AboutBuilder addShareAction ( int subject ) { return addShareAction ( context . getString ( subject ) ) ; }
public boolean setEnabled ( Context context ) { return setEnabled ( context , storagePref . get ( context , "pref_allow_collect_analytics" , true ) ) ; }
public void onClick ( View v ) { if ( mOnPostActionsListener != null ) mOnPostActionsListener . onBookmark ( mPost . post , holder . favourite ) ; }
public Long getVoteCount ( ) { return voteCount ; }
public int getTitleColorId ( ) { return R . color . orange ; }
private void showControlForClosed ( Context context ) throws ChallengeDoesNotExistsException { if ( this . fitnessChallengeViewModel . isChallengeAchieved ( ) ) { this . showControlForAchieved ( context ) ; } else { this . showControlForFailure ( context ) ; } }
public boolean hasLength ( ) { return ( ( bitField0_ & 0x00000004 ) == 0x00000004 ) ; }
public AboutBuilder addWebsiteLink ( String url ) { return addLink ( R . mipmap . website , R . string . website , url ) ; }
public void onDraw ( Canvas canvas , Rect bounds ) { renderer . onDraw ( canvas , bounds ) ; }
public MainMenuPage addAndSwitchToProject ( String serverUrl ) { return openProjectSettings ( ) . clickAddProject ( ) . switchToManualMode ( ) . inputUrl ( serverUrl ) . addProject ( ) ; }
public final void onCreateOptionsMenu ( final Menu menu , final MenuInflater inflater ) { inflater . inflate ( R . menu . menu_trip_detail , menu ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public void onBindViewHolder ( @ NonNull NameViewHolder holder , int position ) { holder . loadName ( ) ; }
public boolean winTest ( ) { for ( int i = 12 ; i <= 15 ; i ++ ) if ( stacks [ i ] . getSize ( ) != 13 ) return false ; return true ; }
public static String getCurrentNetwork ( Context context ) { ConnectivityManager connMgr = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo info = connMgr . getActiveNetworkInfo ( ) ; return info != null ? info . getTypeName ( ) : null ; }
public void onClick ( DialogInterface dialog , int which ) { new LogReporter ( ) . sendReport ( null ) ; showToast ( context , context . getString ( R . string . msg_report_sent ) ) ; }
public CategoryBookData getData ( ) { return data ; }
public int getPreferredTemperature ( ) { return preferredTemperature ; }
public void onSeekTo ( long pos ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessageFactory . buildTrackPosition ( ( int ) pos ) ; App . mClementineConnection . mHandler . sendMessage ( msg ) ; }
private void setFullscreen ( boolean full ) { if ( book != null && book . hasDataDir ( ) ) book . setFlag ( "fullscreen" , full ) ; fullscreenBox . setChecked ( full ) ; }
public void onClick ( View v ) { holder . showPopupMenu ( context , ( ( AlbumViewHolder ) holder ) . getOverflow ( ) , AlbumDetailsAdapter . this ) ; }
public int getLeadingMargin ( boolean first ) { return first ? margin : 0 ; }
public int compareTo ( FilesAdapterDisplayObject another ) { int i = path . compareTo ( another . path ) ; if ( i == 0 ) { i = name . compareTo ( another . name ) ; } return i ; }
public MockLocations withTime ( long date ) { when ( loc . getTime ( ) ) . thenReturn ( date ) ; return this ; }
public NotificationSettings ( URL openHABCloudURL , SyncHttpClient httpClient ) { this . openHABCloudURL = openHABCloudURL ; this . httpClient = httpClient ; }
public void onClick ( DialogInterface dialogInterface , int which ) { switch ( which ) { case DialogInterface . BUTTON_POSITIVE : goBack ( null ) ; break ; case DialogInterface . BUTTON_NEGATIVE : verticalStepperForm . cancelFormCompletionOrCancellationAttempt ( ) ; break ; } }
private boolean isPostAlreadyInPostCount ( @ NonNull PostModel post ) { for ( PostModel onePost : sNotificationData . mUploadedPostsCounted ) { if ( onePost . getId ( ) == post . getId ( ) ) { return true ; } } return false ; }
public void onStart ( Intent intent , int startId ) { super . onStart ( intent , startId ) ; LogManager . PrintLog ( "UploadVideoBackground" , "onStart" , "Service started" , LOG_LEVEL_INFO ) ; VIDEO_EDIT_REQUEST_STATUS = NO_ACTION ; }
public int compare ( StatItem lhs , StatItem rhs ) { return lhs . getVerb ( ) . getForm1 ( ) . compareTo ( rhs . getVerb ( ) . getForm1 ( ) ) ; }
public void onExit ( @ NonNull Action action , @ NonNull PointF location ) { for ( CellContainer page : _homeActivity . getDesktop ( ) . getPages ( ) ) { page . clearCachedOutlineBitmap ( ) ; } dragNDropView . cancelFolderPreview ( ) ; }
public List < Number > getAuthors ( ) { return this . authors ; }
public void onPositive ( MaterialDialog materialDialog ) { removePassword ( ) ; }
public void ignorableWhitespace ( char ch [ ] , int start , int length ) throws SAXException { }
private void updateCurrentSubtype ( @ Nullable final InputMethodSubtype subtype ) { mCurrentRichInputMethodSubtype = RichInputMethodSubtype . getRichInputMethodSubtype ( subtype ) ; }
public void informErrorToUser ( String error ) { Snackbar . make ( mSqliteManagerParent , error , Snackbar . LENGTH_INDEFINITE ) . show ( ) ; }
private void onRequest ( String url ) { for ( BlackboardListener listener : listeners ) { listener . onRequest ( url ) ; } }
public static DownloadEngine getInstance ( @ NonNull Context appContext ) { if ( INSTANCE == null ) { synchronized ( DownloadEngine . class ) { if ( INSTANCE == null ) { INSTANCE = new DownloadEngine ( appContext ) ; } } } return INSTANCE ; }
public PGPCoder ( EndpointServer server , PersonalKey key , PGPPublicKey sender ) { mServer = server ; mKey = key ; mRecipients = null ; mSender = sender ; }
public void addItem ( int pos , Member model ) { memberList . add ( pos , model ) ; notifyItemInserted ( pos ) ; }
public void onTorrentError ( @ NonNull String id , String errorMsg ) { }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . COMPARATORS ; }
private void refreshCurrentTimeText ( final long pos ) { mCurrentTime . setText ( MusicUtils . makeTimeString ( getActivity ( ) , pos / 1000 ) ) ; }
public void tearDown ( ) { logout ( ) ; }
public void draw ( Canvas canvas ) { if ( canDraw ) { canvas . drawBitmap ( bitmap , bodySrc , bodyDst , null ) ; if ( ! gamePaused ) bodyDst . offsetTo ( bodyDst . left + 10 , bodyDst . top ) ; } }
private void addInfo ( ) { finish ( ) ; startActivity ( new Intent ( MainActivity . this , AddInfoActivity . class ) ) ; }
public GameSurfaceView ( GameActivity context ) { super ( context ) ; mContext = context ; setEGLContextClientVersion ( 2 ) ; super . setEGLConfigChooser ( 8 , 8 , 8 , 8 , 16 , 0 ) ; }
public void markAllAsNotInRoster ( ) { for ( final Contact contact : getContacts ( ) ) { contact . resetOption ( Contact . Options . IN_ROSTER ) ; } }
public void onRefresh ( ) { if ( getActivity ( ) == null || ! isAdded ( ) ) { return ; } startQueryHappenings ( false ) ; }
public String desc ( ) { if ( ModdingMode . isHalloweenEvent ( ) ) { return Game . getVar ( R . string . Barrel_Pumpkin_Desc ) ; } else { return Game . getVar ( R . string . Barrel_Desc ) ; } }
public void setMinFrameAfterComposition ( ) { LottieValueAnimator animator = createAnimator ( ) ; animator . setComposition ( composition ) ; animator . setMinFrame ( 100 ) ; assertEquals ( 100 . 0f , animator . getMinFrame ( ) ) ; }
public EditorBottomSheet ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initialize ( ) ; }
public void setOnFrameCapturedListener ( OnFrameCapturedListener onFrameCapturedListener ) { this . onFrameCapturedListener = onFrameCapturedListener ; }
public static double getPreviousLongitude ( ) { Location loc = getPreviousLocationInfo ( ) ; return loc != null ? loc . getLongitude ( ) : 0 ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; getLoaderManager ( ) . initLoader ( FillUpLoader . ID , getArguments ( ) , this ) ; }
public boolean onLongClick ( View v ) { showSnackMessage ( R . string . actionbar_upload ) ; return true ; }
public synchronized void add ( final E object ) { data . add ( new WeakReference < E > ( object ) ) ; }
public int getItemCount ( ) { return forums . size ( ) ; }
public String toString ( ) { return "fixeDdestination : " + fixedDestination + " phoneAccount : " + phoneAccount ; }
public AboutBuilder addRemoveAdsAction ( View . OnClickListener onClickListener ) { return addAction ( R . mipmap . ads , R . string . remove_ads , onClickListener ) ; }
public void onFocusChange ( View view , boolean b ) { if ( ! b ) formatToken ( ) ; }
public static String getSubtypeLocaleDisplayName ( @ NonNull final String localeString ) { final Locale displayLocale = getDisplayLocaleOfSubtypeLocale ( localeString ) ; return getSubtypeLocaleDisplayNameInternal ( localeString , displayLocale ) ; }
public void onClick ( View view ) { fingerprintView . cancel ( ) ; dialog . cancel ( ) ; onUsePassword . onClick ( view ) ; }
private MusicBrainzProvider ( final Context context ) { mRequestQueue = LimitingRequestQueue . getInstance ( context ) ; }
public void onAuthenticationHelp ( int helpMsgId , CharSequence helpString ) { Toast . makeText ( context , "Authentication help\n" + helpString , Toast . LENGTH_LONG ) . show ( ) ; } @ Override
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; geo . serializeToStream ( stream ) ; }
public void getUnformattedCustomMediaUrlWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "" ) ; setCustomMediaServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void onAnimationStart ( Animator animation ) { mainActivity . getStatsManager ( ) . hideWinView ( ) . start ( ) ; Animator winAnim = activeWinAnimation ; if ( winAnim != null ) { winAnim . cancel ( ) ; } }
public void setFetchInterval ( long value ) { preferences . edit ( ) . putLong ( FETCH_INTERVAL , value ) . apply ( ) ; }
public APS_GBA ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public void widgetValueChanged ( QuestionWidget changedWidget ) { if ( audioRecorderViewModel . isRecording ( ) ) { formEntryViewModel . logFormEvent ( AnalyticsEvents . ANSWER_WHILE_RECORDING ) ; } if ( widgetValueChangedListener != null ) { widgetValueChangedListener . widgetValueChanged ( changedWidget ) ; } }
public AccountHeader withThreeSmallProfileImages ( boolean threeSmallProfileImages ) { this . mThreeSmallProfileImages = threeSmallProfileImages ; return this ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { thread . initialize ( UU ) ; log . v ( TAG , "Fragment created" ) ; firebaseAnalyticsProvider . logCurrentScreen ( activity , fragment ) ; }
private void uploadToOwnCloud ( ) { if ( ! FileSenderFactory . GetOwnCloudSender ( ) . isAvailable ( ) ) { launchPreferenceScreen ( MainPreferenceActivity . PREFERENCE_FRAGMENTS . OWNCLOUD ) ; return ; } showFileListDialog ( FileSenderFactory . GetOwnCloudSender ( ) ) ; }
public static void showCalculator ( JalkametriActivity parent ) { LogUtil . i ( TAG , "Showing drink strength calculator" ) ; Intent i = new Intent ( parent , CalculatorActivity . class ) ; parent . startActivityForResult ( i , Common . ACTIVITY_CODE_SHOW_CALCULATOR ) ; }
public static AboutFragment newInstance ( ) { Bundle args = new Bundle ( ) ; AboutFragment fragment = new AboutFragmentEx ( ) ; fragment . setArguments ( args ) ; return fragment ; }
public void describeTo ( Description description ) { description . appendText ( "HALLO !!!!!! " ) ; }
public void setGraph6MonthsXLabels ( String [ ] labels ) { chart6Months . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter < String > ( labels ) ) ; }
public void openVideosLibrary ( int accountId , int ownerId , @ Nullable Owner owner ) { PlaceFactory . getVideosPlace ( accountId , ownerId , VideosFragment . ACTION_SHOW ) . withParcelableExtra ( Extra . OWNER , owner ) . tryOpenWith ( getActivity ( ) ) ; }
public void setGameSettings ( PlaneRoundJavaFx planeRound , boolean isTablet ) { m_PlaneRound = planeRound ; m_Tablet = isTablet ; }
public void retry ( ) { queryAPI ( ) ; }
public DiffCallback ( List < TrackedRun > newList , List < TrackedRun > oldList ) { this . newList = newList ; this . oldList = oldList ; }
public void onImageSettingsRequested ( EditorImageMetaData editorImageMetaData ) { MediaSettingsActivity . showForResult ( this , mSite , editorImageMetaData , null ) ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; listAdapter = new CommandListAdapter ( getActivity ( ) , server . getCommands ( ) ) ; setListAdapter ( listAdapter ) ; }
public void setColorDebugMode ( int i ) { debug_mode = i ; doDelayedDraw ( 1 ) ; }
public void setRaw ( boolean want_raw ) { }
private void drawTip ( Canvas canvas , String tip ) { if ( tip != null ) { canvas . drawText ( tip , viewWidth >> 1 , padding + textOffset , textPaint ) ; } }
public static boolean checkError ( Stanza packet , XMPPError . Condition condition ) { return packet . getError ( ) != null && packet . getError ( ) . getCondition ( ) == condition ; }
public void removeListener ( MyLocationListener listener ) { listeners . remove ( listener ) ; }
private BatteryInfo ( ) { }
public void onCancel ( DialogInterface dialog ) { calendarStart = null ; calendarEnd = null ; calendarUpdated ( ) ; }
public void onClick ( View view ) { if ( placeProvider != null && ! doneButtonPressed ) { VideoEditedInfo videoEditedInfo = getCurrentVideoEditedInfo ( ) ; placeProvider . sendButtonPressed ( currentIndex , videoEditedInfo ) ; doneButtonPressed = true ; closePhoto ( false , false ) ; } }
public void deleteAppTest ( ) { Integer id = null ; }
public void testBadDownEvents ( ) { mJsonData . addProperty ( APIStatusDeserializer . DOWN_EVENTS_TAG , "hello" ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public BaseConverter ( BoundsChecker bc ) { boundChecker = bc ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'PGE_G11_BILL'" ; db . execSQL ( sql ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintDialog . class ) ) ; }
private void reinitStorage ( ) { closeFoundFragment ( ) ; mViewPagerAdapter . getMainFragment ( ) . clearView ( ) ; StorageManager . startInitStorage ( this , this , true ) ; }
public BigDecimal getInteretsTotaux ( ) { return this . interetsTotaux ; }
private static void setScore ( Element el , int score ) { el . attr ( "gravityScore" , Integer . toString ( score ) ) ; }
public void onSendFailure ( Throwable e ) { }
public static boolean hasHandsetMicrophoneGain ( ) { return Utils . existFile ( HANDSET_MICROPONE_GAIN ) ; }
public void setUp ( ) { widgetActivity = CollectHelpers . buildThemedActivity ( TestScreenContextActivity . class ) . get ( ) ; widgetUtils = mock ( DateTimeWidgetUtils . class ) ; currentTimeZone = TimeZone . getDefault ( ) ; }
public int compare ( DistrictPointBreakdown lhs , DistrictPointBreakdown rhs ) { return ( ( Integer ) rhs . getTotalPoints ( ) ) . compareTo ( lhs . getTotalPoints ( ) ) ; }
public static ConnectedUserInfo of ( String name ) { return new ConnectedUserInfo ( name ) ; }
public BottomSheetItem ( CharSequence text , Drawable icon ) { this . icon = icon ; this . text = text ; }
private boolean isValidPosition ( int position ) { return ( position >= 0 && position < mNotes . size ( ) ) ; }
public void onFinish ( ) { handleTimeUp ( ) ; }
public static boolean userEquals ( User lhs , User rhs ) { if ( lhs == null || rhs == null ) { return false ; } return loginEquals ( lhs . getLogin ( ) , rhs . getLogin ( ) ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "org . example . sudoku" , appContext . getPackageName ( ) ) ; }
public void setEnergyDensityAmount ( @ NotNull BigDecimal energyDensityAmount ) { this . energyDensityAmount = energyDensityAmount ; }
public void removeCertListener ( CertChangedListener l ) { synchronized ( mListeners ) { mListeners . remove ( l ) ; } }
public boolean cleanUpTracks ( ) { mDb . execSQL ( "delete from scrobbles where _id not in " + " ( select trackid as _id from " + TABLENAME_CORRNETAPP_REPAIRED + " ) " ) ; return true ; }
public void checkForAutoCompleteButton ( ) { if ( ! prefs . getHideAutoCompleteButton ( ) && ! autoComplete . buttonIsShown ( ) && currentGame . autoCompleteStartTest ( ) && ! hasWon ( ) ) { autoComplete . showButton ( ) ; } }
public static ColorDrawable getColorDrawableFromColor ( int color ) { RadioButton radioButton ; return new ColorDrawable ( color ) ; }
public void updateReceivedVersion ( SessionObject sessionObject , String ver ) { prefs . edit ( ) . putString ( createKey ( sessionObject ) , ver ) . commit ( ) ; }
public boolean onMenuItemClick ( MenuItem item ) { sortTasks ( ) ; return true ; }
public int price ( ) { return 20 * quantity ( ) ; }
public void setTimezone ( String timezone ) { this . timezone = timezone ; }
private void assertToggleOn ( ) { assertThat ( toggle ) . isChecked ( ) ; assertThat ( activity . findViewById ( R . id . calendar_view ) ) . isNotNull ( ) . isVisible ( ) ; }
public HeaderViewHolder onCreateHeaderViewHolder ( ViewGroup parent ) { return new HeaderViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . header_search_result , parent , false ) ) ; }
public boolean onSupportNavigateUp ( ) { Log . v ( LOG_TAG , "onSupportNavigateUp ( ) " ) ; onBackPressed ( ) ; return true ; }
public static String formatLocalDateTime ( final LocalDateTime date ) { if ( date . toLocalDate ( ) . equals ( LocalDate . now ( ) ) ) { return FORMATTER_HM . print ( date ) ; } else { return FORMATTER_HM_MD . print ( date ) ; } }
public void onLoaderReset ( Loader < Cursor > loader ) { if ( adapter != null ) { adapter . changeCursor ( null ) ; } }
private void CopyThisto ( Matrix p ) { if ( isSameOrder ( p ) ) { p . Elements = this . Elements . clone ( ) ; } }
private void alert ( String message ) { new MaterialDialog . Builder ( getActivity ( ) ) . content ( message ) . positiveText ( android . R . string . ok ) . show ( ) ; }
public void onClick ( View view ) { new checkNetwork ( ) . execute ( ) ; }
public int getDecimals ( ) { return decimals ; }
public void onLoginFailed ( Error error ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Spotify login failed : " + error . toString ( ) ) ; switch ( error ) { case kSpErrorNeedsPremium : break ; } */ }
public FormEntryPage swipeToNextQuestionWithConstraintViolation ( String constraintText ) { flingLeft ( ) ; checkIsToastWithMessageDisplayed ( constraintText ) ; return this ; }
public String desc ( ) { return Game . getVar ( R . string . MageArmor_Desc ) ; }
public void setOverallPercentageCorrect ( double overallPercentageCorrect ) { this . overallPercentageCorrect = overallPercentageCorrect ; }
public boolean onQueryTextChange ( String query ) { final List < MoodleMember > filteredModelList = filter ( mMembers , query ) ; mMeberListAdapter . animateTo ( filteredModelList , query ) ; mMemberListView . scrollToPosition ( 0 ) ; return true ; }
public String getSortOrder ( ) { return null ; }
public AboutBuilder addLicenseAction ( View . OnClickListener onClickListener ) { return addAction ( R . mipmap . license , R . string . license , onClickListener ) ; }
public Attr setScaleDeltaTranslate ( float scaleDeltaTranslate ) { mScaleDeltaTranslate = scaleDeltaTranslate ; return this ; }
public static void showAlert ( Activity activity , String message ) { ( new AlertDialog . Builder ( activity ) ) . setMessage ( message ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) . show ( ) ; }
public DownloadInfo ( OnDownloadComplete listener ) { super ( ) ; this . listener = listener ; }
public void setTagsString ( String tagsString ) { this . tagsString = tagsString ; }
public ManageAccountsViewModel ( @ NonNull Application application ) { super ( application ) ; this . db = NotesDatabase . getInstance ( application ) ; }
public LogsParser provideCommandsParser ( ) { return new LogsParser ( ) ; }
private boolean isSameOrder ( Matrix a ) { return ( a . GetRow ( ) == this . GetRow ( ) && a . GetCol ( ) == this . GetCol ( ) ) ; }
private RequestQueue getVolleyQueue ( ) { if ( sVolleyQueue == null ) { Context context = mContext . getApplicationContext ( ) ; sVolleyQueue = Volley . newRequestQueue ( context , new HurlStack ( ) ) ; } return sVolleyQueue ; }
public static Typeface createFont ( String name ) throws ResourceParseException { Typeface f = Typeface . createFromAsset ( jLatexMath . getAssetManager ( ) , "fonts/" + name ) ; return f ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeLong ( clientTime ) ; dataOutputStream . writeLong ( serverTime ) ; }
public boolean onTouch ( View v , MotionEvent event ) { return StickerPreviewViewer . getInstance ( ) . onTouch ( event , mentionListView , 0 , mentionsOnItemClickListener ) ; }
public static void setPreference ( Context context , String pref , String value ) { SharedPreferences . Editor editor = PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) ; editor . putString ( pref , value ) . apply ( ) ; }
public void onSwipeGroupItemStarted ( MyGroupViewHolder holder , int groupPosition ) { notifyDataSetChanged ( ) ; }
public void onRefresh ( ) { Handler handler = new Handler ( ) ; handler . postDelayed ( new Runnable ( ) { public void run ( ) { } } , 2000 ) ; }
public IPresenterFactory < AudiosPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new AudiosPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , getArguments ( ) . getInt ( Extra . OWNER_ID ) , saveInstanceState ) ; }
public void onLoaderReset ( @ NonNull Loader < ArrayList < Song >> loader ) { if ( adapter != null ) adapter . swapDataSet ( new ArrayList <> ( ) ) ; }
public boolean onQueryTextChange ( String newText ) { searchIntent = new Intent ( Constants . INTENT_SEARCH ) ; searchIntent . putExtra ( Constants . INTENT_SEARCH_QUERY , newText ) ; LocalBroadcastManager . getInstance ( getApplicationContext ( ) ) . sendBroadcast ( searchIntent ) ; return true ; }
private void refreshAllPosts ( ) { dataStore . requestUserBlog ( username , true , this ) ; }
public void testGetMainPlateForNoPlates ( ) throws Exception { Place malbork = new Place ( "Malbork" , PlaceType . TOWN , null , null , null , new ArrayList <> ( ) ) ; LicensePlate plate = malbork . getMainPlate ( ) ; assertNull ( plate ) ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; updateRows ( ) ; if ( type == 0 ) { NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . didSetTwoStepPassword ) ; } return true ; }
public synchronized boolean canLoadMore ( Integer appId ) { return state . state ( appId ) . hasNext ; }
public void onTitleChanged ( TerminalSession updatedSession ) { if ( ! mActivity . isVisible ( ) ) return ; if ( updatedSession != mActivity . getCurrentSession ( ) ) { mActivity . showToast ( toToastTitle ( updatedSession ) , true ) ; } termuxSessionListNotifyUpdated ( ) ; }
public String getAuthor ( ) { return mFeed . author ; }
public void onClick ( View view ) { m_GameBoards . movePlaneRight ( ) ; }
public static final void LOGD ( String TAG , String message ) { if ( Log . isLoggable ( TAG , Log . DEBUG ) ) { LOGD ( TAG , message ) ; } }
private void thenOnScreenNotified ( ) { assertTrue ( mHandlingOnScreen ) ; }
public void willHidePhotoViewer ( ) { avatarImage . imageReceiver . setVisible ( true , true ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . recordProgressChanged , System . currentTimeMillis ( ) - recordStartTime ) ; }
private void givenUut ( ) { uut = new OpenWeatherApiCallback ( mOnUpdateWeatherListListener ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mReaderUpdateLogic = new ReaderUpdateLogic ( ( WordPress ) getApplication ( ) , this ) ; AppLog . i ( AppLog . T . READER , "reader job service > created" ) ; }
public void visible ( RecipeDetailsMethodsView view ) { if ( recipeFull == null ) return ; view . showMethods ( methods ) ; WeakReference < RecipeDetailsMethodsView > viewRef = new WeakReference <> ( view ) ; searchDelete ( viewRef ) ; searchInsert ( viewRef , 0 ) ; }
public boolean isViewFromObject ( View view , Object object ) { return ( ( Fragment ) object ) . getView ( ) == view ; }
public void onResourceReady ( Bitmap resource , Transition < ? super Bitmap > transition ) { setAvatar ( Crop . getOutput ( data ) , resource ) ; }
public VersionedRook retrieveBook ( String fileName , File file ) throws IOException { SystemClock . sleep ( SLEEP_FOR_RETRIEVE_BOOK ) ; return localDbRepo . retrieveBook ( fileName , file ) ; }
public static XYBounds minMax ( XYSeries . . . seriesList ) { return minMax ( null , seriesList ) ; }
public Item getItem ( int index ) { if ( available != null ) { return available . get ( index ) ; } else { return null ; } }
private void clear ( ) { mGnListener = null ; mTrack = null ; gnMusicIdFileInfoManager = null ; gnMusicIdFileInfo = null ; if ( mGnStatusToDisplay != null ) this . mGnStatusToDisplay . clear ( ) ; this . mGnStatusToDisplay = null ; }
public Long getUserId ( ) { return userId ; }
public void testMinimalEncoder33 ( ) throws Exception { verifyMinimalEncoding ( "HTTP : " ) , TERMINATOR ( ) " , null , false ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . POW_2 ) ; }
public long getLatestTimeStamp ( ) { return Long . valueOf ( get ( "latestTimeStamp" , "0" ) ) ; }
public static String getTheme ( ) { return WadbApplication . getDefaultSharedPreferences ( ) . getString ( KEY_LIGHT_THEME , THEME_CLASSIC ) ; }
public String tellAJoke ( ) { return "Q . What’s the difference between a guitar and a fish?\n" + "\n" + "A . You can’t tuna fish . \n" + "\n" ; }
public int hashCode ( ) { return Objects . hashCode ( id ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfAvalanche_Info ) ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent keyEvent ) { if ( actionId == EditorInfo . IME_ACTION_DONE ) { update ( ) ; return true ; } return false ; }
public Integer get ( String columnName ) { return columns . get ( columnName ) ; }
public int getNameId ( ) { return nameId ; }
public com . coinomi . core . protos . Protos . Key getKey ( int index ) { return key_ . get ( index ) ; }
public String getLanguageOverride ( ) { return languageOverride ; }
public static void create ( Context context ) { ComponentName receiver = new ComponentName ( context , BootReceiver . class ) ; PackageManager pm = context . getPackageManager ( ) ; pm . setComponentEnabledSetting ( receiver , PackageManager . COMPONENT_ENABLED_STATE_ENABLED , PackageManager . DONT_KILL_APP ) ; }
public void onSyncEvent ( SyncEvent event ) { updateList ( ) ; }
public void setIconURL ( String url ) { iconURL_ = url ; }
public void scale ( float factorX , float factorY , float factorZ ) { Matrix . scaleM ( mMatrices , mTopMatrixPos , factorX , factorY , factorZ ) ; }
private void showToast ( String text ) { Toast . makeText ( context , text , Toast . LENGTH_LONG ) . show ( ) ; }
private PreferenceHelper ( Context context ) { mPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; mWifiManager = ( WifiManager ) context . getSystemService ( Context . WIFI_SERVICE ) ; }
public boolean getShuffleModeEnabled ( ) { return player . getShuffleModeEnabled ( ) ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . SIN_INVERSE ) ; }
public CellInfo3G ( Integer locationId , Integer areaCode , Integer primaryScramblingCode , Integer channelNumber ) { setLac ( locationId ) ; setCid ( areaCode ) ; setPsc ( primaryScramblingCode ) ; setUarfcn ( channelNumber ) ; }
public void onEventMainThread ( ReaderEvents . FollowedTagsChanged event ) { if ( getPostListType ( ) == ReaderPostListType . TAG_FOLLOWED ) { if ( isPostAdapterEmpty ( ) ) { updateCurrentTag ( ) ; } } }
public Completable deleteFromCache ( int accountId , int postDbid ) { return repositories . wall ( ) . deletePost ( accountId , postDbid ) ; }
private double cumTopint ( double num ) { return num * 2113 . 377 ; }
public static boolean getPushNotificationsEnabled ( Context context ) { return getBoolean ( context , "pref_push_notifications" , context . getResources ( ) . getBoolean ( R . bool . pref_default_push_notifications ) ) ; }
public int getCircleHoleColor ( ) { return mCircleColorHole ; }
public String getAdr_plz ( ) { return this . _adr_plz ; }
public void onLoadFinished ( Loader < ArrayList < Song >> loader , ArrayList < Song > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
public String toString ( ) { return "ErrorResponse { " + "statusMessage = '" + statusMessage + '\'' + ' } ' ; }
public String getChanged_date ( ) { return this . _changed_date ; }
public IGCFile ( ) { listWayPoints = new ArrayList <> ( ) ; listTrackPoints = new ArrayList <> ( ) ; }
public static boolean isVideoOptimizationEnabled ( ) { return isVideoOptimizationAvailable ( ) && AppPrefs . isVideoOptimize ( ) ; }
public Object getChild ( int groupPosition , int childPosition ) { CBSData child = null ; child = _cbsData . get ( groupPosition ) ; return child ; }
public int getAction ( ) { return action ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'FOLDER'" ; db . execSQL ( sql ) ; }
public void onIpFilterParsed ( boolean success ) { }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return RssManager . instance ; }
public void pauseThreads ( ) { DebugTool . log ( "Sequencer : : pauseThreads ( ) " ) ; _ui . pause ( ) ; _audio . pause ( ) ; threadsActive = false ; }
public FormEntryPage clickOnForm ( String formName ) { clickOnFormButton ( formName ) ; return new FormEntryPage ( formName , rule ) ; }
public void recreateCursor ( ) { budgets = em . getAllBudgets ( filter ) ; updateAdapter ( ) ; calculateTotals ( ) ; }
public static Button createSimpleButton ( Context context , boolean readOnly , String text , int answerFontSize , QuestionWidget listener ) { return createSimpleButton ( context , R . id . simple_button , readOnly , text , answerFontSize , listener ) ; }
private SendFragment getSendFragment ( ) { return ( SendFragment ) getFragment ( getFragmentManager ( ) , SEND ) ; }
public static final Item SKELETON = new Item ( ) { public int image ( ) { return ItemSpriteSheet . BONES ; } } ;
public int getLastPage ( ) { return lastPage ; }
public com . google . protobuf . Any . Builder getNewPubKeyBuilder ( ) { onChanged ( ) ; return getNewPubKeyFieldBuilder ( ) . getBuilder ( ) ; }
public void userInputRequried ( PendingIntent pi , Avatar avatar ) { finishInitialSetup ( avatar ) ; }
public void run ( ) { try { mRuntimeButtonLayout . createFromXML ( addCom . xmlContent , mRuntimeButtonLayout ) ; } catch ( InvalidLayoutException e ) { UiUtil . showAlert ( SendActivity . this , "invalid server configuration" , "XML layout could not be parsed" ) ; } }
private static int [ ] zzUnpackAttribute ( ) { int [ ] result = new int [ 311 ] ; int offset = 0 ; offset = zzUnpackAttribute ( ZZ_ATTRIBUTE_PACKED_0 , offset , result ) ; return result ; }
public void run ( ) { mScrollView . scrollTo ( position [ 0 ] , position [ 1 ] + getScreenWidth ( ) / 4 ) ; }
public void stopScrolling ( ) { long now = SystemClock . uptimeMillis ( ) ; MotionEvent cancel = MotionEvent . obtain ( now , now , MotionEvent . ACTION_CANCEL , 0 , 0 , 0 ) ; binding . messagesView . dispatchTouchEvent ( cancel ) ; }
public void onPicked ( Racer racer ) { super . onPicked ( racer ) ; mMine = Mine . create ( mGameWorld , mAssets , mAudioManager , mRacer ) ; mAiKeepTime = MathUtils . random ( AI_KEEP_BONUS_MIN_TIME , AI_KEEP_BONUS_MAX_TIME ) ; }
public int [ ] args ( ) { return new int [ ] { CommandAbstraction . VISIBLE_PACKAGE } ; }
public void seek ( long position ) { clusterTimecodeUs = C . TIME_UNSET ; blockState = BLOCK_STATE_START ; reader . reset ( ) ; varintReader . reset ( ) ; resetSample ( ) ; }
public SongChildAdapter ( Context context ) { super ( context ) ; }
public void onCreate ( ) { super . onCreate ( ) ; initLogger ( ) ; initBeaconManager ( ) ; NotificationFactory . createNotificationChannel ( this ) ; }
public int getCategory ( ) { return category ; }
public void setEditorToGutenberg ( ) { onData ( withTitle ( R . string . site_settings_gutenberg_default_for_new_posts ) ) . perform ( scrollTo ( ) ) . perform ( setSwitchPreferenceIsChecked ( true ) ) ; }
public boolean toogleShowTerminalToolbar ( ) { boolean currentValue = getShowTerminalToolbar ( ) ; setShowTerminalToolbar ( ! currentValue ) ; return ! currentValue ; }
private float getBitmapX ( boolean scale ) { if ( scale ) { return this . bitmapX / 10 ; } return this . bitmapX ; }
public void showSaveErrorMessage ( ) { Snackbar . make ( mFab , R . string . medical_attention_save_realm_error , Snackbar . LENGTH_LONG ) . setAction ( R . string . retry , v -> saveBMI ( ) ) . show ( ) ; }
private static int getCleanedEncryption ( int encryption ) { if ( encryption == ENCRYPTION_DECRYPTED || encryption == ENCRYPTION_DECRYPTION_FAILED ) { return ENCRYPTION_PGP ; } if ( encryption == ENCRYPTION_AXOLOTL_NOT_FOR_THIS_DEVICE ) { return ENCRYPTION_AXOLOTL ; } return encryption ; }
private static void storeStartTimeIfNeeded ( int notId ) { if ( ! notificationToStartTime . containsKey ( notId ) ) { notificationToStartTime . put ( notId , currentTimeMillis ( ) ) ; } }
public CardsAdapter ( Activity context , ArrayList < Client > clients ) { this . context = context ; this . clients = clients ; }
public void setup ( ) { overrideDependencyModule ( ) ; when ( audioHelper . setAudio ( any ( AudioButton . class ) , any ( ) ) ) . thenReturn ( new MutableLiveData <> ( ) ) ; }
public PhotoSizes setQ ( String q ) { this . q = q ; return this ; }
public void setNumberOfSatellites ( int numberOfSatellites ) { _NumberOfSatellites = numberOfSatellites ; }
public List < Image > getImages ( ) { return imageList . getCurrentList ( ) ; }
public Builder setItemTextColor ( @ ColorInt int color ) { bottomSheet . itemTextColor = color ; return this ; }
public void setMonthIncreaseText ( String text , StateChange change ) { TextView textView = rootView . findViewById ( R . id . stats_mileage_overview_item_month ) . findViewById ( R . id . overview_item_increase_value ) ; setIncreaseText ( text , change , textView ) ; }
public void onClick ( View v ) { try { ExternalAppUtils . openMapIntent ( MainFragment . this , ExternalAppUtils . getMapUri ( location ) ) ; } catch ( UnsupportedEncodingException e ) { FirebaseCrash . report ( e ) ; e . printStackTrace ( ) ; } }
public void cancelRequest ( int token , boolean notifyServer ) { native_cancelRequest ( token , notifyServer ) ; }
public void onToken ( ) { clearError ( ) ; }
public GameStatsImpl ( IO io ) { setIO ( io ) ; mIO . load ( ) ; }
public static void load ( ) { mFavorites = new FavoriteList ( ( App . isFullVersion ( ) ) ? SettingsManager . getFavorites ( ) : null ) ; }
public static String getProcessor ( ) { String pro = getString ( "Processor" ) ; if ( ! pro . isEmpty ( ) ) return pro ; return getString ( "model name" ) ; }
public void showAsDropDown ( View anchor , int xoff , int yoff ) { try { super . showAsDropDown ( anchor , xoff , yoff ) ; registerListener ( anchor ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public boolean isRunning ( ) { return isRunning ; }
public T withSelectedIconColor ( int selectedIconColor ) { this . selectedIconColor = ColorHolder . fromColor ( selectedIconColor ) ; return ( T ) this ; }
private void stopInternal ( ) { resetInternal ( ) ; loadControl . onStopped ( ) ; setState ( ExoPlayer . STATE_IDLE ) ; }
public void setDisplayMode ( DisplayMode mode ) { mMjpegView . setDisplayMode ( mode ) ; }
public void update ( ) { if ( needUpdate ) { needUpdate = false ; text2 . text ( RemixedDungeon . activeMod ( ) ) ; } super . update ( ) ; }
public void onLoadMore ( int page , int totalItemsCount ) { if ( mListCharacterAdapter . addLoadingView ( ) ) { mListPresenter . getCharacters ( totalItemsCount , true , mSearchQuery ) ; } }
public void parseCRC32FromString ( ) { assertEquals ( HashType . CRC_32 , HashType . getHashTypeFromString ( "CRC32" ) ) ; }
public void onClick ( View v ) { onSharePressed ( ) ; }
public void onInitializeError ( ConnectIQ . IQSdkErrorStatus errStatus ) { Logger . logDebug ( TAG + " " + errStatus . toString ( ) ) ; connectIqReady = false ; ServiceRecoveryManager . getInstance ( ) . stopSelfAndScheduleRecovery ( "onInitializeError" ) ; }
public void onClick ( View v ) { holder . showPopupMenu ( mainActivity , ( ( ArtistViewHolder ) holder ) . getOverflow ( ) , ArtistAdapter . this ) ; }
public boolean hasNote ( String input ) { return input . startsWith ( "нотатка" ) ; }
public ActionBarMenuItem addItem ( int id , int icon , int backgroundResource ) { return addItem ( id , icon , backgroundResource , null , AndroidUtilities . dp ( 48 ) ) ; }
public boolean onLongClick ( View v ) { ConfirmationDialogFragment instance = getInstance ( this : : deleteOnContinue , R . string . remove_network_title , R . string . remove_network_warning_message ) ; instance . show ( fragment . requireFragmentManager ( ) , null ) ; return true ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new SelectedBooksFragment ( ) ; case 1 : return new AddedBooksFragment ( ) ; case 2 : return new WishListFragment ( ) ; default : return null ; } }
public void onClick ( View view ) { DrawerLayout layout = ( DrawerLayout ) findViewById ( R . id . drawer_layout ) ; layout . closeDrawer ( GravityCompat . START ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setHasOptionsMenu ( true ) ; mPaymentAdapter = new PaymentAdapter ( getActivity ( ) , new ArrayList < Payment > ( 0 ) ) ; }
public DistrictWriter districtWriter ( Database db ) { return Mockito . mock ( DistrictWriter . class ) ; }
public void setDisplay ( SurfaceHolder holder ) { if ( Objects . nonNull ( internalPlayer ) ) { internalPlayer . setVideoSurfaceHolder ( holder ) ; } }
public void onDataLoaded ( ) { if ( ! view . isCategoryTab ( ) && category != null ) getMeasurementListAndInsert ( category ) ; else view . insertList ( getCategoryList ( ) ) ; }
public boolean isItemViewSwipeEnabled ( ) { return swipeEnabled ; }
public com . coinomi . core . protos . Protos . EncryptedData . Builder getEncryptedDataBuilder ( ) { bitField0_ | = 0x00000004 ; onChanged ( ) ; return getEncryptedDataFieldBuilder ( ) . getBuilder ( ) ; }
public CharSequence getPageTitle ( int position ) { if ( position == 0 ) { return "Einstellungen" ; } else { return "App - Liste" ; } }
private double sqyardTosqm ( double num ) { return num * 0 . 83612736 ; }
public void update ( float delta ) { switch ( currentState ) { case READY : updateReady ( delta ) ; break ; case RUNNING : default : updateRunning ( delta ) ; break ; } }
public static void setChallenges ( int challenges ) { EventCollector . setSessionData ( "challenges" , String . valueOf ( challenges ) ) ; Dungeon . challenges = challenges ; }
public Info ( Graticule graticule , @ NonNull Calendar date ) { mLatitude = 0 ; mLongitude = 0 ; mGraticule = graticule ; setDate ( date ) ; mValid = false ; }
public GlobalStats process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return new GlobalStats ( obj . getJSONObject ( "result" ) ) ; }
public Attr setUpInterpolator ( int upInterpolator ) { this . upInterpolator = upInterpolator ; return this ; }
public static boolean isAutoCountry ( Context context ) { return SettingUtils . getCountryValue ( context ) == 0 ; }
public static void setPinned ( CaseInsensitiveArrayList subs ) { pinned . edit ( ) . putString ( Authentication . name , Reddit . arrayToString ( subs ) ) . apply ( ) ; pins = null ; }
public synchronized static AutomationsRepository getRepository ( @ NonNull Context context , @ NonNull AutomationsServiceApi automationsServiceApi ) { repository = new ContentProviderAutomationProviderRepository ( automationsServiceApi , context ) ; return repository ; }
public void startServer ( ) { socketServerThread = new Thread ( new SocketServerThread ( ) ) ; socketServerThread . start ( ) ; }
public Dialog onCreateDialog ( Bundle savedInstanceState ) { Dialog d = super . onCreateDialog ( savedInstanceState ) ; d . setTitle ( this . getActivity ( ) . getString ( R . string . rename_button ) ) ; return d ; }
public SelectOneMinimalWidget createWidget ( ) { return new SelectOneMinimalWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) , false , new FakeWaitingForDataRegistry ( ) ) ; }
public long getLongitude ( ) { return longitude ; }
public boolean canMultiselect ( ) { return this == EDITOR_PICKER || this == AZTEC_EDITOR_PICKER || this == GUTENBERG_IMAGE_PICKER || this == GUTENBERG_VIDEO_PICKER ; }
private void showStatus ( ) { showEventsEnded ( ) ; showEvenRange ( ) ; showHideBasedOnKeywords ( ) ; showTaskScheduling ( ) ; showTasksWithoutDates ( ) ; showFilterMode ( ) ; }
public Builder clearVersion ( ) { bitField0_ = ( bitField0_ & ~0x00000200 ) ; version_ = 1 ; onChanged ( ) ; return this ; }
public void clickLogIn_openLogInUi ( ) throws Exception { onView ( withId ( R . id . log_in ) ) . perform ( click ( ) ) ; }
public void setPostLinks ( List < Object > postLinks ) { this . postLinks = postLinks ; }
public String getOut ( ) { return "" ; }
public void onClick ( DialogInterface dialog , int which ) { database . elimina ( database , iscritto ) ; confermaeli ( ) ; getGestioneIscritti ( palestra ) ; finish ( ) ; dialog . dismiss ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( STATE_CURRENT_DICE_ROLL , currentDiceRoll ) ; outState . putInt ( STATE_PREVIOUS_DICE_ROLL , previousDiceRoll ) ; }
public void rankingWidget_shouldDisplayItemsFromSearchFunc ( ) { new FormEntryPage ( "ranking_widget" , activityTestRule ) . clickRankingButton ( ) . assertText ( "Mango" , "Oranges" , "Strawberries" ) ; }
public AboutBuilder setSubTitle ( @ Nullable String text ) { this . subTitle = text ; return this ; }
public void afterTextChanged ( Editable s ) { if ( s . toString ( ) . isEmpty ( ) ) { mImageViewShowPwd . setVisibility ( View . VISIBLE ) ; } }
public DrawerBuilder withRootView ( int rootViewRes ) { if ( mActivity == null ) { throw new RuntimeException ( "please pass an activity first to use this call" ) ; } return withRootView ( ( ViewGroup ) mActivity . findViewById ( rootViewRes ) ) ; }
private boolean isExpired ( ) { return ( new Date ( ) . getTime ( ) - time > CACHE_DURATION ) ; }
public void checkAll ( ) { mAbstractSharedPreferences . putBoolean ( "sorting" , false ) ; new checkAll ( mTrackDao ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void testReplaceAllIgnoresCase1 ( ) { assertEquals ( repResult , StrUtil . replaceAllIgnoresCase ( repText , repSearch , repNew ) ) ; }
public void startActivityForResult ( Intent intent , int requestCode , @ Nullable Bundle options ) { Notes . updateLastInteraction ( ) ; super . startActivityForResult ( intent , requestCode , options ) ; }
public boolean attachTo ( Char target ) { if ( super . attachTo ( target ) ) { target . paralyse ( true ) ; return true ; } else { return false ; } }
public boolean set ( String nextValue ) { varValueAsString = nextValue ; varType = VariableType . VariableTypeAsciiString ; varIsInit = true ; return true ; }
public NetworkCapabilities getNetworkCapabilities ( ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; Network network = cm . getActiveNetwork ( ) ; if ( network == null ) return null ; return cm . getNetworkCapabilities ( network ) ; }
public int addItemGetId ( Subject item ) throws SQLiteConstraintException { return addItemGetId ( item , false ) ; }
public int getDisbursementAmount ( ) { return disbursementAmount ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; heartrateChart . setNoDataText ( getString ( R . string . pref_heartrate_nodata ) ) ; }
public ShipInfoState [ ] newArray ( int size ) { return new ShipInfoState [ size ] ; }
public final int getPeekHeight ( ) { return mPeekHeight ; }
public void setClients ( ArrayList < ClientCollectionSheet > clients ) { this . clients = clients ; }
public void onDestroy ( ) { mSupportManager . unregisterOnCurrentMixFaderChangeListener ( this ) ; super . onDestroy ( ) ; }
public void onKeyboardShown ( ) { hideAttachedInput ( ) ; }
public static int getStartingPageForJuz ( int juz ) { return juzPageStart [ juz - 1 ] ; }
public void clear ( ) { mPlayersChanged = true ; mChildAdapters . clear ( ) ; mPlayerCount = 0 ; notifyDataSetChanged ( ) ; }
public static Integer [ ] getPreselectedTagsArray ( Note note , List < Tag > tags ) { List < Note > notes = new ArrayList < Note > ( ) ; notes . add ( note ) ; return getPreselectedTagsArray ( notes , tags ) ; }
public void run ( ) { if ( DrawWrappedIcon != null ) { if ( SelectedColor != Color . BLACK ) { DrawableCompat . setTint ( DrawWrappedIcon , SelectedColor ) ; } else { DrawableCompat . setTint ( DrawWrappedIcon , Color . WHITE ) ; } } }
public void onClick ( View v ) { navigateToDetailsPage ( ) ; }
public AboutBuilder addInstagramLink ( String user ) { return addLink ( R . mipmap . instagram , R . string . instagram , util . openInstagram ( user ) ) ; }
public void basic_encryption_mnemonic ( ) { AccountUtils . Companion . encryptAndStoreWallet ( context , mnemonic12 , null , pin ) ; String phrase = WalletApplication . localStore . getEncryptedPhrase ( ) ; assertNotNull ( phrase ) ; }
public void onRefresh ( ) { List < LogResult > refreshLogs = logPerstiance . getLogs ( ) ; logListViewAdapter . updateLogs ( refreshLogs ) ; swipeRefreshLayout . setRefreshing ( false ) ; }
public void onLoaderReset ( Loader < Cursor > arg0 ) { Log . d ( TAG , "Resetting the accounts loader" ) ; mAccountsCursorAdapter . swapCursor ( null ) ; }
private double kmtofoot ( double num ) { return num * 3280 . 840 ; }
public void initViewPager ( ) { ProfileViewPagerAdapter viewPagerAdapter = new ProfileViewPagerAdapter ( getSupportFragmentManager ( ) ) ; viewPager . setAdapter ( viewPagerAdapter ) ; tabLayout . setupWithViewPager ( viewPager ) ; HelperMethods . changeTabsFont ( this , tabLayout ) ; }
public void failure_is_false ( @ Nullable Object . . . args ) { Log . e ( TAG , "downloadUserLibrary : Could not download index of userLibrary : " + libId ) ; if ( executeIfTrueSuccess_or_ifFalseFailure_afterCompletation != null ) { executeIfTrueSuccess_or_ifFalseFailure_afterCompletation . failure_is_false ( ) ; } }
public Builder displayStepDataInSubtitleOfClosedSteps ( boolean displayStepDataInSubtitleOfClosedSteps ) { style . displayStepDataInSubtitleOfClosedSteps = displayStepDataInSubtitleOfClosedSteps ; return this ; }
public PlaceAndPlateDtoAssembler standard ( ) { this . placeType = PlaceType . TOWN ; return this ; }
public RESTRemind ( String fromUsername , String toUsername , String guid , boolean isRemindingRef ) { this . mFromUsername = fromUsername ; this . mToUsername = toUsername ; this . mGuid = guid ; this . isRemindingRef = isRemindingRef ; }
private void setupActionBar ( ) { ActionBar actionBar = getActionBar ( ) ; if ( actionBar != null ) actionBar . setDisplayHomeAsUpEnabled ( true ) ; }
public void startTimebox ( ) { mStartTime = getTime ( ) . now ( ) ; mStartReps = mSched . getReps ( ) ; }
public void getPluginDisplayTest ( ) { Integer id = null ; }
public void onConfigureFailed ( @ NonNull CameraCaptureSession cameraCaptureSession ) { Activity activity = getActivity ( ) ; if ( null != activity ) { ToastUtils . showShortToast ( "Failed" ) ; } }
public SuraAyah getSelectionEnd ( ) { final AyahSelection currentSelection = readingEventPresenter . currentAyahSelection ( ) ; return AyahSelectionKt . endSuraAyah ( currentSelection ) ; }
public void playAgain ( View view ) { releaseSound ( ) ; startActivity ( intent ) ; finish ( ) ; */ playAgain ( ) ; }
public void setInterestDetails ( CommunityModel communityModel ) { this . mCommunity = communityModel ; setCommunityImage ( CommunityUtils . getCommunityIcon ( communityModel . getCommunityId ( ) ) ) ; setInterestTitle ( mCommunity . getmName ( ) ) ; }
public RemoteViewsService . RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new ListViewRemoteViewsFactory ( this . getApplicationContext ( ) , intent , "android" , intent . getIntExtra ( AppWidgetManager . EXTRA_APPWIDGET_ID , 0 ) ) ; }
public void onAttachedToRecyclerView ( RecyclerView recyclerView ) { if ( isWrappedAdapterAlive ( ) ) mWrappedAdapter . onAttachedToRecyclerView ( recyclerView ) ; }
public void delete ( String username ) { UserHelper . getInstance ( ) . deleteUser ( username ) ; mFriendListView . reload ( true ) ; }
private void updateEmptyText ( @ StringRes int emptyTextResId ) { TextView emptyView = ( TextView ) getView ( ) . findViewById ( android . R . id . empty ) ; emptyView . setText ( emptyTextResId ) ; }
public void onTimestampChanged ( long startTimestamp , long stopTimestamp ) { if ( this . mapboxMap == null ) { return ; } mapDataManager . filter ( startTimestamp , stopTimestamp ) ; }
public long getNumTrustedKeys ( Jid jid ) { return axolotlStore . getContactNumTrustedKeys ( jid . toBareJid ( ) . toPreppedString ( ) ) ; }
public void resize ( ) { hud . resize ( ) ; }
public void onClick ( View arg0 ) { Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( link ) ) ; startActivity ( intent ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . action_github ) { getCustomTabsIntent ( ) . launchUrl ( this , Uri . parse ( "https : } return super . onOptionsItemSelected ( item ) ; }
public boolean isGroupedByTags ( ) { return mGroupByTags ; }
public void setListener ( MenuButtonListener listener ) { mListener = listener ; }
public String getTapToken ( ) { assertLoaded ( ) ; return tapToken ; }
private void releaseWakeLock ( ) { if ( wakeLock . isHeld ( ) ) { wakeLock . release ( ) ; } }
public NewsTask ( NewsAdapter . NewsCallback callback ) { this . callback = callback ; }
public void onSpeechSource ( View view ) { TranslationManager . getInstance ( ) . speach ( sourceText . getText ( ) . toString ( ) , TranslationManager . getInstance ( ) . getSourceLanguage ( ) ) ; }
public static String encryptField ( TetroidObject obj , String field ) { return encryptField ( obj != null && obj . isCrypted ( ) && obj . isDecrypted ( ) , field ) ; }
public void onSkipPressed ( ) { finish ( ) ; overridePendingTransition ( 0 , 0 ) ; }
public ActivityStageIdlingResource ( String targetActivityClassName , Stage stage ) { this ( targetActivityClassName , EnumSet . of ( stage ) ) ; }
public void show ( ) { if ( isShowing ( ) ) { return ; } startAnimation ( show ) ; } ;
private void updateMenuItemVisibility ( ) { if ( mMarkAllAsReadMenuItem == null ) { return ; } mMarkAllAsReadMenuItem . setVisible ( isContentShown ( ) && mAdapter . getCount ( ) > 0 ) ; }
private void initialize ( Context context ) { mSearchTeamHintsAdapter = new SearchTeamHintsAdapter ( context , this : : handleTeamHintClick , this : : handleEmptyTeamHints ) ; setTextChangeListener ( ) ; }
public CountriesAdapter ( ArrayList < Country > countries , OnCountrySelectedListener onCountrySelectedListener ) { this . allCountries = countries ; this . countries = countries ; this . onCountrySelectedListener = onCountrySelectedListener ; }
public void setStartingScale ( float startingScale ) { this . startingScale = startingScale ; }
public static String getShadersDir ( ) { return emulatorDir + "/shaders/" ; }
public void testHangul ( ) { assertWidthIs ( 2 , 0x11A3 ) ; }
public void onSuccess ( ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Resumed music successfully" ) ; }
public void onGetFileAudio ( final List < String > fileAudioPaths ) { new Thread ( ) { @ Override public void run ( ) { threadWorkerCreateLocalMusicFolders ( fileAudioPaths ) ; threadWorkerCreateAllLocalMusic ( fileAudioPaths ) ; } } . start ( ) ; }
public static float getFloatSp ( Context context , String name , String tag ) { SharedPreferences sp = context . getSharedPreferences ( name , mode ) ; return sp . getFloat ( tag , 0 ) ; }
public SettingsRepo ( ) { settings = new Settings ( ) ; }
public void setImage ( TLObject path , String filter , TLRPC . FileLocation thumb , int size ) { setImage ( path , null , filter , null , null , thumb , null , size ) ; }
public void setOnClickListener ( View . OnClickListener listener ) { clickListener = listener ; }
public void onFailure ( Call < Results < Module >> call , Throwable t ) { mPatientInfoView . setProgressBarVisibility ( false ) ; ToastUtil . error ( t . getMessage ( ) ) ; }
public ColorPickerDialogBuilder setOnColorSelectedListener ( OnColorSelectedListener onColorSelectedListener ) { colorPickerView . setOnColorSelectedListener ( onColorSelectedListener ) ; return this ; }
public void onRemoved ( ) { super . onRemoved ( ) ; if ( ! isAdded ( ) ) { for ( RRGLRenderable entity : mChildren ) { entity . onRemoved ( ) ; } } }
public void onItemSelected ( AdapterView < ? > adapterView , View view , int i , long l ) { }
public static void setAztecEditorEnabled ( boolean isEnabled ) { setBoolean ( DeletablePrefKey . AZTEC_EDITOR_ENABLED , isEnabled ) ; AnalyticsTracker . track ( isEnabled ? Stat . EDITOR_AZTEC_TOGGLED_ON : Stat . EDITOR_AZTEC_TOGGLED_OFF ) ; }
public void setEstado ( String estado ) { this . mEstado = estado ; }
public void onClick ( View v ) { showDialog ( DIALOG_GETTING_INVOLVED ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ NonNull String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
public void addValidation ( TextInputLayout textInputLayout , Pattern pattern , String errMsg ) { mValidator . set ( textInputLayout , pattern , errMsg ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { if ( dy > 0 ) { if ( mMarkAsReadWhileScrollingEnabled ) { handleMarkAsReadScrollEvent ( ) ; } } }
public static void set ( int i ) { sNextGeneratedId . set ( i + 1 ) ; }
public List < String > getIDs ( ) { List < String > ids = new ArrayList <> ( ) ; for ( Result r : results ) { ids . add ( r . getId ( ) ) ; } return ids ; }
public void onClick ( View view ) { navigator . onSaveAnswerIfCompleted ( questionContainer ) ; navigator . onNotes ( ) ; }
public void doProgress ( @ Nullable ProgressBackground value ) { mTaskListener . onProgressUpdate ( value ) ; }
public void setAmount ( @ Nullable double amount ) { mAmount = amount ; }
public PseudoAmulet ( ) { image = ItemSpriteSheet . AMULET ; name = Game . getVar ( R . string . Amulet_Name ) ; info = Game . getVar ( R . string . Amulet_Info ) ; }
public void start ( Attributes attributes ) { mCurrentPost . setIconId ( Integer . parseInt ( attributes . getValue ( Post . Xml . ICON_ATTRIBUTE ) ) ) ; }
public void register ( Context context ) { context . registerReceiver ( mBroadcastReceiver , new IntentFilter ( BingWallpaperIntentService . ACTION_GET_WALLPAPER_STATE ) ) ; }
public void notifyUpdate ( Object obj ) { App . arePointsExported = false ; for ( DAO dao : this . daoList ) { dao . update ( obj ) ; } }
public String getSectionCode ( ) { return codSectiune ; }
public void onClick ( View view ) { showToleranceDialog ( ) ; }
public boolean canHaveAccessToHandspinner ( String handspinnerId ) { return this . _handspinnerAccesses . contains ( handspinnerId ) ; }
public void barcodeResult ( BarcodeResult result ) { String code = result . getText ( ) ; Intent intent = new Intent ( ) ; intent . putExtra ( QR_RESULT_ARG , code ) ; setResult ( Activity . RESULT_OK , intent ) ; finish ( ) ; }
public PostView ( Context context ) { this ( context , null ) ; init ( ) ; }
public void modify ( String oldpath , String oldname , String newPath , String newname ) { utilsHandler . renameBookmark ( oldname , oldpath , newname , newPath ) ; refreshDrawer ( ) ; }
public int getItemCount ( ) { return mData . size ( ) ; }
public void loadInput ( ) { spinner = findViewById ( R . id . spinner ) ; spinner . setOnItemSelectedListener ( this ) ; constraintLayout = findViewById ( R . id . constraintLayoutDietDetails ) ; constraintLayout . requestFocus ( ) ; }
public Grammar ( ) { }
public void setTotalWrittenOff ( Integer totalWrittenOff ) { this . totalWrittenOff = totalWrittenOff ; }
private Preference . OnPreferenceClickListener prefClickListener = ( preference ) -> { openPreference ( preference . getKey ( ) ) ; return true ; } ;
public void onClick ( View v ) { Intent inte = new Intent ( getActivity ( ) , Submit . class ) ; inte . putExtra ( "subreddit" , id ) ; getActivity ( ) . startActivity ( inte ) ; }
public void setId ( String mId ) { this . mId = mId ; }
public void selectNoneIsVisibleOnceSelectAllCalled ( ) { CardBrowser browser = getBrowserWithMultipleNotes ( ) ; selectMenuItem ( browser , R . id . action_select_all ) ; advanceRobolectricLooper ( ) ; assertThat ( browser . isShowingSelectNone ( ) , is ( true ) ) ; }
public void notifyItemRemoved ( int position ) { updateRows ( ) ; try { super . notifyItemRemoved ( position ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onDataSetChanged ( ) { mItems = mItemManager . getStories ( mFetchMode , ItemManager . MODE_NETWORK ) ; }
public void onAdFailedToLoad ( int i ) { Log . d ( "MA Interstitial Ad Test" , "Add Loading Failed" ) ; }
public void close ( ) { if ( ! mListenerRegistered ) return ; mSensorManager . unregisterListener ( this ) ; mListenerRegistered = false ; }
public PieDataSet ( List < Entry > yVals , String label ) { super ( yVals , label ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { mEvents . addEvent ( object ) ; if ( ! backlog ) { mBuffers . dirty = true ; notifyHandlers ( EVENT_QUIT , object ) ; } }
public void generate_potd_list ( ) { ( new ArrispwgenTask ( ) ) . execute ( ) ; }
public void init ( ) { setPageTransformer ( true , new ShortsVerticalPageTransformer ( ) ) ; setOverScrollMode ( OVER_SCROLL_NEVER ) ; }
public AboutBuilder addGoogleLink ( String url ) { return addLink ( R . mipmap . google , R . string . google , url ) ; }
public void onClick ( View v ) { startAppInfoIntent ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . main , menu ) ; return false ; }
public Fare getFare ( ) { return fare ; }
public static void renameTable ( SQLiteDatabase db , String table , String newTable ) { CustomSQLiteQueryBuilder . begin ( db ) . renameTable ( table ) . to ( newTable ) . end ( ) ; }
public void getUserParticipateVoteList ( int offset , @ NonNull User user ) { getVoteList ( offset , EventBusController . RemoteServiceEvent . GET_VOTE_LIST_HISTORY_PARTICIPATE , user ) ; }
public ScaleAnimatedTextView ( Context context ) { super ( context ) ; }
public boolean hasPrimaryTag ( ) { return ! TextUtils . isEmpty ( primaryTag ) ; }
public final void operationFinished ( ) { if ( null != destAdapter ) { destAdapter = null ; } }
public int getToolBarWidth ( ) { return mMenu . size ( ) * mItemWidth ; }
private void populateList ( JSONArray Items ) { listview . setAdapter ( new VideoList_Adapter ( activity , Items ) ) ; }
private PendingIntent getGeofencePendingIntent ( ) { Intent geofenceIntent = new Intent ( this , BackgroundService . class ) ; geofenceIntent . setAction ( INTENT_ACTION_SEND_EVENT_CIRCULAR ) ; return PendingIntent . getBroadcast ( this , INTENT_REQUEST_CODE_GEOFENCE , geofenceIntent , PendingIntent . FLAG_UPDATE_CURRENT ) ; }
public void setTotalTimeInForeground ( Long totalTimeInForeground ) { this . totalTimeInForeground = totalTimeInForeground ; }
public void onFailure ( final RequestFailureType type , final Throwable t , final Integer status , final String readableMessage ) { Log . e ( "AlbumListingActivity" , "Image info request also failed : " + type ) ; revertToWeb ( ) ; }
public void onPermissionGranted ( ) { startActivity ( new Intent ( MainActivity . this , Cam . class ) ) ; }
public ChipsEditText ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context ) ; }
public int getColorOnPrimary ( ) { return getAttributeValue ( R . attr . colorOnPrimary ) ; }
public void onCounterClicked ( int position ) { updateEntry ( displayedEntries . get ( position ) , entries . get ( getRealIndex ( position ) ) , position ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'HISTORY'" ; db . execSQL ( sql ) ; }
public void sortItems ( final Comparator < T > comparator ) { Collections . sort ( this . originalItemList , comparator ) ; initializeFromOriginalList ( true ) ; }
public void finish ( ) { Exec . hangupProcessGroup ( mProcId ) ; super . finish ( ) ; }
public StudyOptionsFragment getFragment ( ) { Fragment frag = getSupportFragmentManager ( ) . findFragmentById ( R . id . studyoptions_fragment ) ; if ( frag != null && ( frag instanceof StudyOptionsFragment ) ) { return ( StudyOptionsFragment ) frag ; } return null ; }
public void run ( StacklrExpActivity activity ) { new AsyncListTask ( activity ) . execute ( ) ; }
public PersonView ( Context context ) { super ( context ) ; this . context = context ; }
public LinkedList < Long > active ( ) { JSONArray activeDecks = mCol . get_config_array ( "activeDecks" ) ; LinkedList < Long > result = new LinkedList <> ( ) ; addAll ( result , activeDecks . longIterable ( ) ) ; return result ; }
public ClementineMediaSessionNotification ( Context context ) { super ( context ) ; mNotificationManager = ( NotificationManager ) mContext . getSystemService ( Context . NOTIFICATION_SERVICE ) ; SharedPreferences colorPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; turnColor = colorPreferences . getBoolean ( "pref_noti_color" , false ) ; }
public void refreshListAlbum ( ) { mCurrentPage = PAGE_ALBUM ; showProgressBar ( ) ; refreshCurrentList ( ) ; }
public void onTimeSet ( RadialTimePickerDialogFragment dialog , int hourOfDay , int minute ) { actualWork . setTime ( new int [ ] { hourOfDay , minute } ) ; }
public void setAnchor ( AnchorPosition anchor ) { getPositionMetrics ( ) . setAnchor ( anchor ) ; }
public boolean isAutoManaged ( ) { return ! operationNotAllowed ( ) && th . status ( ) . flags ( ) . op_and ( TorrentFlags . AUTO_MANAGED ) . op_bool ( ) ; }
public void loadPhrasebook ( ) { mSubscription = mDataManager . getPhrasebook ( ) . compose ( RxUtil . applyIoSchedulers ( ) ) . subscribe ( this : : handlePhrasebook ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_collection_with_check_box , parent , false ) ; return new ViewHolder ( v ) ; }
public DrawerBuilder withRootView ( ViewGroup rootView ) { this . mRootView = rootView ; withTranslucentStatusBar ( false ) ; return this ; }
public static LibraryBrowserFragment create ( String path ) { LibraryBrowserFragment fragment = new LibraryBrowserFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( STATE_PATH , path ) ; fragment . setArguments ( args ) ; return fragment ; }
public static void showReaderPostDetail ( Context context , long blogId , long postId ) { showReaderPostDetail ( context , false , blogId , postId , null , 0 , null ) ; }
public CaldavTask getCaldavTask ( ) { return caldavTask ; }
public static int [ ] getPickedColors ( ) { String value = getString ( R . string . pref_key_picked_colors , null ) ; return ( value != null ) ? Utils . splitToInts ( value , " ; " ) : null ; }
public void onSaveInstanceState ( Bundle savedInstanceState ) { super . onSaveInstanceState ( savedInstanceState ) ; if ( tabLayout != null ) savedInstanceState . putInt ( "selected" , tabLayout . getSelectedTabPosition ( ) ) ; }
public void setVoteAverage ( Integer voteAverage ) { this . voteAverage = voteAverage ; }
public static boolean syncEventCalendarAfterSubscription ( Context context , Events event , EventsUsers eventsUsers ) { boolean calendarEnable = AppSettings . Notifications . getCalendarAfterSubscription ( context ) ; return calendarEnable && syncEventCalendar ( context , event , eventsUsers ) ; }
public final int getCellSpanV ( ) { return this . _cellSpanV ; }
public boolean isEmpty ( ) { return RootUtils . runCommand ( "find '" + file + "' - mindepth 1 | read || echo false" ) . equals ( "false" ) ; }
public boolean buildSequence ( @ NonNull BaseTutorial tutorial ) { return tutorial instanceof PeersServersTutorial && ( ( PeersServersTutorial ) tutorial ) . buildForPeers ( recyclerViewLayout . getList ( ) ) ; }
public void onClick ( View v ) { showFragment ( "newPlaylist" ) ; }
public final void changePosition ( int pos , String mode , AbstractClient . OnSuccess listener ) { client . send ( AriaRequests . changePosition ( gid , pos , mode ) , listener ) ; }
public void onAvailable ( Network network ) { Log . i ( "Service send available = " + network ) ; checkConnectivity ( ) ; }
private void updateForm ( Long id , ContentValues values ) { SQLiteDatabase writeableDatabase = formsDatabaseProvider . getWriteableDatabase ( ) ; writeableDatabase . update ( FORMS_TABLE_NAME , values , _ID + " = ?" , new String [ ] { String . valueOf ( id ) } ) ; }
public void onFailure ( Call < Files > call , Throwable t ) { filesMutableLiveData . setValue ( null ) ; }
public NewCardSimulator ( ) { reset ( ) ; }
public void deleteZoneIsDrawable ( ) { mZoneIsDrawablePreference . delete ( ) ; }
