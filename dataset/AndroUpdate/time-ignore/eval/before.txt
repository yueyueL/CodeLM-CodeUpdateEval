public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { if ( BuildConfig . LOG_DEBUG ) LogUtils . d ( TAG , "onUpdate" ) ; for ( int appWidgetId : appWidgetIds ) { updateAppWidgetLayout ( context , appWidgetManager , appWidgetId ) ; } }
public void update ( ) { super . update ( ) ; scale . set ( scale . x * 0 . 9f ) ; if ( ( am -= GameLoop . elapsed ) <= 0 ) { remove ( ) ; } }
private void initFragment ( Fragment dashboardFragment ) { FragmentManager fragmentManager = getFragmentManager ( ) ; FragmentTransaction transaction = fragmentManager . beginTransaction ( ) ; transaction . add ( R . id . contentFrame , dashboardFragment ) ; transaction . commit ( ) ; }
public static boolean getShowBlockedUsers ( Context context ) { return getBoolean ( context , "pref_show_blocked_users" , context . getResources ( ) . getBoolean ( R . bool . pref_default_show_blocked_users ) ) ; }
public com . google . protobuf . Any . Builder getEvidenceBuilder ( ) { onChanged ( ) ; return getEvidenceFieldBuilder ( ) . getBuilder ( ) ; }
public CharSequence getPageTitle ( int position ) { return DateTime . now ( ) . plusDays ( position ) . toString ( getString ( R . string . date_format ) ) ; }
public void broadcastTx ( Transaction tx , TransactionEventListener listener ) { }
public DrawerBuilder withAccountHeader ( AccountHeader accountHeader , boolean accountHeaderSticky ) { this . mAccountHeader = accountHeader ; this . mAccountHeaderSticky = accountHeaderSticky ; return this ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent event ) { executeCommand ( ) ; return true ; }
public void equalsAndHash ( ) { Utils . defaultVerifier ( Association . class ) . withOnlyTheseFields ( "internalName" ) . verify ( ) ; }
public void onSelectedId ( int id , long selectedId ) { }
public void toggleKioskMode ( ) { Log . d ( "Kiosk" , "toggleKioskMode : " + mKioskMode + " -> " + ! mKioskMode ) ; mKioskMode = ! mKioskMode ; reload ( ) ; }
public Object getChild ( int groupPosition , int childPosititon ) { return this . _listDataChild . get ( this . _listDataHeader . get ( groupPosition ) ) . get ( childPosititon ) ; }
public int computeHorizontalScrollExtent ( RecyclerView . State state ) { return computeScrollExtent ( state ) ; }
public static File getFormIndexFile ( String instanceName ) { File tempDir = new File ( new StoragePathProvider ( ) . getDirPath ( StorageSubdirectory . CACHE ) ) ; return new File ( tempDir , instanceName + " . index" ) ; }
public String getVersion ( ) { try { return getPackageManager ( ) . getPackageInfo ( getPackageName ( ) , 0 ) . versionName ; } catch ( PackageManager . NameNotFoundException e ) { } return "" ; }
public Builder leftCircleSizeInPx ( int leftCircleSizeInPx ) { style . leftCircleSizeInPx = leftCircleSizeInPx ; return this ; }
private void stop ( ) { if ( mSound . isPlaying ( ) ) { mSound . stop ( ) ; } ViewUtils . collapse ( mPlayerLayout ) ; }
public static void startTermuxActivity ( @ NonNull final Context context ) { context . startActivity ( newInstance ( context ) ) ; }
public void _checkDay ( ) { if ( getTime ( ) . now ( ) > mDayCutoff ) { reset ( ) ; } }
public static Boolean isAppInstalledOnExternalStorage ( @ NonNull final ApplicationInfo applicationInfo ) { return ( 0 != ( applicationInfo . flags & ApplicationInfo . FLAG_EXTERNAL_STORAGE ) ) ; }
public void createGroup ( ) { activityRule . getScenario ( ) . onActivity ( a -> { createdGroupId = DcHelper . getContext ( a ) . createGroupChat ( false , "group" ) ; } ) ; }
public DietSearchListAdapter ( @ NonNull Context context , int resource , @ NonNull ArrayList < DietSearch > objects ) { super ( context , resource , objects ) ; mContext = context ; mResource = resource ; }
public boolean onOptionsItemSelected ( MenuItem item ) { shouldUpdateCommentOnUnifiedCommentList ( ) ; if ( item . getItemId ( ) == android . R . id . home ) { finish ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public static boolean isNsfw ( String baseSubreddit ) { return filters . getBoolean ( baseSubreddit + "_nsfw" , true ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { EntityContact c1 = prev . get ( oldItemPosition ) ; EntityContact c2 = next . get ( newItemPosition ) ; return c1 . id . equals ( c2 . id ) ; }
private static String getExceptionMessage ( Throwable e ) { StringWriter stringWriter = new StringWriter ( ) ; PrintWriter printWriter = new PrintWriter ( stringWriter ) ; e . printStackTrace ( printWriter ) ; return stringWriter . toString ( ) ; }
public void onClick ( View v ) { verifyMessage ( ) ; }
private void givenNullNetwork ( ) { new Expectations ( ) { { mConnectivityManager . getActiveNetworkInfo ( ) ; result = null ; } } ; }
public void run ( ) { if ( animationRunnable == this ) { animationRunnable = null ; animateToFill ( ) ; } }
private void showRefreshButton ( boolean show ) { if ( webViewLoginMethod ) { if ( show ) { mRefreshButton . setVisibility ( View . VISIBLE ) ; } else { mRefreshButton . setVisibility ( View . GONE ) ; } } }
public Money divide ( int divisor ) { Money moneyDiv = new Money ( new BigDecimal ( divisor ) , mCurrency ) ; return divide ( moneyDiv ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_affectedMessages . TLdeserialize ( stream , constructor , exception ) ; }
public FormEntryPage assertSelectMinimalDialogAnswer ( String answer ) { onView ( withId ( R . id . choices_search_box ) ) . check ( matches ( withText ( answer ) ) ) ; return this ; }
public static String encodeHighLevel ( String msg ) { return encodeHighLevel ( msg , SymbolShapeHint . FORCE_NONE , null , null ) ; }
public AsyncHttpLoader ( Context context , String url , Integer mode , RequestParams params ) { this ( context , url , mode , params , DEFAULT_ENCODING ) ; }
public void disconnectAllDevice ( ) { if ( bleBluetoothPool != null ) { bleBluetoothPool . disconnectAllDevice ( ) ; } }
public void onError ( ) { mNewsListView . hideProgress ( ) ; mNewsListView . showError ( ) ; }
public void onClick ( View view ) { showInductanceDialog ( firstColor ) ; }
private View . OnClickListener incrementUserAttributeButtonOnClick ( ) { return new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { AdpPushClient . get ( ) . incrementUserAttribute ( "comdey_movie" , 1 ) ; } } ; }
public int getCount ( ) { return cities . size ( ) ; }
public void clearCredentials ( ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( getTargetContext ( ) ) ; preferences . edit ( ) . clear ( ) . commit ( ) ; }
public boolean isNestedScrollingEnabled ( ) { return mScrollingChildHelper . isNestedScrollingEnabled ( ) ; }
public final int getCurrentProgress ( ) { if ( progressBar == null ) return - 1 ; return progressBar . getProgress ( ) ; }
private PreferenceUtil ( ) { mPreferences = PreferenceManager . getDefaultSharedPreferences ( App . getStaticContext ( ) ) ; }
public static boolean isLargeScreenDevice ( Context context ) { return context . getResources ( ) . getBoolean ( R . bool . isLargeScreenDevice ) ; }
public static String getAsyncUrl ( String relativeUrl ) { if ( relativeUrl . startsWith ( "http : return relativeUrl ; return ASYNC_URL + relativeUrl ; }
public FileMusicModelBuilder album ( String album ) { this . mAlbum = album ; return this ; }
public void setfE ( double fE ) { this . fE = fE ; }
public static void setInstance ( QuranSettings settings ) { sInstance = settings ; }
public void testFromValueThrowException ( ) { ValidationStyle . fromValue ( 3 ) ; }
public void setAdapter ( BindableFragmentPagerAdapter adapter ) { mFragmentAdapter = adapter ; }
public void restoreItem ( Event item ) { if ( events . add ( item ) ) { Collections . sort ( events , currentComparator ) ; int position = events . indexOf ( item ) ; notifyItemInserted ( position ) ; } }
private int getPlaylistId ( ) { return mPlaylists . get ( mActionBar . getSelectedNavigationIndex ( ) ) . getId ( ) ; }
public int getJobsPending ( ) { return JobsPending ; }
public SuggestionAutoCompleteText ( Context context ) { super ( context , null ) ; init ( context , null ) ; }
public void onResponse ( String response ) { PhotosResponse photosResponse = Utils . fromJson ( PhotosResponse . class , response ) ; EventBus . getDefault ( ) . post ( photosResponse . getPhotosResponse ( ) . getPhotos ( ) ) ; }
public static Integer parseItemLayoutId ( Class < ? extends CommonHolder > itemViewHolderClass ) { Integer itemLayoutId = ClassAnnotationParser . getLayoutId ( itemViewHolderClass ) ; if ( itemLayoutId == null ) { throw new IllegalStateException ( "没找到布局" ) ; } return itemLayoutId ; }
public TodoListPreview getPreview ( ) { return preview ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; mPresenter = new ItemDetailsPresenter ( mView , mRepository , mFirebaseAuth ) ; }
public void run ( ) { view . setVisibility ( View . INVISIBLE ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . iv_lets_continue : mFinished . activityFinish ( true ) ; break ; default : break ; } }
public void onServiceDisconnected ( ComponentName className ) { mBoundService = null ; setTitle ( getString ( R . string . wallet_activity_name ) , getString ( R . string . status_wallet_disconnected ) ) ; Log . d ( TAG , "DISCONNECTED" ) ; }
private void broadcastUpdate ( final String action , List < SensorData > sensorDataList ) { droidsorService . broadcastUpdate ( action , sensorDataList ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return initializeForView ( new Fly ( ) ) ; }
public boolean addAll ( Collection < ? extends T > c ) { return values . addAll ( c ) ; }
public long getPriority ( ) { return priority ; }
public Collection < JingleCandidate > getOurCandidates ( ) { return Collections2 . filter ( this . candidates , c -> c != null && c . isOurs ( ) ) ; }
public ArrayList < Item > getData ( ) { return data ; }
public TrimThreadJob ( Context context , long threadId ) { super ( JobParameters . newBuilder ( ) . withGroupId ( TrimThreadJob . class . getSimpleName ( ) ) . create ( ) ) ; this . context = context ; this . threadId = threadId ; }
public void onRefresh ( ) { String cur = mPayHistoryList . get ( 0 ) . getPaging_token ( ) ; getRecentHistory ( cur ) ; mGetListener . getCurrentBalanceAll ( ) ; }
public void saveIdentity ( SignalProtocolAddress address , IdentityKey identityKey ) { identityKeyStore . saveIdentity ( address , identityKey ) ; }
private void ensureNonCriticalExtensionOptionsIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000004 ) != 0 ) ) { nonCriticalExtensionOptions_ = new java . util . ArrayList < com . google . protobuf . Any > ( nonCriticalExtensionOptions_ ) ; bitField0_ | = 0x00000004 ; } }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeBoolean ( rainStatus . raining ) ; dataOutputStream . writeFloat ( rainStatus . rainRate ) ; }
public void setPlacemarkDescription ( String Description ) { this . PlacemarkDescription = Description ; }
public BaseAdapterItemView setLayoutRes ( @ LayoutRes int layoutRes ) { this . layoutRes = layoutRes ; return this ; }
public void notifyTabViewChanged ( int position ) { Log . d ( Constants . TAG , "Notify Tab Changed : " + position ) ; mTabsView . tabChanged ( position ) ; }
public static List < Item > getItems ( ) { return items ; }
private void changeTitle ( int parameter , String title ) { if ( parameter == 0 || parameter == 2 ) { notifyTitleChanged ( title ) ; } }
public void run ( ) { try { try { sendChunk ( bytes , true ) ; getResult ( mRecSession ) ; } catch ( IOException e ) { onError ( SpeechRecognizer . ERROR_NETWORK ) ; } } finally { releaseResources ( ) ; } }
public void onLoadMore ( int page , int totalItemsCount , RecyclerView view ) { TimelineFragment . this . onLoadMore ( ) ; }
public String getMessage ( Context context , Vm vm ) { return context . getResources ( ) . getString ( R . string . vm_cpu_message , vm . getName ( ) , getPercentageLimit ( ) , vm . getCpuUsage ( ) ) ; }
public Loader onCreateLoader ( int id , Bundle args ) { Uri mDataUrl = JournalContentProvider . ContentProviderCreator . JOURNAL ; return new CursorLoader ( this , mDataUrl , null , null , null , "_id DESC" ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . action_percentage_counter ) { showInfoActivity ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void updateCurrentRssView ( Context context ) { Log . v ( TAG , "updateCurrentRssView" ) ; AsyncTaskHelper . StartAsyncTask ( new UpdateCurrentRssViewTask ( context ) ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View v = LayoutInflater . from ( context ) . inflate ( R . layout . list_card , viewGroup , false ) ; return new ViewHolder ( v , i ) ; }
public PlayableProperty setTitle ( String title ) { if ( title != null ) mTitle = title ; else mTitle = "" ; return this ; }
public static long millis2TimeSpan ( long millis , @ TimeConstants . Unit int unit ) { return millis / unit ; }
private void bindPreferenceSummaryToValue ( Preference preference ) { preference . setOnPreferenceChangeListener ( this ) ; onPreferenceChange ( preference , PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) . getString ( preference . getKey ( ) , "" ) ) ; }
public static void saveItemType ( Context context , int selectedLayout ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . putInt ( CURRENT_LAYOUT_ID , selectedLayout ) ; editor . commit ( ) ; }
public double getX ( ) { return x ; }
public void setEmptyListVisibility ( boolean visibility ) { mEmptyList . setVisibility ( visibility ? View . VISIBLE : View . GONE ) ; }
public static String readNullableString ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) return null ; return in . readString ( ) ; }
public void setOnMessageAcknowledgeListener ( OnMessageAcknowledged listener ) { this . acknowledgedListener = listener ; }
public PreviewArea ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public void setDefaultValueForSdk ( ) { LocationManager . CURRENT_SDK_INT = mEnvironmentSdk ; }
public boolean onMenuItemClick ( final MenuItem item ) { new AccountListDialog ( ) . show ( activity . getFragmentManager ( ) , null ) ; return true ; }
public void onClick ( DialogInterface dialog , int which ) { if ( listener != null ) { listener . addCoin ( description . getText ( ) . toString ( ) , password . getText ( ) ) ; } }
public void startRace ( View view ) { startFreshRace ( ) ; }
public void onClick ( View v ) { status = STATUS_EM_JOGO ; iniciaPartida ( ) ; }
public static void resetAll ( Context context ) { for ( Counter cnt : COUNTERS ) { cnt . setValue ( 0l ) ; } saveCounters ( ) ; Toast . makeText ( context , "Done" , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; activateClientPresenter . detachView ( ) ; }
public Loader < Album > onCreateLoader ( int id , Bundle args ) { return new AsyncAlbumLoader ( this , args . getInt ( EXTRA_ALBUM_ID ) ) ; }
public static String getFeatures ( ) { String features = getString ( "Features" ) ; if ( ! features . isEmpty ( ) ) return features ; return getString ( "flags" ) ; }
public void setPlantCategory ( PlantCategory plantCategory ) { this . plant . setCategory ( plantCategory ) ; Log . d ( "NewPlantActivity" , "Set plant category to " + plantCategory . toString ( ) ) ; loadViewFromPlant ( ) ; }
public int getItemCount ( ) { return mPhrasebookItems . size ( ) ; }
public int getColor ( @ ColorRes int color ) { return ViewUtils . getColor ( mContext , color ) ; }
private void whenSettingItemsList ( ) { uut . setItems ( mModels ) ; }
public BranchViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View v = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . list_item_branch , viewGroup , false ) ; return new BranchViewHolder ( v ) ; }
public AccountHeader withCurrentProfileHiddenInList ( boolean currentProfileHiddenInList ) { mCurrentHiddenInList = currentProfileHiddenInList ; return this ; }
public void showEmptyTags ( String message ) { dismissDialog ( ) ; Toast . makeText ( TaggedQuestionsActivity . this , message , Toast . LENGTH_SHORT ) . show ( ) ; }
public CalendarQueryRow setRRule ( Object obj ) { return setColumn ( CalendarContract . Instances . RRULE , obj ) ; }
public void testThatDegreesUnitNotPreciseWorks ( ) { when ( settings . isDisplayUnitWanted ( ) ) . thenReturn ( true ) ; assertThat ( TemperatureFormatter . Companion . getFormattedTemp ( settings , 231 , true ) ) . isEqualTo ( "23 °C" ) ; }
private void setSourceLangAlpha ( ) { if ( translateLanguageManager . getSourceLangAutoDetect ( ) ) { llSourceLangSettingContainer . setAlpha ( 0 . 1f ) ; } else { llSourceLangSettingContainer . setAlpha ( 1f ) ; } }
public String getName ( ) { if ( mDevice != null ) return mDevice . getName ( ) ; return null ; }
public Call < List < Beverage >> getBeverages ( @ Query ( "categoryId" ) Integer id ) { return jugoterapiaService . getBeverages ( id ) ; }
public void setWallItems ( List < WallItem > wallItems ) { mWallRecyclerView . setVisibility ( View . VISIBLE ) ; if ( mWallAdapter . getItemCount ( ) > 0 ) { mWallRecyclerView . scrollToPosition ( 0 ) ; } mWallAdapter . setWallItems ( wallItems ) ; }
public < D extends Page < D >> D clickOnAdd ( D destination ) { clickOnString ( R . string . add_repeat ) ; return destination ; }
public void onComplete ( @ NonNull Task < Void > task ) { i = 1 ; navigationView . getMenu ( ) . getItem ( 0 ) . setChecked ( true ) ; }
public int read ( ) throws IOException { fillBuffer ( ) ; if ( bufPos < buf . length ) { return buf [ bufPos ++ ] & 0xff ; } return - 1 ; }
public void onResponse ( Call call , Response response ) throws IOException { isSucceeded . setValue ( response . isSuccessful ( ) ) ; }
public View getDropDownView ( int position , View convertView , ViewGroup parent ) { return getViewInternal ( position , convertView , parent , mDropDownViewId ) ; }
public void run ( ) { FoxItApplication . this . wasInBackground = true ; }
public void valueM3 ( float [ ] value ) { GLES20 . glUniformMatrix3fv ( location , 1 , false , value , 0 ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( "schedule_exams" ) ) { return ; } clearLocalCache ( ) ; }
private void toggleSearch ( ) { if ( mSearchMenu != null ) { if ( MenuItemCompat . isActionViewExpanded ( mSearchMenu ) ) MenuItemCompat . collapseActionView ( mSearchMenu ) ; else MenuItemCompat . expandActionView ( mSearchMenu ) ; } }
public void resetPeers ( ) { for ( SwanUser peer : nearbyPeers ) { peer . setIp ( null ) ; } }
public void onHistoricalRecordItemClicked ( HistoricalRecordModel historicalRecordModel ) { if ( historicalRecordListPresenter != null && historicalRecordModel != null ) { historicalRecordListPresenter . onHistoricalRecordClicked ( historicalRecordModel ) ; } }
public void onBindViewHolder ( ColorViewHolder holder , int position ) { holder . bind ( colors . get ( position ) , eventListener ) ; }
public ArrayList < Song > getSongs ( @ NonNull Context context ) { return SongLoader . getAllSongs ( context ) ; }
public void issueLink_withIncorrectNumber__opensBrowser ( ) throws Exception { LinkParser . ParseResult result = parseLink ( "https : assertRedirectsToBrowser ( result ) ; }
public CustomServiceConnection ( ProcessViewerFragment frag , LineChart lineChart , ServiceType serviceType ) { fragment = frag ; this . lineChart = lineChart ; this . serviceType = serviceType ; }
public void onFocusChange ( View v , boolean hasFocus ) { focusOnEtv = OstConfigs . getInstance ( ) . PRICE_POINT_CURRENCY_SYMBOL ; }
private void removeAllMarkers ( ) { thread . runOnUI ( ( ) -> { for ( Marker marker : markers ) { marker . remove ( ) ; } markers . clear ( ) ; } ) ; }
public void onClick ( View v ) { prefs . edit ( ) . putBoolean ( "understood_actions" , true ) . apply ( ) ; grpHintSwipe . setVisibility ( View . GONE ) ; }
public SpinnerWithCloseEvent ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putBoolean ( "attachedChild" , attachedChild ) ; }
public ArrayList < InfoItem > getSubContent ( ) { return subContent ; }
public void flowComplete ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { getMvpView ( ) . showProgress ( false ) ; }
public ProfileSettingDrawerItem withTextColor ( int textColor ) { this . textColor = ColorHolder . fromColor ( textColor ) ; return this ; }
public static synchronized Date parseEventDate ( String dateString ) throws ParseException { return sEventDateFormat . parse ( dateString ) ; }
public DrawerBuilder withToolbar ( Toolbar toolbar ) { this . mToolbar = toolbar ; return this ; }
public void onBackPressed ( ) { if ( activeFragment instanceof NewMaintenanceFragment ) { if ( fab . isOrWillBeHidden ( ) ) fab . show ( ) ; } super . onBackPressed ( ) ; }
public static List < TetroidNode > getRootNodes ( ) { return Instance . mXml . mRootNodesList ; }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable String label , @ NonNull Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
public void onFailure ( @ NotNull Call < BaseResponse > call , Throwable t ) { }
public Object getChild ( int indicePessoa , int indiceProduto ) { List < Produto > produtos = pessoaList . get ( indiceProduto ) . getProdutosNomes ( ) ; return produtos . get ( indicePessoa ) ; }
public byte [ ] getOfflineLicenseKeySetId ( ) { return null ; }
public static RegexManager getURLRegexManager ( ) { return new RegexManager ( URL_PATTERN ) ; }
public List < Audio > readByAttractionId ( long attractionId ) { RealmResults < Audio > audios = realm . where ( modelType ) . equalTo ( "attraction_id" , attractionId ) . findAll ( ) ; audios . sort ( "priority" ) ; return audios ; }
public String getLockOrientationPref ( ) { if ( getPhotoMode ( ) == PhotoMode . Panorama ) return "portrait" ; return sharedPreferences . getString ( PreferenceKeys . getLockOrientationPreferenceKey ( ) , "none" ) ; }
public void onSurfaceChanged ( GL10 notUsed , int width , int height ) { GLES30 . glViewport ( 0 , 0 , width , height ) ; _mCamera . onSurfaceChanged ( width , height ) ; }
public void syncClose ( ) { stopFlowControlThread ( ) ; connection . releaseInterface ( mInterface ) ; }
public long getItemId ( int position ) { return mData . get ( position ) . path . hashCode ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "android . loloof64 . com . basic_chess_endgames_trainer" , appContext . getPackageName ( ) ) ; }
public void clicked ( InputEvent event , float x , float y ) { PlatformUtils . openURI ( sWebSiteLinkInfo . url ) ; }
public boolean onItemLongClick ( AdapterView < ? > av , View v , int pos , long id ) { return onLongRecentListItemClick ( v , pos , id ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { translateLanguageManager . setSourceLang ( langKeyList . get ( position ) ) ; }
public void testGetStoriesNoListener ( ) { client . getStories ( "filter" , ItemManager . MODE_DEFAULT , null ) ; verify ( TestRestServiceFactory . algoliaRestService , never ( ) ) . searchByDate ( eq ( "filter" ) ) ; }
public void onSuccess ( Void unused ) { Log . d ( TAG , "We're discovering ! " ) ; }
public void onDatePicked ( String date ) { tvActivationClientDate . setText ( date ) ; activationDate = DateHelper . getDateAsStringUsedForCollectionSheetPayload ( date ) . replace ( " - " , " " ) ; }
public int getBufferPercent ( ) throws RemoteException { return mService . get ( ) . getBufferPercent ( ) ; }
public void setExtremity ( Point _extremity ) { this . extremity = _extremity ; this . updateCalcDistAndScaleFactor ( ) ; }
public Socket createSocket ( String host , int port ) throws IOException { return patch ( delegate . createSocket ( host , port ) ) ; }
public PercentageChartView typeface ( @ NonNull Typeface typeface ) { if ( typeface == null ) { throw new NullPointerException ( "Text TypeFace cannot be null" ) ; } renderer . setTypeface ( typeface ) ; return this ; }
public NdefMessage createNdefMessage ( NfcEvent event ) { return NfcUtils . createBeamMessage ( "account_id" , accountID . toString ( ) ) ; }
public void setFragments ( ArrayList < DateGridFragment > fragments ) { this . fragments = fragments ; }
public JSONObject next ( ) { JSONObject object = getJSONObject ( index ) ; index ++ ; return object ; }
public DeleteEventAdapter ( List < Event > eventList , Context context ) { this . listItems = eventList ; this . context = context ; }
public VideoWidget createWidget ( ) { return new VideoWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeWaitingForDataRegistry ( ) , new FakeQuestionMediaManager ( ) , new CameraUtils ( ) , mediaUtils ) ; }
public String onArgNotFound ( ExecutePack info ) { return onNotArgEnough ( info , 0 ) ; }
public void updateChallengeAndFitnessData ( ) { this . presenter . stopObservingChallengeData ( ) ; this . presenter . tryFetchChallengeAndFitnessData ( this ) ; }
public void trackSignupGoogleButtonTapped ( ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . SIGNUP_GOOGLE_BUTTON_TAPPED ) ; }
public XMLPrefsManager . XmlPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . UI ; }
private void checkNeedRebuild ( ) { if ( rebuildAfterAnimation ) { rebuildAllFragmentViews ( rebuildLastAfterAnimation , showLastAfterAnimation ) ; rebuildAfterAnimation = false ; } else if ( animateThemeAfterAnimation ) { animateThemedValues ( animateSetThemeAfterAnimation ) ; animateSetThemeAfterAnimation = null ; animateThemeAfterAnimation = false ; } }
public void onCheckRizonEventHorizon ( ) { }
public MapElement clear ( ) { layer = 5 ; super . clear ( ) ; return this ; }
public void handleInboxClick ( final AppCompatActivity activity ) { final URI commentContext = Constants . Reddit . getUri ( mComment . getRawComment ( ) . context ) ; LinkHandler . onLinkClicked ( activity , commentContext . toString ( ) ) ; }
public RevealBackgroundView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == R . id . action_add ) { AddOrEditAccount ( null ) ; } return super . onOptionsItemSelected ( item ) ; }
public ArrayList < String > getAddresses ( ) { return this . addresses ; }
public static TBPhysicalPersonDatabase newInstance ( Context context ) { return new TBPhysicalPersonDatabase ( context ) ; }
public String getToggle ( ) { if ( ! Function . isEmpty ( toggle ) ) return toggle ; return "ascii_mode" ; }
public void setText ( String lyrics ) { this . mLyrics = lyrics ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( placeDetailsFragment != null ) context . getSupportFragmentManager ( ) . putFragment ( outState , FRAG_PLACE_DETAILS_ID , placeDetailsFragment ) ; }
public void onClick ( DialogInterface dialog , int id ) { ( ( DownloadListener ) getActivity ( ) ) . onDownload ( bucket , file ) ; }
private boolean hasAuthorName ( ) { return ! TextUtils . isEmpty ( authorName ) ; }
public void refreshListFolders ( ) { mCurrentFolder = null ; mCurrentPage = PAGE_FOLDERS ; showProgressBar ( ) ; refreshCurrentList ( ) ; }
public void run ( ) { goToNextStep ( ) ; showEditDoneProgress ( false ) ; setDonePressed ( false ) ; }
public void cancelUpdates ( ) { scheduler . cancelDeferred ( getAutoUpdateTag ( ) ) ; scheduler . cancelDeferred ( getMatchExactlyTag ( ) ) ; }
private void refresh ( ) { mAdapter . setShowAll ( true ) ; mStoryListViewModel . refreshStories ( mFilter , mCacheMode ) ; }
public boolean insert ( CoNaObiadDbHelper helper , String name ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( "name" , name ) ; helper . insert ( tableName , contentValues ) ; return true ; }
public boolean isViewFromObject ( View view , Object object ) { return adapter . isViewFromObject ( view , object ) ; }
public FooterViewHolder ( View itemView ) { super ( itemView ) ; textView = ( TextView ) itemView . findViewById ( android . R . id . text1 ) ; }
public LinkAccountFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public static String getTableName ( ) { return tableName ; }
public TabAdapter ( @ NonNull FragmentManager fm ) { super ( fm ) ; }
public void addContainer ( ) throws ConversionException { String container = buildContainer ( ) ; boolean error = ZipWriter . addText ( ZipFileConstants . CONTAINER , container ) ; if ( error ) { throw new ConversionException ( ConversionStatus . CANNOT_WRITE_EPUB ) ; } }
public void onSaveInstanceState ( Bundle outState ) { mPresenter . saveCurrencyPrices ( outState ) ; super . onSaveInstanceState ( outState ) ; }
public void restartActivity ( ) { Intent intent = getIntent ( ) ; finish ( ) ; startActivity ( intent ) ; }
public void showIntroScreen ( ) { if ( gameIntroScreen == null ) { gameIntroScreen = new GameIntroScreen ( batch ) ; } setScreen ( gameIntroScreen ) ; }
public Builder placeholder ( @ DrawableRes int resId ) { request . placeholder ( resId ) ; return this ; }
public GameImagesAdapter ( Context context , List < String > mGameImages ) { this . mGameImages = mGameImages ; this . context = context ; }
public CharSequence terminateToken ( CharSequence text ) { return text + " " ; }
public void onPageScrollStateChanged ( int state ) { for ( OnWelcomeScreenPageChangeListener changeListener : mItems ) { changeListener . onPageScrollStateChanged ( state ) ; } }
public static ApplicationDcContext getContext ( @ NonNull Context context ) { return ApplicationContext . getInstance ( context ) . dcContext ; }
private void handleIntent ( Intent intent ) { if ( Intent . ACTION_SEARCH . equals ( intent . getAction ( ) ) ) { String query = intent . getStringExtra ( SearchManager . QUERY ) ; SearchQuery = query ; Bundle bundle = new Bundle ( ) ; } }
public void equippedCursed ( ) { GLog . n ( Game . getVar ( R . string . KindOfWeapon_EquipCursed ) , name ( ) ) ; }
private void setupCallback ( int bufferSize ) { for ( int i = 0 ; i <= CAMPREVIEW_NUM_BUFFERS ; ++ i ) { byte [ ] cameraBuffer = new byte [ bufferSize ] ; mCamera . addCallbackBuffer ( cameraBuffer ) ; } }
public Recognizer build ( ) { return new Recognizer ( context , times , locale , contactsInterface ) ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor data ) { adapter . swapCursor ( data ) ; placeholder . setVisibility ( data == null || data . getCount ( ) == 0 ? View . VISIBLE : View . GONE ) ; }
private boolean descriptionlengthCheck ( ) { if ( tieDescription . getText ( ) . toString ( ) . length ( ) > 40 ) { return false ; } return true ; }
public ApplicationReadPermissionsRequirementsProvider ( @ NonNull Context context ) { this ( LibraryStorageReadPermissionsRequirementsProvider . getInstance ( ) , new ExternalStorageReadPermissionsArbitratorForOs ( context ) ) ; }
public static Intent createShareSongFileIntent ( final Song song ) { return new Intent ( ) . setAction ( Intent . ACTION_SEND ) . putExtra ( Intent . EXTRA_STREAM , Uri . parse ( "file : }
public static void resetPicsEnabled ( String sub ) { prefs . edit ( ) . remove ( "picsenabled" + sub . toLowerCase ( ) ) . apply ( ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( shouldUpdateButton ) { configureButtons ( ) ; shouldUpdateButton = false ; } }
public static void playNextSong ( ) { if ( musicService != null ) { musicService . playNextSong ( ) ; } }
public PrioritisedCachedThreadPool ( int threads , String threadName ) { mMaxThreads = threads ; mThreadName = threadName ; }
public void close ( ) { mDrawerLayout . closeDrawer ( mDrawerLinear ) ; }
public SuppressFlingGestureSlider getSlider ( ) { return slider ; }
public List < Comment > getCommentData ( ) { return commentData ; }
private SampleHelper ( Activity activity ) { this . activity = activity ; }
public void hideSoftKeyboard ( ) { InputMethodManager imm = ( InputMethodManager ) mContext . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; imm . hideSoftInputFromWindow ( mTextEntry . getWindowToken ( ) , InputMethodManager . HIDE_IMPLICIT_ONLY ) ; }
public boolean isOptionSet ( int option ) { return ( ( options & ( 1 << option ) ) != 0 ) ; }
private ActionBarDrawerToggle setupDrawerToggle ( ) { return new ActionBarDrawerToggle ( this , mDrawer , toolbar , R . string . drawer_open , R . string . drawer_close ) ; }
private double mitokm ( double num ) { return num * 1 . 60935 ; }
public void onClick ( View view ) { startActivity ( new Intent ( MainActivity . this , ListaPacientesActivity . class ) ) ; }
public Set < Filter < Tables . Tracks >> getFilter ( ) { return Collections . unmodifiableSet ( filters ) ; }
public float getFillLinePosition ( ILineDataSet dataSet , LineDataProvider dataProvider ) { return mChart . getAxisLeft ( ) . getAxisMaximum ( ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( inflater . inflate ( R . layout . item_rule_log , parent , false ) ) ; }
public static boolean validateMultiTeamKey ( String key ) { return ! ( key == null || key . isEmpty ( ) ) && key . matches ( "^frc\\d { 1 , 4 } [ a - zA - Z ] $" ) ; }
private static void addLogWithoutFile ( Context context , String s , int duration ) { log ( context , s , Types . ERROR , false , duration ) ; }
public CustomThemeListingRecyclerViewAdapter ( AppCompatActivity activity , ArrayList < CustomTheme > predefinedCustomThemes ) { this . activity = activity ; this . predefinedCustomThemes = predefinedCustomThemes ; userCustomThemes = new ArrayList <> ( ) ; }
private Runnable onFinishInitCameraRunnable = new Runnable ( ) { @ Override public void run ( ) { if ( delegate != null ) { delegate . needStartRecordVideo ( 0 ) ; } } } ;
public void onEvent ( ImageView button , boolean buttonState ) { int position = getAdapterPosition ( ) ; if ( position != RecyclerView . NO_POSITION ) { listener . onFavourite ( ! favourited , position ) ; } }
private PatternTuple ( Pattern local , Pattern domain ) { this . local = local ; this . domain = domain ; }
private Runnable triggerRefresh = new Runnable ( ) { @ Override public void run ( ) { mChartAdapter . notifyDataSetChanged ( ) ; mHandler . postDelayed ( triggerRefresh , OpenVPNManagement . mBytecountInterval*1500 ) ; } } ;
public void onServiceConnected ( ComponentName componentName , IBinder iBinder ) { SyncthingServiceBinder binder = ( SyncthingServiceBinder ) iBinder ; mSyncthingService = binder . getService ( ) ; Stream . of ( mServiceConnectedListeners ) . forEach ( OnServiceConnectedListener : : onServiceConnected ) ; mServiceConnectedListeners . clear ( ) ; }
public void run ( ) { AppDatabase db = AppDatabase . getAppDatabase ( getActivity ( ) ) ; db . contactsDao ( ) . delete ( thiscontact ) ; ( ( MainActivity ) getActivity ( ) ) . switchFragment ( Contacts . newInstance ( ) ) ; }
public DisablePushMessagesTask ( final CheckBoxPreference checkBoxPreference ) { super ( getActivity ( ) , R . string . ApplicationPreferencesActivity_unregistering , R . string . ApplicationPreferencesActivity_unregistering_from_textsecure_messages ) ; this . checkBoxPreference = checkBoxPreference ; }
public DataIconData ( Context context ) { super ( context ) ; telephonyManager = ( TelephonyManager ) context . getSystemService ( Context . TELEPHONY_SERVICE ) ; dataListener = new DataListener ( ) ; }
public DatabaseWrapper ( Context cx ) { mContext = cx ; BookmarkDatabaseOpenHelper helper = new BookmarkDatabaseOpenHelper ( mContext ) ; mDatabase = helper . getWritableDatabase ( ) ; }
public Double getGpsLongDouble ( ) { return gpsLong != null ? Double . parseDouble ( gpsLong ) : 0 . 0 ; }
private PostCommentListingURL . Sort defaultOrder ( ) { return PrefsUtility . pref_behaviour_commentsort ( ) ; }
public final static LabelTileData getLabels ( MapTile tile ) { return ( LabelTileData ) tile . getData ( LabelLayer . LABEL_DATA ) ; }
public double getValue ( ) throws ExpressionFormatException { if ( atomType != Atom . AtomType . INVALID ) { return parser . getFuncVal ( funcName , expression . getValue ( ) ) ; } else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
public boolean onTouch ( View v , MotionEvent event ) { return StickerPreviewViewer . getInstance ( ) . onTouch ( event , stickersListView , 0 , stickersOnItemClickListener ) ; }
public BingWallpaperNetworkService getBingWallpaperNetworkService ( ) { if ( mBingWallpaperNetworkService == null ) { mBingWallpaperNetworkService = getRetrofit ( ) . create ( BingWallpaperNetworkService . class ) ; } return mBingWallpaperNetworkService ; }
public static Peer moveFrom ( Peer other ) { return new Peer ( libtremotesfJNI . moveFrom__SWIG_1 ( Peer . getCPtr ( other ) , other ) , true ) ; }
private static Class getManageAccountActivityClass ( ) { try { return Class . forName ( "eu . siacs . conversations . ui . ManageAccountActivity" ) ; } catch ( ClassNotFoundException e ) { return null ; } }
public boolean onShouldRetry ( Exception exception ) { return false ; }
public void setComments ( Map < String , WebComment > comments ) { this . comments = comments ; }
private void cancelSelection ( ) { isSelectionModeOn = false ; fragment . setSelectionMode ( false ) ; }
public CardSliderLayoutManager ( int activeCardLeft , int cardWidth , float cardsGap ) { initialize ( activeCardLeft , cardWidth , cardsGap ) ; }
public ReaderUserIdList getUserIds ( ) { ReaderUserIdList ids = new ReaderUserIdList ( ) ; for ( ReaderUser user : this ) ids . add ( user . userId ) ; return ids ; }
public void init ( ) { simpleRobot . simpleInit ( hardwareMap ) ; }
private void confirmRemoveCategory ( Category category ) { Dialogs dialogs = new Dialogs ( this ) ; dialogs . confirmation ( category . name ( ) , getString ( R . string . confirmation_remove_category ) , ( ) -> removeCategory ( category ) ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { updateAdressEditTextButtons ( ) ; }
public void run ( ) { useCaseCallback . onError ( error ) ; }
public GammaControlProfiles getGammaControl ( ) { try { if ( gammaControlProfiles == null && JSON != null ) gammaControlProfiles = new GammaControlProfiles ( JSON . getJSONArray ( "gammacontrol" ) ) ; return gammaControlProfiles ; } catch ( JSONException e ) { return null ; } }
public void setMaxSelectedPhotos ( int value , boolean order ) { maxSelectedPhotos = value ; allowOrder = order ; if ( value >= 0 && type == 1 ) { maxSelectedPhotos = 1 ; } }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . activity_resto_sandwich , container , false ) ; }
public boolean isViewFromObject ( View view , Object object ) { return object == view ; }
public static Intent makeCmdIntent ( int cmd , boolean shuffle ) { return new Intent ( MusicService . ACTION_CMD ) . putExtra ( "Control" , cmd ) . putExtra ( "shuffle" , shuffle ) ; }
private String createWhiteListRule ( String domain ) { return " @ @ || { 0 } ^$document" . replace ( " { 0 } " , domain ) ; }
public static boolean hasIntensity ( ) { return Utils . existFile ( LED_RED_INTENSITY ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return HomeFragment . TITLE ; case 1 : return HistoryFragment . TITLE ; case 2 : return ChartFragment . TITLE ; } return super . getPageTitle ( position ) ; }
public void onEvent ( PlaceDetailsErrorEvent error ) { progressView . showError ( ) ; }
public void onPause ( ) { super . onPause ( ) ; syncWakeUpTimeAndTimePicker ( ) ; }
public OpenHABWidgetListFragment getFragment ( int position ) { if ( position < fragmentList . size ( ) ) { return fragmentList . get ( position ) ; } return null ; }
public void onBtnBackClick ( ) { int current = getItem ( - 1 ) ; if ( current >= 0 ) { mViewPager . setCurrentItem ( current ) ; if ( current == 0 ) { mBackButton . setVisibility ( View . GONE ) ; } } }
public QuickSharedPreferences ( Context context ) { m_context = context ; sharedPreferences = context . getSharedPreferences ( PREFERENCES_FILE_NAME , MODE_PRIVATE ) ; }
public void onTileLoaded ( int x , int y , int sampleSize ) { mRefreshable . refresh ( ) ; }
public Builder ( final Activity activity , int themeResId ) { this ( new ActivityResourceFinder ( activity ) , themeResId ) ; }
public static void remove_file ( String file ) { Log . d ( TAG , "Removing file : " + file ) ; Shell . SU . run ( Arrays . asList ( "rm - rf " + file ) ) ; }
public void onAnimationCancel ( View view ) { if ( deltaX != 0 ) { view . setTranslationX ( 0 ) ; } if ( deltaY != 0 ) { view . setTranslationY ( 0 ) ; } }
public void onGainedAudioFocus ( ) { mAudioFocus = AudioFocus . Focused ; if ( mState == State . Playing ) { configAndStartMediaPlayer ( false ) ; } }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( SAVE_FORUM_INFOS , infosForForum ) ; outState . putInt ( SAVE_SCROLL_POSITION , mainScrollView . getScrollY ( ) ) ; }
public final static String getFileExt ( String file_name ) { if ( file_name == null ) return "" ; int dot = file_name . lastIndexOf ( " . " ) ; return dot >= 0 ? file_name . substring ( dot ) : "" ; }
public ItemSprite . Glowing glowing ( ) { return new ItemSprite . Glowing ( 0x00FFFF ) ; }
public void setLines ( int lines ) { super . setLines ( lines ) ; mMaxLines = lines ; reAdjust ( ) ; }
public SearchView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void run ( ) { NativeNotificationsUtils . dismissNotification ( GCMMessageService . ACTIONS_PROGRESS_NOTIFICATION_ID , mContext ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View fragView = inflater . inflate ( R . layout . frag_entry_detail_document , container , false ) ; ButterKnife . bind ( this , fragView ) ; return fragView ; }
private void logResponse ( DiscoverAndSearchResponse < MovieEntity > discoverMoviesResponse ) { Log . d ( LOG_TAG , "page == " + discoverMoviesResponse . getPage ( ) + " " + discoverMoviesResponse . getResults ( ) . toString ( ) ) ; }
public VotingConfirmDialog setListener ( DialogButtonClickListener mListener ) { this . mListener = mListener ; return this ; }
public String toString ( ) { return value . toPlainString ( ) + " " + energyUnit + " / " + unit ; }
private static void initFirebaseAnalytics ( ) { try { Class . forName ( "com . google . firebase . analytics . FirebaseAnalytics" ) ; isFirebaseAnalytics = true ; } catch ( ClassNotFoundException ignored ) { } isFirebaseAnalytics = false ; }
public void OnProgressUpdate ( long progress , int total ) { mProgressDialog . setProgress ( ( int ) progress ) ; mProgressDialog . setMax ( total ) ; }
public void onAdOpened ( ) { Log . d ( "Interstitial Ad Test" , "Add is Visible Now" ) ; }
public RemoteViews getLoadingView ( ) { Log . v ( DbgU . getAppTag ( ) , DbgU . getMethodName ( ) ) ; return null ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'TAURON_G11_BILL'" ; db . execSQL ( sql ) ; }
public SimlarService getService ( ) { return mService ; }
public String getTeacherAN ( ) { if ( teacherAN == null ) teacherAN = GGApp . deleteNonAlphanumeric ( teacher ) ; return teacherAN ; }
public void setOnSiteClickListener ( OnSiteClickListener listener ) { mSiteSelectedListener = listener ; }
public boolean adjacent ( @ NotNull Char chr ) { return level ( ) . adjacent ( getPos ( ) , chr . getPos ( ) ) ; }
public int getFlatPosition ( long packedPosition ) { if ( mAdapter == null ) { return RecyclerView . NO_POSITION ; } return mAdapter . getFlatPosition ( packedPosition ) ; }
public String getVideoBitratePref ( ) { return sharedPreferences . getString ( PreferenceKeys . getVideoBitratePreferenceKey ( ) , "default" ) ; }
public void onClick ( View textView ) { if ( finalTopic . equalsIgnoreCase ( "sulfide" ) ) { DialogFragment newFragment = new SulfideDialogFragment ( ) ; newFragment . show ( context . getSupportFragmentManager ( ) , "sulfideDialog" ) ; } }
public void onDialogClosed ( boolean positiveResult ) { if ( positiveResult ) { final int color = mPicker . getColor ( ) ; if ( preference . callChangeListener ( color ) ) { preference . setColor ( color ) ; } } }
public void onChildViewAttachedToWindow ( View view ) { if ( onItemClickListener != null ) { view . setOnClickListener ( mOnClickListener ) ; } if ( onItemLongClickListener != null ) { view . setOnLongClickListener ( mOnLongClickListener ) ; } }
private OnClickListener joinMuc = new OnClickListener ( ) { @ Override public void onClick ( View v ) { activity . xmppConnectionService . joinMuc ( conversation ) ; } } ;
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . mSupportCommentCardView . setSupportComment ( mSupportComments . get ( position ) ) ; }
public static boolean removeFromQueue ( Song song ) { if ( musicService != null ) { musicService . removeSong ( song ) ; return true ; } return false ; }
public void setNumTotalCorrect ( double numTotalCorrect ) { this . numTotalCorrect = numTotalCorrect ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; toggle . onConfigurationChanged ( newConfig ) ; }
public void pickBonus ( ) { mDisabledTimeout = DISABLED_TIMEOUT ; }
public void onSortSelected ( final UserCommentListingURL . Sort order ) { }
public Date getDbUpdateDate ( ) { return ( getDbConfig ( ) == null ) ? null : getDbConfig ( ) . dbUpdateDate ; }
public void onBackPressedCancelTransaction ( ) { Toast . makeText ( PayTMActivity . this , "Back pressed . Transaction cancelled" , Toast . LENGTH_LONG ) . show ( ) ; }
public Typeface getRobotoSlabRegular ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/RobotoSlab - Regular . ttf" ) ; }
public AboutBuilder setName ( int text ) { return setName ( context . getString ( text ) ) ; }
public void run ( ) { UploadService . sanitizeMediaUploadStateForSite ( mMediaStore , mDispatcher , selectedSite ) ; }
public void onBookAdded ( String [ ] path , boolean refreshdrawer ) { utilsHandler . addBookmark ( path [ 0 ] , path [ 1 ] ) ; if ( refreshdrawer ) refreshDrawer ( ) ; }
public void stop ( ) { mContext = null ; mViewListener = null ; compositeDisposable . clear ( ) ; }
public long getItemId ( int position ) { return mCursor . moveToPosition ( position ) ? mCursor . getLong ( mIdColumnIndex ) : - 1 ; }
private static String getText ( List < String > results ) { if ( results . size ( ) > 0 ) { return results . get ( 0 ) ; } return "" ; }
public void restoreSelfArgs ( Bundle args ) { if ( avatarUpdater != null ) { avatarUpdater . currentPicturePath = args . getString ( "path" ) ; } }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseUpdateTrackPosition . Builder getResponseUpdateTrackPositionBuilder ( ) { bitField0_ | = 0x00200000 ; onChanged ( ) ; return getResponseUpdateTrackPositionFieldBuilder ( ) . getBuilder ( ) ; }
private RangeIntegerWidget createWidget ( FormEntryPrompt prompt ) { return new RangeIntegerWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) ) ; }
public void testFilter ( ) { Assert . assertTrue ( solo_ . waitForActivity ( "PodplayerActivity" , INIT_SLEEP ) ) ; solo_ . pressSpinnerItem ( 0 , 2 ) ; solo_ . sleep ( 3000 ) ; Spoon . screenshot ( solo_ . getCurrentActivity ( ) , "filter" ) ; }
public void afterTextChanged ( Editable s ) { getHeader ( getRelativePosition ( ) . section ( ) ) . setTitle ( s . toString ( ) ) ; onSectionsChanged ( ) ; }
public void onPause ( ) { super . onPause ( ) ; lazyAds . onPause ( this ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . diagnostic , menu ) ; }
private synchronized static ApplicationComponent getApplicationBuilder ( ) { if ( applicationBuilder == null ) { applicationBuilder = createApplicationBuilder ( ) ; } return applicationBuilder ; }
public PostDeletedEvent ( int postId ) { this . postId = postId ; }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable String label , @ Nullable Intent intent ) { return addAction ( icon , label , util . clickIntent ( intent ) ) ; }
public T getResponse ( ) { return items ; }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new level3 ( game ) ) ; }
public void setChanged_date ( String changed_date ) { this . _changed_date = changed_date ; }
public void setDecryptedUrl ( String value ) { this . decryptedUrl = value ; }
public void resume ( ) { DisplayPreviewInteractor interactor = new DisplayPreviewInteractorImpl ( mExecutor , mMainThread , this , mPreviewRepository ) ; interactor . execute ( ) ; }
public void handleUndo ( ) { GlobalValues . fillColor = currentColor ; if ( layer != null ) { ColorSetVisitor csv2 = new ColorSetVisitor ( currentColor , 1 ) ; layer . accept ( csv2 ) ; } }
private int getAddressBookCount ( ) { mDbOpenHelper = new DbOpenHelper ( this ) ; mDbOpenHelper . open ( Constants . DB . ADDRESS_BOOK ) ; int count = mDbOpenHelper . getAddressCount ( ) ; return count ; }
public JsonNode getJsonNode ( String name ) { return o . path ( name ) ; }
public String getFormattedLabel ( int index ) { if ( index < 0 || index >= mEntries . length ) return "" ; else return getValueFormatter ( ) . getAxisLabel ( mEntries [ index ] , this ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_upload_file . TLdeserialize ( stream , constructor , exception ) ; }
public ImageView getImageView ( ) { return imageView ; }
public XMLPrefsSave [ ] delete ( ) { return null ; }
public void onBackPressed ( ) { if ( mWebView . canGoBack ( ) ) { mWebView . goBack ( ) ; } else { super . onBackPressed ( ) ; } }
public com . google . protobuf . Any getEvidence ( ) { if ( evidenceBuilder_ == null ) { return evidence_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : evidence_ ; } else { return evidenceBuilder_ . getMessage ( ) ; } }
public void setTitle ( String title ) { title_ = title ; }
public void onBillingError ( int errorCode , Throwable error ) { Toast . makeText ( this , getResources ( ) . getString ( R . string . settings_donation_error ) , Toast . LENGTH_LONG ) . show ( ) ; finish ( ) ; }
public void onClick ( View v ) { startSearchActivity ( ) ; }
public long getUpdateInterval ( ) { return OWNED_STATE_UPDATE_INTERVAL ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . myunittesting" , appContext . getPackageName ( ) ) ; }
public void onRender ( Canvas canvas , RectF plotArea , Series series , Formatter formatter , RenderStack stack ) throws PlotRenderException { }
public void accept ( BrokerEntity brokerEntity ) throws Exception { broker = brokerEntity ; setTitle ( broker . getNickName ( ) + " - subscribed topics" ) ; statusTV . setText ( broker . getStatus ( ) ) ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitPlusMinusNumericExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
private void ensureGlow1 ( RecyclerView rv ) { if ( mGlow1 == null ) { mGlow1 = new EdgeEffectCompat ( rv . getContext ( ) ) ; } updateGlowSize ( rv , mGlow1 , mGlow1Dir ) ; }
public void post201802 ( ) { assertTrue ( isInRange ( getHeight ( "2018 - 02 - 19" ) , 1 , 21165 ) ) ; }
public CategoryAdapter ( CategoryPresenter p ) { super ( ) ; presenter = p ; items = new ArrayList <> ( ) ; }
public void deleteAll ( ) { List < Instance > instances = getAll ( ) ; instancesDatabaseProvider . getWriteableDatabase ( ) . delete ( INSTANCES_TABLE_NAME , null , null ) ; for ( Instance instance : instances ) { deleteInstanceFiles ( instance ) ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; switch ( id ) { case android . R . id . home : finish ( ) ; return true ; default : return false ; } }
public void onClick ( DialogInterface dialog , int which ) { dialog . cancel ( ) ; }
public Long getPartOfMealId ( ) { return partOfMealId ; }
public void setResponder ( Jid responder ) { Preconditions . checkArgument ( responder . isFullJid ( ) , "responder should be a full JID" ) ; findChild ( "jingle" , Namespace . JINGLE ) . setAttribute ( "responder" , responder . toEscapedString ( ) ) ; }
public int getReadingElementId ( ) { return mReadingElementId ; }
public < T > T getParameter ( String key , Class < T > type ) { return navigationParametersStore . pop ( key , type ) ; }
public void resetCounts ( @ NonNull CancelListener cancelListener ) { resetCounts ( true ) ; }
public QuranTranslationPageLayout ( Context context ) { super ( context ) ; isFullWidth = true ; }
public void show ( long value ) { mDelaySpinner . setValue ( value ) ; mPopup . showAtLocation ( mAnchor , Gravity . TOP , mAnchor . getRight ( ) - 60 , mAnchor . getTop ( ) ) ; }
public void addBasePackage ( String name , String [ ] names ) { _bases . put ( name , names ) ; }
public void setSongSortOrder ( final String sortOrder ) { final SharedPreferences . Editor editor = mPreferences . edit ( ) ; editor . putString ( SONG_SORT_ORDER , sortOrder ) ; editor . apply ( ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; image = ( ImageView ) itemView . findViewById ( R . id . image ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { LayoutInflater inflater = LayoutInflater . from ( parent . getContext ( ) ) ; return new CurrencyAdapter . ViewHolder ( inflater . inflate ( R . layout . transaction_currency_item , parent , false ) ) ; }
public FakeNotificationCompatBuilder ( Notification returnNotification ) { super ( null , null ) ; this . returnNotification = returnNotification ; }
public void deleteAll ( ) { SQLiteDatabase db = App . dbHelper . getWritableDatabase ( ) ; db . delete ( CalculationsTable . TABLE_NAME_CALCULATIONS , null , null ) ; }
private synchronized void removePopup ( ) { if ( windowManager != null ) { try { windowManager . removeView ( viewGroup ) ; } catch ( Exception e ) { } } }
public void onAccuracyChanged ( Sensor sensor , int accuracy ) { if ( sensor . getType ( ) == Sensor . TYPE_ACCELEROMETER ) { currentConfiguration . putInt ( ACCURACY , accuracy ) ; } }
public Uri createOutputVideoSAF ( ) throws IOException { last_video_file_saf = storageUtils . createOutputMediaFileSAF ( StorageUtils . MEDIA_TYPE_VIDEO , "" , false , "mp4" , new Date ( ) ) ; return last_video_file_saf ; }
private void exitEpubVerification ( ) { currentPageIndex = DEFAULT_FIRST_PAGE ; closeEpub ( ) ; removeFiles ( ) ; finish ( ) ; }
public void handlePauseRequest ( ) { LogHelper . d ( TAG , "handlePauseRequest : mState = " + mPlayback . getState ( ) ) ; if ( mPlayback . isPlaying ( ) ) { mPlayback . pause ( ) ; mServiceCallback . onPlaybackStop ( ) ; } }
public static String getHomeUrl ( Context context , String from ) { return getForwardLink ( context , BuildConfig . gihubUrl , from ) ; }
public Map < Long , JSONObject > getBlogSettings ( ) { return mBlogSettings ; }
private void verifyACRANotDisabled ( ) { assertFalse ( "ACRA was not enabled correctly" , AnkiDroidApp . getSharedPrefs ( InstrumentationRegistry . getTargetContext ( ) ) . getBoolean ( ACRA . PREF_DISABLE_ACRA , false ) ) ; }
public void run ( ) { if ( savedSampleId == savedSampleIdInRunnable ) { Log . d ( TAG , "Finished loading all sounds" ) ; onLoadFinished ( ) ; } else { savedSampleIdInRunnable = savedSampleId ; intervalTimer . postDelayed ( this , 100 ) ; } }
public IqPacket retrieveAvatarMetaData ( String to ) { IqPacket packet = retrieve ( "urn : xmpp : avatar : metadata" , null ) ; if ( to != null ) { packet . setTo ( to ) ; } return packet ; }
public static AddToPlaylistDialog create ( ArrayList < Song > songs ) { AddToPlaylistDialog dialog = new AddToPlaylistDialog ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "songs" , songs ) ; dialog . setArguments ( args ) ; return dialog ; }
public void stopPreview ( ) { try { cameraCaptureSession . stopRepeating ( ) ; } catch ( CameraAccessException e ) { notifyError ( e . getLocalizedMessage ( ) ) ; } }
public void onClick ( View v ) { MediaControllerCompat . TransportControls controls = MediaControllerCompat . getMediaController ( FullScreenPlayerActivity . this ) . getTransportControls ( ) ; controls . skipToNext ( ) ; }
public static void prepareForDay ( Intent intent , Date showDay ) { intent . putExtra ( KEY_SHOW_DAY , showDay ) ; }
public boolean isEnabled ( int position ) { return ( mAlarmPlaylists . get ( position ) . getId ( ) != null ) ; }
public void onRemoveSuccess ( ) { AnswersProxy . get ( ) . logEvent ( "Remove Success" ) ; Timber . d ( "Remove success . " ) ; if ( isFinishing ( ) ) return ; stopProgress ( ) ; fetchBackups ( ) ; }
public void updateMeasureState ( TextPaint paint ) { applyCustomTypeFace ( paint , newType ) ; }
private void prevPage ( ) { isPagingDown = false ; if ( webView . canScrollVertically ( - 1 ) ) { webView . pageUp ( false ) ; } else { isPagingUp = true ; showUri ( book . getPreviousSection ( ) ) ; } mkFull ( ) ; }
public int getOpen ( ) { return open ; }
public void onDestroy ( ) { super . onDestroy ( ) ; unregisterScreenStateReceiver ( ) ; if ( isDebug ) Log . d ( LOG_TAG , "ScreenStateService Destroy" ) ; }
private void resetCurrentTab ( ) { WellnessIO . getSharedPref ( this ) . edit ( ) . putInt ( KEY_DEFAULT_TAB , TAB_STORYBOOKS ) . apply ( ) ; }
public void onFailure ( Throwable t ) { myView . ErroResquest ( t ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( MainActivity . this , CreateNote . class ) ; startActivityForResult ( intent , 201 , ActivityOptions . makeSceneTransitionAnimation ( MainActivity . this ) . toBundle ( ) ) ; }
public void sendSuccessAndClose ( ) { if ( isAdded ( ) ) { getActivity ( ) . setResult ( Activity . RESULT_OK ) ; getActivity ( ) . finish ( ) ; } }
private int getPointY ( int cy ) { return Math . round ( ( cy - mTopRow ) * mRenderer . mFontLineSpacing ) ; }
public InfoViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new InfoViewHolder ( ViewUtils . inflate ( parent , R . layout . info_card ) ) ; }
public void copyVector ( Vector vector ) { this . x = vector . x ; this . y = vector . y ; this . set = vector . set ; setAbsValue ( ) ; }
public void run ( ) { putUsers ( res . users , fromCache ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . userPhotosLoaded , uid , offset , count , fromCache , classGuid , res . photos ) ; }
public void unload ( ) { if ( pads != null && pads . length >= 21 ) { for ( Pad pad : pads ) { if ( pad != null ) { pad . unload ( ) ; } } } }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . intents . sapne" , appContext . getPackageName ( ) ) ; }
public final void notifyDestroyed ( ) { ContextHolder . notifyDestroyed ( ) ; }
public static int getLastAppVersionCode ( ) { return getInt ( PrefKey . LAST_APP_VERSION_INDEX ) ; }
public DrawerBuilder withStickyFooterDivider ( Boolean stickyFooterDivider ) { this . mStickyFooterDivider = stickyFooterDivider ; return this ; }
public String [ ] getClipBoardOutput ( ) { return ClipBoardOutput ; }
public static void createAllTables ( Database db , boolean ifNotExists ) { LancherInfoDao . createTable ( db , ifNotExists ) ; AppInfoDao . createTable ( db , ifNotExists ) ; }
public WavefrontLoaderTask ( final Activity parent , final Uri uri , final Callback callback ) { super ( parent , uri , callback ) ; }
private void updateDate ( ) { DateFormat df = new DateFormat ( ) ; this . date . setText ( df . format ( myCalendar . getTime ( ) ) ) ; }
private void resetBonus ( ) { mRacer . getVehicleRenderer ( ) . removeRenderer ( mBonusRenderer ) ; mPool . free ( this ) ; mRacer . resetBonus ( ) ; }
public void onClick ( View view ) { showProbingHelp ( false ) ; }
public static ViewPager viewPager ( Activity activity , PagerAdapter adapter ) { ViewPager viewPager = ( ViewPager ) activity . findViewById ( R . id . overview_view_pager ) ; viewPager . setAdapter ( adapter ) ; return viewPager ; }
public static DatabaseFactory getInstance ( Context context ) { synchronized ( lock ) { if ( instance == null ) instance = new DatabaseFactory ( context ) ; return instance ; } }
private void destroyTimer ( ) { try { synchronized ( timerSync ) { if ( timeTimer != null ) { timeTimer . cancel ( ) ; timeTimer = null ; } } } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public UploadObject [ ] newArray ( int size ) { return new UploadObject [ size ] ; }
public void start ( Attributes attributes ) { mCurrentPost . setEdited ( Integer . parseInt ( attributes . getValue ( Post . Xml . MESSAGE_EDITED_ATTRIBUTE ) ) ) ; }
public static Mochilo get ( Context context ) { return ( ( Mochilo ) context . getApplicationContext ( ) ) ; }
public void i ( Throwable t , String tag , String message , Object . . . args ) { HyperLog . i ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public MercatorCoordinateService ( ) { Logging . debug ( "MercatorCoordinateService instantiated" ) ; humppilaMercatorXY = convertLocationToMercatorXY ( humppila ) ; }
private static void writeSimpleSetterFuncBody ( JavaWriter writer , String type , String prefName ) throws IOException { writer . emitStatement ( "getPreferences ( ) . edit ( ) . %s ( \"%s\" , %s ) . apply ( ) " , type , prefName , "value" ) ; }
public void onLongPress ( @ NonNull MotionEvent e ) { GestureController . this . onLongPress ( e ) ; }
public void setVisibleYRange ( float minYRange , float maxYRange , AxisDependency axis ) { float minScale = getDeltaY ( axis ) / minYRange ; float maxScale = getDeltaY ( axis ) / maxYRange ; mViewPortHandler . setMinMaxScaleX ( minScale , maxScale ) ; }
public int sendRequest ( TLObject object , RequestDelegate completionBlock , int flags , int connetionType ) { return sendRequest ( object , completionBlock , null , flags , DEFAULT_DATACENTER_ID , connetionType , true ) ; }
public void setTicketElevation ( float elevation ) { if ( ! isJellyBeanAndAbove ( ) ) { Log . w ( TAG , "Ticket elevation only works with Android Jelly Bean and above" ) ; return ; } setShadowBlurRadius ( elevation ) ; initElements ( ) ; }
public void onImageAvailable ( ImageReader reader ) { try { backgroundHandler . post ( new ImageSaver ( reader . acquireNextImage ( ) , getActivity ( ) ) ) ; } catch ( IllegalStateException e ) { Timber . e ( e ) ; } }
public Alert ( Activity activity ) { this . activity = activity ; }
private void setupData ( ) { adapter = new RecycleViewAdapterLeader ( leaderBoardObjs , getContext ( ) ) ; rv . setAdapter ( adapter ) ; rv . setLayoutManager ( new LinearLayoutManager ( getContext ( ) ) ) ; }
private static int getTextOffset ( String text , Paint paint , int width ) { float textWidth = paint . measureText ( text ) ; return ( int ) ( textWidth/2f ) ; }
public AndroidDeviceVerifier ( String apiKey , String signatureToVerify ) { this . apiKey = apiKey ; this . signatureToVerify = signatureToVerify ; }
public Location getLastLocation ( ) { if ( ! googleApiClient . isConnected ( ) ) { googleApiClient . blockingConnect ( ) ; } return LocationUtils . sanitizeAccuracy ( fusedLocationProviderApi . getLastLocation ( googleApiClient ) ) ; }
public void jogaCarta ( Jogador j , Carta c ) { enviaLinha ( "J " + c + ( c . isFechada ( ) ? " T" : "" ) ) ; }
public void run ( ) { Intent i = new Intent ( SplashScreen . this , IntroActivity . class ) ; startActivity ( i ) ; finish ( ) ; }
private void hidetext ( ) { Utility . hideSoftKeyboard ( ( Activity ) DrawImageActivity . this ) ; inputTextEt . setVisibility ( INVISIBLE ) ; }
public void setY ( int y ) { this . _y = y ; }
public Class getViewType ( ) { return RedditPostView . class ; }
public void clickImage ( String context ) { if ( Collect . allowClick ( getClass ( ) . getName ( ) ) ) { launchDrawActivity ( ) ; } }
public static Tuning getCurrentTuning ( ) { return getTuningFromPosition ( tuningPosition ) ; }
public void onClick ( SweetAlertDialog sDialog ) { sDialog . dismissWithAnimation ( ) ; }
public static TrackerBlocklist getInstance ( Context c ) { if ( instance == null ) { instance = new TrackerBlocklist ( c ) ; } return instance ; }
public DatabaseReference getDatabaseReference ( ) { if ( mDatabase == null ) { if ( mFirebaseDatabase == null ) { mFirebaseDatabase = FirebaseDatabase . getInstance ( ) ; } mDatabase = mFirebaseDatabase . getReference ( "message" ) ; } return mDatabase ; }
public static synchronized FluentQuery where ( String . . . conditions ) { FluentQuery cQuery = new FluentQuery ( ) ; cQuery . mConditions = conditions ; return cQuery ; }
public void showAsyncDialogFragment ( AsyncDialogFragment newFragment ) { this . dialogFragment = newFragment ; super . showAsyncDialogFragment ( newFragment ) ; }
public void perform ( UiController uiController , View view ) { uiController . loopMainThreadForAtLeast ( msec ) ; }
public void doesDetectSingleSpaceError ( ) { List < SelectChoice > items = Lists . newArrayList ( new SelectChoice ( "label" , "with space" ) ) ; subject . check ( items ) ; assertEquals ( subject . hasInvalidValues ( ) , true ) ; }
public InternalMetaData ( ) { metakeys = new ArrayList ( ) ; metadata = new HashMap ( ) ; }
private void getForumsFromDatabase ( ) { mForums = new Select ( ) . from ( MoodleForum . class ) . where ( "courseid = ?" , mCourseId ) . execute ( ) ; }
public String getId ( ) { return this . getClass ( ) . getName ( ) ; }
public Fragment getItem ( int position ) { return getDetailFragmentForNote ( mNoteList . get ( position ) , position ) ; }
public EditText getSearchEdit ( ) { return searchEdit ; }
public int getFormattedPubDate ( ) { return formattedPubDate ; }
private SecondaryEditorAction getSecondaryAction ( ) { return SecondaryEditorAction . getSecondaryAction ( mEditPostRepository . getStatus ( ) , UploadUtils . userCanPublish ( mSite ) ) ; }
public void addEventListener ( KeyChainEventListener listener , Executor executor ) { basicKeyChain . addEventListener ( listener , executor ) ; }
public void intercept ( RequestFacade request ) { for ( Map . Entry < String , String > header : Config . HEADERS . entrySet ( ) ) { request . addHeader ( header . getKey ( ) , header . getValue ( ) ) ; } }
public void setStatus ( String status ) { this . status = StringUtils . notNullStr ( status ) ; }
private static boolean hasIcon ( @ NonNull final String keySpec ) { return keySpec . startsWith ( KeyboardIconsSet . PREFIX_ICON ) ; }
public int getImage ( ) { return image ; }
public void onShow ( DialogInterface dialog ) { InputMethodManager imm = ( InputMethodManager ) context . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; imm . showSoftInput ( oldPassInput , InputMethodManager . SHOW_IMPLICIT ) ; }
public static StorageChooser directoryChooser ( Activity activity ) { return storageChooser ( StorageChooser . DIRECTORY_CHOOSER , ( FragmentActivity ) activity ) ; }
public ShuffleButtonSongAdapter ( AppCompatActivity activity , ArrayList < Song > dataSet , @ LayoutRes int itemLayoutRes , boolean usePalette , @ Nullable CabHolder cabHolder ) { super ( activity , dataSet , itemLayoutRes , usePalette , cabHolder ) ; }
public void onPause ( ) { super . onPause ( ) ; isUIVisible = false ; }
public int getCount ( ) { return fileObjects . size ( ) ; }
public void checkServerTrusted ( X509Certificate [ ] chain , String authType ) throws CertificateException { for ( X509Certificate aChain : chain ) { android . util . Log . d ( "X509" , aChain . getSubjectDN ( ) . toString ( ) ) ; } }
public DisconnectThread ( AbstractXMPPConnection conn ) { mConn = conn ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . friendlyplaces . friendlyapp" , appContext . getPackageName ( ) ) ; }
public void setFoldShading ( FoldShading shading ) { mTopPart . setFoldShading ( shading ) ; mBottomPart . setFoldShading ( shading ) ; }
public void setUpAndLogIn ( ) throws InterruptedException { nowNavigateRightTimes ( 2 ) ; HelperCode . signInUserTimhot ( ) ; nowNavigateRight ( ) ; }
public RankAdapter ( ArrayList < RankerDTO > rankerList ) { this . mRankerList = rankerList ; }
public DistrictsAdapter ( ArrayList < District > districts , OnDistrictSelectedListener onDistrictSelectedListener ) { this . allDistricts = districts ; this . districts = districts ; this . onDistrictSelectedListener = onDistrictSelectedListener ; }
private final BroadcastReceiver mFinishedCalculatingFancyNameReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { String workoutName = intent . getExtras ( ) . getString ( CalcExtremumValuesTask . FANCY_NAME ) ; editExportName . setText ( workoutName ) ; } } ;
public WindowInsets onApplyWindowInsets ( View v , WindowInsets insets ) { lastInsets = insets ; container . requestLayout ( ) ; return insets . consumeSystemWindowInsets ( ) ; }
public int hashCode ( ) { int result = id ; result += 31 * title . hashCode ( ) ; result += 31 * summary . hashCode ( ) ; result += 31 * color ; return result ; }
public MarkdownParagraphGroup getSelfText ( ) { return mSelfText ; }
public void setSortingOrder ( String order ) { CacheUtil . setCache ( getActivity ( ) , getCategory ( ) + TagsUtil . SORT_ORDER , order ) ; updateDocumentList ( ) ; }
private Model _new ( Models mm , String name ) { return mFun . create ( mm , name ) ; }
public static String convertToString ( @ Nullable Long d ) { return d != null? d . toString ( ) : EMPTY_STRING ; }
public void onClick ( View view ) { Intent intent = new Intent ( ListActivity . this , HistoryActivity . class ) ; startActivityForResult ( intent , HISTORY_FOR_RESULT ) ; }
public void update ( ProfileLayer layer ) { EventBus . getDefault ( ) . post ( new ProfileLayerEvent . ProfileLayerUpdated ( layer ) ) ; }
public void onStateChanged ( ) { if ( prefsSmartStopwatch && TimeManager . INSTANCE . isRunning ( ) && ! stopwatchHelper . isRunning ( ) ) { play ( ) ; } }
public void onStopTrackingTouch ( SeekBar seekBar ) { <<<<<<< Updated upstream }
public void updateProgress ( long i ) { this . mProgress = ( int ) i ; mHttpConnectionManager . updateConversationUi ( false ) ; }
public CalendarQueryRow setEventLocation ( Object obj ) { return setColumn ( CalendarContract . Instances . EVENT_LOCATION , obj ) ; }
public Maybe < Event > create ( Event entity ) { return cacheManager . create ( entity ) ; }
public CoreConfigurationBuilder getAcraCoreConfigBuilder ( ) { return acraCoreConfigBuilder ; }
private void deleteFiles ( UserInfoAsync . Info info ) { new DeleteAsync ( mContext , mDeleteCallback , info ) . execute ( getFolders ( info ) ) ; }
public void showEditTagUi ( Tag tag ) { navigator . navigateToTagsEdit ( getContext ( ) , tag ) ; }
public synchronized long getTotalSize ( ) { return this . totalSize ; }
public void presentFragment ( SupportFragment fragment , boolean animated ) { if ( isNavigationControllerInit ( ) ) { mNavigationController . presentFragment ( fragment , animated ) ; } }
public boolean isTimerRunning ( ) { return isTimerRunning ; }
public void onBindViewHolder ( BookViewHolder holder , int position ) { holder . setBook ( data . get ( position ) ) ; }
public void pause ( ) { super . pause ( ) ; log . i ( "pause" ) ; }
public static final DrinkSelection getBeerSelection ( Date time ) { DrinkSelection sel = new DrinkSelection ( getBeer ( ) , getPint ( ) , time ) ; return sel ; }
public int getItemCount ( ) { if ( converters != null ) return converters . size ( ) ; return 0 ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "UPDATE `account` SET poll_interval = 24" ) ; }
private boolean isLinkInternal ( String url ) { for ( String rule : WebViewConfig . LINKS_OPENED_IN_INTERNAL_WEBVIEW ) { if ( url . contains ( rule ) ) return true ; } return false ; }
public Intent getDeviceActivityIntent ( Context context ) { return ChameleonMiniActivity . getStartActivityIntent ( context , this ) ; }
public Config setTextTypeface ( @ Nullable Typeface textTypeface ) { this . textTypeface = textTypeface ; return this ; }
public void loadMenuSceneFromCreditsScene ( ) { setScene ( loadingScene ) ; endSceneService ( creditsSceneService ) ; startSceneService ( menuSceneService ) ; }
public void onClick ( View view ) { AppList . getNew ( getApplicationContext ( ) , AllAppsList , 0 ) ; }
public void multiplicationMedalsOftenEnough ( ) { assertFrequentEnoughMedals ( GameType . MULTIPLICATION ) ; }
public void economyCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "economy" ) ; }
private void getListIfUpdatedOnServer ( ) { Log . v ( LOG_TAG , "getListIfUpdatedOnServer ( ) " ) ; getUserInfo ( ) ; }
public MainMenuPage assertProjectIcon ( String projectIcon , String expectedBackgroundColor ) { onView ( allOf ( hasDescendant ( withText ( projectIcon ) ) , withId ( R . id . projects ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public PresentationSpeakerDTO getSpeakerRole ( ) { return speakerRole ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . BRACKET_CLOSE ) ; }
public static User createNewUser ( User newUser ) { if ( getUserFromUserName ( newUser . username , newUser . password ) != null ) { return null ; } newUser . save ( ) ; return newUser ; }
public static void runRootCommand ( Command command ) throws IOException , TimeoutException , RootDeniedException { Shell . startRootShell ( ) . add ( command ) ; }
public boolean onInterceptTouchEvent ( MotionEvent ev ) { if ( ! mScrollable ) return false ; else return super . onInterceptTouchEvent ( ev ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( LoginListActivity . this , HistoryActivity . class ) ) ; }
public void run ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR2 ) { mBluetoothLeService . connect ( mRemoteDeviceAddress ) ; } }
public void start ( ) { PhotoRepository photoRepository = new PhotoRepository ( getObserver ( ) ) ; mViewListener = ( ViewContractListener ) mContext ; mViewListener . updateProgress ( true ) ; photoRepository . initPhotoRequest ( ) ; }
public final void setTime ( Date time ) { this . time = time ; }
public boolean at ( float x , float y ) { return mRectShape . contains ( x , y ) ; }
public void updateConnections ( RestApi api ) { for ( int i = 0 ; i < getCount ( ) ; i ++ ) { api . getConnections ( this ) ; } }
public void onFailure ( Call < ResponseMateriDetail > call , Throwable t ) { Log . e ( TAG , t . toString ( ) ) ; }
public void onServiceDisconnected ( ComponentName name ) { mPlaybackService = null ; if ( mNotifier != null ) { mNotifier . onDisconnect ( ) ; } }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromTouch ) { mTargetAngleSeekBarValue . setText ( String . format ( "% . 2f" , ( float ) progress / 100 . 0f - 30 . 0f ) ) ; }
public static boolean isAudio ( String url ) { return url . endsWith ( " . mp3" ) || url . endsWith ( " . ogg" ) || url . endsWith ( " . m3u" ) || url . endsWith ( " . wav" ) ; }
public void onAboutClicked ( ) { eventsSubject . onNext ( new Events . GetEtdEvent ( ClickedItemType . ABOUT ) ) ; }
private double sqkmToacre ( double num ) { return num * 247 . 105 ; }
public void onClick ( RecyclerViewItem item ) { showTunables ( IO . getScheduler ( storage ) , IO . geIOSched ( storage ) ) ; }
public void onPlayingMetaChanged ( ) { updateCurrentSong ( ) ; updateIsFavorite ( ) ; updateQueuePosition ( ) ; }
public Scheduler computation ( ) { return rx . schedulers . Schedulers . computation ( ) ; }
public static long getEpochSeconds ( ) { return System . currentTimeMillis ( ) / 1000l ; }
public Observable < SongsResponse > manageSongs ( long page , String artistQuery , String titleQuery ) { return songsService . manageSongs ( page , PAGE_SIZE , artistQuery , titleQuery ) ; }
public Class < ? extends DataRenderer > getRendererClass ( ) { return LineAndPointRenderer . class ; }
public void onBindViewHolder ( RecyclerView . ViewHolder viewHolder ) { ( ( RedditInboxItemView ) viewHolder . itemView ) . reset ( InboxListingActivity . this , mChangeDataManager , mTheme , mItem ) ; }
public void onViewAttachedToWindow ( VH holder ) { onViewAttachedToWindow ( holder , holder . getItemViewType ( ) ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mRecyclerView . setAdapter ( null ) ; }
public String convertToJson ( ) { if ( jsonString . isEmpty ( ) ) { jsonString = JSONManager . getGson ( ) . toJson ( payload ) ; } return jsonString ; }
public PreferenceUtil ( @ NonNull final Context context ) { mPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; }
private static TetroidClipboard getInstance ( ) { if ( mInstance == null ) { mInstance = new TetroidClipboard ( ) ; } return mInstance ; }
public IqPacket generateGetBlockList ( ) { final IqPacket iq = new IqPacket ( IqPacket . TYPE . GET ) ; iq . addChild ( "blocklist" , Xmlns . BLOCKING ) ; return iq ; }
public void updateCurrentSong ( CardPlayerFragment fragment , Song song ) { currentSong = song ; currentSongViewHolder . title . setText ( song . title ) ; currentSongViewHolder . text . setText ( song . artistName ) ; }
public Number getYVal ( PointF point ) { return getGraph ( ) . getYVal ( point ) ; }
public boolean onUnbind ( Intent intent ) { serviceInUse = false ; if ( status . equals ( PlaybackStatus . IDLE ) ) stopSelf ( ) ; return super . onUnbind ( intent ) ; }
public void setCommunityDetails ( CommunityModel communityModel ) { this . mCommunity = communityModel ; setCommunityImage ( CommunityUtils . getCommunityIcon ( communityModel . getCommunityId ( ) ) ) ; setCommunityTitle ( mCommunity . getmName ( ) ) ; }
public synchronized boolean obtain ( ) { if ( keeping . get ( ) ) { return false ; } else { keeping . set ( true ) ; return true ; } }
public boolean onPreDraw ( ) { listView . getViewTreeObserver ( ) . removeOnPreDrawListener ( this ) ; fixLayoutInternal ( ) ; return false ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { mDumbness = progress ; updateLabels ( ) ; }
public com . coinomi . core . protos . Protos . Key . Builder getSeedBuilder ( ) { bitField0_ | = 0x00000002 ; onChanged ( ) ; return getSeedFieldBuilder ( ) . getBuilder ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . share , menu ) ; return true ; }
public void setColumnValues ( List < ColumnValues > columnValues ) { this . columnValues = columnValues ; }
public static com . coinomi . core . protos . Protos . AddressStatus parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public String getEventKey ( ) { return mEventKey ; }
public void onPause ( ) { super . onPause ( ) ; mapView . onPause ( ) ; }
public void setPaintBackground ( @ ColorRes int color ) { paintBackground . setColor ( ContextCompat . getColor ( getContext ( ) , color ) ) ; invalidate ( ) ; }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( DatabaseConstants . SQL_CREATE_TABLE_USER ) ; db . execSQL ( DatabaseConstants . SQL_CREATE_TABLE_REPO ) ; }
public static Boolean getPrefAllowCellData ( ) { return prefAllowCellData ; }
private void showDialogPermission ( ) { PermissionDialog permissionDialog = new PermissionDialog ( ) ; permissionDialog . show ( mFragmentManager , "Permission Dialog" ) ; }
public boolean isNavigationViewSavedStateMissing ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . M && Build . VERSION . SDK_INT <= Build . VERSION_CODES . O_MR1 ; }
public void setDb ( LogicDataBase db ) { this . db = db ; }
public void onHomeClicked ( ) { if ( currentlySelected == homeButton ) { return ; } currentlySelected . setTextColor ( darkGray ) ; currentlySelected = homeButton ; homeButton . setTextColor ( blue ) ; listener . onNavItemSelected ( R . id . home ) ; }
public boolean hasAttachments ( ) { return message != null && message . hasAttachments ( ) ; }
public final void animateBackgroundHide ( ) { this . _animateBackground = false ; invalidate ( ) ; }
public void setUserName ( String userName ) { this . userName = userName ; }
private void initRepeatTimePrefs ( ) { binding . repeatIntervalPrefs . setValue ( mPrefs . getNotificationRepeatTime ( ) ) ; binding . repeatIntervalPrefs . setOnClickListener ( mRepeatTimeClick ) ; binding . repeatIntervalPrefs . setDependentView ( binding . repeatNotificationOptionPrefs ) ; showRepeatTime ( ) ; }
private void initCalendarPosition ( Calendar cur ) { int diff = CalendarUtil . getMonthViewStartDiff ( cur , mDelegate . getWeekStart ( ) ) ; int size = diff + cur . getDay ( ) - 1 ; setSelectPosition ( size ) ; }
public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; recyclerView . removeOnScrollListener ( scrollListener ) ; }
public void setInterpretAsRegex ( boolean interpretAsRegex ) { this . interpretAsRegex = interpretAsRegex ; buildData ( ) ; }
public static boolean isGif ( String baseSubreddit ) { return filters . getBoolean ( baseSubreddit + "_gifs" , true ) ; }
public void setAddressLine2 ( Object addressLine2 ) { this . addressLine2 = addressLine2 ; }
public Single < List < Layer >> getLayersForMeasurement ( String m ) { return db . getMeasureLayerJoinDao ( ) . getLayersForMeasurement ( m ) ; }
public void testNoMaxSeason ( ) { mJsonData . remove ( APIStatusDeserializer . MAX_SEASON_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public EighthBlock get ( int i ) { return mDisplayItems . get ( i ) ; }
public AttachmentBitmapDecoder make ( ) throws IllegalAccessException , InstantiationException { return new AttachmentBitmapDecoder ( masterSecret ) ; }
public void setColor ( int color ) { this . color = color ; this . value = alphaOfColor ( color ) ; if ( bar != null ) { updateBar ( ) ; invalidate ( ) ; } }
public boolean supportsLayer ( File file ) { return MbtilesFile . getLayerType ( file ) == MbtilesFile . LayerType . RASTER ; }
private boolean isAndroidTunDevice ( String device ) { return device != null && ( device . startsWith ( "tun" ) || " ( null ) " . equals ( device ) || "vpnservice - tun" . equals ( device ) ) ; }
public void start ( Attributes attributes ) { Category c = new Category ( Integer . parseInt ( attributes . getValue ( Board . Xml . IN_CATEGORY_ID_ATTRIBUTE ) ) ) ; mBoard . setCategory ( c ) ; }
public static String getQuicklyNodeId ( ) { return getString ( R . string . pref_key_quickly_node_id , null ) ; }
public void attachView ( BucketMVP . View view ) { super . attachView ( view ) ; analyticsHelper . trackPageView ( AnalyticsHelper . VIEW_BUCKET ) ; }
public int getExecutionCount ( ) { return mNumberOfExecutions ; }
public static float distance ( int aX , int aY , int bX , int bY ) { int xDiff = aX - bX ; int yDiff = aY - bY ; return ( float ) Math . sqrt ( xDiff * xDiff + yDiff * yDiff ) ; }
public InputConnection onCreateInputConnection ( EditorInfo info ) { info . inputType = InputType . TYPE_NULL ; if ( con == null ) { con = new CharInputConnection ( this , false ) ; } return con ; }
public Edge ( Node sourceNode , Node targetNode ) { super ( ) ; mSourceNode = sourceNode ; mTargetNode = targetNode ; mLine = new Line ( sourceNode . getPosition ( ) , targetNode . getPosition ( ) , Colors . EDGE ) ; }
public void addWhitelistItem ( String item ) { String whiteList = getWhiteList ( ) ; if ( StringUtils . isBlank ( whiteList ) ) { whiteList = item ; } else { whiteList = "\n" + item ; } setWhiteList ( whiteList ) ; }
public FanView ( Context context ) { super ( context ) ; }
public PostCommentListingURL limit ( Integer limit ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
private void showPairingAuth ( ) { this . viewAnimator . setDisplayedChild ( 1 ) ; findViewById ( R . id . button_save ) . setVisibility ( View . INVISIBLE ) ; }
public void handleEvent ( DcEvent event ) { if ( event . getId ( ) == DcContext . DC_EVENT_CONNECTIVITY_CHANGED ) { this . findPreference ( PREFERENCE_CATEGORY_CONNECTIVITY ) . setSummary ( DcHelper . getConnectivitySummary ( getActivity ( ) , R . string . connectivity_connected ) ) ; } }
public View getSnackBarContainer ( ) { return findViewById ( R . id . content_container ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "jp . hee . mainbuttonview . test" , appContext . getPackageName ( ) ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersListView , 0 , stickerPreviewViewerDelegate ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public String visit ( TrackDigest track ) { return track . getName ( ) ; }
public static DeletePlaylistDialog create ( ArrayList < Playlist > playlists ) { DeletePlaylistDialog dialog = new DeletePlaylistDialog ( ) ; Bundle args = new Bundle ( ) ; args . putSerializable ( "playlists" , playlists ) ; dialog . setArguments ( args ) ; return dialog ; }
public int getTitleColorId ( ) { return R . color . beautiful_blue ; }
public DeleteAuthRepoInteractor ( @ NonNull InteractorExecutorInterface interactorExecutor , @ NonNull Repository repository ) { super ( interactorExecutor ) ; this . repository = repository ; }
private void confirmRemoveProduct ( Product product ) { Dialogs dialogs = new Dialogs ( getContext ( ) ) ; dialogs . confirmation ( product . name ( ) , getString ( R . string . confirmation_remove_product ) , ( ) -> removeProduct ( product ) ) ; }
private void setProgressMessage ( CharSequence message , boolean create ) { if ( mProgress == null && create ) { startProgress ( message ) ; } if ( mProgress != null ) { mProgressMessage = message ; mProgress . setMessage ( message ) ; } }
private void thenDelegateShouldChangeTitle ( ) { new Verifications ( ) { { mAppCompatDelegate . setTitle ( "anyTitle" ) ; } } ; }
public boolean getVideoFlashPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . getVideoFlashPreferenceKey ( ) , false ) ; }
public float getSpeedAverage ( ) { return SpeedAverage ; }
public static de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseTranscoderStatus parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void onError ( @ NonNull VerificationError error ) { Snackbar . make ( likeButton . getRootView ( ) , error . getErrorMessage ( ) , Snackbar . LENGTH_LONG ) . show ( ) ; }
public void setListener ( SoundChooserFragment . Listener listener ) { this . listener = listener ; }
public PorterDuff . Mode getSecondaryProgressTintMode ( ) { logProgressBarTintWarning ( ) ; return super . getSecondaryProgressTintMode ( ) ; }
public void onCurrencyValueClick ( ) { CurrencyBottomSheet sheet = new CurrencyBottomSheet ( ) ; sheet . show ( getSupportFragmentManager ( ) , "currency" ) ; }
private File getMapInfoFile ( ) { return new File ( mMapFilenamePath , mMapValues . mMapName + " . tmp . info" ) ; }
public void onCancelled ( DatabaseError error ) { Log . w ( LOG_TAG , "Failed to read value . " , error . toException ( ) ) ; }
public CollectionInfo convertToMapped ( Class < ? extends CollectionInfo > type , String value ) { return value == null ? null : CollectionInfo . fromJson ( value ) ; }
public String getSimlarId ( ) { return mResult1 ; }
public MessageInsert ( final String senderId , final String threadId , final String text , final String metadata , final GcmPayload . Type type ) { super ( VoltageContentProvider . Uris . MESSAGES , values ( senderId , threadId , text , metadata , type ) ) ; }
public void markReview ( Card card ) { markUndo ( UNDO_REVIEW , new Object [ ] { card , card . note ( ) . hasTag ( "leech" ) } ) ; }
static public boolean isNetworkAvailable ( Context c ) { ConnectivityManager cm = ( ConnectivityManager ) c . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetwork = cm . getActiveNetworkInfo ( ) ; return activeNetwork != null && activeNetwork . isConnectedOrConnecting ( ) ; }
public List < KeyframeAnimation < Integer >> getOpacityAnimations ( ) { return opacityAnimations ; }
public void setGlosses ( List < String > glosses ) { mGlosses = glosses ; }
public static StickerEntity . Img map ( VKApiSticker . Image dto ) { return new StickerEntity . Img ( dto . url , dto . width , dto . height ) ; }
public RealmList < Room > getRooms ( ) { return new RealmList <> ( ) ; }
public InvalidJid ( String jid ) { this . value = jid ; }
public boolean dispatchTouchEvent ( MotionEvent event ) { findViewById ( R . id . activity_wear_root_layout ) . dispatchTouchEvent ( event ) ; if ( screenToggle ) setScreenOn ( ) ; if ( ! showKeyboard ) { startTimerFinish ( ) ; } return false ; }
public Response intercept ( @ NonNull Chain chain ) throws IOException { Request request = chain . request ( ) ; Request authenticatedRequest = request . newBuilder ( ) . header ( "Authorization" , credentials ) . build ( ) ; return chain . proceed ( authenticatedRequest ) ; }
public int getUnitCost ( ) { return FACTORY_MELEE_UNIT_COST ; }
public static long minsToMs ( long mins ) { return secsToMs ( mins * 60 ) ; }
public AccountUtil providesAccountUtil ( Context context ) { return new AccountUtil ( context ) ; }
public void onSuccess ( Object data ) { Log . d ( TAG , String . format ( "Pair success : %s" , data . toString ( ) ) ) ; publishDevice ( getDevice ( ) ) ; callback . onSuccess ( data ) ; }
private void initManualPrefs ( ) { binding . notificationDismissPrefs . setOnClickListener ( mManualClick ) ; binding . notificationDismissPrefs . setChecked ( mPrefs . isManualRemoveEnabled ( ) ) ; }
public void run ( ) { if ( canceled ) { return ; } queryMatch ( mText ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . AddressStatus prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void close ( ) { try { mZos . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public boolean hasTitle ( ) { return ! TextUtils . isEmpty ( title ) ; }
public float getDistanceFromCenter ( Point center , int viewCenterX , int viewCenterY ) { return viewCenterY - center . y ; }
public EpisodeRealm ( ) { id = 0 ; podcast = null ; url = null ; title = null ; pubdatestr = null ; link = null ; pubdate = null ; listened = null ; }
public RRGLProgramVertices ( String vertexShaderSource , String fragmentShaderSource ) { super ( vertexShaderSource , fragmentShaderSource ) ; }
public static String getServerName ( ) { try { return clientSocket . getInetAddress ( ) . getHostName ( ) ; } catch ( Exception e ) { LOGGER . log ( Level . FINE , "Exception when getting host name" , e ) ; } return "" ; }
public void addSongBackTo ( int position , PositionSong song ) { playingQueue . addSongBackTo ( position , song ) ; notifyChange ( QUEUE_CHANGED ) ; }
public void setTopMoviePoster ( HashMap < Integer , String > topMoviePoster ) { this . topMoviePoster = topMoviePoster ; }
public void onLogCollectionUploadProgressIndication ( final Core lc , final int offset , final int total ) { Lg . w ( "onLogCollectionUploadProgressIndication : offset = " , offset , " total = " , total ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mEquation = getArguments ( ) . getString ( "equation" ) ; }
public String [ ] getDefaultCipherSuites ( ) { return delegate . getDefaultCipherSuites ( ) ; }
private void pause ( ) { if ( mTimer != null ) { mTimer . cancel ( ) ; mTimer = null ; } mState = DebatingTimerState . STOPPED_BY_BELL ; mAlertManager . wakeUpScreenForPause ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return super . onCreateViewHolder ( parent , viewType ) ; }
public MifosGroup getGroup ( int groupPosition ) { return mifosGroups . get ( groupPosition ) ; }
public void nearbyGraticuleClicked ( Info info ) { requestStock ( info . getGraticule ( ) , info . getCalendar ( ) , StockService . FLAG_USER_INITIATED | ( needsNearbyPoints ( ) ? StockService . FLAG_INCLUDE_NEARBY_POINTS : 0 ) ) ; }
public void onEvent ( TCPDisconnectEvent event ) { this . areas . clear ( ) ; EventBus . getDefault ( ) . post ( new AreasParsedEvent ( ) ) ; }
public static void save ( Person person ) { save ( person , getWritableDb ( ) ) ; }
private long countBytes ( InputStream stream ) throws IOException { long count = 0 ; BufferedInputStream bis = new BufferedInputStream ( stream ) ; while ( bis . read ( ) != - 1 ) { count ++ ; } return count ; }
public void setDownloadFormat ( DownloadFormat downloadFormat ) { this . downloadFormat = downloadFormat ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_12 . class ) ; startActivity ( i ) ; }
public Fragment fragment ( ) { return WelcomeTitleFragment . newInstance ( drawableResId , title , showParallax , titleTypefacePath ) ; }
public static String getNewIssueUrl ( Context context , String from ) { return getForwardLink ( context , BuildConfig . gihubIssueUrl , from ) ; }
public boolean add ( T listener ) { return add ( listener , - 1 ) ; }
public CheckableRelativeLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public Album ( String id ) { this . id = Shorty . avoidNull ( id ) ; }
public void setFormLoaderListener ( FormLoaderListener sl ) { synchronized ( this ) { mStateListener = sl ; } }
public SettingsStore providesGeneralSettingsStore ( SettingsProvider settingsProvider ) { return new SettingsStore ( settingsProvider . getGeneralSettings ( ) ) ; }
public void reset ( GameManager gm ) { super . reset ( gm ) ; cardsToMove . clear ( ) ; }
public void onAudioItemClick ( int position ) { togglePlayListVisibility ( ) ; playAudio ( position ) ; }
public CardFactory ( ) { faker = new Faker ( ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return getString ( R . string . fragment_title_qrcode ) ; case 1 : return getString ( R . string . fragment_title_nfc ) ; } return null ; }
public static void setStravaAthleteId ( int stravaAthleteId ) { cSharedPreferences . edit ( ) . putInt ( SP_STRAVA_ATHLETE_ID , stravaAthleteId ) . commit ( ) ; }
public Dictionary findMatchOrNull ( Dictionary dictionaryToSearch ) { for ( Dictionary dictionary : dictionaries ) { if ( dictionaryToSearch . equals ( dictionary ) ) { return dictionary ; } } return null ; }
public XValueMarker ( Number value , String text , YPositionMetric textPosition , Paint linePaint , Paint textPaint ) { super ( value , text , textPosition , linePaint , textPaint ) ; }
public void onClick ( View view ) { addLike ( key , userId , likesCount ) ; verificalike ( key , userId ) ; } } ) ; if ( likesCount > 0 ) {
public void onClick ( View v ) { Intent intent3 = new Intent ( MainActivity . this , HomeActivity . class ) ; startActivity ( intent3 ) ; }
public boolean getShutterSoundPref ( ) { if ( getPhotoMode ( ) == PhotoMode . Panorama ) return false ; return sharedPreferences . getBoolean ( PreferenceKeys . getShutterSoundPreferenceKey ( ) , true ) ; }
private void trySavepointRelease ( ) { if ( mLastRemovalSavePointId != null ) { mDataDb . releaseSavepoint ( mLastRemovalSavePointId ) ; mLastRemovalSavePointId = null ; } }
public void editMode ( String itemUuid ) { DisplayItemInteractor interactor = new DisplayItemInteractorImpl ( mExecutor , mMainThread , this , mTodoListRepository , itemUuid ) ; interactor . execute ( ) ; }
public FileListModel ( String dir ) { this . dir = dir ; }
public AndroidPlayer ( ) { this . leftVolume = 1 . 0f ; this . rightVolume = 1 . 0f ; }
public void run ( ) { OstWorkFlowCallback callback = getCallback ( ) ; if ( null != callback ) { callback . verifyData ( new OstWorkflowContext ( workFlowType ) , ostContextEntity , ostVerifyDataInterface ) ; } }
public void onClick ( View v ) { showSetIpDialog ( ) ; }
private void startQueryIssues ( ) { mSwipeRefreshLayout . post ( new Runnable ( ) { @ Override public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryIssues ( mainView ) ; } } ) ; }
public FileDataSource ( @ Nullable TransferListener listener ) { if ( listener != null ) { addTransferListener ( listener ) ; } }
public void onCommentListingRequestException ( final Throwable t ) { BugReportActivity . handleGlobalError ( getSupportActivity ( ) , t ) ; }
public com . google . protobuf . Any . Builder addMessagesBuilder ( ) { return getMessagesFieldBuilder ( ) . addBuilder ( com . google . protobuf . Any . getDefaultInstance ( ) ) ; }
public static DBAdmissionCounters getInstance ( ) { return ( DBAdmissionCounters ) mInstance ; }
public void onSetFailure ( String s ) { super . onSetFailure ( s ) ; log ( "failure : " + s ) ; }
public void onFilterChanged ( List < MyFilter > list ) { Log . d ( "TAG" , "onFilterChanged : " + list . size ( ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . tags_activity ) ; getAppComponent ( ) . newTagsActivityComponent ( new TagsActivityModule ( this ) ) . inject ( this ) ; }
public boolean haveSuraAyah ( int sura , int ayah ) { return AudioUtils . haveSuraAyahForQari ( mLocalDirectoryPath , sura , ayah ) ; }
public void onViewDetachedFromWindow ( VisitViewHolder holder ) { holder . clearAnimation ( ) ; }
public Holder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new Holder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_community_link , parent , false ) ) ; }
public long [ ] cids ( long did ) { return cids ( did , false ) ; }
private void renderPage ( final int zoom ) { mWebView . evaluateJavascript ( "onRenderPage ( " + zoom + " ) " , null ) ; }
public void onLoadFinished ( @ NonNull Loader < Cursor > loader , Cursor cursor ) { hideProgressBarIfAllowed ( ) ; listAdapter . swapCursor ( cursor ) ; }
public InputStream getContent ( ) throws IOException , IllegalStateException { return mInputStream ; }
public static void quickToast ( final Context context , final String text ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) -> Toast . makeText ( context , text , Toast . LENGTH_LONG ) . show ( ) ) ; }
public void onEcCalibrationAudioUninit ( final Core core ) { Lg . w ( "onEcCalibrationAudioUninit" ) ; }
public void setScaleListener ( AppCompatActivity activity , ListChangeIf listChangeIf ) { this . listChangeIf = listChangeIf ; }
public void getValuesByTouchPoint ( float x , float y , AxisDependency axis , PointD outputPoint ) { getTransformer ( axis ) . getValuesByTouchPoint ( x , y , outputPoint ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_sources_browser_toolbar , menu ) ; return true ; }
public void onColorSelection ( @ NonNull ColorChooserDialog dialog , @ ColorInt int selectedColor ) { Preferences . setNotificationLEDColor ( this , selectedColor ) ; }
public void fetch ( ) { fetch ( BuildConfig . DEBUG ? 0 : 12*60*60 ) ; }
public void set ( int index , AppInfo info ) { suggested . get ( index ) . change ( info ) ; }
public static void requestPermission ( Fragment fragment , String permission , int requestCode ) { FragmentCompat . requestPermissions ( fragment , new String [ ] { permission } , requestCode ) ; }
public void onErrorResponse ( VolleyError error ) { VolleyLog . e ( Constants . TAG , "Error : " + error . getMessage ( ) ) ; }
private void putInt ( String name , int value ) { mPrefs . edit ( ) . putInt ( name , value ) . apply ( ) ; }
public SubnetDevices setTimeOutMillis ( int timeOutMillis ) { if ( timeOutMillis < 0 ) throw new IllegalArgumentException ( "Timeout cannot be less than 0" ) ; this . timeOutMillis = timeOutMillis ; return this ; }
public BigDecimal getAmount ( ) { return amount ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseLibraryChunk . Builder getResponseLibraryChunkBuilder ( ) { bitField0_ | = 0x08000000 ; onChanged ( ) ; return getResponseLibraryChunkFieldBuilder ( ) . getBuilder ( ) ; }
public static < E > ArrayList < E > listOfOne ( E obj ) { final ArrayList < E > result = new ArrayList < E > ( 1 ) ; result . add ( obj ) ; return result ; }
public static synchronized MainVolleyRequestQueue getInstance ( ) { if ( mInstance == null ) { mInstance = new MainVolleyRequestQueue ( ) ; } return mInstance ; }
public void onReceive ( Context context , Intent intent ) { if ( intent . getAction ( ) . equals ( "android . intent . action . BOOT_COMPLETED" ) ) { FitnessSyncReceiver . scheduleFitnessSync ( context , FitnessSyncReceiver . SYNC_INTERVAL ) ; } }
public String getPermaLink ( ) { return StringUtils . notNullStr ( permaLink ) ; }
public String desc ( ) { return Game . getVar ( R . string . WandMaker_RotberryDesc ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( ReposFragmentListener ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( activity . toString ( ) + " must implement MainFragmentListener" ) ; } }
public void setValue ( Double value ) { this . value = value ; }
public void actualOnPreExecute ( @ NonNull DeckPicker deckPicker ) { deckPicker . mProgressDialog = StyledProgressDialog . show ( deckPicker , "" , deckPicker . getResources ( ) . getString ( R . string . check_media_message ) , false ) ; }
public ZipFile ( String path ) throws FileNotFoundException { mZos = new ZipOutputStream ( new BufferedOutputStream ( new FileOutputStream ( path ) ) ) ; }
public void onReceive ( HeadphoneIconData icon , Intent intent ) { if ( intent . getIntExtra ( "state" , 0 ) == 1 ) icon . onDrawableUpdate ( intent . getIntExtra ( "microphone" , 0 ) ) ; else icon . onDrawableUpdate ( - 1 ) ; }
public void onTick ( long millisUntilFinished ) { Timber . i ( "Countdown seconds remaining in ATDService : " + millisUntilFinished / 1000 ) ; }
public void setCid ( int cid ) { server = ServersDataSource . getInstance ( ) . getServer ( cid ) ; }
public void onRefresh ( ) { isRefreshed = true ; new checkNetwork ( ) . execute ( ) ; }
public ArrayList < ClientData > getUsers ( ) { return users ; }
private int rollViewDistance ( ) { if ( this . isSafe ( ) ) { return 8 ; } else { return Dungeon . isChallenged ( Challenges . DARKNESS ) ? 2 : Random . Int ( 3 , 8 ) ; } }
public org . ovirt . mobile . movirt . model . DiskAttachment toEntity ( ) { return new org . ovirt . mobile . movirt . model . DiskAttachment ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { listenerActivity . onDialogResult ( actionId , restoreMemory . isChecked ( ) ) ; }
public void alreadyLoggedInWpcom ( ArrayList < Integer > oldSitesIds ) { ToastUtils . showToast ( this , R . string . already_logged_in_wpcom , ToastUtils . Duration . LONG ) ; loggedInAndFinish ( oldSitesIds ) ; }
public MaterialProgressBar ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( attrs , 0 , 0 ) ; }
public void onFailure ( Call < LostAndFoundItem . LostNFoundSuper > call , Throwable t ) { Log . e ( "failure" , t . getMessage ( ) ) ; swipeRefreshLayout . setRefreshing ( false ) ; }
public static boolean isRemoteConnected ( ) { return App . mClementineConnection != null && App . mClementineConnection . isConnected ( ) ; }
private void processBackgroundCustomLogLevel ( String backgroundCustomLogLevelString ) { processIntFieldValue ( mBackgroundCustomLogLevel , backgroundCustomLogLevelString , Logger . LOG_LEVEL_OFF , Logger . MAX_LOG_LEVEL ) ; }
public void onAttachFragment ( Fragment fragment ) { attachPresenterToFragment ( fragment ) ; super . onAttachFragment ( fragment ) ; }
public void getPin ( String workflowId , OstWorkflowContext ostWorkflowContext , String userId , OstPinAcceptInterface ostPinAcceptInterface ) { }
public List < String > getGloss ( ) { return this . gloss ; }
private void displayErrorSavingNote ( ) { int errorMessageId = getAddNoteErrorResource ( ) ; UIUtils . showThemedToast ( this , getResources ( ) . getString ( errorMessageId ) , true ) ; }
public CharSequence getPageTitle ( int position ) { if ( position == 0 ) { return "Trophen" ; } else { return "Animationen" ; } }
public String getFileType ( ) { return fileType ; }
public ContributionAdapter ( Activity mContext , GeneralPosts dataSet , RecyclerView listView , Boolean isHiddenPost ) { this . mContext = mContext ; this . listView = listView ; this . dataSet = dataSet . posts ; this . isHiddenPost = isHiddenPost ; }
public int getGroupCount ( ) { return this . _listDataHeader . size ( ) ; }
public UserPostListingURL limit ( Integer newLimit ) { return new UserPostListingURL ( type , user , order , newLimit , before , after ) ; }
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . NUMBER_FUNCTIONS ; }
public List < Instance > getAll ( ) { try ( Cursor cursor = query ( null , null , null , null ) ) { return getInstancesFromCursor ( cursor ) ; } }
public void mediaFileSaveFailed ( final int mediaId ) { mWPAndroidGlueCode . mediaFileSaveFailed ( mediaId ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( offset ) ; stream . writeInt32 ( limit ) ; }
public long getChildId ( int indicePessoa , int indiceProduto ) { return indicePessoa ; }
private static void showTextInputDialog ( Context context , @ StringRes int titleId , @ StringRes int hintId , TextInputListener listener , boolean isSecret ) { showTextInputDialog ( context , titleId , 0 , hintId , listener , isSecret ) ; }
public void clearLastDownloadError ( ) { mPerInstallationPrefs . edit ( ) . remove ( QuranDownloadService . PREF_LAST_DOWNLOAD_ERROR ) . remove ( QuranDownloadService . PREF_LAST_DOWNLOAD_ITEM ) . apply ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , Main16Activity . class ) ; startActivity ( i ) ; }
public static final Item CHEST = new Item ( ) { public int image ( ) { return ItemSpriteSheet . CHEST ; } } ;
public void onEvent ( CommandEvents . AutoSend autoSend ) { AutoSendLogFile ( autoSend . formattedFileName ) ; EventBus . getDefault ( ) . removeStickyEvent ( CommandEvents . AutoSend . class ) ; }
public void updateAdapter ( List < Patient > patientList ) { SyncedPatientsRecyclerViewAdapter adapter = new SyncedPatientsRecyclerViewAdapter ( this , patientList ) ; adapter . notifyDataSetChanged ( ) ; mSyncedPatientRecyclerView . setAdapter ( adapter ) ; }
public void updateSuccessfully ( EventViewModel event ) { adapter . updateItem ( event ) ; showSnackbarMessage ( recyclerView , R . string . msg_event_updated ) ; }
private double sqfootTosqyard ( double num ) { return num * 0 . 1111111111 ; }
public void resume ( ) { downloading = true ; }
public void loginToSyncServer ( ) { Intent myAccount = new Intent ( this , MyAccount . class ) ; myAccount . putExtra ( "notLoggedIn" , true ) ; startActivityForResultWithAnimation ( myAccount , LOG_IN_FOR_SYNC , ActivityTransitionAnimation . FADE ) ; }
public void findDestination ( View view ) { showPlaceAutocomplete ( 2 ) ; }
public boolean onNavigationItemSelected ( MenuItem item ) { mDrawerLayout . closeDrawers ( ) ; return false ; }
public void registerChildAdapterTag ( ComposedChildAdapterTag tag ) { getChildAdapterTags ( ) . add ( tag ) ; }
private BroadcastReceiver startMenuDisappearReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( startButton . getVisibility ( ) == View . GONE ) layout . setVisibility ( View . VISIBLE ) ; } } ;
public void setDistance ( Unit unit , double distance ) { if ( unit == Unit . MILE ) { distanceMi = distance ; distanceKm = mileToKm ( distance ) ; } else { distanceKm = distance ; distanceMi = kmToMile ( distance ) ; } }
public void onConnectionSuspended ( int cause ) { Log . d ( TAG , "onConnectionSuspended ( ) called : " + cause ) ; if ( mDownloadDone ) { mGoogleApiClient . connect ( GoogleApiClient . SIGN_IN_MODE_OPTIONAL ) ; } } */
public boolean onLongClick ( View v ) { ConnectionsManager . getInstance ( ) . switchBackend ( ) ; return true ; }
public void call ( final Object . . . args ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { localMessage ( getString ( R . string . disconnected ) ) ; } } ) ; }
public void onDowngrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + SongPlayCountColumns . NAME ) ; onCreate ( db ) ; }
public void setBeginning ( Integer beginning ) { this . beginning = beginning ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . foodtruckclient" , appContext . getPackageName ( ) ) ; }
public void onItemClick ( AdapterView < ? > adapterView , int section , int positionInSection , long id ) { Entry entry = mAdapter . getItem ( section , positionInSection ) ; mBus . post ( new EntryCopiedAndAddedToHistoryEvent ( entry ) ) ; }
public AboutBuilder addChangeLogAction ( View . OnClickListener onClickListener ) { return addAction ( R . mipmap . changelog , R . string . changelog , onClickListener ) ; }
public static boolean isActivated ( ) { return mUseBackups ; }
public void onClick ( @ NonNull View view ) { if ( view . getId ( ) == R . id . btn_send_data ) { startBlockchain ( ) ; } }
public static boolean isConfirmAppExit ( Context context ) { return getBoolean ( context , R . string . pref_key_is_confirm_app_exit , false ) ; }
private void givenPreviousValue ( ) { new Expectations ( ) { { mSharedPreferences . getString ( withAny ( "key" ) , "" ) ; result = "someUserName" ; } } ; }
public void saveHtmlPage ( String htmlFile , String htmlText ) throws IOException { storageProvider . addText ( htmlFile , htmlText ) ; }
public void onStart ( ) { super . onStart ( ) ; sub = RxBus . getInstance ( ) . toObserverable ( ) . subscribe ( this : : handleEvent ) ; }
public synchronized double average ( Class < ? > modelClass , String column ) { return average ( BaseUtility . changeCase ( modelClass . getSimpleName ( ) ) , column ) ; }
public void onError ( Error error ) { mUseCaseHandler . notifyError ( error , mCallback ) ; }
public void onStart ( ) { handler . sendEmptyMessage ( START_PROGRESS_MSG ) ; }
public < T extends ViewModel > T create ( Class < T > modelClass ) { return ( T ) new ApplicationDetailsViewModel ( mApplication , applicationId ) ; }
public void onAudibleEvent ( AudibleEvent audible ) { updateAutoStop ( audible . started ) ; }
public void setIncoming ( Contact contact ) { }
public static Drawable colorToDrawable ( Context context , int color , int w , int h ) { Bitmap bitmap = colorToBitmap ( color , w , h ) ; return bitmapToDrawable ( bitmap , context ) ; }
public String actionText ( Item srcItem ) { return Utils . format ( Game . getVar ( R . string . Burning_Burns ) , srcItem . toString ( ) ) ; }
public void loadConfig ( Preferences preferences , String prefix ) { loadButtonFromPreferences ( preferences , prefix , VirtualKey . TRIGGER , 1 ) ; loadButtonFromPreferences ( preferences , prefix , VirtualKey . BACK , 2 ) ; }
public void onSubtypeChanged ( @ NonNull final InputMethodSubtype newSubtype ) { updateCurrentSubtype ( newSubtype ) ; updateShortcutIme ( ) ; if ( DEBUG ) { Log . w ( TAG , "onSubtypeChanged : " + mCurrentRichInputMethodSubtype . getNameForLogging ( ) ) ; } }
public void onAnimationEnd ( Object animation ) { stickerPreviewLayout . setVisibility ( View . GONE ) ; }
public double getResolution ( ) { return 0 ; }
public List < I > create ( Cursor queryResult ) { return creator . create ( queryResult ) ; }
public void onAnimationRepeat ( Animation animation ) { }
public PhotoSizes setR ( String r ) { this . r = r ; return this ; }
public DreamDAO ( Context context ) { super ( context , "SweetDreams" , null , 1 ) ; }
public void deleteAppWidget ( Context context , int appWidgetId ) { thread . run ( WSL , ( ) -> { log . i ( TAG , "delete | appWidgetId = " , appWidgetId ) ; scheduleLessonsWidgetStorage . delete ( appWidgetId ) ; } ) ; }
public TopicChange pushTopic ( final String newTopic ) { return create ( newTopic ( ) , newTopic ) ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent event ) { if ( actionId == EditorInfo . IME_ACTION_DONE ) { validate ( ) ; } return false ; }
public Maybe < Tag > edit ( Tag entity ) { return Maybe . just ( entity ) ; }
public void setUp ( ) throws Exception { mMoneyInEur = new Money ( new BigDecimal ( amountString ) , Currency . getInstance ( CURRENCY_CODE ) ) ; mHashcode = mMoneyInEur . hashCode ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : if ( mIsInDeleteVehicleState ) restoreNormalState ( ) ; return true ; default : return super . onOptionsItemSelected ( item ) ; } }
public void stopProgress ( ) { if ( getProgressBar ( ) == null ) return ; getProgressBar ( ) . dismiss ( ) ; }
public void onFinish ( ) { timerText . setText ( "Lockscreen enabled" ) ; }
public I read ( C c ) { return operation . map ( c , mapping ) ; }
public ContributionAdapter ( Activity mContext , GeneralPosts dataSet , RecyclerView listView ) { this . mContext = mContext ; this . listView = listView ; this . dataSet = dataSet . posts ; this . isHiddenPost = false ; }
public com . google . protobuf . Any getPublicKey ( ) { if ( publicKeyBuilder_ == null ) { return publicKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : publicKey_ ; } else { return publicKeyBuilder_ . getMessage ( ) ; } }
public String toString ( ) { return item . getName ( ) ; }
public void onDestroy ( ) { unregisterReceiver ( mReceiver ) ; mBitcoin . destroy ( ) ; super . onDestroy ( ) ; }
public void showSnackbar ( String title ) { Snackbar . make ( mBinding . mainContainer , title , Snackbar . LENGTH_SHORT ) . show ( ) ; }
public CombinedHighlighter ( BarLineScatterCandleBubbleDataProvider chart , BarDataProvider barChart ) { super ( chart ) ; barHighlighter = barChart . getBarData ( ) == null ? null : new BarHighlighter ( barChart ) ; }
public void onGetTagListSuccessTracking ( ) { analyticsHelper . trackGetTagListSuccess ( null ) ; }
public void HelloWorldAsync ( ) { executeAsync ( new Functions . IFunc < String > ( ) { public String Func ( ) throws java . lang . Exception { return HelloWorld ( ) ; } } ) ; }
private void updateStreetMode ( ) { if ( isStreetMode ( ) ) { toolbar . setBackgroundResource ( R . drawable . backgound_toolbar_streetmode ) ; } else { toolbar . setBackgroundResource ( R . drawable . backgound_toolbar_normalmode ) ; showNet ( ) ; } invalidateOptionsMenu ( ) ; }
public void onInit ( int status ) { Log . d ( "NavitSpeech2" , "Status " + status ) ; }
public void setCurrentThreadPage ( int currentThreadPage ) { this . currentThreadPage = currentThreadPage ; }
public DrawerBuilder withSelectedItem ( int selectedItemIdentifier ) { this . mSelectedItemIdentifier = selectedItemIdentifier ; return this ; }
public void showList ( ) { mode = MODE_LIST ; cancelRipple ( ) ; scrollTo ( 0 , lastScrollY ) ; setVerticalScrollBarEnabled ( true ) ; hidePieMenu ( ) ; resetFadeOutPieMenu ( ) ; invalidate ( ) ; }
public < T > FindMultiExecutor findAsync ( final Class < T > modelClass ) { return findAsync ( modelClass , false ) ; }
public int getVkid ( ) { return vkid ; }
private void initDrawerToggle ( ) { drawerToggle = new ActionBarDrawerToggle ( this , drawerLayout , toolbar , R . string . open_drawer , R . string . close_drawer ) ; drawerLayout . setDrawerListener ( drawerToggle ) ; drawerToggle . syncState ( ) ; }
public String getCanopyType ( ) { return canopyType ; }
public static void save ( Context context , int wigdetId ) { if ( wigdetId != 0 && wigdetId == getWidgetId ( context ) ) { AllSettings . saveFromApplicationPreferences ( context , wigdetId ) ; } }
public void onClick ( View v ) { hideKeyBoard ( v ) ; onPhotoButtonClicked ( ) ; }
public int addItemGetId ( String subjectName ) throws SQLiteConstraintException { return addItemGetId ( new Subject ( subjectName , - 1 ) ) ; }
public void setPageTransformer ( boolean reverseDrawingOrder , ViewPager . PageTransformer transformer ) { binding . miPager . setPageTransformer ( reverseDrawingOrder , transformer ) ; }
public AboutBuilder addDonateAction ( Intent intent ) { return addDonateAction ( util . clickIntent ( intent ) ) ; }
public String getHostNum ( ) { return mHostNum ; }
public void onResponse ( Call < ResBnbNodeInfo > call , Response < ResBnbNodeInfo > response ) { if ( response . isSuccessful ( ) && response . body ( ) != null ) { mResBnbNodeInfo = response . body ( ) ; } onUpdateView ( ) ; }
public boolean isUp ( ) { return mIsUp ; }
public void removeFilter ( FilterType type ) { expressions . remove ( type ) ; }
public static boolean noPastEvents ( Context context ) { return ! getShowPastEventsWithDefaultColor ( context ) && getEventsEnded ( context ) == EndedSomeTimeAgo . NONE && noTaskSources ( context ) ; }
public void testSafeToAddAuthToken26 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( wpcomAddress6 ) ) ) ; }
public String getPath ( String key ) { return mStorage . getOriginalFilePath ( key ) ; }
public void onClick ( View v ) { intent . intentSharedElementWithExtra ( a , "activity . AboutActivity" , R . id . cardview_about_image , "transition" , "about" , "tapad" , 0 , v ) ; }
private static boolean renderFileThumbnail ( final String mime ) { return mime . startsWith ( "video/" ) || mime . startsWith ( "image/" ) || ( Compatibility . runsTwentyOne ( ) && "application/pdf" . equals ( mime ) ) ; }
public void onClick ( View v ) { EditText ed1 = ( EditText ) findViewById ( R . id . lp_agri_trailer_value ) ; ed1 . setEnabled ( false ) ; ed1 . setText ( "2091" ) ; }
public long setCompleted ( long completeValue ) { curBytes = completeValue ; publishProgress ( " - P" , "" ) ; return 0 ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . updateInterfaces ) ; }
public FilterView ( Context context ) { super ( context ) ; init ( context , null ) ; }
public void onBindViewHolder ( ItemHolder holder , int position ) { super . onBindViewHolder ( holder , position ) ; holder . itemView . findViewById ( R . id . destination ) . setTransitionName ( application . getString ( R . string . textTransition ) + position ) ; }
public IPresenterFactory < DialogsPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new DialogsPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , getArguments ( ) . getInt ( Extra . OWNER_ID ) , saveInstanceState ) ; }
public int getQualPoints ( ) { return qualPoints ; }
public final int getArtistGridSize ( Context context ) { return mPreferences . getInt ( ARTIST_GRID_SIZE , context . getResources ( ) . getInteger ( R . integer . default_grid_columns ) ) ; }
private void startSensor ( ) { powerManager = ( PowerManager ) getSystemService ( POWER_SERVICE ) ; wakeLock = powerManager . newWakeLock ( PowerManager . PROXIMITY_SCREEN_OFF_WAKE_LOCK , "proximity" ) ; wakeLock . acquire ( ) ; }
public void onResume ( ) { super . onResume ( ) ; AppUtil . getInstance ( InsertBIP49Activity . this ) . checkTimeOut ( ) ; }
public void onClick ( View v ) { ( ( BaseActivity ) getActivity ( ) ) . onChoiceNet ( BaseChain . CERTIK_MAIN ) ; getDialog ( ) . dismiss ( ) ; }
public void invalidateView ( ) { if ( mChart != null ) mChart . invalidate ( ) ; }
public static String logOperRes ( Context context , Objs obj , Opers oper , TetroidObject o , int length ) { return logOperRes ( context , obj , oper , addIdName ( context , o ) , length ) ; }
public void resumeAnimation ( ) { userActionsTaken . add ( UserActionTaken . PLAY_OPTION ) ; lottieDrawable . resumeAnimation ( ) ; computeRenderMode ( ) ; }
private void reloadContacts ( ) { Lg . i ( "reloadContacts" ) ; if ( ContactsProvider . clearCache ( ) ) { mAdapter . clear ( ) ; requestContacts ( ) ; } }
public void seekTo ( int pos ) { if ( mMediaPlayer != null ) { mMediaPlayer . seekTo ( pos ) ; } }
public static void clearCache ( ) { sCache . clear ( ) ; }
public void onArduinoMessage ( byte [ ] bytes ) { display ( "Received : " + new String ( bytes ) ) ; }
private void setSongToRemove ( @ NonNull Song song ) { songToRemove = song ; }
public List < Integer > getSubDeviceSessions ( Account account , AxolotlAddress contact ) { final SQLiteDatabase db = this . getReadableDatabase ( ) ; return getSubDeviceSessions ( db , account , contact ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; rootView = itemView ; textView = ( TextView ) itemView . findViewById ( R . id . text_view ) ; deletButton = rootView . findViewById ( R . id . delete_button ) ; }
public void deleteForMeal ( CoNaObiadDbHelper helper , long mealId ) { helper . delete ( TABLE_NAME , mealId , "meal_id" ) ; }
public void testIsFestivalDay_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . isFestivalDay ( ) , is ( festivalDay ) ) ; }
public static byte [ ] decryptBytes ( byte [ ] bytes ) { return decrypt ( mCryptKey , bytes ) ; }
public Completable resetAll ( ) { return Completable . fromAction ( countersDao : : resetValues ) ; }
public CampaignView ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context ) ; }
public void showSnackbar ( String title , String actionName , View . OnClickListener listener ) { Snackbar . make ( mBinding . mainContainer , title , Snackbar . LENGTH_SHORT ) . setAction ( actionName , listener ) . show ( ) ; }
public void onPause ( ) { super . onPause ( ) ; setLastSeen ( System . currentTimeMillis ( ) ) ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser ) { Constants . OPEN_ACTIVITY = "REQUESTS" ; Log . d ( "Open" , Constants . OPEN_ACTIVITY ) ; } }
public void onAnimationEnd ( Object animation ) { shakeTextView ( num == 5 ? 0 : - x , num + 1 ) ; }
public void setUnderlineColorResource ( int resId ) { this . underlineColor = getResources ( ) . getColor ( resId ) ; invalidate ( ) ; }
public static String getCurrentDatetimeUTC ( ) { SimpleDateFormat format = new SimpleDateFormat ( DateUtils . DATE_FORMAT_DATE_TIME , Locale . getDefault ( ) ) ; format . setTimeZone ( TimeZone . getTimeZone ( "UTC" ) ) ; return format . format ( new Date ( ) ) ; }
private void destroyCodeTimer ( ) { try { synchronized ( timerSync ) { if ( codeTimer != null ) { codeTimer . cancel ( ) ; codeTimer = null ; } } } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onClick ( View v ) { JobActivity . this . showRecentNotesDialog ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( PICTURE_URI , mPictureUri ) ; }
public static boolean isSaveMiddlePassHashLocal ( ) { return getBoolean ( R . string . pref_key_is_save_pass_hash_local , true ) ; }
public void crc32FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "784dd132" , HashCalculator . newInstance ( HashType . CRC_32 ) . fromString ( inputText ) ) ; }
public void setTrack ( Track track ) { mTrack = track ; mGameInfoConfig . track = mTrack . getId ( ) ; mGameInfoConfig . flush ( ) ; }
public boolean onMenuItemActionCollapse ( MenuItem item ) { if ( item . getItemId ( ) == R . id . action_add ) { this . floatingActionButton . setImageDrawable ( ContextCompat . getDrawable ( this , R . mipmap . fab_add ) ) ; } return true ; }
public void onAppSelected ( App app ) { AppSettings . get ( ) . setString ( key , "2" + Tool . getIntentAsString ( Tool . getIntentFromApp ( app ) ) ) ; }
public void success ( Avatar avatar ) { finishInitialSetup ( avatar ) ; }
public Station getCurrentStation ( ) { Station currentStation = stationsRepository . getCurrentStation ( ) ; return currentStation == null ? Station . nullStation ( ) : currentStation ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfRegrowth_Info ) ; }
public void identificationCompleted ( String trackName ) { }
private static String getFilePath ( final String fileName , final String folderName ) { return folderName + "/" + fileName ; }
public void timerStop ( ) { timer . cancel ( ) ; timer . purge ( ) ; }
public String powiat ( ) { return formatHelper . formatPowiat ( dto . powiat ( ) ) ; }
public CalendarQueryRow setTitle ( Object obj ) { return setColumn ( CalendarContract . Instances . TITLE , obj ) ; }
public void onCheckedChanged ( RadioGroup group , int checkedId ) { if ( checkedId == watchface_weather_location_gps_radiobutton . getId ( ) ) Prefs . putInt ( Constants . PREF_WATCHFACE_WEATHER_DATA_LOCATION_RADIO , 0 ) ; else Prefs . putInt ( Constants . PREF_WATCHFACE_WEATHER_DATA_LOCATION_RADIO , 1 ) ; }
public static SortingColumns fromValue ( String value ) { for ( SortingColumns column : SortingColumns . class . getEnumConstants ( ) ) { if ( column . toString ( ) . equalsIgnoreCase ( value ) ) { return column ; } } return SortingColumns . none ; }
public UploadObject setFileId ( Long fileId ) { this . fileId = fileId ; return this ; }
public static Boolean isSmoothieBoard ( final String response ) { return response . toLowerCase ( ) . startsWith ( "Smoothie" ) ; }
public AdmissionPercentageAdapter ( FragmentManager fm , DBAdmissionPercentageMeta dbMeta , int subjectId ) { super ( fm ) ; mMetaDb = dbMeta ; mSubjectId = subjectId ; reload ( ) ; mReferenceMap = new HashMap <> ( ) ; }
public void onFailure ( Call < AccessToken > call , Throwable t ) { Analytics . signInError ( t ) ; Toast . makeText ( LaunchActivity . this , t . getMessage ( ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public DatabaseHelper ( Context context ) { super ( context , DB_NAME , SCHEMA_VERSION ) ; }
public Object createBinaryData ( StringData answerData ) { when ( file . exists ( ) ) . thenReturn ( true ) ; when ( file . getName ( ) ) . thenReturn ( answerData . getDisplayText ( ) ) ; return file ; }
public void insertList ( ArrayList < String > list ) { adapter . insertList ( list ) ; }
public static long getNotificationIdForPost ( PostModel post ) { long postIdToUse = post . getRemotePostId ( ) ; if ( post . isLocalDraft ( ) ) { postIdToUse = post . getId ( ) ; } return post . getLocalSiteId ( ) + postIdToUse ; }
public void onClickBackground ( View view ) { View focussed = getCurrentFocus ( ) ; if ( focussed == alarmPeriodView ) { processAlarmPeriodInput ( ) ; } view . clearFocus ( ) ; }
private void showFailToast ( ) { Toast . makeText ( ConfirmConnectToWifiNetworkActivity . this , R . string . status_unable_to_connect , Toast . LENGTH_SHORT ) . show ( ) ; }
public static ArrayList < Song > getAllSongs ( @ NonNull Context context ) { Cursor cursor = makeSongCursor ( context , null , null ) ; return getSongs ( cursor ) ; }
private void stopSpeaking ( ) { if ( textToSpeech . isSpeaking ( ) ) { audioManager . abandonAudioFocus ( audioFocusChangeListener ) ; textToSpeech . stop ( ) ; } }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { thread . initialize ( UN ) ; log . v ( TAG , "Fragment created" ) ; firebaseAnalyticsProvider . logCurrentScreen ( activity , fragment ) ; }
public void onFailure ( Call < DraftUploadResponse > call , Throwable t ) { draftsHelperCallback . onDraftUpdated ( false ) ; }
public List < Kd2Codepoint > getCodepoint ( ) { return codepoint ; }
public DeleteTask ( ContentResolver c , Context cd ) { this . cd = cd ; rootMode = PreferenceManager . getDefaultSharedPreferences ( cd ) . getBoolean ( PreferencesConstants . PREFERENCE_ROOTMODE , false ) ; }
public void onFocus ( boolean resuming ) { super . onFocus ( resuming ) ; if ( mUserJID != null ) { MessagingNotification . clearChatInvitation ( getActivity ( ) , mUserJID ) ; } }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( getStudentGroupsCreateQuery ( ) ) ; db . execSQL ( getLessonsCreateQuery ( ) ) ; db . execSQL ( getEmployeesCreateQuery ( ) ) ; }
public void pause ( ) { mResumed = false ; for ( ObjectInfo info : mObjectInfos . values ( ) ) { info . setResumed ( false ) ; } }
public EighthBlockItem build ( ) { return new EighthBlockItem ( date , BID , type , locked ) ; }
public static SettingsFragment newInstance ( String title ) { final SettingsFragment fragment = new SettingsFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putString ( BUNDLE_ARG_TITLE , title ) ; fragment . setArguments ( args ) ; return fragment ; }
public void onPageSelected ( int position ) { dotsContainer . invalidate ( ) ; }
public ColorPickerDialog ( final Context context , final ColorPickerCallback callback ) { super ( context ) ; AppComponentProvider . getComponent ( ) . inject ( this ) ; this . callback = callback ; }
public void onClick ( View view ) { ( ( FloatingActionButton ) findViewById ( R . id . send ) ) . hide ( ) ; sent = true ; new AsyncDo ( ) . execute ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { showAppSettings ( context ) ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( Math_Op_Write_Result_Activity . this ) ; Intent intent = new Intent ( Math_Op_Write_Result_Activity . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
public String getUnits ( ) { return prefs . getString ( Constants . UNITS , "metric" ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( "SWELL" , String . format ( "Set up failed ( %d ) : %s" , errorCode , msg ) ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newMealDetailComponent ( new MealDetailsModule ( this , savedInstanceState ) ) . inject ( this ) ; componentFactory = null ; }
public void onClick ( View v ) { isAvailableSprintFFC = ! isAvailableSprintFFC ; initializeVideo ( ) ; change = true ; }
public FormEntryPage clickOk ( ) { clickOKOnDialog ( ) ; return new FormEntryPage ( formName ) ; }
public void onBookCollectionVisibilityChanged ( BooksCollection booksCollection , boolean isVisible ) { notifyItemChanged ( booksCollection . getOrder ( ) ) ; }
public void onViewRecycled ( RecyclerView . ViewHolder holder ) { onViewRecycled ( holder , holder . getItemViewType ( ) ) ; }
public static QuranRow fromPageBookmarksHeader ( Context context ) { return new QuranRow . Builder ( ) . withText ( context . getString ( R . string . menu_bookmarks_page ) ) . withType ( QuranRow . HEADER ) . build ( ) ; }
public static boolean getNotificationsEnabled ( Context context ) { return getBoolean ( context , "pref_enable_notifications" , context . getResources ( ) . getBoolean ( R . bool . pref_default_enable_notifications ) ) ; }
public void onClick ( View v ) { ( ( WearActivity ) getActivity ( ) ) . startSpeechRequest ( ) ; }
public void setStartDirectory ( File file ) { final SharedPreferences . Editor editor = mPreferences . edit ( ) ; editor . putString ( START_DIRECTORY , file . getPath ( ) ) ; editor . apply ( ) ; }
public void onPause ( ) { if ( HermesEventBus . getDefault ( ) . getStickyEvent ( IsWatchConnectedLocal . class ) != null ) HermesEventBus . getDefault ( ) . removeStickyEvent ( IsWatchConnectedLocal . class ) ; super . onPause ( ) ; }
public void setBlock ( TLRPC . TL_pageBlockHeader block ) { currentBlock = block ; lastCreatedWidth = 0 ; requestLayout ( ) ; }
public void onClick ( View v ) { new WelcomeScreenFinisher ( DoneFragment . this ) . finish ( ) ; }
private void finishWithAnimation ( ) { super . finishWithAnimation ( ActivityTransitionAnimation . DOWN ) ; }
private static void _addSchema ( AnkiDb db ) { _addSchema ( db , true ) ; }
public StepTimer ( long delay ) { mMinDelay = delay ; }
public Vector2D ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public int getSongDurationMillis ( ) { return player . duration ( ) ; }
public boolean dispatchFinishedWhenDone ( ) { if ( mDebug && ! isRunning ( ) ) { Log . d ( TAG , "dispatchAnimationsFinished ( ) " ) ; } return super . dispatchFinishedWhenDone ( ) ; }
public void insertAll ( List < Tag > entities ) { }
public void sha224FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "3606346815fd4d491a92649905a40da025d8cf15f095136b19f37923" , HashCalculator . newInstance ( HashType . SHA_224 ) . fromString ( inputText ) ) ; }
public void cancelLoadFile ( TLRPC . PhotoSize photo ) { cancelLoadFile ( null , photo . location , null ) ; }
public int getMaxHealth ( ) { return UNIT_MELEE_HEALTH ; }
public long getLastLocationSyncTimestamp ( ) { return mPrefsHelper . getLastLocationSyncTimestamp ( ) ; }
public void onItemSelected ( AdapterView av , View v , int arg2 , long arg3 ) { int keysSelection = keysSpinner . getSelectedItemPosition ( ) ; activity . setKeyboardSize ( keysSelection ) ; clientModel . setKeyboardSize ( keysSelection ) ; clientModel . savePreferences ( activity ) ; }
public boolean onCabCreated ( MaterialCab materialCab , Menu menu ) { setStatusbarColor ( ColorUtil . stripAlpha ( toolbarColor ) ) ; return callback . onCabCreated ( materialCab , menu ) ; }
public boolean FtpImplicit ( ) { return prefs . getBoolean ( PreferenceNames . FTP_IMPLICIT , false ) ; }
public StorageCreatePathException ( File file ) { super ( "There was an excuse creating the path " + file + " . " ) ; }
public FileModelBuilder countAudio ( long countAudio ) { this . mCountAudio = countAudio ; return this ; }
public ProtocolTracker getProtocolTracker ( ) { return protocolTracker ; }
public void setTuc ( List < Tuc > tuc ) { this . tuc = tuc ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_auth_authorization . TLdeserialize ( stream , constructor , exception ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . MINUS ) ; }
private void postUpdateFps ( int fps ) { if ( fps < 1 ) return ; this . fps = fps ; toolbar . post ( updateFpsRunnable ) ; }
public void setup ( WelcomeScreenConfiguration config ) { for ( WelcomeScreenPage page : this ) { page . setup ( config ) ; } }
public void onOk ( List < ? > args ) { if ( chunkIterator . hasNext ( ) ) { sendingInterface . sendChunk ( chunkIterator . next ( ) , this ) ; } else { sendingInterface . endFileUpload ( callback ) ; } }
public Holder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new Holder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . local_album_item , parent , false ) ) ; }
public NoteSearch ( ArrayAdapter < Note > masterList , String query ) { setNoteList ( masterList ) ; setSearchString ( query ) ; search ( ) ; }
public boolean onPreferenceClick ( Preference preference ) { startActivity ( new Intent ( creditsPref . getContext ( ) , CreditsActivity . class ) ) ; return true ; }
private static void loadColors ( Context context ) { loadColors ( context , R . style . AppTheme_IRCColors ) ; }
public SwanUser getPeer ( String username ) { for ( SwanUser peer : nearbyPeers ) { if ( peer . getUsername ( ) . equals ( username ) ) { return peer ; } } return null ; }
public PredefinedTeXFormulaParser ( String PredefFile , String type ) throws ResourceParseException , IOException { this ( jLatexMath . getAssetManager ( ) . open ( PredefFile ) , type ) ; }
public void toggleFlashlight ( Activity activity , Menu menu ) { if ( flashState ) { setFlashlightOff ( ) ; flashState = false ; } else { flashState = setFlashlightOn ( activity ) ; } setFlashlightButton ( menu ) ; }
public BlockViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . row_block , parent , false ) ; return new BlockViewHolder ( view ) ; }
public void onClick ( View v ) { if ( mListener != null ) { mListener . onItemClick ( v , getLayoutPosition ( ) ) ; } }
public ArrayList < ColorInfo > getColorInfoList ( ) { return this . colorInfoList ; }
private void doGoToPlaybackControl ( ) { this . reflectionControlViewFlipper . setInAnimation ( getContext ( ) , R . anim . refl_move_left_next ) ; this . reflectionControlViewFlipper . setOutAnimation ( getContext ( ) , R . anim . refl_move_left_current ) ; this . reflectionControlViewFlipper . showNext ( ) ; }
public String getBirthday ( ) { return birthday ; }
private void setProgressVisible ( boolean visible ) { final ProgressBar progress = ( ProgressBar ) findViewById ( R . id . progress_loading ) ; if ( progress != null ) { progress . setVisibility ( visible ? View . VISIBLE : View . GONE ) ; } }
public boolean shouldViewSentFormButtonBeVisible ( ) { return adminSettings . getBoolean ( AdminKeys . KEY_VIEW_SENT ) ; }
private static boolean isExpandable ( List < URI > inputs ) { for ( URI input : inputs ) { if ( isFileOrDir ( input ) && Files . isDirectory ( Paths . get ( input ) ) ) { return true ; } } return false ; }
public UpdaterGui getUpdaterGui ( ) { return null ; }
public DraftType getDraftType ( ) { return draftType ; }
public Integer getQuestionTextColor ( ) { return questionTextColor ; }
public void onFailure ( Call < UserEdit > call , Throwable t ) { view . hideLoading ( ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . didEndedCall ) ; }
public void setContext ( WeakReference < Activity > contextReference ) { mContextReference = contextReference ; }
public static RoomModel fromContentValues ( ContentValues values , String prefix ) { return new RoomModel ( values . getAsInteger ( prefix + COLUMN_ROOM_NUMBER ) , Location . values ( ) [ values . getAsInteger ( prefix + COLUMN_ROOM_LOCATION ) ] ) ; }
private String getEditTextStr ( int resId ) { final EditText edit = ( EditText ) findViewById ( resId ) ; return EditTextUtils . getText ( edit ) ; }
public void checkForCurrencyChange ( ) { if ( ! Objects . equals ( preferenceRepository . getSelectedCurrency ( ) , lastCurrencyCode ) ) { lastCurrencyCode = preferenceRepository . getSelectedCurrency ( ) ; getPrice ( ) ; } }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_13 . class ) ; startActivity ( i ) ; }
public LiveData < Note > getFullNote ( long id ) { return map ( getFullNotesWithCategory ( Collections . singleton ( id ) ) , input -> input . get ( 0 ) ) ; }
private void removeNotifyOnAvailableButton ( ) { notifyButton . setVisibility ( View . GONE ) ; }
public Cursor getCursor ( ) { return cursor ; }
private void onMovieSearchFailed ( Throwable e ) { view . loadingFailed ( e . getMessage ( ) ) ; }
private void setShareIntent ( ) { if ( shareActionProvider != null ) { if ( qrValid ) { shareActionProvider . setShareIntent ( getShareIntent ( ) ) ; } else { shareActionProvider . setShareIntent ( null ) ; } } }
public long getCountdownTime ( ) { return countdownTimeMilli ; }
public Result ( int _number , double _east , double _north , double _vE , double _vN ) { this . number = _number ; this . east = _east ; this . north = _north ; this . vE = _vE ; this . vN = _vN ; }
public void run ( ) { post . markAsRead ( getSupportActivity ( ) ) ; }
public void onDestroy ( ) { Log . d ( TAG , "onDestroy : dialog" + dialogID_ ) ; podcastModel_ . removeChangeListener ( changeListener_ ) ; removeDialog ( dialogID_ ) ; super . onDestroy ( ) ; }
private void nextRound ( ) { playSuccessAudio ( ) ; answerKey = - 1 ; updateRoundCount ( ) ; generateEquation ( ) ; startTimer ( ) ; }
public void onResponse ( String string ) { parseJsonData ( string , fiatCurrency . toLowerCase ( ) ) ; Message news = new Message ( ) ; news . arg1 = 1 ; handler . sendMessage ( news ) ; saveRatesToOffline ( ) ; }
public void setGameControls ( GameControlsAdaptor gameControls ) { m_GameControls = gameControls ; }
public LiveData < ListFragment . ViewWrapper > actionTrackEvaluatedSuccessfully ( ) { return mTrack ; }
public String info ( ) { return Utils . format ( Game . getVar ( R . string . Plant_Info ) , Utils . indefinite ( plantName ) , desc ( ) ) ; }
public String getUrlIntra ( ) { return null ; }
public void setEvents ( CharacterComicDataContainer events ) { mEvents = events ; }
public void removeListener ( ) { mListener = null ; }
private void setUpMusicControllers ( ) { setUpPlayPauseButton ( ) ; setUpPrevNext ( ) ; setUpRepeatButton ( ) ; setUpShuffleButton ( ) ; setUpProgressSlider ( ) ; }
public boolean isHistoryEnabled ( ) { return content . history . getHistoryEnabled ( ) ; }
public boolean validDatabase ( ) { return ( mDatabase != null ) && mDatabase . isOpen ( ) ; }
public void setCustomFont ( TextView textView , String family , int style ) { Typeface typeface = fontManager . get ( family , style ) ; textView . setTypeface ( typeface ) ; }
public void onNextTrackPressed ( ) { stopGamepadInputWatcher ( ) ; showUnlockedRewardScreen ( ( ) -> getGame ( ) . showMainMenu ( ) ) ; }
public Story call ( ) { HexApplication application = ( HexApplication ) getActivity ( ) . getApplication ( ) ; StoryService service = new StoryService ( application . getRequestQueue ( ) , application . getApiBaseUrl ( ) ) ; return service . getStory ( getStoryId ( ) ) ; }
public PostCommentListingURL commentId ( String commentId ) { if ( commentId . startsWith ( "t1_" ) ) { commentId = commentId . substring ( 3 ) ; } return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public void reset ( ) { resetJoint ( ) ; mGameWorld . getBox2DWorld ( ) . destroyBody ( mBody ) ; mBody = null ; DebugShapeMap . remove ( this ) ; }
public BuildingLayer ( Map map , VectorTileLayer tileLayer ) { this ( map , tileLayer , MIN_ZOOM , MAX_ZOOM ) ; }
public void onDestroyView ( ) { Activity activity = getActivity ( ) ; if ( activity instanceof BaseActivity ) ( ( BaseActivity ) activity ) . removeMusicServiceEventListener ( this ) ; super . onDestroyView ( ) ; }
public void onGlobalLayout ( ) { collapsingToolbarLayout . setScrimVisibleHeightTrigger ( toolbar . getHeight ( ) + tabLayout . getHeight ( ) + getStatusBarHeight ( ) * 2 ) ; appBarLayout . getViewTreeObserver ( ) . removeOnGlobalLayoutListener ( this ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container ) { return inflater . inflate ( R . layout . now_playing_controller , container , false ) ; }
public void onDoneEditing ( ) { if ( mItemDetailsFragment != null ) { mCurrentDialogName = ITEM_DETAILS_DIALOG ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return help_AppChangelog . TLdeserialize ( stream , constructor , exception ) ; }
private DateTime ( long timestamp , TimeZone timeZone ) { this . timestamp = timestamp ; this . timeZone = timeZone ; }
private RtpContentMap ( Group group , Map < String , DescriptionTransport > contents ) { this . group = group ; this . contents = contents ; }
public void onClick ( View v ) { launchHomeScreen ( ) ; }
public void onChanged ( ) { super . onChanged ( ) ; mDataValid = true ; notifyDataSetChanged ( ) ; }
private void thenDelegateShouldSetContentView ( final View view ) { new Verifications ( ) { { mAppCompatDelegate . setContentView ( view ) ; } } ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { if ( parent == spinnerMain ) { setLayerSelectionTmpMain ( position ) ; } else if ( parent == spinnerSecondary ) { setLayerSelectionTmpSecondary ( position ) ; } }
public Uri createReadUri ( String itemId ) { return MaterialisticDatabase . getBaseReadUri ( ) . buildUpon ( ) . path ( itemId ) . build ( ) ; }
public void paintShouldDrawFullRedCircleIfOneValue ( ) { pieChart = new PieChart ( plot , new double [ ] { 1 . } , new ColorWrap [ ] { ColorWrap . RED } ) ;
public ContactMobile ( String id , String name , Bitmap photo , String mobile , boolean isExisted ) { super ( id , name , photo ) ; this . mobile = mobile ; this . isSelected = false ; this . isExisted = isExisted ; }
public void fadeOutInfoBox ( boolean faded ) { mFaded = faded ; resolveInfoBoxState ( ) ; }
public PasswordAuthentication getPasswordAuthentication ( ) { return new PasswordAuthentication ( userName , password . toCharArray ( ) ) ; }
private void getExtras ( ) { Intent intent = getIntent ( ) ; currentClusterId = intent . getStringExtra ( CLUSTER_ID_EXTRA ) ; currentHostId = intent . getStringExtra ( HOST_ID_EXTRA ) ; }
public void onSignalingChange ( PeerConnection . SignalingState newState ) { Log . w ( TAG , "onSignalingChange : " + newState ) ; }
public Long getKey ( PgeBill entity ) { if ( entity != null ) { return entity . getId ( ) ; } else { return null ; } }
public QuranPageWorker getQuranPageWorker ( ) { return mWorker ; }
private boolean checkPermissions ( ) { int permissionState = ActivityCompat . checkSelfPermission ( this , Manifest . permission . ACCESS_FINE_LOCATION ) ; return permissionState == PackageManager . PERMISSION_GRANTED ; }
public void surfaceDestroyed ( SurfaceHolder surfaceHolder ) { Log . d ( videoRecordManagerLogCatTag , "surfaceDestroyed" ) ; }
public void handleTesterIndex ( RoutingContext routingContext ) { routingContext . response ( ) . setStatusCode ( NO_CONTENT . code ( ) ) . end ( ) ; }
public void onDialogDismissed ( int id ) { }
public static String objectToJson ( Map < String , Entity > object ) { Gson gson = new Gson ( ) ; return gson . toJson ( object ) ; }
public LogListAdapter ( Context context , List < TrajectorySpanEntry > data ) { this ( context , R . layout . log_list_entry , data ) ; }
public String getStats ( ) { return getChar ( ) + " , " + ( ( int ) position . x ) + " , " + ( ( int ) position . y ) + " , " + healthPoints + "|" ; } }
public boolean matches ( @ NotNull Attributes attrs ) { return attrs . getIndex ( mAttributeName ) > - 1 && attrs . getValue ( mAttributeName ) . equals ( mId ) ; }
public Optional < InetAddress > getIp ( ) { return Optional . ofNullable ( ip != null ? ip : PeerUtils . getIpAddressOrNull ( ) ) ; }
public void onConfirm ( PaymentRequestParametersDialog dialog , String description , Option < MilliSatoshi > amount ) { this . lightningDescription = description ; this . lightningAmount = amount ; this . lightningUseDefaultDescription = false ; dialog . dismiss ( ) ; setPaymentRequest ( ) ; }
public void setWorkers ( long [ ] [ ] workers ) { Workers = workers ; }
public void onClick ( View v ) { if ( adapter != null && adapter . keys != null && adapter . keys . size ( ) > 0 ) goDown ( ) ; }
public PlotProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private MySiteFragment getMySiteFragment ( ) { Fragment fragment = mBottomNav . getFragment ( PAGE_MY_SITE ) ; if ( fragment instanceof MySiteFragment ) { return ( MySiteFragment ) fragment ; } return null ; }
private void setupEmptyView ( ) { mEmptyViewIcon . setImageDrawable ( new IconicsDrawable ( getContext ( ) ) . icon ( CommunityMaterial . Icon . cmd_stethoscope ) . color ( Color . GRAY ) . sizeDp ( 70 ) ) ; }
public void saveSpeedAlert ( float speedAlert ) { SharedPreferences . Editor editor = mSharedPref . edit ( ) ; editor . putFloat ( SPEED_ALERT , speedAlert ) ; editor . commit ( ) ; }
public void setOnGroupCollapseListener ( @ Nullable OnGroupCollapseListener listener ) { if ( mAdapter != null ) { mAdapter . setOnGroupCollapseListener ( listener ) ; } else { mOnGroupCollapseListener = listener ; } }
public void onNewToken ( String token ) { super . onNewToken ( token ) ; RegistrationIntentService . enqueueWork ( this , new Intent ( ) ) ; }
public static SORT_DIRECTION getSortDirection ( SharedPreferences prefs ) { return NewsDetailActivity . getSortDirectionFromSettings ( prefs ) ; }
private void initGroupsList ( ) { RecyclerView recyclerView = binding . recyclerView ; recyclerView . setHasFixedSize ( false ) ; recyclerView . setLayoutManager ( new LinearLayoutManager ( mContext ) ) ; refreshView ( ) ; }
public void onClick ( View v ) { mPresenter . onBackIbClick ( ) ; }
public CommentImageEmbedBinder ( Comment model ) { comment = model ; }
public void changed ( ChangeEvent event , Actor actor ) { game . setScreen ( new LevelSelectScreen ( game ) ) ; }
public static void takeScreenShot ( final String title ) { takeScreenShot ( getCurrentActivity ( ) , title ) ; }
public UserCredentials ( final String codeP , final String codeU ) { username = codeP ; password = codeU ; }
public void openCommunityMembers ( int accoundId , int groupId ) { PeopleSearchCriteria criteria = new PeopleSearchCriteria ( "" ) . setGroupId ( groupId ) ; PlaceFactory . getSingleTabSearchPlace ( accoundId , SearchContentType . PEOPLE , criteria ) . tryOpenWith ( getActivity ( ) ) ; }
public void onConnected ( @ Nullable Bundle bundle ) { Log . d ( "Wear" , "Connected" ) ; Wearable . MessageApi . addListener ( mWear , this ) ; }
public < T extends ProgressSender < TaskData > & CancelListener > ArrayList < Long > genCards ( long nid , @ NonNull Model model , @ Nullable T task ) { return genCards ( " ( " + nid + " ) " , model , task ) ; }
public void unregisterOnSharedPreferenceChangeListener ( OnSharedPreferenceChangeListener listener ) { listeners . remove ( listener ) ; }
private void showSyncErrorMessage ( String message ) { String title = getResources ( ) . getString ( R . string . sync_error ) ; showSimpleMessageDialog ( title , message , true ) ; }
public VH onCreateViewHolder ( ViewGroup parent , int viewType ) { return new VH ( inflater . inflate ( R . layout . list_item_message , parent , false ) ) ; }
private void setResetCurValue ( float curValue ) { if ( curValue < minScaleValue ) { curValue = minScaleValue ; } if ( curValue > maxScaleValue ) { curValue = maxScaleValue ; } this . curScaleValue = curValue ; }
private void loginUser ( String email ) { loginButton . setVisibility ( View . GONE ) ; progressBar . setVisibility ( View . VISIBLE ) ; getSpiceManager ( ) . execute ( new LoginTask ( email ) , "localAPI" , DurationInMillis . ONE_MINUTE , requestListener ) ; }
public void setItems ( List < CurrencyDictionary > items ) { this . items . clear ( ) ; this . items . addAll ( items ) ; notifyDataSetChanged ( ) ; }
public static void checkKeepScreenOn ( Activity activity ) { ViewUtils . setKeepScreenOn ( activity , SettingsManager . isKeepScreenOn ( ) ) ; }
private void thenItemCountShouldBe ( int expected ) { assertEquals ( expected , mItemCount ) ; }
public String Func ( ) throws java . lang . Exception { return HelloWorld ( ) ; }
public static Call < WebApi . Result > supportComment ( String token , int sid , int tid ) { return sWebApi . opForComment ( token , "support" , sid , tid ) ; }
public CharSequence getPageTitle ( int position ) { return "SECTION " + ( position + 1 ) ; }
public MatchBreakdownView2016 ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
private BroadcastReceiver wifiReceiver = new BroadcastReceiver ( ) { public void onReceive ( Context c , Intent i ) { Log . i ( TAG , "WiFi Scan successfully completed" ) ; handler . removeCallbacks ( stopOnTimeout ) ; getWiFiNetworks ( ) ; } } ;
public static UsbOtgSingleton getInstance ( ) { if ( instance == null ) instance = new UsbOtgSingleton ( ) ; return instance ; }
private void initiateGalleryUpload ( Activity activity , boolean allowMultipleUploads ) { setPickerConfiguration ( activity , allowMultipleUploads ) ; FilePicker . openGallery ( activity , 0 ) ; }
private static void addItem ( ContactEntity item ) { ITEMS . add ( item ) ; ITEM_MAP . put ( item . getContactId ( ) , item ) ; }
public ListViewFactory ( Context context ) { mContext = context ; }
private TerminalView getTerminalView ( ) { return mTermuxFloatView . mTerminalView ; }
public Set < String > getActiveTranslations ( ) { return activeTranslations ; }
public void start ( Attributes attributes ) { container . setNumberOfNewPosts ( Integer . parseInt ( attributes . getValue ( BOOKMARKS_ATTRIBUTE_COUNT ) ) ) ; }
public NameEntry ( View v ) { super ( v ) ; nationName = ( TextView ) v . findViewById ( R . id . basic_nation_name ) ; v . setOnClickListener ( this ) ; }
public void setAnimation ( @ Nullable BaseKeyframeAnimation < ? , ? > animation ) { this . animation = animation ; }
public BadgeStyle withColorPressed ( int colorPressed ) { this . mColorPressed = ColorHolder . fromColor ( colorPressed ) ; return this ; }
public boolean onStartNestedScroll ( CoordinatorLayout coordinatorLayout , FloatingActionButton child , View directTargetChild , View target , int nestedScrollAxes ) { return nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL ; }
public int method ( ) { return Request . Method . GET ; }
public void goToReposts ( int accountId , String type , int ownerId , int id ) { PlaceFactory . getLikesCopiesPlace ( accountId , type , ownerId , id , ILikesInteractor . FILTER_COPIES ) . tryOpenWith ( getActivity ( ) ) ; }
private void setupViewPager ( ) { viewPageAdapter . addFragment ( new Metrics ( ) , Constants . NET ) ; viewPageAdapter . addFragment ( new Metrics ( ) , Constants . RAM ) ; }
private void ensureConnected ( ) throws IOException { if ( ! this . tag . isConnected ( ) ) { this . tag . connect ( ) ; this . tag . setTimeout ( 2000 ) ; } }
private void clearCurrentState ( ) { SharedPreferences preferences = ApplicationLoader . applicationContext . getSharedPreferences ( "logininfo2" , Context . MODE_PRIVATE ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . clear ( ) ; editor . commit ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_6 . class ) ; startActivity ( i ) ; }
public static ArrayList < Note > getLatestNotes ( ) { return getLatestNotes ( 200 ) ; }
private void init ( ) { m_Paint = new Paint ( ) ; }
public boolean isItemViewSwipeEnabled ( ) { return false ; }
public void setScale ( float x , float y ) { mScaleX = x ; mScaleY = y ; }
public List < Audio > getQueue ( ) throws RemoteException { return mService . get ( ) . getQueue ( ) ; }
public boolean matchesSafely ( HostListActivity . HostAdapter . ViewHolder holder ) { return hasTextColor ( holder . nickname , expectedColor ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsHistory . class ) ; startActivity ( i ) ; }
public static boolean isValidator ( Annotation annotation ) { return annotation instanceof Size || annotation instanceof Pattern || annotation instanceof Email || annotation instanceof Mobile || annotation instanceof Max || annotation instanceof Min || annotation instanceof NotBlank || isCustomValidator ( annotation ) ; }
public static String messageStringFromVolleyError ( VolleyError volleyError ) { JSONObject json = volleyErrorToJSON ( volleyError ) ; if ( json == null ) return "" ; return JSONUtils . getString ( json , "message" ) ; }
public InfoHolder ( View itemView , int viewType ) { super ( itemView ) ; itemView . setTag ( viewType ) ; }
public void addHistoryItem ( @ NonNull HistoryItem historyItem ) { try { getDao ( HistoryItem . class ) . create ( historyItem ) ; } catch ( SQLException e ) { LogTool . e ( e ) ; } }
public T getMediaCrypto ( ) { return null ; }
public void onClick ( View v ) { parent . onClickSpecialButton ( Constants . SQRT ) ; }
public void put_Always_UpdateSortedValues ( ) { addSampleValues ( ) ; sut . put ( "key5" , 25 ) ; Collection < Integer > result = sut . sortedValues ( ) ; assertThat ( result , contains ( 10 , 20 , 25 , 30 , 40 ) ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { cbPoll . setEnabled ( isChecked ) ; cbNotify . setEnabled ( isChecked ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `sync_state` TEXT" ) ; }
public NoteCard ( Context context ) { this ( context , null ) ; }
public void setTableHorizontalPivotWidth ( float fraction ) { setRotationY ( - 90 * fraction ) ; setPivotX ( getWidth ( ) ) ; setPivotY ( getHeight ( ) / 2 ) ; }
public void onNewTransfer ( Transfer transfer ) { transfer . setId ( mTransferNotificationManager . nextId ( ) ) ; mTransferManager . addTransfer ( transfer ) ; }
public static Long readNullableLong ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) return null ; return in . readLong ( ) ; }
public int getClipHeight ( ) { return clipRect . height ( ) ; }
public static String getStorageName ( ) { return instance . mStorageName ; }
public void onSuccess ( File file ) { saveWallpaper ( context , TAG , imageUrl , file ) ; }
public static boolean keepForegroundService ( Context context ) { return twentySix ( ) || getBooleanPreference ( context , SettingsActivity . KEEP_FOREGROUND_SERVICE , R . bool . enable_foreground_service ) ; }
public void setAscending ( boolean ascending ) { CacheUtil . setCache ( getActivity ( ) , getCategory ( ) + TagsUtil . ORDER_ASCENDING , ascending ) ; updateDocumentList ( ) ; }
public void onLoaderReset ( Loader < ArrayList < Artist >> loader ) { getAdapter ( ) . swapDataSet ( new ArrayList <> ( ) ) ; }
public JSONObject applyChanges ( JSONObject kw ) throws UnknownHttpResponseException { return _run ( "applyChanges" , kw ) ; }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable String label , @ NonNull String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public int getBookmarksSortOrder ( ) { return mPrefs . getInt ( Constants . PREF_SORT_BOOKMARKS , 0 ) ; }
public UnitTest ( ) { super ( MainActivity . class ) ; }
private BroadcastReceiver switchReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { updateSwitch ( ) ; } } ;
public boolean hasInputDirection ( ) { return ( ( bitField0_ & 0x00000010 ) == 0x00000010 ) ; }
public static FormAdmissionFragment newInstance ( ) { return new FormAdmissionFragment ( ) ; }
private void initGoogleDriveButton ( ) { mGoogleDriveButton = binding . linkGDrive ; mGoogleDriveButton . setOnClickListener ( v -> { googleDriveButtonClick ( ) ; } ) ; }
public int getInt ( String key , int defValue ) { return Integer . valueOf ( this . getString ( key , Integer . toString ( defValue ) ) ) ; }
public SearchSuggestionCursor ( ) { super ( new String [ ] { BaseColumns . _ID , SearchManager . SUGGEST_COLUMN_TEXT_1 , SearchManager . SUGGEST_COLUMN_TEXT_2 , SearchManager . SUGGEST_COLUMN_INTENT_ACTION , SearchManager . SUGGEST_COLUMN_QUERY , SearchManager . SUGGEST_COLUMN_ICON_1 } ) ; }
public ValidatorBuilder setApplication ( Application application ) { this . application = application ; this . resources = application . getResources ( ) ; return this ; }
public static int getErrorCode ( ) { return rc5 . getErrorCode ( ) ; }
public void onAvailable ( Network network ) { super . onAvailable ( network ) ; subscribeToRoomEventsUpdate ( currentRoomId ) ; }
private void animateToCheckedState ( boolean newCheckedState ) { checkAnimator = ObjectAnimatorProxy . ofFloatProxy ( this , "progress" , newCheckedState ? 1 : 0 ) ; checkAnimator . setDuration ( 300 ) ; checkAnimator . start ( ) ; }
public static void openEventFragment ( Event event , FragmentActivity fragmentActivity ) { updateFragment ( getEventFragment ( event ) , fragmentActivity ) ; }
public long availableBytes ( @ NonNull FileDescriptor fd ) throws IOException { return availableBytes ; }
public int compare ( ChannelsDataSource . Channel lhs , ChannelsDataSource . Channel rhs ) { return lhs . name . compareTo ( rhs . name ) ; }
public void startDownloadingBook ( BookInfo bookInfo ) { BrowsingUtils . startDownloadingBook ( bookInfo , context ) ; }
public void onDialogDismissed ( ) { isDialogDisplayed = false ; isWrite = false ; }
public AbstractExpandableDataProvider getDataProvider ( ) { final Fragment fragment = getSupportFragmentManager ( ) . findFragmentByTag ( FRAGMENT_TAG_DATA_PROVIDER ) ; return ( ( ExampleExpandableDataProviderFragment ) fragment ) . getDataProvider ( ) ; }
public StringBuilder getStreet_address ( ) { return street_address ; }
private void maybeForceBuilderInitialization ( ) { if ( com . google . protobuf . GeneratedMessage . alwaysUseFieldBuilders ) { getMasterKeyFieldBuilder ( ) ; getEncryptionParametersFieldBuilder ( ) ; getPocketsFieldBuilder ( ) ; } }
public MenuState ( GameStateManager gsm ) { super ( gsm ) ; }
private void editNote ( ) { startActivity ( new Intent ( NotePreviewActivity . this , ActivityCreateNote . class ) . putExtra ( Constants . INTENT_ID , mItem . getKey ( ) ) ) ; }
public static Uri getSongFileUri ( int songId ) { return ContentUris . withAppendedId ( MediaStore . Audio . Media . EXTERNAL_CONTENT_URI , songId ) ; }
public void setOnSwipeRight ( OnSwipeRight onSwipeRight ) { this . onSwipeRight = onSwipeRight ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfInvisibility_Info ) ; }
public int getRepairCost ( ) { return ( getMaxHealth ( ) - getHealth ( ) ) * NODE_REPAIR_COST_MULTIPLIER ; }
public static void onBoot ( Context context ) { for ( Alarm alarm : Alarm . values ( ) ) { if ( alarm . startOnBoot ( ) ) { startAlarm ( alarm , context ) ; } } }
public static ConvertersRepository provideConvertersRepository ( Context c ) { return Repositories . getInMemoryRepoInstance ( new FakeConvertersServiceApiImpl ( ) ) ; }
public void onActivateSelected ( String themeId ) { onActivateThemeClicked ( themeId ) ; }
private void addCommentsToView ( Venter . Complaint detailedComplaint ) { for ( Venter . Comment comment : detailedComplaint . getComment ( ) ) commentList . add ( comment ) ; commentListAdapter . setCommentList ( commentList ) ; commentListAdapter . notifyDataSetChanged ( ) ; }
public static final Migration MIGRATION_1_2 = new Migration ( 1 , 2 ) { @ Override public void migrate ( SupportSQLiteDatabase database ) { database . execSQL ( "ALTER TABLE 'product' ADD COLUMN 'barCode' TEXT NULL" ) ; } } ;
public boolean onSingleTapUp ( MotionEvent event ) { return mPageController . handleTouchEvent ( event , AyahSelectedListener . EventType . SINGLE_TAP , mPageNumber ) ; }
public void onConfigured ( @ NonNull CameraCaptureSession session ) { cameraCaptureSession = session ; if ( cameraCallback != null ) { cameraCallback . onPreviewReady ( ) ; } }
private int getChannelAdminParticipantType ( TLRPC . ChannelParticipant participant ) { if ( participant instanceof TLRPC . TL_channelParticipantCreator || participant instanceof TLRPC . TL_channelParticipantSelf ) { return 0 ; } else if ( participant instanceof TLRPC . TL_channelParticipantEditor ) { return 1 ; } else { return 2 ; } }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mAwards . get ( 0 ) ) ; }
public LoadListDBRunnable ( int offset , String message , boolean success ) { this ( offset , message , success , null , null ) ; }
public void onEventMainThread ( ServiceEvents . LoggingStatus loggingStatus ) { if ( loggingStatus . loggingStarted ) { setActionButtonStop ( ) ; ShowPreferencesAndMessages ( ) ; ClearDisplay ( ) ; } else { setActionButtonStart ( ) ; } }
public void onClick ( View v ) { Intent i = new Intent ( Profile . this , Sendmessage . class ) ; i . putExtra ( Sendmessage . EXTRA_NAME , name ) ; startActivity ( i ) ; }
private static String getBeforeLabelEnd ( @ NonNull final String keySpec , final int labelEnd ) { return ( labelEnd < 0 ) ? keySpec : keySpec . substring ( 0 , labelEnd ) ; }
public void showSignupToLoginMessage ( ) { WPSnackbar . make ( findViewById ( R . id . main_view ) , R . string . signup_user_exists , Snackbar . LENGTH_LONG ) . addToSequencer ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , BookListActivity2 . class ) ; i . putExtra ( BookListActivity2 . EXTRA_BOOK_GROUP_TYPE , BookGroup . BookGroupType . FAVOURITE ) ; startActivity ( i ) ; }
public void onAnimationEnd ( Animator animation ) { if ( runningAnimation2 != null && runningAnimation2 . equals ( animation ) ) { attachButton . setVisibility ( GONE ) ; } }
public PagingFilterBuilder ( I instance ) { this . instance = instance ; }
public void update ( ) { switch ( mStatus ) { case RECORDING : setEnabled ( false ) ; break ; default : setEnabled ( true ) ; } }
public void setNavigationDrawerItemSelected ( int position ) { mNavDrawerFragment . setItemSelected ( position ) ; }
public void clickContinue ( View view ) { init ( ) ; resultText . setVisibility ( View . GONE ) ; timeSpentText . setVisibility ( View . GONE ) ; tryAgainButton . setVisibility ( View . GONE ) ; resetAllButtons ( ) ; }
public void setUserId ( Context context , int value ) { if ( ENUM_Int . INTEGER_USER_ID . value != value ) { ENUM_Int . INTEGER_USER_ID . value = value ; save ( context ) ; } }
private float getSaturationValue ( ) { float parameterValue = ( saturationValue / 100 . 0f ) ; if ( parameterValue > 0 ) { parameterValue * = 1 . 05f ; } return parameterValue += 1 ; }
public void testSafeToAddAuthToken21 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( notWpcomAddress2 ) ) ) ; }
public void onCancel ( @ NonNull final PickSource pPickSource , final int pRequestType ) { Log . d ( TAG , "Cancel : " + pPickSource . name ( ) ) ; }
public static boolean isInUsing ( CustomDNSServer server ) { return DaedalusVpnService . isActivated ( ) && ( server . getId ( ) . equals ( getPrimary ( ) ) || server . getId ( ) . equals ( getSecondary ( ) ) ) ; }
public GpsReceiver ( GpsIconData iconData ) { super ( iconData ) ; }
private void registerLocalBroadCastReceiver ( ) { LocalBroadcastManager . getInstance ( getActivity ( ) ) . registerReceiver ( stopServiceReceiver , new IntentFilter ( "stopservice" ) ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . intro_custom_layout , container , false ) ; }
private final void performMergeByKeepAction ( ) { this . closeOnSuccess ( this . getActivity ( ) . getString ( R . string . success_point_kept ) ) ; }
private static boolean isInitialized ( ) { return bookService != null ; }
private void handlePaymentError ( final int messageId ) { isProcessingPayment = false ; toggleForm ( ) ; mBinding . paymentErrorText . setText ( getString ( messageId ) ) ; mBinding . paymentError . setVisibility ( View . VISIBLE ) ; }
private void saveAsPolyline ( ) { if ( map . getPolyPoints ( featureId ) . size ( ) > 1 ) { finishWithResult ( ) ; } else { ToastUtils . showShortToastInMiddle ( getString ( R . string . polyline_validator ) ) ; } }
public void onTaskSuccess ( String s ) { FlyveLog . d ( s ) ; ConnectionHTTP . syncWebData ( "https : }
private void saveGame ( Bundle state ) { if ( game . getStatus ( ) == Game . GameStatus . GAME_RUNNING ) { game . pause ( ) ; game . save ( new GameSaverTransient ( state ) ) ; } }
private void initToolbar ( View rootView ) { mSetToolbarCallback . setToolbar ( ( Toolbar ) rootView . findViewById ( R . id . fragment_file_toolbar ) ) ; setStatusBarColor ( mActivity , R . color . status_bar ) ; setHasOptionsMenu ( true ) ; }
public static String addressSplitToGroups ( final NxtFamilyAddress address ) { return address . toString ( ) ; }
public Tegneflade ( Context a ) { super ( a ) ; tekstStregtype . setColor ( Color . GREEN ) ; tekstStregtype . setTextSize ( 24 ) ; }
public void onKeyDown ( int keyIndex ) { noteOn ( 0 , keyIndex , DEFAULT_VELOCITY ) ; }
public void deselectAll ( ) { mySongsRecyclerViewAdapter . clearSelected ( ) ; if ( actionMode != null ) { actionMode . finish ( ) ; actionMode = null ; } }
public void onHistoryChanged ( ) { needRefresh = true ; selection . deselectAll ( ) ; present ( view -> { view . hideDeleteButton ( ) ; view . enableSwipeDelete ( ) ; } ) ; }
public static void detach ( Char target , String cl ) { detach ( target . buff ( cl ) ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { executor . submit ( ( ) -> presenter . onOptionsItemSelected ( item . getItemId ( ) ) ) ; return true ; }
public final void attachView ( V view ) { this . view = view ; onAttach ( view ) ; if ( isFirstAttach ) { onFirstAttach ( view , dataSubs ) ; isFirstAttach = false ; } }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromTouch ) { mKdSeekBarValue . setText ( String . format ( "% . 2f" , ( float ) progress / 100 . 0f ) ) ; }
public void onItemSelected ( AdapterView av , View v , int arg2 , long arg3 ) { int midiChannel = midiChannelSpinner . getSelectedItemPosition ( ) ; activity . setMidiChannel ( midiChannel ) ; clientModel . setMidiChannel ( midiChannel ) ; clientModel . savePreferences ( activity ) ; }
public void activateVertexBuffer ( FloatBuffer vertexBuffer ) { mProgramCurrent . activateVertexBuffer ( vertexBuffer ) ; }
public void updateList ( List < Patient > patientList ) { mAdapter = new LastViewedPatientRecyclerViewAdapter ( this . getActivity ( ) , patientList ) ; mPatientsRecyclerView . setAdapter ( mAdapter ) ; }
public boolean containsYear ( String name ) { return remoteDataSource . containsYear ( name ) ; }
public void run ( ) { stopScan ( ) ; listener . onPostUpdate ( SyncStatus . FAILED ) ; Log . e ( "SWELL" , "Bluetooth timer timeout . " ) ; }
private void maybeForceBuilderInitialization ( ) { if ( com . google . protobuf . GeneratedMessage . alwaysUseFieldBuilders ) { getHeaderFieldBuilder ( ) ; getStatementFieldBuilder ( ) ; getPreferenceFieldBuilder ( ) ; getAttachmentFieldBuilder ( ) ; getVersionFieldBuilder ( ) ; } }
public Observable < TimePeriod > timePeriodChanges ( ) { return timePeriodDatesPublishSubject . asObservable ( ) ; }
public void setSelectedEntry ( DatabaseEntry entry ) { _selectedEntry = entry ; }
public PersonType getPersonType ( ) { return personType ; }
public void onProgress ( final int state ) { log . v ( TAG , "load | type = " , type , " | progress " , state ) ; }
public void run ( ) { mDown = true ; mHandler . removeCallbacks ( this ) ; mHandler . postDelayed ( this , KEYBOARD_REPEAT ) ; onEmulatedKeyClicked ( mView ) ; }
public void notifyDeletion ( Object obj ) { for ( DAO dao : this . daoList ) { dao . delete ( obj ) ; } }
public String getSubscriptionType ( ) { return mPlayerSubscriptionType ; }
public HistoricalRecordListPresenter ( @ Named ( "historicalRecordList" ) UseCase getHistoricalRecordListUseCase , HistoricalRecordModelDataMapper historicalRecordModelDataMapper ) { this . getHistoricalRecordListUseCase = getHistoricalRecordListUseCase ; this . historicalRecordModelDataMapper = historicalRecordModelDataMapper ; }
public ShieldFactory ( ) { mBitmapCache = new BitmapCache <> ( 512 ) ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser && videoView != null ) { videoView . seekTo ( 0 ) ; videoView . start ( ) ; } }
public final void setImage ( ImageSource imageSource , ImageViewState state ) { setImage ( imageSource , null , state ) ; }
public void onReceive ( Context context , Intent intent ) { if ( getEnabled ( context ) ) { if ( ! VhostsService . isRunning ( ) ) { VhostsService . startVService ( context ) ; } } }
public Integer getFeeChargesWaived ( ) { return feeChargesWaived ; }
public void delete ( ) { GLES20 . glDeleteProgram ( handle ) ; }
public void cancelCurrentlyExecutingTask ( ) { }
private boolean isTap ( int factor ) { return pathMoved ( ) <= mView . iconSize * factor ; }
public int getItemCount ( ) { return Daedalus . configurations . getRules ( ) . size ( ) ; }
public void onRemoveFailure ( @ Nullable String reason ) { AnswersProxy . get ( ) . logEvent ( "Remove Failure" ) ; Timber . d ( "Remove failure . " ) ; if ( isFinishing ( ) ) return ; stopProgress ( ) ; showToast ( reason ) ; }
public TabsColorChanger ( Context context , TabLayout tabs ) { tabsRef = new WeakReference <> ( tabs ) ; colorDark = AppCompatResources . getColorStateList ( context , R . color . gray_def_600_sel_800 ) ; colorLight = AppCompatResources . getColorStateList ( context , R . color . white_def_a080_sel_a100 ) ; }
public void onClick ( DialogInterface dialog , int which ) { Helper . view ( getContext ( ) , getActivity ( ) , getIntentRate ( getContext ( ) ) ) ; }
private void updateFavorites ( TetroidRecord record ) { if ( record == null || ! record . isFavorite ( ) ) return ; mMainView . updateFavorites ( ) ; updateFavoritesList ( ) ; }
public void restoreFromStart ( ) { Log . d ( LOG_TAG , "restoreFromStart -> current = 0" ) ; current = 0 ; }
public ApplicationListener createApplicationListener ( ) { return new ThroughIt ( ) ; }
public void onBindViewHolder ( BaseViewHolder holder , int position ) { if ( isHeader ( position ) ) { onBindHeaderViewHolder ( ( HeaderItemViewHolder ) holder , position ) ; } else { onBindNormalItemViewHolder ( ( NormalItemViewHolder ) holder , toNormalItemPosition ( position ) ) ; } }
public void attachView ( OnBoardingMVP . View view ) { super . attachView ( view ) ; analyticsHelper . trackPageView ( AnalyticsHelper . VIEW_ONBOARDING ) ; }
public EventBuilder setTimeLapseUnit ( TimeUnit timeLapseUnit ) { this . timeLapseUnit = timeLapseUnit ; return this ; }
public Uri getAfter ( ) { return mAfter ; }
public static String [ ] getListAdapterFrom ( ) { return new String [ ] { "amount" , "date" , "icon" } ; }
private static void deregister ( @ NonNull Context context ) { Log . i ( TAG , "Deregistering all workers with tag \"" + WORKER_TAG + "\"" ) ; WorkManager . getInstance ( context . getApplicationContext ( ) ) . cancelAllWorkByTag ( WORKER_TAG ) ; }
public DirectoryRefreshJob ( @ NonNull Context context , boolean notifyOfNewUsers ) { this ( context , null , null , notifyOfNewUsers ) ; }
public void onLocationChanged ( Location location ) { mLastLocation = location ; updateLocation ( ) ; }
public ScreenSlidePagerAdapter ( Context context , FragmentManager fm ) { super ( fm ) ; titles = new String [ ] { context . getString ( R . string . tab_incomming ) , context . getString ( R . string . tab_outgoing ) , } ; }
public void dispatchStarting ( RemoveAnimationInfo info , RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchRemoveStarting ( " + item + " ) " ) ; } mItemAnimator . dispatchRemoveStarting ( item ) ; }
public synchronized void setFileName ( String fileName ) { this . fileName = fileName ; }
private static sleepListener getInstance ( ) { if ( instance == null ) instance = new sleepListener ( ) ; return instance ; }
public void onSeekBarValue ( int value ) { config . setStackBlur ( value ) ; loadImage ( ) ; }
public T withDisabledIconColor ( int disabledIconColor ) { this . disabledIconColor = ColorHolder . fromColor ( disabledIconColor ) ; return ( T ) this ; }
public void setEditText ( @ IdRes int editTextResId , @ NonNull String text ) { EditText editText = ( EditText ) findViewById ( editTextResId ) ; editText . removeTextChangedListener ( editTextChangedListener ) ; editText . setText ( text ) ; editText . addTextChangedListener ( editTextChangedListener ) ; }
public File getSshDir ( ) { return MercuryApplication . getContext ( ) . getDir ( SSH_DIR , Context . MODE_PRIVATE ) ; }
public Builder listener ( ServerListener listener ) { this . mListener = listener ; return this ; }
public Throwable getThrowable ( ) { return null ; }
public static void incrementInvite ( String key , Map < String , String > otherUserMap ) { otherUserMap . put ( "Invite" + otherUserMap . size ( ) + 1 , key ) ; }
public com . google . protobuf . AnyOrBuilder getHeaderOrBuilder ( ) { if ( headerBuilder_ != null ) { return headerBuilder_ . getMessageOrBuilder ( ) ; } else { return header_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : header_ ; } }
public void onServiceConnected ( ComponentName className , IBinder binder ) { stopService ( new Intent ( getBaseContext ( ) , OgnService . class ) ) ; Intent exitIntent = new Intent ( "EMERGENCY_EXIT" ) ; sendBroadcast ( exitIntent ) ; finish ( ) ; }
public void onAnimationCancel ( Object animation ) { if ( animator != null && animator . equals ( animation ) ) { animator = null ; } }
private void enableFlash ( ) { Log . d ( "Habpanelview" , "disableFlash" ) ; synchronized ( fRunning ) { fPulseLength . set ( 0 ) ; fOn . set ( true ) ; fRunning . notifyAll ( ) ; } }
public com . google . protobuf . Any . Builder addPublicKeysBuilder ( ) { return getPublicKeysFieldBuilder ( ) . addBuilder ( com . google . protobuf . Any . getDefaultInstance ( ) ) ; }
public static void copy ( @ NonNull final int [ ] destination , @ NonNull final int [ ] source ) { destination [ INDEX_X ] = source [ INDEX_X ] ; destination [ INDEX_Y ] = source [ INDEX_Y ] ; }
private int computeScrollRange ( RecyclerView . State state ) { if ( getItemCount ( ) == 0 ) { return 0 ; } else { return scrollToChangeCurrent * ( getItemCount ( ) - 1 ) ; } }
public CharSequence getPageTitle ( int position ) { return ContentGrabber . InboxValue . values ( ) [ position ] . getDisplayName ( ) ; }
public void onError ( Throwable e ) { Timber . e ( e , "remove all" ) ; }
public void resetSettings ( ) throws RemoteException { connections . get ( connectionClutch ) . resetSettings ( ) ; }
public List < Restaurant > getRestaurants ( ) { List < Restaurant > restaurants = new ArrayList <> ( ) ; for ( Business business : businesses ) { restaurants . add ( business . toRestaurant ( ) ) ; } return restaurants ; }
public void run ( ) { Intent mainIntent = new Intent ( Introscreen . this , HomeScreen . class ) ; Introscreen . this . startActivity ( mainIntent ) ; Introscreen . this . finish ( ) ; }
public void onDestroy ( ) { NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . FileDidLoaded ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . FileDidFailedLoad ) ; }
public String getTotalReviews ( ) { return totalReviews ; }
public String getAdditionalInfo ( String searchedPlate ) { return nameFormatHelper . formatAdditionalInfo ( this , searchedPlate ) ; }
public CommandBuilder getArgument ( String string ) throws CommandParsingException { CommandBuilder commandBuilder = CommandManager . commands . get ( string ) ; if ( commandBuilder == null ) throw new CommandParsingException ( "command . common . value . command . parsing" ) ; return commandBuilder ; }
public void removeLayer ( @ NonNull ProfileLayerEvent . ProfileLayerRemoved event ) { Log . i ( TAG , "Removing profile layer " + event . layer ) ; flightProfile . removeLayer ( event . layer ) ; flightProfile . invalidate ( ) ; }
public void selected ( File selection ) { addBook ( selection . getPath ( ) ) ; }
public Anki2Importer ( Collection col , String file ) { super ( col , file ) ; mNeedMapper = false ; mDeckPrefix = null ; mAllowUpdate = true ; mDupeOnSchemaChange = false ; }
public Ingredient ( int id , String name ) { this . id = id ; this . name = name ; }
public SmsModule ( ReactApplicationContext reactContext ) { super ( reactContext ) ; smsList = new HashMap < Long , String > ( ) ; context = reactContext . getApplicationContext ( ) ; }
public boolean onClusterClick ( Cluster < Location_NoeC > cluster ) { return false ; }
public void onReceive ( Context context , Intent intent ) { mFullscreen = intent . getBooleanExtra ( BaseWebFragment . EXTRA_FULLSCREEN , false ) ; setFullscreen ( ) ; }
public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( noteDAO ) ; }
public ProtocolTracker restart ( @ NonNull Context context , @ Nullable final Callable callback ) { log . v ( TAG , "restart" ) ; stop ( context , ( ) -> start ( context , callback ) ) ; return this ; }
public void handleEvent ( DcEvent event ) { updateToolbar ( ) ; }
public static String getPushSenderId ( ) { return mPushSenderId ; }
public void onReceive ( Context context , Intent intent ) { AlarmCreator . createFromScratch ( context ) ; WidgetAlarmReceiver . createNextAlarm ( context ) ; WidgetService . notifyDataChanged ( context ) ; }
public void hide ( ) { if ( musicControllerAnimationSet != null ) { musicControllerAnimationSet . cancel ( ) ; } prepareForAnimation ( playPauseButton ) ; prepareForAnimation ( nextButton ) ; prepareForAnimation ( prevButton ) ; prepareForAnimation ( shuffleButton ) ; prepareForAnimation ( repeatButton ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; if ( mActivity != null ) { mActivity . unSubscribeFromMusicEvents ( this ) ; mActivity . unsubscribeToPaletteColors ( this ) ; } }
public int process ( ) { return this . left . process ( ) * this . right . process ( ) ; }
public KeyAndJson call ( JsonArray jsonElement ) { return new KeyAndJson ( mKey , jsonElement ) ; }
public long getId ( ) { return id ; }
public void setQuestions ( Question [ ] questions ) { this . questions = questions ; }
private Photo ( String photoId , String passengerId , Bitmap bitmap ) { this . photoId = photoId ; this . passengerId = passengerId ; this . bitmap = bitmap ; }
public void onChanged ( Integer count ) { Log . i ( "Synchronizing folders = " + count ) ; if ( count == 0 ) cowner . start ( ) ; else cowner . stop ( ) ; }
public static boolean isRated ( ) { return get ( IS_RATED , false ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; operationSetLogging = true ; textViewLoggingValue . setText ( "" ) ; readWriteOperation ( ) ; }
public BaseFragment ( ) { classGuid = ConnectionsManager . getInstance ( ) . generateClassGuid ( ) ; }
public String toString ( ) { return String . format ( "%1$s - %2$s - %3$s" , id , name , symbol ) ; }
public void addPostListingHeader ( final PostListingHeader view ) { General . checkThisIsUIThread ( ) ; mAdapter . appendToGroup ( GROUP_HEADER , new GroupedRecyclerViewItemFrameLayout ( view ) ) ; doWorkaround ( ) ; }
public UserBuilder gradYear ( int gradYear ) { this . gradYear = gradYear ; return this ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; host = ( PlayTrackAlbumDialogHost ) context ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { dialog . dismiss ( ) ; fab . show ( ) ; }
public void touchEvent ( MotionEvent event ) { main_activity . getMainUI ( ) . clearSeekBar ( ) ; main_activity . getMainUI ( ) . closePopup ( ) ; if ( main_activity . usingKitKatImmersiveMode ( ) ) { main_activity . setImmersiveMode ( false ) ; } }
public void onSuccess ( GetThermometer trip ) { connectivity . sendMessage ( Messages . resultTrip ( nodeId , trip . steps ) ) ; }
public void onCreatePreferences ( Bundle bundle , String s ) { addPreferencesFromResource ( R . xml . odyssey_main_settings ) ; PreferenceManager . setDefaultValues ( getActivity ( ) , R . xml . odyssey_main_settings , false ) ; }
public boolean onTouch ( View v , MotionEvent event ) { ( ( NewsReaderListActivity ) getActivity ( ) ) . clearSearchViewFocus ( ) ; return false ; }
private byte [ ] bitmapToByteArray ( Bitmap image ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; image . compress ( Bitmap . CompressFormat . JPEG , 100 , byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
public void setCover ( String coverUrl ) { if ( mCoverImageView != null ) Glide . with ( this ) . load ( coverUrl ) . into ( mCoverImageView ) ; }
public SquareFrameLayout ( Context context ) { super ( context ) ; }
public boolean setDate ( String date ) { if ( date == null ) return false ; else { setDate ( LocalDate . parse ( date ) ) ; return true ; } }
public float getCorrectAnswers ( ) { return correctAnswers ; }
public static void showAuthErrorView ( Activity activity , SiteStore siteStore , SiteModel site ) { showAuthErrorView ( activity , siteStore , AuthErrorDialogFragment . DEFAULT_RESOURCE_ID , AuthErrorDialogFragment . DEFAULT_RESOURCE_ID , site ) ; }
public SurveyQuestionViewPagerActivityTest ( ) { super ( SurveyQuestionViewPager . class ) ; }
private void erase ( byte [ ] array ) { if ( array == null ) return ; for ( int i = 0 ; i < array . length ; i ++ ) { array [ i ] = 0 ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; RobotLog . vv ( TAG , "onDestroy ( ) " ) ; unbindFromService ( ) ; wifiLock . release ( ) ; RobotLog . cancelWriteLogcatToDisk ( this ) ; }
public boolean isDeveloperOptionInstantWinEnabled ( ) { return isDeveloperOptionLockEnabled ( ) && savedSharedData . getBoolean ( PREF_KEY_DEVELOPER_OPTION_INSTANT_WIN , DEFAULT_DEVELOPER_OPTION_INSTANT_WIN ) ; }
public String getDescription ( ) { return "Rturns an action that loops the main thread for at least " + millis + "ms . " ; }
public boolean isDarkTheme ( Activity activity ) { return index == 4 ? Configuration . UI_MODE_NIGHT_YES == ( activity . getResources ( ) . getConfiguration ( ) . uiMode & Configuration . UI_MODE_NIGHT_MASK ) : index > 0 ; }
public String getSipUserId ( ) { if ( ! User . getHasPhoneAccount ( ) ) { return null ; } return User . getPhoneAccount ( ) . getAccountId ( ) ; }
public void testGPlay ( ) { Lyrics result = idDecoder . doInBackground ( "https : assertNotNull ( result ) ; assertEquals ( result . getArtist ( ) , "Tycho" ) ; assertEquals ( result . getTrack ( ) , "A Walk" ) ; }
public void onClick ( View view ) { songsManager . play ( holder . getAdapterPosition ( ) , data ) ; }
public Note ( ) { this ( "" , false , 0 ) ; }
private void updateContent ( ) { mainLayout = getActivity ( ) . findViewById ( R . id . wear_info_main_layout ) ; infoLayout = getActivity ( ) . findViewById ( R . id . wear_info_frame_layout ) ; infoLayout . setVisibility ( View . GONE ) ; flashlight ( ) ; }
public SwanUser getPeerAt ( int position ) { return nearbyPeers . get ( position ) ; }
public void onClick ( View v ) { Log . w ( TAG , "pausebutton onClick" ) ; if ( audioSlidePlayer != null ) { togglePauseToPlay ( ) ; audioSlidePlayer . stop ( ) ; } }
public PostCommentListingURL after ( String after ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public com . google . protobuf . Any getHeader ( ) { if ( headerBuilder_ == null ) { return header_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : header_ ; } else { return headerBuilder_ . getMessage ( ) ; } }
public int getItemCount ( ) { return banknoteList . size ( ) ; }
public RoboRadioButton ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( attrs ) ; }
public void onClickDisabledCurrency ( String clickedDisabledCurrencyName ) { if ( getActivity ( ) != null ) { DonateDialog . getInstance ( ) . show ( getActivity ( ) . getSupportFragmentManager ( ) , DonateDialog . TAG ) ; } }
public void setUp ( ) { item = new HackerNewsClient . HackerNewsItem ( 1l ) ; }
public void onCreate ( ) { super . onCreate ( ) ; status = new AppStatus ( ( ActivityManager ) getSystemService ( Context . ACTIVITY_SERVICE ) ) ; data_manager = new DataManager ( getResources ( ) , BASE_ASSETS_PATH ) ; }
public Integer getShowphoto ( ) { return showphoto ; }
public void onError ( Throwable e ) { Timber . e ( e , "modifyName counter" ) ; }
public static void openDevelopersPage ( Context context ) { openMarket ( context , "market : }
public boolean onEditorAction ( TextView textView , int i , KeyEvent keyEvent ) { if ( ! TextUtil . empty ( textView ) ) { String query = TextUtil . getTrimmed ( textView ) ; callback . onSearchPerform ( query ) ; return true ; } return false ; }
public static int getRealPosition ( int position ) { return 5 - position ; }
public void onError ( String msg , Throwable th ) { Log . e ( TAG , msg , th ) ; }
public Request getItem ( int position ) { return items_ . get ( position ) ; }
private void handleOnUnderSwipeableViewButtonClicked ( View v ) { int position = mRecyclerView . getChildAdapterPosition ( v ) ; if ( position != RecyclerView . NO_POSITION ) { ( ( UnderSwipeableExampleActivity ) getActivity ( ) ) . onItemButtonClicked ( position ) ; } }
public static boolean enableFreeformModeShortcut ( Context context ) { return canEnableFreeform ( ) && ! isOverridingFreeformHack ( context , false ) && ! isChromeOs ( context ) ; }
public short getStatus ( ) { return Status ; }
private DcLocation ( ) { lastLocation = new Location ( "?" ) ; }
private void subscribeUISelectedAssignment ( ) { selectedAssignmentObserver = moodleAssignment -> { if ( moodleAssignment != null ) { displaySelectedAssignment ( moodleAssignment ) ; } } ; moodleViewModel . getSelectedAssignment ( ) . observe ( this , selectedAssignmentObserver ) ; }
public CustomTabsSession getSession ( ) { return mSession ; }
public void onClick ( View v ) { StorageManager . loadAllNodes ( MainActivity . this ) ; }
public void dayOne ( View v ) { Intent one = new Intent ( Schedule . this , DayOne . class ) ; startActivity ( one ) ; }
public void onBindViewHolder ( @ NonNull final ResultViewHolder holder , int position ) { holder . bind ( position ) ; }
public Actor getActor ( VisualSettingManager visualSettingManager ) { switch ( type ) { case TextField : return getTextField ( visualSettingManager ) ; case Slider : return getSlider ( visualSettingManager ) ; } return null ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : upToMainActivity ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void onDestroy ( ) { log . v ( TAG , "Fragment destroyed" ) ; loaded = false ; thread . interrupt ( UU ) ; }
public LeftRightEdgeEffectDecorator ( RecyclerView recyclerView ) { super ( recyclerView ) ; }
public void onClick ( DialogInterface dialog , int which ) { startActivity ( intentA ) ; overridePendingTransition ( R . xml . fade_in , R . xml . fade_out ) ; }
public boolean saveDefault ( ) { setValueToGeneral ( INI_CRYPT_CHECK_HASH , null ) ; setValueToGeneral ( INI_CRYPT_CHECK_SALT , null ) ; setValueToGeneral ( INI_CRYPT_MODE , null ) ; setValueToGeneral ( INI_MIDDLE_HASH_CHECK_DATA , null ) ; setValueToGeneral ( INI_VERSION , DEF_VERSION ) ; return save ( ) ; }
public void start ( ) { if ( mStateFired ) { throw new IllegalStateException ( ) ; } mAnimation . start ( ) ; mStateFired = true ; }
public SinglePlaylistViewModel . State getData ( ) { return mState ; }
public boolean isDayEmpty ( Date date ) { return getDinners ( date ) . size ( ) == 0 ; }
public static boolean isIpAddressLocalNetwork ( InetAddress addr ) { return addr . isSiteLocalAddress ( ) ; }
private static < K , V > boolean colorOf ( Entry < K , V > p ) { return ( p == null ? BLACK : p . color ) ; }
public com . coinomi . core . protos . Protos . Transaction . Pool getPool ( ) { return pool_ ; }
public void onFailure ( Call < ResBnbNodeInfo > call , Throwable t ) { WLog . w ( "onFetchBnbNodeInfo " + t . getMessage ( ) ) ; onUpdateView ( ) ; }
public void onClick ( View arg0 ) { JobActivity . this . break2TimeClicked ( ) ; }
public long getUpdateInterval ( ) { return ATTACK_NODE_UPDATE_INTERVAL ; }
public Cursor getConversation ( long threadId ) { return getConversation ( threadId , 0 ) ; }
public void resumeGame ( View view ) { hide ( ) ; }
public float strokeWidth ( float velocity ) { return Math . max ( mMaxWidth / ( velocity + 1 ) , mMinWidth ) ; }
public int getSelectedIndex ( ) { return selectedIndex ; }
private Bundle getConfiguredBundleWithDataUri ( @ NonNull Uri uri ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( Constants . URI_FROM_EXTERNAL_APP , uri . toString ( ) ) ; return bundle ; }
public static void handle ( @ NonNull View v , @ Nullable String s ) { v . setVisibility ( TextUtils . isEmpty ( s ) ? View . GONE : View . VISIBLE ) ; }
public boolean readScheduRankFromBackup ( Context context ) { return readScheduRankFromFile ( m_scheduRank . getName ( ) + BACKUP_FILES_SUFFIX , context , true , true ) ; }
private void setPreference ( String key , int val ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit ( ) . putInt ( key , val ) . apply ( ) ; }
public com . google . protobuf . Any getMisbehaviour ( ) { if ( misbehaviourBuilder_ == null ) { return misbehaviour_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : misbehaviour_ ; } else { return misbehaviourBuilder_ . getMessage ( ) ; } }
public void show ( View view , String errorMessage ) { Snackbar snackbar = Snackbar . make ( view , errorMessage , Snackbar . LENGTH_LONG ) ; setTextColor ( snackbar ) ; snackbar . show ( ) ; }
public float getAutoSendDelay ( ) { return Float . valueOf ( get ( "autoSendDelay" , "0" ) ) ; }
public void setOrientation ( DSVOrientation orientation ) { orientationHelper = orientation . createHelper ( ) ; removeAllViews ( ) ; requestLayout ( ) ; }
public void flowInterrupt ( String workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { Log . i ( LOG_TAG , String . format ( "%s Flow Interrupt" , workflowId ) ) ; getMvpView ( ) . showProgress ( false ) ; }
public void start ( Attributes attributes ) { mCurrentThread . setNumberOfHits ( Integer . parseInt ( attributes . getValue ( Topic . Xml . NUMBER_OF_HITS_ATTRIBUTE ) ) ) ; }
public static final String formatAsSQLTime ( int hours , int minutes ) { return String . format ( "%02d : %02d" , hours , minutes ) ; }
public String getRegExp ( ) { return null ; }
public void showProgressBar ( ) { mDataFrameLayout . setVisibility ( View . INVISIBLE ) ; mErrorMessage . setVisibility ( View . INVISIBLE ) ; mProgressBar . setVisibility ( View . VISIBLE ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { switchPreference . setChecked ( ( boolean ) newValue ) ; return true ; }
public void setVolume ( float volume ) { if ( this . volume != volume ) { this . volume = volume ; setAudioTrackVolume ( ) ; } }
private void errorLog ( String tag , String msg ) { if ( this . enableLog ) { errorLog ( tag , msg ) ; } }
public int getSiteId ( ) { return mSiteId ; }
private static PlayerStateV2 migrate ( PlayerState playerState ) { PlayerStateV2 returnMe = new PlayerStateV2 ( playerState . file ) ; returnMe . levels . put ( GameType . MULTIPLICATION , playerState . level ) ; return returnMe ; }
public void goToLikes ( int accountId , String type , int ownerId , int id ) { PlaceFactory . getLikesCopiesPlace ( accountId , type , ownerId , id , ILikesInteractor . FILTER_LIKES ) . tryOpenWith ( getActivity ( ) ) ; }
public UserCommentListingURL after ( String newAfter ) { return new UserCommentListingURL ( user , limit , newAfter ) ; }
public boolean isSearchPackageActivated ( ) { return mSharedPreferences . getBoolean ( KEY_SEARCHPKG , false ) ; }
public synchronized boolean isSystemContact ( ) { return isSystemContact ; }
public final Observable < ActivityEvent > lifecycle ( ) { return lifecycleSubject . asObservable ( ) ; }
public String tileName ( int tile ) { switch ( tile ) { case Terrain . WATER : return Game . getVar ( R . string . Sewer_TileWater ) ; default : return super . tileName ( tile ) ; } }
public EventListWriter eventListWriter ( Database db ) { return Mockito . mock ( EventListWriter . class ) ; }
public void onLost ( Network network ) { showConnectionType ( ) ; }
public void onResponse ( Call < PlanetaryCalendar > call , Response < PlanetaryCalendar > response ) { calendar . setValue ( response . body ( ) ) ; calendarCache = calendar ; }
public void testParseSingleTeamWinner ( ) { assertItemsEqual ( 3 ) ; }
public int getCurrentStreamPosition ( ) { if ( ! isConnected ( ) ) { return mCurrentPosition ; } return ( int ) mRemoteMediaClient . getApproximateStreamPosition ( ) ; }
public static String logDmsg ( String val ) { gPrefs . edit ( ) . putString ( LOG_DMESG , val ) . commit ( ) ; return val ; }
public Builder setViewRoot ( View viewRoot ) { P . mViewRoot = viewRoot ; P . mViewRootId = 0 ; return this ; }
public String toString ( ) { return "Highlight , x : " + mX + "y : " + mY + " , dataSetIndex : " + mDataSetIndex + " , stackIndex ( only stacked barentry ) : " + mStackIndex ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; mApiInterface = getApiInterface ( ) ; mFeedApiInterface = getFeedApiInterface ( ) ; changeRandomParallaxImage ( ) ; initializedRealm ( ) ; }
public void onUserTalkStateUpdated ( IUser user ) throws RemoteException { mChannelAdapter . notifyDataSetChanged ( ) ; }
public int getCurrentCompYear ( ) { APIStatus status = fetchApiStatus ( ) ; if ( status == null ) { Calendar cal = Calendar . getInstance ( ) ; return cal . get ( Calendar . YEAR ) ; } return status . getCurrentSeason ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Bundle arguments = getArguments ( ) ; if ( arguments != null ) { hostID = arguments . getInt ( "id" ) ; } }
public String getGroupName ( ) { return "" ; }
public List getSystemCommands ( ) throws RemoteException { return connections . get ( connectionClutch ) . getSystemCommands ( ) ; }
private void thenDelegateShouldPostResume ( ) { new Verifications ( ) { { mAppCompatDelegate . onPostResume ( ) ; } } ; }
private void requestExternalSdcardPermission ( ) { ActivityCompat . requestPermissions ( this , new String [ ] { Manifest . permission . WRITE_EXTERNAL_STORAGE } , REQUEST_WRITE_TO_SDCARD_PERMISSIONS ) ; mQuranSettings . setSdcardPermissionsDialogPresented ( ) ; }
public void onActionStateChanged ( ) { checkVibrateOnClickState ( ) ; TimeManager . INSTANCE . toggle ( ) ; updateNotification ( ) ; playStopwatch ( ) ; }
public TextView getAmountView ( ) { return amount ; }
public void unsubscribeToPaletteColors ( final PaletteListener paletteListener ) { if ( paletteListener != null ) { mPlaletteListeners . remove ( paletteListener ) ; } }
public Cursor getAllSmsTemplates ( ) { return db ( ) . query ( SMS_TEMPLATES_TABLE , SmsTemplateColumns . NORMAL_PROJECTION , SmsTemplateColumns . template + " is not null" , null , null , null , SmsTemplateColumns . title . name ( ) ) ; }
public void onResume ( ) { onScreen = true ; if ( requestAcknowledgedActionPending ) { getMvpView ( ) . showProgress ( false ) ; ( getMvpView ( ) ) . gotoDashboard ( - 1 ) ; } }
public void onAddMediaVideoClicked ( boolean allowMultipleSelection ) { mEditorPhotoPicker . setAllowMultipleSelection ( allowMultipleSelection ) ; ActivityLauncher . viewMediaPickerForResult ( this , mSite , MediaBrowserType . GUTENBERG_VIDEO_PICKER ) ; }
private boolean isSuccessfulRequest ( Integer responseCode ) { return ( responseCode != null && ( 200 <= responseCode && responseCode <= 299 ) ) ; }
public void setType ( @ NonNull String type ) { mType = type ; }
public void onChanged ( @ Nullable OverpassResponse . Element element ) { updatePointer ( ) ; }
private void buildPresentation ( Resources res , int level ) { currentLevel = gameSession . obtainCurrentLevel ( res , level ) ; }
public WidgetGrandeRemoteViewsFactory ( Context context , Intent intent ) { this . mioContext = context ; lstBudgetAperti = new ArrayList < BudgetAperto > ( ) ; }
public void onProviderDisabled ( String s ) { Intent i = new Intent ( Settings . ACTION_LOCATION_SOURCE_SETTINGS ) ; startActivity ( i ) ; }
private TransferControlView getTransferControls ( ) { if ( ! transferControls . isPresent ( ) ) { transferControls = Optional . of ( ( TransferControlView ) ViewUtil . inflateStub ( this , R . id . transfer_controls_stub ) ) ; } return transferControls . get ( ) ; }
public void selectPlayer ( int position ) { inGameAdapter . clearSelection ( ) ; inGameAdapter . toggleSelection ( position ) ; scrollToPlayer ( position ) ; }
public void onStartListening ( ) { Tile tile = getQsTile ( ) ; tile . setState ( Tile . STATE_ACTIVE ) ; tile . updateTile ( ) ; }
public NavDrawerHeaderView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( context , attrs ) ; }
public void setDataSeparator ( byte s ) { data_separator = s ; }
public void write ( int b ) { device . write ( new byte [ ] { ( byte ) b } ) ; }
public void editTask ( long id ) { startActivity ( new Intent ( this , TaskEditActivity . class ) . putExtra ( TaskEditActivity . EXTRA_TASKID , id ) ) ; }
private String formatEmoji ( EmojiResult result ) { return String . format ( " : %s : " , result . emoji . getShortcode ( ) ) ; }
public int getCount ( ) { return Tags . kinds . length - 1 ; }
public void onRefresh ( ) { if ( isSearchEventSet ( searchEvent ) && searchFragment ) { handleSearchEvent ( searchEvent ) ; mRefreshListLayout . setRefreshing ( false ) ; } else { searchFragment = false ; super . onRefresh ( ) ; } }
public void binderDied ( ) { CustomTabsService . this . cleanUpSession ( sessionToken ) ; }
public void testMockSurfaceArea ( ) { when ( mainViewModel . getSurfaceArea ( ) ) . thenReturn ( dummySurfaceArea ) ; double volume = mainViewModel . getSurfaceArea ( ) ; verify ( cuboidModel ) . getSurfaceArea ( ) ; assertEquals ( dummySurfaceArea , volume , 0 . 0001 ) ; }
public void setCategories ( List < RestaurantCategory > categories ) { this . categories = categories ; }
public User_ getUser ( ) { return user ; }
public void onClick ( TetroidNode node ) { onSelectNode ( node ) ; }
private void startConnection ( String host ) { mAuthTask = new AccountCreationTask ( this , getApplicationContext ( ) , mAccountManager ) ; mAuthTask . execute ( host ) ; }
public void displayChildrenOfWithHighlightCurrent ( Title title , int currentTitleId ) { mShouldHighlightCurrent = true ; mCurrentTitleId = currentTitleId ; changeCursor ( bookDatabaseHelper . getTitlesUnder ( title . id ) ) ; }
private void hideColumns ( int id ) { ImageView view = ( ImageView ) this . findViewById ( id ) ; view . setVisibility ( View . GONE ) ; view . setOnClickListener ( this ) ; }
public void onWindowFocusChanged ( boolean hasFocus ) { super . onWindowFocusChanged ( hasFocus ) ; if ( hasFocus ) { setBackgroundGradient ( ) ; } } ;
private double kgTopound ( double num ) { return num * 2 . 205d ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `warning` TEXT" ) ; }
public SizeMetric getWidthMetric ( ) { return sizeMetrics . getWidthMetric ( ) ; }
public OrderListAdapter ( List < OrderProduct > orderList , OrderViewModel viewModel ) { this . orderList = orderList ; this . viewModel = viewModel ; }
public void setDisplayMode ( DisplayMode mode ) { _setDisplayMode ( mode . getValue ( ) ) ; }
public void fireAvatarClick ( ) { if ( getAccountId ( ) != ownerId ) { prepareUserAvatarsAndShow ( ) ; return ; } getView ( ) . showAvatarContextMenu ( ) ; }
private void cancelTasks ( ) { cancelTask ( testConnectionTask ) ; cancelTask ( getCredentialsTask ) ; cancelTask ( testFeedsTask ) ; }
private boolean goToBalance ( ) { return accountFragment . isVisible ( ) && accountFragment . goToBalance ( true ) ; }
public List < ComicVO > getComics ( ) { return mComics ; }
private Computer ( Parcel parcel ) { this . name = parcel . readString ( ) ; this . addr = parcel . readString ( ) ; }
public void onSuccess ( Usuario result ) { usuario = result ; view . dismissprogess ( ) ; showUserInfoAndGetAllAppData ( result ) ; }
public TextLabelWidget ( LayoutManager layoutManager , Size size ) { this ( layoutManager , size , TextOrientationType . HORIZONTAL ) ; }
public void onClick ( View v ) { parent . onClickOperationButton ( Constants . MUL ) ; }
public OpenHAB2Widget ( ) { }
public void filter ( String filter ) { mFilter = filter ; mAdapter . setHighlightUpdated ( false ) ; mSwipeRefreshLayout . setRefreshing ( true ) ; refresh ( ) ; }
public String getItem ( int position ) { return jsons . get ( position ) . getThumbnailUrl ( ) ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { isTouchTracking = false ; if ( seekBarTTSPitch . getProgress ( ) != initialProgress ) { ttsSetPitchFromSeekBar ( ) ; } }
public void onRebind ( final Intent intent ) { serviceInUse = true ; }
public void SosyalCard ( View v ) { Intent intent = new Intent ( getApplicationContext ( ) , category_frag3 . class ) ; startActivity ( intent ) ; }
public ApplicationListViewModel search ( String f ) { filter = f ; databaseCreator . filterResult ( this . getApplication ( ) , filter ) ; return this ; }
public void uiDeviceConnected ( BluetoothGatt gatt , BluetoothDevice device ) { super . uiDeviceConnected ( gatt , device ) ; return ; }
public Preferences getPreferences ( ) { return prefs ; }
public < T extends ViewModel > T create ( Class < T > modelClass ) { if ( modelClass . isAssignableFrom ( OverviewViewModel . class ) ) { return ( T ) new OverviewViewModel ( appDatabase ) ; } throw new IllegalArgumentException ( "Unknown ViewModel class" ) ; }
public void reset ( GameManager gm ) { super . reset ( gm ) ; runCounter = 0 ; }
public Thread newThread ( @ NonNull Runnable runnable ) { Thread thread = new Thread ( runnable ) ; thread . setName ( "FairEmail_" + threadId . getAndIncrement ( ) ) ; thread . setPriority ( THREAD_PRIORITY_BACKGROUND ) ; return thread ; }
public void onFailure ( @ NonNull Call < Results < FormResource >> call , @ NonNull Throwable t ) { ToastUtil . error ( t . getMessage ( ) ) ; }
public void underlineButtonClicked ( View underline ) { AnimusMiscMethods . underline ( entryTextET ) ; }
private void startDelayedFetch ( ) { if ( this . dataFetchRunnable == null ) { this . handler . removeCallbacks ( this . dataFetchRunnable ) ; } this . handler . postDelayed ( this . dataFetchRunnable , BTLE_DELAY_SHORT ) ; }
public void onStartDrag ( @ NonNull Action action , @ NonNull PointF location ) { rightDragHandle . animate ( ) . alpha ( 0 . 5f ) ; }
public void uncaughtException ( final Thread thread , final Throwable ex ) { caughtException ( thread , ex ) ; defaultHandler . uncaughtException ( thread , ex ) ; }
public int getDownloadSpeedLimit ( ) { return th . isValid ( ) ? th . getDownloadLimit ( ) : 0 ; }
public String getLastConvertValue ( ) { return generalPrefs . getString ( "pref_convert_value" , "0 . 00" ) ; }
public MainWrappers ( Context context , boolean vr , int levelIdx ) { this . context = context ; this . vr = vr ; isFree = false ; isFreeable = false ; this . levelIdx = levelIdx ; }
public void setBitmaps ( List < Bitmap > bitmaps ) { this . bitmaps = bitmaps ; }
public void displayUploads ( List < UploadObject > data ) { if ( nonNull ( mUploadAdapter ) ) { mUploadAdapter . setData ( data ) ; } }
public int getNotificationId ( ) { return NOTIFICANTION_ID ; }
public Builder background ( @ ColorRes int backgroundRes ) { this . background = backgroundRes ; return this ; }
static private void tryNextBanner ( ) { IBannerProvider chosenProvider = choseLessFailedFrom ( AdsUtils . bannerFails , Integer . MAX_VALUE ) ; if ( chosenProvider != null ) { GameLoop . runOnMainThread ( chosenProvider : : displayBanner ) ; } }
public void finish ( ) { mLastDataSource = null ; mPlayer = null ; mRecorder = null ; mStartTime = 0 ; mOnCompletionListener = null ; releaseLock ( true ) ; releaseAudioFocus ( ) ; }
public final String getArtistAlbumSortOrder ( ) { return mPreferences . getString ( ARTIST_ALBUM_SORT_ORDER , SortOrder . ArtistAlbumSortOrder . ALBUM_YEAR_ASC ) ; }
public void setAdapter ( ) { todoAdapter = new ToDoAdapter ( parentActivity , toDoDB . getToDoItems ( "inactive" ) ) ; recyclerView . setAdapter ( todoAdapter ) ; todoAdapter . notifyDataSetChanged ( ) ; }
public static String formatFiatValue ( Fiat fiat ) { return formatFiatValue ( fiat , 2 , 0 ) ; }
public void onReceive ( Context context , Intent intent ) { Log . d ( TAG , "onReceive" ) ; super . onReceive ( context , intent ) ; WidgetUpdaterJobService . performBackgroundUpdate ( context ) ; }
public Money multiply ( int multiplier ) { Money moneyFactor = new Money ( new BigDecimal ( multiplier ) , mCurrency ) ; return multiply ( moneyFactor ) ; }
public void onPastComments ( ) { final SessionListDialog sessionListDialog = SessionListDialog . newInstance ( controller . getUri ( ) , controller . getSession ( ) , SessionChangeListener . SessionChangeType . COMMENTS ) ; sessionListDialog . show ( getFragmentManager ( ) , null ) ; }
public void notifyDigitsChanged ( ) { reload ( ) ; next ( ) ; }
public ColorStateList getIndeterminateTintList ( ) { logProgressBarTintWarning ( ) ; return super . getIndeterminateTintList ( ) ; }
public AccountType getAccountType ( long accountId ) { return getAccountType ( getAccountUID ( accountId ) ) ; }
public float dpToPx ( final Context context , final float dp ) { return dp * context . getResources ( ) . getDisplayMetrics ( ) . density ; }
public void onPause ( ) { if ( isFinishing ( ) && mRetainedFragment != null ) { getFragmentManager ( ) . beginTransaction ( ) . remove ( mRetainedFragment ) . commit ( ) ; } super . onPause ( ) ; }
public void setType ( final CalculatedCoordinateType type ) { this . type = type == null ? CalculatedCoordinateType . PLAIN : type ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( KEY_SELECTED_ITEM , mSelectedItem ) ; }
private void saveName ( ) { MessagesController . getInstance ( ) . changeChatTitle ( chatId , nameTextView . getText ( ) . toString ( ) ) ; }
public void deleteSession ( AxolotlAddress address ) { mXmppConnectionService . databaseBackend . deleteSession ( account , address ) ; }
public static Boolean is_abs_url ( String URL ) throws URISyntaxException { URI u = new URI ( URL ) ; return u . isAbsolute ( ) ; }
public void onError ( Throwable e ) { Timber . e ( e . getMessage ( ) , "could not fetch campaigns" ) ; }
public int getRowCount ( ) { return models . size ( ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; TupleRuleEx rule = filtered . get ( position ) ; holder . bindTo ( rule ) ; holder . wire ( ) ; }
private void initBackgroundPrefs ( ) { binding . bgImagePrefs . setChecked ( mPrefs . isCalendarImagesEnabled ( ) ) ; binding . bgImagePrefs . setOnClickListener ( view -> changeBackgroundPrefs ( ) ) ; }
public void setStartAtZero ( boolean startAtZero ) { if ( startAtZero ) setAxisMinValue ( 0f ) ; else resetAxisMinValue ( ) ; }
public long getTime ( ) { long result = - 1 ; if ( current > 0 ) { result = textList . get ( current - 1 ) . timePosition ; } return result ; }
private boolean isClientMaximumReached ( ) { return mClientHandlerFactory . getClientCount ( ) >= mClientMaximum ; }
public void setTargetLang ( String language ) { appPrefsEditor . putString ( "translate_target_lang" , language ) ; appPrefsEditor . apply ( ) ; }
public AboutBuilder addGooglePlayStoreLink ( String user ) { return addLink ( R . mipmap . google_play_store , R . string . google_play_store , util . openGooglePlayDev ( user ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { SettingsViewModel settingsViewModel = ViewModelProviders . of ( DirectoryChooserFragment . this ) . get ( SettingsViewModel . class ) ; settingsViewModel . setCardsImagesFolder ( selectedDirectory ) ; }
public void onItem ( @ Nullable List < HistoryItem > folders ) { Preconditions . checkNonNull ( folders ) ; item . addAll ( folders ) ; setBookmarkDataSet ( item , animate ) ; }
public void onDrawFinished ( DataSet < ? > dataSet ) { Log . i ( Chart . LOG_TAG , "DataSet drawn . " + dataSet . toSimpleString ( ) ) ; mChart . getLegendRenderer ( ) . computeLegend ( mChart . getData ( ) ) ; }
public Note newNote ( Model m ) { return new Note ( this , m ) ; }
public void report ( String message ) { FirebaseCrash . report ( new Exception ( message ) ) ; }
public static GeoPoint getGeoPoint ( Context context ) { return getGeoPoint ( context , getUserCountry ( context ) ) ; }
public static com . coinomi . core . protos . Protos . DeterministicKey parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public void show ( NameDO name ) { currentName = name ; dialog . getInputEditText ( ) . setText ( "" ) ; dialog . show ( ) ; }
public String getResource ( ) { return jid . getResourcepart ( ) ; }
public Float getHeight ( Integer origin_height ) { return getValue ( origin_height , m_bitmap_origin_height , canvasHeight ) ; }
public void onPlayingMetaChanged ( ) { updateCurrentSong ( ) ; updateIsFavorite ( ) ; updateQueuePosition ( ) ; updateLyrics ( ) ; }
public Element getElementById ( String id ) { for ( Element element : elements ) if ( element . getId ( ) != null && element . getId ( ) . equals ( id ) ) return element ; return null ; }
public void onConnectivityStatus ( WalletPocketConnectivity pocketConnectivity ) { if ( connectivityRelevant ) relevant . set ( true ) ; }
public void run ( ) { try { progressDialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } AlertsCreator . processError ( error , ChangeBioActivity . this , req ) ; }
public static String format ( String phoneNumber ) { return phoneNumber . replaceAll ( " [ ^ + 0 - 9 ] " , "" ) ; }
public static void apply ( final View view , final @ Font int type ) { apply ( view , getFont ( type ) ) ; }
public void setSummary ( CharSequence summary ) { this . summary = summary ; super . setSummary ( null ) ; if ( rightSummary != null ) { rightSummary . setText ( summary ) ; } }
public boolean areContentsTheSame ( final int oldItemPosition , final int newItemPosition ) { return eqFunc . test ( oldList . get ( oldItemPosition ) , newList . get ( newItemPosition ) ) ; }
public MakeNewMemoryOpencvManager ( Activity makeNewMemoryManager , Camera . Parameters phoneDeviceCameraParameters ) { this . makeNewMemoryManager = makeNewMemoryManager ; this . calculateBallDetect = new CalculateBallDetect ( makeNewMemoryManager . getApplicationContext ( ) ) ; this . phoneDeviceCameraParameters = phoneDeviceCameraParameters ; lastBallDetectPosition = null ; }
public void pre2014 ( ) { assertTrue ( getHeight ( "2013 - 12 - 01" ) == 1 ) ; assertTrue ( getHeight ( "1958 - 12 - 01" ) == 1 ) ; }
public static List < String > split ( @ NonNull final String names ) { return MultiValuesTagUtil . splitImpl ( names , SINGLE_LINE_SEPARATOR ) ; }
public void onSequenceComplete ( ) { stateProgress ++ ; }
private BroadcastReceiver receiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( final Context context , final Intent intent ) { emitter . onNext ( intent ) ; } } ;
public CellInfo2G ( Integer locationId , Integer areaCode , Integer primaryScramblingCode , Integer channelNumber ) { setLac ( locationId ) ; setCid ( areaCode ) ; setBsic ( primaryScramblingCode ) ; setArfcn ( channelNumber ) ; }
public void testGetHttpFileName_dispositionWithEncoding ( ) { String actual = Utils . getHttpFileName ( fs , "http : "attachment ; filename = \"foo . txt\" ; filename* = UTF - 8''foo . txt" , null , null ) ; assertEquals ( "foo . txt" , actual ) ; }
public BigDecimal getBase ( ) { return inG ; }
public void testCreateOpenHABWidgetFromJson_createsOpenHAB2Widget ( ) throws Exception { OpenHABWidget sut = OpenHAB2Widget . createOpenHABWidgetFromJson ( rootWidget , createJSONObject ( ) ) ; assertTrue ( sut instanceof OpenHAB2Widget ) ; }
public void noAttendance ( ) { localDB . setStudent ( sharedPreference . getString ( "pref_student" , null ) , null ) ; activityAttendanceBinding . rl . setVisibility ( View . GONE ) ; activityAttendanceBinding . NA . setVisibility ( View . VISIBLE ) ; }
public BMIEditPresenter provideBMIEditPresenter ( BMIInteractor BMIInteractor ) { return new BMIEditPresenterImpl ( BMIInteractor ) ; } */
public TrailerAdapter . TrailerViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . trailer_cards , viewGroup , false ) ; return new TrailerViewHolder ( view ) ; }
public void setVisibleYRangeMaximum ( float maxYRange , AxisDependency axis ) { float yScale = getDeltaY ( axis ) / maxYRange ; mViewPortHandler . setMinimumScaleX ( yScale ) ; }
public static Book book ( ) { return getBook ( null , DEFAULT_DB_NAME ) ; }
public ItemSprite . Glowing glowing ( ) { return glyph != null ? glyph . glowing ( ) : null ; }
public DefaultOutcomingTextMessageViewHolder ( View itemView ) { super ( itemView ) ; }
public String getLinkUrlPattern ( ) { switch ( this ) { case CD_PHOTO_THREAD : return "http : case YOUTUBE : return "https : case IMGUR : return "http : default : return "" ; } }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; AndroidUtilities . checkDisplaySize ( ) ; fixLayout ( ) ; }
public void requestAcknowledged ( String workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { getMvpView ( ) . showProgress ( false ) ; getMvpView ( ) . showToastMessage ( "Transaction received . " , true ) ; getMvpView ( ) . goToWalletDetails ( ) ; }
public Medias getMediasTable ( ) { return mMediasTable ; }
public boolean onCreate ( ) { dao = WVDatabase . getInstance ( getContext ( ) ) . getSearchQueryDao ( ) ; matcher = new UriMatcher ( UriMatcher . NO_MATCH ) ; matcher . addURI ( AUTHORITY , SearchManager . SUGGEST_URI_PATH_QUERY , SEARCH_SUGGEST ) ; return true ; }
public Integer getPenaltyChargesCharged ( ) { return penaltyChargesCharged ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { ViewHolder holder = new ViewHolder ( parent ) ; holder . itemView . setOnClickListener ( this : : onItemClick ) ; return holder ; }
public void goToLoginFragment ( ) { replaceFragment ( LoginFragment . getInstance ( ) , true ) ; }
public void onClick ( int position ) { Intent intent = EditActivity . getExperienceIntent ( getContext ( ) ) ; EditActivity . setData ( intent , position , resume . experience . get ( position ) ) ; startActivityForResult ( intent , REQUEST_EDIT ) ; }
private static void homeSetWallpaper ( Context context , File wallpaper ) throws IOException { BingWallpaperUtils . setHomeScreenWallpaper ( context , wallpaper ) ; }
public void run ( ) { retrieveActiveExperiments ( ) ; }
public void setNodeAddress ( String nodeAddress ) { this . nodeAddress = nodeAddress ; }
private View . OnClickListener mOnUndoClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { bookmarkPresenter . cancelDeletion ( ) ; bookmarkPresenter . requestData ( true ) ; } } ;
public static boolean notNull ( String string ) { return null != string && ! NULL_AS_STRING . equals ( string ) ; }
public void onAttach ( Activity activity ) { myContext = ( FragmentActivity ) activity ; super . onAttach ( activity ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getSupportMenuInflater ( ) . inflate ( R . menu . balancing_robot_full_size , menu ) ; return true ; }
public OkHttpClient getHttpClient ( ) { return mHttpClient ; }
public int getShowedYear ( ) { return showedYear ; }
public void run ( ) { getActivity ( ) . runOnUiThread ( new Runnable ( ) { public void run ( ) { retrieveActiveExperiments ( ) ; } } ) ; }
public void write ( Location loc ) throws Exception { OpenGTSManager manager = new OpenGTSManager ( preferenceHelper ) ; manager . sendLocations ( new SerializableLocation [ ] { new SerializableLocation ( loc ) } ) ; }
public void setPaperStyle ( int paperStyleId , int paperId ) { this . paperStyleId = paperStyleId ; this . paperId = paperId ; if ( paperStyleId == 0 ) { getStyleFromBackground ( ) ; } inputEditText . setBackgroundResource ( paperId ) ; }
public void play ( String uri ) throws PlaybackException { play ( uri , 0 ) ; }
public final int getYSpan ( ) { return this . _ySpan ; }
public void restart ( ) { Intent intent = new Intent ( this , LaunchActivity . class ) ; intent . addFlags ( FLAG_ACTIVITY_NEW_TASK ) ; startActivity ( intent ) ; finish ( ) ; Runtime . getRuntime ( ) . exit ( 0 ) ; }
public void swipeCallback ( RecyclerView . ViewHolder viewHolder ) { Timber . v ( "swipeCallback ( ) called with : " + "viewHolder = [ " + viewHolder + " ] " ) ; archiveLink ( viewHolder . getAdapterPosition ( ) ) ; }
public String personURL ( String name , URLBuilder builder ) { String result ; if ( ! name . equals ( "fail" ) ) result = builder . buildFromPerson ( name ) ; else return "fail" ; return result ; }
public MyGroupViewHolder ( View itemView ) { super ( itemView ) ; indicator = ( ExpandableItemIndicator ) itemView . findViewById ( R . id . indicator ) ; }
public void onDestroy ( ) { Log . d ( tag , "onDestroy ( ) " ) ; if ( taskThread != null ) { taskThread . interrupt ( ) ; } }
public void additionIsCorrect ( ) throws Exception { assertEquals ( 4 , 2 + 2 ) ; }
public ClientReusableViewHolder ( View view ) { ButterKnife . inject ( this , view ) ; }
public Builder setDiscoverablePingInterval ( long discoverablePingInterval ) { this . mDiscoverablePingInterval = discoverablePingInterval ; return this ; }
public JSONArray ( Collection copyFrom ) { this ( ) ; if ( copyFrom != null ) { for ( Object o : copyFrom ) { put ( o ) ; } } }
public void onStatusChange ( String state ) { }
public TimetableSyncService ( Context context ) { super ( ) ; Log . i ( "SYNC" , "Sync service created . " ) ; INSTANCE = this ; }
public String getName ( ) { return this . _name ; }
private void dismissDialog ( ) { if ( progressDialog . isShowing ( ) ) { progressDialog . dismiss ( ) ; } }
private void deleteRemote ( ) { Services . cloud . deleteTrack ( this , track ) ; }
public void testLoadingL33TspeakLipsum ( ) throws IOException { onBookFile ( "lipsum/L33tspeak - Lipsum . org" ) . onLoad ( ) . onGet ( ) ; }
public void info ( String message ) { log ( message ) ; }
public Cursor getAllTasks ( ) { SQLiteDatabase db = getReadableDatabase ( ) ; return db . rawQuery ( "SELECT * FROM " + TASK_TABLE_NAME , null ) ; }
public ZonedDateTime getPubDate ( ) { return pubDate ; }
public ConnectButton ( Context context ) { super ( context ) ; initView ( context ) ; }
public NotificationSettings ( String openHABCloudURL , SyncHttpClient httpClient ) throws MalformedURLException { this ( new URL ( openHABCloudURL ) , httpClient ) ; }
public CircleImageView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void onExtraPromptStateChanged ( @ NonNull final MaterialTapTargetPrompt prompt , final int state ) { if ( mExtraPromptStateChangeListener != null ) { mExtraPromptStateChangeListener . onPromptStateChanged ( prompt , state ) ; } }
private boolean canTest ( ) { long now = System . currentTimeMillis ( ) ; return ( ( now - mLastTest ) > MIN_TEST_INTERVAL ) ; }
public boolean onKeyDown ( final int code , final KeyEvent e ) { mView . queueEvent ( new Runnable ( ) { public void run ( ) { Lib . key ( code , e . getUnicodeChar ( ) ) ; } } ) ; return true ; }
public final int getStationNumber ( ) { return this . stationNumber ; }
public void onPageScrolled ( int position , float v , int i1 ) { }
public EighthBlockItem [ ] newArray ( int size ) { return new EighthBlockItem [ size ] ; }
public void onClick ( View arg0 ) { JobActivity . this . breakTimeClicked ( ) ; }
public static Dialog makeSimpleDialog ( Activity activity , String text ) { return ( new AlertDialog . Builder ( activity ) ) . setMessage ( text ) . setNeutralButton ( android . R . string . ok , null ) . create ( ) ; }
public View newView ( Context context , Cursor cursor , ViewGroup parent ) { return LayoutInflater . from ( context ) . inflate ( R . layout . list_item , parent , false ) ; }
public Result call ( String method , Session session , Map < String , String > params ) { return call ( method , session . getApiKey ( ) , params , session ) ; }
public void removeListener ( BlackboardListener listener ) { listeners . remove ( listener ) ; }
public Boolean isUserList ( ) { return isLikeType ( ) || isCommentLikeType ( ) || isFollowType ( ) || isReblogType ( ) ; }
public int damage ( int damage , NamedEntityKind src ) { return script . runOptional ( "damage" , super . damage ( damage , src ) , damage , src ) ; }
private Drawable getDrawable ( @ DrawableRes int i ) { return ViewUtils . getDrawable ( mContext , i ) ; }
public int getLayoutResId ( ) { return R . layout . repo_fragment ; }
public void onNewBalance ( Value newBalance , Value pendingAmount ) { if ( coinsRelevant ) relevant . set ( true ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnLogoutCallback ) { callback = ( OnLogoutCallback ) context ; } }
public boolean winTest ( ) { for ( int i = 7 ; i <= 10 ; i ++ ) if ( stacks [ i ] . getSize ( ) != 13 ) return false ; return true ; }
public com . google . protobuf . AnyOrBuilder getUpgradedConsensusStateOrBuilder ( ) { if ( upgradedConsensusStateBuilder_ != null ) { return upgradedConsensusStateBuilder_ . getMessageOrBuilder ( ) ; } else { return upgradedConsensusState_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : upgradedConsensusState_ ; } }
public void onDestroy ( ) { presenter . onDestory ( ) ; super . onDestroy ( ) ; }
public ClosestRacerFinder ( float depth , float arc ) { mBodyFinder = new ClosestBodyFinder ( depth , arc ) ; mBodyFinder . setBodyFilter ( mFilter ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_import_entries , menu ) ; return true ; }
public void onClick ( View v ) { mainLayout . requestFocus ( ) ; hideSoftKeyboard ( ProgramAddEditActivity . this ) ; fieldSelectDialog ( "program" ) ; }
public Announcement ( String id , String adminUserName , String title , String body , Date publishDate ) { this . id = id ; this . adminUserName = adminUserName ; this . title = title ; this . body = body ; this . publishDate = publishDate ; }
private static < D extends Data > ResolverResult < D > resolveWithFallback ( DNSName dnsName , Class < D > type ) throws IOException { return resolveWithFallback ( dnsName , type , false ) ; }
public IPresenterFactory < CommunityLinksPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new CommunityLinksPresenter ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , getArguments ( ) . getInt ( Extra . GROUP_ID ) , saveInstanceState ) ; }
public void setOrientation ( Orientation orientation ) { layoutManager . setOrientation ( orientation ) ; }
public boolean onPreferenceClick ( Preference preference ) { PreferenceFragmentPermissionsDispatcher . restoreFavoritesWithCheck ( PreferenceFragment . this ) ; return true ; }
public static int countOfSelection ( List < ? extends Selectable > data ) { int count = 0 ; for ( Selectable selectable : data ) { if ( selectable . isSelected ( ) ) { count ++ ; } } return count ; }
private void addPlayerToGame ( Player addedPlayer ) { playersList . add ( addedPlayer ) ; inGameAdapter . notifyItemInserted ( playersList . size ( ) - 1 ) ; }
public void onPause ( ) { callback . onPauseCommand ( STOP_DELAY ) ; }
public FilesAdapter ( List < File > dataset ) { this . dataset = dataset ; }
public void setState ( int state ) { this . mState = state ; }
public void addAnalyticsListener ( AnalyticsListener listener ) { analyticsCollector . addListener ( listener ) ; }
public void onDialogNeutralClick ( DialogFragment dialog ) { seed = DEFAULT_SEED ; generate_potd_list ( ) ; }
private void animateStationInfoLayout ( ) { ChangeBounds transition = new ChangeBounds ( ) ; transition . setDuration ( NonSwipeableViewPager . ANIMATION_DURATION ) ; transition . addTarget ( root ) ; transition . setInterpolator ( new FastOutSlowInInterpolator ( ) ) ; TransitionManager . beginDelayedTransition ( root , transition ) ; }
public static void swipeLeft ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . swipe_left_enter , R . anim . swipe_left_exit ) ; }
public void onClick ( View v ) { locate ( ) ; }
private void showMapType ( ) { String [ ] types = getResources ( ) . getStringArray ( R . array . map_types ) ; binding . mapTypePrefs . setDetailText ( types [ getPosition ( mPrefs . getMapType ( ) ) ] ) ; }
private void stopWalletService ( ) { releaseWakeLock ( ) ; disconnectWalletService ( ) ; }
public boolean isSameMedia ( DownloadAction other ) { return uri . equals ( other . uri ) ; }
private static int purgeSearchResults ( SQLiteDatabase db ) { String [ ] args = { Integer . toString ( ReaderTagType . SEARCH . toInt ( ) ) } ; return db . delete ( "tbl_post_tags" , "tag_type = ?" , args ) ; }
public void setClientId ( int clientId ) { ClientId = clientId ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; key . serializeToStream ( stream ) ; }
public void onBackPressed ( ) { startActivityWithFlags ( this , ContributionsActivity . class , Intent . FLAG_ACTIVITY_CLEAR_TOP , Intent . FLAG_ACTIVITY_SINGLE_TOP ) ; super . onBackPressed ( ) ; }
public void getCustomMediaUrlWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( "1" ) ; setCustomMediaServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public static boolean createdAt ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_is_created_at_added ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_is_created_at_added ) ) ; }
public ConnectionSecurityViewModel getConnectionSecurityViewModel ( ) { return new ConnectionSecurityViewModel ( preferences , navigator ) ; }
public void pauseTimer ( ) { timer . cancel ( ) ; timerRunning = false ; btnStartPause . setImageResource ( R . drawable . ic_play_arrow_white_24dp ) ; btnReset . setVisibility ( View . VISIBLE ) ; }
public void startAddingUsersToManagers ( int accountId , int groupId , ArrayList < User > users ) { PlaceFactory . getCommunityManagerAddPlace ( accountId , groupId , users ) . tryOpenWith ( getActivity ( ) ) ; }
private String encryptAndEncodeBytes ( byte [ ] bytes ) { byte [ ] encryptedAndMacBody = encryptBytes ( bytes ) ; return Base64 . encodeBytes ( encryptedAndMacBody ) ; }
private void loadAndShowTextPreview ( ) { mTextLoadTask = new TextLoadAsyncTask ( new WeakReference < TextView > ( mTextPreview ) ) ; mTextLoadTask . execute ( getFile ( ) . getStoragePath ( ) ) ; }
public void onLoadFinished ( android . support . v4 . content . Loader < Cursor > inCursorLoader , Cursor inCursor ) { Log . d ( Utils . getAppTag ( ) , Utils . getMethodName ( refListType ) ) ; mCursorAdapter . swapCursor ( inCursor ) ; }
public String getTranscriptText ( StringBuilder colors ) { return internalGetTranscriptText ( colors , 0 , - mData . getActiveTranscriptRows ( ) , mColumns , mScreenRows ) ; }
public static LottieComposition fromJsonSync ( JsonReader reader ) throws IOException { return LottieCompositionFactory . fromJsonReaderSync ( reader , null ) . getValue ( ) ; }
public void updateSongs ( List < MySong > data ) { mOrigData = new LinkedList < MySong > ( data ) ; notifyDataSetChanged ( ) ; }
private void handleError ( ErrorCode err ) { disconnect ( ) ; }
public void beforeUpload ( ) { boolean changed = Utils . markAsUploaded ( all ( ) ) ; ; if ( changed ) { save ( ) ; } }
public static boolean isCheckMethod ( Annotation annotation ) { return annotation instanceof Check ; }
public void hide ( ) { gm . highlight . setVisibility ( GONE ) ; }
private Context getContext ( ) { return getActivity ( ) ; }
private void handleIntent ( Intent intent ) { if ( Intent . ACTION_SEARCH . equals ( intent . getAction ( ) ) ) { currentQuery = intent . getStringExtra ( SearchManager . QUERY ) ; search ( currentQuery ) ; } }
public AdmissionPercentageFragment getFragmentInstance ( Integer requestedPosition ) { return mReferenceMap . get ( requestedPosition ) ; }
public int getMeasuredHeight ( View child ) { return childHeight ; }
public RefreshPreKeysJob ( Context context ) { super ( context , JobParameters . newBuilder ( ) . withGroupId ( RefreshPreKeysJob . class . getSimpleName ( ) ) . withNetworkRequirement ( ) . withMasterSecretRequirement ( ) . withRetryCount ( 5 ) . create ( ) ) ; }
public void onClick ( View view ) { if ( _dismissListener != null ) { _dismissListener . onDismiss ( ) ; } dismissPopup ( ) ; }
public int compareTo ( SideFilterInfo another ) { return letters . compareTo ( another . letters ) ; }
public void requestCameraPermission ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "requestCameraPermission" ) ; main_activity . requestCameraPermission ( ) ; }
public void onAnimationStart ( Animator animation ) { menuVisible = false ; }
public void sendActive ( ) { this . sendPacket ( new ActivePacket ( ) , null ) ; }
public void onPermissionDenied ( ArrayList < String > deniedPermissions ) { }
public int getRemainingSeconds ( ) { return mRemainingSeconds ; }
public void update ( ) { super . update ( ) ; if ( brightness < 1 . 0f && brightness > MIN_BRIGHTNESS ) { if ( ( brightness -= Game . elapsed ) <= MIN_BRIGHTNESS ) { brightness = MIN_BRIGHTNESS ; } updateBrightness ( ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_geochats_located . TLdeserialize ( stream , constructor , exception ) ; }
public KenBurnsView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; super . setScaleType ( ImageView . ScaleType . MATRIX ) ; }
public int getToDecimals ( ) { return toDecimals ; }
public int getMovementFlags ( RecyclerView recyclerView , ViewHolder viewHolder ) { int swipeFlags = ItemTouchHelper . START ; return makeFlag ( ItemTouchHelper . ACTION_STATE_SWIPE , swipeFlags ) ; }
public int getAdultGoal ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException { if ( this . isDemoMode ) { return 10560 ; } return getPersonGoal ( Person . ROLE_PARENT , runningChallenge ) ; }
public void onClick ( View v ) { navigateBack ( ) ; }
public ExploreSensorListAdapter ( LayoutInflater inflater ) { this . inflater = inflater ; this . sensors = null ; updateSensorList ( ) ; }
public UserPostListingURL sort ( PostSort newOrder ) { return new UserPostListingURL ( type , user , newOrder , limit , before , after ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newTagsFragmentComponent ( new TagsFragmentModule ( this , savedInstanceState ) ) . inject ( this ) ; componentFactory = null ; }
public boolean onLongClick ( View b ) { if ( b instanceof PaletteButton ) { return ViewUtils . showButtonDescription ( context , b ) ; } return false ; }
public void addEntries ( List < VaultEntry > entries ) { _adapter . addEntries ( entries ) ; updateEmptyState ( ) ; }
public static FloatBuffer createFloatBuffer ( int floats ) { return createNativeByteBuffer ( floats*4 ) . asFloatBuffer ( ) ; }
private boolean isGooglePlayServicesAvailable ( ) { final GoogleApiAvailability apiAvailability = GoogleApiAvailability . getInstance ( ) ; final int connectionStatusCode = apiAvailability . isGooglePlayServicesAvailable ( context ) ; return connectionStatusCode == ConnectionResult . SUCCESS ; }
private void setNameTextView ( ) { nameText . setText ( "Name : " + Config . getName ( ) ) ; }
public int getTrackPosition ( ) { switch ( getPlaybackState ( ) ) { case PLAYING : case PAUSE : return mPlayer . getPosition ( ) ; case RESUMED : return mLastPosition ; case STOPPED : return 0 ; } return 0 ; }
public static void checkPlayServices ( final Activity activity ) { }
public void setCurrentMonth ( boolean currentMonth ) { this . currentMonth = currentMonth ; }
public boolean shouldHighlightBookmarks ( ) { return mPrefs . getBoolean ( Constants . PREF_HIGHLIGHT_BOOKMARKS , true ) ; }
public void moveDrawerByX ( int dx ) { setDrawerPosition ( drawerPosition + dx ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseEngineStateChanged . Builder getResponseEngineStateChangedBuilder ( ) { bitField0_ | = 0x00100000 ; onChanged ( ) ; return getResponseEngineStateChangedFieldBuilder ( ) . getBuilder ( ) ; }
public void onClick ( View view ) { showPostExcerptDialog ( ) ; }
public static void showPropertiesDialogWithoutPermissions ( final BaseFile f , BaseActivity activity , AppTheme appTheme ) { showPropertiesDialog ( f , null , activity , false , appTheme , false , false ) ; }
public static boolean isPendingOrInProgressMediaUpload ( @ NonNull MediaModel media ) { return MediaUploadHandler . isPendingOrInProgressMediaUpload ( media ) ; }
public Fragment getItem ( int position ) { Bundle args = new Bundle ( ) ; ContactsPagerFragment contactsPagerFragment = new ContactsPagerFragment ( ) ; args . putInt ( contactsPagerFragment . CONTACTS_SWITCH , position ) ; contactsPagerFragment . setArguments ( args ) ; return contactsPagerFragment ; }
public static long getTimeFromDate ( Date date ) { Date now = Calendar . getInstance ( ) . getTime ( ) ; long timePortion = now . getTime ( ) % MILLIS_PER_DAY ; return timePortion ; }
public void setWritable ( boolean writable ) throws IOException { throwClosed ( ) ; if ( ! writable ) { file . setReadOnly ( ) ; } else { file . setWritable ( writable ) ; } }
public void testEncode2 ( ) throws WriterException { doTest ( "T123T" , "00000" + "1011001001" + "0101011001" + "0101001011" + "0110010101" + "01011001001" + "00000" ) ; }
private NearbyFilterState ( ) { existsSelected = false ; needPhotoSelected = true ; wlmSelected = true ; checkBoxTriState = - 1 ; selectedLabels = new ArrayList <> ( ) ; }
public void onCancel ( @ Nullable DialogInterface dialog ) { super . onCancel ( dialog ) ; if ( mOnCancelListener != null ) { mOnCancelListener . onCancel ( dialog ) ; } }
public void deselect ( int identifier ) { getAdapter ( ) . deselect ( getPosition ( identifier ) ) ; }
public SaveOrIgnoreDialog assertOnPage ( ) { String title = getTranslatedString ( R . string . exit ) + " " + formName ; checkIsTextDisplayed ( title ) ; return this ; }
public void onClick ( View v ) { if ( queue != null && queue . getQueue ( ) . size ( ) > 0 ) { onQueueItemClicked ( queueCurrentIndex ) ; bottomToolbar . setVisibility ( View . GONE ) ; } }
public void onFailed ( ) { }
public void pluginItems ( Action action , IServiceItemListCallback < Plugin > callback ) throws HandshakeNotCompleteException { mDelegate . requestItems ( getActivePlayer ( ) , callback ) . cmd ( action . action . cmd ) . params ( action . action . params ) . exec ( ) ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "update settings due to video resolution change" ) ; main_activity . updateForSettings ( "" , true ) ; }
public String getEventName ( ) { return Analytics . getEvents ( ) . tutorialBegin ( ) ; }
public void onBackDialogNegativeClick ( String filename ) { NoteEditFragment fragment = ( NoteEditFragment ) getFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onBackDialogNegativeClick ( null ) ; }
public AlbumAdapter ( final AppCompatActivity activity , final AlbumInfo albumInfo ) { this . activity = activity ; this . albumInfo = albumInfo ; }
public int getGPSStatus ( ) { return GPSStatus ; }
public void onClick ( View v ) { if ( SystemClock . elapsedRealtime ( ) - mLastClickTime < INTERVALO_CLICK ) { return ; } mLastClickTime = SystemClock . elapsedRealtime ( ) ; lanzarResultados ( ) ; }
private float getTextY ( boolean scale ) { if ( scale ) { return this . textY / 5 ; } return this . textY ; }
public DailyDrinkStatisticsImpl ( Date day , double portions , int nDrinks , Context context ) { this . day = day ; this . portions = portions ; this . nDrinks = nDrinks ; this . timeUtil = new TimeUtil ( context ) ; }
public void moveToLoginActivity ( ) { Intent intent = new Intent ( mOpenMRS . getApplicationContext ( ) , LoginActivity . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; mOpenMRS . getApplicationContext ( ) . startActivity ( intent ) ; }
public FigureType getRotatedFigure ( ) { return FigureType . L_THIRD_FIGURE ; }
private void whenRetrievingRepository ( ) { mWeatherRepository = mServiceConfig . getWeatherRepository ( ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( Etudiant ) getResult ( Etudiant . class , __result , "infoEtudiantResult" , __envelope ) ; }
private boolean backToPreviousFragment ( ) { int currentItem = mViewPager . getCurrentItem ( ) ; if ( currentItem == 0 ) { return false ; } else { mViewPager . setCurrentItem ( currentItem - 1 ) ; return true ; } }
private void thenDelegateShouldTrackScreen ( ) { new Verifications ( ) { { new Analytics ( ) . trackOnScreen ( withAny ( "string" ) ) ; } } ; }
public void close ( ) { mDB . close ( ) ; mDB = null ; }
private void showServiceStatus ( ) { worker . postDelayed ( task , 15000 ) ; }
public void onCategoriesLoaded ( List < String > categories ) { view . updateList ( categories ) ; }
public static int dpToPxOffset ( Context context , int dp ) { return ( int ) ( dpToPx ( context , dp ) ) ; }
public void startActivity ( Intent intent ) { Notes . updateLastInteraction ( ) ; super . startActivity ( intent ) ; }
public void onServiceConnected ( ComponentName name , IBinder service ) { tracer . debug ( "Connected to GPSLoggingService from MainActivity" ) ; }
public void clearSampleData ( ) { absoluteReadIndex = 0 ; relativeReadIndex = 0 ; relativeWriteIndex = 0 ; queueSize = 0 ; }
public static String highLevelDecode ( boolean [ ] correctedBits ) { return getEncodedData ( correctedBits ) ; }
public int hashCode ( ) { return Objects . hash ( name , validUntil , url ) ; }
public void onClick ( View v ) { actionsListener . loadBookInformation ( bookDetailId ) ; }
public void setOverpaymentPortion ( Integer overpaymentPortion ) { this . overpaymentPortion = overpaymentPortion ; }
public static int getThemeStyleRes ( ) { switch ( getTheme ( ) ) { case THEME_TEAL : return R . style . ThemeOverlay_Teal ; case THEME_PINK : return R . style . ThemeOverlay_Pink ; case THEME_DEFAULT : default : return R . style . ThemeOverlay ; } }
public void onAnimationEnd ( Animator animation ) { mainActivity . getMenuManager ( ) . updateMenu ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( viewModel != null ) { viewModel . saveInstanceState ( outState ) ; } }
public void onConnected ( Bundle connectionHint ) { Log . d ( TAG , "onconnected" ) ; if ( isGameSignedIn ( ) ) { Log . d ( TAG , "Connected successful to games" ) ; } } */
public static int getImageCompression ( Context context ) { return Integer . parseInt ( getString ( context , "pref_image_resize" , String . valueOf ( context . getResources ( ) . getInteger ( R . integer . pref_default_image_resize ) ) ) ) ; }
public View getView ( Activity activity ) { return activity . findViewById ( R . id . linearLayoutDir ) ; }
private RangeData ( List < Double > dataList ) { this . dataList = dataList ; calculateData ( ) ; }
public VersionedRook retrieveBook ( String fileName , File file ) { Uri uri = repoUri . buildUpon ( ) . appendPath ( fileName ) . build ( ) ; return dbRepo . retrieveBook ( repoUri , uri , file ) ; }
public static NotificatedApp getAppState ( String pkg ) { int index = Tuils . find ( pkg , apps ) ; if ( index == - 1 ) return null ; return apps . get ( index ) ; }
public void onItemClick ( AdapterView < ? > adapterView , View view , int i , long l ) { Toast . makeText ( getContext ( ) , values [ i ] , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mNM = ( NotificationManager ) getSystemService ( NOTIFICATION_SERVICE ) ; showNotification ( ) ; }
public static void openExportFragment ( FragmentActivity activity ) { Intent intent = new Intent ( activity , FormActivity . class ) ; intent . putExtra ( UxArgument . FORM_TYPE , FormActivity . FormType . EXPORT . name ( ) ) ; activity . startActivity ( intent ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( id ) ; dest . writeFloat ( value ) ; }
public String getLate ( ) { return late ; }
public IconBean ( String name ) { mName = name ; mLabel = handleIconName ( name ) ; mShown = true ; }
public ProxyTileDataSink ( ITileDataSink mapDataSink ) { this . mapDataSink = mapDataSink ; }
public T withSelectedIconColorRes ( int selectedColorRes ) { this . selectedIconColor = ColorHolder . fromColorRes ( selectedColorRes ) ; return ( T ) this ; }
public void setWindowListener ( WindowListener windowListener ) { this . mWindowListener = windowListener ; }
public void onCompositionLoaded ( LottieComposition composition ) { setComposition ( composition ) ; }
public boolean shouldOfferSwitchingToNextInputMethod ( final IBinder binder ) { if ( Build . VERSION . SDK_INT <= Build . VERSION_CODES . KITKAT ) { return hasMultipleEnabledSubtypesInThisIme ( false ) ; } return mImmWrapper . shouldOfferSwitchingToNextInputMethod ( binder ) ; }
public boolean isItemEnabled ( Championship championship ) { return mRewardManager . isChampionshipUnlocked ( championship . getId ( ) ) ; }
public void openPhotoAlbums ( int accountId , int ownerId , @ Nullable Owner owner ) { PlaceFactory . getVKPhotoAlbumsPlace ( accountId , ownerId , VKPhotosFragment . ACTION_SHOW_PHOTOS , ParcelableOwnerWrapper . wrap ( owner ) ) . tryOpenWith ( getActivity ( ) ) ; }
public void run ( ) { SourceContract . Upload upload = new UploadToOSM ( preferences ) ; upload . Upload ( ) ; }
public void refreshUserInterface ( ) { DeviceListFragment fragment = ( DeviceListFragment ) fragmentManager . findFragmentByTag ( "DeviceListFragment" ) ; if ( fragment != null ) { fragment . populateUI ( ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return ExportedChatInvite . TLdeserialize ( stream , constructor , exception ) ; }
public void unregisterUIListener ( String key , NotificationListener listener ) { getAggregator ( key , true ) . removeUIListener ( listener ) ; }
public MyBean tellJoke ( ) { MyBean response = new MyBean ( ) ; response . setJoke ( new Jokes ( ) . tellJoke ( ) ) ; return response ; }
private void saveTimestampLastRun ( long now ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( this ) ; SharedPreferences . Editor editor = settings . edit ( ) ; editor . putLong ( "last_wifi_detection_timestamp" , now ) ; editor . commit ( ) ; }
public Account getPendingAccount ( ) { Account pending = null ; for ( Account account : getAccounts ( ) ) { if ( account . isOptionSet ( Account . OPTION_REGISTER ) ) { pending = account ; } else { return null ; } } return pending ; }
public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { beforeLength = composeText . getText ( ) . length ( ) ; }
public MessageTouchListener ( ) { super ( ) ; pressed = false ; console = findViewById ( R . id . console_scroller ) ; content = findViewById ( R . id . content ) ; }
public void setStackedGravity ( GravityEnum gravity ) { mStackedGravity = gravity ; }
public void onCompletion ( MediaPlayer mp ) { stopMediaPlayerUpdater ( ) ; view . end ( ) ; audio . seekPlayerTo ( 0 ) ; setAudioStatus ( AudioContentView . STATUS_ENDED ) ; }
public void goToTwitterDeveloper ( ) { try { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( getString ( R . string . app_developerTwitterURL ) ) ) ) ; } catch ( Exception ignored ) { showUnknownError ( ) ; } }
public AdmissionPercentageFragment getCurrentFragment ( ) { return mAdmissionPercentageAdapter . getFragmentInstance ( mViewPager . getCurrentItem ( ) ) ; }
public static void setShowPebbleInstallDialog ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_SHOW_PEBBLE_INSTALL_DIALOG , value ) . commit ( ) ; }
public void didClickItem ( SharedPhotoVideoCell cell , int index , MessageObject messageObject , int a ) { onItemClick ( index , cell , messageObject , a ) ; }
public TeamInfoSubscriber provideTeamInfoSubscriber ( Context context , AppConfig config ) { return new TeamInfoSubscriber ( context . getApplicationContext ( ) , config ) ; }
public Notifier setAlarm ( boolean soundAlarm ) { this . soundAlarm = soundAlarm ; return this ; }
public DrmSessionException getError ( ) { return error ; }
public void onRefresh ( ) { super . onRefresh ( ) ; restartLoader ( this ) ; }
public Location ( Waypoint position , String name , boolean active ) { this . position = position ; this . name = name ; this . active = active ; }
public void setup ( ) { CollectHelpers . setupDemoProject ( ) ; adminSettings = TestSettingsProvider . getAdminSettings ( ) ; adminSettings . clear ( ) ; adminSettings . setDefaultForAllSettingsWithoutValues ( ) ; }
public String getAttend ( ) { return attend ; }
public double getComputeMaxError ( ) { return computeMaxError ; }
public void setVerseRepeatCount ( int count ) { mRepeatInfo . setRepeatCount ( count ) ; }
public VH getViewHolder ( int position ) { return mAttached . get ( position ) ; }
public void onClick ( View v ) { mAdapter . addItem ( new UserConnectionModel ( "Number" , "" + i ) , 0 ) ; recyclerView . scrollToPosition ( 0 ) ; i ++ ; }
public static void setDefaults ( Activity context , int resourceId ) { PreferenceManager . setDefaultValues ( context , resourceId , false ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponsePlaylists . Builder getResponsePlaylistsBuilder ( ) { bitField0_ | = 0x00040000 ; onChanged ( ) ; return getResponsePlaylistsFieldBuilder ( ) . getBuilder ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { drawerLayout . openDrawer ( GravityCompat . START ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void onAdLoaded ( ) { super . onAdLoaded ( ) ; itemView . setVisibility ( View . VISIBLE ) ; }
public void draw ( Canvas canvas ) { super . draw ( canvas ) ; if ( isStarted ( ) ) { invalidateSelf ( ) ; } }
public RetrievePlayerData ( Pending < BeePlayer > onPlayerFetched ) { this . onPlayerFetched = onPlayerFetched ; }
private void openFitbitAuth ( ) { if ( ! loginFitBit . clientFibitIsValid ( ) ) { Alerter . hide ( ) ; return ; } mListener . onPrefClick ( getResources ( ) . getString ( R . string . key_fitibit ) ) ; loginFitBit . doAuthorizationCode ( ) ; }
public void toggleRecycles ( ) { currentGame . toggleRecycles ( ) ; showOrHideRecycles ( ) ; }
public int getItemCount ( ) { if ( mBeverages == null ) return 0 ; return mBeverages . size ( ) ; }
public String getSnote ( ) { return pref . getString ( SUBMIT_SNOTE , "" ) ; }
public RingerReceiver getReceiver ( ) { return new RingerReceiver ( ) ; }
public HashMap < String , ArrayList < Library >> getImportToLibraryTable ( ) { return importToLibraryTable ; }
public void onStop ( ) { super . onStop ( ) ; LocationServices . FusedLocationApi . removeLocationUpdates ( mGoogleApiClient , this ) ; if ( mGoogleApiClient != null && mGoogleApiClient . isConnected ( ) ) { mGoogleApiClient . disconnect ( ) ; } }
public InitialCommentMarker createFromParcel ( Parcel in , ClassLoader loader ) { return createFromParcel ( in , null ) ; }
public void loadData ( String data ) { mWebView . loadData ( data , "text/html" , "UTF - 8" ) ; }
public void onLoadFinished ( Loader < Cursor > loader , Cursor data ) { mCursor = data ; new ThumbNailTask ( ) . execute ( ) ; }
public void setTranslations ( List < TranslationRowData > data ) { this . mTranslations = data ; }
public void hide ( ) { super . hide ( ) ; RemixedDungeon . activeMod ( prevMod ) ; }
public Object getItem ( int position ) { return filteredList . get ( position ) ; }
public void onAnimationEnd ( Animation animation ) { if ( isAdded ( ) ) { mNewPostsBar . setVisibility ( View . GONE ) ; mIsAnimatingOutNewPostsBar = false ; checkSwipeToRefresh ( ) ; } }
public void onStart ( ) { drawerPresenter . onStart ( ) ; drawerView . registerToggle ( drawerToggle ) ; addWeightPresenter . onStart ( ) ; pagerPresenter . onStart ( ) ; timePeriodLoader . onStart ( ) ; }
public long getUpdateInterval ( ) { return FIGHT_UNIT_STATE_UPDATE_INTERVAL ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { handleStartCommand ( intent ) ; if ( sinks . isEmpty ( ) ) { stopSelf ( startId ) ; } return START_NOT_STICKY ; }
public void onResume ( ) { super . onResume ( ) ; drawListItems ( ) ; fetchPendingRecoveries ( ) ; }
public boolean hasNext ( ) { return index < nodeList . getLength ( ) - 1 ; }
public void onPageSelected ( int position ) { fireTab ( position ) ; }
public ConfirmResult ( final Result result ) { super ( result ) ; }
public DynamicAppInfoList ( List < AppInfo > backingAppInfoList , FASTSettings settings ) { this . settings = settings ; this . backingAppInfoList = new ArrayList < AppInfo > ( ) ; update ( backingAppInfoList ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case STATION_LIST_FRAGMENT_POSITION : return new StationListFragment ( ) ; case DISCOVER_FRAGMENT_POSITION : return new DiscoverFragment ( ) ; default : return null ; } }
public void onAuthFailed ( SessionObject sessionObject , SaslModule . SaslError error ) throws JaxmppException { processAuthenticationError ( ( Jaxmpp ) multiJaxmpp . get ( sessionObject ) ) ; }
public void onRefresh ( ) { apiHelper . getPlayerStats ( ) ; pbLoadphonebook . setVisibility ( View . VISIBLE ) ; listPlayers . setAdapter ( ( BaseExpandableListAdapter ) null ) ; }
public static String getReadableDurationString ( long songDurationMillis ) { long minutes = ( songDurationMillis / 1000 ) / 60 ; long seconds = ( songDurationMillis / 1000 ) % 60 ; return String . format ( "%02d : %02d" , minutes , seconds ) ; }
public String getStartDate ( ) { return startDate != null ? startDate : "1979 - 01 - 01" ; }
public static int getMinFlightsViewedToRate ( ) { return get ( MIN_FLIGHTS_TO_RATE , Constants . App . MIN_FLIGHTS_TO_RATE_APP ) ; }
public void setPrice ( Integer price ) { this . price = price ; }
public LottieValueCallback ( @ NonNull T staticValue ) { value = staticValue ; }
public void onCreate ( ) { super . onCreate ( ) ; mAlertManager = new AlertManager ( this ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { if ( viewType == 0 ) { return mDetailsViewHolder ; } return new CommentViewHolder ( parent , mLayoutInflater . inflate ( R . layout . item_view_comment , parent , false ) ) ; }
public CreateSignedPreKeyJob ( Context context ) { super ( context , JobParameters . newBuilder ( ) . withNetworkRequirement ( ) . withMasterSecretRequirement ( ) . withGroupId ( CreateSignedPreKeyJob . class . getSimpleName ( ) ) . create ( ) ) ; }
public RestoreDropboxTask ( Context context , SyncListener mListener ) { this . mContext = new ContextHolder ( context ) ; this . mListener = mListener ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . publicize_connection_list_item , parent , false ) ; return new ViewHolder ( view ) ; }
public void handleDownloadTemporaryError ( int errorId ) { mAudioStatusBar . setProgressText ( getString ( errorId ) , false ) ; }
public SpannableString getCenterText ( ) { return mCenterText ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; PreferenceUtil . getInstance ( getActivity ( ) ) . unregisterOnSharedPreferenceChangedListener ( this ) ; ButterKnife . unbind ( this ) ; colorReceiver = null ; }
private void initMissedPrefs ( ) { mMissedPrefs = binding . missedPrefs ; mMissedPrefs . setOnClickListener ( mMissedClick ) ; mMissedPrefs . setChecked ( mPrefs . isMissedReminderEnabled ( ) ) ; }
public IqParser ( XmppConnectionService service ) { super ( service ) ; }
private double pintTocum ( double num ) { return num * 0 . 000473 ; }
private int getBestPipSize ( int width ) { if ( dpFromPx ( getContext ( ) , width ) >= 164 ) { return pxFromDp ( getContext ( ) , 24 ) ; } else { return pxFromDp ( getContext ( ) , 20 ) ; } }
public void run ( ) { try { database . executeFast ( "DELETE FROM pending_tasks WHERE id = " + id ) . stepThis ( ) . dispose ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public static SongShareDialog create ( final Song song ) { final SongShareDialog dialog = new SongShareDialog ( ) ; final Bundle args = new Bundle ( ) ; args . putSerializable ( "song" , song ) ; dialog . setArguments ( args ) ; return dialog ; }
public void setOnLongClickListener ( OnLongClickListener l ) { answer . setOnLongClickListener ( l ) ; launchIntentButton . setOnLongClickListener ( l ) ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new WidgetFactory ( this . getApplicationContext ( ) ) ; }
public HomePageListAdapter . item onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View mItemView = mInflator . inflate ( R . layout . lyric_item , parent , false ) ; return new item ( mItemView , this ) ; }
public boolean isChecked ( ) { return mIsChecked ; }
private static String localizeDefaultAggregateSuccessfulText ( String text ) { if ( text != null && text . equals ( DEFAULT_SUCCESSFUL_TEXT ) ) { text = TranslationHandler . getString ( Collect . getInstance ( ) , R . string . success ) ; } return text ; }
public Volumes setMicrophoneStatus ( final MicrophoneStatus microphoneStatus ) { return new Volumes ( mPlayGain , mMicGain , mExternalSpeaker , microphoneStatus , mEchoLimiter ) ; }
public boolean onTouchEvent ( MotionEvent event ) { super . onTouchEvent ( event ) ; if ( mChartTouchListener == null || mDataNotSet ) return false ; if ( ! mTouchEnabled ) return false ; else return mChartTouchListener . onTouch ( this , event ) ; }
private File getMapFile ( ) { return new File ( mMapFilenamePath , mMapValues . mMapName + " . bin" ) ; }
public ViewHolderShop ( @ NonNull View itemView , Context context , Fragment fragment ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; this . context = context ; this . fragment = fragment ; }
public void setUp ( ) { preferences = new Preferences ( getTargetContext ( ) , null , null ) ; preferences . clear ( ) ; preferences . setBoolean ( R . string . p_rmd_enable_quiet , true ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . playlist_child_tab , container , false ) ; }
public static void assertDefaultAccountExists ( ) { assertThat ( "default account does not exist" , Authenticator . getDefaultAccount ( InstrumentationRegistry . getTargetContext ( ) ) , notNullValue ( ) ) ; }
public void setBirthdayColor ( int color ) { putInt ( BIRTH_COLOR , color ) ; }
public void run ( ) { enableHeartRateNotifications ( ) ; }
public int getSlotType ( ) { return slotType ; }
private static FormulaNode createSingleValueNode ( final String nodeId , final Object value ) { return new FormulaNode ( nodeId , null , ( objs , vars ) -> value instanceof Value ? ( Value ) value : Value . of ( value ) , null ) ; }
public Computer [ ] newArray ( int size ) { return new Computer [ size ] ; }
private void maybeForceBuilderInitialization ( ) { if ( com . google . protobuf . GeneratedMessage . alwaysUseFieldBuilders ) { } }
public ViewHolder ( View view ) { super ( view ) ; this . icon = ( ImageView ) view . findViewById ( R . id . icon ) ; }
public void getKeyByValueIsNotEqualTest ( ) { assertThat ( getKeyByValue ( map , "AnkiDesktop" ) , not ( 5 ) ) ; }
public UploadObject setDestination ( UploadDestination destination ) { this . destination = destination ; return this ; }
private static File getOutgoingPhotoFile ( Context context , Date date ) throws IOException { File path = new File ( context . getCacheDir ( ) , DCIM_ROOT ) ; createDirectories ( path ) ; return createImageFile ( path , date ) ; }
public void onBindOsmoMyPool ( Context context , BaseActivity activity , BaseData baseData , PoolOuterClass . Pool otherPool ) { }
public void onAnimationStart ( View view ) { dispatchAddStarting ( holder ) ; }
public void setDomainFramingModel ( XYFramingModel domainFramingModel ) { this . domainFramingModel = domainFramingModel ; }
public RevokeReqBody ( @ TokenType String tokenTypeHint , String token , @ Nullable String clientSecret ) { this . tokenTypeHint = tokenTypeHint ; this . token = token ; this . clientId = "ghost - admin" ; this . clientSecret = clientSecret ; }
public void onWindowFocusChanged ( boolean hasFocus ) { if ( ! hasFocus ) { if ( mStatus == STATUS_RECORDING ) cancel ( ) ; else if ( mStatus == STATUS_PLAYING ) pauseAudio ( ) ; } }
public Single < List < QuranAyah >> getArabicFromDatabase ( VerseRange verses ) { return getVersesFromDatabase ( verses , QuranDataProvider . QURAN_ARABIC_DATABASE , DatabaseHandler . TextType . ARABIC ) ; }
public SuggestedApp change ( AppInfo info ) { this . app = info ; return this ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { unitTypeChanged ( ) ; }
public static SimpleExoPlayer newSimpleInstance ( Context context , TrackSelector trackSelector ) { return newSimpleInstance ( new DefaultRenderersFactory ( context ) , trackSelector ) ; }
public void onCancelled ( ) { showSyncLogMessage ( R . string . sync_cancelled , "" ) ; if ( ! dialogDisplayFailure ) { mProgressDialog . dismiss ( ) ; updateDeckList ( ) ; } dialogDisplayFailure = false ; }
public void onClick ( View view ) { Intent intent = new Intent ( LoginActivity . this , SignupActivity . class ) ; startActivity ( intent ) ; btnLinkToSignUp . setEnabled ( false ) ; }
public void onSuccess ( List < Post > results ) { callback . onSuccess ( results ) ; getFromRemoteByCategory ( category , callback ) ; }
public String desc ( ) { return Game . getVar ( R . string . EarthrootBuff_Info ) ; }
public int getItemPosition ( Object object ) { int index = pages . indexOf ( object ) ; if ( index == - 1 ) return POSITION_NONE ; else return index ; }
public void onScrollStateChanged ( RecyclerView recyclerView , int newState ) { if ( newState == RecyclerView . SCROLL_STATE_IDLE ) { fab . show ( ) ; } super . onScrollStateChanged ( recyclerView , newState ) ; }
private static void setErrorCount ( ) { mErrorCountSaveToFile -- ; if ( mErrorCountSaveToFile <= 0 ) { mSaveToFileEnable = false ; mOpenMRS . logger . e ( "logging to file disabled because of to much error during save" ) ; } }
public void onCancelled ( DatabaseError databaseError ) { new LoadChallengesAsync ( 1000 , 1000 ) . execute ( ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( RecordActivity . this , PracticeAidActivity . class ) ; startActivity ( intent ) ; }
public int getId ( ) { return safeGetFirstAlbum ( ) . getArtistId ( ) ; }
public void onClick ( View view ) { gestureView . clear ( true ) ; textView . setVisibility ( View . VISIBLE ) ; isDrawSignature = false ; isImageCapture = false ; imagePreviewAdapter . clearAll ( ) ; }
public boolean cancelButtonPressed ( ) { delegate . actionButtonPressed ( true ) ; finishFragment ( ) ; return true ; }
public void surfaceCreated ( SurfaceHolder holder ) { haveSurface = true ; }
public AboutBuilder addWhatsAppDirectChat ( int phone , int message ) { return addWhatsAppDirectChat ( context . getString ( phone ) , context . getString ( message ) ) ; }
public String getString ( @ NonNull String key , @ Nullable String defaultValue ) { return null ; }
public void attachView ( UserListView mvpView ) { super . attachView ( mvpView ) ; updateUserList ( ) ; }
public void onPastPosts ( ) { final SessionListDialog sessionListDialog = SessionListDialog . newInstance ( postListingController . getUri ( ) , postListingController . getSession ( ) , SessionChangeListener . SessionChangeType . POSTS ) ; sessionListDialog . show ( getFragmentManager ( ) , null ) ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; mView = mock ( NewGoalView . class ) ; mPresenter = spy ( new NewGoalPresenter ( mView ) ) ; }
public void stopStream ( ) { player . stop ( ) ; }
public boolean isCancelled ( ) { return CollectionTask . this . isCancelled ( ) ; }
public final void showMessage ( String s ) { Toast . makeText ( context , s , Toast . LENGTH_LONG ) . show ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { Log . i ( LOG_TAG , "confirmExit onClick : User requested exit , finishing Activity" ) ; finish ( ) ; }
public void setEventList ( ArrayList < EventInfo > eventList ) { this . eventList = eventList ; }
public void setIgnoredRacer ( Racer ignoredRacer ) { mFixtureFilter . mIgnoredRacer = ignoredRacer ; }
public String getPublicKey ( ) { return publicKey ; }
public void setUp ( ) throws Exception { mClientListPresenter = new ClientListPresenter ( mDataManagerClient ) ; mClientListPresenter . attachView ( mClientListMvpView ) ; clientPage = new Page <> ( ) ; clientPage = FakeRemoteDataSource . getClientList ( ) ; }
public IBinder onBind ( Intent intent ) { return super . onBind ( intent ) ; }
public FontTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; decorator = new FontDecorator ( context ) ; decorator . initFromAttributes ( this , attrs ) ; }
public String desc ( ) { return Game . getVar ( R . string . DriedRoseBuff_Info ) ; }
public TagWriter writeElement ( Element element ) throws IOException { if ( outputStream == null ) { throw new IOException ( "output stream was null" ) ; } outputStream . write ( element . toString ( ) ) ; outputStream . flush ( ) ; return this ; }
public void start ( Attributes attributes ) { mCurrentPost . setDateFromTimestamp ( Integer . parseInt ( attributes . getValue ( Post . Xml . DATE_TIMESTAMP_ATTRIBUTE ) ) ) ; }
public void ownerDoesDamage ( Char ch , int damage ) { }
public void testTeamListWriter ( ) { mWriter . write ( mInfo ) ; }
private void handleReceivedMessage ( Context context , String data ) { ApplicationContext . getInstance ( context ) . getJobManager ( ) . add ( new PushReceiveJob ( context , data ) ) ; }
public CalendarEventVisualizer ( Context context , int widgetId ) { super ( context , widgetId ) ; calendarContentProvider = new CalendarEventProvider ( context , widgetId ) ; }
private void closeLastFragmentInternalRemoveOld ( BaseFragment fragment ) { fragment . onPause ( ) ; fragment . onFragmentDestroy ( ) ; fragment . setParentLayout ( null ) ; fragmentsStack . remove ( fragment ) ; containerViewBack . setVisibility ( View . INVISIBLE ) ; bringChildToFront ( containerView ) ; }
public static File getPathToAttach ( TLObject attach ) { return getPathToAttach ( attach , false ) ; }
public ApplicationListViewModel setup ( String f ) { filter = f ; databaseCreator . createDb ( this . getApplication ( ) , filter ) ; return this ; }
private < T > T readObject ( AccountProperty property , Class < T > clazz ) { try { return JsonUtils . stringToObject ( read ( property ) , clazz ) ; } catch ( Exception ignored ) { return null ; } }
public static String getStringSp ( Context context , String name , String tag ) { SharedPreferences sp = context . getSharedPreferences ( name , mode ) ; return sp . getString ( tag , null ) ; }
public void testEventListWriter ( ) { mWriter . write ( mEventTeam , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_EVENTTEAMS , null , mEventTeam . getParams ( ) ) ; }
public String getKeyName ( int keyCode ) { String res = keyCodeToKeyName . get ( keyCode ) ; if ( res != null ) { return res ; } else { throw new IllegalArgumentException ( "unknown keycode " + keyCode ) ; } }
private VolleySingleton ( Context context ) { mContext = context . getApplicationContext ( ) ; mQueue = getRequestQueue ( ) ; }
public LinkedAccountsFragmentPresenterImpl ( ) { AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View rootView = inflater . inflate ( R . layout . fragment_convert , container , false ) ; init ( rootView ) ; return rootView ; }
public void run ( ) { groupCreated ( ) ; }
public int getIdentifier ( ) { return mIdentifier ; }
public int getItemCount ( ) { return results . size ( ) ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "takeRemainingBurstPhotos : check again from post delayed runnable" ) ; takeRemainingBurstPhotos ( ) ; }
public JsonCommand cmd ( String . . . commandTerms ) { return cmd ( Arrays . asList ( commandTerms ) ) ; }
public Builder clearPlaylistId ( ) { bitField0_ = ( bitField0_ & ~0x00000001 ) ; playlistId_ = 0 ; onChanged ( ) ; return this ; }
public BaseRowItem ( GridButton button ) { this . gridButton = button ; type = ItemType . GridButton ; }
public void onDownloadAudioClicked ( ) { if ( ! isPermissionAllowed ) { acquirePermission ( ) ; } else { audioToDownload = 0 ; audioIndexesToDownload = repository . getAyahNumberNotAudioDownloaded ( ) ; downState ( ) ; downlaodAudioData ( ) ; } }
public void onSuccess ( SaveBookmark . ResponseValue response ) { getNews ( ) ; mNewsListView . hideProgress ( ) ; mNewsListView . showMessage ( "Favorito guardado" ) ; }
public void onClickReset ( View v ) { boolean wasStopped = timer . isStopped ( ) ; cancelEditingTheAlarmField ( ) ; timer . reset ( ) ; updateHandler . beginScheduledUpdate ( ) ; updateUI ( ) ; if ( wasStopped ) { informIfNotificationAlarmsMuted ( ) ; } }
public RequestLiveData ( Context context , Request < M > request , boolean load ) { this . applicationContext = context . getApplicationContext ( ) ; this . request = request ; if ( load ) { loadData ( Bundle . EMPTY ) ; } }
public void onScrollStateChanged ( RecyclerView recyclerView , int newState ) { super . onScrollStateChanged ( recyclerView , newState ) ; if ( newState == RecyclerView . SCROLL_STATE_IDLE ) { showDialogWalt ( ) ; getBalances ( ) ; } }
public static synchronized PostrainerApplication getInstance ( ) { return instance ; }
public FileChooserDialog show ( ) { FileChooserDialog dialog = build ( ) ; dialog . show ( context ) ; return dialog ; }
public void setResult ( Object result ) { this . result = result ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mBinder . unbind ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( mConfiguration . getShowActionBarBackButton ( ) && item . getItemId ( ) == android . R . id . home ) { cancelWelcomeScreen ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public StreamingAudioRequest ( String baseUrl , QuranAyah verse ) { super ( baseUrl , verse ) ; }
public StringHolder ( String text ) { super ( text ) ; }
public MessageRecord getMessageRecord ( ) { return messageRecord ; }
public List < NativeModule > createNativeModules ( @ Nonnull ReactApplicationContext reactContext ) { List < NativeModule > list = new ArrayList <> ( ) ; list . add ( new DeviceModule ( reactContext ) ) ; return null ; }
public void setSelectedCurrency ( String currencyCode ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( context . getString ( R . string . currency_key ) , currencyCode ) . apply ( ) ; }
public LiveData < Account > getCurrentAccount ( ) { return currentAccount ; }
public static FoldersFragment newInstance ( Context context ) { return newInstance ( PreferenceUtil . getInstance ( context ) . getStartDirectory ( ) ) ; }
private void clearTable ( Operation table ) { getWritableDatabase ( ) . delete ( getTableForOperation ( table ) , null , null ) ; }
private void showConnectProgress ( ) { this . viewAnimator . setDisplayedChild ( 0 ) ; findViewById ( R . id . button_save ) . setVisibility ( View . INVISIBLE ) ; }
public void drawUserLocation ( Canvas canvas , Rect bounds ) { MapLocationXY userLocation = userLocationService . getUserLocationXY ( ) ; if ( userLocation != null ) { drawPoint ( userLocation , Color . BLACK , canvas , bounds , null ) ; } }
public CoinType getCoinType ( ) { return coinType ; }
private static String getFilterPreferenceKey ( int appWidgetId ) { return "widget - filter - " + appWidgetId ; }
public boolean onOptionsItemSelected ( MenuItem menuItem ) { switch ( menuItem . getItemId ( ) ) { case android . R . id . home : finish ( ) ; return true ; default : return super . onOptionsItemSelected ( menuItem ) ; } }
public void sharePatternTest ( ) { search ( "ho?t" ) ; openMenuItem ( R . string . share ) ; verifyShareIntentContains ( "host" ) ; }
public Map < String , Object > cache ( ) { return forumCache ; }
public Item ( Item parOneItem ) { this . setName ( parOneItem . getName ( ) ) ; this . setCategory ( parOneItem . getCategory ( ) ) ; }
public Fragment getItem ( int position ) { if ( position == 0 ) return ContactsFragment . newInstance ( ) ; else return CallsFragment . newInstance ( ) ; }
public void setIcon ( IconName icon ) { this . icon = icon ; int res = DrinkIconUtils . getDrinkIconRes ( icon . getIcon ( ) ) ; setImageResource ( res != 0 ? res : Common . DEFAULT_ICON_RES ) ; }
public void setRemoteAdapter ( Context context , @ NonNull final RemoteViews views ) { views . setRemoteAdapter ( R . id . widget_list , new Intent ( context , ComicRemoteService . class ) ) ; }
public static void v ( final String msg ) { Log . v ( mTAG , getMessage ( msg ) ) ; saveToFile ( ) ; }
public static String subtract ( String num1 , String num2 ) { return new BigDecimal ( num1 ) . subtract ( new BigDecimal ( num2 ) ) . toString ( ) ; }
public static String getStoreUrl ( ) { return isFireTv ( ) ? "TBD" : "https : }
public void onPause ( ) { super . onPause ( ) ; if ( mBookmarksSavedLocallyDialog != null ) { mBookmarksSavedLocallyDialog . dismiss ( ) ; } mWasPaused = true ; mViewModel . onFragmentPause ( mIsTopLevel , getPostListType ( ) == ReaderPostListType . SEARCH_RESULTS , isFollowingScreen ( ) ) ; }
public void onBind ( Integer port ) throws IOException { result . getResultMap ( ) . put ( RESULT_IN_PORT , port ) ; }
public void setFileModel ( final FileModel fileModel ) { mFileImageCardView . setFileModel ( fileModel ) ; }
public void onKeyUp ( int keyIndex ) { noteOff ( 0 , keyIndex , DEFAULT_VELOCITY ) ; }
public FieldView ( RectF rect ) { mData = new CopyOnWriteArrayList <> ( ) ; mRectField = rect ; mPaintField = new Paint ( ) ; mPaintField . setAntiAlias ( Settings . antiAlias ) ; mPaintField . setColor ( Colors . backgroundField ) ; mShow = true ; }
public long getCurrentTimeMillis ( ) { return native_getCurrentTimeMillis ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( PreviewActivity . this , ImageMainActivity . class ) ; startActivity ( i ) ; }
public com . coinomi . core . protos . Protos . DeterministicKey . Builder getDeterministicKeyBuilder ( ) { bitField0_ | = 0x00000020 ; onChanged ( ) ; return getDeterministicKeyFieldBuilder ( ) . getBuilder ( ) ; }
public void onLocationChanged ( Location location ) { double latitude = location . getLatitude ( ) ; double longitude = location . getLongitude ( ) ; if ( mCallback != null ) mCallback . onChange ( latitude , longitude ) ; }
public void onPageSelected ( int position ) { super . onPageSelected ( position ) ; ViewUtils . setVisibility ( fab , position == 1 && userManager . getCurrentUser ( ) != null && userManager . getCurrentUser ( ) . getIsAdmin ( ) ) ; }
public void clearCache ( ) { drawables . clear ( ) ; IconPackManager . getInstance ( ) . forceReload ( ) ; System . gc ( ) ; }
public void bindCheckBoxCheckedValue ( Boolean value ) { if ( value != null ) bookCheckBox . setChecked ( value ) ; else bookCheckBox . setChecked ( mListener . isBookSelected ( bookInfo . getBookId ( ) ) ) ; }
public void getIdLIGHTTest ( ) throws Exception { int index = 0 ; AppTheme apptheme = AppTheme . getTheme ( index ) ; assertEquals ( index , apptheme . getId ( ) ) ; }
public void postToMyWall ( @ NonNull Photo photo , int accountId ) { PlaceUtil . goToPostCreation ( getActivity ( ) , accountId , accountId , EditingPostType . TEMP , Collections . singletonList ( photo ) ) ; }
public PlaylistsAdapter ( Context context , ArrayList < Playlist > playlistInfoList ) { this . playlistInfoList = playlistInfoList ; inflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public void showNewBillForm ( Provider provider ) { FormFragment . newInstance ( provider ) . show ( getSupportFragmentManager ( ) , "FORM" ) ; }
private void unknownParameter ( int parameter ) { if ( TermDebug . LOG_UNKNOWN_ESCAPE_SEQUENCES ) { StringBuilder buf = new StringBuilder ( ) ; buf . append ( "Unknown parameter" ) ; buf . append ( parameter ) ; logError ( buf . toString ( ) ) ; } }
public void setActionBarSubtitle ( String subtitle ) { if ( ! isDrawerOpen ( ) && getActionBar ( ) != null ) { getActionBar ( ) . setSubtitle ( subtitle ) ; } }
public String getString ( @ NonNull String key ) throws ItemNotFoundException { return null ; }
public int process ( ) { return this . number ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_rv_description , parent , false ) ; return new ViewHolder ( v ) ; }
public void startRecording ( ) throws IOException { mStartTime = SystemClock . uptimeMillis ( ) ; MediaRecorder recorder = getRecorder ( ) ; recorder . prepare ( ) ; recorder . start ( ) ; acquireLock ( ) ; }
private void initAutoLaunchPrefs ( ) { binding . autoLaunchPrefs . setOnClickListener ( mAutoLaunchClick ) ; binding . autoLaunchPrefs . setChecked ( mPrefs . isAutoLaunchEnabled ( ) ) ; }
public boolean containsProgress ( @ FloatRange ( from = 0f , to = 1f ) float progress ) { return progress >= getStartProgress ( ) && progress <= getEndProgress ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { Log . d ( TAG , "onCreate" ) ; super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . home ) ; checkDbInitialization ( ) ; initTabs ( ) ; }
public void setAllCaps ( boolean textAllCaps ) { this . textAllCaps = textAllCaps ; }
public static boolean encryptNodes ( Context context , List < TetroidNode > nodes , boolean isReencrypt ) { boolean res = true ; for ( TetroidNode node : nodes ) { res = res & encryptNode ( context , node , isReencrypt ) ; } return res ; }
public void onModified ( Recipient recipient ) { Util . runOnMain ( ( ) -> { if ( recipient == author ) { setQuoteAuthor ( recipient , conversation ) ; } } ) ; }
public void removeSavedColor ( int index , int color ) { SettingsManager . removePickedColor ( color ) ; }
public void onDestroy ( ) { if ( stickersGridAdapter != null ) { NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . stickersDidLoaded ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . recentDocumentsDidLoaded ) ; } }
private void disable ( ) { if ( mCheckHandler == null ) { return ; } mCheckHandler . removeCallbacks ( mCheckRunnable ) ; }
public void cancel ( ) { this . canceled = true ; }
public Builder backgroundDark ( int backgroundDark ) { this . backgroundDark = backgroundDark ; return this ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( SAVE_TITLE , title ) ; mWebView . saveState ( outState ) ; }
public void openPostEditor ( int accountId , Post post ) { PlaceUtil . goToPostEditor ( getActivity ( ) , accountId , post ) ; }
public String getContent ( ) { return content ; }
public void replace ( @ Nonnull final Transaction tx ) { transactions . clear ( ) ; transactions . add ( new NxtTransaction ( tx ) ) ; notifyDataSetChanged ( ) ; }
public void setData ( BubbleData data ) { mBubbleData = data ; init ( ) ; }
public void goToManagerEditing ( int accountId , int groupId , Manager manager ) { PlaceFactory . getCommunityManagerEditPlace ( accountId , groupId , manager ) . tryOpenWith ( getActivity ( ) ) ; }
public String processMarkdown ( @ NonNull String markdown ) { return super . processMarkdown ( markdown ) ; }
public String getVersionName ( ) { return ( androidInterface == null ? Config . VERSION_NAME : androidInterface . getVersionName ( ) ) ; }
public AboutBuilder setBrief ( int text ) { return setBrief ( context . getString ( text ) ) ; }
public final void bind ( ViewHolder < M , VDB > holder , M item ) { bindModel ( item , holder . getBinding ( ) ) ; holder . getBinding ( ) . executePendingBindings ( ) ; }
private static Intent createGetSingleContentIntent ( String mimeType ) { final Intent intent = new Intent ( Intent . ACTION_GET_CONTENT ) ; intent . setType ( mimeType ) ; intent . addCategory ( Intent . CATEGORY_OPENABLE ) ; return intent ; }
public String tileDesc ( ) { return Game . getVar ( R . string . Web_Info ) ; }
public void onClick ( DialogInterface dialog , int which ) { NotesDbHelper dbHelper = new NotesDbHelper ( SettingsActivity . this ) ; dbHelper . clearAllReminders ( ) ; new BootReceiver ( ) . onReceive ( SettingsActivity . this , null ) ; }
public void onCreateView ( Bundle savedInstanceState ) { venues = interactor . getVenuesWithCoordinates ( ) ; view . addMarkers ( venues ) ; super . onCreateView ( savedInstanceState ) ; }
public boolean onQueryTextChange ( String newText ) { if ( mAdapter != null ) mAdapter . filter ( newText ) ; return false ; }
public void clear ( ) { count = ( mEmptyItem ? 1 : 0 ) ; pages . clear ( ) ; }
public static void show ( Context context ) { context . startActivity ( new Intent ( context , MultiActivity . class ) ) ; }
public void onClick ( View v ) { parent . onClickMemoryKeyButton ( Constants . MEM_PLUS ) ; }
public ConcreteBlock ( int pos ) { super ( pos ) ; imageIndex = 8 ; }
public int getLightLevel ( ) { return 0 ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mRefreshLayout . setOnRefreshListener ( null ) ; mDayList . clearAnimation ( ) ; mPresenter . stop ( ) ; }
public void onDismissClicked ( ) { finish ( ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = inflater . inflate ( R . layout . recycler_ingredients_item , parent , false ) ; return new MyViewHolder ( v ) ; }
public void set ( boolean b ) { this . b = b ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'PGNIG_PRICES'" ; db . execSQL ( sql ) ; }
public int indexOfTab ( LightningView tab ) { return mTabList . indexOf ( tab ) ; }
public void setPresenter ( PopularGoalPresenter presenter ) { mPopularGoalPresenter = presenter ; }
public void setModules ( List < MoodleModule > modules ) { this . modules = new ArrayList < MoodleModule > ( modules ) ; }
public void updateUserTest ( ) { Integer id = null ; UserWithPass body = null ; }
public void bindItem ( @ NonNull SelectionOption selectionOption ) { titleTextView . setText ( selectionOption . title ( ) ) ; }
public void currentPasswordUpdated ( TLRPC . account_Password password ) { currentPassword = password ; }
public void setList ( List < FileAudioModel > list ) { files . clear ( ) ; files . addAll ( list ) ; notifyDataSetChanged ( ) ; }
public static void set ( String key , int value ) { prefs . edit ( ) . putInt ( key , value ) . commit ( ) ; }
public static void startActivity ( Context context ) { context . startActivity ( new Intent ( context , LoadingActivity . class ) . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_CLEAR_TASK ) ) ; }
private void enableActivityAnimation ( int animation ) { if ( animationDisabled ( ) ) { disableActivityAnimation ( ) ; } else { ActivityTransitionAnimation . slide ( this , animation ) ; } }
private void setupActionBar ( ) { getActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; setActionBarTitle ( "Match" ) ; }
private static Integer getCountryCode ( ) { return Photobook . getPreferences ( ) . intCountryCode ; }
public void onProgressChanged ( SeekArc seekArc , int i , boolean b ) { if ( i < 1 ) { seekArc . setProgress ( 1 ) ; return ; } seekArcProgress = i ; updateTimeDisplayTime ( ) ; }
public void notifyNeedsConnection ( ) { mBroadcastManager . sendBroadcast ( new Intent ( Constants . ACTION_NEEDS_CONNECTION ) ) ; }
public void run ( ) { mListener . onSettingsUpdated ( error ) ; }
public void onClick ( View v ) { AppDetail app = filteredList . get ( holder . getAdapterPosition ( ) ) ; app . setFav ( activity , ! app . fav ) ; listener . onChange ( ) ; dialog . dismiss ( ) ; }
public static DataStoreCachePreference getInstance ( ) { if ( mInstance == null ) { mInstance = new DataStoreCachePreference ( ) ; } return mInstance ; }
public boolean hasUpdatedAt ( ) { return ( ( bitField0_ & 0x00000010 ) == 0x00000010 ) ; }
public void onBindMyHardStatus ( Context context , BaseData baseData , HardParam hardParam , ArrayList < HardMyDeposit > myDeposit , ArrayList < HardMyBorrow > myBorrow ) { }
public static void start ( FragmentManager fragmentManager ) { RecipeCreationDialogFragment fragment = new RecipeCreationDialogFragment ( ) ; fragment . show ( fragmentManager , fragment . getTag ( ) ) ; }
public DialogAsyncTask ( Context context ) { contextWeakReference = new WeakReference <> ( context ) ; dialogWeakReference = new WeakReference <> ( null ) ; }
public Single < List < Event >> getEvents ( AppDataStore appDataStore ) { return appDataStore . getEventsByFavorite ( ) ; }
private double inchtomi ( double num ) { return num * 0 . 0000158 ; }
public String getFormattedValue ( float value , AxisBase axis ) { return CommonUtils . speedFormatter ( value , false ) ; }
public void addEnergy ( int amount ) { mEnergy += amount ; setChanged ( ) ; notifyObservers ( this ) ; }
public void onClick ( View v ) { SpeedWalkDirectionEditorDialog editor = new SpeedWalkDirectionEditorDialog ( SpeedWalkConfigurationDialog . this . getContext ( ) , SpeedWalkConfigurationDialog . this ) ; editor . show ( ) ; }
public int getNumberOfSelectedTracks ( ) { int nsel = 0 ; synchronized ( _ArrayListTracks ) { for ( Track T : _ArrayListTracks ) { if ( T . isSelected ( ) ) nsel ++ ; } } return nsel ; }
public static boolean remindersLed ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_reminders_led ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_value_reminders_led ) ) ; }
public void onResume ( ) { super . onResume ( ) ; setOrientation ( this ) ; showOrHideStatusBar ( this ) ; backgroundSound . doInBackground ( this ) ; activityCounter ++ ; }
public MyTabsListener ( Activity activity , Fragment fragment ) { this . mFragment = fragment ; }
public void onMessageSend ( CharSequence message ) { moveScrollToLastMessage ( ) ; showReplyPanel ( false , null , null , null , false , true ) ; if ( mentionsAdapter != null ) { mentionsAdapter . addHashtagsFromMessage ( message ) ; } }
public Integer getItemPriceAtOrder ( ) { return itemPriceAtOrder ; }
public void onChatRoomEphemeralMessageDeleted ( final Core lc , final ChatRoom chatRoom ) { Lg . w ( "onChatRoomEphemeralMessageDeleted chatRoom = " , chatRoom ) ; }
private void _remapLearningAnswers ( String sql ) { mCol . getDb ( ) . execute ( "update revlog set " + sql + " and type in ( " + Consts . REVLOG_LRN + " , " + Consts . REVLOG_RELRN + " ) " ) ; }
public CharSequence getPageTitle ( int position ) { return usedArray . get ( position ) . getDisplayName ( ) ; }
public void infoEtudiantAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < Etudiant > ( ) { public Etudiant Func ( ) throws java . lang . Exception { return infoEtudiant ( codeAccesUniversel , motPasse ) ; } } ) ; }
public String visit ( Album album ) { return album . getName ( ) ; }
private void givenIsMultipane ( final boolean isMultipane ) { new Expectations ( ) { { WeatherUtils . isXLargeTablet ( mContext ) ; result = isMultipane ; } } ; }
public void cameraInOperation ( boolean in_operation ) { if ( in_operation && ! main_activity . getPreview ( ) . isVideo ( ) ) { taking_picture = true ; } else { taking_picture = false ; front_screen_flash = false ; capture_started = false ; capture_started_time_ms = 0 ; } }
public void setPrimaryItem ( ViewGroup container , int position , Object object ) { super . setPrimaryItem ( container , position , object ) ; bottomPages . setCurrentPage ( position ) ; }
public void onProviderEnabled ( String s ) { }
public Builder setBackgroundColor ( int color ) { this . backgroundColor = color ; return this ; }
public void handleEndOfStream ( long submittedFrames ) { stopPlaybackHeadPosition = getPlaybackHeadPosition ( ) ; stopTimestampUs = SystemClock . elapsedRealtime ( ) * 1000 ; endPlaybackHeadPosition = submittedFrames ; audioTrack . stop ( ) ; }
public boolean isDirty ( ) { return wallpaperEntity == null ; }
public void onFailure ( int statusCode , Header [ ] headers , Throwable throwable , JSONObject errorResponse ) { if ( listrikLoadedListener != null ) { listrikLoadedListener . onFail ( ) ; } }
public void showQualityImagesInfo ( ) { launchAlert ( getResources ( ) . getString ( R . string . statistics_quality ) , getResources ( ) . getString ( R . string . quality_images_info ) ) ; }
public void onErrorResponse ( VolleyError error ) { error . printStackTrace ( ) ; Log . d ( Constants . LOG_TAG , "Error : " + error . getMessage ( ) ) ; handleFailure ( ) ; }
public static int colorByChangingSaturation ( int originalColor , float newSaturation ) { float [ ] hsv = ColorToHSV ( originalColor ) ; hsv [ 1 ] = newSaturation ; return HSVToColor ( alpha ( originalColor ) , hsv ) ; }
public void showSuccessInfo ( ) { Toast . makeText ( this , R . string . msg_sent_location , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onResume ( ) { super . onResume ( ) ; ensureDimOff ( ) ; displayAdOnNetworkConnected ( ) ; }
public Anonymizer ( final Object messagePart ) { mMessagePart = messagePart ; }
public static JSONObject getThemeConfig ( ) { return ThemeConfig . getInstance ( ) . getThemeObject ( ) ; }
public void notifyDataSetChanged ( ) { super . notifyDataSetChanged ( ) ; data . clear ( ) ; data = songsManager . getAllPlaylists ( ) ; }
public void showLinksDialog ( int accountId , @ NonNull Feedback notification ) { FeedbackLinkDialog . newInstance ( accountId , notification ) . show ( getFragmentManager ( ) , "feedback_links" ) ; }
public ReaderRecyclerView ( Context context ) { super ( context ) ; initialize ( ) ; }
private boolean isFestivalYear ( final int year ) { return year % 3 == 0 && year % 51 != 0 ; }
public HostEntity get ( String host ) { return mDataBase . getHostDao ( ) . get ( host ) ; }
public final InsetView getNavigationView ( ) { return findViewById ( R . id . navigation_frame ) ; }
public RuleChain copyFormChain = TestRuleChain . chain ( ) . around ( rule ) ; @ Test public void subtext_ShouldDisplayAdditionalInformation ( ) { rule . startAtMainMenu ( ) . copyForm ( "All_widgets . xml" ) . clickFillBlankForm ( ) . checkIsFormSubtextDisplayed ( ) ; }
public void addMapping ( String from , String to ) { if ( columns . containsKey ( from ) && ! columns . containsKey ( to ) ) { columns . put ( to , columns . get ( from ) ) ; } }
public boolean isConnected ( ) { return connected ; }
public void deleteSuccessfully ( Event event , boolean deleted ) { if ( deleted ) { EventBus . getDefault ( ) . post ( new EventDeletedEvent ( event ) ) ; finish ( ) ; } else { showSnackbarMessage ( R . string . msg_error_event_could_not_be_deleted ) ; } }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "me . gfred . builditbigger" , appContext . getPackageName ( ) ) ; }
public void startActivityForResult ( Intent intent , int requestCode ) { Utils . hideKeyboard ( this ) ; super . startActivityForResult ( intent , requestCode ) ; overridePendingTransition ( R . anim . slide_left_out , R . anim . slide_left_in ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { changeTrackerType ( 2 ) ; showHideCustFields ( View . INVISIBLE ) ; } }
public TimestampAdjuster ( long firstSampleTimestampUs ) { lastSampleTimestamp = C . TIME_UNSET ; setFirstSampleTimestampUs ( firstSampleTimestampUs ) ; }
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { if ( oldVersion < 87 ) { db . execSQL ( "ALTER TABLE ThreadTable ADD COLUMN color TEXT DEFAULT '#777777'" ) ; } }
public void setUid ( String uid ) { this . uid = uid == null ? "" : uid ; }
public void onTopItemClicked ( long idFeed , boolean isFolder , Long optional_folder_id ) { if ( drawerLayout != null ) drawerLayout . closeDrawer ( GravityCompat . START ) ; updateDetailFragment ( idFeed , isFolder , optional_folder_id , true ) ; }
public IqGenerator ( XmppConnectionService service ) { super ( service ) ; }
public void format ( IRCCloudJSONObject event , Event e ) { if ( event != null ) { e . target_mode = event . getString ( "statusmsg" ) ; } }
public int getSchemaVersion ( ) { return getProperty ( "schema_version" ) ; }
public void onPausePressed ( ) { startService ( AudioUtils . getAudioIntent ( this , AudioService . ACTION_PAUSE ) ) ; mAudioStatusBar . switchMode ( AudioStatusBar . PAUSED_MODE ) ; }
public int getGain ( ) { return 0 ; }
private WakeLockManager ( ) { this . isEnabled = true ; this . isHeldOnDemand = false ; wakeLockTimer = null ; }
public void notifyDataSetChanged ( ) { mUserListRecyclerViewAdapter . notifyDataSetChanged ( ) ; }
public void testSize ( ) throws Exception { assertEquals ( 0 , empty . size ( ) ) ; assertEquals ( 2 , factory . size ( ) ) ; }
public boolean syncOpen ( ) { boolean ret = openCDC ( ) ; if ( ret ) { setSyncParams ( inEndpoint , outEndpoint ) ; return true ; } else { return false ; } }
public boolean onTouchEvent ( MotionEvent e ) { if ( mDetector . onTouchEvent ( e ) ) { return true ; } return mWindowTouchListener . onTouch ( e ) ; }
public BaseModel ( ) { mCreatedTimestamp = TimestampHelper . getTimestampForNow ( ) ; mModifiedTimestamp = TimestampHelper . getTimestampForNow ( ) ; }
public void setOnClickListener ( @ Nullable OnClickListener l ) { if ( isSingleMode ) date . setOnClickListener ( l ) ; }
private Object getConnectionType ( ) { return new ConnectivityHelper ( ( ConnectivityManager ) mSipService . getSystemService ( mSipService . CONNECTIVITY_SERVICE ) , ( TelephonyManager ) mSipService . getSystemService ( mSipService . TELEPHONY_SERVICE ) ) . getConnectionTypeString ( ) ; }
public ArrayList < TrackResult > getDefaultTrackRecords ( TrackStats . ResultType resultType ) { return resultType == TrackStats . ResultType . LAP ? mDefaultLapRecords : mDefaultTotalRecords ; }
public MatchResult ( double accuracy , int id ) { this . accuracy = accuracy ; this . id = id ; }
public void startProcessing ( ) { enabled = true ; if ( thread == null ) { thread = new Thread ( this ) ; thread . start ( ) ; } }
public static Observable < CnBetaApi . Result < List < ArticleSummary >>> articles ( ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . articles ( timestamp , CnBetaSignUtil . articlesSign ( timestamp ) ) ; }
public void onLoaderReset ( Loader < ArrayList < Song >> loader ) { getAdapter ( ) . swapDataSet ( new ArrayList <> ( ) ) ; }
public CircleView ( Context context ) { super ( context ) ; init ( ) ; }
public void onEventMainThread ( ServiceEvents . LoggingStatusEvent loggingStatusEvent ) { enableDisableMenuItems ( ) ; }
public void testEagerFindFirst ( ) { resetData ( ) ; Student s1 = DataSupport . findFirst ( Student . class ) ; assertNull ( s1 . getClassroom ( ) ) ; s1 = DataSupport . findFirst ( Student . class , true ) ; assertNotNull ( s1 ) ; }
public String prompt ( ) { return Game . getVar ( R . string . Wand_Prompt ) ; }
public NoteBlockRangeType getRangeType ( ) { return mRangeType ; }
private void checkExistenceCryptedNodes ( ) { if ( ! NodesManager . isExistCryptedNodes ( true ) ) { AskDialogs . showYesDialog ( this , ( ) -> PassManager . clearSavedPass ( ) , R . string . ask_clear_pass_database_ini ) ; } }
public static java . util . Collection < String > initParameters ( ) { return Arrays . asList ( "normal" ) ; }
private void setAllowComments ( boolean newValue ) { mSiteSettings . setAllowComments ( newValue ) ; mAllowComments . setChecked ( newValue ) ; mAllowCommentsNested . setChecked ( newValue ) ; }
public static double getCoordinateTolerance ( ) { return 1 . 0 / Math . pow ( 10 , App . getCoordinateDecimalRounding ( ) ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { location = parent . getSelectedItem ( ) . toString ( ) ; filterTurnoutView ( ) ; }
public void onTaskSuccess ( String data ) { FlyveLog . d ( data ) ; assertTrue ( true ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; Daedalus . configurations . save ( ) ; adapter = null ; }
public void tellAllAndGlobalStats ( final AbstractClient . OnResult < DownloadsAndGlobalStats > listener ) { client . batch ( DOWNLOADS_AND_GLOBAL_STATS_BATCH_SANDBOX , listener ) ; }
public void testEmptyProperties ( ) throws IOException { onBook ( "* Note 1\n : PROPERTIES : \n : END : " ) . onLoad ( ) . isWhenSaved ( "* Note 1\n" ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { mCommodityAdapter . setList ( null ) ; }
private String onHdacAddress ( BaseChain baseChain ) { HdacUtil hdacUtil = new HdacUtil ( mWords ) ; mAddress = hdacUtil . getAddress ( baseChain ) ; return mAddress ; }
public void onSortSelected ( final UserCommentListingURL . Sort order ) { controller . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public static UtilsPreferences injectPreferences ( ) { if ( preferences == null ) { preferences = new UtilsPreferences ( ) ; } return preferences ; }
private void loge ( EventTime eventTime , String eventName , Throwable throwable ) { loge ( getEventString ( eventTime , eventName ) , throwable ) ; }
public SpinnerPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; setWidgetLayoutResource ( R . layout . preference_font_size ) ; init ( context , attrs ) ; }
public void handleFabPressed ( ) { mView . showEditConverter ( null ) ; }
private boolean responding ( ) { return responder . equals ( account . getJid ( ) ) ; }
public static Observable < BingWallpaperImage > getBingWallpaper ( Context context ) { return getBingWallpaper ( context , 0 , 1 ) . map ( bingWallpaperImages -> bingWallpaperImages . get ( 0 ) ) ; }
public ImageCardView getCardView ( ) { return mCardView ; }
public void addSong ( Song song ) { shufflingQueue . add ( song ) ; notifyChange ( QUEUE_CHANGED ) ; }
public AudioHelperFactory providesAudioHelperFactory ( ) { return context -> audioHelper ; }
public void onFailure ( Call < UserList > call , Throwable error ) { ApiFailure apiFailure = new ApiFailure <> ( error ) ; getBus ( ) . post ( new ApiErrorEvent ( apiFailure ) ) ; refreshFailed ( event , apiFailure ) ; }
public void setBoardSize ( int boardSize ) { this . boardSize = boardSize ; requestLayout ( ) ; return ; }
private void openMainActivity ( ) { startActivity ( new Intent ( getApplicationContext ( ) , MainActivity . class ) ) ; finish ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( INFO , mInfo ) ; outState . putBoolean ( PERMISSIONS_DENIED , mPermissionsDenied ) ; }
public static int to1e6 ( String value ) { if ( StringUtils . isEmpty ( value ) ) { return 0 ; } return ( int ) ( Double . valueOf ( value ) * VALUE_1E6 ) ; }
public TransactionConfidence getDefaultInstanceForType ( ) { return defaultInstance ; }
public static MoreAppsDetails getCurrentAppModel ( Context context ) { ArrayList < MoreAppsDetails > moreApps = SharedPrefsUtil . getMoreApps ( context ) ; return getCurrentAppModel ( context , moreApps ) ; }
public AppSettingsBase setFloat ( String key , float value ) { setFloat ( key , value , _prefApp ) ; return this ; }
public static CommentSort getCommentSorting ( String sub ) { return CommentSort . valueOf ( prefs . getString ( "defaultComment" + sub . toLowerCase ( ) , defaultCommentSorting . name ( ) ) ) ; }
public boolean isPostsILike ( ) { return tagType == ReaderTagType . DEFAULT && getEndpoint ( ) . endsWith ( "/read/liked" ) ; }
public void onDestroy ( ) { getPresenterDelegate ( ) . onDestroy ( ) ; super . onDestroy ( ) ; }
public void setEventListener ( EventListener < SinglePlaylistViewModel . State > eventListener ) { mEventListener = eventListener ; }
private void postFitWidth ( ) { if ( isLoadPdf ) new Handler ( ) . post ( new Runnable ( ) { @ Override public void run ( ) { fitWidth ( ) ; } } ) ; }
public final void run ( ) { endAction . run ( ) ; }
public StorageReference getFirebaseAvatar ( ) { if ( avatar == null ) { return null ; } StorageReference storageRef = FirebaseStorage . getInstance ( ) . getReferenceFromUrl ( FirebaseConfig . STORAGE_PREFIX ) ; return storageRef . child ( avatar ) ; }
public int getIconColor ( ) { return iconColor ; }
public boolean onTouch ( View v , MotionEvent event ) { mGestureDetector . onTouchEvent ( event ) ; return true ; }
public IconBean ( String name , int res ) { mName = name ; mLabel = handleIconName ( name ) ; mShown = true ; mRes = res ; }
public static Drawable createSelectorDrawable ( int color ) { return createSelectorDrawable ( color , 1 ) ; }
public List < Image > readByPoiId ( long poiId ) { RealmResults < Image > images = realm . where ( modelType ) . equalTo ( "poi_id" , poiId ) . findAll ( ) ; images . sort ( "priority" ) ; return images ; }
public void onRangeClick ( ) { if ( mClickableSpan == null || getOnNoteBlockTextClickListener ( ) == null ) { return ; } getOnNoteBlockTextClickListener ( ) . onNoteBlockTextClicked ( mClickableSpan ) ; }
public int getPreferenceResourceForInflation ( ) { return R . xml . prefactions__more_information ; }
public void setArtistSortOrder ( final String sortOrder ) { final SharedPreferences . Editor editor = mPreferences . edit ( ) ; editor . putString ( ARTIST_SORT_ORDER , sortOrder ) ; editor . apply ( ) ; }
public String toString ( ) { return String . format ( "%s - %s . json" , _filename , _dateFormat . format ( _date ) ) ; }
public void onFailure ( @ NonNull Call < RestaurantPhotos > call , @ NonNull Throwable t ) { }
public void testNullRenderFromKey ( ) { when ( mDatafeed . fetchEvent ( EVENT_KEY ) ) . thenReturn ( Observable . just ( null ) ) ; EventListElement element = mRenderer . renderFromKey ( EVENT_KEY , ModelType . EVENT , ) ; assertNull ( element ) ; }
public CheapSoundFile create ( ) { return new CheapAMR ( ) ; }
public void onFailure ( Call < JsonElement > call , Throwable error ) { getBus ( ) . post ( new ApiErrorEvent ( new ApiFailure ( error ) ) ) ; }
public void testGetPlateMatchingPatternOneLetter ( ) { String plateToFind = "KR" ; Place malbork = createPlaceWithPlates ( plateToFind , "KK" , "KM" ) ; LicensePlate plate = malbork . getPlateMatchingPattern ( "K" ) ; assertEquals ( plateToFind , plate . getPattern ( ) ) ; }
public static String getConnectionStatus ( ) { if ( ClipboardConnector . isConnected ( ) ) { return "Connected to " + ClipboardConnector . getServerName ( ) ; } else { return "Not connected . " ; } }
public void setNumber ( int _number ) { this . number = _number ; }
public void onItemRemove ( ViewHolder viewHolder ) { final int position = viewHolder . getAdapterPosition ( ) ; final Event deletedItem = events . get ( position ) ; listener . onDeleteItem ( deletedItem ) ; }
public void top ( ) { mBinding . listEducation . smoothScrollToPosition ( 0 ) ; }
public static LatestRunsState displayRuns ( List < LatestRun > runs ) { return new LatestRunsState ( false , false , runs ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; TimerFragment timerFragment = ( TimerFragment ) getSupportFragmentManager ( ) . findFragmentByTag ( mTimerTag ) ; timerFragment . onBackPressed ( ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { service . setInTraining ( stat . getVerb ( ) , isChecked ) ; }
public void testGetProvisionalVersionForDimension ( ) throws Exception { for ( int i = 1 ; i <= 40 ; i ++ ) { assertEquals ( i , Version . getProvisionalVersionForDimension ( 4*i + 17 ) . getVersionNumber ( ) ) ; } }
public void onDownloadProgress ( @ NonNull DownloadEvent . DownloadProgress event ) { if ( event . track_id . equals ( track . track_id ) ) { downloadProgress . setProgress ( event . progress ) ; downloadProgress . setMax ( event . total ) ; } }
public TreasureItemAdapter ( Context context , List < ResponsePile > treasures ) { this . treasures = treasures ; }
public void setDN ( String dn ) { mDn = dn ; }
public UserLTE getItem ( int position ) { return users . get ( position ) ; }
public static void showSnackbar ( View view , int messageRes , SnackbarSequencer sequencer ) { sequencer . enqueue ( new SnackbarItem ( new Info ( view , new UiStringRes ( messageRes ) , Snackbar . LENGTH_LONG ) , null , null , null ) ) ; }
public String desc ( ) { return Game . getVar ( R . string . SungrassBuff_Info ) ; }
public int getGridHeight ( ) { return Utils . convertDpToPixel ( TvApp . getApplication ( ) , 370 ) ; }
public ReedSolomonEncoder ( GenericGF field ) { this . field = field ; this . cachedGenerators = new ArrayList < GenericGFPoly > ( ) ; cachedGenerators . add ( new GenericGFPoly ( field , new int [ ] { 1 } ) ) ; }
private void setupToolbar ( ) { mToolbar . setTitle ( R . string . title_fragment_medical_attention ) ; setSupportActionBar ( mToolbar ) ; getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; }
public boolean onBackClick ( ) { mFragmentHolder . disableActionButton ( ) ; mListener . onFinishMapSelection ( ) ; return false ; }
public String getProfileUrl ( ) { return StringUtils . notNullStr ( profileUrl ) ; }
public void setRecurrence ( PeriodType periodType , int ordinal ) { periodType . setMultiplier ( ordinal ) ; Recurrence recurrence = new Recurrence ( periodType ) ; setRecurrence ( recurrence ) ; }
public void onServiceFinishes ( ) { MainActivity . this . finish ( ) ; }
public void toggleCamera ( ) { if ( mLinphoneThread == null ) { return ; } mLinphoneThread . toggleCamera ( ) ; }
public int getChildrenCount ( int indicePessoa ) { return pessoaList . get ( indicePessoa ) . getProdutosNomes ( ) . size ( ) ; }
public App ( ) { }
public int getHealth ( ) { return health ; }
private PendingIntent makeTimerPendingIntent ( int flag ) { return PendingIntent . getService ( getActivity ( ) , 0 , makeTimerIntent ( ) , flag ) ; }
private void displayToast ( final String msg ) { runOnUiThread ( ( ) -> { if ( isFinishing ( ) ) { return ; } Toast . makeText ( ConferenceDetailsActivity . this , msg , Toast . LENGTH_SHORT ) . show ( ) ; } ) ; }
public void setAppList ( List < InstalledApp > apps ) { this . installedApps = apps ; this . getFilter ( ) . filter ( this . lastConstraint ) ; }
public PrivacyUsersActivity ( ArrayList < Integer > users , boolean group , boolean always ) { super ( ) ; uidArray = users ; isAlwaysShare = always ; isGroup = group ; }
public void setAlt ( String alt ) { this . alt = alt ; }
public void onCreate ( ) { super . onCreate ( ) ; component = DaggerAppComponent . builder ( ) . appModule ( new AppModule ( this ) ) . build ( ) ; TraceDroid . init ( this ) ; }
public void banUser ( int accountId , int groupId , User user ) { PlaceFactory . getCommunityAddBanPlace ( accountId , groupId , Utils . singletonArrayList ( user ) ) . tryOpenWith ( getActivity ( ) ) ; }
public static void add ( Context context , @ NonNull LocalTime localTime ) { DateTime dateTime = BingWallpaperUtils . checkTime ( localTime ) ; add ( context , dateTime ) ; }
public void onAchieved ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "TargetCallback . onAchieved" ) ; clearPanoramaPoint ( ) ; main_activity . takePicturePressed ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putBoolean ( INSTANCE_STATE_PATHBAR_MODE , mPathBar . getMode ( ) == PathController . Mode . MANUAL_INPUT ) ; }
public String getUri ( ) { return uri ; }
public void onAutofillUserInfo ( String email , String password ) { this . email . setText ( email ) ; this . password . setText ( password ) ; saveUser . setChecked ( true ) ; }
public boolean isLogged ( ) { return mGoogleDrive != null ; }
public Fragment getItem ( int position ) { if ( position == 0 ) { return newInstance ( CommunityTabGroupsFragment . class ) ; } else { return newInstance ( CommunityTabDelegatesFragment . class ) ; } }
public int getHighlights ( ) { return highlights ; }
public void onClick ( View v ) { songsManager . play ( 0 , songsManager . newSongs ( ) ) ; }
public void uncaughtException ( Thread thread , Throwable e ) { handleUncaughtException ( thread , e ) ; }
public List < Section > getSections ( ) { return sectiuni ; }
public void onClick ( View v ) { BookEditGeneralFragment . this . editCategories ( v ) ; }
public CategoryViewModel ( @ NonNull Application application ) { super ( application ) ; db = NotesDatabase . getInstance ( application ) ; }
public void showError ( SchedulePresenter . Error error ) { super . showError ( error ) ; mViewPager . setVisibility ( View . GONE ) ; }
public Uri getUrl ( ) { return mUrl ; }
public void updateDiskCacheKey ( MessageDigest messageDigest ) { }
public UdpForwarder ( InetSocketAddress form , InetSocketAddress to , String ruleName ) { super ( form , to , ruleName ) ; }
public boolean isPeriodUniform ( ) { return isPeriodUniform ( getUniformPeriod ( ) ) ; }
public void run ( ) { mInstance . _init ( ) ; }
private static int [ ] zzUnpackRowMap ( ) { int [ ] result = new int [ 311 ] ; int offset = 0 ; offset = zzUnpackRowMap ( ZZ_ROWMAP_PACKED_0 , offset , result ) ; return result ; }
public synchronized void checkAllLoadersCompleted ( ) { runningLoaderCount -- ; if ( runningLoaderCount <= 0 ) { Ln . v ( "Dismiss dialog" ) ; progressDialog . dismiss ( ) ; if ( onAllLoaderCompletedRunnable != null ) { handler . post ( onAllLoaderCompletedRunnable ) ; } } }
private void onCreateIngredientResult ( @ NonNull List < ErrorType > errors ) { showErrorMessage ( errors ) ; if ( ! errors . isEmpty ( ) ) { requestFocusToField ( errors . get ( 0 ) ) ; } }
public void setButtonStackedGravity ( GravityEnum gravity ) { for ( MDButton mButton : buttons ) { if ( mButton != null ) mButton . setStackedGravity ( gravity ) ; } }
public int getItemViewType ( int position ) { if ( deviceHasGoodCamera && position == 0 ) { return 1 ; } return 0 ; }
private OnClickListener mScrollButtonListener = new OnClickListener ( ) { @ Override public void onClick ( View v ) { stopScrolling ( ) ; setSelection ( binding . messagesView . getCount ( ) - 1 ) ; } } ;
public void onClick ( DialogInterface dialog , int which ) { deleteDB ( ) ; ; }
public java . util . List < com . coinomi . core . protos . Protos . AddressStatus > getAddressStatusList ( ) { return addressStatus_ ; }
public void screenshot ( Context context ) { if ( prefManager . getShowCountDown ( ) ) { screenshotShowCountdown ( context ) ; } else { screenshotHiddenCountdown ( context , false ) ; } }
public void addItemWithId ( Subject item ) throws SQLiteConstraintException { addItemGetId ( item , true ) ; }
public void run ( ) { endPointAsyncTask . execute ( ) ; }
public void execFunction ( ) { app . enqueue ( secondChanceCallable ) ; }
public PickSetup setButtonOrientation ( @ LinearLayoutCompat . OrientationMode int buttonOrientation ) { this . buttonOrientation = buttonOrientation ; return this ; }
public void action ( Item item , Action action , int alreadyPopped ) { if ( mService == null ) { return ; } mService . action ( item , action ) ; }
public void clickSellBook_opensSellingFormUi ( ) throws Exception { onView ( withId ( R . id . sell_books ) ) . perform ( click ( ) ) ; }
public boolean retainAll ( Collection < ? > c ) { return values . retainAll ( c ) ; }
public SurfacePlotView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . prepare ( attrs ) ; }
public AboutBuilder addPrivacyPolicyAction ( View . OnClickListener onClickListener ) { return addAction ( R . mipmap . privacy , R . string . privacy , onClickListener ) ; }
public static ItemFragment addItem ( String todoListUuid ) { ItemFragment fragment = new ItemFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( KEY_TODO_LIST_UUID , todoListUuid ) ; fragment . setArguments ( args ) ; return fragment ; }
public ExIntegerWidget createWidget ( ) { return new ExIntegerWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) ) ; }
public void navigateToEventEdit ( Context context , Event event ) { if ( context != null ) { Intent intentToLaunch = EventEditActivity . getCallingIntent ( context , event ) ; context . startActivity ( intentToLaunch ) ; } }
public static BitmapData decodeStream ( java . io . InputStream inputStream ) { return new BitmapData ( inputStream ) ; }
public PeopleViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = mInflater . inflate ( R . layout . people_list_row , parent , false ) ; return new PeopleViewHolder ( view ) ; }
public void afterTextChanged ( Editable s ) { mKeyChanged = true ; }
public static long timeSpan2Millis ( long timeSpan , @ TimeConstants . Unit int unit ) { return timeSpan * unit ; }
public void loadRun ( ) { if ( mState . getData ( ) != null ) { return ; } new LoadRunTask ( mState ) . execute ( mGameId , mRunId ) ; }
public void add ( ProfileLayer layer ) { if ( layers . contains ( layer ) ) { return ; } layers . add ( layer ) ; EventBus . getDefault ( ) . post ( new ProfileLayerEvent . ProfileLayerAdded ( layer ) ) ; }
public DatabaseManager ( Context context ) { super ( context , DATABASE_NAME , null , DATABASE_VERSION ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return initializeForView ( new Play ( ) ) ; }
public void goToFrame ( int frameNumber ) { this . play = false ; currentFrame = frameNumber ; if ( currentFrame > frames ) currentFrame = 0 ; view . invalidate ( ) ; }
public void onShowPress ( @ NonNull MotionEvent e ) { }
public LegendView ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; }
public void setAccountId ( Long accountId ) { this . accountId = accountId ; }
private void whenExecuting ( ) { uut . execute ( mTestApiCallback ) ; }
private String getKey ( int boardSize , int numColors ) { return String . format ( "highscore_%1$d_%1$d" , boardSize , numColors ) ; }
private void changeMoodText ( int mood , TextView moodTV ) { if ( moodTV == null ) moodTV = ( TextView ) findViewById ( R . id . mood ) ; moodTV . setText ( AnimusMiscMethods . getMood ( mood , moodTV ) ) ; }
public void slideToDefaultPosition ( RecyclerView . ViewHolder holder , boolean horizontal , boolean shouldAnimate , long duration ) { cancelDeferredProcess ( holder ) ; slideToSpecifiedPositionInternal ( holder , 0 , horizontal , shouldAnimate , mSlideToDefaultPositionAnimationInterpolator , duration , null ) ; }
public void onErrorResponse ( VolleyError volleyError ) { AppLog . e ( AppLog . T . SHARING , volleyError ) ; EventBus . getDefault ( ) . post ( new ActionCompleted ( false , ConnectAction . CONNECT ) ) ; }
public void onSuccess ( Object data ) { BluetoothGattCharacteristic characteristic = ( BluetoothGattCharacteristic ) data ; Log . d ( TAG , "requestRandomAuthNumber success : " + Arrays . toString ( characteristic . getValue ( ) ) ) ; }
public int getNumDays ( ) { return 0 ; }
public void read ( DataInputStream pStream , int pVersion ) throws IOException { address = readString ( pStream ) ; amount = pStream . readLong ( ) ; comment = readString ( pStream ) ; }
private void refreshPosts ( ) { if ( hasPostAdapter ( ) ) { getPostAdapter ( ) . refresh ( ) ; } }
public Loader < ArtistData > onCreateLoader ( int id , Bundle args ) { return new AsyncArtistDataLoader ( this , args . getInt ( EXTRA_ARTIST_ID ) ) ; }
public void attach ( StartView view ) { view . setFullscreenVisibility ( ) ; if ( ! isFetched ( ) ) fetch ( new WeakReference <> ( view ) ) ; }
public void available ( ) throws IOException { int amount = 12 ; ss . moveTo ( text . length - amount ) ; assertEquals ( amount , ss . available ( ) ) ; }
public DinnerExpandableListAdapter getAdapter ( ) { return this . dinnerAdapter ; }
public Integer getAppid ( ) { return appid ; }
private void startTimerFinish ( ) { handler . removeCallbacks ( activityFinishRunnable ) ; if ( ! nullError ) { handler . postDelayed ( activityFinishRunnable , notificationSpec . getTimeoutRelock ( ) ) ; } }
private boolean isEmptyData ( ) { return mRecyclerView . getAdapter ( ) . getItemCount ( ) == 0 ; }
public static void trackAnalyticsAccountCreated ( String username , String email , Map < String , Object > properties ) { AnalyticsUtils . refreshMetadataNewUser ( username , email ) ; AnalyticsTracker . track ( Stat . CREATED_ACCOUNT , properties ) ; }
public void onAnimationEnd ( Animator animation ) { switchView . setImageResource ( R . drawable . arrow_down ) ; mShow = false ; }
private void scheduleExchangeRateUpdate ( ) { mDelayHandler . removeCallbacks ( mRateUpdateRunnable ) ; new FiatRateRequestTask ( getApplicationContext ( ) , mBitcoin ) . execute ( ) ; mDelayHandler . postDelayed ( mRateUpdateRunnable , 60000 ) ; }
private void sendJinglePacket ( JinglePacket packet , OnIqPacketReceived callback ) { mXmppConnectionService . sendIqPacket ( account , packet , callback ) ; }
private void setDefaultPrices ( ) { pgePrices . clear ( ) ; }
public synchronized ArrayList < String > getSubscriptionList ( ) { return new ArrayList < String > ( subscriptions . toHashset ( ) ) ; }
public int getTitleStringId ( ) { return R . string . account_setting ; }
public Events getEventsTable ( ) { return mEventsTable ; }
public BaseListBottomSheet getBottomSheet ( ) { return bottomSheet ; }
public void onDetach ( ) { mCallback = null ; super . onDetach ( ) ; }
public BigDecimal getBase ( ) { return inKJ ; }
public ArrayList < Vector3 > getPoints ( int res ) { ArrayList < Vector3 > points = new ArrayList < Vector3 > ( ) ; points . add ( point ) ; return points ; }
public void onServiceDisconnected ( ComponentName componentName ) { mBound = false ; }
private static String getAutoBoulder ( JsonObject data ) { return Integer . toString ( getIntDefaultValue ( data , "autoBouldersHigh" ) + getIntDefaultValue ( data , "autoBouldersLow" ) ) ; }
public void setDisplayPreferenceValue ( String preferenceKey , String s ) { sInternalUserDBHelper . setDisplayPreferenceValue ( preferenceKey , s , bookId ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; switch ( id ) { case R . id . save_points : this . saveAllPoints ( ) ; return true ; default : return super . onOptionsItemSelected ( item ) ; } }
public void setNoecIndex ( String noec_index ) { this . _noec_index = noec_index ; }
public void showsOnlyDirectoriesIfActionIsPickDirectory ( ) { android . launches ( ) . pickDirectoryWithNoSchemeAndNoType ( ) ; user . sees ( ) . fileInList ( SDCARD_MARKER_DIR_NAME ) ; user . cannotSee ( ) . fileInList ( textFile . getName ( ) ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_COCKTAIL_GLASS , null , null , null , null ) ; }
public int getTimeHandle ( ) { return mTimeLoc ; }
public void onSwiped ( @ NonNull RecyclerView . ViewHolder viewHolder , int direction ) { int position = viewHolder . getAdapterPosition ( ) ; MessageWithImage message = adapter . getItems ( ) . get ( position ) ; scheduleDeletion ( position , message . message ) ; }
public boolean canBeUsedByAPI ( API api ) { return canBeUsedByAPI ( api . id ( ) ) ; }
public void onDragCancel ( ) { if ( ! stickersTabOpen ) { return ; } stickersDragging = false ; setStickersExpanded ( wasExpanded , true ) ; }
public void clearScreenView ( ) { list = null ; adapter = null ; }
public ViewHolder ( View v ) { super ( v ) ; ButterKnife . inject ( this , v ) ; }
public void setFocus ( ScheduRankerConstants . FOCUS_TYPE _focus ) { m_focus = _focus ; }
public boolean onPreferenceClick ( final Preference p ) { if ( p . getKey ( ) . equals ( "clear_pinned_apps" ) ) { Intent clearIntent = U . getThemedIntent ( getActivity ( ) , ClearDataActivity . class ) ; startActivity ( clearIntent ) ; } return true ; }
public int getOpacity ( ) { return opacity ; }
public boolean onPreferenceClick ( Preference preference ) { int numberAdded = PersonalDictionaryUtils . importAllFavorites ( getActivity ( ) . getContentResolver ( ) ) ; showSnackBar ( String . format ( getString ( R . string . imported_into_user_dict ) , numberAdded ) ) ; return true ; }
public long getFileSize ( ) { return file == null ? 0 : file . getExpectedSize ( ) ; }
public void setEvents ( List < Event > events ) { Collections . sort ( events , currentComparator ) ; this . events = events ; }
public void doClose ( ) { website . setVisibility ( View . GONE ) ; website . loadUrl ( "about : blank" ) ; videoView . stopPlayback ( ) ; if ( gif != null ) gif . cancel ( true ) ; }
public void addLesson ( Lesson item ) { item . lessonId = mDataDb . addItemGetId ( item ) ; requery ( ) ; int recyclerViewPosition = getRecyclerViewPosition ( item ) ; notifyItemInserted ( recyclerViewPosition ) ; notifyChangedLessonRange ( recyclerViewPosition ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . main ) ; setActivityTitle ( ) ; }
public void setObsGroup ( String obsGroup ) { this . obsGroup = obsGroup ; }
public String getItem ( int position ) { return videoList . get ( position ) ; }
public void onErrorResponse ( VolleyError error ) { Log . d ( TAG , error . toString ( ) ) ; }
public void onCommentCreated ( ) { hideProgress ( ) ; }
public final void clearCachedOutlineBitmap ( ) { _outlinePaint . setAlpha ( 0 ) ; _cachedOutlineBitmap = ( Bitmap ) null ; invalidate ( ) ; }
public void user_ShouldBeAbleToFillTheForm ( ) { rule . mainMenu ( ) . copyForm ( "metadata2 . xml" ) . clickFillBlankForm ( ) . clickOnEmptyForm ( "metadata2" ) . clickSaveAndExit ( ) . checkIsToastWithMessageDisplayed ( R . string . data_saved_ok ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , MessagesController . notificationsSettingsUpdated ) ; }
public void onSaveGroupFilter ( List < String > groupFilter ) { getPreferences ( ) . setGroupFilter ( groupFilter ) ; }
public CartView ( Context context , CartViewObserver observer ) { super ( R . layout . screen_main , observer , new ViewContainer ( ) ) ; this . adapter = new ProductInCartAdapter ( context ) ; }
private void sendToHomescreen ( ) { Intent intent = new Intent ( this , MainActivity . class ) ; startActivity ( intent ) ; }
public void size ( float width , float height ) { scale . set ( width , height ) ; }
private void initViews ( ) { if ( mAdapter == null ) { mAdapter = new NodesCloudAdapter ( mListener ) ; } mNodesCloudListView . setAdapter ( mAdapter ) ; }
public LibraryViewPagerAdapter ( FragmentManager fm ) { super ( fm ) ; }
public void onStartNotRegistered ( ) throws Exception { PreferenceHelper . getInstance ( ) . setAccountUsername ( "" ) ; mPresenter . start ( ) ; verify ( mView ) . showLogin ( ) ; }
public void setCurrentHour ( Integer currentHour ) { this . mCurrentHour = currentHour . intValue ( ) ; updateHourDisplay ( ) ; }
public void onClick ( View view ) { LocalBroadcastManager lbm = LocalBroadcastManager . getInstance ( getContext ( ) ) ; lbm . sendBroadcast ( new Intent ( ActivityView . ACTION_PURCHASE ) ) ; }
public void setDistanceMiles ( double distanceMiles ) { distance . setDistance ( Distance . Unit . MILE , distanceMiles ) ; updatePace ( ) ; }
public void bind ( RedditPostView boundView ) { mBoundView = boundView ; mChangeDataManager . addListener ( src , this ) ; }
public void save_status_deprecated_version ( Boolean versionIsDeprecated ) { editor . putBoolean ( SaveManager . deprecatedVersion , versionIsDeprecated ) ; editor . apply ( ) ; }
private Notification makeStartNotification ( ) { return makeNotification ( getResources ( ) . getString ( R . string . conversion_in_progress ) , true ) ; }
public void setUploaderListener ( InstanceUploaderListener sl ) { synchronized ( this ) { mStateListener = sl ; } }
public void equippedCursed ( ) { GLog . n ( Game . getVar ( R . string . Armor_EquipCursed ) , name ( ) ) ; }
public Builder withIcon ( int iconId ) { ImageView iconView = ( ImageView ) v . findViewById ( R . id . icon ) ; iconView . setImageResource ( iconId ) ; return this ; }
public String fetchAsString ( String urlAsString , int timeout ) throws IOException { return fetchAsString ( urlAsString , timeout , true ) ; }
public void onFailure ( Call < Results < Module >> call , Throwable t ) { registeringPatient = false ; mPatientInfoView . setProgressBarVisibility ( false ) ; ToastUtil . error ( t . getMessage ( ) ) ; }
public void setPresenter ( T presenter ) { mPresenter = presenter ; }
public void moviesCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( animation ) ; openChat ( "movies" ) ; }
public boolean onAmenitySingleTapUp ( long amenityId ) { onFeatureDetails ( amenityId ) ; return true ; }
public int getItemCount ( ) { if ( newMovies == null ) { return 1 ; } else { return newMovies . size ( ) ; } }
private void showInfo ( @ NonNull String name ) { activityCallback . onWalletDetails ( name , isTestnet ( ) ) ; }
public void onLoadFailed ( Exception e , Drawable errorDrawable ) { super . onLoadFailed ( e , errorDrawable ) ; update ( null , Color . TRANSPARENT ) ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . mTextView . setText ( mDataset [ position ] ) ; }
public boolean mamLegacy ( ) { return hasFeature ( Xmlns . MAM_LEGACY ) && ! hasFeature ( Xmlns . MAM ) ; }
public MiniDrawer withOnMiniDrawerItemLongClickListener ( FastAdapter . OnLongClickListener < IDrawerItem > onMiniDrawerItemLongClickListener ) { this . mOnMiniDrawerItemLongClickListener = onMiniDrawerItemLongClickListener ; return this ; }
public void dialogIsNotCancellable ( ) { FragmentScenario < FormLoadingDialogFragment > fragmentScenario = DialogFragmentTest . launchDialogFragment ( FormLoadingDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( false ) ) ; } ) ; }
public DistrictTeam inflate ( Cursor cursor ) { return ModelInflater . inflateDistrictTeam ( cursor ) ; }
public LikertWidget createWidget ( ) { return new LikertWidget ( activity , new QuestionDetails ( formEntryPrompt , "formAnalyticsID" ) ) ; }
public static synchronized NoobJSONClientSingleton getInstance ( Context cx ) { if ( mInstance == null ) { mInstance = new NoobJSONClientSingleton ( cx ) ; } return mInstance ; }
public void onFailure ( Call call , IOException e ) { importFailure . postValue ( new Exception ( "Failure fetching config from remote URL" , e ) ) ; }
public void updateDataLocally ( Context c ) { }
public int execute ( ) throws LuaException { String foo = this . getParam ( 2 ) . getString ( ) ; Window . this . parent . dispatchLuaText ( foo ) ; return 0 ; }
public void onClick ( View view ) { Intent mainIntent = new Intent ( Intent . ACTION_MAIN , null ) ; mainIntent . addCategory ( Intent . CATEGORY_LAUNCHER ) ; AppList . getSomeActivities ( getApplicationContext ( ) , mainIntent , 0 , 4 ) ; }
public void onClick ( View view ) { actionListener . onClick ( view , DetailActionListener . DETAIL_GP , textName . getText ( ) . toString ( ) ) ; }
public UserProfile getProfile ( ProfilesManager manager ) { return getProfile ( manager . getConnectivityManager ( ) , manager . getWifiManager ( ) ) ; }
public void shouldNotCrashWhenViewWithWrongAttributesIsDisplayed ( ) { startActivity ( ) ; onView ( withText ( R . string . no_crash_promise ) ) . check ( matches ( isDisplayed ( ) ) ) ; }
private void unregisterSWANSensor ( ) { ExpressionManager . unregisterExpression ( this , String . valueOf ( REQUEST_CODE ) ) ; }
public List < String > getLinkedEquipment ( int workoutId ) { if ( DEBUG ) Log . d ( TAG , "getLinkedEquipment , wokroutId = " + workoutId ) ; return getLinkedEquipment ( new ActiveDevicesDbHelper ( mContext ) . getDatabaseIdsOfActiveDevices ( workoutId ) ) ; }
public void read ( ) { readField ( "op_count" ) ; op = new Operand [ op_count ] ; if ( op_count != 0 ) readField ( "op" ) ; }
public boolean accept ( File file ) { String lowerCaseName = file . getName ( ) . toLowerCase ( ) ; return lowerCaseName . endsWith ( " . csv" ) && ! lowerCaseName . equalsIgnoreCase ( ITEMSETS_CSV ) ; }
public void setAnnotationReady ( ) { Session . setAnnotationMarked ( true ) ; enableDisableMenuItems ( ) ; }
public void onClick ( View v ) { new GetOptionsListTask ( 2 ) ; }
public ServerAddress getServerAddress ( ) { return getServerAddress ( KEY_SERVER_ADDRESS , defaultHttpPort ) ; }
public CubesException ( Throwable arg0 ) { super ( arg0 ) ; c = Thread . currentThread ( ) . getStackTrace ( ) [ 2 ] . getClassName ( ) ; }
public static TLRPC . InputUser getInputUser ( int user_id ) { TLRPC . User user = MessagesController . getInstance ( ) . getUser ( user_id ) ; return getInputUser ( user ) ; }
public void onStart ( ) { super . onStart ( ) ; if ( pagerAdapter != null ) { pagerAdapter . notifyDataSetChanged ( ) ; } }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `identity` ADD COLUMN `use_ip` INTEGER NOT NULL DEFAULT 0" ) ; }
public String getPageTitle ( int position ) { return fragmentsTitles . get ( position ) ; }
private void updateUI ( ) { setTempChart ( ) ; setDpChart ( ) ; setEcChart ( ) ; setVwcChart ( ) ; }
public static void setControlAction ( GAMESTATUS newGameState ) { getController ( ) . gamestate = newGameState ; Log . v ( TAG , "Setting GameState to : " + newGameState . toString ( ) ) ; }
public Builder leftCircleTextSizeInPx ( int leftCircleTextSizeInPx ) { style . leftCircleTextSizeInPx = leftCircleTextSizeInPx ; return this ; }
private void initTtsLocalePrefs ( ) { binding . localePrefs . setOnClickListener ( mTtsLocaleClick ) ; binding . localePrefs . setDependentView ( binding . ttsPrefs ) ; }
public boolean retainAll ( Collection < ? > c ) { return filters . retainAll ( c ) ; }
public void setTitleMask ( String titleMask ) { this . titleMask = titleMask ; }
public void removeAll ( ) { int size = users . size ( ) ; if ( size > 0 ) { users = new ArrayList <> ( ) ; this . notifyItemRangeInserted ( 0 , size - 1 ) ; } }
public void onDestroyView ( ) { ValueKeeper vk = ValueKeeper . getInstance ( ) ; vk . setProfilList ( profilList ) ; super . onDestroyView ( ) ; }
public void run ( ) { getFileImpl ( previousFile , result ) ; }
private void hideMapIcons ( ) { ViewAnimation . rotateFadeOut ( editFeaturesButton , 200 ) ; ViewAnimation . rotateFadeOut ( settingsIcon , 200 ) ; layerFab . hide ( ) ; }
public void onItemRangeInserted ( int positionStart , int itemCount ) { checkIfEmpty ( ) ; }
private void topIndex ( int value ) { if ( value > - 1 ) findSubIndexForColor ( value , colorsTop [ value ] ) ; getArguments ( ) . putInt ( "top_index" , value ) ; }
public UpdateValuesFromDeck ( boolean reset ) { this . reset = reset ; }
public boolean deleteEvent ( long index ) { DBDataObject . enforceBackedObject ( index ) ; int deleted = adapter . getDatabase ( ) . delete ( TABLE_NAME , getIndexClause ( index ) , null ) ; return deleted > 0 ; }
public void add ( Alarm alarm ) { mDataSource . add ( alarm ) ; dataSetChanged ( ) ; }
public PhotoSizes setO ( String o ) { this . o = o ; return this ; }
private int getEnumInt ( String key , int def ) { return Integer . parseInt ( getString ( key , String . valueOf ( def ) ) ) ; }
private String getIconURL ( ) { return queryJSON ( "icon" , "" ) ; }
public void closeImageViewer ( ) { Platform . runLater ( ( ) -> { flowPane . getChildren ( ) . clear ( ) ; } ) ; }
public Object getItem ( int position ) { return dataSet . get ( position ) ; }
public void onSaveFormIndexError ( String errorMessage ) { if ( errorMessage != null && errorMessage . trim ( ) . length ( ) > 0 ) { showLongToast ( getString ( R . string . save_point_error , errorMessage ) ) ; } }
private static HttpLoggingInterceptor getLoggingInterceptor ( ) { HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor ( ) . setLevel ( HttpLoggingInterceptor . Level . BASIC ) ; httpLoggingInterceptor . redactHeader ( "Authorization" ) ; httpLoggingInterceptor . redactHeader ( "Cookie" ) ; return httpLoggingInterceptor ; }
public RemoteLogger disableConsoleLogging ( ) { mLogToConsole = false ; return this ; }
public void onLoaderReset ( Loader < Cursor > loader ) { if ( mAdapter != null ) { mAdapter . changeCursor ( null ) ; } }
public com . coinomi . core . protos . Protos . PeerAddress getBroadcastBy ( int index ) { if ( broadcastByBuilder_ == null ) { return broadcastBy_ . get ( index ) ; } else { return broadcastByBuilder_ . getMessage ( index ) ; } }
public AnimatablePointValue getPosition ( ) { return position ; }
public Money multiply ( BigDecimal multiplier ) { return new Money ( mAmount . multiply ( multiplier ) , mCurrency ) ; }
public int compare ( TorrentListItem state1 , TorrentListItem state2 ) { return TorrentSorting . SortingColumns . fromValue ( sorting . getColumnName ( ) ) . compare ( state1 , state2 , sorting . getDirection ( ) ) ; }
private void _show_tutorial ( ) { seenTutorial = true ; _save_config ( ) ; Intent intent = new Intent ( this , TutorialActivity . class ) ; startActivity ( intent ) ; }
private static boolean isConnectionLostException ( IOException ioException ) { return ioException instanceof SocketTimeoutException || ioException instanceof EOFException || ioException instanceof ConnectException || ioException instanceof UnknownHostException ; }
public void run ( ) { if ( selectChildRunnable != null && currentChildView != null ) { currentChildView . setPressed ( true ) ; selectChildRunnable = null ; } }
public void afterTextChanged ( Editable target ) { afterTextViewChanged ( ( TextView ) target , SECURITY_CODE ) ; }
public void onDtmfReceived ( final Core lc , final Call call , final int dtmf ) { Lg . w ( "onDtmfReceived number = " , new CallLogger ( call ) , " dtmf = " , dtmf ) ; }
public void addClusters ( List < LocationClusterItem > clusterItems ) { mapWrapper . addClusters ( clusterItems ) ; }
public static String getVideoUrl ( String videoId ) { return getBaseURL ( ) + "/iframe/training/" + videoId ; }
public void onEntryChange ( DatabaseEntry entry ) { _listener . onEntryChange ( entry ) ; }
public boolean shouldEditSavedFormButtonBeVisible ( ) { return adminSettings . getBoolean ( AdminKeys . KEY_EDIT_SAVED ) ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable String label , @ Nullable View . OnClickListener onClickListener ) { links . add ( new Item ( icon , label , onClickListener ) ) ; return this ; }
public boolean isViewFromObject ( View view , Object obj ) { return view == obj ; }
public static StartMenuHelper getInstance ( ) { if ( theInstance == null ) theInstance = new StartMenuHelper ( ) ; return theInstance ; }
public static void stopService ( Context context , Class clazz ) { context . startService ( new Intent ( context , clazz ) ) ; }
private void startScanning ( ) { mBarcodeView . decodeContinuous ( callback ) ; }
public void onFailure ( Call < AuthSignupResponse > call , Throwable t ) { Log . d ( applicationContext . getString ( R . string . app_name ) , "Error : " + t . getMessage ( ) ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . artist_child_tab , container , false ) ; }
public static void assignAvatar ( ImageView view , String userName , int userId , String url ) { assignAvatarInternal ( new ImageViewDelegate ( view ) , userName , userId , url ) ; }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "'PGE_G12_BILL'" ; db . execSQL ( sql ) ; }
public void showSaveButtonDialog ( ) { DialogFragment saveFragment = new SaveButtonDialogFragment ( ) ; saveFragment . show ( getFragmentManager ( ) , "save" ) ; }
public Float get ( PlayPauseDrawable d ) { return d . getProgress ( ) ; }
public void showEmptyStateInPlacesSection ( ) { if ( searchPlacesFragment . isViewCreated ( ) ) { getNoResultsBitmap ( ) . subscribe ( searchPlacesFragment : : showNoResultsImage ) ; searchPlacesFragment . setData ( null ) ; searchPlacesFragment . hideList ( ) ; } }
public void run ( LottieComposition composition ) { playAnimation ( resetProgress ) ; }
public Object onRetainCustomNonConfigurationInstance ( ) { return instanceServerUploader ; }
public static boolean contains ( Object [ ] items , Object item ) { for ( Object arrayItem : items ) { if ( Util . areEqual ( arrayItem , item ) ) { return true ; } } return false ; }
public int noteCount ( ) { return ( int ) mDb . queryScalar ( "SELECT count ( ) FROM notes" ) ; }
public void setIndex ( final int index ) { this . index = index ; if ( getIndex ( ) >= this . desc . length ) setIndex ( 0 ) ; }
public CollisionThread ( Level level ) { super ( "CollisionThread" , level ) ; setPriority ( Thread . NORM_PRIORITY ) ; timeToWait = 30L ; }
private void showWaitingView ( ) { pagerLayout . setVisibility ( View . VISIBLE ) ; resultLayout . setVisibility ( View . GONE ) ; showSkipMenu = false ; invalidateOptionsMenu ( ) ; }
public ActivityBuilder setRequestedSize ( int reqWidth , int reqHeight , CropImageView . RequestSizeOptions options ) { mOptions . outputRequestWidth = reqWidth ; mOptions . outputRequestHeight = reqHeight ; mOptions . outputRequestSizeOptions = options ; return this ; }
public void editNote ( String uuid , String title , int position ) { RenameNoteInteractor interactor = new RenameNoteInteractorImpl ( mExecutor , mMainThread , this , mPreviewRepository , uuid , title , position ) ; interactor . execute ( ) ; }
public CardListAdapter ( Context context , List < CreditCard > cards ) { super ( context , 0 , cards ) ; userPreferences = UserPreferences . getInstance ( context ) ; }
public Reminder setRepeatLimit ( long repeatLimit ) { this . repeatLimit = repeatLimit ; return this ; }
public void onResume ( ) { super . onResume ( ) ; updateView ( ) ; if ( mode == Mode . TRANSLATION ) { rightTranslation . refresh ( ) ; leftTranslation . refresh ( ) ; } }
private static PendingIntent getReminderReceiverIntent ( Context context ) { return PendingIntent . getBroadcast ( context , Constants . REGULAR_REMINDER_REQUEST_CODE , getAlarmIntent ( context ) , 0 ) ; }
public static boolean canSwipeUp ( int reactionType ) { return ( extractUpReaction ( reactionType ) == REACTION_CAN_SWIPE ) ; }
public void openFileChooser ( ValueCallback < Uri > uploadMsg , String acceptType ) { mActivity . openFileChooser ( uploadMsg ) ; }
public void setSubContent ( ArrayList < InfoItem > subContent ) { this . subContent = subContent ; }
public void clearFilters ( ) { scheduleFilter . clearActiveFilters ( ) ; view . setShowActiveFilterIndicator ( false ) ; setRangerState ( ) ; }
public void convertSendToUnlockButton ( ) { sendButton . setText ( R . string . activity_feedback_send_unlnock ) ; sendButton . setOnClickListener ( this : : onUnlnock ) ; }
public HTTP_Connection ( String nachricht , boolean delegate , String url , Context mContext , int mMaxRetries ) { this . url = nachricht ; resultatweitergeben = delegate ; orurl = url ; this . mMaxRetries = mMaxRetries ; }
public static boolean isHighlightEncryptedNodes ( ) { return getBoolean ( R . string . pref_key_is_highlight_crypted_nodes , false ) ; }
public void onAnimationEnd ( Animator animation ) { switchView . setImageResource ( R . drawable . arrow_up ) ; mShow = true ; }
public int getItemViewType ( int position ) { return position == 0 ? TYPE_HEADER : TYPE_CONTENT ; }
public long getSourceBlogId ( ) { return sourceBlogId ; }
public Thread newThread ( Runnable r ) { Thread t = new Thread ( r ) ; t . setName ( "Executor - " + threads ++ ) ; t . setDaemon ( true ) ; return t ; }
public void dialogIsNotCancellable ( ) { FragmentScenario < SaveFormProgressDialogFragment > fragmentScenario = DialogFragmentTest . launchDialogFragment ( SaveFormProgressDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( false ) ) ; } ) ; }
public boolean isAllGroupsExpanded ( ) { return mAdapter . isAllGroupsExpanded ( ) ; }
public void switchedTab ( Tab tab ) { loadWindowTabContentTable . clearChildren ( ) ; loadWindowTabContentTable . row ( ) . expandX ( ) . fillX ( ) ; loadWindowTabContentTable . add ( tab . getContentTable ( ) ) ; }
public String getName ( ) { return fullJid == null ? null : fullJid . getResourcepart ( ) ; }
public void setVisibleXRange ( float minXRange , float maxXRange ) { float maxScale = mXAxis . mAxisRange / minXRange ; float minScale = mXAxis . mAxisRange / maxXRange ; mViewPortHandler . setMinMaxScaleX ( minScale , maxScale ) ; }
public static boolean enableIPv6 ( ) { return gPrefs . getBoolean ( ENABLE_IPV6 , false ) ; }
public ViewParent invalidateChildInParent ( int [ ] location , @ NonNull Rect dirty ) { applyMatrix ( dirty , mMatrix ) ; return super . invalidateChildInParent ( location , dirty ) ; }
public RtlViewPager ( Context context ) { super ( context ) ; }
public void show ( ) { addAction ( showAction . get ( ) ) ; DrawContext . scene . add ( this ) ; if ( shown != null ) shown . listen ( ) ; }
public String toString ( ) { return String . format ( Locale . US , " [ ReadableCacheFile : id %d ] " , id ) ; }
public String getVisualName ( ) { return getClassName ( ) ; }
public T withSelectedColorRes ( int selectedColorRes ) { this . selectedColor = ColorHolder . fromColorRes ( selectedColorRes ) ; return ( T ) this ; }
public void addRepeat_stepsToNextScreenEvent ( ) throws Exception { viewModel . addRepeat ( true ) ; verify ( formController ) . stepToNextScreenEvent ( ) ; }
public void getMaterialDialogThemeDARKTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . DARK_INDEX ) ; assertEquals ( Theme . DARK , apptheme . getMaterialDialogTheme ( ) ) ; }
public void update ( ) { elapsed += Game . elapsed ; if ( elapsed >= interval ) { updateValues ( 1 ) ; onComplete ( ) ; kill ( ) ; } else { updateValues ( elapsed / interval ) ; } }
public void stop ( ) { playAgainOnFocus = false ; playAgainOnHeadset = false ; if ( player != null ) { player . stop ( ) ; } }
public LiveData < Resource < List < Movie >>> loadMovies ( ) { return favoriteRepository . getAll ( ) ; }
public void onLongEntryClick ( VaultEntry entry ) { if ( ! _selectedEntries . isEmpty ( ) ) { return ; } _selectedEntries . add ( entry ) ; _entryListView . setActionModeState ( true , entry ) ; _actionMode = this . startSupportActionMode ( _actionModeCallbacks ) ; }
public void draw ( Canvas canvas ) { setUp ( canvas ) ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; mView = mock ( LoginView . class ) ; mPresenter = new LoginPresenter ( mView ) ; verify ( mView ) . setPresenter ( mPresenter ) ; }
private void onDrawFocusBubble ( Canvas canvas , int zoomLevel , Projection projection ) { if ( mItemWithBubble != null ) { projection . toPixels ( mItemWithBubble . getPoint ( ) , mCurScreenCoords ) ; onDrawItem ( canvas , zoomLevel , ( Item ) mItemWithBubble , mCurScreenCoords ) ; } }
public void onBack ( View view ) { this . finish ( ) ; }
public static ArrayList < Song > getLastAddedSongs ( @ NonNull Context context ) { return SongLoader . getSongs ( makeLastAddedCursor ( context ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . getMenuInflater ( ) . inflate ( R . menu . circular_curves_solver , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void onError ( Error error ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Failed to play next song in tracklist : " + error . name ( ) ) ; sendPlayingStatusBroadcast ( false ) ; }
public void onPageFinished ( android . webkit . WebView view , String url ) { super . onPageFinished ( view , url ) ; if ( getActivity ( ) != null ) { getActivity ( ) . supportInvalidateOptionsMenu ( ) ; } }
public void onPaletteColorChanged ( ) { if ( getPanelState ( ) == SlidingUpPanelLayout . PanelState . EXPANDED ) { int playerFragmentColor = playerFragment . getPaletteColor ( ) ; super . setTaskDescriptionColor ( playerFragmentColor ) ; super . setNavigationbarColor ( playerFragmentColor ) ; } }
public void whenPromptDoesNotHaveAnswer_answerTextViewShowsNoTimeSelected ( ) { TimeWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . widgetAnswerText . getText ( ) , widget . getContext ( ) . getString ( R . string . no_time_selected ) ) ; }
public int maxDurability ( int lvl ) { return 7 * ( lvl < 16 ? 16 - lvl : 1 ) ; }
public void onChildRemoved ( DataSnapshot dataSnapshot ) { Log . d ( "Child listener" , "new child was removed from hosted ! " ) ; eAdapterHosted . removeEvent ( dataSnapshot . getKey ( ) ) ; }
public static Map < String , String > getErrorHit ( Throwable throwable ) { return new HitBuilders . ExceptionBuilder ( ) . setDescription ( Log . getStackTraceString ( throwable ) ) . setFatal ( false ) . build ( ) ; }
public void run ( ) throws Exception { storageLogic . updateAsync ( recipeFull , RecipeAction . NAME ) ; }
public void onStart ( ) { super . onStart ( ) ; subscribeAlertDialog ( ) ; subscribeClipboardManager ( ) ; }
public void onActivitySaveInstanceState ( Activity activity , Bundle outState ) { }
public SettingsChangedListener getSettingsListener ( ) { return ( SettingsChangedListener ) this ; }
public boolean canGoForward ( ) { return analyticsChooser . getCheckedRadioButtonId ( ) != - 1 ; }
public void didReceivedNotification ( int id , Object . . . args ) { if ( id == NotificationCenter . emojiDidLoaded ) { if ( emojiView != null ) { emojiView . invalidateViews ( ) ; } } }
public void onClick ( View view ) { AppList . getUninstalled ( getApplicationContext ( ) , AllAppsList , 0 ) ; }
public void onCloseWindow ( WebView window ) { mActivity . onCloseWindow ( mLightningView ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "org . andresoviedo . android_3d_model_engine . test" , appContext . getPackageName ( ) ) ; }
public MainActivity getMainActivity ( ) { return ( MainActivity ) getActivity ( ) ; }
public void update ( Observable observable , Object o ) { if ( LayersModel . SELECTED_LAYER_PROP . equals ( o ) ) { alertDialog . dismiss ( ) ; } }
private void showSnackBar ( @ StringRes int strId ) { Snackbar . make ( mArticlesView , strId , Snackbar . LENGTH_SHORT ) . show ( ) ; }
public InterventionSeed ( Integer quantity , String unit , @ NonNull Integer intervention_id , @ NonNull Integer seed_id ) { this . quantity = quantity ; this . unit = unit ; this . intervention_id = intervention_id ; this . seed_id = seed_id ; }
private RPVMenuItem ( Context context , int titleRes , Action action ) { this . title = context . getString ( titleRes ) ; this . action = action ; }
public Typeface getFont ( ) { return PREF_FONT ; }
public SquareFrameLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public AboutBuilder setNameColor ( int color ) { this . nameColor = ColorUtil . get ( context , color ) ; return this ; }
public String defaultValue ( ) { return "0 ( 5 ) 1 ( 5 ) 2 ( 5 ) 3 ( 3 ) " ; }
public void onAllListClick ( ) { mSelectedList = NO_LIST ; mSelectedContent = ALL_CONTENT ; updateListLayout ( ) ; updateBookmarks ( ) ; mDrawerLayout . closeDrawer ( GravityCompat . START ) ; }
public long getItemId ( int position ) { return MusicPlayerRemote . getIndexedSongAt ( position ) . hashCode ( ) ; }
public void setLineWidth ( float width ) { if ( width < 0 . 2f ) width = 0 . 2f ; if ( width > 10 . 0f ) width = 10 . 0f ; mLineWidth = Utils . convertDpToPixel ( width ) ; }
private void initWakePrefs ( ) { binding . wakeScreenOptionPrefs . setOnClickListener ( mWakeClick ) ; binding . wakeScreenOptionPrefs . setChecked ( mPrefs . isDeviceAwakeEnabled ( ) ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `auto_delete` INTEGER NOT NULL DEFAULT 0" ) ; }
public boolean isBufferText ( ) { return bufferText ; }
public void testOpenCollection ( ) { assertNotNull ( "Collection could not be opened" , CollectionHelper . getInstance ( ) . getCol ( InstrumentationRegistry . getTargetContext ( ) ) ) ; }
public void setDelegate ( MessagesActivitySearchAdapterDelegate delegate ) { this . delegate = delegate ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_bonjour_browser_for_developers , menu ) ; return true ; }
public void onLongClick ( Product product ) { }
public ProfileSettingDrawerItem withEmail ( String email ) { this . email = new StringHolder ( email ) ; return this ; }
public void load ( ) { autostartButtonSingletonPersister . load ( autostartSelector ) ; Assert . assertEquals ( true , getField ( autostartSelector , AUTOSTART_FIELDNAME ) ) ; }
public static boolean isReady ( Context context ) { return StaticUtils . isAccessibilityGranted ( context ) && StaticUtils . isNotificationGranted ( context ) && StaticUtils . canDrawOverlays ( context ) ; }
public void deleteProfileItem ( ProfileItem profileItem ) { String id = profileItem . getLogin ( ) ; database . delete ( DatabaseHelper . TABLE_PROFILE , COLUMN_LOGIN + " = " + "\"" + id + "\"" , null ) ; }
public void draw ( Canvas canvas , RectF rectF , Paint paint ) { this . canvasDrawing . draw ( canvas , rectF , paint ) ; }
public int getCount ( ) { return parkingList . size ( ) ; }
public boolean hasCachedBitmap ( ) { return ( cachedBitmap != null ) ; }
public void showFABMenu ( ) { isFABOpen = true ; mMyGoalsView . showFABMenu ( ) ; }
public final boolean getInEditMode ( ) { return this . _inEditMode ; }
private void updateBalance ( ) { lastBalance = sourceAccount . getSpendableBalance ( ) ; }
public void add ( int index , T element ) { synced . add ( index , mapper . apply ( element ) ) ; main . add ( element ) ; }
public static Address fromSerialized ( @ NonNull String serialized ) { return new Address ( serialized ) ; }
public float getFocusX ( ) { return mFocusX ; }
public List < T > Select ( ) { return this . Select ( 0 ) ; }
public String getIsAttendee ( ) { return isAttendee ; }
public void onSwitch ( View v ) { save ( switch_notifications . isChecked ( ) , switch_3g . isChecked ( ) ) ; }
public void onSdCardNotMounted ( ) { Themes . showThemedToast ( this , getResources ( ) . getString ( R . string . sd_card_not_mounted ) , false ) ; finishWithoutAnimation ( ) ; }
public Observable < List < Foodtruck >> getFoodtrucks ( ) { return networkRepository . getAllFoodtrucks ( ) . doOnNext ( foodtrucks -> viewModelRepository . getViewModel ( ) . setFoodtrucks ( foodtrucks ) ) ; }
public void onDestroy ( ) { IdlingRegistry . getInstance ( ) . unregister ( searchIdlingResource ) ; super . onDestroy ( ) ; }
public void die ( NamedEntityKind cause ) { super . die ( cause ) ; if ( CharUtils . isVisible ( this ) ) { Sample . INSTANCE . play ( Assets . SND_BONES ) ; } }
public void setOnConfirmListener ( @ Nullable OnConfirmListener listener ) { this . onConfirmListener = listener ; }
public SellItemSelector ( Shopkeeper shopkeeper ) { this . shopkeeper = shopkeeper ; }
public int getTimeToComplete ( ) { return timeToComplete ; }
public void onFrameRendered ( @ NonNull MediaCodec codec , long presentationTimeUs , long nanoTime ) { if ( this != tunnelingOnFrameRenderedListener ) { return ; } maybeNotifyRenderedFirstFrame ( ) ; }
public void highlightAyah ( int sura , int ayah , HighlightType type ) { if ( type == HighlightType . AUDIO ) { mLastPlayingSura = sura ; mLastPlayingAyah = ayah ; } highlightAyah ( sura , ayah , true , type ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == android . R . id . home ) { dismissFragment ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public AddTodoListInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , PreviewRepository repository , String title ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . title = title ; }
public void setTripId ( long tripId ) { this . tripId = tripId ; }
public void setup ( ) { MockitoAnnotations . initMocks ( BookmarkModelTest . this ) ; model = new BookmarkModel ( bookmarksAdapter ) ; }
public String getArtistName ( ) throws RemoteException { return mService . get ( ) . getArtistName ( ) ; }
public void onViewRecycled ( VH holder , int viewType ) { if ( isDragging ( ) ) { mDragDropManager . onItemViewRecycled ( holder ) ; mDraggingItemViewHolder = mDragDropManager . getDraggingItemViewHolder ( ) ; } super . onViewRecycled ( holder , viewType ) ; }
public void setData ( @ NonNull List < Movie > movies ) { this . movies = movies ; notifyDataSetChanged ( ) ; }
public void bindToService ( ) { if ( ! mAttemptingToBind ) { mAttemptingToBind = true ; Intent intent = new Intent ( mContext , SuggestionService . class ) ; mContext . bindService ( intent , this , Context . BIND_AUTO_CREATE ) ; } }
public Reminder setReminderType ( String reminderType ) { this . reminderType = reminderType ; return this ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( ! ( context instanceof Callbacks ) ) { throw new IllegalStateException ( "Activity must implement fragment's callbacks . " ) ; } mCallbacks = ( Callbacks ) context ; }
public void onUserStateUpdated ( IUser user ) throws RemoteException { if ( user . getSession ( ) == getSession ( ) && user . getComment ( ) != null ) { loadComment ( user . getComment ( ) ) ; service . unregisterObserver ( this ) ; } }
public void onDeleteClicked ( ) { callback . onDeleteClicked ( position . get ( ) , this ) ; }
private void givenAction ( String action ) { mAction = action ; }
public void enable ( ) { synchronized ( mActivePing ) { for ( PingTask request : mActivePing . values ( ) ) mRequestExecutor . execute ( request ) ; } }
public void onPause ( ) { LogHelper . d ( TAG , "pause . current state = " + mPlayback . getState ( ) ) ; handlePauseRequest ( ) ; }
public void showUploadInfo ( ) { launchAlert ( getResources ( ) . getString ( R . string . images_uploaded ) , getResources ( ) . getString ( R . string . images_uploaded_explanation ) ) ; }
public void selectFile ( @ NonNull String name , boolean selected ) { BencodeFileTree node = curDir . getChild ( name ) ; if ( node == null ) return ; node . select ( selected , true ) ; }
public void onCopyToClipboard ( View view ) { Common . copyToClipboard ( mBcc . getText ( ) . toString ( ) , this ) ; }
public synchronized Packet get ( ) { return queue . poll ( ) ; }
public static void init ( ) { number = "" ; password = "" ; cookie = "" ; loginStatus = true ; }
public Item remove ( int group , int pos , boolean updateUI ) { Item item = children_ . get ( group ) . remove ( pos ) ; if ( updateUI ) { notifyDataSetChanged ( ) ; } return item ; }
public static boolean isEmailClientAvailable ( Context context ) { if ( context == null ) { return false ; } return ! queryEmailApps ( context ) . isEmpty ( ) ; }
public com . google . protobuf . Any getToken ( ) { if ( tokenBuilder_ == null ) { return token_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : token_ ; } else { return tokenBuilder_ . getMessage ( ) ; } }
private long calculateDiff ( Date fecha_local ) { long mDiff ; Date mCurrentTime = new Date ( ) ; long mQuakeTime = fecha_local . getTime ( ) ; long mActualTime = mCurrentTime . getTime ( ) ; mDiff = mActualTime - mQuakeTime ; return mDiff ; }
public void onItemViewRecycled ( ViewHolder holder ) { holder . getView ( ) . unbind ( glideRequests ) ; }
public void updateMainActor ( ) { if ( mMainActor == null ) { return ; } mMainActor . setPercent ( ( mValue - mMin ) / ( float ) ( mMax - mMin ) ) ; mMainActor . setText ( formatValue ( getValue ( ) ) ) ; }
public String desc ( ) { return isKnown ( ) ? Game . getVar ( R . string . RingOfEvasion_Info ) : super . desc ( ) ; }
private void resetDisplay ( ) { subtotalTextView . setText ( getResources ( ) . getString ( R . string . tip_default_output ) ) ; }
private ChangeUIRequest ( IField field , int state ) { this . newField = field ; this . state = state ; }
public void run ( ) throws Exception { storageLogic . updateAsync ( recipe ) ; }
private void openPost ( ) { PlaceFactory . getPostPreviewPlace ( getArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , 7927 , - 72124992 ) . tryOpenWith ( getActivity ( ) ) ; }
public ArrayList < Layer > getLayers ( ) { return allData != null ? allData . layers : null ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return Bool . TLdeserialize ( stream , constructor , exception ) ; }
public PostUploadStarted ( PostModel post ) { this . post = post ; }
public < T > void addToRequestQueue ( Request < T > req , Object tag ) { req . setTag ( tag ) ; getRequestQueue ( ) . add ( req ) ; }
public AnyOfFilter < Record . Type > getTypeFilter ( ) { return typeFilter ; }
public void clearCache ( ) { if ( client . cache ( ) == null ) { return ; } try { client . cache ( ) . delete ( ) ; } catch ( IOException ignored ) { } }
private static void sendUnregister ( Context context , String id ) { Intent intent = new Intent ( ACTION_UNREGISTER ) ; intent . addFlags ( Intent . FLAG_INCLUDE_STOPPED_PACKAGES ) ; intent . putExtra ( "expressionId" , id ) ; context . sendBroadcast ( intent ) ; }
public String toString ( ) { return svg ; }
public void onActivityPaused ( Activity activity ) { }
public String getString ( int resId ) { return this . dialogFragment . getString ( resId ) ; }
public void removeBookmarksPath ( String name , String path ) { SQLiteDatabase sqLiteDatabase = getWritableDatabase ( ) ; sqLiteDatabase . delete ( TABLE_BOOKMARKS , COLUMN_NAME + " = ? AND " + COLUMN_PATH + " = ?" , new String [ ] { name , path } ) ; }
public static void setStatsWidgetsKeys ( String widgetData ) { setString ( PrefKey . STATS_WIDGET_KEYS_BLOGS , widgetData ) ; }
public void setSelectedDate ( int year , int month , int day ) { this . selectedDate . postValue ( DateTimeWidgetUtils . getSelectedDate ( new LocalDateTime ( ) . withDate ( year , month + 1 , day ) , LocalDateTime . now ( ) ) ) ; }
public THEME getSelectedTheme ( ) { return mSelectedTheme ; }
public Builder clearSongs ( ) { songs_ = java . util . Collections . emptyList ( ) ; ; bitField0_ = ( bitField0_ & ~0x00000002 ) ; onChanged ( ) ; return this ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; view . setBackgroundColor ( Color . BLACK ) ; }
public UserCommentListingURL after ( String newAfter ) { return new UserCommentListingURL ( user , order , limit , newAfter ) ; }
public static void stopPostingStats ( ) { statsUpdateHandler . removeCallbacksAndMessages ( statsUpdateRunnable ) ; }
public Integer getPenaltyChargesPaid ( ) { return penaltyChargesPaid ; }
public void saveFromResponse ( HttpUrl httpUrl , List < Cookie > cookies ) { this . cookies = cookies ; }
public boolean onBackPressed ( ) { return mapFragment == null || mapFragment . onBackPressed ( ) ; }
public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof ThemeColor ) ) { return false ; } ThemeColor that = ( ThemeColor ) o ; return colorPrimary == that . colorPrimary ; }
public boolean getIsGroup ( ) { return isGroup ; }
public String convert ( String input ) { return transliterate ( input ) ; }
public void openLocationDetailsActivity ( ) { LocationDetailsActivity . launch ( getActivity ( ) ) ; }
public OrthogonalBase ( ) { this . DEFAULT_SCALE_FACTOR = 0 . 0 ; }
private void animateThumbToCheckedState ( boolean newCheckedState ) { final float targetPosition = newCheckedState ? 1 : 0 ; mPositionAnimator = ObjectAnimatorProxy . ofFloatProxy ( this , "thumbPosition" , targetPosition ) ; mPositionAnimator . setDuration ( THUMB_ANIMATION_DURATION ) ; mPositionAnimator . start ( ) ; }
private void discardPresenceItem ( String jid ) { for ( PresenceItem item : mResponse ) { if ( item . from . equals ( jid ) ) { item . discarded = true ; return ; } } }
public ArrayList < Album > loadInBackground ( ) { return AlbumLoader . getAllAlbums ( getContext ( ) ) ; }
private void pickImage ( ) { Intent intent = new Intent ( ) ; intent . setAction ( Intent . ACTION_GET_CONTENT ) ; startActivityForResult ( Intent . createChooser ( intent , "Select Picture" ) , Constants . PICK_IMAGE_REQUEST ) ; }
public void onRequestSuccess ( HashSet < String > result , long timeCached ) { subredditSubscriptionManager . addListener ( MainMenuFragment . this ) ; onSubscriptionsChanged ( result ) ; }
public QuizRepository ( Context context ) { this . mQuizList = new ArrayList <> ( ) ; this . mContext = context ; }
public void testSafeToAddAuthToken27 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( wpcomAddress6 ) ) ) ; }
public int pushAndTranslate ( float offsetX , float offsetY ) { mTopMatrixPos += 16 ; Matrix . translateM ( mMatrices , mTopMatrixPos , mMatrices , mTopMatrixPos - 16 , offsetX , offsetY , 0 ) ; return mTopMatrixPos - 16 ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . main_manu , menu ) ; return true ; }
private UserProfile ( ) { }
public static String getUserName ( Context context ) { return getSharedPreferences ( context ) . getString ( USER_NAME , "brus5" ) ; }
public ArrayList < TLRPC . ChannelParticipant > getGroupSearch ( ) { return groupSearch ; }
public boolean onCreate ( ) { this . dbHelper = new DatabaseHelper ( getContext ( ) ) ; return true ; }
public void setSerializedHighlights ( PageInfo pageInfo , String serializedHighlights ) { sGlobalUserDBHelper . setSerializedHighlights ( pageInfo , serializedHighlights , bookId ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . appbar_add ) { RecipeCreationDialogFragment . start ( getActivity ( ) . getSupportFragmentManager ( ) ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void addTag ( TetroidTag tag ) { tags . add ( tag ) ; }
public RestClientEmptyMock ( com . android . volley . RequestQueue queue , java . lang . String token ) { super ( queue , token ) ; }
public void setGraphYearXLabel ( String [ ] values ) { barChartYear . getXAxis ( ) . setValueFormatter ( new AxisValueFormatter ( values ) ) ; }
public Object parseObject ( String source , ParsePosition pos ) { return null ; }
public static void mount_rw ( ) { Log . d ( TAG , "Mounting /system RW" ) ; Shell . SU . run ( Arrays . asList ( "mount - o rw , remount /system" ) ) ; }
public static CommandResult execCommand ( List < String > commands , boolean isRoot ) { return execCommand ( commands == null ? null : commands . toArray ( new String [ ] { } ) , isRoot , true ) ; }
public void onActivityStarted ( Activity activity ) { numStarted ++ ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `contact` ADD COLUMN `favorite` INTEGER NOT NULL DEFAULT 0" ) ; }
public Bitmap getBitmap ( ) { return mBitmap ; }
public void onFailure ( @ NonNull Exception e ) { callback . onError ( ) ; }
public EventModifiedEvent ( Event event ) { this . event = event ; }
public boolean winTest ( ) { for ( int i = 0 ; i < 8 ; i ++ ) if ( stacks [ 8 + i ] . getSize ( ) != 13 ) return false ; return true ; }
public void onPageSelected ( int position ) { if ( animation == ANIM_NONE ) { setPosition ( position ) ; currentPageOffset = 0 ; invalidate ( ) ; } }
public LiveData < List < SkillEntity >> loadAll ( ) { return mDataRepository . getDatabase ( ) . skillDao ( ) . loadAll ( ) ; }
public void onChildAdded ( DataSnapshot dataSnapshot , String s ) { GalleryDTO galleryDTO = dataSnapshot . getValue ( GalleryDTO . class ) ; Log . d ( "큭큭 : " , galleryDTO . imageUrl ) ; drawUI ( galleryDTO ) ; }
public void testInitCapacityGreatCapacity ( ) { new FixedRingBuffer ( 11 , 10 ) ; }
public boolean onFailedToRecycleView ( RecyclerView . ViewHolder holder ) { return onFailedToRecycleView ( holder , holder . getItemViewType ( ) ) ; }
public void onClick ( View v ) { showDialogFragment ( new SelectTimeFragment ( ) , "selectTime" ) ; }
private void init ( ) { this . kmlData = new StringBuffer ( "" ) ; }
public static void showSnackbarError ( View view , String message , SnackbarSequencer sequencer ) { sequencer . enqueue ( new SnackbarItem ( new Info ( view , new UiStringText ( message ) , K_SNACKBAR_WAIT_TIME_MS ) , null , null , null ) ) ; }
public GetPodcastTask ( ) { super ( PodplayerCardActivity . this , client_ , - 1 , EPISODE_BUF_SIZE ) ; count_ = 0 ; }
public static DashboardPosition getDashboardPosition ( DataCenter . Status status ) { DcStatusMap result = map . get ( status ) ; return result == null ? DashboardPosition . UNKNOWN : DashboardPosition . fromValue ( result . ordinal ( ) ) ; }
public void onBuildHeaders ( List < Header > target ) { if ( ! isSimplePreferences ( this ) ) { loadHeadersFromResource ( R . xml . pref_headers , target ) ; } }
public int getIdtoPosition ( int position ) { return filteredData . get ( position ) . getId ( ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnFragmentInteractionListener ) { mListener = ( OnFragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement GenreFragmentCallbackListener" ) ; } }
public String onNotArgEnough ( ExecutePack info , int nArgs ) { return TimeManager . replace ( "%t0" ) . toString ( ) ; }
public void onPropertyChanged ( Observable observable , int i ) { Intent toReply = new Intent ( mContext , ReplyAction . class ) ; toReply . putExtra ( "conversationId" , viewModel . conversationId ) ; startActivityForResult ( toReply , REPLY_CODE ) ; }
public void onClick ( View v ) { ColorPickerDialog d = new ColorPickerDialog ( v . getContext ( ) , ColorSwatchPreference . this , colorValue , COLOR_FIELDS . COLOR_MAIN ) ; d . show ( ) ; }
public MessagesDecryptor ( IStores store ) { this . store = store ; }
private void askFeedback ( ) { final BottomSheetDialogFragment myBottomSheet = FeedbackDialogFragment . newInstance ( ) ; myBottomSheet . show ( getSupportFragmentManager ( ) , myBottomSheet . getTag ( ) ) ; }
public boolean propertyDiffers ( AccountProperty property , Object object ) { ObjectUtils . requireNotNull ( property , PROPERTY ) ; Object old = authenticator . getResource ( property ) ; return ! PropertyUtils . propertyObjectEquals ( old , object ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . pref_other ) ; }
public synchronized void restackRefreshCount ( ) { while ( postRefreshCount . get ( ) <= 0 ) { postRefreshCount . addAndGet ( mPostCountLimit ) ; } }
private void dataUpdated ( ) { if ( user == null ) return ; customCategoriesList . clear ( ) ; customCategoriesList . addAll ( DefaultCategories . getCustomCategories ( user ) ) ; customCategoriesAdapter . notifyDataSetChanged ( ) ; }
public VideoThumbnailsView ( Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void run ( ) { performHapticFeedback ( HapticFeedbackConstants . LONG_PRESS ) ; addIconInteractively ( appIcon , at ) ; longPressRunnable = null ; }
private boolean useWakeLock ( ) { return mPreferences . getBoolean ( SyncthingService . PREF_USE_WAKE_LOCK , false ) ; }
public static String calendarToString ( Calendar calendar ) { if ( calendar == null ) { return null ; } SimpleDateFormat formatter = new SimpleDateFormat ( dateFormat , Locale . US ) ; return formatter . format ( calendar . getTime ( ) ) ; }
public void onSortSelected ( final PostCommentListingURL . Sort order ) { commentListingController . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public String desc ( ) { return Game . getVar ( R . string . ElfArmor_Desc ) ; }
public void fireRefreshClick ( ) { if ( loadingState != LoadingState . INITIAL ) { netLoaderHolder . dispose ( ) ; requestInitialData ( ) ; } }
public void setBottomLeftRadius ( int radius ) { radii [ 6 ] = radii [ 7 ] = radius ; invalidate ( ) ; }
public void testTopLeftCellHasCorrectNeighbours ( ) { final StatelessBoardCell tested = board . getCell ( 0 , 0 ) ; assertThat ( tested . getNeighbors ( ) ) . containsExactly ( board . getCell ( 0 , 1 ) , board . getCell ( 1 , 0 ) ) ; }
public void prepareWebViewCookies ( Context context ) { CookieSyncManager . createInstance ( context ) ; }
public void setModel ( Model model ) { this . model = model ; this . model . addWeatherChangeDataListener ( this ) ; this . weatherDataChange ( ) ; }
private void notifySuccessListeners ( T value ) { List < LottieListener < T >> listenersCopy = new ArrayList <> ( successListeners ) ; for ( LottieListener < T > l : listenersCopy ) { l . onResult ( value ) ; } }
public static long rawFetchLongValue ( DatabaseAdapter db , String query , String [ ] selectionArgs ) { return rawFetchLong ( db , query , selectionArgs , 0 ) ; }
public static long getPingAlarmInterval ( Context context , long defaultValue ) { String networkType = SystemUtils . getCurrentNetworkName ( context ) ; return ( networkType != null ) ? getLong ( context , "ping_alarm_interval_" + networkType , defaultValue ) : defaultValue ; }
public void whenFontSizeSpecified_shouldReturnSelectedValue ( ) { TestSettingsProvider . getGeneralSettings ( ) . save ( KEY_FONT_SIZE , "30" ) ; assertThat ( QuestionFontSizeUtils . getQuestionFontSize ( ) , is ( 30 ) ) ; }
public void onResume ( ) { super . onResume ( ) ; LocalBroadcastManager . getInstance ( getContext ( ) ) . registerReceiver ( mFetchBroadcastReceiver , new IntentFilter ( FetchClassService . ACTION_FINISHED_FETCH ) ) ; }
private boolean checkStarred ( String data , int id ) { return data . contains ( String . format ( "|%d|" , id ) ) ; }
public Loader < LoadResult > onCreateLoader ( int id , Bundle args ) { return new DatabaseLoader ( getActivity ( ) ) ; }
public void onDestroy ( ) { MessagingService . setMessagingServiceListener ( "Profile" , null ) ; super . onDestroy ( ) ; }
public static ReadByMarker from ( Jid fullJid , Jid realJid ) { final ReadByMarker marker = new ReadByMarker ( ) ; marker . fullJid = fullJid ; marker . realJid = realJid == null ? null : realJid . toBareJid ( ) ; return marker ; }
public void appStateChange ( final String type ) { Log . d ( TAG , "AppStateChange : " + type ) ; Statusgo . AppStateChange ( type ) ; }
private void reloadMedia ( ) { loadMediaId ( mMedia . getId ( ) ) ; }
public static boolean isDarkTheme ( Context context ) { Theme currentTheme = getCurrentTheme ( context ) ; return currentTheme == DARK ; }
public void onChanged ( PostStatus postStatus ) { updatePostStatus ( postStatus . toString ( ) ) ; }
public AboutBuilder setAppIcon ( Bitmap icon ) { this . appIcon = icon ; return this ; }
public SettingsScheduleExams getSettingsScheduleExams ( ) { return settingsScheduleExams ; }
public void onFileTransferAborted ( ) { JingleConnection . this . sendCancel ( ) ; JingleConnection . this . cancel ( ) ; }
public int getCount ( ) { return mFragmentList . size ( ) ; }
public void setItems ( Item [ ] items ) { setUpdated ( items ) ; mItems . clear ( ) ; mItems . addAll ( items ) ; notifyDataSetChanged ( ) ; }
public int getCount ( ) { return ( mFilterValues != null ? mFilterValues . length : 0 ) ; }
public void cleared ( ) { Toast . makeText ( getApplicationContext ( ) , getString ( R . string . toastRescan ) , Toast . LENGTH_LONG ) . show ( ) ; tp . playlist . startFsScan ( ) ; }
public java . util . List < com . google . protobuf . Any > getEvidenceList ( ) { if ( evidenceBuilder_ == null ) { return java . util . Collections . unmodifiableList ( evidence_ ) ; } else { return evidenceBuilder_ . getMessageList ( ) ; } }
public void saveCards ( ArrayList < Integer > list ) { putIntList ( PREF_KEY_CARDS , list ) ; }
public ColorListAdapter ( ColorPickerDialog dialog ) { mDialog = dialog ; }
public void testIsWPCOMString5 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( wpcomAddress5 ) ) ; }
public boolean removeVisited ( int id ) { SQLiteDatabase db = mDbHelper . getWritableDatabase ( ) ; return db . delete ( Visited_Locations . TABLE_NAME , Visited_Locations . KEY_ID + " = " + id , null ) > 0 ; }
public void onClick ( int position ) { Intent intent = EditActivity . getProjectIntent ( getContext ( ) ) ; EditActivity . setData ( intent , position , resume . projects . get ( position ) ) ; startActivityForResult ( intent , REQUEST_EDIT ) ; }
public static int getColor ( Context context , int color ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ) { return context . getColor ( color ) ; } else { return ContextCompat . getColor ( context , color ) ; } }
public Consist ( Consist c ) { this ( ) ; for ( ConLoco l : c . con . values ( ) ) { this . add ( l ) ; } leadAddr = c . leadAddr ; trailAddr = c . leadAddr ; }
private void showWeatherDataView ( ) { mErrorMessageDisplay . setVisibility ( View . INVISIBLE ) ; mRecyclerView . setVisibility ( View . VISIBLE ) ; }
public int getItemViewType ( int i ) { if ( i == MessagesController . getInstance ( ) . blockedUsers . size ( ) ) { return 1 ; } return 0 ; }
public void setProducts ( List < Product_ > products ) { this . products = products ; }
private void sendNoOpMessage ( int id ) { Message msg = mServiceHandler . obtainMessage ( ) ; msg . arg1 = id ; msg . obj = null ; msg . what = NO_OP ; mServiceHandler . sendMessage ( msg ) ; }
public boolean getIssues ( ) { return issues ; }
public void enableSizeCache ( boolean enable ) { mEnableSizeCache = enable ; mTextCachedSizes . clear ( ) ; adjustTextSize ( getText ( ) . toString ( ) ) ; }
public static < T extends Comparable > int expandUnique ( List < T > A , List < T > B ) { return expandUnique ( A , B , true ) ; }
public void usingReadOnlyOption_doesNotShowButton ( ) { TimeWidget widget = createWidget ( promptWithReadOnlyAndQuestionDef ( questionDef ) ) ; assertEquals ( widget . binding . widgetButton . getVisibility ( ) , View . GONE ) ; }
public void show3HForecast ( List < Weather > forecast , String timeZone ) { mForecastAdapter . set3HForecast ( forecast ) ; mForecastAdapter . notifyItemChanged ( ForecastAdapter . POSITION_FORECAST_3H ) ; }
public static boolean wasInitialised ( ) { return setup != null ; }
public Number getDomainCursorVal ( ) { return getXVal ( getDomainCursorPosition ( ) ) ; }
private void animateAddToFavorites ( ) { bounceAnimation ( R . drawable . ic_heart_red ) ; }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingFetchNewBip ( 1 ) ; getDialog ( ) . dismiss ( ) ; }
public void startScroll ( int startX , int startY , int dx , int dy , int duration ) { super . startScroll ( startX , startY , dx , dy , duration * 10 ) ; }
public static SpoilerParserPlugin create ( @ NonNull int textColor , @ NonNull int backgroundColor ) { return new SpoilerParserPlugin ( textColor , backgroundColor ) ; }
public void onAttach ( Activity activity ) { Log . v ( TAG , "onAttach" ) ; super . onAttach ( activity ) ; getLoaderManager ( ) . initLoader ( URL_LOADER , null , mLoaderCallbacks ) ; }
public void goToPostLocation ( ) { getMvpView ( ) . dismissWarning ( ) ; if ( mPermissionHelper . hasFineLocationPermission ( ) ) { checkLocationSettings ( ) ; } else { getMvpView ( ) . compatRequestFineLocationPermission ( ) ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; DcHelper . getContext ( this ) . eventCenter . removeObservers ( this ) ; }
public ArrayList < OCSSection > getSections ( ) { ArrayList < OCSSection > lst = new ArrayList < OCSSection > ( ) ; for ( OCSSoftware o : softs ) { lst . add ( o . getSection ( ) ) ; } return lst ; }
private void setTimeModified ( long milliseconds ) { TextView tv = ( TextView ) getView ( ) . findViewById ( R . id . fdModified ) ; if ( tv != null ) { tv . setText ( DisplayUtils . unixTimeToHumanReadable ( milliseconds ) ) ; } }
public UserAgent ( String userAgent ) { this . userAgent = userAgent ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { mContext = parent . getContext ( ) ; View rootView = LayoutInflater . from ( mContext ) . inflate ( R . layout . movie_grid_item , parent , false ) ; return new ViewHolder ( rootView ) ; }
public void onNext ( String s ) { Book book = createBook ( s ) ; uploadBookCall ( book ) ; }
public boolean onSupportNavigateUp ( ) { if ( ! transferring ) finish ( ) ; return true ; }
public void postTextChanged ( Editable s ) { mAfterTextChanged . postValue ( s ) ; }
public void onTaskError ( Throwable error ) { FlyveLog . e ( error . getMessage ( ) ) ; Helpers . sendToNotificationBar ( context , context . getResources ( ) . getString ( R . string . inventory_notification_fail ) ) ; }
public Settings setOverzoomFactor ( float factor ) { if ( factor < 1f ) throw new IllegalArgumentException ( "Overzoom factor cannot be < 1" ) ; overzoomFactor = factor ; return this ; }
public int getTotalAnswers ( ) { return this . totalAnswers ; }
public boolean onLongClick ( View v ) { if ( SettingValues . swap ) { doOnClick ( holder , comment , baseNode ) ; } else { doLongClick ( holder , comment , baseNode , finalPos , finalPos1 ) ; } return true ; }
public static ImageThreadLoader getInMemoryInstance ( ) { return new ImageThreadLoader ( new MemoryCache ( ) ) ; }
public void onBackPressed ( ) { if ( mSearchView . getVisibility ( ) == View . VISIBLE ) { setSearchMode ( false ) ; return ; } super . onBackPressed ( ) ; }
public void onFailure ( Call < Account . EmailRespond > call , Throwable t ) { callback . onError ( t ) ; }
public boolean openPhoto ( final MessageObject messageObject , long dialogId , long mergeDialogId , final PhotoViewerProvider provider ) { return openPhoto ( messageObject , null , null , null , null , 0 , provider , null , dialogId , mergeDialogId , true ) ; }
public int update ( String table , ContentValues values , String whereClause , String [ ] whereArgs ) { mMod = true ; return getDatabase ( ) . update ( table , values , whereClause , whereArgs ) ; }
private void addBrowserFragment ( ) { mThemeBrowserFragment = ThemeBrowserFragment . newInstance ( mSite ) ; getSupportFragmentManager ( ) . beginTransaction ( ) . add ( R . id . theme_browser_container , mThemeBrowserFragment , ThemeBrowserFragment . TAG ) . commit ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { selectedRecipeStepPosition = RecipeDataUtils . getPositionOfStep ( ) ; rootView = inflater . inflate ( R . layout . fragment_recipe_detail , container , false ) ; updateView ( ) ; return rootView ; }
private void filterChanged ( final Filter < ? super Tables . Tracks > filter , final boolean activated ) { for ( final BowMenuEntry entry : BowMenuEntry . values ( ) ) { entry . adapt ( filter , activated , activity ) ; } }
public DateTime minusMillis ( int millis ) { return new DateTime ( timestamp - millis , timeZone ) ; }
public void setFormDetailsByFormId ( HashMap < String , FormDetails > formDetailsByFormId ) { this . formDetailsByFormId = formDetailsByFormId ; }
public double [ ] [ ] getNInState ( ) { return nInState ; }
public void onDestroy ( ) { App . INSTANCE . getSharedPreferences ( ) . removeListener ( this ) ; stopStatusNotification ( ) ; super . onDestroy ( ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { if ( labels == null || value >= labels . size ( ) ) { return "" ; } else { return labels . get ( ( int ) value ) ; } }
private void scheduleConnected ( ) { this . currentTone = JingleConnectionManager . SCHEDULED_EXECUTOR_SERVICE . schedule ( ( ) -> { this . toneGenerator . startTone ( ToneGenerator . TONE_PROP_PROMPT , 200 ) ; } , 0 , TimeUnit . SECONDS ) ; }
private Uri saveMovie ( MovieEntity movie ) { return context . getContentResolver ( ) . insert ( MoviesContract . CONTENT_URI_MOVIES , movie . convertToContentValues ( ) ) ; }
public void onLowMemory ( ) { tracer . error ( "Android is low on memory ! " ) ; super . onLowMemory ( ) ; }
public Message ( String type ) { this . type = type ; if ( ! isValidType ( ) ) { throw new IllegalArgumentException ( "Illegal message detected . " ) ; } }
public void draw ( @ NonNull Canvas canvas ) { canvas . save ( Canvas . ALL_SAVE_FLAG ) ; canvas . clipRect ( getBounds ( ) ) ; target . draw ( canvas ) ; canvas . restore ( ) ; }
private void deleteAllThreads ( ) { InstrumentationRegistry . getTargetContext ( ) . getContentResolver ( ) . delete ( MyMessages . Threads . Conversations . CONTENT_URI , null , null ) ; }
public void importFromTextFile ( ) { hideBottomSheet ( ) ; Intent txtFileIntent = new Intent ( Intent . ACTION_OPEN_DOCUMENT ) ; txtFileIntent . addCategory ( Intent . CATEGORY_OPENABLE ) ; txtFileIntent . setType ( "text/plain" ) ; startActivityForResult ( txtFileIntent , IMPORT_FILE_REQUEST_CODE ) ; }
public void storeZoneIsDrawable ( boolean flag ) { mZoneIsDrawablePreference . set ( flag ) ; }
public Level getLevel ( ) { return LevelSelectActivity . LEVELS . getLevel ( ) ; }
public User ( ) { profile_pic = "" ; profile_url = "" ; }
public static ArrayList < Genre > getAllGenres ( @ NonNull final Context context ) { return getGenresFromCursor ( context , makeGenreCursor ( context ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mInstance = this ; PreferenceManagerFix . setDefaultValues ( this , R . xml . widget_preference , false ) ; }
public void onClick ( View v ) { if ( data . getFixtureId ( ) != "null" ) { mEplMatchweekClickListener . onEplMatchWeekClicked ( data . getFixtureId ( ) ) ; } }
public SideToolbarOverlay ( Context context ) { super ( context ) ; }
public void onRefresh ( ) { getListIfUpdatedOnServer ( ) ; }
public boolean onLoadFailed ( @ Nullable GlideException e , Object model , Target < Drawable > target , boolean isFirstResource ) { progressBar . setVisibility ( View . GONE ) ; errorRelativeLayout . setVisibility ( View . VISIBLE ) ; return false ; }
public ComposeText ( Context context ) { super ( context ) ; }
public int addTrack ( MediaFormat mediaFormat , boolean isAudio ) throws Exception { return currentMp4Movie . addTrack ( mediaFormat , isAudio ) ; }
public List < Item > load ( ) { return list_ ; }
public void onResponse ( String response ) { document [ 0 ] = Jsoup . parse ( response ) ; countDownLatch . countDown ( ) ; }
public RecServiceAdapter ( Fragment context , List < RecService > list ) { super ( context . getActivity ( ) , R . layout . list_item_recservice , list ) ; this . context = context . getActivity ( ) ; this . list = list ; }
public void onClick ( View v ) { Toast . makeText ( getActivity ( ) , "Relative tocado" , Toast . LENGTH_SHORT ) . show ( ) ; }
public SectionDrawerItem withName ( int nameRes ) { this . name = new StringHolder ( nameRes ) ; return this ; }
private void selectAndEmailFile ( ) { if ( ! FileSenderFactory . GetEmailSender ( ) . isAvailable ( ) ) { launchPreferenceScreen ( MainPreferenceActivity . PREFERENCE_FRAGMENTS . EMAIL ) ; } else { showFileListDialog ( FileSenderFactory . GetEmailSender ( ) ) ; } }
public void onFinish ( boolean success , String result , @ Nullable Exception exception ) { EventBus . getDefault ( ) . post ( new OnFetchedEvent ( event , success , result ) ) ; }
public static int getPoiId ( ) { getInstance ( ) ; return osmObject . getId ( ) ; }
private void setResText ( View v , int id , CharSequence text ) { TextView tx = ( TextView ) v . findViewById ( id ) ; if ( tx != null ) tx . setText ( text ) ; }
public static int getClientUserId ( ) { synchronized ( sync ) { return currentUser != null ? currentUser . id : 0 ; } }
public LiveData < List < SupplierProduct >> getBySupplierId ( long id ) { return supplierProductDao . getBySupplierId ( id ) ; }
public int getTitleColorId ( ) { return R . color . blue ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; this . mActivity = ( PodcastFragmentActivity ) context ; }
public void onEntryDrop ( DatabaseEntry entry ) { _listener . onEntryDrop ( entry ) ; }
public String getWeightUnit ( ) { return this . weightUnit ; }
private void saveScrollOffsetDelayed ( int delay ) { webView . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { saveScrollOffset ( ) ; } } , delay ) ; }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . widget . Button" ) ; }
public long getArtistId ( ) { return safeGetFirstSong ( ) . artistId ; }
public final void setMode ( int mode ) { this . _mode = mode ; invalidate ( ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( HomeActivity . this , LoginActivity . class ) ) ; }
public PageAdapterStartScreenSlider ( FragmentManager fm ) { super ( fm ) ; }
public Recipient getIndividualRecipient ( ) { return individualRecipient ; }
public void onBindViewHolder ( VH holder , int position , List < Object > payloads ) { if ( isWrappedAdapterAlive ( ) ) mWrappedAdapter . onBindViewHolder ( holder , position , payloads ) ; }
private void requestSmAcknowledgementInternal ( ) throws NotConnectedException { packetWriter . sendStreamElement ( AckRequest . INSTANCE ) ; }
public static void extractTo ( Context c , final FileHolder tbe , File extractTo ) { extractTo ( c , singletonList ( tbe ) , extractTo ) ; }
private void maybeStartSigningTask ( @ Nullable CharSequence password ) { maybeStartSigningVerifyingTask ( true , password ) ; }
private static synchronized HistoryDataManager getSync ( ) { if ( instance == null ) { instance = new HistoryDataManager ( ) ; } return instance ; }
public ArrayList < TripEntry > getRequestSent ( ) { return requestSent ; }
public void testECIEnglishChinese ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u4e00' } , new float [ ] { 20f , 1f , 10f } , 95643 , 110914 ) ; }
public void stopRecording ( ) { if ( dataListener != null ) { appState . connectedMuse . unregisterDataListener ( dataListener , MuseDataPacketType . EEG ) ; } fileWriter . stopRecording ( ) ; fileNum ++ ; }
public static boolean isConnectedToInternet ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetwork = cm . getActiveNetworkInfo ( ) ; return activeNetwork != null && activeNetwork . isConnectedOrConnecting ( ) ; }
public boolean onCheckCanExpandOrCollapseGroup ( MyGroupViewHolder holder , int groupPosition , int x , int y , boolean expand ) { return true ; }
public String getKanjiElementValue ( ) { return mKanjiElementValue ; }
public void setup ( ) { api = new ApiClient ( ) . createService ( TokenApi . class ) ; }
private void disableFlash ( ) { Log . d ( "Habpanelview" , "disableFlash" ) ; synchronized ( fRunning ) { fPulseLength . set ( 0 ) ; fOn . set ( false ) ; fRunning . notifyAll ( ) ; } }
public void run ( ) { String res = Statusgo . hashMessage ( message ) ; callback . invoke ( res ) ; }
private void runStartForeground ( ) { setupNotificationChannel ( ) ; startForeground ( NOTIFICATION_ID , buildNotification ( ) ) ; }
public void hideBottomNotice ( ) { mBottomNoticeLayout . setVisibility ( View . GONE ) ; }
public Object visit ( Track track ) { icon . setImageResource ( R . drawable . track24 ) ; return null ; }
public void firebaseAuthSignInSucceeds_ShowsItemsUi ( ) { mAuthPresenter . handleFirebaseSignInResult ( true ) ; verify ( mView ) . showItemsUi ( ) ; }
public void onCreate ( SQLiteDatabase db ) { for ( String aTable : tables ) { db . execSQL ( "DROP TABLE IF EXISTS " + aTable ) ; } for ( String aCreateString : tableCreatorString ) db . execSQL ( aCreateString ) ; loadInitialData ( db ) ; }
public void onFailure ( @ NonNull Exception e ) { progressDialog . setVisibility ( View . GONE ) ; Toast . makeText ( getApplicationContext ( ) , "Failed" , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onBackPressed ( ) { if ( General . onBackPressed ( ) && ! webView . onBackButtonPressed ( ) ) super . onBackPressed ( ) ; }
public String getCounterpart ( ) { return counterpart ; }
public ViewHolder ( TextView date , TextView schedule , TextView department ) { this . date = date ; this . schedule = schedule ; this . department = department ; }
public void onClick ( DialogInterface dialog , int which ) { Intent goHome = new Intent ( GameActivity . this , StartActivity . class ) ; startActivity ( goHome ) ; }
public void testIsWPCOMString2 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( wpcomAddress2 ) ) ; }
public void onPreExecute ( ) { Timber . d ( "Reviewer : : ResetProgressCardHandler ( ) onPreExecute" ) ; }
public void onClick ( View v ) { Intent i = new Intent ( SyncData . this , SyncGoogleFitActivity . class ) ; startActivity ( i ) ; }
public void denied ( ) { viewModel . locationPermissionsDenied ( ) ; }
public void handleFabPressed ( ) { mView . showEditUnit ( null , "" ) ; mInitialUnitName = mCurUnitName = mCurUnitValue = "" ; isNewUnit = true ; }
public void setBitmap ( Bitmap doubleFire ) { this . doubleFire = doubleFire ; }
public void invalidSettingReturnsCorrectResultWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( "" ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public boolean accept ( File file ) { return file . getName ( ) . toLowerCase ( ) . endsWith ( " . zip" ) ; }
public static boolean readFromFileDebugMode ( final Context context ) { final SharedPreferences settings = context . getSharedPreferences ( PREFERENCES_FILE , Context . MODE_PRIVATE ) ; return settings . getBoolean ( PREFERENCES_DEBUG_MODE , false ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonSetEditor . this . getContext ( ) , ButtonSetEditor . this , newsettings . getFlipColor ( ) , COLOR_FIELDS . COLOR_FLIPPED ) ; diag . show ( ) ; }
public void onSuccess ( Location location ) { if ( currentBestLocation == null || GeoUtils . isBetterLocation ( location , currentBestLocation ) ) currentBestLocation = location ; }
public void onResume ( ) { mWebView . onResume ( ) ; super . onResume ( ) ; }
public void testEventListWriter ( ) { mWriter . write ( mMedia , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_MEDIAS , null , mMedia . getParams ( ) ) ; }
public String desc ( ) { return Game . getVar ( R . string . Shuriken_Info ) ; }
public void betterThumbnailAvailable ( final Bitmap thumbnail , final int callbackUsageId ) { final Message msg = new Message ( ) ; msg . obj = thumbnail ; msg . what = callbackUsageId ; thumbnailHandler . sendMessage ( msg ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . tyn_imarket . serenade" , appContext . getPackageName ( ) ) ; }
public String getSub ( ) { return null ; }
private void onItemViewClick ( View v , boolean pinned ) { int position = mRecyclerView . getChildPosition ( v ) ; if ( position != RecyclerView . NO_POSITION ) { ( ( VerticalSwipeableExampleActivity ) getActivity ( ) ) . onItemClicked ( position ) ; } }
public static Ping onAddress ( @ NonNull String address ) { Ping ping = new Ping ( ) ; ping . setAddressString ( address ) ; return ping ; }
public void setBookInfoBinding ( FireBookDetails bookInfo ) { this . bookInfo = bookInfo ; binding . setBookInfo ( bookInfo ) ; if ( bookInfo . isDownloadedAlready ( ) ) { showDownloadFinished ( ) ; } loadImage ( bookInfo . getFirebaseStorageReference ( ) ) ; }
public static String DateToString ( Date date ) { final DateFormat format = new SimpleDateFormat ( "yyyy - MM - dd hh : mm : ss" , Locale . US ) ; return format . format ( date ) ; }
static private AttributesWithClass getAttributesWithClass ( @ NonNull Attributes attrs ) { return new AttributesWithClass ( attrs ) ; }
private void onMovingBackwardsEnabled ( ) { settingsProvider . getAdminSettings ( ) . save ( ALLOW_OTHER_WAYS_OF_EDITING_FORM , true ) ; findPreference ( KEY_JUMP_TO ) . setEnabled ( true ) ; findPreference ( KEY_SAVE_MID ) . setEnabled ( true ) ; }
public void onClickFab ( ) { new DialogQRFragment ( ) . newInstance ( 16 , 4 , false , false ) . show ( getFragmentManager ( ) , "blur_sample" ) ; }
public void success ( List < Mission > missions , Response response ) { Log . v ( "Client" , "success" ) ; insertMission ( missions ) ; }
public void clearWhiteList ( ) { setWhiteList ( StringUtils . EMPTY ) ; preferencesService . setDisabledWhitelistRules ( new HashSet < String > ( ) ) ; }
public ITempDataStorage tempStore ( ) { return tempDataStore ; }
public String getBlogName ( ) { return StringUtils . notNullStr ( blogName ) ; }
public boolean canQuote ( Comment comment ) { return ! mLocked ; }
public TodoUseCaseImpl ( ) { this . todoRepository = new TodoLocalRepository ( ) ; }
private static void showSettingWallpaperProgressBar ( Context context ) { progressDialog = ProgressDialog . show ( context , context . getString ( R . string . setting_wallpaper_dialog_title ) , context . getString ( R . string . setting_wallpaper_dialog_message ) , true ) ; }
private void wire ( ) { itemView . setOnClickListener ( this ) ; }
public void onClick ( View v ) { nameInput . setError ( emptyError ) ; }
public ArrayList < String > getRegions ( ) { return xu . findAllElementTexts ( mInfoElement , R . string . xml2elemName_info_region ) ; }
public void onFailure ( Call < ActorCredits > call , Throwable t ) { }
public void onChange ( @ NonNull Realm realm ) { if ( isAdded ( ) ) { getLoaderManager ( ) . restartLoader ( EXAM_LOADER_ID , Bundle . EMPTY , ExamsFragment . this ) ; } }
public void setDefaults ( View defaultView , Drawable defaultDrawable ) { this . drawableMap . put ( TestState . UNKNOWN , defaultDrawable ) ; this . viewMap . put ( TestState . UNKNOWN , defaultView ) ; }
public static Category noCategory ( DatabaseAdapter db ) { return db . getCategory ( Category . NO_CATEGORY_ID ) ; }
private void _moveManuallyBuried ( ) { mCol . getDb ( ) . execute ( "update cards set queue = " + Consts . QUEUE_TYPE_SIBLING_BURIED + " , mod = ? where queue = " + Consts . QUEUE_TYPE_MANUALLY_BURIED , mTime . intTime ( ) ) ; }
public boolean onKeyUp ( int keyCode , KeyEvent event ) { return mVolumeNavigationDelegate . onKeyUp ( keyCode , event ) || super . onKeyUp ( keyCode , event ) ; }
public void hideNoAnim ( ) { clearAnimation ( ) ; setVisibility ( GONE ) ; removeAllViews ( ) ; contents = null ; requestLayout ( ) ; }
public listeJoursRemplaces Func ( ) throws java . lang . Exception { return lireJoursRemplaces ( pSession ) ; }
public void testGetHttpFileName_withLocation ( ) { String actual = Utils . getHttpFileName ( fs , "http : null , "Content - Location : subdir/real . pdf" , null ) ; assertEquals ( "real . pdf" , actual ) ; }
public void setUp ( ) throws Exception { when ( resourceProvider . getString ( R . string . notify_error_not_ips_patch ) ) . thenReturn ( NOT_IPS_PATCH ) ; fileUtils = new UFileUtils ( context , resourceProvider ) ; }
public void onAppWidgetOptionsChanged ( Context context , AppWidgetManager appWidgetManager , int appWidgetId , Bundle options ) { inject ( ) ; super . onAppWidgetOptionsChanged ( context , appWidgetManager , appWidgetId , options ) ; display ( context , appWidgetManager , appWidgetId , false ) ; }
public boolean onQueryTextSubmit ( String query ) { applyFilter ( query ) ; return false ; }
public Observable < Boolean > deleteVisitsByPatientId ( Long id ) { return createObservableIO ( ( ) -> { visitRoomDAO . deleteVisitsByPatientId ( id ) ; return true ; } ) ; }
public void onTick ( long millisUntilFinished ) { }
public LocationsViewMode getLocationsViewMode ( ) { return mPrefsHelper . getLocationsViewMode ( ) ; }
public void onPause ( ) { if ( configDir != null ) { saveParams ( ) ; } super . onPause ( ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( this . id ) ; dest . writeInt ( this . higri_death_year ) ; dest . writeString ( this . name ) ; dest . writeString ( this . info ) ; }
public DrawerBuilder withOnDrawerNavigationListener ( Drawer . OnDrawerNavigationListener onDrawerNavigationListener ) { this . mOnDrawerNavigationListener = onDrawerNavigationListener ; return this ; }
public int getGroundLevel ( ) { int i = this . m_screenHeight - ( AstroSmashVersion . getStatisticsHeight ( ) + AstroSmashVersion . getGroundThickness ( ) ) ; return i ; }
public static Bitmap convertByteArrayToBitmap ( byte [ ] byteArray ) { return BitmapFactory . decodeByteArray ( byteArray , 0 , byteArray . length ) ; }
public void start ( Attributes attributes ) { mCurrentBoard . setNumberOfReplies ( Integer . parseInt ( attributes . getValue ( Board . Xml . NUMBER_OF_REPLIES_ATTRIBUTE ) ) ) ; }
public List < Item > getItems ( ) { return super . mItemList ; }
private void goToPersonaDetail ( int personaID ) { Intent startDetailIntent = new Intent ( itemView . getContext ( ) , PersonaDetailActivity . class ) ; startDetailIntent . putExtra ( "persona_id" , 0 ) ; itemView . getContext ( ) . startActivity ( startDetailIntent ) ; }
public int getAudioMaxSize ( ) { return 100 * MB ; }
public final void setYSpan ( int v ) { this . _ySpan = v ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { return mIsGesturesEnabled && processTouch ( event ) ; }
private void showWidgetHeaderLayout ( ) { Preference preference = findPreference ( ApplicationPreferences . PREF_WIDGET_HEADER_LAYOUT ) ; if ( preference != null ) { preference . setSummary ( ApplicationPreferences . getWidgetHeaderLayout ( getActivity ( ) ) . summaryResId ) ; } }
public Program ( ) { handle = GLES20 . glCreateProgram ( ) ; }
public String getAppName ( ) { return appName ; }
public static ShopItem getShopItem ( String shopId ) { return null ; }
public void onClick ( View arg0 ) { getPagamentiIscritto ( posizione , iscritto , palestra ) ; }
private static double pressureToAltitude ( double pressure ) { return SCALE * ( 1 - Math . pow ( pressure / pressure0 , EXP ) ) ; }
public void makeEventSort_WhenSortTypeName_ReturnCorrectComparator ( ) { Comparator < EventSortable > sut = EventSortFactory . makeEventSort ( SortType . NAME ) ; int result = sut . compare ( event1 , event2 ) ; assertThat ( result , lessThan ( 0 ) ) ; }
public boolean restoreSession ( ) { if ( ! gameRestoreProperty . get ( ) ) { gameRestoreProperty . set ( true ) ; } return true ; }
public static TravelerSettings getInstance ( Context context ) { if ( instance == null ) { instance = new TravelerSettings ( context ) ; } return instance ; }
public void clickingBosses ( MenuItem item ) { Intent intent = new Intent ( NavD . this , Bosses . class ) ; startActivity ( intent ) ; }
public int cardCount ( long [ ] ls ) { return mDb . queryScalar ( "SELECT count ( ) FROM cards WHERE did IN " + Utils . ids2str ( ls ) ) ; }
private void clear ( ) { mComponent = null ; setImageBitmap ( null ) ; }
public void clearTokens ( ) { tokens = new Token [ 0 ] ; matchingBracket = - 1 ; }
private void setMessageAsRead ( ) { mCompositeDisposable . add ( mMessagesInteractor . markAsRead ( accountId , peerId , messageId ) . compose ( RxUtils . applyCompletableIOToMainSchedulers ( ) ) . subscribe ( RxUtils . dummy ( ) , ignore ( ) ) ) ; }
public MySessionsRepository ( MySessionsLocalDataSource localDataSource ) { this . localDataSourse = localDataSource ; this . cachedMySessions = new LinkedHashMap <> ( ) ; }
public String readNonSubstitutionCurrency ( ) { String nonSubstitutionCurrencyPref = context . getString ( R . string . pref_non_substitution_currency ) ; SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return preferences . getString ( nonSubstitutionCurrencyPref , null ) ; }
public FooterItemHelper withDivider ( boolean divider ) { this . mDivider = divider ; return this ; }
public final void onResume ( ) { super . onResume ( ) ; mIMainActivity . showFABIfAccurate ( false ) ; }
public DistrictTeamListWriter districtTeamListWriter ( Database db ) { return Mockito . mock ( DistrictTeamListWriter . class ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , FingerprintSecureView . class ) ) ; }
public LiveData < Error > getError ( ) { return error ; }
public int getCount ( ) { return folders . size ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . cancel ( ) ; } } )
private void postHeader ( final Iterable < TodoListHeader > headers ) { mMainThread . post ( new Runnable ( ) { @ Override public void run ( ) { callback . onHeaderRetrieved ( Lists . newArrayList ( headers ) ) ; } } ) ; }
private double sqinchTohectare ( double num ) { return num * 6 . 4516E - 8 ; }
public MoodleViewModel create ( Class modelClass ) { return new MoodleViewModel ( application , repository ) ; }
public void setHeight ( Object height ) { this . height = height ; }
public static void setDietGoal ( Context context , int dietGoal ) { SharedPreferences . Editor editor = getSharedPreferences ( context ) . edit ( ) ; editor . putInt ( DIET_GOAL , dietGoal ) ; editor . apply ( ) ; }
public void run ( ) { displayBalance ( ) ; refreshTx ( false ) ; }
public Scores ( @ NotNull String userId , String categoryName , String categoryScore ) { this . userId = userId ; this . categoryName = categoryName ; this . categoryScore = categoryScore ; }
public static void sendFeedback ( Context context ) { sendEmail ( context , new String [ ] { "XPNInc @ gmail . com" } , "SpellNote Feedback" , "" ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_contacts_link . TLdeserialize ( stream , constructor , exception ) ; }
public void prepare ( Callback callback ) { this . callback = callback ; callback . onPrepared ( this ) ; }
public void onClick ( View v ) { intent . intentSharedElementWithExtra ( a , "activity . AboutActivity" , R . id . cardview_music_image , "transition" , "about" , "now_playing" , 0 , v ) ; }
public boolean onHookGroupExpand ( int groupPosition , boolean fromUser , Object payload ) { return onHookGroupExpand ( groupPosition , fromUser ) ; }
public static RecipesState makeLoadingState ( ) { return new RecipesState ( new ArrayList <> ( 0 ) , true , false ) ; }
public synchronized void addListener ( final E updateListener ) { listeners . add ( new WeakReference < E > ( updateListener ) ) ; }
public RepaymentFrequencyNthDayTypeOptions [ ] newArray ( int size ) { return new RepaymentFrequencyNthDayTypeOptions [ size ] ; }
public void tellJoke ( View view ) { Intent intent = new Intent ( this , Joke_Activity . class ) ; startActivity ( intent ) ; }
public void onSuccess ( ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Paused music successfully" ) ; }
public @ NonNull String getNetworkFail ( ) { return res . getString ( R . string . error_networkFail ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { selectedCounty = County . getCountyByIndex ( position ) ; branchNumber . setEnabled ( true ) ; }
private void castingVoteSuccess ( ) { if ( starView != null ) { starView . castedVoteSuccessfully ( ) ; } fetchUpdatedBalance ( ) ; }
public void onScrollStateChanged ( AbsListView view , int scrollState ) { if ( getActivity ( ) instanceof StartScreen ) { ( ( StartScreen ) getActivity ( ) ) . setScrollMessageVisiblility ( false ) ; } }
public boolean isPresent ( ) { return present ; }
public void TestSignatureVerifies ( ) throws NoSuchAlgorithmException , IOException , InvalidKeySpecException , InvalidKeyException , SignatureException { super . TestSignatureVerifies ( updateSig , updatePkg , tempDir1 , "lxc_updates . pub" ) ; }
public boolean shouldDisplayDownloadOnly ( ) { return mListener . shouldDisplayDownloadedOnly ( ) ; }
public void onBindViewHolder ( TransactionViewHolder holder , int position ) { final TransactionEntity transaction = getItem ( position ) ; if ( transaction != null ) { holder . bindTo ( transaction , onItemClickListener ) ; } else { holder . clear ( ) ; } }
public OstDevicePollingService ( String userId , String entityId , String successStatus , String failedStatus ) { super ( userId , entityId , successStatus , failedStatus ) ; }
public void endTransaction ( ) { if ( db != null ) { db . endTransaction ( ) ; } }
public Set < Filter < I >> getFilters ( ) { return filters ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Entanglement_Txt ) , weaponName ) ; }
public void changeMoodText ( int mood , TextView moodTV ) { if ( moodTV == null ) moodTV = ( TextView ) findViewById ( R . id . mood ) ; moodTV . setText ( AnimusMiscMethods . getMood ( mood , moodTV ) ) ; }
public void onError ( SteemConnectException e ) { mHandler . post ( steemCastingVoteExceptionRunnable ) ; }
private Card createBuriedCardInDefaultDeck ( ) { Note n = addNoteUsingBasicModel ( "Hello" , "World" ) ; Card c = n . firstCard ( ) ; c . setQueue ( Consts . QUEUE_TYPE_SIBLING_BURIED ) ; c . flush ( ) ; return c ; }
public static byte [ ] decode ( String s ) throws EncodingException { try { return BaseEncoding . base16 ( ) . decode ( s . toUpperCase ( ) ) ; } catch ( IllegalArgumentException e ) { throw new EncodingException ( e ) ; } }
public double getValue ( ) { if ( atomType != Atom . AtomType . INVALID ) { return parser . getY ( ) ; } else throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; }
public void notifyOnMediaStateChanged ( ) { }
public int getItemCount ( ) { return mStrings . size ( ) ; }
public void setContext ( Activity context ) { this . context = context ; }
public Integer getPenaltyChargesPortion ( ) { return penaltyChargesPortion ; }
public void playAudioList ( int accountId , int position , @ NonNull ArrayList < Audio > apiAudio ) { MusicPlaybackService . startForPlayList ( getActivity ( ) , apiAudio , position , false ) ; PlaceFactory . getPlayerPlace ( accountId ) . tryOpenWith ( getActivity ( ) ) ; }
public Server ( ) { super ( ) ; }
private PendingIntent createPendingIntentWithAction ( String action ) { Intent intent = new Intent ( context , MyBroadcastReceiver . class ) ; intent . setAction ( action ) ; return PendingIntent . getBroadcast ( context , 0 , intent , 0 ) ; }
public Number ( int number ) { this . number = number ; }
private void start ( Editable output , Object mark ) { int len = output . length ( ) ; output . setSpan ( mark , len , len , Spannable . SPAN_MARK_MARK ) ; Log . v ( TAG , "len : " + len ) ; }
public void onLoadingComplete ( String imageUri , View view , Bitmap loadedImage ) { NotifyDownloadFinished ( ) ; }
public void update ( FolderFragment fragment ) { folderName . setText ( fragment . folderName ( ) ) ; }
public SimpleTextViewHolder ( View itemView ) { super ( itemView ) ; text = ( TextView ) itemView . findViewById ( R . id . viewholder_simple_text_textview ) ; }
public void run ( ) { if ( delegate != null ) { delegate . needStartRecordVideo ( 0 ) ; } }
public void deleteDownloadFolder ( ) { FileUtils . deleteDirectory ( TEST_FOLDER ) ; }
public void onMessageSentError ( final String message ) { }
private void onActionRecordAudio ( ) { Intent intent = new Intent ( MediaStore . Audio . Media . RECORD_SOUND_ACTION ) ; startActivityForResult ( intent , ActivityCompose . REQUEST_RECORD_AUDIO ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( OnLoginActionListener ) activity ; } catch ( ClassCastException e ) { throw new ClassCastException ( activity . toString ( ) + " must implement OnLoginActionListener" ) ; } }
public SqlImporterHelper ( Context context ) { _context = context ; _password = null ; }
public AdapterModelConnversationMessage . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . tab_user , parent , false ) , viewType ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( ! EventBus . getDefault ( ) . isRegistered ( this ) ) EventBus . getDefault ( ) . register ( this ) ; }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingFetchNewBip ( 2 ) ; getDialog ( ) . dismiss ( ) ; }
public DataListPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void testDeleteNotExisted ( ) throws Exception { assertFalse ( Paper . book ( ) . exists ( "persons" ) ) ; Paper . book ( ) . delete ( "persons" ) ; }
public void setEventsMap ( HashMap < DateTime , Events > eventsMap ) { this . eventsMap = eventsMap ; }
public void testIndexOfIgnoreCase2 ( ) { assertEquals ( - 1 , StrUtil . indexOfIgnoreCase ( text , search ) , 2 ) ; }
public TopBottomEdgeEffectDecorator ( RecyclerView recyclerView ) { super ( recyclerView ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { userPreferences . setFilter_ProgramType ( parent . getItemAtPosition ( position ) . toString ( ) ) ; filterPrograms ( ) ; onResume ( ) ; }
public boolean onKey ( View v , int keyCode , KeyEvent event ) { if ( event . getAction ( ) == KeyEvent . ACTION_DOWN && keyCode == KeyEvent . KEYCODE_ENTER ) { call_menu ( ) ; return true ; } return false ; }
public void dismiss ( ) { super . dismiss ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . dialogsNeedReload ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . nirmal . jeffrey . flickvibes" , appContext . getPackageName ( ) ) ; }
public Bundle confirmCredentials ( AccountAuthenticatorResponse response , Account account , Bundle options ) throws NetworkErrorException { return null ; }
public void openForwardMessages ( int accountId , @ NonNull ArrayList < Message > messages ) { PlaceFactory . getForwardMessagesPlace ( accountId , messages ) . tryOpenWith ( getActivity ( ) ) ; }
public void onClick ( View view ) { QuickActionsPopup popup = new QuickActionsPopup ( context , tweetId , screenName , tweet ) ; popup . setExpansionPointForAnim ( quickActions ) ; popup . setOnTopOfView ( quickActions ) ; popup . show ( ) ; }
public LiveData < List < PinnableCalendarEvent >> getEventsAfterDate ( @ NonNull DataSource dataSource , @ NonNull Date firstDate ) { return calendarDao . getEventsAfterDate ( singletonList ( dataSource ) , firstDate ) ; }
private boolean isPathStarted ( ) { return mCurrentPathLastPoint != null ; }
public void stopFlingAnimation ( ) { if ( isAnimatingFling ( ) ) { mFlingScroller . forceFinished ( true ) ; onFlingAnimationFinished ( true ) ; } }
public void testJoinWithNull ( ) throws JSONException { JSONArray array = new JSONArray ( Arrays . asList ( 5 , 6 ) ) ; assertEquals ( "5null6" , array . join ( null ) ) ; }
private List < PopupKeyCandidate > getCandidatesForQA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "h" ) ) ; return candidates ; }
public void loggedOut ( ) { showProfileFragment ( ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; componentFactory . newGraphComponent ( new GraphModule ( this ) ) . inject ( this ) ; componentFactory = null ; }
public void run ( ) { intf . onError ( ex ) ; }
public void setFare ( Fare fare ) { this . fare = fare ; }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( "CREATE TABLE Picture ( _id INTEGER PRIMARY KEY AUTOINCREMENT , " + "country TEXT , city TEXT , latitude TEXT , longitude TEXT , " + "thumbnail BLOB , mainImg BLOB ) ; " ) ; }
public Note newNote ( ) { return newNote ( true ) ; }
public void onViewAttachedToWindow ( View v ) { Log . e ( TAG , "onAttach of " + builder ) ; Log . e ( TAG , "BuilderQueue : " + builders ) ; }
public BitmapTypeRequest < Uri > childBuilder ( ) { return request ; }
public void onCancelled ( ) { if ( mListener != null ) mListener . onCancel ( ) ; mListener = null ; }
public Cursor getArticleAtPosition ( int position ) { return ( Cursor ) m_adapter . getItem ( position ) ; }
public boolean open ( ) { return flip . flipped ( ) ; }
public static boolean isLightTheme ( ) { return ! App . getTinyDB ( ) . getBoolean ( DARK_THEME , true ) ; }
public ContactID ( String id , String name , Bitmap photo ) { this . id = id ; this . name = name ; this . photo = photo ; }
public void onClick ( View v ) { prefs . edit ( ) . putBoolean ( "message_actions" , true ) . apply ( ) ; grpHintActions . setVisibility ( View . GONE ) ; }
public void onFailure ( Call < Encounter > call , Throwable t ) { if ( callbackListener != null ) { callbackListener . onErrorResponse ( t . getLocalizedMessage ( ) ) ; } }
public String getName ( ) { return "jp" ; }
private void showError ( final String message ) { showError ( message , false , false ) ; }
public int getAudioSessionID ( ) throws RemoteException { return mService . get ( ) . getAudioSessionID ( ) ; }
public void onCreate ( ) { super . onCreate ( ) ; ( ( WordPress ) getApplication ( ) ) . component ( ) . inject ( this ) ; mDispatcher . register ( this ) ; mDeleteInProgress = null ; }
public void onBindViewHolder ( @ NonNull VH holder , int position ) { }
public void onItemSelected_Fragment_LocationVisited ( int id , int year ) { Log . d ( TAG , String . valueOf ( id ) + ' ' + String . valueOf ( year ) ) ; detailItemChosen ( id , year ) ; }
public Drawable getSelectedIcon ( ) { return selectedIcon ; }
private void cleanTemp ( ) { try { FileSystemFacade . cleanTempDir ( appContext ) ; } catch ( Exception e ) { Log . e ( TAG , "Error during setup of temp directory : " , e ) ; } }
public void onFailure ( int statusCode , Client . Headers headers , int state ) { thread . runOnUI ( ( ) -> personsRecyclerViewAdapter . setState ( R . id . load_more ) ) ; }
public IAnswerData getAnswer ( ) { return TextWidgetUtils . getStringNumberData ( getAnswerText ( ) , getFormEntryPrompt ( ) ) ; }
public void setColor ( int color ) { this . color = color ; this . value = lightnessOfColor ( color ) ; if ( bar != null ) { updateBar ( ) ; invalidate ( ) ; } }
public void run ( ) { castingVoteSuccess ( ) ; }
private Uri getUriWithAnalyticsParam ( Uri uri ) { return uri . buildUpon ( ) . appendQueryParameter ( "internal" , "true" ) . build ( ) ; }
public double getBeginning ( ) { return beginning ; }
public IntArrayLengthPair ( int capacity ) { this . data = new int [ capacity ] ; }
public ContentType getType ( ) { return ContentType . REFLECTION ; }
public String prompt ( ) { return Game . getVar ( R . string . WarriorArmor_Prompt ) ; }
public void onClick ( DialogInterface dialog , int which ) { if ( which == 0 ) { checkPermissionStorage ( ) ; } else if ( which == 1 ) { checkPermissionCamera ( ) ; } }
private void clearAnswer ( QuestionWidget qw ) { if ( qw . getAnswer ( ) != null ) { qw . clearAnswer ( ) ; } }
public void end ( ) { tmp . getTriggers ( ) . put ( current_trigger . getPattern ( ) , current_trigger . copy ( ) ) ; }
public static InstanceSettings instanceFromId ( Context context , Integer widgetId ) { InstanceSettings settings = new InstanceSettings ( context , widgetId ) ; settings . setWidgetInstanceNameIfNew ( uniqueInstanceName ( context , widgetId ) ) ; return settings ; }
public void setImage ( TLObject path , String filter , Bitmap thumb ) { setImage ( path , null , filter , null , thumb , null , null , 0 ) ; }
public int getIntrinsicWidth ( ) { return AndroidUtilities . dp ( 14 ) ; }
public static ApiService getApiService ( ) { if ( mApiService == null ) { mApiService = initRetrofitInstanceWithUrl ( BuildConfig . WEB_BASE_URL ) . create ( ApiService . class ) ; } return mApiService ; }
public void onDestroy ( ) { super . onDestroy ( ) ; SIAApp . GG_APP . activity = null ; }
public void onFailure ( Call < CategoryBook . CategoryBookRespond > call , Throwable t ) { callback . onError ( t ) ; }
private void getImageFromGallery ( String selectedImage ) { coverFile = selectedImage ; gotoConversionView ( ) ; }
public static SupportedPointsFileTypes fileTypeOf ( String format ) { SupportedPointsFileTypes type = null ; try { type = SupportedPointsFileTypes . valueOf ( format . toUpperCase ( App . locale ) ) ; } catch ( IllegalArgumentException e ) { } return type ; }
public void setup ( ) { offlineCloudLayout . setVisibility ( View . INVISIBLE ) ; countProductsView . setVisibility ( View . INVISIBLE ) ; getDataFromAPI ( ) ; }
private static Uri getStoragePathBaseUri ( ) { return Uri . parse ( "file : }
public LottieFontViewGroup ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
private String decryptPassword ( byte [ ] cipherData , byte [ ] initialVector ) throws Exception { SecretKey key = getSecretKey ( ) ; byte [ ] encodedPassword = EncryptionHelper . decrypt ( cipherData , key , initialVector ) ; return EncryptionHelper . Base64ToString ( encodedPassword ) ; }
public void testInitialState ( ) { assertEquals ( 0f , animator . getFrame ( ) ) ; }
public int getItemCount ( ) { return news . size ( ) ; }
public void restoreItem ( CMessage item , int position ) { CMessageList . inst ( ) . insert ( position , item ) ; notifyItemInserted ( position ) ; }
public com . coinomi . core . protos . Protos . ScryptParameters . Builder getEncryptionParametersBuilder ( ) { bitField0_ | = 0x00000020 ; onChanged ( ) ; return getEncryptionParametersFieldBuilder ( ) . getBuilder ( ) ; }
public String getCurrentUrl ( ) { return ( currentUrl != null ) ? currentUrl : url ; }
public static boolean isIPv6StdAddress ( final String address ) { return IPV6_STD_PATTERN . matcher ( address ) . matches ( ) ; }
public void onResume ( ) { super . onResume ( ) ; setSummaries ( recipients ) ; }
public final void setXSpan ( int v ) { this . _xSpan = v ; }
public void onReceive ( Context context , Intent intent ) { SensorType sensorType = SensorType . valueOf ( intent . getStringExtra ( CalcExtremumValuesTask . SENSOR_TYPE ) ) ; addExtremumMarker ( sensorType ) ; }
public void onShowReadTag ( View view ) { Intent intent = new Intent ( this , ReadTagActivity . class ) ; startActivity ( intent ) ; }
public void login ( UserCredentials userCredentials , RequestListener < Object > listener ) { getDataFromSignet ( SignetMethods . INFO_ETUDIANT , userCredentials , listener ) ; }
public void rebuildFiltered ( ) { getCol ( ) . getDecks ( ) . select ( mContextMenuDid ) ; TaskManager . launchCollectionTask ( new CollectionTask . RebuildCram ( ) , simpleProgressListener ( ) ) ; }
private AqiApi ( ) { final OkHttpClient client = builtClient ( ) ; final Retrofit retrofit = builtRertofit ( client ) ; aqiEndpoint = retrofit . create ( IpAqiEndpoint . class ) ; }
public Result loadImage ( int articleId , String imageUrl ) { return loadImage ( articleId , imageUrl , App . getInstance ( ) . getSettings ( ) . isImageCacheEnabled ( ) ) ; }
private void getShuyookhData ( ) { if ( disposable != null ) { disposable . dispose ( ) ; } disposable = AudioManagerUtils . shuyookhDownloadObservable ( mBasePath , mQariItems ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribeWith ( mOnDownloadInfo ) ; }
public Dictionary ( String abbreviation , Preferences . DictionaryType type , String path ) { this ( abbreviation , type , path , null ) ; }
public boolean haveUpdatedTranslations ( ) { return mPerInstallationPrefs . getBoolean ( Constants . PREF_HAVE_UPDATED_TRANSLATIONS , false ) ; }
public void onSubredditSubscriptionFail ( ) { Toast . makeText ( context , R . string . subscribe_failed , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onClick ( View v ) { String userId = SparkleHelper . getActiveUser ( context ) . nationId ; SparkleHelper . startTrends ( context , userId , TrendsActivity . TREND_NATION , delta . censusId ) ; }
private void thenShouldShowSnackbarWithPermissionRationaleMessage ( final boolean expected ) { new Verifications ( ) { { snackbar . show ( ) ; times = expected ? 1 : 0 ; } } ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof SingleKingConstraintVisitor ) return ( ( SingleKingConstraintVisitor < ? extends T > ) visitor ) . visitNumericRelational ( this ) ; else return visitor . visitChildren ( this ) ; }
public static String decryptText ( byte [ ] text ) { return decryptString ( mCryptKey , text ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( TAG , String . format ( "Auth failed ( %d ) : %s" , errorCode , msg ) ) ; callback . onFail ( errorCode , msg ) ; }
public int getCount ( ) { return mPageCount ; }
public void write ( byte [ ] buffer ) { serialBuffer . putWriteBuffer ( buffer ) ; }
public void checkStringBuilderAndRegexGivesTheSameResults ( ) { assertEquals ( ArabicUtilities . cleanTextForSearchingWithRegex ( full_page ) , ArabicUtilities . cleanTextForSearchingWthStingBuilder ( full_page ) ) ; }
public ItemMoveAnimationManager ( BaseItemAnimator itemAnimator ) { super ( itemAnimator ) ; }
public void unlock ( ) { ( ( CrosshairRenderer ) mRenderer ) . setColor ( DEFAULT_COLOR ) ; ( ( CrosshairRenderer ) mRenderer ) . setFading ( true ) ; }
public CustomMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; tvContent = ( TextView ) findViewById ( R . id . tvContent ) ; }
public void onErrorResponse ( VolleyError error ) { profileTV . setText ( error . getMessage ( ) ) ; }
public String back ( ) { return backSlide ; }
public static boolean haveWriteExternalStoragePermission ( Context context ) { return Build . VERSION . SDK_INT < Build . VERSION_CODES . M || ContextCompat . checkSelfPermission ( context , Manifest . permission . WRITE_EXTERNAL_STORAGE ) == PackageManager . PERMISSION_GRANTED ; }
private List < PopupKeyCandidate > getCandidatesForE ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "̌" ) ) ; return candidates ; }
public void onClick ( final DialogInterface dialog , final int which ) { new AccountListDialog ( ) . show ( MainActivity . this . getFragmentManager ( ) , null ) ; }
private static boolean getBoolean ( String key , boolean defaultValue ) { return sPreferences . getBoolean ( key , defaultValue ) ; }
public Lightning ( int from , int to , Callback callback ) { int cells [ ] = new int [ 2 ] ; cells [ 0 ] = from ; cells [ 1 ] = to ; init ( cells , callback ) ; }
public void testCheckIsColorationValidatorThrowsException ( ) throws Exception { Whitebox . invokeMethod ( mSpiedAwesomeValidationBasicStyle , "checkIsColorationValidator" ) ; }
public ArrayList < Song > getSongs ( Context context ) { return TopAndRecentlyPlayedTracksLoader . getTopTracks ( context ) ; }
public DetailAdapter . ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int viewType ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . files_list , viewGroup , false ) ; return new ViewHolder ( view ) ; }
public void onCategoriesLoaded ( List < String > categories ) { view . updateLists ( getSupportFragmentManager ( ) , categories ) ; }
public int getColorValue ( ) { mTmpHSV [ 0 ] = mCurrentValue ; mTmpHSV [ 1 ] = 1 . f ; mTmpHSV [ 2 ] = 1 . f ; return Color . HSVToColor ( mTmpHSV ) ; }
public int getCount ( ) { return 9 ; }
public static Drawable bitmapToDrawable ( Bitmap bitmap , Context context ) { return new BitmapDrawable ( context . getResources ( ) , bitmap ) ; }
public void onClick ( View v ) { prefSwitch . toggle ( ) ; }
public HashMap < String , Double > getRates ( ) { return rates ; }
public void onErrorResponse ( VolleyError volleyError ) { Message news = new Message ( ) ; news . arg1 = 2 ; handler . sendMessage ( news ) ; read_rates_from_offline ( ) ; }
public int getRowCount ( ) { if ( context . getNames ( ) != null && context . getNames ( ) . size ( ) != 0 ) { return context . getNames ( ) . size ( ) + 4 ; } else { return 2 ; } }
public void onSaveInstanceState ( Bundle outState ) { if ( mode == Mode . TRANSLATION ) { outState . putInt ( SI_RIGHT_TRANSLATION_SCROLL_POSITION , rightTranslation . findFirstCompletelyVisibleItemPosition ( ) ) ; } super . onSaveInstanceState ( outState ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; forceSquareAlbumCover ( false ) ; PreferenceUtil . getInstance ( getActivity ( ) ) . registerOnSharedPreferenceChangedListener ( this ) ; loadAlbumCover ( ) ; }
public void onBackPressed ( ) { if ( sideNavDrawer . isDrawerOpen ( GravityCompat . START ) ) { sideNavDrawer . closeDrawer ( GravityCompat . START ) ; } super . onBackPressed ( ) ; }
public void onDataSetChanged ( ) { if ( cursor != null ) cursor . close ( ) ; cursor = getContentResolver ( ) . query ( uri , LIBRARY_COLUMNS , null , null , null ) ; }
public void onFailure ( Call < ResKavaBep3Param2 > call , Throwable t ) { Toast . makeText ( getContext ( ) , R . string . error_network_error , Toast . LENGTH_SHORT ) . show ( ) ; }
public AboutBuilder addAction ( @ NonNull BitmapDrawable icon , int label , Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
public View getViewAt ( int position ) { RecyclePagerAdapter . ViewHolder holder = pagerAdapter . getViewHolder ( position ) ; return holder == null ? null : PagerAdapter . getImage ( holder ) ; }
public boolean hasAuthorUrl ( ) { return ! TextUtils . isEmpty ( authorUrl ) ; }
public MenuStatusMessage ( @ NonNull String playerId , @ NonNull String menuDirective , @ NonNull Plugin [ ] menuItems ) { this . playerId = playerId ; this . menuDirective = menuDirective ; this . menuItems = menuItems ; }
public Builder clearType ( ) { bitField0_ = ( bitField0_ & ~0x00000001 ) ; type_ = com . coinomi . core . protos . Protos . Key . Type . ORIGINAL ; onChanged ( ) ; return this ; }
public boolean presentFragment ( BaseFragment fragment ) { return presentFragment ( fragment , false , false , true ) ; }
private ArrayList < Song > getQueue ( @ NonNull final String tableName ) { Cursor cursor = getReadableDatabase ( ) . query ( tableName , null , null , null , null , null , null ) ; return SongLoader . getSongs ( cursor ) ; }
private MediaModel getMediaFromInProgressQueueById ( int id ) { for ( MediaModel media : sInProgressUploads ) { if ( media . getId ( ) == id ) return media ; } return null ; }
public BigDecimal getEnergyDensityAmount ( ) { return energyDensityAmount ; }
private boolean hasTagTitle ( ) { return ! TextUtils . isEmpty ( tagTitle ) ; }
public void stop ( ) { mParent . clearAnimation ( ) ; setRotation ( 0 ) ; mRing . setShowArrow ( false ) ; mRing . setColorIndex ( 0 ) ; mRing . resetOriginals ( ) ; }
public ListElement render ( ) { return this ; }
public void clear ( ) { mUndoModeActive = false ; mBitmap . eraseColor ( 0 ) ; mUndo . clear ( ) ; invalidate ( ) ; if ( mActivity . get ( ) != null ) { mActivity . get ( ) . supportInvalidateOptionsMenu ( ) ; } }
public void setCurrentData ( WeatherModel weatherModel ) { currentTemperatureTv . setText ( weatherModel . getCurrentTempCentigrade ( ) + getString ( R . string . centigrade ) ) ; currentLocationTv . setText ( weatherModel . getLocationName ( ) ) ; }
public void onStop ( ) { super . onStop ( ) ; clearNowButtonListener ( ) ; if ( layoutManager != null ) listPosition = layoutManager . findFirstVisibleItemPosition ( ) ; }
public int getKey_symbol_offset_x ( ) { return key_symbol_offset_x ; }
public int getSpanSize ( int position ) { if ( adapter . getItemViewType ( position ) == BackpackAdapter . VIEW_TYPE_HEADER ) { return columnCount ; } else { return 1 ; } }
public List < BeverageDetails > getBeverageDetail ( ) { return mBeverageDetail ; }
public void reinstateLesson ( ) { requery ( ) ; notifyItemInserted ( mLastDeletedPosition ) ; notifyChangedLessonRange ( mLastDeletedPosition + 1 ) ; }
public Single < List < Session >> getSessions ( @ NonNull Locale locale ) { if ( locale == Locale . JAPAN ) { return droidKaigiService . getSessionsJa ( ) ; } else { return droidKaigiService . getSessionsEn ( ) ; } }
public String getAppOrSystemLanguageCode ( ) { String code = appLanguageState . getAppOrSystemLanguageCode ( ) ; if ( AccountUtil . getUserIdForLanguage ( code ) == 0 ) { getUserIdForLanguage ( code ) ; } return code ; }
public VersionedRook renameBook ( Uri fromUri , String name ) { Uri toUri = UriUtils . getUriForNewName ( fromUri , name ) ; return dbRepo . renameBook ( fromUri , toUri ) ; }
public int getStartActivity ( ) { return Integer . parseInt ( mSharedPreferences . getString ( PREF_KEY_START_ACTIVITY , new Integer ( START_BOARDS ) . toString ( ) ) ) ; }
public void onSearchFragmentClick ( CodeSearchResult result , int matchIndex ) { openFileViewer ( result , matchIndex ) ; }
public Builder positiveText ( @ StringRes int positiveRes ) { if ( positiveRes == 0 ) return this ; positiveText ( this . context . getText ( positiveRes ) ) ; return this ; }
public static CompositeMessage fromCursor ( Context context , Cursor cursor ) { CompositeMessage msg = new CompositeMessage ( ) ; msg . populateFromCursor ( cursor ) ; return msg ; }
public Subscription getSubscription ( ) { return subscription ; }
public String getLinkUrl ( ) { return linkUrl ; }
private void retryDecryption ( Message message ) { message . setEncryption ( Message . ENCRYPTION_PGP ) ; activity . onConversationsListItemUpdated ( ) ; updateMessages ( ) ; conversation . getAccount ( ) . getPgpDecryptionService ( ) . decrypt ( message , false ) ; }
private void handleConfigurationCommand ( Intent intent ) { if ( ! isRecording ( ) ) { return ; } if ( MotoScoreApp . preferences . useMediaButton ( ) ) { registerMediaButton ( ) ; } else { unregisterMediaButton ( ) ; } }
private PhotoPickerFragment getPickerFragment ( ) { Fragment fragment = getFragmentManager ( ) . findFragmentByTag ( PICKER_FRAGMENT_TAG ) ; if ( fragment != null ) { return ( PhotoPickerFragment ) fragment ; } return null ; }
private void setRecyclerAdapter ( Issue issue ) { if ( mRecyclerAdapter == null ) { mRecyclerAdapter = new IssueDecisionRecyclerAdapter ( this , issue ) ; } else { ( ( IssueDecisionRecyclerAdapter ) mRecyclerAdapter ) . setIssue ( issue ) ; } mRecyclerView . setAdapter ( mRecyclerAdapter ) ; }
public Socket createSocket ( Socket socket , String host , int port , boolean autoClose ) throws IOException , UnknownHostException { return getSSLContext ( ) . getSocketFactory ( ) . createSocket ( socket , host , port , autoClose ) ; }
public void setIgnoreUsers ( HashMap < Integer , TLRPC . User > users ) { ignoreUsers = users ; }
private File createDir ( String name ) { File file = new File ( Environment . getExternalStorageDirectory ( ) , name ) ; file . mkdir ( ) ; assertTrue ( file . exists ( ) ) ; return file ; }
public < T > T [ ] toArray ( T [ ] a ) { throw new UnsupportedOperationException ( ) ; }
public String name ( String weaponName ) { return Utils . format ( Game . getVar ( R . string . Potential_Txt ) , weaponName ) ; }
private ThemeConfig ( Context context , JSONObject themeObject ) { mThemeObject = new CommonUtils ( ) . deepMergeJSONObject ( themeObject , ThemeDefault . getDefaultTheme ( context ) ) ; }
public void reload ( ) { ( ( RequestsRecycler ) mRequestList . getAdapter ( ) ) . notifyDataSetHasChanged ( ) ; showEmptyWhenNecessary ( ) ; }
public ViewRenderer getViewRenderer ( ) { return _ui ; }
public static < T > List reverse ( List < T > list ) { List reversed = new ArrayList ( ) ; for ( T item : list ) { reversed . add ( 0 , item ) ; } return reversed ; }
public Flowable < List < AppItem >> getAll ( ) { return appItemDao . getAll ( new MutableSortSQLiteQuery ( ) ) ; }
public void run ( ) { if ( mService != null ) { mVolume . setText ( makeBar ( scaleVolume ( mService . getMaxAmplitude ( ) ) ) ) ; mVolumeHandler . postDelayed ( this , 100 ) ; } }
private MyPreferenceFragment getPreferenceFragment ( ) { return ( MyPreferenceFragment ) getFragmentManager ( ) . findFragmentByTag ( "PREFERENCE_FRAGMENT" ) ; }
public int getItemCount ( ) { return libs . length ; }
public void editStyle ( RPSParty game ) { skin . add ( "createPartyImage" , game . getAssetManager ( ) . get ( "test . jpg" ) ) ; style = new ButtonStyle ( ) ; style . up = skin . getDrawable ( "createPartyImage" ) ; }
private String buildNotificationTitleForMedia ( ) { return mContext . getString ( R . string . uploading_post_media ) ; }
public void registerExpression ( final String expression , final String id ) { executorService . submit ( new Runnable ( ) { @ Override public void run ( ) { handleExpressions ( ClientPaths . REGISTER_EXPRESSION , expression , id ) ; } } ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { mMinutes = mMinuteSpinner . getSelectedItem ( ) . toString ( ) ; }
public void onResponse ( Call < AuthSignupResponse > call , Response < AuthSignupResponse > response ) { Log . d ( applicationContext . getString ( R . string . app_name ) , "response : " + response ) ; }
public void Navigator ( ) { }
public void setScrollingEnabled ( boolean enabled ) { mScrollable = enabled ; }
public void onRefresh ( ) { stopRefreshAnimation ( ) ; }
public void onCreate ( SQLiteDatabase db ) { createDbVersion4 ( db ) ; }
public void onAuthenticationError ( int errMsgId , CharSequence errString ) { Log . w ( TAG , "Authentication error : " + errMsgId + " " + errString ) ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfFrost_Info ) ; }
public TeXSymbolParser ( ) throws ResourceParseException , IOException { this ( jLatexMath . getAssetManager ( ) . open ( RESOURCE_NAME ) , RESOURCE_NAME ) ; }
public void testDeleteWithNotExistsRecordById ( ) { int rowsAffected = DataSupport . delete ( Student . class , 998909 ) ; assertEquals ( 0 , rowsAffected ) ; }
public void detectsImgur ( ) { assertThat ( ContentType . getImageType ( "https : }
public void onLowMemory ( ) { super . onLowMemory ( ) ; if ( mapView != null ) { mapView . onLowMemory ( ) ; } }
public void notifyChildItemMoved ( int groupPosition , int fromChildPosition , int toChildPosition ) { mAdapter . notifyChildItemMoved ( groupPosition , fromChildPosition , toChildPosition ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; applyRecyclerViewPaddingForLayoutRes ( getRecyclerView ( ) , currentLayoutRes ) ; }
public static void log ( Context context , int sId , Types type , int duration ) { log ( context , context . getString ( sId ) , type , duration ) ; }
public boolean isDuringChange ( ) { return applyingParams || moving || saveResume ; }
public String getCorreo ( ) { return correo ; }
public void onError ( String error ) { mOnErrorCalled = true ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . texture : { if ( mIsRecordingVideo ) { startViolationRecording ( ) ; } break ; } } }
public UploadObject createFromParcel ( Parcel in ) { return new UploadObject ( in ) ; }
public Date getDate ( ) { return date ; }
public Sched getSched ( ) { return mSched ; }
public void run ( ) { CardDeviceManager . INSTANCE . cardDevices . put ( cardDevice . getID ( ) , cardDevice ) ; }
public int computeVerticalScrollOffset ( RecyclerView . State state ) { return computeScrollOffset ( state ) ; }
public static String getPassword ( ) throws NotInitedException { if ( Util . isNullOrEmpty ( mPasswordHash ) ) { throw new NotInitedException ( ) ; } return mPassword ; }
public void start ( ) { showLastUpdateTime ( ) ; getNews ( ) ; }
public void update ( AppItem item ) { Completable . fromAction ( ( ) -> appItemDao . update ( item ) ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( ) ; }
public void log ( String s ) { CrashLoggingUtils . logException ( new AztecEditorFragment . AztecLoggingException ( s ) , T . EDITOR ) ; }
public static void mount_ro ( ) { Log . d ( TAG , "Mounting /system RO" ) ; Shell . SU . run ( Arrays . asList ( "mount - o ro , remount /system" ) ) ; }
public static Export parseExportUri ( String s ) throws GoogleAuthInfoException { Uri uri = Uri . parse ( s ) ; if ( uri == null ) { throw new GoogleAuthInfoException ( "Bad URI format" ) ; } return GoogleAuthInfo . parseExportUri ( uri ) ; }
public void setDy ( int dy ) { this . dy = dy ; }
public String getTotalDuration ( ) { return null ; }
public DatabaseHelper ( Context context ) { super ( context , DatabaseContract . DATABASE_NAME , null , DatabaseContract . DATABASE_VERSION ) ; }
public void onLoadMore ( int page , int totalItemsCount , RecyclerView view ) { NotificationsFragment . this . onLoadMore ( ) ; }
private static byte [ ] serializedUsTrie ( Trie trie ) { Language language = new EnglishUS ( ) ; TrieTest . addWords ( trie , FullUsGbTrieTest . readDictionary ( language ) , language ) ; return TrieTest . serialize ( trie ) ; }
public static void deleteRunkeeperToken ( ) { cSharedPreferences . edit ( ) . remove ( SP_RUNKEEPER_TOKEN ) . commit ( ) ; cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_RUNKEEPER , false ) . commit ( ) ; }
public static int dpToPxSize ( Context context , int dp ) { return ( int ) ( 0 . 5f + dpToPx ( context , dp ) ) ; }
public static Observable < ViewScrollChangeEvent > create ( @ NonNull View view ) { return Observable . create ( new ViewTreeScrollChangedListener ( view ) ) ; }
public FitSystemRelativeLayout ( @ NonNull Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public MyViewHolder ( Button v ) { super ( v ) ; mView = v ; }
public DatabaseHelper ( Context context ) { super ( context , DATABASE_NAME , null , DATABASE_VERSION ) ; mContext = context ; }
public void setData_updatesWidgetAnswer ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setBinaryData ( answer ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer ) ; }
private static ArrayList < ? extends Song > getPlaylistSongs ( @ NonNull Activity activity , Playlist playlist ) { return playlist instanceof AbsSmartPlaylist ? ( ( AbsSmartPlaylist ) playlist ) . getSongs ( activity ) : PlaylistSongLoader . getPlaylistSongList ( activity , playlist . id ) ; }
public static UserPostListingURL getHidden ( String username ) { return new UserPostListingURL ( Type . HIDDEN , username , null , null , null ) ; }
public QoSTestResultEnum getTestType ( ) { return QoSTestResultEnum . UDP ; }
public DsiPanelProfiles getDsiPanelProfiles ( ) { try { if ( dsiPanelProfiles == null && JSON != null ) dsiPanelProfiles = new DsiPanelProfiles ( JSON . getJSONArray ( "dsi_panel" ) ) ; return dsiPanelProfiles ; } catch ( JSONException e ) { return null ; } }
public void setUp ( ) throws Exception { super . setUp ( ) ; getInstrumentation ( ) . waitForIdleSync ( ) ; }
public void setTitle ( String title ) { document . setTitle ( title ) ; notifyPropertyChanged ( BR . title ) ; }
public TerminalRow ( int columns , int style ) { mColumns = columns ; mText = new char [ ( int ) ( SPARE_CAPACITY_FACTOR * columns ) ] ; mStyle = new int [ columns ] ; clear ( style ) ; }
public int getAttractionId ( ) { return attractionId ; }
public void onLoadData ( boolean forced ) { if ( forced ) { AnalyticsTracker . track ( Stat . READER_PULL_TO_REFRESH ) ; } updatePosts ( forced ) ; }
public void onClick ( DialogInterface dialog , int which ) { guiListener . shutdown ( true , true , false ) ; AndroidSingleton . onRealDestroy ( AndroidPlatform . this ) ; finish ( ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; image = ( ImageView ) itemView . findViewById ( R . id . image ) ; overlay = itemView . findViewById ( R . id . overlay ) ; }
public void reuse ( ) { if ( address != 0 ) { native_reuse ( address ) ; } }
public void onClick ( View view ) { navigator . onSaveAnswerIfCompleted ( questionContainer ) ; navigator . onNext ( ) ; }
public void run ( ) { final ViewerActivity activity = getManagedComponent ( ) ; IUIManager . instance . setProgressSpinnerVisible ( activity , currentlyDecoding > 0 ) ; }
private void resetTitle ( ) { UITools . setActionBarTitle ( getSupportActionBar ( ) , R . string . file_manager_select_storage_title ) ; }
public int compare ( AppInfo o1 , AppInfo o2 ) { return o1 . getAppName ( ) . compareTo ( o2 . getAppName ( ) ) ; }
public Object visit ( FSobject FSobject ) { icon . setImageResource ( R . drawable . dir24 ) ; return null ; }
public void stoppedVideo ( int video_method , Uri uri , String filename ) { }
public void removeDirectListener ( NotificationListener listener ) { directListeners . remove ( listener ) ; }
public ArrayAdapter < Note > getNoteList ( ) { return this . noteList ; }
public WINDOW_TYPE getWindowType ( ) { return window ; }
public static boolean isAnonymousNumber ( String number ) { return number . endsWith ( "x" ) ; }
public void cleanup ( ) { removeDirectory ( new File ( DESTINATION_DIRECTORY ) ) ; }
public boolean hasShortUrl ( ) { return ! TextUtils . isEmpty ( shortUrl ) ; }
public String getReadingElementValue ( ) { return mReadingElementValue ; }
public EighthActivityItem [ ] newArray ( int size ) { return new EighthActivityItem [ size ] ; }
private String getPadNameFromInput ( TextView input ) { String padName = ( String ) input . getText ( ) . toString ( ) ; return padName ; }
public static void userPremium ( ) { MenuItem item = ( MenuItem ) MainActivity . getActivity ( ) . getNavigationView ( ) . getMenu ( ) . findItem ( R . id . nav_premium ) ; item . setVisible ( false ) ; }
public void run ( ) { try { database . executeFast ( "DELETE FROM secret_holes WHERE uid = " + enc_id ) . stepThis ( ) . dispose ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public PodcastSlidingUpPanelLayout getSlidingLayout ( ) { return sliding_layout ; }
public void onFailure ( Call < ResBnbTxInfo > call , Throwable t ) { WLog . w ( "BNB onFailure" ) ; if ( IS_SHOWLOG ) t . printStackTrace ( ) ; if ( isFinishing ( ) ) return ; }
public void setRealJid ( Jid jid ) { this . realJid = jid != null ? jid . toBareJid ( ) : null ; }
public void onCheckChange ( boolean isChecked ) { if ( isChecked ) continueCheck ( ) ; else continueUncheck ( ) ; }
public int getElimPoints ( ) { return elimPoints ; }
private void setupEsewaConfig ( ) { if ( mEsewConfiguration != null ) return ; mEsewConfiguration = new ESewaConfiguration ( ) . clientId ( Constants . ESEWA_CLIENT_ID ) . secretKey ( Constants . ESEWA_SECRET_KEY ) . environment ( ESewaConfiguration . ENVIRONMENT_TEST ) ; }
public MusicStateReceiver ( final AbsMusicStateActivity activity ) { reference = new WeakReference <> ( activity ) ; }
public List < Recipe > loadNextRecipes ( Label label , int offset , int limit ) { return storage . getRecipes ( label , offset , limit ) ; }
private void saveDeviceWidth ( ) { Resources resources = getResources ( ) ; DisplayMetrics displayMetrics = resources . getDisplayMetrics ( ) ; int deviceWidth = displayMetrics . widthPixels ; HaprampPreferenceManager . getInstance ( ) . setDEviceWidth ( deviceWidth ) ; }
public long getItemId ( int i ) { return RecyclerExListView . NO_ID ; }
public void setInnerShapeColor ( int innerShapeColor ) { this . innerP1 . setColor ( innerShapeColor ) ; invalidate ( ) ; }
public boolean canZoomOutMoreY ( ) { return ( mScaleY > mMinScaleY ) ; }
public String getModel ( ) { return formTemplate . getModel ( ) ; }
private BroadcastReceiver iconArrangeModeReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { enterIconArrangeMode ( ) ; } } ;
public FormulaTermTypeIf . GroupType getGroupType ( ) { return FormulaTermTypeIf . GroupType . INTERVALS ; }
public CheckBoxBuilder withCheckbox ( boolean checked ) { CheckBox checkBox = ( CheckBox ) v . findViewById ( R . id . checkbox ) ; checkBox . setChecked ( checked ) ; return this ; }
public void setAfterSwipeReaction ( @ SwipeableItemReactions int reaction ) { mAfterSwipeReaction = reaction ; }
public void notifyChildItemRangeChanged ( int groupPosition , int childPositionStart , int itemCount , Object payload ) { mAdapter . notifyChildItemRangeChanged ( groupPosition , childPositionStart , itemCount , payload ) ; }
private float getBitmapY ( boolean scale ) { if ( scale ) { return this . bitmapY / 10 ; } return this . bitmapY ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstaceState ) { return inflater . inflate ( R . layout . webview_content , container , false ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . addLocation ) { if ( ! mRequestingLocationUpdates ) { startLocationUpdates ( ) ; } return true ; } return super . onOptionsItemSelected ( item ) ; }
public void setUserInfo ( TLRPC . TL_userFull value ) { userInfo = value ; }
public void getParity ( UsbParityCallback parityCallback ) { this . parityCallback = parityCallback ; }
public void onActionReplay ( ) { checkVibrateOnClickState ( ) ; TimeManager . INSTANCE . reStart ( ) ; updateNotification ( ) ; }
public SharedPreference getDefaultInstanceForType ( ) { return defaultInstance ; }
public void onPrepared ( MediaPlayer mp ) { previewPlayer . start ( ) ; togglePreviewPlayerButton ( ) ; }
private void showNextUpPanel ( ) { if ( mIsVisible ) hide ( ) ; if ( mPopupPanelVisible ) hidePopupPanel ( ) ; mNextUpPanel . startAnimation ( showNextUp ) ; mNextUpPanelVisible = true ; }
public String info ( ) { if ( activated ) { return Game . getVar ( R . string . BlackSkull_Info_Awakened ) ; } else { return Game . getVar ( R . string . BlackSkull_Info ) ; } }
public void onViewDetachedFromWindow ( RecyclerView . ViewHolder holder ) { try { ( ( MessageListHolder_file_incoming_state_cancel ) holder ) . DetachedFromWindow ( ) ; } catch ( Exception e ) { } }
public void onClick ( View view ) { ( ( OnCardDataSourceClickCallback ) getActivity ( ) ) . onManualEntryClick ( getArguments ( ) . getInt ( "callback_id" ) ) ; }
private void fillViewsWithFileTags ( ) { albumTitle . setText ( getAlbumTitle ( ) ) ; albumArtistName . setText ( getAlbumArtistName ( ) ) ; genreName . setText ( getGenreName ( ) ) ; year . setText ( getSongYear ( ) ) ; }
public static File getSaveGameDir ( File game ) { File ret = new File ( saves , game . getName ( ) ) ; ret . mkdirs ( ) ; return ret ; }
public String [ ] getValuePaths ( ) { return new String [ ] { "heart_rate" } ; } ;
public static org . thoughtcrime . securesms . backup . BackupProtos . SharedPreference parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public boolean getShowWidgetHeader ( ) { return sharedPreferences . getBoolean ( PREF_SHOW_WIDGET_HEADER , true ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . loading_layout , container , false ) ; }
public void opponentChoosePaper ( ) { player2Entity = new PaperHandBody ( world , ( PaperHandModel ) MatchModel . getInstance ( ) . setOpponentChoice ( "paper" ) ) ; player2Entity . setLinearVelocity ( 0f , - 200f ) ; }
public static MyLocation currentLocation ( ) { MyLocation location = new MyLocation ( ) ; location . id = CURRENT_LOCATION_ID ; location . name = " < CURRENT_LOCATION > " ; location . provider = location . resolvedAddress = "?" ; return location ; }
public void applyEffect ( byte effectId ) { switch ( effectId ) { case EFFECT_SPEED_PICKUP_BOOST : queueBorderScaling ( 1 . 5f , . 0001f ) ; break ; } }
public void migrate1To2 ( ) throws IOException { SupportSQLiteDatabase db = helper . createDatabase ( TEST_DB , 1 ) ; db . close ( ) ; helper . runMigrationsAndValidate ( TEST_DB , 2 , true , new Migration12 ( ) ) ; }
public NumberEditText ( Context context ) { super ( context ) ; setUp ( context , null ) ; }
public void onGroupExpand ( int groupPosition , boolean fromUser ) { if ( fromUser ) { adjustScrollPositionOnGroupExpanded ( groupPosition ) ; } }
public static int loadShader ( String file ) { return loadShaderVersioned ( file , null ) ; }
public void onReceive ( Context context , Intent intent ) { updateAndPopulate ( ) ; }
public void onClick ( View v ) { SparkleHelper . startTrends ( context , nationId , TrendsActivity . TREND_NATION , id ) ; }
public com . google . protobuf . AnyOrBuilder getTokenOrBuilder ( ) { if ( tokenBuilder_ != null ) { return tokenBuilder_ . getMessageOrBuilder ( ) ; } else { return token_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : token_ ; } }
public boolean isAudioPicker ( ) { return this == GUTENBERG_SINGLE_FILE_PICKER ; }
public void onProfileSelected ( String contactId ) { mExpenseManager . saveDefaultProfile ( contactId ) ; }
public void onSuccess ( List < MovieScheduleEntity > movieSchedules ) { MovieScheduleRecyclerViewAdapter adapter = movieScheduleView . onGetMovieScheduleRecyclerViewAdapter ( ) ; adapter . setMovieSchedules ( movieSchedules ) ; adapter . notifyItemRangeChanged ( 0 , movieSchedules . size ( ) ) ; }
public boolean onKeyDown ( int keyCode , KeyEvent msg ) { return _ui . doKeyDown ( keyCode , msg ) ; }
public void onSuccess ( Uri uri ) { String downloadUrl = uri . toString ( ) ; addReflectionUrlToFirebase ( groupName , storyId , contentId , contentGroup , contentGroupName , downloadUrl ) ; }
public Widget ( LayoutManager layoutManager , SizeMetric heightMetric , SizeMetric widthMetric ) { this ( layoutManager , new SizeMetrics ( heightMetric , widthMetric ) ) ; }
public void movePlaneLeft ( ) { boolean valid = m_PlaneRound . movePlaneLeft ( m_Selected ) == 1 ? true : false ; updateBoards ( ) ; m_BottomPane . setDoneEnabled ( valid ) ; }
public void gridSpanNumsIsCorrect ( ) throws Exception { assertEquals ( 7 , FragmentIcons . getColumns ( GRID_ORIENTATION_HORIZONTAL , 640 , 480 , 120 , 64 ) ) ; assertEquals ( 5 , FragmentIcons . getColumns ( GRID_ORIENTATION_VERTICAL , 640 , 480 , 120 , 64 ) ) ; }
public void shouldNotPassValidation_invalidMiddleName ( ) { patient . getPerson ( ) . getName ( ) . setMiddleName ( INVALID_NAME_3 ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public void testViewed ( ) { assertNull ( item . isViewed ( ) ) ; item . setIsViewed ( false ) ; assertFalse ( item . isViewed ( ) ) ; }
public void setMonth ( int month ) { this . month = month ; }
public void store ( Context context ) { writeMenu ( context , icons ) ; }
public String getCountry ( ) { if ( mRuns == null ) { return "" ; } Run firstRun = mRuns . get ( 0 ) ; return firstRun . getFirstRunner ( ) . getCountry ( ) ; }
public ReportSender create ( @ NonNull Context context , @ NonNull CoreConfiguration config ) { return new HockeySender ( ) ; }
public void replyComplete ( ) { isRefreshing . set ( true ) ; loadMore ( ) ; }
public StimulusView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public Renderer getFaceNormalsDrawer ( ) { return getDrawer ( null , false , false , false , false ) ; }
public Single < Tag > getById ( String id ) { throw new UnsupportedOperationException ( ) ; }
public Bitmap lookup ( Track track ) { String albumArtPath = FsReader . getAlbumArt ( track . GetRootSrc ( ) , db ) ; if ( ! Shorty . isVoid ( albumArtPath ) ) { return BitmapFactory . decodeFile ( albumArtPath ) ; } return null ; }
private int doUpdateAssociations ( DataSupport baseObj , long id , ContentValues values ) { int rowsAffected = 0 ; analyzeAssociations ( baseObj ) ; updateSelfTableForeignKey ( baseObj , values ) ; rowsAffected += updateAssociatedTableForeignKey ( baseObj , id ) ; return rowsAffected ; }
public void setDatetime ( Integer datetime ) { this . datetime = datetime ; }
public static Sorting getBaseSubmissionSort ( String sub ) { return Sorting . valueOf ( prefs . getString ( "defaultSort" + sub . toLowerCase ( Locale . ENGLISH ) , Reddit . defaultSorting . name ( ) ) ) ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String s ) { if ( s . equals ( context . getString ( R . string . saved_max_level ) ) ) { updateLevelList ( ) ; } }
public void resetChoices ( ) { myChoice = "" ; opponentChoice = "" ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { if ( count >= 1 && s . charAt ( start ) == ' ' ) { updateChips ( ) ; } }
public void onMovieClicked ( Movie movie , CompactMovieHolder holder ) { if ( ! mIsOpeningDetails ) { mIsOpeningDetails = true ; MovieDetailActivity . start ( getActivity ( ) , movie , holder . getPosterView ( ) ) ; } }
public User build ( ) { return new User ( UID , username , name , address , emails , mobile , gradYear ) ; }
public SongAdapter ( AppCompatActivity activity , ArrayList < Song > dataSet , @ LayoutRes int itemLayoutRes , boolean usePalette , @ Nullable CabHolder cabHolder ) { this ( activity , dataSet , itemLayoutRes , usePalette , cabHolder , true ) ; }
public boolean isFemale ( ) { return presedinteBesvesteFemeie ; }
public DownloadWithUpdate process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return DownloadWithUpdate . create ( client , obj . getJSONObject ( "result" ) , false ) ; }
public VolumeKeyEvent ( long downTime , long eventTime , int action , int code , int repeat , int metaState ) { super ( downTime , eventTime , action , code , repeat , metaState ) ; this . mVolumeKeyEventType = VOLUME_KEY_EVENT_NATIVE ; this . mPrevCurrentValue = null ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { WallpaperCell view = new WallpaperCell ( mContext ) ; return new Holder ( view ) ; }
private void unlockSwipeRightToGoBack ( ) { if ( mSlidrInterface != null ) { mSlidrInterface . unlock ( ) ; } }
public void insertList ( ArrayList < Category > list ) { items = list ; notifyDataSetChanged ( ) ; }
public void setUp ( ) throws Exception { mSubscriber = new EventInfoSubscriber ( ) ; mEvent = ModelMaker . getModel ( Event . class , "2015necmp" ) ; }
public FriendRequestAdapter ( List < InformationDTO > friendRequestList ) { this . mFriendRequestList = friendRequestList ; }
public int getCount ( ) { return fragments . size ( ) ; }
public void btnComecarAvaliacao_Click ( View view ) { Intent intentVaiPraListaDeAvaliacoes = new Intent ( PerfilActivity . this , TimerActivity . class ) ; intentVaiPraListaDeAvaliacoes . putExtra ( "paciente" , paciente ) ; startActivity ( intentVaiPraListaDeAvaliacoes ) ; }
private void tagBookmark ( long id ) { if ( ! mIsPaused ) { FragmentManager fm = getSupportFragmentManager ( ) ; TagBookmarkDialog tagBookmarkDialog = TagBookmarkDialog . newInstance ( id ) ; tagBookmarkDialog . show ( fm , TagBookmarkDialog . TAG ) ; } }
public ArrayList < TLRPC . FileLocation > getImagesArrLocations ( ) { return imagesArrLocations ; }
public SingleSampleMediaSource createMediaSource ( Uri uri , Format format , long durationUs ) { isCreateCalled = true ; return new SingleSampleMediaSource ( uri , dataSourceFactory , format , durationUs , minLoadableRetryCount , treatLoadErrorsAsEndOfStream , tag ) ; }
public static void logException ( String context , Exception e ) { logException ( LogLevel . ERROR , context , e ) ; }
public void onFinish ( ) { setup_fixutres ( ) ; }
public int getLostStatus ( ) { return lostStatus ; }
public Loader < BookmarkParser . BookmarksContainer > onCreateLoader ( int id , Bundle args ) { AsyncContentLoader l = new AsyncContentLoader ( getSupportActivity ( ) ) ; showLoadingAnimation ( ) ; return l ; }
public void onNext ( Group group ) { getMvpView ( ) . showProgressbar ( false ) ; getMvpView ( ) . showGroupSyncResponse ( ) ; }
public void onSuccessfully ( EventViewModel event ) { EventBus . getDefault ( ) . post ( new EventCreatedEvent ( event ) ) ; finish ( ) ; }
public UgentNewsArticle getNewsItem ( ) { return newsItem ; }
public AdaptationState ( JSONObject result ) throws JSONException { }
public Forum getParent ( ) { return parent ; }
public void remove ( SensorType device ) { mNetworkDataSinkMap . remove ( device ) ; }
public void onSelected ( final PostListingURL postListingURL ) { ( ( MainMenuSelectionListener ) getSupportActivity ( ) ) . onSelected ( postListingURL ) ; }
private void setFabBackgroundColor ( int color ) { mFab . setBackgroundTintList ( ColorStateList . valueOf ( color ) ) ; }
public String getServingValue ( ) { return servingValue ; }
public boolean isCollapsed ( final RedditChangeDataManagerVolatile changeDataManager ) { if ( ! isComment ( ) ) { return false ; } return mComment . isCollapsed ( changeDataManager ) ; }
public void onMediaStoreChanged ( ) { super . onMediaStoreChanged ( ) ; refresh ( ) ; }
public Fragment getItem ( int position ) { return GridViewFragment . newInstant ( position ) ; }
public Builder withPage ( int page ) { mPage = page ; return this ; }
private static boolean isSupport ( Object o ) { return o instanceof VKApiUser || o instanceof Post || o instanceof Photo || o instanceof Comment || o instanceof Video || o instanceof Topic ; }
public Date getStartDate ( ) { return null ; }
private void setupAdapter ( RecyclerView listView ) { listView . setAdapter ( getItemAdapter ( ) ) ; Integer position = ( Integer ) getRetainedValue ( TAG_POSITION ) ; if ( position != null ) { listView . scrollToPosition ( position ) ; } }
public void setDistributeEvenly ( boolean distributeEvenly ) { mDistributeEvenly = distributeEvenly ; }
public List < Long > getGenreIds ( ) { return genreIds ; }
public static int getTerminalMarginHorizontalInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNotInRange ( TermuxPropertyConstants . KEY_TERMINAL_MARGIN_HORIZONTAL , DataUtils . getIntFromString ( value , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_HORIZONTAL_MARGIN ) , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_HORIZONTAL_MARGIN , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_HORIZONTAL_MIN , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_HORIZONTAL_MAX , true , true , LOG_TAG ) ; }
public boolean hasResponseDisconnect ( ) { return ( ( bitField0_ & 0x00400000 ) == 0x00400000 ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_prefs = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) . getApplicationContext ( ) ) ; m_prefs . registerOnSharedPreferenceChangeListener ( this ) ; m_activity = ( FeedsActivity ) activity ; }
public void setShowComment ( boolean value ) { show_comment = value ; }
public LoginFlow enterPassword ( String password ) { populateTextField ( R . id . input , password ) ; clickOn ( R . id . primary_button ) ; return this ; }
public synchronized void enqueue ( E object ) { if ( set . add ( object ) ) { queue . addLast ( object ) ; } }
public void testInvalidJsonDoesntWork ( ) throws IOException { ObjectMapper om = new ObjectMapper ( ) ; DeviceQrCode code2 = null ; code2 = om . readValue ( incorrectQrCodeString1 , DeviceQrCode . class ) ; Assert . assertNull ( code2 ) ; }
public boolean getSuggestions ( ) { return suggestions ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_help_support . TLdeserialize ( stream , constructor , exception ) ; }
public NotificationsCheckCell ( Context context ) { this ( context , 21 ) ; }
public void setSorting ( CommentSort sort ) { defaultSorting = sort ; mLoadData = new LoadData ( false ) ; mLoadData . execute ( fullName ) ; }
private void startGame ( ) { setScreen ( new PaperGameScreen ( this ) ) ; }
public NotePlace ( long bookId ) { this . bookId = bookId ; place = Place . UNDEFINED ; }
public void onScrollStateChanged ( RecyclerView recyclerView , int newState ) { if ( newState == RecyclerView . SCROLL_STATE_DRAGGING ) { AndroidUtilities . hideKeyboard ( searchEditText ) ; } }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new SettingsScreen ( game ) ) ; }
public LottieAnimatableIntegerValue getOpacity ( ) { return opacity ; }
public ConversationListFragment getListFragment ( ) { return mFragment ; }
public static void setup ( ) { }
public ScannerView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; mScanner = null ; }
public JokeClass getRandomJoke ( ) { return jokes . getJokesList ( ) . get ( rand . nextInt ( jokes . getJokesList ( ) . size ( ) ) ) ; }
public String getCurrentPlaylist ( ) { PlayerState playerState = connectionState . getActivePlayerState ( ) ; if ( playerState == null ) return null ; return playerState . getCurrentPlaylist ( ) ; }
public static boolean isSearchInTags ( ) { return getBoolean ( R . string . pref_key_search_tags , DEF_SEARCH_IN_TAGS ) ; }
public void clearAnimation ( ) { mRelativeLayout . clearAnimation ( ) ; }
public AccountHeaderBuilder withNameTypeface ( Typeface typeface ) { this . mNameTypeface = typeface ; return this ; }
public boolean dispatchNestedPreFling ( float velocityX , float velocityY ) { return mChildHelper . dispatchNestedPreFling ( velocityX , velocityY ) ; }
private double poundTokg ( double num ) { return num * 0 . 453592 ; }
public void onRequestFailed ( SubredditRequestFailure failureReason ) { if ( handler != null ) { handler . onRequestFailed ( failureReason ) ; } }
public void setThumbnail ( Bitmap thumbnail ) { this . thumbnail = thumbnail ; }
public static Comparator < ResultBean > getNameComparator ( ) { return new NameComparator ( ) ; }
public void parse ( IRCCloudJSONObject object ) throws JSONException { if ( ! backlog ) { mChannels . updateTimestamp ( object . bid ( ) , object . getLong ( "timestamp" ) ) ; notifyHandlers ( EVENT_CHANNELTIMESTAMP , object ) ; } }
public Controller newController ( ) { return new StartMenuController ( this ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; setupView ( ) ; }
public void seek ( long position ) { parserState = STATE_READING_FLV_HEADER ; bytesToNextTagHeader = 0 ; }
public static DBLessons setupInstance ( Context context ) { if ( mInstance == null ) mInstance = new DBLessons ( context , DatabaseCreator . TABLE_NAME_ADMISSION_PERCENTAGES_DATA ) ; return mInstance ; }
public void onStatusOfApplicationClick ( ) { startActivity ( FragmentHandlerActivity . newIntent ( this , FragmentHandlerActivity . STATUS_OF_APPLICATION ) ) ; }
public void updateLatestPage ( int page ) { if ( initialDataSubscription != null ) { initialDataSubscription . unsubscribe ( ) ; } lastPageSubject . onNext ( page ) ; }
public void setFingerprintTrust ( String fingerprint , FingerprintStatus status ) { axolotlStore . setFingerprintTrust ( fingerprint , status ) ; }
public static int getTimeDeltaMilliseconds ( ) { return 1000 * 60 * 60 * 24 * MainActivity . planLength ; }
public ScannerView ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; mScanner = null ; }
public < T > T [ ] toArray ( T [ ] a ) { return filters . toArray ( a ) ; }
public float getCurrentZoom ( ) { return normalizedScale ; }
public void showGenericError ( ) { getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_generic ) , getString ( R . string . dialog_error_message_generic ) ) ; hideLoadingDialog ( ) ; }
public void onScrolled ( @ NotNull RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; if ( selectedAyah != null ) { updateAyahToolBarPosition ( ) ; } }
public void deleteSession ( Account account , AxolotlAddress contact ) { SQLiteDatabase db = this . getWritableDatabase ( ) ; deleteSession ( db , account , contact ) ; }
public void plotOptions ( ) { PlotOptions options = new PlotOptions ( 1 ) ; assertEquals ( 0xffee0000 , options . axis_color ) ; assertEquals ( 0xff555555 , options . grid_color ) ; }
private void savePreferences ( SharedPreferences sharedPreferences , String key , Boolean value ) { SharedPreferences . Editor preferencesEditor = sharedPreferences . edit ( ) ; preferencesEditor . putBoolean ( key , value ) ; preferencesEditor . apply ( ) ; }
private void onFailedToCreateClient ( ApiException e ) { Utils . showSnackBar ( this , getString ( R . string . create_client_failed ) ) ; loginProgress . setVisibility ( View . INVISIBLE ) ; loginButton . setVisibility ( View . VISIBLE ) ; }
public void leaveRoom ( ) { mChatRoom . removeMessageListener ( this ) ; mChatRoomsManager . leaveChatRoom ( mChatRoom , this ) ; }
private void dbContentChanged ( ) { listItems = db . getAllFavoritLocations ( mRegionItemJahr ) ; adapter = new ArrayAdapter_Mainlist ( mContext , listItems ) ; adapter . setCallingFragment ( TAG ) ; setListAdapter ( adapter ) ; }
public Builder sslSocketInitializer ( SSLInitializer initializer ) { this . mSSLInitializer = initializer ; return this ; }
private void initAttributes ( TypedArray attrs ) { mDividerViewId = attrs . getResourceId ( R . styleable . ReplyBar_dividerView , 0 ) ; }
public Drawable getCustomThumb ( ) { return customThumb ; }
public com . coinomi . core . protos . Protos . Key getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . Key . getDefaultInstance ( ) ; }
public SignVerifyMessageTask ( WalletAccount account , boolean signMessage , @ Nullable String password ) { this . account = account ; this . signMessage = signMessage ; this . password = password ; }
public void showErrorUi ( ) { progressBar . setVisibility ( View . VISIBLE ) ; errorLayout . setVisibility ( View . VISIBLE ) ; }
public void onClick ( View v ) { Log . d ( LOGTAG , "onclick for selectFolderButton" ) ; returnDirectoryFinishActivity ( ) ; }
private void clickChoice ( SelectOneWidget widget , int index ) { if ( WidgetAppearanceUtils . isNoButtonsAppearance ( formEntryPrompt ) ) { clickNoButtonChoice ( widget , index ) ; } else { clickButtonChoice ( widget , index ) ; } }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . dota . festmanager" , appContext . getPackageName ( ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; mDataProvider = new ExampleDataProvider ( true ) ; }
public void loadMenuSceneFromSettingsScene ( ) { setScene ( loadingScene ) ; endSceneService ( settingsSceneService ) ; startSceneService ( menuSceneService ) ; }
public BaseAdapterItemView setBindingVariable ( int bindingVariable ) { this . bindingVariable = bindingVariable ; return this ; }
public EventListSubscriber provideEventListRecyclerSubscriber ( Context context ) { return new EventListSubscriber ( context ) ; }
public double getMaxData ( ) { return maxData ; }
public Call < ResponseBody > upload ( SmartBirdsApi api , JsonObject data ) { return api . createInvertebrates ( data ) ; }
public void shouldNotInteractOnLocationsPermissionGrantedWithNullBaseActivityAndContent ( ) { givenPermissionChecker ( ) ; whenCheckingPermissions ( null , null ) ; thenShouldNotInteractWith ( mPermissionChecker ) ; }
public void run ( ) { try { termuxTask . executeInner ( context ) ; } catch ( IllegalThreadStateException | InterruptedException e ) { } }
public void setIsPublished ( boolean isPublished ) { this . isPublished = isPublished ; }
public void openVideo ( int accountId , @ NonNull Video apiVideo ) { PlaceFactory . getVideoPreviewPlace ( accountId , apiVideo ) . tryOpenWith ( getActivity ( ) ) ; }
public void onLocationChanged ( Location location ) { Timber . i ( "Location changed : %s" , location . toString ( ) ) ; if ( locationListener != null ) { locationListener . onLocationChanged ( GeoUtils . sanitizeAccuracy ( location ) ) ; } }
public ForceCompleteTextView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; Log . d ( TAG , "Service Destroyed" ) ; }
public void onPinConfirm ( final PinDialog dialog , final String pinValue ) { if ( isPinCorrect ( pinValue , dialog ) ) { sendLNPayment ( amountMsat , paymentRequest , invoiceAsString ) ; } else { handlePaymentError ( R . string . payment_error_incorrect_pin ) ; } }
public void onClick ( View v ) { homePresenter . onCategoryClick ( holder . getAdapterPosition ( ) , itemsList . get ( holder . getAdapterPosition ( ) ) ) ; }
private void prepareToChunk ( ) { mTablesLeft = new LinkedList < String > ( ) ; mTablesLeft . add ( "revlog" ) ; mTablesLeft . add ( "cards" ) ; mTablesLeft . add ( "notes" ) ; mCursor = null ; }
public Integer getFeeChargesWrittenOff ( ) { return feeChargesWrittenOff ; }
public void addAnimatorListener ( Animator . AnimatorListener listener ) { rootLayer . addAnimatorListener ( listener ) ; }
public JobServiceImpl ( ServiceLocator serviceLocator ) { this . serviceLocatorRef = new WeakReference <> ( serviceLocator ) ; this . workManager = WorkManager . getInstance ( ) ; }
public void setTimeString ( String formattedTime ) { mTimeView . setText ( TimeStringHelper . getTimeString ( formattedTime ) ) ; }
private double mitoyard ( double num ) { return num * 1760 . 00656 ; }
public void onZoomOut ( float value ) { zoomOut ( value ) ; }
public static File getDataDir ( File game ) { File ret = new File ( data , game . getName ( ) ) ; ret . mkdirs ( ) ; return ret ; }
private static double getBallAngle ( ) { return Math . atan ( ball . getYVel ( ) /ball . getXVel ( ) ) ; }
public void updateAyah ( @ NonNull SuraAyah suraAyah ) { final int page = QuranInfo . getPageFromSuraAyah ( suraAyah . sura , suraAyah . ayah ) ; mTagBookmarkPresenter . setAyahBookmarkMode ( suraAyah . sura , suraAyah . ayah , page ) ; }
private void handleLink ( String clickedLink ) { if ( clickedLink != null ) { Log . d ( "Main" , "clicked on " + clickedLink ) ; showUri ( book . handleClickedLink ( clickedLink ) ) ; } }
public void setup ( ) { super . initialize ( ) ; IdlingRegistry . getInstance ( ) . register ( networkIdlingResource ) ; when ( mockSpotifyApi . isAccessTokenValid ( ) ) . thenReturn ( true ) ; setSpotifyApiResult ( 50 ) ; }
public Fragment getItem ( int position ) { return mFragments . get ( position ) ; }
public GameSpriteInterface getCloudFg2 ( Resources res ) { return new CloudSprite ( res , this . cloudFg2DrawableId , this . cloudFg2InitPos . first , this . cloudFg2InitPos . second , this . cloudFg2Scale , this . cloudFg2SpeedX ) ; }
public TextImporter ( Collection col , @ NonNull String file ) { super ( col , file ) ; mFileobj = null ; mDelimiter = '\0' ; mTagstoadd = new String [ 0 ] ; }
public static List < Community > transformCommunities ( List < VKApiCommunity > dtos ) { return MapUtil . mapAll ( dtos , Dto2Model : : transformCommunity ) ; }
public void closeToRight ( ) { if ( viewDragHelper . smoothSlideViewTo ( dragView , transformer . getOriginalWidth ( ) , getHeight ( ) - transformer . getMinHeightPlusMargin ( ) ) ) { ViewCompat . postInvalidateOnAnimation ( this ) ; notifyCloseToRightListener ( ) ; } }
private void performOnResumeLogic ( ) { if ( waitingForPermission ) { waitingForPermission = false ; startFreeformHack ( ) ; init ( ) ; } overridePendingTransition ( 0 , R . anim . close_anim ) ; U . sendBroadcast ( this , ACTION_TEMP_SHOW_TASKBAR ) ; }
public void updateFeaturedImage ( final long mediaId , final boolean imagePicked ) { setFeaturedImageId ( mediaId , imagePicked ) ; }
public void onPostSettingsFragmentPositiveButtonClicked ( @ NonNull PostSettingsListDialogFragment fragment ) { if ( mEditPostSettingsFragment != null ) { mEditPostSettingsFragment . onPostSettingsFragmentPositiveButtonClicked ( fragment ) ; } }
public void onPageSelected ( int position ) { for ( OnWelcomeScreenPageChangeListener changeListener : mItems ) { changeListener . onPageSelected ( position ) ; } }
public void onSetSuccess ( ) { super . onSetSuccess ( ) ; log ( "success" ) ; }
public void onStop ( ) { releaseBellSoundPool ( ) ; }
public ThemeActivity ( int type ) { super ( ) ; currentType = type ; updateRows ( ) ; }
public void performAction ( Context context , String expressionId , TimestampedValue [ ] newValues ) { Log . d ( TAG , "Received actuation" ) ; }
public int getCount ( ) { return MediaPlayerConstants . PAGE_COUNT ; }
public Total getBlotterBalanceInHomeCurrency ( ) { Currency homeCurrency = db . em ( ) . getHomeCurrency ( ) ; return getBlotterBalance ( homeCurrency ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . Repeat . Builder getRepeatBuilder ( ) { bitField0_ | = 0x00004000 ; onChanged ( ) ; return getRepeatFieldBuilder ( ) . getBuilder ( ) ; }
public EditablePair < Operation , ArrayList < FMFile >> getFileOpContext ( ) { return fileOpContext ; }
public ScheduleViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( context ) . inflate ( R . layout . fragment_carousel_cards_item , parent , false ) ; return new ScheduleViewHolder ( v ) ; }
public static void applyShakeAnimation ( Context context , View view ) { Animation shake ; shake = AnimationUtils . loadAnimation ( context , R . anim . shake ) ; view . startAnimation ( shake ) ; }
public int getCount ( ) { return 7 ; }
public static TBAddressDatabase newInstance ( Context context ) { return new TBAddressDatabase ( context ) ; }
public void openSimplePhotoGallery ( int accountId , @ NonNull ArrayList < Photo > photos , int index , boolean needUpdate ) { PlaceFactory . getSimpleGalleryPlace ( accountId , photos , index , true ) . tryOpenWith ( getActivity ( ) ) ; }
public Ingredient ( @ NonNull IngredientTemplate ingredientTemplate , @ NonNull BigDecimal amount ) { setIngredientType ( ingredientTemplate ) ; setAmount ( amount ) ; }
public EventTabSubscriber ( ) { super ( ) ; mDataToBind = new ArrayList <> ( ) ; mEventComparator = new EventWeekComparator ( ) ; }
private static void onAccountCreated ( Account newAccount , Context context ) { SyncAdapter . configurePeriodicSync ( context , SYNC_INTERVAL , SYNC_FLEXTIME ) ; ContentResolver . setSyncAutomatically ( newAccount , context . getString ( R . string . content_authority ) , true ) ; syncImmediately ( context ) ; }
public void onPause ( ) { if ( ! mSubscription . isUnsubscribed ( ) ) { mSubscription . unsubscribe ( ) ; } }
public void onItemResumeClicked ( @ NonNull DownloadItem item ) { viewModel . pauseResumeDownload ( item . info ) ; }
public void run ( ) { if ( getLifecycle ( ) . getCurrentState ( ) . isAtLeast ( Lifecycle . State . RESUMED ) ) checkInternet ( ) ; }
public List < ? extends FSobject > getDirList ( Filter < ? super Tables . Dirs > filter ) { return getList ( filter , new DirCreator ( ) , Tables . DIRS , Tables . Dirs . NAME ) ; }
public void onInitializeAccessibilityEvent ( AccessibilityEvent event ) { super . onInitializeAccessibilityEvent ( event ) ; event . setClassName ( Button . class . getName ( ) ) ; }
public StreamPresenter ( StreamContract . View view ) { this . view = view ; initListeners ( ) ; streamService = new StreamServiceImpl ( errorListener , bufferingUpdateListener , completionListener ) ; }
public void onPause ( ) { ad . pauseNativeAdView ( R . id . adView_main , a ) ; super . onPause ( ) ; }
public UserBuilder city ( String city ) { this . address . setSubAdminArea ( city ) ; return this ; }
public Item [ ] newArray ( int size ) { return new Item [ 0 ] ; }
private boolean repeatKey ( ) { Key key = mKeys [ mRepeatKeyIndex ] ; detectAndSendKey ( mCurrentKey , key . getX ( ) , key . getY ( ) , mLastTapTime ) ; return true ; }
private void update ( boolean refreshSuggestions ) { AppUtils . checkEquality ( infos ) ; sort ( ) ; fillLabels ( ) ; if ( refreshSuggestions ) { fillSuggestions ( ) ; } }
public void onEndOfSpeech ( ) { Log . d ( TAG , "onEndOfSpeech : " ) ; }
public FormattableEditText getEditText ( ) { return mEditText ; }
public void testIsNOTWPCOM8 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( buildURL ( notWpcomAddress3 ) ) ) ; }
public void LoadData ( Context ctx , Uri uri , String password , String keyfile , UpdateStatus status ) throws IOException , FileNotFoundException , InvalidDBException { LoadData ( ctx , uri , password , keyfile , status , ! Importer . DEBUG ) ; }
private void prepare ( AttributeSet attrs ) { setLayerType ( View . LAYER_TYPE_NONE , null ) ; plotParameters . twoDPlotStyle = TwoDPlotStyle . SURFACE ; }
public void setSavedUrl ( String url ) { putString ( Name . SAVE_URL , url ) ; }
public static long satoshisFromBitcoins ( double pBitcoins ) { return ( long ) ( pBitcoins * 100000000 . 0 ) ; }
public void onQueueChanged ( List < MediaSessionCompat . QueueItem > queue ) { Log . d ( TAG , "onQueueChanged : called" ) ; mMvpView . displayQueue ( queue ) ; }
public void setMobileNo ( Double mobileNo ) { this . mobileNo = mobileNo ; }
private void pinSaltNotFetched ( ) { if ( null != mListener ) { mListener . invalidPin ( 0 , null , "" , mOstPinAcceptInterface ) ; } goBack ( ) ; }
public DebatingTimerState getStatus ( ) { return this . mState ; }
public void setJokes ( List < String > data ) { jokes = data ; }
public OrderSet ( List < ? extends Order < TARGET >> orders ) { this . orders . addAll ( orders ) ; }
public void showAdminFragment ( ) { if ( ! showingAdminFragment ) { showingAdminFragment = true ; sectionsPagerAdapter . addFragment ( AdminFragment . newInstance ( ) ) ; viewPager . setAdapter ( sectionsPagerAdapter ) ; } }
public DataListPreference ( Context context ) { super ( context ) ; }
public void setIntent ( Intent intent ) { this . _intent = intent ; }
public Identifier ( PreferenceData preference , @ Nullable String title , @ Nullable String subtitle , SectionIdentifier sectionIdentifier ) { this ( preference , title , subtitle , sectionIdentifier , null , ( String [ ] ) null ) ; }
public static boolean isFavorite ( final Context context , final Song song ) { return PlaylistsUtil . doPlaylistContains ( context , getFavoritesPlaylist ( context ) . id , song . id ) ; }
private static void packTextures ( ) { TexturePacker . process ( rawSpritesPath . toString ( ) , spritesPath . toString ( ) , "sprites - common" ) ; }
public MyFilter removeFilter ( int position ) { MyFilter filter = mList . remove ( position ) ; notifyItemRemoved ( position ) ; return filter ; }
public int getLeadingMarginLineCount ( ) { return lines ; }
public void onResume ( ) { super . onResume ( ) ; updatePermissions ( ) ; updateNavigation ( ) ; }
private boolean isCertKnown ( X509Certificate cert ) { try { return appKeyStore . getCertificateAlias ( cert ) != null ; } catch ( KeyStoreException e ) { return false ; } }
public void show ( ) { super . show ( ) ; DrawContext . scene . setScrollFocus ( pane ) ; }
public void setAckTime ( Long ackTime ) { this . ackTime = ackTime ; }
public void testIsNOTWPCOM9 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( buildURI ( notWpcomAddress3 ) ) ) ; }
public void onLoaderReset ( Loader < Cursor > loader ) { Log . v ( TAG , "onLoaderReset " + loader ) ; }
public void finishUpdate ( ViewGroup container ) { if ( mCurTransaction != null ) { mCurTransaction . commitAllowingStateLoss ( ) ; mCurTransaction = null ; mFragmentManager . executePendingTransactions ( ) ; } }
public int getCollapsedGroupsCount ( ) { return mAdapter . getCollapsedGroupsCount ( ) ; }
public void clearAnswer ( ) { binding . choicesSearchBox . setText ( R . string . select_answer ) ; widgetValueChanged ( ) ; }
public ItemDraggableRange onGetItemDraggableRange ( ViewHolder holder , int position ) { return new ItemDraggableRange ( 1 , dataSet . size ( ) ) ; }
public void notifyDataSetChanged ( ) { updateRows ( ) ; try { super . notifyDataSetChanged ( ) ; } catch ( Exception e ) { FileLog . e ( "tmessages" , e ) ; } }
public void onNotificationRemoved ( StatusBarNotification sbn ) { if ( currentPlayingControllerPackageName == null ) { return ; } if ( sbn . getPackageName ( ) . equals ( currentPlayingControllerPackageName ) ) { Notificator . cancelNotification ( this ) ; } }
public void tick ( ) { x += velX ; y += velY ; lifetime -- ; if ( lifetime < 0 ) { GameScreen . entities . remove ( this ) ; } }
public void onClick ( View v ) { Intent intent = new Intent ( getBaseActivity ( ) , ForumActivity . class ) ; startActivity ( intent ) ; }
public double getEnergy ( ) { return this . energy ; }
public void updateAppTheme ( Context context ) { app_theme = ThemeDialog . getTheme ( context , storagePref , time ) ; }
private RegexTemplate ( ) { throw new AssertionError ( ) ; }
public void onStop ( ) { Log . d ( "Engine_Driver" , "connection . onStop ( ) " ) ; mainapp . sendMsg ( mainapp . comm_msg_handler , message_type . SET_LISTENER , "" , 0 ) ; super . onStop ( ) ; }
public void onPause ( ) { Common . disableNfcForegroundDispatch ( this ) ; super . onPause ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return contacts_Blocked . TLdeserialize ( stream , constructor , exception ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; }
public DeleteNoteInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , PreviewRepository repository , String uuid ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . uuid = uuid ; }
public SuraAyah getRangeStart ( ) { return new SuraAyah ( mMinSura , mMinAyah ) ; }
public boolean addTile ( Tile tile ) { return mData . add ( tile ) ; }
public static void uninstallLibrary ( Library library , APDE context ) { deleteFile ( library . getLibraryFolder ( context ) , context ) ; }
public void onPause ( ) { mIsPaused = true ; getPreferenceScreen ( ) . getSharedPreferences ( ) . unregisterOnSharedPreferenceChangeListener ( this ) ; super . onPause ( ) ; }
private void updateList ( ) { mCardsAdapter . notifyDataSetChanged ( ) ; mDropDownAdapter . notifyDataSetChanged ( ) ; }
public boolean getStartupFocusPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . getStartupFocusPreferenceKey ( ) , true ) ; }
public Session onCreateSession ( String inputId ) { Log . d ( TAG , "Creating new TvInputService LiveSession for input ID : " + inputId + " . " ) ; return new LiveSession ( this , mConnection ) ; }
public void run ( ) { imagePreviewAdapter . add ( faceCroped ) ; btUserPhoto = DbBitmap . getBytes ( faceCroped ) ; isImageCapture = true ; }
public JSONObject getJSONObject ( String name ) { try { return objectToObject ( super . getJSONObject ( name ) ) ; } catch ( org . json . JSONException e ) { throw new RuntimeException ( e ) ; } }
public < T extends ViewModel > T create ( Class < T > modelClass ) { return ( T ) new BeverageListViewModel ( mBeverageRepo ) ; }
private void displayVehicleStopped ( ) { setGpsProvideButtonVisible ( false ) ; GpsRouteLoggerStatus status = GpsRouteLoggerStatus . INSTANCE ; Resources res = getResources ( ) ; mSpeed . setText ( res . getString ( R . string . title_gps_logger_vehicle_stopped , status . getSpeed ( ) ) ) ; }
public static JSONObject loadJson ( Context context , String key ) throws IOException { return getJSONObject ( jsonFile ( context , key ) ) ; }
public int getCreatedBy ( ) { return createdBy ; }
public WeatherWidgetProvider4x4 ( ) { super ( 8 ) ; }
public String visit ( Track track ) { return track . GetTitle ( ) ; }
public void listenToLoggerStatus ( ) { if ( ! loggerStatusListener ) { DataLogger . get ( ) . registerStatusListener ( dataListener ) ; loggerStatusListener = true ; } }
public Maybe < Boolean > delete ( Tag entity ) { return crudHelper . delete ( entity ) ; }
public void onArtistItemClick ( Artist artist ) { NavigationFragment sf = ArtistPagerFragment . newInstance ( artist ) ; Fragment parentFragment = getParentFragment ( ) ; if ( parentFragment instanceof NavigationFragment ) ( ( NavigationFragment ) parentFragment ) . getNavigationController ( ) . presentFragment ( sf ) ; }
public void onMediaStoreChanged ( ) { updateQueue ( ) ; }
public boolean hasHash ( ) { return ( ( bitField0_ & 0x00000002 ) == 0x00000002 ) ; }
public StockExchangeRate getStockExchangeRates ( ) { return stockExchangeRates ; }
public void run ( ) { dismissPopup ( ) ; setVisibility ( View . INVISIBLE ) ; view . getContext ( ) . startActivity ( groupItem . getIntent ( ) ) ; }
public final void moveRelative ( int relative , AbstractClient . OnSuccess listener ) { client . send ( AriaRequests . changePosition ( gid , relative , "POS_CUR" ) , listener ) ; }
public void testSaveUser ( ) throws Exception { User user = mock ( User . class ) ; mDataManager . saveUser ( user ) ; verify ( mMockPrefsHelper ) . setCurrentUser ( user ) ; }
public FitnessInteractor provideFitnessInteractor ( Context context ) { return new FitnessInteractorImpl ( context ) ; }
public void run ( ) { try { setImageData ( sdUrl , hdUrl ) ; Log . i ( "APOD Wallpaper" , "Set" ) ; } catch ( Exception e ) { FirebaseCrash . report ( e ) ; } }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( ) . removeObserver ( this , NotificationCenter . newSessionReceived ) ; }
public void editTag ( long id , String name ) { if ( ! mIsPaused ) { FragmentManager fm = getSupportFragmentManager ( ) ; AddTagDialog addTagDialog = AddTagDialog . newInstance ( id , name ) ; addTagDialog . show ( fm , AddTagDialog . TAG ) ; } }
public void setDifficulty ( int difficulty ) { this . difficulty = difficulty ; Dungeon . setDifficulty ( difficulty ) ; }
public BasePresenter getPresenter ( ) { return null ; }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup viewGroup , int i ) { return ViewHolderItemCategoryHorizontal . create ( viewGroup , context , fragment , this ) ; }
public void onResponse ( BaseItemDto response ) { detailFragment . setBaseItem ( response ) ; }
private void setSourceCurrencyValue ( String value , String currencyCode ) { tvSourceValue . setText ( formatCurrency ( getActivity ( ) , value , currencyCode ) ) ; }
public ActivityBuilder setGuidelines ( @ NonNull CropImageView . Guidelines guidelines ) { mOptions . guidelines = guidelines ; return this ; }
public TrendingAdapter ( @ NonNull FirestoreRecyclerOptions < Fixture > options , Context context ) { super ( options ) ; this . context = context ; }
private String extractTitle ( String subject ) { if ( subject != null && ! NetworkManager . isUrl ( subject ) ) { return subject ; } return "" ; }
private void showCharts ( ) { AnswersProxy . get ( ) . logButton ( "Show Charts" ) ; startActivity ( new Intent ( BaseDrawerActivity . this , ChartsActivity . class ) ) ; }
public Integer getFacId ( ) { return facId ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . update_list , menu ) ; return true ; }
public Date getBirthdate ( ) { return birthdate ; }
public void showImage ( int i ) { pager . setCurrentItem ( i ) ; }
public void saveChannelId ( int channelId ) { editor . putInt ( DRAFT_CHANNEL , channelId ) . apply ( ) ; }
public com . google . protobuf . Parser < SqlStatement > getParserForType ( ) { return PARSER ; }
private void setTutorialScreen ( ) { if ( TimeTrackerPrefHandler . INSTANCE . getIsFirstTime ( getApplicationContext ( ) ) ) { showTutorialView ( ) ; TimeTrackerPrefHandler . INSTANCE . saveIsFirstTime ( false , getApplicationContext ( ) ) ; } }
public ShuffleAllPlaylist ( @ NonNull Context context ) { super ( context . getString ( R . string . shuffle_all ) , R . drawable . ic_shuffle_white_24dp ) ; }
public void doAfterInitialization ( @ NonNull Runnable runnable ) { if ( mIsInitialized ) { runnable . run ( ) ; } else { mPostInitializationWorkList . add ( runnable ) ; } }
private Servings getServings ( ) { return Servings . getByDateAndFood ( day , food ) ; }
public void onRelease ( ) { Log . d ( TAG , "Session onRelease ( " + mSessionNumber + " ) " ) ; mPlayer . release ( ) ; }
public static boolean getOfflineMode ( Context context ) { return getBoolean ( context , "offline_mode" , false ) ; }
public void testDefaultUnitType ( ) throws Exception { assertThat ( AddIngredientModule . provideUnitType ( intent ) , equalTo ( AmountUnitType . MASS ) ) ; }
public final void setStartDate ( final String parStartDate ) { mStartDate = parStartDate ; }
public CustomerFragment ( ) { super ( R . string . title_customers ) ; }
public void run ( ) { markMessagesAsDeletedInternal ( messages , channelId ) ; }
private void completeSync ( ) { Log . d ( "SWELL - SVC" , "Stopping sync service" ) ; this . fitnessSync . stop ( ) ; this . scheduleSyncIfNeeded ( ) ; this . stopSelf ( ) ; }
private boolean existsOnDevice ( ) { if ( mLocalPath != null && mLocalPath . length ( ) > 0 ) { File file = new File ( mLocalPath ) ; return ( file . exists ( ) ) ; } return false ; }
public FontSizeListPreference ( final Context context , final AttributeSet attrs , final int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void onComplete ( ) { tabChanged ( mTabsModel . last ( ) ) ; mView . notifyTabViewAdded ( ) ; mView . updateTabNumber ( mTabsModel . size ( ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . menu , menu ) ; editItem = menu . getItem ( 2 ) ; return true ; }
public final V remove ( Object key ) { return ! inRange ( key ) ? null : m . remove ( key ) ; }
public ConfChangeHandler confChangeHandler ( ) { return new ConfChangeHandler ( this ) ; }
public void onCreate ( ) { super . onCreate ( ) ; Context applicationContext = getApplicationContext ( ) ; DaggerBuilder . inintialize ( applicationContext ) ; }
private void initBirthdayReminderPrefs ( ) { binding . birthReminderPrefs . setOnClickListener ( view -> changeBirthdayPrefs ( ) ) ; binding . birthReminderPrefs . setChecked ( mPrefs . isBirthdayReminderEnabled ( ) ) ; }
public void testValidateInputInvalidUser ( ) throws Throwable { assertThat ( validateInput ( "user [ ] " , "password" , "password" , "" ) , is ( ValidateResult . INVALID_USERNAME ) ) ; }
public void onBackPressed ( ) { if ( player != null ) { player . pause ( ) ; player . stop ( ) ; player . release ( ) ; } }
public int execute ( ) throws LuaException { mainHandler . sendMessage ( mainHandler . obtainMessage ( MainWindow . MESSAGE_CLOSEOPTIONSDIALOG ) ) ; return 0 ; }
public long getItemId ( int position ) { return getNameAtPosition ( position ) . hashCode ( ) ; }
public Builder setTokenId ( int value ) { bitField0_ | = 0x00000800 ; tokenId_ = value ; onChanged ( ) ; return this ; }
public int getItemCount ( ) { return membersName . size ( ) ; }
public void onFailure ( Call < List < PlayList >> call , Throwable t ) { }
public LiveData < List < MainListPersona >> getPersonasWithSkill ( int skillID ) { return repository . getPersonasWithSkill ( skillID ) ; }
private Model _new ( Models mm ) { String name = getDefaultName ( ) ; return _new ( mm , name ) ; }
public static void setThemeImageSizeWidth ( int width ) { setInt ( PrefKey . THEME_IMAGE_SIZE_WIDTH , width ) ; }
public int update ( Uri uri , ContentValues values , String selection , String [ ] selectionArgs ) { throw new UnsupportedOperationException ( "Not yet implemented" ) ; }
public Map < String , String > getHeaders ( ) throws AuthFailureError { HashMap < String , String > headers = new HashMap <> ( ) ; headers . put ( "apikey" , User . getApikey ( context ) ) ; return headers ; }
private void changeLivePrefs ( ) { boolean isChecked = binding . conversationPrefs . isChecked ( ) ; mPrefs . setLiveEnabled ( ! isChecked ) ; binding . conversationPrefs . setChecked ( ! isChecked ) ; }
public TeacherSchedule loadDataFromNetwork ( ) throws Exception { return new TeacherSchedule ( getService ( ) . getScheduleOfTeacher ( teacherId ) ) ; }
private void executionFinished ( List < MatchedBird > results ) { mainThread . post ( ( ) -> callback . onMatchingFinished ( results ) ) ; }
public int getLineSize ( ) { return PREF_LINESIZE ; }
public void onClick ( View v ) { getTopActivity ( ) . onWaitMore ( ) ; getDialog ( ) . dismiss ( ) ; }
public void setPeriodStart ( Date d ) { this . periodStart = d ; }
public void onPhotoPickerHidden ( ) { if ( mEditorFragment instanceof AztecEditorFragment ) { ( ( AztecEditorFragment ) mEditorFragment ) . enableMediaMode ( false ) ; } }
public void setUserName ( String userName ) { this . userName = StringUtils . notNullStr ( userName ) ; }
public void shutdown ( ) throws NotConnectedException { mConnecting = false ; interrupt ( ) ; if ( mConn != null ) mConn . instantShutdown ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { Log . d ( TAG , "onCreateView" ) ; mScannerView = new ZXingScannerView ( getActivity ( ) ) ; return mScannerView ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( PREVIOUS_SELECTED_ID , navigationController . getCurrentViewId ( ) ) ; }
public static Book book ( String name ) { if ( name . equals ( DEFAULT_DB_NAME ) ) throw new PaperDbException ( DEFAULT_DB_NAME + " name is reserved for default library name" ) ; return getBook ( null , name ) ; }
public Money negate ( ) { return new Money ( mAmount . negate ( ) , mCurrency ) ; }
public void onPause ( ) { super . onPause ( ) ; deviceStatus = 0 ; identityCount = 0 ; handler . removeCallbacks ( runnable ) ; handler . removeCallbacks ( validateDeviceRunnable ) ; unregisterReceiver ( mUsbReceiver ) ; unbindService ( usbConnection ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { customLogger ( "Disabling Roamnet" ) ; disableRoamnet ( ) ; setUIText ( ) ; } } )
public Parcelable onSaveInstanceState ( ) { Bundle bundle = new Bundle ( ) ; bundle . putSerializable ( KEY_LIST_ITEMS , mListItems ) ; bundle . putParcelable ( KEY_SUPER_STATE , super . onSaveInstanceState ( ) ) ; return bundle ; }
public AboutBuilder addLink ( @ NonNull BitmapDrawable icon , String label , String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public void run ( ) { adapter . confirmDelete ( ) ; findViewById ( R . id . undoDelete ) . setVisibility ( View . GONE ) ; }
public void setPresenter ( ProfilePresenter presenter ) { mPresenter = presenter ; }
public String getAlbumCover ( ) { synchronized ( this ) { if ( getCurrentTrack ( ) == null ) { return null ; } return getCurrentTrack ( ) . getCover ( ) ; } }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = mInflater . inflate ( R . layout . item_workshop , parent , false ) ; return new ViewHolder ( view ) ; }
public void onCreate ( ) { super . onCreate ( ) ; ( ( Application ) getApplication ( ) ) . getApplicationGraph ( ) . plus ( new ActivityModule ( this ) ) . inject ( this ) ; }
public static void update ( ) { frametimes . addLast ( Gdx . graphics . getRawDeltaTime ( ) * 1000f ) ; while ( frametimes . size ( ) > GUI_WIDTH ) { frametimes . removeFirst ( ) ; } }
public ErrorDialog swipeToNextQuestionWithError ( ) { flingLeft ( ) ; return new ErrorDialog ( rule ) . assertOnPage ( ) ; }
public void onResponse ( ) { switchChannel ( mSelectedProgram ) ; }
public static void releaseHelper ( ) { OpenHelperManager . releaseHelper ( ) ; databaseHelper = null ; }
public SnappyRecyclerView ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; }
public int compare ( Item item1 , Item item2 ) { return item1 . compareTo ( item2 ) ; }
public String toString ( ) { return Localization . get ( "commands . common . value . clientIdentifier . string" ) ; }
public FormController getFormController ( ) { return mFormController ; }
public void testAccountUsesDefaultCurrency ( ) { Account account = new Account ( "Dummy account" ) ; assertThat ( account . getCurrency ( ) . getCurrencyCode ( ) ) . isEqualTo ( Money . DEFAULT_CURRENCY_CODE ) ; }
public void testGetTithe ( ) { assertThat ( planetaryCalendar . getTithe ( days ) , closeTo ( tithe , 1e - 9 ) ) ; }
public Object getKey ( byte [ ] publicKey ) { for ( KeyHolder keyHolder : loadedKeypairs . values ( ) ) { if ( Arrays . equals ( keyHolder . openSSHPubkey , publicKey ) ) return keyHolder . trileadKey ; } return null ; }
public SubscriberTestController < API , VIEW > parse ( ) throws BasicModel . FieldNotDefinedException { checkPreconditions ( ) ; if ( mSubscriber . isDataValid ( ) ) { mSubscriber . parseData ( ) ; } hasParsed = true ; return this ; }
public DragFrameLayout ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public AccountHeader withAlternativeProfileHeaderSwitching ( boolean alternativeProfileHeaderSwitching ) { this . mAlternativeProfileHeaderSwitching = alternativeProfileHeaderSwitching ; return this ; }
public boolean nowWaitingForPowerOn ( ) { if ( ! mReady ) { return true ; } return mPowerWait . hasQueuedThreads ( ) ; }
public boolean isCountry ( ) { return endpoints . equals ( "isCountry" ) ; }
private void setTitle ( final String title ) { tvHeader . setText ( title ) ; }
public void run ( ) { resultView . setText ( finalResultText ) ; }
public void onDestroy ( ) { mListPresenter . detachView ( ) ; mListPresenter = null ; super . onDestroy ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int view_type ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . event_card_layout , parent , false ) ; return new ViewHolder ( v ) ; }
private void showNewDinnerDialog ( Date date ) { showNewDinnerDialog ( date , null ) ; }
public static ReaderTag getDefaultTag ( ) { ReaderTag defaultTag = getTagFromEndpoint ( ReaderTag . TAG_ENDPOINT_DEFAULT ) ; if ( defaultTag == null ) { defaultTag = getTagFromTagName ( ReaderTag . TAG_TITLE_DEFAULT , ReaderTagType . DEFAULT ) ; } return defaultTag ; }
private static ScanFilter getScanFilterWithAddress ( String address ) { ScanFilter . Builder builder = new ScanFilter . Builder ( ) ; builder . setDeviceName ( MiBand . DEVICE_NAME ) ; builder . setDeviceAddress ( address ) ; return builder . build ( ) ; }
private void showBackup ( ) { AnswersProxy . get ( ) . logButton ( "Show Backup" ) ; startActivityForResult ( new Intent ( BaseDrawerActivity . this , BackupActivity . class ) , REQUEST_BACKUP ) ; }
public void onClick ( View v ) { mainActivity . onCheckRizonEventHorizon ( ) ; }
public void setFire ( boolean mFire ) { this . mFire = mFire ; }
private void stopInternal ( ) { resetInternal ( true ) ; loadControl . onStopped ( ) ; setState ( ExoPlayer . STATE_IDLE ) ; }
public String prompt ( ) { return Game . getVar ( R . string . ChaosCrystal_Prompt ) ; }
public void run ( ) { loadDate = date ; }
private void initT ( View view ) { TableRow masterRow = ( TableRow ) view . findViewById ( R . id . masterRow ) ; TABLE_PARAMS = masterRow . getLayoutParams ( ) ; }
public static void i ( String tag , String message ) { if ( D ) Log . i ( TAG + tag , message ) ; }
public void markAsSent ( Model project , Model observation , int status ) { if ( observation != null ) { observation . setInt ( "uploaded" , status , true ) ; ProjectManager . get ( ) . forceSave ( ) ; fireStatusModified ( "upload" ) ; } }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; if ( event != null ) setView ( view ) ; }
public void sendSelectedItem ( String item ) { selectedItemSubject . onNext ( item ) ; }
public void hit ( ) { if ( -- mHP == 0 ) { SCORE += 20 ; destroy ( ) ; } else { mSoundPlayer . playExplode ( ) ; } }
public List < PhotoUrl > getUrls ( ) { return ( mUrls == null ) ? new ArrayList < PhotoUrl > ( ) : mUrls ; } } }
public int getCount ( ) { return slides . size ( ) != 0 ? slides . size ( ) : 1 ; }
public void addValidation ( EditText confirmationEditText , EditText editText , String errMsg ) { mValidator . set ( confirmationEditText , editText , errMsg ) ; }
public void showTagsLoadError ( String message ) { dismissDialog ( ) ; Toast . makeText ( TaggedQuestionsActivity . this , message , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onPause ( ) { visible = false ; MidletThread . pauseApp ( ) ; super . onPause ( ) ; }
public void run ( ) { loadStickers ( false , false ) ; }
public static boolean isRecordAutoSave ( ) { return getBoolean ( R . string . pref_key_is_record_auto_save , false ) ; }
public ZIndexable < RectRegion > getRegions ( ) { return regions ; }
public PagerAdapterClass ( Context _context ) { super ( ) ; mInflater = LayoutInflater . from ( _context ) ; }
public static ConvertersRepository provideConvertersRepository ( Context appContext ) { return ConverterRepositories . getInMemoryRepoInstance ( new ConvertersServiceApiImpl ( appContext ) ) ; }
public static Boolean getPrefDisableSleep ( ) { return prefDisableSleep ; }
public void onGmsConnectionResultResolutionRequired ( ConnectionResult connectionResult ) { IntentUtil . startGmsConnectionResultForResolution ( this , connectionResult , UNHANDLED_REQUEST_CODE ) ; }
public void onItemClick ( AdapterView < ? > adapterView , View view , int i , long l ) { dismissWithButtonClick ( i ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( player != null && ! TextUtils . isEmpty ( mStep . getVideoURL ( ) ) ) { initializePlayer ( Uri . parse ( mStep . getVideoURL ( ) ) ) ; } }
public PlumbleService getService ( ) { return mService ; }
public void setDecryptedTagsString ( String value ) { this . decryptedTagsString = value ; }
public void onUIChange ( EventBusController . UIControlEvent event ) { if ( event . message . equals ( EventBusController . UIControlEvent . SEARCH_KEYWORD ) ) { setQueryText ( event . keyword ) ; } }
public void playAnimation ( ) { userActionsTaken . add ( UserActionTaken . PLAY_OPTION ) ; lottieDrawable . playAnimation ( ) ; computeRenderMode ( ) ; }
public static boolean didPresentSdcardPermissionsDialog ( Activity activity ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( activity ) ; return sharedPreferences . getBoolean ( PREF_SDCARDPERMESSION_DIALOG_DISPLAYED , false ) ; }
public boolean isChildSelectable ( int groupPosition , int childPosition ) { return true ; }
public boolean stop ( ) { mReminder . setActive ( false ) ; save ( ) ; return pause ( ) ; }
public void onServiceDisconnected ( ComponentName name ) { service = null ; }
public Alarm getItem ( int position ) { return mDataSource . get ( position ) ; }
public void compare_WhenFirstNameIsGreater_ReturnGreaterThanZero ( ) { int result = sut . compare ( tag2 , tag1 ) ; assertThat ( result , greaterThan ( 0 ) ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { TupleAttachment a1 = prev . get ( oldItemPosition ) ; TupleAttachment a2 = next . get ( newItemPosition ) ; return a1 . id . equals ( a2 . id ) ; }
public NotesLoadedEvent ( ArrayList < Note > notes ) { LogDelegate . d ( this . getClass ( ) . getName ( ) ) ; this . notes = notes ; }
public static void addIndices ( AnkiDb db ) { _updateIndices ( db ) ; }
public LiveData < MovieDetails > getMovie ( long movieId ) { Timber . d ( "Loading movie and trailers . " ) ; return mDatabase . moviesDao ( ) . getMovie ( movieId ) ; }
public GridSpacingItemDecoration ( int spanCount , int dp , boolean includeEdge , Context context ) { this . spanCount = spanCount ; this . spacing = dpToPx ( dp , context ) ; this . includeEdge = includeEdge ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Bundle arguments = getArguments ( ) ; if ( arguments != null ) { isDualMode = arguments . getBoolean ( "isdualmode" ) ; } }
public AboutBuilder addFeedbackAction ( int email ) { return addFeedbackAction ( context . getString ( email ) ) ; }
public void onClick ( View view ) { doOneVibration ( ) ; }
public void setFABPlusAction ( View . OnClickListener onClickListener ) { fabPlus . setOnClickListener ( onClickListener ) ; }
public void onRedditAccountChanged ( ) { General . UI_THREAD_HANDLER . post ( new Runnable ( ) { @ Override public void run ( ) { rv . setAdapter ( new AccountListAdapter ( mActivity , AccountListDialog . this ) ) ; } } ) ; }
public void carrierFx ( ) { Heap . burnFX ( target . getPos ( ) ) ; }
public boolean isLoggedIn ( ) { return cookies != null ; }
public void onConversationClicked ( @ NonNull DcChatlist . Item chatlistItem ) { ConversationListActivity conversationList = ( ConversationListActivity ) getActivity ( ) ; if ( conversationList != null ) { conversationList . onCreateConversation ( chatlistItem . chatId , 0 ) ; } }
public static boolean getBoolean ( @ AttrRes final int attr , final Context context ) { return context . getResources ( ) . getBoolean ( getAttrIdValue ( attr , context ) ) ; }
public static void enablePushNotifications ( Context context ) { Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_PUSH_START ) ; context . startService ( i ) ; }
public Dictionary findMatchOrNull ( Preferences . DictionaryType type , String path ) { for ( Dictionary dictionary : dictionaries ) { if ( dictionary . equalsDictionary ( type , path ) ) { return dictionary ; } } return null ; }
public void toggleLiked ( ) { filter . setLiked ( filterBinding . filterBarLikedButton . isChecked ( ) ) ; filterChanged ( filter ) ; }
public void exportSpecificTables ( final ArrayList < String > tables , String fileName , ExportListener listener ) { startExportTables ( tables , fileName , listener ) ; }
public MaterialRatingBar ( Context context ) { super ( context ) ; init ( ) ; }
public long getItemId ( int position ) { return dataSet . get ( position ) . getId ( ) . hashCode ( ) ; }
public Uri getUri ( ) { return Uri . parse ( String . format ( "http : }
public int getCount ( ) { return mAdapter == null ? 0 : mAdapter . getCount ( ) ; }
public boolean onTouch ( View v , MotionEvent event ) { return StickerPreviewViewer . getInstance ( ) . onTouch ( event , stickersGridView , EmojiView . this . getMeasuredHeight ( ) , stickersOnItemClickListener ) ; }
public void saveContent ( String content ) { editor . putString ( DRAFT_CONTENT , content ) . apply ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; createListDialog . cleanUp ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "UPDATE message SET uid = NULL WHERE uid < 0" ) ; }
public void handleMessage ( Message msg ) { super . handleMessage ( msg ) ; int id = msg . what ; }
public PGPCoder ( EndpointServer server , PersonalKey key , PGPPublicKey [ ] recipients ) { mServer = server ; mKey = key ; mRecipients = recipients ; mSender = null ; }
public void loadData ( DBAdmissionPercentageData dataDb , boolean latestLessonFirst ) { mDataList = dataDb . getItemsForMetaId ( id , latestLessonFirst ) ; mDataLoaded = true ; }
public void OnErrorScan ( String message , int errorCodeCallback ) { Log . e ( TAG , "OnServerFound : " + message ) ; }
public void scrollToPosition ( int position ) { if ( currentPosition == position ) { return ; } currentPosition = position ; requestLayout ( ) ; }
public View createView ( ViewGroup viewGroup , int viewType ) { return View . inflate ( context , R . layout . child_item , null ) ; }
private void showRadius ( ) { binding . radiusPrefs . setDetailText ( String . format ( Locale . getDefault ( ) , getString ( R . string . radius_x_meters ) , String . valueOf ( mPrefs . getRadius ( ) ) ) ) ; }
private int getSchemaVersion ( ) { return getProperty ( "schema_version" ) ; }
public boolean matches ( @ NonNull Attributes attrs ) { AttributesWithClass attributesWithClass = new AttributesWithClass ( attrs ) ; return attributesWithClass . hasClass ( classToUse ) ; }
public Uri insert ( Uri uri , ContentValues values ) { throw new UnsupportedOperationException ( "Not yet implemented" ) ; }
public ProgramListAdapter ( Context context , List < LoyaltyProgram > programs ) { super ( context , 0 , programs ) ; userPreferences = UserPreferences . getInstance ( context ) ; }
public IAnswerData getAnswer ( ) { return TextWidgetUtils . getDecimalData ( answerText . getText ( ) . toString ( ) , getFormEntryPrompt ( ) ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeIntArray ( this . dueDate ) ; dest . writeList ( this . clients ) ; dest . writeList ( this . paymentTypeOptions ) ; }
private void loadResponseUris ( ) { responseManager . getReflectionUrlsFromFirebase ( new ValueEventListener ( ) { @ Override public void onDataChange ( DataSnapshot dataSnapshot ) { initStoryContentFragments ( ) ; } @ Override public void onCancelled ( DatabaseError databaseError ) { } } ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { channel_id = stream . readInt32 ( exception ) ; access_hash = stream . readInt64 ( exception ) ; }
public void postFrameCallback ( @ NonNull final Callback callback ) { mCallbacks [ mCallbackCount ] = callback ; mCallbackCount ++ ; if ( ! mPosted ) { General . UI_THREAD_HANDLER . postDelayed ( this , 1000 / 60 ) ; mPosted = true ; } }
private BroadcastReceiver freeformToggleReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( isDesktopIconsEnabled == U . isDesktopIconsEnabled ( HomeActivityDelegate . this ) ) updateWindowFlags ( ) ; else recreate ( ) ; } } ;
public void onRefresh ( ) { startGetPodcastTask ( ) ; }
public CharSequence getPageTitle ( int position ) { return mTabTitles [ position ] ; }
public void addLine ( LineInfo line ) { if ( linesList == null ) linesList = new ArrayList < LineInfo > ( ) ; linesList . add ( line ) ; }
public void cancel ( ) { Crashlytics . log ( Log . INFO , TAG , "HTTP request cancelled" ) ; isCancelled = true ; }
private boolean isPreviewRunning ( ) { return mImplementation != null && mImplementation . isPreviewRunning ( ) ; }
public void onSurfaceTextureSizeChanged ( SurfaceTexture surfaceTexture , int i , int i1 ) { checkPreviewMatrix ( ) ; }
public void onChildChanged ( DataSnapshot dataSnapshot , String previousChildKey ) { mainAdapter . addItem ( dataSnapshot ) ; }
public void setImageDrawable ( Drawable bitmap ) { clearColorFilter ( ) ; mColorFilterOn = false ; super . setImageDrawable ( bitmap ) ; if ( bitmap != null ) { adjustNightMode ( ) ; } }
public void onDrawerOpened ( View view ) { super . onDrawerOpened ( view ) ; getSupportActionBar ( ) . setTitle ( mTitle ) ; invalidateOptionsMenu ( ) ; }
private void initialize ( ) { if ( isSupported ( ) ) { defaultTextZoom = getSettings ( ) . getTextZoom ( ) ; scaleDetector = new ScaleGestureDetector ( getContext ( ) , new ScaleListener ( ) ) ; } }
public void performAction ( final AppCompatActivity activity , final Action action ) { onActionMenuItemSelected ( this , activity , action ) ; }
public void onValueSelected ( Entry e , Highlight h ) { Toast . makeText ( requireActivity ( ) , ( int ) e . getY ( ) + " listens" , Toast . LENGTH_SHORT ) . show ( ) ; }
public boolean positionsEqual ( Cell first , Cell second ) { return first . getX ( ) == second . getX ( ) && first . getY ( ) == second . getY ( ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( this . firstPage ) ; dest . writeInt ( this . lastPage ) ; dest . writeInt ( this . partNumber ) ; }
public void onLoaderReset ( android . support . v4 . content . Loader < Cursor > inCursorUnused ) { Log . d ( Utils . getAppTag ( ) , Utils . getMethodName ( refListType ) ) ; mCursorAdapter . swapCursor ( null ) ; }
public Builder ( ) { transformer = new ScaleTransformer ( ) ; }
public RGBToolImagesCursorAdapter ( Context context ) { super ( context , null , 0 ) ; inflater = LayoutInflater . from ( context ) ; }
private void updateButtonBackDrawable ( ) { if ( buttonBackFunction == BUTTON_BACK_FUNCTION_SKIP ) { miButtonBack . setImageResource ( R . drawable . mi_ic_skip ) ; } else { miButtonBack . setImageResource ( R . drawable . mi_ic_previous ) ; } }
public int getItemCount ( ) { return colorData . getColorButtonRecents ( ) . length ; }
public SliderAdapterDemo . SliderVH onCreateViewHolder ( ViewGroup parent ) { View inflate = LayoutInflater . from ( context ) . inflate ( R . layout . slider_image , parent , false ) ; return new SliderVH ( inflate ) ; }
public void setUndoOn ( boolean undoOn ) { this . undoOn = undoOn ; }
private void NotifyDownloadFinished ( Bitmap bitmap ) { if ( imageDownloadFinished != null ) imageDownloadFinished . DownloadFinished ( ThreadId , bitmap ) ; }
public JSONObject getPendingRecovery ( ) throws IOException { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/devices/pending - recovery" , mUserId ) , requestMap ) ; }
public int getCount ( ) { return mCateGory != null ? mCateGory . size ( ) : 0 ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putBoolean ( "mFullscreen" , mFullscreen ) ; }
public EventRenderer provideEventRenderer ( APICache cache ) { return Mockito . mock ( EventRenderer . class ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `download` INTEGER NOT NULL DEFAULT 1" ) ; }
public void onPlus ( Selector s ) { selectedTimeout = RemixedDungeon . limitTimeoutIndex ( selectedTimeout + 1 ) ; update ( s ) ; }
public void addLayer ( @ NonNull ProfileLayerEvent . ProfileLayerAdded event ) { Log . i ( TAG , "Adding profile layer " + event . layer ) ; flightProfile . addLayer ( event . layer ) ; flightProfile . invalidate ( ) ; }
public void onKeyReceived ( KeyReceivedEvent event ) { reset ( ) ; }
private void populateListViews ( ) { this . list . setAdapter ( new alignAdapter0 ( this , infoTab . AllAlignments ) ) ; this . list2 . setAdapter ( new alignAdapter1 ( this , infoTab . AllRoles ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; AppBrain . init ( this ) ; }
public static FileSortOrder getSortOrder ( Context context , OCFile folder ) { return FileSortOrder . sortOrders . get ( getFolderPreference ( context , AUTO_PREF__SORT_ORDER_NAME , folder , FileSortOrder . sort_a_to_z . mName ) ) ; }
public String readNonSubstitutionCurrency ( ) { String nonSubstitutionCurrencyPref = context . getString ( R . string . pref_non_substitution_currency ) ; SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return preferences . getString ( nonSubstitutionCurrencyPref , null ) ; }
public static Observable < CnBetaApi . Result < List < ArticleSummary >>> topicArticles ( String topicId ) { long timestamp = System . currentTimeMillis ( ) ; return sCnBetaApi . topicArticles ( timestamp , CnBetaSignUtil . topicArticlesSign ( timestamp , topicId ) , topicId ) ; }
public RepaymentTransaction ( Loan loan , int transactionAmount ) { this . loan = loan ; this . transactionAmount = transactionAmount ; }
public synchronized void start ( @ NonNull Context context ) throws SecurityException { bluetooth . addNmeaListener ( this ) ; }
public void onGuiCreated ( @ NonNull V view ) { super . onGuiCreated ( view ) ; if ( mInvalidAccountContext ) { view . onUnsupportedAccountSelected ( ) ; } }
public int getItemCount ( ) { return discussionList . size ( ) ; }
private List < String > getPoshFingerprints ( String domain ) { final List < String > cached = getPoshFingerprintsFromCache ( domain ) ; if ( cached == null ) { return getPoshFingerprintsFromServer ( domain ) ; } else { return cached ; } }
public void onTargetDismissed ( TapTargetView view , boolean userInitiated ) { Configuration . setAdviceState ( advice ) ; }
public String getUsername ( ) { return StringUtils . notNullStr ( username ) ; }
public void write ( DataOutputStream dataOutputStream ) throws Exception { dataOutputStream . writeUTF ( c ) ; dataOutputStream . writeInt ( id ) ; }
public View getDropDownView ( int position , View convertView , ViewGroup parent ) { return getLayout ( position , convertView , parent , R . layout . spinner_item2_dropdown ) ; }
private void setDone ( ) { mSaveButton . setText ( getString ( R . string . done ) ) ; }
static public boolean unzip ( String zipFile , String tgtDir , @ Nullable UnzipProgress listener ) { try { return unzipStream ( new FileInputStream ( zipFile ) , tgtDir , listener ) ; } catch ( FileNotFoundException e ) { return false ; } }
public void onSetShuffleMode ( int shuffleMode ) { mSession . setShuffleMode ( shuffleMode ) ; }
public void onPlayerError ( final ExoPlaybackException error ) { Log . e ( TAG , "ExoPlayer error" , error ) ; mListener . onError ( ) ; }
private void onPullFailed ( Exception e ) { Log . w ( TAG , "pull failed " + e . toString ( ) ) ; Crashlytics . logException ( e ) ; }
public static void delete_file ( String file ) { Log . d ( TAG , "Delete file : " + file ) ; Shell . SU . run ( Arrays . asList ( "rm - rf " + file ) ) ; }
public void run ( ) { Log . i ( "TUTORIAL" , "ended" ) ; listener . onFinish ( getTutorial ( ) ) ; timings . clear ( ) ; currentSyncIndex = 0 ; }
public void onCreateView ( Bundle savedInstanceState ) { loadData ( ) ; }
public void setBackgroundBarThickness ( @ FloatRange ( from = 0 ) float thickness ) { backgroundBarThickness ( thickness ) ; invalidate ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "DELETE FROM operation WHERE name = 'wait'" ) ; }
public void onClick ( View v ) { log . info ( "Clicked create new wallet" ) ; if ( mListener != null ) { mListener . onCreateNewWallet ( ) ; } }
public void run ( ) { mActivity . initLocation ( ) ; mActivity . getApplicationInterface ( ) . getDrawPreview ( ) . updateSettings ( ) ; mActivity . updateForSettings ( ) ; }
public void execute ( Realm realm0 ) { realm . where ( City . class ) . equalTo ( RealmTable . ID , city . getId ( ) ) . findFirst ( ) . deleteFromRealm ( ) ; }
public void setContentView ( int layoutResID ) { super . setContentView ( layoutResID ) ; toolbar = ( Toolbar ) findViewById ( R . id . toolbar ) ; if ( toolbar != null ) { setSupportActionBar ( toolbar ) ; } }
public void clearVideoTextureView ( TextureView textureView ) { if ( textureView != null && textureView == this . textureView ) { setVideoTextureView ( null ) ; } }
public void firebaseAuthSignInFails_ShowsSignInButton ( ) { mAuthPresenter . handleFirebaseSignInResult ( false , USER_ID ) ; verify ( mView ) . showSignInButton ( true ) ; }
public ButtonItemAdapter ( ArrayList < String > items ) { this . items = items ; }
public Builder withData ( String label ) { TextView labelView = ( TextView ) v . findViewById ( R . id . data ) ; labelView . setText ( label ) ; return this ; }
public void setAlbumsCount ( int count ) { for ( int a = 0 ; a < albumViews . length ; a ++ ) { albumViews [ a ] . setVisibility ( a < count ? VISIBLE : GONE ) ; } albumsCount = count ; }
public Timetable ( Parcel in ) { className = in . readString ( ) ; days = in . createTypedArray ( TimetableDay . CREATOR ) ; }
public boolean onSingleTapConfirmed ( MotionEvent event ) { playSound ( cdata . getColorName ( currentNamedColor ) ) ; return true ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . player , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
private void actionCopy ( ) { List < File > selectedItems = recyclerAdapter . getSelectedItems ( ) ; recyclerAdapter . clearSelection ( ) ; transferFiles ( selectedItems , false ) ; }
public void onLocationResult ( LocationResult locationResult ) { for ( Location location : locationResult . getLocations ( ) ) { if ( currentBestLocation == null || GeoUtils . isBetterLocation ( location , currentBestLocation ) ) currentBestLocation = location ; } }
public void onGroupExpand ( int groupPosition , boolean fromUser ) { adjustScrollPositionOnGroupExpanded ( groupPosition ) ; }
public static RecipesState makeDisplayState ( @ NonNull List < Recipe > recipes ) { return new RecipesState ( recipes , false , false ) ; }
public Object getGroup ( int groupPosition ) { return tourDownloads . get ( groupPosition ) ; }
public ClusterQuery order ( String column ) { mOrderBy = column ; return this ; }
public void onTimeSet ( TimePicker timePicker , int hour , int minute ) { setNotificationTime ( year , month , day , hour , minute ) ; }
public int getType ( ) { return R . id . mName ; }
public void setText ( String text ) { header . setTitle ( text ) ; runOnUiThread ( adapter : : notifyDataSetChanged ) ; }
public void run ( ) { Toast . makeText ( context , R . string . gallery_saved , Toast . LENGTH_SHORT ) . show ( ) ; adapter . notifyDataSetChanged ( ) ; }
public static String toIsoString ( byte [ ] bytes ) { try { return new String ( bytes , CharacterSets . MIMENAME_ISO_8859_1 ) ; } catch ( UnsupportedEncodingException e ) { throw new AssertionError ( "ISO_8859_1 must be supported ! " ) ; } }
public static void trackRailcarRender ( String railcarJson ) { if ( TextUtils . isEmpty ( railcarJson ) ) { return ; } AnalyticsTracker . track ( TRAIN_TRACKS_RENDER , railcarJsonToProperties ( railcarJson ) ) ; }
public void onClansChanged ( String clan , boolean isChecked ) { if ( ! restoring ) { filterModel . setClan ( clan , isChecked ) ; updateSearchSettingsButtonState ( ) ; filterCryptCards ( ) ; } }
private void bindPreference ( Preference preference ) { preference . setOnPreferenceClickListener ( this ) ; }
public void inflateButton ( ViewGroup viewGroup ) { LayoutInflater . from ( getContext ( ) ) . inflate ( R . layout . media_toobar_camera_button , viewGroup ) ; }
public void clearEventSearch ( ) { preferences . edit ( ) . remove ( STAT_SEARCH_KEY ) . commit ( ) ; }
public void setCisId ( String cisId ) { this . cisId = cisId ; }
public SettingsItem ( JSONObject object ) { item = object ; }
public Observable < List < Review >> getAllReviews ( String foodtruckId ) { return networkRepository . getAllReviews ( foodtruckId ) . doOnNext ( reviews -> viewModelRepository . getViewModel ( uuid ) . setReviews ( reviews ) ) ; }
public void testParseTestbedPageWithOneTimestampMissing ( ) throws Exception { initHTMLPage ( "testbed_timestamps_length_error . html" ) ; TestbedParsedPage page = pageService . downloadAndParseTestbedPage ( "http : }
public void setDeviceLang ( String language ) { appPrefsEditor . putString ( "device_lang" , language ) ; appPrefsEditor . apply ( ) ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( UnderSwipeableExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
private Bundle makeTransitionBundle ( View sharedElementView ) { return ActivityOptionsCompat . makeSceneTransitionAnimation ( getActivity ( ) , sharedElementView , ViewCompat . getTransitionName ( sharedElementView ) ) . toBundle ( ) ; }
public void run ( ) { rescanTogglePause . setImageDrawable ( getResources ( ) . getDrawable ( R . drawable . fs_scan_unpause48 ) ) ; }
public AddPortMappingCall ( String serviceType ) { mNamespace = serviceType ; }
public void loginCallback ( boolean sucess ) { if ( activity instanceof LoginActivity2 ) ( ( LoginActivity2 ) activity ) . gotLoginResult ( sucess ) ; else Log . d ( "dtube4" , sucess ? "logged in" : "login failed" ) ; }
public TriggerData ( Parcel in ) { readFromParcel ( in ) ; }
public void setVals ( float [ ] vals ) { setY ( calcSum ( vals ) ) ; mYVals = vals ; calcPosNegSum ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . lyric_bottom_sheet , container , false ) ; }
public static IVideosInteractor createVideosInteractor ( ) { return new VideosInteractor ( Injection . provideNetworkInterfaces ( ) , Injection . provideRepositories ( ) ) ; }
public void setClickableOverlay ( boolean clickableOverlay ) { this . mClickableOverlay = clickableOverlay ; setOnClickListener ( mClickListener ) ; }
private void writeToDatabaseWithPieces ( ) { repo . updateInfo ( context , info , false , true ) ; }
public void recreateMarker ( int radius ) { mRadius = radius ; if ( mRadius == - 1 ) { mRadius = mPrefs . getRadius ( ) ; } if ( mMap != null ) { addMarkers ( ) ; } }
public static Intent authenticationErrorWarning ( Context context ) { Intent i = new Intent ( context . getApplicationContext ( ) , MainActivity . class ) ; i . setAction ( ACTION_AUTH_ERROR_WARNING ) ; return i ; }
public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryTelegrams ( 0 , direction ) ; }
public void onPause ( ) { Timber . d ( "onPause ( ) " ) ; savePrefs ( ) ; super . onPause ( ) ; }
public void setReleaseTime ( float time ) { if ( time < MIN_TIME ) time = MIN_TIME ; mRreleaseRate = 1 . 0f / ( SynthEngine . FRAME_RATE * time ) ; }
public JsonOkHttpRequest ( Context context , Class < D > token ) { this ( context , ( Type ) token ) ; }
public void setCanopyType ( String canopyType ) { this . canopyType = canopyType ; }
private void setupviews ( ) { TextField = ( TextView ) findViewById ( R . id . body ) ; }
public void setPayout ( String payout ) { this . payout = payout ; }
public Cursor queryNotes ( long modelId ) { return mResolver . query ( Note . CONTENT_URI_V2 , PROJECTION , String . format ( "%s = %d" , Note . MID , modelId ) , null , null ) ; }
public void onClick ( View v ) { switch ( v . getId ( ) ) { case R . id . login_button : signIn ( ) ; break ; case R . id . register_button : register ( ) ; break ; } }
public void networkChange ( boolean samenetwork ) { if ( mWaitingForRelease ) releaseHold ( ) ; else if ( samenetwork ) managmentCommand ( "network - change samenetwork\n" ) ; else managmentCommand ( "network - change\n" ) ; }
public int damage ( int damage , NamedEntityKind src ) { detach ( ) ; return super . damage ( damage , src ) ; }
public void notifyGroupItemRangeInserted ( int groupPositionStart , int itemCount , boolean expanded ) { mAdapter . notifyGroupItemRangeInserted ( groupPositionStart , itemCount , expanded ) ; }
public Invite ( String uri ) { super ( uri ) ; }
public Maybe < Boolean > delete ( Tag entity ) { return Maybe . just ( true ) ; }
public CommandInfo getItem ( int i ) { return mCommands . get ( i ) ; }
public boolean isSaved ( ) { return mSaved == mEditHistory . getCurrent ( ) ; }
public static String [ ] getImageFilenames ( ) { return new String [ ] { "custom_image" , "wallpaper_desktop" } ; }
public Forum ( String header , String body , Date date , String authorUsername , boolean answered ) { this . header = header ; this . body = body ; this . date = date ; this . authorUsername = authorUsername ; this . answered = answered ; }
public void onStart ( ) { super . onStart ( ) ; subscription = RxBus . getInstance ( ) . toObserverable ( ) . subscribe ( this : : handleEvent ) ; }
private void initComponents ( ) { if ( sleep == null ) return ; initToobar ( ) ; populateView ( ) ; }
public Jid getJid ( ) { try { return this . jid == null ? null : Jid . of ( this . jid ) ; } catch ( IllegalArgumentException e ) { return null ; } }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { translateLanguageManager . setTargetLang ( langKeyList . get ( position ) ) ; }
public void unbind ( final TextView view ) { for ( ObjectInfo info : mObjectInfos . values ( ) ) { info . unbind ( view ) ; } }
public void setDialog ( CustomDialog dialog ) { customDialog = dialog ; update ( 0 ) ; }
public void onClick ( DialogInterface dialog , int which ) { Uri uri = Uri . parse ( etLink . getText ( ) . toString ( ) ) ; Helper . view ( getContext ( ) , getActivity ( ) , uri , true ) ; }
public MediatorLiveData < List < EducationEntity >> getObservableEducations ( ) { return mObservableEducations ; }
public int compare ( AppDetail t1 , AppDetail t2 ) { return ( int ) ( ( t2 . getOpenScale ( context , activityKey ) * 100 ) - ( t1 . getOpenScale ( context , activityKey ) * 100 ) ) ; }
public void setResolutionImageUrl ( Context context ) { this . imageUrl = BingWallpaperUtils . getResolutionImageUrl ( context , this ) ; }
public void onCreateView ( View view ) { mTitle = ( TextView ) view . findViewById ( R . id . title ) ; setFullSpan ( true ) ; super . onCreateView ( view ) ; }
public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( todoListDAO ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( MainActivity . this , AddPasswordActivity . class ) ; startActivityForResult ( intent , ADD_ROW_REQUEST ) ; }
public Counts counts ( @ NonNull Card card ) { Counts counts = counts ( ) ; int idx = countIdx ( card ) ; counts . changeCount ( idx , 1 ) ; return counts ; }
public boolean suppressFlingGesture ( MotionEvent e1 , MotionEvent e2 , float velocityX , float velocityY ) { return slider . isSuppressFlingGesture ( ) ; }
public static File getWebPageArchiveFileForUrl ( Context context , String url ) { return new File ( getWebPageArchiveStorage ( context ) , getWebPageArchiveFilename ( url ) ) ; }
public void onSuccess ( Void aVoid ) { localSource . update ( post , null ) ; if ( loggedUserId . equals ( senderId ) ) return ; runReputationCountTransition ( senderId , true , true ) ; callback . onSuccess ( post ) ; }
public String visit ( Genre genre ) { return genre . getName ( ) ; }
public List < FoodMeasureTable > getDbFoodMeasureTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getFoodMeasureTable ( getDbConfig ( ) . version , language ) . blockingGet ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . incognito , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void setBookmarks ( final List < Bookmark > bookmarks ) { this . bookmarks = bookmarks ; }
private void unregisterImageDownloadReceiver ( ) { if ( downloadCompleteReceiver != null ) { getActivity ( ) . unregisterReceiver ( downloadCompleteReceiver ) ; downloadCompleteReceiver = null ; } }
public void setWalletIndex ( String walletIndex ) { this . walletIndex = walletIndex ; }
public void onInput ( @ NonNull MaterialDialog dialog , CharSequence input ) { mServiceBus . post ( new PassphraseInputEvent ( input . toString ( ) ) ) ; }
private Uri getTreeUriSAF ( ) { String folder_name = getSaveLocationSAF ( ) ; return Uri . parse ( folder_name ) ; }
public void onClick ( DialogInterface dialog , int which ) { ActivityCompat . requestPermissions ( getActivity ( ) , new String [ ] { Manifest . permission . WRITE_EXTERNAL_STORAGE } , MainActivity . MANAGER_PERMISSIONS_REQUEST_ACCESS_IMPORT_EXTERNAL ) ; }
public Date getEndDate ( ) { return null ; }
public void onItemSelected ( ) { itemView . setBackgroundColor ( Color . LTGRAY ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `operation` ADD COLUMN `state` TEXT" ) ; }
public void resetMenu ( ) { showMenu ( mMenu ) ; }
public MuscnApiInterface getApiInterface ( ) { return mApiInterface = ( ( MyApplication ) getActivity ( ) . getApplication ( ) ) . getApiInterface ( ) ; }
public void onException ( Exception e ) { e . printStackTrace ( ) ; Dialogs . showErrorDialog ( getContext ( ) , R . string . encryption_set_password_error , e ) ; }
public void setSensorsToListen ( SparseIntArray sensors ) { }
public void setItem ( NoteImage mItem ) { this . mItem = mItem ; }
public void onDestroy ( ) { super . onDestroy ( ) ; disableDataUpdateService ( ) ; LocalBroadcastManager . getInstance ( OpenStackSummitApplication . context ) . unregisterReceiver ( messageReceiver ) ; view . hideActivityIndicator ( ) ; RealmFactory . closeSession ( ) ; }
public ArrayList < ColorInfo > getSocialList ( ) { return this . socialList ; }
public void testFormatDoodleCaptionWrongFormatting ( ) throws Exception { String unFormattedText = "this is *invalid text" ; try { nameFormatHelper . formatDoodleCaption ( unFormattedText ) ; fail ( ) ; } catch ( IllegalArgumentException e ) { } }
public void onBindViewHolder ( TestInfoViewHolder holder , int position ) { holder . binding . setTestInfo ( mTestList . get ( position ) ) ; holder . binding . executePendingBindings ( ) ; }
public SimpleFoldShading ( ) { mSolidShadow = new Paint ( ) ; mSolidShadow . setColor ( SHADOW_COLOR ) ; }
public static void setMode ( String mode ) { script . run ( "setMode" , mode ) ; }
public void testStringConstructorNull ( ) throws JSONException { try { new JSONArray ( ( String ) null ) ; fail ( ) ; } catch ( NullPointerException e ) { } }
private static String getStorageKey ( int widgetId ) { return "instanceSettings" + widgetId ; }
public static Log newFor ( Object o ) { return new Log ( getInstance ( ) , o . getClass ( ) . getName ( ) ) ; }
public Syncer ( Collection col , HttpSyncer server , HostNum hostNum ) { mCol = col ; mServer = server ; mHostNum = hostNum ; }
public void onClick ( View v ) { Date date = getItem ( position ) ; dinnerContract . delete ( date . getTime ( ) , DinnerContract . columnDate , dbHelper ) ; updateResults ( ) ; }
public boolean syncOpen ( ) { boolean ret = openFTDI ( ) ; if ( ret ) { setSyncParams ( inEndpoint , outEndpoint ) ; return true ; } else { return false ; } }
private void checkIsDNDModeActive ( ) { if ( AudioUtils . isDoNotDisturbActive ( ) ) { Toast . makeText ( this , R . string . text_dndWarning , Toast . LENGTH_LONG ) . show ( ) ; } }
public void setDescription ( final CharSequence description ) { this . description . setText ( description ) ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . ns_help_register ( server . getCid ( ) ) ; dismiss ( ) ; }
public void processStartupProgress ( StartupProgressEvent event ) { statusTextView . setText ( event . message ) ; }
public String getHomepage ( ) { return mPrefs . getString ( Name . HOMEPAGE , Constants . HOMEPAGE ) ; }
private void getData ( ) { noteId = getIntent ( ) . getIntExtra ( "noteId" , - 1 ) ; folderId = getIntent ( ) . getIntExtra ( "folderId" , - 1 ) ; noteMvpPresenter . getNote ( noteId , folderId ) ; }
public void setNumber ( int number ) { if ( mResourceLabel != - 1 ) { mText = getContext ( ) . getResources ( ) . getString ( mResourceLabel , number ) ; } else { mText = Integer . toString ( number ) ; } }
public static void saveCategories ( CategoryModel [ ] categories ) { if ( categories == null ) return ; for ( CategoryModel category : categories ) { saveCategory ( category ) ; } }
public void testSignData ( ) throws Exception { SimpleSigner . signData ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ) ; }
public static List < OstSession > getSessionsToSync ( String parentId ) { return getSessions ( parentId , CONST_STATUS . AUTHORISED , CONST_STATUS . INITIALIZING ) ; }
public void run ( ) { registerTermoBroadCastReceiver ( ) ; if ( isDebug ) Log . d ( LOG_TAG , "CircleWidgetUpdater Started" ) ; }
public GameSpriteInterface getCloudFg1 ( Resources res ) { return new CloudSprite ( res , this . cloudFg1DrawableId , this . cloudFg1InitPos . first , this . cloudFg1InitPos . second , this . cloudFg1Scale , this . cloudFg1SpeedX ) ; }
public static boolean isBatteryBelowThreshold ( Context context , int threshold ) { return Utils . getBatteryLevel ( context ) <= threshold ; }
public double getLatitude ( ) { return getDouble ( CONFIG_CENTER_LAT ) ; }
public void restoreActionBar ( ) { ActionBar actionBar = getSupportActionBar ( ) ; if ( actionBar != null ) { actionBar . setDisplayShowTitleEnabled ( true ) ; actionBar . setTitle ( mTitle ) ; } }
public void onAudioFocusChange ( final int focusChange ) { mPlayerHandler . obtainMessage ( FOCUSCHANGE , focusChange , 0 ) . sendToTarget ( ) ; }
public void clickFacSearch ( View v ) { Intent i = new Intent ( this , SearchFaculty . class ) ; startActivity ( i ) ; }
public int getIndex ( ) { return data . index ; }
public void setItems ( List < PostModel > entries , boolean firstPage ) { if ( ! entries . isEmpty ( ) ) { if ( firstPage ) { partManager . clearBinders ( ) ; } partManager . setItemsForBinding ( entries ) ; } notifyDataSetChanged ( ) ; }
public VoiceOutputAssistant ( @ ForApplication Context context ) { this . context = context ; }
public void call ( MenuListActivity activity ) { if ( isRequestingPermission ( activity , Manifest . permission . WRITE_EXTERNAL_STORAGE ) ) { return ; } showPickOneDialog ( activity , R . string . import_export , ImportExportEntities . values ( ) , activity ) ; }
public boolean getNightMode ( Context c ) { openSettings ( c ) ; return settings . getBoolean ( "NightMode" , false ) ; }
public void update ( ) { super . update ( ) ; if ( ( left -= Game . elapsed ) <= 0 ) { kill ( ) ; } }
public void toggleAnimation ( ) { Log . i ( "ModelSurfaceView" , "Toggling textures . . . " ) ; mRenderer . toggleAnimation ( ) ; }
public void initXfer ( ) throws RemoteException { handler . sendEmptyMessage ( MESSAGE_STARTUP ) ; }
public void notifyQuerySettingChanged ( ) { loadRealm ( getFilterPodcastTitle ( ) ) ; adapter_ . notifyDataSetChanged ( ) ; }
public Long next ( ) { Long long_ = getLong ( index ) ; index ++ ; return long_ ; }
public AbsCustomPlaylist ( int id , String name ) { super ( id , name ) ; }
private void thenDelegateShouldInvalidateOptionsMenu ( ) { new Verifications ( ) { { mAppCompatDelegate . invalidateOptionsMenu ( ) ; } } ; }
public Cursor getCursor ( ) { return DatabaseFactory . getRecipientPreferenceDatabase ( getContext ( ) ) . getBlocked ( ) ; }
public void updateSize ( int columns , int rows ) { if ( VTTEST_MODE ) { columns = 80 ; rows = 24 ; } Exec . setPtyWindowSize ( mTermFd , rows , columns , 0 , 0 ) ; super . updateSize ( columns , rows ) ; }
public CategoryInfo ( Parcel source ) { category = ( Category ) source . readSerializable ( ) ; visible = source . readInt ( ) == 1 ; }
public void goToFirstPage ( ) { getArguments ( ) . putInt ( "page" , 1 ) ; restartLoader ( this ) ; }
public List < Vm . Status > getValues ( ) { return values ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromTouch ) { mKiSeekBarValue . setText ( String . format ( "% . 2f" , ( float ) progress / 100 . 0f ) ) ; }
public static String getCreateEntriesQuery ( ) { return "CREATE TABLE " + tableName + " ( " + _ID + " INTEGER PRIMARY KEY , " + columnName + " TEXT ) " ; }
public void onResume ( ) { super . onResume ( ) ; getPresenter ( ) . onResume ( ) ; }
public static MoreInfoFragment newInstance ( ) { return new MoreInfoFragment ( ) ; }
public String desc ( ) { return Game . getVar ( R . string . ManaPotion_Info ) ; }
public DrawerBuilder ( @ NonNull Activity activity ) { this . mRootView = ( ViewGroup ) activity . findViewById ( android . R . id . content ) ; this . mActivity = activity ; this . mLayoutManager = new LinearLayoutManager ( mActivity ) ; }
public static SqlBuilder createTrigger ( final String triggerName ) { final StringBuilder sql = new StringBuilder ( "CREATE TRIGGER " + triggerName ) ; return new SqlBuilder ( sql ) ; }
public void setMeaningId ( Number meaningId ) { this . meaningId = meaningId ; }
public static Long getOCMStationIdFromJson ( JSONObject jsonStation ) throws JSONException { return jsonStation . getLong ( OCM_ID ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; FetchHelper . invalidate ( ) ; }
public static void setImageUrl ( ImageView imageView , String name ) { setImage ( imageView , BRAND_IMAGE_PATH + name + " . webp" ) ; }
public Map < Long , String > getSelectedContacts ( ) { return selectedContacts ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { eventManager . fire ( new KlasseChooseEvent ( parent . getSelectedItem ( ) . toString ( ) ) ) ; }
public void onRecycleViewHolder ( @ NonNull ViewHolder holder ) { Glide . clear ( holder . image ) ; }
public void setSpeed ( long speed ) { this . mSpeed = speed ; }
public void onCountriesDownloaded ( @ NonNull ArrayList < Country > countries ) { this . countries = countries ; if ( ! Country . saveCountries ( context , countries ) ) { changeStateTo ( MultiStateView . VIEW_STATE_ERROR , RETRY_ACTION_DOWNLOAD ) ; return ; } updateUI ( ) ; }
public void run ( ) { adapter = new AutoCompletePeopleAdapter ( context , cursor , textView ) ; userAutoComplete . setAdapter ( adapter ) ; }
public void onClickRemoveFavorite ( final View view ) { Log . v ( LOG_TAG , "onClickRemoveFavorite ( ) called with : " + "view = [ " + view + " ] " ) ; setFavorite ( false ) ; }
public GameBoard . GameStages getGameStage ( ) { if ( ! m_Tablet ) { return m_GameBoard . getGameStage ( ) ; } else { return m_PlayerBoard . getGameStage ( ) ; } }
public static String extractData ( byte [ ] data , int position ) { return HexUtil . encodeHexStr ( new byte [ ] { data [ position ] } ) ; }
public void searchTv ( String text ) { tvRepository . searchTvs ( text ) . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( resource -> getTvsLiveData ( ) . postValue ( resource ) ) ; }
public GeoPackageAdapter ( List < Object > geos , RecyclerViewClickListener listener ) { mGeoPackages = geos ; mListener = listener ; }
private boolean supportedAccountType ( @ Nullable String type ) { return ACCOUNT_TYPE . equals ( type ) ; }
public State getState ( ) { return mState ; }
public String getTimeEnter ( ) { return oraSosirii ; }
public int hashCode ( ) { return Objects . hash ( uuid , title , createdAt , changedAt , position , parentTodoListUuid ) ; }
public SlidingPagerAdapter ( FragmentManager fm , boolean isRtl ) { super ( fm ) ; mIsRtl = isRtl ; }
private ResultWrapper process ( Wrapper data ) { return new ResultWrapper ( DashboardGeneralFragmentHelper . getCpuUtilization ( data . vms ) . first , DashboardGeneralFragmentHelper . getMemoryUtilization ( data . vms ) , getDisksUtilization ( data . disks ) ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_phone_phoneCall . TLdeserialize ( stream , constructor , exception ) ; }
public void setAudioAttributes ( AudioAttributes audioAttributes ) { if ( this . audioAttributes . equals ( audioAttributes ) ) { return ; } this . audioAttributes = audioAttributes ; if ( tunneling ) { return ; } reset ( ) ; audioSessionId = C . AUDIO_SESSION_ID_UNSET ; }
public String getTitle ( Context context ) { return QuranInfo . getSuraAyahString ( context , mCurrentSura , mCurrentAyah ) ; }
public static boolean saveMiddlePassCheckData ( String passHash ) { String checkData = Crypter . createMiddlePassHashCheckData ( passHash ) ; return Instance . mDatabaseConfig . saveCheckData ( checkData ) ; }
public static void markDone ( String tag ) { mTaskPreferencesUtils . putLong ( tag , DateTime . now ( DateTimeZone . UTC ) . getMillis ( ) ) . apply ( ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( Settings . this , SettingsFont . class ) ; startActivity ( i ) ; }
public FragmentNavigationController getNavigationController ( ) { return mNavigationController ; }
public void onError ( String error ) { view . dismissProgressDialog ( ) ; view . showFailDialog ( error ) ; }
public void onPageFinished ( WebView view , String url ) { super . onPageFinished ( view , url ) ; webviewLoading = false ; showEditDoneProgress ( false ) ; updateSavePaymentField ( ) ; }
public void uploadGroup ( ) { upload ( Constants . DIR_GROUP_SD ) ; }
public void setTitle ( CharSequence title ) { mTitle = title ; if ( mTitleView != null ) { mTitleView . setText ( title ) ; } }
public static Theme getDefaultTheme ( ) { return Theme . LIGHT_DARKACTIONBAR ; }
public int getVisibleSatelliteCount ( ) { return Integer . valueOf ( get ( "satellites" , "0" ) ) ; }
public int hashCode ( ) { int result = name . hashCode ( ) ; result = 31 * result + ( ipAdr != null ? ipAdr . hashCode ( ) : 0 ) ; result = 31 * result + port ; return result ; }
private double [ ] hexToLAB ( String hex ) { return colorToLAB ( hexToColor ( hex ) ) ; }
public void onAnimationEnd ( Animation animation ) { if ( ! mCoverUpdated ) { mImgArt . setImageBitmap ( App . mClementine . getCurrentSong ( ) . getArt ( ) ) ; mImgArt . startAnimation ( mAlphaUp ) ; } mCoverUpdated = ! mCoverUpdated ; }
public void disablePluginTest ( ) { Integer id = null ; }
public EighthActivityBuilder memberCount ( int memberCount ) { this . memberCount = memberCount ; return this ; }
public boolean nextSlide ( ) { int currentItem = binding . miPager . getCurrentItem ( ) ; return goToSlide ( currentItem + 1 ) ; }
public void getComics ( long characterId , Integer offset , Integer limit , Callback < DataWrapper < List < Comic >>> listener ) { getComicListByType ( characterId , COMIC_TYPE_COMICS , offset , limit ) . enqueue ( listener ) ; }
private void trackCommentNote ( Note note ) { if ( note . isCommentType ( ) ) { SiteModel site = mSiteStore . getSiteBySiteId ( note . getSiteId ( ) ) ; AnalyticsUtils . trackCommentActionWithSiteDetails ( Stat . COMMENT_VIEWED , AnalyticsCommentActionSource . NOTIFICATIONS , site ) ; } }
public void seek ( long position ) { parserState = STATE_READING_HEADER ; }
public void onClick ( View v ) { ( ( Activity ) context ) . startActivityForResult ( AnimusLauncherMethods . launchPhotoViewer ( v , context , filename ) , 2 ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "dk . alroe . apps . octopub" , appContext . getPackageName ( ) ) ; }
public static int getSelectedSite ( ) { return getInt ( DeletablePrefKey . SELECTED_SITE_LOCAL_ID , - 1 ) ; }
public Float getEveningWeight ( ) { return eveningWeight ; }
private void ensureControllerCreated ( ) { if ( mController == null ) { mController = new GestureControllerForPager ( this ) ; } }
public void addValidation ( EditText editText , Pattern pattern , String errMsg ) { mValidator . set ( editText , pattern , errMsg ) ; }
public void shouldNotPassValidation_noGender ( ) { presenter . subscribe ( ) ; patient . getPerson ( ) . setGender ( null ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
private void storeSetting ( String key , String value ) { getSharedPreferences ( PREFERENCES_NAME , Context . MODE_PRIVATE ) . edit ( ) . putString ( key , value ) ; }
public void onStop ( ) { mTagBookmarkPresenter . unbind ( ) ; super . onStop ( ) ; }
public Long getClientId ( ) { return clientId ; }
public Bitmap makeBitmapFit ( Bitmap photo , int wh ) { return makeBitmapFit ( photo , wh , wh ) ; }
public boolean supports ( String name ) { boolean supported = true ; switch ( name ) { case FEATURE_TITLE : case FEATURE_CATEGORIES : case FEATURE_CONTACTS : case FEATURE_AUDIO : case FEATURE_LOCATION : case FEATURE_POST_STATUS : supported = false ; } return supported ; }
public Class < ? > getActivityClass ( ) { return null ; }
public static void log ( Context context , String s ) { log ( context , s , Types . INFO ) ; }
public MultiredditPostListURL sort ( PostSort newOrder ) { return new MultiredditPostListURL ( username , name , newOrder , limit , before , after ) ; }
public Thread newThread ( Runnable runnable ) { return new Thread ( runnable , THREAD_NAME + counter ) ; }
public void OnStreamingCompleteEvent ( StreamingCompleteEvent event ) { if ( sharedPref . getBoolean ( getString ( R . string . sleep_after_job ) , false ) && ! machineStatus . getState ( ) . equals ( Constants . MACHINE_STATUS_CHECK ) ) { onGcodeCommandReceived ( GrblUtils . GRBL_SLEEP_COMMAND ) ; } }
public String toXML ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSDrive o : drives ) { strOut . append ( o . toXml ( ) ) ; } return strOut . toString ( ) ; }
public void onSlide ( @ NonNull View bottomSheet , float slideOffset ) { }
public ContactCheck ( String id , String name , Bitmap photo , boolean checked ) { super ( id , name , photo ) ; this . checked = checked ; }
private static Tweet tweetOrRetweetedStatus ( Tweet tweet ) { return tweet . retweetedStatus == null ? tweet : tweet . retweetedStatus ; }
public void onAnimationCancel ( Animator animation ) { if ( binding . miPager . isFakeDragging ( ) ) binding . miPager . endFakeDrag ( ) ; }
private void logoutUser ( ) { Intent logoutIntent = new Intent ( MainActivity . this , OnboardingActivity . class ) ; startActivity ( logoutIntent ) ; finish ( ) ; }
public static void remove ( String key ) { prefs . edit ( ) . remove ( key ) . commit ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . ignore ( buffer . getCid ( ) , input . getText ( ) . toString ( ) ) ; dialog . dismiss ( ) ; }
public Peers process ( @ NonNull AbstractClient client , @ NonNull JSONObject obj ) throws JSONException { return new Peers ( obj . getJSONArray ( "result" ) ) ; }
public int getItemCount ( ) { return content . getNumNames ( ) ; }
public ArrayList < PieSlice > getSlices ( ) { return slices ; }
private CurrentState updateState ( State state , Workflow workflow ) { return updateState ( state , workflow , null ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_affectedHistory . TLdeserialize ( stream , constructor , exception ) ; }
public ArrayList < Integer > _availClozeOrds ( Model m , String [ ] sflds ) { return _availClozeOrds ( m , sflds , true ) ; }
public void openAbout ( View v ) { Intent i = new Intent ( this , TextDisplayActivity . class ) ; i . putExtra ( "text" , "about" ) ; startActivity ( i ) ; }
private ForeignNote noteFromFields ( List < String > fields ) { ForeignNote note = new ForeignNote ( ) ; note . mFields . addAll ( fields ) ; note . mTags . addAll ( Arrays . asList ( mTagstoadd ) ) ; return note ; }
public void multitouchZoom ( int new_zoom ) { main_activity . getMainUI ( ) . setSeekbarZoom ( ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `raw` INTEGER" ) ; }
public static long convertToSystemTime ( String datetime , String initialTimezone ) { return new DateTime ( datetime , DateTimeZone . forID ( initialTimezone ) ) . withZone ( DateTimeZone . forID ( TimeZone . getDefault ( ) . getID ( ) ) ) . getMillis ( ) ; }
public static DashboardPosition getDashboardPosition ( Vm . Status status ) { VmStatusMap result = map . get ( status ) ; return result == null ? DashboardPosition . UNKNOWN : DashboardPosition . fromValue ( result . ordinal ( ) ) ; }
public boolean setPlaying ( String id ) { return setPlaying ( getSong ( ) . getId ( ) . equals ( id ) ) ; }
public MessagePatch setExtras ( Map < Integer , String > extras ) { this . extras = extras ; return this ; }
public void run ( ) { try { fairy_glow_on = ! fairy_glow_on ; setFairyImage ( ) ; } finally { if ( fairy_glow_mode ) { mHandler . postDelayed ( mGlowRunner , FAIRY_GLOW_INTERVAL ) ; } else { fairy_glow_on = false ; } } }
public boolean onStopJob ( JobParameters params ) { AppLog . i ( AppLog . T . READER , "reader service > stopped" ) ; jobFinished ( params , false ) ; return false ; }
public void onClick ( View view ) { loader . setWallpaper ( image . getLarge ( ) ) ; loader . setType ( WallpaperManager . FLAG_LOCK ) ; loader . execute ( ) ; mBottomSheetDialog . dismiss ( ) ; }
public void onResume ( ) { super . onResume ( ) ; showEvents ( currentDay ) ; }
public int getTitleStringId ( ) { return R . string . course ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; viewModel = ViewModelProviders . of ( requireActivity ( ) , viewModelFactory ) . get ( FormSaveViewModel . class ) ; }
public Area setArea ( int areaX , int areaZ , Area area ) { return map . setArea ( areaX , areaZ , area ) ; }
private void hideEmptyView ( ) { if ( isAdded ( ) ) { mEmptyView . setVisibility ( View . GONE ) ; } }
public static boolean isLockModeEnabled ( ) { return Prefs . contains ( Constants . IS_LOCK_MODE_ENABLED ) ; }
public Job create ( @ NonNull String tag ) { if ( tag . equals ( NOTIFICATIONS_JOB_TAG ) ) { return new NotificationPullJob ( context ) ; } return null ; }
public void onClick ( View view ) { insertBookmark ( removedBookmark ) ; }
private ModManager ( ) { Log . e ( "ModMan" , "Initializing . . . " ) ; }
public void run ( ) { if ( mProgressListener != null ) { float progressFraction = ( float ) ( finalI + 1 ) / ( float ) listSize ; mProgressListener . onGenerateProgress ( progressFraction , finalI + 1 , mStats . generated ) ; } }
public static VpnProfile getAlwaysOnVPN ( Context context ) { checkInstance ( context ) ; SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; String uuid = prefs . getString ( "alwaysOnVpn" , null ) ; return get ( uuid ) ; }
public void deactivate ( ) { uses = 0 ; sprite . ifPresent ( sprite -> sprite . reset ( usedImage ( ) ) ) ; }
public void run ( ) { tweetButtonUtils . setUpButtons ( status , countsView , buttonsRoot , true , loadSuccess ) ; }
public void removeOnStateChangeListener ( OnStateChangeListener listener ) { stateListeners . remove ( listener ) ; }
private String getCurrentTagName ( ) { return ( mCurrentTag != null ? mCurrentTag . getmTagSlug ( ) : "" ) ; }
public void onClick ( View v ) { hasExtraEntropy = ! hasExtraEntropy ; generateNewSeed ( mnemonicView ) ; if ( hasExtraEntropy ) { Toast . makeText ( getActivity ( ) , R . string . extra_entropy , Toast . LENGTH_SHORT ) . show ( ) ; } }
public void onAnimationEnd ( Animation animation ) { startActivity ( new Intent ( getApplicationContext ( ) , WelcomeActivity . class ) ) ; finish ( ) ; }
public float getDistance ( ) { return Distance ; }
public void handleInboxClick ( final AppCompatActivity activity ) { if ( currentItem != null ) { currentItem . handleInboxClick ( activity ) ; } }
public ArrayList < NewsData > iot ( String jsontxt ) { Gson gson = new Gson ( ) ; return gson . fromJson ( jsontxt , new TypeToken < ArrayList < NewsData >> ( ) { } . getType ( ) ) ; }
public static boolean isSupported ( ) { return am . isBluetoothScoAvailableOffCall ( ) ; }
public void load ( String json ) { JSONObject tags = new JSONObject ( json ) ; for ( String t : tags ) { mTags . put ( t , tags . getInt ( t ) ) ; } mChanged = false ; }
public void onMediaListFetched ( OnMediaListFetched event ) { if ( event . isError ( ) ) { handleFetchAllMediaError ( event . error . type ) ; return ; } handleFetchAllMediaSuccess ( event ) ; }
public void onClick ( View view ) { if ( mOnCommentActionClickListener != null ) { mOnCommentActionClickListener . onCommentClicked ( v , view . getTag ( R . id . comment_id ) . toString ( ) ) ; } }
public static final int getThemedColor ( Context ctx , int attributeId ) { return getThemedColor ( ctx . getTheme ( ) , attributeId ) ; }
public void onEditDocument ( Long documentId ) { ActivityEditDocument . launchForResult ( this , documentId , Codes . EDIT_DOCUMENT_CODE ) ; }
public int getLocalTableBlogId ( ) { return localTableBlogId ; }
public static boolean isNewDirectoryRecursive ( HFile file ) { return file . getName ( ) . equals ( file . getParentName ( ) ) ; }
public void onCreate ( Bundle savedInstance ) { super . onCreate ( savedInstance ) ; if ( ! hasStarted ) { Intent i = new Intent ( this , MainActivity . class ) ; startActivity ( i ) ; } finish ( ) ; }
private void showLoudness ( ) { binding . volumePrefs . setDetailText ( String . format ( Locale . getDefault ( ) , getString ( R . string . loudness ) + " %d" , mPrefs . getLoudness ( ) ) ) ; }
private void showProfile ( String userId ) { Intent profileIntent = new Intent ( App . applicationContext , ViewProfileActivity . class ) ; profileIntent . putExtra ( Keys . userId , userId ) ; startActivity ( profileIntent ) ; }
private final void NavigateInternal ( Uri uri , String posTo ) { fileListView . Navigate ( uri , posTo ) ; okButton . setEnabled ( isFileSelected ( ) ) ; }
public void onAnimationEnd ( Animator animation ) { mProgressView . setVisibility ( show ? View . VISIBLE : View . GONE ) ; }
public void pickImportExistingWallet ( View view ) { Intent intent = new Intent ( getBaseContext ( ) , ImportWalletActivity . class ) ; startActivity ( intent ) ; }
private void getDataAndGradesFromBundle ( ) { year = getArguments ( ) . getInt ( "year" ) ; grades = ( GradesList ) getArguments ( ) . getSerializable ( "list" ) ; adapterList = grades . clone ( ) ; }
private @ Nullable CallInfo getLastCallInfo ( ) { try { if ( mLastCallInfo == null ) { mLastCallInfo = getInfo ( ) ; } return mLastCallInfo ; } catch ( Exception e ) { mRemoteLogger . e ( "Unable to get call info" ) ; return null ; } }
public Builder vibrateWhenLongPress ( ) { _view . _vibrateWhenLongPress = true ; return this ; }
public void setToHover ( ) { this . interpolator = new CycleInterpolator ( 1 ) ; this . currentPosY = this . posY ; this . status = HeroStatus . HOVER ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; drawerToggle . onConfigurationChanged ( newConfig ) ; switchOrientation ( newConfig . orientation ) ; }
private void prepareFacebookLogin ( LoginButton loginButton ) { loginButton . setReadPermissions ( "email" ) ; loginButton . setFragment ( this ) ; loginButton . registerCallback ( facebookCallbackManager , new FacebookLoginCallback ( apisenseSdk , new OnLoggedIn ( getActivity ( ) , loginButton ) ) ) ; }
public void appendTrackPoint ( BRecordI bRecord ) { listTrackPoints . add ( bRecord ) ; }
public Builder displayStepButtons ( boolean displayStepButtons ) { style . displayStepButtons = displayStepButtons ; return this ; }
public static String getIQKeysPacketId ( ) { return Syncer . IQ_KEYS_PACKET_ID ; }
public AppInfo get ( int position ) { if ( size ( ) > 0 && ( position - 1 ) >= size ( ) ) { return super . get ( 0 ) ; } return super . get ( position ) ; }
public void onBindViewHolder ( ViewHolder holder , final int position ) { TaskItem item = mDataset . get ( position ) ; holder . binding . setTask ( item ) ; }
public void onRefresh ( ) { hostFacade . syncOne ( new ProgressBarResponse < Host > ( this ) , hostId ) ; }
public double calculateKineticEnergy ( ) { double res = 0 . 0 ; for ( Atom a : atoms ) { res += a . velocity . pow2 ( ) / 2 . 0 ; } return atomMass * Constants . EV * Constants . AK * res ; }
public int resend_verify_email ( ) { JSONObject o = new JSONObject ( ) ; return send ( "resend - verify - email" , o ) ; }
public String info ( ) { return "The alignment of the 1st status line ( < 0 = left , = 0 = center , > 0 = right ) " ; }
public void onStop ( ) { super . onStop ( ) ; disposable . clear ( ) ; }
public boolean isGroupExpanded ( int groupPosition ) { return ( mAdapter != null ) && mAdapter . isGroupExpanded ( groupPosition ) ; }
public ArrayList < Debt > getDebts ( ) { return mDebts ; }
public void execute ( @ NotNull Char chr , @ NotNull String action ) { super . execute ( chr , action ) ; chr . damage ( chr . ht ( ) , this ) ; }
public ArrayList < Movie > getMovieList ( ) { return movieList ; }
public boolean onKeyUp ( int keyCode , KeyEvent event ) { if ( keyCode == KeyEvent . KEYCODE_MENU ) { ToggleDrawer ( ) ; } return super . onKeyUp ( keyCode , event ) ; }
public void showProgressBar ( ) { SwipeRefreshLayout swipeRefreshLayout = getSwipeRefreshLayout ( ) ; if ( swipeRefreshLayout != null ) { getSwipeRefreshLayout ( ) . setRefreshing ( true ) ; } }
public int getYear ( ) { return yearofBirth ; }
public Attribute attribute ( String name ) { return new Attribute ( GLES20 . glGetAttribLocation ( handle , name ) ) ; }
public void onSearch ( ) { }
public LottieAnimatableFloatValue getCornerRadius ( ) { return cornerRadius ; }
public static long getCountdownMilliUnsigned ( ) { return Math . abs ( TimeManager . INSTANCE . getCountdownTime ( ) - TimeManager . INSTANCE . getElapsedTime ( ) ) ; }
public void showErrorMessage ( ) { Toast . makeText ( this , "Error , Try again ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; for ( String node : this . nodes ) { sb . append ( node ) . append ( " ; " ) ; } return sb . toString ( ) ; }
public void onViewRecycled ( VH holder , int viewType ) { if ( isWrappedAdapterAlive ( ) ) { WrappedAdapterUtils . invokeOnViewRecycled ( mWrappedAdapter , holder , viewType ) ; } }
public void accept ( BrokerEntity brokerEntity ) throws Exception { broker = brokerEntity ; setTitle ( broker . getNickName ( ) + " - published topics" ) ; }
private void whenPreferenceClick ( ) { uut . onPreferenceClick ( mUsernameToDisplay ) ; }
public Wallet ( String mnemonic ) throws MnemonicException { this ( Wallet . parseMnemonic ( mnemonic ) , null ) ; }
public static Uri uri ( Context context ) throws Exception { return FileProvider . getUriForFile ( context , AUTHORITY , tempFile ( context . getCacheDir ( ) ) ) ; }
public void noMotion ( ) { mListener . noMotion ( ) ; if ( mMotion && System . currentTimeMillis ( ) - mLastMotionTime > 60000 ) { mMotion = false ; mServerConnection . updateState ( mMotionItem , "OPEN" ) ; } }
public synchronized void pause ( ) { if ( ! Game . softPaused ) { final Hero hero = Dungeon . hero ; if ( hero != null && hero . isAlive ( ) ) { Dungeon . save ( false ) ; } } }
public com . google . protobuf . AnyOrBuilder getPubkeyOrBuilder ( ) { if ( pubkeyBuilder_ != null ) { return pubkeyBuilder_ . getMessageOrBuilder ( ) ; } else { return pubkey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : pubkey_ ; } }
public Object getGroup ( int groupPosition ) { return this . _listDataHeader . get ( groupPosition ) ; }
public static Context getThemedContext ( Context context ) { if ( context instanceof ActionBarActivity ) { ActionBar actionBar = ( ( ActionBarActivity ) context ) . getSupportActionBar ( ) ; if ( actionBar != null ) { return actionBar . getThemedContext ( ) ; } } return context ; }
public static Comparator < ResultBean > getEarlyComparator ( ) { return new EarlyComparator ( ) ; }
public com . coinomi . core . protos . Protos . TransactionConfidence getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . TransactionConfidence . getDefaultInstance ( ) ; }
public static String fileName ( String name , Format format ) { if ( format == Format . ORG ) { return name + " . org" ; } else { throw new IllegalArgumentException ( "Unsupported format " + format ) ; } }
public void onFetchCdpInfo ( ) { mMyCdps . clear ( ) ; mOtherCdps . clear ( ) ; mTaskCount = 1 ; new KavaCdpByOwnerTask ( getBaseApplication ( ) , this , mBaseChain , mAccount . address , null ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void resetAccount ( WalletAccount account ) { ServerClient connection = connections . get ( account . getCoinType ( ) ) ; if ( connection == null ) return ; connection . addEventListener ( account ) ; connection . resetConnection ( ) ; }
public boolean getGestureDockSwipeUp ( ) { return getBool ( R . string . pref_key__dock_swipe_up , true ) ; }
public int getCount ( ) { return mConfiguration . pageCount ( ) ; }
public Context getContext ( ) { return context ; }
public void onSelectedChanged ( RecyclerView . ViewHolder viewHolder , int actionState ) { if ( viewHolder != null ) { final View foregroundView = ( ( StocktakeAdapter . MyViewHolder ) viewHolder ) . viewForeground ; getDefaultUIUtil ( ) . onSelected ( foregroundView ) ; } }
public void setHeight ( int height ) { cellHeight = height ; }
public void setAdapter ( PagerAdapter adapter ) { if ( adapter != null ) { adapter = new ReversingAdapter ( adapter ) ; } super . setAdapter ( adapter ) ; setCurrentItem ( 0 ) ; }
private BroadcastReceiver hideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideStartMenu ( true ) ; } } ;
public void showSettingsUi ( ) { startActivity ( new Intent ( getContext ( ) , SettingsActivity . class ) ) ; }
public int updateEncounter ( long encounterID , Encounter encounter , long visitID ) { EncounterEntity encounterEntity = AppDatabaseHelper . encounterToEntity ( encounter , visitID ) ; encounterEntity . setId ( encounterID ) ; int id = encounterRoomDAO . updateEncounter ( encounterEntity ) ; return id ; }
public LPaint ( ) { }
public void onClick ( View view ) { setProbingFeedrate ( ) ; }
private BroadcastReceiver dashboardOrStartMenuAppearingReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { dashboardOrStartMenuAppearing = true ; finish ( ) ; } } ;
public ProfileSettingDrawerItem withIconColorRes ( int iconColorRes ) { this . iconColor = ColorHolder . fromColorRes ( iconColorRes ) ; return this ; }
public void setDelegate ( SizeNotifierRelativeLayout . SizeNotifierRelativeLayoutDelegate delegate ) { this . delegate = delegate ; }
public final LiveData < Resource < CacheObject >> getAsLiveData ( ) { return results ; } ;
public void addItem ( @ NonNull IDrawerItem drawerItem ) { mDrawerBuilder . getAdapter ( ) . addDrawerItem ( drawerItem ) ; }
private File getLogDir ( ) { return getActivity ( ) . getDir ( "log" , Context . MODE_PRIVATE ) ; }
private boolean isArrayTerm ( final String code ) { return ArrayFunctions . FunctionType . MATRIX . lowerCaseName . equals ( code ) ; }
public SortEntry [ ] getSortEntries ( ) { return new SortEntry [ ] { new SortEntry ( new ItemName ( Nic . NAME ) , SortOrderType . A_TO_Z ) } ; }
public void onReceive ( Context context , Intent intent ) { mContext = context ; APIService = WeatherService . retrofit . create ( WeatherService . class ) ; if ( checkLocationPermission ( ) ) { initLocationManager ( ) ; getLocationInfo ( ) ; } }
public ConfReset ( DeckConfig conf ) { this . conf = conf ; }
private static int extractNumber ( String containsNumbers ) { final Matcher matcher = NUMBER_EXTRACTION_PATTERN . matcher ( containsNumbers ) ; if ( matcher . find ( ) ) { return Integer . parseInt ( matcher . group ( ) ) ; } return 0 ; }
public void setVisibility ( String visibility ) { this . mVisibility = visibility ; }
public boolean onMarkerClick ( Marker marker ) { return false ; }
public int getPlayer1Image ( ) { if ( player1Image == 1 ) return R . drawable . cross ; else return R . drawable . circle ; }
private String convertToLocalLink ( String src ) { return context . getCacheDir ( ) + Utils . getPath ( src ) ; }
public void shouldNotInteractOnLocationsPermissionGrantedWithBaseActivityAndNullContent ( ) { givenPermissionChecker ( ) ; whenCheckingPermissions ( mBaseActivity , null ) ; thenShouldNotInteractWith ( mPermissionChecker ) ; }
public int getTopic ( ) { return mTopic ; }
public DatabaseEntry getEntryAt ( int position ) { return _shownEntries . get ( position ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { Log . i ( Helper . TAG , "Config " + this . getClass ( ) . getName ( ) ) ; super . onConfigurationChanged ( newConfig ) ; }
public int compare ( StatItem lhs , StatItem rhs ) { return ( int ) ( lhs . getCorrectPercent ( ) - rhs . getCorrectPercent ( ) ) ; }
private static int positionInAdapter ( int positionInCursor ) { return positionInCursor + SPACE_TOP ; }
public void listeProgrammesAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < listeDesProgrammes > ( ) { public listeDesProgrammes Func ( ) throws java . lang . Exception { return listeProgrammes ( codeAccesUniversel , motPasse ) ; } } ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( this , NewModuleActivity . class ) ; startActivityForResult ( intent , NEW_MODULE_ACTIVITY_REQUEST_CODE ) ; }
public void clearEventOpenWord ( ) { preferences . edit ( ) . remove ( STAT_OPEN_WORD_KEY ) . commit ( ) ; }
public void setImage ( Drawable drawable ) { drawable = DrawableCompat . wrap ( drawable ) ; DrawableCompat . setTint ( drawable , getContext ( ) . getResources ( ) . getColor ( R . color . black ) ) ; mImageView . setImageDrawable ( drawable ) ; }
public void onStart ( ) { hideKeyboard ( this ) ; super . onStart ( ) ; if ( sharedPreferences . getBoolean ( "new_update" , false ) ) { showUpdateDialog ( ) ; } }
public void onDetachedFromRecyclerView ( @ NonNull RecyclerView recyclerView ) { faqItems . removeAllChangeListeners ( ) ; super . onDetachedFromRecyclerView ( recyclerView ) ; }
public void onDestroyActionMode ( ActionMode mode ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) getActivity ( ) . getWindow ( ) . setStatusBarColor ( getResources ( ) . getColor ( R . color . actionbar_dark ) ) ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflator = mode . getMenuInflater ( ) ; inflator . inflate ( R . menu . menu_explorer , menu ) ; return true ; }
public void firebaseAuthSignInFails_ShowsFailMsg ( ) { mAuthPresenter . handleFirebaseSignInResult ( false , USER_ID ) ; verify ( mView ) . showFailMessage ( ) ; }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_about , container , false ) ; }
public FontEditText ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; decorator = new FontDecorator ( context ) ; decorator . initFromAttributes ( this , attrs ) ; }
private void notificaVez ( ) { Jogador j = getJogadorDaVez ( ) ; boolean pf = isPodeFechada ( ) ; for ( Interessado interessado : interessados ) { interessado . vez ( j , pf ) ; } }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . list_item , parent , false ) ; return new PostHolder ( view ) ; }
public ChatTarget ( Channel channel ) { mChannel = channel ; }
public String getUnitOther ( ) { return this . unitOther ; }
public MovementBounds ( Settings settings ) { this . settings = settings ; }
public boolean renameTo ( String newName ) { File oldDir = getDir ( ) ; File newDir = new File ( Config . PROFILES_DIR , newName ) ; name = newName ; return oldDir . renameTo ( newDir ) ; }
public long getUpdateInterval ( ) { return MOVING_STATE_UPDATE_INTERVAL ; }
public static String getIdentifier ( ) { return OstRule . NAME ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . session , menu ) ; return true ; }
public boolean onResourceReady ( Drawable resource , Object model , Target < Drawable > target , DataSource dataSource , boolean isFirstResource ) { errorRelativeLayout . setVisibility ( View . GONE ) ; progressBar . setVisibility ( View . GONE ) ; return false ; }
public static AstridCloneTasksProvider newTasksProvider ( EventProviderType type , Context context , int widgetId ) { return new AstridCloneTasksProvider ( type , context , widgetId , AstridCloneTaskSource . TASKS ) ; }
public void onDestroyView ( ) { viewClicked = null ; userRef . removeEventListener ( userRefVEL ) ; userRefVEL = null ; unbinder . unbind ( ) ; super . onDestroyView ( ) ; }
public void onPositive ( MaterialDialog dialog ) { keepActionMode = true ; Intent intent = new Intent ( getActivity ( ) , CategoryActivity . class ) ; intent . putExtra ( "noHome" , true ) ; startActivityForResult ( intent , REQUEST_CODE_CATEGORY_NOTES ) ; }
private PersistentBlobProvider ( @ NonNull Context context ) { }
public static List < ConditionEntity > loadDataFromDb ( Context context ) { AppDatabase db = AppDatabase . getAppDatabase ( context ) ; Log . i ( TAG , "Condition data loaded from DB" ) ; return db . conditionDao ( ) . getAll ( ) ; }
public boolean isAnimating ( ) { return mIsAnimating ; }
public void sortFiles ( FileSortOrder sortOrder ) { mAdapter . setSortOrder ( sortOrder ) ; }
public Route ( List < Line > stops ) { this . lineList = stops ; }
public void onResume ( ) { if ( Session . isStarted ( ) ) { setActionButtonStop ( ) ; } else { setActionButtonStart ( ) ; } showPreferencesAndMessages ( ) ; super . onResume ( ) ; }
public com . google . protobuf . Any . Builder getUpgradedConsensusStateBuilder ( ) { onChanged ( ) ; return getUpgradedConsensusStateFieldBuilder ( ) . getBuilder ( ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( TabActivity . this , MainActivity . class ) ; startActivity ( intent ) ; }
public List < Entity > getAttachments ( ) { return attachments ; }
public TeXIconBuilder setSize ( final float size ) { this . size = TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_SP , size / PIXELS_PER_POINT , jLatexMath . getContext ( ) . getResources ( ) . getDisplayMetrics ( ) ) ; return this ; }
public void showIfNeeded ( ) { if ( shouldShow ( ) ) { tryShow ( mContext ) ; } }
public BinaryWidgetTest ( ) { permissionUtils = new FakePermissionUtils ( ) ; }
public void onAnimationCancel ( View view ) { mManager . onAnimationCancel ( mAnimationInfo , mHolder ) ; }
public boolean isMms ( ) { return false ; }
public static LegalPersonEntity newInstance ( ) { return new LegalPersonEntity ( ) ; }
public static void reset ( SQLiteDatabase db ) { AppLog . i ( AppLog . T . COMMENTS , "resetting people table" ) ; dropTables ( db ) ; createTables ( db ) ; }
public void setIcon ( Drawable icon ) { icon_iv . setImageDrawable ( icon ) ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable String label , @ NonNull String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public void onAnimationEnd ( Animation anim ) { if ( ! isOnAnimationCalled ) { view . setVisibility ( View . INVISIBLE ) ; Log . d ( "TutorialView" , "hide . onAnimationEnd " + view . getTag ( ) ) ; } isOnAnimationCalled = true ; }
public BackgroundColor [ ] getBackgroundColors ( ) { return pages . getBackgroundColors ( ) ; }
public int compare ( PackageInfo p1 , PackageInfo p2 ) { return Long . toString ( p1 . lastUpdateTime ) . compareTo ( Long . toString ( p2 . lastUpdateTime ) ) ; }
private boolean openCurrent ( ) { synchronized ( this ) { try { return player . setDataSource ( getTrackUri ( getCurrentSong ( ) ) ) ; } catch ( Exception e ) { return false ; } } }
public void updateDocumentList ( ) { documentListVM . loadDocuments ( getCategory ( ) , getSortingOrder ( ) , getAscending ( ) ) ; }
public void downloadBookButton ( ) { actionBook ( ) ; showProgress ( ) ; }
public static ArrayList < Integer > createColors ( int [ ] colors ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i : colors ) { result . add ( i ) ; } return result ; }
public static void insertNewMovie ( Context context , ContentValues values ) { Intent intent = new Intent ( context , MovieUpdateService . class ) ; intent . setAction ( ACTION_INSERT ) ; intent . putExtra ( EXTRA_VALUES , values ) ; context . startService ( intent ) ; }
public void perform ( UiController uiController , final View view ) { uiController . loopMainThreadForAtLeast ( seconds * 1000 ) ; }
public void adapt ( Track track , Activity activity ) { ( ( TextView ) activity . findViewById ( R . id . track_instant_filter_top ) ) . setText ( track . getGenreName ( ) ) ; }
public void unsignedShortValidator_ReturnsTrue ( ) { int x = MainActivity . unsignedShort ( new byte [ ] { ( byte ) 0x65 , ( byte ) 0x10 , ( byte ) 0xf3 , ( byte ) 0x29 } ) ; assertTrue ( x == 25872 ) ; }
public FolderChooserDialogCreate show ( FragmentManager fragmentManager ) { FolderChooserDialogCreate dialog = build ( ) ; dialog . show ( fragmentManager ) ; return dialog ; }
public void onBackKeyPressed ( ) { storyService . loadMenuSceneFromJustPlayScoreScene ( ) ; }
public static String getLoggingPath ( ) { String logPath = Environment . getExternalStorageDirectory ( ) . getAbsolutePath ( ) + "/" + ONEWHEEL_LOGGING_PATH ; PlainTextFileLogger . createDirIfNotExists ( logPath ) ; return logPath ; }
public ItemDetails getItemDetails ( ) { return new ItemDetails ( selectionKey , getAdapterPosition ( ) ) ; }
public String type ( ) { return XMLPrefsManager . XMLPrefsSave . COLOR ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "autoexpand" , checked ) . apply ( ) ; }
public void run ( ) { getDesktopOptionView ( ) . updateLockIcon ( appSettings . isDesktopLock ( ) ) ; }
public void updateMemberList ( List < Member > memberList ) { this . memberList = new ArrayList <> ( memberList ) ; notifyDataSetChanged ( ) ; }
public EditorBottomSheet ( Context context ) { super ( context ) ; initialize ( ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { return oldList . get ( oldItemPosition ) . equals ( newList . get ( newItemPosition ) ) ; }
public SignupFlow chooseContinueWithWpCom ( ) { clickOn ( R . id . first_button ) ; return this ; }
public void onClick ( View view ) { showBrightnessControl ( ) ; hideMenu ( ) ; }
public void triggerAF ( ) { sendMessage ( What . TRIGGER_AF , 0 , 0 , null ) ; }
public int getTimeDifference ( ) { return native_getTimeDifference ( ) ; }
private < T extends RealmObject > T createOrUpdateModel ( T object ) { return createOrUpdateModel ( object , null ) ; }
private void setRestartImageResource ( ) { if ( Build . VERSION . SDK_INT >= 21 ) { restartButton . setImageResource ( R . drawable . anim_ic_restart ) ; } else { restartButton . setImageResource ( R . mipmap . ic_refresh_white_36dp ) ; } }
public void deleteMessageTest ( ) { Integer id = null ; }
private double litreTogallon ( double num ) { return num * 0 . 264 ; }
private int sentMessagesCount ( ) { int count = 0 ; synchronized ( this . messages ) { for ( Message message : messages ) { if ( message . getStatus ( ) != Message . STATUS_RECEIVED ) { ++ count ; } } } return count ; }
public void onBillingServiceDisconnected ( ) { alert ( getString ( R . string . error ) , getString ( R . string . failed_to_connect_to_gplay ) ) ; }
public void finishSync_updatesFormsContentObserver ( ) { SyncStatusAppState syncStatusAppState = new SyncStatusAppState ( context ) ; syncStatusAppState . startSync ( "projectId" ) ; syncStatusAppState . finishSync ( "projectId" , null ) ; verify ( contentResolver ) . notifyChange ( FormsProviderAPI . getUri ( "projectId" ) , null ) ; }
public int getItemCount ( ) { if ( movies != null ) return movies . getResults ( ) . size ( ) ; else if ( mCursor != null ) return mCursor . getCount ( ) ; return - 1 ; }
public LocalDate getDateFinEcheance ( ) { return this . dateFinEcheance ; }
public String getFormattedValue ( float value ) { return months [ ( int ) value % months . length ] ; }
public void test1LoginPortrait ( ) throws Exception { driver . rotate ( ScreenOrientation . PORTRAIT ) ; FileListView fileListView = Actions . login ( Config . URL , Config . user , Config . password , Config . isTrusted , driver ) ; common . assertIsInFileListView ( ) ; }
public boolean isLogin ( ) { return isLogin ; }
public int getVersion ( ) { return mPerInstallationPrefs . getInt ( Constants . PREF_VERSION , 0 ) ; }
public int getUpdateType ( ) { if ( preferences . getBoolean ( "notifications" , true ) ) return translateUpdateType ( preferences . getString ( "appupdates" , "all" ) ) ; else return UPDATE_DISABLE ; }
public void testToastTextWhenMovingFromAskToAlways ( ) throws Exception { setReportConfig ( FEEDBACK_REPORT_ASK ) ; setAcraConfig ( "Production" ) ; verifyACRANotDisabled ( ) ; assertToastMessage ( R . string . feedback_manual_toast_text ) ; setAcraReportingMode ( FEEDBACK_REPORT_ALWAYS ) ; assertToastMessage ( R . string . feedback_auto_toast_text ) ; }
public void setSamplingRate ( float _samplingrate ) { samplingRate = _samplingrate ; nSamplesDispl = ( int ) ( samplingRate*displayTime ) ; ringBufferSize = ( int ) ( samplingRate * 10 ) ; ringBuffer = new float [ ringBufferSize ] ; }
public static List < Smiley > getSmileys ( ) { return SMILIES ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . howtoplay_1 , container , false ) ; }
private Setting ( ) { }
public String connect ( String url ) throws Exception { if ( cookies == null ) login ( ) ; return GetPageContent ( url ) ; }
public void setAutoConnection ( Context context , boolean value ) { if ( ENUM_Boolean . BOOLEAN_AUTO_CONNECTION . value != value ) { ENUM_Boolean . BOOLEAN_AUTO_CONNECTION . value = value ; save ( context ) ; } }
public static PointD getInstance ( double x , double y ) { PointD result = pool . get ( ) ; result . x = x ; result . y = y ; return result ; }
public String getTextSizeScale ( ) { return textSizeScale ; }
public void seekTo ( int windowIndex , long positionMs ) { analyticsCollector . notifySeekStarted ( ) ; player . seekTo ( windowIndex , positionMs ) ; }
public void remNotes ( long [ ] ids ) { ArrayList < Long > list = mDb . queryLongList ( "SELECT id FROM cards WHERE nid IN " + Utils . ids2str ( ids ) ) ; remCards ( cids ) ; }
public IqPacket queryAffiliation ( Conversation conversation , String affiliation ) { IqPacket packet = new IqPacket ( IqPacket . TYPE . GET ) ; packet . setTo ( conversation . getJid ( ) . toBareJid ( ) ) ; packet . query ( "http : return packet ; }
public void setMax ( int max ) { this . max = max ; }
public void onBindViewHolder ( ItemViewHolder holder , int position ) { TagModel tag = items . get ( position ) ; holder . tagNameText . setText ( tag . getName ( ) ) ; }
public PixelParticle ( ) { super ( ) ; origin . set ( + 0 . 5f ) ; }
public void onReceive ( Context context , Intent intent ) { if ( intent . getAction ( ) . equals ( SdCardReceiver . MEDIA_EJECT ) ) { finish ( ) ; } }
public void setAttendeeRole ( SummitAttendeeDTO attendeeRole ) { this . attendeeRole = attendeeRole ; }
private void sendInitialRequest ( ) { if ( this . kind == Kind . HOME ) { this . tryCache ( ) ; } else { sendFetchTimelineRequest ( null , null , FetchEnd . BOTTOM , - 1 ) ; } }
public void setDataset ( List < File > dataset ) { this . dataset = dataset ; }
private void addColumns ( int id ) { ImageView view = ( ImageView ) this . findViewById ( id ) ; view . setVisibility ( View . VISIBLE ) ; view . setOnClickListener ( this ) ; }
public void requestSmAcknowledgement ( ) throws StreamManagementNotEnabledException , NotConnectedException { if ( ! isSmEnabled ( ) ) { throw new StreamManagementException . StreamManagementNotEnabledException ( ) ; } requestSmAcknowledgementInternal ( ) ; }
public int sendRequest ( TLObject object , RequestDelegate completionBlock , QuickAckDelegate quickAckBlock , int flags ) { return sendRequest ( object , completionBlock , quickAckBlock , flags , DEFAULT_DATACENTER_ID , ConnectionTypeGeneric , true ) ; }
public IconLabelItem ( Context context , Drawable icon , String label ) { _label = label ; _icon = icon ; }
public boolean isLoggedWithToken ( ) { return ! mPrefsHelper . getAuthAccessToken ( ) . isEmpty ( ) ; }
public void sendSmAcknowledgement ( ) throws StreamManagementNotEnabledException , NotConnectedException { if ( ! isSmEnabled ( ) ) { throw new StreamManagementException . StreamManagementNotEnabledException ( ) ; } sendSmAcknowledgementInternal ( ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { ( ( FullScreenDialogContent ) getContent ( ) ) . onViewCreated ( mController ) ; }
public void onUpdateSaveColorUIEvent ( UpdateSaveColorUIEvent event ) { updateSaveColorButton ( ) ; }
public static void log ( Context context , int sId ) { log ( context , context . getString ( sId ) , Types . INFO ) ; }
private boolean isCurrentlySelectedDeck ( AbstractDeckTreeNode node ) { return node . getDid ( ) == mCol . getDecks ( ) . current ( ) . optLong ( "id" ) ; }
private int broadcast ( ) { mTransferManager . broadcastTransfers ( ) ; mTransferNotificationManager . stop ( ) ; return START_NOT_STICKY ; }
public static boolean checkIfItsSearchFormatedLink ( String linkToCheck ) { return linkToCheck . startsWith ( "http : }
public EntriesAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View parentView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . files_of_entries , parent , false ) ; return new ViewHolder ( parentView ) ; }
public void onCreate ( ) { super . onCreate ( ) ; this . initializeInjector ( ) ; }
public File checkDirectory ( int type ) { return mediaDirs . get ( type ) ; }
public void updateSelectedTags ( Collection < Tag > selectedItems ) { mapTags . clearSelection ( ) ; for ( Tag tag : selectedItems ) { mapTags . addToSelection ( tag ) ; } showSelectedTags ( ) ; }
private void loadProvider ( RestResponseHandler handler ) { log . v ( TAG , "loadProvider" ) ; ifmoRestClient . get ( activity , "person/" + pid , null , handler ) ; }
public IdentityKeyPair getIdentityKeyPair ( ) { return IdentityKeyUtil . getIdentityKeyPair ( context , masterSecret ) ; }
public void onSearchResultClicked ( int parentAdapterPosition , int childAdapterPosition ) { mListener . onSearchResultClicked ( bookSearchResultsContainerList . get ( parentAdapterPosition ) , childAdapterPosition ) ; }
public void run ( ) { registration . listener . onNewBlock ( TransactionWatcherWallet . this ) ; registration . listener . onPocketChanged ( TransactionWatcherWallet . this ) ; }
public AccountHeader withSavedInstance ( Bundle savedInstance ) { this . mSavedInstance = savedInstance ; return this ; }
public float getSpeedMax ( ) { return SpeedMax ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( preview != null ) preview . disableView ( ) ; }
private void launchHomeScreen ( ) { prefManager . setFirstTimeLaunch ( false ) ; startActivity ( new Intent ( WelcomeActivity . this , LoginActivity . class ) ) ; finish ( ) ; }
public void onClick ( View view ) { setIndex ( getIndex ( ) + 1 ) ; displayText ( ) ; }
public boolean remoteConnected ( ) { return true ; return mRemoteConnected ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_info ) ; presenter = new InfoPresenterImpl ( ) ; setupTextInfo ( ) ; }
public void submitList ( @ Nullable List < FileManagerNode > list ) { if ( list != null ) Collections . sort ( list ) ; super . submitList ( list ) ; }
public long getBufferedPosition ( ) { return player . getBufferedPosition ( ) ; }
public static FormatException getFormatInstance ( Throwable cause ) { return IS_STACK_TRACE ? new FormatException ( cause ) : INSTANCE ; }
public String getMethod ( ) { return getString ( "method" ) ; }
public void unlock ( ) { if ( mUnlocked ) { return ; } mUnlocked = true ; savingRequested . emit ( ) ; unlocked . emit ( ) ; }
public void onReceive ( Context context , Intent intent ) { intent . setClass ( context , EvaluationEngineService . class ) ; context . startService ( intent ) ; }
public Object getHeight ( ) { return height ; }
private void setHeroIsVisible ( boolean isVisible ) { if ( IS_DEMO_MODE ) { return ; } this . gameController . setHeroIsVisible ( isVisible ) ; }
public void onClick ( View view ) { parseResistance ( ) ; }
public void register ( ) { sm . registerListener ( this , sm . getDefaultSensor ( Sensor . TYPE_HEART_RATE ) , SensorManager . SENSOR_DELAY_FASTEST , 20 * 1000 * 1000 ) ; }
public void setGeofenceLongitude ( double geofenceLongitude ) { if ( geofenceLongitude > 180 ) this . geofenceLongitude = 180 ; if ( geofenceLongitude < - 180 ) this . geofenceLongitude = - 180 ; else this . geofenceLongitude = geofenceLongitude ; notifyPropertyChanged ( BR . geofenceLongitude ) ; }
public boolean switchToNextInputMethod ( final IBinder token , final boolean onlyCurrentIme ) { if ( mImmWrapper . switchToNextInputMethod ( token , onlyCurrentIme ) ) { return true ; } if ( switchToNextInputSubtypeInThisIme ( token , onlyCurrentIme ) ) { return true ; } return switchToNextInputMethodAndSubtype ( token ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( SORT , selectedStatSort ) ; }
private boolean openCurrent ( ) { synchronized ( this ) { try { applyReplayGain ( ) ; return playback . setDataSource ( getTrackUri ( getCurrentSong ( ) ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } } }
public void run ( ) { TrainQuizFragment . this . createQuestion ( ) ; selected . set ( false ) ; }
public String toString ( ) { return String . format ( "%s , %d , %d , %d , %d , %d , %s" , Arrays . toString ( names ) , did , depth , revCount , lrnCount , newCount , children ) ; }
public void onCheckedChanged ( CompoundButton button , boolean isChecked ) { activity . setUnreadOnly ( isChecked ) ; refresh ( true ) ; }
public static int getLayoutType ( RecyclerView rv ) { return getLayoutType ( rv . getLayoutManager ( ) ) ; }
public RetrieveProfileJob ( Context context , Recipient recipient ) { super ( context , JobParameters . newBuilder ( ) . withRetryCount ( 3 ) . create ( ) ) ; this . recipient = recipient ; }
public TextWithHtml ( List < String > paragraphs ) { this . paragraphs = paragraphs ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . menu_activity_main , menu ) ; return true ; }
public void onFoldedBack ( UnfoldableView unfoldableView ) { mListTouchInterceptor . setClickable ( false ) ; mDetailsLayout . setVisibility ( View . INVISIBLE ) ; }
private void dismissProgressDialog ( ) { if ( progressDialog != null ) { progressDialog . dismiss ( ) ; } }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( getActivity ( ) , CONTENT_URI_ALCOHOLIC , null , null , null , null ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . import_library ) ; }
private void sendToOpenGTS ( ) { if ( ! FileSenderFactory . GetOpenGTSSender ( ) . isAvailable ( ) ) { launchPreferenceScreen ( MainPreferenceActivity . PREFERENCE_FRAGMENTS . OPENGTS ) ; } else { showFileListDialog ( FileSenderFactory . GetOpenGTSSender ( ) ) ; } }
public static Priority fromString ( String string ) { try { return Priority . valueOf ( string ) ; } catch ( Exception e ) { return Automatic ; } }
public void testStoT ( ) { assertTrue ( "Test StoT failed . " , strTraditional . equals ( Analysis . StoT ( strSimple ) ) ) ; }
private boolean shouldVibrate ( ) { return ( ( AudioManager ) mContext . getSystemService ( Context . AUDIO_SERVICE ) ) . getRingerMode ( ) != AudioManager . RINGER_MODE_SILENT ; }
public Gson getGson ( ) { if ( gson == null ) { gson = new GsonBuilder ( ) . setLenient ( ) . create ( ) ; } return gson ; }
public FollowingEntity ( int id , String display_name , String logo , String created_at , boolean notifications , long last_updated , long excludeUntil ) { super ( id , display_name , logo , created_at , notifications , last_updated ) ; excludeUntil = this . excludeUntil ; }
public String getBookUrl ( ) { return FirebaseConfig . STORAGE_PREFIX + bookUrl ; }
public int getDrawerPosition ( ) { return drawerPosition ; }
public EventRequest ( Context context , DismissalDao dismissalDao ) { super ( dismissalDao ) ; this . request = RawEventRequest . create ( context , new Filter ( ) ) . andThen ( AssociationListRequest . create ( context ) ) ; }
public void show ( ) { super . show ( ) ; aiv . show ( ) ; }
public void write ( double value ) throws IOException { short sample = ( short ) ( jmodem . Config . scalingFactor * value ) ; stream . writeShort ( sample ) ; }
public static boolean isVideo ( String mimeType ) { return ( mimeType != null && mimeType . toLowerCase ( ) . startsWith ( "video/" ) ) ; }
public static Boolean isAppForPackageADebuggableBuild ( @ NonNull final ApplicationInfo applicationInfo ) { return ( 0 != ( applicationInfo . flags & ApplicationInfo . FLAG_DEBUGGABLE ) ) ; }
public void setClientId ( Long clientId ) { this . clientId = clientId ; }
public void setDefaultFormat ( String format ) { if ( TextUtils . isEmpty ( format ) ) { mSettings . defaultPostFormat = STANDARD_POST_FORMAT_KEY ; } else { mSettings . defaultPostFormat = format . toLowerCase ( ) ; } }
public static void show ( View view , int res ) { show ( view , MifosApplication . getContext ( ) . getResources ( ) . getString ( res ) ) ; }
public ProdutoExpandableListAdapter ( Context context , ArrayList < ProdutoConsumido > prodList ) { this . context = context ; this . prodList = prodList ; }
public void setAttractionId ( int attractionId ) { this . attractionId = attractionId ; }
public static void register ( Activity activity ) { final Intent intent = new Intent ( activity , PluginListActivity . class ) ; intent . putExtra ( "register" , true ) ; activity . startActivity ( intent ) ; }
public OutgoingTextMessage withBody ( String body ) { return new OutgoingIdentityDefaultMessage ( getRecipients ( ) ) ; }
public void attachView ( @ NonNull V view , @ Nullable Bundle savedInstanceState ) { mView = view ; if ( savedInstanceState != null ) { restoreInstanceState ( savedInstanceState ) ; } }
public void onError ( @ NonNull Throwable t ) { messageError ( ) ; }
public LayerLoader ( Context c ) { super ( c ) ; db = WVDatabase . getInstance ( c ) ; }
public void addValidation ( EditText editText , Range range , String errMsg ) { mValidator . set ( editText , new NumericRange ( range ) , errMsg ) ; }
public void onFailure ( Call < PostList > call , Throwable error ) { onFailure . call ( localPost , new ApiFailure <> ( error ) ) ; }
public boolean isDefault ( ) { return mSettings . isUsingCertificate ( ) ; }
public static boolean ipv6Output ( ) { return gPrefs . getBoolean ( IP6_OUTPUT , false ) ; }
public TeamListSubscriber provideTeamListSubscriber ( TeamRenderer renderer ) { return Mockito . mock ( TeamListSubscriber . class ) ; }
public void testGetCasteDay_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( planetaryCalendar . getCasteDay ( ) , is ( casteDay ) ) ; }
public static List < EventSource > getAvailableSources ( ) { return sources ; }
public String desc ( ) { return Game . getVar ( R . string . PotionOfToxicGas_Info ) ; }
public AboutView ( Context context ) { this ( context , null ) ; }
private int indexOf ( @ NotNull Download download ) { for ( int i = 0 ; i < downloads . size ( ) ; i ++ ) if ( downloads . get ( i ) . is ( download ) ) return i ; return - 1 ; }
public long getTimeLimit ( ) { return mConf . getLong ( "timeLim" ) ; }
public void swapDataSet ( ArrayList < Song > dataSet ) { this . dataSet = dataSet ; clear ( ) ; addAll ( dataSet ) ; notifyDataSetChanged ( ) ; }
public void openAudios ( int accountId , int ownerId , @ Nullable Owner owner ) { PlaceFactory . getAudiosPlace ( accountId , ownerId ) . withParcelableExtra ( Extra . OWNER , owner ) . tryOpenWith ( getActivity ( ) ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new MainMenuViewModel ( application , versionInformation , settingsProvider , instancesAppState ) ; }
private void stopSnapclient ( ) { snapclientService . stopPlayer ( ) ; getWindow ( ) . clearFlags ( WindowManager . LayoutParams . FLAG_KEEP_SCREEN_ON ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { prefName . setSummary ( ( String ) newValue ) ; clientInfo . setName ( ( String ) newValue ) ; return true ; }
public Object call ( ) { resetGame = true ; return null ; }
public void setFoundNoteList ( ArrayAdapter < Note > fnl ) { this . foundNoteList = fnl ; }
public void reverseOrientation ( final ActionEx action ) { BookRotationType newRotation = reversedOrientation ( bookSettings . rotation ) ; if ( newRotation != null ) { SettingsManager . setBookRotation ( bookSettings , newRotation ) ; } }
public TypedArray obtainStyledAttributes ( int resId , int [ ] attrs ) { return this . dialogFragment . requireActivity ( ) . obtainStyledAttributes ( resId , attrs ) ; }
public void handleIllegalState ( ) { if ( isLoggedIn ( ) ) { logout ( ) ; } }
public GistViewModel ( ) { super ( ) ; initAnonService ( ) ; }
public void clickMigrateToSelected ( ) { Intent result = new Intent ( ) ; result . putExtra ( RESULT_HOST_ID_EXTRA , selectedHost . getId ( ) ) ; setResult ( RESULT_SELECT , result ) ; finish ( ) ; }
public boolean onKeyDown ( int keyCode , KeyEvent event ) { return mVolumeNavigationDelegate . onKeyDown ( keyCode , event ) || super . onKeyDown ( keyCode , event ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "CREATE INDEX `index_contact_avatar` ON `contact` ( `avatar` ) " ) ; }
private void closeWebViewFragment ( ) { String tag = getString ( R . string . fragment_tag_publicize_webview ) ; getFragmentManager ( ) . popBackStack ( tag , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public void run ( ) { try { if ( ! isDetached ( ) ) updateData ( ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public void append ( String str , int flags , String url ) { append ( str , flags , 0 , 0 , 1f , url ) ; }
private void deleteTempFile ( ) { try { boolean fileDeleted = mTempAudioFilePathName . delete ( ) ; } catch ( SecurityException e ) { Log . e ( "tag" , e . getMessage ( ) ) ; } }
public boolean setAudioSessionId ( final int sessionId ) { try { mCurrentMediaPlayer . setAudioSessionId ( sessionId ) ; return true ; } catch ( @ NonNull IllegalArgumentException | IllegalStateException e ) { return false ; } }
public void initialize ( final DeparturesObserver observer ) { ui . stub . setOnLayoutInflatedListener ( new OnLayoutInflatedListener ( ) { @ Override public void onLayoutInflated ( WatchViewStub stub ) { ui . load ( ) ; onLoad ( observer ) ; } } ) ; }
public void onEventMainThread ( PlaybackPositionEvent event ) { updateChapterSelection ( getCurrentChapter ( media ) ) ; adapter . notifyTimeChanged ( event . getPosition ( ) ) ; }
public void setSensorSpeed ( SensorType sensor , SetSensorSpeed . SensorSpeed speed ) throws IOException { mClientHandlerFactory . setSensorSpeed ( sensor , speed ) ; }
public TaskPagerAdapter ( final FragmentManager fm , final ArrayList < TaskListWrapperItem > data , Map < String , Integer > colors ) { super ( fm ) ; this . mData = data ; this . colors = colors ; }
public void onFinish ( ) { syncData ( ) ; uiThreadExecutor . execute ( new Runnable ( ) { @ Override public void run ( ) { getView ( ) . hideLoading ( ) ; getView ( ) . updateListState ( ) ; } } ) ; }
private static synchronized Long getLastModifiedTimestamp ( Response response ) { Date modifiedDate = response . headers ( ) . getDate ( "Last - Modified" ) ; return modifiedDate != null ? modifiedDate . getTime ( ) : - 1 ; }
public void enqueue ( Callback < T > callback ) { callback . onResponse ( this , response ) ; }
private void resetAudio ( ) { audioviewSwitcher . setDisplayedChild ( 0 ) ; audioUri = null ; TextView audioText = ( TextView ) getActivity ( ) . findViewById ( R . id . audio_text ) ; audioText . setText ( R . string . report_hint_sound ) ; }
private VerticalSpaceItemDecoration ( float dp ) { _height = MetricsHelper . convertDpToPixels ( getContext ( ) , dp ) ; }
public void onFailure ( int errorResourceString ) { new Dialog ( getContext ( ) ) . alertError ( errorResourceString ) ; }
public void run ( ) { Log . i ( "IntentService" , "intentAppDetailSettings" ) ; activity . startActivity ( intent ) ; }
public void onFailure ( Call < FileUploadResponse > call , Throwable t ) { LogManager . PrintLog ( "CommunicationWithServer" , "onFailure" , "Error : " + t . getMessage ( ) , LOG_LEVEL_ERROR ) ; }
public boolean onTouch ( View view , MotionEvent event ) { gameLoop . motionEvents . add ( MotionEvent . obtain ( event ) ) ; return true ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "autocontent" , checked ) . apply ( ) ; }
private void returnFileFinishActivity ( String filePath ) { Intent retIntent = new Intent ( ) ; retIntent . putExtra ( returnFileParameter , filePath ) ; getActivity ( ) . setResult ( Activity . RESULT_OK , retIntent ) ; getActivity ( ) . finish ( ) ; }
public int compareTo ( @ NonNull final Classifier classifier ) { if ( classifier instanceof PeriodClassifier ) { return ( ( PeriodClassifier ) classifier ) . getDate ( ) . compareTo ( getDate ( ) ) ; } return - 1 ; }
public WPScrollView ( Context context ) { super ( context ) ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return OstWorkflowContext . WORKFLOW_TYPE . ADD_DEVICE_WITH_QR ; }
public WPScrollView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public static Spannable replaceTags ( String str ) { return replaceTags ( str , FLAG_TAG_ALL ) ; }
public void setEulaAgreed ( boolean isAgreed ) { SharedPreferences . Editor editor = mSharedPref . edit ( ) ; editor . putBoolean ( EULA_AGREE , isAgreed ) ; editor . commit ( ) ; }
public LineProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public void setComments ( List < Comment > comments ) { adapter . setItems ( new ArrayList <> ( comments ) ) ; }
public Mat ( long addr ) { if ( addr == 0 ) throw new java . lang . UnsupportedOperationException ( "Native object address is NULL" ) ; nativeObj = addr ; }
public void setEnforceBounds ( boolean enforceBounds ) { mEnforceBounds = enforceBounds ; }
public void startStandaloneMode ( View view ) { GUIConfiguration . setAppMode ( AppMode . STANDALONE ) ; startActivity ( new Intent ( MainActivity . this , PipelineActivity . class ) ) ; }
public void clickingChooser ( MenuItem item ) { Intent intent = new Intent ( NavD . this , HordeorAllianceActivity . class ) ; startActivity ( intent ) ; }
public void onFabClick ( ) { MedicalAttentionDetailsActivity . launch ( getActivity ( ) ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; TupleOperationEx operation = filtered . get ( position ) ; holder . bindTo ( operation ) ; holder . wire ( ) ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = this . getMenuInflater ( ) ; inflater . inflate ( R . menu . orientations_list_context_menu , menu ) ; }
public static boolean checkCanOpenChat ( Bundle bundle , BaseFragment fragment ) { return checkCanOpenChat ( bundle , fragment , null ) ; }
public Discography ( ) { database = new DB ( ) ; cache = new MemCache ( ) ; }
private State ( List < XmlEntry > entries ) { super ( false ) ; _entries = entries ; }
public void run ( ) { mDrawerLayout . setDrawerLockMode ( DrawerLayout . LOCK_MODE_UNLOCKED , getBookmarkDrawer ( ) ) ; }
public Typeface getRobotoRegular ( Context context ) { return Typeface . createFromAsset ( context . getAssets ( ) , "fonts/Roboto - Regular . ttf" ) ; }
public String getPath ( ) { return mPath ; }
public void run ( ) { viewPager . setAdapter ( myViewPagerAdapter ) ; swipeRefreshLayout . setRefreshing ( false ) ; }
public static boolean isSelftextEnabled ( String subreddit ) { if ( subreddit == null ) return cardText ; return prefs . getBoolean ( "cardtextenabled" + subreddit . toLowerCase ( ) , cardText ) ; }
public void migratePreferences ( ) { migrateTestServer ( ) ; }
private void initRemindersPrefs ( ) { binding . reminderInCalendarPrefs . setChecked ( mPrefs . isRemindersInCalendarEnabled ( ) ) ; binding . reminderInCalendarPrefs . setOnClickListener ( view -> changeRemindersPrefs ( ) ) ; }
public void onClick ( View v ) { songsManager . play ( 0 , songsManager . mostPlayedSongs ( ) ) ; }
public LottieAnimatableColorValue getColor ( ) { return color ; }
public AddProviderPresenter ( AddProviderContract . View view ) { this . addProviderView = view ; this . addProviderView . setPresenter ( this ) ; }
public void setSelectedCategories ( List < String > categoryStringList ) { remoteDataSource . setSelectedCategories ( categoryStringList ) ; }
public static void setTextSize ( InstanceSettings settings , RemoteViews rv , int viewId , int dimenId ) { rv . setFloat ( viewId , METHOD_SET_TEXT_SIZE , getScaledValue ( settings , dimenId ) ) ; }
public CategoryRepo ( ) { category = new Category ( ) ; }
public void LoadData ( Context ctx , Uri uri , String password , String keyfile ) throws IOException , FileNotFoundException , InvalidDBException { LoadData ( ctx , uri , password , keyfile , new UpdateStatus ( ) , ! Importer . DEBUG ) ; }
public void setDistance ( Distance distance ) { this . distance = distance ; }
public void onClick ( View view ) { mSensorService . stopLogging ( ) ; isRecording = false ; setFabClickListener ( ) ; setActualDisplayMode ( ) ; fragment . setSensorsToShow ( mSensorService . getMonitoredSensorsTypes ( false ) ) ; }
public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { super . onUpdate ( context , appWidgetManager , appWidgetIds ) ; setWidgetContent ( mLastInfo , context ) ; }
public void run ( ) { readAloudAnswerImageButton . setColorFilter ( getResources ( ) . getColor ( R . color . colorPrimary ) , PorterDuff . Mode . SRC_IN ) ; readAloudAnswserLabel . setTextColor ( getResources ( ) . getColor ( R . color . colorPrimary ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; Log . i ( LOG_TAG , "In onDestroy" ) ; Toast . makeText ( this , "WhiteboardService Destroyed ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public boolean act ( ) { super . act ( ) ; MobSpawner . spawnRandomMob ( level ( ) , getPos ( ) , 10 ) ; postpone ( 20 ) ; return true ; }
public void onPageSelected ( int position ) { for ( WelcomeScreenPage page : this ) { page . onPageSelected ( position ) ; } }
public State ( Status status ) { this ( status , null ) ; }
private NotificationService ( ) { updateChannels ( ) ; }
public void execute ( Realm realm ) { post . setWasRead ( true ) ; }
public SharedPref ( Context context ) { mySharedPref = context . getSharedPreferences ( "filename" , Context . MODE_PRIVATE ) ; }
private double sqmTosqinch ( double num ) { return num * 1550 . 0031 ; }
public void setVolumeKeyEvent ( VolumeKeyEvent keyEvent ) { this . volumeKeyDevice . setInputEvent ( keyEvent ) ; }
public void setBody ( @ StringRes int body ) { cardBody . setText ( body ) ; }
public void testIsNOTWPCOM5 ( ) { assertFalse ( WPUrlUtils . isWordPressCom ( buildURI ( notWpcomAddress1 ) ) ) ; }
private String getAvailableDescription ( int available , int poolsize ) { return Utils . round ( ( double ) available * 100 / ( double ) poolsize , 2 ) + "% ( " + available + " ) " ; }
private boolean isBlockquoteType ( ) { return getRangeType ( ) == NoteBlockRangeType . BLOCKQUOTE ; }
public void onBackPressed ( ) { if ( ! backToPreviousFragment ( ) ) { super . onBackPressed ( ) ; } }
public boolean onFragmentCreate ( ) { NotificationCenter . getInstance ( ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; return super . onFragmentCreate ( ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; tagsToggle . onConfigurationChanged ( newConfig ) ; }
private void handleDeliveredResult ( long messageId , int result ) { DatabaseFactory . getEncryptingSmsDatabase ( context ) . markStatus ( messageId , result ) ; }
public void setPaintFillColor ( int color ) { this . paintFillColor = color ; }
public int getCount ( ) { return Aktivitetsdata . instans . pakke_kategori . size ( ) ; }
public static synchronized int count ( Class < ? > modelClass ) { return count ( BaseUtility . changeCase ( DBUtility . getTableNameByClassName ( modelClass . getName ( ) ) ) ) ; }
public void setShitRatingPrivacy ( String ShitRatingPrivacy ) { this . ShitRatingPrivacy = ShitRatingPrivacy ; }
public static HistoryDataSource get ( ) { if ( instance == null ) { instance = getSync ( ) ; } return instance ; }
private void moveToLastUnlocked ( ) { LevelInfo lastUnlocked = levelService . getLastUnlocked ( ) ; int screenToJumpTo = ( int ) ( lastUnlocked . getLevelId ( ) - 0 . 1 ) / 12 ; levelChoiceService . moveRight ( screenToJumpTo ) ; }
public void testDivision ( ) { Money result = money . divide ( 2 ) ; assertThat ( result . toPlainString ( ) ) . isEqualTo ( "7 . 88" ) ; assertThat ( result ) . isNotEqualTo ( money ) ; validateImmutability ( ) ; }
public Object ProcessResult ( ExtendedSoapSerializationEnvelope __envelope , SoapObject __result ) throws java . lang . Exception { return ( listeCoursHoraire ) getResult ( listeCoursHoraire . class , __result , "lireHoraireResult" , __envelope ) ; }
public static void setObjectRotation ( MapObject object , float rotation ) { object . getProperties ( ) . put ( "rotation" , rotation ) ; }
public void setAwardPoints ( int awardPoints ) { this . awardPoints = awardPoints ; }
private void notifyUser ( TransactionInfo transaction ) { Notification notification = createNotification ( transaction ) ; notifyUser ( notification , ( int ) transaction . id ) ; }
public < T > T getValue ( Context context , @ Nullable T defaultValue ) { return getSpecificOverriddenValue ( context , defaultValue , ( String [ ] ) null ) ; }
public void setTabWidth ( int characters ) { if ( tabWidthInCharacters == characters ) return ; tabWidthInCharacters = characters ; tabWidth = Math . round ( getPaint ( ) . measureText ( "m" ) * characters ) ; }
public Observable < DateTime > dateAtPosition ( int currentPosition ) { return timePeriodMostRecent ( ) . map ( timePeriod -> timePeriod . getDayDataAt ( currentPosition ) ) . map ( DayData : : getDateTime ) ; }
public String getExcerpt ( ) { return StringUtils . notNullStr ( excerpt ) ; }
public void testRotation ( ) { for ( BookRotationType testValue : BookRotationType . values ( ) ) { m_bs . rotation = testValue ; assertThat ( roundTrip ( m_bs ) . rotation , is ( testValue ) ) ; } }
public void error ( String message ) { log ( message ) ; }
private void saveMapBoundsAndScaleFactor ( ) { settingsService . saveMapBoundsAndScaleFactor ( animationView . getBounds ( ) , animationView . getScaleInfo ( ) , orientation ) ; }
private MessageFilterOptions getFilterOptions ( ) { return null ; }
public void startEmpty ( boolean startEmpty ) { this . startEmtpy = startEmpty ; }
public static void closeCountdownFragment ( EventsActivity activity ) { closeOverlayElement ( activity , countdownFragment ) ; countdownFragment = null ; }
private static final String [ ] tex = { "h = 6 . 626\\ , 070\\ , 040 ( 81 ) \\times { 10^ { - 34 } } \\text { J s } " ,
public void setBackgroundBarColor ( @ ColorInt int color ) { backgroundBarColor ( color ) ; invalidate ( ) ; }
public Observable < EmptyResponse > volumeDown ( ) { return controlService . volumeDown ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "de . nstrelow . youtubesubscribertile" , appContext . getPackageName ( ) ) ; }
public void onCreate ( ) { TraceDroid . init ( this ) ; settings = new SharedPreferencesSettings ( this ) ; communicator = new CraftyCommunicator ( this ) ; super . onCreate ( ) ; }
public RequestQueue getRequestQueue ( ) { if ( mRequestQueue == null ) { mRequestQueue = Volley . newRequestQueue ( mCtx . getApplicationContext ( ) ) ; } return mRequestQueue ; }
public static void requestWriteExternalStorage ( Activity activity , String rationale ) { EasyPermissions . requestPermissions ( activity , rationale , RC_READ_EXT_STORAGE , Manifest . permission . READ_EXTERNAL_STORAGE , Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; }
public void setPublishDate ( Date publishDate ) { this . publishDate = publishDate ; }
public void setProfilList ( ProfilListObject [ ] profilList ) { for ( ProfilListObject p : profilList ) { this . profilList . put ( p . getInputType ( ) , p . getInput ( ) ) ; } }
public static ContactStatus fromInt ( final int i ) { switch ( i ) { case 0 : return NOTREGISTERED ; case 1 : return REGISTERED ; default : return UNKNOWN ; } }
public String getEmail ( ) { return null ; }
private void addPendingUpload ( DCCServerManager . UploadEntry entry ) { if ( mPendingUploads . contains ( entry ) ) return ; mPendingUploads . add ( entry ) ; notifyItemInserted ( getPendingUploadsStart ( ) + mPendingUploads . size ( ) - 1 ) ; }
private Pref ( final String text ) { this . text = text ; }
public void onLoadMore ( int page , int totalItemsCount , RecyclerView view ) { historicalRecordListPresenter . onLoadMore ( page ) ; }
private boolean isFirstStart ( ) { return mPreferences . getBoolean ( "first_start" , true ) ; }
public CharSequence getPageTitle ( int position ) { return fragments . get ( position ) . title ( ) ; }
public Integer getPrecipProbability ( ) { return precipProbability ; }
public int compare ( TagHistory a , TagHistory b ) { return comparator . compare ( a , b ) ; }
public void unscheduleDrawable ( Drawable who , Runnable what ) { Callback callback = getCallback ( ) ; if ( callback == null ) { return ; } callback . unscheduleDrawable ( this , what ) ; }
public void onBackPressed ( ) { Analytics . log ( "Back pressed" ) ; super . onBackPressed ( ) ; }
public Float getArgument ( String string ) throws CommandParsingException { try { return Float . parseFloat ( string ) ; } catch ( NumberFormatException e ) { throw new CommandParsingException ( "command . common . value . floatValue . parsing" ) ; } }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { intent . intentAppDetailSettings ( activity , 0 ) ; shouldAdapterRefreshed = true ; }
public String getOriginalPath ( boolean savePaths , SharedPreferences sharedPreferences ) { if ( savePaths && FileUtils . isPathAccesible ( path , sharedPreferences ) ) { return path ; } else { return home ; } }
public List < Integer > getStudentGroupList ( ) { return studentGroupList ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . meal_detail_activity ) ; getAppComponent ( ) . newMealDetailActivityComponent ( new MealDetailActivityModel ( this ) ) . inject ( this ) ; }
public void setKey ( String key ) { mKey = key ; }
public Object then ( @ NonNull Task < TransportService > task ) throws Exception { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . BRIGHTNESS , brightnessData , taskCompletionSource ) ; return null ; }
public TimerViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return TimerViewHolder . newInstance ( parent , timeObservable , rxSubs ) ; }
public String getWidthParam ( ) { return "_" + pageProvider . getWidthParameter ( ) ; }
public void setContext ( Context mContext ) { this . mContext = mContext ; }
public String getContentText ( ) { return contentText ; }
public void unregisterObserver ( DefaultObserver < Void > observer ) { wallpaperObservable . unregisterObserver ( observer ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_bookmark , parent , false ) ; return new ViewHolder ( view ) ; }
private boolean shouldShowListPreference ( DetailListPreference preference ) { return preference != null && preference . getEntries ( ) != null && preference . getEntries ( ) . length > 0 ; }
public void onBell ( ) { mChangeCallback . onBell ( this ) ; }
public void onTorrentPaused ( @ NotNull String torrentId ) { try { handleEvent . accept ( torrentId ) ; } catch ( Exception e ) { if ( ! emitter . isCancelled ( ) ) emitter . onError ( e ) ; } }
public void onError ( Error error ) { Log . d ( LogTag . LOG_PLAYER_SERVICE , "Failed to resume music" ) ; }
public boolean onCheckIsTextEditor ( ) { return true ; }
public void getWordCounterForEnglish ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . US ) ; assertEquals ( DefaultWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
public void setOnBlogInfoLoadedListener ( ReaderBlogInfoView . OnBlogInfoLoadedListener listener ) { mBlogInfoLoadedListener = listener ; }
private void stopJingles ( ) { if ( jinglesAnimation != null ) { jinglesAnimation . stop ( ) ; jinglesAnimation = null ; empyListItem . setCompoundDrawablesWithIntrinsicBounds ( 0 , R . animator . jingles_animation , 0 , 0 ) ; } }
public void onCheckedChanged ( CompoundButton compoundButton , boolean isChecked ) { usePercentageForXAxis = isChecked ; mGraph . removeAllSeries ( ) ; lineGraphMap . clear ( ) ; subjectList . swapAdapter ( new DiagramSubjectAdapter ( DiagramActivity . this , generateGoldenRatioColors ( ) ) , true ) ; }
public void setCompetition ( Competition competition ) { this . competition = competition ; }
public boolean getBoolean ( String key ) { return mSharedPreferences . getBoolean ( key , false ) ; }
public ContactAdapter ( ContactOnClickCallback callback ) { this . mCallback = callback ; }
public BaseItemAnimationManager ( BaseItemAnimator itemAnimator ) { mItemAnimator = itemAnimator ; mPending = new ArrayList <> ( ) ; mActive = new ArrayList <> ( ) ; mDeferredReadySets = new ArrayList <> ( ) ; }
public void setReadingElements ( List < ReadingElement > readingElements ) { mReadingElements = readingElements ; }
public int getInitialItemPrefetchCount ( ) { return mInitialItemPrefetchCount ; }
public ItemSprite . Glowing glowing ( ) { return ( type == Type . HEAP ) && items . size ( ) > 0 ? items . peek ( ) . glowing ( ) : null ; }
public static void setSupportEmail ( String email ) { setString ( UndeletablePrefKey . SUPPORT_EMAIL , email ) ; }
private void loadIotView ( ) { replaceFragment ( iotFragment ) ; mBottomNavigationView . getMenu ( ) . getItem ( 2 ) . setChecked ( true ) ; Objects . requireNonNull ( getSupportActionBar ( ) ) . setTitle ( R . string . title_weight ) ; lastViewIndex = 2 ; }
public void changeText ( String newText ) { TextView text = ( TextView ) view . findViewById ( R . id . text_token_count ) ; text . setText ( newText ) ; text . setTextColor ( Color . BLACK ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { thread . initialize ( UF ) ; log . v ( TAG , "Fragment created" ) ; firebaseAnalyticsProvider . logCurrentScreen ( activity , fragment ) ; }
public void read ( DataInputStream dataInputStream ) throws Exception { clientTime = dataInputStream . readLong ( ) ; PacketPingReply ppr = new PacketPingReply ( ) ; ppr . clientTime = clientTime ; getSocketMonitor ( ) . getSocketOutput ( ) . getPacketQueue ( ) . add ( ppr ) ; }
public synchronized void setMessages ( String newMessage ) { this . loggedMessaagesQueue . offer ( "\n" + newMessage ) ; notifyPropertyChanged ( BR . messages ) ; }
public void onClick ( View v ) { Toast . makeText ( getApplicationContext ( ) , R . string . settings_saved , Toast . LENGTH_SHORT ) . show ( ) ; finish ( ) ; }
public @ Nullable String getCustomLabel ( ) { return customLabel ; }
static public ExchangeApi getExchangeApi ( ) { return new com . m2049r . xmrwallet . service . exchange . coinmarketcap . ExchangeApiImpl ( OkHttpClientSingleton . getOkHttpClient ( ) ) ; }
public void log ( String message ) { Logger . getLogger ( "multicast - tester" ) . info ( message ) ; }
public void setActiveProfile ( int identifier ) { setActiveProfile ( identifier , false ) ; }
public void add ( ArrayList < Card > cards , ArrayList < Stack > origins ) { if ( entries . size ( ) == MAX_RECORDS ) { entries . remove ( 0 ) ; } entries . add ( new Entry ( cards , origins ) ) ; }
public void navigateToTagsEdit ( Context context , Tag tag ) { if ( context != null ) { Intent intentToLaunch = TagEditActivity . getCallingIntent ( context , tag ) ; context . startActivity ( intentToLaunch ) ; } }
public void showNoLocationRecordsInfo ( ) { Toast . makeText ( this , R . string . msg_no_location_records_to_display , Toast . LENGTH_SHORT ) . show ( ) ; }
public void setResults ( ArrayList < CheminementOrthogonal . Result > results ) { this . results = results ; }
public final void setMaxProgress ( final int max ) { if ( builder . progress <= - 2 ) throw new IllegalStateException ( "Cannot use setMaxProgress ( ) on this dialog . " ) ; progressBar . setMax ( max ) ; }
public void run ( ) { adapter . searchGooglePlacesWithQuery ( null , myLocation ) ; }
public void setPhotoDate ( @ NonNull final Date photoDate ) { this . photoDate = photoDate ; }
private void loadActions ( AboutBuilder bundle ) { for ( Item item : bundle . getActions ( ) ) { addItem ( vActions , R . layout . xab_each_action , item ) ; } }
public void onReceive ( Context ctx , Intent intent ) { if ( intent . getAction ( ) . compareTo ( Intent . ACTION_TIME_TICK ) == 0 ) refreshCurrentTimeAndMessages ( ) ; }
public ForgotPasswordScreenPresenter ( ForgotPasswordScreenActivity activity , ForgotPasswordScreenContract . View view ) { mView = view ; mActivity = activity ; mUserService = RestClient . getInstance ( ) . getSetupService ( ) ; }
public int getSwipeDirs ( @ NonNull RecyclerView recyclerView , @ NonNull RecyclerView . ViewHolder viewHolder ) { if ( viewHolder instanceof SectionViewHolder ) return 0 ; return super . getSwipeDirs ( recyclerView , viewHolder ) ; }
private void detach ( RecyclerView view ) { view . removeOnChildAttachStateChangeListener ( mAttachListener ) ; view . setTag ( R . id . item_click_support , null ) ; }
public void bind ( MyFilter filter ) { mTextView . setText ( filter . getName ( ) ) ; }
public static void search ( XmppConnectionService xmppConnectionService , String term , OnSearchResultsAvailable onSearchResultsAvailable ) { new MessageSearchTask ( xmppConnectionService , term , onSearchResultsAvailable ) . executeInBackground ( ) ; }
public void enablePluginTest ( ) { Integer id = null ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_card_layout , parent , false ) ; return new MyViewHolder ( itemView ) ; }
private void showHomeProgressBar ( boolean show ) { homeProgressBar . setVisibility ( show? View . VISIBLE : View . GONE ) ; if ( show ) hostFab . hide ( ) ; else hostFab . show ( ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( ApplicationPreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . preferences__sms_mms ) ; initializePlatformSpecificOptions ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . tpwang . testproject" , appContext . getPackageName ( ) ) ; }
public static AztecCode encode ( byte [ ] data ) { return encode ( data , DEFAULT_EC_PERCENT , DEFAULT_AZTEC_LAYERS ) ; }
public RecentsPresenter ( BptfApplication application ) { application . getPresenterComponent ( ) . inject ( this ) ; }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . displayRecordData ( context , data . get ( position ) , position + 1 ) ; }
private void newTileLayerWizard ( final String geopackageName ) { NewTileLayerUI newTileLayerUI = new NewTileLayerUI ( geoPackageRecycler , this , this , getActivity ( ) , getContext ( ) , this , active , this , geopackageName ) ; newTileLayerUI . show ( geoPackageViewModel ) ; }
public static String colorScheme ( Context context ) { return getDefaultSharedPreferences ( context ) . getString ( context . getResources ( ) . getString ( R . string . pref_key_color_scheme ) , context . getResources ( ) . getString ( R . string . pref_default_value_color_scheme ) ) ; }
private void expandPodcastView ( ) { sliding_layout . setPanelHeight ( ( int ) dipToPx ( 68 ) ) ; }
public String get ( String key , String defaultValue ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return prefs . getString ( key , defaultValue ) ; }
public void testCreateFileNormal ( ) throws Exception { createSshServer ( new VirtualFileSystemFactory ( Paths . get ( Environment . getExternalStorageDirectory ( ) . getAbsolutePath ( ) ) ) ) ; }
public Money ( String amount , String currencyCode ) { mCommodity = Commodity . getInstance ( currencyCode ) ; setAmount ( amount ) ; }
public void setClearColor ( float r , float g , float b , float a ) { GLES20 . glClearColor ( r , g , b , a ) ; }
public void setStatus ( Status status ) { this . status = status ; }
public void onNext ( ClientAccounts clientAccounts ) { mLoanAccountList = Utils . getActiveLoanAccounts ( clientAccounts . getLoanAccounts ( ) ) ; mSavingsAccountList = Utils . getActiveSavingsAccounts ( clientAccounts . getSavingsAccounts ( ) ) ; checkAccountsSyncStatusAndSyncClientAccounts ( ) ; }
public SQLiteDatabase ( String fileName ) throws SQLiteException { sqliteHandle = opendb ( fileName , ApplicationLoader . applicationContext . getFilesDir ( ) . getPath ( ) ) ; isOpen = true ; }
public void considerSync ( boolean force ) { }
public boolean onCreate ( ) { mOpenHelper = new DatabaseHelper ( getContext ( ) ) ; return true ; }
public Integer getHash2 ( ) { return hash2 ; }
public void onChanged ( ) { super . onChanged ( ) ; valid = true ; notifyDataSetChanged ( ) ; }
public Call < PostResponse > setFavoriteMovie ( int movieId , boolean favorite ) { return api3 . setFavorite ( id ( ) , session ( ) , PostBody . favorite ( PostBody . MOVIE , movieId , favorite ) ) ; }
private void updatePlayingQueue ( ) { viewPager . setAdapter ( new AlbumCoverPagerAdapter ( getFragmentManager ( ) , MusicPlayerRemote . getPlayingQueue ( ) ) ) ; viewPager . setCurrentItem ( MusicPlayerRemote . getPosition ( ) ) ; onPageSelected ( MusicPlayerRemote . getPosition ( ) ) ; }
public boolean areContentsTheSame ( TagHistory oldItem , TagHistory newItem ) { return oldItem . equals ( newItem ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_home_settings , menu ) ; return true ; }
public boolean executeCommand ( ViewerCommand which ) { return false ; }
public boolean isEndOfMultiDayEvent ( ) { return isPartOfMultiDayEvent ( ) && isLastEntryOfEvent ; }
private void initTextureView ( ) { if ( mTextureView == null ) { mTextureView = new TextureView ( mContext ) ; mTextureView . setSurfaceTextureListener ( this ) ; } }
public HashMap < String , Object > getParams ( ) { return params ; }
public void testSaveModes ( ) throws InterruptedException { Log . d ( TAG , "testSaveModes" ) ; subTestSaveVideoMode ( ) ; subTestSaveFocusMode ( ) ; subTestSaveFlashTorchQuit ( ) ; subTestExposureLockNotSaved ( ) ; }
private void updateView ( View view ) { if ( view instanceof EditText ) { ( ( EditText ) view ) . setTextSize ( Collect . getQuestionFontsize ( ) ) ; } }
public void unregisterReceiver ( ) { myFileManager . unregisterDownloadReceiver ( ) ; }
public RRGLContext ( Context context ) { mProgramTexture = new RRGLProgramTexture ( ) ; mProgramColour = new RRGLProgramColour ( ) ; mContext = context ; }
public UIThreadRepeatingTimer ( long mIntervalMs , Listener mListener ) { this . mIntervalMs = mIntervalMs ; this . mListener = mListener ; }
public void shareThesaurusTest ( ) { search ( "splurge" ) ; swipeViewPagerLeft ( 1 ) ; openMenuItem ( R . string . share ) ; verifyShareIntentContains ( "flaunt" ) ; }
public Builder lastStepNextButtonText ( String lastStepNextButtonText ) { style . lastStepNextButtonText = lastStepNextButtonText ; return this ; }
public int getSingleViewHeight ( ) { return 60 ; }
public void pause ( ) { isPaused = ! isPaused ; mPreview . pause ( isPaused ) ; updateColors ( ) ; if ( ! isPaused ) { mPreview . resetBuffer ( ) ; } }
private void getEventsFromDatabase ( ) { mEvents = new Select ( ) . all ( ) . from ( MoodleEvent . class ) . execute ( ) ; }
public boolean resetShifted ( ) { if ( mKeyboard != null ) { if ( mKeyboard . resetShifted ( ) ) { invalidateAllKeys ( ) ; return true ; } } return false ; }
private long getSelectedDay ( ) { return ( ( EventCalendarView . MonthViewPagerAdapter ) calendarView . getAdapter ( ) ) . mSelectedDayMillis ; }
public void onResponse ( PlaylistCreationResult response ) { TvApp . getApplication ( ) . showMessage ( "Playlist Saved" , "Audio queue saved as new playlist : " + text ) ; TvApp . getApplication ( ) . setLastLibraryChange ( Calendar . getInstance ( ) ) ; }
public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { for ( int widgetId : appWidgetIds ) { EventRemoteViewsFactory . updateWidget ( context , widgetId , null ) ; notifyWidgetDataChanged ( context , widgetId ) ; } }
public void onItemClick ( ReleaseAsset item ) { UiUtils . enqueueDownloadWithPermissionCheck ( this , item ) ; }
public ContentType getType ( ) { return ContentType . MEMO ; }
public static String getAuthorizationHeader ( String token ) { return HEADER_AUTHORIZATION_PREFIX_BEARER + token ; }
private void initInfiniteVibratePrefs ( ) { binding . infiniteVibrateOptionPrefs . setChecked ( mPrefs . isBirthdayInfiniteVibrationEnabled ( ) ) ; binding . infiniteVibrateOptionPrefs . setOnClickListener ( view -> changeInfiniteVibrationPrefs ( ) ) ; binding . infiniteVibrateOptionPrefs . setReverseDependentView ( binding . globalOptionPrefs ) ; }
public void reloadSettings ( ) throws RemoteException { handler . sendEmptyMessage ( MESSAGE_RELOADSETTINGS ) ; }
public RecyclerThumbnailAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . recyclerview_thumbnail_item , parent , false ) ; return new RecyclerThumbnailAdapter . ViewHolder ( view ) ; }
public static PortScan onAddress ( @ NonNull String address ) throws UnknownHostException { return onAddress ( InetAddress . getByName ( address ) ) ; }
public void run ( ) { traitement ( ) ; }
public void setGlossValue ( List < String > glossValue ) { mGlossValue = glossValue ; }
public GenreAdapter ( @ NonNull AppCompatActivity activity , ArrayList < Genre > dataSet , @ LayoutRes int itemLayoutRes ) { this . activity = activity ; this . dataSet = dataSet ; this . itemLayoutRes = itemLayoutRes ; }
public void onFailure ( Call < Status > call , Throwable t ) { onThreadRequestFailure ( id ) ; }
public void attachVisual ( ) { target . getSprite ( ) . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaDizzy ) ) ; }
public void setState ( int state ) { this . state = state ; }
public void execute ( Object object ) { String clipboardText = ( String ) object ; ClipboardConnector . send ( new Message ( cipherManager . encrypt ( clipboardText ) , user ) ) ; }
public void setAuthorName ( String name ) { this . authorName = StringUtils . notNullStr ( name ) ; }
public void show ( ) { toggle ( true ) ; }
public long startArchive ( String name , boolean updating ) { return 0 ; }
public LocationProvider ( @ ApplicationContext Context context ) { this . context = context ; locationProviderClient = LocationServices . getFusedLocationProviderClient ( context ) ; }
public void setSubscribed ( String subscribed ) { this . subscribed = StringUtils . notNullStr ( subscribed ) ; }
public void onProgressFinished ( ) { Message msg = obtainMessage ( STOP_PROGRESS ) ; sendMessage ( msg ) ; }
public void setAdr_plz ( String adr_plz ) { this . _adr_plz = adr_plz ; }
public String getSubscribed ( ) { return StringUtils . notNullStr ( subscribed ) ; }
public GameState ( App app ) { this . app = app ; }
public Matrix getCameraToPreviewMatrix ( ) { calculateCameraToPreviewMatrix ( ) ; return camera_to_preview_matrix ; }
public int getCount ( ) { if ( tabs == null ) return fragments . length ; return tabs . size ( ) ; }
public GoogleAccountCredential getCredential ( ) { return credential ; }
public void execute ( Realm realm ) { String title = link . getTitle ( ) ; RealmObject . deleteFromRealm ( link ) ; Log . i ( LOG_TAG , "remove : Removed : " + title ) ; }
public void populate ( Food food ) { name . setText ( food . getName ( ) ) ; price . setText ( itemView . getContext ( ) . getString ( R . string . resto_food_price , food . getPrice ( ) ) ) ; }
public EighthActivityBuilder favorite ( boolean favorite ) { this . favorite = favorite ; return this ; }
public static float pxToDp ( Context context , int dp ) { float density = context . getResources ( ) . getDisplayMetrics ( ) . density ; return dp / density ; }
public static Boolean isAppInstalledOnExternalStorage ( @ NonNull final Context context ) { return isAppInstalledOnExternalStorage ( context . getApplicationInfo ( ) ) ; }
public DrawerBuilder withSliderBackgroundDrawable ( Drawable sliderBackgroundDrawable ) { this . mSliderBackgroundDrawable = sliderBackgroundDrawable ; return this ; }
public void close ( ) { }
public void run ( ) { try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } trackNow ( ) ; } } ) ;
public StorageWriteFileException ( File file , Exception innerException ) { super ( "There was an error writing the serviceFile " + file + " . " , innerException ) ; this . file = file ; }
public void setBackground ( int yearViewBackground , int weekBackground , int lineBg ) { mWeekBar . setBackgroundColor ( weekBackground ) ; mSelectLayout . setBackgroundColor ( yearViewBackground ) ; mWeekLine . setBackgroundColor ( lineBg ) ; }
public void serviceRemoved ( ServiceEvent event ) { sendMsg ( connection_msg_handler , message_type . SERVICE_REMOVED , event . getName ( ) ) ; Log . d ( "Engine_Driver" , String . format ( "serviceRemoved : '%s'" , event . getName ( ) ) ) ; }
public static SyncFailedEvent create ( Throwable exception ) { return new AutoValue_SyncFailedEvent ( exception ) ; }
public void run ( ) { MessagesStorage . getInstance ( ) . markMessagesContentAsRead ( midsArray ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . messagesReadContent , midsArray ) ; }
public void testNoMinVersion ( ) { mJsonData . get ( APIStatusDeserializer . ANDROID_SETTINGS_TAG ) . getAsJsonObject ( ) . remove ( APIStatusDeserializer . MIN_APP_VERSION_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , APIStatus . class , mContext ) ; }
public static String getCurrentLanguageName ( ) { return getString ( "LanguangeName" , R . string . LanguangeName ) ; }
private FunctionType getFunctionType ( ) { return ( FunctionType ) termType ; }
public static boolean getDisplayHiddenFiles ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( PREFS_DISPLAYHIDDENFILES , false ) ; }
public void onClick ( View v ) { Poll newPollData = pollData ; newPollData . votedOption = pollOption . id ; dialog . dismiss ( ) ; fragment . startSubmitPollVote ( newPollData ) ; }
public @ Nullable ListElement renderFromKey ( String key , ModelType type ) { return null ; }
public static List < CoinType > typesFromAddress ( String address ) throws AddressFormatException { return GenericUtils . getPossibleTypes ( address ) ; }
private void removeCardFromCollection ( Long cardId ) { getCol ( ) . remCards ( Arrays . asList ( cardId ) ) ; }
private void showMapIcons ( ) { ViewAnimation . rotateFadeIn ( editFeaturesButton , 200 ) ; ViewAnimation . rotateFadeIn ( settingsIcon , 200 ) ; layerFab . show ( ) ; }
public SayHi setPrettyPrint ( java . lang . Boolean prettyPrint ) { return ( SayHi ) super . setPrettyPrint ( prettyPrint ) ; }
public long getUserStillSinceTimeStamp ( ) { return Long . valueOf ( get ( "userStillSinceTimeStamp" , "0" ) ) ; }
public static void log ( Context context , int sId , Types type ) { log ( context , context . getString ( sId ) , type , DURATION_NONE ) ; }
public void setActivity ( RoomActivity activity ) { this . activity = activity ; }
private double inchtoyard ( double num ) { return num * 0 . 0278 ; }
public FontListHeaderAdapter ( List < String > items ) { this . items = items ; }
public void onClick ( View view ) { cancel ( ) ; }
public void onEvent ( Events . ModeChanged e ) { removeGeofences ( ) ; setupGeofences ( ) ; setupLocationRequest ( ) ; sendOngoingNotification ( ) ; }
public boolean containsDLChannel ( double channel ) { return channel > ( uplink_channel_lower_bound - channel_offset ) && channel < ( uplink_channel_upper_bound - channel_offset ) ; }
public int getCount ( ) { return ITEMS_COUNT ; }
private void performDelete ( Uri uri ) { int count = getContentResolver ( ) . delete ( uri , null , null ) ; Log . d ( TAG , "Deleted " + count + " tasks" ) ; }
public void refreshListFoldersInside ( final FileModel fileModel ) { mCurrentFolder = fileModel ; mCurrentPage = PAGE_FOLDER_INSIDE ; mFileModels . clear ( ) ; mFileImageManager . getLocalImage ( fileModel , mSortMode , null ) ; }
public int getAppTheme ( ) { return getInt ( APP_THEME ) ; }
public PhotoSizes setP ( String p ) { this . p = p ; return this ; }
public MediatorLiveData < List < ContactEntity >> getObservableContacts ( ) { return mObservableContacts ; }
private double acreTosqcm ( double num ) { return num * 40468564 . 224 ; }
public < T extends ViewModel > T create ( Class < T > modelClass ) { if ( modelClass . isAssignableFrom ( TransactionViewModel . class ) ) { return ( T ) new TransactionViewModel ( appDatabase ) ; } throw new IllegalArgumentException ( "Unknown ViewModel class" ) ; }
public void getReplies ( String author , String permlink , String accountName ) { queURL ( "javascript : getAllReplies ( '" + author + "' , '" + permlink + "' , '" + accountName + "' ) ; " ) ; }
public boolean removeCachedCall ( String cacheName , UUID uuid ) { if ( uuid == null ) return false ; ConcurrentHashMap < UUID , CacheCallData > cachedCalls = mTaggedCacheCalls . get ( cacheName ) ; return cachedCalls != null && cachedCalls . remove ( uuid ) != null ; }
public int getCurrentUserTeamNumber ( ) { return mDataManager . getCurrentUser ( ) . getTeamNumber ( ) ; }
public boolean getTop_ausflugsziel ( ) { return this . _top_ausflugsziel ; }
public void onChatRoomRead ( final Core core , final ChatRoom chatRoom ) { Lg . w ( "onChatRoomRead chatRoom = " , chatRoom ) ; }
public static void split ( Context context ) { ( ( Activity ) context ) . overridePendingTransition ( R . anim . split_enter , R . anim . split_exit ) ; }
private void queueNextRefresh ( final long delay ) { final Message message = obtainMessage ( UPDATE_PROGRESS_COMMAND ) ; removeMessages ( UPDATE_PROGRESS_COMMAND ) ; sendMessageDelayed ( message , delay ) ; }
private double sqcmTosqyard ( double num ) { return num * 0 . 000119599 ; }
public String getText ( ) { return mLyrics ; }
private void showMessage ( @ StringRes int text ) { Toast . makeText ( getContext ( ) , text , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onSettingChanged ( @ NotNull String key ) { settingsChangeHandler . onSettingChanged ( currentProjectProvider . getCurrentProject ( ) . getUuid ( ) , settingsProvider . getGeneralSettings ( ) . getAll ( ) . get ( key ) , key ) ; }
public List < AppInfo > getApps ( ) { return infos ; }
public T withDisabledIconColorRes ( int disabledIconColorRes ) { this . disabledIconColor = ColorHolder . fromColorRes ( disabledIconColorRes ) ; return ( T ) this ; }
public void onClick ( View v ) { if ( isNegativeButtonOnClickDismiss ) { dismiss ( ) ; } if ( negativeClickListener != null ) { negativeClickListener . onClick ( BUTTON_NEGATIVE ) ; } }
public int getLastPage ( ) { return mPrefs . getInt ( Constants . PREF_LAST_PAGE , Constants . NO_PAGE ) ; }
public void onSelectJudge ( ) { Intent i = new Intent ( this , JudgeSelectionActivity . class ) ; i . putParcelableArrayListExtra ( EXTRA_SELECTED_JUDGES , selectedJudges ) ; startActivityForResult ( i , REQUEST_JUDGE_SELECTOR ) ; }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable String label , @ NonNull Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public static void update ( ) { if ( ! isInitialized || ! Game . getInstance ( ) . isRunning ( ) ) { return ; } recalculate ( ) ; }
public void setShowTags ( boolean showTags ) { mShowTags = showTags ; }
public TeamListRecyclerSubscriber ( Context context ) { super ( ) ; mContext = context ; mDataToBind = new ArrayList <> ( ) ; mComparator = new TeamSortByNumberComparator ( ) ; mRenderMode = Team . RENDER_BASIC ; }
public UploadObject setSize ( int size ) { this . size = size ; return this ; }
public void onData ( NetworkDevice origin , SensorData data , float userSensitivity ) { mThroughputCounter ++ ; mDataSink . onData ( origin , data , userSensitivity ) ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `last_sync` INTEGER" ) ; }
public boolean isRtl ( ) { return builder . context . getResources ( ) . getBoolean ( R . bool . isRtl ) ; }
public void afterTextChanged ( Editable editable ) { thread . run ( ( ) -> { teacherPickerAdapter . clear ( ) ; searchTextView . dismissDropDown ( ) ; } ) ; }
public int hashCode ( ) { return Objects . hash ( query , limit , offset , count , timestamp , teachers ) ; }
public boolean onUnbind ( Intent intent ) { isServiceInUse = false ; if ( ! isPlaying ( ) ) { stopSelf ( ) ; } return true ; }
public static String getQuranDatabaseDirectory ( Context context ) { String base = getQuranBaseDirectory ( context ) ; return ( base == null ) ? null : base + DATABASE_DIRECTORY ; }
private static String getExtension ( String filename ) { return filename . substring ( filename . lastIndexOf ( ' . ' ) + 1 ) . toLowerCase ( ) ; }
public void loadTweets ( View view ) { new TweetsAsynchronousLoad ( context , Tweet_ListView . this , option ) . execute ( ) ; }
public void sendChatRequest ( Host host ) { mNearConnect . send ( getStartChatRequest ( ) . getBytes ( ) , host ) ; }
public void setOnAnswerListener ( OnAnswerListener listener ) { answerListener = listener ; }
public boolean getRun ( ) { return timerSwitch ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; prefs . edit ( ) . putBoolean ( Constants . PREF_ENABLE_AUTOBACKUP , false ) . apply ( ) ; }
public String getName ( ) { return name ; }
public boolean isChildSelectable ( int i , int i2 ) { return false ; }
public void digitsAboveLimitOfNineShouldBeTruncatedFromRight ( ) { getActualWidget ( ) . answerText . setText ( "123456789123" ) ; assertEquals ( "123456789" , getActualWidget ( ) . getAnswerText ( ) ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new ForgotPasswordFragmentView ( ) ; case 1 : return new LoginFragmentView ( ) ; case 2 : return new NewAccountFragment ( ) ; default : return null ; } }
public void OkulumuzuTaniyinCard ( View v ) { Intent intent = new Intent ( getApplicationContext ( ) , category_frag2 . class ) ; startActivity ( intent ) ; }
public boolean loadUsePalette ( ) { return PreferenceUtil . getInstance ( getActivity ( ) ) . albumColoredFooters ( ) ; }
public String toString ( ) { return file ; }
public void migrate ( SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `notifying` INTEGER NOT NULL DEFAULT 0" ) ; }
public void getScheduleOfGroup ( final int groupId , RequestListener < GroupSchedule > listener ) { spiceManager . execute ( new ScheduleOfGroupRequest ( groupId ) , "getScheduleOfGroup ( " + groupId + " ) " , CACHE_EXPIRY_DURATION , listener ) ; }
public void unpinEvent ( @ NonNull CalendarEvent calendarEvent ) { calendarDao . deletePin ( pin ( calendarEvent ) ) ; }
public void getMaterialDialogThemeLIGHTTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . LIGHT_INDEX ) ; assertEquals ( Theme . LIGHT , apptheme . getMaterialDialogTheme ( ) ) ; }
private void load ( ) { if ( ! historyPortion . isLoaded ( ) ) { pbHistory . setVisibility ( View . VISIBLE ) ; rvHistoryItems . setVisibility ( View . GONE ) ; new HistoryItemsLoaderTask ( this ) . execute ( ) ; } }
private void changeUnlockPrefs ( ) { boolean isChecked = binding . unlockScreenPrefs . isChecked ( ) ; binding . unlockScreenPrefs . setChecked ( ! isChecked ) ; mPrefs . setDeviceUnlockEnabled ( ! isChecked ) ; }
public CardDevice ( Context context ) { this . context = context ; this . id = nextID ++ ; }
private void saveSelectedSortingOrder ( int selectedStringOrder ) { selectedSortingOrder = selectedStringOrder ; settingsProvider . getGeneralSettings ( ) . save ( getSortingOrderKey ( ) , selectedStringOrder ) ; }
public void size ( float value ) { scale . set ( value ) ; }
public DailyRecord ( ) { date = LocalDate . now ( ) ; correctAnswers = 0 ; totalAnswers = 0 ; }
public boolean onClose ( ) { mSearchQuery = null ; setSearchVisibility ( false ) ; return false ; }
public Settings setAnimationsDuration ( long duration ) { if ( duration <= 0L ) { throw new IllegalArgumentException ( "Animations duration should be > 0" ) ; } animationsDuration = duration ; return this ; }
public void stop ( ) { player . stop ( false ) ; player . release ( ) ; audioFocusHelper . loseFocus ( ) ; }
public APS_N64 ( File patch , File rom , File output , ResourceProvider resourceProvider , UFileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public static float getCartPrice ( RealmList < CartItem > cartItems ) { float price = 0f ; for ( CartItem item : cartItems ) { price += item . product . price * item . quantity ; } return price ; }
public void onClick ( View v ) { new MyTask ( resultTextView , runButton ) . execute ( 1 ) ; }
public boolean onCabFinished ( MaterialCab materialCab ) { unCheckAll ( ) ; return true ; }
private Classroom ( ) { }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new MenuScreen ( game ) ) ; }
public void setPairUps ( ArrayList < PairUp > pairUps ) { this . pairUps = pairUps ; }
public BMI ( Integer height , Double weight , Double bmi , Date timestamp ) { this . height = height ; this . weight = weight ; this . bmi = bmi ; this . timestamp = timestamp ; }
public Completable fireRemove ( int accountId , int userId ) { return Completable . fromAction ( ( ) -> removePublisher . onNext ( Pair . create ( accountId , userId ) ) ) ; }
public AreaReference setFromPositionVector3 ( Vector3 vector3 ) { setFromPosition ( vector3 . x , vector3 . y , vector3 . z ) ; return this ; }
public void setComment ( String comment ) { this . comment = comment ; }
public com . google . protobuf . AnyOrBuilder getPublicKeyOrBuilder ( ) { if ( publicKeyBuilder_ != null ) { return publicKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return publicKey_ == null ? com . google . protobuf . Any . getDefaultInstance ( ) : publicKey_ ; } }
public boolean isValid ( ) { this . parse ( true ) ; return this . valid ; }
public Builder neutralText ( @ StringRes int neutralRes ) { if ( neutralRes == 0 ) return this ; return neutralText ( this . context . getText ( neutralRes ) ) ; }
public Set < ReadByMarker > getReadByMarkers ( ) { return Collections . unmodifiableSet ( this . readByMarkers ) ; }
public void run ( ) { items . addAll ( newItems ) ; notifyDataSetChanged ( ) ; }
public MessageListener ( MessageCenterService instance ) { super ( instance , " - RECV" ) ; }
public Map getAliases ( ) throws RemoteException { return connections . get ( connectionClutch ) . getAliases ( ) ; }
public static boolean isLaidOut ( View view ) { if ( Build . VERSION . SDK_INT >= 19 ) { return view . isLaidOut ( ) ; } else { return view . getWidth ( ) > 0 && view . getHeight ( ) > 0 ; } }
public void setCategoryInfos ( ArrayList < CategoryInfo > categoryInfos ) { this . categoryInfos = categoryInfos ; notifyDataSetChanged ( ) ; }
public static void back ( ) { if ( musicService != null ) { musicService . back ( ) ; } }
public void add_hours_to_date ( ) { assertEquals ( dEsperado , dateManager . addHoursToJavaUtilDate ( dActual , dHoras ) ) ; }
public int getLifetimeHandle ( ) { return mLifetimeLoc ; }
public Binder < CommentImageEmbedView > createBinder ( Comment model ) { return new CommentImageEmbedBinder ( model ) ; }
public AsyncOperations ( boolean send , ProgressDialog progressDialog , TextView status , Activity act , Context ctx ) { mSend = send ; mProgressDialog = progressDialog ; mTvStatus = status ; mAppCtx = ctx ; mActivity = act ; mDownload = false ; }
public long [ ] [ ] getWorkers ( ) { return Workers ; }
public void onSuccess ( @ NonNull int status ) { Log . i ( TAG , "Reminder disabled" ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { return "Info" ; */ case PID_FRAGMENT : return "PID" ; case SETTINGS_FRAGMENT : return "Settings" ; case GRAPH_FRAGMENT : return "Graph" ; case MAP_FRAGMENT : return "Map" ; } return null ; }
public BlockTextureHandler setSide ( BlockFace blockFace , String id ) { textureRegions [ blockFace . index ] = Assets . getPackedTextureFromID ( id , "block" ) ; return this ; }
public void setData_callsValueChangeListener ( ) { GeoShapeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setBinaryData ( answer ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public List < LocalTranslation > getTranslations ( ) { return mTranslations ; }
public Builder withMetadata ( String metadata ) { mMetadata = metadata ; return this ; }
public SettingsManager ( ) { initMapIdToPreferenceName ( ) ; initManagedSettings ( ) ; }
public Intent createViewIntent ( TaskEvent event ) { Intent intent = CalendarIntentUtil . createCalendarIntent ( ) ; intent . setData ( ContentUris . withAppendedId ( DmfsOpenTasksContract . Tasks . PROVIDER_URI , event . getId ( ) ) ) ; return intent ; }
public static void subscribeForNewCompetition ( ) { final String topic = "competitionstest" ; FirebaseMessaging . getInstance ( ) . subscribeToTopic ( topic ) . addOnSuccessListener ( new OnSuccessListener < Void > ( ) { @ Override public void onSuccess ( Void aVoid ) { } } ) ; }
public int process ( ) { return this . left . process ( ) / this . right . process ( ) ; }
public void onRefreshMenuItemSelected ( ) { onRefreshButtonSelected ( ) ; }
private boolean isUserBrowsing ( ) { boolean isUserBrowsing = lastKnownLocation != null && ! presenter . areLocationsClose ( getCameraTarget ( ) , lastKnownLocation ) ; return isUserBrowsing ; }
public final void releaseSource ( SourceInfoRefreshListener listener ) { sourceInfoListeners . remove ( listener ) ; if ( sourceInfoListeners . isEmpty ( ) ) { player = null ; timeline = null ; manifest = null ; releaseSourceInternal ( ) ; } }
public String defaultValue ( ) { return "0" ; }
public Intent getSendIntent ( ) { return sendIntent ; }
private void setViewAfterPatientDownloadSuccess ( ) { mLastViewedPatientsView . setSpinnerVisibility ( false ) ; mLastViewedPatientsView . setListVisibility ( true ) ; mLastViewedPatientsView . setEmptyListVisibility ( false ) ; mLastViewedPatientsView . stopRefreshing ( ) ; }
public void whenPromptDoesNotHaveAnswer_answerTextViewShowsNoDateSelected ( ) { DateWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . widgetAnswerText . getText ( ) , widget . getContext ( ) . getString ( R . string . no_date_selected ) ) ; }
private double mitom ( double num ) { return num * 1609 . 35 ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; RemixedDungeon . resetScene ( ) ; }
public void rotateJointTarget ( LbrJoint joint , float degree ) { mVrep . simxSetJointTargetPosition ( mClientId , mJointMap . get ( joint ) , ( float ) ( degree * Math . PI / 180 ) , simx_opmode_oneshot ) ; }
public boolean onClick ( float x , float y ) { if ( mRectMode . contains ( x , y ) ) { if ( mCallbacks != null ) { mCallbacks . onModeClick ( ) ; } return true ; } return false ; }
public int getOldestStoryId ( ) { if ( ! stories . isEmpty ( ) ) { return getItem ( getCount ( ) - 1 ) . getId ( ) ; } return 0 ; }
public CpuSpyApp ( int core , Context context ) { PREF_OFFSETS = "offsets" + core ; _monitor = new CpuStateMonitor ( core ) ; loadOffsets ( context ) ; }
public static void removeStickyEvent ( Object event ) { EventBus . getDefault ( ) . removeStickyEvent ( event ) ; }
public LoadTwitterCardsEvent ( int sectionNumber , LongSparseArray < TwitterCard > cards ) { this . sectionNumber = sectionNumber ; this . cards = cards ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . pavl . currencycalc" , appContext . getPackageName ( ) ) ; }
private void clearCurrentState ( ) { SharedPreferences preferences = ApplicationLoader . applicationContext . getSharedPreferences ( "logininfo" , Context . MODE_PRIVATE ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . clear ( ) ; editor . commit ( ) ; }
public static void stopTracking ( Context context ) { sleepStore . getInstance ( ) . setTracking ( false , context ) ; }
public void run ( ) { ( ( VideoPlayActivity ) activity ) . setReplies ( commentsList ) ; }
private void setQueryFilter ( String query ) { this . queryFilter = query ; getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; }
public void setEintritt ( String eintritt ) { this . _eintritt = eintritt ; }
public void onBackPressed ( ) { if ( getSelectionStart ( ) != null ) { endAyahMode ( ) ; } else if ( showingTranslation ) { switchToQuran ( ) ; } else { super . onBackPressed ( ) ; } }
public void setPack ( String pack ) { this . reg = pack ; }
public void unhideLast ( ) { if ( submissions != null && savedSubmission != null ) { submissions . add ( savedIndex , savedSubmission ) ; writeToMemory ( ) ; } }
public void preVerifyFingerprint ( Contact contact , String fingerprint ) { axolotlStore . preVerifyFingerprint ( contact . getAccount ( ) , contact . getJid ( ) . toBareJid ( ) . toPreppedString ( ) , fingerprint ) ; }
private void startLXC ( ) { new LXC ( this , new String [ ] { " - nolog" } ) ; }
private void start ( ) { DesktopSecurityManager . setup ( ) ; new ServerCompatibility ( this , arg ) . startCubes ( ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . im_create_password : mFinished . activityFinish ( true ) ; break ; default : break ; } }
public void run ( ) { progressImageButtonView . hideLoading ( ) ; Toast . makeText ( ImageButtonActivity . this , R . string . hello_response , Toast . LENGTH_SHORT ) . show ( ) ; }
private SharedPreferences getPrefs ( ) { return context . getSharedPreferences ( "hackconf2017_feedback" , 0 ) ; }
public void restartedVideo ( final int video_method , final Uri uri , final String filename ) { }
public String getIconURLWithAuthInfo ( ) { return addUserInfo ( iconURL_ ) ; }
private TriggerWidget createWidget ( FormEntryPrompt prompt ) { return new TriggerWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt , "formAnalyticsID" ) ) ; }
public BackgroundStatusHandler ( Activity activity ) { mActivity = new WeakReference <> ( activity ) ; noOfRunningBackgroundThreads = 0 ; }
public boolean hasAuthorName ( ) { return ! TextUtils . isEmpty ( authorName ) ; }
public TemporaryModel ( @ NonNull JSONObject model ) { Timber . d ( "Constructor called with model" ) ; mEditedModel = model ; }
private void setValue ( int value ) { persistFloat ( value ) ; notifyDependencyChange ( false ) ; this . year = value ; }
public void doAfterLogout ( boolean result ) { if ( result ) { refreshLeftMenu ( ) ; refresh ( ) ; } }
public Atom ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
public PhotoSizeEntity setP ( String p ) { this . p = p ; return this ; }
public void onReceive ( Context context , Intent intent ) { String action = intent . getAction ( ) ; if ( action != null && action . equals ( ConnectivityManager . CONNECTIVITY_ACTION ) ) { ConnectivityDetector . withContext ( context ) . startCheckingConnection ( ) ; } }
public void setFromListener ( @ NonNull OnRequestViewListener < ID > listener ) { mFromListener = listener ; }
public static List < String > getMinFrees ( ) { RootUtils . chmod ( MINFREE , "6644" ) ; String value = Utils . readFile ( MINFREE ) ; return Arrays . asList ( value . split ( " , " ) ) ; }
public GoogleTask getGoogleTask ( ) { return googletask ; }
public String getName ( ) { return user . login ; }
public void removeListener ( Player . EventListener listener ) { player . removeListener ( listener ) ; }
public static void setSdcardPermissionsDialogPresented ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putBoolean ( PREF_SDCARDPERMESSION_DIALOG_DISPLAYED , true ) ; editor . commit ( ) ; }
public UthmaniSpan ( Context context ) { mTypeface = TypefaceManager . getHafsTypeface ( context ) ; }
private void setTheSelectedLang ( LanguageObject language , boolean fast ) { Helper . setVisibilityTo ( langs_container , false ) ; selected_lang = language ; changeLanguage ( language ) ; checkUpdate ( ) ; }
public static boolean isBoolean ( int idx ) { int [ ] list = { 4 , 6 , 9 } ; return ( Arrays . binarySearch ( list , idx ) >= 0 ) ; }
public static PendingIntent getNotificationIntentClose ( Context context ) { return getPendingIntent ( context , ACTION_CLOSE ) ; }
public static AnyOfFilter just ( Field field , Object value ) { ArrayList < Object > list = new ArrayList <> ( ) ; list . add ( value ) ; return new AnyOfFilter ( field , list ) ; }
public void onPause ( ) { super . onPause ( ) ; if ( PreferenceHelper . getAutoSave ( getBaseContext ( ) ) && mEditor . canSaveFile ( ) ) { saveTheFile ( ) ; mEditor . fileSaved ( ) ; } }
public DownloadPiece ( UUID infoId , int index , long size , long curBytes ) { this . infoId = infoId ; this . index = index ; this . size = size ; this . curBytes = curBytes ; }
public void onFailure ( Call < Weather > call , Throwable t ) { callback . onDataNotAvailable ( cityId ) ; }
public AlunoDAO ( Context context ) { super ( context , "Agenda" , null , 1 ) ; }
public boolean equalsDictionary ( Preferences . DictionaryType type , String path ) { return this . path . equals ( path ) && this . type == type ; }
public NetworkClient providesNetworkClient ( ) { String baseUrl = ReversiApplication . getContext ( ) . getResources ( ) . getString ( R . string . base_url ) ; NetworkClientImpl networkClient = new NetworkClientImpl ( baseUrl ) ; return networkClient ; }
public String toXML ( ) { StringBuffer strOut = new StringBuffer ( ) ; for ( OCSInput o : inputs ) { strOut . append ( o . toXml ( ) ) ; } return strOut . toString ( ) ; }
public MeasureLayerJoin ( String measurement , String layer ) { this . measurement = measurement ; this . layer = layer ; }
public void onBindViewHolder ( @ NonNull NoteViewHolder noteViewHolder , int position ) { noteViewHolder . bind ( getItem ( position ) . getNote ( ) ) ; }
public boolean isPreparing ( ) throws RemoteException { return mService . get ( ) . isPreparing ( ) ; }
public MovieListViewModel ( @ NonNull Application application ) { super ( application ) ; isViewingSearchResults = false ; movieRepository = MovieRepository . getInstance ( application ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { setupListener . onSetupGestureView ( holder . image ) ; Painting painting = paintings . get ( position ) ; GlideHelper . loadFull ( holder . image , painting . imageId , painting . thumbId ) ; }
public void onUpdateFinished ( Boolean isUpdated ) { Notification . createNotification ( getContext ( ) ) ; NewsSharedPreferences newsSharedPreferences = NewsSharedPreferences . getInstance ( ) ; newsSharedPreferences . put ( newsSharedPreferences . getStringFromResId ( R . string . pref_last_updated_key ) , System . currentTimeMillis ( ) ) ; }
public void onProductPurchased ( String productId , TransactionDetails details ) { Toast . makeText ( getContext ( ) , R . string . thank_you , Toast . LENGTH_SHORT ) . show ( ) ; }
public TemplateListAdapter ( Context context , DatabaseAdapter db , Cursor c ) { super ( context , db , R . layout . template_list_item , c ) ; }
public void showColorChooserPrimary ( ) { new ColorChooserDialog . Builder ( this , R . string . color_palette ) . titleSub ( R . string . colors ) . preselect ( primaryPreselect ) . show ( getSupportFragmentManager ( ) ) ; }
public TransactionConfidence . ConfidenceType getConfidenceType ( ) { return ( transaction . getConfirmations ( ) > 0 ) ? confidence : TransactionConfidence . ConfidenceType . PENDING ; }
public void onDialogResult ( int dialogButton , int actionId ) { if ( actionId == DELETE_ACTION && dialogButton == DialogInterface . BUTTON_POSITIVE ) { doDelete ( ) ; } }
public Binder < SeparatorView > createBinder ( TagEntry viewObject ) { return new SeparatorBinder ( ) ; }
public void onResume ( ) { super . onResume ( ) ; ArtworkManager . getInstance ( getContext ( ) . getApplicationContext ( ) ) . registerOnNewAlbumImageListener ( ( AlbumsAdapter ) mAdapter ) ; }
public final void setImage ( ImageSource imageSource ) { setImage ( imageSource , null , null ) ; }
public static void finish ( Class < ? extends Activity > activityClass ) { sleep ( 800 ) ; final Activity currentActivity = getCurrentActivity ( ) ; assertThat ( currentActivity , instanceOf ( activityClass ) ) ; currentActivity . finish ( ) ; sleep ( 800 ) ; }
public Measure ( int _number , double _abscissa , double _ordinate ) { this ( _number , _abscissa , _ordinate , 0 . 0 , 0 . 0 ) ; }
public static BigDecimal countMonth ( String from , String to ) { final double count = getMonthCount ( from , to ) ; return new BigDecimal ( count ) . setScale ( 4 , RoundingMode . HALF_UP ) ; }
public Wound ( ) { super ( Effects . get ( Effects . Type . WOUND ) ) ; origin . set ( width / 2 , height / 2 ) ; }
public AboutBuilder addLinkedInLink ( int user ) { return addLinkedInLink ( context . getString ( user ) ) ; }
public void openInBrowser ( ) { view . getContext ( ) . startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( post . url ) ) ) ; }
public String toString ( ) { return " { _id = " + _id + " , address = " + address + " } " ; }
public static int loadShipInitEquipCountFromStorage ( Context context ) { JsonObject data = KcaUtils . getJsonObjectFromStorage ( context , "ships_init_equip_count . json" ) ; if ( data != null ) { kcShipInitEquipCount = data . getAsJsonObject ( ) ; return 1 ; } else { return - 1 ; } }
public void setUp ( ) throws Exception { centerListPresenter = new CenterListPresenter ( mDataManager , mDataManagerCenter ) ; centerListPresenter . attachView ( mCenterListMvpView ) ; centerPage = FakeRemoteDataSource . getCenters ( ) ; centerWithAssociations = FakeRemoteDataSource . getCentersGroupAndMeeting ( ) ; }
public < T > void setValue ( Context context , @ Nullable T value ) { setValue ( context , value , ( String [ ] ) null ) ; }
public int getViewId ( ) { return R . layout . stub_bus_stop_departure ; }
public ListPathsAsyncTask ( Context context , OnPathsListedCallback callback ) { super ( context ) ; onPathsListedCallbackWeakReference = new WeakReference <> ( callback ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new FormEntryViewModel ( clock , analytics ) ; }
public boolean isMultiSelect ( ) { return multiSelect ; }
public DownloadActionClick ( DownloadWithUpdate download , WhatAction what , Listener listener ) { this . download = download ; this . what = what ; this . listener = listener ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "in . co . gorest . grblcontroller" , appContext . getPackageName ( ) ) ; }
public com . google . protobuf . Any . Builder getTxBuilder ( ) { onChanged ( ) ; return getTxFieldBuilder ( ) . getBuilder ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( "mCurrentTab" , mCurrentTab ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; }
public String getDescription ( ) { return "255 : 5 : ( ( WS ) * ( ( location = ID ) ? c = comparator ) ( WS ) * right = additiveExpression ) ?" ; }
public void setImages ( List < ExerciseImage > images ) { this . images = images ; }
private void initRates ( ) { CurrenciesRate currenciesRate = DataManager . getInstance ( ) . getCurrenciesRate ( ) ; if ( currenciesRate != null ) { rates . setValue ( currenciesRate ) ; } }
public Dialog onCreateDialog ( Bundle savedInstanceState ) { return new MaterialDialog . Builder ( getActivity ( ) ) . title ( getArguments ( ) . getString ( "title" ) ) . content ( getArguments ( ) . getString ( "lyrics" ) ) . build ( ) ; }
private Note buildNote ( ) { Long now = Calendar . getInstance ( ) . getTimeInMillis ( ) ; Note note = new Note ( ) ; note . setCreation ( now ) ; note . setAlarm ( now + 1000 ) ; return note ; }
public void onNestedScrollAccepted ( @ NonNull View child , @ NonNull View target , int nestedScrollAxes ) { nestedScrollingParentHelper . onNestedScrollAccepted ( child , target , nestedScrollAxes ) ; if ( dismissed ) { return ; } cancelCurrentAnimation ( ) ; }
public String getNrFieldId ( ) { return Const . FIELD_PREFIX + getNr ( ) ; }
private ContentValues buildKeepContentValue ( WallpaperEntity entity ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( Wallpaper . COLUMN_NAME_KEEP , entity . keep ? 1 : 0 ) ; return contentValues ; }
public void showNoCommentTipsIfNeed ( ) { mNoContentTipView . setVisibility ( mCommentAdapter . isEmpty ( ) ? View . VISIBLE : View . GONE ) ; }
private void setDebugOutput ( String string ) { TextView v = ( TextView ) findViewById ( R . id . debugOutput ) ; v . setText ( string ) ; }
public MusicLibraryPagerAdapter ( @ NonNull final Context context , final FragmentManager fragmentManager ) { super ( fragmentManager ) ; mContext = context ; setCategoryInfos ( PreferenceUtil . getInstance ( context ) . getLibraryCategoryInfos ( ) ) ; }
public LiveData < LocalDateTime > getSelectedTime ( ) { return selectedTime ; }
public ServerAdapter ( List < String > myDataset ) { mDataset = myDataset ; }
public void onViewPositionChanged ( View changedView , int left , int top , int dx , int dy ) { if ( mListener != null ) { mListener . onSwipe ( top / ( float ) getHeight ( ) ) ; } }
public synchronized void saveQueues ( @ NonNull final ArrayList < Song > playingQueue , @ NonNull final ArrayList < Song > originalPlayingQueue ) { saveQueue ( PLAYING_QUEUE_TABLE_NAME , playingQueue ) ; saveQueue ( ORIGINAL_PLAYING_QUEUE_TABLE_NAME , originalPlayingQueue ) ; }
public ContentProviderClient provideCategoryContentProviderClient ( Context context ) { return context . getContentResolver ( ) . acquireContentProviderClient ( CATEGORY_AUTHORITY ) ; }
public void setSticky ( boolean sticky ) { mSticky = sticky ; if ( mThreadId > 0 ) MessagesProviderUtils . setThreadSticky ( mContext , mThreadId , sticky ) ; }
public void setText ( CharSequence text , BufferType type ) { if ( mAdapter != null ) { setSelection ( new NomenclatureItem ( text . toString ( ) ) ) ; } super . setText ( text , type ) ; }
public ChartData ( List < T > sets ) { this . mDataSets = sets ; init ( ) ; }
public void attach ( Observer observer ) { observers . add ( observer ) ; }
public void didSelectContact ( final TLRPC . User user , String param , ContactsActivity activity ) { if ( user == null ) { return ; } MessagesController . getInstance ( ) . blockUser ( user . id ) ; }
public ChartData getDataByIndex ( int index ) { return getAllData ( ) . get ( index ) ; }
public void setLineWidth ( final float _lineWidth ) { mCurSize = _lineWidth ; mBrushPaint . setStrokeWidth ( mCurSize ) ; invalidate ( ) ; }
public String [ ] getRequiredMulticastHelpers ( ) { return new String [ ] { "v4_manual_broadcast" } ; }
public PresentationLinkDeserializer ( IDeserializerStorage deserializerStorage ) { super ( deserializerStorage ) ; }
public void setButtonBackVisible ( boolean visible ) { binding . miButtonBack . setVisibility ( visible ? View . VISIBLE : View . INVISIBLE ) ; }
public void invalidPin ( String workflowId , OstWorkflowContext ostWorkflowContext , String userId , OstPinAcceptInterface ostPinAcceptInterface ) { }
public void handleUrlValidationError ( Throwable error , String blogUrl ) { ErrorType errorType = getErrorType ( error ) ; forEachListener ( l -> l . onBlogUrlError ( errorType , error , blogUrl ) ) ; }
public SubscriptionListSubscriber provideSubscriptionListSubscriber ( MyTbaModelRenderer renderer ) { return Mockito . mock ( SubscriptionListSubscriber . class ) ; }
public void delete ( ) { RootUtils . runCommand ( "rm - r '" + file + "'" ) ; }
public void run ( ) { ReaderAnim . animateLikeButton ( commentHolder . countLikes . getImageView ( ) , true ) ; }
public void onSurfaceChanged ( SurfaceHolder holder , int format , int width , int height ) { _surfaceChanged ( width , height ) ; }
public void onCancelled ( DatabaseError databaseError ) { DHC . log ( TAG , "database error " + databaseError . getMessage ( ) + " " + databaseError . getDetails ( ) ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; } } public static class PeerNotifyEvents extends TLObject {
public ScannerView ( Context context ) { super ( context ) ; mScanner = null ; }
public QoSServerResultDesc ( String desc , QoSTestResultEnum testType , DetailType status , Set < Long > uidSet ) { this . desc = desc ; this . testType = testType ; this . status = status ; this . uidSet = uidSet ; }
public ValueFormatter getValueFormatter ( ) { if ( needsFormatter ( ) ) return Utils . getDefaultValueFormatter ( ) ; return mValueFormatter ; }
public static LocationDatabase getInstance ( Context context ) { tryCopyDatabaseFile ( context ) ; return Room . databaseBuilder ( context . getApplicationContext ( ) , LocationDatabase . class , DB_NAME ) . allowMainThreadQueries ( ) . build ( ) ; }
public void onAddTrack ( RtpReceiver rtpReceiver , MediaStream [ ] mediaStreams ) { Log . w ( TAG , "onAddTrack : " + mediaStreams ) ; }
public EquipableItem getActiveWeapon ( ) { if ( rangedWeapon != null ) { return rangedWeapon ; } return getBelongings ( ) . getItemFromSlot ( Belongings . Slot . WEAPON ) ; }
public Recipient ( @ NonNull Context context , @ NonNull DcContact dcContact ) { this ( context , null , dcContact ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mReaderUpdateLogic = new ReaderUpdateLogic ( ( WordPress ) getApplication ( ) , this ) ; AppLog . i ( AppLog . T . READER , "reader service > created" ) ; }
private void cancelAutomatedTransferDialog ( ) { if ( mAutomatedTransferProgressDialog != null && mAutomatedTransferProgressDialog . isShowing ( ) ) { mAutomatedTransferProgressDialog . cancel ( ) ; } }
public String getPref ( int id ) { return getPref ( id , "" ) ; }
public void setOnEmojiconClickedListener ( OnEmojiconClickedListener listener ) { this . onEmojiconClickedListener = listener ; }
public void getPage_secondPageFromABookWithOnePage_throwsException ( ) throws NotFoundException { Book bookWithOnePage = makeBookWithOnePage ( ) ; int pageIndex = 2 ; Executable getPage = ( ) -> bookWithOnePage . getPage ( pageIndex ) ; assertThrows ( NotFoundException . class , getPage ) ; }
public void setLinkClassName ( String linkClassName ) { this . linkClassName = linkClassName ; }
public void setName ( final String name ) { this . name = name ; }
public void onWindowFocusChanged ( boolean hasWindowFocus ) { super . onWindowFocusChanged ( hasWindowFocus ) ; if ( WAS_VISIBLE ) onViewScreenVisibilityChanged ( hasWindowFocus ) ; }
public void stop ( boolean notifyListeners ) { mRemoteMediaClient . removeListener ( mRemoteMediaClientListener ) ; mState = PlaybackStateCompat . STATE_STOPPED ; if ( notifyListeners && mCallback != null ) { mCallback . onPlaybackStatusChanged ( mState ) ; } }
public BaseBaseAdapter ( ) { BUS = EventBus . getDefault ( ) ; BUS . register ( this ) ; }
public void onFailure ( @ Nonnull ApolloException e ) { Log . e ( TAG , e . getLocalizedMessage ( ) ) ; }
public void onReceive ( final Context context , final Intent intent ) { VibratorManager . this . onRingerModeChanged ( ) ; }
public void onVerificationRequestFailed ( int code ) { runOnUiThread ( ( ) -> { setRequestingVerificationState ( false ) ; ApiErrorDialogHelper . create ( this , code ) . show ( ) ; } ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mCallbacks = null ; }
private void initLedPrefs ( ) { binding . ledPrefs . setOnClickListener ( mLedClick ) ; binding . ledPrefs . setChecked ( mPrefs . isLedEnabled ( ) ) ; }
public void onMapReady ( GoogleMap googleMap ) { mMap = googleMap ; makeViewWork ( ) ; if ( account != null && password != null ) { mHandler . postDelayed ( mRunnable , 3000 ) ; } }
public void constructorShouldThrowIfSizesMismatch ( ) throws Exception { new PieChart ( plot , new double [ ] { 1 , 1 } , new ColorWrap [ ] { ColorWrap . RED } ) ; }
public void onTokenRefresh ( ) { String refreshedToken = FirebaseInstanceId . getInstance ( ) . getToken ( ) ; AHC . logd ( TAG , "Refreshed token : " + refreshedToken ) ; AHC . sendRegistrationToServer ( refreshedToken ) ; }
public Set < String > getNeededVars ( ) { return this . neededVars ; }
public void onShowExplanation ( @ StringRes int resourceId ) { Toast . makeText ( getActivity ( ) , getString ( resourceId ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onResume ( ) { super . onResume ( ) ; getPresenterDelegate ( ) . onResume ( ) ; }
public PrimaryEditTextView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; defineUi ( context , attrs , defStyleAttr ) ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser && mArticleAdapter != null ) { mArticleAdapter . notifyDataSetChanged ( ) ; } }
public PushNotificationRow ( @ NonNull final Context context ) { this ( context , null ) ; }
public SerialBuffer ( boolean version ) { writeBuffer = new SynchronizedBuffer ( ) ; if ( version ) { readBuffer = ByteBuffer . allocate ( DEFAULT_READ_BUFFER_SIZE ) ; } else { readBuffer_compatible = new byte [ DEFAULT_READ_BUFFER_SIZE ] ; } }
public PhotoSizeEntity setO ( String o ) { this . o = o ; return this ; }
public TextKeyframeAnimation ( List < ? extends Keyframe < DocumentData >> keyframes ) { super ( keyframes ) ; }
public void onListenerConnected ( ) { super . onListenerConnected ( ) ; init ( ) ; }
private void handleAndSendChangeInternal ( @ NonNull final String what ) { handleChangeInternal ( what ) ; sendChangeInternal ( what ) ; }
public void updatePluginConfigTest ( ) { Integer id = null ; }
public static double getMoveTimeout ( ) { return RemixedDungeon . MOVE_TIMEOUTS [ limitTimeoutIndex ( moveTimeout ( ) ) ] ; }
public void testPreConditions ( ) { assertTrue ( mPreview != null ) ; }
public void onFailure ( String errMsg ) { progress . cancel ( ) ; Toast . makeText ( getDialog ( ) . getContext ( ) , "failed : " + errMsg , Toast . LENGTH_LONG ) . show ( ) ; }
public void exitMap ( PositionData from ) { if ( preferences . containsKey ( KEY_EXITS + from . getMapKey ( ) ) ) { requestMapChange ( MapUtils . getTilePosition ( getString ( KEY_EXITS + from . getMapKey ( ) , null ) ) , from ) ; } }
private static boolean findAccount ( List < Account > accounts , String id ) { for ( Account account : accounts ) { if ( account . getId ( ) . equals ( id ) ) { return true ; } } return false ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { getPreferenceManager ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( listener ) ; }
public Object getItem ( int position ) { return mReactions != null ? mReactions . get ( position ) : null ; }
public ListeDeCours Func ( ) throws java . lang . Exception { return listeCours ( codeAccesUniversel , motPasse ) ; }
public void setTextSize ( int textSizePx ) { this . tabTextSize = textSizePx ; updateTabStyles ( ) ; }
private void initializeActivity ( ) { mNewsListPresenter = createPresenter ( ) ; swipeToRefresh . setOnRefreshListener ( this ) ; swipeToRefresh . setColorSchemeResources ( R . color . colorAccent , R . color . colorPrimary ) ; }
public WeatherDataChangeHandler ( List < IWeatherChangeDataListener > weatherChangeDataListeners ) { super ( ) ; this . weatherChangeDataListeners = weatherChangeDataListeners ; }
public GroupsLoadAsyncTask ( String groupName , Context contex , GroupsResponse GroupResponse ) { context = contex ; GroupName = groupName ; GroupResponseDelegate = GroupResponse ; }
public void onDrawerClosed ( View view ) { AndroidUtils . invalidateOptionsMenuHC ( TorrentViewActivity . this ) ; actionModeBeingReplacedDone ( ) ; }
public void onRefresh ( ) { mListCharacterAdapter . removeAll ( ) ; mListPresenter . getCharacters ( ) ; }
public Long getTopMiners ( ) { return topMiners ; }
public boolean hasSameContext ( Context context ) { return context == null && this . context == null || context != null && this . context . equals ( context ) ; }
public UnsignedInt ( ) { super ( 4 , true ) ; }
public FingerprintDialog fingerprintErrorColor ( int fingerprintErrorColor ) { this . fingerprintView . fingerprintErrorColor ( fingerprintErrorColor ) ; return this ; }
public void onSuccess ( BingWallpaperImage image ) { setText ( context , image ) ; }
private void onFetchProgress ( int phase , int done , int total ) { uploadProgress . setIndeterminate ( false ) ; uploadProgress . setProgress ( done ) ; uploadProgress . setMax ( total ) ; }
public String defenseVerb ( ) { if ( defenceVerb != null ) { return defenceVerb ; } return Game . getVars ( R . array . Char_StaDodged ) [ gender ] ; }
public void clear ( ) { dirty . clear ( ) ; drawFactory . clear ( ) ; pm = null ; mFilename = null ; loaded = false ; passwordEncodingError = false ; }
public void setKat ( int kat ) { this . _kat = kat ; }
public void onClick ( View view ) { if ( playing ) { onPlayStopListener . onStopClicked ( ) ; } else { onPlayStopListener . onPlayClicked ( ) ; } }
public String getCommentsAsString ( ) { if ( comments == null ) { return null ; } else { return StreamSupport . stream ( comments ) . collect ( Collectors . joining ( ) ) ; } }
private void init ( Context context ) { setText ( StringUtil . toInstruction ( context , null , getText ( ) . toString ( ) ) ) ; }
public void setList ( List < Budget > listBudget ) { this . listBudget = listBudget ; expandeds = new boolean [ listBudget . size ( ) ] ; notifyDataSetChanged ( ) ; }
public float getChildProgress ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException , FitnessException { if ( this . isDemoMode ) { return 1f ; } return getPersonProgress ( Person . ROLE_CHILD , dateToVisualize ) ; }
public void requestStoragePermission ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "requestStoragePermission" ) ; main_activity . requestStoragePermission ( ) ; }
public void onErrorResponse ( ) { loginView . showToast ( "Failed to fetch visit type" , ToastUtil . ToastType . ERROR ) ; }
public static View getSwipeableContainerView ( RecyclerView . ViewHolder vh ) { if ( vh instanceof SwipeableItemViewHolder ) { return getSwipeableContainerView ( ( SwipeableItemViewHolder ) vh ) ; } else { return null ; } }
public int getId ( ) { return id ; }
public static boolean supported ( ) { try { return getMinFrees ( ) . size ( ) > 0 ; } catch ( NullPointerException ignored ) { return false ; } }
public void onLoadFinished ( @ NonNull Loader < Cursor > loader , Cursor cursor ) { hideProgressBarIfAllowed ( ) ; listAdapter . changeCursor ( cursor ) ; checkPreviouslyCheckedItems ( ) ; toggleButtonLabel ( findViewById ( R . id . toggle_button ) , listView ) ; }
public static String buildBackdropURL ( String BackdropPath ) { return "http : }
public com . google . protobuf . Parser < Extension > getParserForType ( ) { return PARSER ; }
private void runTask_checkWaitingNetwork ( String msg , UUID id ) { runTask ( new DownloadThread ( context , repo , id ) ) ; DownloadInfo info = repo . getInfoById ( id ) ; assertEquals ( msg , StatusCode . STATUS_WAITING_FOR_NETWORK , info . statusCode ) ; }
public void onFailedDownload ( String fileName ) { updateButtonState ( false ) ; }
public boolean isSingleImagePicker ( ) { return this == FEATURED_IMAGE_PICKER || this == GRAVATAR_IMAGE_PICKER || this == SITE_ICON_PICKER || this == GUTENBERG_SINGLE_IMAGE_PICKER || this == GUTENBERG_SINGLE_FILE_PICKER ; }
public void moveItem ( int fromPos , int toPos ) { final Member model = memberList . remove ( fromPos ) ; memberList . add ( toPos , model ) ; notifyItemMoved ( fromPos , toPos ) ; }
public int execute ( ) throws LuaException { L . pushString ( Integer . toString ( ( ( int ) Window . this . parent . getTitleBarHeight ( ) ) ) ) ; return 1 ; }
public static void setUploadToRunkeeper ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_RUNKEEPER , value ) . commit ( ) ; }
public PlottableSimulationResult ( ArrayList < int [ ] > nReviews , double [ ] [ ] nInState ) { this . nReviews = nReviews ; this . nInState = nInState ; }
public void readEntity ( Cursor cursor , CurrentRssItemView entity , int offset ) { entity . setId ( cursor . getLong ( offset ) ) ; entity . setRssItemId ( cursor . getLong ( offset + 1 ) ) ; }
private long calculateAmountInAccountCurrency ( Transaction parent , long amount ) { double rate = getRateFromParent ( parent ) ; return ( long ) ( rate*amount ) ; }
public int getCount ( ) { return mCache . size ( ) ; }
public void onStart ( ) { super . onStart ( ) ; if ( needsPermissions ( ) ) { CheckBoxPreference allowPreference = ( CheckBoxPreference ) findPreference ( "pref_allow_webrtc" ) ; allowPreference . setChecked ( false ) ; } }
public void setIsSoundOn ( boolean sound ) { isSoundOn = sound ; }
public View getRootLayout ( ) { return ( ( MainActivity ) getActivity ( ) ) . container ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_app_card , parent , false ) ) ; }
public void setTime ( Double time ) { this . time = time ; }
public RangeIntegerWidget ( Context context , QuestionDetails prompt ) { super ( context , prompt ) ; setUpWidgetParameters ( ) ; }
public static Boolean isGrblSettingMessage ( final String response ) { return SETTING_PATTERN . matcher ( response ) . find ( ) ; }
public static String getFilepath ( String title , String tag ) { return "file : + Utils . getSavDirForTag ( tag ) + Utils . sanitize ( title ) + " . html" ; }
public void setReadyListener ( @ Nullable OnViewsReadyListener < ID > listener ) { mReadyListener = listener ; }
public void didChangedLoadProgress ( FileLoadOperation operation , float progress ) { if ( delegate != null ) { delegate . fileLoadProgressChanged ( arg1 , progress ) ; } }
public void setAddedMembers ( String [ ] members ) { mAdded = members ; }
public void onNextClick ( View v ) { loadDay ( timeUtil . addDays ( day , 1 ) ) ; }
private static boolean isCaregiverBatteryLevelLow ( FitnessSyncInfo fitnessSyncInfo ) { return fitnessSyncInfo . getCaregiverDeviceInfo ( ) . getBtBatteryLevel ( ) <= MIN_BATTERY_LEVEL ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , PDF_14 . class ) ; startActivity ( i ) ; }
public void delete ( Track track ) { mAbstractSharedPreferences . putBoolean ( "sorting" , false ) ; new removeTrack ( mTrackDao ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR , track ) ; }
private void processEndOfStream ( ) throws ExoPlaybackException { if ( codecReinitializationState == REINITIALIZATION_STATE_WAIT_END_OF_STREAM ) { releaseCodec ( ) ; maybeInitCodec ( ) ; } else { outputStreamEnded = true ; onOutputStreamEnded ( ) ; } }
public void startAction ( @ NonNull Activity activity ) { activity . startActivity ( new Intent ( activity , SplashActivity . class ) ) ; }
public void onProviderEnabled ( String provider ) { gpsStatus = GPS_SEARCHING ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_FIX ) ; }
private void navigateToHome ( ) { synch . abort ( ) ; saveGame ( ) ; NavUtils . navigateUpFromSameTask ( this ) ; }
public LiveData < List < PinnableCalendarEvent >> getEventsBeforeDate ( @ NonNull List < DataSource > dataSources , @ NonNull Date lastDate ) { return calendarDao . getEventsBeforeDate ( dataSources , lastDate ) ; }
public static double toBaseType ( final double value , Type type ) { return ( type == Type . LINEAR ) ? value : FastMath . pow ( 10 . 0 , value ) ; }
public void handleEvent ( DcEvent event ) { if ( event . getId ( ) == DcContext . DC_EVENT_CONTACTS_CHANGED ) { restartLoader ( ) ; } }
public void onAnimationEnd ( Animator animation ) { mLoginFormView . setVisibility ( show ? View . GONE : View . VISIBLE ) ; }
public Item ( ) { address = null ; amount = 0L ; comment = null ; }
public void enablePrediction ( boolean enable ) { if ( enable ) { predictionView . setVisibility ( VISIBLE ) ; } else { predictionView . setVisibility ( INVISIBLE ) ; } this . showPrediction = enable ; }
public DataSource ( String locator ) { this . locator = locator ; }
public void onClick ( DialogInterface arg0 , int arg1 ) { Editor edit = settings . edit ( ) ; edit . putString ( PREF_PORT , transferText . getText ( ) . toString ( ) ) ; edit . commit ( ) ; }
public String getKat ( ) { return this . _kat ; }
public QoSTestResultEnum getTestType ( ) { return QoSTestResultEnum . WEBSITE ; }
public List < DeckDueTreeNode > deckDueTree ( ) { return deckDueTree ( null ) ; }
public static String formUrlPic ( @ NonNull String img_url ) { return URL_PROFILE_PICS + img_url ; }
public static < F extends DatafeedFragment > DatafeedFragmentTestController < F > getController ( F fragment ) { return new DatafeedFragmentTestController <> ( fragment ) ; }
public ObservableField < List < Category >> getCategories ( ) { return categories ; }
public ModelLoader < DatabaseEntry , ByteBuffer > build ( @ NonNull MultiModelLoaderFactory unused ) { return new IconLoader ( ) ; }
public void onRender ( Canvas canvas , RectF plotArea , XYSeries series , FormatterType formatter , RenderStack stack ) throws PlotRenderException { drawSeries ( canvas , plotArea , series , formatter ) ; }
public void onClick ( View v ) { processDone ( ) ; }
public int getFatPercent ( ) { if ( getWeight ( ) == 0 || fat == 0 ) return 0 ; return Math . round ( fat / getWeight ( ) ) * 100 ; }
public void onServiceDisconnected ( ComponentName name ) { Log . d ( TAG , "musicConnection . onServiceDisconnected ( ) entry . " ) ; musicBound = false ; }
public List < ForecastData > getForecastModel ( ) throws IOException { List < ForecastData > forecastData = new LinkedList <> ( ) ; if ( mOpenWeatherForecastData != null ) { forecastData = populateForecastFromPojo ( forecastData ) ; } return forecastData ; }
public DataElement ( boolean bool ) { value = bool?Boolean . TRUE : Boolean . FALSE ; valueType = BOOL ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { callback . onPreferenceChanged ( R . id . nav_posts , Boolean . valueOf ( newValue . toString ( ) ) ) ; return true ; }
public String getName ( ) { return "Keyboard" ; }
public TerrainGenerator getTerrainGenerator ( SaveOptions saveOptions ) { return new BasicTerrainGenerator ( ) ; }
private void initialiseDataConnection ( ) throws SocketException { mDataConnection = new DataConnection ( mExceptionListener ) ; mDataConnection . setDataSink ( mDataSink ) ; mDataConnection . start ( ) ; }
public String onArgNotFound ( ExecutePack pack ) { MainPack info = ( MainPack ) pack ; return info . res . getString ( R . string . output_appnotfound ) ; }
public long getNumberOfPlacemarks ( ) { return NumberOfPlacemarks ; }
public int getCount ( ) { return mRealmHelper . getHourCount ( ) ; }
public static void d ( String tag , String msg , Throwable tr ) { if ( Constants . DEBUG ) { android . util . Log . d ( tag , msg , tr ) ; } }
public int getLastReview ( ) { return lastReview ; }
public SplashScreenViewModel . Factory providesSplashScreenViewModel ( SettingsProvider settingsProvider , ProjectsRepository projectsRepository ) { return new SplashScreenViewModel . Factory ( settingsProvider . getGeneralSettings ( ) , projectsRepository ) ; }
public static String dbStatusToString ( DBStatus status ) { return status == null ? null : status . getTitle ( ) ; }
public void setSort ( final UserCommentListingURL . Sort s ) { if ( mUrl . pathType ( ) == RedditURLParser . USER_COMMENT_LISTING_URL ) { mUrl = mUrl . asUserCommentListURL ( ) . order ( s ) ; } }
public boolean isMoving ( ) { return type == 2 || type == 3 || ( type > 4 && type < 9 ) ; }
public static final TimestampBound NONE = new TimestampBound ( ) { @ Override public boolean verifyTimestamp ( long timestamp ) { return false ; } } ;
public Exporter ( Collection col ) { mCol = col ; mDid = null ; }
public boolean onEditorAction ( TextView v , int actionId , KeyEvent event ) { if ( event != null && event . getKeyCode ( ) == KeyEvent . KEYCODE_ENTER ) { launchActivity ( ) ; return true ; } return false ; }
public void onStop ( ) { EventBus . getDefault ( ) . unregister ( this ) ; mDispatcher . unregister ( this ) ; super . onStop ( ) ; }
private StopRequest checkCancel ( ) { return ( Thread . currentThread ( ) . isInterrupted ( ) ? new StopRequest ( STATUS_CANCELLED , "Download cancelled" ) : null ) ; }
public void onClick ( View v ) { Tool . startApp ( v . getContext ( ) , app ) ; }
public void setSpanY ( int y ) { spanY = y ; }
public void addPlayedGame ( ) { stats [ INDEX_GAMES_NO ] ++ ; }
private void onCreateNewItem ( ) { createNewItem ( ) ; mDataManager . reload ( ) ; }
public void onClick ( View v ) { SpeedDialActionItem speedDialActionItem = getSpeedDialActionItem ( ) ; if ( mOnActionSelectedListener != null && speedDialActionItem != null && speedDialActionItem . isLabelClickable ( ) ) { mOnActionSelectedListener . onActionSelected ( speedDialActionItem ) ; } }
public String desc ( ) { return Game . getVar ( R . string . Fadeleaf_Desc ) ; }
public void onPushFailure ( ) { Log . i ( TAG , "onPushFailure" ) ; currentService . disconnect ( deviceAddress ) ; refreshViewOnError ( ) ; }
public boolean getBoolean ( String key , boolean defValue ) { return Boolean . valueOf ( this . getString ( key , Boolean . toString ( defValue ) ) ) ; }
public void startActivity ( Intent intent ) { if ( Helper . noHistory ( getContext ( ) ) ) intent . addFlags ( Intent . FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS ) ; super . startActivity ( intent ) ; }
public CustomFileObserver ( String path , Handler handler ) { super ( path ) ; this . path = path ; this . handler = handler ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "devesh . b . pharm . guide . mu" , appContext . getPackageName ( ) ) ; }
public boolean onLayoutChild ( CoordinatorLayout parent , RelativeLayout child , int layoutDirection ) { parent . onLayoutChild ( child , layoutDirection ) ; return true ; }
public void setSourcePostId ( long postId ) { this . sourcePostId = postId ; }
private boolean isNewVersion ( ) { String version = mSharedPreferences . getString ( LAST_VERSION , "" ) ; if ( version . isEmpty ( ) ) { updateChangeLogPreferences ( ) ; return true ; } else { return ! version . equals ( BuildConfig . VERSION_NAME ) ; } }
public Toaster ( LoginActivity activity ) { this . activity = activity ; }
public ScanResult [ ] newArray ( int size ) { return new ScanResult [ size ] ; }
private boolean isTimeNull ( ) { return binding . timeWidget . widgetAnswerText . getText ( ) . equals ( getContext ( ) . getString ( R . string . no_time_selected ) ) ; }
public boolean isConnected ( ) { return mConnectionState == STATE_CONNECTED ; }
public void testSyncFinishedRefreshRecycler_sameActivity ( ) { syncResultTest ( true ) ; }
public ClassPickerPreference ( Context context , AttributeSet attributeSet ) { super ( context , attributeSet ) ; setDialogLayoutResource ( R . layout . dialog_select_class ) ; }
public String desc ( ) { return Game . getVar ( R . string . Icecap_Desc ) ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; tagCreatePresenter . attachView ( tagCreateView ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new ExploreViewModel ( application , burstBlockchainService , burstPriceService , configRepository ) ; }
private String num_to_end_time ( int shift , Long shift_length , String starting_time ) { return String . valueOf ( Long . valueOf ( starting_time ) + ( shift_length * shift ) + shift_length ) ; }
public void updateButtonColor ( int stage ) { this . stage = stage ; notifyItemChanged ( stage ) ; }
public Bundle hasFeatures ( AccountAuthenticatorResponse response , Account account , String [ ] features ) throws NetworkErrorException { throw new UnsupportedOperationException ( ) ; }
private void showBackgroundSaveError ( ) { Toast . makeText ( this , R . string . AppearancePreferencesFragment_background_save_error , Toast . LENGTH_LONG ) . show ( ) ; }
public void onRecordingSuccessful ( File file ) { if ( file != null ) sendBinaryMessage ( Uri . fromFile ( file ) , AudioDialog . DEFAULT_MIME , false , AudioComponent . class ) ; }
public TutorialHolder ( View itemView , int viewType ) { super ( itemView ) ; itemView . setTag ( viewType ) ; }
public ConnectedActivity activity ( ) { return activity ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences_motion ) ; CheckBoxPreference cbPref = ( CheckBoxPreference ) findPreference ( "pref_motion_detection_enabled" ) ; cbPref . setOnPreferenceChangeListener ( this ) ; }
private void addMethodStubs ( Event event ) { CommonMocksInteractions . addDataStoreStubs ( dataStore , event ) ; CommonMocksInteractions . addGetCurrentDateStubToTimeProvider ( timeProvider , today ) ; CommonMocksInteractions . addScheduleReminderStubToEventRemindersManager ( eventRemindersManager ) ; }
public static MaterialAboutItemViewHolder getViewHolder ( View view ) { return new MaterialAboutActionItemViewHolder ( view ) ; }
public void onReceive ( Context context , Intent intent ) { Utilities . RunOnUIThread ( new Runnable ( ) { @ Override public void run ( ) { ApplicationLoader . startPushService ( ) ; } } ) ; }
public List < Poi > readByAttractionId ( long attractionId ) { return realm . where ( modelType ) . equalTo ( "attraction_id" , attractionId ) . findAll ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; int selectedItemLocalId = mAdapter . getSelectedItemLocalId ( ) ; if ( selectedItemLocalId != 1 ) { outState . putInt ( ARG_LAST_USED_BLOG_LOCAL_ID , mAdapter . getSelectedItemLocalId ( ) ) ; } }
public boolean remove ( T item ) { throwIfMerging ( ) ; return remove ( item , true ) ; }
public void setUp ( ) throws Exception { realm = Realm . getInstance ( TEST_REALM_CONFIG ) ; repository = new TodoListRepositoryImpl ( realm ) ; fillRealm ( ) ; }
private Database ( Context context ) { helper = new DatabaseOpenHelper ( context ) ; }
public final Status getStatus ( ) { return status ; }
public void setCreateDate ( Date createDate ) { this . createDate = createDate ; }
public void onPause ( ) { try { UserSubscriptions . setSubscriptions ( new CaseInsensitiveArrayList ( subs ) ) ; SettingsTheme . changed = true ; } catch ( Exception e ) { } super . onPause ( ) ; }
private void showAyahModeHighlights ( SuraAyah suraAyah , AyahTracker tracker ) { tracker . highlightAyah ( suraAyah . sura , suraAyah . ayah , HighlightType . SELECTION ) ; }
private void upgradeToVersion3 ( SQLiteDatabase db ) throws Exception { db . execSQL ( SQL . ALTER_TABLE + BooksInformationDBContract . StoredBooks . TABLE_NAME_V3 + SQL . ADD_Coulmn + BooksInformationDBContract . StoredBooks . COLUMN_COMPLETED_TIMESTAMP_V3 + SQL . TEXT ) ; }
public int getItemCount ( ) { return mBuckets . length ; }
public int getCurrentIndex ( ) throws RemoteException { return mService . get ( ) . getCurrentIndex ( ) ; }
public void notifyDataSetChanged ( ) { super . notifyDataSetChanged ( ) ; mobileValues . clear ( ) ; mobileValues = songsManager . getAllPlaylists ( ) ; }
public long id ( String name ) { return id ( name , true ) ; }
public void setColorInfoList ( ArrayList < ColorInfo > colorInfoList ) { this . colorInfoList = colorInfoList ; }
public void addDebugDevice ( Context context ) { DebugDevice debugDevice = new DebugDevice ( context ) ; cardDevices . put ( debugDevice . getID ( ) , debugDevice ) ; }
public static long weeksBetween ( String dateOne , String dateTwo ) throws ParseException { return ( daysBetween ( dateOne , dateTwo ) / 7 ) ; }
public Long execute ( SFTPClient client ) throws IOException { return client . mtime ( SFtpClientUtils . extractRemotePathFrom ( path ) ) ; }
private double sqfootToacre ( double num ) { return num * 0 . 0000230 ; }
public void setAnnotationDone ( ) { Session . setAnnotationMarked ( false ) ; enableDisableMenuItems ( ) ; }
public int compare ( AppDetail t1 , AppDetail t2 ) { return t1 . label . compareToIgnoreCase ( t2 . label ) ; }
public void onPostReplacedEvent ( PostReplacedEvent event ) { updatePost ( event . newPost ) ; }
public ArrayList < TotpModel > getModels ( ) { return models ; }
public void onResume ( ) { super . onResume ( ) ; startRemoteControl ( ) ; checkFirstRun ( ) ; }
public DatabaseHelper ( Context c ) { super ( c , DATABASE_HOME , null , 1 ) ; db = getWritableDatabase ( ) ; context = c ; }
public void unburyCardsForDeck ( ) { unburyCardsForDeck ( "all" ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; prefs = PreferenceManager . getDefaultSharedPreferences ( getContext ( ) ) ; }
public Location getItem ( int position ) { return locations . get ( position ) ; }
public void testMatchingUnitsWithIds ( ) { for ( AmountUnitType type : AmountUnitType . values ( ) ) { int id = type . getId ( ) ; assertThat ( type , equalTo ( AmountUnitType . fromId ( id ) ) ) ; } }
public FigureType getRotatedFigure ( ) { return FigureType . S_FIGURE ; }
public IBinder onBind ( Intent intent ) { stopForeground ( true ) ; changingConfiguration = false ; sendPlayingStatusBroadcast ( isPlaying ( ) ) ; return binder ; }
public boolean hasManualInput ( ) { return seIntroduceText ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_SavedGifs . TLdeserialize ( stream , constructor , exception ) ; }
public void onLoaderReset ( @ NonNull Loader < Cursor > loader ) { if ( adapter != null ) { adapter . changeCursor ( null ) ; } }
public String toString ( ) { return Utils . format ( Game . getVar ( R . string . IronKey_FromDepth ) , getDepth ( ) ) ; }
public com . coinomi . core . protos . Protos . Key . Builder addKeyBuilder ( ) { return getKeyFieldBuilder ( ) . addBuilder ( com . coinomi . core . protos . Protos . Key . getDefaultInstance ( ) ) ; }
public TotpInfo ( byte [ ] secret ) throws OtpInfoException { super ( secret ) ; setPeriod ( 30 ) ; }
public int getDrawerStyle ( ) { return getIntOfStringPref ( R . string . pref_key__drawer_style , AppDrawerController . DrawerMode . VERTICAL ) ; }
public void launchBrowser ( @ NonNull String html_url ) { try { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( html_url ) ) ) ; } catch ( Exception ignored ) { } }
public long duration ( ) throws RemoteException { return mService . get ( ) . duration ( ) ; }
public void setState ( IGlobalVariable . STATE state ) { this . state = state ; changeImageResource ( ) ; }
public List < Long > getExpandOptionlist ( ) { return expandOptionlist ; }
public void onEventMainThread ( NotificationEvents . NotificationsChanged event ) { mTabLayout . showNoteBadge ( event . hasUnseenNotes ) ; }
public void onItemRangeRemoved ( int positionStart , int itemCount ) { checkIfEmpty ( ) ; }
public void setContentView ( View _view ) { getDelegate ( ) . setContentView ( _view ) ; }
public TransactionData ( File pDirectory ) { mItems = new ArrayList <> ( ) ; mItemsHaveBeenAdded = false ; read ( pDirectory ) ; }
public boolean isFailedAuth ( int failed ) { return failed == FAILED_AUTH || failed == FAILED_AUTH_REQUIRED || failed == FAILED_AUTH_CREDENTIALS_REQUIRED || failed == FAILED_AUTH_CREDENTIALS_FAILED ; }
public void setUp ( ) throws Exception { activity = Robolectric . setupActivity ( ParsingActivity_ . class ) ; }
public void onHide ( Parcelable p ) { findViewById ( R . id . fab_add ) . startAnimation ( fab_out ) ; findViewById ( R . id . fab_remove ) . startAnimation ( fab_out ) ; }
public static RecentFileHistory getFileHistory ( ) { return fileHistory ; }
public void onDestroy ( ) { log . v ( TAG , "Fragment destroyed" ) ; thread . interrupt ( UB ) ; }
public void setAccess ( String access ) { this . access = access ; }
private void deleteEntry ( final SQLiteDatabase database , final String stringId ) { database . delete ( SongPlayCountColumns . NAME , WHERE_ID_EQUALS , new String [ ] { stringId } ) ; }
public void testSimpleParsing ( ) throws BasicModel . FieldNotDefinedException { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mRankings ) ; verify ( mEventBus ) . post ( any ( EventRankingsEvent . class ) ) ; }
public void setCaptionClassName ( String captionClassName ) { this . captionClassName = captionClassName ; }
public void onAddAudioFileClicked ( boolean allowMultipleSelection ) { mMediaPickerLauncher . showAudioFilePicker ( this , allowMultipleSelection ) ; }
public void startPreview ( ) { try { cameraCaptureSession . setRepeatingRequest ( captureRequestBuilder . build ( ) , null , backgroundHandler ) ; } catch ( CameraAccessException e ) { notifyError ( e . getLocalizedMessage ( ) ) ; } }
public java . util . List < com . google . protobuf . Any > getTokensList ( ) { if ( tokensBuilder_ == null ) { return java . util . Collections . unmodifiableList ( tokens_ ) ; } else { return tokensBuilder_ . getMessageList ( ) ; } }
public void onNotifyPresenceReceived ( final Core lc , final Friend lf ) { Lg . w ( "presence received : username = " , new FriendLogger ( lf ) ) ; }
public void setAppCustomLocation ( String newLocation ) { mPerInstallationPrefs . edit ( ) . putString ( Constants . PREF_APP_LOCATION , newLocation ) . apply ( ) ; }
public void testToLocusWaypointCount ( ) { assertEquals ( 8 , WaypointType . values ( ) . length ) ; }
public Collection < Artist > getAllArtists ( ) { synchronized ( cache ) { return new ArrayList <> ( cache . artistsById . values ( ) ) ; } }
public void onTabSelected ( Tab tab , FragmentTransaction ft ) { if ( ! mAdded ) { ft . add ( android . R . id . content , mFragment ) ; mAdded = true ; } else { ft . attach ( mFragment ) ; } }
public void setCursorPosition ( PointF point ) { getGraphWidget ( ) . setCursorPosition ( point ) ; }
public void setResult ( Double [ ] result ) { Result = result ; }
private boolean isCustom ( ) { return TextSecurePreferences . getBooleanPreference ( getContext ( ) , customToggle , false ) ; }
private void checkLoadMore ( int position ) { if ( mCanLoadMore && ! mIsLoadingMore && position >= getItemCount ( ) - 1 && getItemCount ( ) >= ReaderConstants . READER_MAX_SEARCH_RESULTS_TO_REQUEST ) { mIsLoadingMore = true ; mListener . onLoadMore ( getItemCount ( ) - 1 ) ; } }
public static String getIslamicLibraryShamelaBooksDir ( Context context ) { String base = getIslamicLibraryBaseDirectory ( context ) ; return base == null ? null : base + File . separator + DownloadFileConstants . SHAMELA_BOOKS_DIR ; }
public void onSaveInstanceState ( Bundle outState ) { outState . putSerializable ( "presenter" , mNewGoalPresenter . save ( ) ) ; super . onSaveInstanceState ( outState ) ; }
public static boolean network_tor ( final Context context , final SharedPreferences sharedPreferences ) { torEnabled = getBoolean ( R . string . pref_network_tor_key , false , context , sharedPreferences ) ; return torEnabled ; }
public void getThemeDARKTest ( ) throws Exception { AppTheme apptheme = AppTheme . getTheme ( AppTheme . DARK_INDEX ) ; assertEquals ( AppTheme . DARK , apptheme ) ; }
public WeekPresenter getPresenter ( String tag ) { return mPresenterMap . get ( tag ) ; }
public Contribution getContributionWithFileName ( String uri ) { List < Contribution > contributionWithUri = contributionDao . getContributionWithTitle ( uri ) ; if ( ! contributionWithUri . isEmpty ( ) ) { return contributionWithUri . get ( 0 ) ; } return null ; }
public void run ( ) { Logger . log ( err ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersListView , 0 , null ) ; return super . onInterceptTouchEvent ( event ) || result ; }
public static double addMileage ( List < Run > runs , Distance . Unit unit ) { double sum = 0 ; for ( Run r : runs ) { sum += r . getDistance ( unit ) ; } return sum ; }
public void deleteUserTest ( ) { Integer id = null ; }
public void bind ( @ NonNull LoginView view ) { super . bind ( view ) ; App . getApplication ( ) . getAppComponent ( ) . inject ( this ) ; }
private void onNewMessage ( String dialogId , Message message ) { boolean isUpdated = dialogsAdapter . updateDialogWithMessage ( dialogId , message ) ; if ( ! isUpdated ) { } }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( EXTRA_RRULE , rrule . toIcal ( ) ) ; }
public void selected ( File selection ) { addDir ( selection ) ; populateBooks ( ) ; }
public void onChildAdded ( DataSnapshot dataSnapshot , String s ) { Log . d ( "Child listener" , "new child was added to hosted ! " ) ; getEvent ( dataSnapshot . getKey ( ) , eAdapterHosted ) ; }
public void restartLauncher ( ) { execCommandInternally ( ShellCommandHelper . getForceStopHuamiLauncher ( ) ) ; FirebaseAnalytics . getInstance ( this ) . logEvent ( FirebaseEvents . SHELL_COMMAND_RESTART_LAUNCHER , null ) ; }
public void movePlaneDownwards ( ) { m_PlayerBoard . movePlaneDownwards ( ) ; }
public DataListPreference ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; }
public double calculateAverageVelocity ( ) { double res = 0 . 0 ; for ( Atom a : atoms ) { res += a . velocity . mod ( ) / atoms . size ( ) ; } return res ; }
public String desc ( ) { return Game . getVar ( R . string . WandOfFirebolt_Info ) ; }
public void setReward ( Long reward ) { this . reward = reward ; }
private void givenNetwork ( final int connectivityManagerType ) { new Expectations ( ) { { mNetworkInfo . getType ( ) ; result = connectivityManagerType ; } } ; }
public AboutBuilder addEmailLink ( String email ) { return addLink ( R . mipmap . email , R . string . email , util . sendEmail ( email , null , null ) ) ; }
public CampaignView ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( context ) ; }
public final static String mbAddSl ( String path ) { if ( ! str ( path ) ) return "/" ; return path . charAt ( path . length ( ) - 1 ) == '/' ? path : path + "/" ; }
private void onOverrideAccount ( Account account , int path ) { new OverrideAccountTask ( getBaseApplication ( ) , mChain , account , this , mIsNewBip44 ) . execute ( "" + path , mEntropy , "" + mWordSize ) ; }
public void onDestroy ( ) { cancelQuitAlert ( ) ; if ( mBroadcastControlReceiver != null ) { unregisterReceiver ( mBroadcastControlReceiver ) ; mBroadcastControlReceiver = null ; } unregisterComponentCallbacks ( mComponentCallback ) ; stopService ( ) ; }
public static com . coinomi . core . protos . Protos . DeterministicKey parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public ArrayList < DeckConfig > allConf ( ) { return new ArrayList <> ( mDconf . values ( ) ) ; }
private void setDatabaseCreated ( ) { mIsDatabaseCreated . postValue ( true ) ; }
public TouchInterceptFrameLayout getTouchInterceptFrameLayoutByTag ( ) { return ( TouchInterceptFrameLayout ) getRootView ( ) . findViewWithTag ( TouchInterceptFrameLayout . TAG ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; listView = null ; captionView = null ; if ( getDialog ( ) != null ) { getDialog ( ) . dismiss ( ) ; } }
public View onCreateView ( LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { binding = FragmentNoteEditBinding . inflate ( inflater , container , false ) ; return binding . getRoot ( ) ; }
public Task < ResultWidgets > then ( @ NonNull Task < TransportService > task ) throws Exception { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_WIDGETS , Transport . REQUEST_WIDGETS , widgetsData ) ; }
public boolean isItemEnabled ( Track track ) { return mRewardManager . isTrackUnlocked ( track . getId ( ) ) ; }
public Loader < String [ ] > onCreateLoader ( int id , Bundle args ) { return new StickerLoader ( getActivity ( ) , assetDirectory ) ; }
public State ( Status status , Throwable error ) { this . status = status ; this . error = error ; }
private StopRequest writeToDatabaseOrCancel ( ) { return repo . updatePiece ( piece ) > 0 ? null : new StopRequest ( STATUS_CANCELLED , "Download deleted or missing" ) ; }
public void confirmSignup ( ) { waitForElementToBeDisplayed ( R . id . nav_me ) ; }
public void reverseSort ( SortComparator < Crop > comparator ) { Collections . sort ( crops , comparator . getComparator ( ) ) ; Collections . reverse ( crops ) ; adapter . setAvailableCrops ( crops ) ; adapter . notifyDataSetChanged ( ) ; }
public static void onUpdate ( ) { Utilities . stageQueue . postRunnable ( new Runnable ( ) { @ Override public void run ( ) { MessagesController . getInstance ( ) . updateTimerProc ( ) ; } } ) ; }
public Double getPreferredMaxPosition ( ) { LocalDate date = new LocalDate ( year , 12 , 31 ) . plusDays ( 1 ) ; LogUtil . INSTANCE . d ( TAG , "Preferred yearly max : %s" , date ) ; return dateToPosition ( date ) - 1 ; }
public void accept ( Throwable e ) throws Exception { Log . e ( TAG , "loadWebApiContent : " , e ) ; mView . showLoadingView ( false ) ; mView . showLoadingError ( true ) ; }
private String formatDuree ( ) { Period duration = new Period ( dateDebut , dateFin ) ; return getString ( R . string . dureeXmois , PeriodFormat . wordBased ( ) . print ( duration ) ) ; }
public void run ( ) { rescanProgressBar . setVisibility ( View . GONE ) ; rescanProgressBarState . setVisibility ( View . GONE ) ; rescan . setImageDrawable ( getResources ( ) . getDrawable ( R . drawable . fs_scan_start48 ) ) ; }
public void setO3 ( int o3 ) { this . o3 = o3 ; }
public void onCreate ( SQLiteDatabase sqLiteDatabase ) { Log . d ( TAG , "onCreate called" ) ; sqLiteDatabase . execSQL ( CREATE_TABLE_SEARCH_HISTORY ) ; sqLiteDatabase . execSQL ( CREATE_TABLE_USER ) ; }
public int getDrops ( ) { return drops ; }
public < T > FindExecutor findLastAsync ( Class < T > modelClass ) { return findLastAsync ( modelClass , false ) ; }
public void whenChangedKeyIsFormUpdateMode_schedulesUpdates ( ) { handler . onSettingChanged ( "projectId" , "anything" , GeneralKeys . KEY_FORM_UPDATE_MODE ) ; verify ( formUpdateScheduler ) . scheduleUpdates ( "projectId" ) ; }
private void clearArrays ( ) { activeSensors . clear ( ) ; listenedSensors . clear ( ) ; }
public void onAnimationEnd ( Object animation ) { if ( animator != null && animator . equals ( animation ) ) { animator = null ; if ( ! checked ) { setBackgroundColor ( 0 ) ; } } }
public void onResponse ( Call call , Response response ) { if ( response . isSuccessful ( ) ) { User . activatePremium ( ) ; } else { } UIHelper . removeLoadSpinner ( ) ; }
public static boolean isOldDirectoriesExists ( Context context ) { String oldPath = getIslamicLibraryBaseDirectory ( context ) + File . separator + DATABASE_FULL_NAME ; return new File ( oldPath ) . exists ( ) ; }
public void onRefresh ( ) { if ( vmId != null && snapshotId != null ) { snapshotFacade . syncOne ( new ProgressBarResponse < Snapshot > ( this ) , snapshotId , vmId ) ; } }
public void readParams ( AbstractSerializedData stream , boolean exception ) { id = stream . readInt64 ( exception ) ; }
public void onClick ( DialogInterface dialog , int which ) { Lesson oldLesson = mDataDb . getItem ( ( int ) view . getTag ( ) , mAdmissionPercentageMetaId ) ; deleteLessonAnimated ( oldLesson ) ; }
public static boolean isBinaryFormat ( String filename ) { String mime = getMimeTypeFor ( filename ) ; return mime != null && ! mime . startsWith ( "text/" ) && ! mime . endsWith ( " + xml" ) ; }
private void bindViews ( MovieViewHolder holder , int position ) { Movie movie = mMovies . get ( holder . getAdapterPosition ( ) ) ; loadImagePoster ( holder , movie . getMovieImagePath ( ) ) ; holder . movieTitle . setText ( movie . getOriginalTitle ( ) ) ; }
public ScaleTweener ( Visual visual , PointF scale , float time ) { super ( visual , time ) ; this . visual = visual ; start = visual . Scale ( ) ; end = scale ; }
public static void setUp ( ) throws ExecutionException , InterruptedException { mAppContext = InstrumentationRegistry . getTargetContext ( ) ; OstSdk . init ( mAppContext , "" ) ; new OstSecureKeyModelRepository ( ) . deleteAllSecureKeys ( ) . get ( ) ; }
public void onProgress ( final int state ) { log . v ( TAG , "isuLogin | progress | state = " , state ) ; }
public ExtendedDataInputStream ( InputStream in ) { super ( in ) ; }
public File getStorageRoot ( ) { return Helper . getStorageRoot ( getApplicationContext ( ) ) ; }
public TarHelperTask changePath ( String path , boolean addGoBackItem , OnAsyncTaskFinished < ArrayList < CompressedObjectParcelable >> onFinish ) { return new TarHelperTask ( context , filePath , path , addGoBackItem , onFinish ) ; }
public static void debug ( String s ) { if ( Environment . DEBUG ) { Ln . e ( s ) ; } }
public void onError ( Exception e ) { getImageByPicasso ( albumIds , imageView , i + 1 , max ) ; }
public int getCurrentTimeSecond ( ) { return currentTimeSecond ; }
public void hideProgressBar ( ) { progressBar . setVisibility ( View . GONE ) ; }
public void setIvl ( int ivl ) { this . ivl = ivl ; }
