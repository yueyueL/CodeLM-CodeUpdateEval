public static synchronized DevicesRepository getRepository ( @ NonNull Context context , @ NonNull DevicesServiceApi devicesServiceApi ) { return new APIDeviceProviderRepository ( devicesServiceApi , context ) ; }
public ComputerParcelable createFromParcel ( Parcel in ) { return new ComputerParcelable ( in ) ; }
public String asString ( List < SelectChoice > items ) { return Joiner . on ( " , " ) . join ( FluentIterable . from ( items ) . transform ( item -> item . getValue ( ) ) ) ; }
public void onDestroy ( ) { presenter . onDestroy ( ) ; super . onDestroy ( ) ; }
public void setSurfaceTextureSize ( int width , int height ) { surfaceWidth = width ; surfaceHeight = height ; Intro . onSurfaceChanged ( width , height , Math . min ( surfaceWidth / 150 . 0f , surfaceHeight / 150 . 0f ) , 0 ) ; }
public static void e ( String tag , String message , Exception e ) { if ( D ) { Log . d ( TAG + tag , message + e . getLocalizedMessage ( ) ) ; } }
public GoalFeed ( ) { guid = "" ; wager = 0 ; goalCompleteResult = Goal . GoalCompleteResult . None ; createdUsername = "" ; upvoteCount = 1 ; hasVoted = false ; }
public void onClickDisabledCurrency ( String clickedDisabledCurrencyName , int donationCode ) { if ( getActivity ( ) != null ) { DonateDialog . getInstance ( donationCode ) . show ( getActivity ( ) . getSupportFragmentManager ( ) , DonateDialog . TAG ) ; } }
private PreferenceUtil ( @ NonNull final Context context ) { mPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public void setContext ( Context context ) { this . mContext = context ; }
public static boolean remindersForScheduledEnabled ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_use_reminders_for_scheduled_times ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_use_reminders_for_scheduled_times ) ) ; }
public void centerOnDomainOrigin ( @ NonNull Number origin ) { centerOnDomainOrigin ( origin , null , BoundaryMode . AUTO ) ; }
public void exactly_matching_pitch_is_displayed ( ) throws IOException { isDisplayedCorrectly ( R . drawable . exact , "exact" , new PitchDifference ( E4 , 0 ) ) ; }
public SearchBar ( Context context ) { super ( context ) ; init ( ) ; }
public void writeEvents ( List < AuditEvent > auditEvents ) { AuditEvent [ ] auditEventArray = auditEvents . toArray ( new AuditEvent [ 0 ] ) ; saveTask = new AuditEventSaveTask ( file , isLocationEnabled , isTrackingChangesEnabled , isUserRequired , isTrackChangesReasonEnabled ) . execute ( auditEventArray ) ; }
public BaseEntity call ( ) throws Exception { return storageLogic . getRestrictEntity ( restriction ) ; }
public int getItemCount ( ) { return birthdays . size ( ) ; }
public GestureControllerForPager getController ( ) { return controller ; }
public RecyclerView . Adapter getAdapter ( ) { return mAdapter ; }
private String getTitle ( ) { String title ; if ( mIsNew ) title = "New admission counter" ; else { title = "Change " + mDb . getItem ( mAdmissionCounterId ) . name ; } return title ; }
private MessageFilterOptions getFilterOptions ( ) { return mMessageFilterOptions ; }
public String buildTitle ( ) { if ( modifier != null ) return modifier . getTitle ( ) ; else return subject ; }
private void notifyChange ( @ NonNull final String what ) { handleAndSendChangeInternal ( what ) ; sendPublicIntent ( what ) ; }
public NotePlace ( long bookId ) { this . bookId = bookId ; place = Place . UNSPECIFIED ; }
public FicheEmploye Func ( ) throws Exception { return GetFicheData ( Id ) ; }
public void onQrCodeRead ( String ipAddress ) { this . ipAddress = ipAddress ; getView ( ) . stopQrCodeScanner ( ) ; getView ( ) . showQrCodeScanResult ( ipAddress ) ; }
public void onClick ( View v ) { Intent i = new Intent ( getActivity ( ) , BookListActivity . class ) ; i . putExtra ( BookListActivity . EXTRA_BOOK_GROUP_TYPE , BookGroup . BookGroupType . TO_READ ) ; startActivity ( i ) ; }
public static int getPaddingWithLineNumbers ( Context context , float fontSize ) { return ( int ) PixelDipConverter . convertDpToPixel ( fontSize * 2f , context ) ; }
public float getProgress ( ) { return animator . getAnimatedValueAbsolute ( ) ; }
public int getHighlights ( ) { return muted ? 0 : highlights ; }
public void cut ( FileHolder tbc ) { ArrayList < FileHolder > tbcl = new ArrayList <> ( ) ; tbcl . add ( tbc ) ; cut ( tbcl ) ; }
public static Builder newBuilder ( com . openwallet . core . protos . Protos . PeerAddress prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onClick ( View view ) { DrawerLayout layout = findViewById ( R . id . drawer_layout ) ; layout . openDrawer ( GravityCompat . START ) ; }
public void onRedditDataChange ( final String thingIdAndType ) { HANDLER . sendMessage ( Message . obtain ( HANDLER , HANDLER_REQUEST_COMMENT_CHANGED , this ) ) ; }
public void saveMacAddress ( String macAdress , String macAddressName ) { SharedPreferences . Editor editor = androidSharedPreferences . edit ( ) ; editor . putString ( OW_MAC_ADDRESS , macAdress ) ; editor . putString ( OW_MAC_NAME , macAddressName ) ; editor . commit ( ) ; }
public void onImageSettingsRequested ( EditorImageMetaData editorImageMetaData ) { MediaSettingsActivity . showForResult ( this , mSite , editorImageMetaData ) ; }
public void onClick ( View v ) { parentFragment . onClickSpecialButton ( Constants . COS ) ; }
public static String printHeader ( ) { return "Time\tReq_Duration\tConn_Duration\tDiscovery_Duration\tSetup_Duration\tSensors\tStatus" ; }
public @ Nullable CharSequence getTitle ( ) { return title ; }
public void setPhotoUrl ( @ NonNull String photoUrl ) { this . photoUrl = photoUrl ; }
public boolean onNavigationItemSelected ( MenuItem menuItem ) { MenuUtils . selectDrawerItem ( menuItem , mDrawer , BaseActivity . this , BaseActivity . this ) ; return false ; }
private BookmarkViewModel ( @ NonNull final Application application , final boolean addHeader ) { super ( application ) ; mAddHeader = addHeader ; }
public void setContactJid ( final Jid jid ) { this . contactJid = jid ; }
public void run ( ) { task . execute ( ) ; }
public boolean isChecked ( ) { return Settings . useOfflineMapAPI ( ) ; }
public void setRetries ( int retries ) { this . mRetries = retries ; }
public void onFavoritesButton ( View view ) { if ( view . isSelected ( ) ) { favoritesRepository . removeFromFavorites ( movieEntity ) ; view . setSelected ( false ) ; } else { favoritesRepository . addToFavorites ( movieEntity ) ; view . setSelected ( true ) ; } }
public void showResults ( @ NonNull List < Word > words ) { recyclerView . setAdapter ( new WordsRecyclerAdapter ( words , presenter ) ) ; }
public int launcherIcon ( ) { return R . mipmap . ic_launcher_round ; }
public void onGainedAudioFocus ( ) { audioFocus = AudioFocus . Focused ; if ( State . Playing == state ) { configAndStartMediaPlayer ( false ) ; } }
public static List < Song > getRecentlyPlayedTracks ( @ NonNull Context context ) { return SongLoader . getSongs ( makeRecentTracksCursorAndClearUpDatabase ( context ) ) ; }
public void setSlotType ( String slotType ) { this . slotType = slotType ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( ClearCacheEvent . UNIVERSITY ) ) { return ; } uBuildings = null ; }
public void openFileChooser ( ValueCallback < Uri > uploadMsg , String acceptType , String capture ) { mUIController . openFileChooser ( uploadMsg ) ; }
public boolean isEnded ( ) { return inputEnded && endBufferSize == 0 && outputBuffer == EMPTY_BUFFER ; }
public static WordGroupType getTypeByKey ( int key ) { for ( WordGroupType type : values ( ) ) { if ( type . key == key ) return type ; } return null ; }
public void getRecentRefreshTime ( ) { SharedPreferences rates = CURRENT_CONTEXT . getSharedPreferences ( PREFS_FILE , PREFS_MODE ) ; lastRefreshRate = rates . getString ( lastRefreshOffline , "unknown" ) ; }
private void resetAndFindNewRestaurant ( ) { if ( restaurantFetcher . getLocation ( ) == null ) { locationManager . fetchCurrentLocation ( ) ; } else { restaurant = null ; closingHourView . turnOnSkeletonLoading ( ) ; turnOnSkeletonLoading ( ) ; restaurantFetcher . fetchRestaurant ( this ) ; } }
public void onInitializeAccessibilityNodeInfo ( AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( info ) ; info . setClassName ( "android . fakewidget . EditText" ) ; if ( hintLayout != null ) info . setContentDescription ( hintLayout . getText ( ) ) ; }
public void onBindViewHolder ( @ NonNull MyViewHolder holder , int position ) { holder . textView . setText ( "Item " + position ) ; }
public void setOnSettingsChangeListenerShouldCallAll ( ) { verify ( mSettingsChangeListener , times ( 2 ) ) . onSettingsChange ( anyInt ( ) , anyInt ( ) , anyBoolean ( ) , anyBoolean ( ) , anyBoolean ( ) ) ; }
public void setCategory ( @ Nullable String category ) { mCategory = category ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( new TextView ( parent . getContext ( ) ) ) ; }
public VideoSlide ( Context context , Uri uri , long dataSize ) { super ( context , constructAttachmentFromUri ( context , uri , MediaUtil . VIDEO_UNSPECIFIED , dataSize , 0 , 0 , MediaUtil . hasVideoThumbnail ( uri ) , null , false , false ) ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "theredspy15 . ltecleanerfoss" , appContext . getPackageName ( ) ) ; }
public void onClick ( View view ) { resetValues ( ) ; inductanceMultiplier ( thirdColor ) ; }
public void onCreate ( ) { LogUtil . i ( TAG , "Service created . " ) ; AsrApplication . getApplicationComponent ( this ) . inject ( this ) ; }
public int hashCode ( ) { return Objects . hash ( appid , date , extras , id , message , priority , title ) ; }
public InputSearchManager ( Context context , LoaderManager loaderManager ) { super ( context , loaderManager ) ; loaderManager . restartLoader ( ManagerUtils . ID_SEARCH_LOADER , null , this ) ; }
public void onClick ( DialogInterface arg0 , int arg1 ) { mPreferenceManager . setTextSize ( MAX - bar . getProgress ( ) ) ; }
private void addCategory ( String name ) { AddCategory task = new AddCategory ( this , new Category ( name ) , this ) ; task . execute ( ) ; }
public @ ColorInt int getButtonColor ( ) { return mButtonColor ; }
public MaterialAboutCard ( CharSequence title , MaterialAboutItem . . . materialAboutItems ) { this . title = title ; Collections . addAll ( items , materialAboutItems ) ; }
public void onFilterAdded ( Filter filter ) { Log . d ( "TAG" , "onFilterAdded : " + filter . getName ( ) ) ; }
public void showProgressDialog ( int msgId ) { showProgressDialog ( msgId , 250 ) ; }
private void requestDisconnect ( ) { Message msg = Message . obtain ( ) ; msg . obj = ClementineMessage . getMessage ( MsgType . DISCONNECT ) ; App . ClementineConnection . mHandler . sendMessage ( msg ) ; }
public void testCompareTo ( ) throws Exception { assertTrue ( mTestTrip . compareTo ( mTestTrip2 ) > 0 ) ; assertTrue ( mTestTrip2 . compareTo ( mTestTrip ) < 0 ) ; assertTrue ( mTestTrip . compareTo ( mTestTrip ) == 0 ) ; }
public void setColorFilter ( @ Nullable final ColorFilter colorFilter ) { target . setColorFilter ( colorFilter ) ; }
public ArrayList < ClientCollectionSheet > getClients ( ) { return clientCollectionSheetList ; }
public SortEntry [ ] getSortEntries ( ) { return new SortEntry [ ] { new SortEntry ( new ItemName ( NAME ) , SortOrderType . A_TO_Z ) } ; }
public static DrawerMenuItem drawerMenuItem ( ) { return DrawerMenuItem . OVERVIEW ; }
public int size ( ) { return entries . size ( ) ; }
public void onClick ( View view ) { fingerprint . cancel ( ) ; if ( fingerprintDialogSecureCallback != null ) { fingerprintDialogSecureCallback . onAuthenticationCancel ( ) ; } else { fingerprintDialogCallback . onAuthenticationCancel ( ) ; } dialog . cancel ( ) ; }
public final int getPreferencesXML ( ) { return R . xml . cuckoo_rain_preferences ; }
public boolean isNeeded ( CommentModel model ) { return model . getEmbed ( ) != null ; }
public BaseBaseAdapter ( ) { mBus = EventBus . getDefault ( ) ; mBus . register ( this ) ; }
private void thenDegShouldBe ( double expected ) { assertEquals ( expected , mWeatherData . getDeg ( ) , 0 . 1 ) ; }
public Cursor getDirectShareList ( ) { SQLiteDatabase db = databaseHelper . getReadableDatabase ( ) ; String query = createQuery ( MESSAGE_COUNT + " != 0" , 0 ) ; return db . rawQuery ( query , null ) ; }
public int getCount ( ) { return ( mFilterValues != null ? mFilterValues . size ( ) : 0 ) ; }
public void update ( Attraction updatedAttraction ) { tourStorage . removeTour ( updatedAttraction . getId ( ) ) ; attractionRepo . remove ( updatedAttraction . getId ( ) ) ; download ( updatedAttraction ) ; }
public void onBackPressed ( ) { showCloseAppPopup ( ) ; }
public int onGetSwipeReactionType ( @ NonNull MyViewHolder holder , int position , int x , int y ) { if ( onCheckCanStartDrag ( holder , position , x , y ) ) { return Swipeable . REACTION_CAN_NOT_SWIPE_BOTH_H ; } else { return Swipeable . REACTION_CAN_SWIPE_BOTH_H ; } }
private Uri saveMovie ( MovieEntity movie ) { return context . getContentResolver ( ) . insert ( MoviesContract . MovieEntry . CONTENT_URI , movie . convertToContentValues ( ) ) ; }
public SuggestedApp change ( LaunchInfo info ) { this . app = info ; return this ; }
private void initializePageModels ( ) { this . models = new LinkedList <> ( ) ; this . recentModel = new RecentEmojiPageModel ( getContext ( ) ) ; this . models . add ( recentModel ) ; this . models . addAll ( EmojiPages . DISPLAY_PAGES ) ; }
private static StoryListItemViewModel createItemListItemForStory ( Story story ) { return new StoryListItemViewModel ( story . getTitle ( ) , story . getDomain ( ) , story . getScore ( ) , story . getCommentCount ( ) , story . getDate ( ) ) ; }
public void release ( ) { synchronized ( cameraLock ) { stop ( ) ; frameProcessor . release ( ) ; } }
public void getMedicalHistory ( Token token , Callback callback ) { webServiceGETMethod ( token , callback , "getHistoryDetails" ) ; }
public void setPhoneNumbers ( List < PhoneNumber > phoneNumbers ) { mPhoneNumbers = phoneNumbers ; }
public void remove ( String syncId , Boolean isGroupSchedule ) { Observable . concat ( getDeleteSyncIdObservable ( syncId , isGroupSchedule ) , isGroupSchedule ? getCacheGroupObservable ( false ) : getCacheEmployeeObservable ( false ) ) . doOnError ( this : : onError ) . subscribe ( ) ; }
private void selectPdfFileFromSystem ( ) { selectFileFromSystem ( FileTypes . PDF , Actions . CONVERT ) ; }
public String getText ( ) { return this . text ; }
public void testParseJsonNull ( ) { DatafeedTestDriver . parseJsonNull ( mSubscriber ) ; }
public InputViewPager ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; mContext = context ; }
public void showAdminFragment ( ) { if ( ! showingAdminFragment ) { showingAdminFragment = true ; sectionsPagerAdapter . addFragment ( AdminFragment . newInstance ( ) ) ; sectionsPagerAdapter . notifyDataSetChanged ( ) ; } }
public boolean isMmsNotification ( ) { return false ; }
private void setCustomValue ( String value ) { Prefs . setStringPreference ( getContext ( ) , customPreference , value ) ; }
public void networkNotAvailable ( ) { Timber . e ( "networkNotAvailable" ) ; finish ( ) ; }
public void onDrawerSlide ( @ NonNull View drawerView , float slideOffset ) { }
public static DataSource provideRemoteSource ( @ Nullable Context context ) { return new FakeRemoteDataSource ( ) ; }
public void onSaveInstanceState ( Bundle savedInstanceState ) { if ( server != null ) savedInstanceState . putInt ( "cid" , server . getCid ( ) ) ; }
public void setDomainLowerBoundaryMode ( @ NonNull BoundaryMode domainLowerBoundaryMode ) { this . domainLowerBoundaryMode = domainLowerBoundaryMode ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `navigation` INTEGER NOT NULL DEFAULT 0" ) ; }
public Completable save ( @ NonNull Session session ) { cachedMySessions . put ( session . id , new MySession ( session ) ) ; return localDataSource . save ( session ) ; }
public void initialize ( final DeparturesViewObserver observer ) { ui . stub . setOnLayoutInflatedListener ( new OnLayoutInflatedListener ( ) { @ Override public void onLayoutInflated ( WatchViewStub stub ) { ui . load ( ) ; onLoad ( observer ) ; } } ) ; }
public TrackGroupArray getCurrentTrackGroups ( ) { verifyApplicationThread ( ) ; return player . getCurrentTrackGroups ( ) ; }
public NewsfeedCommentsPresenter ( int accountId , @ Nullable Bundle savedInstanceState ) { super ( accountId , savedInstanceState ) ; this . data = new ArrayList <> ( ) ; this . interactor = InteractorFactory . createNewsfeedInteractor ( ) ; loadAtLast ( ) ; }
public void onFailure ( @ NonNull Call < DeezerResponse > call , @ NonNull Throwable throwable ) { callback . onLoadFailed ( new Exception ( throwable ) ) ; }
private void delete ( int position ) { mDataSet . remove ( position ) ; notifyItemRemoved ( position ) ; }
public void onBackPressed ( ) { if ( audioPlayer != null ) { audioPlayer . stop ( ) ; } super . onBackPressed ( ) ; }
public void UpdateDatasetIMKO ( ArrayList < IMKOLesson > listItems ) { IMKOGradesListAdapter adapter = new IMKOGradesListAdapter ( getContext ( ) , listItems ) ; list . swapAdapter ( adapter , true ) ; }
public void onInitializeAccessibilityNodeInfo ( View host , AccessibilityNodeInfo info ) { super . onInitializeAccessibilityNodeInfo ( host , info ) ; info . setClassName ( "android . fakewidget . ImageButton" ) ; info . setClickable ( true ) ; info . setLongClickable ( true ) ; }
public void seek ( ) { waitingForPayloadStart = true ; }
public void setWallet ( @ Nullable Wallet wallet ) { this . wallet = wallet ; }
public void onError ( String msg , Throwable th ) { Timber . e ( th , "There was an error incrementing bookmark click counter . " + msg ) ; openBookmark ( ) ; }
public String getImageFilename ( ) { return String . format ( FILENAME_IMAGE , this . story . getId ( ) , this . id ) ; }
private boolean isBlockquoteType ( ) { return getRangeType ( ) == FormattableRangeType . BLOCKQUOTE ; }
public void onComboChange ( String language , ComponentName service ) { setRewriters ( language , service ) ; }
public final Point getPoint ( ) { return this . point ; }
public void testNoApiStatus ( ) { mJsonData . remove ( APIStatusDeserializer . FMS_API_DOWN_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , ApiStatus . class , mContext ) ; }
public void onUserActionRequired ( ) { Log . v ( TAG , "user action required" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_USER_ACTION_REQUIRED , new ArrayList < String > ( ) ) ; }
public void prepareSingleTrack ( Format format ) { track ( 0 , C . TRACK_TYPE_UNKNOWN ) . format ( format ) ; sampleQueuesBuilt = true ; maybeFinishPrepare ( ) ; }
public FaqItem ( ) { section = "General" ; subSection = section ; originalDate = Calendar . getInstance ( ) . getTime ( ) ; updateDate = originalDate ; question = "" ; answer = "" ; author = AHC . DEFAULT_AUTHOR ; desc = "" ; }
public int getCount ( ) { return daylist . size ( ) ; }
public int getRepairCost ( ) { return ( getMaxHealth ( ) - getHealth ( ) ) * Constants . NODE_REPAIR_COST_MULTIPLIER ; }
public < T > Task < T > sendWithResult ( String action , String actionResult ) { return sendWithResult ( action , actionResult , null ) ; }
public Map getAliases ( ) throws RemoteException { return mConnections . get ( mConnectionClutch ) . getAliases ( ) ; }
public void onClick ( View v ) { performDeleteTag ( tag ) ; }
public static Bundle trackBundle ( @ NonNull TrackMetadata track ) { return ABundle . of ( EXTRA_TRACK_ID , track . track_id ) ; }
public String getTokenType ( ) { return getType ( ) == User . TYPE_GUEST ? User . TYPE_TOKEN_GUEST : User . TYPE_TOKEN_OTP ; }
public static Integer [ ] getPreselectedTagsArray ( Note note , List < Tag > tags ) { List < Note > notes = new ArrayList <> ( ) ; notes . add ( note ) ; return getPreselectedTagsArray ( notes , tags ) ; }
public void noInternetConnectionDialog ( Context mContext ) { showDialog ( mContext , getString ( R . string . no_internet_message ) ) ; }
public void setProxy ( SharedConfig . ProxyInfo proxyInfo ) { textView . setText ( proxyInfo . address + " : " + proxyInfo . port ) ; currentInfo = proxyInfo ; }
public static boolean isFavorite ( @ NonNull final Context context , @ NonNull final Song song ) { return PlaylistsUtil . doPlaylistContains ( context , getFavoritesPlaylist ( context ) . id , song . id ) ; }
public Cursor _getPadDataByUrl ( String padUrl ) { return this . _getPadDataFromDatabase ( URL , padUrl ) ; }
public DynamicDialog show ( ) { final DynamicDialog dialog = create ( ) ; dialog . show ( ) ; return dialog ; }
public void onItemSelected ( AdapterView < ? > adapterView , View view , int position , long id ) { }
public GistViewModel ( ) { super ( ) ; init ( ) ; initAnonService ( ) ; }
public void onClick ( View v ) { if ( forwardingMessages != null ) { forwardingMessages . clear ( ) ; } showReplyPanel ( false , null , null , foundWebPage , true ) ; }
public void setRaceInfoCampusMapUrl ( String campusMapUrl ) { mPrefs . edit ( ) . putString ( PREF_CAMPUS_MAP_URL , campusMapUrl ) . apply ( ) ; }
public void onTimeSet ( TimePicker timePicker , int hour , int minute ) { setReminderTime ( year , month , day , hour , minute ) ; }
private void resendPending ( final boolean retryingMedia , final boolean forcePending , final String to ) { resendPendingMessages ( retryingMedia , forcePending , to ) ; resendPendingReceipts ( ) ; }
public void onClick ( final DialogInterface dialog , final int which ) { post . action ( activity , RedditAPI . ACTION_DELETE ) ; }
public void onAuthenticationError ( int errMsgId , CharSequence errString ) { Log . w ( TAG , "Authentication error : " + errMsgId + " " + errString ) ; onAuthenticationFailed ( ) ; }
private float viewToSourceX ( float vx ) { if ( vTranslate == null ) { return Float . NaN ; } return ( vx - vTranslate . x ) / scale ; }
public boolean isFinishEnabled ( ) { return buttonNextFunction == BUTTON_NEXT_FUNCTION_NEXT_FINISH ; }
public BtAnalyzerService getService ( ) { return BtAnalyzerService . this ; }
public void onClick ( DialogInterface dialogInterface , int i ) { switch ( i ) { case 0 : TouchableSpan . this . onClick ( null ) ; break ; case 1 : copy ( mContext , full ) ; break ; } }
public FingerprintDialog circleErrorColor ( int circleErrorColor ) { this . fingerprint . circleErrorColor ( circleErrorColor ) ; return this ; }
public boolean hasSingleCard ( ) { return getSize ( ) < 2 ; }
public void testSafeToAddAuthToken22 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( NOT_WPCOM_ADDRESS_3 ) ) ; }
public static Channel getChannel ( String channelName ) { for ( Channel c : Channel . values ( ) ) if ( c . toString ( ) . equals ( channelName ) ) return c ; return null ; }
public Builder ( @ NonNull final DialogFragment dialogFragment , int themeResId ) { this ( new SupportFragmentResourceFinder ( dialogFragment ) , themeResId ) ; }
public UtilitiesProvider getUtilsProvider ( ) { return utilsProvider ; }
public OfficeBearer onCreateViewHolder ( ViewGroup parent , int viewType ) { View officeBearer = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( iitbbs . iitbhubaneswar . R . layout . office_bearer , parent , false ) ; return new OfficeBearer ( officeBearer ) ; }
private void openCreateScreen ( ) { startActivity ( new Intent ( getContext ( ) , TemplateActivity . class ) ) ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; scrobbler = new Scrobbler ( client , notificationManager , db , connectivityManager , trackLover ) ; }
public void notifyGroupItemRangeInserted ( int groupPositionStart , int itemCount ) { notifyGroupItemRangeInserted ( groupPositionStart , itemCount , mDefaultGroupsExpandedState ) ; }
public void onButtonPressed ( Intent intent , String password ) throws GeneralSecurityException , IOException { EncryptDecryptUtils . startEncryption ( context , rowItem . generateBaseFile ( ) . getPath ( ) , password , intent ) ; }
public void onSuccess ( ) { Log . d ( LogTag . LOG_HOST_SERVICE , "Resumed music successfully" ) ; }
public Upload setFileUri ( Uri fileUri ) { this . fileUri = fileUri ; return this ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; unbinder = ButterKnife . bind ( this , view ) ; view . setOnTouchListener ( new FlingPlayBackController ( getActivity ( ) ) ) ; setUpMiniPlayer ( ) ; }
public void onFailure ( Request request , IOException e ) { log . info ( "Failed to communicate with server : " + request . toString ( ) ) ; getTransactionBytes ( txId , listener , confirmations ) ; }
public void onClick ( View v ) { finish ( ) ; startActivity ( new Intent ( HomeActivity . this , LoginActivity . class ) ) ; }
public void onBookmarkClicked ( @ NonNull Bookmark bookmark ) { finishAndGoTo ( bookmark . pageInfo . pageId ) ; }
public static void informFolderDeleted ( Context c , File parentFile ) { List < String > paths = new ArrayList <> ( ) ; getPathsOfFolder ( paths , parentFile ) ; informPathsDeleted ( c , paths ) ; }
private String getLongitude ( Location location ) { return String . format ( Locale . US , "%3 . 5f" , location . getLongitude ( ) ) ; }
public void sync ( ) { mainList . clear ( ) ; albums . clear ( ) ; artists . clear ( ) ; grabIfEmpty ( ) ; }
private static HttpUrl swapHost ( @ NonNull HttpUrl url , @ NonNull String host ) { return url . newBuilder ( ) . host ( host ) . build ( ) ; }
public void onMovieClicked ( Movie movie ) { callback . onMovieClicked ( movie ) ; }
public void setEnabled ( boolean enabled ) { if ( enabled == isEnabled ( ) ) return ; super . setEnabled ( enabled ) ; if ( enabled ) ( ( CrosshairRenderer ) mRenderer ) . show ( ) ; }
private boolean supportedAccountType ( @ Nullable String type ) { return BuildConfig . ACCOUNT_TYPE . equals ( type ) ; }
private final TriggerableThread writeThread = new TriggerableThread ( new Runnable ( ) { @ Override public void run ( ) { doWrite ( ) ; } } , 1500 ) ;
public GetAuthUserInteractor ( @ NonNull BaseInteractorExecutor interactorExecutor , @ NonNull Repository repository ) { super ( interactorExecutor ) ; this . repository = repository ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new RecyclerListView . Holder ( new LanguageCell ( mContext , false ) ) ; }
public void setTabPaddingLeftRight ( int paddingPx ) { this . mTabPadding = paddingPx ; updateTabStyles ( ) ; }
public int onGetSwipeReactionType ( @ NonNull MyViewHolder holder , int position , int x , int y ) { return RecyclerViewSwipeManager . REACTION_CAN_SWIPE_BOTH_V ; }
public static int [ ] getWidgetIds ( Context context ) { AppWidgetManager appWidgetManager = AppWidgetManager . getInstance ( context ) ; return appWidgetManager == null ? new int [ ] { } : appWidgetManager . getAppWidgetIds ( new ComponentName ( context , KalendarAppWidgetProvider . class ) ) ; }
public void onEvent ( CommandEvents . LogOnce logOnce ) { logOnce ( ) ; }
public void onBackPressed ( ) { if ( binding . fullContainer . getVisibility ( ) == View . VISIBLE ) { hideImage ( ) ; } else { finish ( ) ; } }
public List < TeacherSubject > getData ( ) { return mData ; }
public PathLayer ( Map map , LineStyle style ) { super ( map ) ; mLineStyle = style ; mPoints = new ArrayList <> ( ) ; mRenderer = new PathRenderer ( ) ; mWorker = new Worker ( map ) ; }
public int getRowCount ( ) { if ( context . getNames ( ) != null && context . getNames ( ) . size ( ) != 0 ) { return context . getNames ( ) . size ( ) + 4 ; } else { return 3 ; } }
private void reloadMedia ( ) { loadMediaWithId ( mMedia . getId ( ) ) ; }
public static OfflineSubreddit getSubreddit ( String subreddit , boolean offline , Context c ) { return getSubreddit ( subreddit , 0L , offline , c ) ; }
public void tearDown ( ) throws Exception { dialogUtil = null ; cal = null ; date = null ; date2 = null ; date3 = null ; }
public static boolean isSupported ( ) { return true ; }
public TheaterView createView ( ) { return this ; }
public boolean isRated ( ) { return get ( IS_RATED , false ) ; }
public void setOrientation ( int angle , boolean center ) { while ( angle < 0 ) { angle += 360 ; } while ( angle > 360 ) { angle -= 360 ; } imageOrientation = thumbOrientation = angle ; centerRotation = center ; }
public String getCategoryUuid ( ) { return categoryUuid ; }
public void events ( List < String > settingsEvents , List < String > projectEvents , List < String > dataEvents , boolean whilePaused ) { updateView ( ) ; adapter . updateData ( ) ; }
private boolean positionsEqual ( Cell first , Cell second ) { return first . getX ( ) == second . getX ( ) && first . getY ( ) == second . getY ( ) ; }
public SelectPictureListAdapter ( @ NonNull String [ ] entries , @ NonNull ItemClickListener listener ) { this . entries = entries ; this . listener = listener ; }
public String onArgNotFound ( ExecutePack pack , int index ) { MainPack info = ( MainPack ) pack ; return info . res . getString ( R . string . output_appnotfound ) ; }
private void onMultipleItemAction ( @ NonNull MenuItem menuItem , @ NonNull List < Song > selection ) { SongsMenuHelper . handleMenuClick ( activity , selection , menuItem . getItemId ( ) ) ; }
public void onError ( ) { mUseCaseHandler . notifyError ( mCallback ) ; }
public MyPreferenceFragment getPreferenceFragment ( ) { return ( MyPreferenceFragment ) getFragmentManager ( ) . findFragmentByTag ( "PREFERENCE_FRAGMENT" ) ; }
public boolean isChargingThroughAC ( ) { reloadBatteryStatusIntent ( ) ; return chargePlug == BatteryManager . BATTERY_PLUGGED_AC ; }
public void clickAttendance ( View v ) { Intent i = new Intent ( this , AttendenceActivity . class ) ; startActivity ( i ) ; }
public TrendingAdapter ( @ NonNull FirestoreRecyclerOptions < TrendingModel > options , Context context ) { super ( options ) ; this . context = context ; }
private DemoViewHolder ( View view ) { super ( view ) ; textView = view . findViewById ( R . id . textView ) ; }
public SimpleDividerItemDecoration ( ) { mDivider = ResourcesCompat . getDrawable ( getResources ( ) , R . drawable . line_divider , null ) ; }
public AssociationViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new AssociationViewHolder ( ViewUtils . inflate ( parent , R . layout . item_checkbox_string ) , this ) ; }
public void onClick ( DialogInterface dialog , int which ) { removeBackup ( backupName ) ; }
public String getPageTitle ( int position ) { return fragmentTitles . get ( position ) ; }
public DaoSearchHistoryFinder ( DatabaseOpenHelper openHelper ) { this . dao = openHelper . getSearchHistoryDao ( ) ; }
public static int positionInAdapter ( int positionInCursor ) { return positionInCursor + SPACE_TOP ; }
public static X509Certificate load ( InputStream certData ) throws CertificateException { CertificateFactory certFactory = CertificateFactory . getInstance ( "X . 509" , PGP . PROVIDER ) ; return ( X509Certificate ) certFactory . generateCertificate ( certData ) ; }
public static void createFtsTable ( SQLiteDatabase db ) { db . execSQL ( SQL_CREATE_NAMES_FTS ) ; logger . debug ( "Populate fts" ) ; db . execSQL ( SQL_INSERT_NAMES_FTS ) ; logger . debug ( "Finished populating fts" ) ; }
public Size getQ ( ) { return q ; }
public int getItemCount ( ) { if ( trailerArrayList == null ) { return 0 ; } return trailerArrayList . size ( ) ; }
public void onClick ( View v ) { String userId = PinkaHelper . getActiveUser ( context ) . nationId ; SparkleHelper . startTrends ( context , userId , TrendsActivity . TREND_NATION , delta . censusId ) ; }
private void removeBookmarksPath ( String name , String path ) { SQLiteDatabase sqLiteDatabase = getWritableDatabase ( ) ; sqLiteDatabase . delete ( TABLE_BOOKMARKS , COLUMN_NAME + " = ? AND " + COLUMN_PATH + " = ?" , new String [ ] { name , path } ) ; }
public static void setStatsWidgetsData ( String widgetData ) { setString ( DeletablePrefKey . STATS_WIDGET_DATA , widgetData ) ; }
private void putReadings ( Intent intent , int from , int to ) { intent . putExtra ( IntentCreator . READING_FROM , from ) ; intent . putExtra ( IntentCreator . READING_TO , to ) ; putDates ( intent , DATE_FROM , DATE_TO ) ; }
public boolean isPlaying ( ) { return isPlaying ; }
public int getQuality ( ) { return quality ; }
public void setFragments ( List < DateGridFragment > fragments ) { this . fragments = fragments ; }
private View . OnClickListener incrementUserAttributeButtonOnClick ( ) { return new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { AdpPushClient . get ( ) . incrementUserAttribute ( "comedy_movie" , 1 ) ; } } ; }
public void onFailure ( @ NonNull Call < Files > call , @ NonNull Throwable t ) { filesMutableLiveData . setValue ( null ) ; }
public DefaultContentMetadata copyWithMutationsApplied ( ContentMetadataMutations mutations ) { Map < String , byte [ ] > mutatedMetadata = applyMutations ( metadata , mutations ) ; if ( isMetadataEqual ( metadata , mutatedMetadata ) ) { return this ; } return new DefaultContentMetadata ( mutatedMetadata ) ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mTeams . get ( 0 ) , mGson ) ; }
private void switchTab ( int position ) { LogUtil . d ( TAG , "switchTab : " + position ) ; if ( position == 1 ) { openDrawFragment ( ) ; } else { openCropFragment ( ) ; } }
public void onClick ( View view ) { if ( isInQuickSelectMode ( ) ) { toggleChecked ( getAdapterPosition ( ) ) ; } else { Playlist playlist = dataSet . get ( getAdapterPosition ( ) ) ; NavigationUtil . goToPlaylist ( activity , playlist ) ; } }
public PhotoSizes setP ( Size p ) { this . p = p ; return this ; }
public void onDestroy ( ) { super . onDestroy ( ) ; if ( BuildConfig . LOG_DEBUG ) LogUtils . d ( TAG ) ; LocalBroadcastManager . getInstance ( getContext ( ) ) . unregisterReceiver ( syncServiceReceiver ) ; }
public void onAnimationCancel ( Animator animation ) { if ( runningAnimation != null && runningAnimation . equals ( animation ) ) { runningAnimation = null ; } }
public static boolean isTynmarket ( ) { TwitterSession session = TwitterCore . getInstance ( ) . getSessionManager ( ) . getActiveSession ( ) ; return session != null && session . getUserId ( ) == TYNMARKET_USER_ID ; }
public void getOptions ( ) { assertNotNull ( mPresenter . getSublimePickerOptions ( 0 ) ) ; }
public void onClick ( View v ) { if ( mCurrentTab != 0 ) mPager . setCurrentItem ( 0 ) ; }
public DataSink createDataSink ( ) { return new CacheDataSink ( cache , maxCacheFileSize , bufferSize ) ; }
public static int getBackgroundColor ( Activity a ) { SharedPreferences sharedPref = a . getSharedPreferences ( "WALL_CONFIG" , Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "bgColor" , 0 ) ; }
public NotificationMessage getNotificationMessage ( ) { return notificationMessage . get ( ) ; }
public void onRebind ( Intent intent ) { isServiceBound = true ; }
public TriggerData ( Parcel in ) { readFromParcel ( in ) ; buildData ( ) ; }
public void attachView ( AboutContract . View view ) { App . getAppComponent ( ) . inject ( this ) ; mView = view ; mView . setPresenter ( this ) ; mView . setVersionName ( mApp . getVersionName ( ) ) ; loadLicenses ( ) ; }
public void hideCurrentInput ( EditText imeTarget ) { if ( isKeyboardOpen ( ) ) hideSoftkey ( imeTarget , null ) ; else hideAttachedInput ( false ) ; }
private void toFirstDay ( int position ) { mPagerAdapter . setSelectedDay ( position , CalendarUtils . monthFirstDay ( mPagerAdapter . getMonth ( position ) ) , true ) ; }
public java . util . List < com . openwallet . core . protos . Protos . UnspentOutput > getUnspentOutputList ( ) { return unspentOutput_ ; }
public void onAnimationEnd ( Animation animation ) { if ( ! mCoverUpdated ) { mImgArt . setImageBitmap ( App . Clementine . getCurrentSong ( ) . getArt ( ) ) ; mImgArt . startAnimation ( mAlphaUp ) ; } mCoverUpdated = ! mCoverUpdated ; }
public void deleteChoices ( ) { removeAllViews ( ) ; btnChoices = new ArrayList <> ( ) ; }
private List < PopupKeyCandidate > getCandidatesForSA ( ) { List < PopupKeyCandidate > candidates = new ArrayList <> ( ) ; candidates . add ( new PopupKeyCandidate ( "ʃ" , false ) ) ; return candidates ; }
public void press ( Button button ) { resetGame ( ) ; }
public void logoutPermanently ( @ NonNull Context context , @ Nullable Callable callback ) { logoutPermanently ( context , null , callback ) ; }
public void onLoadFinished ( android . support . v4 . content . Loader < Cursor > inCursorLoader , Cursor inCursor ) { Log . d ( DbgU . getAppTag ( ) , DbgU . getMethodName ( refListType ) ) ; mCursorAdapter . swapCursor ( inCursor ) ; }
public void setPresenter ( RecipeDialogCreationPresenter presenter ) { this . presenter = presenter ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { flags = stream . readInt32 ( exception ) ; pinned = ( flags & 1 ) != 0 ; peer = DialogPeer . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public void format ( IRCCloudJSONObject event , Event e , StringBuilder sb ) { e . from = "" ; e . msg = "⇐ You disconnected" ; e . color = colorScheme . timestampColor ; e . self = false ; }
public Kd2Misc getMisc ( ) { return misc ; }
public void onStop ( ) { super . onStop ( ) ; Log . d ( TAG , "onStop" ) ; }
public ViewHolder ( View view ) { ButterKnife . bind ( this , view ) ; }
private void setNotificationColor ( final Builder mBuilder ) { mBuilder . setColor ( ContextCompat . getColor ( mXmppConnectionService , R . color . green600 ) ) ; }
public void callback ( boolean done ) { if ( this . callback != null ) { this . callback . onMoreMessagesLoaded ( actualCount , conversation ) ; if ( done ) { this . callback . informUser ( R . string . no_more_history_on_server ) ; } } }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "id . kopas . berkarya . usbkaclient" , appContext . getPackageName ( ) ) ; }
public void setDateLiked ( String dateStr ) { this . mDateLiked = StringUtils . notNullStr ( dateStr ) ; }
public void onClick ( View v ) { showRecentNotesDialog ( ) ; }
public boolean isVariable ( ) throws ExpressionFormatException { if ( atomType != Atom . AtomType . INVALID ) { return expressionLeft . isVariable ( ) || expressionRight . isVariable ( ) ; } else { throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; } }
public void onClick ( View v ) { finish ( ) ; startActivity ( new Intent ( HomeActivity . this , BoardActivity . class ) ) ; }
public void switchToAccount ( Account account ) { switchToAccount ( account , false , null ) ; }
private static void sendUnregister ( Context context , String id ) { Intent intent = new Intent ( ACTION_UNREGISTER ) ; intent . addFlags ( Intent . FLAG_INCLUDE_STOPPED_PACKAGES ) ; intent . putExtra ( EXTRA_EXPRESSION_ID , id ) ; context . sendBroadcast ( intent ) ; }
public int maxDurability ( int lvl ) { return 6 * ( lvl < 16 ? 16 - lvl : 1 ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . closeChats ) ; }
public static UserModel getUser ( ) { return new UserModel ( getUserId ( ) , getUserUsername ( ) , getUserPassword ( ) , getNotificationId ( ) , isUserAdmin ( ) ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( SettingsActivity . this , AboutPageActivity . class ) ) ; }
public String type ( ) { return XMLPrefsSave . COLOR ; }
public void onBackPressed ( ) { if ( backButtonEnabled && main != null ) { ui . onBackPressed ( ) ; } }
public String toString ( ) { return mSplitType . name ( ) + " of " + mValue . toString ( ) + " in account : " + mAccountUID ; }
public void setIsBot ( boolean bot ) { this . isBot = bot ; }
public void setStickyFooterSelection ( long identifier , boolean fireOnClick ) { setStickyFooterSelectionAtPosition ( getStickyFooterPosition ( identifier ) , fireOnClick ) ; }
private void reopenFragment ( ) { getCallback ( ) . replaceFragment ( new DayViewFragment ( ) , getString ( R . string . events ) ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { safeDestroy = true ; cleanCurrentSave ( ) ; InterventionActivity . super . onBackPressed ( ) ; }
public LiveData < Integer > getTodoOrder ( ) { return mTodoOrder ; }
public void clicked ( InputEvent event , float x , float y ) { game . setScreen ( new PlayScreen ( game , handler ) ) ; }
public void setVisibleXRange ( float minXRange , float maxXRange ) { float minScale = mXAxis . mAxisRange / minXRange ; float maxScale = mXAxis . mAxisRange / maxXRange ; mViewPortHandler . setMinMaxScaleY ( minScale , maxScale ) ; }
public void setVideoQualityPref ( String video_quality ) { SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putString ( PreferenceKeys . getVideoQualityPreferenceKey ( cameraId , fpsIsHighSpeed ( ) ) , video_quality ) ; editor . apply ( ) ; }
public Builder displayBottomNavigation ( boolean displayBottomNavigationBar ) { formView . style . displayBottomNavigation = displayBottomNavigationBar ; return this ; }
public void onLoadingComplete ( String imageUri , View view , Bitmap loadedImage ) { NotifyDownloadFinished ( loadedImage ) ; }
public static String buildBackdropURL ( String BackdropPath ) { return "https : }
public void start ( Attributes attributes ) { mCurrentUser = new User ( Integer . parseInt ( attributes . getValue ( TopicParser . ID_ATTRIBUTE ) ) ) ; }
public void removeAll ( Collection < ? extends T > ts ) { mData . removeAll ( ts ) ; }
public void setShowBook ( boolean showBook ) { isShowBook = showBook ; refreshBookInfo ( ) ; }
public void minusTextSize ( View v ) { webViewClient . minusTextSize ( ) ; }
public void requestAcknowledged ( long workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { getMvpView ( ) . showProgress ( false ) ; getMvpView ( ) . showToastMessage ( "Transaction received . " , true ) ; getMvpView ( ) . goToWalletDetails ( ) ; }
public CollectionRecyclerViewAdapter ( @ NonNull ArrayList < BooksCollection > bookCollections , BookCollectionsController bookCollectionsController ) { this . bookCollections . addAll ( bookCollections ) ; this . bookCollectionsController = bookCollectionsController ; }
public void established ( ) { Log . d ( Config . LOGTAG , "successfully connected to our own primary candidate" ) ; mergeCandidate ( candidate ) ; sendInitRequest ( ) ; }
public void onCurrencyValueClick ( ) { final CurrencyBottomSheet sheet = new CurrencyBottomSheet ( ) ; sheet . show ( getSupportFragmentManager ( ) , "currency" ) ; }
public void onClick ( View view ) { mSyncButton . setEnabled ( false ) ; sendData ( ) ; mSyncButton . setEnabled ( true ) ; }
public int compare ( Announcement message1 , Announcement message2 ) { return message2 . getTsDate ( ) . compareTo ( message1 . getTsDate ( ) ) ; }
public void onDestroy ( ) { App . INSTANCE . getSharedPreferences ( ) . removeListener ( this ) ; notify . stopStatusNotification ( ) ; super . onDestroy ( ) ; }
private void startConnection ( String host ) { mAuthTask = new AccountCreationTask ( this , getApplicationContext ( ) , mAccountManager , host ) ; mAuthTask . execute ( ) ; }
private void initSnoozeTimePrefs ( ) { binding . delayForPrefs . setOnClickListener ( mSnoozeClick ) ; binding . delayForPrefs . setValue ( getPrefs ( ) . getSnoozeTime ( ) ) ; showSnooze ( ) ; }
public synchronized void addConnectGattCallback ( BleGattCallback callback ) { bleGattCallback = callback ; }
public void run ( ) { updateData ( ) ; }
public void setProfiles ( List < IProfile > profiles ) { mAccountHeaderBuilder . mProfiles = profiles ; mAccountHeaderBuilder . updateHeaderAndList ( ) ; }
public void run ( ) { try { cancel ( ) ; searchTimer . cancel ( ) ; searchTimer = null ; } catch ( Exception e ) { FileLog . e ( e ) ; } searchDialogsInternal ( query , searchId ) ; }
public int getItemCount ( ) { return list . size ( ) ; }
public static AscendingPeriodClassifier getTodayClassifier ( ) { return TODAY ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; mActivity . subscribeToMusicEvents ( this ) ; mActivity . subscribeToPaletteColors ( this ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_updates_state . TLdeserialize ( stream , constructor , exception ) ; }
public static SkipDialogFragment newInstance ( String seed ) { SkipDialogFragment newDialog = new SkipDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( Constants . ARG_SEED , seed ) ; newDialog . setArguments ( args ) ; return newDialog ; }
public PageInfo getLastPageInfo ( ) throws BookDatabaseException { return sGlobalUserDBHelper . getLastPageInfo ( bookId , context ) ; }
public String getCountryName ( ) { return PreferencesManager . getCountryName ( ) ; }
private void showRatingProgress ( boolean show ) { if ( show ) { rateLabel . setVisibility ( GONE ) ; ratingProgress . setVisibility ( VISIBLE ) ; } else { rateLabel . setVisibility ( VISIBLE ) ; ratingProgress . setVisibility ( GONE ) ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_main ) ; setupActionBar ( ) ; setupDrawer ( savedInstanceState ) ; ( ( WebAppApplication ) getApplication ( ) ) . getTracker ( ) ; }
public void onBackPressed ( ) { if ( fragment != null && fragment . onBackPressed ( ) ) { closeScreen ( ) ; } }
private void saveCurrentSectionID ( ) { Log . d ( "Book" , "saving section " + currentSectionIDPos ) ; data . edit ( ) . putInt ( SECTION_ID , currentSectionIDPos ) . apply ( ) ; }
public void clearAppsFromVK ( ) { SQLiteDatabase db = getWritableDatabase ( ) ; db . delete ( TABLE_USERDATA , COLUMN_KEY + " LIKE \'app : %\'" , null ) ; db . close ( ) ; }
public Integer getDelay ( ) { return delay ; }
public void testSimpleParsing ( ) { DatafeedTestDriver . testSimpleParsing ( mSubscriber , mAwards ) ; }
public boolean hasAvatarUrl ( ) { return ! TextUtils . isEmpty ( mAvatarUrl ) ; }
public void onClick ( View view ) { if ( bottomSheetBehavior . getState ( ) == BottomSheetBehavior . STATE_COLLAPSED ) { bottomSheetBehavior . setState ( STATE_EXPANDED ) ; } else { bottomSheetBehavior . setState ( BottomSheetBehavior . STATE_COLLAPSED ) ; } }
public CustomerFragmentList ( ) { super ( R . string . title_customers ) ; }
public CircularArray ( int size ) { mItems = ( T [ ] ) new Object [ size + 1 ] ; }
public void onBindViewHolder ( BookViewHolder holder , int position ) { holder . setBook ( data . getItem ( position ) ) ; }
public void onEvent ( OnWifiUpdateCompleted event ) { if ( TinyTimeTracker . currentTracker == null ) return ; if ( event . success && TinyTimeTracker . currentTracker . equals ( event . tracker ) ) { updateCurrentWeek ( ) ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences_connection ) ; EditTextPreference urlPreference = ( EditTextPreference ) findPreference ( Constants . PREF_SERVER_URL ) ; urlPreference . setOnPreferenceChangeListener ( new URLValidatingListener ( ) ) ; }
public void testMealUnitType ( ) throws Exception { when ( intent . getAction ( ) ) . thenReturn ( AddIngredientType . MEAL . getAction ( ) ) ; assertThat ( provideUnitType ( intent ) , equalTo ( AmountUnitType . MASS ) ) ; }
private void onPaintingClick ( int position ) { animator . enter ( position , true ) ; }
public void onFailure ( @ NonNull Exception e ) { Toast . makeText ( InterestsActivity . this , "There Was an Issue Setting Up Your Interests . Please Try Again . " , Toast . LENGTH_LONG ) . show ( ) ; }
public void clearVideoTextureView ( TextureView textureView ) { verifyApplicationThread ( ) ; if ( textureView != null && textureView == this . textureView ) { setVideoTextureView ( null ) ; } }
public void artCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( mAnimation ) ; openChat ( "art" ) ; }
public static String DateToString ( Date date ) { final DateFormat format = new SimpleDateFormat ( "yyyy - MM - dd HH : mm : ss" , Locale . US ) ; return format . format ( date ) ; }
private void publishProgress ( long add ) { this . transferred += add ; if ( this . transferred >= this . size || publishTimer . isStep ( true ) ) this . listener . progress ( conn , this . transferred ) ; }
public Settings put ( String key , String value ) { SharedPreferences . Editor editor = getPrefs ( ) . edit ( ) ; editor . putString ( key , value ) ; editor . apply ( ) ; return this ; }
public static boolean isRun ( ) { return gPrefs . getBoolean ( RUN_NOTIFICATION , true ) ; }
public FeedViewModel ( @ NonNull Application application ) { super ( application ) ; repo = RepositoryHelper . getFeedRepository ( application ) ; }
public CpuSpyApp ( int core , Context context ) { PREF_OFFSETS = "offsets" + core ; mMonitor = new CpuStateMonitor ( core ) ; loadOffsets ( context ) ; }
private NodeList getNodes ( ZipFile epubFile ) throws IOException { String toc = getTOC ( epubFile ) ; return pdfParser . getNavigationPoints ( toc ) ; }
public void subtractionMedalsOftenEnough ( ) throws IOException { assertFrequentEnoughMedals ( GameType . SUBTRACTION ) ; }
public void onLoginUpdated ( @ Observes LoginUpdatedEvent event ) { CredentialsManager . save ( PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) , event . getCredentials ( ) ) ; }
public void startAddingUsersToManagers ( int accountId , int groupId , ArrayList < User > users ) { PlaceFactory . getCommunityManagerAddPlace ( accountId , groupId , users ) . tryOpenWith ( requireActivity ( ) ) ; }
public static void dropTable ( Database db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "\"PGE_G11_BILL\"" ; db . execSQL ( sql ) ; }
public void run ( ) { Toast . makeText ( context , "sent : " + s , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onBackPressed ( ) { Intent intent = new Intent ( this , StartActivity . class ) ; startActivity ( intent ) ; finish ( ) ; } */
public void onDateDialogPositiveButton ( int year , int month , int dayOfMonth ) { DateTime date = new DateTime ( year , month , dayOfMonth , 0 , 0 ) ; view . setDateText ( DateUtils . datetimeToString ( date ) ) ; }
public static void redirectToPointsManagerActivity ( @ NonNull Activity currentActivity ) { Intent pointsManagerIntent = new Intent ( currentActivity , PointsManagerActivity . class ) ; currentActivity . startActivity ( pointsManagerIntent ) ; }
public long getItemId ( int position ) { return options [ position ] . name ; }
public String getImei ( ) { return imei ; }
public void onSubscribe ( Disposable disposable ) { mCompositeDisposable . add ( disposable ) ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { if ( cardFiltersChangeListener != null && ! isResetting ) { cardFiltersChangeListener . onCapacitiesChanged ( cryptCapacitySeekBars . getMinSeekBarValue ( ) , cryptCapacitySeekBars . getMaxSeekBarValue ( ) ) ; } trackingTouchStarted = false ; }
private void initBirthdaysWidgetPrefs ( ) { binding . widgetShowPrefs . setChecked ( getPrefs ( ) . isBirthdayInWidgetEnabled ( ) ) ; binding . widgetShowPrefs . setOnClickListener ( view -> changeWidgetPrefs ( ) ) ; binding . widgetShowPrefs . setDependentView ( binding . birthReminderPrefs ) ; }
public boolean isErrorMessage ( ) { return ( mErrorMessage != ErrorMessage . NONE ) ; }
private void clearSectionOffset ( ) { data . edit ( ) . remove ( SECTION_ID_OFFSET ) . apply ( ) ; }
public void onRefresh ( ) { for ( int i = 0 ; i < this . model . weatherSize ( ) ; i ++ ) { this . networkManager . addRequest ( this . model . getItem ( i ) ) ; } isOkToCancelRefresh = true ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "CREATE INDEX `index_message_ui_flagged` ON `message` ( `ui_flagged` ) " ) ; }
private double mitom ( double num ) { return num * 1609 . 35d ; }
public synchronized void freeMemory ( ) { if ( mWebView != null && Build . VERSION . SDK_INT < Build . VERSION_CODES . KITKAT ) { mWebView . freeMemory ( ) ; } }
public void setup ( ) { super . initialize ( ) ; IdlingRegistry . getInstance ( ) . register ( networkIdlingResource ) ; when ( mockSpotifyApi . isAccessTokenValid ( ) ) . thenReturn ( true ) ; setSpotifyApiResult ( 60 ) ; }
public void unbind ( QuranPageScreen screen ) { this . screen = null ; compositeDisposable . clear ( ) ; }
public void run ( ) { mActivityRule . getActivity ( ) . onBackPressed ( ) ; }
public void launchDetailActivity ( int position ) { Intent intent = new Intent ( this , DetailActivity . class ) ; intent . putExtra ( DetailActivity . EXTRA_POSITION , position ) ; startActivity ( intent ) ; }
private boolean responding ( ) { return responder != null && responder . equals ( account . getJid ( ) ) ; }
public boolean onInfo ( MediaPlayer mp , int what , int extra ) { if ( what == MediaPlayer . MEDIA_INFO_VIDEO_RENDERING_START ) app_logo . setVisibility ( View . VISIBLE ) ; return false ; }
public java . util . List < com . openwallet . core . protos . Protos . TransactionInput > getTransactionInputList ( ) { return transactionInput_ ; }
public void onEntryMove ( VaultEntry entry1 , VaultEntry entry2 ) { _listener . onEntryMove ( entry1 , entry2 ) ; }
public Completable resetAll ( ) { return countersDao . resetValues ( ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { AccountsActivity . createDefaultAccounts ( Money . DEFAULT_CURRENCY_CODE , getActivity ( ) ) ; }
public final void onProgressStarted ( int length ) { Message msg = obtainMessage ( BEGIN_PROGRESS , length , 0 ) ; sendMessage ( msg ) ; }
public NiceVideoPlayerController ( Context context ) { super ( context ) ; mContext = context ; this . setOnTouchListener ( this ) ; }
private EncryptedState ( VaultFile file ) { super ( true ) ; _file = file ; }
public void onClick ( DialogInterface dialogInterface , int i ) { cancelScheduledReminder ( ) ; }
private boolean isInHardwareKeystore ( ) throws KeyChainException , InterruptedException { String algorithm = KeyChain . getPrivateKey ( getActivity ( ) . getApplicationContext ( ) , mProfile . mAlias ) . getAlgorithm ( ) ; return KeyChain . isBoundKeyAlgorithm ( algorithm ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . iv_letstart : fragmentBookInterface . finishedActivity ( true ) ; } }
public PhotoSizeEntity setQ ( Size q ) { this . q = q ; return this ; }
public static String getServerURI ( ) { return getString ( "pref_network_uri" , null ) ; }
public void resume ( ) { player . setPlayWhenReady ( true ) ; }
public static String toDateText ( Context context , Date date ) { return getDateFormatter ( context ) . format ( date ) ; }
public void onClick ( View v ) { onVarClicks ( ) ; if ( previousAns != null ) { currentCalculation += previousAns ; displayCalculation += "Ans" ; calculationView . setText ( displayCalculation ) ; } equalsMethod ( ) ; onAllClicks ( ) ; }
public void onSearchPressed ( EditText editText ) { updateSearchButtons ( 0 , 0 , 0 ) ; MessagesSearchQuery . searchMessagesInChat ( editText . getText ( ) . toString ( ) , dialog_id , mergeDialogId , classGuid , 0 ) ; }
private void removeActiveKnownLocation ( ) { mActiveMarker = null ; mMapClickMarkerOptions = null ; }
public String getLate ( ) { return this . late ; }
private PathItemView ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( ) ; }
public int getItemCount ( ) { return issuesCards . size ( ) ; }
public List < String > getGlossValue ( ) { return glossValue ; }
public static boolean isPowerIndicatorShown ( final Context context ) { SharedPreferences sp = PreferenceManager . getDefaultSharedPreferences ( context ) ; return sp . getBoolean ( PREF_POWER_INDICATOR , false ) ; }
public DataElement ( boolean bool ) { value = bool ? Boolean . TRUE : Boolean . FALSE ; valueType = BOOL ; }
public void setDataSet ( IPieDataSet dataSet ) { mDataSets . clear ( ) ; mDataSets . add ( dataSet ) ; notifyDataChanged ( ) ; }
public void onAnimationEnd ( Animator animation ) { Utils . showGameWonStuff ( mainActivity ) ; }
public String getArgument ( String string , CommandSender sender ) throws CommandParsingException { return string ; }
public static AppObject get ( ) { return _instance ; }
public void onItemClick ( AdapterView < ? > adapterView , View view , int i , long l ) { Toast . makeText ( getContext ( ) , values1 [ i ] , Toast . LENGTH_SHORT ) . show ( ) ; }
public long getContentPosition ( ) { verifyApplicationThread ( ) ; return player . getContentPosition ( ) ; }
public void setGraphMonthXLabels ( String [ ] labels ) { chartMonth . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter <> ( labels ) ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { if ( dy <= 0 && fab . getId ( ) != 0 ) { fab . show ( ) ; } else { fab . hide ( ) ; } }
public static int getChildViewType ( int rawViewType ) { return ItemViewTypeComposer . extractWrappedViewTypePart ( rawViewType ) ; }
public int getItemCount ( ) { return dataObject . getDay ( day ) . length ; }
public static String getLanguage ( Context context ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; return prefs . getString ( LANGUAGE_KEY , LanguageUtils . getCurrentDeviceLanguageCode ( ) ) ; }
public void setTimezone ( @ NonNull String timezone ) { this . timezone = TimeZone . getTimeZone ( timezone ) ; }
public int getItemCount ( ) { return getBottomMenuItemsStart ( ) + mMenuItems . size ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; this . addPreferencesFromResource ( R . xml . settings ) ; PreferenceManager . getDefaultSharedPreferences ( SettingsActivity . getAppContext ( ) ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public boolean getAscending ( ) { return CacheUtil . getCache ( getActivity ( ) , getCategory ( ) + ORDER_ASCENDING , false ) ; }
public com . openwallet . core . protos . Protos . PeerAddress getBroadcastBy ( int index ) { return broadcastBy_ . get ( index ) ; }
public static IStorages getInstance ( ) { return Injection . provideStores ( ) ; }
public void onData ( NetworkDevice origin , SensorData sensorData , float userSensitivity ) { filter ( sensorData . data ) ; forwardData ( origin , sensorData , userSensitivity ) ; }
public float getX ( ) { return x ; }
public void disconnected ( Connection connection ) { Gdx . app . postRunnable ( new Runnable ( ) { @ Override public void run ( ) { _app . gotoErrorScreen ( "No ! We lost contact with the host ! " ) ; } } ) ; }
public void removeCertListener ( ICertChangedListener l ) { synchronized ( mListeners ) { mListeners . remove ( l ) ; } }
public ApplicationsItemHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ApplicationsItemHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_application , parent , false ) ) ; }
public static String encodeToJSON ( @ Nullable Map < ? , ? > map ) { return JSON . toJSONString ( map ) ; }
public void setUp ( ) throws Exception { presenter = new SortingDialogPresenterImpl ( interactor ) ; presenter . setView ( view ) ; }
private void selectLastCategoryForPayee ( long id ) { Payee p = db . get ( Payee . class , id ) ; if ( p != null ) { categorySelector . selectCategory ( p . lastCategoryId ) ; } }
public String getUrl ( ) { return url ; }
public List < Banknote > getList ( ) { return banknotes ; }
public static com . openwallet . core . protos . Protos . WalletPocket parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public VH getViewHolder ( int position ) { return attached . get ( position ) ; }
public void addItem ( Item item ) throws IOException { add ( item ) ; mTotalSize += item . getLongProperty ( Item . SIZE , true ) ; }
public boolean onUnpinch ( int i , long l , double v ) { return _callback . onDrawerGesture ( _desktop , Type . Unpinch ) ; }
private void drawDrawable ( Canvas canvas , Drawable draw , int startingX , int startingY , int endingX , int endingY ) { draw . setBounds ( startingX , startingY , endingX , endingY ) ; draw . draw ( canvas ) ; }
public ModelListElement ( String text , String key , ModelType type ) { this . text = text ; this . key = key ; this . type = type ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( type ) ; dest . writeFloat ( value ) ; }
public MyViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = getLayoutInflater ( ) . inflate ( R . layout . item_detail , parent , false ) ; return new MyViewHolder ( view ) ; }
public void onSearchTextChanged ( String oldQuery , String newQuery ) { Log . debug ( getClass ( ) , "Searching for district with query '%s'" , newQuery ) ; districtsAdapter . search ( newQuery , cityId ) ; }
public void setNoteList ( List < NoteBlock > noteList ) { if ( noteList == null ) { return ; } mNoteBlockList = noteList ; notifyDataSetChanged ( ) ; }
private double mlTogallon ( double num ) { return num * 0 . 0002641722d ; }
public String getLat ( ) { return lat ; }
public void onPostSelected ( final RedditPreparedPost post ) { ( ( RedditPostView . PostSelectionListener ) mActivity ) . onPostSelected ( post ) ; }
public void execute ( @ NonNull Realm realm ) { realm . copyToRealmOrUpdate ( noteDAO ) ; }
public void setListener ( ClientItemListener listener ) { this . listener = listener ; }
public Integer getId ( ) { return _id ; }
private void onCreateIngredientResult ( @ NonNull List < IngredientTypeCreateError > errors ) { showErrorMessage ( errors ) ; if ( ! errors . isEmpty ( ) ) { requestFocusToField ( errors . get ( 0 ) ) ; } }
public void setPaintBackgroundColor ( @ ColorRes int color ) { paintBackground . setColor ( ContextCompat . getColor ( getContext ( ) , color ) ) ; invalidate ( ) ; }
public static boolean rootAccess ( ) { SU su = getSU ( ) ; su . runCommand ( "echo /testRoot/" ) ; return ! su . denied ; }
public void run ( ) { showSuccess ( R . string . msg_bookmark_added ) ; mWebViewScrollCallbacks . toggleTopToolbar ( true ) ; hideLoadingAnimation ( ) ; }
private void onDeleteItem ( int position ) { mConnectionManager . remove ( position ) ; mConnectionManager . commit ( ) ; mAdapter . notifyDataSetChanged ( ) ; }
public Data ( ) { isRunning = false ; distanceM = 0 ; curSpeed = 0 ; maxSpeed = 0 ; timeStopped = 0 ; }
public double getShitRatingPrivacy ( ) { return ShitRatingPrivacy ; }
public void test1LoginPortrait ( ) throws Exception { driver . rotate ( ScreenOrientation . PORTRAIT ) ; Actions . login ( Config . URL , Config . user , Config . password , Config . isTrusted , driver ) ; common . assertIsInFileListView ( ) ; }
private int getArg1 ( int defaultValue ) { return getArg ( 1 , defaultValue , true ) ; }
public void yes ( ) { context . startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( GP_MARKET + context . getPackageName ( ) ) ) ) ; preferenceController . appRated ( ) ; dismiss ( ) ; }
public String getEnergyUnit ( ) { return energyUnit ; }
private void openUserProfile ( ) { openPage ( ConstantUtil . USER_PROFILE_SELF_FAKE_URL , getString ( R . string . personal_center ) ) ; }
public UUID getSession ( ) { return mSession ; }
private void initializeDictionaryRoot ( final String fileName ) throws DictionaryException { dictionaryRoot = DictionaryDataFile . pathNameDataFiles + File . separator ; final boolean isRootInSubDirectory = fileExists ( fileName ) ; if ( ! isRootInSubDirectory ) { dictionaryRoot = "" ; } }
public void onFocusChange ( final View v , final boolean hasFocus ) { if ( ! hasFocus ) { validateAddress ( ) ; } }
public ProfileDrawerItem withTextColor ( @ ColorInt int textColor ) { this . textColor = ColorHolder . fromColor ( textColor ) ; return this ; }
public void hideLoadingIcon ( ) { setProgressBarIndeterminateVisibility ( false ) ; }
public void finish ( MainList frag , List < Task > result ) { frag . adapter . update ( result , frag . info ) ; }
private void bindToService ( ) { Intent intent = new Intent ( getActivity ( ) , AudioRecordService . class ) ; getActivity ( ) . bindService ( intent , serviceConnection , Context . BIND_AUTO_CREATE ) ; registerLocalBroadCastReceiver ( ) ; }
public CheckableRelativeLayout ( @ NonNull Context context ) { super ( context ) ; }
public void onAnimationStart ( Animator p1 ) { emptyList . setVisibility ( View . GONE ) ; attendanceList . clear ( ) ; mAdapter . notifyDataSetChanged ( ) ; mAdapter . resetAnimation ( ) ; }
public void testGetPlateMatchingPatternOneLetter ( ) { String plateToFind = "KR" ; Place malbork = createPlaceWithPlates ( plateToFind , "KK" , "KM" ) ; LicensePlateDto plate = malbork . getPlateMatchingPattern ( "K" ) ; assertEquals ( plateToFind , plate . pattern ( ) ) ; }
public void hasTelephone ( ) { Library empty = new Library ( ) ; assertFalse ( empty . hasTelephone ( ) ) ; Library full = generate ( Library . class ) ; assertTrue ( full . hasTelephone ( ) ) ; }
public void loadInput ( ) { spinner = findViewById ( R . id . spinner ) ; spinner . setOnItemSelectedListener ( this ) ; ConstraintLayout constraintLayout = findViewById ( R . id . constraintLayoutDietDetails ) ; constraintLayout . requestFocus ( ) ; }
public void update ( List < AddressEntry > addressEntries , List < AddressEntry > addressEntriesMarked ) { this . addressEntries = addressEntries ; this . addressEntriesMarked = addressEntriesMarked ; }
public int getImageMaxSize ( Context context ) { return 6 * MB ; }
public void bind ( @ NonNull Contract view ) { super . bind ( view ) ; App . getApplication ( ) . getAppComponent ( ) . inject ( this ) ; }
public boolean isConnected ( ) { return mDelegate . isConnected ( ) ; }
public LeakCanaryProxyImpl ( @ NonNull MarietjeApp app ) { this . app = app ; }
public Double getWs ( ) { return ws ; }
public void onClick ( View v ) { PointsExporterDialog . this . dismiss ( ) ; }
public void goGoogleTranslate ( ) { if ( internetAvailableWatcher ) { this . translateInGoogleTranslate ( vocabulary ) ; } else { noInternetConnectionAlerter ( ) ; } }
public boolean nextSlide ( ) { int currentItem = miPager . getCurrentItem ( ) ; return goToSlide ( currentItem + 1 ) ; }
public void runOnUI ( String token , @ NonNull ThrowingRunnable runnable ) { runOnUI ( token , runnable , null ) ; }
public void onDestroy ( ) { delegate . onDestroy ( ) ; super . onDestroy ( ) ; }
public void initialize ( final TripViewObserver observer ) { ui . stub . setOnLayoutInflatedListener ( new OnLayoutInflatedListener ( ) { @ Override public void onLayoutInflated ( WatchViewStub stub ) { ui . load ( ) ; onLoad ( observer ) ; } } ) ; }
public static DatabaseFactory getInstance ( Context context ) { synchronized ( lock ) { if ( instance == null ) instance = new DatabaseFactory ( context . getApplicationContext ( ) ) ; return instance ; } }
public void onResume ( ) { super . onResume ( ) ; new ActivityFeatures . Builder ( ) . begin ( ) . setBlockNavigationDrawer ( true ) . setStatusBarColored ( false , false ) . build ( ) . apply ( requireActivity ( ) ) ; }
public void setDTR ( boolean state ) { if ( state ) { setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SIO_SET_DTR_HIGH , 0 ) ; } else { setControlCommand ( FTDI_SIO_MODEM_CTRL , FTDI_SIO_SET_DTR_LOW , 0 ) ; } }
public void onDestroy ( ) { rewardedVideoAd . destroy ( this ) ; super . onDestroy ( ) ; }
public void destroyItem ( @ NonNull ViewGroup container , int position , @ NonNull Object object ) { mRegisteredFragments . remove ( position ) ; super . destroyItem ( container , position , object ) ; }
public String createNotificationText ( final Context context , final boolean goingDown ) { return mLinphoneCallState . createNotificationText ( context , getContactName ( ) , goingDown ) ; }
public VersionedRook retrieveBook ( String fileName , File file ) throws IOException { SystemClock . sleep ( SLEEP_FOR_RETRIEVE_BOOK ) ; return databaseRepo . retrieveBook ( fileName , file ) ; }
public static boolean isAlbums ( String baseSubreddit ) { return filters . getBoolean ( baseSubreddit + "_albumsFilter" , false ) ; }
private boolean isConnected ( ) { return mConnectionState == STATE_CONNECTED ; }
public void setAuthorName ( String name ) { this . mAuthorName = StringUtils . notNullStr ( name ) ; }
public String getColor ( ) { return color ; }
public Builder listener ( ServerListener listener ) { this . listener = listener ; return this ; }
public Builder setInputDirection ( int value ) { bitField0_ | = 0x00000020 ; inputDirection_ = value ; onChanged ( ) ; return this ; }
public static int [ ] toSortedCodePointArray ( final String string ) { final int [ ] codePoints = toCodePointArray ( string ) ; Arrays . sort ( codePoints ) ; return codePoints ; }
private String deleteFiltered ( String data , int id ) { return data . replace ( KcaUtils . format ( "|%d|" , id ) , "|" ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return User . TLdeserialize ( stream , constructor , exception ) ; }
public void onBackPressed ( ) { if ( searchToolbar . isVisible ( ) ) searchToolbar . collapse ( ) ; else if ( isRelayingMessageContent ( this ) ) { handleResetRelaying ( ) ; finish ( ) ; } else super . onBackPressed ( ) ; }
private static String removeTitleFromText ( String text , String title ) { return text ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . needReloadArchivedStickers ) ; }
public long getStartDate ( ) { return startDate ; }
public static VpnProfile getAlwaysOnVPN ( Context context ) { checkInstance ( context ) ; SharedPreferences prefs = Preferences . getDefaultSharedPreferences ( context ) ; String uuid = prefs . getString ( "alwaysOnVpn" , null ) ; return get ( uuid ) ; }
public void onStart ( ) { super . onStart ( ) ; if ( needsPermissions ( ) ) { CheckBoxPreference allowPreference = ( CheckBoxPreference ) findPreference ( Constants . PREF_ALLOW_WEBRTC ) ; allowPreference . setChecked ( false ) ; } }
public void onBindViewHolder ( ViewHolder holder , int position ) { holder . displayRecordData ( data . get ( position ) , position + 1 ) ; }
public void listItemClick ( Shop shop , int position ) { PrefShopHome . saveShop ( shop , getActivity ( ) ) ; Intent intent = new Intent ( getActivity ( ) , ItemsInShopByCat . class ) ; startActivity ( intent ) ; }
public void setX ( int x ) { _x = x ; }
private boolean isEmptyData ( ) { return recyclerView . getAdapter ( ) . getItemCount ( ) == 0 ; }
public HashMap < Object , Object > getSelectedPhotos ( ) { return selectedPhotos ; }
public void onServiceDisconnected ( ComponentName arg0 ) { mService = null ; }
public WMTSHandler ( ) { contents = new ArrayList <> ( ) ; }
public EducationEntity loadSync ( int educationId ) { return dataRepository . getDatabase ( ) . educationDao ( ) . loadSync ( educationId ) ; }
public int getCurrentParentForum ( ) { return mCurrentParentForumId ; }
public Loader < Artist > onCreateLoader ( int id , Bundle args ) { return new AsyncArtistDataLoader ( this , args . getInt ( EXTRA_ARTIST_ID ) ) ; }
public Binder < CommentVideoEmbedView > createBinder ( CommentModel model ) { return new CommentVideoEmbedBinder ( model ) ; }
public static Message create ( State state , String body , LocalDateTime time ) { return new AutoValue_Message ( state , body , time ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnSubmitResultListener ) { listener = ( OnSubmitResultListener ) context ; } else { throw new IllegalArgumentException ( context . toString ( ) + " must implement OnSubmitResultListener" ) ; } }
private static void openSettings ( MainActivity c ) { if ( settings == null ) { settings = c . getSharedPreferences ( pref_fname , 0 ) ; } }
public void didSelectAudio ( ArrayList < MessageObject > audios ) { SendMessagesHelper . prepareSendingAudioDocuments ( audios , dialog_id , replyingMessageObject ) ; showReplyPanel ( false , null , null , null , false ) ; DraftQuery . cleanDraft ( dialog_id , true ) ; }
public SectionViewHolder ( View view , int mTextResourceid ) { super ( view ) ; title = view . findViewById ( mTextResourceid ) ; }
public QueryRow setAllDay ( Object obj ) { return setColumn ( CalendarContract . Instances . ALL_DAY , obj ) ; }
public void setSortingOrder ( String order ) { CacheUtil . setCache ( getActivity ( ) , getCategory ( ) + SORT_ORDER , order ) ; updateDocumentList ( ) ; }
public void onFetchDataFailed ( String errorMessage ) { onFetchDataSuccess ( ) ; getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_generic ) , getString ( R . string . dialog_error_message_generic ) ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { pm . getUserManager ( ) . set ( R . string . preferences_user_display_breaks , isChecked ) ; refreshTheme ( ) ; }
public void onNext ( Station station ) { view . setStation ( station ) ; }
public void onStop ( ) { super . onStop ( ) ; if ( mGoogleApiClient != null && mGoogleApiClient . isConnected ( ) ) { LocationServices . FusedLocationApi . removeLocationUpdates ( mGoogleApiClient , this ) ; mGoogleApiClient . disconnect ( ) ; } }
public long getEndTimeUs ( ) { return startTimeUs + durationUs ; }
public void signInGoogle ( ) { Intent signInIntent = Auth . GoogleSignInApi . getSignInIntent ( googleApiClient ) ; startActivityForResult ( signInIntent , REQUEST_SIGN_IN ) ; }
public static < T > FindExecutor < T > findAsync ( Class < T > modelClass , long id ) { return findAsync ( modelClass , id , false ) ; }
public static boolean hasIdentityKey ( Context context ) { SharedPreferences preferences = context . getSharedPreferences ( MasterSecretUtil . PREFERENCES_NAME , 0 ) ; return preferences . contains ( IDENTITY_PUBLIC_KEY_PREF ) && preferences . contains ( IDENTITY_PRIVATE_KEY_PREF ) ; }
public List < ComputerParcelable > getResults ( ) { return new ArrayList <> ( this . mResults ) ; }
public void onClick ( DialogInterface dialog , int which ) { createKeyMapForBlock ( sector , false ) ; }
public void onEvent ( Events . WaypointUpdated e ) { locationProcessor . publishWaypointMessage ( e . getWaypointModel ( ) ) ; removeGeofences ( ) ; setupGeofences ( ) ; }
public MultiTypeAdapter ( Context context , ViewTypeMapper < ItemType > mapper ) { super ( context , mapper ) ; mOnBindListeners = new HashMap <> ( ) ; }
public static String getSharedString ( Context ctx , String key ) { SharedPreferences preferences = ctx . getSharedPreferences ( LocalConstants . SHARED_PREFERENCE_CONTIGOAPP , Context . MODE_PRIVATE ) ; return preferences . getString ( key , null ) ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; initializeTrackInformation ( ) ; }
public void clearRecentHashtags ( ) { searchAdapterHelper . clearRecentHashtags ( ) ; searchResultHashtags . clear ( ) ; notifyDataSetChanged ( ) ; if ( delegate != null ) { delegate . needChangePanelVisibility ( false ) ; } }
public void onDetach ( ) { super . onDetach ( ) ; mBottomNavController = null ; }
public void onServiceStateChanged ( ServiceState serviceState ) { Log . v ( TAG , "onServiceStateChanged " + serviceState ) ; if ( serviceState . getState ( ) != ServiceState . STATE_IN_SERVICE ) { mCurrentCellSignalStrengthDbm = NetMonSignalStrength . SIGNAL_STRENGTH_NONE_OR_UNKNOWN ; } }
public final boolean isKeyword ( String s ) { return _keywordsMap . containsKey ( s ) ; }
public int getToolBarWidth ( ) { return menu . size ( ) * itemWidth ; }
private Completable deleteAccount ( AccountsDatabase accountsDatabase ) { return SavedAccountsUtils . deleteAccount ( getApplication ( ) , accountsDatabase , address ) ; }
private Word getPreviousWord ( int wordId ) { if ( wordId <= 0 ) { wordId = Constants . MAX_WORD_ID ; } Word word = service . getWord ( -- wordId ) ; return word != null ? word : getPreviousWord ( wordId ) ; }
public boolean isUploading ( @ NonNull TrackFile trackFile ) { final TrackState state = trackState . get ( trackFile ) ; return state instanceof TrackState . TrackUploading ; }
public void notifyItemRemoved ( int position ) { updateRows ( ) ; try { super . notifyItemRemoved ( position ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public void onBindFastAccessItemViewHolder ( VH viewHolder , int position ) { int calculatedPosition = getCalculatedPosition ( position ) ; onBindItemViewHolder ( viewHolder , fastRecords . get ( calculatedPosition ) ) ; }
public boolean onLongClick ( View v ) { currentCalculation += " , " ; displayCalculation += " , " ; calculationView . setText ( displayCalculation ) ; equalsMethod ( ) ; onAllClicks ( ) ; return true ; }
private ActivityViewHeaderHolder ( View itemView ) { super ( itemView ) ; title = itemView . findViewById ( R . id . title_header ) ; }
public void reset ( View loader ) { if ( ! isConnected ( ) ) return ; ServerCommunication . resetSecret ( user_id , user_key , loader ) ; }
public boolean onQueryTextChange ( String query ) { final List < Member > filteredModelList = filter ( mMembers , query ) ; mMeberListAdapter . animateTo ( filteredModelList , query ) ; mMemberListView . scrollToPosition ( 0 ) ; return true ; }
public BleManager setOperateTimeout ( int count ) { this . operateTimeout = count ; return this ; }
private void initCircleOverlay ( ) { circleOverlay = new CircleLocationOverlay ( getContext ( ) ) ; getOverlays ( ) . add ( OVERLAYS_LOCATION_CIRCLE_INDEX , circleOverlay ) ; }
private void beforeSave ( LitePalSupport baseObj , List < Field > supportedFields , ContentValues values ) throws SecurityException , IllegalArgumentException , NoSuchMethodException , IllegalAccessException , InvocationTargetException { putFieldsValue ( baseObj , supportedFields , values ) ; putForeignKeyValue ( values , baseObj ) ; }
public String getType ( ) { return type ; }
public TalkDetailsHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View inflated = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . details_recyclerview_talk , parent , false ) ; return new TalkDetailsHolder ( context , inflated ) ; }
public void onReceive ( Context context , Intent intent ) { EntityLog . log ( context , account . name + " keep alive wake lock = " + wlAccount . isHeld ( ) ) ; state . release ( ) ; }
public void onRecentFromQueue ( int pos ) { onQueueItemClicked ( pos ) ; }
private void updateMenuItemVisibility ( ) { if ( mMarkAllAsReadMenuItem == null ) { return ; } mMarkAllAsReadMenuItem . setVisible ( isContentShown ( ) && mAdapter . hasUnreadNotifications ( ) ) ; }
public void modify ( String oldpath , String oldname , String newPath , String newname ) { utilsHandler . renameBookmark ( oldname , oldpath , newname , newPath ) ; drawer . refreshDrawer ( ) ; }
public void postScale ( float scaleDiff ) { Log . i ( "Layer" , "ScaleDiff : " + scaleDiff ) ; float newVal = scale + scaleDiff ; if ( newVal >= getMinScale ( ) && newVal <= getMaxScale ( ) ) { scale = newVal ; } }
public String getComparableName ( ) { Contact contact = getContact ( ) ; if ( contact != null ) { return contact . getDisplayName ( ) ; } else { String name = getName ( ) ; return name == null ? "" : name ; } }
public final void setShowedYear ( int showedYear ) { this . showedYear = showedYear ; }
public void onClick ( DialogInterface dialog , int which ) { guiListener . shutdown ( true , true , false ) ; AndroidSingleton . onRealDestroy ( ) ; finish ( ) ; }
public void onBackPressed ( ) { FragmentManager fm = getSupportFragmentManager ( ) ; if ( fm . getBackStackEntryCount ( ) > 0 ) { fm . popBackStack ( ) ; } else { super . onBackPressed ( ) ; } }
public ScoreCalculator ( Board board , Bounds bounds ) { this . bounds = bounds ; this . board = board ; this . finder = CombinationFinder . create ( board ) ; }
public void start ( Attributes attributes ) { mCurrentPost . setDateFromTimestamp ( Integer . parseInt ( attributes . getValue ( TopicParser . DATE_TIMESTAMP_ATTRIBUTE ) ) ) ; }
public void onClick ( View view ) { SpeedDialActionItem speedDialActionItem = getSpeedDialActionItem ( ) ; if ( mOnActionSelectedListener != null && speedDialActionItem != null && speedDialActionItem . isLabelClickable ( ) ) { mOnActionSelectedListener . onActionSelected ( speedDialActionItem ) ; } }
public void hideResetButton ( boolean hide ) throws IOException { mClientManager . hideResetButton ( hide ) ; }
private ChannelTransformer ( @ NonNull Subject < T , T > target ) { this . target = target ; }
private void fireNewQuery ( String query ) { Fragment fragment = getChildFragmentManager ( ) . findFragmentById ( R . id . child_container ) ; if ( fragment instanceof AbsSearchFragment ) { ( ( AbsSearchFragment ) fragment ) . fireTextQueryEdit ( query ) ; } }
public static String getLocalisedSettingGroupName ( String notLocalised ) { return Localization . get ( "setting . " + notLocalised ) ; }
public ScheduleCardAdapter ( ArrayList < Integer > list , Context context ) { this . list = list ; this . context = context ; }
public static boolean remindersSound ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_reminders_sound ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_reminders_sound ) ) ; }
public void onPastPosts ( ) { final SessionListDialog sessionListDialog = SessionListDialog . newInstance ( postListingController . getUri ( ) , postListingController . getSession ( ) , SessionChangeListener . SessionChangeType . POSTS ) ; sessionListDialog . show ( getSupportFragmentManager ( ) , null ) ; }
private AixUpdate ( Context context , AixWidgetInfo aixWidgetInfo , AixSettings aixSettings ) { mContext = context ; mAixWidgetInfo = aixWidgetInfo ; mWidgetUri = aixWidgetInfo . getWidgetUri ( ) ; mAixSettings = aixSettings ; mUtcTimeZone = TimeZone . getTimeZone ( "UTC" ) ; }
public boolean onClick ( View v , IAdapter < IconLabelItem > adapter , IconLabelItem item , int position ) { if ( onAppSelectedListener != null ) { onAppSelectedListener . onAppSelected ( apps . get ( position ) ) ; } dialog . dismiss ( ) ; return true ; }
public static String [ ] getAllColumns ( ) { return new String [ ] { COLUMN_ENTRY_ID , COLUMN_PERSON_PHONE_NUMBER , COLUMN_STATUS , COLUMN_AMOUNT , COLUMN_DATE_DUE , COLUMN_DATE_ENTERED , COLUMN_NOTE , COLUMN_TYPE } ; }
public void findAndSelect ( final int lastUsedBlogLocalId ) { int positionInSitesArray = mSites . indexOfSiteId ( lastUsedBlogLocalId ) ; if ( positionInSitesArray != - 1 ) { selectSingleItem ( positionInSitesArray + getPositionOffset ( ) ) ; } }
public Airport ( String icao , String description ) { this . icao = icao . toUpperCase ( Locale . US ) ; this . description = description ; }
public ArrayList < Event > getDayTwoEvents ( ) { return dayTwoEvents ; }
public void setCrash ( String mCrash ) { this . mCrash = mCrash ; }
private void cancelTasks ( ) { cancelTask ( testConnectionTask ) ; cancelTask ( getCredentialsTask ) ; cancelTask ( testApiAccessTask ) ; }
public List < OCFile > sortCloudFiles ( List < OCFile > files ) { return sortCloudFilesByFavourite ( files ) ; }
public void getTrendingVideosFeed ( ) { queURL ( "javascript : getTrendingVideosFeed ( null , null ) ; " ) ; }
public void onBindViewHolder ( ListEntry holder , int position ) { holder . bind ( mFilteredEntries == null ? mEntries . get ( position ) : mFilteredEntries . get ( position ) ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { if ( viewType == HEADER_VIEW_TYPE ) { return mDetailsViewHolder ; } return new CommentViewHolder ( parent , mLayoutInflater . inflate ( R . layout . item_view_comment , parent , false ) ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof FragmentInteractionListener ) { mFragmentListener = ( FragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnInteractionListener" ) ; } }
public void onItemRangeRemoved ( int positionStart , int itemCount ) { if ( adapter . getItemCount ( ) - itemCount == 0 ) { show ( ) ; } }
public static final Migration MIGRATION_1_2 = new Migration ( 1 , 2 ) { @ Override public void migrate ( SupportSQLiteDatabase database ) { database . execSQL ( "ALTER TABLE 'Product' ADD COLUMN 'barCode' TEXT NULL" ) ; } } ;
public final @ Nullable T getMediaCrypto ( ) { return mediaCrypto ; }
private byte [ ] getBytesFromString ( String string ) { return string . getBytes ( Charset . defaultCharset ( ) ) ; }
public void onConnectivityLost ( ) { final Thread t = new Thread ( ) { @ Override public void run ( ) { disconnectAll ( false , true ) ; } } ; t . setName ( "Disconnector" ) ; t . start ( ) ; }
public void onFailure ( Call < MovieResults > call , Throwable t ) { t . printStackTrace ( ) ; }
public void showFontRatingDialog ( UrduFont font ) { showRatingDialog ( getActivity ( ) , font . getName ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; deviceStatus = 0 ; identityCheck = 0 ; setFilters ( ) ; startService ( UsbService . class , usbConnection , null ) ; }
public void onBindViewHolder ( @ NonNull TestInfoViewHolder holder , int position ) { holder . binding . setTestInfo ( mTestList . get ( position ) ) ; holder . binding . executePendingBindings ( ) ; }
public int hashCode ( ) { return Objects . hash ( uuid , title , createdAt , changedAt , position , expanded , parentTodoListUuid ) ; }
public void onClick ( View v ) { if ( data . getFixtureId ( ) != "null" ) { mMatchweekItemClickListener . onEplMatchWeekClicked ( data . getFixtureId ( ) ) ; } }
public List < MovieTrailerEntity > getTrailers ( ) { return trailers ; }
private boolean checkServiceOn ( ) { return isAccessibilityServiceEnabled ( getApplicationContext ( ) ) ; }
public void downloadFiles ( Context context , RestServer server ) throws StorytellingException { this . page . downloadFiles ( context , server ) ; }
public void run ( ) { mChartAdapter . notifyDataSetChanged ( ) ; mHandler . postDelayed ( triggerRefresh , OpenVPNManagement . mBytecountInterval * 1500 ) ; }
public void onResponse ( BaseItemDto response ) { mSelectedView . setRecTimer ( response . getTimerId ( ) ) ; }
private void registerListener ( Context context ) { if ( context instanceof OnOverviewFragmentInteractionListener ) { onOverviewFragmentInteractionListener = ( OnOverviewFragmentInteractionListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnOverviewFragmentInteractionListener" ) ; } }
private void addPostToPostCount ( @ NonNull PostImmutableModel post ) { sNotificationData . mUploadedPostsCounted . add ( post ) ; }
public void onClick ( View v ) { PickDOBDialog dialog = new PickDOBDialog ( ) ; dialog . show ( getSupportFragmentManager ( ) , "TAG" ) ; }
public static void setBestPreviewFPS ( Camera . Parameters parameters ) { setBestPreviewFPS ( parameters , MIN_FPS , MAX_FPS ) ; }
public void onRequestPermissionsResult ( int requestCode , @ NonNull String [ ] permissions , @ NonNull int [ ] grantResults ) { mMainActivity . checkPermissions ( ) ; }
public void onVolumeChanged ( ClientItem clientItem , int percent , boolean mute ) { if ( listener != null ) listener . onVolumeChanged ( this , clientItem , percent , mute ) ; updateVolume ( ) ; }
private int broadcast ( ) { mTransferManager . broadcastTransfers ( ) ; mTransferNotificationManager . stopService ( ) ; return START_NOT_STICKY ; }
public LocalDateTime read ( JsonReader in ) throws IOException { return ISO_FORMAT . parseDateTime ( in . nextString ( ) ) . toLocalDateTime ( ) ; }
public GithubOAuthClient ( Activity activity , Consumer < String > callback ) { this . callback = callback ; this . progressBar = activity . findViewById ( R . id . progressbar ) ; }
public static ChartView getPolyLineChartView ( Context context , LineChartSeries dataset , PolyLineChartRenderer renderer ) { PolyLineChart chart = new PolyLineChart ( dataset , renderer ) ; ChartView chartView = new ChartView ( context , chart ) ; return chartView ; }
public void setPendingActions ( RealmList < PendingAction > pendingActions ) { this . pendingActions = pendingActions ; }
private void notifySuccess ( @ NonNull List < GitHubAuthUser > gitHubAuthUsers ) { if ( callback != null ) { callback . onSuccess ( gitHubAuthUsers ) ; } }
private void EntrarEmModoPesquisa ( ) { idAppBarLayout . setVisibility ( View . INVISIBLE ) ; idAppBarLayoutSearch . setVisibility ( View . VISIBLE ) ; idEdtSearch . requestFocus ( ) ; FunctionsTools . showKeybord ( ListClientsActivity . this ) ; }
public List < SectionVO > getComics ( ) { return mComics ; }
public void onClick ( View view ) { resetValues ( ) ; showResistanceDialog ( firstColor ) ; }
public static boolean isValidMACAddress ( final String macAddress ) { return macAddress != null && PATTERN_MAC . matcher ( macAddress ) . matches ( ) ; }
public ThemeActivity ( int type ) { super ( ) ; currentType = type ; updateRows ( true ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return mHolder . onCreateHeaderItemViewHolder ( parent , viewType ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; binding . executePendingBindings ( ) ; }
public void setImageBitmap ( Bitmap bm ) { super . setImageBitmap ( bm ) ; handleImageChange ( ) ; }
public EventBuilder setReminderUnit ( @ NotNull TimeUnit reminderUnit ) { this . reminderUnit = reminderUnit ; return this ; }
private Model getAnswer ( String keyStr ) { Model model = new Model ( ) ; model . setType ( ActionType . ANSWER ) ; model . setAction ( worker . getAnswer ( keyStr ) ) ; return model ; }
public AddressStatus ( AbstractAddress address , @ Nullable String status ) { this . address = address ; this . status = status ; }
private void changeGlobalPrefs ( ) { boolean isChecked = binding . globalOptionPrefs . isChecked ( ) ; binding . globalOptionPrefs . setChecked ( ! isChecked ) ; getPrefs ( ) . setBirthdayGlobalEnabled ( ! isChecked ) ; }
public void setImage ( TLObject path , String filter , Bitmap thumb , int size ) { setImage ( path , null , filter , null , thumb , null , null , null , size ) ; }
public void reloadUrl ( String url ) { if ( getProgress ( ) < 100 ) { stopLoading ( ) ; } mPendingUrl = url ; loadUrl ( BLANK ) ; }
public static void createAllTables ( Database db , boolean ifNotExists ) { AppInfoDao . createTable ( db , ifNotExists ) ; LancherInfoDao . createTable ( db , ifNotExists ) ; }
private void editNote ( ) { startActivity ( new Intent ( NotePreviewActivity . this , CreateNoteActivity . class ) . putExtra ( Constants . INTENT_ID , mItem . getKey ( ) ) ) ; }
public TrainingBlogPost ( String postID , String link , String title , String content , Timestamp published ) { this . postID = postID ; this . link = link ; this . title = title ; this . content = content ; this . published = published ; }
public void onDisconnected ( ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { status . setText ( R . string . connection_lost ) ; } } ) ; }
public T withSelectedIconColorRes ( @ ColorRes int selectedColorRes ) { this . selectedIconColor = ColorHolder . fromColorRes ( selectedColorRes ) ; return ( T ) this ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . menu_player , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public @ Nullable MediaPeriodInfo getLastReportedPlayingMediaPeriod ( ) { return lastReportedPlayingMediaPeriod ; }
public void setProgress ( @ FloatRange ( from = 0f , to = 1f ) float progress ) { animator . setValue ( progress ) ; if ( compositionLayer != null ) { compositionLayer . setProgress ( progress ) ; } }
private void updateNotification ( final boolean notify , final List < String > conversations ) { updateNotification ( notify , conversations , false ) ; }
public VolumeKeyEvent ( long downTime , long eventTime , int action , int code , int repeat , int metaState ) { super ( downTime , eventTime , action , code , repeat , metaState ) ; this . mVolumeKeyEventType = VOLUME_KEY_EVENT_NATIVE ; this . mCurrentValue = 0 ; }
private void stopScrolling ( ) { long now = SystemClock . uptimeMillis ( ) ; MotionEvent cancel = MotionEvent . obtain ( now , now , MotionEvent . ACTION_CANCEL , 0 , 0 , 0 ) ; binding . messagesView . dispatchTouchEvent ( cancel ) ; }
public ScheduleLessonsWidget ( ) { init ( ) ; }
public File getFile ( ) { return SIAApp . SIA_APP . getFileStreamPath ( "static_" + name ) ; }
public void testIsWPCOMURL6 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( WPCOM_ADDRESS_6 ) ) ) ; }
public int getLanguage ( ) { return language == null ? language = getLanguage ( LOCALE . LANG_ARABIC + "" ) : language ; }
public HighlightingImageView getImageView ( ) { return imageView ; }
public void onFavoritesClick ( View v ) { if ( v . isSelected ( ) ) { favoritesRepository . removeFromFavorites ( movieEntity ) ; v . setSelected ( false ) ; } else { favoritesRepository . addToFavorites ( movieEntity ) ; v . setSelected ( true ) ; } }
public void onMapReady ( GoogleMap googleMap ) { this . googleMap = googleMap ; googleMap . getUiSettings ( ) . setAllGesturesEnabled ( false ) ; googleMap . setOnMapClickListener ( mapClickListener ) ; if ( restaurant != null ) { loadRestaurantLocationInMap ( ) ; } }
public void onProgressChanged ( DiscreteSeekBar seekBar , int value , boolean fromUser ) { fadingTextView . setTimeout ( value , TimeUnit . SECONDS ) ; fadingTextView . forceRefresh ( ) ; }
public void onClick ( View v ) { Intent i = new Intent ( activity , DetailActivity . class ) ; i . putExtra ( "NEWS_TITLE" , title ) ; i . putExtra ( "NEWS_URL" , link ) ; activity . startActivity ( i ) ; }
public void setAdr_ort ( String adr_ort ) { this . adr_ort = adr_ort ; }
public String getToolbarName ( ) { return getString ( R . string . title_activity_time ) ; }
public PlantCategory on ( API api ) { if ( apiIdToCategory . containsKey ( api . idForCategory ( ) ) ) { return apiIdToCategory . get ( api . idForCategory ( ) ) ; } return NULL ; }
public Dialog showDialog ( Dialog dialog ) { return showDialog ( dialog , false , null ) ; }
public void onProviderDisabled ( String provider ) { LOG . info ( "Provider disabled : " + provider ) ; loggingService . restartGpsManagers ( ) ; }
public void onLoadFinished ( @ NonNull Loader < List < Song >> loader , List < Song > data ) { if ( adapter != null ) adapter . swapDataSet ( data ) ; }
public List < Debt > getDebts ( ) { return mDebts ; }
public double getProtein ( ) { return protein ; }
public SheltersAdapter . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_shelter , parent , false ) ; return new ViewHolder ( v ) ; }
private Bitmap generateColoredLastPositionIcon ( int colorFilter ) { return generateColoredBitmap ( context , colorFilter , R . drawable . ic_location_on_white_48dp ) ; }
public ListeDeCours Func ( ) throws Exception { return listeCours ( codeAccesUniversel , motPasse ) ; }
public String getLongitude ( ) { return mLongitude ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_rv_description , parent , false ) ; return new ViewHolder ( view ) ; }
public void onClick ( View v ) { parentFragment . onClickNumberButton ( bt_num_2 . getText ( ) . toString ( ) ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . tool_import_library ) ; }
public NutrimentLevel getSalt ( ) { return salt ; }
private ArrayList < String > getPlaylists ( ) { return PlaylistUtils . getPlaylistNames ( ) ; }
public void reset ( ) { isFiltered = false ; isPainted = false ; isCropped = false ; ttl = 0 ; imagePath = null ; thumbPath = null ; caption = null ; savedFilterState = null ; stickers . clear ( ) ; }
public void run ( ) { MessagesController . getInstance ( currentAccount ) . processUpdates ( ( TLRPC . Updates ) message , false ) ; }
private void clearDefaultImagesDirectory ( ) { perInstallationPrefs . edit ( ) . remove ( Constants . PREF_DEFAULT_IMAGES_DIR ) . apply ( ) ; }
public CustomWeekBar ( Context context ) { super ( context ) ; LayoutInflater . from ( context ) . inflate ( R . layout . custom_week_bar , this , true ) ; setBackgroundColor ( Color . WHITE ) ; }
private final LottieComposition . OnCompositionLoadedListener loadedListener = new LottieComposition . OnCompositionLoadedListener ( ) { @ Override public void onCompositionLoaded ( LottieComposition composition ) { setComposition ( composition ) ; compositionLoader = null ; } } ;
public GeoPackageDatabases ( Context context , String prefix ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; this . context = context ; this . settings = preferences ; this . prefix = prefix ; databasePreference = prefix + "databases" ; loadFromPreferences ( ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { startForeground ( NOTIFY_ID , createNotification ( ) ) ; startListeningForLocationUpdates ( ) ; return START_STICKY ; }
public void execute ( Activity mainActivity ) { Intent intent = new Intent ( mainActivity , CsvExportActivity . class ) ; mainActivity . startActivityForResult ( intent , ACTIVITY_CSV_EXPORT ) ; }
public boolean setRepeatStatus ( String s ) { return setRepeatStatus ( s != null ? RepeatStatus . valueOf ( Util . getInt ( s ) ) : null ) ; }
public void cleanUpAll ( ) { this . editor . remove ( KEY_SHORTCUT ) ; this . editor . remove ( KEY_VERSION_CODE ) ; this . editor . commit ( ) ; Logger . d ( this . getClass ( ) , "AppInfoStorage . cleanUpAll DONE" ) ; }
public static void mkFile ( String path ) throws ShellNotRunningException { String mountPoint = mountFileSystemRW ( path ) ; RootHelper . runShellCommand ( "touch \"" + path + "\"" ) ; if ( mountPoint != null ) { mountFileSystemRO ( mountPoint ) ; } }
public User getCurrentUser ( ) { return mPreferences . getCurrentUser ( ) ; }
public List < InfoItem > getSubContent ( ) { return subContent ; }
public void run ( ) { leftTime . setText ( mTimerService . getTime ( ) ) ; }
public void onClick ( View v ) { switch ( v . getId ( ) ) { case R . id . btnScan : scanRequest . scanBarcode ( ) ; break ; } }
public LegacyMatrix ( ) { NumberofRows = 9 ; NumberofCols = 9 ; type = Type . Normal ; name = "New LegacyMatrix" ; }
public void show ( ) { super . show ( ) ; rebuild ( ) ; Core . scene . setScrollFocus ( pane ) ; }
public BackpackTfBanned getSuggestions ( ) { return suggestions ; }
public SuraAyah getRangeStart ( ) { return new SuraAyah ( minSura , minAyah ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; unbinder . unbind ( ) ; }
public String Func ( ) throws Exception { return GetFiche ( numero , PathFiche ) ; }
private void initData ( ) { Intent i = getIntent ( ) ; number = i . getStringExtra ( Constants . SELECTED_CONTACT_NUMBER ) ; }
public void __setDaoSession ( DaoSession daoSession ) { this . daoSession = daoSession ; myDao = daoSession != null ? daoSession . getRecipePhotoTableDao ( ) : null ; }
public void setChecked ( boolean checked ) { if ( ! isCheckable ) { return ; } super . setChecked ( checked ) ; refreshView ( ) ; }
public boolean isOpen ( ) { return mDatabase != null && mDatabase . isOpen ( ) ; }
private DeckPreferenceHack ( ) { this . cacheValues ( ) ; }
public HashMap < String , Layer > getLayerTable ( ) { return layerTable ; }
public void run ( ) { NotificationCenter . getInstance ( currentAccount ) . setAnimationInProgress ( false ) ; if ( animationEndRunnable != null ) { animationEndRunnable . run ( ) ; animationEndRunnable = null ; } }
private void remove ( TextView view ) { viewList . remove ( view ) ; timestampMap . remove ( view ) ; }
public static LottieComposition fromJsonSync ( String json ) { return LottieCompositionFactory . fromJsonStringSync ( json , null ) . getValue ( ) ; }
public void onSetStreamVolume ( float volume ) { Log . d ( TAG , "Session onSetStreamVolume : " + volume + " ( " + mSessionNumber + " ) " ) ; mTvheadendPlayer . setVolume ( volume ) ; }
public HashMap < String , Room > getRooms ( ) { return rooms ; }
public void dayThree ( View v ) { Intent one = new Intent ( Schedule . this , DayThree . class ) ; startActivity ( one ) ; finish ( ) ; }
public static boolean isVideoWebDocument ( WebFile webDocument ) { return webDocument != null && webDocument . mime_type . startsWith ( "video/" ) ; }
public BaseRowItem ( GridButton button ) { this . gridButton = button ; type = ItemType . GridButton ; staticHeight = true ; }
public boolean containsSlide ( Object object ) { return object instanceof Slide && data . contains ( object ) ; }
public void cancelKeyTimersOf ( final PointerTracker tracker ) { cancelKeyRepeatTimerOf ( tracker ) ; cancelLongPressTimersOf ( tracker ) ; }
public void addForce ( float amount ) { angularVelocity = amount ; }
public String getKanjiElementValue ( ) { return kanjiElementValue ; }
private void onPullFailed ( Exception e ) { LogWrapper . warn ( TAG , "pull failed " + e . toString ( ) ) ; Crashlytics . logException ( e ) ; }
public boolean isConnected ( ) { return socket != null && socket . isConnected ( ) ; }
public void onReceive ( AirplaneModeIconData icon , Intent intent ) { if ( intent . getBooleanExtra ( TelephonyManager . EXTRA_STATE , false ) ) icon . onIconUpdate ( 0 ) ; else icon . onIconUpdate ( - 1 ) ; }
public boolean onKey ( View v , int keyCode , KeyEvent event ) { if ( event . getAction ( ) == KeyEvent . ACTION_DOWN && keyCode == KeyEvent . KEYCODE_ENTER ) { call_menu ( sip_uri_box ) ; return true ; } return false ; }
private ContentValues buildKeepContentValue ( WallpaperEntity entity ) { ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( Wallpaper . COLUMN_NAME_LIKED , entity . liked ? 1 : 0 ) ; return contentValues ; }
public void setDeviceLang ( String language ) { mPrefsEditor . putString ( "device_lang" , language ) ; mPrefsEditor . apply ( ) ; }
public static boolean isGrblErrorMessage ( final String response ) { return response . toLowerCase ( ) . startsWith ( "error : " ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mMedicalAttentionListPresenter . loadAllFromRealm ( ) ; }
private void onTransaction ( TransactionResponse transaction ) { this . transaction . postValue ( transaction ) ; }
private static String _latexFromHtml ( String latex ) { latex = latex . replaceAll ( " < br ( / ) ? > | < div > " , "\n" ) ; latex = Utils . stripHTML ( latex ) ; return latex ; }
public String getRate ( ) { return rate ; }
public void bindGroup ( Category category ) { ImageLoader . get ( ) . source ( category . getPhoto ( ) ) . bar ( bar ) . completer ( barFree ) . load ( image ) ; name . setText ( category . getName ( ) ) ; }
public Bundle data ( ) { return data ; }
public static String fixFileName ( String fileName ) { if ( fileName != null ) { fileName = fileName . replaceAll ( " [ \u0001 - \u001f <> \u202E : \"/\\\\|?*\u007f ] + " , "" ) . trim ( ) ; } return fileName ; }
public void compare_WhenFirstNameIsLower_ReturnLessThanZero ( ) { int result = sut . compare ( tag1 , tag2 ) ; assertThat ( result ) . isLessThan ( 0 ) ; }
public MainView ( Context context ) { super ( context ) ; bus . register ( this ) ; mContext = context ; init ( ) ; }
public boolean stop ( ) { getReminder ( ) . setActive ( false ) ; save ( ) ; return pause ( ) ; }
private void setOverviewTitle ( ) { title = getResources ( ) . getString ( R . string . title_activity_overview ) ; }
public Thread newThread ( @ NonNull Runnable runnable ) { return new Thread ( runnable , THREAD_NAME + counter ) ; }
public void onClick ( View v ) { if ( mMoreListener != null ) { mMoreListener . execute ( user ) ; } }
private GroupFitness ( Map < Person , MultiDayFitnessInterface > personMultiDayFitnessMap ) { this . groupFitnessData = personMultiDayFitnessMap ; }
public static void main ( String [ ] arg ) { LwjglApplicationConfiguration config = new LwjglApplicationConfiguration ( ) ; config . width = 450 ; config . height = 800 ; new LwjglApplication ( new RPSParty ( ) , config ) ; }
public BluetoothIconData . BluetoothReceiver getReceiver ( ) { return new BluetoothReceiver ( this ) ; }
public static void takeScreenShot ( final String title ) { takeScreenShot ( getActivity ( ) , title ) ; }
public void onBindViewHolder ( RecyclerView . ViewHolder viewHolder ) { ( ( RedditInboxItemView ) viewHolder . itemView ) . reset ( InboxListingActivity . this , mChangeDataManager , mTheme , mItem , mListPosition != 0 ) ; }
private void showAyahModeHighlights ( SuraAyah suraAyah , AyahTracker tracker ) { tracker . highlightAyah ( suraAyah . sura , suraAyah . ayah , HighlightType . SELECTION , false ) ; }
public void onShowHelp ( View view ) { Intent intent = new Intent ( this , HelpAndInfo . class ) ; startActivity ( intent ) ; }
private void setMinScale ( float min ) { this . minScale = min ; if ( gestureImageViewTouchListener != null ) { gestureImageViewTouchListener . setMinScale ( min * fitScaleHorizontal ) ; } }
public Socket createSocket ( Socket socket , String host , int port , boolean autoClose ) throws IOException { return getSSLContext ( ) . getSocketFactory ( ) . createSocket ( socket , host , port , autoClose ) ; }
public void setVisibility ( int visibility ) { super . setVisibility ( visibility ) ; getFab ( ) . setVisibility ( visibility ) ; if ( isLabelEnabled ( ) ) { getLabelBackground ( ) . setVisibility ( visibility ) ; } }
public static void bootstrap ( ) throws Exception { hostKeyProvider = new TestKeyProvider ( ) ; userKeyProvider = new TestKeyProvider ( ) ; }
public boolean getIsShowingTranslation ( ) { return isShowingTranslation ; }
public static Playable fromPlaylistEntry ( PlaylistEntry playlistEntry ) { return new Playable ( playlistEntry . id , playlistEntry . url , playlistEntry . title , playlistEntry . isStream , NewsStoryActivity . class . getName ( ) , playlistEntry . storyID ) ; }
public boolean handleSelectTask ( BaseTask task ) { m_currentSelectedTask = task ; invalidateOptionsMenu ( ) ; return m_taskRankListAdapter . setCurrSelectedTask ( task ) ; }
public RtlViewPager ( @ NonNull Context context ) { super ( context ) ; }
public CommandsPreferences ( ) { preferenceHashMap = new HashMap <> ( ) ; for ( XMLPrefsSave save : Cmd . values ( ) ) { preferenceHashMap . put ( save . label ( ) , XMLPrefsManager . get ( save ) ) ; } }
public static void setTweetPhoto ( ImageView view , Tweet tweet ) { TweetUtil . loadTweetPhoto ( view , tweet ) ; }
public void onClick ( View v ) { guide . displayChannels ( startRow , LiveTvGuideActivity . PAGE_SIZE ) ; }
private ActivityFinishState savePostOnline ( boolean isFirstTimePublish ) { return mViewModel . savePostOnline ( isFirstTimePublish , this , mEditPostRepository , mSite ) ; }
public int apps ( ) { return apps . size ( ) ; }
public float [ ] calculateCoordinates ( View view ) { float xy [ ] = GeneralLocation . CENTER_RIGHT . calculateCoordinates ( view ) ; xy [ 0 ] += 20f * view . getWidth ( ) ; return xy ; }
public static boolean getBoolean ( String key , boolean defaultValue ) { return sPreferences . getBoolean ( key , defaultValue ) ; }
public void onFailure ( @ NonNull Call < Details > call , @ NonNull Throwable t ) { detailsMutableLiveData . setValue ( null ) ; }
public void onLoadFinished ( Loader < Album > loader , Album data ) { setAlbum ( data ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { getActivity ( ) . setTitle ( "About" ) ; super . onViewCreated ( view , savedInstanceState ) ; }
public DrawerBuilder withOnDrawerItemLongClickListener ( @ NonNull Drawer . OnDrawerItemLongClickListener onDrawerItemLongClickListener ) { this . mOnDrawerItemLongClickListener = onDrawerItemLongClickListener ; return this ; }
public void onBackPressed ( ) { if ( activeFragment instanceof NewComplainFragment ) { if ( fab . isOrWillBeHidden ( ) ) fab . show ( ) ; } super . onBackPressed ( ) ; }
private void resetBonus ( ) { free ( ) ; mRacer . resetBonus ( ) ; }
public static Logger getInstance ( ) { if ( logger == null ) { logger = new Logger ( ) ; } return logger ; }
public Builder vibrateWhenLongPress ( boolean vibrate ) { _view . _vibrateWhenLongPress = vibrate ; return this ; }
public void onCapabilitiesChanged ( @ NonNull Network network , @ NonNull NetworkCapabilities networkCapabilities ) { showConnectionType ( ) ; }
public static void windmill ( Context context ) { ( ( AppCompatActivity ) context ) . overridePendingTransition ( R . anim . windmill_enter , R . anim . windmill_exit ) ; }
public int getOpacity ( ) { return PixelFormat . TRANSPARENT ; }
public boolean isVisible ( ) { return mVisibility . equals ( VISIBLE ) ; }
public int getCommunityId ( ) { return mCommunity . getCommunityId ( ) ; }
public static void setOptionView ( @ NotNull OptionView optionViews ) { optionView = optionViews ; }
public void render ( ) { String utilizedText = getString ( dashboardType == DashboardType . PHYSICAL ? R . string . most_utilized_hosts : R . string . most_utilized_vms ) ; mostUtilizedText . setText ( utilizedText ) ; setLoader ( ) ; }
public void success ( Pager < PlaylistSimple > playlistSimplePager , Response response ) { subscriber . onNext ( playlistSimplePager ) ; subscriber . onComplete ( ) ; }
private void updateProgressTextColor ( ) { int color = MaterialValueHelper . getPrimaryTextColor ( getContext ( ) , false ) ; songTotalTime . setTextColor ( color ) ; songCurrentProgress . setTextColor ( color ) ; }
public Builder stepSubtitleTextColor ( int stepSubtitleTextColor ) { formView . style . stepSubtitleTextColor = stepSubtitleTextColor ; return this ; }
public void run ( ) { loadingCameras = false ; cameraInitied = true ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . cameraInitied ) ; }
public String getKey ( ) { return resultValues ; }
public void error ( final int errorCode , final Avatar avatar ) { finishInitialSetup ( avatar ) ; }
public static String getIslamicLibraryShamelaBooksDir ( @ NonNull Context context ) { String base = getIslamicLibraryBaseDirectory ( context ) ; return base == null ? null : base + File . separator + DownloadFileConstants . SHAMELA_BOOKS_DIR ; }
public void setUp ( ) { scrollView = mock ( NestedScrollView . class ) ; helper = new KeyDelegate . NestedScrollViewHelper ( scrollView ) ; }
public void dipose ( ) { if ( mConnectivityReceiver != null ) { applicationContext . unregisterReceiver ( mConnectivityReceiver ) ; mConnectivityReceiver = null ; } }
private double sqinchTohectare ( double num ) { return num * 6 . 4516E - 8d ; }
public DataContext ( Context context , String name , SQLiteDatabase . CursorFactory factory , int version ) { super ( context , "mys3chat . db" , factory , 3 ) ; }
public void setUp ( ) throws Exception { mSplitsDbAdapter = SplitsDbAdapter . getInstance ( ) ; mTransactionsDbAdapter = TransactionsDbAdapter . getInstance ( ) ; mAccountsDbAdapter = AccountsDbAdapter . getInstance ( ) ; mAccount = new Account ( "Test account" ) ; mAccountsDbAdapter . addRecord ( mAccount ) ; }
private void init ( Context context , AttributeSet attrs ) { this . context = context ; PrefUtil . setLayoutResource ( context , this , attrs ) ; if ( Build . VERSION . SDK_INT <= Build . VERSION_CODES . GINGERBREAD_MR1 ) { setWidgetLayoutResource ( 0 ) ; } }
public void setOverallPercentageCorrect ( double overallPercentageCorrect ) { this . overallPercentageCorrect = overallPercentageCorrect * 100 ; }
public SipCall ( SipService sipService , SipAccount sipAccount ) { super ( sipAccount ) ; mSipService = sipService ; mLogger = mSipService . getLogger ( ) ; mSipBroadcaster = mSipService . getSipBroadcaster ( ) ; }
public Double getFeeChargesWrittenOff ( ) { return feeChargesWrittenOff ; }
public void setKanjiElementId ( int kanjiElementId ) { this . kanjiElementId = kanjiElementId ; }
public void onClick ( View view ) { startActivityForResult ( new Intent ( MainActivity . this , NewPostActivity . class ) , REQUEST_NEW_POST ) ; }
public AccountHeaderBuilder withTranslucentStatusBar ( boolean translucentStatusBar ) { this . mTranslucentStatusBar = translucentStatusBar ; return this ; }
public void onAnimationEnd ( Animator animation ) { mBookmarkFrame . setVisibility ( View . INVISIBLE ) ; userDataDBHelper . RemoveBookmark ( pageId ) ; }
public String getName ( ) { return StringUtils . notNullStr ( mName ) ; }
private Contact ( ) { this . name = "" ; this . pubkey = null ; this . blocked = false ; this . addresses = new ArrayList <> ( ) ; }
private void updateDatabase ( ) { db . updateRecord ( new ContentValues ( ) , DatabaseManager . tables [ DatabaseManager . PRODUCT ] , tbl_product_fields , this . getRecord ( ) ) ; }
public SinglePostRequest ( String postId ) { super ( Post . class , PointIm . class ) ; mPostId = postId ; }
public Upload setErrorText ( String errorText ) { this . errorText = errorText ; return this ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { binding . drawerLayout . openDrawer ( GravityCompat . START ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void onEvent ( Events . ModeChanged e ) { removeGeofences ( ) ; setupGeofences ( ) ; setupLocationRequest ( ) ; updateOngoingNotification ( ) ; }
public GameState getGameState ( ) { if ( isOver ( ) ) { throw new RuntimeException ( "The game has not started yet ! " ) ; } else { return mGameState ; } }
public void processStartupProgress ( StartupProgressEvent event ) { mBinding . startupLog . setText ( event . message ) ; }
public void onClick ( View v ) { mCallback . onQueueClicked ( ) ; }
public AccountHeaderBuilder withSavedInstance ( Bundle savedInstance ) { this . mSavedInstance = savedInstance ; return this ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . tv_label_misc : mRadixPickerDialog . show ( ) ; break ; default : break ; } }
public void clearCache ( ) { drawables . evictAll ( ) ; IconPackManager . getInstance ( ) . nullify ( ) ; System . gc ( ) ; }
public DownloadLocationTextWatcher ( @ NonNull EditText getDownload , int errorColor , int regularColor ) { this . getDownload = getDownload ; this . errorColor = errorColor ; this . regularColor = regularColor ; }
public com . openwallet . core . protos . Protos . TransactionConfidenceOrBuilder getConfidenceOrBuilder ( ) { return confidence_ ; }
public void setRedeemed ( boolean redeemed ) { notificationRedeemed = redeemed ; }
public int getItemCount ( ) { return getRules ( ) . size ( ) ; }
public boolean isChecked ( ) { return mPrefType == PrefType . TOGGLE && mToggleSwitch . isChecked ( ) ; }
public static List < User > transformUsers ( List < VKApiUser > dtos ) { return mapAll ( dtos , Dto2Model : : transformUser ) ; }
private boolean autostartFirstApp ( ) { return filtered . size ( ) == 1 && appsManager . getPkg ( ) . size ( ) > 1 && autostartSelector . isOn ( ) ; }
public static long getOCMStationIdFromJson ( JSONObject jsonStation ) throws JSONException { return jsonStation . getLong ( OCM_ID ) ; }
private void onCallStartRingback ( ) { mLogger . d ( "onCallStartRingback : " + mRingbackStarted ) ; if ( ! mRingbackStarted ) { mLogger . d ( "Ringback not started . Start it . " ) ; mRingbackStarted = true ; mSipService . startRingback ( ) ; } }
public SuggestionAutoCompleteText ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( context ) ; }
public PhotoSizes setX ( Size x ) { this . x = x ; return this ; }
public void onBookCollectionAdded ( @ NonNull BooksCollection booksCollection ) { homeScreenRecyclerViewAdapter . notifyBookCollectionAdded ( booksCollection ) ; }
public OstWorkflowContext . WORKFLOW_TYPE getWorkflowType ( ) { return WORKFLOW_TYPE . REVOKE_DEVICE ; }
public void testGetProvisionalVersionForDimension ( ) throws Exception { for ( int i = 1 ; i <= 40 ; i ++ ) { assertEquals ( i , Version . getProvisionalVersionForDimension ( 4 * i + 17 ) . getVersionNumber ( ) ) ; } }
public void updateScore ( int difficulty , int performance ) { if ( sessionBuilder != null ) { sessionBuilder . updateScore ( difficulty , performance ) ; } }
public void onPause ( ) { super . onPause ( ) ; processPauseRequest ( ) ; }
private < T extends RealmModel > List < T > createOrUpdateModel ( Iterable < T > objects ) { return createOrUpdateModel ( objects , null ) ; }
public List getConnections ( ) throws RemoteException { List < String > tmp = new ArrayList < String > ( ) ; for ( String key : mConnections . keySet ( ) ) { tmp . add ( key ) ; } return tmp ; }
public Observable < Empty > moveDown ( long songId ) { return controlService . moveDown ( songId ) ; }
public LocationProvider ( Context context ) { this . context = context ; locationProviderClient = LocationServices . getFusedLocationProviderClient ( context ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { markAsCompletedOrUncompleted ( true ) ; }
private CategoryInfo ( Parcel source ) { category = ( Category ) source . readSerializable ( ) ; visible = source . readInt ( ) == 1 ; }
private CustomTabsSession getSession ( ) { if ( client == null ) { customTabsSession = null ; } else if ( customTabsSession == null ) { customTabsSession = client . newSession ( null ) ; } return customTabsSession ; }
public void onPageSelected ( int position ) { String pageTitle = ( String ) getPageAdapter ( ) . getPageTitle ( position ) ; AppPrefs . setReaderSubsPageTitle ( pageTitle ) ; }
public double getNetwork ( ) { return network ; }
public Observable < SaveResponse > call ( ) { groupPayload . save ( ) ; return Observable . just ( new SaveResponse ( ) ) ; }
public FingerprintDialog callback ( FingerprintDialogSecureCallback fingerprintDialogSecureCallback , String KEY_NAME ) { this . fingerprintDialogSecureCallback = fingerprintDialogSecureCallback ; this . fingerprint . callback ( fingerprintSecureCallback , KEY_NAME ) ; return this ; }
public void onValidHostConfigured ( HostBean host ) { mHost = host ; if ( mSaveHostButton != null ) setAddSaveButtonEnabled ( true ) ; }
public static void release ( final Context context ) { Kontalk . get ( ) . release ( ) ; Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_RELEASE ) ; startForegroundIfNeeded ( context , i ) ; }
private File getPrivateKeyFile ( ) { return new File ( getSshDir ( ) , PRIVATE_KEY_FILE ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; bindViews ( view ) ; trackToGoogleAnalytics ( ) ; }
public void onValueChanged ( Integer value ) { invalidateSelf ( ) ; }
public PlaceModelAssembler withPlate ( String pattern ) { if ( plates == null ) { plates = new ArrayList <> ( ) ; } plates . add ( PlateModel . create ( pattern , null ) ) ; return this ; }
public void onAnimationEnd ( Animator animation ) { refresh ( true ) ; }
private void startQueryIssues ( ) { mSwipeRefreshLayout . post ( new Runnable ( ) { @ Override public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryIssues ( mView ) ; } } ) ; }
public final void saveTrip ( final Trip parTrip ) { mSavingModule . addOrUpdateTrip ( parTrip ) ; mTripListFragment . populateList ( ) ; if ( mTripDetailFragment != null ) { mTripDetailFragment . displayTrip ( parTrip ) ; } }
public void onFailure ( Call < FileUploadResponse > call , Throwable t ) { uploadFileStatusVer2 = VIDEO_UPLOADED_FAILURE ; LogManager . PrintLog ( "CommunicationWithServer" , "onFailure" , "Error : " + t . getMessage ( ) , LOG_LEVEL_ERROR ) ; }
public static long getLongSp ( Context context , String tag ) { SharedPreferences sp = context . getSharedPreferences ( name , mode ) ; return sp . getLong ( tag , 0 ) ; }
public boolean winTest ( ) { for ( int i = 7 ; i <= 10 ; i ++ ) { if ( stacks [ i ] . getSize ( ) != 13 ) { return false ; } } return true ; }
public FetchState ( Status status , Throwable error ) { this . status = status ; this . error = error ; }
public static void browsePostOrPage ( Context context , SiteModel site , PostImmutableModel post ) { browsePostOrPageEx ( context , site , post , RemotePreviewType . NOT_A_REMOTE_PREVIEW ) ; }
public void setLayoutVisibleBounds ( Rect visibleBounds ) { topPart . setVisibleBounds ( visibleBounds ) ; bottomPart . setVisibleBounds ( visibleBounds ) ; }
public String getLocalStatus ( ) { return StringUtils . notNullStr ( mLocalStatus ) ; }
public static Book book ( ) { return getBook ( null , DEFAULT_DB_NAME ) ; }
public CopyFileOperation ( String srcPath , String targetParentPath ) { mSrcPath = srcPath ; mTargetParentPath = targetParentPath ; if ( ! mTargetParentPath . endsWith ( OCFile . PATH_SEPARATOR ) ) { mTargetParentPath += OCFile . PATH_SEPARATOR ; } mFile = null ; }
public void onSubtypeChanged ( final InputMethodSubtype newSubtype ) { updateCurrentSubtype ( newSubtype ) ; updateShortcutIme ( ) ; if ( DEBUG ) { Log . w ( TAG , "onSubtypeChanged : " + mCurrentRichInputMethodSubtype . getNameForLogging ( ) ) ; } }
public void onItemSelected_DialogFragment_ChooseCheckinDate ( int id ) { HyperLog . d ( TAG , "onItemSelected_DialogFragment_ChooseCheckinDate ( ) called : " ) ; checkAchievements ( id ) ; }
public void onImageCapture ( @ NonNull final byte [ ] imageBytes ) { setMedia ( PersistentBlobProvider . getInstance ( this ) . create ( this , imageBytes , MediaUtil . IMAGE_JPEG , null ) , MediaType . IMAGE ) ; quickAttachmentDrawer . hide ( false ) ; }
public CreateNewClientFragmentTest ( ) { super ( DashboardActivity . class ) ; }
public CustomItemDecorator ( Context context ) { divider = context . getResources ( ) . getDrawable ( R . drawable . divider_transparent ) ; }
public ActionEditText ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( ) ; }
public void onRefresh ( ) { setContentShown ( false ) ; loadFile ( true ) ; super . onRefresh ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; sIsRunning = false ; if ( mReceiver != null ) { unregisterReceiver ( mReceiver ) ; } }
public int getLastPage ( ) { return prefs . getInt ( Constants . PREF_LAST_PAGE , Constants . NO_PAGE ) ; }
public int getInitialItemPrefetchCount ( ) { return getInitialPrefetchItemCount ( ) ; }
public void onClick ( View v ) { locate ( true ) ; }
public static void remove ( String name , Context context ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . remove ( name ) . apply ( ) ; }
private void initializeSwipeUpdate ( ) { swipeLayout . setRefreshing ( false ) ; swipeLayout . setOnRefreshListener ( presenter : : reloadNewsHeaders ) ; }
public void destroy ( ) { super . destroy ( ) ; if ( this == primary ) { primary = null ; } else { secondary = null ; } lastTarget = null ; }
public static String getEventCode ( String matchOrEventOrDistrictKey ) { Matcher m = EVENT_KEY_PATTERN . matcher ( matchOrEventOrDistrictKey ) ; return m . find ( ) ? m . group ( ) . toUpperCase ( Locale . US ) : "" ; }
public void clearSuggestions ( ) { if ( suggestionsVisible ) animateSuggestions ( getListHeight ( false ) , 0 ) ; adapter . clearSuggestions ( ) ; }
public void GetFicheAsync ( final String numero , final String PathFiche ) { executeAsync ( new Functions . IFunc < String > ( ) { public String Func ( ) throws Exception { return GetFiche ( numero , PathFiche ) ; } } ) ; }
public Boolean loadVibrateState ( ) { return mySharedPref . getBoolean ( "Vibrate" , true ) ; }
public void onSurfaceChanged ( GL10 notUsed , int width , int height ) { GLES20 . glViewport ( 0 , 0 , width , height ) ; _mCamera . onSurfaceChanged ( width , height ) ; }
public int getContentItemsTotal ( ) { return expanded ? items . size ( ) : 0 ; }
public void d ( final String msg , Throwable tr ) { if ( IS_DEBUGGING_ON ) { Log . d ( mTAG , getMessage ( msg ) , tr ) ; saveToFile ( ) ; } }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_options_misc , menu ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
private Cursor getVerses ( int sura , int minAyah , int maxAyah ) { return getVerses ( sura , minAyah , maxAyah , VERSE_TABLE ) ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . Avatar parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public boolean canSignVerifyMessages ( ) { return signedMessageHeader != null ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( type ) ; dest . writeTypedList ( allowedUsers ) ; dest . writeTypedList ( disallowedUsers ) ; dest . writeTypedList ( allowedLists ) ; dest . writeTypedList ( disallowedLists ) ; }
public void reset ( ) { numMen = INITIAL_NUM_MEN ; numCollectedJewels = 0 ; lastX = 0 ; isHurt = false ; alreadyTouchingEnemy = false ; alreadyTouchingWall = false ; facingRight = true ; }
public TextButton ( Context pContext , @ Nullable AttributeSet pAttributeSet ) { super ( pContext , pAttributeSet ) ; }
public void onSelectAll ( ) { runOp ( mCommandEditor . selectAll ( ) ) ; }
public void postPlaySound ( final int soundIndex ) { if ( mSoundPool != null && mSoundEnable ) { int soundId = mSoundList . get ( soundIndex ) ; mSoundPool . play ( soundId , 1 , 1 , 0 , 0 , 1 ) ; } }
public void didReceivedNotification ( int id , int account , Object . . . args ) { if ( id == NotificationCenter . suggestedLangpack ) { if ( listAdapter != null ) { fillLanguages ( ) ; listAdapter . notifyDataSetChanged ( ) ; } } }
public void onPlaybackStateChanged ( @ NonNull PlaybackStateCompat state ) { Log . d ( TAG , "onPlayBackStateChanged" + state ) ; updatePlaybackState ( state ) ; }
public MealDetailParams ( @ NonNull Meal meal , @ NonNull View sharedView ) { this . meal = meal ; this . sharedView = sharedView ; }
public StockViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = getLayoutInflater ( ) . inflate ( R . layout . media_picker_thumbnail , parent , false ) ; return new StockViewHolder ( view ) ; }
public final List < TripItem > getListOfItems ( ) { return mListItem ; }
public void onReceive ( Context context , Intent intent ) { try { MessagesController . getInstance ( UserConfig . selectedAccount ) . setReferer ( intent . getExtras ( ) . getString ( "referrer" ) ) ; } catch ( Exception ignore ) { } }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof NewMovieReleasesFragmentCallbackListener ) { mListener = ( NewMovieReleasesFragmentCallbackListener ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement GenreFragmentCallbackListener" ) ; } }
public void run ( ) { slug . setEnabled ( false ) ; button . setEnabled ( false ) ; status . setText ( getString ( R . string . uploading , " . . . " ) ) ; }
public String getMode ( ) { return mSettings . getString ( PREFERENCES_MAIN_MODE , MODE_DISABLED ) ; }
public String getSearchUrl ( ) { return mPrefs . getString ( Name . SEARCH_URL , Constants . BAIDU_SEARCH ) ; }
public synchronized void saveQueues ( @ NonNull final List < Song > playingQueue , @ NonNull final List < Song > originalPlayingQueue ) { saveQueue ( PLAYING_QUEUE_TABLE_NAME , playingQueue ) ; saveQueue ( ORIGINAL_PLAYING_QUEUE_TABLE_NAME , originalPlayingQueue ) ; }
public YValueMarker ( Number value , String text , HorizontalPosition textPosition , Paint linePaint , Paint textPaint ) { super ( value , text , textPosition , linePaint , textPaint ) ; }
public void onClick ( View v ) { if ( mCurrentTab != 1 ) mPager . setCurrentItem ( 1 ) ; }
public void onIristickServiceError ( int error ) { if ( alive ) sendMessage ( What . IRISTICK_ERROR , error , 0 , null , 0 ) ; }
public static ProximityScreenLocker create ( final Context context ) { final PowerManager . WakeLock proximityWakeLock = initProximitySensor ( context ) ; if ( proximityWakeLock == null ) { return null ; } return new ProximityScreenLockerNative ( proximityWakeLock ) ; }
public void stopStream ( ) { player . stop ( ) ; currentStream = null ; }
public void onFailure ( Call < AuthSignupResponse > call , Throwable t ) { Log . d ( applicationContext . getString ( R . string . app_name ) , "Error : " + t . getMessage ( ) ) ; signUpStatusVer2 = SIGN_UP_FAILURE ; }
private void onCreateNewItem ( ) { createNewItem ( ) ; mConnectionManager . reload ( ) ; }
public void setColour ( @ ColorInt int colour ) { mPaint . setColor ( colour ) ; mBaseColourAlpha = Color . alpha ( colour ) ; mPaint . setAlpha ( mBaseColourAlpha ) ; }
private void startReceivers ( ) { for ( UUID uuid : SERVICE_UUIDS ) { BTReceiver btReceiver = new BTReceiver ( this , uuid ) ; btReceivers . add ( btReceiver ) ; btReceiver . start ( ) ; } }
public String getEintritt ( ) { return this . eintritt ; }
public UserId newID ( ) throws IOException { OctoPub octoPub = retrofit . create ( OctoPub . class ) ; Call < UserId > call = octoPub . id ( ) ; return call . execute ( ) . body ( ) ; }
public FigureType getRotatedFigure ( ) { return FigureType . J_THIRD_FIGURE ; }
public void parseData ( ) { mDataToBind = mAPIData ; }
public void onTypeChanged ( ) { }
public ScheduleOfTeacher loadDataFromNetwork ( ) throws Exception { return new ScheduleOfTeacher ( getService ( ) . getScheduleOfTeacher ( teacherId ) ) ; }
public void onResume ( ) { super . onResume ( ) ; String URL = sharedPref . getString ( "openURL" , "file : if ( URL . equals ( "settings_recreate" ) ) { updateSettings ( ) ; } }
public Player ( Context context , Point start , int size ) { super ( size , start , getPaint ( context ) ) ; }
public RoomEventSubscription ( StreamObserver < RoomEventUpdate > observer , RoomSubscription subscription ) { this . observer = observer ; this . subscription = subscription ; }
public static BottomSheetUserDialogFragment newInstance ( UsersLTE user ) { BottomSheetUserDialogFragment fragment = new BottomSheetUserDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putParcelable ( "lol" , Parcels . wrap ( user ) ) ; fragment . setArguments ( args ) ; return fragment ; }
public void cancelUpdateBatchInputTimer ( final PointerTracker tracker ) { removeMessages ( MSG_UPDATE_BATCH_INPUT , tracker ) ; }
public void unhideLast ( ) { if ( submissions != null && savedSubmission != null ) { submissions . add ( savedIndex , savedSubmission ) ; writeToMemoryNoStorage ( ) ; } }
public static boolean keepForegroundService ( Context context ) { return runsAndTargetsTwentySix ( context ) || getBooleanPreference ( context , SettingsActivity . KEEP_FOREGROUND_SERVICE , R . bool . enable_foreground_service ) ; }
public void onCreate ( ) { super . onCreate ( ) ; mReaderUpdateLogic = new ReaderUpdateLogic ( this , ( WordPress ) getApplication ( ) , this ) ; AppLog . i ( AppLog . T . READER , "reader job service > created" ) ; }
public synchronized void waitUntilInitialized ( ) throws InterruptedException { while ( lastSampleTimestampUs == C . TIME_UNSET ) { wait ( ) ; } }
public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { ( ( DemoViewHolder ) holder ) . textView . setText ( String . format ( Locale . getDefault ( ) , "HearSilent %d" , position ) ) ; }
public void close ( ) { mDB . close ( ) ; }
public Set < Filter < ? super Tables . Tracks >> getFilter ( ) { return Collections . unmodifiableSet ( filters ) ; }
public void goToLoginFragment ( ) { replaceFragment ( LoginFragment . getInstance ( ) , false ) ; }
public void setDefaultSelector ( Drawable d ) { defaultBackground = d ; if ( ! stacked ) { setStacked ( false , true ) ; } }
public void onResume ( ) { isPaused = false ; }
public boolean getIndicateRecurring ( ) { return sharedPreferences . getBoolean ( PREF_INDICATE_RECURRING , PREF_INDICATE_RECURRING_DEFAULT ) ; }
public void onClick ( DialogInterface dialog , int which ) { PinkaHelper . removeActiveUser ( getApplicationContext ( ) ) ; Intent nationActivityLaunch = new Intent ( StatelyActivity . this , LoginActivity . class ) ; startActivity ( nationActivityLaunch ) ; finish ( ) ; }
private MinMax ( String minfile , String maxfile , int min , int max ) { mMinFile = minfile ; mMaxFile = maxfile ; mMin = min ; mMax = max ; }
public static void setUserAdmin ( Context context , boolean value ) { if ( ENUM_Boolean . BOOLEAN_USER_ADMIN . value != value ) { ENUM_Boolean . BOOLEAN_USER_ADMIN . value = value ; save ( context ) ; } }
public void onValueChange ( ValueChangeEvent < String > valueChangeEvent ) { ChangeEvent event = new ChangeEvent ( ) { @ Override public Object getSource ( ) { return timePicker2 ; } } ; handler . onChange ( event ) ; }
public void onClick ( View v ) { Toast . makeText ( getActivity ( ) , "Edit tocado" , Toast . LENGTH_SHORT ) . show ( ) ; }
private void initToolbar ( ) { Toolbar toolbar = findViewById ( R . id . toolbar ) ; setSupportActionBar ( toolbar ) ; setTitle ( getString ( R . string . loading_form ) ) ; }
private void clearUpdate ( Context context ) { AlarmManager alarmManager = ( AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ; alarmManager . cancel ( getAlarmIntent ( context ) ) ; }
public static void reset ( SQLiteDatabase db ) { AppLog . i ( AppLog . T . PEOPLE , "resetting people table" ) ; dropTables ( db ) ; createTables ( db ) ; }
public void removeOnPageChangeListener ( @ NonNull OnPageChangeListener listener ) { super . removeOnPageChangeListener ( new OnPageChangeListenerWrapper ( listener ) ) ; }
public ForceCompleteTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public SidebarBoardsFragment getRightSidebarFragment ( ) { return mBoardsSidebar ; }
private void showMarkerStyle ( ) { binding . markerStylePrefs . setViewResource ( ThemeUtil . getInstance ( getContext ( ) ) . getMarkerStyle ( ) ) ; }
private void updateRotation ( ) { int oldRotation = rotation ; rotation = getDeviceRotation ( ) ; if ( oldRotation != rotation ) { Log . i ( TAG , "rotation changed" ) ; onKeyboardClose ( ) ; } }
public void notifyUpdate ( Object obj ) throws DAOException { App . arePointsExported = false ; for ( DAO dao : this . daoList ) { dao . update ( obj ) ; } }
public SignalProtocolAddress getOwnAxolotlAddress ( ) { return new SignalProtocolAddress ( account . getJid ( ) . asBareJid ( ) . toString ( ) , getOwnDeviceId ( ) ) ; }
public boolean hasNote ( String input ) { return input . contains ( "нотатка" ) ; }
public int getItemCount ( ) { return mFilteredData . size ( ) ; }
public int getTimeDifference ( ) { return native_getTimeDifference ( currentAccount ) ; }
public MaterialAboutCard ( int titleRes , MaterialAboutItem . . . materialAboutItems ) { this . titleRes = titleRes ; Collections . addAll ( items , materialAboutItems ) ; }
public void scrollRecycleViewToPosition ( int position ) { if ( mRecyclerView == null ) { return ; } mRecyclerView . scrollToPosition ( position ) ; }
public String getDraftType ( ) { return draftType ; }
public ContentProviderClient provideRecentSearchContentProviderClient ( Context context ) { return context . getContentResolver ( ) . acquireContentProviderClient ( BuildConfig . RECENT_SEARCH_AUTHORITY ) ; }
public CubesException ( String arg0 , Throwable arg1 ) { super ( arg0 , arg1 ) ; className = Thread . currentThread ( ) . getStackTrace ( ) [ 2 ] . getClassName ( ) ; }
private ActionBar getSupportActionBar ( ) { return getActivity ( ) != null ? ( ( AppCompatActivity ) getActivity ( ) ) . getSupportActionBar ( ) : null ; }
private void updateSwitchIcon ( ) { _switchButton . setImageResource ( Setup . appSettings ( ) . getSearchUseGrid ( ) ? R . drawable . ic_view_grid_white : R . drawable . ic_view_list_white ) ; }
public double getBase ( ) { return inML ; }
public RecipeMethodHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new RecipeMethodHolder ( parent , R . layout . item_method_card ) ; }
public void addGroup ( int position , ListGroup group ) { mGroups . add ( position , group ) ; }
public String getTagSlug ( ) { return StringUtils . notNullStr ( mTagSlug ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { b . titleView . setText ( getVolumeTitle ( progress ) ) ; }
public void setCocktailList ( List < Drink > cocktailList ) { mCocktailDetails = cocktailList ; notifyDataSetChanged ( ) ; }
public boolean syncOpen ( ) { boolean ret = openFTDI ( ) ; if ( ret ) { setSyncParams ( inEndpoint , outEndpoint ) ; asyncMode = false ; return true ; } else { return false ; } }
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + DBConstants . USER_TABLE ) ; }
public int getNumTotalCorrect ( ) { return numTotalCorrect ; }
public void onAnimationStart ( Animator animation ) { scoreView . setVisibility ( View . GONE ) ; menuVisible = winMenu ; showingWinMenu = true ; }
public void onPuzzleSolved ( ) { if ( mShowTime ) { mGameTimer . stop ( ) ; } mSudokuBoard . setReadOnly ( true ) ; if ( mSudokuGame . usedSolver ( ) ) { showDialog ( DIALOG_USED_SOLVER ) ; } else { showDialog ( DIALOG_WELL_DONE ) ; } }
public int getShowphoto ( ) { return showphoto ; }
public void invalidateList ( ) { if ( mAdapter == null ) return ; removeToolbar ( ) ; this . mAdapter . notifyDataSetChanged ( ) ; this . mAdapter . notifyDataSetInvalidated ( ) ; }
public void onStartTrackingTouch ( SeekBar seekBar ) { progressHandler . removeCallbacks ( mUpdateTimeTask ) ; }
public int sentMessagesCount ( ) { int count = 0 ; synchronized ( this . messages ) { for ( Message message : messages ) { if ( message . getStatus ( ) != Message . STATUS_RECEIVED ) { ++ count ; } } } return count ; }
public String getPatchFileUrl ( String widthParam , int toVersion ) { return PATCH_ZIP_BASE_URL + toVersion + "/patch" + widthParam + "_v" + toVersion + " . zip" ; }
public void logPageAccess ( @ NonNull PageInfo pageId ) { sGlobalUserDBHelper . logPageAccess ( pageId , bookId ) ; }
public void initialize ( Activity contextActivity ) { this . contextActivity = contextActivity ; setupAnalytics ( ) ; setupStatusUpdates ( ) ; setupGoogleApis ( ) ; setupTrackingManager ( ) ; setupMessageHandlers ( ) ; setupSensorDataManager ( ) ; setupReachabilityChecker ( ) ; status . setInitialized ( true ) ; }
public void saveWeight ( ) { dbStorage . setResult ( SQLiteStorageUserResult . MY_WEIGHT , myWeight ) ; }
public void commitPickedSuggestion ( String pickedSuggestion ) { getCurrentInputConnection ( ) . commitText ( pickedSuggestion , 1 ) ; mComposing . setLength ( 0 ) ; updateInputForCandidate ( ) ; }
public void testAddAndGet ( ) { DbTableTestDriver . testAddAndGet ( mTable , mEvents . get ( 0 ) , mGson ) ; }
public void onBack ( MenuItem view ) { this . finish ( ) ; }
public Builder ( @ NonNull final Dialog dialog ) { this ( dialog , 0 ) ; }
public String format ( String board ) { return "mt" + board . split ( "mt" ) [ 1 ] . trim ( ) . split ( " " ) [ 0 ] ; }
public void run ( ) { String res = Statusgo . callRPC ( payload ) ; callback . invoke ( res ) ; }
public MainView createView ( ) { return this ; }
public void testSyncFinishedRefreshRecycler_sameActivity ( ) { assertTrue ( syncResultTest ( true ) ) ; }
private void showYearMonth ( ) { TextView year_month = fragmentView . findViewById ( R . id . calendarYearMonthTextView ) ; year_month . setText ( String . format ( Locale . US , "%tB %tY" , calendar , calendar ) ) ; }
public void onClick ( View view ) { setResistance ( ) ; }
public void read ( String fileName ) { this . mFileName = fileName ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_help_inviteText . TLdeserialize ( stream , constructor , exception ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . activity_details , menu ) ; return true ; }
public void delete ( String title , String path ) { utilsHandler . removeBookmarksPath ( title , path ) ; drawer . refreshDrawer ( ) ; }
public void setTextAndValue ( String text , CharSequence value , boolean divider ) { textView . setText ( text ) ; valueTextView . setText ( value ) ; needDivider = divider ; setWillNotDraw ( ! divider ) ; }
public void onClick ( DialogInterface dialog , int which ) { GroupActivity . Launch ( mActivity ) ; }
private void showAddMeasureDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; MeasureDialogFragment dialog = MeasureDialogFragment . newInstance ( ) ; dialog . show ( this . getSupportFragmentManager ( ) , "MeasureDialogFragment" ) ; }
public static void dropTable ( Database db , boolean ifExists ) { String sql = "DROP TABLE " + ( ifExists ? "IF EXISTS " : "" ) + "\"PGNIG_PRICES\"" ; db . execSQL ( sql ) ; }
public boolean hasUrl ( ) { return ! TextUtils . isEmpty ( mUrl ) ; }
private DialogInterface . OnClickListener negativeClickListener ( ) { return ( dialog , which ) -> { Analytics . event ( EventType . CHECK_PRICES , "proceed" , false ) ; markDialogProcessed ( ) ; } ; }
public void onBrowseDirectory ( String directory ) { showDirectory ( directory , false ) ; }
public void goBack ( ) { requireActivity ( ) . onBackPressed ( ) ; }
public static void show ( @ NonNull View anchor , @ NonNull Toast toast ) { show ( anchor , toast , ADT_TOAST_OFFSET ) ; }
public Observable < Empty > cancel ( long songId ) { return controlService . cancel ( songId ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "devesh . b . pharm . guide . mu" , appContext . getPackageName ( ) ) ; }
public void onClick ( View arg0 ) { break2TimeClicked ( ) ; }
public int count ( Class < ? > modelClass ) { return count ( BaseUtility . changeCase ( modelClass . getSimpleName ( ) ) ) ; }
public ContextHolder ( @ NonNull Context context ) { this . context = context ; }
private void gotoPageDialog ( ) { if ( ! isPaused ) { FragmentManager fm = getSupportFragmentManager ( ) ; JumpFragment jumpDialog = new JumpFragment ( ) ; jumpDialog . show ( fm , JumpFragment . TAG ) ; } }
public AccountHeaderBuilder withHeaderBackground ( Drawable headerBackground ) { this . mHeaderBackground = new ImageHolder ( headerBackground ) ; return this ; }
public void onTouch ( ) { }
public void customNotifyItemInserted ( int idx ) { notifyItemInserted ( idx ) ; vNoElements . setVisibility ( getItemCount ( ) > 0 ? View . GONE : View . VISIBLE ) ; }
public void nextDayByHour ( ) { LocalDate date = SchoolWeek . nextFrom ( new DateTime ( 2015 , 6 , 15 , 21 , 0 ) ) ; assertEquals ( "Sunday to next week" , 16 , date . getDayOfMonth ( ) ) ; }
public void attach ( RecipeDialogCreationView view ) { authorsPresenter . attach ( view . getAuthorsView ( ) ) ; categoriesPresenter . attach ( view . getCategoriesView ( ) ) ; }
public void addNewOption ( ) { EventBus . getDefault ( ) . post ( new EventBusManager . OptionControlEvent ( 0 , null , EventBusManager . OptionControlEvent . OPTION_ADD , null ) ) ; }
public void onBackDialogPositiveClick ( String filename ) { NoteEditFragment fragment = ( NoteEditFragment ) getSupportFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onBackDialogPositiveClick ( null ) ; }
public boolean isAnimatingFling ( ) { return ! flingScroller . isFinished ( ) ; }
public void clickingCharacter ( MenuItem item ) { Intent intent = new Intent ( NavD . this , SplashScreenElune . class ) ; startActivity ( intent ) ; }
public CustomExpandableListAdapter ( Context context , List < String > expandableListTitle , LinkedHashMap < String , List < String >> expandableListDetail ) { this . context = context ; this . expandableListTitle = expandableListTitle ; this . expandableListDetail = expandableListDetail ; }
private void hideKeyboard ( ) { searchQueryEditText . clearFocus ( ) ; getWindow ( ) . setSoftInputMode ( WindowManager . LayoutParams . SOFT_INPUT_STATE_ALWAYS_HIDDEN ) ; }
public void setPort ( Integer port ) { this . port = port ; }
public boolean onStopJob ( JobParameters params ) { AppLog . i ( AppLog . T . READER , "reader post job service > stopped" ) ; jobFinished ( params , false ) ; return false ; }
public int getItemCount ( ) { return leagueScheduleItems . size ( ) + 1 ; }
public static GpsSimpleViewFragment newInstance ( ) { GpsSimpleViewFragment fragment = new GpsSimpleViewFragment ( ) ; Bundle bundle = new Bundle ( 1 ) ; bundle . putInt ( "a_number" , 1 ) ; fragment . setArguments ( bundle ) ; return fragment ; }
public void setTtsLocale ( String value ) { putString ( TTS_LOCALE , value ) ; }
public boolean canScroll ( ) { return scrollView != null ; }
public void onNext ( ResponseBody response ) { getMvpView ( ) . showProgressbar ( false ) ; getMvpView ( ) . showAllChargesV3 ( response ) ; }
public int getItemCount ( ) { return mItems . size ( ) ; }
public void run ( ) { try { database . executeFast ( "DELETE FROM secret_holes WHERE uid = " + enc_id ) . stepThis ( ) . dispose ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public Intent getIntent ( ) { return intent ; }
public ValidatorConfig setRuleProvider ( IRuleProvider ruleProvider ) { this . ruleProvider = ruleProvider ; return this ; }
public boolean retainAll ( @ NonNull Collection < ? > c ) { return values . retainAll ( c ) ; }
public void execute ( ) { if ( haveStoragePermission ( ) ) { downloadImage ( mImageUrl ) ; } }
public void run ( ) { showAboutFragment ( ) ; }
public static void viewMyProfile ( Context context ) { Intent intent = new Intent ( context , MyProfileActivity . class ) ; AnalyticsTracker . track ( AnalyticsTracker . Stat . OPENED_MY_PROFILE ) ; context . startActivity ( intent ) ; }
public void handleActivityResult ( int requestCode , int resultCode , Intent data ) { if ( requestCode == OVERLAY_REQUEST_CODE ) { this . setCanDrawOverlay ( android . provider . Settings . canDrawOverlays ( this . activity . getApplicationContext ( ) ) ) ; } }
public NextCard ( View v ) { super ( v ) ; v . findViewById ( R . id . card_generic_title ) . setVisibility ( View . GONE ) ; nextUpdate = v . findViewById ( R . id . card_generic_content ) ; }
private List < TransactionInfo > getSplitsForTransaction ( long transactionId ) { Query < TransactionInfo > q = db . createQuery ( TransactionInfo . class ) ; q . where ( Expressions . eq ( "parentId" , transactionId ) ) ; return q . list ( ) ; }
public void setY ( int y ) { _y = y ; }
public ClementineMediaSessionNotification ( Context context ) { super ( context ) ; mNotificationManager = ( NotificationManager ) mContext . getSystemService ( Context . NOTIFICATION_SERVICE ) ; SharedPreferences colorPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; mTurnColor = colorPreferences . getBoolean ( "pref_noti_color" , false ) ; }
private boolean checkStarred ( String data , int id ) { return data . contains ( KcaUtils . format ( "|%d|" , id ) ) ; }
public LanguagePreferenceCompat ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; loadLangs ( context , attrs ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_FeaturedStickers . TLdeserialize ( stream , constructor , exception ) ; }
public boolean onInterceptTouchEvent ( MotionEvent ev ) { if ( ! scrollable ) return false ; else return super . onInterceptTouchEvent ( ev ) ; }
public void onClick ( View view ) { mVpnUiLogic . connectOrDisconnect ( ) ; }
private String createUniqueString ( ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( "hh : mm : ss . SSS" ) ; return dateFormat . format ( new Date ( ) ) ; }
public boolean isNull ( ) { return type == TYPE_NULL ; }
public void deletePlace ( MyPlace p ) { SQLiteDatabase db = getWritableDatabase ( ) ; db . delete ( tableName , placeIDColumn + " = \"" + p . getPlaceID ( ) + "\"" , null ) ; db . close ( ) ; }
public void onClick ( View v ) { parentFragment . onClickSpecialButton ( Constants . COSH_INVERSE ) ; }
public CpuStateMonitor getCpuStateMonitor ( ) { return mMonitor ; }
public void onClick ( View v ) { duracao = 30 ; dialog . dismiss ( ) ; mostrarDialogAltura ( ) ; }
public long getItemId ( int position ) { Person person = getPerson ( position ) ; if ( person == null ) { return - 1 ; } return person . getPersonID ( ) ; }
public void onDismiss ( DialogInterface dialog ) { EventBus . getDefault ( ) . post ( new EventBusManager . UIControlEvent ( EventBusManager . UIControlEvent . INTRO_TO_ACCOUNT ) ) ; }
public void setOnItemClickListener ( MoreAppsBaseAdapter . MyClickListener myClickListener ) { this . myClickListener = myClickListener ; }
public void onStop ( ) { chats . removeAllChangeListeners ( ) ; myStatus . removeValue ( ) ; super . onStop ( ) ; }
public void cancelLoadFile ( TLRPC . Document document ) { cancelLoadFile ( document , null , null , null , null ) ; }
public void onPause ( ) { mRewardedVideoAd . pause ( context ) ; }
public void runJob ( View view ) { new Thread ( new Runnable ( ) { @ Override public void run ( ) { NotificationsUtils . run ( TestingActivity . this , ( AppClass ) getApplication ( ) ) ; } } ) . start ( ) ; }
public boolean isAnimating ( ) { return isAnimating ; }
public static boolean isDebugFps ( ) { return debugFps ; }
public Builder withType ( int type ) { rowType = type ; return this ; }
public NotificationService ( ) { super ( ) ; }
public void notifyClear ( ) throws DAOException { for ( DAO dao : this . daoList ) { dao . deleteAll ( ) ; } }
public void setPrimaryItem ( @ NonNull ViewGroup container , int position , @ NonNull Object object ) { super . setPrimaryItem ( container , position , object ) ; if ( object instanceof Fragment ) { mCurFragment = ( Fragment ) object ; } }
public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; postAdoptPosition ( option ) ; }
public static void unsetChannel ( UUID server , String channel ) { if ( server == sServer && channel != null && channel . equals ( sChannel ) ) { sServer = null ; sChannel = channel ; } }
public com . openwallet . core . protos . Protos . ScryptParametersOrBuilder getEncryptionParametersOrBuilder ( ) { if ( encryptionParametersBuilder_ != null ) { return encryptionParametersBuilder_ . getMessageOrBuilder ( ) ; } else { return encryptionParameters_ ; } }
public String getUrl ( ) { return getBaseUrl ( mMineName ) + getContext ( ) . getString ( R . string . search_path ) ; }
public void onItemDeleted ( @ NonNull Item item ) { Intent intent = new Intent ( ) ; intent . putExtra ( EXTRA_DELETED_ITEM , item ) ; setResult ( RESULT_OK , intent ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( DatasActivity . this , NewDataActivity . class ) ; intent . putExtra ( "dataID" , - 1 ) ; intent . putExtra ( "userID" , userID ) ; startActivityForResult ( intent , 1 ) ; }
public void setAussersonder ( String aussersonder ) { this . aussersonder = aussersonder ; }
private void setUpMiniPlayer ( ) { setUpPlayPauseButton ( ) ; progressBar . setProgressTintList ( ColorStateList . valueOf ( ThemeStore . accentColor ( getActivity ( ) ) ) ) ; }
public BMIEditPresenter provideBMIEditPresenter ( BMIInteractor BMIInteractor ) { return new BMIEditPresenterImpl ( BMIInteractor ) ; }
public List < PhotoTable > getDbPhotoTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getPhotoTable ( getDbConfig ( ) . version , language ) . onErrorComplete ( ) . blockingGet ( ) ; }
public void setAztecImageLoader ( Html . ImageGetter imageLoader ) { this . mAztecImageLoader = imageLoader ; }
public Long getEndTime ( ) { return endTime ; }
public void testLocationDirectionOn ( ) throws IOException { Log . d ( TAG , "testLocationDirectionOn" ) ; setToDefault ( ) ; subTestLocationOn ( true ) ; }
public boolean containsAll ( @ NonNull Collection < ? > c ) { return values . containsAll ( c ) ; }
public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder viewHolder , int i ) { if ( viewHolder instanceof ViewHolderMarketSmall ) { ( ( ViewHolderMarketSmall ) viewHolder ) . setItem ( dataset . get ( i ) ) ; } }
public int getItemCount ( ) { if ( jaxmpps == null ) { return 0 ; } return jaxmpps . size ( ) ; }
public KeyDelegate provideVolumeNavigationDelegate ( ) { return keyDelegate ; }
public String exec ( ExecutePack pack ) { int index = pack . getInt ( ) ; return TimeManager . instance . replace ( "%t" + index ) . toString ( ) ; }
public void removeButton ( int id ) throws IOException { mClientManager . removeButton ( id ) ; }
public void onChanged ( ) { setPageCount ( InkPageIndicator . this . viewPager . getAdapter ( ) . getCount ( ) ) ; invalidate ( ) ; }
public void replaceEvents ( List < Event > events ) { setEvents ( events ) ; }
public com . openwallet . core . protos . Protos . Key . Builder addKeyBuilder ( ) { return getKeyFieldBuilder ( ) . addBuilder ( com . openwallet . core . protos . Protos . Key . getDefaultInstance ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; presenter . resume ( ) ; }
public void onTransactionBroadcastError ( BitTransaction tx ) { queueOnTransactionBroadcastFailure ( tx ) ; }
private void refresh ( ) { removeSplitItemViews ( ) ; bindViews ( ) ; }
private void inputDone ( String result ) { getPresenter ( ) . postPay ( result ) ; }
public Date getDate ( ) { return date ; }
public int getVerseRepeatCount ( ) { return repeatInfo . getRepeatCount ( ) ; }
public static String prettifyTime ( String dateTime ) { String dateToDisplay = getDayOfWeek ( dateTime ) ; String timeToDisplay = getTime ( dateTime ) ; return dateToDisplay + " " + timeToDisplay ; }
public void onFocusChange ( View view , boolean hasFocus ) { mFormattingToolbar . enableFormatButtons ( ! hasFocus ) ; }
public DayOfWeek getWeekday ( ) { return weekday ; }
public List < Genre > getDataSet ( ) { return dataSet ; }
public StackedBarsMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; tvContent = findViewById ( R . id . tvContent ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . base_menu , menu ) ; return ! TextUtils . isEmpty ( pathToArticle ) ; }
public void onCropImageComplete ( CropImageView view , CropImageView . CropResult result ) { croppedImage = result . getBitmap ( ) ; Intent intent = new Intent ( CropAndRotate . this , Binarization . class ) ; startActivity ( intent ) ; }
private String getBookmarkUrl ( ) { String url = "https : String ref = getCurrentRef ( ) ; return ref . equals ( mRepository . defaultBranch ( ) ) ? url : url + "/tree/" + ref ; }
public void onClick ( DialogInterface dialog , final int which ) { showProgress ( ) ; Intent intent = new Intent ( FileManager . this , OpenConstructor . class ) ; intent . putExtra ( AbstractActivity . RESOLUTION_KEY , which ) ; startActivity ( intent ) ; }
public void setParent ( GameBoard top ) { m_Parent = top ; }
private void showEmbeddedCard ( TweetView view ) { embeddedTweetCard . addView ( view . getView ( ) ) ; startAlphaAnimation ( embeddedTweetCard , AppSettings . getInstance ( context ) . darkTheme ? . 75f : 1 . 0f ) ; }
public static DBLessons getInstance ( ) { return mInstance ; }
public Long getId ( ) throws RemoteException { if ( isChannel ( ) ) { return CHANNEL_ID_MASK | mChannel . getId ( ) ; } else if ( isUser ( ) ) { return USER_ID_MASK | mUser . getSession ( ) ; } return null ; }
public void updateSuccessfully ( TagViewModel tag ) { adapter . updateTag ( tag ) ; showSnackbarMessage ( R . string . msg_tag_updated ) ; }
public String getToolbarName ( ) { if ( createCluster ) return getString ( R . string . title_activity_cluster_map_contribute_edit ) ; else if ( cluster != null ) return cluster . name ; else return null ; }
public void setClasses ( String classes ) { this . mClasses = classes ; }
public NoteSearch ( ArrayList < Note > masterList , String query ) { setNoteList ( masterList ) ; setSearchString ( query ) ; search ( ) ; }
public static AnimatorBuilder getInstance ( WeakReference < Context > contextWeakReference ) { ctx = contextWeakReference ; return new AnimatorBuilder ( contextWeakReference . get ( ) . getResources ( ) . getInteger ( android . R . integer . config_mediumAnimTime ) ) ; }
public String getDateLiked ( ) { return StringUtils . notNullStr ( mDateLiked ) ; }
public Workshop findItemById ( String id ) { return realm . where ( Workshop . class ) . equalTo ( "id" , id ) . findFirst ( ) ; }
public void onClick ( View v ) { IconSelectionDialog id = IconSelectionDialog . newInstance ( false ) ; id . setCallback ( EditorFragment . this ) ; id . show ( getBaseActivity ( ) . getSupportFragmentManager ( ) , "icondialog" ) ; }
public Stack ( int initialCapacity ) { mData = new ArrayList <> ( initialCapacity ) ; }
public void handleMessage ( Message msg ) { if ( msg . what == ReadThread . MSG_READ_OK ) { mEditor . replaceAll ( msg . obj . toString ( ) ) ; } }
public void setPenaltyChargesWaived ( Double penaltyChargesWaived ) { this . penaltyChargesWaived = penaltyChargesWaived ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { channel_id = stream . readInt32 ( exception ) ; id = stream . readInt32 ( exception ) ; }
public Conversational getConversation ( ) { return this . conversation ; }
public void nullTest ( ) { try { requestSender . sendRequest ( null , null , this ) ; Thread . sleep ( 1000 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; Assert . fail ( ) ; } }
public void setGraphYearXLabels ( String [ ] labels ) { chartYear . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter <> ( labels ) ) ; }
public List < SupplierProduct > getSupplierProduct ( int expirationDays , List < ExpirationStatus > expirationStatus , long supplierId , String barCode ) { return consultSupplierProducts ( expirationDays , expirationStatus , supplierId , barCode ) ; }
public Mothership ( Bitmap shipBitmap , Bitmap btmHit , boolean isWorthEnemyDestroyedPoint ) { super ( shipBitmap , btmHit , ShipType . MOTHERSHIP , isWorthEnemyDestroyedPoint ) ; }
private ThreadRecord getThreadRecord ( @ NonNull Cursor cursor ) { return threadDatabase . readerFor ( cursor ) . getCurrent ( ) ; }
public Context getContext ( ) { return this . fragment . requireContext ( ) ; }
public void function ( ) { getTemperatures ( ) ; loadCharts ( ) ; }
public LogListAdapter ( Context context , List < LogListEntry > data ) { this ( context , R . layout . log_list_entry , data ) ; }
public void testSafeToAddAuthToken10 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( WPCOM_ADDRESS_3 ) ) ) ; }
public LastReadId setIncoming ( int in ) { this . incoming = in ; return this ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . toolbar_menu , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void useWifi ( Context context , boolean useWifi ) { WifiManager wifiManager = ( WifiManager ) context . getApplicationContext ( ) . getSystemService ( Context . WIFI_SERVICE ) ; wifiManager . setWifiEnabled ( useWifi ) ; }
public void addVideoSink ( VideoSink sink ) { sendMessage ( What . ADD_VIDEO_SINK , 0 , 0 , sink , 0 ) ; }
public static PollEntity . Answer mapPollAnswer ( VKApiPoll . Answer dto ) { return new PollEntity . Answer ( dto . id , dto . text , dto . votes , dto . rate ) ; }
public APDE getGlobalState ( ) { return ( APDE ) getApplication ( ) ; }
public static String getSettingsSharedName ( ) { return SettingsStore . name ; }
public BMI ( Double height , Double weight , Double bmi , Date timestamp ) { this . height = height ; this . weight = weight ; this . bmi = bmi ; this . timestamp = timestamp ; }
public final String getPointYNumber ( ) { return this . pointYNumber ; }
public void onSuccess ( Void aVoid ) { localSource . update ( post , null ) ; if ( loggedUserId . equals ( senderId ) ) return ; Transations . runReputationCountTransition ( senderId , true , true ) ; callback . onSuccess ( post ) ; }
public void settingPreferenceEmptyValueFillZeroSummary ( ) { tester . pickProvider ( Provider . PGNIG ) . getPreferenceAtLine ( 0 ) . changeValueTo ( "" ) . getPreferenceAtLine ( 0 ) . hasSummary ( "0 . 00" ) ; }
public void showActionMode ( String title , Boolean canEdit , Boolean canPin ) { }
public static Spanned html_to_spanned ( String msg , boolean linkify , final Server server ) { return html_to_spanned ( msg , linkify , server , null , false ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; movieDetailsPresenter . destroy ( ) ; unbinder . unbind ( ) ; }
public SuraAyah getSelectionEnd ( ) { return end ; }
private void addPendingUpload ( DCCServerManager . UploadEntry entry ) { if ( entry == null || mPendingUploads . contains ( entry ) ) return ; mPendingUploads . add ( entry ) ; notifyItemInserted ( getPendingUploadsStart ( ) + mPendingUploads . size ( ) - 1 ) ; }
public void execute ( ) { FileCloudFragment . this . mFileCloudFabManager . updateFabButtons ( ) ; }
public ScheduleLessonsShareFragmentPresenterImpl ( ) { super ( ) ; AppComponentProvider . getComponent ( ) . inject ( this ) ; }
public void notifyItemChanged ( int position , @ Nullable Object payload ) { mObservable . notifyItemRangeChanged ( position , 1 , payload ) ; }
private void manualUpdate ( ) { logEvent ( "manual_data_refresh" ) ; LoadPlaylistsAfterAuth ( ) ; }
public Size getPreviewSize ( ) { return previewSize ; }
private void onActionEditChannel ( ) { Intent intent = new Intent ( Settings . ACTION_CHANNEL_NOTIFICATION_SETTINGS ) . putExtra ( Settings . EXTRA_APP_PACKAGE , context . getPackageName ( ) ) . putExtra ( Settings . EXTRA_CHANNEL_ID , channelId ) ; context . startActivity ( intent ) ; }
public void setAltitude ( double altitude ) { this . altitude = altitude ; postInvalidate ( ) ; }
public IntentBuilder replyVisibility ( Status . Visibility replyVisibility ) { this . replyVisibility = replyVisibility ; return this ; }
public void warn ( String msg ) { Log . d ( mTag , msg ) ; }
public void run ( ) { try { monitorAccount ( account , astate , sync ) ; } catch ( Throwable ex ) { Log . e ( account . name , ex ) ; } }
public void onSaveInstanceState ( Bundle savedInstanceState ) { super . onSaveInstanceState ( savedInstanceState ) ; if ( tabLayout != null ) savedInstanceState . putInt ( SAVED_STATE_TAB_SELECTED , tabLayout . getSelectedTabPosition ( ) ) ; }
public void setText ( String text ) { labelTextView . setText ( text ) ; }
private void setMaxScale ( float max ) { this . maxScale = max ; if ( gestureImageViewTouchListener != null ) { gestureImageViewTouchListener . setMaxScale ( max * startingScale ) ; } }
public void warn ( String message ) { log ( "WARNING : " + message ) ; }
public static Builder newBuilder ( com . openwallet . core . protos . Protos . TransactionConfidence prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public synchronized ArrayList < RedditAccount > getAccounts ( ) { if ( accountsCache == null ) { final SQLiteDatabase db = getReadableDatabase ( ) ; reloadAccounts ( db ) ; db . close ( ) ; } return new ArrayList <> ( accountsCache ) ; }
public static String addressSplitToGroups ( final NxtAddress address ) { return address . toString ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { DataManager . getInstance ( ) . deleteHistoryCareItem ( getIntent ( ) . getIntExtra ( "careItemPosition" , - 1 ) ) ; finish ( ) ; }
public MachineCheckerRunnable ( Machine m , String roomName , Handler handler , OnMachineChangedToInUse listener ) { this . listener = listener ; this . m = m ; this . roomName = roomName ; this . handler = handler ; }
public boolean rotatePlane ( ) { return m_PlayerBoard . rotatePlane ( ) ; }
private void selectShaderAndUpdate ( long id ) { autoSave ( ) ; selectShader ( id ) ; getShadersAsync ( ) ; }
public Tile getTile ( Vector2 coords ) { return tileMap [ ( int ) ( coords . y * mapWidth + coords . x ) ] ; }
public StateSwitcher ( ) { this . currentState = TestState . UNKNOWN ; this . viewMap = new HashMap <> ( ) ; this . drawableMap = new HashMap <> ( ) ; }
public String getAuthorAvatar ( ) { return StringUtils . notNullStr ( mAuthorAvatar ) ; }
private BookmarkPresenter makeBookmarkPresenter ( BookmarkModel model ) { return new BookmarkPresenter ( appContext , model , settings , null ) { @ Override void subscribeToChanges ( ) { } } ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return initializeForView ( new Vanish ( ) ) ; }
private TextView obtainView ( View view ) { if ( errorView == null ) errorView = view . getRootView ( ) . findViewById ( errorViewId ) ; return errorView ; }
public void onSuccess ( Object data ) { BluetoothGattCharacteristic characteristic = ( BluetoothGattCharacteristic ) data ; Log . v ( TAG , "sendEncryptedRandomAuthNumber success : " + Arrays . toString ( characteristic . getValue ( ) ) ) ; }
public void setDrawerLayout ( ViewGroup layout ) { drawerLayout = layout ; addView ( drawerLayout ) ; if ( Build . VERSION . SDK_INT >= 21 ) { drawerLayout . setFitsSystemWindows ( true ) ; } }
private boolean validDatabase ( ) { return mDatabase != null && mDatabase . isOpen ( ) ; }
public void getIdLIGHTTest ( ) { int index = 0 ; AppTheme apptheme = AppTheme . getTheme ( index ) ; assertEquals ( index , apptheme . getId ( ) ) ; }
public IBinder onBind ( Intent pIntent ) { start ( pIntent ) ; return mBinder ; }
public void testDoneButtonTypeface ( ) { builder1 . doneButtonTypefacePath ( "doneButton" ) ; assertEquals ( "doneButton" , builder1 . build ( ) . getDoneButtonTypefacePath ( ) ) ; }
public void setWindBearing ( Double windBearing ) { this . windBearing = windBearing ; }
public void clearAllText ( ) { mBuffer . empty ( ) ; }
public void clicked ( InputEvent event , float x , float y ) { game . setScreen ( new MenuScreen ( game , handler ) ) ; }
public void onPause ( ) { if ( callback != null && BluetoothAdapter . getDefaultAdapter ( ) . isEnabled ( ) ) { BluetoothAdapter . getDefaultAdapter ( ) . getBluetoothLeAdvertiser ( ) . stopAdvertising ( callback ) ; disconnect ( ) ; } super . onPause ( ) ; }
public void testGetPreviewCorrectHeader ( ) { Iterable < Preview > previews = repository . getAll ( new ItemsPerPreview ( 0 ) ) ; assertEquals ( "Header 1" , previews . iterator ( ) . next ( ) . getSubtitle ( ) ) ; }
public String next ( ) { if ( current == maxEntries ) { throw new NoSuchElementException ( "Past final string" ) ; } useSearchParameters ( ) ; String str = getCurrentString ( ) ; current ++ ; return str ; }
public ApplicationReadPermissionsRequirementsProvider ( @ NonNull Context context ) { this ( new LibraryStorageReadPermissionsRequirementsProvider ( ) , new ExternalStorageReadPermissionsArbitratorForOs ( context ) ) ; }
private void setRGBValue ( ) { if ( mRGBValue != null ) { mRGBValue . setText ( " ( " + alpha + " , " + red + " , " + green + " , " + blue + " ) " ) ; } }
public static Playable fromStory ( Story story ) { return new Playable ( - 1 , story . getPlayableUrl ( ) , story . getTitle ( ) , false , null , null ) ; }
public ReceiverBundle ( ReceiverBeacon receiverBeacon ) { this . receiverBeacon = receiverBeacon ; this . beaconCount = 0 ; this . aircrafts = new ArrayList <> ( ) ; }
private static void setViewHeight ( View view , int newHeight ) { ViewGroup . LayoutParams layoutParams = view . getLayoutParams ( ) ; layoutParams . height = newHeight ; view . setLayoutParams ( layoutParams ) ; }
public static boolean isVideo ( @ Nullable String mimeType ) { return BASE_TYPE_VIDEO . equals ( getTopLevelType ( mimeType ) ) ; }
public void onLoadFailed ( Exception e , Drawable errorDrawable ) { super . onLoadFailed ( e , errorDrawable ) ; onColorReady ( getDefaultFooterColor ( ) ) ; }
public void onCommentDeleted ( int itemIndex ) { removeCommentAt ( itemIndex ) ; }
public DataSource createDataSource ( ) { return new IcyDataSource ( playerCallback ) ; }
public int count ( ) { return context . getSketchFiles ( ) . size ( ) ; }
public NutrientLevelListAdapter ( Context context , List < NutrientLevelItem > navDrawerItems ) { this . context = context ; this . nutrientLevelItems = navDrawerItems ; }
public PollViewData getPoll ( ) { return poll ; }
public void onFailure ( @ NonNull retrofit2 . Call < ResponseBody > call , @ NonNull Throwable t ) { mLogger . w ( "Failed sending response to middleware" ) ; mSipService . stopSelf ( ) ; }
public short getCurrentLevel ( ) { return currentLevel ; }
public void playAgain ( View view ) { startActivity ( intent ) ; finish ( ) ; */ playAgain ( ) ; }
private void handleShiftForSwitchKeyboard ( ) { if ( mKeyboardSwitcher . isCurrentKeyboardViewUseQwertyKeyboard ( ) ) { checkToggleCapsLock ( ) ; mTaigiKeyboardView . setShifted ( mIsCapsLock || ! mTaigiKeyboardView . isShifted ( ) ) ; } else { mKeyboardSwitcher . handleShift ( ) ; } updateKeyboardViewShiftIcon ( ) ; }
public com . openwallet . core . protos . Protos . Transaction getTransaction ( int index ) { return transaction_ . get ( index ) ; }
public void onAboutClicked ( ) { eventsSubject . onNext ( new Events . GetDataEvent ( ClickedItemType . ABOUT ) ) ; }
public boolean matches ( @ NonNull Attributes attrs ) { return attrs . getIndex ( mAttributeName ) > - 1 && attrs . getValue ( mAttributeName ) . equals ( mId ) ; }
public void setOverpaymentPortion ( Double overpaymentPortion ) { this . overpaymentPortion = overpaymentPortion ; }
public void startFormDisplayActivityWithEncounter ( ) { addSubscription ( encounterDAO . getLastVitalsEncounter ( mPatient . getUuid ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( encounter -> mPatientVitalsView . startFormDisplayActivity ( encounter ) ) ) ; }
public Cursor getArticleAtPosition ( int position ) { return ( Cursor ) m_list . getItemAtPosition ( position ) ; }
public boolean onContextItemSelected ( MenuItem item ) { if ( ! MucDetailsContextMenuHelper . onContextItemSelected ( item , userAdapter . getSelectedUser ( ) , this ) ) { return super . onContextItemSelected ( item ) ; } return true ; }
public static boolean isReady ( ) { return flagReady ; }
public void onHandRelease ( SwipeLayout layout , float xVel , float yVel ) { }
public void setOnComponentChangeCallback ( OnComponentChangeCallback onComponentChangeCallback ) { super . setOnComponentChangeCallback ( onComponentChangeCallback ) ; for ( Component child : getChildren ( ) ) { child . setOnComponentChangeCallback ( onComponentChangeCallback ) ; } }
public void onPageSelected ( int position ) { LogUtil . d ( TAG , "onPageSelected : " + position ) ; refreshAdapters ( position ) ; setCalendarDateTime ( currentDateTime ) ; }
public void onClick ( View view ) { alertDialogExit ( ) ; }
public void takePhoto ( ) { Runnable runnable = new Runnable ( ) { @ Override public void run ( ) { magicalCameraObject . getActionPicture ( ) . takePhoto ( ) ; } } ; askPermissions ( runnable , CAMERA ) ; }
public String getId ( ) { return "pie" ; }
private void setUpSubFragments ( ) { playbackControlsFragment = ( CardPlayerPlaybackControlsFragment ) getChildFragmentManager ( ) . findFragmentById ( R . id . playback_controls_fragment ) ; playerAlbumCoverFragment = ( PlayerAlbumCoverFragment ) getChildFragmentManager ( ) . findFragmentById ( R . id . player_album_cover_fragment ) ; playerAlbumCoverFragment . setCallbacks ( this ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_app_switch , parent , false ) ) ; }
public void set ( float i ) { this . f = i ; onChange ( ) ; }
public void onBackPressedCancelTransaction ( ) { Toast . makeText ( PayTMActivity . this , "Back pressed . Transaction cancelled" , Toast . LENGTH_LONG ) . show ( ) ; finish ( ) ; }
public void onSwipeItemStarted ( @ NonNull MyViewHolder holder , int position ) { notifyDataSetChanged ( ) ; }
public void onAnimationEnd ( Animator animation ) { onAnimationEndCheck ( false ) ; }
public QueryRow setTitle ( Object obj ) { return setColumn ( CalendarContract . Instances . TITLE , obj ) ; }
public GameActivity getActivity ( ) { return this . activity ; }
private void initToolbar ( ) { Toolbar toolbar = findViewById ( R . id . main_toolbar ) ; setSupportActionBar ( toolbar ) ; }
private void addMethodStubs ( Event event ) { CommonMocksInteractions . addDataStoreStubs ( dataStore , event ) ; CommonMocksInteractions . addGetCurrentDateStubToTimeProvider ( timeProvider , today ) ; CommonMocksInteractions . addScheduleReminderStubToEventRemindersManager ( eventReminderManager ) ; }
public CardDevice ( Context context ) { this . context = context ; id = nextID ++ ; }
private boolean isThisPostTotallyNewOrFailed ( PostImmutableModel post ) { return ! mUploadStore . isRegisteredPostModel ( post ) || ( mUploadStore . isFailedPost ( post ) || mUploadStore . isPendingPost ( post ) ) ; }
public void setOnItemSwipeEventListener ( @ Nullable OnItemSwipeEventListener listener ) { mItemSwipeEventListener = listener ; }
public boolean isActive ( ) { return getReminder ( ) . isActive ( ) ; }
public void parseFlySightDateTest ( ) throws Exception { long millis = 1517000000400L ; String str = "2018 - 01 - 26T20 : 53 : 20 . 40Z" ; long parsed = CSVParse . parseFlySightDate ( str ) ; assertEquals ( millis , parsed ) ; }
public void unlock ( ) { ( ( CrosshairRenderer ) mRenderer ) . setColor ( mColor ) ; ( ( CrosshairRenderer ) mRenderer ) . setFading ( true ) ; }
public void write ( List < DistrictRanking > districtTeams , Long lastModified ) { mDb . getDistrictTeamsTable ( ) . add ( ImmutableList . copyOf ( districtTeams ) , lastModified ) ; }
public RetrievePlayerData ( Pending < Player > onPlayerFetched ) { this . onPlayerFetched = onPlayerFetched ; }
public void gotoDashboard ( String workflowId ) { mListener . activateAcknowledged ( workflowId ) ; }
public DistrictTeamsTable getDistrictTeamsTable ( ) { return mDistrictTeamsTable ; }
public void updateMainActor ( ) { if ( mMainActor == null ) { return ; } mMainActor . setPercent ( ( mValue - mMin ) / ( float ) ( mMax - mMin ) ) ; mMainActor . setText ( formatValue ( getIntValue ( ) ) ) ; }
public boolean dispatchTouchEvent ( @ NonNull MotionEvent event ) { currentMotionEvent = event ; MotionEvent invertedEvent = applyMatrix ( event , matrixInverse ) ; try { return super . dispatchTouchEvent ( invertedEvent ) ; } finally { invertedEvent . recycle ( ) ; } }
private void setPower ( float power ) { this . power = power ; }
public void setMessageData ( final String messageData ) { this . messageData = messageData ; }
public static IDatabaseInteractor createDatabaseInteractor ( ) { return new DatabaseInteractor ( Injection . provideStores ( ) . database ( ) , Injection . provideNetworkInterfaces ( ) ) ; }
public void onItemClick ( AdapterView < ? > adapterView , View view , int position , long l ) { dismissWithButtonClick ( position ) ; }
public void onChildChanged ( DataSnapshot dataSnapshot , String previousChildKey ) { feedAdapter . addItem ( dataSnapshot ) ; }
public void setDataSource ( final String path ) { mIsInitialized = false ; mIsInitialized = setDataSourceImpl ( mCurrentMediaPlayer , path ) ; if ( mIsInitialized ) { setNextDataSource ( null ) ; } }
public void testGetTypeDefault ( ) { item . populate ( new TestItem ( ) { @ Override public String getRawType ( ) { return null ; } } ) ; assertEquals ( Item . STORY_TYPE , item . getType ( ) ) ; }
public int getItemCount ( ) { return bulkReadCardsServiceBinder != null ? bulkReadCardsServiceBinder . getRunners ( ) . size ( ) : 0 ; }
public Engine onCreateEngine ( ) { _mEngine = new OpenGLESEngine ( ) ; return _mEngine ; }
public static void delete_file ( String file ) { Log . d ( TAG , "Delete file : " + file ) ; Shell . SU . run ( Collections . singletonList ( "rm - rf " + file ) ) ; }
public void setMessageId ( final String messageId ) { this . messageId = messageId ; }
public void beforeTextChanged ( CharSequence s , int start , int count , int after ) { if ( count != after ) { mPostChangedInMemory = true ; mActivity . supportInvalidateOptionsMenu ( ) ; } }
public String getString ( @ NonNull String key , @ Nullable String defaultValue ) { return preferences . getString ( key , defaultValue ) ; }
public final void unDimBackground ( ) { Tool . invisibleViews ( 200 , getBackground ( ) ) ; }
public int getPolygonCorners ( ) { return Constants . UNIT_TANK_CORNERS ; }
public Builder clearPool ( ) { bitField0_ = ( bitField0_ & ~0x00000008 ) ; pool_ = com . coinomi . core . protos . Protos . Transaction . Pool . UNSPENT ; onChanged ( ) ; return this ; }
public Upload setAutoCommit ( boolean autoCommit ) { this . autoCommit = autoCommit ; return this ; }
public OwnerEntities ( @ NonNull List < UserEntity > userEntities , @ NonNull List < CommunityEntity > communityEntities ) { this . userEntities = userEntities ; this . communityEntities = communityEntities ; }
public void onActionStateChanged ( ) { checkVibrateOnClickState ( ) ; TimeManager . INSTANCE . toggle ( ) ; playStopwatch ( ) ; }
public void onAdLoaded ( ) { Log . d ( "IV Banner Ad Test" , "Add Finished Loading" ) ; }
public FluentQuery limit ( int value ) { mLimit = String . valueOf ( value ) ; return this ; }
public void onAttachedToRecyclerView ( @ NonNull RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; parentRecycler = recyclerView ; }
public void setUp ( ) throws Exception { canvas = spy ( new Canvas ( ) ) ; xyPlot = spy ( new XYPlot ( getContext ( ) , "My Plot" ) ) ; }
public void decreaseFontSize ( ) { setFontSize ( fontSizeDp - FONT_SIZE_STEP ) ; }
public com . openwallet . core . protos . Protos . ScryptParameters getEncryptionParameters ( ) { return encryptionParameters_ ; }
private static void putFoodTypeVideos ( Resources res , String food , int urlId ) { foodTypeVideos . put ( food , getVideoLink ( res . getString ( urlId ) ) ) ; }
public void onClick ( View view ) { saveFavourite ( ) ; showFavouriteListButton ( ) ; }
public static boolean canShowRemoval ( String subreddit ) { return SettingValues . toolboxEnabled && Toolbox . getConfig ( subreddit ) != null && Toolbox . getConfig ( subreddit ) . getRemovalReasons ( ) != null ; }
public void setBlockID ( @ Nullable BurstID blockID ) { this . blockID = blockID ; }
public Drawable getDrawable ( int resId ) { return this . fragment . getResources ( ) . getDrawable ( resId ) ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new ThreadMediaLoader ( getContext ( ) , recipient . getAddress ( ) , false ) ; }
public static void compressTo ( @ NonNull Context c , final FileHolder tbc , File compressTo ) { compressTo ( c , singletonList ( tbc ) , compressTo ) ; }
public void notifyDeletion ( Object obj ) throws DAOException { for ( DAO dao : this . daoList ) { dao . delete ( obj ) ; } }
public void onBackPressed ( ) { inputView . hideKeyboard ( ) ; }
public void onRemoteEvent ( EventBusManager . RemoteServiceEvent event ) { if ( event . message . equals ( EventBusManager . RemoteServiceEvent . GET_VOTE_LIST_SEARCH ) ) { refreshData ( event . voteDataList , event . offset ) ; hideLoadingCircle ( ) ; } }
public void setHeight ( float height ) { size . getHeight ( ) . setValue ( height ) ; }
public void stopListeningToLoggerStatus ( ) { DataLogger . get ( ) . unregisterStatusListener ( dataStatusListener ) ; loggerStatusListener = false ; }
public void onAudioDisabled ( DecoderCounters counters ) { if ( audioDebugListener != null ) { audioDebugListener . onAudioDisabled ( counters ) ; } audioFormat = null ; audioDecoderCounters = null ; audioSessionId = C . AUDIO_SESSION_ID_UNSET ; }
private void setupMessage ( LocationViewHolder holder , LocationRecordItem item ) { holder . mTvLocationRecordMessage . setMaxLines ( item . isExpanded ( ) ? EXPANDED_ITEM_MESSAGE_MAX_LINES : COLLAPSED_ITEM_MESSAGE_MAX_LINES ) ; }
public void onClick ( DialogInterface dialog , int which ) { String text = getDownload . getText ( ) . toString ( ) ; text = FileUtils . addNecessarySlashes ( text ) ; mPreferenceManager . setDownloadDirectory ( text ) ; downloadloc . setSummary ( text ) ; }
public void setVisitType ( VisitType visitType ) { this . visitType = visitType ; }
public void setIdentifier ( @ NonNull String identifier ) { this . identifier = identifier ; }
private void dnsResolved ( ResourceRecord rr ) { if ( DatabaseHelper . getInstance ( KcaVpnService . this ) . insertDns ( rr ) ) { Log . i ( TAG , "New IP " + rr ) ; prepareUidIPFilters ( rr . QName ) ; } */ }
public Promise < ? > pause ( ) { return playlistPlayer . pause ( ) ; }
public void onSuccess ( String url , String path , boolean from_cache ) { mJsInterface . displayImage ( url , path , id ) ; }
public void handleMessage ( Message msg ) { String filename = ( String ) msg . obj ; try { service . exportSettingsToPath ( filename ) ; } catch ( RemoteException e ) { throw new RuntimeException ( e ) ; } }
public void scrollToGroup ( int groupPosition , int childItemHeight ) { scrollToGroup ( groupPosition , childItemHeight , 0 , 0 , null ) ; }
public void onClick ( View v ) { Tool . startApp ( v . getContext ( ) , app , null ) ; }
public static String getRecoveryPartition ( ) { if ( recovery == null ) { for ( String partition : Recovery ) { if ( Utils . existFile ( partition ) ) { recovery = partition ; return partition ; } } } return recovery ; }
private void updateLastModification ( ) { this . lastModification = Calendar . getInstance ( ) . getTime ( ) ; }
private void disconnect ( ) { this . hostNodeId = null ; NTPTime . close ( ) ; this . setState ( DeviceState . IDLE ) ; }
public void onClick ( View v ) { onClickListener . onClickDelete ( holder . getAdapterPosition ( ) , context ) ; }
public static com . openwallet . core . protos . Protos . AddressStatus parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public void setKinderwagen ( boolean kinderwagen ) { this . kinderwagen = kinderwagen ; }
public Single < List < Event >> getEvents ( EventRepository appDataStore ) { return appDataStore . getByFavorite ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; presenter . detachView ( ) ; }
public void onReceive ( Context context , Intent intent ) { String workoutName = intent . getExtras ( ) . getString ( CalcExtremaValuesTask . FANCY_NAME ) ; editExportName . setText ( workoutName ) ; }
public void run ( ) { notifyAllLocalMusicListenerSucceeded ( fileModels , cacheResult ) ; }
public void notifyDataChanged ( ) { calcMinMax ( ) ; }
public static int loadShipInitEquipCountFromStorage ( Context context ) { JsonObject data = getJsonObjectFromStorage ( context , "ships_init_equip_count . json" ) ; if ( data != null ) { kcShipInitEquipCount = data . getAsJsonObject ( ) ; return 1 ; } else { return - 1 ; } }
public void checkForAutoCompleteButton ( boolean withoutMovement ) { if ( ! prefs . getHideAutoCompleteButton ( ) && ! autoComplete . buttonIsShown ( ) && currentGame . autoCompleteStartTest ( ) && ! hasWon ( ) ) { autoComplete . showButton ( withoutMovement ) ; } }
public int lastPageIndex ( ) { return isRtl ( ) ? 0 : pages . size ( ) - 1 ; }
public static String withUri ( String name ) { return "uri : " + name ; }
public Set < BoundingBox > asSet ( ) { return boxes ; }
private void loadNextItems ( ) { if ( ! isLoading && ! isError && callbacks != null && callbacks . canLoadNextItems ( ) ) { isLoading = true ; onLoadingStateChanged ( ) ; callbacks . loadNextItems ( ) ; } }
public void setCisId ( int cisId ) { this . cisId = cisId ; }
public FileAudioModelBuilder artist ( String artist ) { this . mArtist = artist ; return this ; }
public void onHeaderClick ( ItemHeader item ) { selectedData = item . data ; ERA . log ( "isFinishing = " + isFinishing ( ) ) ; InfoListDialog . Companion . newInstance ( item . title ) . show ( getSupportFragmentManager ( ) , "dialog_info" ) ; }
public void setWidth ( float width ) { size . getWidth ( ) . setValue ( width ) ; }
public VH onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { final VH holder = super . onCreateViewHolder ( parent , viewType ) ; if ( holder instanceof SwipeableItemViewHolder ) { ( ( SwipeableItemViewHolder ) holder ) . setSwipeStateFlags ( STATE_FLAG_INITIAL_VALUE ) ; } return holder ; }
public Double getPenaltyChargesPaid ( ) { return penaltyChargesPaid ; }
public List < Long > getMissingIds ( ) { return mMissingIds ; }
public int getCount ( ) { if ( mIsPlaceholderAccount ) return 1 ; else return DEFAULT_NUM_PAGES ; }
public void testTtoS ( ) { assertTrue ( "Test TtoS failed . " , strSimple . equals ( Transformer . TtoS ( strTraditional ) ) ) ; }
public static boolean getPremiumStatus ( Activity a ) { SharedPreferences sharedPref = a . getSharedPreferences ( "PREMIUM" , Context . MODE_PRIVATE ) ; return sharedPref . getBoolean ( "premium" , false ) ; }
public SignDataRepo ( ) { SignData signData = new SignData ( ) ; }
public void openBanEditor ( int accountId , int groupId , Banned banned ) { PlaceFactory . getCommunityBanEditPlace ( accountId , groupId , banned ) . tryOpenWith ( requireActivity ( ) ) ; }
public void stop ( ) { scheduler . shutdownNow ( ) ; clipboardConnector . close ( ) ; }
public static ListAdapter createPayeeAdapter ( Context context , List < Payee > payees ) { return new MyEntityAdapter <> ( context , android . R . layout . simple_spinner_dropdown_item , android . R . id . text1 , payees ) ; }
public static boolean isLockModeEnabled ( ) { return Prefs . contains ( Constants . PREF_LOCK ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_calculator , parent , false ) ; return new ViewHolder ( v ) ; }
private double litreTogallon ( double num ) { return num * 0 . 2641721769d ; }
public MessageEditEntity setForward ( List < MessageEntity > forward ) { this . forward = forward ; return this ; }
public Double getInterestWrittenOff ( ) { return interestWrittenOff ; }
private void getShuyookhData ( ) { if ( disposable != null ) { disposable . dispose ( ) ; } disposable = AudioManagerUtils . shuyookhDownloadObservable ( quranInfo , basePath , qariItems ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribeWith ( mOnDownloadInfo ) ; }
public void onButtonStateChanged ( ImageButton v , int row , int index , boolean state ) { }
public void testNoAndroidSettings ( ) { mJsonData . remove ( APIStatusDeserializer . ANDROID_SETTINGS_TAG ) ; mStatus = mDeserializer . deserialize ( mJsonData , ApiStatus . class , mContext ) ; }
public void loadMenuSceneFromLevelChoiceScene ( ) { startSceneService ( loadingSceneService ) ; endSceneService ( levelModeSceneService ) ; startSceneService ( menuSceneService ) ; }
public void openConnection ( final String applicationName ) { if ( mConnectionState != STATE_NOT_CONNECTED ) return ; mConnectionState = STATE_CONNECTING ; mNeedsRestoration = true ; mApplicationName = applicationName ; checkStartConnection ( ) ; }
private static String getAyaPositionFileName ( ) { QuranScreenInfo qsi = QuranScreenInfo . getInstance ( ) ; if ( qsi == null ) { return null ; } return getAyaPositionFileName ( qsi . getWidthParam ( ) ) ; }
public void onBackPressed ( ) { if ( sv . getVisibility ( ) != View . GONE ) { sv . setIconified ( true ) ; sv . setVisibility ( View . GONE ) ; } else { super . onBackPressed ( ) ; } }
private long getToDoIdArgument ( ) { if ( getArguments ( ) == null ) return 0 ; return getArguments ( ) . getLong ( KEY_TODO_ID ) ; }
private void restoreScaleButton ( ) { if ( isDark ) zoomOut . setImageResource ( R . drawable . ic_arrow_upward_white_24dp ) ; else zoomOut . setImageResource ( R . drawable . ic_arrow_upward_black_24dp ) ; }
public void cancelLongPress ( ) { super . cancelLongPress ( ) ; if ( getAudioVideoImageTextLabel ( ) != null ) { getAudioVideoImageTextLabel ( ) . cancelLongPress ( ) ; } if ( getHelpTextView ( ) != null ) { getHelpTextView ( ) . cancelLongPress ( ) ; } }
private void openChildrenManagerActivity ( boolean isFirst ) { Intent it = new Intent ( this , ChildrenManagerActivity . class ) ; it . putExtra ( ChildrenManagerActivity . EXTRA_IS_FIRST_OPEN , isFirst ) ; startActivityForResult ( it , Activity . RESULT_FIRST_USER ) ; }
public FreeStation ( String _stationNumber , boolean hasDAO ) { this ( _stationNumber , MathUtils . IGNORE_DOUBLE , hasDAO ) ; }
public final String getArtistAlbumSortOrder ( ) { return mPreferences . getString ( ARTIST_ALBUM_SORT_ORDER , SortOrder . ArtistAlbumSortOrder . ALBUM_YEAR ) ; }
public static boolean contains ( Object [ ] items , Object item ) { for ( Object arrayItem : items ) { if ( areEqual ( arrayItem , item ) ) { return true ; } } return false ; }
public void onStartMusic ( long episodeId ) { updateUI ( ) ; }
public int [ ] onCreateDrawableState ( int extraSpace ) { int [ ] drawableState = super . onCreateDrawableState ( extraSpace + 1 ) ; if ( isChecked ( ) ) { mergeDrawableStates ( drawableState , CHECKED_STATE_SET ) ; } return drawableState ; }
public void notifyTabViewRemoved ( int position ) { Log . d ( TAG , "Notify Tab Removed : " + position ) ; mTabsView . tabRemoved ( position ) ; }
public NumberEditText ( Context context ) { super ( context ) ; setUp ( ) ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "UPDATE `identity` SET use_ip = 1" ) ; }
public final void resetOccupiedSpace ( ) { if ( _cellSpanH > 0 && _cellSpanV > 0 ) { _occupied = new boolean [ _cellSpanH ] [ _cellSpanV ] ; } }
public Polyinr withOpen ( double open ) { this . open = open ; return this ; }
public MunitionsFactory ( int shipMoveDistance , long initialVelocityTime , Context context ) { this ( INITIAL_BULLETS , shipMoveDistance , initialVelocityTime , context ) ; }
public PeriodPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public boolean insert ( String tid , String placeName , float latitude , float longitude ) { String timestamp = TimestampUtil . getTimestamp ( ) ; return this . insert ( tid , placeName , timestamp , latitude , longitude ) ; }
private BlurTransformation ( Builder builder ) { super ( ) ; init ( builder ) ; }
public void markAsSent ( Model observation , int status ) { if ( observation != null ) { observation . setInt ( "uploaded" , status , true ) ; ProjectManager . get ( ) . forceSave ( ) ; fireStatusModified ( "upload" ) ; } }
public void setActionBarPadding ( Activity activity ) { WindowHelper window = new WindowHelper ( ) ; Toolbar toolbar = ( Toolbar ) activity . findViewById ( TOOLBAR ) ; toolbar . setPadding ( 0 , window . getStatusBarFromPrefs ( activity ) , 0 , 0 ) ; }
public void setText ( String text ) { header . setTitle ( text ) ; adapter . notifyDataSetChanged ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . menu , menu ) ; editItem = menu . getItem ( 1 ) ; return true ; }
public void onCreate ( ) { super . onCreate ( ) ; PowerManager powerManager = ( PowerManager ) getSystemService ( Context . POWER_SERVICE ) ; mWakeLock = powerManager . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , "TcpClientService" ) ; }
public void clipView ( @ Nullable RectF rect , float rotation ) { clipViewHelper . clipView ( rect , rotation ) ; }
public long getUpdateInterval ( ) { return Constants . OWNED_STATE_UPDATE_INTERVAL ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseSongOffer prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onClick ( ProjectDataIntra projectData ) { BottomSheetProjectsGalaxyFragment . openIt ( requireActivity ( ) , projectData , activity . user . id ) ; }
public void runUpdate ( ) { ActivityUpdateTask updateTask = new ActivityUpdateTask ( ) ; updateTask . execute ( ) ; }
public void setItemStack ( ItemStack itemStack ) { label . setText ( itemStack . getName ( ) ) ; pack ( ) ; }
public Disposable subscribeForTimer ( Consumer < AudioRecorder . RecordTime > timerConsumer ) { return audioRecorder . subscribeTimer ( timerConsumer ) ; }
public void setIndeterminateTintMode ( @ Nullable PorterDuff . Mode tintMode ) { logProgressBarTintWarning ( ) ; setSupportIndeterminateTintMode ( tintMode ) ; }
public void prepare ( MediaSource mediaSource , boolean resetPosition , boolean resetState ) { player . prepare ( mediaSource , resetPosition , resetState ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return appList [ ( int ) value ] ; }
public TestComponentRule ( Context context ) { this . context = context ; MarietjeApp application = MarietjeApp . get ( context ) ; testComponent = DaggerTestComponent . builder ( ) . appTestModule ( new AppTestModule ( application ) ) . build ( ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { StickerCell view = new StickerCell ( mContext ) ; return new RecyclerListView . Holder ( view ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . quiz_item , parent , false ) ; return new QuizRecyclerViewAdapter . ViewHolder ( view ) ; }
public long getItemId ( int position ) { position -- ; if ( position < 0 ) return - 2 ; return ( ( List < PlaylistSong > ) ( List ) dataSet ) . get ( position ) . idInPlayList ; }
public void run ( LottieComposition composition ) { playAnimation ( ) ; }
public void pause ( ) { if ( musicSrv == null || playbackPaused ) return ; playbackPaused = true ; musicSrv . pausePlayer ( ) ; }
public static boolean ValidatePassword ( String password ) { return ( password . matches ( "^ [ \\w ! @ #\\$%\\^ & \\*\\ ( \\ ) ] { 4 , } $" ) ) ; }
private boolean deleteTableFile ( String database , String table ) { String fileName = getFileName ( prefix , database , table ) ; return context . deleteFile ( fileName ) ; }
public QueueRecyclerAdapter ( List < UnifiedTrack > queue , Context ctx , OnDragStartListener listener ) { this . queue = queue ; this . ctx = ctx ; mDragStartListener = listener ; imgLoader = new ImageLoader ( ctx ) ; }
public String getUsername ( ) { return prefs . getString ( "username" , isLoggedIn ( ) ? SIAApp . SIA_APP . getString ( R . string . anonymous ) : null ) ; }
public static ArrayList < CategoryNode > getSortedListOfCategoriesFromRoot ( CategoryNode node ) { ArrayList < CategoryNode > sortedCategories = new ArrayList <> ( ) ; preOrderTreeTraversal ( node , 0 , sortedCategories ) ; return sortedCategories ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . iv_protect_your_inf_about2 : fragmentBookInterface . finishedActivity ( true ) ; break ; default : break ; } }
public Double getViews ( ) { return views ; }
public PsychicServer ( int discoveryPort ) { super ( discoveryPort ) ; }
public void describeTo ( Description description ) { description . appendText ( error ) ; }
private double gallonTocum ( double num ) { return num * 0 . 00378541d ; }
public static int ruleTextSize ( ) { return gPrefs . getInt ( "ruleTextSize" , 32 ) ; }
private BroadcastReceiver mClearSelectionReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { recentListAdapter . deselectAll ( ) ; } } ;
private boolean checkPermission ( String permission ) { int checkPermission = ContextCompat . checkSelfPermission ( getActivity ( ) , permission ) ; return checkPermission == PackageManager . PERMISSION_GRANTED ; }
public int compareTo ( @ NonNull final Classifier classifier ) { if ( classifier instanceof DateClassifier ) { return ( ( DateClassifier ) classifier ) . getDate ( ) . compareTo ( getDate ( ) ) ; } return - 1 ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenu . ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = this . getMenuInflater ( ) ; inflater . inflate ( R . menu . context_list_row_delete , menu ) ; }
public ITempDataStorage tempStore ( ) { return tempData ; }
public UserProfile ( ) { }
private void moveScrollToLastMessage ( ) { if ( chatListView != null && ! messages . isEmpty ( ) ) { chatLayoutManager . scrollToPositionWithOffset ( messages . size ( ) - 1 , - 999999 - chatListView . getPaddingTop ( ) ) ; } }
private void longClick ( ) { mSeekbar . setProgress ( round10 ( mSeekbar . getProgress ( ) + ( positive ? 10 : - 10 ) ) - min ) ; }
public String getSrc ( ) { return mSrc ; }
public PendingIsbnListAdapter ( Context context ) { super ( context , 0 ) ; mLayoutInflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public com . openwallet . core . protos . Protos . Key getDefaultInstanceForType ( ) { return com . openwallet . core . protos . Protos . Key . getDefaultInstance ( ) ; }
public void run ( ) { updateEndTime ( ) ; updateDisplay ( 1000 ) ; }
public void putBoolean ( String key , Boolean value ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; prefs . edit ( ) . putBoolean ( key , value ) . apply ( ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( "https : }
public void onCompletion ( AudioFragment audio ) { mImageButton . setImageResource ( R . drawable . play ) ; mProgressBarAnimator . end ( ) ; mStatus = STATUS_ENDED ; }
private void onImageClick ( int itemPos , int imagePos ) { openImageInPager ( pagerAdapter , itemPos , imagePos ) ; }
public void setCommunity ( CommunityModel model ) { this . community = model ; communityTitle . setText ( model . getmName ( ) ) ; communityIcon . setImageResource ( CommunityUtils . getCommunityIcon ( community . getmTag ( ) ) ) ; }
public void handleMessage ( Message msg ) { if ( mPrefFullscreenReview > 0 ) { CompatHelper . getCompat ( ) . setFullScreen ( AbstractFlashcardViewer . this ) ; } }
public synchronized void setMessages ( String newMessage ) { this . loggedMessagesQueue . offer ( "\n" + newMessage ) ; notifyPropertyChanged ( BR . messages ) ; }
public ContactsDisplayListAdapter ( Context context , ArrayList < ContactDisplayList > contacts ) { super ( context , 0 , contacts ) ; }
public double getValue ( ) { return value ; }
public Filter removeFilter ( int position ) { Filter filter = mList . remove ( position ) ; notifyItemRemoved ( position ) ; return filter ; }
public void onStart ( ) { super . onStart ( ) ; boot ( ) ; }
private void load ( ) { log . d ( "RECYCLER" , "load start" ) ; plants = Plant . all ( ) ; Collections . sort ( plants ) ; log . d ( "RECYCLER" , "load stop" ) ; }
public RankAdapter ( ArrayList < GalleryDTO > rankerList ) { this . mRankerList = rankerList ; }
public void setCurrentItem ( int item , boolean smoothScroll ) { if ( Math . abs ( getCurrentItem ( ) - item ) > 1 ) { super . setCurrentItem ( item , false ) ; } else { super . setCurrentItem ( item , false ) ; } }
public boolean canZoomInMoreY ( ) { return mScaleY < mMaxScaleY ; }
public static TweetMediaInformation getGIFUrl ( Status status , String otherUrls ) { return getGIFUrl ( status . getMediaEntities ( ) , otherUrls ) ; }
public void showItems ( Cursor items ) { mAdapter . swapCursor ( items ) ; }
public void onTimeout ( long age ) { if ( mIsConnected ) mClientListener . onClientTimeout ( mClient ) ; closeAndSignalClient ( ) ; }
public void onTextChanged ( CharSequence charSequence , int i , int i1 , int i2 ) { if ( isEnabled ) performTypeValue ( charSequence . toString ( ) ) ; }
public void setPackageName ( String packageName ) { xml . setString ( "package" , packageName ) ; }
public PemToKeyPairTask ( @ NonNull String pemContent , AsyncTaskResult . Callback < AsyncTaskResult < KeyPair >> callback ) { this ( pemContent . getBytes ( ) , callback , null , null , null ) ; }
private void addInfo ( ) { finish ( ) ; startActivity ( new Intent ( MainActivity . this , FaceDetectActivity . class ) ) ; }
public void onDestroy ( ) { if ( mosaicBitmap != null && ! mosaicBitmap . isRecycled ( ) ) { mosaicBitmap . recycle ( ) ; } view = null ; }
public Bitmap getAtDesiredScale ( ) { return mTileLoaders [ mDesiredScaleIndex ] . get ( ) ; }
public String getMemberId ( ) { return memberId ; }
public void onProgressUpdate ( HybridFileParcelable . . . val ) { if ( ! isCancelled ( ) && mCallbacks != null ) { mCallbacks . onProgressUpdate ( val [ 0 ] , mInput ) ; } }
private DatabaseHelper ( Context context ) { super ( context , DATABASE_NAME , null , DATABASE_VERSION ) ; mContext = context ; }
public double getValue ( ) { if ( atomType != Atom . AtomType . INVALID ) { return parser . getVarVal ( varName ) ; } else { throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; } }
public static DrawerMenuItem drawerMenuItem ( ) { return DrawerMenuItem . CATEGORIES ; }
public TeamMatchVideoNotificationViewModel renderToViewModel ( Context context , @ Nullable Void aVoid ) { String header = getNotificationCardHeader ( context , EventHelper . shortName ( mEventName ) , EventHelper . getShortCodeForEventKey ( mEventKey ) ) ; return new TeamMatchVideoNotificationViewModel ( ) ; }
public RecyclerGenreChipAdapter . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = inflater . inflate ( R . layout . genre_chip , parent , false ) ; return new RecyclerGenreChipAdapter . ViewHolder ( view ) ; }
public int getItemPosition ( Object object ) { return POSITION_NONE ; }
public int read ( ByteBuffer dst ) throws IOException { int bytes ; if ( ( ( bytes = byteChannel . read ( dst ) ) > 0 ) ) { ServiceWatcherUtil . position += bytes ; return bytes ; } return 0 ; }
public double getPreviousLatitude ( ) { Location loc = getPreviousLocationInfo ( ) ; return loc != null ? loc . getLatitude ( ) : 0 ; }
private void initialize ( ) { if ( isTextZoomSupported ( ) ) { defaultTextZoom = getSettings ( ) . getTextZoom ( ) ; scaleDetector = new ScaleGestureDetector ( getContext ( ) , new ScaleListener ( ) ) ; } }
public void setUpAndLogIn ( ) throws InterruptedException { nowNavigateRightTimes ( 2 ) ; HelperCode . signInPrimaryTestUser ( ) ; nowNavigateRight ( ) ; }
public void flowComplete ( long workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { updateCommonCode ( ostWorkflowContext ) ; }
private String getTOC ( ZipFile epubFile ) throws IOException { return getElement ( epubFile , ZipFileConstants . TOC ) ; }
public int getCount ( ) { return appInfoList . size ( ) ; }
public boolean isScrollable ( ) { return scrollable ; }
public void onLongItemClick ( View v , PhysicalActivity item ) { }
public void addWidget ( ) { device = UiDevice . getInstance ( InstrumentationRegistry . getInstrumentation ( ) ) ; device . pressHome ( ) ; device . pressHome ( ) ; }
private void disableTagWriteMode ( ) { isInWriteMode = false ; writeTagDialog . dismiss ( ) ; }
public Loader < List < LecturesData >> onCreateLoader ( int i , Bundle bundle ) { return new LectureLoader ( this , LECTURES_URL ) ; }
public DrawerBuilder withSelectedItem ( long selectedItemIdentifier ) { this . mSelectedItemIdentifier = selectedItemIdentifier ; return this ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; mApiInterface = getApiInterface ( ) ; mFeedApiInterface = getFeedApiInterface ( ) ; initializedRealm ( ) ; }
public Fragment getItem ( int position ) { if ( position == 1 ) { return NfcFragment . newInstance ( wifiNetwork ) ; } else { return QrCodeFragment . newInstance ( wifiNetwork ) ; } }
public DimPreferenceController ( final Context context ) { this . context = context ; this . preferences = context . getSharedPreferences ( DIM_BLOCK_PREFERENCES , Context . MODE_PRIVATE ) ; }
public void start ( ) { try { stop ( ) ; connect ( ) ; } catch ( IOException | com . neovisionaries . ws . client . WebSocketException e ) { e . printStackTrace ( ) ; } }
public void onClick ( DialogInterface dialog , int which ) { OverlayViewManager . getInstance ( ) . requestOverlayPermission ( ) ; }
public UserProfile ( @ NonNull JSONObject obj ) throws JSONException { this ( obj , null ) ; }
public void saveUsePalette ( boolean usePalette ) { PreferenceUtil . getInstance ( ) . setSongColoredFooters ( usePalette ) ; }
public void onError ( String msg , Throwable e ) { Timber . e ( e , msg ) ; onSuccess ( Collections . < String > emptyList ( ) ) ; }
public static SettingsPresenter providePresenter ( SettingsPresenterImpl presenter ) { return presenter ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { rootView = inflater . inflate ( R . layout . fragment_recipe_detail , container , false ) ; selectedRecipeStepPosition = RecipeDataUtils . getPositionOfStep ( ) ; updateView ( ) ; return rootView ; }
public int getBestImageHeight ( int imageType ) { return 0 ; }
public String getMailtoURI ( ) { return "mailto : " ; }
public void onPermissionDenied ( List < String > deniedPermissions ) { }
public int getScore ( ) { return ship . isAlive ( ) && nbBase - domes . size ( ) == 0 ? 100 : 0 ; }
private void maybeForceBuilderInitialization ( ) { if ( com . google . protobuf . GeneratedMessage . alwaysUseFieldBuilders ) { getSongsFieldBuilder ( ) ; } }
public Builder withLabel ( String label ) { TextView labelView = v . findViewById ( R . id . label ) ; labelView . setText ( label ) ; return this ; }
public void undo ( ) { if ( ! canUndo ( ) ) return ; stack . get ( stack . size - 1 + index ) . undo ( ) ; index -- ; }
public String getUrl ( int position ) { return items . get ( position ) . getUrl ( ) ; }
public void onSlidedUp ( View v ) { RadarChartView radar_chart = v . findViewById ( R . id . radar_chart ) ; if ( radar_chart != null ) { radar_chart . resetAnimation ( ) ; } }
public void onAnimationCancel ( View view ) { if ( deltaX != 0 ) { ViewCompat . setTranslationX ( view , 0 ) ; } if ( deltaY != 0 ) { ViewCompat . setTranslationY ( view , 0 ) ; } }
public int getItemCount ( ) { return materi . size ( ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( label ) ; dest . writeTypedObject ( intent , flags ) ; dest . writeTypedObject ( applicationInfo , flags ) ; dest . writeTypedObject ( drawable , flags ) ; }
public void clickingDungeonsAc ( View view ) { Intent intent = new Intent ( NavD . this , SplashScreenDungeons . class ) ; startActivity ( intent ) ; }
public BlockAdapter ( @ NonNull Context context , @ Nullable List < BlockModel > blocks ) { this . mContext = context ; this . blocks = blocks ; }
public boolean onNavigationItemSelected ( @ NonNull MenuItem item ) { int order = item . getOrder ( ) ; if ( order >= 0 && order <= 3 ) { handleToolbarElevation ( order ) ; switchFragment ( order ) ; return true ; } return false ; }
private void handleAuthenticated ( ) { try { authenticated = true ; MasterSecret masterSecret = MasterSecretUtil . getMasterSecret ( this , MasterSecretUtil . UNENCRYPTED_PASSPHRASE ) ; setMasterSecret ( masterSecret ) ; } catch ( InvalidPassphraseException e ) { throw new AssertionError ( e ) ; } }
private NotificationService ( ) { createChannels ( ) ; }
public boolean isPayloadEncryptionEnabled ( ) { return enabled ; }
public void run ( ) { NotificationCenter . getInstance ( currentAccount ) . setAllowedNotificationsDutingAnimation ( new int [ ] { NotificationCenter . dialogsNeedReload , NotificationCenter . closeChats } ) ; NotificationCenter . getInstance ( currentAccount ) . setAnimationInProgress ( true ) ; animatorSet . start ( ) ; }
public LINK_MODE getHyperLinkMode ( ) { return hyperLinkMode ; }
public void onDetach ( ) { super . onDetach ( ) ; }
public void onClick ( View view ) { mOnClickListenerMovies . OnItemClick ( mMoviesList [ getAdapterPosition ( ) ] , imagePoster ) ; }
public void onClick ( View v ) { getFolowersListView ( userProfileLayout , followers ) ; }
public com . openwallet . core . protos . Protos . UnspentOutput getDefaultInstanceForType ( ) { return com . openwallet . core . protos . Protos . UnspentOutput . getDefaultInstance ( ) ; }
public void setWorkflowId ( long workflowId ) { this . workflowId = workflowId ; }
private void showSnackBar ( CharSequence c ) { Snackbar . make ( mRecyclerView , c , Snackbar . LENGTH_SHORT ) . show ( ) ; }
private void updateOverlay ( Context context ) { initPref ( context ) ; if ( preferences . getBoolean ( "service_status" , false ) ) { makeOverlay ( batteryLevel ) ; } }
public static boolean isValidEmail ( String target ) { if ( isEmpty ( target ) ) { return false ; } else { return android . util . Patterns . EMAIL_ADDRESS . matcher ( target ) . matches ( ) ; } }
public boolean shouldOfferSwitchingToNextInputMethod ( final IBinder binder ) { if ( Build . VERSION . SDK_INT <= Build . VERSION_CODES . KITKAT ) { return hasMultipleEnabledSubtypesInThisIme ( false ) ; } return mImmService . shouldOfferSwitchingToNextInputMethod ( binder ) ; }
public com . openwallet . core . protos . Protos . PeerAddress getDefaultInstanceForType ( ) { return com . openwallet . core . protos . Protos . PeerAddress . getDefaultInstance ( ) ; }
public void addCertListener ( ICertChangedListener l ) { synchronized ( mListeners ) { if ( ! mListeners . contains ( l ) ) { mListeners . add ( l ) ; } } }
public void onRefresh ( ) { int size = mAdapter . size ( ) ; int page = ( size / ONE_PAGE_COMMENT_COUNT ) + 1 ; mPresenter . refreshComments ( page ) ; }
public void onServiceDisconnected ( ComponentName pComponentName ) { Log . d ( logTag , "Bitcoin service disconnected" ) ; mServiceIsBound = false ; mService . removeCallBacks ( mServiceCallBacks ) ; mService = null ; }
public boolean onNavigationItemSelected ( final MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . domus : super . closeNavDrawer ( ) ; break ; default : super . onNavigationItemSelected ( item ) ; break ; } return true ; }
public Measure ( String _number , double _abscissa , double _ordinate , double _vE , double _vN ) { this . number = _number ; this . abscissa = _abscissa ; this . ordinate = _ordinate ; this . vE = _vE ; this . vN = _vN ; }
public void onDrawerClosed ( View drawerView ) { super . onDrawerClosed ( drawerView ) ; if ( ! isAdded ( ) ) { return ; } getLoaderManager ( ) . restartLoader ( DATA_LOADER , null , PackagesFragment . this ) ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
public com . coinomi . core . protos . Protos . TransactionInput getDefaultInstanceForType ( ) { return com . coinomi . core . protos . Protos . TransactionInput . getDefaultInstance ( ) ; }
public AvatarDrawable ( TLRPC . Chat chat , boolean profile ) { this ( ) ; isProfile = profile ; if ( chat != null ) { setInfo ( chat . id , chat . title , null , chat . id < 0 , null ) ; } }
public CompleteTafseer ( int code , String status , Data data ) { super ( ) ; this . code = code ; this . status = status ; this . data = data ; }
private boolean isZoomed ( ) { return normalizedScale != 1 ; }
public Binder < CommentContentView > createBinder ( CommentModel model ) { return new CommentContentBinder ( model ) ; }
public void onSetFailure ( String s ) { super . onSetFailure ( s ) ; log ( "onSetFailure : " + s ) ; }
public void setValue ( Spanned value ) { mValue = value ; }
public Map < String , String > getCookies ( ) { return mCookies ; }
public String getAyahString ( int sura , int ayah , Context context ) { return getSuraName ( context , sura , true ) + " - " + context . getString ( R . string . quran_ayah , ayah ) ; }
public @ NonNull Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new MessageDetailsLoader ( this , getIntent ( ) . getStringExtra ( TYPE_EXTRA ) , getIntent ( ) . getLongExtra ( MESSAGE_ID_EXTRA , - 1 ) ) ; }
public List < Recipe > loadNextRecipes ( Category category , int offset , int limit ) { return storageLogic . getRecipes ( category , offset , limit ) ; }
private boolean isCustom ( ) { return Prefs . getBooleanPreference ( getContext ( ) , customToggle , false ) ; }
public Preferences getPreferences ( ) { return preferences ; }
private void finish ( StanzaError . Condition errorCondition ) { finish ( null , null , errorCondition ) ; }
private void showReceive ( @ NonNull String name ) { activityCallback . onWalletReceive ( name ) ; }
public void setTopSellingMovies ( List < MovieRankingEntity > topSellingMovies ) { this . topSellingMovies = topSellingMovies ; }
public String getAuthorName ( ) { return StringUtils . notNullStr ( mAuthorName ) ; }
public void loadData ( String data ) { mXWalkView . loadData ( data , "text/html" , "base64" ) ; }
public void cancelLoadFile ( TLRPC . PhotoSize photo ) { cancelLoadFile ( null , null , photo . location , null ) ; }
public void run ( ) { updateThumbnail ( thumbnail_f , true ) ; }
public void onZeroItemsLoaded ( ) { Log . i ( "Boundary zero loaded" ) ; queue_load ( true ) ; }
public static String getServiceURL_SDS ( Context context ) { context = MyApplication . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( TAG_SDS_URL , SERVICE_URL_SDS ) ; }
public Player getPlayer ( String playerId ) { return null ; }
private void showAddDeterminationDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; AddDeterminationDialogFragment dialog = new AddDeterminationDialogFragment ( ) ; dialog . show ( this . getSupportFragmentManager ( ) , "AddDeterminationDialogFragment" ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . updateInterfaces ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . blockedUsersDidLoaded ) ; }
public static String getUserName ( Context context ) { return getSharedPreferences ( context ) . getString ( USER_NAME , "" ) ; }
public static MyAsyncHttpClient getAsyncHttpClient ( ) { return mAsyncHttpClient ; }
public static String [ ] getScopes ( String resourceServerBaseUrl ) { return new String [ ] { String . format ( Locale . US , SummitRead , resourceServerBaseUrl ) , } ; }
public int getSid ( ) { return sid ; }
public void onFailure ( int code , Client . Headers headers , int state ) { log . v ( TAG , "search | query = " , query , " | not found" ) ; callback . onState ( NOT_FOUND ) ; }
public SectionAdapter ( Context context , @ SectionVO . Type int type , OnItemClickListener listener ) { super ( listener ) ; mImageTransitionName = context . getString ( R . string . transition_section_image ) ; mType = type ; }
public AdministrativeZoneBuilder setChildZones ( List < ChildZone > childZones ) { mChildZones = childZones ; return this ; }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { if ( list != null && list . size ( ) > position ) onItemClick ( list . get ( position ) ) ; }
public void startQueryTelegrams ( final int direction ) { mSwipeRefreshLayout . post ( new Runnable ( ) { @ Override public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryTelegrams ( 0 , direction , true ) ; } } ) ; }
private boolean _updateViewedPad ( ) { boolean result = false ; long pad_id = this . _getPadId ( ) ; if ( pad_id != 0 ) { padlistDb . accessUpdate ( pad_id ) ; result = true ; } return result ; }
public void setFilter ( FILTERS newFilter ) { mCurrentFilter = newFilter ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . im_create_password : fragmentBookInterface . finishedActivity ( true ) ; break ; default : break ; } }
public Location getPreviousLocationInfo ( ) { return previousLocationInfo ; }
public void onDataSetChanged ( ) { NotesDbHelper notesDbHelper = new NotesDbHelper ( context ) ; notes = notesDbHelper . getAllNotes ( 0 , 0 ) ; }
private void initSmartFold ( ) { binding . smartFoldPrefs . setChecked ( getPrefs ( ) . isFoldingEnabled ( ) ) ; binding . smartFoldPrefs . setOnClickListener ( mFoldingClick ) ; }
public LocationRequest buildLocationRequest ( ) { LocationRequest locationRequest = new LocationRequest ( ) . setPriority ( LocationRequest . PRIORITY_HIGH_ACCURACY ) . setInterval ( 4000 ) . setFastestInterval ( 4000 ) . setSmallestDisplacement ( 0 ) ; return locationRequest ; }
public void percentLoadFailed ( PercentLoadFailedEvent event ) { percentLoadStatus = LoadStatus . FAILED ; dataUsedText . setText ( event . errorMessage ) ; percentDataUsedView . setProgress ( 0 ) ; }
public void onPause ( ) { super . onPause ( ) ; presenter . detachView ( ) ; }
public boolean isGoalAchieved ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException , FitnessException { return this . getOverallProgress ( ) >= MAX_FITNESS_CHALLENGE_PROGRESS ; }
public static int getVersionCode ( ) { return BuildConfig . VERSION_CODE ; }
public void flowInterrupt ( long workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { if ( null != getMvpView ( ) ) getMvpView ( ) . showProgress ( false ) ; }
public PlaceAndPlateDto cursorToModel ( Cursor cursor ) { return ( new DatabaseViewPlaceAndPlateDtoFactory ( ) ) . createFromCursor ( cursor ) ; }
public void onServiceConnected ( ) { getService ( ) . registerOnServiceStateChangeListener ( this ) ; }
public void onResume ( ) { super . onResume ( ) ; updateData ( ) ; }
public Identifier ( PreferenceData preference , @ Nullable String title , @ Nullable String subtitle , SectionIdentifier sectionIdentifier ) { init ( preference , title , subtitle , sectionIdentifier , null , ( String [ ] ) null ) ; }
public void testSafeToAddAuthToken17 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( WPCOM_ADDRESS_3 ) ) ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponsePlaylistSongs . Builder getResponsePlaylistSongsBuilder ( ) { bitField0_ | = 0x00100000 ; onChanged ( ) ; return getResponsePlaylistSongsFieldBuilder ( ) . getBuilder ( ) ; }
public Wallet ( List < String > mnemonic ) throws MnemonicException { this ( mnemonic , null ) ; }
private void performDelete ( Uri uri ) { int count = getContentResolver ( ) . delete ( uri , null , null ) ; Log . d ( TAG , "Deleted " + count + " movies/shows" ) ; }
public void updateUI ( ) { final MyEventAdapter evl = new MyEventAdapter ( mEvents , getContext ( ) ) ; recyclerView . setAdapter ( evl ) ; Log . v ( "Recycler" , "Hello" ) ; recyclerView . scrollToPosition ( 0 ) ; }
public com . openwallet . core . protos . Protos . WalletPocket getPockets ( int index ) { return pockets_ . get ( index ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "exa . lnx . a" , appContext . getPackageName ( ) ) ; }
private double cumTopint ( double num ) { return num * 2113 . 3774149d ; }
public void setSdcardPermissionsDialogPresented ( ) { perInstallationPrefs . edit ( ) . putBoolean ( Constants . PREF_DID_PRESENT_PERMISSIONS_DIALOG , true ) . apply ( ) ; }
public void delete ( Long id , CoNaObiadDbHelper helper ) { helper . delete ( TABLE_NAME , id , "_ID" ) ; }
public Filter < ? super Tables . Tracks > getCompressedFilter ( ) { return filters . isEmpty ( ) ? new FilterSet < Tables . Tracks > ( ) : new FilterSet < Tables . Tracks > ( filters ) ; }
public CustomAnswerPercent_ ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; }
public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { if ( ! ( showLoading && loadPolicy . isLoading && position == ( getItemCount ( ) - 1 ) ) ) { onBindViewHolder_ ( ( VH ) holder , position ) ; } }
public GncXmlHandler ( ) { init ( ) ; }
public void onViewAttachedToWindow ( @ NonNull VH holder ) { }
public void onProgressUpdate ( int currentTimeInSecs , int totalDurationInSecs ) { mSeekBar . setProgress ( currentTimeInSecs ) ; bcProgressbar . setProgress ( currentTimeInSecs ) ; elapsedTimeTextView . setText ( MusicUtils . makeShortTimeString ( getContext ( ) , currentTimeInSecs ) ) ; }
private int getFirstContactIndex ( ) { return searchResult . getChats ( ) . getCnt ( ) ; }
public void testGetLocalMilliseconds ( ) { assertThat ( workersCalendar . getLocalMilliseconds ( standardMilliseconds ) , closeTo ( planetaryMilliseconds , 1e - 2 ) ) ; }
public void setDy ( int dy ) { mChanged = true ; mDy = dy ; }
private EditItem ( int start , CharSequence before , CharSequence after ) { this . start = start ; this . before = before ; this . after = after ; }
private void authenticate ( ) { fingerprint . authenticate ( ) ; }
public SpinnerWithCloseEvent ( @ NonNull Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public void addConvertCurrency ( String currencyCode ) { Set < String > convertCurrencies = getConvertCurrencies ( ) ; convertCurrencies . add ( currencyCode ) ; setConvertCurrencies ( convertCurrencies ) ; }
private void notifyUser ( TransactionInfo transaction ) { Notification notification = createScheduledNotification ( transaction ) ; notifyUser ( notification , ( int ) transaction . id ) ; }
public long getItemId ( int position ) { return mData . get ( position ) . hashCode ( ) ; }
public static JSONObject loadJsonFromFile ( Context context , String key ) throws IOException { return getJSONObject ( jsonFile ( context , key ) ) ; }
public boolean isFullscreenArticleView ( ) { return getBoolean ( R . string . pref_key_ui_article_fullscreen , false ) ; }
public void deleteSelectedMessages ( ) { List < MESSAGE > selectedMessages = getSelectedMessages ( ) ; delete ( selectedMessages ) ; unselectAllItems ( ) ; }
public void setOnLongClickListener ( OnLongClickListener l ) { launchIntentButton . setOnLongClickListener ( l ) ; }
public void onError ( final @ CacheRequest . RequestFailureType int failureType , final Throwable exception , final Integer httpStatus ) { result . set ( handleAccessTokenError ( exception , httpStatus , context , uri ) ) ; }
public String getPowiat ( ) { return localizationHelper . formatPowiat ( dto . powiat ( ) ) ; }
public static boolean autoSync ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_auto_sync ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_auto_sync ) ) ; }
public void onLoadFinished ( Loader < List < Song >> loader , List < Song > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
private void performAction ( View v ) { if ( fabExpanded ) { floatingActionsMenu . toggle ( ) ; fabExpanded = false ; } else { onFabItemClickedListener . onFabItemClick ( v . getId ( ) ) ; } }
public void hide ( GameManager gm ) { gm . highlight . setVisibility ( GONE ) ; }
public Call < List < Beverage >> getBeverages ( @ Path ( "categoryId" ) Integer id ) { return jugoterapiaService . getBeverages ( id ) ; }
public void onFailure ( @ Nonnull ApolloException e ) { Timber . e ( e . getLocalizedMessage ( ) ) ; receiver . send ( FAILED , new Bundle ( ) ) ; }
public ArrayList < TimeTableDay > getAllDays ( ) { return timeTableDays ; }
public void setFixMode ( ) { setShowMode ( CalendarViewDelegate . MODE_FIT_MONTH ) ; }
public void onClick ( DialogInterface dialog , int i ) { shareLocationText ( formatLocation ( lastLocation , getResources ( ) . getStringArray ( R . array . link_options ) [ i ] ) ) ; }
public void destroyItem ( @ NonNull ViewGroup container , int position , @ NonNull Object object ) { View view = ( View ) object ; container . removeView ( view ) ; }
public void reconcileSelectedTransactions ( long [ ] ids ) { String sql = "UPDATE " + TRANSACTION_TABLE + " SET " + TransactionColumns . status + " = '" + TransactionStatus . RC + "'" ; runInTransaction ( sql , ids ) ; }
public void setResourcelist ( ) { this . resourcelist = gson . toJson ( resources , formResourceListType ) ; }
public long removeTripExpensesByTripId ( String tripId ) { removeTripExpenseSharesByTripId ( tripId ) ; return delete ( DatabaseConstants . TRIP_EXPENSE_TABLE , DatabaseConstants . TRIP_EXPENSE_ID + " = ?" , new String [ ] { tripId } ) ; }
public void onBindViewHolder ( @ NonNull RecipeViewHolder holder , int position ) { holder . stepDescription . setText ( mStepList . get ( position ) . getShortDescription ( ) ) ; }
public String getType ( ) { return STORY_TYPE ; }
public void onCreate ( ) { initializeTracker ( ) ; try { readModels ( ) ; } catch ( final Exception e ) { throw new RuntimeException ( "Error reading models . " , e ) ; } }
public Silence ( int durationInMs , int sampleRate ) { super ( durationInMs , sampleRate ) ; for ( int sampleNum = 0 ; sampleNum < this . numSamples ; sampleNum ++ ) { this . samples [ sampleNum ] = SILENCE_VAL ; } }
public void startServer ( ) { isRunning = true ; socketServerThread = new Thread ( new SocketServerThread ( ) ) ; socketServerThread . start ( ) ; }
public void compare_WhenFirstNameIsGreater_ReturnGreaterThanZero ( ) { int result = sut . compare ( tag2 , tag1 ) ; assertThat ( result ) . isGreaterThan ( 0 ) ; }
public ScalingImageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; init ( context ) ; }
public void onLoadMore ( int totalItemsCount , RecyclerView view ) { TimelineFragment . this . onLoadMore ( ) ; }
public static void skipIfDefaultAccountExists ( ) { assumeTrue ( "default account exists - skipping test" , Authenticator . getDefaultAccount ( InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ) == null ) ; }
public void updateDrawState ( @ NonNull TextPaint ds ) { }
private List < String > extractNames ( ) { List < String > names = new ArrayList <> ( ) ; for ( Action action : list ) { names . add ( action . getName ( ) ) ; } return names ; }
public void onClick ( View widget ) { displayInitialView ( false ) ; registrationState = new RegistrationState ( RegistrationState . State . INITIAL , null , null , null ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : { onBackPressed ( ) ; break ; } } return super . onOptionsItemSelected ( item ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; QuranScreenInfo . getOrMakeInstance ( this ) ; quranSettings = QuranSettings . getInstance ( this ) ; quranSettings . upgradePreferences ( ) ; }
public static int getStatusColor ( int skin ) { return darker ( skin ) ; }
private void setClassPrefStatus ( boolean status ) { ListPreference classPref = ( ListPreference ) preferenceFragmentMain . findPreference ( "Klasse" ) ; classPref . setEnabled ( status ) ; classPref . setSelectable ( status ) ; }
public void run ( ) { initLogList ( ) ; mProgressUtility . dismissProgress ( ) ; }
public void handle ( ) { achievementUnlocked . emit ( achievement ) ; }
public void onClick ( View arg0 ) { ColorPickerDialog diag = new ColorPickerDialog ( ButtonSetEditor . this . getContext ( ) , ButtonSetEditor . this , newsettings . getFlipLabelColor ( ) ) ; diag . show ( ) ; }
public static void onRealDestroy ( ) { if ( running ) { running = false ; guiListener = null ; } }
public VideoEnabledWebChromeClient ( Context activity ) { }
private SharedPreferences getPrefs ( ) { return context . getSharedPreferences ( "hackconf_2017" , 0 ) ; }
public void restoreAccountButton ( ) { if ( apiUtils . isOnline ( mRestoreParentLayout ) ) { Validate validate = new Validate ( getApplicationContext ( ) ) ; if ( validate . emailValidate ( mRestoreAccountEdit , mTilRestoreAccountEdit ) ) { restoreAccount ( ) ; } } }
public Set < String > getClasses ( ) { return mClasses ; }
public ThemeListPreference ( @ NonNull final Context context , final AttributeSet attrs , final int defStyleAttr , final int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; }
public long getPersonID ( ) { return mPersonID ; }
public StreamTracksHorizontalAdapter ( List < Track > streamList , Context ctx ) { this . streamList = streamList ; this . ctx = ctx ; imgLoader = new ImageLoader ( ctx ) ; }
public void run ( ) { post . markAsRead ( getActivity ( ) ) ; }
public BackpackTfBanned getBackpackTfBanned ( ) { return backpackTfBanned ; }
public void onClick ( DialogInterface dialog , int id ) { deleteItem ( index ) ; listUiUpdateFromDb ( ) ; }
public void seekTo ( int position ) { AudioFragment audio = getAudioFragment ( ) ; if ( audio != null ) audio . seekPlayerTo ( position ) ; }
public void handlePush ( @ NotNull RoutingContext routingContext ) { routingContext . response ( ) . setStatusCode ( NO_CONTENT . code ( ) ) . end ( ) ; }
public void shutDown ( ) { RxJavaPlugins . reset ( ) ; RxAndroidPlugins . reset ( ) ; }
public void onArduinoMessage ( byte [ ] bytes ) { display ( " > " + new String ( bytes ) ) ; }
public void onTabSelected ( TabLayout . Tab tab ) { viewPager . setCurrentItem ( tab . getPosition ( ) ) ; setPageTitle ( tab , pagerAdapter , toolbar ) ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; when ( mAddDebtView . isActive ( ) ) . thenReturn ( true ) ; mAddEditDebtPresenter = new AddEditDebtPresenter ( mDebtsRepository , mAddDebtView , false ) ; }
public BallGroup ( int width , int height , int step ) { this . step = step ; this . width = width ; this . height = height ; balls = new ArrayList < Ball > ( 0 ) ; createText ( balls , "AppBrain" ) ; }
public void loadTutorial ( ) { Intent mainAct = new Intent ( SplashActivity . this , MaterialTutorialActivity . class ) ; mainAct . putParcelableArrayListExtra ( MaterialTutorialActivity . MATERIAL_TUTORIAL_ARG_TUTORIAL_ITEMS , splashPresenter . getTutorialItems ( this ) ) ; startActivityForResult ( mainAct , SPLASH_SCREEN_REQUEST_CODE ) ; }
public void run ( ) { activity . applyLayerProject ( projectsUsersList , slug , activity . layerSettingsInProgress . layerProjectStatus ) ; finishApplyLayer ( ) ; }
public void makeEventSort_WhenSortTypeLatestDate_ReturnCorrectComparator ( ) { Comparator < EventSortable > sut = EventSortFactory . makeEventSort ( SortType . LATEST_DATE ) ; int result = sut . compare ( event2 , event1 ) ; assertThat ( result ) . isLessThan ( 0 ) ; }
public KcaItemAdapter ( Context context , int layout , List < String > data ) { this . context = context ; this . layout = layout ; this . item = data ; inf = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
private boolean sessionExpired ( Exception e ) { if ( e . getMessage ( ) != null && ( e . getMessage ( ) . startsWith ( TOKEN_EXPIRED ) ) ) { return true ; } else { return false ; } }
private void responseStateToTile ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . N ) { IntentUtility . setTileState ( this . enabled , this . stopUntilScreenOff , this . disableTimeString ) ; } }
private void hideLoadingCircle ( ) { circleLoad . stopSpinning ( ) ; circleLoad . setVisibility ( View . INVISIBLE ) ; }
public int getOctave ( ) { return octave ; }
private void launchAboutActivity ( ) { startActivity ( new Intent ( this , AboutActivityView . class ) ) ; }
public Date getCreatedAt ( ) { return comment . createdAt ( ) ; }
static public ExchangeApi getExchangeApi ( ) { return new com . m2049r . xmrwallet . service . exchange . coingecko . ExchangeApiImpl ( OkHttpHelper . getOkHttpClient ( ) ) ; }
public void onCreate ( SQLiteDatabase db ) { db . execSQL ( SQL_CREATE ) ; }
public void onResponse ( String s ) { image . setStatus ( ImageEntry . INT_STATUS_DEFAULT ) ; Photobook . getImagesDataSource ( ) . updateImage ( image ) ; refreshGallery ( ) ; if ( mAdapter != null ) mAdapter . notifyDataSetChanged ( ) ; }
public int getCount ( ) { return slideshowItems . size ( ) != 0 ? slideshowItems . size ( ) : 1 ; }
public LowEmissionZoneBuilder setNextZoneNumberAsOf ( Date nextZoneNumberAsOf ) { mNextZoneNumberAsOf = nextZoneNumberAsOf ; return this ; }
private void askFeedback ( ) { BottomSheetDialogFragment myBottomSheet = FeedbackDialogFragment . newInstance ( ) ; myBottomSheet . show ( getSupportFragmentManager ( ) , myBottomSheet . getTag ( ) ) ; }
private void changeUnlockPrefs ( ) { boolean isChecked = binding . unlockScreenPrefs . isChecked ( ) ; binding . unlockScreenPrefs . setChecked ( ! isChecked ) ; getPrefs ( ) . setDeviceUnlockEnabled ( ! isChecked ) ; }
public void onStatsChanged ( ) { update ( ) ; }
public boolean isSkipEnabled ( ) { return buttonBackFunction == BUTTON_BACK_FUNCTION_SKIP ; }
public int getIconResolution ( ) { return Integer . parseInt ( mSharedPreferences . getString ( KEY_ICONRES , DEFUAULT_ICON_RESOLUTION ) ) ; }
public boolean isSupportBle ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR2 && context . getApplicationContext ( ) . getPackageManager ( ) . hasSystemFeature ( PackageManager . FEATURE_BLUETOOTH_LE ) ; }
public void reload ( ) { ( ( RequestsRecycler ) mRecyclerView . getAdapter ( ) ) . notifyDataSetHasChanged ( ) ; showEmptyWhenNecessary ( ) ; }
private void displayMovies ( ) { showProgressBar ( false ) ; movieListContainer . setVisibility ( View . VISIBLE ) ; }
public RecyclerItemSmall ( String header ) { this . type = HEADER ; this . item = null ; title = header ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( version ) ; stream . writeInt32 ( random_length ) ; }
public NativeZipInputStreamAccess ( final String zipFilePath ) { zipfile = zipFilePath ; }
public TouchToSelectView ( Context context ) { this ( context , null ) ; }
public void paintShouldDrawTwoSectorsWithGivenColors ( ) { pieChart = new PieChart ( plot , new double [ ] { 1 , 1 } , new ColorWrap [ ] { ColorWrap . RED , ColorWrap . GREEN } ) ;
public void setUp ( ) throws Exception { mSettingsPresenter = new SettingsPresenter ( mMockDataManager , authenticator ) ; mSettingsPresenter . attachView ( mMockSettingsMvpView ) ; }
public void shareDictionaryTest ( ) { search ( "a" ) ; swipeViewPagerLeft ( 2 ) ; openMenuItem ( R . string . share ) ; checkShareIntentContains ( "the blood group whose red cells carry the A antigen" ) ; }
public void onAnimationEnd ( Animator animator ) { mRecordLayout . setX ( 0 ) ; }
public boolean onCreateActionMode ( ActionMode mode , Menu menu ) { MenuInflater inflater = mode . getMenuInflater ( ) ; inflater . inflate ( R . menu . schedxactions_context_menu , menu ) ; return true ; }
public void failure ( RetrofitError error ) { Log . d ( TAG , error . toString ( ) ) ; swipeRefreshLayout . setRefreshing ( false ) ; showEmptyView ( ) ; }
public boolean isChecked ( ) { return isChecked ; }
public void onFinish ( ) { ( ( Player ) getParent ( ) ) . lose ( ) ; }
public boolean onSwipeRight ( int i , long l , double v ) { return _callback . onDrawerGesture ( _desktop , Type . SwipeRight ) ; }
public String getRepeatPref ( ) { return sharedPreferences . getString ( PreferenceKeys . getRepeatModePreferenceKey ( ) , "1" ) ; }
public void showNetworkNotAvailableError ( ) { dismissDialog ( ) ; Toast . makeText ( this , getString ( R . string . network_not_available_error ) , Toast . LENGTH_SHORT ) . show ( ) ; }
private boolean gitRepoIsClean ( ) { try { Status status = git . status ( ) . call ( ) ; return ! status . hasUncommittedChanges ( ) ; } catch ( GitAPIException e ) { return false ; } }
private void onInvalidLogin ( ApiException e ) { loginButton . setVisibility ( View . VISIBLE ) ; loginProgress . setVisibility ( View . GONE ) ; Utils . showSnackBar ( this , getString ( R . string . wronguserpw ) ) ; }
private float pixelsToSp ( float px ) { float scaledDensity = getResources ( ) . getDisplayMetrics ( ) . scaledDensity ; return px / scaledDensity ; }
public SearchPostListURL sort ( PostSort newOrder ) { return new SearchPostListURL ( subreddit , query , newOrder , limit , before , after ) ; }
public ImageContent ( List < Image > images ) { super ( new ArrayList < Object > ( images ) ) ; }
private final BroadcastReceiver mReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { mFullscreen = intent . getBooleanExtra ( WebFragment . EXTRA_FULLSCREEN , false ) ; setFullscreen ( ) ; } } ;
private void performButtonBackPress ( ) { if ( buttonBackFunction == BUTTON_BACK_FUNCTION_SKIP ) { goToSlide ( getCount ( ) ) ; } else if ( buttonBackFunction == BUTTON_BACK_FUNCTION_BACK ) { previousSlide ( ) ; } }
public Fragment getCurrentFragment ( ) { if ( fragmentManager == null ) { return SongsFragment . newInstance ( ) ; } return fragmentManager . findFragmentByTag ( LibraryFragment . TAG ) ; }
private void setupNewInput ( ) { mInputView . setText ( Tuils . EMPTYSTRING ) ; if ( defaultHint ) { mInputView . setHint ( Tuils . getHint ( mainPack . currentDirectory . getAbsolutePath ( ) ) ) ; } requestInputFocus ( ) ; }
private void dbContentChanged ( ) { listItems = db . getAllFavoritLocations ( mRegionItemJahr ) ; adapter = new ArrayAdapter_Mainlist ( mContext , listItems , mRegionItemJahr ) ; adapter . setCallingFragment ( TAG ) ; setListAdapter ( adapter ) ; }
public Builder setCallback ( BottomSheetCallback callback ) { bottomSheet . bottomSheetCallback = callback ; return this ; }
public String getFullname ( ) { return fullName ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { mCurrentItem = mContestPager . getCurrentItem ( ) ; outState . putInt ( VIEW_PAGER_CURRENT_ITEM , mCurrentItem ) ; }
public PhotoEditorSeekBar ( Context context ) { super ( context ) ; innerPaint . setColor ( 0xff4d4d4d ) ; outerPaint . setColor ( 0xffffffff ) ; }
public void run ( ) { for ( TwoStateOwner owner : cowners ) owner . destroy ( ) ; }
public void onDrawerOpened ( @ NonNull View drawerView ) { }
public void setxPercent ( double xPercent ) { this . xPercent = xPercent ; }
public void redrawItems ( ) { ( ( ArchivedListsAdapter ) archivedListsRecyclerView . getAdapter ( ) ) . replaceWith ( TinyListSQLHelper . getSqlHelper ( getActivity ( ) ) . getTaskLists ( true ) ) ; }
public SearchOptions createFromParcel ( @ NonNull Parcel source ) { return new SearchOptions ( source ) ; }
public void onPartialResult ( List < String > results , boolean isSemiFinal ) { }
public void onTimeShiftPause ( ) { Log . d ( TAG , "onTimeShiftPause" ) ; mTvheadendPlayer . pause ( ) ; }
public Builder setFocusMode ( @ FocusMode String mode ) { cameraSource . focusMode = mode ; return this ; }
private double sqyardTosqkm ( double num ) { return num * 8 . 3612736E - 7d ; }
public OverlayView ( ) { super ( ItemOptionView . this . getContext ( ) ) ; setWillNotDraw ( false ) ; }
public void rotateImageRight ( ) { ImageUtil . rotateImage ( this , FLIP_ANGLE ) ; }
public boolean shouldShowInlineTags ( ) { return ! groupByTags ; }
private void filterChanged ( final Filter < ? super Tables . Tracks > filter , final boolean activated ) { for ( final BowMenuEntry entry : BowMenuEntry . values ( ) ) { entry . adapt ( filter , currTrack , activated , activity ) ; } }
private void onFABClicked ( ) { actionAddNewNote ( ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { toggleDisplayGPS ( ) ; }
private void requestNewInterstitial ( ) { final AdRequest adRequest = new AdRequest . Builder ( ) . build ( ) ; mInterstitialAd . loadAd ( adRequest ) ; }
public void onClick ( View v ) { mainLayout . requestFocus ( ) ; hideSoftKeyboard ( CardAddEditActivity . this ) ; fieldSelectDialog ( ItemField . CARD_NAME ) ; }
private void handleAuthToken ( AuthToken token ) { mbRequestOngoing = false ; mCredentialSink . setLoggedIn ( mBlogUrl , true ) ; mListener . onNewAuthToken ( token ) ; }
public void onFileProviderAudioLoaded ( @ NonNull final List < String > fileAudioPaths ) { }
public void getDisplayWidth ( ) throws Exception { assertThat ( overlayViewManager . getDisplayWidth ( ) , is ( uiDevice . getDisplayWidth ( ) ) ) ; }
public void onClick ( View v ) { PagerInspirationsFragment . this . finish ( ) ; }
public int getCount ( ) { return layouts . length ; }
public YValueMarker ( Number value , String text ) { super ( value , text , new HorizontalPosition ( 3 , HorizontalPositioning . ABSOLUTE_FROM_LEFT ) ) ; }
public void setContentView ( View view ) { getDelegate ( ) . setContentView ( view ) ; }
public long onTimeShiftGetStartPosition ( ) { return mTvheadendPlayer . getTimeshiftStartPosition ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . xiiilab . ping" , appContext . getPackageName ( ) ) ; }
public static de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseGlobalSearchStatus parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
private ShortcutInfo getShortcutForTextType ( ) { return getShortcut ( SHORTCUT_TEXT_ID , R . string . common_text , R . drawable . ic_shortcut_text , ACTION_START_WITH_TEXT ) ; }
public void SetMyCard ( Word word ) { MyCard . add ( 0 , word ) ; }
public void writeToParcel ( Parcel parcel , int i ) { parcel . writeString ( reviewId ) ; parcel . writeString ( reviewAuthor ) ; parcel . writeString ( reviewContent ) ; parcel . writeInt ( movieId ) ; }
public Fragment getCurrentFragment ( ) { return mCurrentFragment ; } @ Override public int getItemPosition ( @ NonNull Object object ) { if ( object != storedFragment ) return POSITION_NONE ; return POSITION_UNCHANGED ; }
public String getCompressedSize ( ) { return compressedSize ; }
public void setButtonStackedGravity ( GravityEnum gravity ) { for ( MDButton mButton : buttons ) { if ( mButton != null ) { mButton . setStackedGravity ( gravity ) ; } } }
public static void markDone ( String tag ) { mTaskPreferencesUtils . putLong ( tag , DateTime . now ( ) . getMillis ( ) ) . apply ( ) ; }
private int getDefaultIconColor ( ) { return PreferenceData . STATUS_ICON_COLOR . getValue ( getContext ( ) ) ; }
public void run ( ) { getUsers ( ) ; RecyclerView . Adapter mAdapter = new UsersAdapter ( UsersActivity . this , users ) ; mRecyclerView . setAdapter ( mAdapter ) ; swipeRefreshLayout . setRefreshing ( false ) ; }
public void setShowTags ( boolean showTags ) { this . showTags = showTags ; }
public boolean equalValues ( JingleCandidate other ) { return other != null && other . getHost ( ) . equals ( this . getHost ( ) ) && ( other . getPort ( ) == this . getPort ( ) ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { setPrivacy ( dialog . getContext ( ) , PrivacyCommand . BLOCK ) ; }
public void run ( ) { try { setImageData ( sdUrl , hdUrl ) ; Log . i ( "APOD Wallpaper" , "Set" ) ; } catch ( Exception e ) { Crashlytics . logException ( e ) ; } }
public NumberInput ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; }
public API api ( ) { return API . instance ( ) ; }
public void onViewRecycled ( @ NonNull RecyclerView . ViewHolder holder ) { final RecyclerViewRecyclerEventDistributor distributor = mRefDistributor . get ( ) ; if ( distributor != null ) { distributor . handleOnViewRecycled ( holder ) ; } }
public void loadMenuSceneFromSettingsScene ( ) { startSceneService ( loadingSceneService ) ; endSceneService ( settingsSceneService ) ; startSceneService ( menuSceneService ) ; }
public void addSong ( int position , Song song ) { playingQueue . add ( position , song ) ; originalPlayingQueue . add ( position , song ) ; notifyChange ( QUEUE_CHANGED ) ; }
public StreamTracksHorizontalAdapter . MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_card_layout2 , parent , false ) ; return new MyViewHolder ( itemView ) ; }
public void showErrorUi ( ) { progressBar . setVisibility ( View . INVISIBLE ) ; errorLayout . setVisibility ( View . VISIBLE ) ; }
public void onResume ( ) { super . onResume ( ) ; Toolbar toolbar = ( Toolbar ) getActivity ( ) . findViewById ( R . id . t_subreddit ) ; toolbar . setTitle ( "LiveThread" ) ; toolbar . setNavigationIcon ( R . mipmap . ic_launcher_circle ) ; }
public int getCount ( ) { return ITEMS != null ? ITEMS . size ( ) : 0 ; }
public void animateColorChange ( int newColor ) { super . animateColorChange ( newColor ) ; fragment . slidingUpPanelLayout . setBackgroundColor ( fragment . lastColor ) ; createDefaultColorChangeAnimatorSet ( newColor ) . start ( ) ; }
public void run ( ) { addContactToPhoneBook ( u , true ) ; }
public boolean onKeyUp ( int keyCode , KeyEvent event ) { return mKeyDelegate . onKeyUp ( keyCode , event ) || super . onKeyUp ( keyCode , event ) ; }
public void onShow ( DialogInterface dialog ) { try { tintButtons ( getDialog ( ) ) ; } catch ( Exception e ) { Crashlytics . logException ( e ) ; } }
public long getLastAttempt ( ) { return lastAttempt ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; text . serializeToStream ( stream ) ; }
public void onMediaStoreChanged ( ) { super . onMediaStoreChanged ( ) ; reload ( ) ; }
public XMLPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . CMD ; }
public String getName ( ) { return String . valueOf ( tod ) ; }
public void setCoordinateData ( Map < String , List < AyahBounds >> data ) { coordinatesData = data ; }
public void onPositionUpdate ( float pos , boolean isLeaving ) { parentView . setVisibility ( pos == 1f && ! isLeaving ? View . INVISIBLE : View . VISIBLE ) ; isFullyOpened = pos == 1f ; }
public static com . openwallet . core . protos . Protos . Key parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public SearchScrubBar ( @ NonNull Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "org . andresoviedo . android_3d_model_engine . test" , appContext . getPackageName ( ) ) ; }
private void putString ( @ NonNull String name , @ Nullable String value ) { mPrefs . edit ( ) . putString ( name , value ) . apply ( ) ; }
public void onGetFileAudio ( @ NonNull final List < String > fileAudioPaths ) { new Thread ( ) { @ Override public void run ( ) { threadWorkerCreateLocalMusicFolders ( fileAudioPaths ) ; threadWorkerCreateAllLocalMusic ( fileAudioPaths ) ; } } . start ( ) ; }
public boolean isMmsNotification ( ) { return true ; }
public AccountHeaderBuilder withEmailTypeface ( @ NonNull Typeface typeface ) { this . mEmailTypeface = typeface ; return this ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; if ( getActivity ( ) != null ) getActivity ( ) . setTitle ( "Explore" ) ; }
public void showNoVitalsNotification ( ) { mFormHeader . setVisibility ( View . GONE ) ; mContent . setVisibility ( View . GONE ) ; mEmptyList . setVisibility ( View . VISIBLE ) ; mEmptyList . setText ( getString ( R . string . last_vitals_none_label ) ) ; }
public static int getLastAppVersionCode ( ) { return getInt ( UndeletablePrefKey . LAST_APP_VERSION_INDEX ) ; }
public RealmList < String > getRooms ( ) { return new RealmList <> ( ) ; }
public void setNavigationStatus ( @ NonNull SearchNavigationStatus status ) { setPreviousButtonEnabled ( status . hasPrevious ) ; setNextButtonEnabled ( status . hasNext ) ; setSearchBarMatchText ( status . numMatchesBeforeSpread , status . numMatches , status . currentSpreadContainsMatch ) ; }
public void onResume ( ) { super . onResume ( ) ; vibrationEnabled = sharedPref . getBoolean ( getString ( R . string . preference_enable_haptic_feedback ) , false ) ; }
public DinnerAdapter getAdapter ( ) { return this . dinnerAdapter ; }
public static String format ( String phoneNumber ) { return phoneNumber . replaceAll ( " [ ^* + 0 - 9 ] " , "" ) ; }
public void testIsWPCOMString5 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( WPCOM_ADDRESS_5 ) ) ; }
public void onDonePressed ( Fragment currentFragment ) { super . onDonePressed ( currentFragment ) ; PrefsHelper . isFirstTime ( false ) ; IntentUtils . startActivity ( this , LoginActivity . class ) ; finish ( ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; sensor = SensorWrapperManager . get ( ) . getSensor ( getArguments ( ) . getString ( SenseItArguments . ARG_SENSOR ) ) ; }
public void onDialogDismissed ( int code ) { }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . carlisle . ben . newtoniangravitysimulator" , appContext . getPackageName ( ) ) ; }
public void setAuthenticatedAccount ( @ NonNull Account account ) { activityContract . setAuthenticatedAccount ( account , true ) ; }
public void run ( ) { String res = Statusgo . multiAccountReset ( ) ; callback . invoke ( res ) ; }
private String createWhiteListRule ( String domain ) { return " @ @ { 0 } ^$document" . replace ( " { 0 } " , domain ) ; }
public DrawerBuilder withDrawerLayout ( @ NonNull DrawerLayout drawerLayout ) { this . mDrawerLayout = drawerLayout ; return this ; }
public Vector ( ) { this . x = 0 ; this . y = 0 ; setAbsValue ( ) ; setNorm ( ) ; }
public boolean canShowReplyMenu ( ) { return mCanShowReplyMenu ; }
public void detectsSpaceInTheEndOfUnderlyingValue ( ) { List < SelectChoice > items = Lists . newArrayList ( new SelectChoice ( "label" , "after " ) ) ; subject . check ( items ) ; assertTrue ( subject . hasInvalidValues ( ) ) ; }
public void onPinConfirm ( final PinDialog dialog , final String pinValue ) { if ( isPinCorrect ( pinValue , dialog ) ) { sendLNPayment ( amount , paymentRequest , invoiceAsString ) ; } else { handlePaymentError ( R . string . payment_error_incorrect_pin ) ; } }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; updateRows ( ) ; if ( type == 0 ) { NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . didSetTwoStepPassword ) ; } return true ; }
public void dismiss ( ) { if ( this . author != null ) this . author . removeListener ( this ) ; this . id = 0 ; this . author = null ; this . body = null ; setVisibility ( GONE ) ; }
private CommentModel getComment ( int position ) { if ( position == getCount ( ) - 1 && mOnLoadMoreListener != null ) { mOnLoadMoreListener . onLoadMore ( ) ; } return mCommentList . get ( position ) ; }
public static void i ( String tag , String msg ) { if ( BuildConfig . DEBUG ) { android . util . Log . i ( tag , msg ) ; } }
private void setReplyText ( String replyText ) { if ( replyText == null ) { return ; } mRestoredReplyText = replyText ; }
public static Drawable getTintedVectorDrawable ( @ NonNull Context context , @ DrawableRes int id , @ ColorInt int color ) { return TintHelper . createTintedDrawable ( getVectorDrawable ( context . getResources ( ) , id , context . getTheme ( ) ) , color ) ; }
public boolean isCeremony ( ) { return Type . CEREMONY . matches ( type ) ; }
public void addFirst ( ArrayList < UserModel > list ) { mUsers . addAll ( 0 , list ) ; notifyDataSetChanged ( ) ; }
public void flipDown ( ) { isUp = false ; if ( ! stopUiUpdates ) { setCardBack ( ) ; } }
public void dispatchStarting ( @ NonNull AddAnimationInfo info , @ NonNull RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchAddStarting ( " + item + " ) " ) ; } mItemAnimator . dispatchAddStarting ( item ) ; }
public com . openwallet . core . protos . Protos . WalletPocket . Builder addPocketsBuilder ( ) { return getPocketsFieldBuilder ( ) . addBuilder ( com . openwallet . core . protos . Protos . WalletPocket . getDefaultInstance ( ) ) ; }
public boolean shouldEnforceBounds ( ) { return enforceBounds ; }
private void setUpPageDetails ( ) { recyclerView . setLayoutManager ( new LinearLayoutManager ( getActivity ( ) ) ) ; mSongsInArtistAdapter = new SongsInArtistAdapter ( new ArrayList <> ( ) , getActivity ( ) ) ; recyclerView . setAdapter ( mSongsInArtistAdapter ) ; }
public QuoteAdapter ( Context c , QuoteList q ) { ctx = c ; quotes = q ; }
private String fetchText ( QuestionTextType type ) { switch ( type ) { case KANJI : if ( kanji != null ) return kanji ; case KANA : if ( kana != null ) return kana ; case ROMAJI : default : return romaji ; } }
public void run ( ) { mSwipeRefreshLayout . setRefreshing ( true ) ; queryTelegrams ( 0 , direction , true ) ; }
public static int getCoordinateDecimalRounding ( ) { return App . coordinateDecimalRounding ; }
private void updateQueuePosition ( ) { playingQueueAdapter . setCurrent ( MusicPlayerRemote . getPosition ( ) ) ; if ( slidingUpPanelLayout == null || slidingUpPanelLayout . getPanelState ( ) == SlidingUpPanelLayout . PanelState . COLLAPSED ) { resetToCurrentPosition ( ) ; } }
public Move ( String name , float damage , int crit ) { type = 2 ; this . name = name ; minDamage = maxDamage = damage ; minHeal = maxHeal = - 1 ; this . crit = crit ; }
private void setLabel ( @ Nullable CharSequence sequence ) { if ( ! TextUtils . isEmpty ( sequence ) ) { mLabelTextView . setText ( sequence ) ; setLabelEnabled ( getOrientation ( ) == HORIZONTAL ) ; } else { setLabelEnabled ( false ) ; } }
public void onGeneSelected ( int position ) { if ( null != mListener ) { Gene gene = ( Gene ) mGenesAdapter . getItem ( position ) ; mListener . onGeneSelected ( gene ) ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; Log . i ( "SYNC" , "Destroyed sync service ! " ) ; sendBroadcast ( new Intent ( " . services . TimetableRestarterBroadcastReceiver" ) ) ; stopTimer ( ) ; }
public PlaybackService . REPEATSTATE getRepeat ( ) { return mRepeat ; }
public Loader onCreateLoader ( int id , Bundle args ) { Uri mDataUrl = JournalContentProvider . ContentProviderCreator . JOURNAL ; return new CursorLoader ( this , mDataUrl , null , null , null , "time_stamp DESC" ) ; }
public MainViewModel ( ) { super ( ) ; init ( ) ; initAnonService ( ) ; }
public static void start ( final Activity activity ) { activity . startActivity ( new Intent ( activity , MainActivity . class ) ) ; }
public void onCreate ( ) { instance = this ; Utils . updateTheme ( this ) ; Utils . hideImagesFromGallery ( this ) ; createDownloaderNotificationChannel ( ) ; super . onCreate ( ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { fieldPadprefix . setText ( DEFAULT_PADPREFIX_VALUE ) ; } else { fieldPadprefix . setText ( "" ) ; } checkJquery . setChecked ( isChecked ) ; }
public static PosterViewState makeViewMoviesState ( List < MoviePoster > movies , Filter filter ) { return new PosterViewState ( movies , filter , false , false ) ; }
public boolean isAppEnabled ( ) { return enableApp == null ? enableApp = isAppEnabled ( true ) : enableApp ; }
public boolean hasPermalink ( ) { return ! TextUtils . isEmpty ( mPermaLink ) ; }
private String lessText ( String text ) { if ( text == null ) return "" ; if ( maxTextLength >= 0 && text . length ( ) > maxTextLength ) return text . substring ( 0 , maxTextLength ) ; return text ; }
private void hidePlaces ( ) { if ( isPlacesVisible ( ) ) { ViewUtils . slideOutDown ( getContext ( ) , placesListCard ) ; } }
private void setAnnouncements ( List < Announcement > announcements ) { this . announcements = checkNotNull ( announcements ) ; notifyDataSetChanged ( ) ; }
private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { Log . v ( TAG , "onReceive : intent = " + intent ) ; mHandler . post ( mBufferedRunnable ) ; } } ;
public void addAnalyticsListener ( AnalyticsListener listener ) { verifyApplicationThread ( ) ; analyticsCollector . addListener ( listener ) ; }
public static void closeStream ( Closeable stream ) { try { stream . close ( ) ; } catch ( Exception e ) { } }
public void onSuccess ( GetAllNews . ResponseValue response ) { mNewsListView . showNews ( response . getNewsItemList ( ) ) ; mNewsListView . hideProgress ( ) ; checkForErrors ( response . getNewsItemList ( ) ) ; updateIfNeeded ( ) ; }
public static Contact findByUserId ( Context context , @ NonNull String userId ) { return findByUserId ( context , userId , null ) ; }
public void onZoomClick ( boolean isFull ) { getInterface ( ) . setFullScreenMode ( isFull ) ; }
public void terminate ( ) { if ( controller != null ) { controller . terminate ( ) ; controller = null ; } }
public void onReceive ( Context context , Intent arg1 ) { if ( connectionReceiverListener != null ) { connectionReceiverListener . onNetworkConnectionChanged ( NetworkUtils . isConnected ( context ) ) ; } }
public void onClick ( View v ) { startActivity ( new Intent ( MainActivity . this , ChargeActivity . class ) ) ; }
public void onClick ( View v ) { dispatchOnItemLongClick ( v , entry ) ; }
private void stopAudioDispatcher ( ) { if ( audioDispatcher != null && ! audioDispatcher . isStopped ( ) ) { audioDispatcher . stop ( ) ; IS_RECORDING = false ; } }
public void onFailure ( ExecutionException error ) { Log . w ( TAG , error ) ; }
public static void startActivity ( @ NonNull Context context ) { context . startActivity ( new Intent ( context , LoadingActivity . class ) . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK | Intent . FLAG_ACTIVITY_CLEAR_TASK ) ) ; }
public SponsorsRecyclerView ( List < Sponsor > announcements , Context context ) { sponsorList = announcements ; this . context = context ; }
public InputStream openInputStream ( Context context ) { return ContactsContract . Contacts . openContactPhotoInputStream ( context . getContentResolver ( ) , contactPhotoUri , true ) ; }
public int getId ( ) { return member . getOwnerId ( ) ; }
public VeiculoAno ( String name , String marca , String key , Long id , String veiculo ) { this . name = name ; this . marca = marca ; this . key = key ; this . id = id ; this . veiculo = veiculo ; }
public void onDetach ( ) { super . onDetach ( ) ; mIsbnLookupListener = null ; }
public void run ( ) { putUsers ( res . users , fromCache ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . dialogPhotosLoaded , did , offset , count , fromCache , classGuid , res . photos ) ; }
public void updateDiskCacheKey ( @ NonNull MessageDigest messageDigest ) { }
public String getLabelUuid ( ) { return labelUuid ; }
public void onRequestPermissionsResult ( int requestCode , @ NonNull String [ ] permissions , @ NonNull int [ ] grantResults ) { if ( requestCode == 10 ) checkPermission ( ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; TupleContactEx contact = selected . get ( position ) ; holder . bindTo ( contact ) ; holder . wire ( ) ; }
public void notifyDigitsChanged ( ) { restoreValues ( ) ; next ( ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "za . co . dvt . android . rxjava2firebase . test" , appContext . getPackageName ( ) ) ; }
public int getMinimumDistanceInterval ( ) { return ( Strings . toInt ( prefs . getString ( PreferenceNames . MINIMUM_DISTANCE , "0" ) , 0 ) ) ; }
public MainRow ( String rest , String reps , String weight , int viewType ) { this . rest = rest ; this . reps = reps ; this . weight = weight ; this . viewType = viewType ; }
private void updateCommonCode ( OstWorkflowContext ostWorkflowContext ) { if ( OstWorkflowContext . WORKFLOW_TYPE . UPDATE_BIOMETRIC_PREFERENCE . equals ( ostWorkflowContext . getWorkflow_type ( ) ) ) { updateBiometricView ( mToggleBiometric ) ; } }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( SAVE_CURRENT_TAB , mCurrentTab ) ; }
public boolean onStopJob ( JobParameters params ) { Logger . debug ( "onStopJob id : " + params . getJobId ( ) ) ; return true ; }
public HashSet < String > getPos ( ) { return this . pos ; }
public int [ ] args ( ) { return new int [ ] { CommandAbstraction . ALL_PACKAGES } ; }
private List < Song > getQueue ( @ NonNull final String tableName ) { Cursor cursor = getReadableDatabase ( ) . query ( tableName , null , null , null , null , null , null ) ; return SongLoader . getSongs ( cursor ) ; }
public void switchFavorite ( ) { viewSubs . add ( favoriteInteractor . switchCurrentFavorite ( ) . subscribeWith ( new RxUtils . ErrorCompletableObserver ( view ) ) ) ; }
public byte [ ] getPublicKey ( ) { return pubkey ; }
public List < ColorInfo > getFlatList ( ) { return this . flatList ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof ScriptLanguageVisitor ) return ( ( ScriptLanguageVisitor < ? extends T > ) visitor ) . visitParenthesisNumericExpr ( this ) ; else return visitor . visitChildren ( this ) ; }
public int getMeasuredWidthWithMargin ( View child ) { return childWidth ; }
public void onClosed ( @ NonNull CameraDevice cam ) { if ( MyDebug . LOG ) Log . d ( TAG , "camera closed , first_callback? " + first_callback ) ; if ( first_callback ) { first_callback = false ; } }
public TaskItem ( ) { this . text = "" ; this . color = Color . BLUE ; this . checked = false ; }
public com . openwallet . core . protos . Protos . TransactionInput getTransactionInput ( int index ) { if ( transactionInputBuilder_ == null ) { return transactionInput_ . get ( index ) ; } else { return transactionInputBuilder_ . getMessage ( index ) ; } }
public String type ( ) { return XMLPrefsSave . INTEGER ; }
public void onColumnValueClicked ( SparseArray < Object > columnValues ) { String selectedTableName = mTableSelectionSpinner . getSelectedItem ( ) . toString ( ) ; mSqliteManagerPresenter . onColumnValueClicked ( selectedTableName , mColumnNameView . getTableColumnNames ( ) , columnValues ) ; }
public void onDeleteAlarm ( ) { detailPresenter . onDeleteAlarm ( getApplicationContext ( ) , alarm ) ; finish ( ) ; }
public void bind ( @ NonNull GlideRequests glideRequests , int type , DcContact contact , String name , String number , String label , boolean multiSelect , boolean enabled ) { this . label . setText ( name ) ; }
private void checkLoadMore ( int position ) { if ( mCanLoadMore && ! mIsLoadingMore && position >= getItemCount ( ) - 1 && getItemCount ( ) >= ReaderConstants . READER_MAX_SEARCH_RESULTS_TO_REQUEST ) { mIsLoadingMore = true ; mListener . onLoadMore ( getItemCount ( ) ) ; } }
private void showPluginRemoveFailedSnackbar ( ) { WPSnackbar . make ( mContainer , getString ( R . string . plugin_remove_failed , mPlugin . getDisplayName ( ) ) , Snackbar . LENGTH_LONG ) . show ( ) ; }
public void onCancel ( DialogInterface dialog ) { if ( showDonateDialogCheckBox . isChecked ( ) ) { sharedEditor . putBoolean ( "show_donate_dialog" , false ) ; sharedEditor . apply ( ) ; } mResume = true ; checkNfc ( ) ; }
private void ensureNext ( ) { if ( mNext == null ) { mNext = new Bucket ( ) ; } }
private Headers makeHeaders ( @ Nullable Map < String , String > mapHeaders ) { if ( mapHeaders == null ) { return Headers . of ( new HashMap < String , String > ( ) ) ; } return Headers . of ( mapHeaders ) ; }
private String buildNotificationSubtitleForPost ( PostImmutableModel post ) { String uploadingMessage = ( post != null && post . isPage ( ) ) ? mContext . getString ( R . string . uploading_subtitle_pages_only_one ) : mContext . getString ( R . string . uploading_subtitle_posts_only_one ) ; return uploadingMessage ; }
public MainWrappers ( Context context , boolean vr , int levelIdx ) { this . context = context ; this . vr = vr ; isFree = false ; isInit = false ; this . levelIdx = levelIdx ; }
public List < StorageDomainStatus > getValues ( ) { return values ; }
public void onOffsetChanged ( AppBarLayout appBarLayout , int verticalOffset ) { if ( - verticalOffset > appBarLayout . getHeight ( ) / 3 ) { fab . hide ( ) ; } else { fab . show ( ) ; } }
public WallpaperDataStore create ( ) { WallpaperDataStore wallpaperDataStore ; if ( ! wallpaperCache . isDirty ( ) && wallpaperCache . isCached ( ) ) { wallpaperDataStore = new CacheWallpaperDataStore ( wallpaperCache , openInputStreamLock ) ; } else { wallpaperDataStore = createDbDataStore ( ) ; } return wallpaperDataStore ; }
public void onTopicChanged ( String topic , MessageSenderInfo topicSetBy , Date topicSetOn ) { mChannelTopic = topic ; mChannelTopicSetBy = topicSetBy ; mChannelTopicSetOn = topicSetOn ; if ( getUserVisibleHint ( ) ) updateParentCurrentChannel ( ) ; }
public String getType ( ) { return queryJSON ( "type" , NOTE_UNKNOWN_TYPE ) ; }
public int getLayoutRes ( ) { return R . layout . item_edit_minibar ; }
public static void setColor ( final String subreddit , int color ) { Reddit . colors . edit ( ) . putInt ( subreddit . toLowerCase ( Locale . ENGLISH ) , color ) . apply ( ) ; }
public void onClick ( View v ) { listener . onUpButtonClicked ( ) ; }
public void hide ( ) { try { anim . scaleOut ( floatingActionButton , 0 , 100 , "fabOut" ) ; } catch ( NullPointerException e ) { Log . i ( "hideFab" , "Fab is not initialized" ) ; } }
public void onPageSelected ( int position ) { currentPage = position ; dotsContainer . invalidate ( ) ; }
private void userDeletesQuery ( ) { user . types ( ) . noSearchQuery ( ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { return mOldPersonList . get ( oldItemPosition ) . getPhoneNumber ( ) . equals ( mNewPersonList . get ( newItemPosition ) . getPhoneNumber ( ) ) ; }
public HashMap < String , Boolean > getFormResults ( ) { return formResults ; }
public void setValue ( double value ) { this . value = value ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_clip_list , container ) ; mClipList = ( ListView ) view . findViewById ( R . id . list_Clip ) ; return view ; }
public void onResume ( ) { super . onResume ( ) ; LocalBroadcastManager . getInstance ( getContext ( ) ) . registerReceiver ( mFetchBroadcastReceiver , new IntentFilter ( SyncClassGroupsService . ACTION_FINISHED_CLASS_GROUP_SYNC ) ) ; }
private void setLoadingStatus ( String status ) { TextView tv = findViewById ( R . id . loading_message ) ; if ( tv != null ) { tv . setText ( status ) ; } }
public List < IDrawerItem > getOriginalDrawerItems ( ) { return originalDrawerItems ; }
public SubsetGoogleTask getGoogleTask ( ) { return googletask ; }
public FormattableEditText ( Context context ) { super ( context ) ; init ( ) ; }
public PDF417 ( boolean compact ) { this . compact = compact ; compaction = Compaction . AUTO ; encoding = null ; minCols = 2 ; maxCols = 30 ; maxRows = 30 ; minRows = 2 ; }
private StatusPollTask ( ShapeShift shapeShift , AbstractAddress depositAddress , Handler handler ) { this . shapeShift = shapeShift ; this . depositAddress = depositAddress ; this . handler = handler ; }
public void setOnPageChangeListener ( ViewPager . OnPageChangeListener listener ) { miPager . setOnPageChangeListener ( listener ) ; miPager . addOnPageChangeListener ( this . listener ) ; }
private void setFullscreen ( boolean full ) { if ( book != null && book . hasDataDir ( ) ) book . setFlag ( FULLSCREEN , full ) ; fullscreenBox . setChecked ( full ) ; }
private void networkFail ( ) { getView ( ) . showBriefMessage ( ResString . getNetworkFail ( ) ) ; }
public void openInBrowser ( ) { view . getContext ( ) . startActivity ( new Intent ( Intent . ACTION_VIEW , Uri . parse ( post . getUrl ( ) ) ) ) ; }
public void setPassword ( String password ) { this . m_password = password ; }
public Double getInterestRatePerPeriod ( ) { return interestRatePerPeriod ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { addPreferencesFromResource ( R . xml . preferences_chameleon_mini_rev_g ) ; }
public UseCaseHandler ( UseCaseScheduler useCaseScheduler ) { mUseCaseScheduler = useCaseScheduler ; }
private void updateCurrentSubtype ( final InputMethodSubtype subtype ) { mCurrentRichInputMethodSubtype = RichInputMethodSubtype . getRichInputMethodSubtype ( subtype ) ; }
public void loadChatInfo ( final int chat_id , Semaphore semaphore , boolean force ) { MessagesStorage . getInstance ( ) . loadChatInfo ( chat_id , semaphore , force , false ) ; }
public static Observable < List < Comment >> closedComments ( int sid ) { long timestamp = System . currentTimeMillis ( ) ; return sMobileApi . closedComments ( timestamp , CnBetaSignUtil . closedCommentsSign ( timestamp , sid ) , sid ) ; }
private void logResponse ( QueryMoviesResponse < MovieEntity > discoverMoviesResponse ) { Log . d ( LOG_TAG , "page == " + discoverMoviesResponse . getPage ( ) + " " + discoverMoviesResponse . getResults ( ) . toString ( ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; disableBackgroundServices ( ) ; LocalBroadcastManager . getInstance ( OpenStackSummitApplication . context ) . unregisterReceiver ( messageReceiver ) ; view . hideActivityIndicator ( ) ; RealmFactory . closeSession ( ) ; }
public int getCount ( ) { return mUsers != null ? mUsers . size ( ) : 1 ; }
public void initDb ( ) { mDatabase = Room . inMemoryDatabaseBuilder ( InstrumentationRegistry . getContext ( ) , AppDatabase . class ) . allowMainThreadQueries ( ) . build ( ) ; visitedLocationDao = mDatabase . visitedLocationDao ( ) ; }
public boolean hasInputTimestamp ( ) { return ( ( bitField0_ & 0x00000040 ) == 0x00000040 ) ; }
public static String getEventURL ( Event event ) { return WEB_HOST + "event/" + event . getEventStrID ( ) ; }
public void openAttachmentsManager ( int accountId , Integer draftCommentId , int sourceOwnerId , String draftCommentBody ) { PlaceFactory . getCommentCreatePlace ( accountId , draftCommentId , sourceOwnerId , draftCommentBody ) . targetTo ( this , REQUEST_CODE_ATTACHMENTS ) . tryOpenWith ( requireActivity ( ) ) ; }
public void setItems ( Item [ ] items ) { setUpdated ( items ) ; mItems . clear ( ) ; mItems . addAll ( items ) ; }
public static int getImageOptimizeQuality ( ) { int quality = getInt ( DeletablePrefKey . IMAGE_OPTIMIZE_QUALITY , 0 ) ; return quality > 1 ? quality : WPMediaUtils . OPTIMIZE_IMAGE_ENCODER_QUALITY ; }
public void onClick ( View view ) { intent . intentSharedElementWithExtra ( a , "activity . AboutActivity" , R . id . cardview_music_image , "transition" , "about" , "now_playing" , 0 , v ) ; }
public int getLayoutRes ( ) { return R . layout . item_card_stackedbarchart ; }
public void run ( ) throws CertificateException , SignatureException , PGPException , IOException , NoSuchProviderException { revokeCurrentKey ( ) ; configure ( ) ; registerConnectionEvents ( ) ; }
public Observable < Boolean > undoAvailability ( ) { if ( undoAvailabilityObserver == null ) { undoAvailabilityObserver = Observable . unsafeCreate ( undoAvailability ) . replay ( ) . autoConnect ( ) ; } return undoAvailabilityObserver ; }
public static IntroTranslationFragment newInstance ( ) { return new IntroTranslationFragment ( ) ; }
public void onSignalStrengthsChanged ( SignalStrength signalStrength ) { Log . v ( TAG , "onSignalStrengthsChanged : " + signalStrength ) ; mCurrentCellSignalStrengthDbm = mNetMonSignalStrength . getDbm ( signalStrength ) ; }
public void setMantraName ( String mantra ) { this . mantraName = mantra ; }
private void fireOnProgressUpdateListener ( long progress ) { for ( OnLibraryDownloadListener l : listeners ) { l . OnProgressUpdate ( progress , mTotalSize ) ; } }
public void setFormattedPubDate ( long formattedPubDate ) { this . formattedPubDate = formattedPubDate ; }
public CategorySelector ( A activity , DatabaseAdapter db , ActivityLayout x , long exclSubTreeId ) { this . activity = activity ; this . db = db ; this . x = x ; this . excludingSubTreeId = exclSubTreeId ; }
public static boolean isDebugAnimator ( ) { return debugAnimator ; }
public CommentFooterBinder ( CommentModel model ) { this . comment = model ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_filelist , null ) ; }
public boolean hasName ( ) { return ! TextUtils . isEmpty ( mName ) ; }
public void onPause ( ) { super . onPause ( ) ; deviceStatus = 0 ; identityCheck = 0 ; handler . removeCallbacks ( runnable ) ; handler . removeCallbacks ( validateDeviceRunnable ) ; unregisterReceiver ( mUsbReceiver ) ; unbindService ( usbConnection ) ; }
public void fadeOutInfoBox ( boolean faded ) { mFaded = faded ; resolveInfoBoxState ( null ) ; }
public int hashCode ( ) { return width*41 + height ; }
public Server getItem ( int location ) { return servers . get ( location ) ; }
private static long getLong ( String key , long defaultValue ) { return sPreferences . getLong ( key , defaultValue ) ; }
public PersonalKey createFromParcel ( Parcel source ) { try { return new PersonalKey ( source ) ; } catch ( Exception e ) { Log . w ( TAG , "error creating from parcel" , e ) ; return null ; } }
private void hideWarning ( ) { binding . warningText . setVisibility ( View . GONE ) ; }
public String toString ( ) { return "ErrorResponse { " + "errorMessage = '" + errorMessage + '\'' + ' } ' ; }
public int getChildSteps ( ) throws PersonDoesNotExistException { if ( this . isDemoMode ) { return DEMO_CHILD_STEPS ; } return this . getPersonTotalSteps ( Person . ROLE_CHILD ) ; }
public void changed ( ChangeEvent event , Actor actor ) { visualSettingManager . setSettingGroup ( SettingGroup . this ) ; }
public void selectAll ( ) { for ( int i = 0 ; i < patients . size ( ) ; i ++ ) { selectedPatientPositions . add ( i ) ; } isAllSelected = true ; notifyDataSetChanged ( ) ; }
public RotationGestureDetector ( Context context , OnRotationGestureListener listener ) { this . listener = listener ; }
public void run ( ) { progressDialog . dismiss ( ) ; onSignupSuccess ( ) ; }
public int getStartLength ( ) { return get ( START_LENGTH , Constants . Task . START_IN_METERS ) ; }
public SendDebugLogPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
private BlockModel latestBlock ( ) { return blocks . get ( blocks . size ( ) - 1 ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; this . mainActivity = ( MainActivity ) context ; this . mainActivity . setPermissionRequired ( this , PermissionRequired . ACTION_GET ) ; }
public static RecipesState makeLoadingState ( ) { return new RecipesState ( new ArrayList <> ( 0 ) , true , false , "" ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . activity_editor , menu ) ; return true ; }
public static boolean isNotificationEnabled ( Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getBoolean ( Constants . KEY_PREF_IS_NOTIFICATION_ENABLED , false ) ; }
public String getSectionName ( int position ) { return MusicUtil . getSectionName ( dataSet . get ( position ) . getName ( ) ) ; }
public OffsetDateTime getStart ( ) { return start ; }
public void onShow ( DialogInterface dialog ) { if ( showListener != null ) { showListener . onShow ( dialog ) ; } }
public int getDirection ( ) { return ( int ) direction ; }
public boolean isOK ( ) { return RequestResult . OK . equals ( status ) ; }
private void showFragment ( Fragment fragment , String tag ) { getActivity ( ) . getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . container_main , fragment ) . addToBackStack ( tag ) . commit ( ) ; }
public String getThumbnail ( ) { return thumbnail ; }
public List < PercentageTrackerPojo > getAllItems ( ) { Cursor c = mDatabase . query ( true , DatabaseCreator . TABLE_NAME_ADMISSION_PERCENTAGES_META , null , null , null , null , null , DatabaseCreator . ADMISSION_PERCENTAGES_META_ID + " ASC" , null ) ; return listFromCursor ( c ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; if ( context instanceof OnLogoutCallback ) { callback = ( OnLogoutCallback ) context ; } }
public void add ( DrawOperation action ) { stack . truncate ( stack . size + index ) ; index = 0 ; stack . add ( action ) ; }
public ViewPagerAdapter ( FragmentManager fragmentManager , List < Fragment > fragments ) { super ( fragmentManager ) ; mFragments = fragments ; }
public String getSelectedOptionValue ( ) { if ( mSelectedOption == - 1 ) return null ; return mPrefOptionValues [ mSelectedOption ] ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_file_chooser ) ; mGroupOfFiles = findViewById ( R . id . radioGroupFileChooser ) ; }
public void onPageSelected ( int position ) { presenter . tryGoToThisPage ( position , viewPager , story , getApplicationContext ( ) ) ; presenter . uploadReflectionAudio ( ) ; }
private void goHome ( ) { Fragment fabFragment = getCurrentFragment ( ) ; if ( fabFragment != null ) { if ( fabFragment instanceof FileCloudFragment ) { } else if ( fabFragment instanceof FileMyCloudFragment ) { } } }
public void onClick ( DialogInterface dialog , int id ) { mExitDialog = false ; dialog . cancel ( ) ; }
private void load ( @ TYPE String type , boolean force ) { thread . run ( RA , ( ) -> load ( type , force , null ) ) ; }
public void onError ( Exception ex ) { progressBar . setVisibility ( View . INVISIBLE ) ; avatar . setImageDrawable ( VectorDrawableCompat . create ( getResources ( ) , R . drawable . ic_avatar , null ) ) ; }
private Prefs ( final Context context ) { this . sharedPrefs = context . getSharedPreferences ( Common . PREFERENCES_FILE , Context . MODE_PRIVATE ) ; }
public void addBeverageToFavourite ( Beverage beverage , BeverageDetails beverageDetails ) { mBeverageDetailsRepo . addBeverageToDb ( beverage , beverageDetails ) ; }
private void toggleHideMedia ( ) { statusMarkSensitive = ! statusMarkSensitive ; updateHideMediaToggle ( ) ; }
public ChartMarkerView ( Context context , int layoutResource , int type ) { super ( context , layoutResource ) ; mType = type ; mContent = findViewById ( R . id . tvContent ) ; }
private static < K , V > int getWeight ( @ Nullable Entry < K , V > p ) { return ( p == null ) ? 0 : p . weight ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . sometry . usman . proretro" , appContext . getPackageName ( ) ) ; }
public void setImageURI ( Uri uri ) { super . setImageURI ( uri ) ; handleImageChange ( ) ; }
public List < Song > loadInBackground ( ) { return SongLoader . getAllSongs ( getContext ( ) ) ; }
public PeopleViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = mInflater . inflate ( R . layout . people_list_row , parent , false ) ; return new PeopleViewHolder ( view ) ; }
public void setAsyncHttpClient ( MyAsyncHttpClient asyncHttpClient ) { mAsyncHttpClient = asyncHttpClient ; }
public void take ( double amount ) { double sum = curSum + decimals / 100 . 0 ; sum -= amount ; curSum = getLong ( sum ) ; decimals = getDecimal ( sum ) ; }
public void onClick ( @ NonNull View v ) { bookCollectionsController . collectionActionHandler ( v . getId ( ) , booksCollection , view . getContext ( ) , null ) ; }
public void onClick ( View view ) { itemClickListener . onAudioItemClick ( position ) ; }
public void updateCurrentSong ( Song song ) { fragment . toolbar . setTitle ( song . title ) ; fragment . toolbar . setSubtitle ( song . artistName ) ; }
public List < Genre > loadInBackground ( ) { return GenreLoader . getAllGenres ( getContext ( ) ) ; }
public void run ( ) { notifyPositionChanged ( ) ; }
private BeaconListElement beaconToBeaconListElement ( Beacon beacon ) { BeaconListElement beaconListElement = new BeaconListElement ( beacon ) ; if ( beaconIsSaved ( beacon ) ) { beaconListElement . setSaved ( true ) ; } return beaconListElement ; }
private RealmResults < Clip > getAllClips ( ) { clips = realm . where ( Clip . class ) . findAllSorted ( MyConstants . FIELD_CREATION_DATE , Sort . DESCENDING ) ; return clips ; }
public void onFailure ( Call < Void > call , Throwable t ) { mLogger . e ( "Failed to upload vialer statistics with exception : " + t . getMessage ( ) ) ; }
public byte [ ] decrypt ( final AesCbcWithIntegrity . SecretKeys key ) throws GeneralSecurityException , IOException { return AesCbcWithIntegrity . decrypt ( civ , key ) ; }
private static ArrayList < ? extends Song > getPlaylistSongs ( @ NonNull Activity activity , Playlist playlist ) { return playlist instanceof AbsCustomPlaylist ? ( ( AbsCustomPlaylist ) playlist ) . getSongs ( activity ) : PlaylistSongLoader . getPlaylistSongList ( activity , playlist . id ) ; }
public void recreateMarker ( int radius ) { mRadius = radius ; if ( mRadius == - 1 ) { mRadius = getPrefs ( ) . getRadius ( ) ; } if ( mMap != null ) { addMarkers ( ) ; } }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { changedSpeed = true ; float animSpeed = progress/100 . 0f ; _mRenderer . changeAnimationSpeed ( animSpeed ) ; editor . putFloat ( "animSpeed" , animSpeed ) ; }
public void onNotify ( int steps ) { Log . d ( "mi - band" , String . format ( "Steps : %d" , steps ) ) ; }
public Double getFeeChargesWaived ( ) { return feeChargesWaived ; }
public static LottieResult < LottieComposition > fromZipStreamSync ( ZipInputStream inputStream , @ Nullable String cacheKey ) { try { return fromZipStreamSyncInternal ( inputStream , cacheKey ) ; } finally { closeQuietly ( inputStream ) ; } }
public String getLinkRel ( ) { return mLinkRel ; }
public int getLayoutRes ( ) { return R . layout . material_drawer_item_secondary_switch ; }
public String getCurrentUrl ( ) { return ( currentUrl != null ) ? currentUrl : mUrl ; }
public static String getHomeUrl ( Context context , String from ) { return getForwardLink ( context , BuildConfig . githubUrl , from ) ; }
private boolean isCurrentActivity ( Class < ? > activity ) { return activity . isInstance ( mCurrentDrawerActivity ) ; }
public void onClick ( View view ) { Intent intent = mCallback . getIntent ( mContext ) ; if ( intent != null ) { mContext . startActivity ( intent ) ; } }
public void addPageLeft ( ) { _desktop . getPages ( ) . add ( 0 , getItemLayout ( ) ) ; notifyDataSetChanged ( ) ; }
private void showOverview ( ) { Intent intent = new Intent ( this , MediaOverviewActivity . class ) ; intent . putExtra ( MediaOverviewActivity . ADDRESS_EXTRA , conversationRecipient . getAddress ( ) ) ; startActivity ( intent ) ; }
public RecentsPresenter ( BptfApplication application ) { mApplication = application ; application . getPresenterComponent ( ) . inject ( this ) ; }
private void showProfile ( String userId ) { Intent profileIntent = new Intent ( App . applicationContext , ActivityViewProfile . class ) ; profileIntent . putExtra ( Keys . userId , userId ) ; startActivity ( profileIntent ) ; }
public void setColorEditTextColor ( int argb ) { this . pickerColorEditTextColor = argb ; if ( colorEdit != null ) colorEdit . setTextColor ( argb ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_main , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public void reverseOrientation ( final ActionEx action ) { RotationType newRotation = reversedOrientation ( bookSettings . rotation ) ; if ( newRotation != null ) { SettingsManager . setBookRotation ( bookSettings , newRotation ) ; } }
public boolean onInterceptTouchEvent ( MotionEvent event ) { boolean result = StickerPreviewViewer . getInstance ( ) . onInterceptTouchEvent ( event , stickersGridView , EmojiView . this . getMeasuredHeight ( ) , stickerPreviewViewerDelegate ) ; return super . onInterceptTouchEvent ( event ) || result ; }
private void unidirectionalCondition ( LitePalSupport baseObj , LitePalSupport associatedModel ) { dealsAssociationsOnTheSideWithoutFK ( baseObj , associatedModel ) ; }
public void onAnimationEnd ( final Animation animation ) { animateCircles ( ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . invite_selected_contacts : inviteFragment . invite ( ) ; } }
public void opponentChoosePaper ( ) { player2Entity = new PaperHandBody ( world , ( PaperHandModel ) MatchModel . getInstance ( ) . setOpponentChoice ( "paper" ) ) ; player2Entity . setLinearVelocity ( 0f , - 400f ) ; }
public CategoriesAdapter ( CategoriesAdapterListItemClickListener mOnClickListener , List < Category > categoriesList ) { this . mOnClickListener = mOnClickListener ; this . categoriesList = categoriesList ; }
public @ NonNull String getComposeHint ( ) { return composeHint ; }
private SshConnectionPool ( ) { connections = new ConcurrentHashMap < String , SSHClient > ( ) ; }
public LoadData < ByteBuffer > buildLoadData ( @ NonNull VaultEntry model , int width , int height , @ NonNull Options options ) { return new LoadData <> ( new UUIDKey ( model . getUUID ( ) ) , new Fetcher ( model ) ) ; }
public VH onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return mWrappedAdapter . onCreateViewHolder ( parent , viewType ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . example . android . bookexchange1" , appContext . getPackageName ( ) ) ; }
private View . OnClickListener mOnUndoClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { bookmarkPresenter . cancelDeletion ( ) ; bookmarkPresenter . requestData ( true ) ; } } ;
public void onUpdate ( Context context , AppWidgetManager appWidgetManager , int [ ] appWidgetIds ) { init ( ) ; for ( int appWidgetId : appWidgetIds ) { updateAppWidget ( context , appWidgetManager , appWidgetId , false ) ; } }
public void changeFragmentShader ( String fragmentShader ) { GLES20 . glDeleteProgram ( mProgram ) ; mProgram = createProgram ( VERTEX_SHADER , fragmentShader ) ; if ( mProgram == 0 ) { throw new GLException ( 0 , "failed creating program" ) ; } }
public final void clearRoomForPopUp ( ) { Tool . invisibleViews ( 200 , getDesktop ( ) ) ; updateDesktopIndicator ( false ) ; updateDock ( false ) ; }
public static void setTrainingPeaksRefreshToken ( String token ) { cSharedPreferences . edit ( ) . putString ( SP_TRAINING_PEAKS_REFRESH_TOKEN , token ) . apply ( ) ; }
public void onFailure ( Call < Venter . Complaint > call , Throwable t ) { Log . i ( TAG , "failure in subscribe : " + t . toString ( ) ) ; }
public void opensTauronSettingsHelp ( ) { tester . pickProvider ( Provider . TAURON ) . openHelp ( ) . clickOk ( ) ; }
public void showSignIn ( ) { Intent intent = new Intent ( getContext ( ) , AuthActivity . class ) ; getActivity ( ) . startActivityForResult ( intent , REQUEST_CODE_SIGNIN ) ; }
public void showNewDinnerDialog ( Date date ) { showNewDinnerDialog ( date , null ) ; }
public void bind ( StockProduct item ) { itemBinding . setProduct ( item ) ; Picasso . get ( ) . load ( item . getImageURL ( ) ) . into ( itemBinding . image ) ; }
public void run ( ) { enableAccelerometerNotifications ( ) ; }
public PieDataSet ( List < PieEntry > yVals , String label ) { super ( yVals , label ) ; }
public void setApprovedPrincipal ( Double approvedPrincipal ) { this . approvedPrincipal = approvedPrincipal ; }
public static com . openwallet . core . protos . Protos . AddressStatus parseFrom ( byte [ ] data ) throws com . google . protobuf . InvalidProtocolBufferException { return PARSER . parseFrom ( data ) ; }
public String getArtistName ( ) { return mService . get ( ) . getArtistName ( ) ; }
public void removeBookmark ( Integer id ) { removeFromWords ( id ) ; }
public void addToFavourites ( String id ) { SQLiteDatabase db = getWritableDatabase ( ) ; ContentValues contentValues = new ContentValues ( ) ; contentValues . put ( COLUMN_MOVIE_ID , id ) ; db . insert ( TABLE_FAVOURITES , null , contentValues ) ; db . close ( ) ; }
public void onErrorResponse ( VolleyError error ) { Log . d ( "TrackQueuer" , "error : " + error ) ; }
public boolean isUsbConnected ( ) { return serialPortConnected ; }
public void onAnimationUpdate ( ValueAnimator animation ) { float currentValue = ( Float ) animation . getAnimatedValue ( ) ; float percent = currentValue * 1 . 0f / mContentViewTranslateY ; mMonthView . setTranslationY ( mViewPagerTranslateY * percent ) ; isAnimating = true ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "allinontech . vestium" , appContext . getPackageName ( ) ) ; }
public void onRefresh ( ) { thread . run ( PR , ( ) -> { log . v ( TAG , "refreshing" ) ; load ( true ) ; } ) ; }
public static void main ( String [ ] args ) { SoundHandler_SecurityExample . get ( ) . loadAudios ( new HashMap < String , Sound > ( ) ) ; }
public void run ( ) { try { database . executeFast ( "DELETE FROM user_photos WHERE uid = " + uid ) . stepThis ( ) . dispose ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public void onResume ( ) { super . onResume ( ) ; AppUtil . getInstance ( InsertSegwitActivity . this ) . checkTimeOut ( ) ; }
public Builder lastStepNextButtonText ( String lastStepNextButtonText ) { formView . style . lastStepNextButtonText = lastStepNextButtonText ; return this ; }
public ReturnObject doInBackground ( Void . . . voids ) { return getTemperature ( mContext . get ( ) , deviceObject ) ; }
public void setTitle ( @ Nullable CharSequence title , @ Nullable CharSequence subtitle ) { }
public static void toast ( @ StringRes int id , Context context ) { toast ( context . getString ( id ) , context ) ; }
public void onErrorResponse ( VolleyError error ) { Log . d ( LOG_TAG , "Error : " + error . getMessage ( ) ) ; }
private void setViewAfterPatientDownloadError ( String errorMessage ) { mLastViewedPatientsView . setProgressBarVisibility ( false ) ; mLastViewedPatientsView . setListVisibility ( false ) ; mLastViewedPatientsView . setEmptyListText ( errorMessage ) ; mLastViewedPatientsView . setEmptyListVisibility ( true ) ; mLastViewedPatientsView . stopRefreshing ( ) ; }
private void toggleCode ( ) { if ( editorFragment != null ) { drawerLayout . setTouchThru ( editorFragment . toggleCode ( ) ) ; } }
public TypefaceSpan ( Typeface tf , int size , int textColor ) { typeface = tf ; textSize = size ; color = textColor ; }
public int getItemViewType ( int position ) { if ( position < mItemsData . size ( ) ) { return mItemsData . get ( position ) . viewType ; } return 0 ; }
public LiveData < Resource < List < EventInfo >>> getEvents ( ) { return events ; }
public boolean getNotificationStatus ( ) { return getBool ( R . string . pref_key__gesture_notifications , false ) ; }
public static void copy ( final int [ ] destination , final int [ ] source ) { destination [ INDEX_X ] = source [ INDEX_X ] ; destination [ INDEX_Y ] = source [ INDEX_Y ] ; }
public void onResume ( ) { super . onResume ( ) ; Reporting . getTracker ( getContext ( ) ) . log ( new ViewEvent ( ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { final MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . main_menu , menu ) ; return true ; }
private DesktopMemoryChecker ( ) { setDaemon ( true ) ; setName ( DesktopMemoryChecker . class . getSimpleName ( ) ) ; setUncaughtExceptionHandler ( Debug . UncaughtExceptionHandler . instance ) ; }
private void hidetext ( ) { Utility . hideSoftKeyboard ( DrawImageActivity . this ) ; inputTextEt . setVisibility ( INVISIBLE ) ; }
public void showLoginError ( String message ) { dismissDialog ( ) ; Toast . makeText ( this , message , Toast . LENGTH_SHORT ) . show ( ) ; }
public void run ( ) { if ( waitingForKeyboardCloseRunnable != this ) { return ; } waitingForKeyboardCloseRunnable = null ; startLayoutAnimation ( false , true ) ; }
public void onSelectedDayChange ( long dayMillis ) { mPagerAdapter . setSelectedDay ( getCurrentItem ( ) , dayMillis , false ) ; notifyDayChange ( dayMillis ) ; }
public boolean haveDefaultImagesDirectory ( ) { return perInstallationPrefs . contains ( Constants . PREF_DEFAULT_IMAGES_DIR ) ; }
public ScaleAnimatedTextView ( @ NonNull Context context ) { super ( context ) ; }
public void onCancelled ( @ NonNull DatabaseError databaseError ) { showSnackbar ( R . string . error_loading_news ) ; newsCard . setVisibility ( View . GONE ) ; }
public void setO3 ( Double o3 ) { this . o3 = o3 ; }
public final void setY ( int v ) { _y = v ; }
public void setCurrentThread ( int currentThread ) { this . mCurrentThreadId = currentThread ; }
public DynamicTableModel ( int numColumns , int numRows ) { this ( numColumns , numRows , TableOrder . ROW_MAJOR ) ; }
public SavedState createFromParcel ( @ NonNull Parcel in , ClassLoader loader ) { return new SavedState ( in , loader ) ; }
public boolean getWasShowingTranslation ( ) { return perInstallationPrefs . getBoolean ( Constants . PREF_WAS_SHOWING_TRANSLATION , false ) ; }
public void setColour ( @ ColorInt int colour ) { mPaint . setColor ( colour ) ; mBaseAlpha = Color . alpha ( colour ) ; mPaint . setAlpha ( mBaseAlpha ) ; }
private void getInfo ( String url ) { JsonObjectRequest jsonObjectRequest = createObject ( url , this ) ; Singleton . getInstance ( getApplicationContext ( ) ) . addToRequestQueue ( jsonObjectRequest ) ; }
public boolean onLongClick ( View v ) { sharedPref . edit ( ) . putString ( "openURL" , sharedPref . getString ( "startURL" , "file : viewPager . setCurrentItem ( newTab ) ; dialog . cancel ( ) ; return false ; }
public final void showFABIfAccurate ( final boolean parShow ) { if ( parShow ) { mFab . show ( ) ; } else { mFab . hide ( ) ; } }
private void onbBindSectionHeaderGroupViewHolder ( @ NonNull MyGroupViewHolder holder , int groupPosition ) { final AbstractExpandableDataProvider . GroupData item = mProvider . getGroupItem ( groupPosition ) ; holder . mTextView . setText ( item . getText ( ) ) ; }
public @ NonNull String getDefaultPostFormatDisplay ( ) { String defaultFormat = getFormats ( ) . get ( getDefaultPostFormat ( ) ) ; if ( TextUtils . isEmpty ( defaultFormat ) ) { defaultFormat = STANDARD_POST_FORMAT ; } return defaultFormat ; }
private String getAnyProvidedStoryTitle ( ) { Intent intent = this . getIntent ( ) ; String storyTitle = intent . getStringExtra ( STORY_TITLE_INTENT_EXTRA_NAME ) ; if ( storyTitle == null ) { storyTitle = "" ; } return storyTitle ; }
public Double getTimestamp ( ) { return timestamp ; }
private Screen createSelectVehicleScreen ( ) { if ( getPlayerCount ( ) == PlayerCount . ONE ) { return createOnePlayerVehicleScreen ( ) ; } else { return createMultiPlayerVehicleScreen ( ) ; } }
private JetpackConnectionSource getJetpackConnectSource ( ) { String value = ( mUri != null && mUri . getQueryParameterNames ( ) != null && mUri . getQueryParameter ( PARAMETER_SOURCE ) != null ) ? mUri . getQueryParameter ( PARAMETER_SOURCE ) : "" ; return JetpackConnectionSource . fromString ( value ) ; }
public void act ( float delta ) { updateLabels ( ) ; updateCountDownLabel ( ) ; if ( mDebugLabel != null ) { updateDebugLabel ( ) ; } }
public void onClick ( View v ) { Intent result = new Intent ( ) ; result . putExtra ( "HEX" , mDisplayedValues . get ( position ) . getHex ( ) ) ; setResult ( ColorPickerMainActivity . SEARCH_COMPLETE , result ) ; thisActivity . finish ( ) ; }
public void onClick ( View view ) { switch ( view . getId ( ) ) { case R . id . iv_lets_continue : fragmentBookInterface . finishedActivity ( true ) ; } }
public void onClick ( View v ) { showSubjectCreatorForNewSubject ( ) ; }
public boolean deleteConnectionsForDrink ( Drink drink ) { DBDataObject . enforceBackedObject ( drink ) ; db . getDatabase ( ) . delete ( TABLE_NAME , DRINK_ID_WHERE_CLAUSE , new String [ ] { String . valueOf ( drink . getIndex ( ) ) } ) ; return true ; }
public void run ( ) { ImageView image = ( ImageView ) findViewById ( R . id . imageView ) ; image . setImageResource ( circleColour ) ; }
public String getTime ( ) { return mTimerSwitch ? mLeftTime : "00 : 00" ; }
public boolean setException ( Throwable throwable ) { synchronized ( this ) { if ( completed || canceled ) return false ; this . exception = throwable ; this . completed = true ; notifyAll ( ) ; } notifyAllListeners ( ) ; return true ; }
public void notifyDataSetChanged ( ) { updateRows ( ) ; try { super . notifyDataSetChanged ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public double getCpu ( ) { return cpu ; }
public static boolean isNetworkAvailable ( Context c ) { ConnectivityManager cm = ( ConnectivityManager ) c . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetwork = cm . getActiveNetworkInfo ( ) ; return activeNetwork != null && activeNetwork . isConnectedOrConnecting ( ) ; }
public static void setDatabaseImported ( Context context ) { context . getSharedPreferences ( PREFERENCES_NAME , 0 ) . edit ( ) . putBoolean ( DATABASE_MIGRATED , true ) . apply ( ) ; }
public List < Artist > getDataSet ( ) { return dataSet ; }
public List < String > getNames ( ) { List < String > names = new ArrayList <> ( ) ; for ( Result r : results ) names . add ( r . getName ( ) ) ; return names ; }
private Currency getCurrency ( ) { if ( selectedOriginCurrencyId > 0 ) { return CurrencyCache . getCurrency ( db , selectedOriginCurrencyId ) ; } if ( selectedAccount != null ) { return selectedAccount . currency ; } return Currency . EMPTY ; }
private int getScrollbarTop ( ) { return ( int ) ( mScrollPos / ( mItemCount - getBottomViewCount ( ) - 1 ) * ( getHeight ( ) - getPaddingTop ( ) - getPaddingBottom ( ) - getScrollbarHeight ( ) ) ) ; }
public void setEntries ( CharSequence [ ] entries ) { super . setEntries ( entries ) ; if ( dialog != null ) { dialog . setItems ( entries ) ; } }
public int getEndHour ( Context context ) { return context . getSharedPreferences ( SettingActivity . PREFERENCE_NAME , SettingActivity . PREFERENCE_MODE ) . getInt ( SettingActivity . WORD_NOTIFICATION_END_TIME_HOUR , 23 ) ; }
private void unregisterSWANSensor ( ) { ExpressionManager . unregisterExpression ( this , String . valueOf ( ID ) ) ; }
public void onUpgrade ( SQLiteDatabase db , int oldVersion , int newVersion ) { db . execSQL ( "DROP TABLE IF EXISTS " + TABLE_ACTUAL_GAMES ) ; db . execSQL ( "DROP TABLE IF EXISTS " + TABLE_GAMES ) ; onCreate ( db ) ; }
private TrackAlbumImageRunner ( final TrackModel track , final int width , final int height ) { mTrack = track ; mWidth = width ; mHeight = height ; }
public @ Nullable String getLocationProvider ( ) { return lastLocationProvider ; }
public Object getItem ( int position ) { return mComicsListManager . getComicAtIndex ( position ) ; }
public int getExecutionCount ( ) { return mExecutionCount ; }
public void failed ( ) { failed ( getString ( R . string . error ) ) ; }
private MPPointD ( double x , double y ) { this . x = x ; this . y = y ; }
public void setRecyclerViewBinderMapper ( RecyclerViewAdapterCreatorInitializer mapper ) { mMapper = mapper ; }
public void onShow ( DialogInterface dialog ) { isExternDialogShowing = true ; }
public void notifyClear ( ) throws DAOException { App . arePointsExported = false ; for ( DAO dao : this . daoList ) { dao . deleteAll ( ) ; } }
public synchronized void releaseLicense ( byte [ ] offlineLicenseKeySetId ) throws DrmSessionException { Assertions . checkNotNull ( offlineLicenseKeySetId ) ; blockingKeyRequest ( DefaultDrmSessionManager . MODE_RELEASE , offlineLicenseKeySetId , DUMMY_DRM_INIT_DATA ) ; }
public void onActivityResult ( int requestCode , int resultCode , Intent intent ) { if ( resultCode == RESULT_OK ) { if ( requestCode == 0xbac ) { openBackupFileFromUri ( intent . getData ( ) , false ) ; } } }
public static Intent getCitiesIntent ( @ NonNull Context context ) { return getIntent ( context , ZonesActivity . class ) ; }
public List < WalletAccount > getAccounts ( AbstractAddress address ) { if ( wallet != null ) { return wallet . getAccounts ( address ) ; } else { return ImmutableList . of ( ) ; } }
public void addDebugDevice ( Context context ) { DebugDevice debugDevice = new DebugDevice ( context ) ; cardDevices . put ( debugDevice . getId ( ) , debugDevice ) ; }
public void onCreate ( ) { super . onCreate ( ) ; Instance = this ; Realm ( ) ; Fabric . with ( this , new Crashlytics ( ) ) ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . TransactionInput prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void onClick ( View v ) { showDialogFragment ( new SelectTimeDialog ( ) , "selectTime" ) ; }
public DictionaryType getType ( ) { return type ; }
public NxtSendRequest sendCoinsOffline ( NxtAddress address , Value amount ) throws WalletAccountException { return sendCoinsOffline ( address , amount , ( KeyParameter ) null ) ; }
private boolean inputFieldsCompleted ( ) { for ( int id : inputFieldResourceIds ) { if ( TextAndViewManager . getValueOfInputField ( this , id ) . isEmpty ( ) ) { return false ; } } return true ; }
public String getString ( String key , String defaultValue ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return prefs . getString ( key , defaultValue ) ; }
public static boolean isBuildOptionsMessage ( final String response ) { return BUILD_OPTIONS_PATTERN . matcher ( response ) . find ( ) ; }
private int ave ( int s , int d , float p ) { return s + Math . round ( p * ( d - s ) ) ; }
public static void openDevelopersPage ( @ NonNull Context context ) { openMarket ( context , "market : }
public void execute ( Activity mainActivity ) { Intent intent = new Intent ( mainActivity , QifExportActivity . class ) ; mainActivity . startActivityForResult ( intent , ACTIVITY_QIF_EXPORT ) ; }
public void onClick ( View v ) { if ( mItemClickListener != null ) { mItemClickListener . onItemClick ( mFileImageCardView , getAdapterPosition ( ) - ( mHasHeader ? 1 : 0 ) ) ; } }
public int getEnumInt ( final String key , final int def ) { return Integer . parseInt ( getString ( key , String . valueOf ( def ) ) ) ; }
public static < T > Set < T > newSet ( T . . . items ) { Set < T > set = new HashSet <> ( ) ; Collections . addAll ( set , items ) ; return set ; }
private void launchMedicationActivity ( String userId ) { if ( mProgressDialog != null && mProgressDialog . isShowing ( ) ) { mProgressDialog . dismiss ( ) ; } startActivity ( MedicationActivity . newIntent ( this , userId ) ) ; finish ( ) ; }
private void initDaysToPrefs ( ) { binding . daysToPrefs . setOnClickListener ( view -> showDaysToDialog ( ) ) ; binding . daysToPrefs . setValue ( getPrefs ( ) . getDaysToBirthday ( ) ) ; binding . daysToPrefs . setDependentView ( binding . birthReminderPrefs ) ; }
public void onFailure ( ) { olderCallback . onFailure ( ) ; callback . onFailure ( ) ; log . d ( "JOINED CALLBACK" , "onFailue ( ) " ) ; }
private void refreshListAllMusic ( ) { mCurrentPage = PAGE_ALL ; showProgressBar ( ) ; refreshCurrentList ( ) ; }
public List < Ingredient > getIngredients ( ) { return ingredients ; }
public StartScreenDialog ( @ NonNull AppCompatActivity context , Blurry . ImageComposer image ) { super ( context , R . style . AppTheme_Dialog_FullScreen_Fading ) ; activity = context ; this . image = image ; setCancelable ( false ) ; }
public static NotificationData getCustomNotification ( String uuid ) { return customNotifications . get ( uuid ) ; }
public final int getX ( ) { return _x ; }
public long getToAmount ( ) { return toAmount ; }
public AvatarDrawable ( TLRPC . User user , boolean profile ) { this ( ) ; isProfile = profile ; if ( user != null ) { setInfo ( user . id , user . first_name , user . last_name , false , null ) ; } }
private void resetAnimation ( @ NonNull ViewHolder holder ) { clearInterpolator ( holder . itemView ) ; endAnimation ( holder ) ; }
public Object getSettingValue ( int settingId ) { return getSetting ( settingId ) . getValue ( ) ; }
public static TypeAdapter < Message > typeAdapter ( Gson gson ) { return new AutoValue_Message . GsonTypeAdapter ( gson ) ; }
private void filterByUncompleteChecklists ( ) { initNotesList ( new Intent ( ACTION_SEARCH_UNCOMPLETE_CHECKLISTS ) ) ; }
private void setAlpha ( float alpha ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) view . setAlpha ( alpha ) ; }
public void notifyChildItemChanged ( int groupPosition , int childPosition , Object payload ) { mWrapperAdapter . notifyChildItemChanged ( groupPosition , childPosition , payload ) ; }
public void finish ( ) { super . finish ( ) ; overridePendingTransition ( 0 , R . anim . slide_out ) ; }
private void updateEmptyText ( @ StringRes int emptyTextResId ) { TextView emptyView = getView ( ) . findViewById ( android . R . id . empty ) ; emptyView . setText ( emptyTextResId ) ; }
public BaseAPISubscriber ( ) { shouldBindImmediately = true ; hasBinderBoundViews = false ; }
public void setIsModerator ( boolean isModerator ) { TextView moderatorIndicatorTextView = view . findViewById ( R . id . item_person_moderator_indicator ) ; moderatorIndicatorTextView . setVisibility ( isModerator ? View . VISIBLE : View . GONE ) ; }
public int getTranslationTextSize ( ) { return prefs . getInt ( Constants . PREF_TRANSLATION_TEXT_SIZE , Constants . DEFAULT_TEXT_SIZE ) ; }
public void setUpForCreateAccount ( ) { uniqueId = TEST_USERNAME_PREFIX + UUID . randomUUID ( ) ; nowNavigateRight ( ) ; }
public void onSuccess ( Object data ) { Log . d ( "mi - band" , "Set current time : " + data . toString ( ) ) ; }
public long duration ( ) { return mService . get ( ) . duration ( ) ; }
public void formOpened_whenEntryInHistoryExist_autoCompleteShowUp ( ) { historyGenerator . generatePgeG11Bill ( 11 ) ; tester . skipCheckPricesDialogIfVisible ( ) . openForm ( Provider . PGE ) . autoCompleteContains ( "11" ) ; }
public void onStart ( ) { super . onStart ( ) ; subscription = RxBus . getInstance ( ) . toObservable ( ) . subscribe ( this : : handleEvent ) ; }
public void testNotIndented2 ( ) { onBook ( "* Note 1\n : LOGBOOK : \n : END : " ) . onLoad ( ) . isWhenSaved ( "* Note 1\n : LOGBOOK : \n : END : \n\n" ) ; }
private PhotoPickerFragment getPickerFragment ( ) { Fragment fragment = getSupportFragmentManager ( ) . findFragmentByTag ( PICKER_FRAGMENT_TAG ) ; if ( fragment != null ) { return ( PhotoPickerFragment ) fragment ; } return null ; }
public static Observable < WebCaptcha > getCaptchaDataUrl ( String token ) { return sWebApi . getCaptchaDataUrl ( token , System . currentTimeMillis ( ) ) ; }
private static PendingIntent getReminderReceiverIntent ( Context context ) { return PendingIntent . getBroadcast ( context , Constants . BATTERY_REMINDER_REQUEST_CODE , getAlarmIntent ( context ) , 0 ) ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `total` INTEGER" ) ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( MYMUSICFRAGMENT_SAVED_INSTANCE_SEARCH_STRING , mSearchString ) ; }
public DatasetEntry ( View v ) { super ( v ) ; datasetName = v . findViewById ( R . id . basic_nation_name ) ; v . setOnClickListener ( this ) ; }
private void init ( ) { this . gpxData = new StringBuffer ( ) ; }
public void onClickCustomFee ( long currentValue ) { showCustomFeeDialog ( currentValue ) ; logTransactionFee ( 5 ) ; }
public void moveDown ( String name ) { onView ( Matchers . allOf ( ViewMatchers . withId ( R . id . playlist_drag_handle ) , withParent ( hasDescendant ( withText ( name ) ) ) ) ) . perform ( down ( ) ) ; }
public void setResourceCreditPercentage ( int resourceCreditPercentage ) { this . resourceCreditPercentage = resourceCreditPercentage ; }
public void loadGalleryPhotos ( ) { if ( MediaController . allMediaAlbumEntry == null && Build . VERSION . SDK_INT >= 21 ) { MediaController . loadGalleryPhotosAlbums ( 0 ) ; } }
public < T > T [ ] toArray ( @ NonNull T [ ] a ) { throw new UnsupportedOperationException ( ) ; }
public void setXmppConnection ( final XmppConnection connection ) { this . xmppConnection = connection ; }
public MenuFragment ( ) { super ( ) ; }
public void testSafeToAddAuthToken19 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( WPCOM_ADDRESS_5 ) ) ) ; }
public SharedPreferencesPropertyBackend setFloat ( String key , float value ) { setFloat ( key , value , _prefApp ) ; return this ; }
public void onCreateView ( Bundle savedInstanceState ) { init ( ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new MyViewHolder ( inflater . inflate ( R . layout . sponsors_row , parent , false ) ) ; }
public List < RecipeFoodTable > getDbRecipeFoodTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getRecipeFoodTable ( getDbConfig ( ) . version , language ) . onErrorComplete ( ) . blockingGet ( ) ; }
public ExampleInteractor provideExampleInteractor ( ) { return new ExampleInteractor ( ) ; }
public OrderListAdapter ( @ Nullable List < OrderProduct > orderList , OrderViewModel viewModel ) { this . orderList = orderList ; this . viewModel = viewModel ; }
public int hashCode ( ) { return 38 ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putBoolean ( SAVE_DELETED , deleted ) ; }
private void showBackgroundSaveError ( ) { Toast . makeText ( this , R . string . error , Toast . LENGTH_LONG ) . show ( ) ; }
public void onSuccessfully ( EventViewModel event ) { EventBus . getDefault ( ) . post ( new EventModifiedEvent ( event ) ) ; }
public void onNetworkError ( @ NonNull String error ) { Toast toast = Toast . makeText ( this . getContext ( ) , error , Toast . LENGTH_SHORT ) ; toast . show ( ) ; }
public static void setStringPreference ( Context context , String key , String value ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( key , value ) . apply ( ) ; }
private DatabaseHelper ( Context context ) { super ( context , DB_NAME , SCHEMA_VERSION ) ; }
public PlaceholderComparison ( ImageType imageType ) { mContext = ApplicationProvider . getApplicationContext ( ) ; mImageType = imageType ; }
public void setLink ( final String link ) { this . link = link ; }
public static void enablePushNotifications ( Context context ) { Intent i = getBaseIntent ( context ) ; i . setAction ( ACTION_PUSH_START ) ; startForegroundIfNeeded ( context , i ) ; }
public static TilesCache forOSM ( ) { return OSM ; }
public Location ( String name , int x , int y , boolean active ) { this ( name , new Waypoint ( x , y ) , active ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new RunViewModel ( mGameId , mRunId , mDatabase ) ; }
public int getScrollRange ( ) { return computeVerticalScrollRange ( ) ; }
public void setTitle ( String title ) { TextView titleTextView = view . findViewById ( R . id . item_person_list_title ) ; titleTextView . setText ( title ) ; }
public String getTitle ( ) { return StringUtils . notNullStr ( mTitle ) ; }
private int getDecFlagsMask ( int argument ) { if ( argument >= 1 && argument <= 32 ) { return ( 1 << argument ) ; } return 0 ; }
private void onAttachmentsAdded ( List < Pair < Integer , AbsModel >> pairs ) { onDataReceived ( entities2entries ( pairs ) ) ; }
public int getItemCount ( ) { return mTabList . size ( ) ; }
public Operator next ( Object operator ) { throw new RuntimeException ( "Operator has been not found" ) ; }
public void onSaveInstanceState ( Bundle outState ) { outState . putIntegerArrayList ( SAVED_SELECTION , adapter . getSelectedPositions ( ) ) ; outState . putString ( SAVED_DIRECTORY , getPath ( currentDirectory ) ) ; super . onSaveInstanceState ( outState ) ; }
public void surfaceDestroyed ( SurfaceHolder _surface ) { surfaceAvailable = false ; }
public void shareVerses ( Activity activity , List < QuranText > verses ) { String text = getShareText ( activity , verses ) ; shareViaIntent ( activity , text , R . string . share_ayah_text ) ; }
private void removeNotifyOnAvailableButton ( ) { binding . machineFragmentNotifyButton . setVisibility ( View . GONE ) ; }
public static boolean isOldDirectoriesExists ( @ NonNull Context context ) { String oldPath = getIslamicLibraryBaseDirectory ( context ) + File . separator + DATABASE_FULL_NAME ; return new File ( oldPath ) . exists ( ) ; }
public static synchronized DBHelper init ( Context context , int MODE ) { if ( MODE == READ && readInstance != null ) return readInstance ; else if ( MODE == WRITE && writeInstance != null ) return writeInstance ; return new DBHelper ( context , MODE ) ; }
public void notifyUpdate ( Instance instance ) { for ( DbObserver observer : observers . values ( ) ) { observer . updated ( instance ) ; } }
public String getContentText ( ) { return m_contentText ; }
public FontTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; decorator = new FontDecorator ( context , this ) ; decorator . initFromAttributes ( attrs ) ; }
public final void changeOptions ( OptionsMap options , AbstractClient . OnSuccess listener ) throws JSONException { clientSend ( AriaRequests . changeDownloadOptions ( gid , options ) , listener ) ; }
public int remove ( @ NonNull Tag tag ) { int index = tags . indexOf ( tag ) ; tags . remove ( tag ) ; emitSize ( ) ; return index ; }
public EventsRecyclerViewAdapter ( Context context , ArrayList < Event > eventsList ) { this . mContext = context ; this . mEventsList = eventsList ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int pos , long id ) { String selected = parent . getItemAtPosition ( pos ) . toString ( ) ; User . userPreferences . setConnectionPreference ( converseToPreference ( selected , this ) ) ; }
public void showPicker3 ( View view ) { colorDialog . setPickerColor ( SettingsActivity . this , 3 , colourBackground ) ; colorDialog . showColorPicker ( SettingsActivity . this , 3 ) ; }
public RequestsRecycler ( FragmentActivity context , RequestsPresenter requestsPresenter ) { super ( context , true ) ; mRequestsPresenter = requestsPresenter ; setupDataSet ( ) ; }
public void onPageStarted ( WebView view , String url , Bitmap favicon ) { super . onPageStarted ( view , url , favicon ) ; pd . setMessage ( "Loading video on YouTube info , just one second more . . . " ) ; }
public int getItemViewType ( int position ) { if ( position == 0 ) { return HEADER_VIEW_TYPE ; } else { return COMMENT_VIEW_TYPE ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . action_show_info_view ) { showInfoActivity ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public int getDisplayZoom ( ) { SharedPreferences defaultSharedPreferences = PreferenceManager . getDefaultSharedPreferences ( this ) ; return DisplayPreferenceUtilities . getDisplayPreference ( SettingsFragment . KEY_DISPLAY_TEXT_SIZE , AppConstants . DISPLAY_PREFERENCES_DEFAULTS . KEY_DISPLAY_TEXT_SIZE , defaultSharedPreferences , mUserDataDBHelper ) ; }
public Double getFeeChargesPaid ( ) { return feeChargesPaid ; }
public String toString ( ) { return "DiscoveryEvent" ; }
public void onClick ( View v ) { parentFragment . onClickOperationButton ( Constants . CLEAR ) ; }
public String getAddressLine3 ( ) { return addressLine3 ; }
public void onClick ( View v ) { showKursDialog ( new Kurs ( Calendar . getInstance ( ) . getTimeInMillis ( ) , true , 1 , "D" , "" ) ) ; }
public static < T > T find ( Class < T > modelClass , long id ) { return find ( modelClass , id , false ) ; }
public boolean onLongClick ( View view ) { Timber . v ( "onLongClick ( ) called with : " + "view = [ " + view + " ] " ) ; mActivity . displayBottomSheet ( getPosition ( ) ) ; return true ; }
public static BurstValue burstValueFromString ( String value ) { return value == null ? null : BurstValue . fromBurst ( value ) ; }
public Fire ( Context glContext , String objFileName , String mtlFileName ) { this . glContext = glContext ; ammo = new ObjModelMtlVBO ( glContext , objFileName , mtlFileName , 2f , 0f , false ) ; collisionMesh = new CollisionMesh ( glContext , objFileName ) ; }
public void updateMemberList ( List < Member > memberList ) { this . mMembers = new ArrayList <> ( memberList ) ; notifyDataSetChanged ( ) ; }
private StopRequest checkPauseStop ( ) { if ( pause ) return new StopRequest ( STATUS_PAUSED , "Download paused" ) ; else if ( stop || Thread . currentThread ( ) . isInterrupted ( ) ) return new StopRequest ( STATUS_STOPPED , "Download cancelled" ) ; return null ; }
public int getSquaresCountInRow ( ) { return preferences . getInt ( SQUARES_COUNT_IN_ROW_KEY , SQUARES_COUNT_IN_ROW ) ; }
public void setOnChildClickListener ( OnChildClickListener onChildClickListener ) { super . setOnChildClickListener ( onChildClickListener ) ; this . hasOnChildClickListener = onChildClickListener != null ; }
public void onConnected ( Bundle connectionHint ) { getLastKnownLocation ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mEquation = getArguments ( ) . getString ( "equation" , "error" ) ; }
public void startIntents ( ) throws ActivityNotFoundException , IllegalArgumentException { Intent [ ] intents = getIntents ( ) ; if ( intents . length == 0 ) throw new ActivityNotFoundException ( "No intents found" ) ; context . startActivities ( getIntents ( ) ) ; }
public void onRegisterSuccessTracking ( UserModel userModel ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( AnalyticsInterface . PARAM_USER_UID , userModel . getUid ( ) ) ; analyticsInterface . trackRegisterSuccess ( bundle ) ; }
public Builder clearBlockRelativityOffsets ( ) { blockRelativityOffsets_ = java . util . Collections . emptyList ( ) ; bitField0_ = ( bitField0_ & ~0x00000400 ) ; onChanged ( ) ; return this ; }
public void run ( ) { mSrl . setRefreshing ( active ) ; }
public void copyToClipboard ( CharSequence text ) { ClipData clip = ClipData . newPlainText ( text , text ) ; getClipboard ( ) . setPrimaryClip ( clip ) ; messageShort ( "Copied to clipboard" ) ; }
public boolean onInterceptTouchEvent ( @ NonNull RecyclerView rv , @ NonNull MotionEvent ev ) { swipeListener . onTouch ( rv , ev ) ; return false ; }
public Date getCreatedAt ( ) { return getInitialComment ( ) . createdAt ( ) ; }
public int getPolygonCorners ( ) { return Constants . UNIT_MELEE_CORNERS ; }
public Double getPaid ( ) { return paid ; }
public void onClick ( View widget ) { if ( onNoteBlockTextClickListener != null ) { onNoteBlockTextClickListener . invoke ( this ) ; } }
public void testConstructor ( ) throws Exception { TableModel model = new DynamicTableModel ( 5 , 5 , TableOrder . COLUMN_MAJOR ) ; }
public boolean requestAccountPermissions ( ) { if ( permissionChecker . canAccessAccounts ( ) ) { return true ; } requestPermissions ( REQUEST_GOOGLE_ACCOUNTS , permission . GET_ACCOUNTS ) ; return false ; }
public void onClick ( View view ) { openURI ( SUPPORT_URI ) ; }
public List < Movie > getResults ( ) { return results ; }
public void onError ( SteemConnectException e ) { mHandler . post ( steemCastingVoteExceptionRunnable ) ; }
public void onItem ( @ Nullable Boolean item ) { if ( Boolean . TRUE . equals ( item ) ) { deleteBookmark ( title , url ) ; } else { addBookmark ( title , url ) ; } }
public World ( ) throws Exception { super ( true , true , null , 15 , true ) ; initializeWorld ( ) ; }
public void setOnResultMode ( ) { currentStatusSearch = StatusSearchEnum . ADD_ON_RESULT ; }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . chatInfoDidLoaded ) ; getChannelParticipants ( 0 , 200 ) ; return true ; }
public List getLastSuggestions ( ) { return adapter . getSuggestions ( ) ; }
public AyahInfoDatabaseHandler getAyahInfoHandler ( ) { if ( databaseHandler == null ) { String filename = quranFileUtils . getAyaPositionFileName ( widthParameter ) ; databaseHandler = AyahInfoDatabaseHandler . getAyahInfoDatabaseHandler ( context , filename , quranFileUtils ) ; } return databaseHandler ; }
public UserAgent ( @ NonNull String userAgent ) { this . userAgent = userAgent ; }
public Completable fireAdd ( int accountId , User user ) { return Completable . fromAction ( ( ) -> addPublisher . onNext ( Pair . Companion . create ( accountId , user ) ) ) ; }
public static int getUserIdFileProfilePicture ( ) { return ENUM_Int . INTEGER_USER_ID_FILE_PROFILE_PICTURE . value ; }
public void testInitAppLanguages ( ) { Assert . assertTrue ( WikipediaApp . getInstance ( ) . language ( ) . getAppLanguageCode ( ) . equals ( "en" ) ) ; }
private void displayLoggingInProgress ( ) { setActionButtonVisible ( false ) ; GpsRouteLoggerStatus status = GpsRouteLoggerStatus . INSTANCE ; mSpeed . setText ( getResources ( ) . getString ( R . string . title_gps_logger_logging_in_progress , status . getSpeed ( ) ) ) ; }
public SignalServiceConfiguration getConfiguration ( Context context ) { String localNumber = TextSecurePreferences . getLocalNumber ( context ) ; return getConfiguration ( localNumber ) ; }
public Builder setLockTime ( int value ) { bitField0_ | = 0x00000010 ; lockTime_ = value ; onChanged ( ) ; return this ; }
public final boolean isUserWord ( String s ) { return _usersMap . containsKey ( s ) ; }
public int getCount ( ) { return mRealmTeacherHelper . getTeacherSubjectCount ( ) ; }
public View parseView ( ViewGroup parent , String formula , String result ) { ViewHolder holder = onCreateViewHolder ( parent , 0 ) ; invalidate ( holder , new HistoryEntry ( formula , result , - 1 ) , - 1 ) ; return holder . itemView ; }
private void updateDahSound ( ) { dahSound = new SimpleTone ( currentPitch , getUnitLength ( ) * 3 , SAMPLE_RATE_HZ ) ; }
public void onPostExecute ( JSONObject json , String body ) { if ( sPhotoFileListener != null ) { sPhotoFileListener . execute ( ) ; } }
public SpeedWalkDirectionEditorDialog ( Context context , DirectionEditorDoneListener doneListener , DirectionData old , IConnectionBinder service ) { super ( context ) ; this . doneListener = doneListener ; oldData = old ; isEditor = true ; this . service = service ; }
public void onBindViewHolder ( @ NonNull RecyclerView . ViewHolder holder , int position ) { throw new IllegalStateException ( ) ; }
public void onClick ( View v ) { parentFragment . onClickOperationButton ( Constants . BRACKET_OPEN ) ; }
public void setReleaseTime ( float time ) { if ( time < MIN_TIME ) time = MIN_TIME ; mRreleaseRate = 1 . 0f / ( mSamplerate * time ) ; }
public String getEventName ( ) { return Reporting . getEvents ( ) . viewItem ( ) ; }
public void onStop ( ) { super . onStop ( ) ; SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putBoolean ( VIEW_MORE_PREFERENCE , viewModel . isViewDetailChecked . get ( ) ) ; editor . apply ( ) ; }
public boolean getReloadBookList ( ) { synchronized ( LOCK ) { return mReloadBookList ; } }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( drawerToggle != null ) { drawerToggle . onConfigurationChanged ( newConfig ) ; } }
public void onViewRecycled ( @ NonNull VH holder , int viewType ) { if ( isWrappedAdapterAlive ( ) ) { WrappedAdapterUtils . invokeOnViewRecycled ( mWrappedAdapter , holder , viewType ) ; } }
private void setStartingScale ( float startingScale ) { this . startingScale = startingScale ; }
private void signIn ( ) { showProgressView ( ) ; Intent signInIntent = mGoogleSignInClient . getSignInIntent ( ) ; startActivityForResult ( signInIntent , RC_SIGN_IN ) ; }
public RGBPanelData ( @ NonNull Context context , @ NonNull AttributeSet attrs ) { super ( context , attrs ) ; setupPanel ( context ) ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . removeHandler ( ServerReorderFragment . this ) ; }
public List < SenseElement > getSenseElements ( ) { return senseElements ; }
public void setPm25 ( Double pm25 ) { this . pm25 = pm25 ; }
public JobServiceImpl ( ServiceLocator serviceLocator , Context context ) { this . serviceLocatorRef = new WeakReference <> ( serviceLocator ) ; this . workManager = WorkManager . getInstance ( context ) ; }
public OstErrors . ErrorCode getErrorCode ( ) { return mErrorCode ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `folder` ADD COLUMN `read_only` INTEGER NOT NULL DEFAULT 0" ) ; }
public void execute ( @ NonNull Realm realm ) { TodoListItemDAO dao = realm . where ( TodoListItemDAO . class ) . equalTo ( "uuid" , deletedItem . getUuid ( ) ) . findFirst ( ) ; if ( dao != null ) dao . deleteFromRealm ( ) ; }
public void onBindViewHolder ( @ NonNull VH holder , int position , @ NonNull List < Object > payloads ) { if ( isWrappedAdapterAlive ( ) ) mWrappedAdapter . onBindViewHolder ( holder , position , payloads ) ; }
public void addViewModel ( UUID uuid , T viewModel ) { Timber . d ( "addViewModel ( %s , %s ) " , uuid , viewModel ) ; viewModelMap . put ( uuid , viewModel ) ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `order` INTEGER" ) ; }
private void startActivity ( ) { Intent intent = UserActivity . Factory . getIntent ( getInstrumentation ( ) . getTargetContext ( ) ) ; activityTestRule . launchActivity ( intent ) ; }
public void setDelay ( Integer delay ) { this . delay = delay ; }
public void onLoaderReset ( @ NonNull Loader < ArrayList < Incident >> loader ) { }
public void moveCamera ( LatLng point ) { gMaps . animateCamera ( CameraUpdateFactory . newLatLngZoom ( point , MAX_ZOOM - 2 ) ) ; }
public long getLastRunTime ( ) { return mLastRun ; }
public static AppliesToEntry directEvents ( ) { AppliesToEntry ret = any ( ) ; ret . matchChannelMessages = false ; ret . matchChannelNotices = false ; return ret ; }
public LiveData < Boolean > isTitlePresent ( ) { return Transformations . map ( getEntity ( ) , entity -> entity != null && entity . getTitle ( ) != null ) ; }
public void execute ( Realm realm ) { link . setFavorite ( isFavorite ) ; Timber . i ( "setFavorite : Edited Link : " + link ) ; }
public MediaDetailPagerFragment ( ) { this ( false , false ) ; }
public void addItem ( int pos , Member model ) { mMembers . add ( pos , model ) ; notifyItemInserted ( pos ) ; }
public DB_Location_NoeC getLocationtoPosition ( int position ) { return filteredData . get ( position ) ; }
public void playOrPause ( ) { Logger . debug ( "AnimationViewPlayer playOrPause" ) ; if ( isPlaying ) { isPlaying = false ; } else { isPlaying = true ; view . next ( ) ; } view . invalidate ( ) ; }
private void dismissKeyPreviewWithoutDelay ( final Key key ) { invalidateKey ( key ) ; }
private void setupTabIcons ( TabLayout tabLayout ) { tabLayout . getTabAt ( 0 ) . setIcon ( R . drawable . ic_developer_board_black_24dp ) ; tabLayout . getTabAt ( 1 ) . setIcon ( R . drawable . ic_network_check_black_24dp ) ; }
public void setItems ( List < PostModel > entries , boolean replceAtTop ) { if ( ! entries . isEmpty ( ) ) { if ( replceAtTop ) { partManager . clearBinders ( ) ; } partManager . setItemsForBinding ( entries ) ; } notifyDataSetChanged ( ) ; }
private DownloadImageTask ( DisplayMetrics displayMetrics , String url , String name , String pageUrl ) { mDisplayMetrics = displayMetrics ; mImageUrl = url ; mName = name ; mPageUrl = pageUrl ; }
private void updateLangSummary ( ListPreference languagePrefs ) { languagePrefs . setSummary ( languagePrefs . getEntry ( ) ) ; }
public Notification getExportProgressNotification ( ExportInfo exportInfo ) { mNotificationBuilder . setProgress ( 0 , 0 , false ) . setContentText ( getExportMessage ( exportInfo ) ) ; return mNotificationBuilder . build ( ) ; }
public void setForce ( String str ) { if ( str == null ) { return ; } this . force = "1" . equals ( str ) ; }
public OtherException ( String description ) { super ( ERROR_CODE_OTHER , description ) ; }
public PDF417BlackBox4TestCase ( ) { super ( "src/test/resources/blackbox/pdf417 - 4" , null , BarcodeFormat . PDF_417 ) ; testResults . add ( new TestResult ( 3 , 3 , 0 , 0 , 0 . 0f ) ) ; }
private void cancelSheetAnimation ( ) { if ( currentSheetAnimation != null ) { currentSheetAnimation . cancel ( ) ; currentSheetAnimation = null ; currentSheetAnimationType = 0 ; } }
public T withTextColor ( @ ColorInt int textColor ) { this . textColor = ColorHolder . fromColor ( textColor ) ; return ( T ) this ; }
public void run ( ) { try { Log . i ( "IRCCloud" , "Invalidating session" ) ; fetch ( new URL ( "https : } catch ( Exception e ) { printStackTraceToCrashlytics ( e ) ; } }
public static DBSubjects setupInstance ( Context context ) { if ( mInstance == null ) mInstance = new DBSubjects ( context ) ; return mInstance ; }
public void testSetup ( ) { assertQuery ( Messages . CONTENT_URI ) ; assertQuery ( Threads . CONTENT_URI ) ; }
public void recreateCursor ( ) { loadEntities ( ) ; @ SuppressWarnings ( "unchecked" ) EntityListAdapter < T > a = ( EntityListAdapter < T > ) adapter ; a . setEntities ( entities ) ; }
private Notification makeStartNotification ( ) { return makeNotification ( getResources ( ) . getString ( R . string . conversion_in_progress ) ) ; }
public void onCreate ( ) { NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded ) ; sizeNotifierLayout . setDelegate ( this ) ; }
public void pause ( ) { mDownloading = false ; }
public void run ( ) { readAloudAnswerImageButton . setColorFilter ( getResources ( ) . getColor ( R . color . colorBgGray ) , PorterDuff . Mode . SRC_IN ) ; readAloudAnswserLabel . setTextColor ( getResources ( ) . getColor ( R . color . colorBgGray ) ) ; }
public boolean onBufferLongClicked ( Buffer b ) { return false ; }
public static ArrayList < Playlist > getAllPlaylists ( @ NonNull final Context context ) { return getAllPlaylists ( makePlaylistCursor ( context , null , null ) ) ; }
public FirestoreResultResponse ( Map < String , Object > data , String error ) { this . data = data ; this . error = error ; }
public void fetchCurrentLocation ( ) { if ( PermissionUtils . isPermissionGranted ( Manifest . permission . ACCESS_FINE_LOCATION , activity ) ) { checkLocationServicesAndFetchLocationIfOn ( ) ; } else { requestLocationPermission ( ) ; } }
public void onClick ( DialogInterface dialog , int which ) { dialog . cancel ( ) ; }
public MainMenuTask ( Fragment mFragment ) { mFragmentWeakReference = new WeakReference <> ( mFragment ) ; this . mainActivity = ( MainActivity ) mFragment . getActivity ( ) ; ButterKnife . bind ( this , mFragment . getView ( ) ) ; }
public GammaProfiles ( String json ) { try { JSON = new JSONObject ( json ) ; } catch ( JSONException e ) { Log . e ( TAG , "Failed to read gamma profiles" ) ; e . printStackTrace ( ) ; } }
private void changeWakePrefs ( ) { boolean isChecked = binding . wakeScreenOptionPrefs . isChecked ( ) ; binding . wakeScreenOptionPrefs . setChecked ( ! isChecked ) ; getPrefs ( ) . setBirthdayWakeEnabled ( ! isChecked ) ; }
public void setCreatedBy ( String createdBy ) { this . createdBy = createdBy ; }
public void onMainActionSelected ( ) { Intent intent = new Intent ( ListActivity . this , AddTextNoteActivity . class ) ; startActivityForResult ( intent , NOTE_VIEW_ACTIVITY_REQUEST_CODE ) ; }
public void sendCommand ( AbstractCommand command ) { new SendCommand ( ) . execute ( command ) ; }
public boolean isInActionMode ( ) { return actionMode != null ; }
public Double getFeeChargesAtDisbursementCharged ( ) { return feeChargesAtDisbursementCharged ; }
public int getAudioSessionId ( ) { return playback . getAudioSessionId ( ) ; }
public void onClick ( View v ) { parentFragment . onClickNumberButton ( bt_4 . getText ( ) . toString ( ) ) ; }
public void onBottomLineIsTrue ( ) { scoreView . sumScoreWhenBottomLineIsTrue ( squaresInRowCount ) ; }
public void onClick ( View view ) { saveUserInfo ( ) ; }
public LiveData < List < String >> getTreasureListLiveData ( ) { if ( this . completedChallenges == null ) { this . completedChallenges = getLiveData ( this . getApplication ( ) ) ; } return this . completedChallenges ; }
public TourUpdateAction ( Button button , TourDetailPresenter presenter ) { super ( button ) ; Injector . instance ( ) . inject ( this ) ; this . presenter = presenter ; text = "BEGIN ITHAKATALE" ; enable = true ; init ( ) ; }
public void start ( Attributes attributes ) { mCurrentThread = new Topic ( Integer . parseInt ( attributes . getValue ( TopicParser . IN_THREAD_ID_ATTRIBUTE ) ) ) ; }
public int compareTo ( @ NonNull PositionMetrics o ) { if ( this . layerDepth < o . layerDepth ) { return - 1 ; } else if ( this . layerDepth == o . layerDepth ) { return 0 ; } else { return 1 ; } }
public void dismissProgressDialog ( ) { if ( progressDialog != null ) { progressDialog . dismiss ( ) ; } }
public void onBackPressed ( ) { if ( ! backToPreviousFragment ( ) ) { super . onBackPressed ( ) ; } } */
public com . openwallet . core . protos . Protos . WalletPocket getDefaultInstanceForType ( ) { return com . openwallet . core . protos . Protos . WalletPocket . getDefaultInstance ( ) ; }
private float convertPointerY ( float y ) { return ( y - onY ) * height / onHeight ; }
public boolean isNightMode ( ) { return prefs . getBoolean ( Constants . PREF_NIGHT_MODE , false ) ; }
public void testCreateOpenHABWidgetFromJson_createsOpenHAB2Widget ( ) throws Exception { OpenHABWidget sut = OpenHAB2Widget . createOpenHABWidgetFromJson ( rootWidget , createJSONObject ( ) , "PNG" ) ; assertTrue ( sut instanceof OpenHAB2Widget ) ; }
public GanjoorCat ( int ID , int PoetID , String Text , int ParentID , String UrlAddress , int StartPoem ) { _ID = ID ; _PoetID = PoetID ; _Text = Text ; _ParentID = ParentID ; _Url = UrlAddress ; _StartPoem = StartPoem ; }
public int getCount ( ) { return mLogList . size ( ) ; }
public static String readRawFile ( String basename ) throws IOException { return readFile ( getRawFile ( basename ) ) ; }
public void startPreview ( ) { try { cameraCaptureSession . setRepeatingRequest ( captureRequestBuilder . build ( ) , null , backgroundHandler ) ; } catch ( CameraAccessException e ) { notifyError ( e . getMessage ( ) ) ; } }
public MultipleChoiceFormInput ( Context context , AttributeSet attrs ) { this ( context , attrs , R . attr . multipleChoiceFormInputStyle ) ; }
public static ToDoEditorFragment newInstance ( long todoId ) { Bundle args = new Bundle ( ) ; args . putLong ( KEY_TODO_ID , todoId ) ; ToDoEditorFragment fragment = new ToDoEditorFragment ( ) ; fragment . setArguments ( args ) ; return fragment ; }
public GeometryBuffer clear ( ) { index [ 0 ] = 0 ; indexCurrentPos = 0 ; pointNextPos = 0 ; type = GeometryType . NONE ; return this ; }
public static String defaultTheme ( ) { return Build . VERSION . SDK_INT >= 29 ? "auto" : "dawn" ; }
public void testPlayingResetsValue ( ) { animator . setFrame ( 500 ) ; animator . playAnimation ( ) ; assertClose ( 0f , animator . getFrame ( ) ) ; assertClose ( 0f , animator . getAnimatedFraction ( ) ) ; }
public PercentageChartView animationInterpolator ( @ NonNull TimeInterpolator interpolator ) { if ( interpolator == null ) { throw new IllegalArgumentException ( "Animation interpolator cannot be null" ) ; } renderer . setAnimationInterpolator ( interpolator ) ; return this ; }
public void setHeading ( String heading ) { mHeadingTextView . setText ( heading ) ; mHeadingTextView . setVisibility ( TextUtils . isEmpty ( heading ) ? GONE : VISIBLE ) ; }
public void setCards ( List < Map < String , String >> cards ) { mCards = cards ; }
public void onCreateContextMenu ( ContextMenu menu , View v , ContextMenuInfo menuInfo ) { super . onCreateContextMenu ( menu , v , menuInfo ) ; MenuInflater inflater = this . getMenuInflater ( ) ; inflater . inflate ( R . menu . context_list_row_toggle , menu ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . tool_auto_format ) ; }
public byte [ ] pop ( ) { return null ; }
public PagerViewHolder ( @ NonNull View itemView ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; }
public Maybe < Boolean > delete ( @ NonNull Tag entity ) { return cacheManager . delete ( entity ) ; }
public static void enableVibration ( boolean enable , Context context ) { run ( Control . write ( enable ? "0" : "1" , VIBRATION ) , VIB_VIBRATION , context ) ; }
private void obtainReplyTextFromRemoteInputBundle ( Bundle bundle ) { CharSequence replyText = bundle . getCharSequence ( GCMMessageService . EXTRA_VOICE_OR_INLINE_REPLY ) ; if ( replyText != null ) { mReplyText = replyText . toString ( ) ; } }
public static boolean isUserTagged ( String username ) { return Reddit . tags . contains ( "user - tag" + username . toLowerCase ( Locale . ENGLISH ) ) ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { TupleIdentityEx i1 = prev . get ( oldItemPosition ) ; TupleIdentityEx i2 = next . get ( newItemPosition ) ; return i1 . equals ( i2 ) ; }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { WatchfaceUtil . setWfzWatchFace ( inputFileName ) ; finish ( ) ; }
public void displayUploads ( List < Upload > data ) { if ( nonNull ( mUploadAdapter ) ) { mUploadAdapter . setData ( data ) ; } }
public LiveData < List < Note >> getNotesList ( ) { return notesList ; }
public SuraAyah getRangeEnd ( ) { return new SuraAyah ( maxSura , maxAyah ) ; }
public static boolean isRunning ( ) { return sRunning ; }
public ArrayList < TerminalBridge > getBridges ( ) { return bridges ; }
public void run ( ) { loadProfileData ( ) ; }
private void publishCompletedResult ( int id1 ) { try { getNotificationManager ( ) . cancel ( id1 ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public List < Answer > getAnswers ( ) { return answers ; }
public void getCORVOSession ( Callback errorCallback , Callback successCallback ) { try { successCallback . invoke ( sessionBuilder . getCORVOSession ( ) ) ; } catch ( Exception e ) { errorCallback . invoke ( e . getMessage ( ) ) ; } }
private List < Either < Placeholder , Status >> liftStatusList ( List < Status > list ) { return CollectionsKt . map ( list , statusLifter ) ; }
private void onMovieSearchSuccess ( List < Movie > movies ) { loadedMovies . clear ( ) ; loadedMovies = new ArrayList <> ( movies ) ; if ( isViewAttached ( ) ) { view . showMovies ( loadedMovies ) ; } isLoading = false ; }
public boolean onGenericMotionEvent ( MotionEvent motionEvent ) { return controls . onMotionEvent ( motionEvent ) || super . onGenericMotionEvent ( motionEvent ) ; }
public void setRangeRepeatCount ( int rangeRepeatCount ) { rangeRepeatInfo . setRepeatCount ( rangeRepeatCount ) ; }
public void onFetchTimeChanged ( long value ) { }
private Setting ( ) { update ( ) ; }
public void changeText ( String newText ) { TextView text = view . findViewById ( R . id . text_token_count ) ; text . setText ( newText ) ; text . setTextColor ( Color . BLACK ) ; }
public void onPause ( ) { if ( ! mSubscriptions . isUnsubscribed ( ) ) { mSubscriptions . unsubscribe ( ) ; } }
public TestTunnelLevel ( ) { levelLimitSize = 1000f ; }
public void setR ( int r ) { this . r = r ; }
private ViewGroupIterable ( ViewGroup parent ) { this . parent = parent ; }
public static int daysInLunarMonth ( int year , int month ) { if ( ( LUNAR_INFO [ year - CalendarViewDelegate . MIN_YEAR ] & ( 0x10000 >> month ) ) == 0 ) return 29 ; else return 30 ; }
private boolean isPasswordValid ( String password ) { return password . length ( ) > 1 ; }
public void onClick ( View v ) { Intent i = new Intent ( DashboardActivity . this , Graph . class ) ; startActivity ( i ) ; }
public String getString ( Context context ) { return context . getString ( name ) ; }
public void selected ( File selection ) { addDir ( selection ) ; }
private ReaderTag getCurrentTag ( ) { return mCurrentTag ; }
public void onClick ( View v ) { mViewModel . togglePreviewModeSelectorVisibility ( true ) ; }
public IqGenerator ( final XmppConnectionService service ) { super ( service ) ; }
public void initialize ( Context aContext ) { sharedPref = PreferenceManager . getDefaultSharedPreferences ( aContext ) ; }
public Uri insert ( @ NonNull Uri uri , ContentValues values ) { throw new UnsupportedOperationException ( ) ; }
public int getIndex ( ) { return data . getIndex ( ) ; }
public boolean hasKey ( ECKey key ) { lock . lock ( ) ; try { return simpleKeyChain . hasKey ( key ) ; } finally { lock . unlock ( ) ; } }
public boolean getBoolean ( Key key ) { return mSharedPreferences . getBoolean ( key . id , false ) ; }
private void onUploadStatusUpdate ( Upload upload ) { int index = findIndexById ( uploads , upload . getId ( ) ) ; if ( index != - 1 ) { callView ( view -> view . notifyUploadItemChanged ( index ) ) ; } }
public void onLoaderReset ( Loader < Cursor > loader ) { mMovieAdapter . setMoviesData ( null ) ; }
public void dataLoggerStatusModified ( String msg ) { checkSettingsEnabled ( ) ; }
public TrackGroupArray getTrackGroups ( ) { return getPreparedState ( ) . tracks ; }
private static void setErrorCount ( ) { mErrorCountSaveToFile -- ; if ( mErrorCountSaveToFile <= 0 ) { mSaveToFileEnable = false ; logger . e ( "logging to file disabled because of to much error during save" ) ; } }
public void onAccountUnregistered ( Account account , OnRegStateParam param ) { mLogger . d ( "onAccountUnRegistered" ) ; }
public KeyCrypter getKeyCrypter ( ) { return simpleKeyChain . getKeyCrypter ( ) ; }
public boolean isSearchPackageActivated ( ) { return mSharedPreferences . getBoolean ( KEY_SEARCHPKG , true ) ; }
public static AlbumCoverFragment newInstance ( final Song song ) { AlbumCoverFragment frag = new AlbumCoverFragment ( ) ; final Bundle args = new Bundle ( ) ; args . putParcelable ( SONG_ARG , song ) ; frag . setArguments ( args ) ; return frag ; }
public static void sessionCancel ( Context context , SharedPreferences preferences ) { updateCurrentlyRunningServiceType ( preferences , context , TAMETU ) ; stopTimer ( context ) ; sendBroadcast ( context ) ; }
public boolean shouldAutoCreate ( ) { return mAutoCreate ; }
public void setOffset ( Double offset ) { this . offset = offset ; }
public static void showEmailFailureNotification ( Context context ) { showAlertNotification ( context , NOTIFICATION_ID_FAILED_EMAIL , R . string . warning_notification_ticker_email_failed , R . string . warning_notification_message_email_failed , EmailPreferencesActivity . class ) ; }
public DetailViewAdapter ( List < SenseElement > items ) { this . items = items ; }
private void checkGoogleStatus ( ) { if ( mGoogleLogin . isLogged ( ) ) { mGoogleDriveButton . setText ( R . string . disconnect ) ; } else { mGoogleDriveButton . setText ( getString ( R . string . connect ) ) ; } }
public void play ( ) { mService . get ( ) . play ( ) ; }
public void onIristickServiceInitialized ( IristickBinding binding ) { }
public long getExpiry ( ) { return mExpiry ; }
public Rep getRepAt ( int position ) { return getItem ( position ) ; }
public CommentImageEmbedBinder ( CommentModel model ) { comment = model ; }
private final TextUtils . SnackbarDisplay snackbarDisplay = new TextUtils . SnackbarDisplay ( ) { @ Override public void showSnackbar ( String message ) { ( ( MainActivity ) getActivity ( ) ) . showSnackbar ( message ) ; } } ;
public void onCommentListingRequestException ( final Throwable t ) { BugReportActivity . handleGlobalError ( getActivity ( ) , t ) ; }
public void setComments ( Map < Integer , Comment > comments ) { this . comments = comments ; }
public static String getWorkingFolder ( Context context ) { return getPrefs ( context ) . getString ( "working_folder2" , defaultFolder ( context ) ) ; }
private void fetchCurrentTheme ( ) { mDispatcher . dispatch ( ThemeActionBuilder . newFetchCurrentThemeAction ( mSite ) ) ; }
public void showProgressBar ( ) { SwipeRefreshLayout swipeRefreshLayout = getSwipeRefreshLayout ( ) ; if ( swipeRefreshLayout != null ) { swipeRefreshLayout . setRefreshing ( true ) ; } }
public List < Ride > getRideList ( ) { return rides ; }
public void startSweeps ( ) { showSweeps ( ) ; index = 0 ; acceptData = true ; doSweeps = true ; }
public DatabaseHelper ( Context c ) { super ( c , DATABASE_HOME , null , 1 ) ; _db = getWritableDatabase ( ) ; _context = c ; }
public void setContent ( Spannable content ) { contentView . setText ( content ) ; }
public static Observable < ViewScrollChangeEvent > create ( @ NonNull View view ) { return Observable . unsafeCreate ( new ViewTreeScrollChangedListener ( view ) ) ; }
public void addUsersToBan ( int accountId , int groupId , ArrayList < User > users ) { PlaceFactory . getCommunityAddBanPlace ( accountId , groupId , users ) . tryOpenWith ( requireActivity ( ) ) ; }
public int compare ( AttendResult r1 , AttendResult r2 ) { return r1 . getLate ( ) . compareTo ( r2 . getLate ( ) ) ; }
public Builder clearPlaylistId ( ) { bitField0_ = ( bitField0_ & ~0x00000002 ) ; playlistId_ = 0 ; onChanged ( ) ; return this ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( DraggableStaggeredGridExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public Message setTitle ( String title ) { this . title = title ; return this ; } */
public static void debugLog ( Class c , String msg ) { if ( Constants . DEBUG ) Log . d ( Constants . LOG_ID + " : " + c . getSimpleName ( ) , "\t" + msg ) ; }
public void backTop ( View view ) { mRecyclerView . scrollToPosition ( 0 ) ; }
public void filterLastPositions ( long timestamp ) { int [ ] contactIds = getContactIds ( chatId ) ; filterProvider . setLastPositionFilter ( timestamp ) ; applyFilters ( contactIds ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mContext = getActivity ( ) ; mActivity = ( BaseActivity ) getActivity ( ) ; mFragmentManager = mActivity . getSupportFragmentManager ( ) ; }
public void stopDrag ( float x , float y ) { mLine . unregister ( ) ; for ( IDragListener handler : mDropHandlers ) { handler . drop ( x , y ) ; } }
public void onClick ( View view ) { Intent mainIntent = new Intent ( Intent . ACTION_MAIN , null ) ; mainIntent . addCategory ( Intent . CATEGORY_LAUNCHER ) ; AppList . getAllActivities ( getApplicationContext ( ) , mainIntent , 4 ) ; }
public JSONObject getDevice ( String address ) throws OstError { Map < String , Object > requestMap = getPrerequisiteMap ( ) ; return mOstHttpRequestClient . get ( String . format ( "/users/%s/devices/%s/" , mUserId , address ) , requestMap ) ; }
private static double getBallVelocity ( Ball ball ) { return Math . sqrt ( ball . getXVel ( ) *ball . getXVel ( ) + ball . getYVel ( ) *ball . getYVel ( ) ) ; }
public void onNext ( AyahCoordinates coordinates ) { if ( screen != null ) { screen . setAyahCoordinatesData ( coordinates ) ; } }
public HashMap < String , ScriptData > getScripts ( ) { return scripts ; }
public void onAttached ( ) { subscriptions . add ( loadImage ( ) . subscribe ( new SimpleSubscriber <> ( ) ) ) ; }
private InvalidJid ( String jid ) { this . value = jid ; }
public void setImages ( @ NonNull List < NoteImage > images ) { this . images = images ; }
public void setCardFront ( ) { setImageBitmap ( drawables [ ( color - 1 ) * 13 + value - 1 ] ) ; }
public static double bitsFromBitcoins ( double pBitcoins ) { return pBitcoins * 0 . 000001 ; }
public void setUpdatedBy ( String updatedBy ) { this . updatedBy = updatedBy ; }
public void refreshUserInterface ( ) { DeviceListFragment fragment = ( DeviceListFragment ) fragmentManager . findFragmentById ( fragment_container ) ; if ( fragment != null ) { fragment . populateUI ( ) ; } }
public void setLocationsViewMode ( LocationsViewMode mode ) { mPreferences . setLocationsViewMode ( mode ) ; }
public IChannel getChannel ( ) { return mChannel ; }
public void onAnimationEnd ( Animator animation ) { shakeTextView ( num == 5 ? 0 : - x , num + 1 ) ; }
public void performAction ( Context context , TimestampedValue [ ] newValues ) { vibrator . vibrate ( duration ) ; }
public boolean isNavigationViewSavedStateMissing ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . M && Build . VERSION . SDK_INT <= Build . VERSION_CODES . P ; }
public RoomFileAdapterViewHolder ( @ NonNull RoomFileItemBinding binding ) { super ( binding . getRoot ( ) ) ; this . binding = binding ; }
public boolean propertyDiffers ( AccountProperty property , Object object ) throws AccountDeletedException { ObjectUtils . requireNotNull ( property , PROPERTY ) ; Object old = accountPropertiesRW . getResource ( property ) ; return ! PropertyUtils . propertyObjectEquals ( old , object ) ; }
private void sendInitialRequest ( ) { if ( this . kind == Kind . HOME ) { this . tryCache ( ) ; } else { sendFetchTimelineRequest ( null , null , null , FetchEnd . BOTTOM , - 1 ) ; } }
public void onClick ( View v ) { parentFragment . onClickNumberButton ( bt_5 . getText ( ) . toString ( ) ) ; }
public void onClick ( View v ) { if ( mCurrentTab != 3 ) mPager . setCurrentItem ( 3 ) ; }
public void compare_WhenFirstNameIsLower_ReturnLessThanZero ( ) { int result = sut . compare ( event1 , event2 ) ; assertThat ( result ) . isLessThan ( 0 ) ; }
public void play ( Uri uri ) { if ( player == null ) createPlayer ( ) ; preparePlayer ( uri ) ; if ( holdResources ( ) ) resume ( ) ; }
public void openGroups ( int accountId , int userId , @ Nullable User user ) { PlaceFactory . getCommunitiesPlace ( accountId , userId ) . withParcelableExtra ( Extra . USER , user ) . tryOpenWith ( requireActivity ( ) ) ; }
public void onIpFilterParsed ( int ruleCount ) { }
private void loadProvider ( RestResponseHandler < UPerson > handler ) { log . v ( TAG , "loadProvider" ) ; ifmoRestClient . get ( activity , "person/" + pid , null , handler ) ; }
public void notifyOfChangeAtId ( int id , boolean isPercentage ) { reQuery ( ) ; notifyItemChanged ( isPercentage ? convertPercentageIdToPosition ( id ) : convertCounterIdToPosition ( id ) ) ; }
public void hide ( ) { startAnimation ( mHide ) ; }
private void sendSmAcknowledgementInternal ( ) throws NotConnectedException , InterruptedException { packetWriter . sendStreamElement ( new AckAnswer ( clientHandledStanzasCount ) ) ; }
public void onFinish ( ) { cancelIncreaseSound ( ) ; restoreDefaultVolume ( ) ; }
public LocationJobPresenter ( Context context , LocationContract . LocationJobService locationCallback ) { this . context = context ; this . preferences = new Preferences ( context ) ; this . locationJobServiceCallback = locationCallback ; }
public void onResume ( ) { log . v ( TAG , "onResume" ) ; firebaseAnalyticsProvider . setCurrentScreen ( activity , fragment ) ; }
public void setChecked ( boolean checked ) { if ( mChecked == checked ) { return ; } mChecked = checked ; mBackground . setBackgroundColor ( mChecked ? mHighlightColor : mBackgroundColor ) ; }
public MyViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . album_card2 , parent , false ) ; return new MyViewHolder ( itemView ) ; }
public void ProfileMyFavoritesInit ( ) { if ( mMyFavoritesAdapter . getItemCount ( ) == 0 ) { getUserFavorites ( ) ; } setAdapter ( ) ; }
public void attachView ( DeviceListView mvpView ) { super . attachView ( mvpView ) ; updateDeviceList ( true ) ; }
public void onShow ( DialogInterface dialog ) { InputMethodManager imm = ( InputMethodManager ) context . getSystemService ( Context . INPUT_METHOD_SERVICE ) ; imm . showSoftInput ( newPassInput , InputMethodManager . SHOW_IMPLICIT ) ; }
public float getFinal ( ) { return finalValue ; }
public void stopSweeps ( ) { if ( toggleButtonDoSweep != null ) { toggleButtonDoSweep . setChecked ( false ) ; } doSweeps = false ; setStimInvisible ( ) ; }
public boolean onQueryTextSubmit ( String query ) { moveToDeparturesOrRoutes ( ) ; return false ; }
public void setValueNum ( long valueNum ) { this . mValueNum = valueNum ; }
public AddTodoListInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , Repository repository , String title ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . title = title ; }
public WindowInsets onApplyWindowInsets ( View v , WindowInsets insets ) { lastInsets = insets ; v . requestLayout ( ) ; return insets . consumeSystemWindowInsets ( ) ; }
public void onBindGroupViewHolder ( @ NonNull GVH holder , int groupPosition , int viewType , @ NonNull List < Object > payloads ) { onBindGroupViewHolder ( holder , groupPosition , viewType ) ; }
public void showPermissionsError ( ) { showErrorInternal ( R . string . import_data_permissions_error ) ; }
public void onClick ( View v ) { MediaControllerCompat . TransportControls controls = MediaControllerCompat . getMediaController ( FullScreenPlayerActivity . this ) . getTransportControls ( ) ; controls . seekTo ( mLastPlaybackState . getPosition ( ) + PLAY_SHIFT ) ; }
public void onUserConnected ( IUser user ) { mChannelListAdapter . updateChannels ( ) ; mChannelListAdapter . notifyDataSetChanged ( ) ; }
public void setGraph3MonthXLabel ( String [ ] values ) { barChart3Month . getXAxis ( ) . setValueFormatter ( new GenericAxisValueFormatter <> ( values ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . menu_notifications , menu ) ; notificationMenuItem = menu . findItem ( R . id . archived ) ; setMenuItemTitle ( ) ; return true ; }
private int nextTabStop ( int cursorCol ) { for ( int i = cursorCol + 1 ; i < mColumns ; i ++ ) { if ( mTabStop [ i ] ) { return i ; } } return mColumns - 1 ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { thread . initialize ( UU ) ; log . v ( TAG , "onCreate" ) ; firebaseAnalyticsProvider . logCurrentScreen ( activity , fragment ) ; }
private void editTrack ( Track t ) { Intent intent = new Intent ( this , TrackPreferenceActivity . class ) ; intent . putExtra ( "track_id" , t . getId ( ) ) ; startActivityForResult ( intent , 1 ) ; }
public void setTextAndValueAndCheck ( String text , CharSequence value , boolean checked , boolean divider ) { setTextAndValueAndCheck ( text , value , checked , 0 , false , divider ) ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `mx` INTEGER" ) ; }
public void onLoaderReset ( Loader < List < Song >> loader ) { getAdapter ( ) . swapDataSet ( new ArrayList <> ( ) ) ; }
public int getFontsize ( ) { return data . getInt ( FONTSIZE , - 1 ) ; }
public Photo2AlbumUploadable ( Context context , INetworker networker , IPhotosStorage storage ) { this . context = context ; this . networker = networker ; this . storage = storage ; }
public void testReplaceAllIgnoresCase1 ( ) { assertEquals ( repResult , StrUtil . replaceAllIgnoresCase ( repText , repSearch , repNew , Locale . ENGLISH ) ) ; }
public Field ( String name , byte [ ] photo , String phone , String day ) { this . name = name ; this . photo = photo ; this . phone = phone ; this . day = day ; }
public BarEntry ( float x , float [ ] vals ) { super ( x , calcSum ( vals ) ) ; this . mYVals = vals ; calcPosNegSum ( ) ; calcRanges ( ) ; }
public long getPostId ( ) { return mPostId ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . SharedPreference parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public void onBookmarkStateChange ( boolean newBookmarkState , int pageId ) { if ( pageId == this . pageId ) { changeBookMarkState ( newBookmarkState ) ; } }
public List < Sponsor > getSponsors ( ) { return sponsors ; }
public void setVersion ( int version ) { perInstallationPrefs . edit ( ) . putInt ( Constants . PREF_VERSION , version ) . apply ( ) ; }
public Builder errorMessageTextColor ( int errorMessageTextColor ) { formView . style . errorMessageTextColor = errorMessageTextColor ; return this ; }
private List < File > searchFileInDirectory ( String path ) { return FileHelper . getFileInDirectory ( path , isHidden , searchFileType ( ) ) ; }
private String getRemovingPluginMessage ( ) { return getString ( R . string . plugin_remove_progress_dialog_message , mPlugin . getDisplayName ( ) ) ; }
public boolean isAnimatingState ( ) { return ! stateScroller . isFinished ( ) ; }
public void showDonate ( boolean showDonate ) { this . showDonate = showDonate ; if ( getActivity ( ) == null ) return ; getActivity ( ) . invalidateOptionsMenu ( ) ; }
private static < T > void putObject ( Context context , String key , T object ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( key , new Gson ( ) . toJson ( object ) ) . apply ( ) ; }
private void numberOfSatellites ( int pNum ) { binding . valueNumSatellites . setText ( String . valueOf ( pNum ) ) ; }
public PushMediaSendJob ( Context context , long messageId , Address destination ) { super ( context , constructParameters ( destination ) ) ; this . messageId = messageId ; }
public void setCallbacks ( LoaderCallbacks callbacks ) { this . callbacks = callbacks ; loadNextItems ( ) ; }
public void onCreateOptionsMenu ( final Menu menu , final MenuInflater inflater ) { inflater . inflate ( R . menu . main , menu ) ; }
public void notifyOfChangedSubject ( int recyclerViewPosition ) { reQuery ( ) ; notifyItemChanged ( recyclerViewPosition ) ; }
public void onSignOut ( @ NonNull AuthState . SignedOut event ) { Services . tasks . removeType ( TaskType . trackUpload ) ; }
public void close ( ) throws MessagingException { try { if ( iservice != null ) iservice . close ( ) ; } finally { context = null ; } }
public static Spanned html_to_spanned ( String msg ) { return html_to_spanned ( msg , false , null , null , false ) ; }
public void uncheckAll ( ) { checkedState . clear ( ) ; notifyDataSetChanged ( ) ; }
public String getShareSubject ( GitHubCommentBase comment ) { return null ; }
public void run ( ) { if ( isVideoMessage ) { try { processAsVideo ( ) ; } catch ( FileNotFoundException e ) { processAsFile ( ) ; } } else { processAsFile ( ) ; } }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { TupleOperationEx a1 = prev . get ( oldItemPosition ) ; TupleOperationEx a2 = next . get ( newItemPosition ) ; return a1 . id . equals ( a2 . id ) ; }
private void setAdapter ( JSONArray programs ) { ProgramAdapter programAdapter = new ProgramAdapter ( filterPrograms ( programs ) , getOnClickCallback ( ) ) ; recyclerView . setAdapter ( programAdapter ) ; }
private void loadContents ( int type ) { switch ( type ) { case TreasureItemType . STORY_REFLECTION : new LoadStoryDefAndReflectionUris ( ) . execute ( ) ; break ; case TreasureItemType . CALMING_PROMPT : loadCalmingReflectionAndResponseUris ( ) ; break ; } }
public void onAnimationCancel ( View view ) { ViewCompat . setAlpha ( view , 1 ) ; ViewCompat . setTranslationX ( view , 0 ) ; }
public void onLoadFinished ( @ NonNull Loader < Cursor > loader , Cursor data ) { new CursorToListAsyncTask ( data , this ) . execute ( ) ; }
public void onConnectionFailed ( @ NonNull ConnectionResult connectionResult ) { Toast . makeText ( getActivity ( ) , "Connection problem ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public void testIsWPCOMURL1 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( WPCOM_ADDRESS_1 ) ) ) ; }
public LiveData < EventInfo > getEvent ( long eventId ) { return destinationRepository . getEvent ( eventId ) ; }
public long getDuration ( ) { return mMediaPlayer != null ? mMediaPlayer . getDuration ( ) : 0 ; }
private void updateTitle ( String text ) { try { folderName . setText ( text ) ; } catch ( Exception e ) { CrashUtils . report ( e ) ; folderName . setText ( R . string . app_name ) ; } }
public SessionRecord loadSession ( SignalProtocolAddress address ) { SessionRecord session = mXmppConnectionService . databaseBackend . loadSession ( this . account , address ) ; return ( session != null ) ? session : new SessionRecord ( ) ; }
public void moveViewToX ( float xValue ) { Runnable job = MoveViewJob . getInstance ( mViewPortHandler , xValue , 0f , getTransformer ( AxisDependency . LEFT ) , this ) ; addViewportJob ( job ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( MainActivity ) getActivity ( ) ) . setActionBarTitle ( "Home" ) ; }
public boolean canDownloadMedia ( MessageObject messageObject ) { return canDownloadMedia ( messageObject . messageOwner ) == 1 ; }
public void draw ( @ NonNull Canvas canvas ) { if ( mShow ) { super . draw ( canvas ) ; } }
public void onSearchOpenClose ( boolean open ) { searchingStickers = open ; setStickersExpanded ( open , false , false ) ; }
public void onReceive ( Context context , Intent intent ) { progressHandler . setCancelled ( true ) ; }
public void onPageStarted ( WebView view , String url , Bitmap favicon ) { findViewById ( R . id . spinner ) . setVisibility ( View . VISIBLE ) ; }
public void setFontColor ( int color ) { titleFontColor = color ; }
public void onStop ( ) { if ( mCameraSource != null ) { mCameraSource . release ( ) ; mCameraSource = null ; } super . onStop ( ) ; }
public CardsAdapterRecaudos ( Activity context , ArrayList < Client > clients ) { this . context = context ; this . clients = clients ; }
public long getValueNum ( ) { reduce ( ) ; return mValueNum ; }
public int getUnitCost ( ) { return Constants . FACTORY_SPRINTER_UNIT_COST ; }
public void onFailure ( @ NonNull Call < AutoLoginToken > call , @ NonNull Throwable t ) { failedFeedback ( getString ( R . string . webactivity_open_page_failed ) ) ; }
public void afterTextChanged ( Editable s ) { find ( findTextField . getText ( ) . toString ( ) , false , 0 ) ; }
public void onClick ( View v ) { getDate ( ) ; DatePickerDialog datePickerDialog = new DatePickerDialog ( CustomPoopActivity . this , CustomPoopActivity . this , year , month , day ) ; datePickerDialog . show ( ) ; }
public GifSlide ( Context context , Uri uri , long size , int width , int height ) { super ( context , constructAttachmentFromUri ( context , uri , MediaUtil . IMAGE_GIF , size , width , height , true , null , false , false ) ) ; }
public void onCategoriesLoaded ( List < Category > categories ) { view . updateList ( categories ) ; }
public boolean isReady ( ) { return loadingFinished || ( ! isPendingReset ( ) && primarySampleQueue . hasNextSample ( ) ) ; }
public void testNullRenderFromKey ( ) { when ( mDatafeed . fetchEvent ( EVENT_KEY ) ) . thenReturn ( Observable . just ( null ) ) ; EventListElement element = mRenderer . renderFromKey ( EVENT_KEY , ModelType . EVENT , null ) ; assertNull ( element ) ; }
public Dictionary findMatchOrNull ( Dictionary dictionaryToSearch ) { for ( Dictionary dictionary : dictionaries ) { if ( dictionaryToSearch . equalsDictionary ( dictionary ) ) { return dictionary ; } } return null ; }
public void bind ( String alias ) { X509Certificate cert = mHelper . getCertificate ( alias ) ; mCertificateText . setText ( ServerCertificateManager . buildCertOverviewString ( cert ) ) ; }
private double sqmTosqinch ( double num ) { return num * 1550 . 0031d ; }
public void setWeatherKey ( String str ) { prefs . edit ( ) . putString ( Constants . PREF_OWM_KEY , str ) . apply ( ) ; }
private void initAdapter ( Context context ) { adapter = new ArrayAdapter < Integer > ( context , android . R . layout . simple_spinner_item , data_array ) ; adapter . setDropDownViewResource ( android . R . layout . simple_spinner_dropdown_item ) ; }
public JingleElement getJingleElement ( ) { return jingleElement ; }
public boolean matchesSafely ( @ NonNull View view ) { ViewParent parent = view . getParent ( ) ; return parent instanceof ViewGroup && parentMatcher . matches ( parent ) && view . equals ( ( ( ViewGroup ) parent ) . getChildAt ( position ) ) ; }
public void setDataSink ( NetworkDataSink sink ) { mDataSink = sink ; }
public void setLayoutType ( SizeMode layoutType ) { super . setLayoutType ( layoutType ) ; }
public void onAdLoaded ( ) { super . onAdLoaded ( ) ; mNativeAd . setVisibility ( View . VISIBLE ) ; }
public IOException getSourceException ( ) { Assertions . checkState ( type == TYPE_SOURCE ) ; return ( IOException ) cause ; }
public void onViewAttachedToWindow ( @ NonNull RecyclerView . ViewHolder holder ) { onViewAttachedToWindow ( holder , holder . getItemViewType ( ) ) ; }
private void showSnackbarError ( int textResource ) { Snackbar . make ( mCoordinatorLayout , textResource , Snackbar . LENGTH_LONG ) . show ( ) ; }
public void onClick ( View v ) { if ( mMoreListener != null ) { mMoreListener . executeFileAudioModel ( file , v ) ; } }
public void onEvent ( MessageUpdate event ) { if ( event . type == MessageUpdate . Type . REPORT_UPDATE ) { invalidateOptionsMenu ( ) ; updateAllReportDialog ( ) ; } }
public int getItemCount ( ) { return info . size ( ) ; }
public void dispatchFinished ( @ NonNull MoveAnimationInfo info , @ NonNull RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchMoveFinished ( " + item + " ) " ) ; } mItemAnimator . dispatchMoveFinished ( item ) ; }
public String getString ( @ NonNull String key ) { return "" ; }
public int addTrack ( MediaFormat mediaFormat , boolean isAudio ) { tracks . add ( new Track ( tracks . size ( ) , mediaFormat , isAudio ) ) ; return tracks . size ( ) - 1 ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( presenter != null ) { presenter . onItemChecked ( holder . getAdapterPosition ( ) , isChecked , shoppingCartId , item . quantity , afterDiscountProductPrice , item ) ; } }
public void nextPage ( ) { if ( isLoading ) return ; if ( moviesInteractor . isPaginationSupported ( ) ) { currentPage ++ ; displayMovies ( ) ; } }
public void initializeIngredients ( ) { initializeTable ( "ingredients . txt" , IngredientContract . COLUMN_NAME , IngredientContract . getTableName ( ) ) ; }
private void showControlForClosed ( Context context ) throws ChallengeDoesNotExistsException { if ( this . fitnessChallengeViewModel . isChallengeAchieved ( ) ) { this . showControlForAchieved ( context ) ; } else { this . showControlForMissed ( context ) ; } }
public static String getString ( Context context , String code , @ StringRes int keyId , String defaultValue ) { String key = String . format ( KEY_FORMAT , code , getKey ( context , keyId ) ) ; return getString ( context , key , defaultValue ) ; }
public boolean retainAll ( @ NonNull Collection < ? > c ) { throw new UnsupportedOperationException ( ) ; }
public void requestAcknowledged ( long workflowId , OstWorkflowContext ostWorkflowContext , OstContextEntity ostContextEntity ) { }
public int getNotificationId ( ) { return NOTIFICATION_ID ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_marathon_list , menu ) ; }
public Call < Beverage > getBeverage ( @ Path ( "beverageId" ) Integer id ) { return jugoterapiaService . getBeverage ( id ) ; }
public void onPause ( ) { super . onPause ( ) ; Log . d ( TAG , "onPause called" ) ; if ( forcedOrientation && bound != null ) { bound . setResizeAllowed ( false ) ; } }
public void setIgnoredRacer ( Racer ignoredRacer ) { mFilter . mIgnoredRacer = ignoredRacer ; }
public void onConnectionClosed ( ) { reportConnectionLost ( ) ; if ( isConnectedFast ( ) && mNeedsRestoration ) openConnection ( mApplicationName ) ; else if ( needsConnection ( ) ) notifyNeedsConnection ( ) ; }
public void run ( ) { tv . append ( "\n\n" + obj ) ; }
public RangeDecimalWidget ( Context context , QuestionDetails prompt ) { super ( context , prompt ) ; }
public static ViewThreadFragment newInstance ( String id ) { Bundle arguments = new Bundle ( 1 ) ; ViewThreadFragment fragment = new ViewThreadFragment ( ) ; arguments . putString ( "id" , id ) ; fragment . setArguments ( arguments ) ; return fragment ; }
public void onPause ( ) { super . onPause ( ) ; unregisterWifiReceiver ( ) ; }
public void onRefresh ( ) { startDownloadSchoollistThread ( ) ; }
public void onCanceled ( List < Item > data ) { super . onCanceled ( data ) ; cleanUp ( data ) ; }
public void execute ( ValidationHolder validationHolder , Matcher matcher ) { TextInputLayout textInputLayout = validationHolder . getTextInputLayout ( ) ; textInputLayout . setErrorTextAppearance ( mErrorTextAppearance ) ; textInputLayout . setErrorEnabled ( true ) ; textInputLayout . setError ( validationHolder . getErrMsg ( ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { Log . i ( TAG , "onCreate" ) ; super . onCreate ( savedInstanceState ) ; setListAdapter ( new PoiListAdapter ( getActivity ( ) , new ArrayList < FourSquarePoi > ( ) ) ) ; }
public XYMarkerView ( Context context , IAxisValueFormatter xAxisValueFormatter ) { super ( context , R . layout . custom_marker_view_layout ) ; this . xAxisValueFormatter = xAxisValueFormatter ; tvContent = findViewById ( R . id . tvContent ) ; format = new DecimalFormat ( "###" ) ; }
public void setDatePublished ( String dateStr ) { this . mDatePublished = StringUtils . notNullStr ( dateStr ) ; }
private void initializeActivity ( ) { createPresenter ( ) ; swipeToRefresh . setOnRefreshListener ( this ) ; swipeToRefresh . setColorSchemeResources ( R . color . colorAccent , R . color . colorPrimary ) ; }
public void maybeThrowSourceInfoRefreshError ( ) throws IOException { playlistTracker . maybeThrowPrimaryPlaylistRefreshError ( ) ; }
public ApiResponse ( @ Nullable Throwable error ) { code = 500 ; body = null ; this . error = error ; }
public boolean onEditorAction ( TextView textView , int i , KeyEvent keyEvent ) { if ( i == EditorInfo . IME_ACTION_NEXT ) { onNextPressed ( ) ; return true ; } return false ; }
public void surfaceDestroyed ( SurfaceHolder holder ) { stopPreview ( ) ; }
public static String generateKey ( String nodeId , String source ) { return nodeId + " - " + source ; }
public void onClick ( View v ) { new WelcomeFinisher ( DoneFragment . this ) . finish ( ) ; }
private double sqinchToacre ( double num ) { return num * 1 . 594E - 7d ; }
public NonLayerDataAdapter ( NonLayerContract . Presenter p ) { super ( ) ; presenter = p ; }
public void setGranularityEnabled ( boolean enabled ) { mGranularityEnabled = enabled ; }
public void setShouldFetchPages ( boolean shouldFetchPages ) { perInstallationPrefs . edit ( ) . putBoolean ( Constants . PREF_SHOULD_FETCH_PAGES , shouldFetchPages ) . apply ( ) ; }
public MapService ( ) { super ( "MapService" ) ; }
public static String parseComment ( String command ) { String comment = EMPTY ; Matcher matcher = COMMENT_PARSE . matcher ( command ) ; if ( matcher . find ( ) ) comment = matcher . group ( 0 ) ; return comment ; }
public void onItemClick ( AdapterView < ? > parent , View view , int index , long id ) { setTextViewContent ( lstFile [ index ] . toString ( ) , null ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . game_settings ) ; }
public List < Entity > getAttachments ( ) { return attachments . get ( ) ; }
public void onFocusChange ( View v , boolean hasFocus ) { if ( hasFocus ) { lastSearchKeyboardLanguage = AndroidUtilities . getCurrentKeyboardLanguage ( ) ; MediaDataController . getInstance ( currentAccount ) . fetchNewEmojiKeywords ( lastSearchKeyboardLanguage ) ; } }
public static String formatCurrency ( Context ctx , Double balance , CurrencyEnum cur ) { return formatGenericCurrency ( ctx , balance ) + " " + cur . name ( ) ; }
public void vibrateVeryLong ( ) { if ( vibrationEnabled ) vibrator . vibrate ( VIBRATION_LENGTH_VERY_LONG ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( progress ) ; }
public void onTextInputNegativeClick ( String id ) { mTextInputDialog = null ; }
public AppModule ( MarietjeApp application ) { this . application = application ; }
public boolean containsGeometryInformation ( ) { for ( ChildZone childZone : childZones ) { if ( childZone . containsGeometryInformation ( ) ) { return true ; } } return false ; }
public void onResponse ( Call call , Response response ) { if ( response . isSuccessful ( ) ) { User . activatePremium ( ) ; } else { issueContactingServer ( ) ; } UIHelper . removeLoadSpinner ( ) ; }
public XmppConnection ( final Account account , final XmppConnectionService service ) { this . account = account ; final String tag = account . getJid ( ) . asBareJid ( ) . toString ( ) ; mXmppConnectionService = service ; }
public void onPause ( ) { cvCamera . stop ( ) ; ( ( AppCompatActivity ) getActivity ( ) ) . getSupportActionBar ( ) . show ( ) ; super . onPause ( ) ; }
public TipHolder ( View view ) { super ( view ) ; mText = view . findViewById ( R . id . text ) ; }
public int getCount ( ) { return activity . webWindows . size ( ) + 1 ; }
public void quit ( ) { pause ( ) ; playingNotification . stop ( ) ; closeAudioEffectSession ( ) ; getAudioManager ( ) . abandonAudioFocus ( audioFocusListener ) ; stopSelf ( ) ; }
public GeometryBuffer scale ( float scaleX , float scaleY ) { for ( int i = 0 ; i < pointNextPos ; i += 2 ) { points [ i ] * = scaleX ; points [ i + 1 ] * = scaleY ; } return this ; }
public boolean onPreferenceClick ( Preference preference ) { final Intent intent = new Intent ( getActivity ( ) , LogViewActivity . class ) ; startActivity ( intent ) ; return true ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( ClearCacheEvent . SCHEDULE_LESSONS ) ) { return ; } clearLocalCache ( ) ; }
public void goToFragment ( Fragment fragment , String tag ) { getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . content_frame , fragment ) . commitAllowingStateLoss ( ) ; this . invalidateOptionsMenu ( ) ; }
public static boolean isParserStateMessage ( final String response ) { return PARSER_STATE_PATTERN . matcher ( response ) . find ( ) ; }
public Throwable getError ( ) { return error ; }
public AttachmentRegionDecoder make ( ) throws IllegalAccessException , InstantiationException { return new AttachmentRegionDecoder ( ) ; }
public boolean isCharging ( ) { reloadBatteryStatusIntent ( ) ; return chargePlug == BatteryManager . BATTERY_PLUGGED_AC || chargePlug == BatteryManager . BATTERY_PLUGGED_USB || chargePlug == BatteryManager . BATTERY_PLUGGED_WIRELESS ; }
public void onClick ( View v ) { if ( listener != null ) { listener . onItemClick ( getAdapterPosition ( ) , v ) ; } }
public CubesException ( String arg0 ) { super ( arg0 ) ; className = Thread . currentThread ( ) . getStackTrace ( ) [ 2 ] . getClassName ( ) ; }
public Object getOut ( ) { return "" ; }
private boolean needsPassthroughWorkarounds ( ) { return Util . SDK_INT < 23 && ( outputEncoding == C . ENCODING_AC3 || outputEncoding == C . ENCODING_E_AC3 ) ; }
public void setNumEnemies ( short numEnemies ) { this . numEnemies = numEnemies ; }
public void highlightInMuc ( Conversation conversation , String nick ) { switchToConversation ( conversation , null , false , nick , false , false ) ; }
public void run ( ) { NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . screenshotTook ) ; checkScreenshots ( screenshotDates ) ; }
public void setCategoryScore ( int categoryScore ) { this . categoryScore = categoryScore ; }
private void postUpdateFps ( int fps ) { if ( fps < 1 ) { return ; } this . fps = fps ; toolbar . post ( updateFpsRunnable ) ; }
public Drawable tintDrawable ( @ DrawableRes final int drawableRes , @ ColorInt final int color ) { return tintDrawable ( rdrawable ( drawableRes ) , color ) ; }
public int getUsage ( ) { return usage ; }
private boolean isExpired ( ) { return ( new Date ( ) . getTime ( ) - time > CACHE_CONTACT_DURATION ) ; }
public void setColor ( @ ColorInt int color ) { this . color = color ; paint . setColor ( color ) ; outlinePaint . setColor ( ColorUtils . isColorLight ( color ) ? Color . TRANSPARENT : Color . WHITE ) ; invalidate ( ) ; }
public void setGeoeffnet ( String geoeffnet ) { this . geoeffnet = geoeffnet ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; if ( shouldUpdateButton ) { configureButtons ( ) ; shouldUpdateButton = false ; } }
public static void setUploadToTrainingPeaks ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_RUNKEEPER , false ) . apply ( ) ; }
public void addFavoriteStation ( String id ) { SQLiteDatabase db = dbHelper . getWritableDatabase ( ) ; ContentValues values = new ContentValues ( ) ; values . put ( DatabaseHelper . FAV_STATIONS_COLUMN_ID , id ) ; db . insert ( DatabaseHelper . FAV_STATIONS_TABLE_NAME , null , values ) ; }
public boolean isConnected ( ) { return connected . get ( ) ; }
public Set < DcMsg > getSelectedItems ( ) { return Collections . unmodifiableSet ( new HashSet <> ( batchSelected ) ) ; }
private void disableSearchMode ( ) { hideSoftKeyboard ( ) ; setIsInSearchModeAndSetNewAdapter ( false ) ; mRecycleView . swapAdapter ( getAdapter ( ) , true ) ; invalidateOptionsMenu ( ) ; }
public void start ( long delayMillis ) { Assertions . checkState ( currentTask == null ) ; currentTask = this ; if ( delayMillis > 0 ) { sendEmptyMessageDelayed ( MSG_START , delayMillis ) ; } else { execute ( ) ; } }
public void onReceive ( Context context , Intent intent ) { searchQuery = intent . getStringExtra ( "query" ) ; searchQuery = searchQuery . replace ( " - RT" , "" ) ; doUserSearch ( searchQuery ) ; }
public void stopAnimation ( ) { positionScroller . forceFinished ( ) ; onAnimationStopped ( ) ; }
public void onRefresh ( ) { mUserListPresenter . updateUserList ( true ) ; mPullToRefresh . setRefreshing ( false ) ; }
public void setData ( List data ) { this . data = data ; }
public boolean reload ( ) { load ( ) ; return ( ! this . data . toString ( ) . isEmpty ( ) ) ; }
public void moviesCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( mAnimation ) ; openChat ( "movies" ) ; }
public void onClick ( View v ) { holder . showPopupMenu ( mainActivity , ( ( ArtistViewHolder ) holder ) . getOverflow ( ) , ArtistAdapter . this , artist ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { rootView = inflater . inflate ( R . layout . fragment_about , container , false ) ; return rootView ; }
public void testConvertToExtended ( ) { String src = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ - . $/ + %" ; String dst = Code93Writer . convertToExtended ( src ) ; assertEquals ( src , dst ) ; }
public void onClickEdit ( View view ) { Timber . v ( "onClickEdit ( ) called with : " + "view = [ " + view + " ] " ) ; editLink ( mLink ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { EntityAttachment a1 = prev . get ( oldItemPosition ) ; EntityAttachment a2 = next . get ( newItemPosition ) ; return a1 . id . equals ( a2 . id ) ; }
public void onLoaderReset ( @ NonNull Loader < Cursor > loader ) { recipientsList . setAdapter ( null ) ; }
public String toString ( ) { return recordTitle + " : " + recordText + " ( @ " + recordTimestamp + " ) " ; }
public void stopAnim ( ) { if ( valueAnimator != null ) { clearAnimation ( ) ; valueAnimator . setRepeatCount ( 0 ) ; valueAnimator . cancel ( ) ; valueAnimator . end ( ) ; eatErPositionX = 0 ; postInvalidate ( ) ; } }
private boolean isSectionHeaderPosition ( int position ) { return mSections . get ( position ) != null ; }
public XMLPrefsElement parent ( ) { return XMLPrefsManager . XMLPrefsRoot . TOOLBAR ; }
public Call < PostResponse > setFavoriteMovie ( int movieId , boolean favorite ) { return api3 . setFavorite ( id ( ) , session ( ) , RequestBody . favorite ( RequestBody . MOVIE , movieId , favorite ) ) ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new SearchMapFragment ( ) ; case 1 : return new SearchManualFragment ( ) ; default : throw new IllegalStateException ( ) ; } }
public long getId ( ) { return id ; }
public BleBluetooth ( BleDevice bleDevice ) { this . bleDevice = bleDevice ; }
public void testSaveUser ( ) throws Exception { User user = mock ( User . class ) ; mDataManager . saveUser ( user ) ; verify ( mMockPreferences ) . setCurrentUser ( user ) ; }
public void showNoInternetConnection ( ) { mActivity . getShowMessageUtil ( ) . showOkMessage ( getString ( R . string . dialog_error_title_no_internet ) , getString ( R . string . dialog_error_message_no_internet ) ) ; mActivity . hideLoadingDialog ( ) ; }
public void onClick ( View v ) { parentFragment . onClickMemoryKeyButton ( Constants . MEM_READ ) ; }
public boolean onSetSurface ( Surface surface ) { Log . d ( TAG , "Session onSetSurface ( " + mSessionNumber + " ) " ) ; mTvheadendPlayer . setSurface ( surface ) ; return true ; }
public void setInterpolator ( @ NonNull final Interpolator interpolator ) { this . mInterpolator = interpolator ; }
public void fireLocalPhotosForUploadSelected ( ArrayList < LocalPhoto > photos ) { List < UploadIntent > intents = UploadUtils . createIntents ( getAccountId ( ) , destination , photos , Upload . IMAGE_SIZE_FULL , true ) ; uploadManager . enqueue ( intents ) ; }
public String getWebseite ( ) { return this . webseite ; }
private void sendToOpenGTS ( ) { if ( ! FileSenderFactory . getOpenGTSSender ( ) . isAvailable ( ) ) { launchPreferenceScreen ( MainPreferenceActivity . PREFERENCE_FRAGMENTS . OPENGTS ) ; } else { showFileListDialog ( FileSenderFactory . getOpenGTSSender ( ) ) ; } }
public static void main ( String args [ ] ) { PowerOff powerOff = new PowerOff ( ) ; powerOff . lock ( ) ; }
public static StyledAttributesHelper obtainStyledAttributes ( Context ctx , int [ ] attributes ) { Arrays . sort ( attributes ) ; return new StyledAttributesHelper ( ctx , ctx . obtainStyledAttributes ( attributes ) , attributes ) ; }
public static PosterViewState makeErrorState ( Filter filter ) { return new PosterViewState ( null , filter , false , true ) ; }
public ShipType getShip ( ) { return s ; }
private static boolean isExpiredException ( Throwable e ) { do { if ( e instanceof CertificateExpiredException ) return true ; e = e . getCause ( ) ; } while ( e != null ) ; return false ; }
public void setTrailers ( List < TrailerResults . Trailers > trailers ) { this . mTrailers = trailers ; }
public void setLocationProvider ( String provider ) { SharedPreferences . Editor editor = sharedPreferences . edit ( ) ; editor . putString ( SettingsService . PREF_LOCATION_PROVIDER , provider ) ; editor . apply ( ) ; }
private Bundle getConfiguredBundleWithDataUri ( @ NonNull Uri uri ) { Bundle bundle = new Bundle ( ) ; bundle . putString ( URI_FROM_EXTERNAL_APP , uri . toString ( ) ) ; return bundle ; }
public void onFailure ( int statusCode , String error_msg ) { postPaymentListener . onFailure ( statusCode , error_msg ) ; }
public void onResume ( ) { super . onResume ( ) ; Log . d ( TAG , "onResume called" ) ; }
public static int toPixels ( float dp ) { float scale = SIAApp . SIA_APP . getResources ( ) . getDisplayMetrics ( ) . density ; return ( int ) ( dp * scale ) ; }
public LiveData < WorkEntity > getObservableWork ( ) { return observableWork ; }
public void onTransactionBroadcast ( BitTransaction tx ) { lock . lock ( ) ; try { log . info ( "Transaction sent { } " , tx ) ; addNewTransactionIfNeeded ( tx ) ; } finally { lock . unlock ( ) ; } queueOnTransactionBroadcastSuccess ( tx ) ; }
public JoystickView ( Context context ) { this ( context , null ) ; }
public void afterTextChanged ( Editable s ) { if ( composeText . getTextTrimmed ( ) . length ( ) == 0 || beforeLength == 0 ) { composeText . postDelayed ( ConversationActivity . this : : updateToggleButtonState , 50 ) ; } }
public String toXML ( ) { StringBuilder strOut = new StringBuilder ( ) ; for ( OCSDrive o : drives ) { strOut . append ( o . toXml ( ) ) ; } return strOut . toString ( ) ; }
public void hideResultView ( ) { showSearchView ( true ) ; animateViews ( false ) ; }
public User getItem ( int position ) { return mFilteredUsers . get ( position ) ; }
public String getSerializedHighlights ( ) { return userDataDBHelper . getSerializedHighlights ( pageId ) ; }
public void read ( ) { readField ( "op_count" ) ; op = new Operand [ op_count ] ; if ( op_count != 0 ) readField ( "op" ) ; } */
public void onRequestFailure ( SpiceException e ) { }
public void setPhoto ( Uri uri ) { currentPhotoUri = uri ; photoPanelLayout . setVisibility ( View . VISIBLE ) ; Glide . with ( this ) . load ( uri ) . into ( photoImageView ) ; invalidateOptionsMenu ( ) ; }
public void search ( List < String > term , OnSearchResultsAvailable onSearchResultsAvailable ) { MessageSearchTask . search ( this , term , onSearchResultsAvailable ) ; }
public void onResponse ( @ Nullable Item response ) { if ( mItemFragment . get ( ) != null && mItemFragment . get ( ) . isAttached ( ) ) { mItemFragment . get ( ) . onItemLoaded ( response ) ; } }
public HexView ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public FieldsPart ( List < ? extends Field > fields ) { this . fields = fields ; }
public void onClick ( DialogInterface dialog , int which ) { conn . invite ( buffer . getCid ( ) , buffer . getName ( ) , input . getText ( ) . toString ( ) , null ) ; dialog . dismiss ( ) ; }
private void checkConversionCanceled ( ) { boolean cancelConversion ; synchronized ( videoConvertSync ) { cancelConversion = cancelCurrentVideoConversion ; } if ( cancelConversion ) { throw new RuntimeException ( "canceled conversion" ) ; } }
public Maybe < Event > create ( @ NonNull Event entity ) { return crudHelper . create ( entity ) ; }
public void onSuccess ( Object data ) { Log . d ( TAG , String . format ( "Pairing success . %s" , data . toString ( ) ) ) ; publishDevice ( getDevice ( ) ) ; callback . onSuccess ( data ) ; }
private void verifyDataStoreMockInteractions ( Event newEvent ) { verify ( dataStore , Mockito . times ( 1 ) ) . create ( newEvent ) ; verifyNoMoreInteractions ( dataStore ) ; }
public void onClick ( View view ) { mItemsHolder . removeView ( mItemsHolder . findViewById ( id ) ) ; }
private static String urlDecode ( String str ) { try { return URLDecoder . decode ( str , UTF8 ) ; } catch ( UnsupportedEncodingException ex ) { return str ; } }
public boolean onItemLongClick ( int position ) { adapter . toggle ( position ) ; return true ; }
public void onBindViewHolder ( InquiryViewHolder inquiryViewHolder , int i ) { final Stocktake model = mFilteredList . get ( i ) ; inquiryViewHolder . bind ( model , indent ) ; }
private double sqfootTosqfoot ( double num ) { return num * 1d ; }
public void onProviderEnabled ( String provider ) { LOG . info ( "Provider enabled : " + provider ) ; loggingService . restartGpsManagers ( ) ; }
public void onNext ( GenericResponse genericResponse ) { getMvpView ( ) . showProgressbar ( false ) ; getMvpView ( ) . showDocumentUpdatedSuccessfully ( ) ; }
private void loadWebView ( String data , @ NonNull WebView webView ) { webView . loadDataWithBaseURL ( ANDROID_ASSET , data , "text/html" , "utf - 8" , null ) ; }
public String getSub ( Context context ) { return comment ; }
public boolean isItemChanged ( ) { return mViewHolder . isUpdated ( ) ; }
public String getDonationAddress ( int donationCode ) { DonateFeatureEntity donateFeature = realm . where ( DonateFeatureEntity . class ) . equalTo ( DonateFeatureEntity . FEATURE_CODE , donationCode ) . findFirst ( ) ; return donateFeature == null ? null : donateFeature . getDonationAddress ( ) ; }
public Result getLastError ( ) { return lastError ; }
public void setIsAttendee ( Boolean isAttendee ) { this . isAttendee = isAttendee ; }
public int update ( @ NonNull Uri uri , ContentValues values , String selection , String [ ] selectionArgs ) { throw new UnsupportedOperationException ( "Not yet implemented" ) ; }
public < T1 > T1 [ ] toArray ( @ NonNull T1 [ ] a ) { return values . toArray ( a ) ; }
public Integer getAwardPoints ( ) { return awardPoints ; }
public DatabaseReference getDatabaseReference ( ) { if ( mDatabase == null ) { if ( mFirebaseDatabase == null ) { mFirebaseDatabase = FirebaseDatabase . getInstance ( ) ; } mDatabase = mFirebaseDatabase . getReference ( ) ; } return mDatabase ; }
public void setReminderColor ( int value ) { putInt ( REMINDER_COLOR , value ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . layout_payment_all_item , parent , false ) ; return new ViewHolder ( view ) ; }
public void onClick ( DialogInterface dialog , int id ) { ( ( DownloadListener ) getActivity ( ) ) . onDownload ( file ) ; }
public Loader < List < Post >> onCreateLoader ( int id , Bundle args ) { return new PostsLoader ( getActivity ( ) , rssAllowed ) ; }
public void onError ( String msg , Throwable th ) { Timber . e ( th , msg ) ; }
public String getUrlIntra ( ) { if ( login != null ) return getString ( R . string . base_url_intra_profile ) + "users/" + login ; return null ; }
public static boolean shouldSaveOpeningBalances ( boolean defaultValue ) { SharedPreferences sharedPrefs = PreferenceActivity . getActiveBookSharedPreferences ( ) ; return sharedPrefs . getBoolean ( context . getString ( R . string . key_save_opening_balances ) , defaultValue ) ; }
public AccountType getAccountType ( long accountId ) { return getAccountType ( getUID ( accountId ) ) ; }
public void open ( ) { listener . onBoxOpened ( this ) ; }
private void deleteRemote ( ) { Services . tracks . deleteTrack ( this , track ) ; }
public ComicAdapter ( List < Comic > comicList , InteractionListener listener ) { mComicList = new ArrayList <> ( ) ; mListInteractionListener = listener ; addItems ( comicList ) ; }
public void showBriefMessage ( @ NonNull String message ) { BriefMessage . INSTANCE . showLong ( getActivity ( ) . findViewById ( R . id . rootLayout ) , message ) ; }
public void onCreate ( ) { super . onCreate ( ) ; component = DaggerAppComponent . builder ( ) . appModule ( new AppModule ( ) ) . build ( ) ; TraceDroid . init ( this ) ; }
public boolean onClose ( ) { mSearchIsExpanded = false ; mSearchQuery = null ; setSearchVisibility ( false ) ; return false ; }
public Thread newThread ( Runnable r ) { Thread t = new Thread ( threadGroup , r ) ; t . setName ( "Executor - " + threads ++ ) ; t . setDaemon ( true ) ; return t ; }
public void onBindViewHolder ( ContactEditViewHolder holder , int position ) { holder . bind ( position , contacts . get ( position ) , eventListener ) ; }
public void setEmojiClickListener ( @ NonNull EmojiconGridView . OnEmojiconClickedListener listener ) { this . emojiClickListener = listener ; }
public Perk getPerk ( String perkId ) { return null ; }
public void setState ( NodeState state ) { mState = state ; setUpdateInterval ( state . getUpdateInterval ( ) ) ; Game . getInstance ( ) . checkGameOver ( ) ; AIAwareness . update ( ) ; }
public void onError ( ) { if ( MyDebug . LOG ) Log . e ( TAG , "error from takePicture" ) ; count_cameraTakePicture -- ; applicationInterface . onPhotoError ( ) ; phase = PHASE_NORMAL ; startCameraPreview ( ) ; applicationInterface . cameraInOperation ( false , false ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_launch_pad_flight_controller , menu ) ; return true ; }
public static SqlTriggerBuilder insertInto ( final String tablename ) { final StringBuilder sql = new StringBuilder ( "INSERT INTO " + tablename ) ; return new SqlTriggerBuilder ( sql ) ; }
public void move ( Node node , Edge edge ) { setState ( new MovingState ( this , node , getPlayer ( ) , edge , 0 ) ) ; }
public ArrayAdapter_Visited ( Context context , List < DB_Visited_ArrayAdapter > list ) { super ( context , R . layout . listitem_visited , list ) ; this . context = context ; this . filteredData = list ; this . originalData = list ; }
private void changeLedPrefs ( ) { boolean isChecked = binding . ledPrefs . isChecked ( ) ; binding . ledPrefs . setChecked ( ! isChecked ) ; getPrefs ( ) . setBirthdayLedEnabled ( ! isChecked ) ; }
public boolean isInBoundsRight ( float x ) { x = ( float ) ( ( int ) ( x * 100 . f ) ) / 100 . f ; return mContentRect . right >= x - 1 ; }
public void popAllFragments ( ) { getSupportFragmentManager ( ) . popBackStack ( null , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public CommunitiesInteractor ( INetworker networker , IStorages repositories ) { this . networker = networker ; this . stores = repositories ; }
public String getSerialNumber ( ) { return serialNumber ; }
private void setPlayer ( ) { mediaPlayer = MediaPlayer . create ( this , R . raw . red_e ) ; mediaPlayer . setLooping ( false ) ; init ( ) ; }
public void uiDeviceConnected ( BluetoothGatt gatt , BluetoothDevice device ) { super . uiDeviceConnected ( gatt , device ) ; }
public void onClick ( View v ) { mCallback . newPlaylistListener ( ) ; }
private void notifyStatus ( final String receiverId ) { final Intent notifyIntent = new Intent ( this , NotifyService . class ) ; notifyIntent . putExtra ( MessageItemKeys . OTHER_USER_ID , receiverId ) ; startService ( notifyIntent ) ; }
public TextButton ( Context pContext ) { super ( pContext ) ; }
public void onFinishInput ( ) { super . onFinishInput ( ) ; mComposing . setLength ( 0 ) ; updateCandidates ( ) ; setCandidatesViewShown ( false ) ; mCurKeyboard = mStandardKeyboard ; if ( mInputView != null ) { mInputView . closing ( ) ; } }
public boolean movePlaneUpwards ( ) { return m_PlayerBoard . movePlaneUpwards ( ) ; }
public int getCount ( ) { return 7 ; }
public Object getCurrentManifest ( ) { verifyApplicationThread ( ) ; return player . getCurrentManifest ( ) ; }
public boolean isFestivalYear ( final int year ) { return year % 3 == 0 && year % 51 != 0 ; }
public void onClearPressed ( View v ) { LogUtil . INSTANCE . d ( TAG , "Clearing calculator" ) ; calc . clear ( ) ; updateUI ( ) ; }
public SettingGroup ( ) { children = new ArrayList < String > ( ) ; childGroups = new LinkedHashMap < String , SettingGroup > ( ) ; }
public LiveData < List < PinnableCalendarEvent >> getEventsBeforeDate ( @ NonNull DataSource dataSource , @ NonNull Instant lastDate ) { return calendarDao . getEventsBeforeDate ( singletonList ( dataSource ) , lastDate ) ; }
public InitialCommentMarker createFromParcel ( Parcel in , ClassLoader loader ) { return createFromParcel ( in ) ; }
public RunsListWithMapFragment ( ) { mLatestRunsFragment = new LatestRunsFragment ( ) ; mMapFragment = new RunsMapFragment ( ) ; }
public void testGetMainPlateForNoPlates ( ) throws Exception { Place malbork = new Place ( "Malbork" , PlaceType . TOWN , null , null , null , new ArrayList <> ( ) ) ; LicensePlateDto plate = malbork . getMainPlate ( ) ; assertNull ( plate ) ; }
public void onAnimationStart ( Animator animation ) { transitionAnimationStartTime = System . currentTimeMillis ( ) ; }
public void setVectorCoord ( double x1 , double x2 , double y1 , double y2 ) { this . x = x2 - x1 ; this . y = y2 - y1 ; setAbsValue ( ) ; setNorm ( ) ; }
public static void setSpeed ( int value , Context context ) { run ( Control . write ( String . valueOf ( value ) , SPEED ) , SPEED , context ) ; }
public int getChildGoal ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException { if ( this . isDemoMode ) { return DEMO_CHILD_GOAL ; } return getPersonGoal ( Person . ROLE_CHILD , runningChallenge ) ; }
public void addToFavourite ( @ NonNull BookCollectionInfo bookCollectionInfo , @ NonNull BooksCollection booksCollection ) { addToCollection ( bookCollectionInfo , booksCollection ) ; if ( bookCollectionsControllerCallback != null ) { bookCollectionsControllerCallback . notifyBookCollectionCahnged ( booksCollection ) ; } }
public IdleConnectionHandler ( MessageCenterService service , int refCount , Looper looper ) { super ( looper ) ; s = new WeakReference <> ( service ) ; mRefCount = refCount ; Looper . myQueue ( ) . addIdleHandler ( this ) ; }
private byte [ ] bitmapToByteArray ( Bitmap image ) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; image . compress ( Bitmap . CompressFormat . PNG , 0 , byteArrayOutputStream ) ; return byteArrayOutputStream . toByteArray ( ) ; }
public ApplicationWritePermissionsRequirementsProvider ( Context context ) { this ( new LibraryStorageWritePermissionsRequirementsProvider ( ) , new ExternalStorageWritePermissionsArbitratorForOs ( context ) ) ; }
public int getItemViewType ( int position ) { return getItem ( position ) . getCardType ( ) ; }
public View getViewAt ( int position ) { RecyclerView . ViewHolder holder = list . findViewHolderForLayoutPosition ( position ) ; return holder == null ? null : RecyclerAdapter . getImageView ( holder ) ; }
public void onRefresh ( ) { thread . run ( RA , ( ) -> { log . v ( TAG , "refreshing" ) ; load ( COMMON , true ) ; } ) ; }
public void onNothingSelected ( AdapterView < ? > parent ) { createDinnerBarChart ( WHOLE_HISTORY_CLAUSE ) ; }
public OstPrimaryEditTextView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; defineUi ( context , attrs , 0 ) ; }
public void forceUpdate ( ) { try { onRefreshed ( getWallet ( ) , true ) ; } catch ( IllegalStateException ex ) { Timber . e ( ex . getLocalizedMessage ( ) ) ; } }
public void setImageResource ( int resId ) { super . setImageResource ( resId ) ; handleImageChange ( ) ; }
public void onStartListening ( ) { getSubscribersCount ( ) ; }
private AssetsUtil ( ) { }
public AppInfo get ( int position ) { if ( size ( ) > 0 && ( position + 1 > size ( ) ) ) { return super . get ( 0 ) ; } return super . get ( position ) ; }
public static void d ( String tag , String msg , Throwable tr ) { if ( BuildConfig . DEBUG ) { android . util . Log . d ( tag , msg , tr ) ; } }
public void attachView ( SearchMvpView mvpView ) { super . attachView ( mvpView ) ; }
public String getMessageResponse ( ) { return messageResponse ; }
private static void UpdateDiscussion ( Discussion old_discussion , Discussion new_discussion ) { old_discussion = new_discussion ; old_discussion . save ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; editTopic ( c ) ; }
public void setReadingRelation ( List < String > readingRelation ) { this . readingRelation = readingRelation ; }
public IMatchAlliancesContainer getAlliances ( ) { return alliances ; }
public Number getYVal ( float yPix ) { return getGraph ( ) . screenToSeriesY ( yPix ) ; }
public void onReceive ( Context inContext , Intent inIntent ) { Log . d ( DbgU . getAppTag ( ) , "onReceive ( Context inContext , Intent inIntent ) " ) ; NotificationServiceC . setServiceNotificationAll ( inContext ) ; }
public static void enqueueAnimator ( Animator animator ) { sAnimSync . addWaitingAnimation ( animator ) ; }
private void setResText ( View v , int id , CharSequence text ) { TextView tx = ( TextView ) v . findViewById ( id ) ; if ( tx != null ) { tx . setText ( text ) ; } }
public String getString ( final String key , final String def ) { return mPreferences . getString ( key , def ) ; }
private void showProgress ( ) { RelativeLayout relativeLayout = findViewById ( R . id . removing_downloads_frame ) ; relativeLayout . setVisibility ( View . VISIBLE ) ; }
public CodecDocument openDocument ( final String fileName , final String password ) { return new MuPdfDocument ( this , MuPdfDocument . FORMAT_EPUB , fileName , password ) ; }
public static String formatUSDCurrency ( Context ctx , Double balance ) { Locale current = ctx . getResources ( ) . getConfiguration ( ) . locale ; return String . format ( current , PrecisionEnum . TWO_DIGIT . getFormat ( ) , ( balance / 1000000000F ) ) ; }
public DrawerBuilder withToolbar ( @ NonNull Toolbar toolbar ) { this . mToolbar = toolbar ; return this ; }
public boolean haveSuraAyah ( int sura , int ayah ) { return AudioUtils . haveSuraAyahForQari ( localDirectoryPath , sura , ayah ) ; }
public com . google . protobuf . Parser < TransactionOutput > getParserForType ( ) { return PARSER ; }
public void setMessages ( Message [ ] messages ) { this . messages = messages ; }
public void setNightTime ( String value ) { putString ( TIME_NIGHT , value ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . tool_increase_indent ) ; }
public void setId ( @ NonNull String id ) { this . id = id ; }
public View getView ( Activity activity ) { return activity . findViewById ( com . turtleplayerv2 . R . id . bowmenu_left ) ; }
public Long id ( String name , boolean create ) { return id ( name , create , defaultDeck ) ; }
public void updateState ( int newBitState , boolean newSignState ) { currentNumber . updateState ( newBitState , newSignState ) ; operationSelected = Pr0Operation . NONE ; currentNumber . clearValues ( ) ; previousNumber . clearValues ( ) ; }
public void init ( MainActivity activity , OWDevice mOWDevice ) { Timber . d ( "init" ) ; this . mainActivity = activity ; this . owDevice = mOWDevice ; }
public void initMultiSelect ( ) { this . isMultiSelect = true ; fetchEntities ( ) ; }
public String getFingerprint ( ) { return PGP . getFingerprint ( mPair . authKey . getPublicKey ( ) ) ; }
public boolean onCheckIsTextEditor ( ) { return false ; }
public void run ( ) { dropInFull ( finalView ) ; }
public void deletePersonDebt ( @ NonNull PersonDebt personDebt ) { checkNotNull ( personDebt ) ; mDebtsLocalDataSource . deletePersonDebt ( personDebt ) ; deletePersonDebtFromCache ( personDebt ) ; notifyContentObserver ( personDebt . getDebt ( ) . getDebtType ( ) ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( user_id ) ; action . serializeToStream ( stream ) ; }
public RecServiceAdapter ( K6neleListFragment context , List < RecService > list ) { super ( context . getActivity ( ) , R . layout . list_item_recservice , list ) ; this . context = context . getActivity ( ) ; this . list = list ; }
public String getBlogImageUrl ( ) { return StringUtils . notNullStr ( mBlogImageUrl ) ; }
public String getCurrentJewelName ( ) { return levels [ currentLevel ] . getJewelClass ( ) . getSimpleName ( ) ; }
public EventViewHolder ( View itemView ) { super ( itemView ) ; event_cardView = itemView . findViewById ( R . id . schedule_item_cardview ) ; event_cardText = itemView . findViewById ( R . id . event_card_text ) ; }
public CustomFileObserver ( String path , Handler handler ) { super ( path , MASK ) ; this . path = path ; this . handler = handler ; }
public @ NonNull List < String > getModerationKeys ( ) { if ( mSettings . holdForModeration == null ) { mSettings . holdForModeration = new ArrayList <> ( ) ; } return mSettings . holdForModeration ; }
public BigDecimal getCapitalCourant ( ) { return capitalCourant ; }
public void failure ( RetrofitError error ) { Log . d ( "SponsorsFragment" , error . getMessage ( ) ) ; showEmptyView ( ) ; }
public void reDraw ( ) { scaleMarkerBitmaps ( ) ; invalidate ( ) ; }
private void changeSilentPrefs ( ) { boolean isChecked = binding . soundOptionPrefs . isChecked ( ) ; binding . soundOptionPrefs . setChecked ( ! isChecked ) ; getPrefs ( ) . setBirthdaySilentEnabled ( ! isChecked ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { View view = inflater . inflate ( R . layout . fragment_main_rgb_tab_details , container , false ) ; unbinder = ButterKnife . bind ( this , view ) ; return view ; }
public void setCustomFont ( String family , int style ) { Typeface typeface = fontManager . get ( family , style ) ; textView . setTypeface ( typeface ) ; }
public void reinstateLesson ( ) { reQuery ( ) ; notifyItemInserted ( mLastDeletedPosition ) ; notifyChangedLessonRange ( mLastDeletedPosition + NUMBER_OF_INFO_VIEWS ) ; }
public Observable < Station > getCurrentStationObs ( ) { return stationsRepository . getCurrentStationObs ( ) ; }
public XMLPrefsList getValues ( ) { return values ; }
public void encode ( final Context context , final Object id , final String html ) { findOrCreateInfo ( id ) . encode ( context , html ) ; }
private void onReset ( ) { lastLost = 0 ; onReload ( true , "reset" ) ; }
public ProtocolTracker getProtocolTracker ( ) { return protocolTracker . get ( ) ; }
public String getMenuTitle ( ) { return context . getResources ( ) . getString ( R . string . tool_find_replace ) ; }
public void onCancel ( @ NonNull DialogInterface dialog ) { super . onCancel ( dialog ) ; if ( mOnCancelListener != null ) { mOnCancelListener . onCancel ( dialog ) ; } }
public List < Song > getSavedOriginalPlayingQueue ( ) { return getQueue ( ORIGINAL_PLAYING_QUEUE_TABLE_NAME ) ; }
public Group getItem ( int i ) { return this . groups . get ( i ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setStyle ( DialogFragment . STYLE_NO_TITLE , 0 ) ; }
private static void initSchema ( ) { mSchemaList = get_schema_list ( ) ; String schema_id = getSchemaId ( ) ; mSchema = new RimeSchema ( schema_id ) ; getStatus ( ) ; }
public void onLoadMore ( int page , int totalItemsCount ) { eventsPage = page ; loaderManager . restartLoader ( EVENTS_LOADER , null , cursorEventsAdapterLoader ) ; }
public @ NonNull static String getLoginFail ( ) { return ResWrapper . getString ( R . string . error_loginFail ) ; }
private static String extractType ( @ NonNull Document doc ) { return SHelper . innerTrim ( doc . select ( "head meta [ property = og : type ] " ) . attr ( "content" ) ) ; }
public void onReleased ( boolean inside ) { pressed = ! pressed ; if ( getClick ( ) . isSticky ( ) ) on = ! on ; }
public SongAdapter ( AppCompatActivity activity , List < Song > dataSet , @ LayoutRes int itemLayoutRes , boolean usePalette , @ Nullable CabHolder cabHolder ) { this ( activity , dataSet , itemLayoutRes , usePalette , cabHolder , true ) ; }
public SmoothWorld ( ) { this ( randomSeed . nextLong ( ) ) ; }
public void testEncodingStrikeThrough ( ) { long encoded = TextStyle . encode ( TextStyle . COLOR_INDEX_FOREGROUND , TextStyle . COLOR_INDEX_BACKGROUND , TextStyle . CHARACTER_ATTRIBUTE_STRIKETHROUGH ) ; assertTrue ( ( TextStyle . decodeEffect ( encoded ) & TextStyle . CHARACTER_ATTRIBUTE_STRIKETHROUGH ) != 0 ) ; }
private void initT ( View view ) { TableRow masterRow = view . findViewById ( R . id . masterRow ) ; TABLE_PARAMS = masterRow . getLayoutParams ( ) ; }
public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( itemList ) ; }
public void goToLoginFragment ( ) { getFragmentManager ( ) . popBackStack ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { dialog . dismiss ( ) ; JobImporterActivity . this . doImportJob ( ) ; }
public boolean onFragmentCreate ( ) { chat_id = getArguments ( ) . getInt ( "chat_id" ) ; NotificationCenter . getGlobalInstance ( ) . addObserver ( this , NotificationCenter . emojiDidLoaded ) ; return super . onFragmentCreate ( ) ; }
private boolean getBoolPref ( int id ) { return getBoolPref ( id , false ) ; }
public void onResume ( ) { super . onResume ( ) ; mPresenter . start ( ) ; showHideEmptyMessage ( ) ; MessagingServiceUtil . setMessagingServiceListener ( "Profile" , this ) ; }
public void intentViewStream ( View view ) { Intent i = new Intent ( MainMenuActivity . this , ConnectToStreamActivity . class ) ; startActivity ( i ) ; }
private int getPlaylistId ( ) { return mPlaylists . get ( getSelectedPlaylistPosition ( ) ) . getId ( ) ; }
public com . openwallet . core . protos . Protos . Transaction . Pool getPool ( ) { return pool_ ; }
public void onCheckedChanged ( CompoundButton compoundButton , boolean checked ) { prefs . edit ( ) . putBoolean ( "discard_delete" , checked ) . apply ( ) ; }
public ProviderSettingsTester < T > pickOption ( String option ) { openInput ( ) ; onView ( allOf ( withId ( R . id . settingsPickingDialogOption ) , withText ( option ) ) ) . perform ( click ( ) ) ; return ProviderSettingsTester . this ; }
public int compare ( Subreddit c1 , Subreddit c2 ) { return c1 . getMembers ( ) . intValue ( ) - c2 . getMembers ( ) . intValue ( ) ; }
public void update ( ) { checkInit ( ) ; updateEngine ( enginePtr ) ; }
private void renameCategory ( Category category , String newName ) { RenameCategory task = new RenameCategory ( this , category , newName , this ) ; task . execute ( ) ; }
public void run ( ) { imagePreviewAdapter . add ( faceCroped ) ; btUserPhoto = ImageUtils . getBytes ( faceCroped ) ; isImageCapture = true ; }
public Ingredient removeExtraIngredientType ( ) { Ingredient extra = extraIngredient ; extraIngredient = null ; return extra ; }
public String onGetSummary ( Context context , String value ) { return null ; }
public static DataBundle getRemovedNotification ( String uuid ) { return removedNotifications . get ( uuid ) ; }
public void clearUserWord ( ) { _userCache . clear ( ) ; _usersMap . clear ( ) ; }
public ReadLog ( long date , String strDate , ArraySet < Integer > pages ) { this . date = date ; this . strDate = strDate ; this . pages = pages ; }
private void changeRemindersPrefs ( ) { boolean isChecked = binding . reminderInCalendarPrefs . isChecked ( ) ; binding . reminderInCalendarPrefs . setChecked ( ! isChecked ) ; getPrefs ( ) . setRemindersInCalendarEnabled ( ! isChecked ) ; }
public SnappyRecyclerView ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; ctx = context ; }
public String loadNoteDate ( String filename ) { Date lastModified = new Date ( Long . parseLong ( filename ) ) ; return ( DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . SHORT ) . format ( lastModified ) ) ; }
public void onComplete ( @ NonNull Task < Void > task ) { if ( ! task . isSuccessful ( ) ) { callback . onDataUnavailable ( ) ; return ; } callback . onSuccess ( post ) ; }
public File getBackupFile ( ) { return new File ( getFilesDir ( ) , "dailydozen_backup . json" ) ; }
public void editStyle ( RPSParty game ) { skin . add ( "Rock" , game . getAssetManager ( ) . get ( "Rock . png" ) ) ; style = new Button . ButtonStyle ( ) ; style . up = skin . getDrawable ( "Rock" ) ; }
public void fromIsHigherThanTo ( ) { IntegerRange . getValues ( null , "30 - 20" ) ; }
public void setNetworkCountry ( String networkCountry ) { this . networkCountry = networkCountry ; }
public void onBackPressed ( ) { if ( ! bottomNavigationManager . onBackPressed ( ) ) { finish ( ) ; } }
public void loadTable ( final Runnable . . . preLoadTasks ) { task = new LoadTableTask ( this , preLoadTasks ) ; task . execute ( ) ; }
public void notifyTabViewChanged ( int position ) { Log . d ( TAG , "Notify Tab Changed : " + position ) ; mTabsView . tabChanged ( position ) ; }
public void setPenaltyChargesWrittenOff ( Double penaltyChargesWrittenOff ) { this . penaltyChargesWrittenOff = penaltyChargesWrittenOff ; }
public BoxDataEntity getEntityClass ( ) { return entityClass ; }
public DrawerBuilder withRecyclerView ( @ NonNull RecyclerView recyclerView ) { this . mRecyclerView = recyclerView ; return this ; }
public void setNumberPicker ( NumberPicker picker ) { mNumberPicker = picker ; }
public void onFailure ( Call call , IOException e ) { throw new APIException ( "Failed to fetch stock" ) ; }
public I create ( Cursor queryResult ) { if ( queryResult . moveToFirst ( ) ) { return creator . create ( queryResult ) ; } else { return null ; } }
public static DatabaseHelper dataManager ( ) { return get ( ) . getDataManager ( ) ; }
public TypefaceSpan ( Typeface tf ) { typeface = tf ; }
public FollowerEntity ( int id , String display_name , String logo , String created_at , boolean notifications , long last_updated ) { super ( id , display_name , logo , created_at , notifications , last_updated ) ; }
public ReusableViewHolder ( View view ) { ButterKnife . bind ( this , view ) ; }
public PersonaFusionListAdapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . view_personafusion , parent , false ) ; return new ViewHolder ( view ) ; }
public boolean onMenuItemClick ( MenuItem menuItem ) { if ( menuItem . getItemId ( ) == R . id . profile_settings ) { startActivity ( new Intent ( getApplicationContext ( ) , SettingsActivity . class ) ) ; } return false ; }
private void playStopwatch ( ) { if ( prefsSmartStopwatch && TimeManager . INSTANCE . isRunning ( ) && ! stopwatchHelper . isRunning ( ) ) { stopwatchHelper . start ( ) ; } }
public UsersLTE getItem ( int position ) { return users . get ( position ) ; }
public void handleSwipeRight ( ) { NavHostFragment . findNavController ( this ) . navigate ( R . id . action_nav_home_to_nav_camera ) ; }
public DataListPreference ( @ NonNull Context context ) { super ( context ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_add_account , menu ) ; return true ; }
public void addItemList ( final List < Workshop > itemList ) { realm . executeTransaction ( new Realm . Transaction ( ) { @ Override public void execute ( Realm realm ) { realm . copyToRealmOrUpdate ( itemList ) ; } } ) ; }
public void copyPr0Number ( IPr0Number originalPr0Number ) { this . binString = originalPr0Number . getBinValue ( ) ; this . octString = originalPr0Number . getOctValue ( ) ; this . decString = originalPr0Number . getDecValue ( ) ; this . hexString = originalPr0Number . getHexValue ( ) ; }
public void setDropzoneId ( Integer dropzone_id ) { this . dropzone_id = dropzone_id ; }
public void update ( API . Callback cb ) { api . updatePlant ( plant , id , cb ) ; }
public String getReleaseDate ( ) { return releaseDate ; }
public void run ( ) { if ( messageEditText != null ) { try { messageEditText . requestFocus ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } } }
public Order < ? super PROJECTION > getOrder ( ) { return order ; }
public void showRefreshing ( boolean refreshing ) { mSwipeRefreshLayout . setRefreshing ( refreshing ) ; }
public void onResume ( ) { super . onResume ( ) ; showFabWithConditions ( ) ; }
public int getChange_index ( ) { return this . change_index ; }
public void setMenu ( Menu menu ) { setActor ( menu ) ; mMenu = menu ; mMenu . addListener ( mListener ) ; }
public void setMaxY ( Number maxY ) { yRegion . setMax ( maxY ) ; }
public String title ( ) { return parameter ( PARAM_CATEGORY , "" ) ; }
public Single < List < Session >> getSessions ( @ NonNull Locale locale ) { if ( locale == Locale . JAPANESE ) { return droidKaigiService . getSessionsJa ( ) ; } else { return droidKaigiService . getSessionsEn ( ) ; } }
public void onAsyncOperationStarted ( Void params ) { mShowProgress . setValue ( true ) ; }
public Volumes setMicrophoneStatus ( final MicrophoneStatus microphoneStatus ) { return new Volumes ( mPlayGain , mMicGain , microphoneStatus , mEchoLimiter ) ; }
public void onChildRemoved ( DataSnapshot dataSnapshot ) { feedAdapter . removeItem ( dataSnapshot ) ; }
public void updateProState ( ) { if ( adView != null ) adView . setVisibility ( IABService . inst ( ) . getPurchaseCachedSimple ( IABService . IAB_PRO_MODE ) ? View . GONE : View . VISIBLE ) ; }
public long getCurrentStreamPosition ( ) { if ( ! isConnected ( ) ) { return mCurrentPosition ; } return ( int ) mRemoteMediaClient . getApproximateStreamPosition ( ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; initViewModel ( ) ; setupListeners ( ) ; initAnimations ( mBinding . playPauseButton . getTranslationX ( ) ) ; }
public HistoryScanHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . history_list_item , parent , false ) ; return new HistoryScanHolder ( v , productUrl , mActivity ) ; }
public void bindTo ( MovieEntity movie ) { Picasso . get ( ) . load ( movie . getPosterPath ( ) ) . placeholder ( R . drawable . ic_placeholder ) . into ( binding . image ) ; }
public synchronized void goBack ( ) { if ( mWebView != null ) { mBackOrForward = 1 ; mWebView . goBack ( ) ; } }
public AccountHeaderBuilder withThreeSmallProfileImages ( boolean threeSmallProfileImages ) { this . mThreeSmallProfileImages = threeSmallProfileImages ; return this ; }
public boolean accept ( File dir , String name ) { return ( new FileTypeModel ( getExtensionFromPath ( name ) ) ) . equals ( FileTypeModelENUM . IMAGE . type ) ; }
public static Intent getStartActivityIntent ( Context context , ChameleonMiniRevGDevice device ) { Intent intent = new Intent ( context , ChameleonMiniRevGActivity . class ) ; intent . putExtra ( EXTRA_DEVICE , device . getId ( ) ) ; return intent ; }
public static boolean checkDownloadDirExist ( byte mode ) { String downloadDirPath = getDownloadDir ( mode ) ; File downloadDir = new File ( downloadDirPath ) ; return downloadDir . exists ( ) || downloadDir . mkdirs ( ) ; }
public void onClick ( View v ) { final Uri packageUri = Uri . parse ( "package : io . nxt3 . ioclassic" ) ; final Intent uninstallIntent = new Intent ( Intent . ACTION_UNINSTALL_PACKAGE , packageUri ) ; startActivity ( uninstallIntent ) ; }
public long getItemId ( int position ) { return highlightList . get ( position ) . id ; }
private String validateDuration ( String duration ) { if ( duration . equals ( "" ) ) { return "Fill in duration" ; } else { return null ; } }
public void onSearchResultClicked ( int parentAdapterPosition , int childAdapterPosition ) { mListener . onSearchResultClicked ( bookSearchResultsContainerList . get ( parentAdapterPosition ) , childAdapterPosition , searchRequest ) ; }
public String getDisplayName ( File file ) { String name = MbtilesFile . readName ( file ) ; return name != null ? name : file . getName ( ) ; }
public void onClick ( View v ) { if ( v . getId ( ) == R . id . bt_previous_page ) { gotoPreviousPage ( ) ; } else { gotoNextPage ( ) ; } }
public @ Nullable SlideDeck getSlideDeck ( ) { return slideDeck ; }
private void setAdapter ( JSONArray languages ) { LanguageAdapter languageAdapter = new LanguageAdapter ( accessToken , this , filterLanguages ( languages ) , sharedPreferences , getOnClickCallback ( ) ) ; recyclerView . setAdapter ( languageAdapter ) ; }
private String getName ( PublicizeConnection connection ) { String name = connection . getExternalName ( ) ; if ( name . isEmpty ( ) ) { name = connection . getExternalDisplayName ( ) ; } return name ; }
public void onServiceFinishes ( ) { finish ( ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( ApplicationPreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . text_secure_normal__menu_settings ) ; setCategorySummaries ( ) ; setCategoryVisibility ( ) ; }
private void updateCategories ( List < CategoryInfo > categories ) { if ( getSelected ( categories ) == 0 ) return ; PreferenceUtil . getInstance ( getContext ( ) ) . setLibraryCategoryInfos ( categories ) ; }
public boolean hasEncryptionParameters ( ) { return ( ( bitField0_ & 0x00000020 ) == 0x00000020 ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mDataSource . removeListener ( this ) ; mWaypointActionListener = null ; mTrackActionListener = null ; mRouteActionListener = null ; mFragmentHolder . disableListActionButton ( ) ; mFragmentHolder = null ; mDataHolder = null ; }
public int getId ( ) { return this . id ; }
public @ NonNull @ Identity String getIdentity ( ) { return identity ; }
public void onCancel ( final DialogInterface dialog ) { activity . cancelActiveTranslation ( ) ; Toast . makeText ( activity , R . string . msg_translation_cancelled , Toast . LENGTH_SHORT ) . show ( ) ; }
public void start ( ) { startTimestamp = System . nanoTime ( ) ; }
private NotificationCompat . Builder createBuilder ( String channelId ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . O ) { return new NotificationCompat . Builder ( mService , channelId ) ; } else { return new NotificationCompat . Builder ( mService ) ; } }
public void onAnimationRepeat ( final Animation animation ) { }
public void scrollToPosition ( int position ) { if ( position < 0 || position >= getItemCount ( ) ) { return ; } scrollRequestedPosition = position ; requestLayout ( ) ; }
public static int getFrontColor ( Activity a ) { SharedPreferences sharedPref = a . getSharedPreferences ( "COLORS" , Context . MODE_PRIVATE ) ; return sharedPref . getInt ( "front" , 0 ) ; }
public void onBackPressed ( ) { deleteAccountAndReturnIfNecessary ( ) ; super . onBackPressed ( ) ; }
public void prepare ( Callback callback , long positionUs ) { this . callback = callback ; callback . onPrepared ( this ) ; }
public LocationGpsSensorWrapper ( Context applicationContext ) { super ( applicationContext ) ; values = new float [ 2 ] ; found = false ; }
public int getItemCount ( ) { if ( mCursor == null ) return 0 ; return mCursor . getCount ( ) ; }
public String getReverseRate ( ) { return reverseRate ; }
public void onClick ( View v ) { if ( mMovieClickedListener != null ) { Movie movie = mMovies . get ( holder . getAdapterPosition ( ) ) ; mMovieClickedListener . onMovieClicked ( movie , holder ) ; } }
public void setAdapter ( Adapter adapter ) { mAdapter = adapter ; }
public String getErrorCode ( ) { return mErrorCode ; }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = createView ( parent , viewType ) ; return createViewHolder ( view ) ; }
public OutputFormatter appendUnlikelyPattern ( String str ) { return setUnlikelyPattern ( unlikelyPattern . toString ( ) + '|' + str ) ; }
public synchronized boolean bodyIsOnlyEmojis ( ) { if ( isEmojisOnly == null ) { isEmojisOnly = Emoticons . isOnlyEmoji ( body . replaceAll ( "\\s" , "" ) ) ; } return isEmojisOnly ; }
private void removeMediaFromPost ( ) { mEditorImageMetaData . markAsRemoved ( ) ; Intent intent = new Intent ( ) ; intent . putExtra ( ARG_EDITOR_IMAGE_METADATA , mEditorImageMetaData ) ; this . setResult ( Activity . RESULT_OK , intent ) ; finish ( ) ; }
public Location getCurrentLocationInfo ( ) { return currentLocationInfo ; }
public void cancelFind ( ) { if ( findInProgress ) { app . unregisterReceiver ( mReceiver ) ; mBt . cancelDiscovery ( ) ; findInProgress = false ; onStatusChange ( BluetoothStatus . Enabled ) ; } }
public void setOnItemLongClickListener ( OnItemLongClickListener < T > listener ) { itemLongClickListener = listener ; }
public Number getRangeOrigin ( ) { return calculatedOrigin . y ; }
public void onFailed ( ) { loaderAdapter ( ) ; }
public boolean onQueryTextChange ( String query ) { providerManagerDashboardFragment . filterProviders ( query ) ; return true ; }
private void initExportToCalendarPrefs ( ) { binding . exportToCalendarPrefs . setOnClickListener ( mCalendarClick ) ; binding . exportToCalendarPrefs . setChecked ( getPrefs ( ) . isCalendarEnabled ( ) ) ; }
public Spannable getFormattedSubject ( NotificationsUtilsWrapper notificationsUtilsWrapper ) { return notificationsUtilsWrapper . getSpannableContentForRanges ( getSubject ( ) ) ; }
private void enableViews ( ) { labelEmpty . setVisibility ( View . GONE ) ; listHosts . setVisibility ( View . VISIBLE ) ; buttonMigrateToDefault . setEnabled ( true ) ; }
public boolean isBufferText ( ) { return mBufferText ; }
public List < Item > getGroupItems ( ) { return _items ; }
private void reloadCategories ( ) { LoadCategories task = new LoadCategories ( this , this ) ; task . execute ( ) ; }
public void bindViews ( ) { if ( ! mAreViewsBound ) { unbinder = ButterKnife . bind ( this , mRootView ) ; mAreViewsBound = true ; } }
public void setDataSet ( List < Item > dataSet , List < Integer > count ) { mDataSet = dataSet ; mCountSet = count ; }
public TextItem ( AppCompatActivity activity , @ Nullable String name , @ Nullable String content , @ Nullable String primary ) { super ( activity ) ; this . name = name ; this . content = content ; this . primary = primary ; }
public AdapterModelConversationUser . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . tab_user , parent , false ) , viewType ) ; }
public void run ( ) { callback . onTodoListAdded ( uuid , title ) ; }
public boolean needsUploading ( ) { return isFileOrImage ( ) && getFileParams ( ) . url == null ; }
public boolean getAllowReblogButton ( ) { return mSettings . allowReblogButton ; }
public String getFormattedObjectType ( ) { if ( this . getObjectType ( ) == null ) { return "" ; } return object_types . get ( Integer . toString ( this . getObjectType ( ) ) ) ; }
public String getExtraValueOf ( final String key ) { return mSubtype . getExtraValueOf ( key ) ; }
public void onClick ( View v ) { parentFragment . onClickOperationButton ( Constants . BACKSPACE ) ; }
public KeyPair getKey ( String nickname ) { if ( loadedKeypairs . containsKey ( nickname ) ) { KeyHolder keyHolder = loadedKeypairs . get ( nickname ) ; return keyHolder . pair ; } else return null ; }
public void writeToParcel ( Parcel parcel , int flags ) { parcel . writeLong ( getId ( ) ) ; parcel . writeString ( getName ( ) ) ; parcel . writeString ( getDescription ( ) ) ; parcel . writeString ( getColor ( ) ) ; }
public void onClick ( View v ) { Prefs . saveInt ( "banner_size" , seekBar . getProgress ( ) + minHeight , getActivity ( ) ) ; NavigationActivity . bannerResize ( ) ; getActivity ( ) . finish ( ) ; }
public long getStatementHandle ( ) { return sqliteStatementHandle ; }
public DeleteEventAdapter ( List < EventModel > eventList , Context context ) { this . listItems = eventList ; this . context = context ; }
public List < ILatLonRecord > getWaypoints ( ) { return listWayPoints ; }
public void onFailure ( @ NonNull Call < User > call , @ NonNull Throwable t ) { ToastUtil . error ( t . getMessage ( ) ) ; }
public ClockView ( Context context ) { super ( context ) ; this . initView ( context , null , 0 ) ; }
public void loadLevelChoiceSceneFromMenuScene ( ) { startSceneService ( loadingSceneService ) ; endSceneService ( menuSceneService ) ; startSceneService ( levelModeSceneService ) ; }
public static ImageHolderDelegate imageHolderDelegate ( DetailImageHolderDelegate imageHolderDelegate ) { imageHolderDelegate . setImagePlaceholder ( R . drawable . ic_fork_and_knife_positive ) ; return imageHolderDelegate ; }
public View onCreateInputView ( ) { mInputView = ( CustomKeyboard ) getLayoutInflater ( ) . inflate ( R . layout . keyboard , null ) ; mInputView . setOnKeyboardActionListener ( this ) ; mInputView . setPreviewEnabled ( false ) ; setLatinKeyboard ( mStandardKeyboard ) ; return mInputView ; }
public void onProgressDownload ( String fileName , float progress ) { radialProgress . setProgress ( progress , true ) ; if ( buttonState != 3 ) { updateButtonState ( true ) ; } }
public boolean onCreateOptionsMenu ( final Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . main_menu , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public final LiveData < String > getFormattedDate ( ) { return Transformations . map ( localDateTime , input -> input . format ( DateTimeFormatter . ofPattern ( "dd . MM . yyyy" ) ) ) ; }
public boolean isFinished ( ) { return finished ; }
private List < BluetoothGattService > getSupportedGattServices ( ) { if ( bluetoothGatt == null ) return null ; return bluetoothGatt . getServices ( ) ; }
public TarHelperTask changePath ( String path , boolean addGoBackItem , OnAsyncTaskFinished < ArrayList < CompressedObjectParcelable >> onFinish ) { return new TarHelperTask ( filePath , path , addGoBackItem , onFinish ) ; }
public Mp4Extractor ( ) { atomHeader = new ParsableByteArray ( Atom . LONG_HEADER_SIZE ) ; containerAtoms = new Stack <> ( ) ; nalStartCode = new ParsableByteArray ( NalUnitUtil . NAL_START_CODE ) ; nalLength = new ParsableByteArray ( 4 ) ; }
public static < T > Resource < T > loading ( @ Nullable T data ) { return new Resource <> ( Status . LOADING , data , null ) ; }
public Builder stepErrorMessageTextSizeInPx ( int stepErrorMessageTextSizeInPx ) { formView . style . stepErrorMessageTextSizeInPx = stepErrorMessageTextSizeInPx ; return this ; }
public void enteredActionMode ( @ NonNull AriaFile trigger ) { isInActionMode = true ; selectedFiles . clear ( ) ; selectedFiles . add ( trigger ) ; notifyDataSetChanged ( ) ; }
public void onListItemClick ( final ListView l , final View v , final int position , final long id ) { if ( mOnItemClickListener != null ) { mOnItemClickListener . onItemClick ( l , v , position , id ) ; } }
public WorkEntity loadSync ( int workId ) { return dataRepository . getDatabase ( ) . workDao ( ) . loadSync ( workId ) ; }
public DownloadWithUpdate process ( @ NonNull ClientInterface client , @ NonNull JSONObject obj ) throws JSONException { return DownloadWithUpdate . create ( client , obj . getJSONObject ( "result" ) , false ) ; }
public ImageEmbedBinder ( PostModel viewObject ) { post = viewObject ; }
public static boolean isLightTheme ( ) { return ! App . getTinyDB ( ) . getBoolean ( DARK_THEME , false ) ; }
public void setTranslationY ( float translationY ) { super . setTranslationY ( translationY ) ; containerView . invalidate ( ) ; }
public void tellJoke ( View view ) { EndPointsAsyncTask endpointsAsyncTask = new EndPointsAsyncTask ( ) ; endpointsAsyncTask . execute ( getApplicationContext ( ) ) ; }
public void onClick ( View v ) { Intent numbersIntent = new Intent ( Advertise . this , EditMyBook . class ) ; numbersIntent . putExtra ( "ABook" , myBook ) ; startActivityForResult ( numbersIntent , 2 ) ; }
private void onActionUp ( ) { if ( isDown ) { this . startX = 0F ; this . startY = 0F ; this . isDown = false ; } sendCallback ( ) ; }
public void setDefaultHint ( ) { defaultHint = true ; if ( mInputView != null ) { mInputView . setHint ( Tuils . getHint ( mainPack . currentDirectory . getAbsolutePath ( ) ) ) ; } }
public List < String > getmJudges ( ) { return mJudges ; }
public Jid [ ] getMembers ( ) { return mMembers ; }
public void onLongClick ( ) { if ( longClickListener != null ) { longClickListener . onLongClick ( activeSelection ) ; } }
public void onAttach ( Context context ) { getActivityComponent ( ) . inject ( this ) ; super . onAttach ( context ) ; }
public void onClick ( View v ) { mPresenter . loadLanguages ( ) ; }
public void tick ( float delta ) { instance . transform . set ( transform ) ; body . setWorldTransform ( instance . transform ) ; if ( ! animation . paused ) animation . update ( delta ) ; }
public BigDecimal getValeurAcquise ( ) { return valeurAcquise ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . myintentapp" , appContext . getPackageName ( ) ) ; }
public void shouldMapForecastData ( ) { int expectedSize = 3 ; givenWeatherData ( expectedSize ) ; givenData ( ) ; givenCountryName ( ) ; whenMapping ( ) ; thenDataMappedShouldNotBeNull ( ) ; thenWeatherItemsExpected ( expectedSize ) ; }
public void startScroll ( int startX , int startY , int dx , int dy , int duration ) { super . startScroll ( startX , startY , dx , dy , duration * 7 ) ; }
public static void recycleChecked ( Bitmap bitmap ) { if ( bitmap != null && ! bitmap . isRecycled ( ) ) { bitmap . recycle ( ) ; } }
public void onClick ( DialogInterface dialog , int which ) { if ( createKeyMap ) { createKeyMapForBlock ( 0 , false ) ; } }
private SimpleDateFormat getSimpleDateFormat ( ) { return new SimpleDateFormat ( getString ( R . string . edit_date_format ) , Locale . ENGLISH ) ; }
public TextureRegion getTextureRegion ( int meta ) { return texture ; }
public String getNumPlayers ( ) { return numPlayers ; }
public boolean onCreate ( ) { this . dbHelper = DatabaseHelper . getInstance ( getContext ( ) ) ; return true ; }
public boolean onSingleTapConfirmed ( @ NonNull MotionEvent event ) { return GestureController . this . onSingleTapConfirmed ( event ) ; }
public static Uri parseDefaultFile ( Uri uri ) { if ( TextUtils . isEmpty ( uri . getScheme ( ) ) ) { uri = uri . buildUpon ( ) . scheme ( "file" ) . authority ( "" ) . build ( ) ; } return uri ; }
public void onAudibleEvent ( @ NonNull AudibleEvent audible ) { updateAutoStop ( audible . started ) ; }
public void onClick ( View v ) { switchToEditMode ( 3 ) ; }
public void onTokenReceived ( byte [ ] token ) { mToken = token ; Log . v ( TAG , "token received sending association status request" ) ; sendBitmap ( ( byte ) ButtonPusherCmd . COMMAND_ASSOCIATION_STATUS . ordinal ( ) , buildAssociationStatusRequest ( mToken ) ) ; }
private void selectMainImage ( ) { startActivity ( new Intent ( getContext ( ) , MainImageActivity . class ) ) ; }
public void onClick ( View v ) { Intent i = new Intent ( MainActivity . this , Sem_Layout_PDF_2 . class ) ; startActivity ( i ) ; }
public static RawClient provideRawRestClientRx ( Retrofit retrofit , OkHttpClient okHttpClient , AppSettings appSettings ) { return new RawClient ( retrofit , okHttpClient , appSettings ) ; }
public Completable addToMy ( int accountId , int targetOwnerId , int videoOwnerId , int videoId ) { return networker . vkDefault ( accountId ) . video ( ) . addVideo ( targetOwnerId , videoId , videoOwnerId ) . ignoreElement ( ) ; }
public void unlockLevel ( int levelId ) { if ( levelId <= getLevelCount ( ) ) { Level levelById = getLevelById ( levelId ) ; levelById . getLevelInfo ( ) . setLocked ( false ) ; levelInfoDataSource . updateLevelInfo ( levelById . getLevelInfo ( ) ) ; } }
public LiveData < Resource < MovieDetails >> getResult ( ) { return result ; }
public RetrieveProfileJob ( Context context , Recipient recipient ) { super ( context , JobParameters . newBuilder ( ) . withNetworkRequirement ( ) . withRetryCount ( 3 ) . create ( ) ) ; this . recipient = recipient ; }
public boolean onStartNestedScroll ( CoordinatorLayout coordinatorLayout , ViewGroup child , View directTargetChild , View target , int nestedScrollAxes ) { return nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL || super . onStartNestedScroll ( coordinatorLayout , child , directTargetChild , target , nestedScrollAxes ) ; }
private static int getScore ( @ NonNull Element el ) { try { return Integer . parseInt ( el . attr ( "gravityScore" ) ) ; } catch ( Exception ex ) { return 0 ; } }
private void onPlayerSelected ( int position ) { mSelectedPlayer = playersList . get ( position ) ; mSelectedPlayerPosition = position ; selectPlayer ( position ) ; updateSelectedPlayer ( ) ; savePlayersStats ( ) ; }
public void onResume ( ) { super . onResume ( ) ; ( ( ToolbarActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . pref_notification_settings ) ; }
private void insertInitalTextures ( SQLiteDatabase db , Context context ) { Database . insertTexture ( db , context . getString ( R . string . texture_name_noise ) , BitmapFactory . decodeResource ( context . getResources ( ) , R . drawable . texture_noise ) , textureThumbnailSize ) ; }
public void onStart ( ) { handler . sendEmptyMessage ( Utility . START_PROGRESS_MSG ) ; }
public SearchBar ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public final Bundle save ( ) throws IllegalStateException { if ( stateToRestore != null ) return stateToRestore ; if ( ! isAdded ( ) ) throw new IllegalStateException ( ) ; Bundle bundle = new Bundle ( ) ; onSaveInstanceState ( bundle ) ; return bundle ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "DELETE FROM operation WHERE name = 'wait'" ) ; }
public Integer getPort ( ) { return port ; }
public void setSrc ( String src ) { this . mSrc = src ; }
private BookName ( String fileName , String name , BookFormat format ) { mFileName = fileName ; mName = name ; mFormat = format ; }
public MarginValue defaultBottomMargin ( ) { return MarginValue . ABOVE_NAVIGATION ; }
public void onDonePressed ( Fragment currentFragment ) { Configuration . setLastSeenIntroduction ( CURRENT_INTRODUCTION ) ; finish ( ) ; }
private static Date getDummyDate ( ) { try { SimpleDateFormat sdf = new SimpleDateFormat ( WellnessFitnessRepo . JSON_DATE_FORMAT ) ; return sdf . parse ( DEFAULT_DATE ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; return new Date ( ) ; } }
public boolean onQueryTextChange ( String newText ) { Timber . d ( "onQueryTextChange = " + newText ) ; mBookmarksAdapter . setFilter ( newText ) ; return true ; }
public static Builder newBuilder ( com . coinomi . core . protos . Protos . WalletPocket prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public void run ( ) throws Exception { storageLogic . updateAsync ( recipeFull , RecipeAction . EDIT_PHOTO ) ; }
public WalletPocket getDefaultInstanceForType ( ) { return defaultInstance ; }
private double sqcmTosqyard ( double num ) { return num * 0 . 000119599d ; }
public void setFileName ( File file ) { preferences . edit ( ) . putString ( FILE_NAME , file . getAbsolutePath ( ) ) . commit ( ) ; }
public void onRequestFailed ( SubredditRequestFailure failureReason ) { AndroidCommon . UI_THREAD_HANDLER . post ( new Runnable ( ) { @ Override public void run ( ) { CacheManager . getInstance ( context ) . makeRequest ( mRequest ) ; } } ) ; }
public ProfileSettingDrawerItem withIcon ( Drawable icon ) { this . icon = new ImageHolder ( icon ) ; return this ; }
public long insertNewShader ( Context context ) { return insertShaderFromResource ( context , null , R . raw . new_shader , R . drawable . thumbnail_new_shader , 1f ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { Timber . e ( "onStartCommand" ) ; super . onStartCommand ( intent , flags , startId ) ; return START_STICKY ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_affectedHistory . TLdeserialize ( stream , constructor , exception ) ; }
public SongAdapter ( ArrayList < JsonDataModel . Data > list , Context context , SongClickListener mListener ) { this . list = list ; this . context = context ; this . mListener = mListener ; }
public WritableSettings getSettings ( ) { return settings ; }
public void onClick ( View view ) { callback . OnOtpEntered ( 1 , otpValue ) ; }
public void sortPersonasByName ( boolean asc ) { viewModel . sortPersonasByName ( asc ) ; personaListAdapter . setIndexerType ( PersonaListAdapter . IndexerType . PersonaName ) ; personaListAdapter . notifyDataSetChanged ( ) ; recyclerView . setIndexBarVisibility ( showIndexBar ) ; }
private void showInStatusBar ( String id ) { NoteItem item = RealmDb . getInstance ( ) . getNote ( id ) ; if ( item != null ) { new Notifier ( getContext ( ) ) . showNoteNotification ( item ) ; } }
private void selectPlayer ( int position ) { inGameAdapter . clearSelection ( ) ; inGameAdapter . toggleSelection ( position ) ; scrollToPlayer ( position ) ; }
public void run ( ) { Toast . makeText ( MainActivity . this , message , Toast . LENGTH_LONG ) . show ( ) ; }
public void onSuccess ( ) { showProgress ( false ) ; signupSuccessful ( ) ; }
public byte [ ] getBufferCompatible ( ) { return readBufferCompatible ; }
public void onNewToken ( @ NonNull final String token ) { Lg . i ( "onTokenRefresh : " , token ) ; sendToServer ( token ) ; }
public boolean containsAll ( @ NonNull Collection < ? > c ) { throw new UnsupportedOperationException ( ) ; }
public void onTargetDismissed ( TapTargetView view , boolean userInitiated ) { Configuration . setAdviceState ( advice ) ; isShowingTargetedAdvice = false ; }
public void handleInboxLongClick ( final AppCompatActivity activity ) { final RedditChangeDataManager changeDataManager = RedditChangeDataManager . getInstance ( RedditAccountManager . getInstance ( activity ) . getDefaultAccount ( ) ) ; RedditAPICommentAction . showActionMenu ( activity , null , this , null , changeDataManager , false ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { finish ( ) ; onBackPressed ( ) ; } return true ; }
public void onTextChanged ( ) { if ( conversation != null && conversation . getCorrectingMessage ( ) != null ) { runOnUiThread ( this : : updateSendButton ) ; } }
public FontSizeListPreference ( @ NonNull final Context context ) { super ( context ) ; }
public UnexpectedLoaderException ( Throwable cause ) { super ( "Unexpected " + cause . getClass ( ) . getSimpleName ( ) + " : " + cause . getMessage ( ) , cause ) ; }
public static void sendWakeOnLan ( String ipStr , String macStr ) throws IllegalArgumentException , IOException { sendWakeOnLan ( ipStr , macStr , DEFAULT_PORT , DEFAULT_TIMEOUT_MILLIS , DEFAULT_NO_PACKETS ) ; }
public long getRecentScore ( int i , int j ) { return savedRecentScores [ i ] [ j ] ; }
public void onDetach ( ) { super . onDetach ( ) ; mFragmentHolder . removeBackClickListener ( this ) ; mFragmentHolder = null ; mListener = null ; }
public void onPause ( ) { super . onPause ( ) ; if ( deleteConfirmationDialog != null ) { deleteConfirmationDialog . dismiss ( ) ; } }
public void onDeficienciesAdvisedClick ( ) { DeficienciesDialog selectionDialog = DeficienciesDialog . newInstance ( DeficienciesDialog . TYPE_VENDOR ) ; selectionDialog . setCallBack ( this ) ; selectionDialog . show ( getSupportFragmentManager ( ) , DeficienciesDialog . TAG ) ; }
public void setMaxRefreshRate ( float refreshRate ) { sleepTime = ( long ) ( ONE_SECOND_MS / refreshRate ) ; Log . d ( TAG , "Set Redrawer refresh rate to " + refreshRate + " ( " + sleepTime + " ms ) " ) ; }
private int doUpdateAssociations ( LitePalSupport baseObj , long id , ContentValues values ) { int rowsAffected = 0 ; analyzeAssociations ( baseObj ) ; updateSelfTableForeignKey ( baseObj , values ) ; rowsAffected += updateAssociatedTableForeignKey ( baseObj , id ) ; return rowsAffected ; }
public void testIsWPCOMURI3 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( WPCOM_ADDRESS_3 ) ) ) ; }
public static Job . Result synchronousProtoRequest ( Context context ) { return synchronousProtoRequest ( context , null , null ) ; }
public void run ( ) { String res = Statusgo . sendTransaction ( txArgsJSON , password ) ; callback . invoke ( res ) ; }
public boolean isWritePermissionsRequiredForLibrary ( @ NonNull Library library ) { return storageWritePermissionsRequirementsProvider . isWritePermissionsRequiredForLibrary ( library ) && ! storageWritePermissionArbitratorForOs . isWritePermissionGranted ( ) ; }
public MessageEditEntity setExtras ( Map < Integer , String > extras ) { this . extras = extras ; return this ; }
public void hideMediaOnLockscreenChanged ( boolean enabled ) { mService . get ( ) . hideMediaOnLockscreen ( enabled ) ; }
public void setBeginning ( String beginning ) { this . beginning = beginning ; }
public MaterialSearchView ( Context context , AttributeSet attributeSet ) { this ( context , attributeSet , 0 ) ; }
private void afterUpdate ( LitePalSupport baseObj , List < Field > supportedGenericFields ) throws InvocationTargetException , IllegalAccessException { updateGenericTables ( baseObj , supportedGenericFields , baseObj . getBaseObjId ( ) ) ; updateAssociatedTableWithFK ( baseObj ) ; insertIntermediateJoinTableValue ( baseObj , true ) ; clearFKValueInAssociatedTable ( baseObj ) ; }
public void handlePlaybackEvent ( PlaybackEvent event ) { Log . i ( TAG , PlaybackEvent . class . getSimpleName ( ) + " : " + event . name ( ) ) ; }
public void set ( String key , int value ) { prefs . edit ( ) . putInt ( key , value ) . commit ( ) ; }
public void onFailure ( String errMsg ) { delayedProgressDialog . cancel ( ) ; Toast . makeText ( getDialog ( ) . getContext ( ) , "failed : " + errMsg , Toast . LENGTH_LONG ) . show ( ) ; }
public void unload ( ) { if ( pads != null && pads . length >= 17 ) { for ( Pad pad : pads ) { if ( pad != null ) { pad . unload ( ) ; } } } }
public void removeUpdateListener ( ValueAnimator . AnimatorUpdateListener updateListener ) { lottieDrawable . removeAnimatorUpdateListener ( updateListener ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; inflater . inflate ( R . menu . gene_view_menu , menu ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_timetable_day , container , false ) ; }
public void testIsWPCOMURL4 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURL ( WPCOM_ADDRESS_4 ) ) ) ; }
public FitnessRepositoryInterface getFitnessManager ( ) { this . fitnessManager = WellnessFitnessRepo . newInstance ( this . getServer ( ) , this . context ) ; return this . fitnessManager ; }
public SourcesRetrofitService getSourcesBrowserService ( ) { return retrofitJson . create ( SourcesRetrofitService . class ) ; }
private String getTeamNotFoundMessage ( ) { return context . getString ( R . string . error_team_not_found ) ; }
public boolean isDayEmpty ( Date date ) { return getDinners ( date ) . isEmpty ( ) ; }
public void addLast ( ArrayList < UserModel > list ) { mUsers . addAll ( mUsers . size ( ) , list ) ; notifyDataSetChanged ( ) ; }
public void findCitiesByPartOfTheName ( String partOfTheName ) { mRepository . findCitiesByPartOfTheName ( partOfTheName , QUERY_RESULT_LIMIT , new WeatherDataSource . FindCityListCallback ( ) { @ Override public void onDataFound ( List < City > cityList ) { mView . showCityList ( cityList ) ; } } ) ; }
public void onStart ( ) { super . onStart ( ) ; FirebaseUser currentUser = firebaseAuth . getCurrentUser ( ) ; if ( currentUser != null ) { Intent i = new Intent ( LoginActivity . this , HomeActivity . class ) ; startActivity ( i ) ; } }
public int compare ( CardWrapper c1 , CardWrapper c2 ) { return c1 . getCard ( ) . getOrdinal ( ) - c2 . getCard ( ) . getOrdinal ( ) ; }
public float getWidth ( int origin_width ) { return getValue ( origin_width , m_bitmap_origin_width , canvasWidth ) ; }
private void load ( boolean force ) { thread . run ( ISP , ( ) -> load ( force , null ) ) ; }
public void setComics ( List < SectionVO > comics ) { mComics = comics ; }
public int execute ( ) throws LuaException , RemoteException { String desired = this . getParam ( 2 ) . getString ( ) ; boolean result = mParent . isPluginInstalled ( desired ) ; L . pushBoolean ( result ) ; return 1 ; }
public void addItem ( @ NonNull Account account , int position ) { if ( position < 0 || position > accountList . size ( ) ) { return ; } accountList . add ( position , account ) ; notifyItemInserted ( position ) ; }
public void onAnimationEnd ( Animator animation ) { if ( animator != null && animator . equals ( animation ) ) { animator = null ; if ( ! checked ) { setBackgroundColor ( 0 ) ; } } }
public DeleteTask ( Context cd ) { this . cd = cd ; rootMode = PreferenceManager . getDefaultSharedPreferences ( cd ) . getBoolean ( PreferencesConstants . PREFERENCE_ROOTMODE , false ) ; }
public static boolean canRequestWriteExternalStoragePermission ( Activity activity ) { return ! QuranSettings . getInstance ( activity ) . didPresentSdcardPermissionsDialog ( ) || ActivityCompat . shouldShowRequestPermissionRationale ( activity , Manifest . permission . WRITE_EXTERNAL_STORAGE ) ; }
public JsonElement serialize ( TextWithImages src , Type typeOfSrc , JsonSerializationContext context ) { return new JsonPrimitive ( src . originalText . toString ( ) ) ; }
public void onLoadMore ( ) { updateComments ( ) ; }
public boolean isRepeatable ( ) { return getReminder ( ) . getRepeatInterval ( ) > 0 ; }
public void setFloors ( String floors ) { this . floors = floors ; }
public void setInputCount ( int inputCount ) { mInputCount = inputCount ; if ( mInputCount == 0 ) { return ; } updateMissingGamepads ( ) ; if ( ! hasEnoughGamepads ( ) ) { mListener . onNotEnoughGamepads ( ) ; } }
public void onBookCollectionVisibilityChanged ( @ NonNull BooksCollection booksCollection , boolean isVisible ) { if ( isVisible ) notifyBookCollectionAdded ( booksCollection ) ; else notifyBookCollectionRemoved ( booksCollection ) ; }
public void setPageTransformer ( boolean reverseDrawingOrder , ViewPager . PageTransformer transformer ) { miPager . setPageTransformer ( reverseDrawingOrder , transformer ) ; }
static public void setImageSmall ( Context context , UsersLTE user , ImageView imageView ) { RequestCreator picasso = getRequestCreator ( context , user , "small" ) ; if ( picasso == null ) return ; picasso . into ( imageView ) ; }
private TripItem ( ) { super ( ) ; mUUID = UUID . randomUUID ( ) ; }
public static FluentQuery where ( String . . . conditions ) { FluentQuery cQuery = new FluentQuery ( ) ; cQuery . mConditions = conditions ; return cQuery ; }
public void setUploaderListener ( InstanceUploaderListener sl ) { synchronized ( this ) { stateListener = sl ; } }
public T withTintSelectedIcon ( boolean iconTinted ) { return withIconTintingEnabled ( iconTinted ) ; }
private void initiateMediaPicking ( ) { Intent intent = new Intent ( Intent . ACTION_GET_CONTENT ) ; intent . addCategory ( Intent . CATEGORY_OPENABLE ) ; intent . putExtra ( Intent . EXTRA_MIME_TYPES , mimeTypes ) ; startActivityForResult ( intent , MEDIA_PICK_RESULT ) ; }
public static String getFormatedDuration ( long millis ) { return String . format ( "%02d : %02d" , TimeUnit . MILLISECONDS . toMinutes ( millis ) , TimeUnit . MILLISECONDS . toSeconds ( millis - ( TimeUnit . MILLISECONDS . toMinutes ( millis ) *60000 ) ) ) ; }
public String getAttend ( ) { return this . attend ; }
public void onBackPressed ( ) { saveConfig ( this ) ; }
public final int getSongChildSortOrder ( ) { return mPreferences . getInt ( SONG_CHILD_SORT_ORDER , 1 ) ; }
public int getItemViewType ( int i ) { if ( i == MessagesController . getInstance ( currentAccount ) . blockedUsers . size ( ) ) { return 1 ; } return 0 ; }
public boolean equals ( Object o ) { Track other = ( Track ) o ; return other . mId == mId ; }
private void postFitWidth ( ) { new Handler ( ) . post ( new Runnable ( ) { @ Override public void run ( ) { fitWidth ( ) ; } } ) ; }
public void onMonthSelected ( int year , int month ) { int position = 12 * ( year - mDelegate . getMinYear ( ) ) + month - mDelegate . getMinYearMonth ( ) ; closeSelectLayout ( position ) ; mDelegate . isShowYearSelectedLayout = false ; }
public boolean canSwipe ( ) { return spinnerContent != null && spinnerContent . getSelectedItemPosition ( ) != 0 ; }
public void onTransitionEnd ( Transition transition ) { fadeoutSplashScreen ( ) ; }
private static String [ ] loadGroupPeersInternal ( Context context , String groupJid ) { return MessagesProviderClient . getGroupMembers ( context , groupJid , 0 ) ; }
public void onBindViewHolder ( @ NonNull StickerViewHolder holder , int position ) { holder . fileName = stickerFiles [ position ] ; glideRequests . load ( Uri . parse ( "file : . diskCacheStrategy ( DiskCacheStrategy . NONE ) . into ( holder . image ) ; }
private LocalRepo ( Context context , Gson gson ) { this . sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; this . gson = gson ; }
public void replace ( @ Nonnull final Collection < AbstractTransaction > transactions ) { this . transactions . clear ( ) ; this . transactions . addAll ( transactions ) ; showEmptyText = true ; notifyDataSetChanged ( ) ; }
private void reloadData ( ) { sortMode = 0 ; resetDebug ( ) ; invalidateData ( ) ; getSupportLoaderManager ( ) . restartLoader ( INCIDENT_LOADER_ID , null , this ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { this . getMenuInflater ( ) . inflate ( R . menu . action_save , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public boolean onMarkerClick ( Marker marker ) { mGoogleMap . moveCamera ( marker . getPosition ( ) , 0 , 0 , 0 , MeasureUtils . dp2px ( getContext ( ) , 192 ) ) ; return false ; }
public void onVerificationRequestFailed ( int code ) { runOnUiThread ( ( ) -> { setRequestingVerificationState ( false ) ; ApiDialogHelper . createError ( this , code ) . show ( ) ; } ) ; }
public static String getWikiDateString ( @ NonNull Calendar c ) { return WIKI_DATE_FORMAT . format ( c . getTime ( ) ) ; }
public void update ( ) { long time = System . currentTimeMillis ( ) ; int deltaMS = ( int ) ( time - lastTime ) ; for ( TimeWrapper handler : handlers ) { handler . update ( deltaMS ) ; } lastTime = time ; }
public FitSystemRelativeLayout ( @ NonNull Context context ) { this ( context , null ) ; }
private static String getCountryCode ( ) { return Photobook . getPreferences ( ) . strCountryCode ; }
public void onResume ( ) { super . onResume ( ) ; alarmPresenter . checkMissedAlarms ( context , mNotificationService ) ; mAdapter . notifyDataSetChanged ( ) ; supportStartPostponedEnterTransition ( ) ; checkLoginStatus ( ) ; updateAlarmNotification ( ) ; }
private SqlOrder ( String sql ) { this . sql = sql ; }
public void onClick ( View v ) { parentFragment . onClickSpecialButton ( Constants . POW_N ) ; }
public void onTranslateFragSuccess ( PlaceDetailsAddFrag frag ) { }
private void requestMissingPermissions ( ) { FragmentCompat . requestPermissions ( this , new String [ ] { Manifest . permission . RECORD_AUDIO , Manifest . permission . CAMERA } , Constants . REQUEST_WEBRTC ) ; }
public void listen ( FindMultiCallback < T > callback ) { cb = callback ; execute ( ) ; }
public Builder sponsors ( String [ ] sponsors ) { this . sponsors = sponsors ; return this ; }
public static void kill_server_process ( ) { Log . d ( TAG , "Killing server process" ) ; Shell . SU . run ( Collections . singletonList ( "kill - 9 `pgrep dhcp6s`" ) ) ; }
public Jid [ ] getRemovedMembers ( ) { return mRemoved ; }
public boolean isMet ( Object value ) { return false ; }
public void saveWallet ( Wallet wallet ) { realm . executeTransaction ( realm -> saveSingleWallet ( wallet ) ) ; }
public synchronized void loadUrl ( @ NonNull String url ) { if ( ! mProxyUtils . isProxyReady ( mActivity ) ) { return ; } if ( mWebView != null ) { mWebView . loadUrl ( url , mRequestHeaders ) ; } }
public ToDoItem getItem ( int i ) { return toDoItems . get ( i ) ; }
public com . openwallet . core . protos . Protos . UnspentOutput getUnspentOutput ( int index ) { return unspentOutput_ . get ( index ) ; }
public void onMoved ( int fromPosition , int toPosition ) { if ( toPosition < fromPosition ) { mPromoted . put ( mItems . get ( fromPosition ) . getId ( ) , fromPosition - toPosition ) ; } }
public int getItemCount ( ) { if ( genreArrayList == null ) { return 0 ; } return genreArrayList . size ( ) ; }
public static TopicChange create ( String oldTopic , String newTopic ) { return new AutoValue_TopicChange ( oldTopic , newTopic ) ; }
public boolean hasManualInput ( ) { return hasManualInput ; }
public void setExpanded ( boolean expanded ) { this . mIsExpanded = expanded ; }
public void showInitialSearchInPlatesSection ( Cursor cursor ) { if ( searchPlatesFragment . isViewCreated ( ) ) { searchPlatesFragment . setData ( cursor ) ; searchPlatesFragment . showList ( ) ; searchPlatesFragment . showInitialHeaders ( ) ; } }
public void getThemeLightTest ( ) { AppTheme apptheme = AppTheme . getTheme ( AppTheme . LIGHT_INDEX ) ; assertEquals ( AppTheme . LIGHT , apptheme ) ; }
public ShipExplosion ( float x , float y , ShipType s ) { this . x = x ; this . y = y ; this . s = s ; }
public FoodViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new FoodViewHolder ( ViewUtils . inflate ( parent , R . layout . item_resto_fooditem ) ) ; }
public int compare ( Goal a1 , Goal a2 ) { return ( int ) ( a2 . startDate - a1 . startDate ) ; }
public Long execute ( SFTPClient client ) throws IOException { return client . mtime ( SshClientUtils . extractRemotePathFrom ( path ) ) ; }
public void searchTv ( String text ) { tvRepository . searchTvs ( 1l , text ) . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( resource -> getTvsLiveData ( ) . postValue ( resource ) ) ; }
public void onClose ( ) { createFragmentWithExistingQuestions ( ) ; }
public Observable < JsonElement > revokeAuthToken ( @ Header ( "Authorization" ) String authHeader , @ Body RevokeReqBody revoke ) { return null ; }
public void shouldNotPassValidation_notValidCountry ( ) { patient . getAddress ( ) . setCountry ( "United States Of Poland" ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public boolean hasRepeat ( ) { return ( ( bitField0_ & 0x00008000 ) == 0x00008000 ) ; }
public void onClick ( View view ) { mGridPagerAdapter . removeAll ( ) ; mListPresenter . onInitialListRequested ( ) ; }
private void showAddMeasureDialog ( ) { ViewUtils . lockScreenOrientation ( this ) ; AddMeasureDialogFragment dialog = new AddMeasureDialogFragment ( ) ; dialog . show ( this . getSupportFragmentManager ( ) , "AddPointDialogFragment" ) ; }
public String getrules_url ( ) { return rules_url ; }
public synchronized void add ( final E object ) { data . add ( new WeakReference <> ( object ) ) ; }
public static Day createDayIfDoesNotExist ( final String dateString ) throws InvalidDateException { return createDayIfDoesNotExist ( getByDate ( dateString ) ) ; }
public void setMaxFrameLargerThanComposition ( ) { animator . setMaxFrame ( 9000 ) ; assertClose ( animator . getMaxFrame ( ) , composition . getEndFrame ( ) ) ; }
public void setLoans ( ArrayList < LoanCollectionSheet > loans ) { this . loanCollectionSheetList = loans ; }
public void setOnEditorActionListener ( TextView . OnEditorActionListener onEditorActionListener ) { mOnEditorActionListener = onEditorActionListener ; invisiblePinEditText . setOnEditorActionListener ( onEditorActionListener ) ; }
public void sharePatternTest ( ) { search ( "ho?t" ) ; openMenuItem ( R . string . share ) ; checkShareIntentContains ( "host" ) ; }
private void bindListener ( View parentView , final int position , final VH holder ) { if ( mOnBindListener != null ) { mOnBindListener . onBind ( parentView , position , getItem ( position ) , holder ) ; } }
public void setPrecipIntensityMax ( Double precipIntensityMax ) { this . precipIntensityMax = precipIntensityMax ; }
public int getItemCount ( ) { return MediaDataController . getInstance ( currentAccount ) . hints . size ( ) ; }
private BaseAdapterItemView setLayoutRes ( @ LayoutRes int layoutRes ) { this . layoutRes = layoutRes ; return this ; }
public static void setHasDonated ( Context context , boolean value ) { getEditor ( context ) . putBoolean ( "has_donated" , value ) . commit ( ) ; }
public void setFolder ( @ Nullable String folder ) { mFolder = ( folder == null ) ? "" : folder ; }
public HeaderBinder ( PostModel viewObject ) { post = viewObject ; }
public void appListener ( List < AppData > list , Integer integer , Boolean aBoolean , String [ ] strings , Boolean aBoolean1 , Integer integer1 ) { AppList . sort ( addPromotedIntegrations ( list ) , AppList . BY_APPNAME_IGNORE_CASE , AppList . IN_ASCENDING , integer1 ) ; }
public static double getCoordinateTolerance ( ) { return 1 . 0 / Math . pow ( 10 , App . getDecimalPrecisionForCoordinate ( ) ) ; }
public void setPhotoDesc ( @ NonNull String photoDesc ) { this . photoDesc = photoDesc ; }
public boolean isNetFreeToMoveRight ( ) { boolean result = false ; if ( figure . pointInNet . x + figure . getWidthInSquare ( ) < horizontalSquaresCount && isNetFreeToMoveDown ( ) && ! isFigureRight ( ) ) { result = true ; } return result ; }
public DateTimeZone getTimeZone ( ) { return mTimeZone ; }
public void onCreateOptionsMenu ( Menu menu , @ NonNull MenuInflater inflater ) { inflater . inflate ( R . menu . fragment_highlight , menu ) ; }
public void decreaseCount ( OrderProduct orderProduct ) { orderRepo . decreasecount ( orderProduct ) ; }
public void setOrigin ( @ NonNull Point _origin ) { this . origin = _origin ; this . updateCalcDistAndScaleFactor ( ) ; }
public boolean hasText ( ) { return messageEditText != null && messageEditText . length ( ) > 0 ; }
public int getItemViewType ( int position ) { Filter filter = mList . get ( position ) ; if ( filter . getIconBgColor ( ) == View . NO_ID ) { return 0 ; } return 1 ; }
public PagerAdapterClass ( Context context ) { super ( ) ; mInflater = LayoutInflater . from ( context ) ; }
private boolean notifyIfMarkerTouch ( Marker marker , PointF touchCoordinate ) { if ( ! isMarkerTouch ( marker , touchCoordinate ) ) return false ; toggleMarkerSelection ( marker ) ; markerClickListener . onMarkerClicked ( marker ) ; reDraw ( ) ; return true ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( RECYCLER_VIEW_STATE , mRecyclerView . getLayoutManager ( ) . onSaveInstanceState ( ) ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . newSessionReceived ) ; }
public void testMatchListWriter ( ) { mWriter . write ( mMatch , 0L ) ; SQLiteDatabase db = mDb . getWritableDatabase ( ) ; verify ( db ) . insert ( Database . TABLE_MATCHES , null , mMatch . getParams ( mGson ) ) ; }
public void onLoadFinished ( Loader < List < Album >> loader , List < Album > data ) { getAdapter ( ) . swapDataSet ( data ) ; }
private void syncVitalsData ( ) { visitRepository . syncLastVitals ( mPatient . getUuid ( ) ) ; }
private boolean goToSend ( ) { return accountFragment != null && accountFragment . isVisible ( ) && accountFragment . goToSend ( true ) ; }
private void prepareFacebookLogin ( LoginButton loginButton ) { loginButton . setReadPermissions ( "email" ) ; loginButton . setFragment ( this ) ; loginButton . registerCallback ( facebookCallbackManager , new FacebookLoginCallback ( getActivity ( ) , new OnLoggedIn ( getActivity ( ) , loginButton ) ) ) ; }
private final View . OnClickListener mOnClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { showBlogPreview ( ) ; } } ;
public void onCreate ( ) { super . onCreate ( ) ; context = this . getApplicationContext ( ) ; DatabaseHelper dbHelper = new DatabaseHelper ( ) ; DatabaseManager . initializeInstance ( dbHelper ) ; Logger . addLogAdapter ( new AndroidLogAdapter ( ) ) ; }
public InvalidSubredditNameException ( String subredditName ) { super ( String . format ( Locale . US , "Invalid subreddit name '%s' . " , subredditName == null ? "NULL" : subredditName ) ) ; }
public void run ( ) { goToNextView ( ) ; }
public void setTitle ( String title ) { document . setTitle ( title ) ; notifyPropertyChanged ( BR . title ) ; onSaveDocument ( ) ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( SwipeableWithButtonExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
private void drawBackground ( Canvas canvas ) { drawDrawable ( canvas , backgroundRectangle , startingX , startingY , endingX , endingY ) ; }
public SearchTeamView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; setupDefaultAttributes ( context , attrs ) ; initialize ( context ) ; }
public int getItemCount ( ) { return ! delayLocalResults && stickers != null ? stickers . size ( ) : 0 ; }
public void setTimestampEnd ( long timestamp ) { timestamp_end = new UnixTimestamp ( timestamp ) ; }
public MediatorLiveData < List < ContactEntity >> getContacts ( ) { return observableContacts ; }
public String toString ( ) { switch ( this ) { case TIMELINE : return "timeline" ; case EMAIL : return "email" ; case DEVICE : return "device" ; default : return "" ; } }
public void notifyMsgInit ( ) { mHandler . removeMessages ( BleMsg . MSG_CHA_NOTIFY_START ) ; }
public int getPlugged ( ) { return mPlugged ; }
public TextLabelWidget ( LayoutManager layoutManager , Size size ) { this ( layoutManager , size , TextOrientation . HORIZONTAL ) ; }
public void onBindGroupViewHolder ( @ NonNull MyGroupViewHolder holder , int groupPosition , int viewType ) { switch ( viewType ) { case GROUP_ITEM_VIEW_TYPE_SECTION_HEADER : onbBindSectionHeaderGroupViewHolder ( holder , groupPosition ) ; break ; case GROUP_ITEM_VIEW_TYPE_SECTION_ITEM : onBindItemGroupViewHolder ( holder , groupPosition ) ; break ; } }
public MediaActivity ( Bundle args , int [ ] media ) { this ( args , media , null , MediaDataController . MEDIA_PHOTOVIDEO ) ; }
public void onRefresh ( ) { refreshCurrentList ( ) ; }
private void showLoading ( ) { mProgressLoading . setVisibility ( View . VISIBLE ) ; }
private void onUploadsDataReceived ( List < Upload > data ) { uploadsData . clear ( ) ; uploadsData . addAll ( data ) ; callView ( IDocListView : : notifyDataSetChanged ) ; resolveUploadDataVisiblity ( ) ; }
private static void saveBooleanPreference ( Context context , String key , boolean value ) { SharedPreferences . Editor appPreferences = getDefaultSharedPreferences ( context . getApplicationContext ( ) ) . edit ( ) ; appPreferences . putBoolean ( key , value ) . apply ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . ignore ( buffer . getCid ( ) , input . getText ( ) . toString ( ) , null ) ; dialog . dismiss ( ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . mylistview" , appContext . getPackageName ( ) ) ; }
public final void run ( ) { action . run ( ) ; }
public Long [ ] cids ( long did ) { return cids ( did , false ) ; }
private Bitmap getMoneroLogo ( ) { if ( logo == null ) { logo = Helper . getBitmap ( getContext ( ) , R . drawable . ic_monero_logo_b ) ; } return logo ; }
public StorageProgressBarWrapper ( Context context ) { super ( context ) ; init ( context , null ) ; }
public static PosterViewState makeLoadingState ( Filter filter ) { return new PosterViewState ( null , filter , true , false ) ; }
private void setTls ( boolean tls ) { this . tls = tls ; notifyChange ( ) ; }
public BeverageDetails getFavouriteBeverageDetails ( String id ) { return mDatabase . beverageDao ( ) . getBeverageDetailsWithIngredients ( id ) ; }
private boolean isOutputsValid ( ) { return address != null ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_start , menu ) ; return true ; }
public void showErrorLoadingCards ( String msg ) { AppUtils . showLongToast ( getContext ( ) , msg ) ; }
public DeviceCharacteristic ( String uuid , String key , String ui_name ) { this ( uuid , key , ui_name , 0 , true ) ; }
public < R > void batch ( @ NonNull AbstractClient . BatchSandbox < R > sandbox , AbstractClient . OnResult < R > listener ) { if ( current != null ) current . batch ( sandbox , listener ) ; }
private void handleLoadAllTeamsError ( Throwable throwable ) { rxAllTeamsCacheHelper . clearCache ( ) ; getMvpView ( ) . setAllTeamsProgress ( false ) ; getMvpView ( ) . showError ( errorHandler . getMessage ( throwable ) ) ; }
public List < StationRes > getStations ( ) { return success ? result . get ( 0 ) . getStations ( ) : Collections . emptyList ( ) ; }
public void remove ( NetworkDataSink sink ) { mNetworkDataSinkMap . values ( ) . removeAll ( Collections . singleton ( sink ) ) ; }
public void setDragStateFlags ( int flags ) { mDragStateFlags = flags ; }
private void startPostPairingOperations ( ) { if ( io . getDevice ( ) . getBondState ( ) == BluetoothDevice . BOND_NONE ) { Log . v ( TAG , "Create bond : " + this . io . getDevice ( ) . createBond ( ) ) ; } }
public Jid [ ] getAddedMembers ( ) { return mAdded ; }
public void onClickCancel ( View view ) { Timber . v ( "onClickCancel ( ) called with : " + "view = [ " + view + " ] " ) ; finish ( ) ; }
public DeleteTodoListInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , Repository repository , String uuid ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . uuid = uuid ; }
private void resetAutoSendTimersIfNecessary ( ) { if ( session . getAutoSendDelay ( ) != preferenceHelper . getAutoSendInterval ( ) ) { session . setAutoSendDelay ( preferenceHelper . getAutoSendInterval ( ) ) ; setupAutoSendTimers ( ) ; } }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . activity_export , menu ) ; return true ; }
private String decryptPassword ( byte [ ] cipherData , byte [ ] initialVector ) throws Exception { SecretKey key = getSecretKey ( ) ; byte [ ] encodedPassword = EncryptionHelper . decrypt ( cipherData , key , initialVector ) ; return EncryptionHelper . base64ToString ( encodedPassword ) ; }
private void handlePaymentError ( final int messageId ) { isProcessingPayment = false ; toggleForm ( ) ; mBinding . paymentError . setText ( getString ( messageId ) ) ; mBinding . paymentError . setVisibility ( View . VISIBLE ) ; }
public void onConnectionFailed ( @ NonNull ConnectionResult connectionResult ) { Toast . makeText ( getActivity ( ) , "Connection Failed" , Toast . LENGTH_SHORT ) . show ( ) ; }
public Double getOffset ( ) { return offset ; }
public void onNotify ( byte [ ] data ) { Log . d ( "mi - band" , "Sensor : " + Arrays . toString ( data ) ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_prefs = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) . getApplicationContext ( ) ) ; m_prefs . registerOnSharedPreferenceChangeListener ( this ) ; m_activity = ( MasterActivity ) activity ; }
public void setToHover ( ) { this . interpolator = new CycleInterpolator ( 3 ) ; this . currentPosY = this . posY ; this . status = HeroStatus . HOVER ; }
public void setDraggedMarkPoint ( MarkPoint draggedMarkPoint ) { this . draggedMarkPoint = draggedMarkPoint ; }
public boolean onSupportNavigateUp ( ) { Timber . v ( "onSupportNavigateUp ( ) " ) ; onBackPressed ( ) ; return true ; }
public void setFont ( Typeface font ) { mPrefFont = font ; }
public void onAdded ( ) { LOG . debug ( "ownCloud Job : onAdded" ) ; }
public void onFailure ( Call < FirebaseMessageModel > call , Throwable t ) { Log . d ( TAG , "Message Failed send" ) ; Log . d ( TAG , t . getMessage ( ) ) ; }
public void draw ( @ NonNull Canvas canvas ) { if ( mBitmap != null ) { canvas . drawBitmap ( mBitmap , mOffset , 0 , mPaint ) ; } }
public void onActivityDestroy ( ) { super . onActivityDestroy ( ) ; if ( mDialog != null && mDialog . isShowing ( ) ) { mDialog . dismiss ( ) ; } }
public OCSPrologReply parseDocument ( String strReply ) { Log . d ( "PrologReplyParser" , strReply ) ; ByteArrayInputStream bais = new ByteArrayInputStream ( strReply . getBytes ( ) ) ; return parseDocument ( bais ) ; }
public void next ( ) { mService . get ( ) . gotoNext ( true ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_mini_player , container , false ) ; }
public Audio getCurrentAudio ( ) { return mService . get ( ) . getCurrentTrack ( ) ; }
public static void init ( ) { blockItemSheet = getPackedTextureSheet ( AssetType . block , AssetType . item , AssetType . world ) ; getPackedTextureSheet ( AssetType . hud ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; fireViewCreated ( ) ; }
public void displayRows ( List < SparseArray < Object >> columnIndexToValuesArray ) { mTableRecyclerAdapter . setData ( columnIndexToValuesArray ) ; }
public SlotsGroup ( Slots s ) { beginAt = s . beginAt ; endAt = s . endAt ; group = new ArrayList <> ( ) ; group . add ( s ) ; scaleTeam = s . scaleTeam ; isBooked = s . isBooked ; }
public void didSetRights ( int rights , TLRPC . TL_chatAdminRights rightsAdmin , TLRPC . TL_chatBannedRights rightsBanned , String rank ) { removeSelfFromStack ( ) ; }
public PostView ( Context context ) { this ( context , null ) ; }
public void newEmptySelection_Always_ReturnNotNullValue ( ) { assertThat ( sut . newEmptySelection ( ) ) . isNotNull ( ) ; }
public void onClick ( View v ) { if ( ! BooksDbAdapter . getInstance ( ) . getActiveBookUID ( ) . equals ( bookUID ) ) { BookUtils . loadBook ( bookUID ) ; } }
public void onClick ( View v ) { new DatePickerDialog ( getContext ( ) , aadDate , calendar . get ( Calendar . YEAR ) , calendar . get ( Calendar . MONTH ) , calendar . get ( Calendar . DAY_OF_MONTH ) ) . show ( ) ; }
public void setHourLabelsColor ( @ ColorInt int hourLabelsColor ) { this . mHourLabelsColor = hourLabelsColor ; this . mShadowPaint . setColor ( hourLabelsColor ) ; this . invalidate ( ) ; }
private void showConnectivityErrorBar ( ) { connectivityText . setVisibility ( View . VISIBLE ) ; connectivityText . setText ( R . string . connectivity_lost ) ; connectivityText . setBackgroundColor ( getResources ( ) . getColor ( R . color . DarkRed ) ) ; }
public void run ( ) { commentImage2 . setVisibility ( View . INVISIBLE ) ; commentImage . setVisibility ( View . VISIBLE ) ; }
public File repoDirectoryFile ( String filePath ) { return new File ( repoPath ( ) , filePath ) ; }
public static void showSaveError ( Context context , CoordinatorLayout coordinatorLayout , Exception e ) { showError ( context . getString ( R . string . msgSaveFailed , e . getMessage ( ) ) , coordinatorLayout ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "mx . dev . franco . automusictagfixer" , appContext . getPackageName ( ) ) ; }
private void stopWalletService ( ) { disconnectWalletService ( ) ; releaseWakeLock ( ) ; }
public String getVoteCount ( ) { return voteCount ; }
public int getFrame ( ) { if ( composition == null ) { return 0 ; } return Math . round ( ( getProgress ( ) * composition . getDurationFrames ( ) ) ) ; }
public List < TimetableSubject > getPrimarySubjects ( ) { return Collections . unmodifiableList ( primarySubjects ) ; }
public String getTheme ( ) { return theme ; }
private PersonDetailFragment getDetailFragment ( ) { return ( PersonDetailFragment ) getSupportFragmentManager ( ) . findFragmentByTag ( KEY_PERSON_DETAIL_FRAGMENT ) ; }
public void onCreate ( ) { super . onCreate ( ) ; this . dataManager = new SpUtils ( getApplicationContext ( ) ) ; this . boosterModeManager = new BoosterModeManager ( ) ; performOnBackgroundThread ( ) . start ( ) ; }
public ViewGroupIterator ( ViewGroup parent ) { this . parent = parent ; }
public SubredditAdapter ( Context context , List < Subreddit > subreddits ) { super ( context , 0 , subreddits ) ; }
public static void startImport ( Context context ) { Intent intent = new Intent ( context , ImportDbService . class ) ; context . startService ( intent ) ; }
public void onClick ( DialogInterface dialog , int which ) { saveFile ( contentURL , outFile ) ; }
public Float getDomainCursorPosition ( ) { return domainCursorPosition ; }
public int getGridHeight ( ) { return Utils . convertDpToPixel ( TvApp . getApplication ( ) , 400 ) ; }
public List < Song > getSongs ( @ NonNull Context context ) { return TopAndRecentlyPlayedTracksLoader . getNotRecentlyPlayedTracks ( context ) ; }
public void onCreate ( ) { super . onCreate ( ) ; AppBrain . initApp ( this ) ; }
public int getCount ( ) { return arrConferenceDates . size ( ) ; }
public void setOn ( String str ) { if ( str == null ) { return ; } this . on = "1" . equals ( str ) ; }
public void onDisConnect ( final BleDevice bleDevice ) { if ( BleManager . getInstance ( ) . isConnected ( bleDevice ) ) { BleManager . getInstance ( ) . disconnect ( bleDevice ) ; } }
public ZipFile getCbz ( ) { try { cbz = new ZipFile ( new File ( mFileName ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; cbz = null ; } return cbz ; }
public static boolean fragmentsAreAllClosed ( ) { return announcementsFragment == null && mapsFragment == null && countdownFragment == null && mentorFragment == null && creditsFragment == null ; }
public void run ( ) { disconnectAll ( false , true ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . unwire ( ) ; EntityAnswer answer = items . get ( position ) ; holder . bindTo ( answer ) ; holder . wire ( ) ; }
public CountriesAdapter ( List < Country > countries , CountrySelectionFragment . OnCountrySelectedListener onCountrySelectedListener ) { this . allCountries = countries ; this . countries = countries ; this . onCountrySelectedListener = onCountrySelectedListener ; }
private void getDiscussionsFromDatabase ( ) { mDiscussions = new Select ( ) . all ( ) . from ( Discussion . class ) . execute ( ) ; }
public BaseResponse ( ) { }
private Attribute createAttribute ( String name , int type ) { Attribute a = new Attribute ( ) ; a . title = name ; a . type = type ; a . id = db . insertOrUpdate ( a ) ; return a ; }
public void onBridgedAdapterItemRangeChanged ( @ NonNull RecyclerView . Adapter source , @ Nullable Object tag , int positionStart , int itemCount , Object payload ) { onHandleWrappedAdapterItemRangeChanged ( source , ( List < ComposedChildAdapterTag > ) tag , positionStart , itemCount , payload ) ; }
public void onClick ( View v ) { parentFragment . onClickOperationButton ( Constants . MUL ) ; }
private void answerIsCorrect ( ExerciseResult exerciseResult , int currentProgress ) { exerciseResult . setCorrect ( true ) ; int earnedPoints = PointCalculator . calcPoints ( currentProgress , maxProgress , minPoints ) ; exerciseResult . setPoints ( earnedPoints ) ; }
public void onClick ( View view ) { startActivity ( new Intent ( Menu . this , SimpleView . class ) ) ; }
private void setAdapter ( ) { mRecyclerViewFavorites . setLayoutManager ( new LinearLayoutManager ( mContext , LinearLayoutManager . VERTICAL , false ) ) ; mRecyclerViewFavorites . setAdapter ( mMyFavoritesAdapter ) ; }
public void showGoingButton ( boolean show ) { if ( buttonGoing == null ) return ; buttonGoing . setVisibility ( show ? View . VISIBLE : View . GONE ) ; }
public Loader < MessageList > onCreateLoader ( int id , Bundle args ) { AsyncContentLoader l = new AsyncContentLoader ( getBaseActivity ( ) , mMode ) ; showLoadingAnimation ( ) ; return l ; }
public AddAnimationInfo ( @ NonNull RecyclerView . ViewHolder holder ) { this . holder = holder ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; switch ( id ) { case R . id . action_addcurrency : showAddCurrencyMenu ( ) . show ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public Long getInstallationTime ( ) { return sharedPreferences . getLong ( KEY_INSTALLATION_TIME , 0L ) ; }
private void setDatabaseCreated ( ) { isDatabaseCreated . postValue ( true ) ; }
public FragmentSlideFragment ( ) { }
public void endTracks ( ) { sampleQueuesBuilt = true ; handler . post ( maybeFinishPrepareRunnable ) ; }
public HistoryComponent prepareComponent ( ) { return Dependencies . INSTANCE . getHistoryComponent ( ) ; }
public void setUrl ( String url ) { sharedPref . edit ( ) . putString ( PREF_KEY_URL , url ) . apply ( ) ; }
public boolean onOptionsItemSelected_drawer ( MenuItem item ) { return mDrawerView != null && mDrawerToggle != null && mDrawerToggle . onOptionsItemSelected ( item ) ; }
public boolean isAvailableNet ( ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; return cm != null && cm . getActiveNetworkInfo ( ) != null && cm . getActiveNetworkInfo ( ) . isConnected ( ) ; }
public void onAsteroidHit ( int score ) { if ( ! isTutorial && asteroidsHit == 0 && asteroidsPassed == 0 ) unlock ( R . string . achievement_savage ) ; asteroidsHit ++ ; }
public void setUp ( ) { MockitoAnnotations . initMocks ( this ) ; mRenderer = new MyTbaModelRenderer ( mDatafeed , mEventRenderer , mTeamRenderer , mMatchRenderer , mDistrictRenderer ) ; }
public VideosInteractor ( INetworker networker , IStorages cache ) { this . networker = networker ; this . cache = cache ; }
public void onClick ( final View view ) { ImageInfoDialog . newInstance ( mImageInfo ) . show ( ImageViewActivity . this . getSupportFragmentManager ( ) , null ) ; }
public void showIfNeeded ( ) { if ( shouldShow ( ) ) { tryShow ( context ) ; } }
public Item random ( ) { level ( + 1 ) ; return this ; }
public Builder clearTokenId ( ) { bitField0_ = ( bitField0_ & ~0x00001000 ) ; tokenId_ = 0 ; onChanged ( ) ; return this ; }
public void run ( ) { putUsers ( usersArr , fromCache ) ; NotificationCenter . getInstance ( ) . postNotificationName ( NotificationCenter . chatInfoDidLoaded , info , 0 , byChannelUsers , pinnedMessageObject ) ; }
public void onServiceConnected ( ComponentName name , IBinder service ) { mService = ( ( PlumbleService . PlumbleBinder ) service ) . getService ( ) ; synchronized ( mServiceLock ) { mServiceLock . notify ( ) ; } }
private boolean getNeverAskRatingAgain ( ) { return BuildConfig . FLAVOR . toLowerCase ( ) . contains ( BuildConfig . FLAVOR_gaD . toLowerCase ( ) ) ? preferences . getBoolean ( KEY_NEVER_ASK_RATING_AGAIN , false ) : true ; }
public MyPlace get ( int i ) { if ( i >= placesList . size ( ) || i < 0 ) return null ; return placesList . get ( placesList . size ( ) - 1 - i ) ; }
public SupportFragmentResourceFinder ( @ NonNull final Fragment fragment ) { this . fragment = fragment ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `pop` INTEGER NOT NULL DEFAULT 0" ) ; }
public void testBadAndroidSettings ( ) { mJsonData . addProperty ( APIStatusDeserializer . ANDROID_SETTINGS_TAG , "hello" ) ; mStatus = mDeserializer . deserialize ( mJsonData , ApiStatus . class , mContext ) ; }
public Result call ( String method , Session session , Map < String , String > params ) { return call ( null , method , session . getApiKey ( ) , params , session ) ; }
public Maybe < Event > create ( @ NonNull Event entity ) { return Maybe . just ( entity ) ; }
public void onRemoveStream ( MediaStream stream ) { Log . i ( TAG , "onRemoveStream : " + stream ) ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( DraggableSwipeableExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public void onClick ( ) { setProfile ( ) ; }
public void updateState ( int newBitState , boolean newSignState ) { bitPrecision = newBitState ; isSigned = newSignState ; }
private int findDefaultCondition ( ) { for ( int i = 0 ; i < conditions . size ( ) ; i ++ ) if ( conditions . get ( i ) . condition . isDefault ) return i ; return 0 ; }
public void gridSpanNumsIsCorrect ( ) throws Exception { assertEquals ( 7 , FragmentApps . getColumns ( GRID_ORIENTATION_HORIZONTAL , 640 , 480 , 120 , 64 ) ) ; assertEquals ( 5 , FragmentApps . getColumns ( GRID_ORIENTATION_VERTICAL , 640 , 480 , 120 , 64 ) ) ; }
public boolean areContentsTheSame ( int oldItemPosition , int newItemPosition ) { TupleOperationEx a1 = prev . get ( oldItemPosition ) ; TupleOperationEx a2 = next . get ( newItemPosition ) ; return a1 . equals ( a2 ) ; }
public Builder allowNewFolder ( boolean allow , @ StringRes int buttonLabel ) { allowNewFolder = allow ; if ( buttonLabel == 0 ) { buttonLabel = R . string . new_folder ; } newFolderButton = buttonLabel ; return this ; }
public CreateSignedPreKeyJob ( Context context ) { super ( context , JobParameters . newBuilder ( ) . withNetworkRequirement ( ) . withGroupId ( CreateSignedPreKeyJob . class . getSimpleName ( ) ) . create ( ) ) ; }
private static void run ( String command , String id , Context context ) { Control . runSetting ( command , ApplyOnBootFragment . THERMAL , id , context ) ; }
public void onClick ( View v ) { LogUtils . logD ( TAG , "Marking TOS flag . " ) ; SettingsUtils . markTosAccepted ( mActivity , true ) ; doNext ( ) ; }
public static String getPrimary ( ) { return String . valueOf ( DnsServerHelper . checkServerId ( Integer . parseInt ( Daedalus . getPrefs ( ) . getString ( "primary_server" , "0" ) ) ) ) ; }
public BluetoothLeDevice getBluetoothLeDeviceForAddress ( final String address ) { for ( final BluetoothLeDevice device : mDeviceMap . values ( ) ) { if ( device . getAddress ( ) . equals ( address ) ) { return device ; } } return null ; }
public ProgressBarViewHolder ( View itemView ) { super ( itemView ) ; progressBar = itemView . findViewById ( R . id . recycleviewProgressbar ) ; }
public boolean isSearchOpened ( ) { return searchingType != 0 ; }
public static void setDefaultDPI ( ) { setDPITarget ( AjLatexMath . getContext ( ) . getResources ( ) . getDisplayMetrics ( ) . xdpi ) ; }
public static CommandResult execCommand ( String command , boolean isRoot ) { return execCommand ( new String [ ] { command } , isRoot , true , null ) ; }
public void saveSpeedAlert ( float speedAlert ) { SharedPreferences . Editor editor = androidSharedPreferences . edit ( ) ; editor . putFloat ( SPEED_ALERT , speedAlert ) ; editor . commit ( ) ; }
public boolean isVisible ( ) { return mVisible && mNode . getTankFactory ( ) . notFullyUpgraded ( ) && owner . getEnergy ( ) >= mNode . getTankFactory ( ) . getUpgradeCost ( ) ; }
public boolean isSolved ( ) { return solvedTime != 0 ; }
public BuildingLayer ( Map map , VectorTileLayer tileLayer ) { this ( map , tileLayer , false , false ) ; }
public void run ( ) { if ( mService != null ) { mStatusbar . setText ( MyFileUtils . getSizeAsStringExact ( ( long ) mService . getLength ( ) ) ) ; mStatusHandler . postDelayed ( this , 1000 ) ; } }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . busytrack . foodtruckclient" , appContext . getPackageName ( ) ) ; }
public static ArrayAdapter < String > createDropDownAdapter ( Context context , LocalizableEnum [ ] values ) { String [ ] items = getLocalizedValues ( context , values ) ; return new ArrayAdapter <> ( context , android . R . layout . simple_spinner_dropdown_item , items ) ; }
public boolean restoreSession ( ) { if ( ! gameRestore . get ( ) ) { gameRestore . set ( true ) ; } return true ; }
public void setOnClickListener ( View . OnClickListener listener ) { mClickListener = listener ; }
public void onClick ( DialogInterface dialog , int which ) { PolarSurveyResultsActivity . this . savePoints ( ) ; PolarSurveyResultsActivity . this . adapter . notifyDataSetChanged ( ) ; }
public T withSelectedIcon ( @ DrawableRes int selectedIconRes ) { this . selectedIcon = new ImageHolder ( selectedIconRes ) ; return ( T ) this ; }
private void logStatistic ( Context context , String info ) { firebaseAnalyticsProvider . logEvent ( context , FirebaseAnalyticsProvider . Event . WIDGET_USAGE , firebaseAnalyticsProvider . getBundle ( FirebaseAnalyticsProvider . Param . WIDGET_USAGE_INFO , info ) ) ; }
public void setDate ( @ NonNull Date date ) { this . date = date ; }
public Integer getApparentTemperatureMinTime ( ) { return apparentTemperatureMinTime ; }
private Bundle makeTransitionBundle ( View sharedElementView ) { return ActivityOptionsCompat . makeSceneTransitionAnimation ( mActivity , sharedElementView , ViewCompat . getTransitionName ( sharedElementView ) ) . toBundle ( ) ; }
private void updateContainerDate ( ) { DateFormat df = new DateFormat ( ) ; this . containerDateInUse . setText ( df . format ( calendar . getTime ( ) ) ) ; }
public boolean onCabFinished ( MaterialCab materialCab ) { setStatusbarColor ( ColorUtil . withAlpha ( toolbarColor , toolbarAlpha ) , false ) ; return callback . onCabFinished ( materialCab ) ; }
public int execute ( ) throws LuaException { String foo = this . getParam ( 2 ) . getString ( ) ; Window . this . mParent . dispatchLuaText ( foo ) ; return 0 ; }
public static long getAvailableBytes ( @ NonNull FileDescriptor fd ) throws IOException { try { StructStatVfs stat = Os . fstatvfs ( fd ) ; return stat . f_bavail * stat . f_bsize ; } catch ( Exception e ) { throw new IOException ( e ) ; } }
public Toolbar getBottomToolbar ( ) { return mBottomToolbar ; }
public void saveRestore ( ) { mPresenter . restore ( mPresenter . getSaveHash ( ) ) ; }
public void sendMessage ( String message , String dest , boolean internet , Listeners . OnMessageSentListener onMessageSentListener ) { if ( connectBLETask != null ) connectBLETask . sendMessage ( message , dest , internet , onMessageSentListener ) ; else onMessageSentListener . OnCommunicationError ( "Client not initialized" ) ; }
public void openCommunityMembers ( int accoundId , int groupId ) { PeopleSearchCriteria criteria = new PeopleSearchCriteria ( "" ) . setGroupId ( groupId ) ; PlaceFactory . getSingleTabSearchPlace ( accoundId , SearchContentType . PEOPLE , criteria ) . tryOpenWith ( requireActivity ( ) ) ; }
public boolean onQueryTextChange ( String newText ) { adapter . filter ( viewPager . getCurrentItem ( ) , newText . toLowerCase ( ) ) ; appbar . setExpanded ( true ) ; return true ; }
public KeyType getType ( ) { return KeyType . fromKey ( getPublic ( ) ) ; }
private void closeOnSuccess ( String message ) { this . listener . onExportDialogSuccess ( message ) ; this . dismiss ( ) ; }
private void returnFileFinishActivity ( String filePath ) { Intent retIntent = new Intent ( ) ; retIntent . putExtra ( returnFileParameter , filePath ) ; requireActivity ( ) . setResult ( Activity . RESULT_OK , retIntent ) ; requireActivity ( ) . finish ( ) ; }
public void onStartListening ( ) { updateTile ( ) ; }
public Builder id ( long id ) { this . id = id ; return this ; }
public int compare ( StatItem lhs , StatItem rhs ) { return lhs . getCorrect ( ) - rhs . getCorrect ( ) ; }
public ConversationsFragment getListFragment ( ) { return mFragment ; }
public void onClick ( View v ) { new FetchDeepData ( BookDetailsActivity . this ) . execute ( ) ; }
public static void deleteTitlePref ( Context context , int appWidgetId ) { SharedPreferences . Editor prefs = context . getSharedPreferences ( PREFS_NAME , 0 ) . edit ( ) ; prefs . remove ( PREF_PREFIX_KEY + appWidgetId ) ; prefs . apply ( ) ; }
public String getText ( ) { return text ; }
public float getFocusY ( ) { return focusY ; }
public void unlock ( ) { if ( mUnlocked ) { return ; } mUnlocked = true ; changed . emit ( ) ; unlocked . emit ( ) ; }
public void onChanged ( @ Nullable LatLon element ) { updatePointer ( ) ; }
private static Calendar dateToCalendar ( Date date ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( date ) ; return cal ; }
public AudioItem apply ( Audio audio ) { AudioItem audioItem = new AudioItem ( audio ) ; audioItem . setClassificationId ( audio . getAlbumId ( ) ) ; audioItem . setClassificationName ( audio . getAlbum ( ) ) ; return audioItem ; }
public String [ ] getApkCertificateDigestSha256 ( ) { return apkCertificateDigestSha256 ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `message` ADD COLUMN `receipt_to` TEXT" ) ; }
public void setArrowsColor ( @ ColorInt int arrowsColor ) { this . mArrowsColor = arrowsColor ; this . mArrowPaint . setColor ( arrowsColor ) ; this . invalidate ( ) ; }
public String getLabel ( ) { return _label ; }
public T withIconColorRes ( @ ColorRes int iconColorRes ) { this . iconColor = ColorHolder . fromColorRes ( iconColorRes ) ; return ( T ) this ; }
public void init ( ) { }
public SimpleSetting ( String name , CharSequence value ) { mName = name ; mValue = value ; }
public Fragment getItem ( int position ) { switch ( position ) { case 0 : return new SelectedBooksFragment ( ) ; case 1 : return new DemandQueueFragment ( ) ; case 2 : return new WishListFragment ( ) ; default : return null ; } }
public void run ( ) { NotificationsController . getInstance ( currentAccount ) . repeatNotificationMaybe ( ) ; }
public ServerSocketMonitor ( int port , ServerNetworking serverNetworking ) { this . port = port ; this . serverNetworking = serverNetworking ; serverSocket = Gdx . net . newServerSocket ( Protocol . TCP , port , Networking . serverSocketHints ) ; running = new AtomicBoolean ( true ) ; }
public static LinkedHashMap < String , String > getColumnDefinition ( String tableName ) { return tables . get ( tableName ) ; }
public void onLibraryDisciplineChanged ( String discipline , boolean isChecked ) { if ( ! restoring ) { filterState . setLibraryDiscipline ( discipline , isChecked ) ; updateSearchSettingsButtonState ( ) ; filterLibraryCards ( ) ; } }
public static View findViewByPosition ( @ NonNull RecyclerView . LayoutManager layoutManager , int position ) { return ( position != RecyclerView . NO_POSITION ) ? layoutManager . findViewByPosition ( position ) : null ; }
public List < RecipeLabelTable > getDbRecipeLabelTable ( String language ) { return ( getDbConfig ( ) == null ) ? null : githubDbRequest . getRecipeLabelTable ( getDbConfig ( ) . version , language ) . onErrorComplete ( ) . blockingGet ( ) ; }
public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj instanceof PreviewSong ) { return mSong . equals ( ( ( PreviewSong ) obj ) . mSong ) ; } return false ; }
public static boolean isTreeUriSaved ( Context context ) { return ! TextUtils . isEmpty ( PreferenceUtil . getInstance ( ) . getSAFSDCardUri ( ) ) ; }
private static void setValue ( Context context , int appWidgetId , String newValue ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putString ( PREFERENCE_WIDGET_PREAMBLE + appWidgetId , newValue ) . apply ( ) ; }
public static int getThemedColor ( Context ctx , int attributeId ) { return getThemedColor ( ctx . getTheme ( ) , attributeId ) ; }
public static SupportedPointsFileTypes fileTypeOf ( String format ) { SupportedPointsFileTypes type = null ; try { type = SupportedPointsFileTypes . valueOf ( format . toUpperCase ( App . getLocale ( ) ) ) ; } catch ( IllegalArgumentException e ) { } return type ; }
public void onPause ( ) { super . onPause ( ) ; pauseCurrentPage ( ) ; }
public void writeToParcel ( Parcel out , int flags ) { super . writeToParcel ( out , flags ) ; out . writeInt ( this . mIsFocused ? 1 : 0 ) ; }
public final boolean isExpand ( ) { return mMonthView . getVisibility ( ) == VISIBLE ; }
public void onBindViewHolder ( ItemViewHolder holder , int position ) { TagModel tag = items . get ( position ) ; holder . tagNameText . setText ( tag . getTitle ( ) ) ; }
public void testSafeToAddAuthToken27 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( WPCOM_ADDRESS_6 ) ) ) ; }
public Map < ? , ? > getMap ( Session session , long torrentID ) { return map ; }
public void onCreate ( SurfaceHolder surfaceHolder ) { super . onCreate ( surfaceHolder ) ; PreferenceManager . getDefaultSharedPreferences ( ChameleonWallpaperService . this ) . registerOnSharedPreferenceChangeListener ( this ) ; registerReceiver ( colorExtractedReceiver , new IntentFilter ( ACTION_COLOR_EXTRACTED ) ) ; }
public static void apply ( View view , @ Font int type ) { apply ( view , getFont ( type ) ) ; }
public void stopPlaying ( ) { Log . v ( TAG , "Stop playing" ) ; cancelNotification ( ) ; cardPlayerContext . getState ( ) . transition ( cardPlayerContext , CardPlayerMessage . STOP_PLAYING ) ; }
public boolean onKeyDown ( final int keyCode , final KeyEvent event ) { if ( keyCode == KeyEvent . KEYCODE_BACK && event . getRepeatCount ( ) == 0 ) { finishActivity ( ) ; } return super . onKeyDown ( keyCode , event ) ; }
public String getModel ( ) { return mModel ; }
public void onLongPress ( MotionEvent event ) { pageController . handleTouchEvent ( event , AyahSelectedListener . EventType . LONG_PRESS , pageNumber ) ; }
public ArrayList < ColorLevel > getColorLevels ( ) { return colorDefined ( ) ; }
public void centerOnRangeOrigin ( @ NonNull Number origin ) { centerOnRangeOrigin ( origin , null , BoundaryMode . AUTO ) ; }
private float getCurrentZoom ( ) { return normalizedScale ; }
public void goToComments ( int accountId , @ NonNull Topic topic ) { PlaceFactory . getCommentsPlace ( accountId , Commented . from ( topic ) , null ) . tryOpenWith ( requireActivity ( ) ) ; }
public Result doWork ( ) { startService ( ) ; Logger . d ( TAG , "Finished doing work ! " ) ; return Result . success ( ) ; }
public void setTextFormatter ( @ Nullable ProgressTextFormatter textFormatter ) { this . mProvidedTextFormatter = textFormatter ; updateText ( ) ; mView . postInvalidate ( ) ; }
private double calcBasicAAC ( int type , double aac , int carry ) { if ( Arrays . binarySearch ( T2LIST_FIGHT_AIRCRAFTS , type ) < 0 ) { return 0 ; } else { return Math . sqrt ( carry ) * aac ; } }
public void rebootBootloader ( ) { execCommandInternally ( ShellCommandHelper . getRebootBootloader ( ) , false ) ; FirebaseAnalytics . getInstance ( this ) . logEvent ( FirebaseEvents . SHELL_COMMAND_REBOOT_BOOTLOADER , null ) ; }
public void run ( ) { String res = Statusgo . hashTypedDataV4 ( data ) ; callback . invoke ( res ) ; }
private void createLayout ( ) { setMainTabLayout ( ) ; setTabLayout ( ) ; setViewPager ( ) ; fillStats ( ) ; }
private void subscribeUISelectedAssignment ( ) { Observer < MoodleAssignment > selectedAssignmentObserver = moodleAssignment -> { if ( moodleAssignment != null ) { displaySelectedAssignment ( moodleAssignment ) ; } } ; moodleViewModel . getSelectedAssignment ( ) . observe ( this , selectedAssignmentObserver ) ; }
public void onClick ( View v ) { parentFragment . onClickOperationButton ( Constants . EQUAL ) ; }
public void openSettings ( ) { Intent intent = new Intent ( this , PreferencesActivity_ . class ) ; startActivity ( intent ) ; }
public void onBindViewHolder ( @ NonNull TestViewHolder holder , int position ) { throw new IllegalStateException ( "not implemented" ) ; }
public float getMorningWeight ( ) { return morningWeight ; }
public void run ( ) { currentFetchPhotosCall = yelpService . fetchRestaurantPhotos ( restaurant . getId ( ) ) ; currentFetchPhotosCall . enqueue ( new FetchRestaurantInfoCallback ( ) ) ; }
public void setFgValue ( String fgValue ) { Log . d ( Service . TAG , "Current FG value : " + fgValue ) ; this . fgValue = ( fgValue . isEmpty ( ) ) ? DEFAULT_FG : fgValue ; }
public void setOnGroupCollapseListener ( @ Nullable OnGroupCollapseListener listener ) { if ( mWrapperAdapter != null ) { mWrapperAdapter . setOnGroupCollapseListener ( listener ) ; } else { mOnGroupCollapseListener = listener ; } }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup viewGroup , int i ) { return ViewHolderItemCategorySmall . create ( viewGroup , context , fragment , this ) ; }
public void onDestroy ( ) { if ( audioPlayer != null ) { audioPlayer . stop ( ) ; } super . onDestroy ( ) ; }
public UnspentOutput getDefaultInstanceForType ( ) { return defaultInstance ; }
public void didFinishLoadingFile ( FileLoadOperation operation , File finalFile ) { if ( delegate != null ) { delegate . fileDidLoaded ( finalFileName , finalFile , finalType ) ; } checkDownloadQueue ( document , webDocument , location , finalFileName ) ; }
public void rebuildAllFragments ( boolean last ) { if ( layersActionBarLayout != null ) { layersActionBarLayout . rebuildAllFragmentViews ( last , last ) ; } else { actionBarLayout . rebuildAllFragmentViews ( last , last ) ; } }
private void initRates ( ) { CurrenciesRate currenciesRate = RealmManager . getSettingsDao ( ) . getCurrenciesRate ( ) ; if ( currenciesRate != null ) { rates . setValue ( currenciesRate ) ; } }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; if ( placeDetailsFrag != null ) context . getSupportFragmentManager ( ) . putFragment ( outState , FRAG_PLACE_DETAILS_ID , placeDetailsFrag ) ; }
public boolean isLoading ( ) { verifyApplicationThread ( ) ; return player . isLoading ( ) ; }
public boolean remoteConnected ( ) { return true ; return is_connected ; }
public com . openwallet . core . protos . Protos . DeterministicKeyOrBuilder getDeterministicKeyOrBuilder ( ) { if ( deterministicKeyBuilder_ != null ) { return deterministicKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return deterministicKey_ ; } }
public Builder setTextColor ( Integer color ) { this . textColor = color ; return this ; }
public int getRepeatLimit ( ) { return repeatLimit ; }
public void setViewModel ( BaseViewModel viewModel ) { this . viewModel = ( LoginActivityVM ) viewModel ; LoginActivityBinding binding = DataBindingUtil . setContentView ( this , R . layout . login_activity ) ; binding . setViewModel ( this . viewModel ) ; }
private void setUsernameSuggestions ( List < String > suggestions ) { mUsernamesAdapter = new UsernameChangerRecyclerViewAdapter ( getActivity ( ) , suggestions ) ; mUsernamesAdapter . setOnUsernameSelectedListener ( BaseUsernameChangerFullScreenDialogFragment . this ) ; mUsernamesAdapter . setSelectedItem ( mUsernameSelectedIndex ) ; mUsernameSuggestions . setAdapter ( mUsernamesAdapter ) ; }
private void loadReferenceOverlay ( ) { if ( referenceLayerFile != null ) { addMbtiles ( referenceLayerFile . getName ( ) , referenceLayerFile ) ; } }
public boolean delete ( ) { for ( Jump jump : this . getJumps ( ) ) { jump . setGearId ( null ) ; jump . save ( ) ; } return super . delete ( ) ; }
public static String getPathFromBookId ( int bookId , @ NonNull Context context , boolean journal ) { return StorageUtils . getIslamicLibraryShamelaBooksDir ( context ) + File . separator + bookId + " . " + ( journal ? DATABASE__JOURNAL_EXTENSION : DATABASE_EXTENSION ) ; }
public int getKanjiElementId ( ) { return kanjiElementId ; }
public SharedPreferences getDefaultSharedPref ( ) { return getSharedPreferences ( AHC . SP_APP , Context . MODE_PRIVATE ) ; }
public String getNationalOnly ( ) { if ( mPhoneNumber == null ) { return "" ; } return Long . toString ( mPhoneNumber . getNationalNumber ( ) ) ; }
public void computeHighlightPosts ( ClusterLayersSettings layerSettings ) { if ( clusters == null ) return ; for ( Cluster cluster : clusters ) { cluster . computeHighlightPosts ( this , layerSettings ) ; } }
public Board processNetworkResponse ( String response ) { try { BoardParser parser = new BoardParser ( ) ; return parser . parse ( response ) ; } catch ( Exception e ) { Utils . printException ( e ) ; return null ; } }
public boolean getIsGroup ( ) { return isCategory ; }
public void setOnChangeListener ( OnChangedListener listener ) { mListener = listener ; }
public void onBeginningOfSpeech ( ) { LogUtil . d ( TAG , "onBeginningOfSpeech : " ) ; }
public void setStartAngle ( @ FloatRange ( from = 0f , to = 360f ) float startAngle ) { startAngle ( startAngle ) ; postInvalidate ( ) ; }
public void setUpPresenter ( ) { MockitoAnnotations . initMocks ( this ) ; mAuthPresenter = new AuthPresenter ( mView ) ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; view . setBackgroundResource ( Themer . getThemedResourceId ( getActivity ( ) , android . R . attr . colorBackground ) ) ; }
public int getCount ( ) { return 31 ; }
private void parse ( ) { mProgressBar . setProgress ( DEFAULT_PROGRESS ) ; mReadabilityClient . parse ( mItem . getId ( ) , mItem . getUrl ( ) , new ReadabilityCallback ( this ) ) ; }
public void reload ( ) { loaderManager . restartLoader ( ManagerUtils . ID_SEARCH_LOADER , null , this ) ; }
public void testSafeToAddAuthToken18 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURI ( WPCOM_ADDRESS_4 ) ) ) ; }
public void run ( ) { MathBrainerRepository repository = ( ( SingletonProvider ) SingletonProvider . getsContext ( ) ) . getRepository ( ) ; repository . incrementGameResult ( gameResultsName ) ; }
public StringHolder ( CharSequence text ) { super ( text ) ; }
private void init ( ) { setHasFixedSize ( false ) ; setLayoutManager ( new AgendaLinearLayoutManager ( getContext ( ) ) ) ; addItemDecoration ( new DividerItemDecoration ( getContext ( ) ) ) ; setItemAnimator ( null ) ; }
public static AqiApiKeyInterceptor create ( ) { return new AqiApiKeyInterceptor ( ) ; }
public void onResume ( ) { super . onResume ( ) ; ppF = new PreProcessorFactory ( this ) ; mAddPersonView . enableView ( ) ; }
private OnClickListener mScrollButtonListener = new OnClickListener ( ) { @ Override public void onClick ( View v ) { stopScrolling ( ) ; setSelection ( binding . messagesView . getCount ( ) - 1 , true ) ; } } ;
public void shouldNotPassValidation_invalidMiddleName ( ) { patient . getName ( ) . setMiddleName ( INVALID_NAME_3 ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public void closeDrawers ( ) { if ( isCurrentlyLocked ( ) ) return ; super . closeDrawers ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { emailAuthor ( getString ( R . string . app_name ) , getString ( R . string . share_text ) ) ; }
public int compare ( PackageInfo p1 , PackageInfo p2 ) { return Long . toString ( p2 . firstInstallTime ) . compareTo ( Long . toString ( p1 . firstInstallTime ) ) ; }
public String getName ( ) { return "Autostart" ; }
public Double getMassa ( ) { return massa ; }
private void resolveUserInfoViews ( ) { if ( isGuiReady ( ) ) { getView ( ) . displayUserInfo ( currentBanned ( ) ) ; } }
public void onResume ( ) { super . onResume ( ) ; getActivity ( ) . registerReceiver ( mFinishedCalculatingExtremaValueReceiver , mFinishedCalculatingExtremaValueFilter ) ; }
public BaseItemAnimationManager ( @ NonNull BaseItemAnimator itemAnimator ) { mItemAnimator = itemAnimator ; mPending = new ArrayList <> ( ) ; mActive = new ArrayList <> ( ) ; mDeferredReadySets = new ArrayList <> ( ) ; }
public void notifyGroupItemChanged ( int groupPosition ) { mWrapperAdapter . notifyGroupItemChanged ( groupPosition , null ) ; }
public String getApiBaseUrl ( ) throws AccountDeletedException { return accountPropertiesRW . getResource ( AccountProperty . API_BASE_URL , String . class ) ; }
public void setSecondaryProgressTintMode ( @ Nullable PorterDuff . Mode tintMode ) { logProgressBarTintWarning ( ) ; setSupportSecondaryProgressTintMode ( tintMode ) ; }
public Loader < List < AbstractTransaction >> onCreateLoader ( int id , Bundle args ) { return new AbstractTransactionsLoader ( getActivity ( ) , pocket ) ; }
public void onSuccess ( ) { Log . v ( TAG , "set key success" ) ; conn . getManager ( ) . broadcastUpdateStringList ( BluetoothEvents . BT_EVENT_DEVICE_SET_KEYS_SUCCESS , new ArrayList < String > ( ) ) ; }
public Single < List < Event >> getByTagId ( @ NonNull String tagId ) { return localRepository . getByTagId ( tagId ) ; }
private static Drawable getFolderIcon ( Context c ) { return c . getDrawable ( R . drawable . ic_item_folder ) ; }
public Address getSender ( ) { return sender ; }
public void onClick ( final View view ) { onBackPressed ( ) ; }
public GetContactNamesTask ( OnContactLoadingComplete listener , ContentResolver cr ) { super ( ) ; this . listener = listener ; this . cr = cr ; }
public Fragment getFragment ( int item ) { return ( Fragment ) mViewPagerAdapter . instantiateItem ( mViewPager , item ) ; }
public Item getItem ( int index ) { if ( items != null ) { return items . get ( index ) ; } else { return null ; } }
public Builder inetAddress ( InetAddress inetAddress ) { this . inetAddress = inetAddress ; return this ; }
public void onComplete ( @ NonNull Task < AuthResult > task ) { if ( task . isSuccessful ( ) ) { initSynchronizedSetting ( ) ; } else { mPasswordView . setError ( getString ( R . string . error_firebase_db ) ) ; } }
public void setV ( Double v ) { this . v = v ; }
public void navigateToTagsEdit ( Context context , TagViewModel tag ) { if ( context != null ) { Intent intentToLaunch = TagEditActivity . getCallingIntent ( context , tag ) ; context . startActivity ( intentToLaunch ) ; } }
private String getHighlightColor ( ) { return colorHelper . getColorResourceAsHexCode ( R . color . color_primary ) ; }
private void loadNextDataFromApi ( int page ) { if ( presenter != null ) { presenter . getMoreSellerPageProductData ( sellerId , page ) ; } }
public MapObjectLayer ( Map map , float scale ) { super ( map ) ; mRenderer = new MapObjectRenderer ( scale ) ; EventBus . getDefault ( ) . register ( mRenderer ) ; }
public boolean containsSession ( SignalProtocolAddress address ) { return mXmppConnectionService . databaseBackend . containsSession ( account , address ) ; }
public boolean isVariable ( ) throws ExpressionFormatException { if ( atomType != Atom . AtomType . INVALID ) { return expression . isVariable ( ) ; } else { throw new ExpressionFormatException ( "Number is Invalid , cannot parse" ) ; } }
public void processFinLegacy ( Element fin , Jid from ) { Query query = findQuery ( fin . getAttribute ( "queryid" ) ) ; if ( query != null && query . validFrom ( from ) ) { processFin ( query , fin ) ; } }
public boolean fire ( ) { if ( fireButton . isFire ( ) ) { fireButton . turnOffFire ( ) ; return true ; } return false ; }
public PlacesAutoCompleteAdapter ( Context context , int textViewResourceId ) { super ( context , textViewResourceId ) ; ioFacade = new ExploreHttpFacadeImpl ( context ) ; }
public void show ( ) { MsgManager manager = MsgManager . obtain ( mActivity ) ; manager . add ( this ) ; }
public void onConfigured ( @ NonNull CameraCaptureSession session ) { cameraCaptureSession = session ; if ( cameraCallback != null ) { cameraCallback . onCameraReady ( ) ; } }
public String getParentPermlink ( ) { return parent_permlink ; }
public void bind ( @ NonNull Highlight highlight , @ NonNull BookPartsInfo bookPartsInfo ) { bind ( highlight , bookPartsInfo , null , null ) ; }
public String toString ( ) { return Localization . get ( "command . common . value . floatValue . string" ) ; }
public void setEmail ( String email ) { this . email = email ; }
public AnimCheckBox ( Context context ) { this ( context , null ) ; }
public long getCategoryId ( ) { return mCategoryId ; }
public void getUserParticipateVoteList ( int offset , @ NonNull User user ) { getVoteList ( offset , EventBusManager . RemoteServiceEvent . GET_VOTE_LIST_HISTORY_PARTICIPATE , user ) ; }
public void onConfirm ( PaymentRequestParametersDialog dialog , String description , Option < MilliSatoshi > amount ) { this . lightningDescription = description ; this . lightningAmount = amount ; this . lightningUseDefaultDescription = false ; dialog . dismiss ( ) ; generatePaymentRequest ( ) ; }
public void onResume ( ) { mGoogleApiClient . connect ( ) ; super . onResume ( ) ; }
public void onOpenChest ( ) { for ( OnSomethingHappenedListener listener : new ArrayList <> ( listeners ) ) { listener . onOpenChest ( ) ; } }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { final LayoutInflater inflater = LayoutInflater . from ( parent . getContext ( ) ) ; return new ImportDataAdapter . ViewHolder ( inflater . inflate ( R . layout . import_item_data , parent , false ) ) ; }
private void whenCheckingIfHasPermission ( ) { mHasPermission = uut . hasPermission ( ) ; }
public NavDrawerHeaderView ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; initView ( context ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_main_tab , menu ) ; return true ; }
public DataModule ( CinemaHost cinemaHost , String theMovieDatabaseBaseUrl ) { mCinemaHost = cinemaHost ; mTheMovieDatabaseBaseUrl = theMovieDatabaseBaseUrl ; }
public LinesViewModel ( String apiKey ) { compositeDisposable = new CompositeDisposable ( ) ; repository = new ZtmApiRepository ( apiKey ) ; isResult = new MutableLiveData <> ( true ) ; }
public static int getInt ( PrefKey key ) { return getInt ( key , 0 ) ; }
public void onAnimationEnd ( Animator animation ) { windowAnimatorSet = null ; setFocusable ( false ) ; try { ActionBarPopupWindow . super . dismiss ( ) ; } catch ( Exception ignore ) { } unregisterListener ( ) ; }
private double sqyardTohectare ( double num ) { return num * 0 . 0000836127d ; }
public IBaseItemSmall getItem ( int position ) { return itemList . get ( position ) ; }
public void onNext ( String s ) { Book book = createBookToAdd ( s ) ; uploadBookCall ( book ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; text . serializeToStream ( stream ) ; stream . writeString ( language ) ; }
public void stop ( ) { if ( ! listeners . isEmpty ( ) ) { Log . w ( providerName ( ) , "Stopping location service , but listeners are still listening" ) ; } }
private synchronized CurrentState updateState ( State state , Workflow workflow ) { return updateState ( state , workflow , null ) ; }
private void displaySortingOptions ( ) { DialogFragment sortingDialogFragment = SortingDialogFragment . newInstance ( moviesPresenter ) ; sortingDialogFragment . show ( getFragmentManager ( ) , "Select Quantity" ) ; }
public @ Nullable byte [ ] getProfileKey ( ) { return profileKey ; }
public Builder withMetadata ( String metadata ) { this . metadata = metadata ; return this ; }
public int getItemCount ( ) { return leaderBoardObjs . size ( ) ; }
private void setAnimation ( View viewToAnimate , int position ) { if ( position > lastPosition ) { Animation animation = AnimationUtils . loadAnimation ( context , android . R . anim . slide_in_left ) ; viewToAnimate . startAnimation ( animation ) ; lastPosition = position ; } }
public static RepositoryEventListFragment newInstance ( Repository repository ) { RepositoryEventListFragment f = new RepositoryEventListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putParcelable ( "repository" , repository ) ; f . setArguments ( args ) ; return f ; }
public void onDestroy ( ) { Log . d ( "Engine_Driver" , "gamepad_test . onDestroy ( ) called" ) ; if ( tg != null ) { tg . release ( ) ; } super . onDestroy ( ) ; }
public void setUserId ( int userId ) { this . userId = userId ; }
public synchronized @ Nullable Uri getContactUri ( ) { return this . contactUri ; }
public Loader < Cursor > onCreateLoader ( int id , Bundle args ) { return new CursorLoader ( mActivity , CONTENT_URI_COCKTAIL_GLASS , null , null , null , null ) ; }
public List < Song > getSongs ( @ NonNull Context context ) { return LastAddedLoader . getLastAddedSongs ( context ) ; }
private SavedState ( Parcel in ) { super ( in ) ; this . mIsFocused = ( in . readInt ( ) == 1 ) ; }
public SyncEntry convertToMapped ( Class < ? extends SyncEntry > type , String value ) { return value == null ? null : SyncEntry . Companion . fromJson ( value ) ; }
public boolean onKeyUp ( int keyCode , KeyEvent event ) { if ( keyCode == KeyEvent . KEYCODE_MENU ) { toggleDrawer ( ) ; } return super . onKeyUp ( keyCode , event ) ; }
private void setUpRecyclerView ( ) { final NewsListAdapter adapter = new NewsListAdapter ( this , this ) ; recyclerBookmarksList . setAdapter ( adapter ) ; recyclerBookmarksList . getLayoutManager ( ) . onRestoreInstanceState ( mRecyclerBookmarksListState ) ; recyclerBookmarksList . setHasFixedSize ( true ) ; }
private ShortcutInfo getShortcutForFileType ( ) { return getShortcut ( SHORTCUT_FILE_ID , R . string . common_file , R . drawable . ic_shortcut_file , ACTION_START_WITH_FILE ) ; }
public boolean supportsLayer ( File file ) { return MbtilesFile . readLayerType ( file ) == LayerType . RASTER ; }
public boolean presentFragment ( BaseFragment fragment , boolean removeLast ) { return presentFragment ( fragment , removeLast , false , true , false ) ; }
public X509Certificate [ ] getAcceptedIssuers ( ) { Timber . d ( "Issuers : " ) ; return new X509Certificate [ ] { cert } ; }
public static boolean isScheduled ( Context context ) { return ( PendingIntent . getBroadcast ( context , Constants . REGULAR_REMINDER_REQUEST_CODE , getAlarmIntent ( context ) , PendingIntent . FLAG_NO_CREATE ) != null ) ; }
public void displayChildrenOf ( @ NonNull Title title ) { mShouldHighlightCurrent = false ; changeCursor ( bookDatabaseHelper . getTitlesUnder ( title . id ) ) ; }
public void setAttackTime ( float time ) { if ( time < MIN_TIME ) time = MIN_TIME ; mAttackRate = 1 . 0f / ( mSamplerate * time ) ; }
public int getKat ( ) { return this . _kat ; }
public boolean onNavigationItemSelected ( @ NonNull MenuItem item ) { return displayFragment ( item . getItemId ( ) ) ; }
public void setActionValue ( int actionValue ) { _actionValue = actionValue ; }
public boolean onCabFinished ( MaterialCab materialCab ) { setStatusbarColor ( ColorUtil . withAlpha ( toolbarColor , toolbarAlpha ) ) ; return callback . onCabFinished ( materialCab ) ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; mEditItemPresenter = new EditItemPresenter ( mView , mRepository , mImageFile , USER_ID ) ; }
public RxBus getBus ( ) { return bus ; }
public void onAnimationUpdate ( ValueAnimator animator ) { toast = ( float ) animator . getAnimatedValue ( ) ; }
public void onBindViewHolder ( @ NonNull MyViewHolder holder , int position ) { MyItem item = mItems . get ( position ) ; holder . textView . setText ( item . text ) ; }
public static void logout ( @ NonNull Fragment fragment , int requestCode ) { Intent intent = new Intent ( fragment . getActivity ( ) , LoginActivity . class ) ; intent . setAction ( ACTION_SIGN_OUT ) ; fragment . startActivityForResult ( intent , requestCode ) ; }
private XmppAxolotlSession recreateUncachedSession ( SignalProtocolAddress address ) { IdentityKey identityKey = axolotlStore . loadSession ( address ) . getSessionState ( ) . getRemoteIdentityKey ( ) ; return ( identityKey != null ) ? new XmppAxolotlSession ( account , axolotlStore , address , identityKey ) : null ; }
public void setRooms ( @ Nullable final RealmList < String > rooms ) { this . rooms = rooms ; }
public void setAudioId ( long audioId ) { this . audioId = audioId ; }
public double getBtcDoubleValue ( ) { return balance . equals ( "0" ) ? 0 : ( getBalanceNumeric ( ) . divide ( BtcWallet . DIVISOR , 8 , BigDecimal . ROUND_FLOOR ) ) . doubleValue ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return Updates . TLdeserialize ( stream , constructor , exception ) ; }
public void takePicture ( ) { sendMessage ( What . TAKE_PICTURE , 0 , 0 , null , 0 ) ; }
public void setMembers ( Jid [ ] members ) { mMembers = members ; }
public static LocalDB get ( Context context ) { if ( instance == null ) { instance = Room . databaseBuilder ( context , LocalDB . class , DB_NAME ) . fallbackToDestructiveMigration ( ) . build ( ) ; } return instance ; }
public void onServicesDiscovered ( BluetoothGatt gatt , int status ) { if ( status == BluetoothGatt . GATT_SUCCESS ) { broadcastUpdate ( ACTION_SERVICES_DISCOVERED ) ; } else { Log . w ( TAG , "onServicesDiscovered received : " + status ) ; } }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; init ( ) ; }
public void handleRecordingUpdate ( final boolean isComplete ) { if ( ! isComplete ) { if ( ! Config . canRecord ( ) ) { _mwengine . setRecordingState ( false , "" ) ; requestRecordingSave ( false ) ; } } else { requestRecordingSave ( true ) ; } }
public String getContainerDateInUse ( ) { return container_date_in_use ; }
public RevealBackgroundView ( @ NonNull Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; }
public void run ( ) { try { database . beginTransaction ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public FileModelBuilder countAudio ( int countAudio ) { this . mCountAudio = countAudio ; return this ; }
public @ NonNull Object instantiateItem ( ViewGroup container , int position ) { Object item = super . instantiateItem ( container , position ) ; if ( item instanceof Fragment ) { mFragmentMap . put ( position , ( Fragment ) item ) ; } return item ; }
public SavedState createFromParcel ( Parcel in ) { return new SavedState ( in , null ) ; }
private static int parseInt ( String s , int preset ) { try { if ( s != null && s . length ( ) > 0 ) { return Integer . parseInt ( s ) ; } } catch ( NumberFormatException e ) { } return preset ; }
public void onRefresh ( ) { PointConnectionManager manager = PointConnectionManager . getInstance ( ) ; if ( manager . isAuthorized ( ) ) { update ( ) ; } }
public void onBindViewHolder ( RecyclerView . ViewHolder holder , int position ) { NewsHolder newsHolder = ( NewsHolder ) holder ; News current = data . get ( position ) ; newsHolder . bindViews ( current . getTitle ( ) , current . getImage ( ) ) ; }
public void resetPaint ( ) { init ( ) ; setColor ( mCurColor ) ; invalidate ( ) ; }
public Instant getTime ( ) { return time ; }
public void setApparentTemperatureMinTime ( Integer apparentTemperatureMinTime ) { this . apparentTemperatureMinTime = apparentTemperatureMinTime ; }
public int getSpamIconColor ( ) { return 0xffff6e00 ; }
public void onPageSelected ( int position ) { enableIndicator ( position ) ; if ( position == adapter . getCount ( ) - 1 ) { viewModel . setIsLastPage ( true ) ; } else { viewModel . setIsLastPage ( false ) ; } }
public boolean dispatchNestedPreFling ( float velocityX , float velocityY ) { return getScrollingChildHelper ( ) . dispatchNestedPreFling ( velocityX , velocityY ) ; }
public static int getDnsQueryMethod ( ) { return Integer . parseInt ( Daedalus . getPrefs ( ) . getString ( "settings_dns_query_method" , "0" ) ) ; }
private void savePreferences ( SharedPreferences sharedPreferences , String key , int value ) { SharedPreferences . Editor preferencesEditor = sharedPreferences . edit ( ) ; preferencesEditor . putInt ( key , value ) ; preferencesEditor . apply ( ) ; }
public Double getC6h6 ( ) { return c6h6 ; }
public static < T > FindMultiExecutor < T > findAllAsync ( Class < T > modelClass , long . . . ids ) { return findAllAsync ( modelClass , false , ids ) ; }
private void setUpViews ( ) { fillViewsWithFileTags ( ) ; albumTitle . addTextChangedListener ( this ) ; albumArtist . addTextChangedListener ( this ) ; genre . addTextChangedListener ( this ) ; year . addTextChangedListener ( this ) ; }
public boolean getUseDeveloperSupport ( ) { return com . neurodoro . BuildConfig . DEBUG ; }
public void onResume ( ) { super . onResume ( ) ; ( ( MainNeoActivity ) getActivity ( ) ) . mFragment = this ; }
public final void setEndDate ( final GregorianCalendar parEndDate ) { mEndDate = parEndDate ; }
public void onClick ( View v ) { songsUtils . addToPlaylist ( songsUtils . queue ( ) . get ( sharedPrefsUtils . readSharedPrefsInt ( "musicID" , 0 ) ) ) ; }
public void flowInterrupt ( long workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { getMvpView ( ) . showProgress ( false ) ; }
public void fabMenuClick ( ) { CloseFabMenu ( ) ; }
public int getItemCount ( ) { return ingredients . size ( ) ; }
private void onSliderChanged ( float percent ) { setIntValue ( mMin + ( int ) ( percent * ( mMax - mMin ) ) ) ; fireChangeEvent ( ) ; }
private ConnectivityDetector ( Context context ) { this . mContext = context . getApplicationContext ( ) ; }
public void onItemPinned ( int position ) { ( ( DraggableSwipeableExampleActivity ) getActivity ( ) ) . onItemPinned ( position ) ; }
public void screenshot ( Context context ) { if ( prefManager . getShowCountDown ( ) ) { screenshotShowCountdown ( context ) ; } else { screenshotHiddenCountdown ( context , false , false ) ; } }
public TextSizeScale getTextSizeScale ( ) { return textSizeScale ; }
public boolean pep ( ) { synchronized ( XmppConnection . this . disco ) { ServiceDiscoveryResult info = disco . get ( account . getJid ( ) . asBareJid ( ) ) ; return info != null && info . hasIdentity ( "pubsub" , "pep" ) ; } }
public void onNothingSelected ( AdapterView < ? > adapterView ) { Log . d ( LOGCAT_TAG , "Nothing selected" ) ; }
public void setActualValue ( String actualValue ) { this . mActualValue = actualValue ; }
public void closeFile ( String tempFilename ) throws ConversionException { boolean error = zipWriter . close ( ) ; if ( error ) { throw new ConversionException ( ConversionStatus . CANNOT_WRITE_EPUB ) ; } }
private int loadBgColorDefaultPref ( ) { SharedPreferences prefs = getSharedPreferences ( PREFS_NAME , MODE_PRIVATE ) ; return prefs . getInt ( PREF_BG_COLOR_DEFAULT_PREFIX_KEY , Color . BLACK ) ; }
public void setHiddenAppsList ( ArrayList < String > value ) { setStringList ( R . string . pref_key__hidden_apps , value ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return context . getString ( R . string . section_tags ) ; case 1 : return context . getString ( R . string . section_latest ) ; default : return "" ; } }
public void onClick ( View view ) { startActivity ( new Intent ( MainActivity . this , CadastroActivity . class ) ) ; }
public boolean onTouch ( View v , MotionEvent event ) { mScaleGestureDetector . onTouchEvent ( event ) ; mDragGestureDetector . onTouchEvent ( event ) ; if ( mOuterTouchListener != null ) mOuterTouchListener . onTouch ( v , event ) ; return true ; }
public static int toInt ( Enumerations . Arcana arcana ) { if ( arcana == null ) { return 0 ; } return arcana . value ( ) ; }
private void maybeForceBuilderInitialization ( ) { if ( com . google . protobuf . GeneratedMessage . alwaysUseFieldBuilders ) { getSeedFieldBuilder ( ) ; getMasterKeyFieldBuilder ( ) ; getEncryptionParametersFieldBuilder ( ) ; getPocketsFieldBuilder ( ) ; } }
public void onRefresh ( ) { clearNewsCache ( ) ; loadNews ( ) ; }
public void onConverterSaved ( boolean saved ) { mView . setConverterSavingIndicator ( false ) ; if ( closeEditor ) mView . showPreviousView ( ) ; mInitialConverterName = mCurConverterName ; mHaveUnsavedChanges = false ; }
public boolean isViewFromObject ( @ NonNull View view , @ NonNull Object key ) { return key == view ; }
public void updateCollectionVisibility ( @ NonNull BooksCollection booksCollection , boolean isVisible ) { UserDataDBHelper . getInstance ( context ) . changeCollectionVisibility ( booksCollection . getCollectionsId ( ) , isVisible ) ; if ( bookCollectionsControllerCallback != null ) { bookCollectionsControllerCallback . notifyCollectionVisibilityChanged ( booksCollection , isVisible ) ; } }
public float getCarbs ( ) { return carbs ; }
public boolean isUnfolded ( ) { return state == STATE_UNFOLDED ; }
private void downloadPlaces ( ) { showTaskInProgress ( ) ; ExploreHttpFacade ioFacade = new ExploreHttpFacadeImpl ( getActivity ( ) ) ; ioFacade . getPlaces ( placeType , nextPageToken ) ; }
public Maze ( ) { setNumberOfDecks ( 1 ) ; setNumberOfStacks ( ROWS * COLS ) ; setDealFromID ( 0 ) ; setLastTableauID ( ROWS * COLS - 1 ) ; setDiscardStackIDs ( ROWS * COLS ) ; }
public void onServiceDisconnected ( ComponentName name ) { mService = null ; }
public static Observable < MobileApi . Result < List < HotComment >>> hotComment ( ) { long timestamp = System . currentTimeMillis ( ) ; return sMobileApi . hotComment ( timestamp , CnBetaSignUtil . hotCommentSign ( timestamp ) ) ; }
public void onViewStop ( ) { TimeManager . INSTANCE . removeListener ( timeManagerListener ) ; getView ( ) . hideSoftKeyboardAndClearEditFocus ( ) ; }
public void onLoadMore ( int page , int totalItemsCount , RecyclerView view ) { presenter . onLoadMore ( page ) ; }
public void onClick ( View view ) { loader . setWallpaper ( image . getPath ( ) ) ; loader . setType ( WallpaperManager . FLAG_LOCK ) ; loader . execute ( ) ; mBottomSheetDialog . dismiss ( ) ; }
public static int minutesUntil ( Date date ) { if ( date == null ) { return 0 ; } long diff = date . getTime ( ) - new Date ( ) . getTime ( ) ; return ( int ) ( diff / 60000 ) ; }
public void notifyTabViewAdded ( ) { Log . d ( TAG , "Notify Tab Added" ) ; mTabsView . tabAdded ( ) ; }
public void onTouchEvent ( RecyclerView view , MotionEvent event ) { }
public void onGmsConnectionResultResolutionRequired ( ConnectionResult connectionResult ) { IntentUtil . startGmsConnectionResultForResolution ( this , connectionResult , REQUEST_CODE_UNHANDLED ) ; }
public void onEvent ( OnWifiUpdateCompleted event ) { if ( TinyTimeTracker . currentTracker == null ) return ; if ( event . success && TinyTimeTracker . currentTracker . equals ( event . tracker ) ) { updateStatisticalValues ( event . tracker ) ; } }
public void showFullSearchInPlatesSection ( Cursor cursor ) { if ( searchPlatesFragment . isViewCreated ( ) ) { isFullySearched = true ; searchPlatesFragment . setData ( cursor ) ; searchPlatesFragment . showList ( ) ; searchPlatesFragment . showFullHeaders ( cursor . getCount ( ) ) ; } }
public void notifyQuerySettingChanged ( ) { loadRealm ( ) ; adapter_ . notifyDataSetChanged ( ) ; }
public String getSummary ( ) { return binding . taskSummary . getText ( ) . toString ( ) . trim ( ) ; }
public void setData ( List < TagViewModel > data ) { showTags ( data ) ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `identity` ADD COLUMN `sender_extra` INTEGER NOT NULL DEFAULT 0" ) ; }
public void run ( ) throws Exception { storageLogic . updateAsync ( recipe , event . action ) ; }
public void success ( Repository result ) { mBus . post ( new RepositoryDownloadedEvent ( item ) ) ; }
public void onRender ( Canvas canvas , RectF plotArea , Series series , Formatter formatter , RenderStack stack ) { }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { context = parent . getContext ( ) ; View rootView = LayoutInflater . from ( context ) . inflate ( R . layout . movie_grid_item , parent , false ) ; return new ViewHolder ( rootView ) ; }
public static PollEntity . Answer mapAnswer ( Poll . Answer answer ) { return new PollEntity . Answer ( answer . getId ( ) , answer . getText ( ) , answer . getVoteCount ( ) , answer . getRate ( ) ) ; }
public void testCorrectParsedType ( ) { List < ListItem > data = DatafeedTestDriver . getParsedData ( mSubscriber , mPoints ) ; assertTrue ( data instanceof DistrictPointsListSubscriber . Type ) ; }
private void initAutoLaunchPrefs ( ) { binding . autoLaunchPrefs . setOnClickListener ( mAutoLaunchClick ) ; binding . autoLaunchPrefs . setChecked ( getPrefs ( ) . isAutoLaunchEnabled ( ) ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setRetainInstance ( true ) ; mOweMeAdapter = new OweMeAdapter ( this , new ArrayList <> ( 0 ) ) ; }
public void testGetItemNoListener ( ) { client . getItem ( "1" , ItemManager . MODE_DEFAULT , null ) ; verify ( TestRestServiceFactory . hnRestService , never ( ) ) . itemRx ( any ( ) ) ; }
public static long convertToSystemTime ( long datetime ) { return convertToSystemTime ( datetime , "Europe/Amsterdam" ) ; }
public void testTakePhotoPreviewPausedTrash ( ) throws InterruptedException { Log . d ( TAG , "testTakePhotoPreviewPausedTrash" ) ; setToDefault ( ) ; subTestTakePhotoPreviewPausedShareTrash ( false , false ) ; }
public static AboutDialog getInstance ( ) { return instance ; }
private void updateProgress ( long i ) { this . mProgress = ( int ) i ; mHttpConnectionManager . updateConversationUi ( false ) ; }
public int numKeys ( ) { lock . lock ( ) ; try { maybeLookAhead ( ) ; return simpleKeyChain . numKeys ( ) ; } finally { lock . unlock ( ) ; } }
public void copySelectedMessages ( ) { CharSequence messages = mAdapter . getSelectedMessages ( ) ; ClipboardManager clipboard = ( ClipboardManager ) getContext ( ) . getSystemService ( Context . CLIPBOARD_SERVICE ) ; clipboard . setPrimaryClip ( ClipData . newPlainText ( "IRC Messages" , messages ) ) ; }
public void loadMainScreen ( ) { Intent mainAct = new Intent ( SplashActivity . this , MainActivity . class ) ; startActivity ( mainAct ) ; finish ( ) ; }
public IUser getUser ( ) { return mUser ; }
public void onStart ( ) { Log . d ( logTag , "Starting" ) ; mBitcoin . appIsOpen = true ; startBitcoinService ( ) ; mBitcoin . clearFinishTime ( ) ; scheduleExchangeRateUpdate ( ) ; updateStatus ( ) ; super . onStart ( ) ; }
public void onNewPressed ( View v ) { TriggerEditorDialog editor = new TriggerEditorDialog ( BetterTriggerSelectionDialog . this . getContext ( ) , null , service , triggerEditorDoneHandler , currentPlugin , mShowWarning ) ; editor . show ( ) ; }
public void flowInterrupt ( long workflowId , OstWorkflowContext ostWorkflowContext , OstError ostError ) { updateCommonCode ( ostWorkflowContext ) ; }
public static ChallengeManagerInterface getInstance ( RestServer server , Context context ) { return new UnusedChallengeManager ( server , true , context ) ; }
public void onClick ( View v ) { int position = getAdapterPosition ( ) ; if ( isValidPosition ( position ) && mListener != null ) { ReaderSiteModel site = mSites . get ( position ) ; mListener . onSiteClicked ( site ) ; } }
public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { if ( animation != Animation . NONE ) { setPosition ( position ) ; currentPageOffset = canShowAnimation ( ) ? 0 : positionOffset ; invalidate ( ) ; } }
public static int getInteger ( @ AttrRes int attr , Context context ) { return context . getResources ( ) . getInteger ( getAttrIdValue ( attr , context ) ) ; }
public void listeProgrammesAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < listeDesProgrammes > ( ) { public listeDesProgrammes Func ( ) throws Exception { return listeProgrammes ( codeAccesUniversel , motPasse ) ; } } ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( new RowView ( parent . getContext ( ) , viewType ) ) ; }
public String getZipFileUrl ( String widthParam ) { String url = IMG_ZIP_BASE_URL ; url += "images" + widthParam + " . zip" ; return url ; }
public void getNewVideosFeed ( ) { queURL ( "javascript : getNewVideosFeed ( null , null ) ; " ) ; }
public ClementineMDnsDiscovery ( Handler handler ) { mConnectActivityHandler = handler ; mServices = new LinkedList <> ( ) ; }
private void onMovieVideoClicked ( int position ) { MovieTrailerEntity video = movieTrailersAdapter . getItem ( position ) ; if ( video != null ) { Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( "http : startActivity ( intent ) ; } }
public void setLat ( String lat ) { this . lat = lat ; }
public static void setReaderSubsPageTitle ( String pageTitle ) { setString ( DeletablePrefKey . READER_SUBS_PAGE_TITLE , pageTitle ) ; }
public String getMessage ( Context context , Vm vm ) { return context . getResources ( ) . getString ( R . string . vm_cpu_message , vm . getName ( ) , getPercentageLimit ( ) , vm . getAverageCpuUsage ( ) ) ; }
public void testThatTopLeftGTPCoordinateIsValidInAnotherBoardSize ( ) throws Exception { final String tested = GTPHelper . coordinates2gtpstr ( new CellImpl ( 0 , 0 ) , 9 ) ; assertThat ( tested ) . isEqualTo ( "A9" ) ; }
public static Ping onAddress ( String address ) { Ping ping = new Ping ( ) ; ping . setAddressString ( address ) ; return ping ; }
public static Model getModel ( String uid , FragmentActivity activity ) { return ViewModelProviders . of ( activity , new TopWalletEntriesStatisticsViewModelFactory ( uid ) ) . get ( Model . class ) ; }
public int compareTo ( @ NonNull final ListItem another ) { return this . getDisplayName ( ) . compareToIgnoreCase ( another . getDisplayName ( ) ) ; }
public static String fontSize ( Context context ) { return getDefaultSharedPreferences ( context ) . getString ( context . getResources ( ) . getString ( R . string . pref_key_font_size ) , context . getResources ( ) . getString ( R . string . pref_default_font_size ) ) ; }
private void sendPostToSteemBlockChain ( ) { showPublishingProgressDialog ( true , "Publishing . . . " ) ; steemPostCreator . createPost ( body , title , images , tags , generated_permalink ) ; }
public int getItemCount ( ) { return video . size ( ) ; }
public static Observable < MobileApi . Result < List < Topic >>> topics ( ) { long timestamp = System . currentTimeMillis ( ) ; return sMobileApi . topics ( timestamp , CnBetaSignUtil . topicsSign ( timestamp ) ) ; }
private static DateTime getEpoch ( ) { return DateTime . forInstant ( 0 , TimeZone . getDefault ( ) ) ; }
public void onCreate ( @ NonNull SQLiteDatabase db ) { db . execSQL ( getStudentGroupsCreateQuery ( ) ) ; db . execSQL ( getLessonsCreateQuery ( ) ) ; db . execSQL ( getEmployeesCreateQuery ( ) ) ; }
public boolean onCheckCanStartDrag ( @ NonNull MyViewHolder holder , int position , int x , int y ) { return true ; }
public ArrayList < OCSSection > getSections ( ) { ArrayList < OCSSection > lst = new ArrayList <> ( ) ; for ( OCSSoftware o : softs ) { lst . add ( o . getSection ( ) ) ; } return lst ; }
public void onDismiss ( DialogInterface arg0 ) { if ( MyDebug . LOG ) Log . d ( TAG , "text dialog dismissed" ) ; dialogs . remove ( alert ) ; }
public void setTotalReviews ( Integer totalReviews ) { this . totalReviews = totalReviews ; }
public com . openwallet . core . protos . Protos . TransactionConfidence . Source getSource ( ) { return source_ ; }
public boolean isTrusted ( ) { FingerprintStatus s = conversation . getAccount ( ) . getAxolotlService ( ) . getFingerprintTrust ( axolotlFingerprint ) ; return s != null && s . isTrusted ( ) ; }
public void setCentralMap ( @ NonNull CentralMap centralMap ) { mCentralMap = centralMap ; }
public void run ( ) { mViewPager . setCurrentItem ( ( mViewPager . getCurrentItem ( ) + 1 ) %NUM_PAGES , true ) ; h . postDelayed ( this , 3000 ) ; }
public EventModifiedEvent ( EventViewModel event ) { this . event = event ; }
public void run ( ) { Fragment fragment = mAccountsActivity . getCurrentAccountListFragment ( ) ; ( ( AccountsListFragment ) fragment ) . refresh ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . activity_about , menu ) ; return true ; }
public void onIngredientSelected ( @ NonNull IngredientTemplate ingredientTemplate ) { Intent result = new Intent ( ) ; result . putExtra ( AddMealActivity . EXTRA_INGREDIENT_PARCEL , Parcels . wrap ( ingredientTemplate ) ) ; activity . setResult ( RESULT_OK , result ) ; activity . finish ( ) ; }
public Observation getObsGroup ( ) { return obsGroup ; }
public static String getPatchFileUrl ( String widthParam , int toVersion ) { return PATCH_ZIP_BASE_URL + toVersion + "/patch" + widthParam + "_v" + toVersion + " . zip" ; }
public NewMaintenanceFragment ( ) { }
public boolean isLocationsEnabled ( ) { return androidSharedPreferences . getBoolean ( LOG_LOCATIONS , false ) ; }
public void didSetImage ( ImageReceiver imageReceiver , boolean set , boolean thumb ) { extTextView . setVisibility ( set ? INVISIBLE : VISIBLE ) ; placeholderImageView . setVisibility ( set ? INVISIBLE : VISIBLE ) ; }
private void dropSmState ( ) { smSessionId = null ; unacknowledgedStanzas = null ; }
public void onStickersSettingsClick ( ) { if ( parentFragment != null ) { parentFragment . presentFragment ( new StickersActivity ( MediaDataController . TYPE_IMAGE ) ) ; } }
public void onCommentCreated ( ) { hideProgress ( ) ; requestReplies ( ) ; }
public void onClick ( View view ) { adapterPresenter . onLikeClicked ( post , getAdapterPosition ( ) ) ; }
public double f ( double x ) { this . x = x ; if ( isValid ) { return expression . getValue ( ) ; } else { throw new ExpressionFormatException ( "illegal Expression , cannot parse and return value" ) ; } }
public void getPreviousAnswerTest ( ) { questionPresenter . getQuestion ( ) ; verify ( view ) . setPreviousAnswer ( anyString ( ) ) ; }
public void onRunnerClick ( Context context ) { RunnerActivity . start ( context , mRun . getRun ( ) . getFirstRunner ( ) . getId ( ) ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { mSpecifiedIncident = mIncidentSpinner . getSelectedItem ( ) . toString ( ) ; }
public Uri insert ( @ NonNull Uri uri , ContentValues values ) { throw new UnsupportedOperationException ( "Not yet implemented" ) ; }
public boolean isChildSelectable ( int groupPosition , int childPosition ) { return false ; }
public void onClick ( View view ) { if ( mOnItemClickListener != null ) { mOnItemClickListener . onCommentClicked ( v , view . getTag ( R . id . comment_id ) . toString ( ) ) ; } }
public void onResume ( ) { super . onResume ( ) ; bookCardEventsCallback . mayBeSetTitle ( "" ) ; }
private void UCampusContextInit ( Context context ) { if ( context == null ) return ; if ( UCamConnection . context == null ) UCamConnection . context = context ; }
public InvalidPasswordException ( String str ) { super ( str ) ; }
public ViewGroup getPromptParentView ( ) { return ( ViewGroup ) mActivity . getWindow ( ) . getDecorView ( ) ; }
public void onPhotoPickerHidden ( ) { hideOverlay ( ) ; if ( mEditorFragment instanceof AztecEditorFragment ) { ( ( AztecEditorFragment ) mEditorFragment ) . enableMediaMode ( false ) ; } }
public RefreshTask ( Repository repository , HashMap < String , PingTaskStarter > active , ExecutorService executor ) { mRepository = repository ; mActive = active ; mExecutor = executor ; }
public void onClick ( View v ) { finish ( ) ; startActivity ( new Intent ( BoardActivity . this , MainActivity . class ) ) ; }
private boolean AreMultipliabe ( LegacyMatrix h ) { return this . GetCol ( ) == h . GetRow ( ) ; }
public void setFilterField ( String txt ) { filter_field = txt ; }
private int getTransactionCount ( ) { return mTransactionsDbAdapter . getAllTransactionsForAccount ( TRANSACTIONS_ACCOUNT_UID ) . size ( ) ; }
public void onClick ( View v ) { parentFragment . onClickOperationButton ( Constants . BRACKET_CLOSE ) ; }
public void remove ( LaunchInfo info ) { infos . remove ( info ) ; update ( true ) ; }
public static synchronized MmsRadio getInstance ( Context context ) { if ( instance == null ) instance = new MmsRadio ( context . getApplicationContext ( ) ) ; return instance ; }
public static FitnessRepositoryInterface newInstance ( RestServer server , Context context ) { return new WellnessFitnessRepo ( server , context ) ; }
public void addTextChangedListener ( TextWatcher watcher ) { if ( watcher . equals ( mTextWatcher ) || mTextWatchers == null ) { super . addTextChangedListener ( watcher ) ; } else { mTextWatchers . add ( watcher ) ; } }
public void onClick ( DialogInterface dialog , int which ) { startActivity ( intent ) ; overridePendingTransition ( R . xml . fade_in , R . xml . fade_out ) ; }
public boolean setVolumeKeyEvent ( VolumeKeyEvent keyEvent ) { return this . volumeKeyDevice . setInputEvent ( keyEvent ) ; }
public void testGetCasteDay_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( workersCalendar . getCasteDay ( ) , is ( casteDay ) ) ; }
public SwipeDismissRemoveAnimationInfo ( @ NonNull RecyclerView . ViewHolder holder ) { super ( holder ) ; }
private static String getFilePath ( final String folderName , final String fileName ) { return folderName + "/" + fileName ; }
private StopRequest checkCancel ( ) { return ( Thread . currentThread ( ) . isInterrupted ( ) ? new StopRequest ( STATUS_STOPPED , "Download cancelled" ) : null ) ; }
private void restoreScrollOffsetDelayed ( int delay ) { handler . postDelayed ( new Runnable ( ) { @ Override public void run ( ) { restoreScrollOffset ( ) ; } } , delay ) ; }
private void setAccountTitle ( @ Nullable WalletAccount account ) { if ( account != null ) { title = account . getDescriptionOrCoinName ( ) ; } else { title = "" ; } }
public double distanceTo ( @ NonNull LatLng dest ) { return Geo . distance ( latitude , longitude , dest . latitude , dest . longitude ) ; }
public void bind ( DCCManager . DownloadInfo download ) { mDownload = download ; mSession = null ; mStatusIcon . setImageResource ( R . drawable . ic_file_download_white_16dp ) ; mName . setText ( download . getUnescapedFileName ( ) ) ; updateProgress ( ) ; }
public BMI ( Long id , Double height , Double weight , Double bmi , Date timestamp ) { this . id = id ; this . height = height ; this . weight = weight ; this . bmi = bmi ; this . timestamp = timestamp ; }
private void executeCommand ( ) { inputProcessor . executeCommand ( ( cmdLine . getText ( ) . toString ( ) + "\n" ) . toCharArray ( ) ) ; }
public List < String > getIDs ( ) { List < String > ids = new ArrayList <> ( ) ; for ( Result r : results ) ids . add ( r . getId ( ) ) ; return ids ; }
public RoomSubscription getSubscription ( ) { return subscription ; }
public void clearView ( RecyclerView recyclerView , RecyclerView . ViewHolder viewHolder ) { final View foregroundView = ( ( InquiryViewHolder ) viewHolder ) . viewForeground ; getDefaultUIUtil ( ) . clearView ( foregroundView ) ; }
public void run ( ) { AppDatabase db = AppDatabase . getAppDatabase ( getActivity ( ) ) ; db . medicineDao ( ) . delete ( thismedicine ) ; ( ( MainActivity ) getActivity ( ) ) . switchFragment ( Medicine . newInstance ( ) , false ) ; }
private static String formatUsername ( AccountResult result ) { return String . format ( " @ %s" , result . account . getUsername ( ) ) ; }
public Imperial ( Bitmap bmp , Bitmap bmpHit , boolean isWorthEnemyDestroyedPoint ) { super ( bmp , bmpHit , ShipType . IMPERIAL , isWorthEnemyDestroyedPoint ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; delegate . onDestroyView ( ) ; }
public void migrate ( @ NonNull SupportSQLiteDatabase db ) { Log . i ( "DB migration from version " + startVersion + " to " + endVersion ) ; db . execSQL ( "ALTER TABLE `account` ADD COLUMN `ondemand` INTEGER NOT NULL DEFAULT 0" ) ; }
public DailyDrinkStatisticsImpl ( LocalDate day , double portions , int nDrinks , Context context ) { this . day = day ; this . portions = portions ; this . nDrinks = nDrinks ; this . timeUtil = new TimeUtil ( context ) ; }
public MediaException ( ) { super ( ) ; }
private void logError ( String error ) { if ( EmulatorDebug . LOG_UNKNOWN_ESCAPE_SEQUENCES ) { Log . e ( EmulatorDebug . LOG_TAG , error ) ; } finishSequence ( ) ; }
public void setup ( ) { MockitoAnnotations . initMocks ( this ) ; listBooksPresenter = new ListBooksPresenter ( settingsRepository , bookRepository , analytics , Schedulers . immediate ( ) , Schedulers . immediate ( ) ) ; listBooksPresenter . attachView ( listBookView ) ; }
public void run ( ) { recyclerView . setAdapter ( new FoodAdapter ( FoodActivity . this ) ) ; UTILS . showToast ( FoodActivity . this , getString ( R . string . toast_refreshed ) ) ; }
public IconLabelItem ( Drawable icon , String label ) { _label = label ; _icon = icon ; }
public static int getFreeVolume ( Context context ) { int volume = 100 ; for ( ItemData item : getHoldingItems ( context ) ) { if ( item . isUseful ( ) ) volume -= item . getVolume ( ) ; } return volume ; }
public WorldEvent ( boolean cancelable ) { super ( cancelable , true ) ; }
public int getStartPositionHandle ( ) { return mStartPositionHandle ; }
public static int lastIndexOfIgnoreCase ( CharSequence cs , char c ) { return lastIndexOfIgnoreCase ( cs , c , cs . length ( ) - 1 ) ; }
public NdefMessage createNdefMessage ( NfcEvent event ) { return NfcUtils . createBeamMessage ( "account_id" , address . toString ( ) ) ; }
public void onClick ( View v ) { selectAudioAttachment ( ) ; hideAttachmentView ( ) ; }
public void notifyCleared ( ) { for ( DbObserver observer : observers . values ( ) ) { observer . cleared ( ) ; } }
public String getErrorMessage ( ) { String message = "" ; if ( this . exception != null ) { message = this . exception . getMessage ( ) ; } return message ; }
public Fragment getItem ( int position ) { Fragment f = new VisPakkeFrag ( ) ; Bundle b = new Bundle ( ) ; b . putInt ( "position" , position ) ; f . setArguments ( b ) ; return f ; }
public String getTimeLeave ( ) { return timeLeave ; }
public void testParcelable ( ) { assertThat ( HackerNewsItem . CREATOR . newArray ( 1 ) ) . hasSize ( 1 ) ; assertEquals ( 0 , item . describeContents ( ) ) ; }
public void onConnectionSuspended ( int i ) { Toast . makeText ( getActivity ( ) , "Connection Suspended" , Toast . LENGTH_SHORT ) . show ( ) ; }
public AppViewHolder onCreateViewHolder ( ViewGroup viewGroup , int i ) { View appAdapterView = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . app_layout , viewGroup , false ) ; return new AppViewHolder ( appAdapterView ) ; }
private void showNextUpPanel ( ) { if ( mIsVisible ) hide ( ) ; if ( mPopupPanelVisible ) hidePopupPanel ( ) ; mNextUpPanelVisible = true ; mNextUpPanel . startAnimation ( showNextUp ) ; }
public void onMovieClicked ( MovieResults . Movie movie ) { Intent intent = new Intent ( MainActivity . this , DetailActivity . class ) ; intent . putExtra ( "movie" , movie ) ; startActivity ( intent ) ; }
public void notifyAboutChanges ( IAddressSearch . Observer observer ) { addressSearch . notifyAboutChanges ( observer ) ; selectedAddresses . notifyAboutChanges ( observer ) ; selectedAddresses . search ( "" ) ; }
public PhotoSizeEntity setO ( Size o ) { this . o = o ; return this ; }
public EducationAdapter ( EducationOnClickCallback educationOnClickCallback ) { this . educationOnClickCallback = educationOnClickCallback ; }
public static Context getContext ( ) { return HapRampMain . context ; }
public boolean hasPeer ( String username ) { for ( WDSwanDevice peer : nearbyPeers ) { if ( peer . getUsername ( ) . equals ( username ) ) { return true ; } } return false ; }
public static String getCache ( Context context , String key , String defaultValue ) { SharedPreferences sp = context . getSharedPreferences ( SHARED_PREFS_NAME , Context . MODE_PRIVATE ) ; return sp . getString ( key , defaultValue ) ; }
public SubnetDevices setTimeOutMillis ( int timeOutMillis ) throws IllegalArgumentException { if ( timeOutMillis < 0 ) throw new IllegalArgumentException ( "Timeout cannot be less than 0" ) ; this . timeOutMillis = timeOutMillis ; return this ; }
public UsbSerial ( MainActivity handler ) { this . handler = handler ; }
public void run ( ) { if ( foundWebPage != null ) { showReplyPanel ( false , null , null , foundWebPage , false ) ; foundWebPage = null ; } }
public static LottieComposition fromInputStreamSync ( InputStream stream ) { return LottieCompositionFactory . fromJsonInputStreamSync ( stream , null ) . getValue ( ) ; }
public void clearFilter ( ) { setActualPhrasebookItems ( mAllPhrasebookItems ) ; notifyDataSetChanged ( ) ; }
public void setInputMethodSettingsCategoryTitle ( int resId ) { updateSubtypeEnabler ( ) ; }
public void updatePosts ( List < Post > newPosts ) { mPosts = new ArrayList <> ( newPosts ) ; notifyDataSetChanged ( ) ; }
public void press ( ) { pressedOffset = FONT_OFFSET_ON_BUTTON_PRESS ; }
public String toString ( ) { StringBuilder strOut = new StringBuilder ( ) ; for ( OCSNetwork o : networks ) { strOut . append ( o . toString ( ) ) ; } return strOut . toString ( ) ; }
public void tearDown ( ) { polylinePresenterSubscription . dispose ( ) ; }
public int getMetaState ( ) { return ourMetaState ; }
public HOGDescriptor ( String filename ) { nativeObj = HOGDescriptor_2 ( filename ) ; return ; }
public static boolean didPresentSdcardPermissionsDialog ( @ NonNull Activity activity ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( activity ) ; return sharedPreferences . getBoolean ( PREF_SDCARDPERMESSION_DIALOG_DISPLAYED , false ) ; }
private static void clearDim ( @ NonNull ViewGroup parent ) { ViewGroupOverlay overlay = parent . getOverlay ( ) ; overlay . clear ( ) ; }
public void configurePinnedHeader ( View header , int position , int alpha ) { }
public Typeface getRobotoRegular ( ) { return Typeface . createFromAsset ( mContext . getAssets ( ) , "fonts/Roboto - Regular . ttf" ) ; }
public void addition_isCorrect ( ) { assertEquals ( 4 , 2 + 2 ) ; }
public void onFail ( int errorCode , String msg ) { Log . d ( "mi - band" , "Get current time failed : " + msg ) ; }
public void accept ( List < IconBean > list ) throws Exception { mView . onLoadData ( list ) ; }
public Single < CinemaHost > selections ( ) { return mSelectionSubject . firstOrError ( ) ; }
private boolean getSecurePreference ( ) { return mainActivity . getPrefs ( ) . getBoolean ( FtpService . KEY_PREFERENCE_SECURE , FtpService . DEFAULT_SECURE ) ; }
private void checkTowerAndGpsStatus ( ) { session . setTowerEnabled ( towerLocationManager . isProviderEnabled ( LocationManager . NETWORK_PROVIDER ) ) ; session . setGpsEnabled ( gpsLocationManager . isProviderEnabled ( LocationManager . GPS_PROVIDER ) ) ; }
public void attachView ( CardsContract . View view ) { this . view = view ; if ( view != null ) { view . setTitle ( "Krypto Cards" ) ; } }
public void update ( Observable observable , Object data ) { if ( data instanceof String ) if ( ( data ) . equals ( this . getClass ( ) . getName ( ) ) ) { refreshList ( ) ; } }
public void onClick ( View v ) { startAppInfo ( ) ; }
public static TimestampSearchResult targetFoundResult ( long resultBytePosition ) { return new TimestampSearchResult ( TYPE_TARGET_TIMESTAMP_FOUND , C . TIME_UNSET , resultBytePosition ) ; }
public WidthFitSquareLayout ( Context context ) { super ( context ) ; }
public boolean areItemsTheSame ( int oldItemPosition , int newItemPosition ) { TupleContactEx c1 = prev . get ( oldItemPosition ) ; TupleContactEx c2 = next . get ( newItemPosition ) ; return c1 . id . equals ( c2 . id ) ; }
public AttachmentBitmapDecoder make ( ) throws IllegalAccessException , InstantiationException { return new AttachmentBitmapDecoder ( ) ; }
public static void onLinkClicked ( AppCompatActivity activity , String url , boolean forceNoImage ) { onLinkClicked ( activity , url , forceNoImage , null ) ; }
public CustomFontManager ( AssetManager _mgr ) { assetManager = _mgr ; fonts = new HashMap <> ( ) ; }
public void onCapabilityChanged ( @ NonNull CapabilityInfo capabilityInfo ) { if ( capabilityInfo . getName ( ) . equals ( getString ( R . string . capability_sensorcap_wear ) ) && capabilityInfo . getNodes ( ) . isEmpty ( ) ) this . resetWearClientConnection ( false ) ; }
public static com . coinomi . core . protos . Protos . WalletPocket parseFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseFrom ( input ) ; }
public FavoriteSeconds ( @ NonNull String title , long seconds ) { super ( title , Type . SECONDS ) ; this . seconds = seconds ; }
public void showAddNewAlarmView ( ) { startActivityForResult ( new Intent ( this , DetailActivity . class ) , DETAIL_ACTIVITY_REQUEST ) ; }
public void setWs ( Double ws ) { this . ws = ws ; }
public boolean isAutomaticallyDisableSliceSpacingEnabled ( ) { return mAutomaticallyDisableSliceSpacing ; }
public void onItemClicked ( int position , View view ) { startActivity ( new Intent ( getContext ( ) , CreateGroupActivity . class ) . putExtra ( Constants . INTENT_ID , mAdapter . getItem ( position ) . getUuId ( ) ) ) ; }
public int getItemViewType ( int position ) { return dataSet . get ( position ) instanceof AbsSmartPlaylist ? SMART_PLAYLIST : DEFAULT_PLAYLIST ; }
public void swapAdapter ( Adapter adapter , boolean removeAndRecycleExistingViews ) { setLayoutFrozen ( false ) ; setAdapterInternal ( adapter , true , removeAndRecycleExistingViews ) ; processDataSetCompletelyChanged ( true ) ; requestLayout ( ) ; }
public static void setSelftextEnabled ( String sub , boolean checked ) { prefs . edit ( ) . putBoolean ( "cardtextenabled" + sub . toLowerCase ( Locale . ENGLISH ) , checked ) . apply ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState ) ; Logger . info ( "WearAppsFragment onCreateView" ) ; return inflater . inflate ( R . layout . fragment_wear_apps , container , false ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { Utils . setSpacing ( getApplicationContext ( ) , progress , homeButton , 1 ) ; resetGuides ( ) ; }
public Wand ( ) { super ( ) ; try { image = handler . image ( this ) ; wood = handler . label ( this ) ; } catch ( Exception e ) { } }
private static int getScore ( @ NonNull Element el ) { int old = 0 ; try { old = Integer . parseInt ( el . attr ( "gravityScore" ) ) ; } catch ( Exception ignored ) { } return old ; }
public ContentProviderClient provideCategoryContentProviderClient ( Context context ) { return context . getContentResolver ( ) . acquireContentProviderClient ( BuildConfig . CATEGORY_AUTHORITY ) ; }
public static String toBase64 ( String data ) { return Base64 . encodeToString ( data . getBytes ( ) , Base64 . NO_WRAP ) ; }
public void available ( ) throws IOException { int amount = 12 ; ss . moveTo ( text . length - amount ) ; assertEquals ( amount , ss . availableExact ( ) ) ; }
public NewMovieReleasesView createView ( ) { return this ; }
public Boolean getPrefAutoStart ( ) { return prefAutoStart ; }
public static Builder newBuilder ( de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . RequestDownloadSongs prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public GooglePlacesAdapter ( final Context context , List < GooglePlaceItem > array ) { this . array = array ; isDark = ThemeUtil . getInstance ( context ) . isDark ( ) ; }
public JSONObject applyChanges ( JSONObject kw ) throws UnknownHttpResponseException { return parseDict ( _run ( "applyChanges" , kw ) ) ; }
public Object getItem ( int position ) { return mProximityManager . getPeerAt ( position ) ; }
public < T > FindMultiExecutor < T > findAsync ( final Class < T > modelClass ) { return findAsync ( modelClass , false ) ; }
public void changeSavedLocation ( String oldLocation , String newLocation ) { if ( oldLocation . equals ( getCurrentLocation ( ) ) ) { setCurrentLocation ( newLocation ) ; } removeSavedLocation ( oldLocation ) ; addSavedLocation ( newLocation ) ; }
public RelationshipInteractor ( IStorages repositories , INetworker networker ) { this . repositories = repositories ; this . networker = networker ; }
public Fragment getItem ( int position ) { return GridViewFragment . newInstant ( position , isDesktop ) ; }
public static void startFullscreenMap ( Context context ) { }
public boolean onCreateOptionsMenu ( Menu menu ) { return MenuUtils . createOptionsMenuNoBar ( menu , this ) ; }
public void run ( ) { SendMessagesHelper . getInstance ( ) . sendMessage ( photoFinal , null , dialog_id , reply_to_msg , null , params , ttl ) ; }
public static void setRecorderMode ( Context context , boolean mode ) { PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) . putBoolean ( PREFERENCES_TAG_START_RECORDER , mode ) . apply ( ) ; }
public static boolean isPlaying ( ) { return musicService != null && musicService . isPlaying ( ) ; }
public void setRangeStepMode ( StepMode rangeStepMode ) { rangeStepModel . setMode ( rangeStepMode ) ; }
public void gotoDashboard ( long workflowId ) { goBack ( ) ; }
public void onPageFinished ( WebView view , String url ) { super . onPageFinished ( view , url ) ; swipeLayout . setRefreshing ( false ) ; initialPageLoaded = true ; Log . d ( "c3navWebView" , "loading ended" ) ; maybeEndSplash ( ) ; maybeHideLoginScreen ( ) ; }
public HashMap < String , TripEntry > getRequestSent ( ) { return requestSent ; }
public boolean onLongClick ( View v ) { imageCount = Pictures . deleteOnePicFromEntry ( v , holder , context , filename , imageNum ) ; return false ; }
public void setTextAndColor ( CharSequence text , int color ) { textView . setText ( text ) ; currentColor = color ; setWillNotDraw ( ! needDivider && currentColor == 0 ) ; invalidate ( ) ; }
public static boolean wasInitialised ( ) { return _setup != null ; }
public void onSaveDialogPositiveClick ( ) { NoteEditFragment fragment = ( NoteEditFragment ) getSupportFragmentManager ( ) . findFragmentByTag ( "NoteEditFragment" ) ; fragment . onSaveDialogPositiveClick ( ) ; }
public boolean onIsMultiPane ( ) { return isLargeTablet ( this ) ; }
public void clearFilters ( ) { scheduleFilter . clearActiveFilters ( ) ; view . setShowActiveFilterIndicator ( false ) ; setRangerState ( ) ; reloadSchedule ( ) ; }
public void testBadMinVersion ( ) { mJsonData . get ( APIStatusDeserializer . ANDROID_SETTINGS_TAG ) . getAsJsonObject ( ) . add ( APIStatusDeserializer . MIN_APP_VERSION_TAG , new JsonArray ( ) ) ; mStatus = mDeserializer . deserialize ( mJsonData , ApiStatus . class , mContext ) ; }
private void onDrawFocusBubble ( Canvas canvas , int zoomLevel , Projection projection ) { if ( mItemWithBubble != null ) { projection . toPixels ( mItemWithBubble . getPoint ( ) , mCurScreenCoords ) ; onDrawItem ( canvas , zoomLevel , ( T ) mItemWithBubble , mCurScreenCoords ) ; } }
public void setInfo ( TLRPC . User user ) { if ( user != null ) { setInfo ( user . id , user . first_name , user . last_name , null ) ; drawDeleted = UserObject . isDeleted ( user ) ; } }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "tech . dappworld . sudoku" , appContext . getPackageName ( ) ) ; }
public void setVisibleYRange ( float minYRange , float maxYRange , AxisDependency axis ) { float minScale = getAxisRange ( axis ) / minYRange ; float maxScale = getAxisRange ( axis ) / maxYRange ; mViewPortHandler . setMinMaxScaleX ( minScale , maxScale ) ; }
private void doSync ( ) { doUpload ( ) ; getFormsDefinition ( ) ; }
public int getCode ( ) { return code ; }
public InternalRecyclerListener ( @ NonNull RecyclerViewRecyclerEventDistributor distributor ) { super ( ) ; mRefDistributor = new WeakReference <> ( distributor ) ; }
private static boolean isStartNumber ( String s ) { return Character . isDigit ( s . charAt ( 1 ) ) && s . charAt ( 0 ) == 'a' ; }
public void sortsSubredditsNoExtras ( ) { assertThat ( UserSubscriptions . sortNoExtras ( subreddits ) , is ( new ArrayList <> ( Arrays . asList ( "pinned" , "pinned2" , "frontpage" , "random" , "friends" , "mod" , "aaa" , "xyy" , "xyz" ) ) ) ) ; }
public void setCardViewElevation ( int elevation ) { CardView cardView = findViewById ( R . id . mt_container ) ; cardView . setCardElevation ( elevation ) ; }
private ControlItem ( JSONObject object ) { item = object ; }
private void setupEsewaConfig ( ) { if ( mEsewConfiguration != null ) return ; mEsewConfiguration = new ESewaConfiguration ( ) . clientId ( Constants . ESEWA_CLIENT_ID ) . secretKey ( Constants . ESEWA_SECRET_KEY ) . environment ( ESewaConfiguration . ENVIRONMENT_PRODUCTION ) ; }
public void onErrorResponse ( VolleyError error ) { SparkleHelper . logError ( error . toString ( ) ) ; queryRmbRightsCallback ( ) ; }
public void infoEtudiantAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < Etudiant > ( ) { public Etudiant Func ( ) throws Exception { return infoEtudiant ( codeAccesUniversel , motPasse ) ; } } ) ; }
public void setDueDate ( long dueDate ) { mDueDate = dueDate ; }
public void onClick ( View view ) { mBus . post ( new RepositoryBeginEditingEvent ( item ) ) ; }
public void onClick ( View v ) { signInGoogle ( ) ; }
public static int randomSignChooser ( ) { int result = MathBrainerUtility . randRange_ApiCheck ( 1 , 2 ) ; if ( result == 1 ) return - 1 ; else return 1 ; }
public List < String > getAddresses ( ) { return this . addresses ; }
public void onCreateSuccess ( SessionDescription sessionDescription ) { if ( alive ) sendMessage ( What . SDP_CREATE_SUCCESS , 0 , 0 , sessionDescription , 0 ) ; }
public Type getType ( ) { return type ; }
public void run ( ) { sendProxyCMD ( Connection . ProxyType . SOCKS5 , "127 . 0 . 0 . 1" , Integer . toString ( OrbotHelper . SOCKS_PROXY_PORT_DEFAULT ) , false ) ; OrbotHelper . get ( mOpenVPNService ) . removeStatusCallback ( statusCallback ) ; }
public void run ( ) { getListener ( ) . onProgress ( progress , millis ) ; }
public void onPageFinished ( WebView view , String url ) { findViewById ( R . id . spinner ) . setVisibility ( View . GONE ) ; mWebView . setVisibility ( View . VISIBLE ) ; }
public ColorHolder getSelectedTextColor ( ) { return selectedTextColor ; }
public void onSurfaceTextureSizeChanged ( SurfaceTexture surfaceTexture , int width , int height ) { checkPreviewMatrix ( ) ; }
public int getSelectedPlaylistsCount ( ) { return mSelectedPlaylists . size ( ) ; }
public boolean isInProgress ( ) { return attachment . isInProgress ( ) ; }
public Animator buildHideAnimator ( @ NonNull View view , boolean isDelaySet ) { Animator animator = buildAlphaAnimator ( view , 1f , 0 . 1f ) ; animator . setStartDelay ( isDelaySet ? START_DELAY : 0 ) ; return animator ; }
public void afterTextChanged ( Editable s ) { getHeader ( getRelativePosition ( ) . section ( ) ) . setTitle ( s . toString ( ) ) ; }
public boolean isAnyCategorySaved ( SQLiteOpenHelper helper ) { return isAnyRecordSaved ( helper , TABLE_NAME ) ; }
public int hashCode ( ) { return getUID ( ) . hashCode ( ) ; }
public void openDir ( ) { Intent i = new Intent ( this , TextDisplayActivity . class ) ; i . putExtra ( "text" , "dir" ) ; startActivity ( i ) ; }
public CollectionViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { HorizontalBookRecyclerView recyclerView = new HorizontalBookRecyclerView ( parent . getContext ( ) ) ; return new CollectionViewHolder ( recyclerView ) ; }
public LinearLayoutManager ( Context context ) { this ( context , RecyclerView . DEFAULT_ORIENTATION , false ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponsePlaylists . Builder getResponsePlaylistsBuilder ( ) { bitField0_ | = 0x00080000 ; onChanged ( ) ; return getResponsePlaylistsFieldBuilder ( ) . getBuilder ( ) ; }
public int getRangeRepeatCount ( ) { return rangeRepeatInfo . getRepeatCount ( ) ; }
public void showEmptyStateInPlacesSection ( ) { if ( searchPlacesFragment . isViewCreated ( ) ) { isFullySearched = false ; getNoResultsBitmap ( ) . subscribe ( searchPlacesFragment : : showNoResultsImage ) ; searchPlacesFragment . setData ( null ) ; searchPlacesFragment . hideList ( ) ; } }
public void activateAcknowledged ( long workflowId ) { FragmentUtils . goBack ( this ) ; handleCrashAnalytics ( ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return "Organising Body" ; case 1 : return "Club Senate" ; } return null ; }
public String getBackdrop ( ) { return backdrop ; }
public List < Donate > getDonates ( ) { return donates ; }
public void onClick ( DialogInterface dialog , int which ) { AbstractBookListFragment . this . deleteBook ( book ) ; }
public UserItem ( ) { this . uid = "" ; email = "" ; photoUrl = "" ; name = "" ; desc = "" ; }
public void top ( ) { binding . listEducation . smoothScrollToPosition ( 0 ) ; }
public void userInputRequried ( PendingIntent pi , Message message ) { startPendingIntent ( pi , REQUEST_SEND_MESSAGE ) ; }
public float getY ( ) { return y ; }
public void run ( ) { dismiss ( ) ; }
private ArrayList < BackportAppointment > getLocalsAsList ( ) { ArrayList < BackportAppointment > weeks = new ArrayList <> ( ) ; for ( ArrayList < BackportAppointment > week : localTimetables . values ( ) ) weeks . addAll ( week ) ; return weeks ; }
public GoogleMapsBottomSheetBehavior ( ) { }
public boolean onFragmentCreate ( ) { super . onFragmentCreate ( ) ; checkPrivacy ( ) ; updateRows ( ) ; NotificationCenter . getInstance ( currentAccount ) . addObserver ( this , NotificationCenter . privacyRulesUpdated ) ; return true ; }
public void testSyncFinishedSnackbar_sameActivity ( ) { assertTrue ( syncResultTest ( false ) ) ; }
public void onAnimationUpdate ( ValueAnimator animation ) { if ( ! systemAnimationsAreDisabled ) { value = ( float ) animation . getAnimatedValue ( ) ; } }
public boolean validDatabase ( ) { return database != null && database . isOpen ( ) ; }
public Call < ResponseBody > addWalletAddress ( AddWalletAddressRequest addWalletAddressRequest ) { return api . addWalletAddress ( addWalletAddressRequest ) ; }
public void setInputMethodAndSubtype ( final IBinder token , final InputMethodSubtype subtype ) { mImmService . setInputMethodAndSubtype ( token , getInputMethodIdOfThisIme ( ) , subtype ) ; }
public void setSort ( final PostCommentListingURL . Sort s ) { if ( mUrl . pathType ( ) == RedditURLParser . POST_COMMENT_LISTING_URL ) { mUrl = mUrl . asPostCommentListURL ( ) . order ( s ) ; } }
private boolean tryAcquireAndSetStatus ( String status ) { if ( ! semaphore . tryAcquire ( ) ) { return false ; } setStatus ( status ) ; return true ; }
public void onClick ( View v ) { parentFragment . onClickNumberButton ( bt_num_0 . getText ( ) . toString ( ) ) ; }
public void setGroupJid ( Jid groupJid ) { mGroupJid = groupJid ; }
public boolean canRedo ( ) { return this . historyPointer < this . elements . size ( ) ; }
public List < Map < String , String >> getCards ( ) { return mCards ; }
public DefaultOutcomingTextMessageViewHolder ( View itemView ) { super ( itemView , null ) ; }
private FileViewModel ( @ NonNull final Application application , final FileModel directory ) { super ( application ) ; mCurrentDirectory = directory ; }
public static int createProgram ( String vertexSource , String fragmentSource ) { return createProgramDirective ( vertexSource , fragmentSource , null ) ; }
public float getPageWidth ( int position ) { return 1 / 5f ; }
public boolean onPreferenceClick ( Preference preference ) { startDiscoverTrackersActivity ( Person . ROLE_PARENT ) ; return true ; }
public Builder leftCircleSizeInPx ( int leftCircleSizeInPx ) { formView . style . leftCircleSizeInPx = leftCircleSizeInPx ; return this ; }
public static boolean isYes ( String v ) { v = v . trim ( ) ; return ( v . equals ( "true" ) || v . equals ( "1" ) || v . equals ( "yes" ) ) ; }
public ColorListPickerDialog setOnColorChangeListener ( OnColorChangeListener listener ) { mListener = listener ; return this ; }
private List < IUser > userSearch ( IChannel root , String str ) { List < IUser > list = new LinkedList < IUser > ( ) ; userSearch ( root , str , list ) ; return list ; }
public void finishFragment ( boolean animated ) { if ( isFinished || parentLayout == null ) { return ; } finishing = true ; parentLayout . closeLastFragment ( animated ) ; }
public void showVenues ( List < VenueFilterDTO > venues ) { venueListAdapter . clear ( ) ; venueListAdapter . addAll ( venues ) ; }
public WPDialogSnackbar setNegativeButton ( CharSequence text , View . OnClickListener listener ) { setButtonTextAndVisibility ( ( Button ) mContentView . findViewById ( R . id . button_negative ) , text , listener ) ; return this ; }
public void onResume ( ) { super . onResume ( ) ; delegate . onResume ( ) ; }
public static Observable < WebApi . Result > supportComment ( String token , int sid , int tid ) { return sWebApi . opForComment ( token , "support" , sid , tid ) ; }
public void onDriveRestoreSuccess ( DriveRestoreSuccess event ) { dismissProgressDialog ( ) ; Toast . makeText ( this , R . string . restore_database_success , Toast . LENGTH_LONG ) . show ( ) ; }
private void clearUiVisibilityListener ( ) { viewPager . setOnSystemUiVisibilityChangeListener ( null ) ; }
private void showEventDuration ( ) { binding . eventDurationPrefs . setDetailText ( String . format ( Locale . getDefault ( ) , getString ( R . string . x_minutes ) , String . valueOf ( getPrefs ( ) . getCalendarEventDuration ( ) ) ) ) ; }
public List < SupplierProduct > getBySupplierIdAndProductName ( long id ) { return supplierProductDao . getBySupplierIdAndProductName ( id ) ; }
public void removeCounter ( int admissionCounterId ) { int recyclerViewPosition = convertCounterIdToPosition ( admissionCounterId ) ; notifyItemRemoved ( recyclerViewPosition ) ; mCounterDb . deleteItem ( admissionCounterId ) ; reQuery ( ) ; }
public void testParseMultiTeamWinner ( ) { assertItemsEqual ( 0 , 0 ) ; }
public int getItemCount ( ) { return movies == null ? 0 : movies . size ( ) ; }
private void updatedAlarmTimeText ( ) { alarmTimeTextView . setText ( getStepDataAsHumanReadableString ( ) ) ; }
public ChallengeManagerInterface getChallengeManager ( boolean useSaved ) { this . challengeManager = ChallengeManager . getInstance ( this . getServer ( ) , useSaved , this . context ) ; return this . challengeManager ; }
public String getBlogName ( ) { return StringUtils . notNullStr ( mBlogName ) ; }
public void onClick ( View view ) { releaseSounds ( ) ; Intent intent = new Intent ( TaskList . this , NewTask . class ) ; startActivity ( intent ) ; }
public DialogResourceFinder ( @ NonNull final Dialog dialog ) { super ( dialog . getOwnerActivity ( ) ) ; mDialog = dialog ; }
public TrackModel getPlaylistSong ( int index ) { return mService . get ( ) . getPlaylistTrack ( index ) ; }
public static void resetStatsWidgetsKeys ( ) { remove ( DeletablePrefKey . STATS_WIDGET_KEYS_BLOGS ) ; }
public SquareFrameLayout ( Context context ) { this ( context , null ) ; }
public long getItemId ( int position ) { return dataSet . get ( position ) . getId ( ) ; }
public String getDisplayName ( ) { return name + " - " + targetValue ; }
public GMStaticUrlBuilder setSize ( int width , int height ) { mSize = width + "x" + height ; return this ; }
public void onErrorResponse ( VolleyError error ) { Log . e ( TAG , error . toString ( ) ) ; }
public void read ( DataInputStream dataInputStream ) throws IOException { time = dataInputStream . readInt ( ) ; }
public ArrayList < ImageLocation > getImagesArrLocations ( ) { return null ; }
public void characterClick ( @ NonNull View heroView , @ NonNull CharacterVO character ) { mView . openCharacter ( heroView , character ) ; }
public void onFailure ( Call < FileUploadReponse > call , Throwable t ) { if ( uid == COVER_IMAGE_UID ) { newCoverImageDownloadUrl = null ; hideCoverImageProgress ( ) ; } else { newProfileImageDownloadUrl = null ; hideDpProgress ( ) ; } }
public static ICommunitiesInteractor createCommunitiesInteractor ( ) { return new CommunitiesInteractor ( Injection . provideNetworkInterfaces ( ) , Injection . provideStores ( ) ) ; }
public void onDownEvent ( final int x , final int y , final int pointerId ) { mActivePointerId = pointerId ; mCurrentKey = detectKey ( x , y ) ; }
public int hashCode ( ) { return Objects . hash ( weekday , customDay , type , lessons ) ; }
public void setDuration ( int duration ) { mChanged = true ; mDuration = duration ; }
public void onPause ( ) { Timber . d ( "onPause ( ) " ) ; super . onPause ( ) ; }
public static void setTV ( View parent , @ IdRes int textViewId , String string ) { TextView tv = parent . findViewById ( textViewId ) ; tv . setText ( string ) ; }
public void hideResetButton ( boolean hide ) throws IOException { synchronized ( mClientConnections ) { for ( ClientConnection con : mClientConnections ) con . hideResetButton ( hide ) ; } }
public void setHeight ( int value ) { textView . setMinHeight ( AndroidUtilities . dp ( height = value ) - ( ( LayoutParams ) textView . getLayoutParams ( ) ) . topMargin ) ; }
public void outputXMLExternal ( StellarService service , XmlSerializer out ) throws IllegalArgumentException , IllegalStateException , IOException { out . startTag ( "" , "plugin" ) ; dumpPluginCommonData ( out ) ; dumpLuaData ( out ) ; out . endTag ( "" , "plugin" ) ; } */
public @ NonNull ColorViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ColorViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_color , parent , false ) ) ; }
public void displayChildrenOfWithHighlightCurrent ( @ NonNull Title title , int currentTitleId ) { mShouldHighlightCurrent = true ; mCurrentTitleId = currentTitleId ; changeCursor ( bookDatabaseHelper . getTitlesUnder ( title . id ) ) ; }
public void tweetsAsynchronousResponse ( ArrayList < Post > tweet , String option ) { ( ( BaseAdapter ) TweetListView . getAdapter ( ) ) . notifyDataSetChanged ( ) ; }
public ExpandableListViewAdapter ( ) { mGroups = new ArrayList <> ( ) ; }
public static void setOption ( int num ) { option = num ; }
public void onStart ( ) { super . onStart ( ) ; mDispatcher . register ( this ) ; }
public String getSenderId ( ) { return mAppConfig . getString ( PREF_SENDER_ID ) ; }
public void start ( Attributes attributes ) { mCurrentBoard . setNumberOfReplies ( Integer . parseInt ( attributes . getValue ( BoardParser . NUMBER_OF_REPLIES_ATTRIBUTE ) ) ) ; }
public void dismissAllDialogFragments ( ) { ( ( DeckPicker ) getActivity ( ) ) . dismissAllDialogFragments ( ) ; }
public static Tag createTag ( ) { return new Tag ( ID , NAME ) ; }
public static MultiReddit getMultiredditByDisplayName ( String displayName ) { if ( multireddits != null ) { for ( MultiReddit multiReddit : multireddits ) { if ( multiReddit . getDisplayName ( ) . equals ( displayName ) ) { return multiReddit ; } } } return null ; }
public void setIsPublished ( Boolean isPublished ) { this . isPublished = isPublished ; }
public ChartMarkerView ( Context context , int layoutResource ) { super ( context , layoutResource ) ; mContent = findViewById ( R . id . tvContent ) ; }
public Hud ( Assets assets , Stage stage ) { mRoot = new AnchorGroup ( ) ; BUTTON_SIZE_PX = assets . findRegion ( "hud - pie - right" ) . getRegionWidth ( ) ; stage . addActor ( mRoot ) ; }
public void addEntry ( VaultEntry entry ) { _entries . add ( entry ) ; }
public void unregisterUIListener ( String key , ModelNotificationListener listener ) { getAggregator ( key , true ) . removeUIListener ( listener ) ; }
private static WorkEntity createWorkItem ( int position ) { WorkEntity workEntity = new WorkEntity ( ) ; workEntity . setId ( position ) ; workEntity . setTitle ( "Work " + position ) ; workEntity . setDescription ( makeDetails ( position ) ) ; return workEntity ; }
public static < N > void noErrorsAndNotCompleted ( TestSubscriber < N > testSubscriber ) { assertNotNull ( testSubscriber ) ; testSubscriber . assertNoErrors ( ) ; testSubscriber . assertNotComplete ( ) ; }
private int getMapWidth ( ) { return mapWidth ; }
public void unLink ( ) { mActivity = null ; }
public boolean onNavigationItemSelected ( int position , long itemId ) { preferenceHelper . setUserSelectedNavigationItem ( position ) ; loadFragmentView ( position ) ; return true ; }
public void draw ( Canvas canvas ) { for ( Drawable drawableItem : drawables ) { drawableItem . draw ( canvas , rect ) ; } }
public Socket createSocket ( final InetAddress host , final int port ) throws IOException { final SSLSocket socket = ( SSLSocket ) mSSLSocketFactory . createSocket ( host , port ) ; socket . setEnabledCipherSuites ( CIPHER_SUITES ) ; socket . setEnabledProtocols ( PROTOCOLS ) ; return socket ; }
public static Typeface getFont ( @ Font int font ) { String fontPath = FONTS . get ( font ) ; return TypefaceUtils . load ( sAssets , fontPath ) ; }
public void moveToLoginActivity ( ) { Intent intent = new Intent ( getCurrentContext ( ) , RegisterPatient . class ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; getCurrentContext ( ) . startActivity ( intent ) ; }
public int getThemeResource ( ) { return isTorrent ( ) ? R . style . AppTheme_NoActionBar_Torrent : R . style . AppTheme_NoActionBar_Uri ; }
private void setRelatedPostsFlags ( int flags ) { showRelatedPosts = ( flags & RELATED_POSTS_ENABLED_FLAG ) > 0 ; showRelatedPostHeader = ( flags & RELATED_POST_HEADER_FLAG ) > 0 ; showRelatedPostImages = ( flags & RELATED_POST_IMAGE_FLAG ) > 0 ; }
public void setPostFontStyle ( FontStyle style ) { edit ( ) . putString ( FONT_STYLE_POST , style . name ( ) ) . commit ( ) ; }
public void detachView ( ) { if ( mLoadContactDataSubscription != null ) mLoadContactDataSubscription . unsubscribe ( ) ; super . detachView ( ) ; }
public int compare ( AttendResult r1 , AttendResult r2 ) { return r1 . getEarly ( ) . compareTo ( r2 . getEarly ( ) ) ; }
public static void enqueueWork ( Context context , Intent intent ) { enqueueWork ( context , FcmRegistrationIntentService . class , REG_JOB_ID , intent ) ; }
public static int dpToPx ( @ NonNull Context context , int dp ) { float scale = context . getResources ( ) . getDisplayMetrics ( ) . density ; return ( int ) ( ( dp * scale ) + 0 . 5f ) ; }
public void onPlay ( ) { play ( ) ; }
public NavDrawerListAdapter ( BaseFragmentActivity context , List < NavDrawerItem > navDrawerItems ) { this . baseFragmentActivity = context ; this . navDrawerItems = navDrawerItems ; }
public Builder times ( String times ) { this . times = times ; return this ; }
public List < Integer > getSubDeviceSessions ( Account account , SignalProtocolAddress contact ) { final SQLiteDatabase db = this . getReadableDatabase ( ) ; return getSubDeviceSessions ( db , account , contact ) ; }
public void passwords_with_default_seed_are_correct ( ) { test_single_passwords ( potd_using_default_seed , DEFAULT_SEED ) ; }
public Void execute ( SFTPClient client ) { try { client . mkdir ( SshClientUtils . extractRemotePathFrom ( path ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return null ; }
public void onPasswordSet ( Bundle args ) { selectCoins ( args ) ; }
public int getDepthInBlocks ( ) { return tx . getConfidence ( ) . getDepthInBlocks ( ) ; }
public void onSuccess ( int code , Client . Headers headers , String response ) { data = new Room101Request ( ) ; data . setDone ( code == 302 ) ; currentStage ++ ; proceedStage ( ) ; }
public void onClick ( View v ) { songsUtils . shufflePlay ( songsUtils . allSongs ( ) ) ; }
public void onCancel ( DialogInterface dialog ) { tryToFinishActivity ( ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeTypedList ( this . techTeam ) ; dest . writeTypedList ( this . campTeam ) ; dest . writeTypedList ( this . logisticsTeam ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { text = RichText . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public ActionBarMenuItem addItemWithWidth ( int id , int icon , int width ) { return addItem ( id , icon , null , isActionMode ? parentActionBar . itemsActionModeBackgroundColor : parentActionBar . itemsBackgroundColor , null , width , null ) ; }
public static void startForSendAttachments ( @ NonNull Context context , int accountId , AbsModel model ) { startForSendAttachments ( context , accountId , new ModelsBundle ( 1 ) . append ( model ) ) ; }
public int getItemCount ( ) { int count = 0 ; if ( deviceHasGoodCamera ) { count ++ ; } if ( MediaController . allMediaAlbumEntry != null ) { count += MediaController . allMediaAlbumEntry . photos . size ( ) ; } return count ; }
public MiniDrawer withOnMiniDrawerItemLongClickListener ( OnLongClickListener < IDrawerItem > onMiniDrawerItemLongClickListener ) { this . mOnMiniDrawerItemLongClickListener = onMiniDrawerItemLongClickListener ; return this ; }
public Date getListened ( ) { return listened ; }
private void openMainActivity ( ) { startActivity ( new Intent ( this , MainActivity . class ) ) ; finish ( ) ; }
public void onViewPositionChanged ( View changedView , int left , int top , int dx , int dy ) { if ( mListener != null ) { mListener . onSwipe ( left / ( float ) getWidth ( ) ) ; } }
public PhotoSizeEntity setZ ( Size z ) { this . z = z ; return this ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "taking picture due to audio trigger" ) ; takePicture ( false ) ; }
public void onStart ( ) { super . onStart ( ) ; getMapView ( ) . onStart ( ) ; }
public void run ( ) { enableAccelerometerSensor ( ) ; }
public void onRefreshFromMenuSelected ( ) { checkPermissionsAndStartMainParsingActivity ( ) ; }
public void dontScheduleDueDateReminderWhenFlagNotSet ( ) { service . scheduleAlarm ( null , newTask ( with ( ID , 1L ) , with ( DUE_TIME , newDateTime ( ) ) ) ) ; verify ( jobs ) . cancelReminder ( 1 ) ; }
public Builder displayStepDataInSubtitleOfClosedSteps ( boolean displayStepDataInSubtitleOfClosedSteps ) { formView . style . displayStepDataInSubtitleOfClosedSteps = displayStepDataInSubtitleOfClosedSteps ; return this ; }
private void finishClick ( ) { savePlayersStats ( ) ; openStatsActivity ( ) ; }
public static void setDietGoal ( Context context , int dietGoal ) { SharedPreferences . Editor editor = getSharedPreferences ( context ) . edit ( ) ; editor . putInt ( USER_DIET_GOAL , dietGoal ) ; editor . apply ( ) ; }
public final void setX ( int v ) { _x = v ; }
public @ Nullable Uri getUri ( ) { return null ; }
public synchronized void reset ( ) { position = - 1 ; notify ( ) ; }
public WeatherWidgetProvider2x4 ( ) { super ( 4 , LAYOUT_ONE_COLUMN ) ; }
public void run ( ) { try { BottomSheet . super . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public void fromOffsetDateTimeNull ( ) { assertNull ( DateTypeConverters . toOffsetDateTime ( null ) ) ; }
public int getFtpPort ( ) { return Strings . toInt ( prefs . getString ( PreferenceNames . FTP_PORT , "21" ) , 21 ) ; }
public static void removeUserTag ( final String username ) { Reddit . tags . edit ( ) . remove ( "user - tag" + username . toLowerCase ( Locale . ENGLISH ) ) . apply ( ) ; }
private static String getTrackUri ( @ NonNull Song song ) { return MusicUtil . getSongFileUri ( song . id ) . toString ( ) ; }
public static long startOfYesterday ( long timeMillis ) { return startOfToday ( timeMillis ) - secondsInDay * 1000 ; }
public String visit ( SongDigest track ) { return track . getSongName ( ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { txtV . setText ( String . valueOf ( progress ) ) ; if ( run && fromUser ) manageSend ( "V" + ( txtV . getText ( ) . toString ( ) ) ) ; }
private void loginSuccessful ( ) { savePassword ( ) ; menuOpenCommunityCodex ( ) ; finish ( ) ; }
public void checkAll ( ) { mAbstractSharedPreferences . putBoolean ( "sorting" , false ) ; new TrackChecker ( mTrackDao ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void onPreExecute ( ) { blockControls ( ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mRxPermissions = new RxPermissions ( this ) ; }
public void stop ( ) { playAgainOnFocus = false ; playAgainOnHeadset = false ; releaseResources ( ) ; if ( player != null ) { player . stop ( ) ; } }
public void onInit ( int status ) { Log . d ( TAG , "Status " + status ) ; }
public MessagingDatabase ( Context context , SQLCipherOpenHelper databaseHelper ) { super ( context , databaseHelper ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( key ) ; dest . writeString ( value ) ; }
public void clearAnimation ( ) { mRelativeLayout . clearAnimation ( ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; Button authorise = view . findViewById ( R . id . authorise ) ; authorise . setOnClickListener ( this ) ; }
public void write ( DataOutputStream dataOutputStream ) throws IOException { dataOutputStream . writeInt ( time ) ; }
private void resumeUpdatingMap ( ) { if ( ognService != null && mMap != null ) { ognService . resumeUpdatingMap ( mMap . getProjection ( ) . getVisibleRegion ( ) . latLngBounds ) ; } }
public Builder lastName ( String last ) { if ( last != null ) { this . name [ 2 ] = last ; } return this ; }
private void onBlockWithGenerator ( BlockWithGenerator block ) { blockData . postValue ( block ) ; }
private void updateInstructions ( boolean isVisible ) { updateConnectionInfo ( ) ; instructionsView . setVisibility ( isVisible ? View . VISIBLE : View . INVISIBLE ) ; }
public void onClick ( View v ) { Intent it = new Intent ( WalletListActivity . this , SettingActivity . class ) ; startActivityForResult ( it , SETTING_REQUEST ) ; }
public NotificationsCheckCell ( Context context ) { this ( context , 21 , 70 ) ; }
public void onClick ( View v ) { autoCompleter . removeFromAutoComplete ( category ) ; remove ( category ) ; notifyDataSetChanged ( ) ; }
public void setQualPoints ( Integer qualPoints ) { this . qualPoints = qualPoints ; }
public void setClientInternet ( int id ) { Log . d ( TAG , "OUD : setClientInternet : " + id ) ; clientInternetByte = setBit ( clientInternetByte , id ) ; }
private static String getAutoBoulder ( JsonObject data ) { return Integer . toString ( MatchBreakdownHelper . getIntDefaultValue ( data , "autoBouldersHigh" ) + MatchBreakdownHelper . getIntDefaultValue ( data , "autoBouldersLow" ) ) ; }
public boolean wasStarted ( ) { return started && ! paused ; }
public NetTask setOnFinishRequest ( OnFinishRequest when ) { onFinishRequest = when ; return this ; }
public void onClick ( View v ) { MathBrainerUtility . showUnityAdsRandom ( GameCreditsActivity . this ) ; Intent intent = new Intent ( GameCreditsActivity . this , ChooseGameActivity . class ) ; startActivity ( intent ) ; }
public void onMonthChanged ( MaterialCalendarView widget , CalendarDay date ) { updateTitle ( dateFormat , mToolbar ) ; }
private void downloadTitles ( ) throws IOException , JSONException { downloadOfficialProjects ( wikiClient , titles ) ; downloadTeaserProjects ( wikiClient , titles ) ; downloadOLNProjects ( wikiClient , titles ) ; }
public void onClick ( DialogInterface dialog , int id ) { DialogFragment_FilterList . this . getDialog ( ) . cancel ( ) ; }
public List < Song > getSongs ( ) { List < Song > songs = new ArrayList <> ( ) ; for ( Album album : albums ) { songs . addAll ( album . songs ) ; } return songs ; }
private static void addItem ( ContactEntity item ) { ITEMS . add ( item ) ; ITEM_MAP . put ( item . getId ( ) , item ) ; }
public void onPause ( ) { if ( isMusic ) player . pause ( ) ; if ( gameView != null && ! isPaused ) gameView . onPause ( ) ; super . onPause ( ) ; }
public void onGmsConnectionResultResolutionRequired ( ConnectionResult connectionResult ) { IntentUtil . startGmsConnectionResultForResolution ( this , connectionResult , UNHANDLED_REQUEST_CODE ) ; }
public void assertOpacitySeekbarProgress ( int progress ) { Assert . assertEquals ( progress , ( ( SeekBar ) mActivity . findViewById ( R . id . opacitySeek ) ) . getProgress ( ) ) ; }
public void setNdtUploadKbit ( Long ndtUploadKbit ) { this . ndtUploadKbit = ndtUploadKbit ; }
public void onResume ( ) { super . onResume ( ) ; mIsPageBookmarked = userDataDBHelper . isPageBookmarked ( pageId ) ; if ( mBookmarkFrame != null ) { mBookmarkFrame . setVisibility ( mIsPageBookmarked ? View . VISIBLE : View . GONE ) ; } }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case 0 : return "Messages" ; case 1 : return "Account" ; case 2 : return "Settings" ; default : return null ; } }
public void showPicker1 ( View view ) { colorDialog . setPickerColor ( SettingsActivity . this , 1 , colourPrimary ) ; colorDialog . showColorPicker ( SettingsActivity . this , 1 ) ; }
public void updateDrawState ( @ NonNull TextPaint ds ) { ds . setUnderlineText ( false ) ; ds . setColor ( UiUtils . resolveColor ( mContext , android . R . attr . textColorLink ) ) ; }
private SimpleMessageHandler ( AbstractRecognizerIntentActivity c ) { mRef = new WeakReference <> ( c ) ; }
public void onEvent ( OnLogEntryChanged event ) { if ( TinyTimeTracker . currentTracker != null && TinyTimeTracker . currentTracker . id == event . entry . tracker_id ) { refresh ( ) ; } }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "gis2018 . udacity . tametu" , appContext . getPackageName ( ) ) ; }
public BleDevice createFromParcel ( Parcel in ) { return new BleDevice ( in ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; getLoaderManager ( ) . initLoader ( LOADER_MEMBER_SPEAKING_TIME , null , mLoaderCallbacks ) ; getLoaderManager ( ) . initLoader ( LOADER_MEETING_DATES , null , mLoaderCallbacks ) ; loadTeam ( ) ; }
public NotificationsHelper ( Context mContext ) { this . mContext = mContext . getApplicationContext ( ) ; }
public void onClick ( View v ) { imageShown = false ; doLoad ( contentUrl ) ; findViewById ( R . id . hq ) . setVisibility ( View . GONE ) ; }
public void rotateJointTarget ( Joint joint , float degree ) { mVrep . simxSetJointTargetPosition ( mClientId , mJointMap . get ( joint ) , ( float ) ( degree * Math . PI / 180 ) , simx_opmode_oneshot ) ; }
public void setFeedTitle ( final String feedTitle ) { this . feedTitle = feedTitle ; }
private void drawHorizontalLines ( Canvas canvas ) { for ( int i = 1 ; i <= verticalSquareCount ; i ++ ) { canvas . drawLine ( 0 , screenHeight - squareWidth * i , screenWidth , screenHeight - squareWidth * i , paint ) ; } }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { String tag = mTagsList . get ( position ) ; holder . mTagItemCheckedTextView . setText ( tag ) ; holder . mTagItemCheckedTextView . setChecked ( mCurrentTags . contains ( tag ) ) ; }
public Builder SID ( int SID ) { this . SID = SID ; return this ; }
public void start ( @ NonNull Context context ) throws SecurityException { bluetooth . addNmeaListener ( this ) ; }
public Observable < Empty > volumeUp ( ) { return controlService . volumeUp ( ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . most_played_songs_item , parent , false ) ; return new ViewHolder ( view ) ; }
public int getExpandedGroupsCount ( ) { return mWrapperAdapter . getExpandedGroupsCount ( ) ; }
public DrawerBuilder withStickyFooter ( @ NonNull ViewGroup stickyFooter ) { this . mStickyFooterView = stickyFooter ; return this ; }
public void setBlock ( TLRPC . TL_pageBlockPullquote block ) { currentBlock = block ; requestLayout ( ) ; }
private boolean shouldShowServerItem ( ServerConnectionInfo info ) { return info . getChannels ( ) == null || info . getChannels ( ) . size ( ) == 0 || mAlwaysShowServer ; }
public AccountsManager ( @ NonNull Context context , boolean multipleAccounts ) { super ( context , multipleAccounts ) ; }
public com . coinomi . core . protos . Protos . ScryptParameters . Builder getEncryptionParametersBuilder ( ) { bitField0_ | = 0x00000020 ; onChanged ( ) ; return getEncryptionParametersFieldBuilder ( ) . getBuilder ( ) ; }
public void addBlock ( BlockModel block ) { if ( block != null ) { block . mineBlock ( difficulty ) ; blocks . add ( block ) ; } }
public void onRefresh ( ) { getList ( ) ; }
public void run ( ) { hideInterruptedProgressBar ( ) ; if ( ConnectionUtils . isConnected ( HomeActivity . this ) ) { logout ( ) ; } }
public static List < Playlist > getAllPlaylists ( @ NonNull final Context context ) { return getAllPlaylists ( makePlaylistCursor ( context , null , null ) ) ; }
public void onLoaderReset ( @ NonNull Loader < Cursor > loader ) { adapter . swapCursor ( null ) ; }
public PemToKeyPairTask ( @ NonNull InputStream pemFile , AsyncTaskResult . Callback < AsyncTaskResult < KeyPair >> callback ) throws IOException { this ( IOUtils . readFully ( pemFile ) . toByteArray ( ) , callback , null , null , null ) ; }
private void writeToDatabase ( ) { repo . updateInfo ( appContext , info , false , false ) ; }
public void onRefreshTriggered ( ) { mDoAnimateNewData = true ; mMovieRepository . loadMovieData ( ) ; }
public void run ( ) { displayData ( timeTable ) ; }
public void resetConnections ( ) { for ( final CoinType type : connections . keySet ( ) ) { BlockchainConnection connection = connections . get ( type ) ; if ( connection . isActivelyConnected ( ) ) connection . resetConnection ( ) ; } }
public boolean isSameMedia ( DownloadAction other ) { return id . equals ( other . id ) ; }
public Binder < TextSectionView > createBinder ( PostModel viewObject ) { return new TextSectionBinder ( viewObject ) ; }
public void onBindViewHolder ( FeedAdapter . ViewHolder holder , int position ) { holder . reset ( ) ; holder . render ( dataset . get ( position ) ) ; }
public String developmentUrl ( ) { return DetachBuildConstants . DEVELOPMENT_URL ; }
public String getAboutBook ( ) { return bookAbout ; }
public void run ( ) { registration . listener . onTransactionBroadcastFailure ( TransactionWatcherWallet . this , tx ) ; }
public void onBindHeaderItemViewHolder ( @ NonNull HeaderVH holder , int localPosition , List < Object > payloads ) { onBindHeaderItemViewHolder ( holder , localPosition ) ; }
public AddMovieViewModel ( AppDatabase database , Application mApplication ) { movies = database . movieDao ( ) . getFavoriteMoviesFromDB ( ) ; }
public void showChangeCredentialsDialog ( ) { ChangeCredentialsDialog fragment = ChangeCredentialsDialog . newInstance ( ) ; fragment . show ( getSupportFragmentManager ( ) , "dialog" ) ; }
public static TypeAdapter < CurrentStatus > typeAdapter ( Gson gson ) { return new AutoValue_CurrentStatus . GsonTypeAdapter ( gson ) ; }
private void disableFlash ( ) { Log . d ( TAG , "disableFlash" ) ; synchronized ( fRunning ) { fPulseLength . set ( 0 ) ; fOn . set ( false ) ; fRunning . notifyAll ( ) ; } }
public void dismissInternal ( ) { try { super . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public Kd2DicNumber getDic_number ( ) { return dic_number ; }
public void onClick ( View v ) { Intent i = new Intent ( Profile . this , SendMessage . class ) ; i . putExtra ( SendMessage . EXTRA_NAME , name ) ; startActivity ( i ) ; }
public void unregister ( ) { this . listener = null ; }
public static synchronized String formatDoubleOnePlace ( double input ) { return DOUBLE_ONE_PLACE_FORMAT . format ( input ) ; }
public void onSaveMovieFinish ( ) { Log . v ( "getAndSaveMovie" , getClass ( ) + " , movie saved" ) ; getView ( ) . onNotifyMovieSaved ( ) ; }
public void onAnimationEnd ( View view ) { ViewPropertyAnimatorCompat animator = ViewCompat . animate ( view ) ; animator . setListener ( null ) ; view . setTranslationX ( 0 ) ; view . setTranslationY ( 0 ) ; }
private void onCloseAnimationEnd ( ) { if ( transitionAnimationInProgress && onCloseAnimationEndRunnable != null ) { transitionAnimationInProgress = false ; transitionAnimationPreviewMode = false ; transitionAnimationStartTime = 0 ; onCloseAnimationEndRunnable . run ( ) ; onCloseAnimationEndRunnable = null ; checkNeedRebuild ( ) ; } }
public EnableLowPower ( DataBundle dataBundle ) { this . dataBundle = dataBundle ; }
public LaunchInfo [ ] getSuggestedApps ( ) { if ( appsHolder == null ) return new LaunchInfo [ 0 ] ; return appsHolder . getSuggestedApps ( ) ; }
public ChatUsersActivity ( Bundle args ) { super ( args ) ; chatId = arguments . getInt ( "chat_id" ) ; currentChat = MessagesController . getInstance ( currentAccount ) . getChat ( chatId ) ; }
public HTTP_Connection ( String nachricht , boolean delegate , String url , int mMaxRetries ) { this . url = nachricht ; resultatweitergeben = delegate ; orurl = url ; this . mMaxRetries = mMaxRetries ; }
public Intent getSendIntent ( ) { return mSendIntent ; }
public ValidatorConfig setApplication ( Application application ) { this . application = application ; this . resources = application . getResources ( ) ; return this ; }
public String exec ( ExecutePack pack ) { pack . context . startActivity ( Tuils . openFile ( pack . context , new File ( Tuils . getFolder ( ) , AliasManager . PATH ) ) ) ; return null ; }
private void openAbout ( ) { Utils . updateFragment ( new AboutFragment ( ) , getActivity ( ) ) ; }
public String getUserId ( ) { return mUserId ; }
public static void setUploadToRunkeeper ( boolean value ) { cSharedPreferences . edit ( ) . putBoolean ( SP_UPLOAD_TO_RUNKEEPER , value ) . apply ( ) ; }
public static boolean switchService ( ) { if ( DaedalusVpnService . isActivated ( ) ) { deactivateService ( instance ) ; return false ; } else { prepareAndActivateService ( instance ) ; return true ; } }
public void onResume ( ) { super . onResume ( ) ; EventBus . getDefault ( ) . register ( this ) ; setupConversionSummary ( settings ) ; }
public BigDecimal getCapitalPlaceDebutAnnee ( ) { return capitalPlaceDebutAnnee ; }
public void testSafeToAddAuthToken8 ( ) { assertFalse ( WPUrlUtils . safeToAddWordPressComAuthToken ( buildURL ( WPCOM_ADDRESS_1 ) ) ) ; }
public User getUser ( ) { return user ; }
private CalendarContractWrapper ( ) { }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setContentView ( R . layout . activity_info ) ; presenter = new InfoPresenterImpl ( new FileProviderImpl ( ) ) ; setupTextInfo ( ) ; }
public ActivatePayload [ ] newArray ( int size ) { return new ActivatePayload [ size ] ; }
public IPresenterFactory < ChatMembersPresenter > getPresenterFactory ( @ Nullable Bundle saveInstanceState ) { return ( ) -> new ChatMembersPresenter ( requireArguments ( ) . getInt ( Extra . ACCOUNT_ID ) , requireArguments ( ) . getInt ( Extra . CHAT_ID ) , saveInstanceState ) ; }
public void onAdFailedToLoad ( int i ) { Log . d ( "IV Banner Ad Test" , "Add Loading Failed" ) ; }
public void setDraft ( CharSequence draft ) { this . draft = draft ; }
private PendingIntent getAlarmIntent ( Context context ) { Intent intent = new Intent ( context , ListWidgetProvider . class ) ; intent . setAction ( AppIntent . ACTION_UPDATE_LIST_WIDGET ) ; return PendingIntent . getBroadcast ( context , 0 , intent , PendingIntent . FLAG_UPDATE_CURRENT ) ; }
public AbsSmartPlaylist ( ) { super ( ) ; this . iconRes = R . drawable . ic_queue_music_white_24dp ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; adapter = new FeesListAdapter ( context , config ) ; }
private TimeReceiver ( TimeIconData iconData ) { super ( iconData ) ; }
public int compare ( ServiceRequest serviceRequest , ServiceRequest t1 ) { return t1 . getUpdatedDatetime ( ) . compareTo ( serviceRequest . getUpdatedDatetime ( ) ) ; }
public static void start ( Context c ) { c . startActivity ( new Intent ( c , UserActivity . class ) ) ; }
private void addColumns ( List < ColumnModel > columnModelList ) { LitePalLog . d ( TAG , "do addColumn" ) ; execute ( getAddColumnSQLs ( columnModelList ) , mDb ) ; for ( ColumnModel columnModel : columnModelList ) { mTableModelDB . addColumnModel ( columnModel ) ; } }
private void initWifiLock ( ) { mWifiLock = ( ( WifiManager ) getApplicationContext ( ) . getSystemService ( WIFI_SERVICE ) ) . createWifiLock ( WifiManager . WIFI_MODE_FULL , BuildConfig . APPLICATION_ID ) ; mWifiLock . acquire ( ) ; }
public void onClick ( View v ) { callback . onComplaintSelected ( current . getId ( ) ) ; }
private float getValue ( ) { return Numbers . parseFloat ( getPersistedString ( null ) ) ; }
public void onCancel ( @ NonNull final PickSource pPickSource , final int pRequestType ) { HyperLog . d ( TAG , "Cancel : " + pPickSource . name ( ) ) ; }
public HashSet < UnspentTx > getUnspentTxs ( ) { return unspentTransactions ; }
public @ NonNull View getView ( int position , View convertView , @ NonNull ViewGroup parent ) { return Util . getActionBarSpinnerItemView ( actionBarContext , convertView , parent , getItem ( position ) . getName ( ) ) ; }
public void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; drawDraggedStone ( ) ; if ( playerComputer . isTurn ( ) ) { computerPlays ( ) ; } }
public void onMenuButtonClick ( View v ) { showMainMenu ( ) ; }
public void onClick ( View v ) { int time = Integer . parseInt ( pickerTimer . getText ( ) . toString ( ) ) ; if ( time <= 55 ) { time += 5 ; pickerTimer . setText ( time + "" ) ; } }
public void onDestroyView ( ) { ValueKeeper vk = ValueKeeper . getInstance ( ) ; vk . setProfilList ( profileList ) ; super . onDestroyView ( ) ; }
public void setOnClickListener ( @ Nullable OnClickListener l ) { if ( isSingleMode ) mDateView . setOnClickListener ( l ) ; }
public LiveData < Integer > getOnToDoDone ( ) { return mOnToDoDone ; }
private StoryManager ( RestServer server , ArrayList < StoryInterface > storyList ) { this . server = server ; this . storyList = storyList ; this . lastRefreshDateTime = null ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_exportedMessageLink . TLdeserialize ( stream , constructor , exception ) ; }
public void showImage ( int i ) { setViewPagerCurrentItem ( i ) ; }
public void failure ( RetrofitError error ) { setResult ( SpotifyConstants . RESULT_CODE_CONNECTION_FAILURE ) ; finish ( ) ; }
public List < String > sdkVersions ( ) { return new ArrayList <> ( Arrays . asList ( "27 . 0 . 0" ) ) ; }
public static Prefs getInstance ( Context context ) { if ( instance == null ) { synchronized ( Prefs . class ) { if ( instance == null ) { instance = new Prefs ( context . getApplicationContext ( ) ) ; } } } return instance ; }
public void setPushNotifications ( boolean enabled ) { mPushNotifications = enabled ; if ( mPushNotifications ) { if ( mPushRegistrationId == null ) pushRegister ( ) ; } else { pushUnregister ( ) ; } }
public ResponseGlobalSearchStatus getDefaultInstanceForType ( ) { return defaultInstance ; }
public CursorAdapter getAdapter ( ) { return mAdapter ; }
public PorterDuff . Mode getSecondaryProgressTintMode ( ) { logProgressBarTintWarning ( ) ; return getSupportSecondaryProgressTintMode ( ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . featuredStickersDidLoad ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . stickersDidLoad ) ; }
public void onDestroy ( ) { updateDistanceTracked ( ) ; PreferenceManager . getDefaultSharedPreferences ( this ) . unregisterOnSharedPreferenceChangeListener ( this ) ; disconnect ( ) ; closeDatabase ( ) ; logger . debug ( "Service stopped" ) ; }
public void put ( @ NonNull String key , @ NonNull T entry ) { synchronized ( _lock ) { _entries . put ( key , new Pair <> ( new Date ( ) , entry ) ) ; } }
public SuggestionLoader ( Context context , String input , Collection < Manager > managers , InputSearchManager searchManager ) { super ( context ) ; this . input = input ; this . managers = managers ; this . searchManager = searchManager ; }
public void onFailure ( Call < SingleWalletResponse > call , Throwable t ) { viewModel . isLoading . setValue ( false ) ; t . printStackTrace ( ) ; }
private void setFlowTextViewAppearance ( ) { movieDescription . setTextColor ( Color . WHITE ) ; movieDescription . setTextSize ( 60 ) ; }
public void setVertretungsplan ( @ NotNull Vertretungsplan vertretungsplan ) { this . vertretungsplan = vertretungsplan ; }
private void onUploadResults ( Pair < Upload , UploadResult < ? >> pair ) { mDocuments . add ( 0 , ( Document ) pair . getSecond ( ) . getResult ( ) ) ; callView ( IDocListView : : notifyDataSetChanged ) ; }
public void onClick ( View v ) { parentFragment . onClickSpecialButton ( Constants . TAN_INVERSE ) ; }
public Drawable getDrawable ( String source ) { return HtmlHelper . decodeImage ( context , id , source , show_images , tvReference ) ; }
private double acreTosqcm ( double num ) { return num * 40468564 . 224d ; }
public FileBackedPassClassifier ( final File backed_file , final PassStore passStore , final Moshi moshi ) { super ( loadMap ( backed_file , moshi ) , passStore ) ; this . backed_file = backed_file ; adapter = getAdapter ( moshi ) ; }
public String getUserId ( ) { return PrefsHelper . getId ( ) ; }
public void onSkipToPrevious ( ) { back ( true ) ; }
public void run ( ) { walletFragment . setProgress ( text ) ; }
public PreferenceUtil getPreferencesUtility ( ) { return PreferenceUtil . getInstance ( App . this ) ; }
private void rollback ( ) { PieLauncherApp . appMenu . icons . clear ( ) ; PieLauncherApp . appMenu . icons . addAll ( backup ) ; }
private static ProgressRequestBody . UploadCallbacks wrapPercentageListener ( final PercentagePublisher listener ) { return percentage -> { if ( Objects . nonNull ( listener ) ) { listener . onProgressChanged ( percentage ) ; } } ; }
public void testInit_withAttrs ( ) { Plot plot = new MockPlot ( "MockPlot" ) ; AttributeSet attrs = mock ( AttributeSet . class ) ; plot . init ( RuntimeEnvironment . application , attrs , 0 ) ; }
public void run ( ) { if ( mDraggingItemViewHolder != null ) { checkItemSwapping ( getRecyclerView ( ) ) ; } }
public CategoryAdapter ( CategoryContract . Presenter p ) { super ( ) ; presenter = p ; items = new ArrayList <> ( ) ; }
private void showControlForPassed ( Context context ) throws ChallengeDoesNotExistsException { if ( this . fitnessChallengeViewModel . isChallengeAchieved ( ) ) { this . showControlForAchieved ( context ) ; } else { this . showControlForMissed ( this . rootView . getContext ( ) ) ; } }
public void draw ( Canvas canvas ) { if ( canDraw ) { canvas . drawBitmap ( bitmap , bodySrc , bodyDst , null ) ; if ( ! gamePaused ) bodyDst . offsetTo ( bodyDst . left + 17 , bodyDst . top ) ; } }
public String getHdPosterUrl ( ) { return hdPosterUrl ; }
public Bitmap getBitmap ( ) { return bmp ; }
public void setListAsPreferred ( ) { PreferenceManager . setFolderLayout ( getActivity ( ) , mFile , FOLDER_LAYOUT_LIST ) ; switchToListView ( ) ; }
public com . openwallet . core . protos . Protos . AddressStatus getAddressStatus ( int index ) { return addressStatus_ . get ( index ) ; }
public void onAdLoaded ( ) { Log . d ( "MA Interstitial Ad Test" , "Ad Finished Loading" ) ; }
public TokenSearchTextView ( Context context ) { super ( context ) ; init ( context ) ; }
public void setAvatarType ( int value ) { avatarType = value ; if ( avatarType == AVATAR_TYPE_ARCHIVED ) { color = Theme . getColor ( Theme . key_avatar_backgroundArchivedHidden ) ; } else { color = Theme . getColor ( Theme . key_avatar_backgroundSaved ) ; } needApplyColorAccent = false ; }
public File getExitstingMediaPath ( ) { File existingPath = getExistingParentFolderFile ( get ( Keys . MEDIA_DIR ) ) ; set ( Keys . MEDIA_DIR , existingPath . getPath ( ) + DirChooserConstants . PATH_SEPERATOR ) ; return existingPath ; }
public void loadTweets ( View view ) { new TweetsLoadAsyncTask ( context , Tweet_ListView . this , option ) . execute ( ) ; }
public void onScrolled ( RecyclerView recyclerView , int dx , int dy ) { if ( horizontalLayoutManager . findLastVisibleItemPosition ( ) == 9 || citys != null ) fab . hide ( ) ; else fab . show ( ) ; }
public void onSuccess ( Object data ) { Log . d ( "mi - band" , String . format ( "Set up success : %s" , data . toString ( ) ) ) ; }
public boolean isDeveloperOptionMoveCardsEverywhereEnabled ( ) { return savedSharedData . getBoolean ( PREF_KEY_DEVELOPER_OPTION_MOVE_CARDS_EVERYWHERE , DEFAULT_DEVELOPER_OPTION_MOVE_CARDS_EVERYWHERE ) ; }
static public Users fromString ( String str ) { return ServiceGenerator . getGson ( ) . fromJson ( str , Users . class ) ; }
public void update ( float delta ) { context . pollEvents ( ) ; }
public void onConnectionRemoved ( ServerConfigData data ) { mExecutor . execute ( ( ) -> { mServerManagers . get ( data . uuid ) . remove ( ) ; mServerManagers . remove ( data . uuid ) ; } ) ; }
public void menuActiviated ( ) { actionType = 2 ; startAction ( 2 ) ; }
public synchronized int getTotalAvailableKnights ( ) { return this . aliveKnightsInCurrentLevel ; }
public void onLoadFinished ( Loader < Bundle > loader , Bundle data ) { Toast . makeText ( MainActivity . this , data . getString ( FileLoader . KEY_RESULT ) , Toast . LENGTH_LONG ) . show ( ) ; dismissProgressDialog ( ) ; dismissProgressListDialog ( ) ; }
public void sipServiceHasConnected ( SipService sipService ) { if ( sipService . getFirstCall ( ) != null ) { mCurrentCallId = sipService . getFirstCall ( ) . getIdentifier ( ) ; } else { finish ( ) ; } }
public ChipsEditText ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( ) ; }
public void update ( int dx , int dy , int duration , Interpolator interpolator ) { mDx = dx ; mDy = dy ; mDuration = duration ; mInterpolator = interpolator ; mChanged = true ; }
public void onDestroyActionMode ( ActionMode mode ) { actionMode = null ; deselectAll ( ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( activity ) . inflate ( R . layout . item_icon_preference , parent , false ) ) ; }
public Upload setProgress ( int progress ) { this . progress = progress ; return this ; }
public void onStartDrag ( Action action , PointF location ) { rightDragHandle . animate ( ) . alpha ( 0 . 5f ) ; }
public void setUnderlineColorResource ( int resId ) { underlineColor = getResources ( ) . getColor ( resId ) ; invalidate ( ) ; }
public void onHorizontalSwipeEnd ( ) { mSwipeCancelled = false ; if ( mSwipeOverlay != null ) { mSwipeOverlay . onSwipeEnd ( ) ; } }
public String exec ( ExecutePack pack ) { XMLPrefsSave save = pack . getPrefsSave ( ) ; String s = XMLPrefsManager . get ( String . class , save ) ; if ( s . length ( ) == 0 ) return "\"\"" ; return s ; }
public void onFailure ( Call < HackerNewsItem > call , Throwable t ) { notifyItem ( itemId , null ) ; }
public static void set ( final int [ ] coords , final int x , final int y ) { coords [ INDEX_X ] = x ; coords [ INDEX_Y ] = y ; }
public boolean onQueryTextSubmit ( String s ) { hideSoftKeyboard ( ) ; return true ; }
private void changeTeam ( long teamNumber ) { mSearchTeamView . setText ( String . valueOf ( teamNumber ) ) ; mTeamsLocationsMapPresenter . loadTeam ( teamNumber ) ; }
public void run ( ) { Logger . log ( c , out ) ; }
public void run ( ) { if ( mSecondsLeft <= 0 ) { return ; } handler . postDelayed ( this , 1000 ) ; }
public Loader < List < Album >> onCreateLoader ( int id , Bundle args ) { return new AsyncAlbumLoader ( getActivity ( ) ) ; }
public GtasksMetadataServiceTestModule ( Context context ) { service = new GtasksTestPreferenceService ( new Preferences ( context , null ) ) ; }
public String process ( @ NonNull ClientInterface client , @ NonNull JSONObject obj ) throws JSONException { return obj . getString ( "result" ) ; }
public void play_LettersMode ( SoundCallBack callback ) { this . PlayMp3 ( R . raw . az_letters_mode , callback ) ; }
public int getSprinterCount ( ) { return mSprinterUnits ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = inflater . inflate ( R . layout . recycler_item_main , parent , false ) ; return new ViewHolder ( v ) ; }
public void bind ( String text ) { mBoundText = text ; ( ( TextView ) itemView ) . setText ( text ) ; }
public synchronized WaypointDbDataSource getWaypointDbDataSource ( ) { if ( mWaypointDbDataSource == null ) { File waypointsFile = new File ( getExternalDir ( "databases" ) , "waypoints . sqlitedb" ) ; mWaypointDbDataSource = new WaypointDbDataSource ( this , waypointsFile ) ; } return mWaypointDbDataSource ; }
public View getView ( int position , View view , ViewGroup viewGroup ) { return gridImage . get ( position ) ; }
public void setPostAvatar ( String postAvatar ) { this . mPostAvatar = StringUtils . notNullStr ( postAvatar ) ; }
public void onClick ( DialogInterface dialog , int whichButton ) { Group g = groupsAdapter . getItem ( ( int ) info . id ) ; DataSource . getInstance ( ) . deleteGroup ( g ) ; loadGroups ( ) ; }
public Maybe < Tag > edit ( @ NonNull Tag entity ) { return crudHelper . edit ( entity ) ; }
public String toString ( ) { return lat + lon + type ; }
public void commencer_click ( View view ) { startActivity ( new Intent ( this , Dashboared . class ) ) ; }
public void onProgress ( double progress , long millis ) { }
public SharedPreferencesPropertyBackend setLong ( String key , long value ) { setLong ( key , value , _prefApp ) ; return this ; }
public void startProcessing ( ) { enabled = true ; if ( thread == null ) { thread = new Thread ( this , "MIDletEventQueue" ) ; thread . start ( ) ; } }
public void onEditDocument ( Long documentId ) { ActivityEditDocument . launchForResult ( this , documentId , EDIT_DOCUMENT_CODE ) ; }
public static int invertColor ( int color ) { return ( 0xFFFFFF - color ) | 0xFF000000 ; }
public void onTaskError ( String error ) { Helpers . sendToNotificationBar ( context . getApplicationContext ( ) , error ) ; AgentLog . e ( error ) ; }
public void openFileChooser ( ValueCallback < Uri > uploadMsg , String acceptType ) { mUIController . openFileChooser ( uploadMsg ) ; }
public void testRenderAlliancesWithList ( ) { List < ListItem > elements = new ArrayList <> ( ) ; mRenderer . renderAlliances ( mAlliances , elements ) ; assertAllianceList ( elements ) ; }
public void onClearCacheEvent ( ClearCacheEvent event ) { if ( event . isNot ( ClearCacheEvent . UNIVERSITY ) ) { return ; } persons = null ; }
public int hashCode ( ) { return ( mName . hashCode ( ) + " " + mValue . hashCode ( ) ) . hashCode ( ) ; }
public void setWallet ( double wallet ) { this . wallet = wallet ; }
public void setDialect ( List < String > dialect ) { this . dialect = dialect ; }
public List < Song > loadInBackground ( ) { return GenreLoader . getSongs ( getContext ( ) , genre . id ) ; }
public void setOverrideDownloadDirectory ( Uri uri , boolean isSystem ) { mDownloadDirectoryOverrideURI = uri ; mIsDownloadDirectoryOverrideURISystem = isSystem ; mPreferences . edit ( ) . putString ( PREF_DCC_DIRECTORY_OVERRIDE_URI , uri . toString ( ) ) . putBoolean ( PREF_DCC_DIRECTORY_OVERRIDE_URI_SYSTEM , isSystem ) . apply ( ) ; }
private void onPreferenceChanged ( int key , boolean contextChanged ) { if ( ! contextChanged ) { getAdapter ( ) . initDisplayOptions ( mRecyclerView ) ; } }
public static void checkNonNull ( @ Nullable Object object ) { if ( object == null ) { throw new RuntimeException ( "Object must not be null" ) ; } }
public int getCount ( ) { return Tags . kinds . length ; }
public TLRPC . UserFull getCurrentUserInfo ( ) { return userInfo ; }
public int getItemCount ( ) { if ( null == scoresList ) return 0 ; return scoresList . size ( ) ; }
public void toggle ( int position ) { if ( getSelected ( position ) ) selectedItems . delete ( position ) ; else selectedItems . append ( position , true ) ; notifyItemChanged ( position ) ; onItemSelectedListener . onItemSelected ( ) ; }
public void onItemResumeClicked ( @ NonNull DownloadItem item ) { viewModel . resumeIfError ( item . info ) ; }
public PodcastRealm getPrevInfo ( ) { return prevInfo_ ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { changeTrackerType ( 2 ) ; showHideCustFields ( View . GONE ) ; } }
public void cancelDeletion ( ) { if ( pendingRemoval != null ) { pendingRemoval . dispose ( ) ; pendingRemoval = null ; itemsToRemove = null ; } }
private void initializeView ( ) { InputStream is = getContext ( ) . getResources ( ) . openRawResource ( + R . drawable . congratulations ) ; mMovie = Movie . decodeStream ( is ) ; }
private float getFontScaled ( boolean scale ) { if ( scale ) { return this . fontSize / 4 ; } return this . fontSize ; }
public void updateAllPlaylistFragment ( ) { AllPlaylistsFragment playListFragment = ( AllPlaylistsFragment ) fragMan . findFragmentByTag ( "allPlaylists" ) ; if ( playListFragment != null && playListFragment . allPlaylistRecycler != null ) { playListFragment . allPlaylistRecycler . getAdapter ( ) . notifyDataSetChanged ( ) ; } }
public Classroom ( ) { }
public void success ( Contact contact ) { encryptTextMessage ( message ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { find ( findTextField . getText ( ) . toString ( ) , false , 0 ) ; }
public void onClick ( View v ) { Intent i = new Intent ( TalksShowMoreActivity . this , TalkDetailsActivity . class ) ; i . putExtra ( "event_name" , eventName ) ; startActivity ( i ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item , parent , false ) ) ; }
public void onClick ( View v ) { try { ExternalAppUtil . openMapIntent ( MainFragment . this , ExternalAppUtil . getMapUri ( location ) ) ; } catch ( UnsupportedEncodingException e ) { FirebaseCrash . report ( e ) ; e . printStackTrace ( ) ; } }
public Builder capacity ( int capacity ) { this . capacity = capacity ; return this ; }
public boolean isCertKnown ( Certificate cert ) { try { return appKeyStore . getCertificateAlias ( cert ) != null ; } catch ( KeyStoreException e ) { return false ; } }
public LocationRecord createFromParcel ( Parcel source ) { return new LocationRecord ( source ) ; }
public void onStart ( ) { super . onStart ( ) ; showWelcomeText ( ) ; showAd ( ) ; }
public Stats . AxisType getStatType ( ) { return mStatType ; }
public TodoListPreview ( TodoList todoList , TodoListHeader header , List < TodoListItem > items ) { this . todoList = todoList ; this . header = header ; this . items = items ; }
public MeasureLayerJoin ( @ NonNull String measurement , @ NonNull String layer ) { this . measurement = measurement ; this . layer = layer ; }
public int getDataDirectionMarker ( ) { if ( dataDirection == ChameleonLogUtils . DATADIR_INCOMING ) return R . drawable . incoming_arrow16 ; else if ( dataDirection == ChameleonLogUtils . DATADIR_OUTGOING ) return R . drawable . outgoing_arrow16 ; else return R . drawable . xfer16 ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { holder . bind ( at ( position ) , mAlignment ) ; super . onBindViewHolder ( holder , position ) ; }
public final void peers ( AbstractClient . OnResult < Peers > listener ) { clientSend ( AriaRequests . getPeers ( gid ) , listener ) ; }
public void testGetStoriesNoListener ( ) { client . getStories ( "filter" , ItemManager . MODE_DEFAULT , null ) ; verify ( TestRestServiceFactory . algoliaRestService , never ( ) ) . searchByDateRx ( eq ( "filter" ) ) ; }
public void onClick ( View v ) { if ( homeActivity . queueCurrentIndex != 0 ) { mMediaPlayer . pause ( ) ; mCallback . onPreviousTrack ( ) ; } }
public CircleTransform ( ) { super ( ) ; }
public void onClick ( View v ) { SpeedWalkDirectionEditorDialog editor = new SpeedWalkDirectionEditorDialog ( SpeedWalkConfigurationDialog . this . getContext ( ) , SpeedWalkConfigurationDialog . this , service ) ; editor . show ( ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; if ( sideNavDrawer . isDrawerOpen ( GravityCompat . START ) ) { sideNavDrawer . closeDrawer ( GravityCompat . START ) ; } }
public void onRelease ( ) { Log . d ( TAG , "Session onRelease ( " + mSessionNumber + " ) " ) ; mTvheadendPlayer . release ( ) ; }
public void testObjectNotEqualsAddr ( ) { ComputerParcelable computerParcelable = new ComputerParcelable ( "com1" , "1" ) ; Object object = new ComputerParcelable ( "com1" , "2" ) ; assertFalse ( computerParcelable . equals ( object ) ) ; }
public String getFileName ( ) { return fileName ; }
public void setImageUrl ( String url ) { ImageLoader . loadImage ( context , url , bigImage ) ; }
public void setProgressTintList ( @ Nullable ColorStateList tint ) { logProgressBarTintWarning ( ) ; setSupportProgressTintList ( tint ) ; }
public void setData ( List < Question > data ) { questions = data ; }
private void load ( boolean force ) { thread . run ( IG , ( ) -> load ( force , null ) ) ; }
public WallabagService . ResponseFormat getDownloadFormat ( ) { return downloadFormat ; }
public ArtistDigest create ( Cursor source ) { return new ArtistDigest ( source . getString ( source . getColumnIndex ( Tables . ArtistsReadable . ARTIST . getName ( ) ) ) ) ; }
public void checkServerTrusted ( X509Certificate [ ] chain , String authType ) throws CertificateException { MemorizingTrustManager . this . checkCertTrusted ( chain , authType , domain , true , false ) ; }
public void run ( ) { if ( ! delayedEncryptedChatUpdates . isEmpty ( ) ) { MessagesController . getInstance ( ) . processUpdateArray ( delayedEncryptedChatUpdates , null , null , false ) ; delayedEncryptedChatUpdates . clear ( ) ; } }
public void onAdLoaded ( ) { MixpanelManager . getInstance ( ) . track ( MixpanelManager . EVENT_ADAD_AD_LOADED ) ; }
public static Intent passwordRequest ( Context context ) { Intent i = new Intent ( context . getApplicationContext ( ) , ConversationsActivity . class ) ; i . setAction ( ACTION_AUTH_REQUEST_PASSWORD ) ; return i ; }
public PreferenceHeaderAdapter ( Context context , List < PreferenceHeader > items ) { super ( context , 0 , items ) ; mLayoutInflater = ( LayoutInflater ) context . getSystemService ( Context . LAYOUT_INFLATER_SERVICE ) ; }
public Icon getIcon ( ) { return icon ; }
public static boolean getDisplayHiddenFiles ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( PREFS_DISPLAYHIDDENFILES , false ) ; }
public void addListener ( OnIconPreferenceChangedListener listener ) { onIconPreferenceChangedListeners . add ( listener ) ; }
public static org . thoughtcrime . securesms . backup . BackupProtos . Attachment parseDelimitedFrom ( java . io . InputStream input ) throws java . io . IOException { return PARSER . parseDelimitedFrom ( input ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseCurrentMetadata . Builder getResponseCurrentMetadataBuilder ( ) { bitField0_ | = 0x00040000 ; onChanged ( ) ; return getResponseCurrentMetadataFieldBuilder ( ) . getBuilder ( ) ; }
public void onUpdatePasswordSuccess ( String token ) { updateButtonIfEnabled ( true ) ; mToken = token ; Bundle bundle = new Bundle ( ) ; bundle . putString ( "token" , mToken ) ; redirectToAnotherScreenAsFirstScreen ( MainAppScreenActivity . class , bundle ) ; }
public LocalDate getDateDebutEcheance ( ) { return dateDebutEcheance ; }
public int getCount ( ) { return 5 ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { getLoaderManager ( ) . initLoader ( LOADER_ID , savedInstanceState , this ) ; super . onActivityCreated ( savedInstanceState ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; encryptedAction . serializeToStream ( stream ) ; }
public DDServings ( Day day , Food food ) { this . day = day ; this . food = food ; }
public ProjectItemManager ( ProjectItemEventListener listener ) { this . listener = listener ; this . viewListener = new EventClickListener ( EventType . VIEW ) ; this . selectListener = new EventClickListener ( EventType . SELECT ) ; this . editListener = new EventClickListener ( EventType . EDIT ) ; }
public void onClick ( View v ) { int adapterPosition = getAdapterPosition ( ) ; Bookmark bookmark = mFilteredData . get ( adapterPosition ) ; if ( mClickHandler != null ) mClickHandler . onBookmarkClick ( bookmark ) ; }
public boolean isValid ( ) { parse ( true ) ; return valid ; }
public void onClick ( View v ) { if ( mClickListener != null ) mClickListener . onItemClick ( getAdapterPosition ( ) , mPosterImageView ) ; }
public void hideNoteView ( ) { ViewUtils . hideReveal ( binding . quickNoteContainer ) ; binding . quickNoteView . removeAllViewsInLayout ( ) ; if ( mCallback != null ) { mCallback . onClose ( ) ; } }
public void setPresenter ( FriendsActivityPresenter presenter ) { mPresenter = presenter ; }
private void initBackgroundPrefs ( ) { binding . bgImagePrefs . setChecked ( getPrefs ( ) . isCalendarImagesEnabled ( ) ) ; binding . bgImagePrefs . setOnClickListener ( view -> changeBackgroundPrefs ( ) ) ; }
public synchronized void onPostInit ( ) { for ( Widget w : elements ( ) ) { w . onPostInit ( ) ; } }
public boolean removeEntry ( float xValue , int dataSetIndex ) { Log . e ( "MPAndroidChart" , "removeEntry ( . . . ) not supported for CombinedData" ) ; return false ; }
public void checkServerTrusted ( @ NonNull X509Certificate [ ] certs , String arg1 ) throws CertificateException { Date today = new Date ( ) ; for ( X509Certificate certificate : certs ) { certificate . checkValidity ( today ) ; } }
public void set ( @ NonNull PlayPauseDrawable d , Float value ) { d . setProgress ( value ) ; }
private void setRestartImageResource ( ) { if ( Build . VERSION . SDK_INT >= 21 ) { restartButton . setImageResource ( R . drawable . anim_ic_restart ) ; } else { restartButton . setImageResource ( R . drawable . ic_refresh_36dp ) ; } }
public void removeEntry ( VaultEntry entry ) { _adapter . removeEntry ( entry ) ; updateEmptyState ( ) ; }
public void onServiceStopped ( ) { mConnected = false ; finish ( ) ; }
public static void close ( @ Nullable Cursor cursor ) { if ( cursor == null ) { return ; } try { cursor . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
private void hideEmptyView ( ) { if ( isAdded ( ) && mActionableEmptyView != null ) { mActionableEmptyView . setVisibility ( View . GONE ) ; } }
public Content toContent ( LottieDrawable drawable , BaseLayer layer ) { if ( ! drawable . enableMergePathsForKitKatAndAbove ( ) ) { Logger . warning ( "Animation contains merge paths but they are disabled . " ) ; return null ; } return new MergePathsContent ( this ) ; }
public String getParamRole ( int index ) throws JSONException { JSONObject object = params . getJSONObject ( index ) ; return ( object . getString ( "role" ) ) ; }
public void onPropertyChanged ( Observable observable , int i ) { showToast ( PostActivity . this . viewModel . toastContent . get ( ) ) ; }
public void unregisterDirectListener ( String key , ModelNotificationListener listener ) { getAggregator ( key , true ) . removeDirectListener ( listener ) ; }
public void run ( ) { hideAttachedInput ( true ) ; }
public static boolean isPrefCustomValue ( String value ) { return value != null && value . startsWith ( CUSTOM_VALUE_PREFIX ) ; }
public void clear ( ) { mNumberInputEditText . setCursorVisible ( false ) ; mNumberInputEditText . getText ( ) . clear ( ) ; setCorrectFontSize ( ) ; }
public void clearRecentHashtags ( ) { searchAdapterHelper . clearRecentHashtags ( ) ; searchResultHashtags . clear ( ) ; notifyDataSetChanged ( ) ; }
public String getApiUrl ( ) { return get ( API_URL , BuildConfig . API_URL ) ; }
public void showsOnlyDirectoriesIfActionIsPickDirectory ( ) { android . launches ( ) . pickDirectoryWithNoSchemeAndNoType ( ) ; user . sees ( ) . fileInList ( SDCARD_MARKER_DIR_NAME ) ; user . cannotSee ( ) . fileInList ( textFile ) ; }
public void switchToPreferences ( @ SuppressWarnings ( "UnusedParameters" ) View view ) { Intent intent = new Intent ( Launcher . this , Preferences . class ) ; startActivity ( intent ) ; }
public static boolean checkError ( Stanza packet , StanzaError . Condition condition ) { return packet . getError ( ) != null && packet . getError ( ) . getCondition ( ) == condition ; }
public void onIqPacketReceived ( final Account account , final IqPacket packet ) { if ( packet . getType ( ) == IqPacket . TYPE . RESULT ) { account . getBlocklist ( ) . add ( jid ) ; updateBlocklistUi ( OnUpdateBlocklist . Status . BLOCKED ) ; } }
private void syncChildFragment ( ) { Fragment fragment = getChildFragmentManager ( ) . findFragmentById ( R . id . child_container ) ; if ( fragment instanceof AbsSearchFragment ) { ( ( AbsSearchFragment ) fragment ) . syncYourCriteriaWithParent ( ) ; } }
public void testGPlay ( ) { Lyrics result = idDecoder . doInBackground ( "https : assertNotNull ( result ) ; assertEquals ( result . getArtist ( ) , "Tycho" ) ; assertEquals ( result . getTitle ( ) , "A Walk" ) ; }
public void getHotVideosFeedCallback ( String jsonVideos ) { Log . d ( "dtube5" , jsonVideos ) ; manageFeed ( jsonVideos , DtubeAPI . CAT_HOT ) ; }
public void onBindViewHolder ( @ NonNull BlockViewHolder holder , int position ) { holder . bindBlock ( blocksArray . get ( position ) , cur ) ; }
public void run ( ) { Intent mainIntent = new Intent ( getApplicationContext ( ) , WelcomeActivity . class ) ; startActivity ( mainIntent ) ; finish ( ) ; }
public WorkshopAdapter ( @ NonNull Context context , int resource , List < WorkshopData > objects ) { super ( context , resource , objects ) ; mContext = context ; }
public void animateColorChange ( int newColor ) { if ( ATHUtil . isWindowBackgroundDark ( fragment . getActivity ( ) ) ) { fragment . playerQueueSubHeader . setTextColor ( ThemeStore . textColorSecondary ( fragment . getActivity ( ) ) ) ; } }
public void onLoadFinished ( Loader < Artist > loader , Artist data ) { setArtist ( data ) ; }
public void openFileChooser ( ValueCallback < Uri > uploadMsg ) { mUIController . openFileChooser ( uploadMsg ) ; }
public String provideBaseUrl ( ) { return Config . API_BASE_URL ; }
public final boolean containsKey ( @ NonNull Object key ) { return inRange ( key ) && m . containsKey ( key ) ; }
public void onCreate ( ) { super . onCreate ( ) ; StrictMode . enableDefaults ( ) ; initRealm ( ) ; appComponent = createAppComponent ( ) ; }
public Competition_ getCompetition ( ) { return competition ; }
private void updateButtonAccept ( ) { final boolean enabled = ! Util . isNullOrEmpty ( mEditNumber . getText ( ) . toString ( ) ) ; Lg . i ( "updateButtonAccept enabled = " , enabled ) ; mButtonAccept . setEnabled ( enabled ) ; }
public void onAttachedToRecyclerView ( @ NonNull RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; }
public String getTranslitString ( String src ) { return getTranslitString ( src , true , false ) ; }
public void onCancel ( final DialogInterface dialogInterface ) { General . quickToast ( CommentEditActivity . this , R . string . comment_reply_oncancel ) ; General . safeDismissDialog ( progressDialog ) ; }
private SqueezeboxServerMock ( Starter starter ) { username = starter . username ; password = starter . password ; canRandomplay = starter . canRandomplay ; canMusicFolder = starter . canMusicFolder ; albumsSortOrder = starter . albumsSortOrder ; }
public PhotoSizes setY ( Size y ) { this . y = y ; return this ; }
public Object getItem ( int position ) { return news . get ( position ) . title ; }
private static boolean isMediaDocument ( Uri uri ) { return "com . android . providers . media . documents" . equals ( uri . getAuthority ( ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { NetworkConnection . getInstance ( ) . ns_help_register ( server . getCid ( ) , null ) ; dismiss ( ) ; }
public void editHeader ( String uuid , String title , int position , boolean expanded ) { EditHeaderInteractor interactor = new EditHeaderInteractorImpl ( mExecutor , mMainThread , this , repository , uuid , title , position , expanded ) ; interactor . execute ( ) ; }
public final void onConnected ( ) { SENSOR_NAME = "WiFi Sensor" ; wifiManager = ( WifiManager ) getApplicationContext ( ) . getSystemService ( Context . WIFI_SERVICE ) ; }
public void setUnreadCount ( final int unreadCount ) { this . unreadCount = unreadCount ; }
private String buildUrl ( Currency fromCurrency , Currency toCurrency ) { return "http : }
public void onAdLoaded ( ) { Log . d ( "MA Banner Ad Test" , "Ad Finished Loading" ) ; }
public void dispatchFinished ( @ NonNull AddAnimationInfo info , @ NonNull RecyclerView . ViewHolder item ) { if ( debugLogEnabled ( ) ) { Log . d ( TAG , "dispatchAddFinished ( " + item + " ) " ) ; } mItemAnimator . dispatchAddFinished ( item ) ; }
public List < OCFile > getFiles ( ) { return mFiles ; }
public void onCancelled ( DatabaseError databaseError ) { MessageDBSource . setException ( databaseError . toException ( ) ) ; Toast . makeText ( getApplicationContext ( ) , "Network Issues ! " , Toast . LENGTH_SHORT ) . show ( ) ; }
public boolean hasSDCard ( ) { return mSDCardDirectory != null && BuildConfig . FULL_VERSION ; }
public Builder setOnClickListener ( MyCustomItem . OnClickListener onClickListener ) { this . onClickListener = onClickListener ; return this ; }
public void onShuffleModeChanged ( ) { for ( MusicServiceEventListener listener : mMusicServiceEventListeners ) { if ( listener != null ) { listener . onShuffleModeChanged ( ) ; } } }
public void clear ( ) { mUndoModeActive = false ; mBitmap . eraseColor ( 0 ) ; mUndo . clear ( ) ; invalidate ( ) ; if ( mCardViewer . get ( ) != null ) { mCardViewer . get ( ) . supportInvalidateOptionsMenu ( ) ; } }
public static void show ( Context context , @ StringRes int resId , Object . . . formatArgs ) { show ( context , context . getString ( resId , formatArgs ) ) ; }
public void onProgressChanged ( final DiscreteSeekBar discreteSeekBar , final int i , final boolean b ) { comm . setBoosterTemperature ( i * 10 ) ; }
public EighthBlock createFromParcel ( Parcel in ) { return new EighthBlock ( in ) ; }
public FloatArgument ( FloatArgumentDefinition . Domain d , float v ) { mDomain = d ; mValue = v ; }
public int getSecondaryPriority ( ) { return mInitiator . listId ; }
public void read ( DataInputStream dataInputStream ) throws IOException { area = Area . readArea ( dataInputStream ) ; }
public void onStop ( ) { drawerPresenter . onStop ( ) ; drawerView . unregisterDrawerToggle ( drawerToggle ) ; addWeightPresenter . onStop ( ) ; pagerPresenter . onStop ( ) ; fabMenuDeactivation . onStop ( ) ; }
public boolean onActionItemClicked ( ActionMode mode , MenuItem item ) { switch ( item . getItemId ( ) ) { case R . id . action_delete : deleteSelectedItems ( ) ; mode . finish ( ) ; return true ; default : return false ; } }
public void setSettingMenuItem ( int settingId , MenuItem menuItem ) { getSetting ( settingId ) . setMenuItem ( menuItem ) ; }
public void onReceive ( Context context , Intent intent ) { intent . setClass ( context , EvaluationEngineServiceBase . class ) ; context . startService ( intent ) ; }
private void processExitState ( int state ) { Log . d ( TAG , "call processExitState : " + state ) ; switch ( state ) { case STARTED : onExitStartedState ( ) ; break ; case STOPPED : onExitStoppedState ( ) ; break ; } }
public boolean shouldShowListPreference ( DetailListPreference preference ) { return preference != null && preference . getEntries ( ) != null && preference . getEntries ( ) . length > 0 ; }
public void setAllowedDocumentTypes ( List < DocumentType > allowedDocumentTypes ) { this . allowedDocumentTypes = allowedDocumentTypes ; }
public < R > R accept ( OrderVisitor < ? extends PROJECTION , R > visitor ) { return visitor . visit ( this ) ; }
public String getPlayerAPIToken ( ) { return prefs . getString ( "api_token" , "" ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_wallet , menu ) ; return true ; }
public void onEvent ( ResetEvent event ) { mSorularAdapter . removeAdapterItems ( ) ; tempAnswer . clear ( ) ; modControl . clear ( ) ; answerAndTempQuestionControl . clear ( ) ; addQuestionsToAdapter ( 10 ) ; EventBus . getDefault ( ) . removeStickyEvent ( event ) ; }
public Map < String , Double > getRates ( ) { return rates ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { Log . d ( TAG , "Service Started" ) ; return START_STICKY ; }
public void onClick ( DialogInterface dialog , int which ) { ConnectionsManager . getInstance ( currentAccount ) . cancelRequest ( reqId , true ) ; try { dialog . dismiss ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public void resetMenu ( ) { showMenu ( menu ) ; }
public Float getArgument ( String string , CommandSender sender ) throws CommandParsingException { try { return Float . parseFloat ( string ) ; } catch ( NumberFormatException e ) { throw new CommandParsingException ( "command . common . value . floatValue . parsing" ) ; } }
public String getName ( int meta ) { return block . getName ( meta ) ; }
public void setTextSize ( float size ) { textSize ( size ) ; postInvalidate ( ) ; }
public DietSearchListAdapter ( @ NonNull Context context , int resource , @ NonNull ArrayList < Product > objects ) { super ( context , resource , objects ) ; mContext = context ; mResource = resource ; }
public static boolean checkDownloadDirExist ( byte mode ) { String downloadDirPath = getDownloadDir ( mode ) ; File downloadDir = new File ( downloadDirPath ) ; return downloadDir . exists ( ) || downloadDir . mkdir ( ) ; }
public void testGetShift ( ) { assertThat ( workersCalendar . getShift ( days ) , is ( shift ) ) ; }
public int hashCode ( ) { return Objects . hash ( super . hashCode ( ) , city , state , address , categories , location , watershedAlliance , attributes , zipCode , distance ) ; }
public void setAutoScaleEnabled ( boolean isAutoScaleEnabled ) { this . isAutoScaleEnabled = isAutoScaleEnabled ; }
public < T > T accept ( ParseTreeVisitor < ? extends T > visitor ) { if ( visitor instanceof ScriptLanguageVisitor ) return ( ( ScriptLanguageVisitor < ? extends T > ) visitor ) . visitNumericAssign ( this ) ; else return visitor . visitChildren ( this ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; loadComments ( true , false ) ; }
private FontPackage ( File folder ) { mName = folder . getName ( ) ; mFontSet = buildFontSetForLocalPackage ( folder ) ; }
public void onResult ( List < DictionaryListEntry > results ) { adapter . swapItems ( results ) ; showSwitchSearchSnackbar ( ) ; }
public void onAttach ( @ NonNull Context context ) { this . context = context ; super . onAttach ( context ) ; }
public void onResume ( ) { super . onResume ( ) ; onScreen = true ; drawListItems ( ) ; fetchPendingRecoveries ( ) ; }
public void setDisplayName ( String displayName ) { mDisplayName = displayName ; }
private static float centerFromEnd ( int [ ] stateCount , int end ) { return ( end - stateCount [ 2 ] ) - stateCount [ 1 ] / 2 . 0f ; }
public static int getSortBy ( Context context ) { return parseInt ( getDefaultSharedPreferences ( context ) . getString ( PREFS_SORTBY , "1" ) ) ; }
public void requestReconnect ( TerminalBridge bridge ) { synchronized ( mPendingReconnect ) { mPendingReconnect . add ( new WeakReference <> ( bridge ) ) ; if ( ! bridge . isUsingNetwork ( ) || connectivityManager . isConnected ( ) ) { reconnectPending ( ) ; } } }
public int getCount ( ) { return mFourSquarePois . size ( ) ; }
public String getTotalDuration ( ) { return this . totalDuration ; }
public static Builder newBuilder ( com . openwallet . core . protos . Protos . UnspentOutput prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
public int getReg ( ) { return this . _reg ; }
public ListBuilder withButtonId ( int buttonId , OnClickListener listener ) { ImageView plusImageView = v . findViewById ( R . id . plus_minus ) ; plusImageView . setVisibility ( VISIBLE ) ; return super . withButtonId ( buttonId , listener ) ; }
public void onUpdate ( ) { setPtyUTF8Mode ( getUTF8Mode ( ) ) ; }
public void onFailure ( Call < SubredditList > call , Throwable t ) { dialog . dismiss ( ) ; }
public DrawerBuilder withOnDrawerNavigationListener ( @ NonNull Drawer . OnDrawerNavigationListener onDrawerNavigationListener ) { this . mOnDrawerNavigationListener = onDrawerNavigationListener ; return this ; }
public void onCreate ( ) { Log . d ( DbgU . getAppTag ( ) , DbgU . getMethodName ( ) ) ; mItemCursor = createItemCursor ( ) ; }
public StartMenuAdapter ( Context context , int layout , List < AppEntry > list ) { super ( context , layout , list ) ; isGrid = layout == R . layout . tb_row_alt ; updateList ( list , true ) ; }
public static void setIsSoundOn ( boolean sound ) { isSoundOn = sound ; }
public ExoVideoPlayer ( Context context , String url , ProxyConfig config ) { this . player = createPlayer ( context ) ; this . player . addVideoListener ( onVideoSizeChangedListener ) ; this . source = createMediaSource ( context , url , config ) ; }
public void listeCoursAsync ( final String codeAccesUniversel , final String motPasse ) { executeAsync ( new Functions . IFunc < ListeDeCours > ( ) { public ListeDeCours Func ( ) throws Exception { return listeCours ( codeAccesUniversel , motPasse ) ; } } ) ; }
public Operator next ( Object operator ) { return new Number ( 0 ) ; }
public boolean hasTokenId ( ) { return ( ( bitField0_ & 0x00001000 ) == 0x00001000 ) ; }
public void setFilename ( Uri filename ) { mFilename = filename ; }
public void reloadSettings ( ) throws RemoteException { mHandler . sendEmptyMessage ( MESSAGE_RELOADSETTINGS ) ; }
public void testGetType ( ) { item . populate ( new TestItem ( ) { @ Override public String getRawType ( ) { return "poll" ; } } ) ; assertEquals ( Item . POLL_TYPE , item . getType ( ) ) ; }
public void setMinProgress ( float minProgress ) { animator . setMinValue ( minProgress ) ; }
public boolean onInterceptTouchEvent ( MotionEvent event ) { return isSwipeEnabled ( ) && super . onInterceptTouchEvent ( event ) ; }
public RemoteViews getLoadingView ( ) { try { return new RemoteViews ( context . getPackageName ( ) , R . layout . widget_schedule_lessons_item_loading ) ; } catch ( Exception e ) { return null ; } }
public DispatchingAndroidInjector < Activity > activityInjector ( ) { return dispatchingAndroidInjector ; }
public void detectsNone ( ) { assertThat ( ContentType . getContentType ( "" ) , is ( Type . NONE ) ) ; }
public void clicked ( InputEvent event , float x , float y ) { super . clicked ( event , x , y ) ; game . setScreen ( new LoadingScreen ( game , Screens . level3 ) ) ; }
public void onCreate ( Bundle savedInstanceState ) { ( ( PTSDApplication ) getActivity ( ) . getApplication ( ) ) . getPtsdComponent ( ) . inject ( this ) ; super . onCreate ( savedInstanceState ) ; addPreferencesFromResource ( R . xml . preferences ) ; }
private void attachListeners ( ) { backBtn . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { ProfileActivity . super . onBackPressed ( ) ; } } ) ; }
private int getOriginalPosition ( int position ) { int correctedPosition ; if ( isDragging ( ) ) { correctedPosition = convertToOriginalPosition ( position , mDraggingItemInitialPosition , mDraggingItemCurrentPosition , mItemMoveMode ) ; } else { correctedPosition = position ; } return correctedPosition ; }
public void hide ( ) { mSystemUiVisibilityChangeListener . onSystemUiVisibilityChange ( mHideFlags ) ; }
public final List < ScoredItem > getProbableItemsList ( ) { return mSavingModule . getProbableItemsList ( ) ; }
public void onChartFocus ( @ NonNull ChartFocusEvent event ) { if ( flightProfile != null ) { flightProfile . onChartFocus ( event ) ; } }
public int getCount ( ) { return UserSubscriptions . modOf == null ? 2 : UserSubscriptions . modOf . size ( ) + 5 ; }
private byte getDataSeparator ( ) { return data_separator ; }
public static void recycleInstance ( MPPointD instance ) { pool . recycle ( instance ) ; }
public String toString ( ) { return value + "/" + subject + "/" + teacher + "/" + date + "/" + description + "/" + save_date + "/" + mode ; }
public double getErr ( ) { return err ; }
public void onSuccess ( List < Post > results ) { callback . onSuccess ( results ) ; if ( shouldFetchFromServer ) getFromRemoteByAuthorId ( authorId , callback ) ; }
private void SairModoPesquisa ( ) { this . idAppBarLayoutSearch . setVisibility ( View . INVISIBLE ) ; this . idAppBarLayout . setVisibility ( View . VISIBLE ) ; FunctionsTools . closeKeyboard ( ListClientsActivity . this , this . View ) ; }
public void addPlayedGame ( ) { currentStats [ INDEX_GAMES_NO ] ++ ; }
public final void setEventListener ( final RecyclerListener listener ) { this . mEventListener = listener ; }
public void run ( ) { Log . i ( "TUTORIAL" , "ended" ) ; listener . onFinish ( getTutorial ( ) ) ; timings . clear ( ) ; currentSyncIndex = 1 ; }
public LottieValueCallback ( @ Nullable T staticValue ) { value = staticValue ; }
public Object getDataFromCache ( String key ) { return mMemoryCache . get ( key ) ; }
public void run ( ) { if ( getLifecycle ( ) . getCurrentState ( ) . isAtLeast ( Lifecycle . State . STARTED ) ) adapter . checkInternet ( ) ; }
public void onFragmentDestroy ( ) { super . onFragmentDestroy ( ) ; NotificationCenter . getInstance ( currentAccount ) . removeObserver ( this , NotificationCenter . contactsImported ) ; }
public int getCount ( ) { return mActivities . size ( ) ; }
public Builder clearEncryptionType ( ) { bitField0_ = ( bitField0_ & ~0x00000010 ) ; encryptionType_ = com . coinomi . core . protos . Protos . Wallet . EncryptionType . UNENCRYPTED ; onChanged ( ) ; return this ; }
public void swapItems ( ArrayList < String > newTasks ) { this . mDataSet = newTasks ; notifyDataSetChanged ( ) ; }
public void copy ( FileHolder tbc ) { ArrayList < FileHolder > tbcl = new ArrayList <> ( ) ; tbcl . add ( tbc ) ; copy ( tbcl ) ; }
public int add ( T item ) { throwIfInMutationOperation ( ) ; return add ( item , true ) ; }
public CampaignView ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( ) ; }
public void onReceive ( @ NonNull Context context , @ NonNull Intent intent ) { long enqueId = intent . getLongExtra ( DownloadManager . EXTRA_DOWNLOAD_ID , - 1 ) ; updateBookDownloadStatus ( context , enqueId ) ; }
public Builder clearInputDirection ( ) { bitField0_ = ( bitField0_ & ~0x00000020 ) ; inputDirection_ = 0 ; onChanged ( ) ; return this ; }
public void onFailedDownload ( String fileName ) { updateButtonState ( true ) ; }
public AbstractDataProvider getDataProvider ( ) { return ( ( DragOnLongPressExampleActivity ) getActivity ( ) ) . getDataProvider ( ) ; }
public void hideToolbars ( ) { if ( ! mToolbarHidden && mSettings . dynamicToolbars ( ) && ! mSettings . isFixedSidebar ( ) ) { toggleTopToolbar ( false ) ; toggleBottomToolbar ( false ) ; } }
private void setMaximumRange ( float maximumRange ) { this . maximumRange = maximumRange ; }
public ItemDecorationGrid ( int gridSpacingPx , int gridSize ) { mSizeGridSpacingPx = gridSpacingPx ; mGridSize = gridSize ; }
public SimpleHDKeyChain ( DeterministicKey rootkey ) { simpleKeyChain = new SimpleKeyChain ( ) ; initializeHierarchyUnencrypted ( rootkey ) ; }
public IndexedTreeSet ( @ NonNull SortedSet < E > s ) { this ( s . comparator ( ) ) ; addAll ( s ) ; }
public Integer getId ( ) { return id ; }
public void check ( ) { UsbManager manager = ( UsbManager ) context . getSystemService ( Context . USB_SERVICE ) ; if ( manager != null ) { for ( UsbDevice device : manager . getDeviceList ( ) . values ( ) ) addUSBDevice ( device ) ; } }
public void clear ( ) { try { TableUtils . clearTable ( dao . getConnectionSource ( ) , Card . class ) ; } catch ( SQLException exception ) { throw new RuntimeException ( exception ) ; } }
public void disconnect ( BleDevice bleDevice ) { if ( multipleBluetoothController != null ) { multipleBluetoothController . disconnect ( bleDevice ) ; } }
public static DebugOverlayTree getInstance ( ) { if ( INSTANCE . overlayView == null ) { throw new IllegalStateException ( "DebugOverlayTree is not initialized . Please call initApplicationInstance ( Context ) . " ) ; } return INSTANCE ; }
public void format ( IRCCloudJSONObject event , Event e , StringBuilder sb ) { if ( event != null ) { e . target_mode = event . getString ( "newmode" ) ; e . chan = event . getString ( "channel" ) ; } }
private ViewHolder ( TextView date , TextView schedule , TextView department ) { this . date = date ; this . schedule = schedule ; this . department = department ; }
public static MediaCodecInfo newPassthroughInstance ( String name ) { return new MediaCodecInfo ( name , null , null , false , false ) ; }
public void setBitmap ( Bitmap slowTime ) { this . bmp = slowTime ; }
public AdaptersSet ( @ NonNull BridgeAdapterDataObserver . Subscriber bridgeSubscriber ) { mSubscriber = bridgeSubscriber ; mAdapterTags = new ArrayList <> ( ) ; mAdapters = new ArrayList <> ( ) ; mUniqueAdapters = new ArrayList <> ( ) ; mObservers = new ArrayList <> ( ) ; }
private void setupLocale ( ) { defaultLocale = LocaleUtils . getLocale ( ) ; }
public boolean getSourceLangAutoDetect ( ) { isSourceLangAutoDetect = mAppPrefs . getBoolean ( "isSourceLangAutoDetect" , true ) ; return isSourceLangAutoDetect ; }
public String bodyForNotification ( Context context ) { String body = body ( ) ; if ( body == null ) { return context . getString ( state ( ) . getDescriptionResId ( ) ) ; } return body ; }
public Holder ( View itemView ) { super ( itemView ) ; root = itemView . findViewById ( R . id . root ) ; icon = itemView . findViewById ( R . id . icon ) ; }
public TeXFormulaSettingsParser ( ) throws ResourceParseException , IOException { this ( AjLatexMath . getAssetManager ( ) . open ( RESOURCE_NAME ) , RESOURCE_NAME ) ; }
public int compare ( Post lhs , Post rhs ) { if ( lhs . getCreated ( ) > rhs . getCreated ( ) ) return 1 ; else return - 1 ; }
private static float centerFromEnd ( int [ ] stateCount , int end ) { return ( end - stateCount [ 4 ] - stateCount [ 3 ] ) - stateCount [ 2 ] / 2 . 0f ; }
public void setTag ( TagViewModel tag ) { this . tag = tag ; updateTitle ( ) ; }
public void restoreState ( @ Nullable Parcelable savedState ) { restoreState ( savedState , false , false ) ; }
public long getParentCommentId ( ) { return queryJSON ( "meta . ids . parent_comment" , 0 ) ; }
public static String getRingbackSoundFile ( ) throws NotInitedException { if ( Util . isNullOrEmpty ( mRingbackSoundFile ) ) { throw new NotInitedException ( ) ; } return mRingbackSoundFile ; }
private void startRemoteControl ( ) { if ( remoteControl == null ) remoteControl = new RemoteControl ( this ) ; if ( ! host . isEmpty ( ) ) remoteControl . connect ( host , controlPort ) ; }
public boolean isLoggedIn ( ) { return store . isLoggedIn ( ) ; }
public final String transformUrl ( final Matcher match , String url ) { return HS_PRÆFIX + "java/" + match . group ( 1 ) . replace ( ' . ' , '/' ) + " . java" ; }
public int getTimeHandle ( ) { return mTimeHandle ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( url ) ; dest . writeString ( imageId ) ; dest . writeInt ( width ) ; dest . writeInt ( height ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; m_activity = ( MasterActivity ) activity ; m_prefs = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) . getApplicationContext ( ) ) ; m_prefs . registerOnSharedPreferenceChangeListener ( this ) ; }
public void reset ( ) { for ( Card card : cards ) { card . view . stopAnim ( ) ; } }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { final LayoutInflater inflater = LayoutInflater . from ( parent . getContext ( ) ) ; return new ViewHolder ( inflater . inflate ( R . layout . home_item_spendings , parent , false ) ) ; }
public void setImageBitmap ( Bitmap bm ) { cancelLoaderTask ( ) ; super . setImageBitmap ( bm ) ; }
public void trackSignupGoogleButtonTapped ( ) { AnalyticsTracker . track ( AnalyticsTracker . Stat . SIGNUP_SOCIAL_BUTTON_TAPPED ) ; }
public void downloadAudioIfNeed ( ) { if ( buttonState == 2 ) { FileLoader . getInstance ( ) . loadFile ( currentMessageObject . getDocument ( ) , true , 0 ) ; buttonState = 3 ; invalidate ( ) ; } }
public BookBuilder setQuality ( int quality ) { this . quality = quality ; return this ; }
public void onExitPressed ( ) { stopPolling ( ) ; if ( listener != null ) { listener . onFinish ( ) ; } }
public void cycle ( ) { if ( isRunning ( ) ) { pause ( ) ; } else if ( isStopped ( ) || isPausedAt0 ( ) ) { start ( ) ; } else { stop ( ) ; } }
private void updateMainButton ( int id ) { if ( currentFragment instanceof HomeFragment ) { Button button = currentFragment . getView ( ) . findViewById ( R . id . button_activate ) ; button . setText ( id ) ; } }
public ChameleonMiniSlotPickerPreference ( Context context , AttributeSet attrs ) { this ( context , attrs , 0 ) ; }
public final void resetPosition ( long positionUs ) throws ExoPlaybackException { streamIsFinal = false ; readEndOfStream = false ; onPositionReset ( positionUs , false ) ; }
public void onFailure ( ExecutionException e ) { Toast . makeText ( ConversationActivity . this , R . string . chat_unable_to_record_audio , Toast . LENGTH_LONG ) . show ( ) ; }
private void setStartupState ( ) { GameInputHandlerFactory factory = mGame . getConfig ( ) . getPlayerInputHandlerFactory ( mPlayerIdx ) ; mSelector . setCurrentData ( factory ) ; updateConfigureButton ( ) ; }
public void onClick ( final DialogInterface dialog , final int which ) { dialog . cancel ( ) ; }
public Item ( ) { address = null ; amount = 0L ; label = null ; }
public void showSnackbar ( String title , String actionName , View . OnClickListener listener ) { Snackbar . make ( binding . mainContainer , title , Snackbar . LENGTH_SHORT ) . setAction ( actionName , listener ) . show ( ) ; }
public void onReceive ( Context context , Intent intent ) { NotificationUtil . showUpdateReminderNotification ( context , intent ) ; }
public LiveData < PingResult > getPingValue ( @ NonNull String host ) { synchronized ( mPingValue ) { return mPingValue . get ( host ) ; } }
public void onDismiss ( DialogInterface dialog ) { isSpaceDialogVisible = false ; cancel ( true ) ; }
public boolean onStartNestedScroll ( final CoordinatorLayout coordinatorLayout , final FloatingActionButton child , final View directTargetChild , final View target , final int nestedScrollAxes ) { return nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL || super . onStartNestedScroll ( coordinatorLayout , child , directTargetChild , target , nestedScrollAxes ) ; }
public static void setTraceEnabled ( boolean enabled ) { if ( traceEnabled == enabled ) { return ; } traceEnabled = enabled ; if ( traceEnabled ) { sections = new String [ MAX_DEPTH ] ; startTimeNs = new long [ MAX_DEPTH ] ; } }
public NewCardSimulator ( ) { reset ( 0 ) ; }
public static Boolean getNewVersion ( Context context ) { int updateCode = SaveManager . get ( context ) . getIntValue ( ) . get ( SaveManager . updateVersion ) ; return UserInfo . versionCode < updateCode && updateCode != 0 ; }
private static Key createSignature ( Artist artist ) { return ArtistSignatureUtil . getInstance ( App . getInstance ( ) ) . getArtistSignature ( artist . getName ( ) ) ; }
public void onFileDownloaded ( String path ) { if ( mFileDownloadedListener != null ) { mFileDownloadedListener . onFileDownloaded ( path ) ; } }
public Uri getPhotoUri ( ) { if ( mCurrentCallerInfo != null ) { return ContentUris . withAppendedId ( ContactsContract . Contacts . CONTENT_URI , mCurrentCallerInfo . person_id ) ; } return null ; }
public static boolean syncOnNoteUpdate ( Context context ) { return getDefaultSharedPreferences ( context ) . getBoolean ( context . getResources ( ) . getString ( R . string . pref_key_auto_sync_on_note_update ) , context . getResources ( ) . getBoolean ( R . bool . pref_default_auto_sync_on_note_update ) ) ; }
public int compare ( Item item1 , Item item2 ) { return compareByPurchaseDate ( item1 , item2 ) ; }
public static TestLog Tag ( final String tagName ) { return new TestLog ( tagName ) ; }
public int getCount ( ) { return mParser . numPages ( ) ; }
public JSONObject get ( String resource , Map < String , Object > queryParams ) throws OstError { return send ( GET_REQUEST , resource , queryParams ) ; }
public DistrictsTable getDistrictsTable ( ) { return mDistrictsTable ; }
public void clearCache ( ) { if ( BuildConfig . DEBUG ) { Log . d ( LOG_TAG , "disk cache CLEARED" ) ; } try { mDiskCache . delete ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public SearchResult getSearchState ( ) { return searchRepository . searchResult ( ) . blockingFirst ( ) ; }
public Navigator ( ) { }
private boolean hasTriggerResolver ( ) { return triggerResolver != null && account != null ; }
public boolean performSync ( SyncResult syncResult , Bundle extras ) { try { doStyleSync ( ) ; return true ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return false ; }
private void removeErrorPreferences ( ) { quranSettings . clearLastDownloadError ( ) ; }
public static double getTotalExternalMemorySize ( int unit ) { try { return getTotaleSpace ( XMLPrefsManager . get ( File . class , Behavior . external_storage_path ) , unit ) ; } catch ( Exception e ) { return - 1 ; } }
public void describeTo ( Description description ) { description . appendText ( String . format ( "have menu id : %s" , resIdToString ( viewResources , menuItemId ) ) ) ; }
public void enableAccelerometerSensor ( ) { this . io . writeCharacteristic ( Profile . UUID_CHAR_1_SENSOR , Protocol . ENABLE_SENSOR_DATA_NOTIFY , null ) ; }
public void dealCards ( ) { moveToStack ( getDealStack ( ) . getTopCard ( ) , stacks [ 0 ] , OPTION_NO_RECORD ) ; stacks [ 0 ] . getTopCard ( ) . flipUp ( ) ; }
private void setFetching ( ) { binding . saveButton . setText ( getString ( R . string . fetching_keys ) ) ; }
public void changeFocusDistance ( int change ) { mainUI . changeSeekbar ( R . id . focus_seekbar , change ) ; }
private ContextFactory ( ShaderRenderer renderer ) { this . renderer = renderer ; }
public void bindItem ( @ NonNull SelectionOption selectionOption ) { titleTextView . setText ( selectionOption . getTitle ( ) ) ; }
private void startMainParsingActivity ( ) { Logger . debug ( "startMainParsingActivity" ) ; ParsingActivity_ . intent ( this ) . startForResult ( PARSING_SUB_ACTIVITY ) ; }
public void goToPostCreation ( int accountId , int ownerId , @ EditingPostType int postType ) { PlaceUtil . goToPostCreation ( requireActivity ( ) , accountId , ownerId , postType , null ) ; }
public Completable checkInternet ( ) { return Completable . fromCallable ( ( ) -> { if ( ! networkChecker . isAvailableNet ( ) ) { throw new MessageException ( R . string . error_network ) ; } return null ; } ) ; }
public static String pageDay ( Context context ) { return SaveManager . get ( context ) . getstring_appINFO ( ) . get ( SaveManager . jsonLanguageList ) ; }
private DcChatlist . Item getConversationResult ( int position ) { if ( position < searchResult . getChats ( ) . getCnt ( ) ) { return searchResult . getChats ( ) . getItem ( position ) ; } return null ; }
public static int getShipSize ( ) { int ship_size = 0 ; if ( userShipData != null ) ship_size = userShipData . size ( ) ; else ship_size = helper . getShipCount ( ) ; return ship_size + getShipCountInBattle ; }
public void onDestroy ( ) { cancelCurrentTask ( ) ; db . close ( ) ; super . onDestroy ( ) ; }
public void setOnItemClickListener ( OnItemClickListener onItemClickListener ) { this . onItemClickListener = onItemClickListener ; }
public void onDoneEditing ( ) { if ( mItemDetailsFragment != null ) { mCurrentDialogName = ITEM_DETAILS_DIALOG ; } onDialogDismissed ( ) ; }
public void onEncryptSeedSuccess ( ) { checkWalletDatadir ( new File ( app . getFilesDir ( ) , Constants . ECLAIR_DATADIR ) ) ; }
public void saveBranchDetails ( BranchDetails branchDetails ) { Realm realm = Realm . getDefaultInstance ( ) ; realm . beginTransaction ( ) ; realm . copyToRealmOrUpdate ( branchDetails ) ; realm . commitTransaction ( ) ; realm . close ( ) ; }
public static FragmentMoviesList newInstance ( String state ) { FragmentMoviesList fragmentMoviesList = new FragmentMoviesList ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putString ( SORT , state ) ; fragmentMoviesList . setArguments ( bundle ) ; return fragmentMoviesList ; }
public void execute ( AppCompatActivity activity , @ NonNull Bundle args , @ NonNull String name ) { run ( activity , activity , args , name ) ; }
public OwnerPhotoUploadable ( Context context , INetworker networker , IWallsRepository walls ) { this . context = context ; this . networker = networker ; this . walls = walls ; }
private void cleanUpError ( ) { cleanUp ( ) ; editor . errorExt ( editor . getResources ( ) . getString ( R . string . build_message_failed ) ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mOnMovieSelectedListener = null ; }
public void disableReminderAlarm ( MedicineReminder medicineReminder ) { RemindersHelper . getInstance ( getContext ( ) . getApplicationContext ( ) ) . cancelReminder ( medicineReminder ) ; }
public void serializeToStream ( AbstractSerializedData stream ) { stream . writeInt32 ( constructor ) ; stream . writeInt32 ( max_id ) ; }
public boolean mustLogin ( ) { return ! api ( ) . isLoggedIn ( ) ; }
public void showEvents ( List < Event > events ) { eventListAdapter . replaceEvents ( events ) ; }
private void setWatchface ( int index ) { final FileData fileData = fileExplorerAdapter . getItem ( index ) ; if ( fileData != null ) { WatchfaceUtil . setWfzWatchFace ( fileData . getName ( ) ) ; } }
public void onDetach ( ) { super . onDetach ( ) ; mData . clear ( ) ; mDataHolder = null ; mTrackActionListener = null ; }
public JResult extractContent ( JResult res , String html ) throws Exception { return extractContent ( res , html , formatter , true , 0 ) ; }
public static void setImageUrl ( ImageView imageView , String name ) { setImage ( imageView , Constants . BRAND_IMAGE_PATH + name + " . webp" ) ; }
public static int count ( Class < ? > modelClass ) { return count ( BaseUtility . changeCase ( DBUtility . getTableNameByClassName ( modelClass . getName ( ) ) ) ) ; }
public void onRegistrationSuccess ( User user ) { userPreference . saveUser ( user ) ; bakery . toastLong ( "Please verify your account with code sent to your email" ) ; startActivityClearTop ( VerifyAccountActivity . class , null ) ; }
public void onAnimationUpdate ( ValueAnimator animator ) { avocado = ( float ) animator . getAnimatedValue ( ) ; invalidate ( ) ; }
public void reconnect ( MainActivity activity ) { mainActivity = activity ; Timber . d ( "reconnect" ) ; }
public boolean equals ( Object obj ) { if ( obj instanceof Song ) { Song songObj = ( Song ) obj ; return fileLocation . equals ( songObj . fileLocation ) ; } else { return false ; } }
private void setBatchState ( boolean batch ) { setSelected ( batch && selectedThreads . contains ( chatId ) ) ; }
public void onCancel ( ) { Toast . makeText ( getActivity ( ) , "Canceled" , Toast . LENGTH_SHORT ) . show ( ) ; dismiss ( ) ; }
private void saveContent ( String content ) { editor . putString ( DRAFT_CONTENT , content ) . apply ( ) ; }
private OkHttpClient getHttpClient ( ) { if ( client == null ) { client = new OkHttpClient ( ) ; } return client ; }
public void testSafeToAddAuthToken4 ( ) { assertTrue ( WPUrlUtils . safeToAddWordPressComAuthToken ( WPCOM_ADDRESS_4 ) ) ; }
public void testDrinkUnitType ( ) throws Exception { when ( intent . getAction ( ) ) . thenReturn ( AddIngredientType . DRINK . getAction ( ) ) ; assertThat ( provideUnitType ( intent ) , equalTo ( AmountUnitType . VOLUME ) ) ; }
public MyCustomItem . OnClickListener getOnClickListener ( ) { return onClickListener ; }
public static PrefUtils injectPreferences ( ) { if ( preferences == null ) { preferences = new PrefUtils ( ) ; } return preferences ; }
public void onClick ( View view ) { cancel ( true ) ; }
public void setOriginalId ( long originalId ) { this . originalId = originalId ; }
private void clearCurrentState ( ) { SharedPreferences preferences = ApplicationLoader . applicationContext . getSharedPreferences ( "logininfo2" , Context . MODE_PRIVATE ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . clear ( ) ; editor . commit ( ) ; }
public String getDate ( ) { return date ; }
public void onClick ( final View v ) { onProfileImageClick ( v , true ) ; }
public T withDisabledTextColorRes ( @ ColorRes int disabledTextColorRes ) { this . disabledTextColor = ColorHolder . fromColorRes ( disabledTextColorRes ) ; return ( T ) this ; }
public boolean isNeeded ( CommentModel model ) { return true ; }
public void getStories ( long characterId , Integer offset , Integer limit , RemoteCallback < DataWrapper < List < Comic >>> listener ) { getComicListByType ( characterId , COMIC_TYPE_STORIES , offset , limit ) . enqueue ( listener ) ; }
public EventsResponse ( ArrayList < Event > dayOneEvents , ArrayList < Event > dayTwoEvents ) { this . dayOneEvents = dayOneEvents ; this . dayTwoEvents = dayTwoEvents ; }
public VersionedRook storeBook ( File file , String fileName ) throws IOException { SystemClock . sleep ( SLEEP_FOR_STORE_BOOK ) ; return databaseRepo . storeBook ( file , fileName ) ; }
public long getDuration ( ) { verifyApplicationThread ( ) ; return player . getDuration ( ) ; }
public Xrpinr withOpen ( double open ) { this . open = open ; return this ; }
public LocalDate getFirstDay ( ) { return firstDay ; }
public long getSourceBlogId ( ) { return mSourceBlogId ; }
public void run ( ) { dataStore . backup ( ) ; }
public ISqueezeService getService ( ) { return mService ; }
public int getCount ( ) { return mFolders . size ( ) ; }
private void removeNumber ( int position ) { excludedNumbers . remove ( position ) ; Collections . sort ( excludedNumbers ) ; notifyDataSetChanged ( ) ; setNoContent ( ) ; }
public void setLinkTargetBlank ( boolean linkTargetBlank ) { this . mLinkTargetBlank = linkTargetBlank ; }
public void onDestroy ( ) { Log . d ( TAG , "onDestroy" ) ; if ( mNotificationDownloadImages != null ) { if ( maxCount == 0 ) { mNotificationManager . cancel ( NOTIFICATION_ID ) ; } } super . onDestroy ( ) ; }
public AddWalletEntryActivity ( ) { super ( R . layout . activity_add_wallet_entry , R . id . activity_contact_fab , R . id . root_layout , R . id . root_layout2 ) ; }
public int getRepeatMode ( ) { return mService . get ( ) . getRepeatMode ( ) ; }
public void onClick ( View v ) { Date date = getItem ( position ) ; dinnerContract . delete ( date . getTime ( ) , DinnerContract . COLUMN_DATE , dbHelper ) ; updateResults ( ) ; }
private int loadOpacityDefaultPref ( ) { SharedPreferences prefs = getSharedPreferences ( PREFS_NAME , MODE_PRIVATE ) ; return prefs . getInt ( PREF_OPACITY_DEFAULT_PREFIX_KEY , OPACITY_LEVEL_DEFAULT ) ; }
private void handleInputModels ( ModelsBundle bundle ) { if ( isNull ( bundle ) ) { return ; } for ( AbsModel model : bundle ) { entries . add ( new AttachmenEntry ( true , model ) . setAccompanying ( true ) ) ; } }
public static Object getObject ( Field field , Object object ) { field . setAccessible ( true ) ; try { return field . get ( object ) ; } catch ( IllegalAccessException e ) { e . printStackTrace ( ) ; } return null ; }
public String getAddress ( ) { return getAddress ( accountIndex ) ; }
public int hashCode ( ) { return getCallbackBinder ( ) . hashCode ( ) ; }
public void clickStudentinfo ( View v ) { Intent i = new Intent ( this , StudentInfoActivity . class ) ; startActivity ( i ) ; }
public void onCreate ( final SQLiteDatabase db ) { db . execSQL ( "CREATE TABLE " + DB_NAME + " ( date INTEGER , steps INTEGER ) " ) ; }
public boolean areContentsTheSame ( @ NonNull T oldItem , @ NonNull T newItem ) { return true ; }
public void setOnGroupExpandListener ( @ Nullable OnGroupExpandListener listener ) { if ( mWrapperAdapter != null ) { mWrapperAdapter . setOnGroupExpandListener ( listener ) ; } else { mOnGroupExpandListener = listener ; } }
public void createEvent_WhenEmptyName_NotifyViewError ( ) { final EventViewModel eventViewModel = SampleBuilder . createEventViewModel ( ) ; eventViewModel . setName ( SampleBuilder . EMPTY_TEXT ) ; eventCreatePresenter . createEvent ( eventViewModel ) ; verify ( eventCreateView ) . onEmptyEventNameError ( ) ; verifyNoMoreInteractions ( createEventUseCase ) ; }
public void onPause ( ) { super . onPause ( ) ; stopScan ( ) ; unregisterReceiver ( mBroadcastReceiver ) ; }
public void close ( ) { if ( preparedPlaybackQueue != null ) preparedPlaybackQueue . close ( ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return messages_Chats . TLdeserialize ( stream , constructor , exception ) ; }
public String getCanopyType ( ) { return canopy_type ; }
public void onAnimationCancel ( Animator animation ) { if ( currentTopViewAnimation != null && currentTopViewAnimation . equals ( animation ) ) { currentTopViewAnimation = null ; } }
private boolean isLocked ( ) { return mIssue . locked ( ) && ! mIsCollaborator ; }
public BrowseAdapter ( Activity context ) { super ( context , R . layout . fragment_list_item , new ArrayList < MediaBrowserCompat . MediaItem > ( ) ) ; }
public void setCallback ( CallBack callback ) { _callback = callback ; }
public void onCancel ( final DialogInterface dialogInterface ) { cancelled . set ( true ) ; General . safeDismissDialog ( progressDialog ) ; }
public static Intent makeCmdIntent ( int cmd , boolean shuffle ) { return new Intent ( MusicService . ACTION_CMD ) . putExtra ( EXTRA_CONTROL , cmd ) . putExtra ( EXTRA_SHUFFLE , shuffle ) ; }
public void flip ( int x , int y ) { int offset = y * rowSize + ( x / 32 ) ; bits [ offset ] ^ = 1 << ( x & 0x1f ) ; }
private void showCircle ( ) { isRefreshing . set ( true ) ; isRefreshing . notifyChange ( ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { GalleryDTO gallery = dataSnapshot . getValue ( GalleryDTO . class ) ; if ( gallery != null ) { myViewHolder . btnFavorites . setImageResource ( R . drawable . cic_star_on ) ; } }
public static synchronized void initialize ( ) { if ( instance == null ) instance = new SoundHandler_SecurityExample ( ) ; }
public void onDraftUpdated ( boolean success , int draftId ) { }
public void handleAndSendChangeInternal ( @ NonNull final String what ) { handleChangeInternal ( what ) ; sendChangeInternal ( what ) ; }
public void showNoCommentTipsIfNeed ( ) { mNoContentTipView . setVisibility ( mAdapter . isEmpty ( ) ? View . VISIBLE : View . GONE ) ; }
public void onViewMedia ( int position , int attachmentIndex , @ Nullable View view ) { Status status = statuses . get ( position ) . asRightOrNull ( ) ; if ( status == null ) return ; super . viewMedia ( attachmentIndex , status , view ) ; }
public MyListAdapter ( Context context , List < String > expandableListTitle , HashMap < String , List < String >> expandableListDetail ) { this . context = context ; this . listTitle = expandableListTitle ; this . listDetail = expandableListDetail ; }
public void deleteContact ( byte [ ] publicKey ) { int idx = this . findContact ( publicKey ) ; if ( idx >= 0 ) { this . contacts . remove ( idx ) ; } }
public void onAnimationStart ( Animator animator ) { dispatchMoveStarting ( holder ) ; }
public DrawerItemViewHelper withDrawerItems ( IDrawerItem . . . drawerItems ) { Collections . addAll ( this . mDrawerItems , drawerItems ) ; return this ; }
public QuranRow fromAyahBookmarksHeader ( Context context ) { return new QuranRow . Builder ( ) . withText ( context . getString ( R . string . menu_bookmarks_ayah ) ) . withType ( QuranRow . HEADER ) . build ( ) ; }
public void stop ( ) { sendMessage ( What . STOP , 0 , 0 , null , 0 ) ; }
public int getViewType ( ) { if ( isSame ( type , BY_DATE_SHOP ) ) { return SHOPPING ; } else { return REMINDER ; } }
public void clearSelection ( ) { ArrayList < Integer > selectedPositions = getSelectedPositions ( ) ; selectedItems . clear ( ) ; for ( int i : selectedPositions ) notifyItemChanged ( i ) ; onItemSelectedListener . onItemSelected ( ) ; }
public static boolean enableIPv6 ( ) { return gPrefs . getBoolean ( ENABLE_IPV6 , true ) ; }
public boolean onTouch ( View v , MotionEvent event ) { return StickerPreviewViewer . getInstance ( ) . onTouch ( event , stickersGridView , StickerMasksView . this . getMeasuredHeight ( ) , stickersOnItemClickListener , null ) ; }
public void onFailure ( Call < Results < Module >> call , Throwable t ) { registeringPatient = false ; mPatientInfoView . setProgressBarVisibility ( false ) ; ToastUtil . error ( t . getMessage ( ) ) ; }
public CircularProgressDrawable ( int style , @ NonNull Context context ) { super ( new Drawable [ ] { new CircularProgressBackgroundDrawable ( ) , new SingleCircularProgressDrawable ( style ) , new SingleCircularProgressDrawable ( style ) , } , context ) ; }
public de . qspool . clementineremote . backend . pb . ClementineRemoteProtocolBuffer . ResponseLibraryChunk . Builder getResponseLibraryChunkBuilder ( ) { bitField0_ | = 0x10000000 ; onChanged ( ) ; return getResponseLibraryChunkFieldBuilder ( ) . getBuilder ( ) ; }
public void onAnimationEnd ( Animator animation ) { switchView . setImageResource ( R . drawable . arrow_down_light ) ; mShow = false ; }
public void attachView ( ReportCategoryMvpView mvpView ) { super . attachView ( mvpView ) ; }
public void setLineSize ( int lineSize ) { LineSize = lineSize ; }
public Object getItem ( int i ) { return leDevices . get ( i ) ; }
public DcMsg getMessageRecord ( ) { return messageRecord ; }
private static void rebuild ( ) { ui . updatePaletteMenu ( ) ; }
public void maybeThrowSourceInfoRefreshError ( ) throws IOException { playlistTracker . maybeThrowPlaylistRefreshError ( ) ; }
public ClientReusableViewHolder ( View view ) { ButterKnife . bind ( this , view ) ; }
public void onBackPressed ( ) { if ( mWebView . canGoBack ( ) ) { mWebView . goBack ( ) ; } else { finish ( ) ; super . onBackPressed ( ) ; } }
public void enableSizeCache ( boolean enable ) { mEnableSizeCache = enable ; textCachedSizes . clear ( ) ; adjustTextSize ( getText ( ) . toString ( ) ) ; }
public List < LecturesData > loadInBackground ( ) { if ( mUrl == null ) { return null ; } List < LecturesData > lecturesDataList = ExtractWorkshop . extLectures ( mUrl ) ; return lecturesDataList ; }
public void permissionsDenied ( boolean denied ) { if ( mPicker != null ) mPicker . setClosestHidden ( denied ) ; if ( denied ) mCentralMap . getErrorBanner ( ) . animateBanner ( false ) ; }
public void onCheckChange ( boolean isChecked ) { if ( isChecked ) { continueCheck ( ) ; } else { continueUncheck ( ) ; } }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_messages_highScores . TLdeserialize ( stream , constructor , exception ) ; }
public void onFailure ( Call < DraftUploadResponse > call , Throwable t ) { if ( draftsHelperCallback != null ) { draftsHelperCallback . onNewDraftSaved ( false , 0 ) ; } }
public PostCommentListingURL commentId ( String commentId ) { if ( commentId != null && commentId . startsWith ( "t1_" ) ) { commentId = commentId . substring ( 3 ) ; } return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public void slideToOutsideOfWindow ( RecyclerView . ViewHolder holder , int dir , boolean shouldAnimate , long duration ) { cancelDeferredProcess ( holder ) ; slideToOutsideOfWindowInternal ( holder , dir , shouldAnimate , duration , null ) ; }
public void setup ( WelcomeConfiguration config ) { super . setup ( config ) ; if ( this . titleTypefacePath == null ) { titleTypeface ( config . getDefaultTitleTypefacePath ( ) ) ; } }
public void onFailure ( Call < Results < Patient >> call , Throwable t ) { registeringPatient = false ; mPatientInfoView . setProgressBarVisibility ( false ) ; ToastUtil . error ( t . getMessage ( ) ) ; }
public void clearSelectedTransactions ( long [ ] ids ) { String sql = "UPDATE " + TRANSACTION_TABLE + " SET " + TransactionColumns . status + " = '" + TransactionStatus . CL + "'" ; runInTransaction ( sql , ids ) ; }
public Set < Filter < ? super PROJECTION >> getFilters ( ) { return filters ; }
private void onInputChanged ( ) { GameInputHandlerFactory factory = mSelector . getCurrentData ( ) ; mGame . getConfig ( ) . setPlayerInputHandlerFactory ( mPlayerIdx , factory ) ; mGame . getConfig ( ) . flush ( ) ; updateConfigureButton ( ) ; }
public void onClick ( View view ) { presenter . startPerformBluetoothSync ( adventureFragment ) ; }
public void show ( ) { addAction ( showAction . get ( ) ) ; Core . scene . add ( this ) ; if ( shown != null ) shown . listen ( ) ; }
public boolean readScheduRankFromBackup ( Context context ) throws FileIOException { return readScheduRankFromFile ( m_scheduRank . getName ( ) + BACKUP_FILES_SUFFIX , context , true , true ) ; }
public void launchContributionActivity ( ) { startActivityWithFlags ( this , MainActivity . class , Intent . FLAG_ACTIVITY_CLEAR_TOP , Intent . FLAG_ACTIVITY_SINGLE_TOP ) ; }
public void setScoresOfQuiz ( double scoresOfQuiz ) { this . scoresOfQuiz = scoresOfQuiz ; }
private < U > U queryJSON ( String query , U defaultObject ) { synchronized ( mSyncLock ) { if ( mNoteJSON == null ) { return defaultObject ; } return JSONUtils . queryJSON ( mNoteJSON , query , defaultObject ) ; } }
public void setCullExtraneous ( boolean pIn ) { mBuffer . setCullExtraneous ( pIn ) ; }
public static void applyShakeAnimation ( Context context , View view ) { Animation shake ; shake = AnimationUtils . loadAnimation ( context , R . anim . mi_shake ) ; view . startAnimation ( shake ) ; }
public void onPlayerStart ( SnapclientService snapclientService ) { Log . d ( TAG , "onPlayerStart" ) ; updateStartStopMenuItem ( ) ; }
public void setSearchResult ( List < Station > stations ) { this . stations . accept ( stations ) ; setCurrentStationFromPreferences ( stations ) ; }
private void setArtist ( String str ) { textArtist . setText ( str ) ; } */
public void setMorningTime ( String value ) { putString ( TIME_MORNING , value ) ; }
public void setTimestampStart ( long timestamp ) { timestamp_start = new UnixTimestamp ( timestamp ) ; }
public Builder gradYear ( int gradYear ) { this . gradYear = gradYear ; return this ; }
public boolean isPrimary ( ) { return this . isPrimary == 1 ; }
public Double getHeight ( ) { return height ; }
public int getReblogsCount ( ) { return reblogsCount ; }
public void setAddress ( @ NonNull String mAddress ) { this . mAddress = mAddress ; }
public void setReleaseDate ( String releaseDate ) { this . releaseDate = releaseDate ; }
private void throwIfSaveFailed ( long id ) { if ( id == - 1 ) { throw new LitePalSupportException ( LitePalSupportException . SAVE_FAILED ) ; } }
public void shouldNotPassValidation_noBirthDate ( ) { patient . setBirthdate ( null ) ; presenter . confirmUpdate ( patient ) ; verify ( view ) . scrollToTop ( ) ; }
public static boolean isText ( String mimeType ) { return ( mimeType != null && mimeType . toLowerCase ( Locale . ROOT ) . startsWith ( "text/" ) ) ; }
public void setOriginalImagePref ( int originalImagePref ) { editor . putString ( "OriginalImagePref" , "" + originalImagePref ) ; editor . commit ( ) ; }
public void editTask ( long id ) { startActivity ( new Intent ( this , TaskEditActivity . class ) . putExtra ( TaskProvider . COLUMN_TASKID , id ) ) ; }
public GncXmlExporter ( ExportParams params , SQLiteDatabase db ) { super ( params , db ) ; LOG_TAG = "GncXmlExporter" ; }
public SnapshotDisksFragment ( ) { super ( SnapshotDisk . class ) ; }
public void onDestroy ( ) { mCharacterPresenter . detachView ( ) ; super . onDestroy ( ) ; }
private File folder ( ) { String folderPath = parameter ( PARAMETER_FOLDER_PATH , "/" ) ; return new File ( folderPath ) ; }
public int getCurrentTime ( ) { return native_getCurrentTime ( currentAccount ) ; }
public Preview getPreview ( ) { return preview ; }
public int hashCode ( ) { return Objects . hash ( id , name ) ; }
public void readParams ( AbstractSerializedData stream , boolean exception ) { video_unused = Video . TLdeserialize ( stream , stream . readInt32 ( exception ) , exception ) ; }
public SummaryNumber ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; init ( context ) ; }
public static String getStringFromLong ( long data ) { return String . format ( "%08x" , data ) ; }
public IBinder onBind ( Intent intent ) { return musicBind ; }
public void run ( ) { updateDisplayedExperiments ( ) ; }
public Peers process ( @ NonNull ClientInterface client , @ NonNull JSONObject obj ) throws JSONException { return new Peers ( obj . getJSONArray ( "result" ) ) ; }
public void syncClose ( ) { connection . releaseInterface ( mInterface ) ; isOpen = false ; }
public void onSearch ( String query ) { view . loadingMode ( ) ; LoadImages task = new LoadImages ( this ) ; task . execute ( query ) ; }
private void randomizeNextTrack ( ) { if ( mCurrentList . size ( ) > 0 ) { mNextPlayingIndex = mTrackRandomGenerator . getRandomTrackNumber ( ) ; } }
public boolean onQueryTextChange ( String newText ) { if ( mAdapter != null ) { mAdapter . filter ( newText ) ; } scrollFacilityListToTop ( ) ; return true ; }
public void hide ( ) { mPopupWindow . dismiss ( ) ; }
public void authenticateTest__failure ( ) throws Exception { BanqClient bc = new BanqClient ( cookieManager ) ; bc . authenticate ( "99999999" , "88888888" ) ; }
public void onPositive ( MaterialDialog dialog ) { Intent intent = new Intent ( mainActivity , CategoryActivity . class ) ; intent . putExtra ( "noHome" , true ) ; startActivityForResult ( intent , CATEGORY ) ; }
public String toString ( ) { return mName + " = " + mValue ; }
private boolean isEmpty ( ) { return ( getItemCount ( ) == 0 ) ; }
public void onClick ( View v ) { Intent marketIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( "https : getContext ( ) . startActivity ( marketIntent ) ; }
public SavedState createFromParcel ( Parcel in ) { return new SavedState ( in ) ; }
public void surfaceDestroyed ( SurfaceHolder surfaceHolder ) { Log . d ( videoRecordManagerLogCatTag , "surfaceDestroyed" ) ; ShutdownProcess ( ) ; }
public void run ( ) { try { dismissInternal ( ) ; } catch ( Exception e ) { FileLog . e ( e ) ; } }
public void onCheckedChanged ( CompoundButton compoundButton , boolean b ) { enable = b ; }
public CardSliderLayoutManager ( int activeCardLeft , int cardWidth , float cardsGap ) { initialize ( activeCardLeft , cardWidth , cardsGap , null ) ; }
public synchronized void doAfterInitialization ( @ NonNull Runnable runnable ) { if ( mIsInitialized ) { runnable . run ( ) ; } else { mPostInitializationWorkList . add ( runnable ) ; } }
public ColorChooserDialog show ( FragmentManager fragmentManager ) { ColorChooserDialog dialog = build ( ) ; dialog . show ( fragmentManager ) ; return dialog ; }
public boolean isLoggedWithToken ( ) { return ! mPreferences . getAuthAccessToken ( ) . isEmpty ( ) ; }
public void onImagePreviewRequested ( String mediaUrl ) { MediaPreviewActivity . showPreview ( this , null , mediaUrl ) ; }
public Object instantiateItem ( @ NonNull ViewGroup container , int position ) { Fragment fragment = ( Fragment ) super . instantiateItem ( container , position ) ; registeredFragments . put ( position , fragment ) ; return fragment ; }
public static void cancelFinalNotification ( Context context , PostImmutableModel post ) { PostUploadNotifier . cancelFinalNotification ( context , post ) ; }
public SubsetCaldav getCaldavTask ( ) { return caldavTask ; }
public void onItemSelected ( AdapterView < ? > adapterView , View view , int i , long l ) { color = WidgetUtils . getDrawable ( i ) ; binding . widgetLayout . widgetBg . setBackgroundResource ( color ) ; }
public void setSpeakers ( List < PersonListItemDTO > speakers ) { this . speakers = speakers ; }
public final String getUuId ( ) { return uuId ; }
public FrameLayout getBaseLayout ( ) { return baseLayout ; }
public void reset ( @ NonNull ConnectedActivity activity ) { reset ( activity , true ) ; }
public void onResults ( Bundle results ) { mState = MicButton . State . INIT ; mButtonMicrophone . setState ( mState ) ; onSuccess ( intentRecognizer . getStringExtra ( RecognizerIntent . EXTRA_LANGUAGE ) , results ) ; }
public static ArrayList < StatValueEntity > fromString ( String value ) { Type listType = new TypeToken < ArrayList < StatValueEntity >> ( ) { } . getType ( ) ; return new Gson ( ) . fromJson ( value , listType ) ; }
public String getEmulation ( ) { return prefs . getString ( PreferenceConstants . EMULATION , "xterm - 256color" ) ; }
public void testSoundHound ( ) { Lyrics result = idDecoder . doInBackground ( "http : assertNotNull ( result ) ; assertEquals ( "Tycho" , result . getArtist ( ) ) ; assertEquals ( "Melanine" , result . getTitle ( ) ) ; }
public void launchPurchaseFlow ( Activity act , String sku , int requestCode , OnIabPurchaseFinishedListener listener ) throws IabAsyncInProgressException { launchPurchaseFlow ( act , sku , requestCode , listener , "" ) ; }
public BigDecimal getVariation ( ) { return variation ; }
public void onDestroy ( ) { super . onDestroy ( ) ; mExecutorService . shutdownNow ( ) ; }
private void notifyHasConnection ( ) { mBroadcastManager . sendBroadcast ( new Intent ( Constants . ACTION_HAS_CONNECTION ) ) ; }
private void handleOnUnderSwipeableViewButtonClicked ( View v ) { int position = mRecyclerView . getChildAdapterPosition ( v ) ; if ( position != RecyclerView . NO_POSITION ) { ( ( SwipeableWithButtonExampleActivity ) getActivity ( ) ) . onItemButtonClicked ( position ) ; } }
public void onClick ( final View v ) { final ChooseDictionary parent = ( ChooseDictionary ) getParent ( ) ; final String downloadTag = getString ( R . string . tag_tab_download ) ; parent . getTabHost ( ) . setCurrentTabByTag ( downloadTag ) ; }
public void setBitmap ( @ Nullable Bitmap image ) { mBitmap = image ; }
public void onClick ( View view ) { Intent intent = new Intent ( MapActivity . this , StationActivity . class ) ; intent . putExtra ( KEY_STATION , markerStation ) ; startActivity ( intent ) ; }
public Long getNdtUploadKbit ( ) { return ndtUploadKbit ; }
public void changed ( ChangeEvent event , Actor actor ) { Gdx . net . openURI ( TWITTER_URL ) ; }
private long getFistInstalledOn_GB ( String packageName ) throws NameNotFoundException { PackageInfo packageInfo = applicationContext . getPackageManager ( ) . getPackageInfo ( packageName , 0 ) ; return packageInfo . firstInstallTime ; }
public void testIsFestivalDay_Current ( ) { when ( mockClock . millis ( ) ) . thenReturn ( ( long ) Math . ceil ( standardMilliseconds ) ) ; assertThat ( workersCalendar . isFestivalDay ( ) , is ( festivalDay ) ) ; }
public RecipeIngredientHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new RecipeIngredientHolder ( parent , R . layout . item_ingredient ) ; }
public KonamiCodeLayout ( Context context ) { super ( context ) ; init ( ) ; }
public ApkInfo getApkInfo ( String packageName ) { return StreamSupport . stream ( apkExtractor . apkHelper . getInstalledApks ( ) ) . filter ( apkInfo -> apkInfo . getPackageName ( ) . equals ( packageName ) ) . findAny ( ) . orElse ( null ) ; }
public void onVisibilityChanged ( boolean visible ) { this . visible = visible ; if ( visible ) { resetDelay ( ) ; nextFrame ( ) ; } else { stopRunnable ( ) ; } }
public void onCompletion ( MediaPlayer mp ) { releaseLock ( true ) ; releaseAudioFocus ( ) ; if ( mListener != null ) { mListener . onCompletion ( this ) ; } }
public SpinnerConditionsAdapter ( @ NonNull Context context , @ NonNull List < MultiProfile . ConnectivityCondition > objects ) { super ( context , android . R . layout . simple_spinner_dropdown_item , objects ) ; this . context = context . getApplicationContext ( ) ; }
public void refreshPreferences ( ) { mSuggestionChoice = mPreferenceManager . getSearchSuggestionChoice ( ) ; }
public void run ( ) { currentChat = MessagesStorage . getInstance ( ) . getChat ( chat_id ) ; semaphore . release ( ) ; }
public String getDay ( ) { String date = DateFormat . getDateInstance ( DateFormat . FULL , Locale . getDefault ( ) ) . format ( day . getTime ( ) ) ; return ( date ) ; }
public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( qName . equalsIgnoreCase ( "item" ) ) response . items . put ( currentKey , currentValue ) ; }
private boolean isNewVersion ( ) { String version = mSharedPreferences . getString ( LAST_VERSION , "" ) ; if ( version . isEmpty ( ) ) { updateChangeLogPreferences ( ) ; return false ; } else { return ! version . equals ( BuildConfig . VERSION_NAME ) ; } }
public void setContextMenu ( final int res ) { this . mResContextMenu = res ; }
public void onLoaderReset ( Loader < Cursor > loader ) { this . threadPhotoRailView . setCursor ( glideRequests , null ) ; }
public static String getNewIssueUrl ( Context context , String from ) { return getForwardLink ( context , BuildConfig . githubIssueUrl , from ) ; }
public boolean registerUpdateCheckedListener ( final UpdateCheckedListener updateCheckedListener ) { synchronized ( mUpdateCheckedListeners ) { if ( updateCheckedListener == null || mUpdateCheckedListeners . contains ( updateCheckedListener ) ) { return false ; } return mUpdateCheckedListeners . add ( updateCheckedListener ) ; } }
public KeyboardAwareEditText ( @ NonNull Context context , AttributeSet attrs ) { super ( context , attrs ) ; correctDiretion ( ) ; }
public void onProgressUpdate ( Integer . . . progress ) { FileSenderListener . getInstance ( ) . setRowsInFile ( progress [ 0 ] ) ; }
private void loadUserData ( String userId ) { view . showProgress ( R . string . a_carregar ) ; model . getUserById ( userId , this ) ; }
public StepModel getDomainStepModel ( ) { return domainStepModel ; }
public void broadcastTx ( AbstractTransaction tx ) throws TransactionBroadcastException { throw new RuntimeException ( "Not implemented" ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { Intent myIntent = new Intent ( getApplicationContext ( ) , DestaqueActivity . class ) ; startActivityForResult ( myIntent , 0 ) ; finish ( ) ; return true ; }
private void ensureControllerCreated ( ) { if ( controller == null ) { controller = new GestureControllerForPager ( this ) ; } }
public void no ( ) { deleteAreas ( ) ; }
public void sha256FromString ( ) throws NoSuchAlgorithmException { assertEquals ( "532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25" , getJdkHashCalculatorFor ( HashType . SHA_256 ) . fromString ( inputText ) ) ; }
public DirectoryRefreshJob ( @ NonNull Context context , boolean notifyOfNewUsers ) { this ( context , null , notifyOfNewUsers ) ; }
public static void sendOutput ( Context context , CharSequence s , int type ) { sendOutput ( Integer . MAX_VALUE , context , s , type ) ; }
public FileHandle getBaseFolder ( ) { return Gdx . files . local ( Branding . NAME ) ; }
public boolean isEnded ( ) { return super . isEnded ( ) && audioTrack . isEnded ( ) ; }
public static boolean getNotificationsEnabled ( Context context ) { return getBoolean ( "pref_enable_notifications" , context . getResources ( ) . getBoolean ( R . bool . pref_default_enable_notifications ) ) ; }
public void v ( final String msg , Throwable tr ) { Log . v ( mTAG , getMessage ( msg ) , tr ) ; saveToFile ( ) ; }
public void onResume ( ) { if ( session . isStarted ( ) ) { setActionButtonStop ( ) ; } else { setActionButtonStart ( ) ; } showPreferencesAndMessages ( ) ; super . onResume ( ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { switch ( item . getItemId ( ) ) { case android . R . id . home : drawer . openDrawer ( GravityCompat . START ) ; return true ; default : } return super . onOptionsItemSelected ( item ) ; }
private boolean doesContainMediaAndWasSharedToMediaLibrary ( ShareAction shareAction , int numberOfMediaShared ) { return shareAction != null && shareAction . analyticsName . equals ( ShareAction . SHARE_TO_MEDIA_LIBRARY . analyticsName ) && numberOfMediaShared > 0 ; }
public IthakaApi provideApi ( RestAdapter restAdapter ) { return restAdapter . create ( IthakaApi . class ) ; }
public DeleteNoteInteractorImpl ( Executor threadExecutor , MainThread mainThread , Callback callback , Repository repository , String uuid ) { super ( threadExecutor , mainThread ) ; this . callback = callback ; this . repository = repository ; this . uuid = uuid ; }
public void run ( ) { MessagesProviderClient . markThreadAsRead ( mContext , mThreadId ) ; MessagingNotification . updateMessagesNotification ( mContext . getApplicationContext ( ) , false ) ; }
public void setRangeStepModel ( StepModel rangeStepModel ) { this . rangeStepModel = rangeStepModel ; }
public void onPreExecute ( ) { mProgressDialog = StyledProgressDialog . show ( DeckPicker . this , "" , getResources ( ) . getString ( R . string . emtpy_cards_finding ) , false ) ; }
public Builder ( @ NonNull final Fragment fragment , int themeResId ) { this ( new SupportFragmentResourceFinder ( fragment ) , themeResId ) ; }
public SearchResult createFromParcel ( @ NonNull Parcel source ) { return new SearchResult ( source ) ; }
public WalletAddressesAdapter ( RealmList < WalletAddress > data , NativeDataHelper . Blockchain currency ) { this . data = data ; if ( currency == NativeDataHelper . Blockchain . BTC ) { this . currency = "BTC" ; } else { this . currency = "ETH" ; } }
public void onClick ( View v ) { if ( mListenState == ListenState . LISTENING ) { mVoiceCalculator . Stop ( ) ; } else if ( mListenState == ListenState . IDLE ) { mVoiceCalculator . Start ( ) ; } }
public void onWindowFocusChanged ( boolean hasFocus ) { if ( ! hasFocus ) { if ( mStatus == STATUS_RECORDING ) stopRecord ( ) ; else if ( mStatus == STATUS_PLAYING ) pauseAudio ( ) ; } }
public void onSuccess ( Location location ) { if ( currentBestLocation == null || GeoUtils . isBetterLocation ( location , currentBestLocation ) ) { currentBestLocation = location ; } }
public int getMovementFlags ( @ NonNull RecyclerView recyclerView , @ NonNull ViewHolder viewHolder ) { int swipeFlags = ItemTouchHelper . START ; return makeFlag ( ItemTouchHelper . ACTION_STATE_SWIPE , swipeFlags ) ; }
public XmppAxolotlSession ( Account account , SQLiteAxolotlStore store , SignalProtocolAddress remoteAddress ) { this . cipher = new SessionCipher ( store , remoteAddress ) ; this . remoteAddress = remoteAddress ; this . sqLiteAxolotlStore = store ; this . account = account ; }
public void onDragCancel ( ) { if ( ! stickersTabOpen ) { return ; } stickersDragging = false ; setStickersExpanded ( wasExpanded , true , false ) ; }
public static < E > ArrayList < E > listOfOne ( E obj ) { final ArrayList < E > result = new ArrayList <> ( 1 ) ; result . add ( obj ) ; return result ; }
public void onClick ( View v ) { songsUtils . play ( 0 , songsUtils . mostPlayedSongs ( ) ) ; }
public void showFab ( ) { FloatingActionButton floatingActionButton = getActivity ( ) . findViewById ( R . id . button_floating_action ) ; floatingActionButton . show ( ) ; }
public void onClick ( View v ) { if ( v == buttonOpen ) ProjectActivity . openIt ( getContext ( ) , projectData . getSlug ( ) , idUser ) ; }
public String getHistoricalRecordId ( ) { return historicalRecordId ; }
public List < MultiProfile > getProfiles ( ) { return getProfiles ( false , null ) ; }
public String onArgNotFound ( ExecutePack pack , int index ) { MainPack info = ( MainPack ) pack ; return info . res . getString ( R . string . output_commandnotfound ) ; }
public void onStop ( ) { i2PAndroidHelper . unbind ( ) ; sI2PHelperBound = false ; }
public void onEndOfSpeech ( ) { mState = MicButton . State . TRANSCRIBING ; mButtonMicrophone . setState ( mState ) ; if ( audioCue != null ) { audioCue . playStopSound ( ) ; } }
public void dispose ( ) { super . dispose ( ) ; shapeRenderer . dispose ( ) ; }
private List < BluetoothGattService > getSupportedGattServices ( ) { if ( mBluetoothGatt == null ) return null ; return mBluetoothGatt . getServices ( ) ; }
public static void clearVideoQueue ( ) { mCurrentVideoQueue = new ArrayList <> ( ) ; videoQueueModified = false ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mContentView = null ; destroyData ( ) ; }
public void onClick ( View v ) { SparkleHelper . startTrends ( context , nationId , mode , id ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; if ( context instanceof OnStatusChangeListener ) { mListener = ( onDashboardUpdate ) context ; } else { throw new RuntimeException ( context . toString ( ) + " must implement OnFragmentInteractionListener" ) ; } }
public void onLoaderReset ( @ NonNull Loader < Cursor > loader ) { mCommodityAdapter . setList ( null ) ; }
public void setPrimaryItem ( ViewGroup container , int position , Object object ) { if ( getCurrentFragment ( ) != object ) mCurrentFragment = ( ( AbstractMainFragment ) object ) ; super . setPrimaryItem ( container , position , object ) ; }
private static int klasseToSpinnerPos ( Context context , String klasse ) { return Arrays . asList ( context . getResources ( ) . getStringArray ( R . array . spinner_klasse_entries ) ) . indexOf ( klasse . toUpperCase ( ) ) ; }
public void call ( Activity activity ) { activity . startActivity ( new Intent ( activity , PlannerActivity . class ) ) ; }
public void invalidateResult ( ) { constantResultField . setText ( "" ) ; arrayResultMatrix . setText ( "" , getFormulaList ( ) . getDimen ( ) ) ; }
public Single < List < Event >> getEvents ( EventRepository appDataStore ) { return appDataStore . getByTagId ( tagId ) ; }
public String onArgNotFound ( ExecutePack pack , int index ) { return null ; }
public void onError ( ) { Intent i = new Intent ( getActivity ( ) , Website . class ) ; i . putExtra ( LinkUtil . EXTRA_URL , url ) ; startActivity ( i ) ; getActivity ( ) . finish ( ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { updateAddressEditTextButtons ( ) ; }
public void setData ( String data ) { joke = data ; }
public void taskEdited ( ) { getTasksFromServer ( ) ; this . mainActivity . setPermissionRequired ( null , null ) ; }
public void onPause ( ) { if ( dialog != null ) dialog . dismiss ( ) ; super . onPause ( ) ; }
public float getY ( ) { return this . bitmapY ; }
public void setLinkColor ( int linkColor ) { this . mLinkHighlightColor = linkColor ; }
private void startSensor ( ) { powerManager = ( PowerManager ) getSystemService ( POWER_SERVICE ) ; wakeLock = powerManager . newWakeLock ( PowerManager . PROXIMITY_SCREEN_OFF_WAKE_LOCK , "meshenger : proximity" ) ; wakeLock . acquire ( ) ; }
public void setTask ( List < Data > tasks ) { this . tasks = tasks ; notifyDataSetChanged ( ) ; }
public static boolean isBatteryLow ( @ NonNull Context context ) { return Utils . getBatteryLevel ( context ) <= Utils . getDefaultBatteryLowLevel ( ) ; }
public void shareRhymesTest ( ) { search ( "merge" ) ; openMenuItem ( R . string . share ) ; checkShareIntentContains ( "upsurge" ) ; }
public void addAll ( List < ActivityDetails > activities ) { mActivities . addAll ( activities ) ; notifyDataSetChanged ( ) ; }
public void setTransactionAmount ( Double transactionAmount ) { this . transactionAmount = transactionAmount ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return TL_contacts_found . TLdeserialize ( stream , constructor , exception ) ; }
public void onEvent ( CommandEvents . RequestStartStop startStop ) { if ( startStop . start ) { startLogging ( ) ; } else { stopLogging ( ) ; } EventBus . getDefault ( ) . removeStickyEvent ( CommandEvents . RequestStartStop . class ) ; }
private void launchHomeScreen ( ) { viewModel . setFirstTimeLaunch ( ) ; startActivity ( new Intent ( OnBoardingActivity . this , LoginActivity . class ) ) ; finish ( ) ; }
public static double addMileage ( List < Run > runs , DistanceUnit unit ) { double sum = 0 ; for ( Run r : runs ) { sum += r . getDistance ( unit ) ; } return sum ; }
public void onClick ( View v ) { userActionsListener . play ( getPreferredStationUrl ( ) ) ; }
public void onSdCardNotMounted ( ) { UIUtils . showThemedToast ( this , getResources ( ) . getString ( R . string . sd_card_not_mounted ) , false ) ; finishWithoutAnimation ( ) ; }
public void registerChildAdapterTag ( @ NonNull ComposedChildAdapterTag tag ) { getChildAdapterTags ( ) . add ( tag ) ; }
public AdapterItemCatHorizontalList ( List < ItemCategory > dataset , Context context , Fragment fragment ) { this . dataset = dataset ; this . context = context ; this . fragment = fragment ; }
public void addItem ( int idIcon , String description , String result ) { mData . add ( new ResultItem ( idIcon , description , result ) ) ; notifyDataSetChanged ( ) ; }
public void setNodeAddress ( @ NonNull String nodeAddress ) { this . nodeAddress = nodeAddress ; }
public void onGroupsChanged ( int group , boolean isChecked ) { if ( ! restoring ) { filterState . setGroup ( group , isChecked ) ; updateSearchSettingsButtonState ( ) ; filterCryptCards ( ) ; } }
private Runnable mRunnable = new Runnable ( ) { @ Override public void run ( ) { showTime ( System . currentTimeMillis ( ) ) ; mHandler . postDelayed ( mRunnable , 1000 ) ; } } ;
public Money negate ( ) { return new Money ( mAmount . negate ( ) , mCommodity ) ; }
public void goToPostLocation ( ) { getMvpView ( ) . dismissWarning ( ) ; if ( mDataManager . hasFineLocationPermission ( ) ) { checkLocationSettings ( ) ; } else { getMvpView ( ) . compatRequestFineLocationPermission ( ) ; } }
public com . coinomi . core . protos . Protos . Key . Builder getMasterKeyBuilder ( ) { bitField0_ | = 0x00000008 ; onChanged ( ) ; return getMasterKeyFieldBuilder ( ) . getBuilder ( ) ; }
private void initializeListAdapter ( ) { list . setAdapter ( new ConversationListAdapter ( getActivity ( ) , GlideApp . with ( this ) , locale , null , this ) ) ; getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; }
public static List < String > getMinFrees ( ) { RootUtils . chmod ( MINFREE , "666" ) ; String value = Utils . readFile ( MINFREE ) ; return Arrays . asList ( value . split ( " , " ) ) ; }
private void reload ( ) { if ( Util . isNetworkAvailable ( context ) ) { toggleNoInternetMessage ( false ) ; generator . setEmailAddress ( account . getEmail ( ) ) ; showAddressProgress ( ) ; } else { toggleNoInternetMessage ( true ) ; } }
public NotificationsHelper show ( ) { show ( 0 ) ; return this ; }
public NotificationVH ( View view ) { super ( view ) ; tvDate = view . findViewById ( R . id . tv_date ) ; tvDescription = view . findViewById ( R . id . tv_description ) ; }
public void post ( Object event ) { Log . v ( "EventBus" , "post ( ) " + event . getClass ( ) . getSimpleName ( ) + " : " + event ) ; super . post ( event ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { userId = getArguments ( ) . getLong ( "user_id" , 0l ) ; return super . onCreateView ( inflater , container , savedInstanceState ) ; }
public String getCreatedBy ( ) { return createdBy ; }
public void onAnimationCancel ( Animator animation ) { if ( miPager . isFakeDragging ( ) ) miPager . endFakeDrag ( ) ; }
public void onLoaderReset ( @ NonNull Loader < ExportResult > loader ) { }
public Single < List < LocationRecord >> getTeamLocationRecordsFromDatabase ( ) { return mDatabaseHelper . getLocationRecordList ( ) ; }
private synchronized SQLiteDatabase lazyDatabase ( ) { if ( mDatabase == null || ! mDatabase . isOpen ( ) ) { mDatabase = this . getWritableDatabase ( ) ; } return mDatabase ; }
public int compare ( StatItem lhs , StatItem rhs ) { return rhs . isInTraining ( ) ? 1 : - 1 ; }
private void updateScrollBarPositionHoneycomb ( ) { mRecyclerView . setVerticalScrollbarPosition ( View . SCROLLBAR_POSITION_LEFT ) ; }
public Activity getActivity ( ) { return mActivity ; }
public void onSuccess ( ) { realm . close ( ) ; callback . onSuccess ( city ) ; }
public void hideProgress ( ) { pbProgress . setVisibility ( View . GONE ) ; }
public void setRollstuhl ( boolean rollstuhl ) { this . rollstuhl = rollstuhl ; }
public void run ( ) { currentFuture = null ; typeSpinner . setEnabled ( true ) ; patchesSpinner . setEnabled ( true ) ; choosePhotoButton . setEnabled ( true ) ; shareCollageButton . setEnabled ( true ) ; saveCollageButton . setEnabled ( true ) ; }
public void addLaunchCount ( ) { SharedPreferences preferences = getDefaultPrefs ( ) ; SharedPreferences . Editor editor = getEditor ( ) ; editor . putInt ( LAUNCH_COUNT , preferences . getInt ( LAUNCH_COUNT , 0 ) + 1 ) ; editor . apply ( ) ; }
public void onCreate ( ) { super . onCreate ( ) ; Serializer serializer = new Serializer ( this ) ; watchlist = serializer . readWatchlist ( ) ; setupGenres ( ) ; }
public void openItemDetailFragment ( final TripItem parItem ) { Log . d ( TAG , "openItemDetailFragment ( . . . ) faked" ) ; }
public void ViewBookInfo ( View v ) { Intent intent = new Intent ( this , BookViewActivity . class ) ; intent . putExtra ( EXTRA_MESSAGE , ReadBookID ) ; startActivity ( intent ) ; BookReadActivity . this . finish ( ) ; */ }
public CombinedHighlighter ( CombinedDataProvider chart , BarDataProvider barChart ) { super ( chart ) ; barHighlighter = barChart . getBarData ( ) == null ? null : new BarHighlighter ( barChart ) ; }
public void didReceivedNotification ( int id , int account , Object . . . args ) { updatePlaybackState ( null ) ; handlePlayRequest ( ) ; }
public SSLSettings sslSettings ( ) { return new SSLSettings ( validateSSL ( ) , cert ( ) ) ; }
private void onMediaDownsizeFailure ( QueuedMedia item ) { displayTransientError ( R . string . error_image_upload_size ) ; removeMediaFromQueue ( item ) ; }
public void onChildViewAttachedToWindow ( View view ) { if ( onItemClickListener != null ) { view . setOnClickListener ( onClickListener ) ; } if ( onItemLongClickListener != null ) { view . setOnLongClickListener ( onLongClickListener ) ; } }
public Double getWindBearing ( ) { return windBearing ; }
public void onClick ( View view ) { if ( recordLocation ) { recordLocation = false ; GeotagButton . setBackgroundResource ( R . drawable . ic_location_disabled_white_24dp ) ; } else { recordLocation = true ; GeotagButton . setBackgroundResource ( R . drawable . ic_my_location_white_24dp ) ; } }
public void init ( MainActivity mainActivity ) { mContext = mainActivity . getApplicationContext ( ) ; clearHandler = new Handler ( Looper . getMainLooper ( ) ) ; createNotificationChannels ( ) ; notifyManager = NotificationManagerCompat . from ( mContext ) ; startStatusNotification ( ) ; waiting ( ) ; }
public synchronized boolean addAll ( @ NonNull Collection < ? extends E > c ) { for ( E e : c ) if ( ! add ( e ) ) return false ; return true ; }
public void shouldUpdateViewsDate ( ) { presenter . onDateDialogPositiveButton ( 2018 , 5 , 1 ) ; verify ( view ) . setDateText ( "Tue , 5/1/2018" ) ; }
private void prepareToChunk ( ) { mTablesLeft = new LinkedList <> ( ) ; mTablesLeft . add ( "revlog" ) ; mTablesLeft . add ( "cards" ) ; mTablesLeft . add ( "notes" ) ; mCursor = null ; }
private void updateModel ( ) { RelativePoint old = mRelPointer ; mRelPointer = createRelativePoint ( mPointer ) ; if ( mRelPointer . equals ( old ) ) { return ; } computeCurrentSelection ( ) ; notifySelectionChanged ( ) ; }
public void goToReposts ( int accountId , String type , int ownerId , int id ) { PlaceFactory . getLikesCopiesPlace ( accountId , type , ownerId , id , ILikesInteractor . FILTER_COPIES ) . tryOpenWith ( requireActivity ( ) ) ; }
public boolean isSession ( ) { return Type . SESSION . matches ( type ) ; }
public boolean onSurfaceTextureDestroyed ( SurfaceTexture surfaceTexture ) { if ( cameraSession != null ) { CameraController . getInstance ( ) . close ( cameraSession , null , null ) ; } return false ; }
public boolean shouldAutoReconnect ( ) { return androidSharedPreferences . getBoolean ( DEVICE_RECONNECT , false ) ; }
public ContentDescriptor ( String contentType ) { this . contentType = contentType ; }
public void onRefresh ( SwipyRefreshLayoutDirection direction ) { if ( direction . equals ( SwipyRefreshLayoutDirection . TOP ) ) { queryTelegrams ( 0 , SCAN_FORWARD , false ) ; } else { queryTelegrams ( pastOffset , SCAN_BACKWARD , false ) ; } }
public void gamesCategoryClickHandler ( @ NonNull View view ) { view . startAnimation ( mAnimation ) ; openChat ( "games" ) ; }
public TLObject deserializeResponse ( AbstractSerializedData stream , int constructor , boolean exception ) { return channels_ChannelParticipants . TLdeserialize ( stream , constructor , exception ) ; }
public void editStyle ( RPSParty game ) { skin . add ( "helpImage" , game . getAssetManager ( ) . get ( "infoBtn . png" ) ) ; style = new ButtonStyle ( ) ; style . up = skin . getDrawable ( "helpImage" ) ; }
public PublicKey getPublic ( ) { return privateKey . getPublic ( ) ; }
public static LatestRunsState displayRuns ( List < Run > runs ) { return new LatestRunsState ( false , false , runs ) ; }
public void setUid ( final String uid ) { this . uid = uid == null ? "" : uid ; }
public synchronized void putState ( String key , Serializable object ) { String realKey = this . getClass ( ) . getName ( ) + "_" + key ; stateStorage . put ( realKey , object ) ; }
private void requestExternalSdcardPermission ( ) { ActivityCompat . requestPermissions ( this , new String [ ] { Manifest . permission . WRITE_EXTERNAL_STORAGE } , REQUEST_WRITE_TO_SDCARD_PERMISSIONS ) ; quranSettings . setSdcardPermissionsDialogPresented ( ) ; }
public WeatherDescription getWeatherDescription ( ) { return mWeatherDescription ; }
public void onClick ( ) { Intent intent = new Intent ( this , BirdListView . class ) ; startActivity ( intent , ActivityOptions . makeSceneTransitionAnimation ( this ) . toBundle ( ) ) ; } */
public void onCountdownTimeChanged ( ) { resetAlertCounters ( ) ; updateNotification ( ) ; }
public UploadAvatarData getData ( ) { return data ; }
public void onCallDisconnected ( ) { mSipServiceConnection . disconnect ( true ) ; finish ( ) ; }
public void onAttach ( Context a ) { super . onAttach ( a ) ; activity = ( SetupActivity ) a ; }
public void onFailure ( @ NonNull Exception e ) { customLogger ( "Discovery Failed " + e . getMessage ( ) ) ; }
public List < Item > load ( int group ) { return list_ ; }
public Kd2Radical getRadical ( ) { return radical ; }
public Upload [ ] newArray ( int size ) { return new Upload [ size ] ; }
public void onSuccess ( List < Comment > results ) { callback . onSuccess ( results ) ; if ( shouldFetchFromServer ) getNewsCommentsFromRemote ( postId , callback ) ; }
public void setFire ( String mFire ) { this . mFire = mFire ; }
private void cancelCheckAnimator ( ) { if ( checkAnimator != null ) { checkAnimator . cancel ( ) ; checkAnimator = null ; } }
public void start ( Attributes attributes ) { container . setNumberOfNewPosts ( Integer . parseInt ( attributes . getValue ( BOOKMARKS_ATTRIBUTE_NEW ) ) ) ; }
private static void onAccountCreated ( Account newAccount , Context context ) { SyncAdapter . configurePeriodicSync ( context ) ; ContentResolver . setSyncAutomatically ( newAccount , context . getString ( R . string . content_authority ) , true ) ; syncImmediately ( context ) ; }
public void onLoginSuccess ( ) { btnLogin . setEnabled ( true ) ; }
public void onChanged ( ) { assertNotInLayoutOrScroll ( null ) ; mState . mStructureChanged = true ; processDataSetCompletelyChanged ( true ) ; if ( ! mAdapterHelper . hasPendingUpdates ( ) ) { requestLayout ( ) ; } }
public void testGetTithe ( ) { assertThat ( workersCalendar . getTithe ( days ) , closeTo ( tithe , 1e - 9 ) ) ; }
public void run ( ) { view . setAlpha ( endAlpha ) ; Log . i ( TAG , getViewId ( view ) + " fade OUT [ GONE ] effect for 0ms with " + String . valueOf ( delay ) + "ms delay" ) ; }
public static Builder newBuilder ( org . thoughtcrime . securesms . backup . BackupProtos . Avatar prototype ) { return newBuilder ( ) . mergeFrom ( prototype ) ; }
private static LocationRequest getLocationRequest ( ) { return new LocationRequest ( ) . setFastestInterval ( Constants . LOCATION_FASTEST_UPDATE_INTERVAL_MILLISECONDS ) . setInterval ( Constants . LOCATION_UPDATE_INTERVAL_MILLISECONDS ) . setPriority ( Constants . APP_LOCATION_ACCURACY ) ; }
public void append ( CharSequence text , Object . . . what ) { appendWithFlags ( text , Spannable . SPAN_EXCLUSIVE_EXCLUSIVE , what ) ; }
public int getInputGravity ( ) { ScrollView . LayoutParams layoutParams = ( ScrollView . LayoutParams ) innerContainer . getLayoutParams ( ) ; return layoutParams . gravity ; }
public void onRefresh ( ) { mPresenter . loadArticles ( ) ; }
public CustomSelectionCallback ( Activity activity ) { this . mActivity = ( MainActivity ) activity ; }
public int getPage ( ) { return page ; }
public void setCenter ( GeoPoint center ) { IMapController mMapController = getController ( ) ; mMapController . setZoom ( state . zoomLevel ) ; mMapController . setCenter ( center ) ; }
public void onMenuVisibilityChanged ( boolean isVisible ) { inActionBarMenu = isVisible ; if ( ! isVisible ) { hideEmulatedKeys ( ) ; } }
public int compare ( AttendResult r1 , AttendResult r2 ) { return r1 . getName ( ) . compareTo ( r2 . getName ( ) ) ; }
public boolean isReflectionExists ( int contentId ) { return responseManager . isReflectionResponded ( String . valueOf ( contentId ) ) ; }
private void getCoursesFromDatabase ( ) { mCourses = new Select ( ) . all ( ) . from ( Course . class ) . execute ( ) ; }
public static MaterialAboutItemOnClickAction createEmailOnClickAction ( final Context c , String email , String emailSubject ) { return createEmailOnClickAction ( c , email , emailSubject , c . getString ( R . string . mal_send_email ) ) ; }
public void openChannelWithAcinq ( View view ) { Intent intent = new Intent ( getBaseContext ( ) , OpenChannelActivity . class ) ; intent . putExtra ( OpenChannelActivity . EXTRA_NEW_HOST_URI , Constants . ACINQ_NODE_URI . toString ( ) ) ; startActivity ( intent ) ; }
public void run ( ) { MatrixV2 m = function . ComputeFunction ( SquareList . get ( ClickPos ) ) ; Message message = new Message ( ) ; message . setData ( m . getDataBundled ( ) ) ; myHandler . sendMessage ( message ) ; }
public void addLesson ( Lesson item ) { item . lessonId = mDataDb . addItemGetId ( item ) ; reQuery ( ) ; int recyclerViewPosition = getRecyclerViewPosition ( item ) ; notifyItemInserted ( recyclerViewPosition ) ; notifyChangedLessonRange ( recyclerViewPosition ) ; }
public static void setFont ( String name ) { AssetManager mng = AjLatexMath . getAssetManager ( ) ; font = Typeface . createFromAsset ( mng , name ) ; }
public String getQuranDatabaseDirectory ( Context context ) { String base = getQuranBaseDirectory ( context ) ; return ( base == null ) ? null : base + DATABASE_DIRECTORY ; }
public void write ( JsonWriter out , LocalDateTime value ) throws IOException { out . value ( value . toDateTime ( ) . toString ( ISO_FORMAT ) ) ; }
public static void showPreferences ( JalkametriActivity parent ) { LogUtil . INSTANCE . i ( TAG , "Showing preferences" ) ; Intent i = new Intent ( parent , PreferencesActivity . class ) ; parent . startActivityForResult ( i , Common . ACTIVITY_CODE_SHOW_PREFERENCES ) ; }
public boolean onSingleTapUp ( MotionEvent event ) { return pageController . handleTouchEvent ( event , AyahSelectedListener . EventType . SINGLE_TAP , pageNumber ) ; }
public void putDrawable ( int drawable , TestState state ) { this . drawableMap . put ( state , drawable ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . main , menu ) ; return false ; } */
public void read ( DataInputStream dataInputStream ) throws IOException { msg = dataInputStream . readUTF ( ) ; }
public RestClientEmptyMock ( com . android . volley . RequestQueue queue , java . lang . String token ) { super ( queue , token , REST_API_ENDPOINT_URL_V1 ) ; }
public void testIsWPCOMURI2 ( ) { assertTrue ( WPUrlUtils . isWordPressCom ( buildURI ( WPCOM_ADDRESS_2 ) ) ) ; }
public void setIncoming ( Contact contact , boolean sameMessageBlock ) { }
public boolean onInterceptTouchEvent ( @ NonNull RecyclerView rv , @ NonNull MotionEvent e ) { return RecyclerViewTouchActionGuardManager . this . onInterceptTouchEvent ( rv , e ) ; }
public CircularArray < Skidmark > getSkidmarks ( ) { return mSkidmarks ; }
public void onDisconnected ( @ NonNull CameraDevice pDevice ) { Log . i ( logTag , "Camera device disconnected" ) ; mDevice = null ; mIsValid = false ; close ( ) ; }
public void onResult ( Attraction result ) { viewInteractor . onAttractionLoaded ( result , TourAction . DOWNLOAD ) ; viewInteractor . hideProgress ( ) ; updateAttractionView ( preference . readUser ( ) , attractionId ) ; }
private void reminderSchedule ( Event event ) { if ( event . hasReminder ( ) ) { eventReminderManager . scheduleReminder ( event , true ) ; } }
public void run ( ) { AndroidUtilsUI . showDialog ( activity , "Permission Denied" , "Can't create torrent client on device without requested " + "permissions . " ) ; }
public TodoListHeader ( String title , int position , String parentTodoListUuid ) { this ( UUID . randomUUID ( ) . toString ( ) , title , new Date ( ) , new Date ( ) , position , false , parentTodoListUuid ) ; }
public void run ( ) { resetText ( ) ; Toast . makeText ( MainActivity . this , R . string . error_network , Toast . LENGTH_SHORT ) . show ( ) ; progressBar . setVisibility ( View . GONE ) ; }
public void setReg ( int reg ) { this . reg = reg ; }
public void setOpenGifsTabFirst ( ) { createEmojiView ( ) ; StickersQuery . loadRecents ( StickersQuery . TYPE_IMAGE , true , true , false ) ; emojiView . switchToGifRecent ( ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; a1 = createFirstAccount ( ) ; a2 = createSecondAccount ( ) ; categoriesMap = CategoryBuilder . createDefaultHierarchy ( db ) ; CurrencyCache . initialize ( db ) ; }
public void setOnLongClickListener ( OnLongClickListener l ) { mDateView . setOnLongClickListener ( l ) ; mTimeView . setOnLongClickListener ( l ) ; }
public void onClick ( View view ) { addSelectedProducts ( ) ; }
public void notifyCreation ( Object obj ) throws DAOException { for ( DAO dao : this . daoList ) { dao . create ( obj ) ; } }
public void run ( ) { iconButton . setImageDrawable ( drawable ) ; }
