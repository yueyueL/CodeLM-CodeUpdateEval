public CBSListAdapter ( Context _context , ArrayList < CBSData > _cbsData ) { this . context = _context ; this . cbsData = _cbsData ; }
public int getGroupCount ( ) { return cbsData . size ( ) ; }
public Object getGroup ( int i ) { return cbsData . get ( i ) ; }
public Object getChild ( int groupPosition , int childPosition ) { CBSData child = null ; child = cbsData . get ( groupPosition ) ; return child ; }
private boolean isNotFinalQuestion ( ) { return getProgress ( ) != playlist . size ( ) - 1 ; }
public void onFailure ( @ NotNull final Call call , @ NotNull IOException e ) { Log . e ( TAG , "Failed to fetch item names from server " + serverUrl , e ) ; mNames . clear ( ) ; l . validationUnavailable ( ) ; }
public synchronized void updateFromPreferences ( SharedPreferences prefs ) { super . updateFromPreferences ( prefs ) ; mSensitivityStr = prefs . getString ( Constants . PREF_PREFIX + mPreferenceKey + Constants . PREF_SUFFIX_SENSITIVITY , "3 . 0" ) ; mSensitivity = Float . parseFloat ( mSensitivityStr ) ; }
public void noMotion ( ) { mListener . noMotion ( ) ; if ( mMotion && System . currentTimeMillis ( ) - mLastMotionTime > mMotionTimeout ) { mMotion = false ; mServerConnection . updateState ( mMotionItem , "OPEN" ) ; } }
public boolean isEnabled ( ) { ComponentName receiver = new ComponentName ( context , BootReceiver . class ) ; PackageManager pm = context . getPackageManager ( ) ; int componentEnabledSetting = pm . getComponentEnabledSetting ( receiver ) ; return componentEnabledSetting == PackageManager . COMPONENT_ENABLED_STATE_ENABLED ; }
private void setupAdapter ( RecyclerView listView ) { listView . setAdapter ( getItemAdapter ( ) ) ; Integer position = getRetainedValue ( TAG_POSITION ) ; if ( position != null ) { listView . scrollToPosition ( position ) ; } }
public void onEventMainThread ( PlayerStateChanged event ) { if ( mTrackingTouch == null ) { updateAndExpandPlayerList ( ) ; } else { mUpdateWhileTracking = true ; } }
public void clear ( ) { mPlayersChanged = true ; childAdapters . clear ( ) ; mPlayerCount = 0 ; notifyDataSetChanged ( ) ; }
public int getItemCount ( ) { return childAdapters . size ( ) ; }
public void onStartTrackingTouch ( @ NonNull Slider slider ) { activity . setTrackingTouch ( player ) ; }
public ServerAddress getServerAddress ( ) { return getSelectedServerAddress ( KEY_SERVER_ADDRESS , defaultHttpPort ) ; }
public ServerAddress getCliServerAddress ( ) { return getSelectedServerAddress ( KEY_CLI_SERVER_ADDRESS , defaultCliPort ) ; }
private void updatePlayPauseIcon ( @ PlayerState . PlayState String playStatus ) { playPauseButton . setIconResource ( ( PlayerState . PLAY_STATE_PLAY . equals ( playStatus ) ) ? R . drawable . ic_action_pause : R . drawable . ic_action_play ) ; }
public void onStartTrackingTouch ( @ NonNull Slider s ) { seekingSong = getCurrentSong ( ) ; updateSeekBar = false ; }
public int compareTo ( SyncGroup otherSyncGroup ) { return this . syncGroupName . compareToIgnoreCase ( ( otherSyncGroup ) . syncGroupName ) ; }
public PlayerListAdapter ( PlayerListActivity activity ) { mActivity = activity ; }
public void removeItem ( int position ) { remove ( position ) ; count -- ; onCountUpdated ( ) ; notifyItemRemoved ( position ) ; }
public void insertItem ( int position , T item ) { insert ( position , item ) ; count ++ ; onCountUpdated ( ) ; notifyItemInserted ( position ) ; }
public final RecyclerView getListView ( ) { return listView ; }
public boolean isEnabled ( int position ) { return ( alarmPlaylists . get ( position ) . getId ( ) != null ) ; }
public @ Nonnull View getView ( int position , View convertView , @ NonNull ViewGroup parent ) { return Util . getSpinnerItemView ( getActivity ( ) , convertView , parent , getItem ( position ) . getName ( ) ) ; }
public boolean onDown ( MotionEvent e ) { itemView . setPressed ( true ) ; return super . onDown ( e ) ; }
public AsyncDrawable ( Resources res , Bitmap bitmap , BitmapWorkerTask bitmapWorkerTask ) { super ( res , bitmap ) ; bitmapWorkerTaskReference = new WeakReference <> ( bitmapWorkerTask ) ; }
public int getItemViewType ( final int position ) { return R . layout . squeezer_remote_control_button_select_item ; }
public Player getPlayer ( String playerId ) throws PlayerNotFoundException { for ( Player player : getPlayers ( ) ) { if ( player . getId ( ) . equals ( playerId ) ) { return player ; } } throw new PlayerNotFoundException ( SqueezeService . this ) ; }
private Bitmap vectorToBitmap ( @ DrawableRes int vectorResource ) { return Util . vectorToBitmap ( this , vectorResource , 0xAA ) ; }
public void onDeleted ( Context context , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { deletePrefs ( context , appWidgetId ) ; } }
public void onEventMainThread ( @ SuppressWarnings ( "unused" ) RegisterSqueezeNetwork event ) { JiveItemListActivity . register ( mActivity ) ; }
public void action ( JiveItem item , Action action , int alreadyPopped ) { if ( mService == null ) { return ; } mService . action ( item , action ) ; }
public void action ( JiveItem item , Action action ) { action ( item , action , 0 ) ; }
public static void register ( Activity activity ) { final Intent intent = new Intent ( activity , JiveItemListActivity . class ) ; intent . putExtra ( "register" , true ) ; activity . startActivity ( intent ) ; }
public MenuStatusMessage ( @ NonNull String playerId , @ NonNull String menuDirective , @ NonNull JiveItem [ ] menuItems ) { this . playerId = playerId ; this . menuDirective = menuDirective ; this . menuItems = menuItems ; }
public int compareTo ( @ NonNull Player otherPlayer ) { return this . mName . compareToIgnoreCase ( ( otherPlayer ) . mName ) ; }
public Command params ( Map < String , Object > params ) { super . params ( params ) ; return this ; }
public void onItemsReceived ( int count , int start , Map < String , Object > parameters , List < JiveItem > items , Class < JiveItem > dataType ) { mDelegate . addToHomeMenu ( count , items ) ; }
public void pluginItems ( Action action , IServiceItemListCallback < JiveItem > callback ) throws HandshakeNotCompleteException { mDelegate . requestItems ( getActivePlayer ( ) , callback ) . cmd ( action . action . cmd ) . params ( action . action . params ) . exec ( ) ; }
public HomeMenuEvent ( @ NonNull List < JiveItem > menuItems ) { this . menuItems = menuItems ; }
public JiveItem ( ) { name = "" ; icon = Uri . EMPTY ; }
public SlimCommand downloadCommand ( ) { return downloadCommand ; }
public SlimCommand cmd ( String . . . commandTerms ) { return cmd ( Arrays . asList ( commandTerms ) ) ; }
public SlimCommand cmd ( List < String > commandTerms ) { cmd . addAll ( commandTerms ) ; return this ; }
public SlimCommand params ( Map < String , Object > params ) { this . params . putAll ( params ) ; return this ; }
public SlimCommand param ( String tag , Object value ) { params . put ( tag , value ) ; return this ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; host = ( DefeatDestructiveTouchToPlayDialogHost ) context ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; host = ( PlayTrackAlbumDialogHost ) context ; }
public boolean onSwipeDown ( ) { return false ; }
public void action ( Action . JsonAction action , int alreadyPopped ) { if ( mService == null ) { return ; } mService . action ( action ) ; }
public SyncGroup ( ) { super ( mActivity ) ; }
public boolean hasContextMenu ( ) { return ( playAction != null || addAction != null || insertAction != null || moreAction != null || checkbox != null || radio != null ) ; }
public boolean isSelectable ( ) { return ( goAction != null || nextWindow != null || hasSubItems ( ) || node != null || checkbox != null ) ; }
private void updateStreetMode ( ) { if ( isStreetMode ( ) ) { toolbar . setBackgroundResource ( R . drawable . toolbar_background_streetmode ) ; } else { toolbar . setBackgroundResource ( R . drawable . toolbar_background_normalmode ) ; showNet ( ) ; } invalidateOptionsMenu ( ) ; }
public String getServiceName ( ) { return "coingecko . com" ; }
static public ExchangeApi getExchangeApi ( ) { return new com . m2049r . xmrwallet . service . exchange . coingecko . ExchangeApiImpl ( OkHttpClientSingleton . getOkHttpClient ( ) ) ; }
public void setSubtitle ( String subtitle ) { toolbarSubtitle . setText ( subtitle ) ; if ( subtitle != null ) { toolbarSubtitle . setVisibility ( View . VISIBLE ) ; } else { toolbarSubtitle . setVisibility ( View . GONE ) ; } }
public void onResume ( ) { super . onResume ( ) ; Timber . d ( "onResume ( ) " ) ; activityCallback . setTitle ( null ) ; activityCallback . setToolbarButton ( Toolbar . BUTTON_NONE ) ; activityCallback . showNet ( ) ; }
private Bitmap getMoneroLogo ( ) { if ( logo == null ) { logo = Helper . getBitmap ( getContext ( ) , R . drawable . ic_logo_brand_32dp ) ; } return logo ; }
public void action ( String walletName , String password ) { if ( checkDevice ( walletName , password ) ) startDetails ( walletFile , password , GenerateReviewFragment . VIEW_TYPE_DETAILS ) ; }
public void action ( String walletName , String password ) { if ( checkDevice ( walletName , password ) ) startReceive ( walletFile , password ) ; }
private void enableStreetMode ( boolean enable ) { if ( enable ) { streetMode = getWallet ( ) . getDaemonBlockChainHeight ( ) ; } else { streetMode = 0 ; } updateAccountsBalance ( ) ; forceUpdate ( ) ; }
public void action ( String walletName , String password ) { runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { enableStreetMode ( false ) ; updateStreetMode ( ) ; } } ) ; }
public void onClick ( View view ) { String pass = etPassword . getEditText ( ) . getText ( ) . toString ( ) ; if ( loginTask == null ) { loginTask = new LoginWalletTask ( pass ) ; loginTask . execute ( ) ; } }
public SpendPagerAdapter ( FragmentManager fm ) { super ( fm , BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT ) ; }
private VideoTrack getVideoTrack ( ) { this . capturer = createCapturer ( ) ; return factory . createVideoTrack ( "video1" , factory . createVideoSource ( this . capturer . isScreencast ( ) ) ) ; }
public void onConfigurationChanged ( @ NonNull final Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; LocaleHelper . onAttach ( getBaseContext ( ) ) ; }
public void onBindViewHolder ( @ NonNull final DataHolder holder , final int position ) { final HashData file = hashDataList . get ( position ) ; holder . bindData ( file ) ; }
public int getItemCount ( ) { return hashDataList . size ( ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; if ( context instanceof AppCompatActivity ) activity = ( AppCompatActivity ) context ; }
public void onStart ( ) { super . onStart ( ) ; subscribeAlertDialog ( ) ; subscribeMsgViewModel ( ) ; subscribeSessionStats ( ) ; subscribeNeedStartEngine ( ) ; subscribeTags ( ) ; }
public boolean isMoving ( ) { return moving . get ( ) ; }
public boolean isSaveResume ( ) { return saveResume . get ( ) > 0 ; }
private boolean operationNotAllowed ( ) { return swig ( ) == null || stopRequested . get ( ) ; }
private void checkStop ( ) { if ( stopRequested . get ( ) && torrentTasks . isEmpty ( ) && addTorrentsList . isEmpty ( ) ) super . stop ( ) ; }
public TorrentBuilder setSeedPath ( Uri path ) throws UnknownUriException { String seedPathStr = SystemFacadeHelper . getFileSystemFacade ( context ) . makeFileSystemPath ( path ) ; builder . path ( new File ( seedPathStr ) ) ; return this ; }
public boolean isAutoManaged ( ) { return ! operationNotAllowed ( ) && th . status ( ) . flags ( ) . and_ ( TorrentFlags . AUTO_MANAGED ) . non_zero ( ) ; }
private boolean isPaused ( TorrentStatus s ) { return s . flags ( ) . and_ ( TorrentFlags . PAUSED ) . non_zero ( ) ; }
public boolean isSequentialDownload ( ) { return ! operationNotAllowed ( ) && th . status ( ) . flags ( ) . and_ ( TorrentFlags . SEQUENTIAL_DOWNLOAD ) . non_zero ( ) ; }
public boolean isDHTEnabled ( ) { SettingsPack sp = settings ( ) ; return sp != null && sp . isEnableDht ( ) ; }
public FileDescriptorWrapper getFD ( @ NonNull Uri path ) throws UnknownUriException { FsModule fsModule = fsResolver . resolveFsByUri ( path ) ; return fsModule . openFD ( path ) ; }
public boolean deleteFile ( @ NonNull Uri path ) throws FileNotFoundException , UnknownUriException { FsModule fsModule = fsResolver . resolveFsByUri ( path ) ; return fsModule . delete ( path ) ; }
public boolean fileExists ( @ NonNull Uri filePath ) throws UnknownUriException { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . fileExists ( filePath ) ; }
public long lastModified ( @ NonNull Uri filePath ) throws UnknownUriException { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . lastModified ( filePath ) ; }
public String makeFileSystemPath ( @ NonNull Uri uri ) throws UnknownUriException { return makeFileSystemPath ( uri , null ) ; }
public String getDirPath ( @ NonNull Uri dir ) throws UnknownUriException { FsModule fsModule = fsResolver . resolveFsByUri ( dir ) ; return fsModule . getDirPath ( dir ) ; }
public String getFilePath ( @ NonNull Uri filePath ) throws UnknownUriException { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . getFilePath ( filePath ) ; }
public Uri getParentDirUri ( @ NonNull Uri filePath ) throws UnknownUriException { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . getParentDirUri ( filePath ) ; }
public void saveFeedsSync ( @ NonNull Uri file ) throws IOException , UnknownUriException { repo . serializeAllFeeds ( file ) ; }
public long [ ] restoreFeedsSync ( @ NonNull Uri file ) throws IOException , UnknownUriException { List < FeedChannel > feeds = repo . deserializeFeeds ( file ) ; return repo . addFeeds ( feeds ) ; }
public void selectFile ( @ NonNull String name , boolean selected ) { BencodeFileTree node = curDir . getChild ( name ) ; if ( node == null ) return ; node . select ( selected , true ) ; updateChildren ( ) ; }
public boolean isRunning ( ) { return super . isRunning ( ) && started ; }
private void onBackPressed ( ) { alert . dismiss ( ) ; }
private boolean checkFreeSpace ( ) { long storageFreeSpace = info . getStorageFreeSpace ( ) ; return storageFreeSpace == - 1 || storageFreeSpace >= fileTree . nonIgnoreFileSize ( ) ; }
public FeedChannel ( @ NonNull String url ) { this . url = url ; }
private void readFromCache ( Piece piece , byte [ ] b ) { System . arraycopy ( cacheBuf , piece . readOffset , b , piece . bufIndex , piece . readLength ) ; }
public Event ( @ Nullable String dialogTag , EventType type ) { this . dialogTag = dialogTag ; this . type = type ; }
private void saveSelectionState ( String prefKey , DrawerGroupItem item ) { PreferenceManager . getDefaultSharedPreferences ( this ) . edit ( ) . putLong ( prefKey , item . id ) . apply ( ) ; }
public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { LogEntry entry = getItem ( position ) ; if ( entry != null ) holder . bind ( entry , listener ) ; }
public boolean enableNatPmp ( ) { return pref . getBoolean ( appContext . getString ( R . string . pref_key_enable_natpmp ) , Default . enableNatPmp ) ; }
public void onBindViewHolder ( PreferenceViewHolder holder ) { super . onBindViewHolder ( holder ) ; switchButton = ( SwitchBar ) holder . findViewById ( R . id . switchButton ) ; switchButton . setOnCheckedChangeListener ( listener ) ; switchButton . setChecked ( isChecked ( ) ) ; }
public boolean isDuringChange ( ) { return moving || saveResume ; }
public void onStart ( ) { super . onStart ( ) ; subscribeTorrentInfo ( ) ; subscribeAlertDialog ( ) ; subscribeMsgViewModel ( ) ; subscribeFreeSpaceError ( ) ; }
private AppDatabase getMigratedRoomDatabase ( ) { AppDatabase db = Room . databaseBuilder ( context , AppDatabase . class , TEST_DATABASE_NAME ) . addMigrations ( DatabaseMigration . getMigrations ( context ) ) . build ( ) ; helper . closeWhenFinished ( db ) ; return db ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; restaurantMap . onSaveInstanceState ( outState ) ; if ( restaurant != null ) { outState . putParcelable ( RESTAURANT_KEY , restaurant ) ; } restaurantFetcher . persistState ( outState ) ; }
public void write ( FileOutputStream out ) { bitmap . compress ( Bitmap . CompressFormat . PNG , 100 , out ) ; }
private void addCounter ( @ NonNull final IntegerCounter counter ) { CounterApplication . getComponent ( ) . localStorage ( ) . write ( counter ) ; new BroadcastHelper ( requireContext ( ) ) . sendSelectCounterBroadcast ( counter . getName ( ) ) ; }
public void setAppVersion ( String appVersion ) { this . appVersion = appVersion ; }
public void setTheme ( String theme ) { this . theme = theme ; }
public boolean isSingleMediaPicker ( ) { return this == GUTENBERG_SINGLE_MEDIA_PICKER ; }
public boolean isSingleImagePicker ( ) { return this == FEATURED_IMAGE_PICKER || this == GRAVATAR_IMAGE_PICKER || this == SITE_ICON_PICKER || this == GUTENBERG_SINGLE_IMAGE_PICKER ; }
private void handleResponse ( ) { hideProgress ( ) ; hideError ( ) ; setupOnTapListeners ( ) ; }
public LoginFlow enterEmailAddress ( String emailAddress ) { populateTextField ( R . id . input , emailAddress ) ; clickOn ( R . id . login_continue_button ) ; return this ; }
public void onCookieProgressDialogCancelled ( ) { WPSnackbar . make ( findViewById ( R . id . webview_wrapper ) , R . string . media_accessing_failed , Snackbar . LENGTH_LONG ) . show ( ) ; loadWebContent ( ) ; }
public void gotXmlRpcEndpoint ( String inputSiteAddress , String endpointAddress ) { LoginUsernamePasswordFragment loginUsernamePasswordFragment = LoginUsernamePasswordFragment . newInstance ( inputSiteAddress , endpointAddress , null , null , false ) ; slideInFragment ( loginUsernamePasswordFragment , true , LoginUsernamePasswordFragment . TAG ) ; }
public void addGoogleLoginFragment ( boolean isSignupFromLoginEnabled ) { addGoogleFragment ( LoginGoogleFragment . newInstance ( isSignupFromLoginEnabled ) , LoginGoogleFragment . TAG ) ; }
private void launchWPStoriesCamera ( ) { Intent intent = new Intent ( ) . putExtra ( MediaPickerConstants . EXTRA_LAUNCH_WPSTORIES_CAMERA_REQUESTED , true ) ; setResult ( RESULT_OK , intent ) ; finish ( ) ; }
public void onAddMediaImageClicked ( boolean allowMultipleSelection ) { mEditorPhotoPicker . setAllowMultipleSelection ( allowMultipleSelection ) ; mMediaPickerLauncher . viewWPMediaLibraryPickerForResult ( this , mSite , MediaBrowserType . GUTENBERG_IMAGE_PICKER ) ; }
public void onAddMediaVideoClicked ( boolean allowMultipleSelection ) { mEditorPhotoPicker . setAllowMultipleSelection ( allowMultipleSelection ) ; mMediaPickerLauncher . viewWPMediaLibraryPickerForResult ( this , mSite , MediaBrowserType . GUTENBERG_VIDEO_PICKER ) ; }
public void onDestroyView ( ) { removeJetpackSecurityScreenToolbar ( ) ; mDispatcher . unregister ( this ) ; super . onDestroyView ( ) ; }
public void onSaveInstanceState ( Bundle outState ) { removeJetpackSecurityScreenToolbar ( ) ; super . onSaveInstanceState ( outState ) ; outState . putSerializable ( WordPress . SITE , mSite ) ; setupMorePreferenceScreen ( ) ; setupJetpackSecurityScreen ( ) ; }
public void onSiteChanged ( OnSiteChanged event ) { if ( ! event . isError ( ) && mSite != null ) { mSite = mSiteStore . getSiteByLocalId ( mSite . getId ( ) ) ; updateHomepageSummary ( ) ; } }
private void performUpdate ( ) { performUpdate ( EnumSet . of ( UpdateTask . TAGS , UpdateTask . FOLLOWED_BLOGS ) ) ; }
private void addBrowserFragment ( ) { mThemeBrowserFragment = ThemeBrowserFragment . newInstance ( mSite ) ; getSupportFragmentManager ( ) . beginTransaction ( ) . add ( R . id . fragment_container , mThemeBrowserFragment , ThemeBrowserFragment . TAG ) . commit ( ) ; }
private boolean hideSavingProgressDialog ( ) { if ( mSavingContentProgressDialog != null && mSavingContentProgressDialog . isShowing ( ) ) { mSavingContentProgressDialog . dismiss ( ) ; return true ; } return false ; }
private void setFollowStatusForBlog ( FollowStatusChanged readerData ) { if ( ! hasPostAdapter ( ) ) { return ; } getPostAdapter ( ) . setFollowStatusForBlog ( readerData . getBlogId ( ) , readerData . getFollowing ( ) ) ; }
public void replaceStoryEditedBlock ( String mediaFiles , String blockId ) { mWPAndroidGlueCode . replaceMediaFilesEditedBlock ( mediaFiles , blockId ) ; }
public void onStorySaveResult ( final String storyFirstMediaId , final boolean success ) { mWPAndroidGlueCode . mediaCollectionFinalSaveResult ( storyFirstMediaId , success ) ; }
public void clearFileSaveStatus ( final String mediaId ) { mWPAndroidGlueCode . clearFileSaveStatus ( mediaId ) ; }
public void mediaFileSaveProgress ( final String mediaId , final float progress ) { mWPAndroidGlueCode . mediaFileSaveProgress ( mediaId , progress ) ; }
public void mediaFileSaveFailed ( final String mediaId ) { mWPAndroidGlueCode . mediaFileSaveFailed ( mediaId ) ; }
public void useMagicLinkInstead ( String email , boolean verifyEmail ) { showMagicLinkRequestScreen ( email , verifyEmail , false , true ) ; }
public void onPhotoPickerMediaChosen ( @ NonNull List < ? extends Uri > uriList ) { if ( uriList . size ( ) > 0 ) { doMediaUrisSelected ( uriList , PhotoPickerMediaSource . APP_PICKER ) ; } }
public void onPhotoPickerMediaChosen ( @ NotNull final List < ? extends Uri > uriList ) { mEditorPhotoPicker . hidePhotoPicker ( ) ; mEditorMedia . onPhotoPickerMediaChosen ( uriList ) ; }
public boolean canMultiselect ( ) { return this == EDITOR_PICKER || this == AZTEC_EDITOR_PICKER || this == GUTENBERG_IMAGE_PICKER || this == GUTENBERG_VIDEO_PICKER || this == WP_STORIES_MEDIA_PICKER ; }
private String constructGravatarUrl ( Context context , AccountModel account ) { return GravatarUtils . fixGravatarUrl ( account . getAvatarUrl ( ) , getAvatarSize ( context ) , STATUS_404 ) ; }
private String constructGravatarUrl ( Context context , SiteModel site ) { return GravatarUtils . gravatarFromEmail ( site . getEmail ( ) , getAvatarSize ( context ) , STATUS_404 ) ; }
public void run ( ) { ReaderTagList interestTags = new ReaderTagList ( ) ; interestTags . addAll ( parseInterestTags ( jsonObject ) ) ; EventBus . getDefault ( ) . post ( new InterestTagsFetchEnded ( interestTags , true ) ) ; taskCompleted ( UpdateTask . INTEREST_TAGS ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { ( ( FullScreenDialogContent ) getContent ( ) ) . setController ( mController ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; if ( context instanceof BottomNavController ) { mBottomNavController = ( BottomNavController ) context ; } }
private final RecyclerView . OnScrollListener mOnScrollListener = new RecyclerView . OnScrollListener ( ) { @ Override public void onScrolled ( @ NonNull RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; hideNewPostsBar ( ) ; } } ;
public void onScrolled ( @ NonNull RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; hideNewPostsBar ( ) ; }
public UpdatePostsStarted ( ReaderPostServiceStarter . UpdateAction action ) { mAction = action ; mReaderTag = null ; }
private View getSnackbarParent ( ) { View coordinator = getActivity ( ) . findViewById ( R . id . coordinator_layout ) ; if ( coordinator != null ) { return coordinator ; } return getView ( ) ; }
public MediaUploadCompletionProcessor ( String localId , MediaFile mediaFile , String siteUrl ) { mBlockProcessorFactory = new BlockProcessorFactory ( this ) . init ( localId , mediaFile , siteUrl ) ; }
public Consumer < Exception > getExceptionLogger ( ) { return ( Exception e ) -> AppLog . e ( T . EDITOR , e ) ; }
public static long getReaderCssUpdatedTimestamp ( ) { return getLong ( DeletablePrefKey . READER_CSS_UPDATED_TIMESTAMP , 0 ) ; }
public void trackSocialButtonStart ( ) { mUnifiedLoginTracker . track ( Flow . GOOGLE_LOGIN , Step . START ) ; }
public static void openURL ( Context context , String url ) { openURL ( context , url , false , 0 ) ; }
public static void openURL ( Context context , String url , String referrer ) { openURL ( context , url , referrer , false , 0 ) ; }
public void onImagePreviewRequested ( String mediaUrl ) { MediaPreviewActivity . showPreview ( this , mSite , mediaUrl ) ; }
public void setEditorToClassic ( ) { onData ( withTitle ( R . string . site_settings_gutenberg_default_for_new_posts ) ) . perform ( scrollTo ( ) ) . perform ( ensureSwitchPreferenceIsChecked ( false ) ) ; }
public void setEditorToGutenberg ( ) { onData ( withTitle ( R . string . site_settings_gutenberg_default_for_new_posts ) ) . perform ( scrollTo ( ) ) . perform ( ensureSwitchPreferenceIsChecked ( true ) ) ; }
public void trackTappedNotification ( @ NotNull StoryNotificationType storyNotificationType ) { mSystemNotificationsTracker . trackTappedNotification ( translateNotificationTypes ( storyNotificationType ) ) ; }
public void trackDismissedNotification ( @ NotNull StoryNotificationType storyNotificationType ) { mSystemNotificationsTracker . trackDismissedNotification ( translateNotificationTypes ( storyNotificationType ) ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { onSpinnerItemSelected ( position ) ; }
public static boolean isPublishDateInTheFuture ( String dateCreated , Date currentDate ) { Date pubDate = DateTimeUtils . dateFromIso8601 ( dateCreated ) ; return pubDate != null && pubDate . after ( currentDate ) ; }
private void showPostSettingsTagsFragment ( ) { PostSettingsTagsFragment postSettingsTagsFragment = PostSettingsTagsFragment . newInstance ( mSite , mTags ) ; getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( R . id . fragment_container , postSettingsTagsFragment , PostSettingsTagsFragment . TAG ) . commit ( ) ; }
private String getEditTextStr ( int resId ) { final EditText edit = findViewById ( resId ) ; return EditTextUtils . getText ( edit ) ; }
private void enableSearchMode ( ) { setIsInSearchModeAndSetNewAdapter ( true ) ; mRecycleView . swapAdapter ( getAdapter ( ) , true ) ; }
private int getSitesCount ( ) { return mSites . size ( ) ; }
public void onSaveInstanceState ( @ NotNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; String role = mRoleListAdapter . getSelectedRole ( ) ; outState . putSerializable ( ROLE_TAG , role ) ; }
public ViewHolder onCreateViewHolder ( @ NotNull ViewGroup parent , int viewType ) { View view = mLayoutInflater . inflate ( R . layout . plugin_browser_row , parent , false ) ; return new PluginBrowserViewHolder ( view ) ; }
public void onCreateOptionsMenu ( Menu menu , @ NotNull MenuInflater inflater ) { menu . clear ( ) ; super . onCreateOptionsMenu ( menu , inflater ) ; }
public RecyclerView . ViewHolder onCreateViewHolder ( @ NotNull ViewGroup parent , int viewType ) { View view = mLayoutInflater . inflate ( R . layout . plugin_list_row , parent , false ) ; return new PluginViewHolder ( view ) ; }
private MultiSelectRecyclerViewAdapter getAdapter ( ) { if ( mAdapter == null ) { mAdapter = new MultiSelectRecyclerViewAdapter ( mEditingList ) ; } return mAdapter ; }
public ConnectButton ( Context context ) { super ( context ) ; updateView ( ) ; }
public ConnectButton ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; updateView ( ) ; }
private void hideConnectedView ( View view ) { LinearLayout connectedHeader = view . findViewById ( R . id . connected_header ) ; connectedHeader . setVisibility ( View . GONE ) ; }
public @ NotNull ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . publicize_connection_list_item , parent , false ) ; return new ViewHolder ( view ) ; }
public void onSaveInstanceState ( @ NotNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putSerializable ( WordPress . SITE , mSite ) ; outState . putString ( PublicizeConstants . ARG_SERVICE_ID , mServiceId ) ; }
public void onSaveInstanceState ( @ NotNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( QuickStartEvent . KEY , mQuickStartEvent ) ; }
public void onAnimationStart ( Animator animation ) { itemView . setEnabled ( false ) ; }
public void onAnimationCancel ( Animator animation ) { itemView . setEnabled ( true ) ; }
private void launchVideoLibrary ( boolean multiSelect ) { WPMediaUtils . launchVideoLibrary ( this , multiSelect ) ; }
public static void showNoSiteToReblog ( Activity activity ) { Intent intent = new Intent ( activity , NoSiteToReblogActivity . class ) ; activity . startActivityForResult ( intent , RequestCodes . NO_REBLOG_SITE ) ; }
public void setEndpoint ( String endpoint ) { this . mEndpoint = StringUtils . notNullStr ( endpoint ) ; }
public void setTagTitle ( String title ) { this . mTagTitle = StringUtils . notNullStr ( title ) ; }
public static void viewAppSettingsForResult ( Activity activity ) { Intent intent = new Intent ( activity , AppSettingsActivity . class ) ; AnalyticsTracker . track ( AnalyticsTracker . Stat . OPENED_APP_SETTINGS ) ; activity . startActivityForResult ( intent , RequestCodes . APP_SETTINGS ) ; }
private void launchZendeskMyTickets ( ) { if ( isFinishing ( ) ) { return ; } mBottomNav . setCurrentSelectedPage ( PageType . MY_SITE ) ; initSelectedSite ( ) ; ActivityLauncher . viewZendeskTickets ( this , getSelectedSite ( ) ) ; }
public void syncPostObjectWithUiAndSaveIt ( @ Nullable OnPostUpdatedFromUIListener listener ) { updateAndSavePostAsync ( listener ) ; }
public synchronized void reload ( ) { String newFilter = mCurrentFilter ; mCurrentFilter = null ; setFilter ( newFilter ) ; }
public void postTextChanged ( ) { mAfterTextChanged . postValue ( null ) ; }
public void confirmSignup ( ) { waitForElementToBeDisplayed ( R . id . nav_sites ) ; }
private SecondaryEditorAction getSecondaryAction ( ) { return mEditorActionsProvider . getSecondaryAction ( mEditPostRepository . getStatus ( ) , UploadUtils . userCanPublish ( mSite ) ) ; }
public static boolean shouldShowGutenbergInfoPopupPhase2ForNewPosts ( String siteURL ) { return getShowGutenbergInfoPopupForTheNewPosts ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS_PHASE_2 , siteURL ) ; }
public static void setShowGutenbergInfoPopupPhase2ForNewPosts ( String siteURL , boolean show ) { setShowGutenbergInfoPopupForTheNewPosts ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS_PHASE_2 , siteURL , show ) ; }
public static boolean shouldShowGutenbergInfoPopupForTheNewPosts ( String siteURL ) { return getShowGutenbergInfoPopupForTheNewPosts ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS , siteURL ) ; }
public static void setShowGutenbergInfoPopupForTheNewPosts ( String siteURL , boolean show ) { setShowGutenbergInfoPopupForTheNewPosts ( DeletablePrefKey . SHOULD_AUTO_ENABLE_GUTENBERG_FOR_THE_NEW_POSTS , siteURL , show ) ; }
private void retryFeaturedImageUpload ( @ NonNull SiteModel site , @ NonNull PostImmutableModel post ) { MediaModel mediaModel = mFeaturedImageHelper . retryFeaturedImageUpload ( site , post ) ; if ( mediaModel == null ) { clearFeaturedImage ( ) ; } }
public void onClick ( @ NonNull View view ) { if ( view . getId ( ) == R . id . btn_send_data ) { startBlockChain ( ) ; } }
public LexicaLogo ( Context context ) { this ( context , null ) ; }
public static ThemeManager getInstance ( ) { if ( instance == null ) { instance = new ThemeManager ( ) ; } return instance ; }
private static byte [ ] serializedUsTrie ( Trie trie ) { Language language = new EnglishUS ( ) ; TrieTest . addWords ( trie , FullUsGbTrieTest . readDictionary ( language ) ) ; return TrieTest . serialize ( trie ) ; }
private ScoreTabViewHolder createEmptyView ( ScoreActivity activity ) { FrameLayout frame = new FrameLayout ( activity ) ; frame . setLayoutParams ( new FrameLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , ViewGroup . LayoutParams . MATCH_PARENT ) ) ; return new ScoreTabViewHolder ( activity , frame ) ; }
public Locale getLocale ( ) { return new Locale ( "ja" ) ; }
public String getName ( ) { return "ja" ; }
public static Fitness calc ( File trieDir , Genome genome , Language language ) throws IOException { return calc ( trieDir , genome , language , FITNESS_CALC_BOARDS_TO_GENERATE ) ; }
public boolean isBeta ( ) { return false ; }
private void doReconnect ( ) { if ( connection == null ) { return ; } connection . scheduleReconnect ( 15 ) ; }
public synchronized List < MessageWithImage > get ( long appId ) { return combiner . combine ( state . state ( appId ) . messages , applicationHolder . get ( ) ) ; }
public synchronized void loadMoreIfNotPresent ( long appId ) { MessageState state = this . state . state ( appId ) ; if ( ! state . loaded ) { loadMore ( appId ) ; } }
public long getLastReceivedMessage ( ) { return state . getLastReceivedMessage ( ) ; }
public synchronized boolean deleteAll ( long appId ) { boolean success = this . requester . deleteAll ( appId ) ; this . state . deleteAll ( appId ) ; return success ; }
public synchronized boolean canLoadMore ( long appId ) { return state . state ( appId ) . hasNext ; }
private MessageState emptyState ( Long appId ) { MessageState emptyState = new MessageState ( ) ; emptyState . loaded = false ; emptyState . hasNext = false ; emptyState . nextSince = 0 ; emptyState . appId = appId ; return emptyState ; }
public Long getId ( ) { return id ; }
public Long getAppid ( ) { return appid ; }
public Long getSince ( ) { return since ; }
public void deleteAppTest ( ) { Long id = null ; }
public void updateApplicationTest ( ) { Application body = null ; Long id = null ; }
public void uploadAppImageTest ( ) { File file = null ; Long id = null ; }
public void deleteClientTest ( ) { Long id = null ; }
public void deleteAppMessagesTest ( ) { Long id = null ; }
public void deleteMessageTest ( ) { Long id = null ; }
public void getAppMessagesTest ( ) { Long id = null ; Integer limit = null ; Long since = null ; }
public void getMessagesTest ( ) { Integer limit = null ; Long since = null ; }
public void disablePluginTest ( ) { Long id = null ; }
public void enablePluginTest ( ) { Long id = null ; }
public void getPluginConfigTest ( ) { Long id = null ; }
public void getPluginDisplayTest ( ) { Long id = null ; }
public void updatePluginConfigTest ( ) { Long id = null ; }
public void deleteUserTest ( ) { Long id = null ; }
public void getUserTest ( ) { Long id = null ; }
public void updateUserTest ( ) { Long id = null ; UserWithPass body = null ; }
public void doLogout ( DialogInterface dialog , int which ) { setContentView ( R . layout . splash ) ; new DeleteClientAndNavigateToLogin ( ) . execute ( ) ; }
private void updateLogs ( ) { new RefreshLogs ( ) . execute ( ) ; if ( ! isDestroyed ( ) ) { handler . postDelayed ( this : : updateLogs , 5000 ) ; } }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( context ) . inflate ( R . layout . message_item , parent , false ) ; ViewHolder holder = new ViewHolder ( view ) ; return holder ; }
public synchronized void addMessages ( List < Message > messages ) { for ( Message message : messages ) { state . newMessage ( message ) ; } }
public synchronized void clear ( ) { this . state . clear ( ) ; }
public void onSwiped ( @ NonNull RecyclerView . ViewHolder viewHolder , int direction ) { int position = viewHolder . getAdapterPosition ( ) ; MessageWithImage message = adapter . getItems ( ) . get ( position ) ; scheduleDeletion ( position , message . message , true ) ; }
private String versionError ( String url , ApiException exception ) { return getString ( R . string . version_failed_status_code , url + "/version" , exception . code ( ) ) ; }
public void render ( GameSnapshot gameSnapshot ) { GameContainerUtils . showPlayerScore ( this , gameSnapshot . getScore ( ) ) ; animatePlayerSelection ( ) ; BoardDrawer . draw ( this , gameSnapshot , gameType ) ; }
public void visit ( MatchStartMessage message ) { player1Type = message . getPlayer1Type ( ) ; player2Type = message . getPlayer2Type ( ) ; GameContainerUtils . defineLabels ( getActivity ( ) , this , message ) ; showIndicator ( ) ; }
public NetworkClient providesNetworkClient ( ) { String baseUrl = ReversiApplication . getContext ( ) . getResources ( ) . getString ( R . string . server_url ) ; NetworkClientImpl networkClient = new NetworkClientImpl ( baseUrl ) ; return networkClient ; }
public static UserRegistration of ( String name ) { return new UserRegistration ( name ) ; }
public static Rime get ( Context context ) { return get ( context , false ) ; }
public static boolean syncUserData ( Context context ) { boolean b = sync_user_data ( ) ; destroy ( ) ; get ( context , true ) ; return b ; }
public static ClusterMapFragment newInstance ( String hostPrefix ) { ClusterMapFragment fragment = new ClusterMapFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( ARG_HOST_PREFIX , hostPrefix ) ; fragment . setArguments ( args ) ; return fragment ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( getArguments ( ) != null ) { clusterHostPrefix = getArguments ( ) . getString ( ARG_HOST_PREFIX ) ; } activity = ( ClusterMapActivity ) getActivity ( ) ; }
public void onRequestTags ( ) { mShowAds = true ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . item_verse , parent , false ) ; return new ViewHolder ( v ) ; }
private GDBList ( ) { _Items = new LinkedList <> ( ) ; }
public GDBList ( GDBList source ) { this . _ListUrl = source . _ListUrl ; _Items = new LinkedList <> ( ) ; for ( GDBInfo Item : source . _Items ) { _Items . add ( new GDBInfo ( Item ) ) ; } }
public void sendEditMessage ( String messageEditedToSend , String cookieListInAString ) { sendThisMessage ( messageEditedToSend , "https : }
public static String getForumForTopicLink ( String topicLink ) { Matcher pageTopicLinkNumberMatcher = pageTopicLinkNumberPattern . matcher ( topicLink ) ; if ( pageTopicLinkNumberMatcher . find ( ) ) { return "https : } else { return "" ; } }
public static boolean checkIfItsForumFormatedLink ( String linkToCheck ) { return linkToCheck . startsWith ( "https : }
public static boolean checkIfItsTopicFormatedLink ( String linkToCheck ) { return linkToCheck . startsWith ( "https : linkToCheck . startsWith ( "https : }
public static boolean checkIfItsSearchFormatedLink ( String linkToCheck ) { return linkToCheck . startsWith ( "https : }
public static String getTopicLinkFromPermalinkPage ( String sourcePage ) { Matcher topicLinkMatcher = topicLinkInPermalinkPattern . matcher ( sourcePage ) ; if ( topicLinkMatcher . find ( ) ) { return "https : } return "" ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( SAVE_FORUM_INFOS , infosForForum ) ; outState . putInt ( SAVE_SCROLL_POSITION , mainScrollView . getScrollY ( ) ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return String . valueOf ( ( int ) value ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return data . get ( Math . min ( Math . max ( ( int ) value , 0 ) , data . size ( ) - 1 ) ) . xAxisValue ; }
public String getFormattedValue ( float value , AxisBase axis ) { return months [ ( int ) value % months . length ] ; }
public String getFormattedValue ( float value , AxisBase axis ) { long millis = TimeUnit . HOURS . toMillis ( ( long ) value ) ; return mFormat . format ( new Date ( millis ) ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return mActivities [ ( int ) value % mActivities . length ] ; }
public String getFormattedValue ( float value , AxisBase axis ) { return format . format ( value ) + " - " + format . format ( value + 10 ) ; }
public String getFormattedValue ( float value , AxisBase axis ) { return mFormat . format ( Math . abs ( value ) ) + "m" ; }
public XYMarkerView ( Context context , IAxisValueFormatter xAxisValueFormatter ) { super ( context , R . layout . custom_marker_view ) ; this . xAxisValueFormatter = xAxisValueFormatter ; tvContent = findViewById ( R . id . tvContent ) ; format = new DecimalFormat ( "### . 0" ) ; }
public IValueFormatter getDefaultValueFormatter ( ) { return mDefaultValueFormatter ; }
public String getFormattedLabel ( int index ) { if ( index < 0 || index >= mEntries . length ) return "" ; else return getValueFormatter ( ) . getFormattedValue ( mEntries [ index ] , this ) ; }
public void setValueFormatter ( IAxisValueFormatter f ) { if ( f == null ) mAxisValueFormatter = new DefaultAxisValueFormatter ( mDecimals ) ; else mAxisValueFormatter = f ; }
public IAxisValueFormatter getValueFormatter ( ) { if ( mAxisValueFormatter == null || ( mAxisValueFormatter instanceof DefaultAxisValueFormatter && ( ( DefaultAxisValueFormatter ) mAxisValueFormatter ) . getDecimalDigits ( ) != mDecimals ) ) mAxisValueFormatter = new DefaultAxisValueFormatter ( mDecimals ) ; return mAxisValueFormatter ; }
public void setValueFormatter ( IValueFormatter f ) { if ( f == null ) return ; else mValueFormatter = f ; }
public IValueFormatter getValueFormatter ( ) { if ( needsFormatter ( ) ) return Utils . getDefaultValueFormatter ( ) ; return mValueFormatter ; }
public void setValueFormatter ( IValueFormatter f ) { if ( f == null ) return ; else { for ( IDataSet set : mDataSets ) { set . setValueFormatter ( f ) ; } } }
public String getFormattedValue ( float value , AxisBase axis ) { int index = Math . round ( value ) ; if ( index < 0 || index >= mValueCount || index != ( int ) value ) return "" ; return mValues [ index ] ; }
public String getFormattedValue ( float value , AxisBase axis ) { return makePretty ( value ) + mText ; }
public static IValueFormatter getDefaultValueFormatter ( ) { return mDefaultValueFormatter ; }
public void onNothingSelected ( ) { }
public int getEntryCount ( ) { return mEntries . size ( ) ; }
public List < T > getValues ( ) { return mEntries ; }
public void clear ( ) { mEntries . clear ( ) ; notifyDataSetChanged ( ) ; }
public boolean removeEntry ( T e ) { if ( e == null ) return false ; if ( mEntries == null ) return false ; boolean removed = mEntries . remove ( e ) ; if ( removed ) { calcMinMax ( ) ; } return removed ; }
public int getEntryIndex ( Entry e ) { return mEntries . indexOf ( e ) ; }
public T getEntryForXValue ( float xValue , float closestToY , Rounding rounding ) { int index = getEntryIndex ( xValue , closestToY , rounding ) ; if ( index > - 1 ) return mEntries . get ( index ) ; return null ; }
public T getEntryForIndex ( int index ) { return mEntries . get ( index ) ; }
public boolean isUsingSliceColorAsValueLineColor ( ) { return isUseValueColorForLineEnabled ( ) ; }
public boolean removeDataSet ( T d ) { if ( d == null ) return false ; boolean removed = mDataSets . remove ( d ) ; if ( removed ) { notifyDataChanged ( ) ; } return removed ; }
public void highlightValue ( float x , int dataSetIndex , boolean callListener ) { highlightValue ( x , Float . NaN , dataSetIndex , - 1 , callListener ) ; }
public void onDestroyView ( ) { presenter . onDetachView ( ) ; adapter = null ; super . onDestroyView ( ) ; }
private void performSkipLogin ( ) { applicationKvStore . putBoolean ( "login_skipped" , true ) ; MainActivity . startYourself ( this ) ; finish ( ) ; }
public void startMainActivity ( ) { ActivityUtils . startActivityWithFlags ( this , MainActivity . class , Intent . FLAG_ACTIVITY_SINGLE_TOP ) ; finish ( ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; gridView . setOnItemClickListener ( ( AdapterView . OnItemClickListener ) getParentFragment ( ) ) ; initList ( ) ; }
public boolean backButtonClicked ( ) { return presenter . backButtonClicked ( ) ; }
public static List < UploadableFile > handleExternalImagesPicked ( Intent data , Activity activity ) { try { return getFilesFromGalleryPictures ( data , activity ) ; } catch ( IOException | SecurityException e ) { e . printStackTrace ( ) ; } return new ArrayList <> ( ) ; }
private void refreshLeaderboard ( ) { scrollToRank = false ; if ( viewModel != null ) { viewModel . refresh ( duration , category , limit , offset ) ; setLeaderboard ( duration , category , limit , offset ) ; } }
private void onError ( ) { ViewUtil . showLongToast ( getActivity ( ) , getResources ( ) . getString ( R . string . error_occurred ) ) ; progressBar . setVisibility ( View . GONE ) ; }
private static void showSettingWallpaperProgressBar ( Context context ) { progressDialogWallpaper = ProgressDialog . show ( context , context . getString ( R . string . setting_wallpaper_dialog_title ) , context . getString ( R . string . setting_wallpaper_dialog_message ) , true ) ; }
public void postProcess ( ) { if ( errors != null && ! errors . isEmpty ( ) ) { throw new MwException ( errors . get ( 0 ) , errors ) ; } }
public Media getMediaAtPosition ( int i ) { return searchMediaFragment . getMediaAtPosition ( i ) ; }
public Media getMediaAtPosition ( int i ) { return depictionImagesListFragment . getMediaAtPosition ( i ) ; }
private Cursor dateTakenCursor ( final ContentResolver contentResolver , final Contribution contribution ) { return contentResolver . query ( contribution . getLocalUri ( ) , new String [ ] { MediaStore . Images . ImageColumns . DATE_TAKEN } , null , null , null ) ; }
public void set ( final String key , final long value ) { defaultKVStore . putLong ( key , value ) ; }
private String chooseImageSource ( final String thumbUrl , final Uri localUri ) { return ! TextUtils . isEmpty ( thumbUrl ) ? thumbUrl : localUri != null ? localUri . toString ( ) : null ; }
public void onViewCreated ( final View view , @ Nullable final Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; initRecyclerView ( ) ; initializeAnimations ( ) ; setListeners ( ) ; }
private void registerNetworkReceiver ( ) { if ( getActivity ( ) != null ) { getActivity ( ) . registerReceiver ( broadcastReceiver , intentFilter ) ; } }
public void onSaveInstanceState ( final Bundle outState ) { super . onSaveInstanceState ( outState ) ; mapView . onSaveInstanceState ( outState ) ; }
public void filterByMarkerType ( final ArrayList < Label > selectedLabels , final int i , final boolean b , final boolean b1 ) { presenter . filterByMarkerType ( selectedLabels , i , b , b1 ) ; }
public void setCheckBoxState ( final int state ) { checkBoxTriStates . setState ( state ) ; }
public void onStateChanged ( @ NonNull final View bottomSheet , final int newState ) { prepareViewsForSheetPosition ( newState ) ; }
public void onSlide ( @ NonNull final View bottomSheet , final float slideOffset ) { }
public void onStateChanged ( @ NonNull final View bottomSheet , final int newState ) { if ( newState == BottomSheetBehavior . STATE_EXPANDED ) { bottomSheetDetailsBehavior . setState ( BottomSheetBehavior . STATE_HIDDEN ) ; } }
public void setSearchThisAreaButtonVisibility ( final boolean isVisible ) { if ( isVisible ) { searchThisAreaButton . setVisibility ( View . VISIBLE ) ; } else { searchThisAreaButton . setVisibility ( View . GONE ) ; } }
public void setProgressBarVisibility ( final boolean isVisible ) { if ( isVisible ) { progressBar . setVisibility ( View . VISIBLE ) ; } else { progressBar . setVisibility ( View . GONE ) ; } }
private void handleLocationUpdate ( final fr . free . nrw . commons . location . LatLng latLng , final LocationServiceManager . LocationChangeType locationChangeType ) { lastKnownLocation = latLng ; NearbyController . currentLocation = lastKnownLocation ; presenter . updateMapAndList ( locationChangeType ) ; }
private boolean isUserBrowsing ( ) { final boolean isUserBrowsing = lastKnownLocation != null && ! presenter . areLocationsClose ( getCameraTarget ( ) , lastKnownLocation ) ; return isUserBrowsing ; }
public void onLocationChangedSignificantly ( final fr . free . nrw . commons . location . LatLng latLng ) { Timber . d ( "Location significantly changed" ) ; if ( isMapBoxReady && latLng != null &&! isUserBrowsing ( ) ) { handleLocationUpdate ( latLng , LOCATION_SIGNIFICANTLY_CHANGED ) ; } }
public void onLocationChangedSlightly ( final fr . free . nrw . commons . location . LatLng latLng ) { Timber . d ( "Location slightly changed" ) ; if ( isMapBoxReady && latLng != null &&! isUserBrowsing ( ) ) { handleLocationUpdate ( latLng , LOCATION_SLIGHTLY_CHANGED ) ; } }
public void setFABPlusAction ( final View . OnClickListener onClickListener ) { fabPlus . setOnClickListener ( onClickListener ) ; }
public void setFABRecenterAction ( final View . OnClickListener onClickListener ) { fabRecenter . setOnClickListener ( onClickListener ) ; }
public void filterOutAllMarkers ( ) { hideAllMarkers ( ) ; }
public void onAttach ( final Context context ) { super . onAttach ( context ) ; wikidataEditListener . setAuthenticationStateListener ( this ) ; }
private void showErrorMessage ( final String message ) { ViewUtil . showLongToast ( getActivity ( ) , message ) ; }
public void setFragments ( List < UploadBaseFragment > fragments ) { this . fragments = fragments ; notifyDataSetChanged ( ) ; }
public Observable < Contribution > buildContributions ( ) { return uploadModel . buildContributions ( ) ; }
public List < CategoryItem > getSelectedCategories ( ) { return categoriesModel . getSelectedCategories ( ) ; }
public void setSelectedCategories ( List < String > categoryStringList ) { uploadModel . setSelectedCategories ( categoryStringList ) ; }
public boolean containsYear ( String name ) { return categoriesModel . containsYear ( name ) ; }
public List < String > getLicenses ( ) { return uploadModel . getLicenses ( ) ; }
public String getSelectedLicense ( ) { return uploadModel . getSelectedLicense ( ) ; }
public int getCount ( ) { return uploadModel . getCount ( ) ; }
public void deletePicture ( String filePath ) { uploadModel . deletePicture ( filePath ) ; }
public void showError ( Boolean value ) { if ( value ) { depictsSearchContainer . setError ( getString ( R . string . no_depiction_found ) ) ; } else { depictsSearchContainer . setErrorEnabled ( false ) ; } }
private long countBytes ( final InputStream stream ) throws IOException { long count = 0 ; final BufferedInputStream bis = new BufferedInputStream ( stream ) ; while ( bis . read ( ) != - 1 ) { count ++ ; } return count ; }
public Single < Integer > getImageQuality ( final UploadItem uploadItem ) { return imageProcessingService . validateImage ( uploadItem ) ; }
public void setSelectedLicense ( final String licenseName ) { this . license = licensesByName . get ( licenseName ) ; store . putString ( Prefs . DEFAULT_LICENSE , license ) ; }
private static HttpLoggingInterceptor getLoggingInterceptor ( ) { final HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor ( ) . setLevel ( Level . BASIC ) ; httpLoggingInterceptor . redactHeader ( "Authorization" ) ; httpLoggingInterceptor . redactHeader ( "Cookie" ) ; return httpLoggingInterceptor ; }
private void showNearbyCardPermissionRationale ( ) { DialogUtil . showAlertDialog ( getActivity ( ) , getString ( R . string . nearby_card_permission_title ) , getString ( R . string . nearby_card_permission_explanation ) , this : : requestLocationPermission , this : : displayYouWontSeeNearbyMessage , checkBoxView , false ) ; }
public void addSearchThisAreaButtonAction ( ) { searchThisAreaButton . setOnClickListener ( presenter . onSearchThisAreaClicked ( ) ) ; }
public void onWikidataEditSuccessful ( ) { updateMapAndList ( MAP_UPDATED ) ; }
public void onLocationChangedSignificantly ( LatLng latLng ) { Timber . d ( "Location significantly changed" ) ; updateMapAndList ( LOCATION_SIGNIFICANTLY_CHANGED ) ; }
public void onLocationChangedSlightly ( LatLng latLng ) { Timber . d ( "Location significantly changed" ) ; updateMapAndList ( LOCATION_SLIGHTLY_CHANGED ) ; }
private void onUpdateClick ( ) { binding . refreshLayout . setRefreshing ( true ) ; UpdateWorker . Companion . startManualUpdate ( this ) ; }
public void setData_callsValueChangeListeners ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setData ( "blah" ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void usingReadOnlyOption_doesNotShowButton ( ) { assertThat ( createWidget ( promptWithReadOnly ( ) ) . binding . launchOpenMapKitButton . getVisibility ( ) , is ( View . GONE ) ) ; }
public void whenPromptHasAnswer_recaptureOsmButtonIsDisplayed ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) ; assertThat ( widget . binding . launchOpenMapKitButton . getText ( ) , is ( widgetActivity . getString ( R . string . recapture_osm ) ) ) ; }
public void clickingButton_whenActivityIsAvailableAndPromptDoesNotHaveAnswer_launchesCorrectIntent ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . binding . launchOpenMapKitButton . performClick ( ) ; assertIntentExtrasEquals ( null ) ; }
public void clickingButton_whenActivityIsAvailableAndPromptHasAnswer_launchesCorrectIntent ( ) { OSMWidget widget = createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) ; widget . binding . launchOpenMapKitButton . performClick ( ) ; assertIntentExtrasEquals ( "blah" ) ; }
public void whenAutocompleteAppearanceDoesNotExist_shouldNotKeyboardBeDisplayed ( ) { SelectOneWidget widget = getSpyWidget ( ) ; verify ( widget . softKeyboardController , never ( ) ) . showSoftKeyboard ( widget . binding . choicesSearchBox ) ; }
public void whenAutocompleteAppearanceExist_shouldKeyboardBeDisplayed ( ) { when ( formEntryPrompt . getAppearanceHint ( ) ) . thenReturn ( "autocomplete" ) ; SelectOneWidget widget = getSpyWidget ( ) ; verify ( widget . softKeyboardController ) . showSoftKeyboard ( widget . binding . choicesSearchBox ) ; }
public void setDuration ( Integer duration ) { this . duration = duration ; totalDurationLabel . setText ( formatLength ( ( long ) duration ) ) ; seekBar . setMax ( duration ) ; setPosition ( 0 ) ; }
public void clearAnswer ( ) { deleteFile ( ) ; widgetValueChanged ( ) ; updateVisibilities ( ) ; }
public void deleteAnswerFile_whenAnswerFileHasAlreadyBeenDeleted_actuallyDeletesNewFile ( ) { viewModel . deleteAnswerFile ( "index" , "blah1" ) ; viewModel . deleteAnswerFile ( "index" , "blah2" ) ; verify ( mediaUtils ) . deleteMediaFile ( "blah2" ) ; }
public void replaceAnswerFile_whenAnswerFileHasAlreadyBeenReplaced_deletesPreviousReplacement ( ) { viewModel . replaceAnswerFile ( "index" , "blah1" ) ; viewModel . replaceAnswerFile ( "index" , "blah2" ) ; verify ( mediaUtils ) . deleteMediaFile ( "blah1" ) ; }
private void animateToPreviousView ( int event ) { View next = createView ( event , false ) ; showView ( next , AnimationType . LEFT ) ; formIndexAnimationHandler . setLastIndex ( getFormController ( ) . getFormIndex ( ) ) ; }
public void next ( ) { if ( ! swipeHandler . beenSwiped ( ) ) { swipeHandler . setBeenSwiped ( true ) ; onSwipeForward ( ) ; } }
public void onItemClicked ( SortDialogAdapter . ViewHolder holder , int position ) { holder . updateItemColor ( selectedSortingOrder ) ; performSelectedSearch ( position ) ; bottomSheetDialog . dismiss ( ) ; }
public void updateSelectedItems ( List < Selection > items ) { ODKView odkView = getCurrentViewIfODKView ( ) ; if ( odkView != null ) { QuestionWidget widgetGettingNewValue = getWidgetWaitingForBinaryData ( ) ; setWidgetData ( items ) ; widgetValueChanged ( widgetGettingNewValue ) ; } }
public String getDescription ( ) { return "Custom view action to set rating on RatingBar" ; }
private void onDataChanged ( Object data ) { ODKView odkView = getCurrentViewIfODKView ( ) ; if ( odkView != null ) { QuestionWidget widgetGettingNewValue = getWidgetWaitingForBinaryData ( ) ; setWidgetData ( data ) ; widgetValueChanged ( widgetGettingNewValue ) ; } }
private void resetAnswerFields ( ) { selectedDateTime = DateTimeUtils . getCurrentDateTime ( ) ; binding . dateWidget . dateAnswerText . setText ( R . string . no_date_selected ) ; binding . timeWidget . timeAnswerText . setText ( R . string . no_time_selected ) ; }
private boolean isDateNull ( ) { return binding . dateWidget . dateAnswerText . getText ( ) . equals ( getContext ( ) . getString ( R . string . no_date_selected ) ) ; }
private boolean isTimeNull ( ) { return binding . timeWidget . timeAnswerText . getText ( ) . equals ( getContext ( ) . getString ( R . string . no_time_selected ) ) ; }
public IAnswerData getAnswer ( ) { return binding . dateAnswerText . getText ( ) . equals ( getContext ( ) . getString ( R . string . no_date_selected ) ) ? null : new DateData ( selectedDate . toDate ( ) ) ; }
public void clearAnswer ( ) { selectedTime = DateTimeUtils . getCurrentDateTime ( ) ; binding . timeAnswerText . setText ( R . string . no_time_selected ) ; widgetValueChanged ( ) ; }
public void usingReadOnlyOption_doesNotShowButton ( ) { DateWidget widget = createWidget ( promptWithReadOnlyAndQuestionDef ( questionDef ) ) ; assertEquals ( widget . binding . dateButton . getVisibility ( ) , View . GONE ) ; }
public void whenPromptIsNotReadOnly_buttonShowsCorrectText ( ) { DateWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . dateButton . getText ( ) , widget . getContext ( ) . getString ( R . string . select_date ) ) ; }
public void whenPromptDoesNotHaveAnswer_answerTextViewShowsNoDateSelected ( ) { DateWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . dateAnswerText . getText ( ) , widget . getContext ( ) . getString ( R . string . no_date_selected ) ) ; }
public void usingReadOnlyOption_doesNotShowButton ( ) { TimeWidget widget = createWidget ( promptWithReadOnlyAndQuestionDef ( questionDef ) ) ; assertEquals ( widget . binding . timeButton . getVisibility ( ) , View . GONE ) ; }
public void whenPromptIsNotReadOnly_buttonShowsCorrectText ( ) { TimeWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . timeButton . getText ( ) , widget . getContext ( ) . getString ( R . string . select_time ) ) ; }
public void whenPromptDoesNotHaveAnswer_answerTextViewShowsNoTimeSelected ( ) { TimeWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( questionDef , null ) ) ; assertEquals ( widget . binding . timeAnswerText . getText ( ) , widget . getContext ( ) . getString ( R . string . no_time_selected ) ) ; }
public void setSelectedDate ( int year , int month , int day ) { this . selectedDate . postValue ( DateTimeUtils . getSelectedDate ( new LocalDateTime ( ) . withDate ( year , month + 1 , day ) , LocalDateTime . now ( ) ) ) ; }
public LiveData < DateTime > getSelectedTime ( ) { return selectedTime ; }
public void setSelectedTime ( int hourOfDay , int minuteOfHour ) { selectedTime . postValue ( new DateTime ( ) . withTime ( hourOfDay , minuteOfHour , 0 , 0 ) ) ; }
public void deleteFile ( ) { questionMediaManager . deleteAnswerFile ( getFormEntryPrompt ( ) . getIndex ( ) . toString ( ) , getInstanceFolder ( ) + File . separator + binaryName ) ; binaryName = null ; }
public void clickingChooseButton_requestsAudioFile ( ) { FormEntryPrompt prompt = promptWithAnswer ( null ) ; AudioWidget widget = createWidget ( prompt ) ; widget . binding . chooseButton . performClick ( ) ; verify ( audioFileRequester ) . requestFile ( prompt ) ; }
public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull ( ) { assertThat ( createWidget ( promptWithReadOnlyAndQuestionDef ( rangeQuestion ) ) . getAnswer ( ) , nullValue ( ) ) ; }
public void clearAnswer ( ) { binding . ratingBar1 . setRating ( 0 . 0F ) ; }
public void setData_updatesWidgetAnswer_afterStrippingInvalidCharacters ( ) { BarcodeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( "\ud800blah\b" ) ; assertThat ( widget . binding . barcodeAnswerText . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public void setData_callsValueChangeListener ( ) { BarcodeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setData ( "blah" ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void setData_updatesWidgetAnswer ( ) { BearingWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( "blah" ) ; assertThat ( widget . binding . answerText . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public void setData_callsValueChangeListeners ( ) { BearingWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setData ( "blah" ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void formLoaded ( @ NotNull FormController formController ) { this . formController = formController ; }
public void formLoaded ( @ NonNull FormController formController ) { this . formName = formController . getFormTitle ( ) ; this . auditEventLogger = formController . getAuditEventLogger ( ) ; updateRequiresIdentity ( ) ; }
public void setup ( ) { assertThat ( "Test expects different Forms DB version" , DatabaseConstants . FORMS_DATABASE_VERSION , is ( 10 ) ) ; database = SQLiteDatabase . create ( null ) ; }
public void setData_updatesWidgetAnswer ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( answer . getDisplayText ( ) ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer . getDisplayText ( ) ) ; }
public void setData_callsValueChangeListener ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setData ( answer . getDisplayText ( ) ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void setData_updatesWidgetAnswer ( ) { GeoPointWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( answer . getDisplayText ( ) ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer . getDisplayText ( ) ) ; }
public void setData_callsValueChangeListener ( ) { GeoPointWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setData ( answer . getDisplayText ( ) ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void setData_updatesWidgetAnswer ( ) { GeoShapeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( answer ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer ) ; }
public void setData_updatesWidgetDisplayedAnswer ( ) { GeoShapeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( answer ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) . toString ( ) , answer ) ; }
public void setData_callsValueChangeListener ( ) { GeoShapeWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setData ( answer ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void setData_updatesWidgetAnswer ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( answer ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , answer ) ; }
public void setData_setsCorrectAnswerInAnswerTextView ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( answer ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) . toString ( ) , answer ) ; }
public void setData_updatesWidgetDisplayedAnswer ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; widget . setData ( answer ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) . toString ( ) , answer ) ; }
public void setData_callsValueChangeListener ( ) { GeoTraceWidget widget = createWidget ( promptWithAnswer ( null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . setData ( answer ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public void getAnswer_whenPromptHasAnswer_returnsPromptAnswer ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( answer ) ) ; assertEquals ( widget . getAnswer ( ) . getDisplayText ( ) , new GeoPointData ( GeoWidgetUtils . getLocationParamsFromStringAnswer ( answer . getDisplayText ( ) ) ) . getDisplayText ( ) ) ; }
public void whenRangeQuestionHasZeroRangeStep_sliderIsDisabled ( ) { when ( rangeQuestion . getRangeStep ( ) ) . thenReturn ( BigDecimal . ZERO ) ; RangeWidgetUtils . isRangeSliderWidgetValid ( rangeQuestion , slider ) ; assertFalse ( slider . isEnabled ( ) ) ; }
public void whenPromptHasInvalidWidgetParameters_sliderIsDisabled ( ) { when ( rangeQuestion . getRangeStep ( ) ) . thenReturn ( new BigDecimal ( 2 ) ) ; RangeWidgetUtils . isRangeSliderWidgetValid ( rangeQuestion , slider ) ; assertFalse ( slider . isEnabled ( ) ) ; }
public RangePickerIntegerWidget ( Context context , QuestionDetails questionDetails ) { super ( context , questionDetails ) ; }
public void getAnswer_whenPromptHasAnswer_returnsAnswer ( ) { RangeDecimalWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( rangeQuestion , new StringData ( "2 . 5" ) ) ) ; assertThat ( widget . getAnswer ( ) . getValue ( ) , equalTo ( 2 . 5 ) ) ; }
public void clearAnswer_callsValueChangeListener ( ) { RangeIntegerWidget widget = createWidget ( promptWithQuestionDefAndAnswer ( rangeQuestion , null ) ) ; WidgetValueChangedListener valueChangedListener = mockValueChangedListener ( widget ) ; widget . clearAnswer ( ) ; verify ( valueChangedListener ) . widgetValueChanged ( widget ) ; }
public boolean suppressFlingGesture ( MotionEvent e1 , MotionEvent e2 , float velocityX , float velocityY ) { return slider . isTrackingTouch ( ) ; }
public RangeWidgetLayoutElements ( View answerView , TrackingTouchSlider slider , TextView currentValue ) { this . answerView = answerView ; this . slider = slider ; this . currentValue = currentValue ; }
public TrackingTouchSlider getSlider ( ) { return slider ; }
public RangeIntegerWidget ( Context context , QuestionDetails prompt ) { super ( context , prompt ) ; }
public void usingReadOnlyOption_hidesBearingButton ( ) { assertThat ( createWidget ( promptWithReadOnly ( ) ) . binding . bearingButton . getVisibility ( ) , is ( View . GONE ) ) ; }
public void whenPromptDoesNotHaveAnswer_getBearingButtonIsShown ( ) { assertThat ( createWidget ( promptWithAnswer ( null ) ) . binding . bearingButton . getText ( ) , is ( widgetActivity . getString ( R . string . get_bearing ) ) ) ; }
public void whenPromptHasAnswer_replaceBearingButtonIsShown ( ) { assertThat ( createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) . binding . bearingButton . getText ( ) , is ( widgetActivity . getString ( R . string . replace_bearing ) ) ) ; }
public void whenPromptHasAnswer_answerTextViewShowsCorrectAnswer ( ) { assertThat ( createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) . binding . answerText . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public boolean isAccountSelected ( ) { return accountPicker . getSelectedAccountName ( ) != null ; }
public String getToken ( ) throws IOException , GoogleAuthException { String token = accountPicker . getToken ( ) ; GoogleAuthUtil . invalidateToken ( context , token ) ; return token ; }
public void usingReaDOnly_shouldHideBarcodeButton ( ) { assertThat ( createWidget ( promptWithReadOnly ( ) ) . binding . barcodeButton . getVisibility ( ) , is ( View . GONE ) ) ; }
public void whenPromptHasAnswer_answerTextViewShowsCorrectAnswer ( ) { BarcodeWidget widget = createWidget ( promptWithAnswer ( new StringData ( "blah" ) ) ) ; assertThat ( widget . binding . barcodeAnswerText . getText ( ) . toString ( ) , is ( "blah" ) ) ; }
public void getRootIdShouldReturnTheProperRootFolderId ( ) throws IOException { String rootId = "root_id" ; doReturn ( rootId ) . when ( mockedGoogleDriveApi ) . getFileId ( "root" , "id" ) ; assertEquals ( rootId , driveHelper . getRootFolderId ( ) ) ; }
public void insertRowTest ( ) throws IOException { ValueRange valueRange = new ValueRange ( ) ; sheetsHelper . insertRow ( "spreadsheet_id" , "sheet_name" , valueRange ) ; verify ( googleSheetsAPI ) . insertRow ( "spreadsheet_id" , "sheet_name" , valueRange ) ; }
public void updateRowTest ( ) throws IOException { ValueRange valueRange = new ValueRange ( ) ; sheetsHelper . updateRow ( "spreadsheet_id" , "sheet_name ! A1" , valueRange ) ; verify ( googleSheetsAPI ) . updateRow ( "spreadsheet_id" , "sheet_name ! A1" , valueRange ) ; }
private void assertBatchUpdateCalled ( int timesInvocations ) throws IOException { verify ( googleSheetsAPI , times ( timesInvocations ) ) . batchUpdate ( anyString ( ) , ArgumentMatchers . < Request > anyList ( ) ) ; }
public void show ( ) { handler . removeCallbacksAndMessages ( null ) ; shownAt = System . currentTimeMillis ( ) ; super . setVisibility ( View . VISIBLE ) ; }
public void onComplete ( SaveToDiskResult saveToDiskResult ) { handleTaskResult ( saveToDiskResult , saveRequest ) ; clearMediaFiles ( ) ; }
public void setOnLongClickListener ( OnLongClickListener l ) { binding . captureButton . setOnLongClickListener ( l ) ; binding . chooseButton . setOnLongClickListener ( l ) ; }
public AddNewRepeatDialog swipeToNextQuestionWithRepeatGroup ( String repeatName ) { flingLeft ( ) ; return WaitFor . waitFor ( ( ) -> new AddNewRepeatDialog ( repeatName ) . assertOnPage ( ) ) ; }
public void clearAnswer ( ) { super . clearAnswer ( ) ; annotateButton . setEnabled ( false ) ; captureButton . setText ( getContext ( ) . getString ( R . string . capture_image ) ) ; }
public void clearAnswer ( ) { answerText . setText ( null ) ; widgetValueChanged ( ) ; }
public void onItemClicked ( ) { if ( autoAdvance && listener != null ) { listener . advance ( ) ; } clearFollowingItemsetWidgets ( ) ; widgetValueChanged ( ) ; }
public void clearAnswer ( ) { clearFollowingItemsetWidgets ( ) ; super . clearAnswer ( ) ; }
private void initToolbar ( ) { getToolbar ( ) . setNavigationIcon ( R . drawable . ic_arrow_back ) ; if ( viewModel . isAutoComplete ( ) ) { initSearchBar ( ) ; } }
public void setSelectItemClickListener ( SelectItemClickListener listener ) { this . listener = listener ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; viewModel . getSelectListAdapter ( ) . getAudioHelper ( ) . stop ( ) ; binding = null ; }
private List < SelectChoice > getVisibleItems ( ) { return ( ( AbstractSelectListAdapter ) recyclerView . getAdapter ( ) ) . getFilteredItems ( ) ; }
public void whenThereIsNoAnswer_shouldDefaultTextBeDisplayed ( ) { assertThat ( getSpyWidget ( ) . binding . answer . getText ( ) . toString ( ) , is ( "Select Answer" ) ) ; }
public void clearAnswer ( ) { binding . answer . setText ( R . string . select_answer ) ; widgetValueChanged ( ) ; }
public FormEntryPage assertSelectMinimalDialogAnswer ( String answer ) { onView ( withId ( R . id . answer ) ) . check ( matches ( withText ( answer ) ) ) ; return this ; }
public void setItemClickListener ( SelectItemClickListener listener ) { this . listener = listener ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new SelectMinimalViewModel ( selectListAdapter , isFlex , isAutoComplete ) ; }
private void adjustRecyclerViewSize ( ) { if ( getAdapter ( ) . getItemCount ( ) > MAX_ITEMS_WITHOUT_SCREEN_BOUND ) { getLayoutParams ( ) . height = ( int ) ( ScreenUtils . getScreenHeight ( ) * 0 . 9 ) ; } else { setNestedScrollingEnabled ( false ) ; } }
private void enableFlexboxLayout ( ) { setLayoutManager ( new FlexboxLayoutManager ( getContext ( ) ) ) ; }
public static Button createSimpleButton ( Context context , @ IdRes int id , boolean readOnly , int answerFontSize , ButtonClickListener listener ) { return createSimpleButton ( context , id , readOnly , null , answerFontSize , listener ) ; }
public static Button createSimpleButton ( Context context , boolean readOnly , String text , int answerFontSize , ButtonClickListener listener ) { return createSimpleButton ( context , R . id . simple_button , readOnly , text , answerFontSize , listener ) ; }
public Scheduler providesScheduler ( WorkManager workManager ) { return testScheduler ; }
public FillBlankFormPage assertOnPage ( ) { assertToolbarTitle ( R . string . enter_data ) ; return this ; }
public AudioHelper create ( Context context ) { ScreenContext screenContext = ( ScreenContext ) context ; return new AudioHelper ( screenContext . getActivity ( ) , screenContext . getViewLifecycle ( ) , scheduler , mediaPlayerFactory ) ; }
public AudioHelperFactory providesAudioHelperFactory ( Scheduler scheduler ) { return context -> audioHelper ; }
public HashMap < String , ServerFormDetails > getFormDetailsByFormId ( ) { return formDetailsByFormId ; }
public void setFormDetailsByFormId ( HashMap < String , ServerFormDetails > formDetailsByFormId ) { this . formDetailsByFormId = formDetailsByFormId ; }
public void setFromIdsToDetails ( HashMap < String , ServerFormDetails > formIdsToDetails ) { this . formIdsToDetails = formIdsToDetails ; }
public Cancellable repeat ( @ NotNull Runnable foreground , long repeatPeriod ) { increment ( ) ; return wrappedScheduler . repeat ( ( ) -> { foreground . run ( ) ; decrement ( ) ; } , repeatPeriod ) ; }
public AboutPage assertOnPage ( ) { assertText ( R . string . about_preferences ) ; return this ; }
public EditSavedFormPage assertOnPage ( ) { assertText ( R . string . review_data ) ; return this ; }
public ErrorDialog assertOnPage ( ) { super . assertOnPage ( ) ; assertText ( R . string . error_occured ) ; return this ; }
public FormMetadataPage assertOnPage ( ) { assertText ( R . string . form_metadata_title ) ; return this ; }
public ServerSettingsPage assertOnPage ( ) { assertText ( R . string . server_preferences ) ; return this ; }
public UserAndDeviceIdentitySettingsPage assertOnPage ( ) { assertText ( R . string . user_and_device_identity_title ) ; return this ; }
public void onBackPressed ( ) { FormController formController = Collect . getInstance ( ) . getFormController ( ) ; if ( formController != null ) { formController . getAuditEventLogger ( ) . flush ( ) ; navigateToTheLastRelevantIndex ( formController ) ; } onBackPressedWithoutLogger ( ) ; }
public void clearFeatures ( ) { if ( map != null ) { for ( MapFeature feature : features . values ( ) ) { feature . dispose ( ) ; } } features . clear ( ) ; nextFeatureId = 1 ; }
public void addPoint ( MapPoint point ) { if ( map == null ) { return ; } markers . add ( createMarker ( map , point , true , CENTER ) ) ; update ( ) ; }
public void appendPoint ( MapPoint point ) { if ( map == null ) { return ; } points . add ( point ) ; symbols . add ( createSymbol ( symbolManager , point , true , CENTER ) ) ; updateLine ( ) ; }
public void addPoint ( MapPoint point ) { markers . add ( createMarker ( map , point , this , CENTER ) ) ; update ( ) ; }
private void launchImageChooser ( ) { Intent i = new Intent ( Intent . ACTION_GET_CONTENT ) ; preferencesFragment . startActivityForResult ( i , UserInterfacePreferencesFragment . IMAGE_CHOOSER ) ; }
public UserInterfacePage assertOnPage ( ) { assertText ( R . string . client ) ; return this ; }
public CountingTaskExecutorIdlingResource ( CallbackCountingTaskExecutorRule rule ) { this . rule = rule ; }
public void setOnLongClickListener ( OnLongClickListener l ) { binding . urlButton . setOnLongClickListener ( l ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; viewModel = ViewModelProviders . of ( requireActivity ( ) ) . get ( FormSaveViewModel . class ) ; }
private void updateView ( View view ) { if ( view instanceof EditText ) { ( ( EditText ) view ) . setTextSize ( QuestionFontSizeUtils . getQuestionFontSize ( ) ) ; } }
public void digitsAboveLimitOfNineShouldBeTruncatedFromRight ( ) { getWidget ( ) . answerText . setText ( "123456789123" ) ; assertEquals ( "123456789" , getWidget ( ) . getAnswerText ( ) ) ; }
public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer ( ) { IAnswerData newAnswer = getSpyWidget ( ) . getAnswer ( ) ; assertNull ( newAnswer ) ; }
public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled ( ) { when ( formEntryPrompt . isReadOnly ( ) ) . thenReturn ( true ) ; assertThat ( getSpyWidget ( ) . launchIntentButton . getVisibility ( ) , is ( View . GONE ) ) ; }
public void digitsNumberShouldNotBeLimited ( ) { getWidget ( ) . answerText . setText ( "123456789123456789123456789123456789" ) ; assertEquals ( "123456789123456789123456789123456789" , getWidget ( ) . getAnswerText ( ) ) ; }
public void callingClearAnswerShouldCallDeleteMediaAndRemoveTheExistingAnswer ( ) { super . callingClearShouldRemoveTheExistingAnswer ( ) ; W widget = getSpyWidget ( ) ; verify ( widget ) . deleteFile ( ) ; }
public void callingClearShouldRemoveTheExistingAnswer ( ) { super . callingClearShouldRemoveTheExistingAnswer ( ) ; W widget = getSpyWidget ( ) ; assertEquals ( widget . getAnswerText ( ) , "" ) ; }
public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer ( ) { super . getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer ( ) ; W widget = getSpyWidget ( ) ; IAnswerData answer = widget . getAnswer ( ) ; assertEquals ( widget . getAnswerText ( ) , answer . getDisplayText ( ) ) ; }
public void getAnswerShouldReturnNullIfPromptDoesNotHaveExistingAnswer ( ) { W widget = getSpyWidget ( ) ; assertNull ( widget . getAnswer ( ) ) ; }
public static void renameTable ( SQLiteDatabase db , String table , String newTable ) { CustomSQLiteQueryExecutor . begin ( db ) . renameTable ( table ) . to ( newTable ) . end ( ) ; }
public static void dropTable ( SQLiteDatabase db , String table ) { CustomSQLiteQueryExecutor . begin ( db ) . dropIfExists ( table ) . end ( ) ; }
public void clickImage ( String context ) { if ( MultiClickGuard . allowClick ( getClass ( ) . getName ( ) ) ) { launchDrawActivity ( ) ; } }
public void saveForm_returnsSaveResult_inSavingState ( ) { viewModel . saveForm ( Uri . parse ( "file : FormSaveViewModel . SaveResult saveResult1 = viewModel . getSaveResult ( ) . getValue ( ) ; assertThat ( saveResult1 . getState ( ) , equalTo ( SAVING ) ) ; }
public void whenAuditConfigIsNull_doesntWriteEvents ( ) { AuditEventLogger auditEventLogger = new AuditEventLogger ( null , testWriter , formController ) ; auditEventLogger . logEvent ( END_OF_FORM , false , 0 ) ; auditEventLogger . flush ( ) ; assertEquals ( 0 , testWriter . auditEvents . size ( ) ) ; }
public void setup ( ) throws Exception { overrideDependencyModule ( ) ; when ( audioHelper . setAudio ( any ( AudioButton . class ) , any ( ) ) ) . thenReturn ( new MutableLiveData <> ( ) ) ; }
public void onItemMove ( int fromPosition , int toPosition ) { Collections . swap ( items , fromPosition , toPosition ) ; notifyItemMoved ( fromPosition , toPosition ) ; }
public int getItemCount ( ) { return items . size ( ) ; }
public ExitFormDialog assertOnPage ( ) { String title = getTranslatedString ( R . string . exit ) + " " + formName ; assertText ( title ) ; return this ; }
public SaveOrIgnoreDialog assertOnPage ( ) { String title = getTranslatedString ( R . string . exit ) + " " + formName ; assertText ( title ) ; return this ; }
public static int getStandardMargin ( Context context ) { Resources resources = context . getResources ( ) ; int marginStandard = dpFromPx ( context , resources . getDimensionPixelSize ( R . dimen . margin_standard ) ) ; return marginStandard - WIDGET_ANSWER_STANDARD_MARGIN_MODIFIER ; }
public void onResume ( ) { super . onResume ( ) ; showEvents ( selectedDay ) ; }
public int getTheme ( ) { return R . style . BottomSheetDialogLikes ; }
public String getCategory ( ) { return category ; }
public void setCategory ( String category ) { this . category = category ; }
public DataPoster getComplaintPoster ( ) { return complaintPoster ; }
public void setComplaintPoster ( DataPoster complaintPoster ) { this . complaintPoster = complaintPoster ; }
public DataPoster getLostnfoundPoster ( ) { return lostnfoundPoster ; }
public void setLostnfoundPoster ( DataPoster lostnfoundPoster ) { this . lostnfoundPoster = lostnfoundPoster ; }
public ClubPorItem ( ) { }
public ClubPorItem ( String name , String image , String position ) { this . image = image ; this . name = name ; this . position = position ; }
public void onClick ( View v ) { getImportPermissions ( MainActivity . MANAGER_PERMISSIONS_REQUEST_ACCESS_IMPORT_EXTERNAL ) ; alertDialog . dismiss ( ) ; }
public void onClick ( DialogInterface dialog , int which ) { ActivityCompat . requestPermissions ( getActivity ( ) , new String [ ] { Manifest . permission . WRITE_EXTERNAL_STORAGE } , returnCode ) ; }
public void onPlaybackStateChanged ( @ NonNull PlaybackState state ) { scrobbleRepository . setStatus ( state ) ; }
public void onMetadataChanged ( @ Nullable MediaMetadata metadata ) { scrobbleRepository . updateTrackInfo ( metadata ) ; }
public static int determineArtistLimit ( Activity mainActivity ) { if ( HelperMethods . isTablet ( mainActivity ) || HelperMethods . getOrientation ( mainActivity ) == Configuration . ORIENTATION_LANDSCAPE ) { return 10 ; } return 4 ; }
public void onNotificationRemoved ( StatusBarNotification sbn ) { if ( currentPlayingControllerPackageName == null ) { return ; } if ( sbn . getPackageName ( ) . equals ( currentPlayingControllerPackageName ) ) { notificator . cancelNotification ( this ) ; } }
private void initViewPager ( ) { ProfileViewPagerAdapter viewPagerAdapter = new ProfileViewPagerAdapter ( getSupportFragmentManager ( ) ) ; viewPager . setAdapter ( viewPagerAdapter ) ; tabLayout . setupWithViewPager ( viewPager ) ; HelperMethods . changeTabsFont ( this , tabLayout ) ; }
public void cancelNotification ( Context context ) { NotificationManager nm = ( NotificationManager ) context . getSystemService ( NOTIFICATION_SERVICE ) ; nm . cancel ( NOTIFICATION_ID ) ; }
public void setArtistAlbumsList ( List < Album > artistAlbumsList ) { this . artistAlbumsList = artistAlbumsList ; notifyDataSetChanged ( ) ; }
public void setArtistList ( List < Artist > artistList ) { this . artistList = artistList ; notifyDataSetChanged ( ) ; }
public void onCreateOptionsMenu ( Menu menu , MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; addOnSearchBarTextChangedListener ( ) ; mainActivity . getSearchBar ( ) . setIconified ( false ) ; }
public void onValueSelected ( Entry e , Highlight h ) { Toast . makeText ( activity , ( int ) e . getY ( ) + " listens" , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { DebugHelper . sendMailDev ( mParent , "REPORT - Shaarlier" , DebugHelper . generateReport ( error , mParent , finalExtra ) ) ; }
private String extractTitle ( String subject ) { if ( subject != null && ! NetworkUtils . isUrl ( subject ) ) { return subject ; } return "" ; }
private String [ ] getPageTitleAndDescription ( String url ) { return NetworkUtils . loadTitleAndDescription ( url ) ; }
public boolean seemsNotNew ( ) { return ( ( description != null && ! description . trim ( ) . equals ( "" ) ) || ( tags != null && ! tags . trim ( ) . equals ( "" ) ) || id != null ) ; }
public AttendanceAdapter ( Context context , List < Attendance > dataList , int pref_minimum_attendance ) { this . ctx = context ; this . dataList = dataList ; this . pre_minimum_attendance = pref_minimum_attendance ; }
public DetailedResultAdapter ( Context ctx , List < DetailResult > detailResultData ) { this . ctx = ctx ; this . detailResultData = detailResultData ; }
public ResultAdapter ( Context ctx , List < Result > resultData , OnItemClickListener listener ) { this . ctx = ctx ; this . resultData = resultData ; this . listener = listener ; }
public int getItemCount ( ) { return dataList . size ( ) ; }
public void onClick ( View v ) { bottomSheet . setVisibility ( View . GONE ) ; shareOnWhatsapp ( ) ; }
public boolean onDown ( MotionEvent e ) { onTouchDown ( ) ; return true ; }
public void play ( ) { player . play ( ) ; }
public void pause ( ) { player . pause ( ) ; }
private void parseLinks ( String s ) { setText ( s ) ; int mask = Linkify . WEB_URLS ; LinkifyCompat . addLinks ( this , mask ) ; }
public void onClick ( View v2 ) { ( ( RedditGalleryPager ) getActivity ( ) ) . doImageSave ( false , url , i ) ; }
public String toString ( ) { return "IabResult : " + mMessage ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new ListViewRemoteViewsFactory ( this . getApplicationContext ( ) , intent , "android" , intent . getIntExtra ( AppWidgetManager . EXTRA_APPWIDGET_ID , 0 ) ) ; }
public void onLoadingStarted ( String imageUri , View view ) { size . setVisibility ( View . VISIBLE ) ; }
public void onLoadingStarted ( String imageUri , View view ) { imageShown = true ; size . setVisibility ( View . VISIBLE ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Bundle bundle = this . getArguments ( ) ; s = ShadowboxComments . comments . get ( bundle . getInt ( "page" , 0 ) ) ; }
public void onLoadingStarted ( String imageUri , View view ) { imageShown = true ; }
public CanvasView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . setup ( ) ; }
public CanvasView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . setup ( ) ; }
public CanvasView ( Context context ) { super ( context ) ; this . setup ( ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; text = itemView . findViewById ( R . id . name ) ; }
public void onSingleClick ( View v ) { dataSet . loadMore ( v . getContext ( ) , displayer , false , dataSet . subreddit ) ; }
private void doLoadReddit ( String url ) { RedditItemView v = findViewById ( R . id . reddit_item ) ; v . loadUrl ( this , url , progress ) ; }
public static boolean displayImage ( Type t ) { switch ( t ) { case ALBUM : case REDDIT_GALLERY : case DEVIANTART : case IMAGE : case XKCD : case TUMBLR : case IMGUR : case SELF : return true ; default : return false ; } }
public void onClick ( View v ) { dataSet . posts . add ( pos , old ) ; notifyItemInserted ( pos + 1 ) ; Hidden . undoHidden ( old ) ; }
private void notifyState ( NetworkStateReceiverListener listener ) { if ( connected == null || listener == null ) return ; if ( connected ) listener . networkAvailable ( ) ; else listener . networkUnavailable ( ) ; }
public boolean onStartNestedScroll ( CoordinatorLayout coordinatorLayout , FloatingActionButton child , View directTargetChild , View target , int nestedScrollAxes , int type ) { return nestedScrollAxes == ViewCompat . SCROLL_AXIS_VERTICAL ; }
public final void setImage ( @ NonNull ImageSource imageSource ) { setImage ( imageSource , null , null ) ; }
public final void setImage ( @ NonNull ImageSource imageSource , ImageViewState state ) { setImage ( imageSource , null , state ) ; }
public final void setImage ( @ NonNull ImageSource imageSource , ImageSource previewSource ) { setImage ( imageSource , previewSource , null ) ; }
public final void setRegionDecoderClass ( @ NonNull Class < ? extends ImageRegionDecoder > regionDecoderClass ) { if ( regionDecoderClass == null ) { throw new IllegalArgumentException ( "Decoder class cannot be set to null" ) ; } this . regionDecoderFactory = new CompatDecoderFactory <> ( regionDecoderClass ) ; }
public final void setRegionDecoderFactory ( @ NonNull DecoderFactory < ? extends ImageRegionDecoder > regionDecoderFactory ) { if ( regionDecoderFactory == null ) { throw new IllegalArgumentException ( "Decoder factory cannot be set to null" ) ; } this . regionDecoderFactory = regionDecoderFactory ; }
public final void setBitmapDecoderClass ( @ NonNull Class < ? extends ImageDecoder > bitmapDecoderClass ) { if ( bitmapDecoderClass == null ) { throw new IllegalArgumentException ( "Decoder class cannot be set to null" ) ; } this . bitmapDecoderFactory = new CompatDecoderFactory <> ( bitmapDecoderClass ) ; }
public final void setBitmapDecoderFactory ( @ NonNull DecoderFactory < ? extends ImageDecoder > bitmapDecoderFactory ) { if ( bitmapDecoderFactory == null ) { throw new IllegalArgumentException ( "Decoder factory cannot be set to null" ) ; } this . bitmapDecoderFactory = bitmapDecoderFactory ; }
public final void setScaleAndCenter ( float scale , @ Nullable PointF sCenter ) { this . anim = null ; this . pendingScale = scale ; this . sPendingCenter = sCenter ; this . sRequestedCenter = sCenter ; invalidate ( ) ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser && videoView != null ) { videoView . seekTo ( 0 ) ; videoView . play ( ) ; } }
public void doClose ( ) { website . setVisibility ( View . GONE ) ; website . loadUrl ( "about : blank" ) ; videoView . stop ( ) ; if ( gif != null ) gif . cancel ( true ) ; }
public void cancel ( ) { LogUtil . v ( "cancelling" ) ; video . stop ( ) ; }
public void onDelete ( ) { Dialogs . delete ( context ( ) , adapter , this : : deleteSelected ) ; }
public void onCreate ( ) { Dialogs . create ( context ( ) , this : : createFolder ) ; }
private void showMessage ( @ StringRes int text ) { Toast . makeText ( context ( ) , text , Toast . LENGTH_SHORT ) . show ( ) ; }
public static int currentTheme ( SharedPreferences sharedPreferences ) { final boolean isDark = sharedPreferences . getBoolean ( "night_mode" , false ) ; if ( ! isDark ) { return R . style . AppTheme ; } else return R . style . AppThemeDark ; }
public void onCreateOptionsMenu ( @ NonNull Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . diagnostic , menu ) ; }
private int getSeekCn ( ) { return Integer . parseInt ( getStringPreferences ( getApplicationContext ( ) , PREF_KCA_SEEK_CN ) ) ; }
public static boolean isShipCVE ( int id ) { int [ ] ship_cve = { 380 , 381 , 396 , 526 , 529 , 534 , 536 , 544 , 560 } ; return Arrays . binarySearch ( ship_cve , id ) >= 0 ; }
public void onScrollStateChanged ( AbsListView view , int scrollState ) { TextView page_title = questView . findViewById ( R . id . quest_page ) ; page_title . setText ( getStringWithLocale ( R . string . questview_page ) . replace ( "%d/%d" , "???" ) ) ; }
public static boolean isList ( int idx ) { int [ ] list = { 2 , 5 , 7 , 21 , 23 } ; return ( Arrays . binarySearch ( list , idx ) >= 0 ) ; }
public void onLoadFinished ( @ NonNull Loader < Album > loader , Album data ) { setAlbum ( data ) ; }
public void onLoaderReset ( @ NonNull Loader < Album > loader ) { this . album = new Album ( ) ; adapter . swapDataSet ( album . songs ) ; }
private void setUpMiniPlayer ( ) { setUpPlayPauseButton ( ) ; setUpSkipButton ( ) ; progressBar . setSupportProgressTintList ( ColorStateList . valueOf ( ThemeStore . accentColor ( getActivity ( ) ) ) ) ; }
public void onServiceConnected ( ) { updateQueue ( ) ; updateCurrentSong ( ) ; updateIsFavorite ( toolbar ) ; updateLyrics ( ) ; }
public void onPlayingMetaChanged ( ) { updateCurrentSong ( ) ; updateIsFavorite ( toolbar ) ; updateQueuePosition ( ) ; updateLyrics ( ) ; }
public void onMediaStoreChanged ( ) { updateQueue ( ) ; updateIsFavorite ( toolbar ) ; }
public int getGeneralTheme ( ) { return getThemeResFromPrefValue ( mPreferences . getString ( GENERAL_THEME , "dark" ) ) ; }
public static int getThemeResFromPrefValue ( String themePrefValue ) { switch ( themePrefValue ) { case "light" : return R . style . Theme_Phonograph_Light ; case "black" : return R . style . Theme_Phonograph_Black ; case "dark" : default : return R . style . Theme_Phonograph ; } }
public final boolean ignoreMediaStoreArtwork ( ) { return mPreferences . getBoolean ( IGNORE_MEDIA_STORE_ARTWORK , true ) ; }
public final int getArtistGridSize ( Context context ) { return mPreferences . getInt ( ARTIST_GRID_SIZE , context . getResources ( ) . getInteger ( R . integer . default_grid_columns ) ) ; }
public final String autoDownloadImagesPolicy ( ) { return mPreferences . getString ( AUTO_DOWNLOAD_IMAGES_POLICY , "always" ) ; }
public static boolean isFavorite ( @ NonNull final Context context , @ NonNull final Song song ) { return PlaylistsUtil . doesPlaylistContain ( context , getFavoritesPlaylist ( context ) . id , song . id ) ; }
private static Playlist getPlaylistFromCursorImpl ( @ NonNull final Cursor cursor ) { final long id = cursor . getLong ( 0 ) ; final String name = cursor . getString ( 1 ) ; return new Playlist ( id , name ) ; }
private void getIntentExtras ( ) { Bundle intentExtras = getIntent ( ) . getExtras ( ) ; if ( intentExtras != null ) { id = intentExtras . getLong ( EXTRA_ID ) ; } }
public ArtworkInfo ( long albumId , Bitmap artwork ) { this . albumId = albumId ; this . artwork = artwork ; }
public AbsCustomPlaylist ( long id , String name ) { super ( id , name ) ; }
public Playlist ( final long id , final String name ) { this . id = id ; this . name = name ; }
public int hashCode ( ) { int result = ( int ) id ; result = 31 * result + ( name != null ? name . hashCode ( ) : 0 ) ; return result ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeLong ( this . id ) ; dest . writeString ( this . name ) ; }
public static Playlist getPlaylist ( @ NonNull final Context context , final long playlistId ) { return getPlaylist ( makePlaylistCursor ( context , BaseColumns . _ID + " = ?" , new String [ ] { String . valueOf ( playlistId ) } ) ) ; }
public void writeToParcel ( Parcel dest , int flags ) { super . writeToParcel ( dest , flags ) ; dest . writeLong ( this . playlistId ) ; dest . writeLong ( this . idInPlayList ) ; }
public static List < Song > getSongs ( @ NonNull final Context context , final long genreId ) { return SongLoader . getSongs ( makeGenreSongCursor ( context , genreId ) ) ; }
public long getId ( ) { return safeGetFirstSong ( ) . albumId ; }
public long getArtistId ( ) { return safeGetFirstSong ( ) . artistId ; }
public long getId ( ) { return safeGetFirstAlbum ( ) . getArtistId ( ) ; }
public Genre ( final long id , final String name , final int songCount ) { this . id = id ; this . name = name ; this . songCount = songCount ; }
public int hashCode ( ) { long result = id ; result = 31 * result + name . hashCode ( ) ; result = 31 * result + songCount ; return ( int ) result ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeLong ( this . id ) ; dest . writeString ( this . name ) ; dest . writeInt ( this . songCount ) ; }
public Loader < Album > onCreateLoader ( int id , Bundle args ) { return new AsyncAlbumLoader ( this , args . getLong ( EXTRA_ALBUM_ID ) ) ; }
public AsyncAlbumLoader ( Context context , long albumId ) { super ( context ) ; this . albumId = albumId ; }
public Loader < Artist > onCreateLoader ( int id , Bundle args ) { return new AsyncArtistDataLoader ( this , args . getLong ( EXTRA_ARTIST_ID ) ) ; }
public AsyncArtistDataLoader ( Context context , long artistId ) { super ( context ) ; this . artistId = artistId ; }
public static Uri getMediaStoreAlbumCoverUri ( long albumId ) { final Uri sArtworkUri = Uri . parse ( "content : return ContentUris . withAppendedId ( sArtworkUri , albumId ) ; }
public static Uri getSongFileUri ( long songId ) { return ContentUris . withAppendedId ( MediaStore . Audio . Media . EXTERNAL_CONTENT_URI , songId ) ; }
private static float [ ] ColorToHSV ( int originalColor ) { float hsv [ ] = new float [ 3 ] ; RGBToHSV ( red ( originalColor ) , green ( originalColor ) , blue ( originalColor ) , hsv ) ; return hsv ; }
public static int colorByChangingHue ( int originalColor , float newHue ) { float hsv [ ] = ColorToHSV ( originalColor ) ; hsv [ 0 ] = newHue ; return HSVToColor ( alpha ( originalColor ) , hsv ) ; }
public static int colorByChangingSaturation ( int originalColor , float newSaturation ) { float hsv [ ] = ColorToHSV ( originalColor ) ; hsv [ 1 ] = newSaturation ; return HSVToColor ( alpha ( originalColor ) , hsv ) ; }
public static int colorByChangingValue ( int originalColor , float newValue ) { float hsv [ ] = ColorToHSV ( originalColor ) ; hsv [ 2 ] = newValue ; return HSVToColor ( alpha ( originalColor ) , hsv ) ; }
public static void drawAddRemovePin ( Canvas canvas , boolean addPin ) { HabiticaIcons . drawAddRemovePin ( canvas , new RectF ( 0f , 0f , 24f , 24f ) , ResizingBehavior . AspectFit , addPin ) ; }
private static void drawPinItem ( Canvas canvas ) { HabiticaIcons . drawPinItem ( canvas , new RectF ( 0f , 0f , 24f , 24f ) , ResizingBehavior . AspectFit ) ; }
private static void drawUnpinItem ( Canvas canvas ) { HabiticaIcons . drawUnpinItem ( canvas , new RectF ( 0f , 0f , 24f , 24f ) , ResizingBehavior . AspectFit ) ; }
public static void drawContributorBadge ( Canvas canvas , float _1 , boolean isNPC ) { HabiticaIcons . drawContributorBadge ( canvas , new RectF ( 0f , 0f , 16f , 16f ) , ResizingBehavior . AspectFit , _1 , isNPC ) ; }
private void onPreferenceScreenChangedPriv ( PreferenceFragmentCompat preferenceFragmentCompat , PreferenceScreen preferenceScreen ) { setDividerVisibility ( isDividerVisible ( ) ) ; onPreferenceScreenChanged ( preferenceFragmentCompat , preferenceScreen ) ; updatePreferenceChangedListeners ( true ) ; doUpdatePreferences ( ) ; }
public void onBindViewHolder ( PreferenceViewHolder holder ) { super . onBindViewHolder ( holder ) ; TextView titleView = ( TextView ) holder . findViewById ( android . R . id . title ) ; titleView . setTextColor ( AppSettings . get ( ) . getPrimaryColor ( ) ) ; }
public static Uri getUri ( Context context , File file ) { if ( file != null ) { return GenericFileProvider . getUriForFile ( context , SiliCompressor . getAuthorities ( context ) , file ) ; } return null ; }
public void onMute ( boolean mute , String id , int position , boolean notifications ) { }
public void setChecked ( boolean checked ) { this . markBgPaint . setColor ( ContextCompat . getColor ( getContext ( ) , checked ? R . color . tusky_blue : R . color . tusky_grey_10 ) ) ; invalidate ( ) ; }
public void toggleContentWarning ( ) { contentWarningButton . performClick ( ) ; }
public static Bitmap getBitmapAsset ( String relativePathPrefix , String src , int width , int height , int percent , int color ) throws IOException { return g . loadBitmapAssetImpl ( relativePathPrefix , src , width , height , percent , color , false ) ; }
public static void initialize ( SharedPreferences sharedPreferences ) { mAdviceMask = 0L ; mSharedPreferences = sharedPreferences ; }
public static void setAdviceState ( long advice ) { long state = loadLong ( PREF_ADVICE_STATES , 0L ) ; saveLong ( PREF_ADVICE_STATES , state | advice ) ; mAdviceMask = ADVICE_IMPORTANCE_MASK ; }
public static void resetAdviceState ( ) { saveLong ( PREF_ADVICE_STATES , 0L ) ; mAdviceMask = 0L ; }
public MapTrekTileSource ( SQLiteDatabase nativeMapDatabase ) { super ( 2 , 19 ) ; mNativeMapDatabase = nativeMapDatabase ; mMapTrekDataSources = new HashSet <> ( ) ; }
public MapElement clear ( ) { super . clear ( ) ; return this ; }
public void onHighlightedTypeClicked ( View view ) { Tags . resetHighlightedType ( ) ; Configuration . setHighlightedType ( - 1 ) ; mMap . clearMap ( ) ; mViews . highlightedType . setVisibility ( View . GONE ) ; }
private void showNavigationMenu ( ) { PopupMenu popup = new PopupMenu ( this , mViews . mapButtonHolder ) ; popup . inflate ( R . menu . context_menu_navigation ) ; popup . setOnMenuItemClickListener ( this ) ; popup . show ( ) ; }
public void onAnimationEnd ( Animator animation ) { mViews . navigationArrow . setVisibility ( View . GONE ) ; }
public void onError ( FileDataSource source , Exception e ) { HelperUtils . showSaveError ( MainActivity . this , mViews . coordinatorLayout , e ) ; }
public void onAnimationEnd ( Animator animation ) { mViews . moreButton . setRotation ( 0f ) ; }
public void onAnimationEnd ( Animator animation ) { mViews . extendPanel . requestLayout ( ) ; }
public void onAnimationEnd ( Animator animation ) { mViews . mapsButton . setVisibility ( View . INVISIBLE ) ; mAPB . setVisibility ( View . INVISIBLE ) ; }
public void disableListActionButton ( ) { mViews . listActionButton . setVisibility ( View . GONE ) ; }
public CoordinatorLayout getCoordinatorLayout ( ) { return mViews . coordinatorLayout ; }
public void onDismissed ( Snackbar transientBottomBar , int event ) { if ( event != DISMISS_EVENT_ACTION ) HelperUtils . showTargetedAdvice ( MainActivity . this , Configuration . ADVICE_RECORDED_TRACKS , R . string . advice_recorded_tracks , mViews . recordButton , false ) ; }
public void onDetach ( ) { super . onDetach ( ) ; mFragmentHolder = null ; mFeatureActionListener = null ; mLocationListener = null ; mMapHolder = null ; }
private void showOpenFileSelector ( ) { Intent intent = new Intent ( Intent . ACTION_OPEN_DOCUMENT ) ; intent . addCategory ( Intent . CATEGORY_OPENABLE ) ; intent . setType ( "application/json" ) ; startActivityForResult ( intent , OPEN_FILE_RESULT_CODE ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == R . id . action_refresh ) { mWebView . reload ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void run ( ) { mWebView . reload ( ) ; }
public AfterTextChangedWatcher ( Consumer < Editable > afterTextChanged ) { this . afterTextChanged = afterTextChanged ; }
public void onResume ( ) { super . onResume ( ) ; if ( myPreferences . getDisplayFAB ( ) ) { fab . show ( ) ; } else { fab . hide ( ) ; } }
public void onReceive ( Context context , Intent intent ) { AlarmCreator . createFromScratch ( context , preferences ) ; WidgetAlarmReceiver . createNextAlarm ( context ) ; WidgetService . notifyDataChanged ( context ) ; }
private MyPreferences ( Context context , String filepath ) { this . context = context ; this . preferences = context . getSharedPreferences ( filepath , Context . MODE_PRIVATE ) ; }
public SQLiteDatabase getDatabase ( ) { return MainActivity . this . database ; }
public boolean onIsMultiPane ( ) { return isXLargeTablet ( SettingsActivity . this ) && ! isSimplePreferences ( SettingsActivity . this ) ; }
public void onBuildHeaders ( List < Header > target ) { if ( ! isSimplePreferences ( SettingsActivity . this ) ) { loadHeadersFromResource ( R . xml . pref_headers , target ) ; } }
private void autonomousShared ( ) { robot . getMovement ( ) . openSwivel ( true ) ; sleep ( 1000 ) ; robot . getMovement ( ) . openGrabber ( true ) ; }
public SmartMotor getMotor ( String id ) { return motors . get ( id ) ; }
public SmartServo getServo ( String id ) { return servos . get ( id ) ; }
private double offset ( ) { return robot . getSensor ( ) . getGyro ( Naming . GYRO_0_NAME ) . getAngularOrientation ( AxesReference . INTRINSIC , AxesOrder . ZYX , AngleUnit . DEGREES ) . firstAngle ; }
public void roundEnds ( ) { global_Round . setRoundEnd ( ) ; }
public void setGameSettings ( PlanesRoundInterface planeRound , boolean isTablet ) { m_PlaneRound = planeRound ; m_Tablet = isTablet ; }
public boolean playerGuess_IsPlayerWinner ( ) { return global_Player_Guess_Reaction . m_isPlayerWinner ; }
public boolean playerGuess_ComputerMoveGenerated ( ) { return global_Player_Guess_Reaction . m_ComputerMoveGenerated ; }
public Coordinate2D mapIndexToQPoint ( int idx ) { int temp = idx / 4 ; int row = temp % m_row ; int col = temp / m_row ; return new Coordinate2D ( row , col ) ; }
public void initGrid ( ) { resetGrid ( ) ; initGridByAutomaticGeneration ( ) ; computePlanePointsList ( ) ; }
public boolean rotatePlane ( int idx ) { if ( idx < 0 || idx >= m_planeList . size ( ) ) return false ; Plane pl = m_planeList . get ( idx ) ; pl . rotate ( ) ; computePlanePointsList ( ) ; return true ; }
public void removePlane ( final Plane pl ) { m_planeList . remove ( pl ) ; }
public int generateAnnotation ( int planeNo , boolean isHead ) { int annotation = 1 ; int bitsShifted = 2 * planeNo ; if ( isHead ) bitsShifted ++ ; annotation = annotation << bitsShifted ; return annotation ; }
public void setGameControls ( GameControlsAdapter gameControls ) { m_GameControls = gameControls ; }
public void setGameControls ( GameControlsAdapter controls ) { if ( m_Tablet ) { m_PlayerBoard . setGameControls ( controls ) ; m_ComputerBoard . setGameControls ( controls ) ; } else { m_GameBoard . setGameControls ( controls ) ; } m_GameControls = controls ; }
public void setGameBoards ( GameBoardsAdapter gameBoards ) { m_GameBoards = gameBoards ; }
public void onClick ( View view ) { m_GameBoards . movePlaneUp ( ) ; }
public void onClick ( View view ) { m_GameBoards . movePlaneDown ( ) ; }
public void onClick ( View view ) { m_GameBoards . movePlaneLeft ( ) ; }
public void onClick ( View view ) { m_GameBoards . movePlaneRight ( ) ; }
public void onClick ( View view ) { setGameStage ( ) ; m_PlanesLayout . setGameStage ( ) ; m_GameBoards . setGameStage ( ) ; m_PlaneRound . doneClicked ( ) ; }
public void setNewRoundStage ( ) { m_GameStage = GameStages . GameNotStarted ; invalidate ( ) ; requestLayout ( ) ; }
private void init ( ) { m_Paint = new Paint ( ) ; allocateMemory ( ) ; }
public int method ( ) { return Request . Method . POST ; }
public FollowingEntity ( int id , String display_name , String logo , String created_at , boolean notifications , long last_updated , long excludeUntil ) { super ( id , display_name , logo , created_at , notifications , last_updated ) ; this . excludeUntil = excludeUntil ; }
public static boolean checkWeakReference ( WeakReference < ? > weakReference ) { return weakReference != null && weakReference . get ( ) != null ; }
public void onBillingSetupFinished ( @ NonNull BillingResult billingResult ) { if ( billingResult . getResponseCode ( ) == BillingClient . BillingResponseCode . OK && billingClient . isReady ( ) ) { checkForActiveSubs ( ) ; checkPurchaseHistory ( BillingClient . SkuType . INAPP , false ) ; } }
public static final Migration MIGRATION_1_2 = new Migration ( 1 , 2 ) { @ Override public void migrate ( @ NonNull SupportSQLiteDatabase database ) { } } ;
public void onCompletion ( boolean hideProgressBar ) { recyclerView . post ( ( ) -> lurkAdapter . datasetChanged ( false ) ) ; }
public void onCompletion ( boolean hideProgressBar ) { super . onCompletion ( false ) ; FollowersUpdateRequestHandler . this . onCompletion ( hideProgressBar ) ; }
public void onCompletion ( boolean hideProgressBar ) { super . onCompletion ( false ) ; FollowingUpdateRequestHandler . this . onCompletion ( hideProgressBar ) ; }
public void onCompletion ( boolean hideProgressBar ) { VODUpdateRequestHandler . this . onCompletion ( hideProgressBar ) ; }
public void onCompletion ( boolean hideProgressBar ) { super . onCompletion ( false ) ; followingUpdateRequestHandler . initiate ( ) . sendRequest ( false ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { autoFollowIntervalValueText . setText ( String . valueOf ( autoFollowIntervalValue . getProgress ( ) + autofollowIntervalValueMinimum ) ) ; }
public CharSequence getPageTitle ( int position ) { return DateTime . now ( ) . plusDays ( position ) . toString ( getString ( R . string . dateFormat ) ) ; }
public void setTicketElevation ( float elevation ) { if ( ! Utils . isJellyBeanAndAbove ( ) ) { Log . w ( TAG , "Ticket elevation only works with Android Jelly Bean and above" ) ; return ; } setShadowBlurRadius ( elevation ) ; initElements ( ) ; }
public void setShadowColor ( int color ) { this . mShadowColor = color ; initElements ( ) ; }
private fun handleNow ( ) { Log . d ( TAG , "Short lived task is done . " ) }
public static @ NonNull Config getInstance ( ) { if ( sInstance == null ) { sInstance = new Config ( ) ; } return sInstance ; }
public @ NonNull Config setErrorIcon ( @ Nullable Drawable errorIcon ) { this . errorIcon = errorIcon ; return this ; }
public @ NonNull Config setSuccessIcon ( @ Nullable Drawable successIcon ) { this . successIcon = successIcon ; return this ; }
public @ NonNull Config setWarningIcon ( @ Nullable Drawable warningIcon ) { this . warningIcon = warningIcon ; return this ; }
public @ NonNull Config setDisableIcon ( boolean disableIcon ) { this . disableIcon = disableIcon ; return this ; }
public @ NonNull Config setIconSize ( int iconSize ) { this . iconSize = iconSize ; return this ; }
public @ NonNull Config setTextSize ( int textSize ) { this . textSize = textSize ; return this ; }
public @ NonNull Config setTextTypeface ( @ Nullable Typeface textTypeface ) { this . textTypeface = textTypeface ; return this ; }
public @ NonNull Config setToastBackground ( @ Nullable Drawable toastBackground ) { this . toastBackground = toastBackground ; return this ; }
public static Toast makeText ( @ NonNull Context context , @ StringRes int resId , int duration ) throws Resources . NotFoundException { return makeText ( context , context . getResources ( ) . getText ( resId ) , duration ) ; }
public @ Nullable View getView ( ) { return mToast . getView ( ) ; }
private static int output ( @ NotNull String level , String tag , String message ) { System . out . println ( String . format ( "%s : %s : %s" , level . toUpperCase ( ) , tag , message ) ) ; return 0 ; }
public static String getLogMessage ( ) { if ( ! logMessage . toString ( ) . isEmpty ( ) ) { return logMessage . toString ( ) ; } else { return PreferenceUtil . getSharedPreferenceString ( R . string . id_prev_conn_log ) ; } }
public void startStandaloneMode ( View view ) { GUIConfiguration . setAppMode ( AppMode . STANDALONE ) ; startActivity ( new Intent ( MainActivity . this , ChoosePipelineActivity . class ) ) ; }
public void startDemoMode ( View view ) { GUIConfiguration . setAppMode ( AppMode . DEMO ) ; startActivity ( new Intent ( MainActivity . this , ChoosePipelineActivity . class ) ) ; }
public void run ( ) { mActivity . initLocation ( ) ; mActivity . getApplicationInterface ( ) . getDrawPreview ( ) . updateSettings ( ) ; mActivity . updateForSettings ( true ) ; }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { if ( MyDebug . LOG ) Log . d ( TAG , "onConfigurationChanged ( ) " ) ; preview . setCameraDisplayOrientation ( ) ; super . onConfigurationChanged ( newConfig ) ; }
public void updateForSettings ( boolean update_camera ) { updateForSettings ( update_camera , null , false ) ; }
private void speechRecognizerStopped ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "speechRecognizerStopped" ) ; main_activity . getMainUI ( ) . audioControlStopped ( ) ; speechRecognizerIsStarted = false ; shown_toast = false ; }
public Uri getTreeUriSAF ( ) { String folder_name = getSaveLocationSAF ( ) ; return Uri . parse ( folder_name ) ; }
public void stoppedVideo ( VideoMethod video_method , Uri uri , String filename ) { }
public void restartedVideo ( final VideoMethod video_method , final Uri uri , final String filename ) { }
public void deleteUnusedVideo ( final VideoMethod video_method , final Uri uri , final String filename ) { }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "update settings due to resolution change" ) ; main_activity . updateForSettings ( true , "" , true ) ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "update settings due to video resolution change" ) ; main_activity . updateForSettings ( true , "" , true ) ; }
public void run ( ) { if ( MyDebug . LOG ) Log . d ( TAG , "update settings due to video capture rate change" ) ; main_activity . updateForSettings ( true , "" , true ) ; }
public void testPreConditions ( ) { assertNotNull ( mPreview ) ; }
public void testTakeVideoExposureLock ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideoExposureLock" ) ; setToDefault ( ) ; subTestTakeVideo ( true , false , false , false , null , 5000 , false , 0 ) ; }
public void testTakeVideoFocusArea ( ) throws InterruptedException { Log . d ( TAG , "testTakeVideoFocusArea" ) ; setToDefault ( ) ; subTestTakeVideo ( false , true , false , false , null , 5000 , false , 0 ) ; }
public void doneProcessAvg ( int index ) { Log . d ( TAG , "doneProcessAvg : " + index ) ; if ( index == 1 ) { assertEquals ( 0 , mActivity . getApplicationInterface ( ) . getHDRProcessor ( ) . sharp_index ) ; } }
public void onProviderDisabled ( String provider ) { if ( MyDebug . LOG ) Log . d ( TAG , "onProviderDisabled" ) ; this . location = null ; this . test_has_received_location = false ; cached_location = null ; }
public boolean getVideoStabilizationPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . VideoStabilizationPreferenceKey , false ) ; }
public boolean getForce4KPref ( ) { return cameraId == 0 && sharedPreferences . getBoolean ( PreferenceKeys . ForceVideo4KPreferenceKey , false ) && main_activity . supportsForceVideo4K ( ) ; }
public String getVideoBitratePref ( ) { return sharedPreferences . getString ( PreferenceKeys . VideoBitratePreferenceKey , "default" ) ; }
public boolean getVideoFlashPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . VideoFlashPreferenceKey , false ) ; }
public boolean getVideoLowPowerCheckPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . VideoLowPowerCheckPreferenceKey , true ) ; }
public String getPreviewRotationPref ( ) { return sharedPreferences . getString ( PreferenceKeys . RotatePreviewPreferenceKey , "0" ) ; }
public String getLockOrientationPref ( ) { if ( getPhotoMode ( ) == PhotoMode . Panorama ) return "portrait" ; return sharedPreferences . getString ( PreferenceKeys . LockOrientationPreferenceKey , "none" ) ; }
public boolean getShutterSoundPref ( ) { if ( getPhotoMode ( ) == PhotoMode . Panorama ) return false ; return sharedPreferences . getBoolean ( PreferenceKeys . ShutterSoundPreferenceKey , true ) ; }
public boolean getStartupFocusPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . StartupFocusPreferenceKey , true ) ; }
public String getRepeatPref ( ) { if ( getPhotoMode ( ) == MyApplicationInterface . PhotoMode . Panorama ) return "1" ; return sharedPreferences . getString ( PreferenceKeys . RepeatModePreferenceKey , "1" ) ; }
public boolean getRecordAudioPref ( ) { return sharedPreferences . getBoolean ( PreferenceKeys . RecordAudioPreferenceKey , true ) ; }
public String getRecordAudioChannelsPref ( ) { return sharedPreferences . getString ( PreferenceKeys . RecordAudioChannelsPreferenceKey , "audio_default" ) ; }
public String getRecordAudioSourcePref ( ) { return sharedPreferences . getString ( PreferenceKeys . RecordAudioSourcePreferenceKey , "audio_src_camcorder" ) ; }
public void touchEvent ( MotionEvent event ) { main_activity . getMainUI ( ) . closeExposureUI ( ) ; main_activity . getMainUI ( ) . closePopup ( ) ; if ( main_activity . usingKitKatImmersiveMode ( ) ) { main_activity . setImmersiveMode ( false ) ; } }
public void initVideoRecorderPostPrepare ( MediaRecorder video_recorder , boolean want_photo_video_recording ) { }
public Pair < Integer , Integer > getCameraResolutionPref ( CameraResolutionConstraints constraints ) { return null ; }
public static String getMPString ( int width , int height ) { float mp = ( width*height ) /1000000 . 0f ; return formatFloatToString ( mp ) + "MP" ; }
public CameraController . Size getCurrentPictureSize ( ) { if ( current_size_index == - 1 || photo_sizes == null ) return null ; return photo_sizes . get ( current_size_index ) ; }
public void showToast ( final String message , final int offset_y_dp , final boolean use_fake_toast ) { showToast ( null , message , offset_y_dp , use_fake_toast ) ; }
public void setEntries ( CharSequence [ ] entries ) { this . entries = entries ; }
public void setEntryValues ( CharSequence [ ] values ) { this . values = values ; }
public void setTonemapProfile ( TonemapProfile tonemap_profile , float log_profile_strength , float gamma ) { }
public void onCreateOptionsMenu ( @ NotNull Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . menu_search , menu ) ; }
public void onClick ( View view ) { BottomSheetDialog bottomSheetDialog = new BottomSheetDialog ( adapter , listStore ) ; bottomSheetDialog . show ( getActivity ( ) . getSupportFragmentManager ( ) , bottomSheetDialog . getTag ( ) ) ; }
public void run ( ) { Intent intent = new Intent ( SplashScreen . this , DashboardActivity . class ) ; startActivity ( intent ) ; finish ( ) ; }
public static Calendar calendarFromLong ( Long value ) { Calendar calendar = Calendar . getInstance ( ) ; if ( value == null ) { calendar . setTimeInMillis ( 0 ) ; } else { calendar . setTimeInMillis ( value ) ; } return calendar ; }
public static Long calendarToLong ( Calendar calendar ) { return calendar == null ? 0 : calendar . getTimeInMillis ( ) ; }
public static String dbStatusToString ( @ Nullable DBStatus status ) { return status == null ? null : status . getTitle ( ) ; }
public void setUserName ( @ NonNull String userName ) { this . userName = userName ; }
public void setAccountName ( @ NonNull String accountName ) { this . accountName = accountName ; }
public void setETag ( @ Nullable String eTag ) { this . eTag = eTag ; }
public void setModified ( @ Nullable Calendar modified ) { this . modified = modified ; }
public void setRemoteId ( @ Nullable Long remoteId ) { this . remoteId = remoteId ; }
public long getAccountId ( ) { return accountId ; }
public void setAccountId ( long accountId ) { this . accountId = accountId ; }
public void setStatus ( @ NonNull DBStatus status ) { this . status = status ; }
public void setContent ( @ NonNull String content ) { this . content = content ; }
public boolean getFavorite ( ) { return favorite ; }
public void setFavorite ( boolean favorite ) { this . favorite = favorite ; }
public int getScrollY ( ) { return scrollY ; }
public void setScrollY ( int scrollY ) { this . scrollY = scrollY ; }
public LiveData < Account > getCurrentAccount ( ) { return distinctUntilChanged ( currentAccount ) ; }
public void setExcerpt ( @ NonNull String excerpt ) { this . excerpt = excerpt ; }
public void onBindViewHolder ( @ NonNull AccountSwitcherViewHolder holder , int position ) { holder . bind ( localAccounts . get ( position ) , onAccountClick ) ; }
public void onBindViewHolder ( @ NonNull AccountChooserViewHolder holder , int position ) { holder . bind ( localAccounts . get ( position ) , targetAccountConsumer ) ; }
public static Snackbar make ( @ NonNull View view , @ StringRes int resId , @ Snackbar . Duration int duration ) { return make ( view , view . getResources ( ) . getText ( resId ) , duration ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; NotesApplication . updateLastInteraction ( ) ; }
public void startActivityForResult ( Intent intent , int requestCode , @ Nullable Bundle options ) { NotesApplication . updateLastInteraction ( ) ; super . startActivityForResult ( intent , requestCode , options ) ; }
public void startActivityForResult ( Intent intent , int requestCode ) { NotesApplication . updateLastInteraction ( ) ; super . startActivityForResult ( intent , requestCode ) ; }
public void startActivity ( Intent intent ) { NotesApplication . updateLastInteraction ( ) ; super . startActivity ( intent ) ; }
public void startActivity ( Intent intent , @ Nullable Bundle options ) { NotesApplication . updateLastInteraction ( ) ; super . startActivity ( intent , options ) ; }
public static void setLockedPreference ( boolean lockedPreference ) { Log . i ( TAG , "New locked preference : " + lockedPreference ) ; NotesApplication . lockedPreference = lockedPreference ; }
public void applyBrand ( int mainColor , int textColor ) { applyBrandToPrimaryToolbar ( binding . appBar , binding . toolbar ) ; }
public int getSwipeDirs ( @ NonNull RecyclerView recyclerView , @ NonNull RecyclerView . ViewHolder viewHolder ) { if ( gridView || viewHolder instanceof SectionViewHolder ) return 0 ; return super . getSwipeDirs ( recyclerView , viewHolder ) ; }
public static boolean isGridViewEnabled ( ) { return isGridViewEnabled ; }
public static void updateGridViewEnabled ( boolean gridView ) { isGridViewEnabled = gridView ; }
public boolean onQueryTextSubmit ( @ NonNull String query ) { currentOccurrence ++ ; jumpToOccurrence ( ) ; colorWithText ( query , currentOccurrence , mainColor , textColor ) ; return true ; }
public void onStart ( ) { this . mainColor = getResources ( ) . getColor ( R . color . defaultBrand ) ; this . textColor = Color . WHITE ; super . onStart ( ) ; }
public boolean onQueryTextChange ( @ NonNull String newText ) { queryWithHandler ( newText ) ; return true ; }
public DelayQueryRunnable ( String text ) { this . text = text ; }
public void run ( ) { if ( canceled ) { return ; } queryMatch ( text ) ; }
private static void deregister ( @ NonNull Context context ) { Log . i ( TAG , "Deregistering all workers with tag \"" + WORKER_TAG + "\"" ) ; WorkManager . getInstance ( context . getApplicationContext ( ) ) . cancelUniqueWork ( WORKER_TAG ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , Bundle savedInstanceState ) { binding = FragmentNoteEditBinding . inflate ( inflater , container , false ) ; return binding . getRoot ( ) ; }
static public ExchangeApi getExchangeApi ( ) { return new com . uplexa . upxwallet . service . exchange . coingecko . ExchangeApiImpl ( OkHttpHelper . getOkHttpClient ( ) ) ; }
public int getCount ( ) { return mPreferenceGroup . getPreferenceCount ( ) + 1 ; }
public void onComplete ( @ NonNull Task < Void > task ) { if ( task . isSuccessful ( ) ) firebaseRemoteConfig . activate ( ) ; }
public BaseListBottomSheet < T > getBottomSheet ( ) { return bottomSheet ; }
public static void main ( @ NonNull String [ ] args ) throws Exception { writeConfigFile ( "ormlite_config . txt" ) ; }
public boolean onCreateOptionsMenu ( @ NonNull Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_file_explorer , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public boolean onOptionsItemSelected ( @ NonNull MenuItem item ) { if ( item . getItemId ( ) == R . id . menu_action_close_file_manager ) { finish ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
private boolean isStorage ( @ NonNull String path ) { for ( FileItem storage : storages ) { if ( storage . getFilePath ( ) . equals ( path ) ) { return true ; } } return false ; }
public void update ( @ NonNull byte [ ] input ) { if ( ! useCRC32 ) { messageDigest . reset ( ) ; messageDigest . update ( input ) ; } else { crc32 . reset ( ) ; crc32 . update ( input ) ; } }
public void parseCRC32FromString ( ) { assertEquals ( HashType . CRC_32 , HashType . getHashTypeFromString ( "CRC - 32" ) ) ; }
public void initializeResources ( ) throws NoSuchAlgorithmException { context = InstrumentationRegistry . getContext ( ) ; HashType hashType = getHashType ( ) ; assertNotNull ( hashType ) ; jdkHashCalculator = new JdkHashCalculator ( ) ; jdkHashCalculator . setHashType ( hashType ) ; }
public void appBackClick ( ) { UIUtils . removeFragment ( getActivity ( ) . getSupportFragmentManager ( ) , this ) ; }
public void addHistoryItem ( @ NonNull HistoryItem historyItem ) { try { getDao ( HistoryItem . class ) . create ( historyItem ) ; } catch ( SQLException e ) { L . e ( e ) ; } }
public void deleteAllHistoryItems ( ) { try { getDao ( HistoryItem . class ) . deleteBuilder ( ) . delete ( ) ; } catch ( SQLException e ) { L . e ( e ) ; } }
public boolean isHistoryItemsListIsEmpty ( ) { try { return getDao ( HistoryItem . class ) . countOf ( ) > 0 ; } catch ( SQLException e ) { L . e ( e ) ; return false ; } }
public void backupCheckpoint ( ) { try { getWritableDatabase ( ) . execSQL ( "PRAGMA wal_checkpoint" ) ; } catch ( Exception e ) { L . e ( e ) ; } }
private void resetTitle ( ) { UIUtils . setActionBarTitle ( getSupportActionBar ( ) , R . string . file_manager_select_storage_title ) ; }
private void initializeHelpWithTranslationButton ( ) { findPreference ( getString ( R . string . key_help_with_translation ) ) . setOnPreferenceClickListener ( preference -> { WebUtils . openWebLink ( context , context . getString ( R . string . web_link_help_with_translation ) ) ; return false ; } ) ; }
public void stringFromLong ( ) { assertEquals ( "784dd132" , JdkHashTools . getStringFromLong ( 2018365746 ) ) ; }
public int getLayoutResId ( ) { return R . layout . fragment_hash_calculator ; }
private void requestStoragePermission ( ) { requestPermissions ( new String [ ] { Manifest . permission . WRITE_EXTERNAL_STORAGE } , FileManagerActivity . PERMISSION_STORAGE ) ; }
public void cancel ( ) { IRCCloudLog . Log ( Log . INFO , TAG , "HTTP request cancelled" ) ; isCancelled = true ; }
public ImgurUploadTask ( Uri imageUri ) { IRCCloudLog . Log ( Log . INFO , "IRCCloud" , "Uploading image to " + UPLOAD_URL ) ; mImageUri = imageUri ; mBuffer = buffer ; setActivity ( MainActivity . this ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { NetworkConnection . getInstance ( ) . set_avatar ( avatarToDelete . cid , avatarToDelete . orgId , null , null ) ; }
private ViewPositionAnimator getAnimatorNonNull ( ) { if ( getToView ( ) == null ) { throw new NullPointerException ( ) ; } return getToView ( ) . getPositionAnimator ( ) ; }
public WindowInsetsCompat onApplyWindowInsets ( View view , WindowInsetsCompat insets ) { lastInsets = insets . getSystemWindowInsets ( ) ; for ( InsetsListener listener : listeners ) { listener . applyInsets ( lastInsets ) ; } return insets . consumeStableInsets ( ) ; }
public void removeOnStateChangeListener ( @ NonNull OnStateChangeListener listener ) { stateListeners . remove ( listener ) ; }
public void get ( @ NonNull Matrix matrix ) { matrix . set ( this . matrix ) ; }
public void set ( @ NonNull Matrix matrix ) { this . matrix . set ( matrix ) ; updateFromMatrix ( true , true ) ; }
public void set ( @ NonNull State other ) { x = other . x ; y = other . y ; zoom = other . zoom ; rotation = other . rotation ; matrix . set ( other . matrix ) ; }
public void applyZoomPatch ( @ NonNull State state ) { if ( zoomPatch > 0f ) { state . set ( state . getX ( ) , state . getY ( ) , state . getZoom ( ) * zoomPatch , state . getRotation ( ) ) ; } }
public float getMinZoom ( @ NonNull State state ) { return zoomBounds . set ( state ) . getMinZoom ( ) ; }
public float getMaxZoom ( @ NonNull State state ) { return zoomBounds . set ( state ) . getMaxZoom ( ) ; }
public float getFitZoom ( @ NonNull State state ) { return zoomBounds . set ( state ) . getFitZoom ( ) ; }
public void getMovementArea ( @ NonNull State state , @ NonNull RectF out ) { movBounds . set ( state ) . getExternalBounds ( out ) ; }
public ExitController ( @ NonNull View view , @ NonNull GestureController gestureController ) { controller = gestureController ; animatorView = view instanceof AnimatorView ? ( ( AnimatorView ) view ) : null ; scrollThresholdScaled = UnitsUtils . toPixels ( view . getContext ( ) , SCROLL_THRESHOLD ) ; }
public MovementBounds ( @ NonNull Settings settings ) { this . settings = settings ; }
public void getExternalBounds ( @ NonNull RectF out ) { if ( boundsRotation == 0f ) { out . set ( bounds ) ; } else { tmpMatrix . setRotate ( boundsRotation , boundsPivotX , boundsPivotY ) ; tmpMatrix . mapRect ( out , bounds ) ; } }
public void restrict ( float x , float y , @ NonNull PointF out ) { restrict ( x , y , 0f , 0f , out ) ; }
public ZoomBounds ( @ NonNull Settings settings ) { this . settings = settings ; }
public boolean isViewFromObject ( @ NonNull View view , @ NonNull Object object ) { ViewHolder holder = ( ViewHolder ) object ; return holder . itemView == view ; }
public void onChildViewDetachedFromWindow ( @ NonNull View view ) { }
public void onScrolled ( @ NonNull RecyclerView recyclerView , int dx , int dy ) { loadNextItemsIfNeeded ( recyclerView ) ; }
public void onAttachedToRecyclerView ( @ NonNull RecyclerView recyclerView ) { super . onAttachedToRecyclerView ( recyclerView ) ; recyclerView . addOnScrollListener ( scrollListener ) ; loadNextItemsIfNeeded ( recyclerView ) ; }
public void onDetachedFromRecyclerView ( @ NonNull RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; recyclerView . removeOnScrollListener ( scrollListener ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { ViewHolder holder = new ViewHolder ( parent ) ; holder . itemView . setOnClickListener ( this : : onItemClick ) ; return holder ; }
public void onViewRecycled ( @ NonNull RecyclerView . ViewHolder holder ) { super . onViewRecycled ( holder ) ; if ( holder instanceof ViewHolder ) { DemoGlideHelper . clear ( ( ( ViewHolder ) holder ) . image ) ; } }
private final CompoundButton . OnCheckedChangeListener mAlarmEnabledChangeListener = new CompoundButton . OnCheckedChangeListener ( ) { @ Override public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { mAlarm . setEnabled ( isChecked ) ; } } ;
public RecyclerAdapter ( Context context , List < String > dataSet ) { mDataSet = dataSet ; mInflater = LayoutInflater . from ( context ) ; }
public void onBindViewHolder ( @ NotNull MonthHolder holder , int position ) { final Month month = months . get ( position ) ; monthDelegate . onBindMonthHolder ( month , holder , position ) ; }
public Day ( Date date ) { this . calendar = DateUtils . INSTANCE . getCalendar ( date ) ; this . current = DateUtils . isCurrentDate ( date ) ; this . selected = false ; }
public void setTopViewMarginRight ( int topFragmentMarginRight ) { transformer . setMMarginRight ( topFragmentMarginRight ) ; }
public void setTopViewMarginBottom ( int topFragmentMarginBottom ) { transformer . setMMarginBottom ( topFragmentMarginBottom ) ; }
public void setTopViewHeight ( int topFragmentHeight ) { transformer . setMOriginalHeight ( topFragmentHeight ) ; }
private int getDragViewMarginRight ( ) { return transformer . getMMarginRight ( ) ; }
private int getDragViewMarginBottom ( ) { return transformer . getMMarginBottom ( ) ; }
public void closeToRight ( ) { if ( viewDragHelper . smoothSlideViewTo ( dragView , transformer . getMOriginalWidth ( ) , getHeight ( ) - transformer . getMinHeightPlusMargin ( ) ) ) { ViewCompat . postInvalidateOnAnimation ( this ) ; notifyCloseToRightListener ( ) ; } }
public void closeToLeft ( ) { if ( viewDragHelper . smoothSlideViewTo ( dragView , - transformer . getMOriginalWidth ( ) , getHeight ( ) - transformer . getMinHeightPlusMargin ( ) ) ) { ViewCompat . postInvalidateOnAnimation ( this ) ; notifyCloseToLeftListener ( ) ; } }
public boolean tryCaptureView ( @ NotNull View child , int pointerId ) { return child == mHeaderView ; }
public int getViewVerticalDragRange ( @ NotNull View child ) { return mDragRange ; }
public void setShadowVisible ( boolean isVisible ) { if ( isVisible ) { imageViewShadow . setBackgroundResource ( R . drawable . shadow ) ; } else { imageViewShadow . setBackgroundResource ( 0 ) ; } }
public void setMenuItems ( List < ResideMenuItem > menuItems , int direction ) { if ( direction == DIRECTION_LEFT ) { this . leftMenuItems = menuItems ; } else { this . rightMenuItems = menuItems ; } rebuildMenu ( ) ; }
public List < ResideMenuItem > getMenuItems ( int direction ) { if ( direction == DIRECTION_LEFT ) { return leftMenuItems ; } else { return rightMenuItems ; } }
private void setScaleDirectionByRawX ( float currentRawX ) { if ( currentRawX < lastRawX ) { setScaleDirection ( DIRECTION_RIGHT ) ; } else { setScaleDirection ( DIRECTION_LEFT ) ; } }
public void onAnimationCancel ( @ NotNull Animator animation ) { sweepAngle = ( int ) finalAngle ; invalidate ( ) ; progressAnimator = null ; }
public void onItemsRemoved ( @ NotNull RecyclerView recyclerView , int positionStart , int itemCount ) { super . onItemsRemoved ( recyclerView , positionStart , itemCount ) ; }
public State ( ) { mItemsFrames = new SparseArray <> ( ) ; mScrollDelta = 0 ; }
public void onScrolled ( @ NotNull RecyclerView recyclerView , int dx , int dy ) { mDx += dx ; }
public void onStart ( ) { super . onStart ( ) ; lCropImageView . setOnSetImageUriCompleteListener ( this ) ; lCropImageView . setOnCropImageCompleteListener ( this ) ; }
public void onStop ( ) { super . onStop ( ) ; lCropImageView . setOnSetImageUriCompleteListener ( null ) ; lCropImageView . setOnCropImageCompleteListener ( null ) ; }
public void onDismissClick ( View view ) { finish ( ) ; LActivityUtil . tranIn ( this ) ; }
public void onBackPressed ( ) { finish ( ) ; LActivityUtil . tranIn ( this ) ; }
public void onDoneClick ( View view ) { Intent intent = new Intent ( ) ; mAlarm . toIntent ( intent ) ; setResult ( RESULT_OK , intent ) ; finish ( ) ; LActivityUtil . tranIn ( this ) ; }
public void onCancelClick ( View view ) { setResult ( RESULT_CANCELED , null ) ; finish ( ) ; LActivityUtil . tranIn ( this ) ; }
public static long memorySize2Byte ( long memorySize , @ MemoryConstants . Companion . Unit int unit ) { if ( memorySize < 0 ) return - 1 ; return memorySize * unit ; }
public static double byte2MemorySize ( long byteNum , @ MemoryConstants . Companion . Unit int unit ) { if ( byteNum < 0 ) return - 1 ; return ( double ) byteNum / unit ; }
public static long timeSpan2Millis ( long timeSpan , @ TimeConstants . Companion . Unit int unit ) { return timeSpan * unit ; }
public static long millis2TimeSpan ( long millis , @ TimeConstants . Companion . Unit int unit ) { return millis / unit ; }
public void save ( ) { DataSource . save ( ) ; }
public void update ( Alarm alarm ) { DataSource . update ( alarm ) ; dataSetChanged ( ) ; }
public void add ( Alarm alarm ) { DataSource . add ( alarm ) ; dataSetChanged ( ) ; }
public void delete ( int index ) { cancelAlarm ( DataSource . get ( index ) ) ; DataSource . remove ( index ) ; dataSetChanged ( ) ; }
public int getCount ( ) { return DataSource . size ( ) ; }
public Alarm getItem ( int position ) { return DataSource . get ( position ) ; }
private void dataSetChanged ( ) { for ( int i = 0 ; i < DataSource . size ( ) ; i ++ ) setAlarm ( DataSource . get ( i ) ) ; notifyDataSetChanged ( ) ; }
public void showBlurView ( ) { realtimeBlurView . setVisibility ( VISIBLE ) ; }
public void hideBlurView ( ) { realtimeBlurView . setVisibility ( GONE ) ; }
private void setRadius ( float value ) { if ( mRootCardView != null ) { if ( value > 1 ) value = 1 ; else if ( value <= 0 . 1f ) value = 0 ; mRootCardView . setRadius ( mMaxRadius * value ) ; } }
public final void setData ( List < I > data ) { mData . clear ( ) ; if ( data != null ) { mData . addAll ( data ) ; } onDataSet ( ) ; notifyDataSetChanged ( ) ; }
public NavigationControllerFragment getNavigationController ( ) { return mNavigationController ; }
public static NavigationControllerFragment navigationController ( @ NonNull FragmentManager fragmentManager , @ IdRes int containerViewId ) { return new NavigationControllerFragment ( fragmentManager , containerViewId ) ; }
public void onDestroyView ( ) { if ( getActivity ( ) instanceof MusicServiceActivity ) { ( ( AppActivity ) getActivity ( ) ) . removeMusicServiceEventListener ( this ) ; } super . onDestroyView ( ) ; }
public void onPlayingMetaChanged ( ) { Log . d ( TAG , "onPlayingMetaChanged" ) ; updatePlayingSongInfo ( ) ; sendMessage ( WHAT_RECYCLER_VIEW_SMOOTH_SCROLL_TO_CURRENT_POSITION ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . screen_lyric_viewer , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . screen_tab_folder_list , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . screen_tab_artist_list , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . screen_tab_genre_list , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . screen_tab_playlist_list , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container ) { return inflater . inflate ( R . layout . screen_tab_genre_list , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container ) { return inflater . inflate ( R . layout . screen_now_playing , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container ) { return inflater . inflate ( R . layout . screen_playing_queue , container , false ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . dialog_loading , container , false ) ; }
public SongChildAdapter ( ) { super ( ) ; }
public void bind ( Object object ) { if ( mSortOrderListener != null ) { String str = getContext ( ) . getResources ( ) . getString ( SortOrderBottomSheet . mSortStringRes [ mSortOrderListener . getSavedOrder ( ) ] ) ; mSortText . setText ( str ) ; } }
public void popUpPlaylistTab ( ) { if ( mPlayingQueueLayerFragment != null ) mPlayingQueueLayerFragment . popUp ( ) ; }
public NowPlayingLayerFragment getNowPlayingController ( ) { return mNowPlayingController ; }
public int getState ( ) { if ( minHeight == mCurrentTranslate ) return MINIMIZED ; if ( getMaxPosition ( ) == mCurrentTranslate ) return MAXIMIZED ; return CAPTURED ; }
public float getPercent ( ) { return ( mCurrentTranslate - minHeight + 0f ) / ( getMaxPosition ( ) - minHeight + 0f ) ; }
public float getRuntimePercent ( ) { return ( ( getMaxPosition ( ) - parent . getTranslationY ( ) + mScaleDeltaTranslate ) - minHeight + 0f ) / ( getMaxPosition ( ) - minHeight + 0f ) ; }
public boolean isBigger1_4 ( ) { return ( mCurrentTranslate - minHeight ) * 4 > ( getMaxPosition ( ) - minHeight ) ; }
public boolean isSmaller3_4 ( ) { return ( mCurrentTranslate - minHeight ) * 4 < 3 * ( getMaxPosition ( ) - minHeight ) ; }
public boolean isSmaller_1_2 ( ) { return ( mCurrentTranslate - minHeight ) * 2 < ( getMaxPosition ( ) - minHeight ) ; }
public void animateToMin ( ) { mGestureListener . item = getMyPosition ( this ) ; animateTo ( minHeight ) ; }
public CardLayerAttribute getMyAttr ( CardLayer l ) { int pos = mCardLayers . indexOf ( l ) ; if ( pos != - 1 ) return mCardLayerAttrs . get ( pos ) ; return null ; }
public int getMyPosition ( @ NonNull CardLayer l ) { return mCardLayers . indexOf ( l ) ; }
public void run ( ) { try { Process . setThreadPriority ( mThreadPriority ) ; } catch ( Throwable ignored ) { } runnable . run ( ) ; }
public void onCreate ( @ NonNull final SQLiteDatabase db ) { db . execSQL ( "CREATE TABLE IF NOT EXISTS " + BlacklistStoreColumns . NAME + " ( " + BlacklistStoreColumns . PATH + " TEXT NOT NULL ) ; " ) ; }
public static float easeOutQuad ( float t , float b , float c , float d ) { t / = d ; return - c * t* ( t - 2 ) + b ; }
public final void setIsUsingArtistImageAsBackground ( boolean value ) { final SharedPreferences . Editor editor = mPreferences . edit ( ) ; editor . putBoolean ( USE_ARTIST_IMAGE_AS_BACKGROUND , value ) ; editor . apply ( ) ; }
public void onServiceConnected ( ) { super . onServiceConnected ( ) ; if ( mAppRootView != null ) mAppRootView . post ( ( ) -> handlePlaybackIntent ( getIntent ( ) ) ) ; }
public int getMyPosition ( CardLayerAttribute attr ) { return mCardLayerAttrs . indexOf ( attr ) ; }
public CardLayerAttribute ( ) { mScaleXY = 1 ; mScaleDeltaTranslate = 0 ; upInterpolator = downInterpolator = 4 ; upDuration = 400 ; downDuration = 500 ; initDuration = 1000 ; }
public CardLayerAttribute setCurrentTranslate ( float current ) { mCurrentTranslate = current ; if ( mCurrentTranslate > getMaxPosition ( ) ) mCurrentTranslate = getMaxPosition ( ) ; return this ; }
public CardLayerAttribute setScaleDeltaTranslate ( float scaleDeltaTranslate ) { mScaleDeltaTranslate = scaleDeltaTranslate ; return this ; }
public CardLayerAttribute setTag ( String tag ) { Tag = tag ; return this ; }
public CardLayerAttribute setUpInterpolator ( int upInterpolator ) { this . upInterpolator = upInterpolator ; return this ; }
public CardLayerAttribute setDownInterpolator ( int downInterpolator ) { this . downInterpolator = downInterpolator ; return this ; }
public CardLayerAttribute setUpDuration ( int upDuration ) { this . upDuration = upDuration ; return this ; }
public CardLayerAttribute setDownDuration ( int downDuration ) { this . downDuration = downDuration ; return this ; }
public CardLayerAttribute setInitDuration ( int initDuration ) { this . initDuration = initDuration ; return this ; }
public CardLayerAttribute setMaxPosition ( boolean m ) { mM = m ; return this ; }
public void onServiceConnected ( ComponentName name , IBinder service ) { MusicServiceActivity . this . onServiceConnected ( ) ; }
public void onServiceDisconnected ( ComponentName name ) { MusicServiceActivity . this . onServiceDisconnected ( ) ; }
public MusicStateReceiver ( final MusicServiceActivity activity ) { reference = new WeakReference <> ( activity ) ; }
public void onDestroyView ( ) { if ( getActivity ( ) instanceof MusicServiceActivity ) ( ( MusicServiceActivity ) getActivity ( ) ) . removeMusicServiceEventListener ( this ) ; super . onDestroyView ( ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; Activity activity = getActivity ( ) ; if ( activity instanceof MusicServiceActivity ) ( ( MusicServiceActivity ) activity ) . addMusicServiceEventListener ( this ) ; }
public void onDestroyView ( ) { Activity activity = getActivity ( ) ; if ( activity instanceof MusicServiceActivity ) ( ( MusicServiceActivity ) activity ) . removeMusicServiceEventListener ( this ) ; super . onDestroyView ( ) ; }
public void onDestroyView ( ) { if ( getActivity ( ) instanceof AppActivity ) ( ( AppActivity ) getActivity ( ) ) . removeMusicServiceEventListener ( this ) ; mSet = false ; mAdapter . destroy ( ) ; super . onDestroyView ( ) ; }
public void setCubeVertical ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotationX ( - 90 * fraction ) ; setPivotY ( 0 ) ; setPivotX ( getWidth ( ) / 2f ) ; }
public void setCubeBack ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotationY ( 90 * fraction ) ; setPivotY ( getHeight ( ) / 2f ) ; setPivotX ( getWidth ( ) ) ; }
public void setCubeVerticalBack ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotationX ( - 90 * fraction ) ; setPivotX ( getWidth ( ) / 2f ) ; setPivotY ( getHeight ( ) ) ; }
public void setGlideBack ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotationY ( 90 * fraction ) ; setPivotX ( 0 ) ; setPivotY ( getHeight ( ) / 2f ) ; }
public void setRotateDown ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotation ( 20 * fraction ) ; setPivotY ( getHeight ( ) ) ; setPivotX ( getWidth ( ) / 2f ) ; }
public void setRotateUp ( float fraction ) { float translationX = getWidth ( ) * fraction ; setTranslationX ( translationX ) ; setRotation ( - 20 * fraction ) ; setPivotY ( 0 ) ; setPivotX ( getWidth ( ) / 2f ) ; }
public void setRotateLeft ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotation ( 20 * fraction ) ; setPivotX ( 0 ) ; setPivotY ( getHeight ( ) / 2f ) ; }
public void setRotateRight ( float fraction ) { float translationY = getHeight ( ) * fraction ; setTranslationY ( translationY ) ; setRotation ( - 20 * fraction ) ; setPivotX ( getWidth ( ) ) ; setPivotY ( getHeight ( ) / 2f ) ; }
public void setTableHorizontalPivotZero ( float fraction ) { setRotationY ( 90 * fraction ) ; setPivotX ( 0 ) ; setPivotY ( getHeight ( ) / 2f ) ; }
public void setTableHorizontalPivotWidth ( float fraction ) { setRotationY ( - 90 * fraction ) ; setPivotX ( getWidth ( ) ) ; setPivotY ( getHeight ( ) / 2f ) ; }
public void setTableVerticalPivotZero ( float fraction ) { setRotationX ( - 90 * fraction ) ; setPivotX ( getWidth ( ) / 2f ) ; setPivotY ( 0 ) ; }
public void setTableVerticalPivotHeight ( float fraction ) { setRotationX ( 90 * fraction ) ; setPivotX ( getWidth ( ) / 2f ) ; setPivotY ( getHeight ( ) ) ; }
public void setZoomSlideHorizontal ( float fraction ) { setTranslationX ( getWidth ( ) * fraction ) ; setPivotX ( getWidth ( ) / 2f ) ; setPivotY ( getHeight ( ) / 2f ) ; }
public void setZoomSlideVertical ( float fraction ) { setTranslationY ( getHeight ( ) * fraction ) ; setPivotX ( getWidth ( ) / 2f ) ; setPivotY ( getHeight ( ) / 2f ) ; }
public NavigationFragment getTopFragment ( ) { if ( fragmentStack . size ( ) != 0 ) return fragmentStack . lastElement ( ) ; return null ; }
public void pushFragment ( NavigationFragment fragment ) { PresentStyle oldPresetStyle = presentStyle ; setDuration ( 300 ) ; setInterpolator ( new AccelerateDecelerateInterpolator ( ) ) ; setPresentStyle ( PresentStyle . SLIDE_LEFT ) ; presentFragment ( fragment ) ; presentStyle = oldPresetStyle ; setPresentStyle ( presentStyle ) ; }
public void presentFragment ( NavigationFragment fragment ) { presentFragment ( fragment , true ) ; }
public AppActivity getMainActivity ( ) { return ( AppActivity ) getActivity ( ) ; }
public FragmentTransitionFrameLayout getRootLayout ( ) { return innerRootLayout ; }
public void presentFragment ( NavigationFragment fragment ) { if ( isNavigationControllerInit ( ) ) { mNavigationController . setPresentStyle ( fragment . getPresentTransition ( ) ) ; mNavigationController . presentFragment ( fragment , true ) ; } }
public void presentFragment ( NavigationFragment fragment , boolean animated ) { if ( isNavigationControllerInit ( ) ) { mNavigationController . presentFragment ( fragment , animated ) ; } }
public BottomNavigationPagerAdapter ( Context context , FragmentManager fragmentManager ) { super ( fragmentManager , BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT ) ; mContext = context ; initData ( ) ; }
public void addSongPreviewListener ( SongPreviewListener listener ) { if ( listener != null && ! mListeners . contains ( listener ) ) mListeners . add ( listener ) ; }
public static Factory getFactory ( ) { return new Factory ( ) { public SoundFile create ( ) { return new CheapAAC ( ) ; } public String [ ] getSupportedExtensions ( ) { return new String [ ] { "aac" , "m4a" } ; } } ; }
public SoundFile create ( ) { return new CheapAAC ( ) ; }
public SoundFile create ( ) { return new CheapAMR ( ) ; }
public static Factory getFactory ( ) { return new Factory ( ) { public SoundFile create ( ) { return new CheapMP3 ( ) ; } public String [ ] getSupportedExtensions ( ) { return new String [ ] { "mp3" } ; } } ; }
public SoundFile create ( ) { return new CheapMP3 ( ) ; }
public static Factory getFactory ( ) { return new Factory ( ) { public SoundFile create ( ) { return new CheapWAV ( ) ; } public String [ ] getSupportedExtensions ( ) { return new String [ ] { "wav" } ; } } ; }
public SoundFile create ( ) { return new CheapWAV ( ) ; }
public LiveData < PersonaShadowDetail [ ] > getShadowsForPersona ( int id ) { return personaDao . getShadowsForPersona ( id , gameType ) ; }
public int getItemViewType ( int position ) { MainListPersona detailPersona = personas . get ( position ) ; return detailPersona . getGameId ( ) . getValue ( ) ; }
public PersonaFilterArgs ( ) { minLevel = 1 ; maxLevel = 99 ; dlcPersona = true ; arcana = Enumerations . Arcana . ANY ; basePersonas = true ; royalPersonas = true ; }
public PersonaFilterArgs ( int minLevel , int maxLevel , Enumerations . Arcana arcana , boolean dlcPersona ) { this . minLevel = minLevel ; this . maxLevel = maxLevel ; this . arcana = arcana ; this . dlcPersona = dlcPersona ; }
public LiveData < List < MainListPersona >> getPersonasWithSkill ( int skillID ) { return repository . getPersonasWithSkillLiveData ( skillID ) ; }
public int hashCode ( ) { return Objects . hash ( arcana , level , name , rare , special , dlc , id , gameId ) ; }
public void filterPersonas ( @ NonNull GameType gameType ) { showProgressBar ( ) ; viewModel . filterPersonas ( gameType ) ; }
private void setNewSwitchButtonText ( ) { @ StringRes int switchButtonTextRes ; if ( currentGameType == GameType . BASE ) { switchButtonTextRes = R . string . game_royal ; } else { switchButtonTextRes = R . string . game_persona_5 ; } switchGameButton . setText ( switchButtonTextRes ) ; }
public void setArcana ( @ NonNull Enumerations . Arcana arcana ) { this . arcana = arcana ; }
public PublicKey getPIPubkey ( String serial ) throws GeneralSecurityException , IOException { if ( baseFilePath == null ) return null ; return getPIPubkey ( baseFilePath , serial ) ; }
private byte [ ] loadDataFromFile ( String fileName ) throws IOException , GeneralSecurityException { if ( baseFilePath == null ) return null ; return loadDataFromFile ( fileName , baseFilePath ) ; }
public boolean saveToFile ( String fileName , byte [ ] data ) throws GeneralSecurityException , IOException { if ( baseFilePath == null ) return false ; return saveToFile ( fileName , baseFilePath , data ) ; }
public static LottieComposition fromJsonSync ( JsonReader reader ) { return LottieCompositionFactory . fromJsonReaderSync ( reader , null ) . getValue ( ) ; }
public static LottieResult < LottieComposition > fromJsonStringSync ( String json , @ Nullable String cacheKey ) { ByteArrayInputStream stream = new ByteArrayInputStream ( json . getBytes ( ) ) ; return fromJsonReaderSync ( JsonReader . of ( buffer ( source ( stream ) ) ) , cacheKey ) ; }
public boolean isCachedValueEnabled ( float progress ) { throw new IllegalStateException ( "not implemented" ) ; }
public LottieConfig build ( ) { return new LottieConfig ( networkFetcher , cacheProvider , enableSystraceMarkers ) ; }
public PreferencesHelper getPreferencesHelper ( ) { if ( mPreferencesHelper == null ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( this ) ; mPreferencesHelper = new PreferencesHelper ( sharedPreferences ) ; } return mPreferencesHelper ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; myLocationPermission = new MyLocationPermission ( this ) ; }
private void setMyLocationActivationViewVisibility ( boolean isVisible ) { ViewKt . setVisible ( mMyLocationActivationView , isVisible ) ; }
private void setUpMiniPlayer ( ) { setUpPlayPauseButton ( ) ; progressBar . setSupportProgressTintList ( ColorStateList . valueOf ( ThemeStore . accentColor ( getActivity ( ) ) ) ) ; }
public void onMediaStoreChanged ( ) { updateQueue ( ) ; updateIsFavorite ( ) ; }
private void updateMediaSessionPlaybackState ( ) { mediaSession . setPlaybackState ( new PlaybackStateCompat . Builder ( ) . setActions ( MEDIA_SESSION_ACTIONS ) . setState ( isPlaying ( ) ? PlaybackStateCompat . STATE_PLAYING : PlaybackStateCompat . STATE_PAUSED , getSongProgressMillis ( ) , 1 ) . build ( ) ) ; }
public String getEndpoint ( boolean isMediaRequest ) { if ( isMediaRequest ) { return this . getUser ( ) . getBaseUrl ( ) + "/api/v1/media" ; } return this . getUser ( ) . getBaseUrl ( ) + "/api/v1/statuses" ; }
public boolean supports ( String feature ) { boolean supported = true ; switch ( feature ) { case FEATURE_TITLE : case FEATURE_CATEGORIES : case FEATURE_CONTACTS : case FEATURE_AUDIO : case FEATURE_LOCATION : case FEATURE_POST_STATUS : supported = false ; } return supported ; }
public void isPermissionGranted ( boolean isGranted ) { if ( isGranted ) { saveImage ( ) ; } }
public void isPermissionGranted ( boolean isGranted ) { }
public void onClick ( DialogInterface dialog , int index ) { user = new Accounts ( getApplicationContext ( ) ) . getUser ( accounts . get ( index ) , false , false ) ; sendBasePost ( null ) ; }
public void OnSuccessRequest ( String response ) { try { Utility . saveCache ( requireContext ( ) , user . getAccountNameWithoutProtocol ( ) , "channels" , response , "" , "" ) ; } catch ( Exception ignored ) { } parseChannelResponse ( response , false ) ; }
public void onResponse ( String response ) { if ( ! showUnread && ! preview ) { Utility . saveCache ( getApplicationContext ( ) , user . getAccountNameWithoutProtocol ( ) , "timeline" , response , channelId , pagerAfter ) ; } parseTimelineResponse ( response , false ) ; }
public boolean sendTimelineAccessToken ( String channelId ) { boolean send = true ; if ( channelId . equals ( CHANNEL_NAME_MASTODON_ANONYMOUS ) ) { send = false ; } return send ; }
public void onClick ( View v ) { Intent i = new Intent ( TimelineDetailActivity . this , ReplyActivity . class ) ; i . putExtra ( "incomingText" , reader . getReplyId ( item ) ) ; startActivity ( i ) ; }
public boolean hideDelete ( String channelId ) { return ! channelId . equals ( CHANNEL_NAME_MY_POSTS ) ; }
public void onCreate ( ) { authenticator = new AuthenticatorPleroma ( this ) ; }
public boolean onOptionsItemSelected ( @ NonNull MenuItem item ) { if ( item . getItemId ( ) == R . id . addLocation ) { if ( ! mRequestingLocationUpdates ) { startLocationUpdates ( ) ; } return true ; } return super . onOptionsItemSelected ( item ) ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . parseBoolean ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "LikeAlias" , 1 ) ; else toggleAliasSetting ( "LikeAlias" , 2 ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . parseBoolean ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "RepostAlias" , 1 ) ; else toggleAliasSetting ( "RepostAlias" , 2 ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . parseBoolean ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "BookmarkAlias" , 1 ) ; else toggleAliasSetting ( "BookmarkAlias" , 2 ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . parseBoolean ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "ReplyAlias" , 1 ) ; else toggleAliasSetting ( "ReplyAlias" , 2 ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . parseBoolean ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "UploadAlias" , 1 ) ; else toggleAliasSetting ( "UploadAlias" , 2 ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { boolean checked = Boolean . parseBoolean ( newValue . toString ( ) ) ; if ( checked ) toggleAliasSetting ( "FeedAlias" , 1 ) ; else toggleAliasSetting ( "FeedAlias" , 2 ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { callback . onPreferenceChanged ( R . id . nav_contacts , Boolean . parseBoolean ( newValue . toString ( ) ) ) ; return true ; }
public boolean onPreferenceChange ( Preference preference , Object newValue ) { callback . onPreferenceChanged ( R . id . nav_posts , Boolean . parseBoolean ( newValue . toString ( ) ) ) ; return true ; }
public void onClick ( DialogInterface dialog , int which ) { checkSavedImage ( ) ; finish ( ) ; }
public void onClick ( View v ) { final User user = items . get ( this . position ) ; new Accounts ( context ) . switchAccount ( activity , user , layout ) ; }
public void OnSuccessRequest ( String response ) { if ( mediaUploadedCount == mediaCount && ! uploadMediaError ) { uploadMediaDone = true ; sendBasePost ( sendItem ) ; } if ( uploadMediaError ) { hideProgressBar ( ) ; } }
public void onDraftChanged ( ) { setDraftMenuItemTitle ( true ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicropubAction ( context , user , layout ) . deleteItem ( contact . getInternalUrl ( ) ) ; contacts . remove ( position ) ; notifyDataSetChanged ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicropubAction ( context , user , layout ) . deleteItem ( item . getUrl ( ) ) ; items . remove ( position ) ; notifyDataSetChanged ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( context , user , layout ) . subscribe ( feed . getUrl ( ) , feed . getChannel ( ) , false ) ; finish ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( context , user , layout ) . deleteChannel ( channel . getUid ( ) ) ; channels . remove ( position ) ; notifyDataSetChanged ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( context , user , layout ) . deleteFeed ( feed . getUrl ( ) , feed . getChannel ( ) ) ; items . remove ( position ) ; notifyDataSetChanged ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { new MicrosubAction ( TimelineDetailActivity . this , user , layout ) . deletePost ( entry . getChannelId ( ) , entry . getId ( ) ) ; }
public void unbind ( boolean unbindViews ) { super . unbind ( unbindViews ) ; if ( unbindViews && unbinder != null ) { unbinder . unbind ( ) ; unbinder = null ; } }
public void unbind ( boolean unbindViews ) { super . unbind ( unbindViews ) ; if ( unbindViews && mAreViewsBound && unbinder != null ) { unbinder . unbind ( ) ; mAreViewsBound = false ; } }
public void testSimpleParsing ( ) { mSubscriber . onEventMatchesLoaded ( mMatchesEvent ) ; mSubscriber . onEventAwardsLoaded ( mAwardsEvent ) ; DatafeedTestDriver . testSimpleParsing ( mSubscriber , new TeamAtEventSummarySubscriber . Model ( mStatus , mEvent , mTeam ) ) ; }
public void testUnplayedEvent ( ) { DatafeedTestDriver . testSimpleParsing ( mSubscriber , new TeamAtEventSummarySubscriber . Model ( null , mEvent , mTeam ) ) ; }
public boolean isImage ( ) { return this != NONE && this != YOUTUBE && this != AVATAR ; }
public boolean equals ( Object o ) { return o instanceof EventWeekTab && mLabel == ( ( EventWeekTab ) o ) . getLabel ( ) ; }
public TeamTabBinder ( ) { super ( ) ; initialTab = 0 ; }
public void setImage ( Drawable drawable ) { drawable = DrawableCompat . wrap ( drawable ) ; DrawableCompat . setTint ( drawable , getContext ( ) . getResources ( ) . getColor ( R . color . primary_text_color ) ) ; mImageView . setImageDrawable ( drawable ) ; }
public TbaAndroid ( ) { super ( ) ; mShouldBindStetho = true ; }
public static String getUsername ( Context context ) { context = MyApplication . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( TAG_USERNAME_LOCAL , "" ) ; }
public static String getPassword ( Context context ) { context = MyApplication . getAppContext ( ) ; SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( TAG_PASSWORD_LOCAL , "" ) ; }
public static String getAuthorizationHeaders ( Context context ) { context = MyApplication . getAppContext ( ) ; if ( context == null ) { return null ; } return PrefLogin . baseEncoding ( PrefLogin . getUsername ( context ) , PrefLogin . getToken ( context ) ) ; }
public void onResponse ( Call < FavouriteShop > call , Response < FavouriteShop > response ) { if ( ! isDestroyed ) { return ; } if ( response . code ( ) == 201 ) { setFavouriteIcon ( true ) ; } }
private void selectDeliveryGuy ( ) { int orderStatus = getArguments ( ) . getInt ( "order_status" ) ; Intent intent = new Intent ( getActivity ( ) , FilterDeliveryGuy . class ) ; intent . putExtra ( "order_status" , orderStatus ) ; startActivityForResult ( intent , 562 ) ; }
public void onChanged ( Integer integer ) { if ( integer == ViewModelShop . EVENT_SHOP_DELETED ) { ViewHolderShopSmall . this . adapter . notifyItemRemoved ( getLayoutPosition ( ) ) ; } }
public static String getSortOrder ( Context context ) { SharedPreferences sharedPref = context . getSharedPreferences ( context . getString ( R . string . preference_file_name ) , MODE_PRIVATE ) ; return sharedPref . getString ( "sort_order_for_user_list" , MyApplication . SORT_DESCENDING ) ; }
public void onSmileySelected ( int smiley , boolean reselected ) { itemRatingText . setText ( ( smiley + 1 ) + " Star" ) ; memberRatingIndicator . setRating ( smiley + 1 ) ; }
private void bindToolbarHeader ( ) { Shop shop = PrefShopAdminHome . getShop ( this ) ; shopName . setText ( shop . getShopName ( ) ) ; }
private void bindToolbarHeader ( ) { Shop shop = PrefShopAdminHome . getShop ( getActivity ( ) ) ; if ( shop != null ) { shopName . setText ( shop . getShopName ( ) ) ; } }
public ViewHolderOrderWithBillDeprecated ( View itemView , Context context , Fragment fragment ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; this . context = context ; this . fragment = fragment ; }
public Adapter . ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_item_category , parent , false ) ; return new ViewHolder ( v ) ; }
public void loggedOut ( ) { showProfileFragment ( true ) ; }
public void onRefresh ( ) { makeNetworkCall ( true ) ; }
private void bindAllFields ( ) { bindToolbarHeader ( ) ; bindBalance ( ) ; bindShopOpenStatus ( ) ; bindNotice ( ) ; }
public void onRefresh ( ) { makeRequestItemCategory ( ) ; makeRequestShopItem ( true ) ; }
public void onRefresh ( ) { makeRequestShopItem ( true ) ; }
public void onRefresh ( ) { makeRequestItem ( true ) ; makeNetworkCallShopItem ( ) ; }
public void onResume ( ) { super . onResume ( ) ; isDestroyed = false ; makeRefreshNetworkCall ( ) ; }
public void notifyTotal ( double total ) { cartTotal = total ; estimatedTotal . setText ( "Estimated Total ( Before Update ) : " + PrefGeneral . getCurrencySymbol ( getActivity ( ) ) + " " + String . format ( "% . 2f" , cartTotal ) ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_cart , parent , false ) ; return new ViewHolder ( view ) ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { if ( isDestroyed ) { return ; } saveButton . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public void onFailure ( Call < ItemCategory > call , Throwable t ) { if ( isDestroyed ) { return ; } showToastMessage ( "Add failed ! " ) ; saveButton . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { saveButton . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public void onFailure ( Call < Shop > call , Throwable t ) { showToastMessage ( "Add failed ! " ) ; saveButton . setVisibility ( View . VISIBLE ) ; progressBar . setVisibility ( View . INVISIBLE ) ; }
public ViewHolderShopMedium ( @ NonNull View itemView , Context context , Fragment fragment ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; this . context = context ; this . fragment = fragment ; }
public void onFailure ( Call < User > call , Throwable t ) { if ( isDestroyed ) { return ; } bindUserProfile ( ) ; bindDashboard ( ) ; swipeContainer . setRefreshing ( false ) ; }
public AdapterSavedMarkets ( List < ServiceConfigurationGlobal > dataset , Context context , Fragment subscriber ) { this . dataset = dataset ; this . context = context ; this . subscriber = subscriber ; }
public ViewHolderSavedMarketList ( @ NonNull View itemView , Context context , Fragment subscriber ) { super ( itemView ) ; ButterKnife . bind ( this , itemView ) ; this . context = context ; this . subscriber = subscriber ; }
public LibraryViewPagerAdapter ( FragmentManager fm ) { super ( fm , FragmentStatePagerAdapter . BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT ) ; }
public Promise < PositionedPlayingFile > resume ( ) { return playlistPlayer . resume ( ) ; }
public StorageReadFileException ( File file , Exception innerException ) { super ( "There was an error reading the file " + file + " . " , innerException ) ; this . file = file ; }
public StorageWriteFileException ( File file , Exception innerException ) { super ( "There was an error writing the file " + file + " . " , innerException ) ; this . file = file ; }
public Settings ( Context context ) { this . context = context ; this . settings = PreferenceManager . getDefaultSharedPreferences ( context ) ; migrateDeprecatedSettings ( ) ; }
public boolean getIsAppendingDateTimeToBackups ( ) { return getBoolean ( R . string . settings_key_backup_append_date_time , true ) ; }
private void populateAdapter ( ) { adapter . loadEntries ( ) ; tagsDrawerAdapter . setTags ( TagsAdapter . createTagsMap ( adapter . getEntries ( ) , settings ) ) ; adapter . filterByTags ( tagsDrawerAdapter . getActiveTags ( ) ) ; }
public Builder loadConfig ( Context context ) { this . stackBlur = Settings . getSettingStackBlur ( context ) ; this . stackBlurMode = Settings . getSettingStackBlurMode ( context ) ; return this ; }
private String getSaveUrl ( ) { return getUrl ( Settings . getSaveResolution ( this ) ) ; }
public void onReceive ( Context context , Intent intent ) { if ( CLOSE_FULLY_AUTOMATIC_UPDATE . equals ( intent . getAction ( ) ) ) { if ( mDailyUpdatePreference != null ) { mDailyUpdatePreference . setChecked ( false ) ; } } }
private void updateCheckTime ( ) { mDailyUpdateIntervalPreference . setSummary ( getString ( R . string . pref_auto_update_check_time , Settings . getAutomaticUpdateInterval ( getActivity ( ) ) ) ) ; }
public static boolean isEnableLog ( Context context ) { return Settings . isEnableLog ( context ) ; }
public static boolean isEnableLogProvider ( Context context ) { return Settings . isEnableLogProvider ( context ) ; }
public static boolean isAutoCountry ( Context context ) { return Settings . getCountryValue ( context ) == 0 ; }
private static boolean check ( Context context ) { return ! Settings . isCrashReport ( context ) || BuildConfig . DEBUG ; }
public static boolean isAlarm ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return sharedPreferences . getBoolean ( "pref_set_wallpaper_day_auto_update" , false ) ; }
public static int getAutomaticUpdateType ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; String type = sharedPreferences . getString ( SettingsActivity . PREF_SET_WALLPAPER_DAILY_UPDATE_MODE , "0" ) ; return Integer . parseInt ( Objects . requireNonNull ( type ) ) ; }
public static boolean isAutomaticUpdateNotification ( Context context ) { return SettingTrayPreferences . get ( context ) . getBoolean ( SettingsActivity . PREF_SET_WALLPAPER_DAILY_UPDATE_SUCCESS_NOTIFICATION , true ) ; }
public static int getAutomaticUpdateInterval ( Context context ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return Integer . parseInt ( Objects . requireNonNull ( sharedPreferences . getString ( SettingsActivity . PREF_SET_WALLPAPER_DAILY_UPDATE_INTERVAL , String . valueOf ( Constants . DEF_SCHEDULER_PERIODIC ) ) ) ) ; }
private static void homeSetWallpaper ( Context context , File wallpaper ) throws IOException { AppUtils . setHomeScreenWallpaper ( context , wallpaper ) ; }
public void sendSetWallpaperBroadcast ( BingWallpaperState state ) { SetWallpaperStateBroadcastReceiverHelper . sendSetWallpaperBroadcast ( mContext , state ) ; }
public static boolean isTaskUndone ( Context context ) { return TasksUtils . isToDaysDoProvider ( context , 1 , Constants . TASK_FLAG_SET_WALLPAPER_STATE ) ; }
public void register ( Context context ) { context . registerReceiver ( mBroadcastReceiver , new IntentFilter ( Constants . ACTION_GET_WALLPAPER_STATE ) ) ; }
public static void checkRunningService ( Context context , String TAG ) { Intent intent = checkRunningServiceIntent ( context , TAG ) ; if ( intent != null ) { BingWallpaperIntentService . start ( context , intent ) ; } }
public static Observable < Wallpaper > getBingWallpaper ( Context context ) { return getBingWallpaper ( context , 0 , 1 ) . map ( bingWallpaperImages -> bingWallpaperImages . get ( 0 ) ) ; }
public void onSuccess ( Wallpaper bingWallpaperImage ) { success ( config , bingWallpaperImage ) ; }
public static void start ( Context context , Wallpaper item , Bundle bundle ) { Intent intent = new Intent ( context , WallpaperDetailActivity . class ) ; intent . putExtra ( "image" , item ) ; ActivityCompat . startActivity ( context , intent , bundle ) ; }
public void onSuccess ( Wallpaper image ) { setText ( context , image ) ; }
public void setStackBlur ( @ Constants . setWallpaperMode int stackBlur ) { this . stackBlur = stackBlur ; }
public void onError ( Throwable e ) { failure ( config , e ) ; }
public void onSeekBarValue ( int value ) { mConfig . setStackBlur ( value ) ; loadImage ( ) ; }
public DatabaseUniversal ( Context context , String tabelaNazwa ) { super ( context , "las" + tabelaNazwa + " . db" , null , 2 ) ; this . tabelaNazwa = tabelaNazwa ; }
public void tearDown ( ) throws Exception { File backupFolder = StorageHelper . getOrCreateBackupDir ( Constants . AUTO_BACKUP_DIR ) ; FileUtils . deleteDirectory ( backupFolder ) ; }
private void assertAutobackupIsCorrect ( ) { List < LinkedList < DiffMatchPatch . Diff >> autobackupDifferences = BackupHelper . integrityCheck ( StorageHelper . getOrCreateBackupDir ( ConstantsBase . AUTO_BACKUP_DIR ) ) ; assertEquals ( 0 , autobackupDifferences . size ( ) ) ; }
public void onEventMainThread ( PushbulletReplyEvent pushbulletReplyEvent ) { String text = getNoteContent ( ) + System . getProperty ( "line . separator" ) + pushbulletReplyEvent . getMessage ( ) ; binding . fragmentDetailContent . detailContent . setText ( text ) ; }
public void onEvent ( SwitchFragmentEvent event ) { if ( CHILDREN . equals ( event . getDirection ( ) ) ) { animateBurger ( ARROW ) ; } else { animateBurger ( BURGER ) ; } }
public static File getOrCreateBackupDir ( String backupName ) { File backupDir = new File ( getOrCreateExternalStoragePublicDir ( ) , backupName ) ; if ( ! backupDir . exists ( ) && backupDir . mkdirs ( ) ) { createNoMediaFile ( backupDir ) ; } return backupDir ; }
public void setUp ( ) { super . setUp ( ) ; prefs . edit ( ) . putBoolean ( Constants . PREF_ENABLE_AUTOBACKUP , false ) . apply ( ) ; }
public void setUp ( ) { activityRule . launchActivity ( null ) ; }
public void onColorSelection ( @ NonNull ColorChooserDialog colorChooserDialog , int color ) { BitmapUtils . changeImageViewDrawableColor ( binding . colorChooser , color ) ; selectedColor = color ; }
private void initViews ( ) { binding . detailRoot . setOnTouchListener ( this ) ; setTagMarkerColor ( noteTmp . getCategory ( ) ) ; initViewTitle ( ) ; initViewContent ( ) ; initViewLocation ( ) ; initViewAttachments ( ) ; initViewReminder ( ) ; initViewFooter ( ) ; }
private void getLocation ( OnGeoUtilResultListener onGeoUtilResultListener ) { PermissionsHelper . requestPermission ( getActivity ( ) , Manifest . permission . ACCESS_FINE_LOCATION , R . string . permission_coarse_location , binding . snackbarPlaceholder , ( ) -> GeocodeHelper . getLocation ( onGeoUtilResultListener ) ) ; }
private void askReadExternalStoragePermission ( ) { PermissionsHelper . requestPermission ( getActivity ( ) , Manifest . permission . READ_EXTERNAL_STORAGE , R . string . permission_external_storage_detail_attachment , binding . snackbarPlaceholder , this : : startGetContentAction ) ; }
private void click ( ) { Attachment attachment = images . get ( binding . fullscreenContent . getCurrentItem ( ) ) ; if ( attachment . getMime_type ( ) . equals ( MIME_TYPE_VIDEO ) ) { viewMedia ( ) ; } }
private void stopJingles ( ) { if ( jinglesAnimation != null ) { jinglesAnimation . stop ( ) ; jinglesAnimation = null ; binding . emptyList . setCompoundDrawablesWithIntrinsicBounds ( 0 , R . drawable . jingles_animation , 0 , 0 ) ; } }
private void initUI ( ) { setSupportActionBar ( binding . toolbar . toolbar ) ; getSupportActionBar ( ) . setDisplayHomeAsUpEnabled ( true ) ; getSupportActionBar ( ) . setHomeButtonEnabled ( true ) ; }
public DrawerLayout getDrawerLayout ( ) { return binding . drawerLayout ; }
public void getWordCounter_english ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . US ) ; assertEquals ( DefaultWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
public void getWordCounter_italian ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . ITALY ) ; assertEquals ( DefaultWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
public void getWordCounter_chineseSimplified ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . SIMPLIFIED_CHINESE ) ; assertEquals ( IdeogramsWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
public void getWordCounter_chineseTraditional ( ) { OmniNotes . getAppContext ( ) . getResources ( ) . getConfiguration ( ) . setLocale ( Locale . TRADITIONAL_CHINESE ) ; assertEquals ( IdeogramsWordCounter . class , CountFactory . getWordCounter ( ) . getClass ( ) ) ; }
private void assertTranslationMatches ( String locale , int resourceId , String string ) { assertEquals ( string , LanguageHelper . getLocalizedString ( testContext , locale , resourceId ) ) ; }
public Date getDate ( int index ) { return calendarData . get ( index ) ; }
private void addBottomPaddingForFastActions ( WebView view ) { if ( mPrefs . getBoolean ( SettingsActivity . CB_SHOW_FAST_ACTIONS , true ) ) { view . loadUrl ( "javascript : document . body . style . marginBottom = \"100px\" ; void 0" ) ; } }
public int hashCode ( ) { return Objects . hash ( scheduleType , query , type , title , timestamp , schedule , dataSource ) ; }
public int hashCode ( ) { return Objects . hash ( scheduleType , query , type , title , timestamp , schedule , teachers , dataSource ) ; }
public int hashCode ( ) { return Objects . hash ( query , limit , offset , count , timestamp , teachers , dataSource ) ; }
private SExams convertIfmoSchedule ( String type , String query , SExams itmoSchedule ) { return setupSchedule ( itmoSchedule , type , query , SOURCE . IFMO ) ; }
public String getAppTheme ( Context context ) { if ( appTheme == null ) { updateAppTheme ( context ) ; } return appTheme ; }
public void updateAppTheme ( Context context ) { appTheme = ThemeDialog . getTheme ( context , storagePref , time ) ; }
public void onError ( Exception exception ) { staticUtil . removeView ( imageContainer ) ; }
public static void showFaqDialog ( final Context context ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; i . setData ( Uri . parse ( "https : context . startActivity ( i ) ; }
public static void logEvent ( Context context , String event ) { Bundle bundle = new Bundle ( ) ; logEvent ( context , event , bundle ) ; }
public void onSelect ( Integer target , @ NotNull Char selector ) { if ( target != null ) { item . cast ( selector , target ) ; } }
public void _execute ( @ NotNull Char chr , @ NotNull String action ) { super . _execute ( chr , action ) ; script . run ( "execute" , chr , action ) ; }
public void _execute ( @ NotNull Char chr , @ NotNull String action ) { super . _execute ( chr , action ) ; chr . damage ( chr . ht ( ) , this ) ; }
public void _execute ( @ NotNull Char chr , @ NotNull String action ) { if ( action . equals ( AC_END ) ) { showAmuletScene ( false ) ; } else { super . _execute ( chr , action ) ; } }
public void _execute ( @ NotNull Char chr , @ NotNull String action ) { if ( action . equals ( AC_PULL ) ) { chr . selectCell ( impaler ) ; } else { super . _execute ( chr , action ) ; } }
public boolean act ( ) { if ( getSourceId ( ) == EntityIdSource . INVALID_ID ) { detach ( ) ; } return super . act ( ) ; }
private int rollViewDistance ( ) { if ( isSafe ( ) ) { return 8 ; } else { return Dungeon . isChallenged ( Challenges . DARKNESS ) ? 2 : Random . Int ( 3 , 8 ) ; } }
public Position getPosition ( ) { return new Position ( level ( ) . levelId , pos ) ; }
public int blobAmountAt ( Class < ? extends Blob > blobClass , int cell ) { Blob blob = blobs . get ( blobClass ) ; if ( blob == null ) { return 0 ; } return blob . cur [ cell ] ; }
public int getSourceId ( ) { return source ; }
public String itemSlotName ( Item item ) { if ( usedSlots . containsKey ( item ) ) { return usedSlots . get ( item ) . name ( ) ; } return Slot . NONE . name ( ) ; }
public int price ( ) { return 25 * quantity ( ) ; }
public static Text create ( String text , Font font ) { if ( ! ModdingMode . getClassicTextRenderingMode ( ) ) { return new SystemText ( text , font . baseLine*2 , false ) ; } return new BitmapTextMultiline ( text , font ) ; }
public float reqHeight ( ) { return text . height ( ) + 4 ; }
public ChaosCrystal ( ) { imageFile = "items/artifacts . png" ; image = CHAOS_CRYSTAL_IMAGE ; }
public boolean attachTo ( @ NotNull Char target ) { return target . hasBuff ( RageBuff . class ) || super . attachTo ( target ) ; }
public static void detach ( @ NotNull Char target , String cl ) { detach ( target . buff ( cl ) ) ; }
public static void detach ( @ NotNull Char target , Class < ? extends Buff > cl ) { detach ( target . buff ( cl ) ) ; }
public boolean attachTo ( @ NotNull Char target ) { return target . hasBuff ( Hunger . class ) || super . attachTo ( target ) ; }
public boolean attachTo ( @ NotNull Char target ) { if ( super . attachTo ( target ) ) { target . invisible ++ ; return true ; } else { return false ; } }
public boolean attachTo ( @ NotNull Char target ) { if ( super . attachTo ( target ) ) { Roots . detach ( target , Roots . class ) ; return true ; } else { return false ; } }
public boolean attachTo ( @ NotNull Char target ) { if ( super . attachTo ( target ) ) { Dungeon . observe ( ) ; return true ; } else { return false ; } }
public boolean attachTo ( @ NotNull Char target ) { if ( super . attachTo ( target ) ) { target . paralyse ( true ) ; return true ; } else { return false ; } }
public boolean attachTo ( @ NotNull Char target ) { return target . hasBuff ( Regeneration . class ) || super . attachTo ( target ) ; }
public boolean attachTo ( @ NotNull Char target ) { if ( target . isFlying ( ) ) { return false ; } return super . attachTo ( target ) ; }
public boolean attachTo ( @ NotNull Char target ) { if ( super . attachTo ( target ) ) { Sample . INSTANCE . play ( Assets . SND_MELD ) ; Dungeon . observe ( ) ; return true ; } else { return false ; } }
public boolean attachTo ( @ NotNull Char target ) { if ( super . attachTo ( target ) ) { target . getBelongings ( ) . discharge ( ) ; return true ; } else { return false ; } }
public Item checkItem ( Item src ) { for ( Item item : this ) { if ( item == src ) { return item ; } } return ItemsList . DUMMY ; }
public Item randomUnequipped ( ) { Item ret = Random . element ( backpack . items ) ; if ( ret == null ) { return ItemsList . DUMMY ; } return ret ; }
public boolean attachTo ( @ NotNull Char target ) { if ( super . attachTo ( target ) ) { postpone ( TICK ) ; return true ; } else { return false ; } }
public void activate ( @ NotNull Char ch ) { super . activate ( ch ) ; Buff buff = buff ( ) ; if ( buff != null ) { buff . setSource ( this ) ; buff . attachTo ( ch ) ; } }
public boolean attachTo ( @ NotNull Char target ) { pos = target . getPos ( ) ; return super . attachTo ( target ) ; }
public String status ( Char me ) { return StringsManager . maybeId ( script . runOptional ( "status" , "CustomAi : " + scriptFile , me ) ) ; }
public String status ( Char me ) { return Utils . format ( "This %s is %s" , me . getName ( ) , getTag ( ) ) ; }
public void preAttack ( Char tgt ) { script . runOptionalNoRet ( "preAttack" , tgt ) ; }
public void postAttack ( Char tgt ) { script . runOptionalNoRet ( "postAttack" , tgt ) ; }
public void ownerDoesDamage ( int damage ) { }
public GoldenStatue ( ) { hp ( ht ( 15 + Dungeon . depth * 5 ) ) ; baseDefenseSkill = 4 + Dungeon . depth ; }
public boolean canAttack ( @ NotNull Char enemy ) { return ! pacified && super . canAttack ( enemy ) ; }
public void postAttack ( Char tgt ) { }
public void postAttack ( Char tgt ) { if ( Random . Float ( 1 ) < 0 . 1f ) { Buff . prolong ( tgt , Vertigo . class , 3 ) ; } }
public Kusarigama ( ) { super ( 3 , 2f , 1f ) ; image = 0 ; imageFile = "items/kusarigama . png" ; }
public boolean act ( Char hero ) { if ( hero . getCloser ( dst ) ) { return true ; } else { hero . readyAndIdle ( ) ; return false ; } }
public void onInterstitialFailedToLoad ( ) { EventCollector . logException ( "appodeal load error" ) ; AdsUtilsCommon . interstitialFailed ( AppodealInterstitialProvider . this , returnTo ) ; }
public void onInterstitialShowFailed ( ) { EventCollector . logException ( "appodeal show error" ) ; AdsUtilsCommon . interstitialFailed ( AppodealInterstitialProvider . this , returnTo ) ; }
public static @ NotNull Position ascend ( Position current ) { return descendOrAscend ( current , false ) ; }
public Uri getUri ( ) { if ( mCachedUri == null ) { mCachedUri = getCacheFileUri ( mId ) ; } return mCachedUri ; }
public Optional < File > getFile ( ) { return Optional . ofNullable ( getExistingCacheFile ( mId ) ) ; }
public String toString ( ) { return String . format ( Locale . US , " [ ReadableCacheFile : id %d ] " , mId ) ; }
public void run ( ) { updateProgress ( ) ; if ( ! mReleased ) { AndroidCommon . UI_THREAD_HANDLER . postDelayed ( this , 150 ) ; } }
public long getPosition ( ) { return mPosition ; }
public void seek ( final long position ) throws IOException { if ( position < 0 ) { throw new IOException ( "Attempted to seek before zero" ) ; } mPosition = ( int ) position ; }
public void seek ( final long position ) throws IOException { mFile . seek ( position ) ; mPosition = position ; }
public final void mark ( final int readlimit ) { mMark = ( int ) getPosition ( ) ; }
public JsonObject getObject ( final int id ) { return get ( id ) . asObject ( ) ; }
public JsonArray getArray ( final int id ) { return get ( id ) . asArray ( ) ; }
public void forEachObject ( final Consumer < JsonObject > consumer ) { for ( final JsonValue value : mContents ) { consumer . consume ( value . asObject ( ) ) ; } }
public JsonObject getObject ( @ NonNull final String id ) { final JsonValue value = get ( id ) ; if ( value == null ) { return null ; } return value . asObject ( ) ; }
public JsonArray getArray ( @ NonNull final String id ) { final JsonValue value = get ( id ) ; if ( value == null ) { return null ; } return value . asArray ( ) ; }
public void handleMessage ( @ NonNull final Message msg ) { if ( mUsageId != msg . what ) { return ; } mThumbnailView . setImageBitmap ( ( Bitmap ) msg . obj ) ; }
public RedditMoreComments asMoreComments ( ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditMoreComments . class ) ; }
public RedditComment asComment ( ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditComment . class ) ; }
public RedditPost asPost ( ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditPost . class ) ; }
public RedditSubreddit asSubreddit ( ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditSubreddit . class ) ; }
public RedditUser asUser ( ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { return data . asObject ( RedditUser . class ) ; }
public RedditMessage asMessage ( ) throws IllegalAccessException , InstantiationException , InvocationTargetException , NoSuchMethodException { return data . asObject ( RedditMessage . class ) ; }
public CommentListingURL limit ( final Integer limit ) { return new UnknownCommentListURL ( uri . buildUpon ( ) . appendQueryParameter ( "limit" , String . valueOf ( limit ) ) . build ( ) ) ; }
public PostListingURL limit ( final Integer limit ) { return new UnknownPostListURL ( uri . buildUpon ( ) . appendQueryParameter ( "limit" , String . valueOf ( limit ) ) . build ( ) ) ; }
public VH1Text ( final View itemView ) { super ( itemView ) ; text = itemView . findViewById ( R . id . recycler_item_text ) ; }
public void perform ( final UiController uiController , final View view ) { uiController . loopMainThreadForAtLeast ( seconds * 1000 ) ; }
public void onConfigurationChanged ( @ NonNull final Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mImageViewDisplayerManager != null ) { mImageViewDisplayerManager . resetTouchState ( ) ; } }
public static void quickToast ( final Context context , final int textRes ) { quickToast ( context , context . getApplicationContext ( ) . getString ( textRes ) ) ; }
public static void quickToast ( final Context context , final String text ) { AndroidCommon . runOnUiThread ( ( ) -> Toast . makeText ( context , text , Toast . LENGTH_LONG ) . show ( ) ) ; }
public String getCanonicalUsername ( ) { return StringUtils . asciiLowercase ( username . trim ( ) ) ; }
public List < CacheEntry > getSessions ( final URI url , final RedditAccount user ) { return dbManager . select ( url , user . username , null ) ; }
public static boolean isImage ( final String mimetype ) { return StringUtils . asciiLowercase ( mimetype ) . startsWith ( "image/" ) ; }
public static PostSort valueOfOrNull ( @ NonNull final String string ) { try { return valueOf ( StringUtils . asciiUppercase ( string ) ) ; } catch ( final IllegalArgumentException e ) { return null ; } }
public AlbumAdapter ( final BaseActivity activity , final AlbumInfo albumInfo ) { this . activity = activity ; this . albumInfo = albumInfo ; }
public static void onLinkLongClicked ( final BaseActivity activity , final String uri ) { onLinkLongClicked ( activity , uri , false ) ; }
public Class < RedditPostView > getViewType ( ) { return RedditPostView . class ; }
public void performAction ( final BaseActivity activity , final Action action ) { onActionMenuItemSelected ( this , activity , action ) ; }
public void handleInboxClick ( final BaseActivity activity ) { final URI commentContext = Constants . Reddit . getUri ( mComment . getRawComment ( ) . context ) ; LinkHandler . onLinkClicked ( activity , commentContext . toString ( ) ) ; }
public void handleInboxLongClick ( final BaseActivity activity ) { final RedditChangeDataManager changeDataManager = RedditChangeDataManager . getInstance ( RedditAccountManager . getInstance ( activity ) . getDefaultAccount ( ) ) ; RedditAPICommentAction . showActionMenu ( activity , null , this , null , changeDataManager , false ) ; }
public void onClicked ( final BaseActivity activity ) { LinkHandler . onLinkClicked ( activity , url , false ) ; }
public void onLongClicked ( final BaseActivity activity ) { LinkHandler . onLinkLongClicked ( activity , url ) ; }
public void handleInboxClick ( final BaseActivity activity ) { if ( currentItem != null ) { currentItem . handleInboxClick ( activity ) ; } }
public void handleInboxLongClick ( final BaseActivity activity ) { if ( currentItem != null ) { currentItem . handleInboxLongClick ( activity ) ; } }
public static synchronized RedditChangeDataIO getInstance ( final Context context ) { if ( INSTANCE == null ) { INSTANCE = new RedditChangeDataIO ( context . getApplicationContext ( ) ) ; if ( STATIC_UPDATE_PENDING ) { INSTANCE . notifyUpdate ( ) ; } } return INSTANCE ; }
public void onRedditAccountChanged ( ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) -> rv . setAdapter ( new AccountListAdapter ( mActivity , this ) ) ) ; }
public synchronized void setAccessToken ( final RedditOAuth . AccessToken token ) { accessToken = token ; }
public static synchronized void addGlobalError ( final RRError error ) { errors . add ( error ) ; }
public void onImageViewDLMException ( final Throwable t ) { if ( ! mHaveReverted ) { General . quickToast ( this , R . string . imageview_decode_failed ) ; revertToWeb ( ) ; } }
private InboxItem ( final int listPosition , final RedditRenderableInboxItem item ) { this . mListPosition = listPosition ; this . mItem = item ; }
public void onBindViewHolder ( final RecyclerView . ViewHolder viewHolder ) { ( ( RedditInboxItemView ) viewHolder . itemView ) . reset ( InboxListingActivity . this , mChangeDataManager , mTheme , mItem , mListPosition != 0 ) ; }
public void onConfigurationChanged ( @ NonNull final Configuration newConfig ) { invalidateOptionsMenu ( ) ; super . onConfigurationChanged ( newConfig ) ; }
public VH3TextIcon onCreateViewHolder ( final ViewGroup parent , final int viewType ) { final View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item_3_text_icon , parent , false ) ; return new VH3TextIcon ( v ) ; }
public int getItemViewType ( final int position ) { return position == 0 ? TYPE_HEADER : TYPE_CONTENT ; }
public Object getItem ( final int position ) { return appList . get ( position ) ; }
public void doDownload ( ) { if ( mCancelled ) { return ; } try { performDownload ( mRequest ) ; } catch ( final Throwable t ) { BugReportActivity . handleGlobalError ( mInitiator . context , t ) ; } }
public void pruneTemp ( ) { final List < File > dirs = getCacheDirs ( context ) ; for ( final File dir : dirs ) { pruneTemp ( dir ) ; } }
public static void onBoot ( final Context context ) { for ( final Alarm alarm : Alarm . values ( ) ) { if ( alarm . startOnBoot ( ) ) { startAlarm ( alarm , context ) ; } } }
public void append ( final String str , final int flags ) { append ( str , flags , 0 , 0 , 1f ) ; }
public void append ( final String str , final int flags , final String url ) { append ( str , flags , 0 , 0 , 1f , url ) ; }
public static boolean isImageGif ( final String mimetype ) { return mimetype . equalsIgnoreCase ( "image/gif" ) ; }
public static boolean isVideo ( final String mimetype ) { return mimetype . startsWith ( "video/" ) ; }
public static Message handlerMessage ( final int what , final Object obj ) { final Message msg = Message . obtain ( ) ; msg . what = what ; msg . obj = obj ; return msg ; }
public static int divideCeil ( final int num , final int divisor ) { return ( num + divisor - 1 ) / divisor ; }
public static < E > ArrayList < E > listOfOne ( final E obj ) { final ArrayList < E > result = new ArrayList <> ( 1 ) ; result . add ( obj ) ; return result ; }
public static void onLinkClicked ( final AppCompatActivity activity , final String url ) { onLinkClicked ( activity , url , false ) ; }
private LinkMenuItem ( final Context context , final int titleRes , final LinkAction action ) { this . title = context . getString ( titleRes ) ; this . action = action ; }
public void set ( final MutableFloatPoint2D other ) { x = other . x ; y = other . y ; }
public void set ( final float x , final float y ) { this . x = x ; this . y = y ; }
public void scale ( final double factor ) { x * = factor ; y * = factor ; }
public PrioritisedCachedThreadPool ( final int threads , final String threadName ) { mMaxThreads = threads ; mThreadName = threadName ; }
public static long since ( final long timestamp ) { return utcCurrentTimeMillis ( ) - timestamp ; }
public static long secsToMs ( final long secs ) { return secs * 1000 ; }
public static long minsToMs ( final long mins ) { return secsToMs ( mins * 60 ) ; }
public static long hoursToMs ( final long hours ) { return minsToMs ( hours * 60 ) ; }
public static final TimestampBound ANY = new TimestampBound ( ) { @ Override public boolean verifyTimestamp ( final long timestamp ) { return true ; } } ;
public boolean verifyTimestamp ( final long timestamp ) { return true ; }
public static final TimestampBound NONE = new TimestampBound ( ) { @ Override public boolean verifyTimestamp ( final long timestamp ) { return false ; } } ;
public boolean verifyTimestamp ( final long timestamp ) { return false ; }
public MoreRecentThanBound ( final long minTimestamp ) { this . minTimestamp = minTimestamp ; }
public boolean verifyTimestamp ( final long timestamp ) { return timestamp >= minTimestamp ; }
public static MoreRecentThanBound notOlderThan ( final long ageMs ) { return new MoreRecentThanBound ( System . currentTimeMillis ( ) - ageMs ) ; }
public TriggerableThread ( final Runnable task , final long initialDelay ) { this . task = task ; this . initialDelay = initialDelay ; }
public UIThreadRepeatingTimer ( final long mIntervalMs , final Listener mListener ) { this . mIntervalMs = mIntervalMs ; this . mListener = mListener ; }
public UnexpectedInternalStateException ( final String message ) { super ( message ) ; }
public synchronized void enqueue ( final E object ) { if ( set . add ( object ) ) { queue . addLast ( object ) ; } }
public Stack ( final int initialCapacity ) { mData = new ArrayList <> ( initialCapacity ) ; }
public void push ( final E obj ) { mData . add ( obj ) ; }
public boolean remove ( final E obj ) { return mData . remove ( obj ) ; }
public synchronized void remove ( final K key , final V value ) { final WeakReferenceListManager < V > list = mData . get ( key ) ; if ( list != null ) { list . remove ( value ) ; } }
public void onRequestFailed ( final SubredditRequestFailure failureReason ) { onMultiredditError ( failureReason . asError ( context ) ) ; }
public void onRequestFailed ( final SubredditRequestFailure failureReason ) { onSubredditError ( failureReason . asError ( context ) ) ; }
public static MarkdownPreviewDialog newInstance ( final String markdown ) { final MarkdownPreviewDialog dialog = new MarkdownPreviewDialog ( ) ; final Bundle args = new Bundle ( 1 ) ; args . putString ( "markdown" , markdown ) ; dialog . setArguments ( args ) ; return dialog ; }
public void onCreateOptionsMenu ( final Menu menu ) { }
public boolean onOptionsItemSelected ( final MenuItem item ) { return false ; }
public void setView ( final ImageView view ) { this . view = view ; }
public GifDecoderThread ( final InputStream is , final OnGifLoadedListener listener ) { super ( "GIF playing thread" ) ; this . is = is ; this . listener = listener ; }
public ExtendedDataInputStream ( final InputStream in ) { super ( in ) ; }
public ExtendedDataOutputStream ( final OutputStream out ) { super ( out ) ; }
public PermanentCache ( final CacheDataSource < K , V , F > cacheDataSource ) { this . cacheDataSource = cacheDataSource ; }
private CacheEntry ( final V data ) { this ( data , new WeakReferenceListManager < UpdatedVersionListener < K , V >> ( ) ) ; }
private ReadOperation ( final TimestampBound timestampBound ) { this . timestampBound = timestampBound ; }
public WeakCache ( final CacheDataSource < K , V , F > cacheDataSource ) { this . cacheDataSource = cacheDataSource ; }
private CacheEntry ( final WeakReference < V > data ) { this ( data , new WeakReferenceListManager < UpdatedVersionListener < K , V >> ( ) ) ; }
public WritableHashSet ( final HashSet < String > data , final long timestamp , final String key ) { this . hashSet = data ; this . timestamp = timestamp ; this . key = key ; serialised = listToEscapedString ( hashSet ) ; }
private WritableHashSet ( final String serializedData , final long timestamp , final String key ) { this . timestamp = timestamp ; this . key = key ; serialised = serializedData ; }
public WritableHashSet ( final CreationData creationData ) { this . timestamp = creationData . timestamp ; this . key = creationData . key ; }
public CreationData ( final String key , final long timestamp ) { this . key = key ; this . timestamp = timestamp ; }
public void setSession ( final UUID session ) { mSession = session ; }
public void setSearchString ( final String searchString ) { mSearchString = searchString ; }
public void setSession ( final UUID session ) { this . session = session ; }
private APIResponseHandler ( final AppCompatActivity context ) { this . context = context ; }
private static String getDbFilename ( final String type , final RedditAccount user ) { return General . sha1 ( user . username . getBytes ( ) ) + "_" + type + "_subreddits . db" ; }
public void onRequestFailed ( final SubredditRequestFailure failureReason ) { synchronized ( result ) { if ( stillOkay . get ( ) ) { stillOkay . set ( false ) ; handler . onRequestFailed ( failureReason ) ; } } }
public RedditAPIMultiredditListRequester ( final Context context , final RedditAccount user ) { this . context = context ; this . user = user ; }
public void onRequestFailed ( final SubredditRequestFailure failureReason ) { if ( handler != null ) { handler . onRequestFailed ( failureReason ) ; } }
public void bind ( final RedditPostView boundView ) { mBoundView = boundView ; mChangeDataManager . addListener ( src , this ) ; }
public void unbind ( final RedditPostView boundView ) { if ( mBoundView == boundView ) { mBoundView = null ; mChangeDataManager . removeListener ( src , this ) ; } }
private RPVMenuItem ( final String title , final Action action ) { this . title = title ; this . action = action ; }
private RPVMenuItem ( final Context context , final int titleRes , final Action action ) { this . title = context . getString ( titleRes ) ; this . action = action ; }
public char charAt ( final int index ) { return arr [ start + index ] ; }
public CharArrSubstring left ( final int chars ) { return new CharArrSubstring ( arr , start , chars ) ; }
public CharArrSubstring substring ( final int start ) { return new CharArrSubstring ( arr , this . start + start , length - start ) ; }
public CharArrSubstring substring ( final int start , final int len ) { return new CharArrSubstring ( arr , this . start + start , len ) ; }
public IntArrayLengthPair ( final int capacity ) { this . data = new int [ capacity ] ; }
public int [ ] substringAsArray ( final int start ) { final int [ ] result = new int [ pos - start ] ; System . arraycopy ( data , start , result , 0 , result . length ) ; return result ; }
public Link ( final String title , final String subtitle , final String url ) { this . title = title ; this . subtitle = subtitle ; this . url = url ; }
public static boolean isUnicodeWhitespace ( final int codepoint ) { return unicodeWhitespace . contains ( codepoint ) ; }
public RedditSubreddit ( final CreationData creationData ) { this ( ) ; downloadTime = creationData . timestamp ; }
public RedditSubreddit ( final String url , final String title , final boolean isSortable ) { this . url = url ; this . title = title ; }
public MultiredditPostListURL sort ( final PostSort newOrder ) { return new MultiredditPostListURL ( username , name , newOrder , limit , before , after ) ; }
public String humanReadableName ( final Context context , final boolean shorter ) { if ( username == null ) { return name ; } else { return String . format ( Locale . US , "%s ( %s ) " , name , username ) ; } }
public static PostCommentListingURL forPostId ( final String postId ) { return new PostCommentListingURL ( null , postId , null , null , null , null ) ; }
public PostCommentListingURL after ( final String after ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public PostCommentListingURL limit ( final Integer limit ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public PostCommentListingURL context ( final Integer context ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public static RedditURL parseProbableCommentListing ( final Uri uri ) { final RedditURL matchURL = parse ( uri ) ; if ( matchURL != null ) { return matchURL ; } return new UnknownCommentListURL ( uri ) ; }
public static RedditURLParser . RedditURL getSubreddit ( final String subreddit ) throws InvalidSubredditNameException { return getSubreddit ( new SubredditCanonicalId ( subreddit ) ) ; }
public SubredditPostListURL sort ( final PostSort newOrder ) { return new SubredditPostListURL ( type , subreddit , newOrder , limit , before , after ) ; }
public SubredditPostListURL changeSubreddit ( final String newSubreddit ) { return new SubredditPostListURL ( type , newSubreddit , order , limit , before , after ) ; }
public CommentListingURL after ( final String after ) { return new UnknownCommentListURL ( uri . buildUpon ( ) . appendQueryParameter ( "after" , after ) . build ( ) ) ; }
public PostListingURL after ( final String after ) { return new UnknownPostListURL ( uri . buildUpon ( ) . appendQueryParameter ( "after" , after ) . build ( ) ) ; }
public UserCommentListingURL after ( final String newAfter ) { return new UserCommentListingURL ( user , order , limit , newAfter ) ; }
public UserCommentListingURL limit ( final Integer newLimit ) { return new UserCommentListingURL ( user , order , newLimit , after ) ; }
public static UserPostListingURL getSaved ( final String username ) { return new UserPostListingURL ( Type . SAVED , username , null , null , null , null ) ; }
public static UserPostListingURL getHidden ( final String username ) { return new UserPostListingURL ( Type . HIDDEN , username , null , null , null , null ) ; }
public static UserPostListingURL getLiked ( final String username ) { return new UserPostListingURL ( Type . UPVOTED , username , null , null , null , null ) ; }
public static UserPostListingURL getDisliked ( final String username ) { return new UserPostListingURL ( Type . DOWNVOTED , username , null , null , null , null ) ; }
public static UserPostListingURL getSubmitted ( final String username ) { return new UserPostListingURL ( Type . SUBMITTED , username , null , null , null , null ) ; }
public UserPostListingURL after ( final String newAfter ) { return new UserPostListingURL ( type , user , order , limit , before , newAfter ) ; }
public UserPostListingURL limit ( final Integer newLimit ) { return new UserPostListingURL ( type , user , order , newLimit , before , after ) ; }
public UserPostListingURL sort ( final PostSort newOrder ) { return new UserPostListingURL ( type , user , newOrder , limit , before , after ) ; }
public UserProfileURL ( final String username ) { this . username = username ; }
public String humanReadableName ( final Context context , final boolean shorter ) { return username ; }
private void updateStorageLocationText ( final String path ) { findPreference ( getString ( R . string . pref_cache_location_key ) ) . setSummary ( path ) ; }
public SwipeHistory ( final int len ) { positions = new float [ len ] ; timestamps = new long [ len ] ; }
private int getNthMostRecentIndex ( final int n ) { if ( n >= len || n < 0 ) { throw new ArrayIndexOutOfBoundsException ( n ) ; } return ( start + len - n - 1 ) % positions . length ; }
public SideToolbarOverlay ( final Context context ) { super ( context ) ; }
public void setContents ( final View contents ) { this . contents = contents ; if ( shownPosition != null ) { show ( shownPosition ) ; } }
public void addItem ( final View v ) { buttons . addView ( v ) ; }
public boolean onTouchEvent ( final MotionEvent event ) { mFingerTracker . onTouchEvent ( event ) ; requestRender ( ) ; return true ; }
public void setOverallAlpha ( final float alpha ) { throw new UnsupportedOperationException ( ) ; }
public RRGLRenderableBlend ( final RRGLRenderable entity ) { super ( entity ) ; }
public RRGLRenderableColouredQuad ( final RRGLContext glContext ) { mGLContext = glContext ; }
public void setOverallAlpha ( final float alpha ) { mOverallAlpha = alpha ; }
public final void add ( final RRGLRenderable child ) { mChildren . add ( child ) ; if ( isAdded ( ) ) { child . onAdded ( ) ; } }
public final void remove ( final RRGLRenderable child ) { if ( isAdded ( ) ) { child . onRemoved ( ) ; } mChildren . remove ( child ) ; }
public void onAdded ( ) { if ( ! isAdded ( ) ) { for ( final RRGLRenderable entity : mChildren ) { entity . onAdded ( ) ; } } super . onAdded ( ) ; }
public void onRemoved ( ) { super . onRemoved ( ) ; if ( ! isAdded ( ) ) { for ( final RRGLRenderable entity : mChildren ) { entity . onRemoved ( ) ; } } }
public void setOverallAlpha ( final float alpha ) { for ( int i = 0 ; i < mChildren . size ( ) ; i ++ ) { final RRGLRenderable entity = mChildren . get ( i ) ; entity . setOverallAlpha ( alpha ) ; } }
public void setOverallAlpha ( final float alpha ) { mEntity . setOverallAlpha ( alpha ) ; }
public void setScale ( final float x , final float y ) { mScaleX = x ; mScaleY = y ; }
public RRGLRenderableTexturedQuad ( final RRGLContext glContext , final RRGLTexture texture ) { mGLContext = glContext ; mTexture = texture ; }
public void setTexture ( final RRGLTexture newTexture ) { if ( isAdded ( ) ) { mTexture . releaseReference ( ) ; } mTexture = newTexture ; if ( isAdded ( ) ) { mTexture . addReference ( ) ; } }
public void setPosition ( final float x , final float y ) { mPositionX = x ; mPositionY = y ; }
public void setPosition ( final MutableFloatPoint2D mPositionOffset ) { mPositionX = mPositionOffset . x ; mPositionY = mPositionOffset . y ; }
public RRGLContext ( final Context context ) { mProgramTexture = new RRGLProgramTexture ( ) ; mProgramColour = new RRGLProgramColour ( ) ; mContext = context ; }
public int dpToPixels ( final float dp ) { return General . dpToPixels ( mContext , dp ) ; }
public void activateVertexBuffer ( final FloatBuffer vertexBuffer ) { mProgramCurrent . activateVertexBuffer ( vertexBuffer ) ; }
public void activateUVBuffer ( final FloatBuffer uvBuffer ) { mProgramTexture . activateUVBuffer ( uvBuffer ) ; }
public void drawTriangleStrip ( final int vertices ) { mProgramCurrent . drawTriangleStrip ( vertices ) ; }
public void activateMatrix ( final float [ ] buf , final int offset ) { mProgramCurrent . activateMatrix ( buf , offset ) ; }
public void activatePixelMatrix ( final float [ ] buf , final int offset ) { mPixelMatrix = buf ; mPixelMatrixOffset = offset ; if ( mProgramCurrent != null ) { mProgramCurrent . activatePixelMatrix ( buf , offset ) ; } }
public void setClearColor ( final float r , final float g , final float b , final float a ) { GLES20 . glClearColor ( r , g , b , a ) ; }
public void setViewport ( final int width , final int height ) { GLES20 . glViewport ( 0 , 0 , width , height ) ; }
public RRGLMatrixStack ( final RRGLContext glContext ) { mGLContext = glContext ; setIdentity ( ) ; }
public int pushAndTranslate ( final float offsetX , final float offsetY ) { mTopMatrixPos += 16 ; Matrix . translateM ( mMatrices , mTopMatrixPos , mMatrices , mTopMatrixPos - 16 , offsetX , offsetY , 0 ) ; return mTopMatrixPos - 16 ; }
public int pushAndScale ( final float factorX , final float factorY ) { mTopMatrixPos += 16 ; Matrix . scaleM ( mMatrices , mTopMatrixPos , mMatrices , mTopMatrixPos - 16 , factorX , factorY , 0 ) ; return mTopMatrixPos - 16 ; }
public void scale ( final float factorX , final float factorY , final float factorZ ) { Matrix . scaleM ( mMatrices , mTopMatrixPos , factorX , factorY , factorZ ) ; }
public void activateUVBuffer ( final FloatBuffer uvBuffer ) { GLES20 . glVertexAttribPointer ( mUVDataHandle , 2 , GLES20 . GL_FLOAT , false , 0 , uvBuffer ) ; }
public RRGLProgramVertices ( final String vertexShaderSource , final String fragmentShaderSource ) { super ( vertexShaderSource , fragmentShaderSource ) ; }
public final void drawTriangleStrip ( final int vertices ) { GLES20 . glDrawArrays ( GLES20 . GL_TRIANGLE_STRIP , 0 , vertices ) ; }
public final void activateMatrix ( final float [ ] buf , final int offset ) { GLES20 . glUniformMatrix4fv ( mMatrixUniformHandle , 1 , false , buf , offset ) ; }
public final void activatePixelMatrix ( final float [ ] buf , final int offset ) { GLES20 . glUniformMatrix4fv ( mPixelMatrixUniformHandle , 1 , false , buf , offset ) ; }
public RRGLTexture ( final RRGLContext glContext , final Bitmap bitmap , final boolean smooth ) { mTextureHandle = loadTexture ( bitmap , smooth ) ; mGLContext = glContext ; }
public void getPositionOffset ( final MutableFloatPoint2D result ) { result . set ( mPositionOffset ) ; }
public FingerTracker ( final FingerListener mListener ) { this . mListener = mListener ; for ( int i = 0 ; i < mFingers . length ; i ++ ) { mFingers [ i ] = new Finger ( ) ; } }
public void onTileLoaded ( final int x , final int y , final int sampleSize ) { mRefreshable . refresh ( ) ; }
public void onTileLoaderException ( final Throwable t ) { mListener . onImageViewDLMException ( t ) ; }
public synchronized void setResolution ( final int x , final int y ) { mResX = x ; mResY = y ; }
private NotifyErrorRunnable ( final Throwable mError ) { this . mError = mError ; }
public void enqueue ( final ImageViewTileLoader tile ) { synchronized ( mQueue ) { mQueue . addLast ( tile ) ; mThreads . triggerOne ( ) ; } }
public static int scaleIndexToSampleSize ( final int scaleIndex ) { return 1 << scaleIndex ; }
public static int sampleSizeToScaleIndex ( final int sampleSize ) { return Integer . numberOfTrailingZeros ( sampleSize ) ; }
public void onScrubStart ( final TimeBar timeBar , final long position ) { }
public void onScrubMove ( final TimeBar timeBar , final long position ) { mVideoPlayer . seekTo ( position ) ; }
public void setOnToggledFullscreen ( final ToggledFullscreenCallback callback ) { this . toggledFullscreenCallback = callback ; }
public void onPrepared ( final MediaPlayer mp ) { if ( loadingView != null ) { loadingView . setVisibility ( View . GONE ) ; } }
public void onCompletion ( final MediaPlayer mp ) { onHideCustomView ( ) ; }
public boolean onError ( final MediaPlayer mp , final int what , final int extra ) { return false ; }
public void setWebChromeClient ( final WebChromeClient client ) { getSettings ( ) . setJavaScriptEnabled ( true ) ; if ( client instanceof VideoEnabledWebChromeClient ) { this . videoEnabledWebChromeClient = ( VideoEnabledWebChromeClient ) client ; } super . setWebChromeClient ( client ) ; }
public void loadData ( final String data , final String mimeType , final String encoding ) { addJavascriptInterface ( ) ; super . loadData ( data , mimeType , encoding ) ; }
public void loadUrl ( final String url ) { addJavascriptInterface ( ) ; super . loadUrl ( url ) ; }
public void loadUrl ( final String url , final Map < String , String > additionalHttpHeaders ) { addJavascriptInterface ( ) ; super . loadUrl ( url , additionalHttpHeaders ) ; }
public void onWindowFocusChanged ( final boolean hasWindowFocus ) { try { super . onWindowFocusChanged ( hasWindowFocus ) ; } catch ( final NullPointerException ex ) { Log . e ( "WebView" , "WebView . onWindowFocusChanged" , ex ) ; } }
private ErrorPropertiesDialog ( @ NonNull final RRError error ) { mError = error ; }
public void onBackPressed ( ) { if ( General . onBackPressed ( ) ) { super . onBackPressed ( ) ; } }
public void onBackPressed ( ) { if ( General . onBackPressed ( ) && ! webView . onBackButtonPressed ( ) ) { super . onBackPressed ( ) ; } }
public void onPause ( ) { if ( mIsPaused ) { throw new RuntimeException ( ) ; } mIsPaused = true ; super . onPause ( ) ; if ( surfaceView != null ) { surfaceView . onPause ( ) ; } }
public void cancel ( ) { if ( request != null ) { request . cancel ( ) ; } }
public void onSubscribe ( ) { if ( postListingFragment != null ) { postListingFragment . onSubscribe ( ) ; } }
public void onUnsubscribe ( ) { if ( postListingFragment != null ) { postListingFragment . onUnsubscribe ( ) ; } }
public static int handleShowAsActionIfRoom ( final int showAsAction ) { if ( showAsAction == MenuItem . SHOW_AS_ACTION_IF_ROOM ) { return MenuItem . SHOW_AS_ACTION_ALWAYS ; } return showAsAction ; }
public static synchronized CacheManager getInstance ( final Context context ) { if ( singleton == null ) { singleton = new CacheManager ( context . getApplicationContext ( ) ) ; } return singleton ; }
public static String readNullableString ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) { return null ; } return in . readString ( ) ; }
public static ImageInfo . MediaType readNullableImageInfoMediaType ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) { return null ; } return ImageInfo . MediaType . valueOf ( in . readString ( ) ) ; }
public static Integer readNullableInt ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) { return null ; } return in . readInt ( ) ; }
public static Long readNullableLong ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) { return null ; } return in . readLong ( ) ; }
public static Boolean readNullableBoolean ( final Parcel in ) { final boolean isNull = readBoolean ( in ) ; if ( isNull ) { return null ; } return readBoolean ( in ) ; }
public synchronized E dequeue ( ) { if ( queue . isEmpty ( ) ) { return null ; } final E result = queue . removeFirst ( ) ; set . remove ( result ) ; return result ; }
public void cancel ( ) { if ( mRequest != null ) { mRequest . cancel ( ) ; } }
public synchronized HashSet < String > toHashset ( ) { if ( hashSet != null ) { return hashSet ; } return ( hashSet = new HashSet <> ( escapedStringToList ( serialised ) ) ) ; }
public int countSpacesAtStart ( ) { for ( int i = 0 ; i < length ; i ++ ) { if ( arr [ start + i ] != ' ' ) { return i ; } } return length ; }
public int countSpacesAtEnd ( ) { for ( int i = 0 ; i < length ; i ++ ) { if ( arr [ start + length - 1 - i ] != ' ' ) { return i ; } } return length ; }
public final void startRender ( final RRGLMatrixStack stack , final long time ) { if ( mVisible ) { renderInternal ( stack , time ) ; } }
public String humanReadableName ( final Context context , final boolean shorter ) { return humanReadablePath ( ) ; }
public void onSuccess ( @ NonNull final AlbumInfo info ) { AndroidCommon . UI_THREAD_HANDLER . post ( ( ) -> { mAlbumInfo = info ; mAlbumImageIndex = intent . getIntExtra ( "albumImageIndex" , 0 ) ; } ) ; }
public void onSuccess ( @ NonNull final AlbumInfo info ) { mListener . onSuccess ( info ) ; }
public BodyElement getSelfText ( ) { return mSelfText ; }
public void onRedditAccountChanged ( ) { recreateSubscriptionListener ( ) ; postInvalidateOptionsMenu ( ) ; requestRefresh ( RefreshableFragment . ALL , false ) ; }
public void onTaskSuccess ( String s ) { inventoryTask . getXMLSyn ( ) ; presenter . sendInventory ( s , Utils . loadJsonHeader ( s ) ) ; }
public void onFailure ( @ NotNull Call < ResponseBody > call , @ NotNull Throwable t ) { if ( callBack != null ) { callBack . onFailure ( NETWORK_ERROR , t ) ; } }
public void onFailure ( @ NotNull Call < List < CourseSection >> call , @ NotNull Throwable t ) { if ( callBack != null ) { callBack . onFailure ( t . getMessage ( ) , t ) ; } }
public void onFailure ( @ NotNull Call < ForumData > call , @ NotNull Throwable t ) { if ( callBack != null ) { callBack . onFailure ( NETWORK_ERROR , t ) ; } }
public void unregisterReceiver ( ) { fileManager . unregisterDownloadReceiver ( ) ; }
public void setShowZoneBackground ( boolean showBackground ) { this . showZoneBackground = showBackground ; drawZones ( ) ; drawBgAtlasCells ( ) ; }
public EntryMapMarker ( String title , double latitude , double longitude , long id , EntryType entryType ) { this . title = title ; this . latitude = latitude ; this . longitude = longitude ; this . id = id ; this . entryType = entryType ; }
public MarkerHolder ( EntryMapMarker mapMarker , Marker marker ) { this . mapMarker = mapMarker ; this . marker = marker ; }
public static void openScreenshotPermissionRequester ( Context context ) { final Intent intent = new Intent ( context , AcquireScreenshotPermission . class ) ; intent . addFlags ( FLAG_ACTIVITY_NEW_TASK ) ; intent . putExtra ( AcquireScreenshotPermission . EXTRA_REQUEST_PERMISSION_SCREENSHOT , true ) ; context . startActivity ( intent ) ; }
public void onStartTrackingTouch ( SeekBar seekBar ) { handler . removeCallbacks ( syncUserInterfaceInterval ) ; }
public static @ NonNull < T > T checkNotNull ( T reference ) { if ( reference == null ) { throw new NullPointerException ( ) ; } return reference ; }
public boolean onKeyDown ( int keyCode , @ NonNull KeyEvent event ) { if ( mAlert . onKeyDown ( keyCode , event ) ) { return true ; } return super . onKeyDown ( keyCode , event ) ; }
public boolean onKeyUp ( int keyCode , @ NonNull KeyEvent event ) { if ( mAlert . onKeyUp ( keyCode , event ) ) { return true ; } return super . onKeyUp ( keyCode , event ) ; }
public static @ NonNull DynamicDialogFragment newInstance ( ) { return new DynamicDialogFragment ( ) ; }
public static boolean isSystem ( String packageName , Context context ) { if ( ! cacheSystem . containsKey ( packageName ) ) cacheSystem . put ( packageName , Util . isSystem ( packageName , context ) ) ; return cacheSystem . get ( packageName ) ; }
public void set ( List < TrackerCategory > items ) { mValues = items ; notifyDataSetChanged ( ) ; }
private TrackerCategory getItem ( int position ) { return mValues . get ( position - 1 ) ; }
public void onClick ( View view ) { check_password_validity ( ) ; }
public void onResume ( ) { Log . i ( TAG , "onResume" ) ; super . onResume ( ) ; global_showing_anygroupview = true ; MainActivity . conference_message_list_fragment = this ; }
private void setupCallback ( int bufferSize ) { for ( int i = 0 ; i < CAMPREVIEW_NUM_BUFFERS ; ++ i ) { byte [ ] cameraBuffer = new byte [ bufferSize ] ; mCamera . addCallbackBuffer ( cameraBuffer ) ; } }
private ParameterizedRunnable taskFromSimpleTask ( SimpleTask simpleTask ) { if ( simpleTask == null ) { Log . d ( tag , "taskFromActionRequest ( ) request is null" ) ; return null ; } return simpleTask : : run ; }
public static void postEvent ( Object event ) { bus ( ) . post ( event ) ; }
public static void postStickyEvent ( Object event ) { bus ( ) . postSticky ( event ) ; }
public static void removeStickyEvent ( Object event ) { bus ( ) . removeStickyEvent ( event ) ; }
public static String getWallabagUrl ( ) { if ( wallabagUrl == null ) { wallabagUrl = App . getSettings ( ) . getUrl ( ) ; } return wallabagUrl ; }
public Result loadImage ( int articleId , String imageUrl ) { return loadImage ( articleId , imageUrl , App . getSettings ( ) . isImageCacheEnabled ( ) ) ; }
public static void init ( ) { Themes . theme = App . getSettings ( ) . getTheme ( ) ; }
public void onClick ( DialogInterface dialogInterface , int i ) { OperationsHelper . wipeDB ( App . getSettings ( ) ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . list_item , parent , false ) ; return new ViewHolder ( view , listener ) ; }
public static void sortTagListByLabel ( List < Tag > list ) { Collections . sort ( list , LABEL_COMPARATOR ) ; }
public ArticleUpdater . UpdateType getUpdateType ( ) { return updateType ; }
public void setUpdateType ( ArticleUpdater . UpdateType updateType ) { this . updateType = updateType ; }
private ArticleDao getArticleDao ( ) { return getDaoSession ( ) . getArticleDao ( ) ; }
public static TtsFragment newInstance ( boolean autoplay ) { TtsFragment fragment = new TtsFragment ( ) ; Bundle args = new Bundle ( ) ; args . putBoolean ( PARAM_AUTOPLAY , autoplay ) ; fragment . setArguments ( args ) ; return fragment ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { textViewTtsSpeed . setText ( percentFormat . format ( getSpeedBarValue ( ) ) ) ; if ( ! isTouchTracking ) { ttsSetSpeedFromSeekBar ( ) ; } }
public void onStartTrackingTouch ( SeekBar seekBar ) { initialProgress = seekBarTtsSpeed . getProgress ( ) ; isTouchTracking = true ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { isTouchTracking = false ; if ( seekBarTtsSpeed . getProgress ( ) != initialProgress ) { ttsSetSpeedFromSeekBar ( ) ; } }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { textViewTtsPitch . setText ( percentFormat . format ( getPitchBarValue ( ) ) ) ; if ( ! isTouchTracking ) { ttsSetPitchFromSeekBar ( ) ; } }
public void onStartTrackingTouch ( SeekBar seekBar ) { initialProgress = seekBarTtsPitch . getProgress ( ) ; isTouchTracking = true ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { isTouchTracking = false ; if ( seekBarTtsPitch . getProgress ( ) != initialProgress ) { ttsSetPitchFromSeekBar ( ) ; } }
public boolean onMediaButtonEvent ( @ NonNull Intent mediaButtonIntent ) { Log . d ( TAG , "MediaSessionCompat . Callback . onMediaButtonEvent ( ) " + mediaButtonIntent ) ; return super . onMediaButtonEvent ( mediaButtonIntent ) ; }
private void skipToNextCmd ( ) { if ( textInterface != null ) { textInterface . skipToNext ( ) ; } }
public void playPageFlipSound ( ) { mediaPlayerPageFlip . start ( ) ; }
public synchronized void restoreFromStart ( ) { Log . d ( TAG , "restoreFromStart -> current = 0" ) ; current = 0 ; }
public synchronized long getTime ( ) { long result = - 1 ; if ( current > 0 ) { result = textList . get ( current - 1 ) . timePosition ; } return result ; }
public void onRecyclerViewListSwipeUpdate ( ) { updateArticles ( true , ArticleUpdater . UpdateType . FAST ) ; }
private void fullUpdate ( boolean showErrors ) { updateArticles ( showErrors , ArticleUpdater . UpdateType . FULL ) ; }
private Article getArticle ( long articleId ) { return articleDao . queryBuilder ( ) . where ( ArticleDao . Properties . Id . eq ( articleId ) ) . unique ( ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; Log . v ( TAG , "onAttach ( ) " ) ; if ( context instanceof OnFragmentInteractionListener ) { host = ( OnFragmentInteractionListener ) context ; } }
public void onError ( String utteranceId ) { Log . w ( TAG , "utteranceProgressListener . onError ( ) " + utteranceId ) ; resetCurrentItemProgress ( ) ; onSpeakDoneListener ( utteranceId ) ; }
public void onStop ( String utteranceId , boolean interrupted ) { Log . d ( TAG , "utteranceProgressListener . onStop ( ) " + utteranceId + " , " + interrupted ) ; resetCurrentItemProgress ( ) ; onSpeakDoneListener ( utteranceId ) ; }
private void setTextAndMetadataToService ( ) { Log . v ( TAG , "setTextAndMetadataToService ( ) " ) ; if ( ttsService != null ) { ttsService . setTextInterface ( webViewText , articleId , artist , title , METADATA_ALBUM , previewPicture ) ; } }
public void onText ( String text , String topString , String bottomString , String extras ) { post ( ( ) -> webViewText . onDocumentParseText ( text , Float . parseFloat ( topString ) , Float . parseFloat ( bottomString ) , extras ) ) ; }
public void onDestroy ( ) { Log . d ( tag , "onDestroy ( ) " ) ; running = false ; if ( taskThread != null ) { taskThread . interrupt ( ) ; } }
public IBinder onBind ( Intent intent ) { Log . d ( tag , "onBind ( ) " ) ; return new TaskServiceBinder ( ) ; }
public boolean onUnbind ( Intent intent ) { Log . d ( tag , "onUnbind ( ) " ) ; return true ; }
public void onRebind ( Intent intent ) { Log . d ( tag , "onRebind ( ) " ) ; }
public Set < String > getTagIds ( ) { return new HashSet <> ( Arrays . asList ( queueItem . getExtra ( ) . split ( DELIMITER ) ) ) ; }
public ArticleTagsDeleteItem setTagIds ( Iterable < String > tagIds ) { queueItem . setExtra ( TextUtils . join ( DELIMITER , tagIds ) ) ; return this ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeLong ( ( int ) this . id ) ; dest . writeString ( this . name ) ; dest . writeInt ( this . songCount ) ; }
public float getDistanceFromCenter ( Point center , float viewCenterX , float viewCenterY ) { return viewCenterX - center . x ; }
public float getDistanceFromCenter ( Point center , float viewCenterX , float viewCenterY ) { return viewCenterY - center . y ; }
public void onItemsChanged ( @ NonNull RecyclerView recyclerView ) { currentPosition = Math . min ( Math . max ( 0 , currentPosition ) , recyclerViewProxy . getItemCount ( ) - 1 ) ; dataSetChangeShiftedPosition = true ; }
public int computeVerticalScrollRange ( @ NonNull RecyclerView . State state ) { return computeScrollRange ( state ) ; }
public int computeVerticalScrollOffset ( @ NonNull RecyclerView . State state ) { return computeScrollOffset ( state ) ; }
public int computeVerticalScrollExtent ( @ NonNull RecyclerView . State state ) { return computeScrollExtent ( state ) ; }
public int computeHorizontalScrollRange ( @ NonNull RecyclerView . State state ) { return computeScrollRange ( state ) ; }
public int computeHorizontalScrollOffset ( @ NonNull RecyclerView . State state ) { return computeScrollOffset ( state ) ; }
public int computeHorizontalScrollExtent ( @ NonNull RecyclerView . State state ) { return computeScrollExtent ( state ) ; }
private int computeScrollRange ( RecyclerView . State state ) { if ( state . getItemCount ( ) == 0 ) { return 0 ; } else { return scrollToChangeCurrent * ( state . getItemCount ( ) - 1 ) ; } }
public boolean equals ( Object obj ) { if ( obj instanceof ScrollListenerAdapter ) { return adaptee . equals ( ( ( ScrollListenerAdapter < ? > ) obj ) . adaptee ) ; } else { return super . equals ( obj ) ; } }
public ViewHolder ( View itemView ) { super ( itemView ) ; image = itemView . findViewById ( R . id . image ) ; overlay = itemView . findViewById ( R . id . overlay ) ; }
public ViewHolder ( View itemView ) { super ( itemView ) ; image = itemView . findViewById ( R . id . image ) ; }
public void onDataChange ( DataSnapshot dataSnapshot ) { reflectionUrls = processReflectionsUrls ( dataSnapshot , epoch ) ; listener . onDataChange ( dataSnapshot ) ; }
public void OnFetchComplete ( Calendar startDate , int expectedSamples , List < Integer > steps ) { insertIntradayStepsToRepo ( startDate , steps ) ; }
private void doHandleFetchingSuccess ( Fragment fragment ) { try { this . doProcessFitnessChallenge ( fragment ) ; this . initializeFitnessSync ( fragment ) ; } catch ( ChallengeDoesNotExistsException e ) { Log . e ( LOG_TAG , "Fitness challenge does not exist" ) ; } }
private void loadResponseUris ( ) { responseManager . getReflectionUrlsFromFirebase ( this . reflectionMinEpoch , new ValueEventListener ( ) { @ Override public void onDataChange ( DataSnapshot dataSnapshot ) { initStoryContentFragments ( ) ; } @ Override public void onCancelled ( DatabaseError databaseError ) { } } ) ; }
private static boolean isAvailableChallengesExists ( AvailableChallengesInterface challenges ) { return challenges != null && challenges instanceof IndividualizedChallenges ; }
private boolean isChallengesLoaded ( ) { return this . availableChallenges != null ; }
public void onSuccess ( ) { doCompleteOneBtDevice ( storywellPerson , missingMinutes ) ; }
public void onCancelled ( DatabaseError databaseError ) { new LoadChallengesAsync ( defaultsStepsAvg ) . execute ( ) ; }
public float getAdultProgress ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException , FitnessException { if ( this . isDemoMode ) { return DEMO_ADULT_PROGRESS ; } return getPersonProgress ( Person . ROLE_PARENT , dateToVisualize ) ; }
public float getChildProgress ( ) throws ChallengeDoesNotExistsException , PersonDoesNotExistException , FitnessException { if ( this . isDemoMode ) { return DEMO_CHILD_PROGRESS ; } return getPersonProgress ( Person . ROLE_CHILD , dateToVisualize ) ; }
private static ScanFilter getScanFilterWithAddress ( String address ) { ScanFilter . Builder builder = new ScanFilter . Builder ( ) ; builder . setDeviceName ( MiBand . DEVICE_NAME_2 ) ; builder . setDeviceAddress ( address ) ; return builder . build ( ) ; }
private void startDelayedFetch ( ) { if ( this . dataFetchRunnable != null ) { this . handler . removeCallbacks ( this . dataFetchRunnable ) ; } this . handler . postDelayed ( this . dataFetchRunnable , BTLE_DELAY_MODERATE ) ; }
public String text ( ) { return new AraPopUps ( ) . getDialogValueBack ( MainActivity . this , "edit state value" ) ; }
public void callBack ( @ NotNull String m , @ NotNull String link ) { new AraPopUps ( ) . textSearchResponse ( this , m , link , this , this , recyclerView ) ; }
public ArrayList < NewsData > news ( String jsontxt ) { Gson gson = new Gson ( ) ; return gson . fromJson ( jsontxt , new TypeToken < ArrayList < NewsData >> ( ) { } . getType ( ) ) ; }
public ArrayList < HaModel > iot ( String jsontxt ) { Gson gson = new Gson ( ) ; return gson . fromJson ( jsontxt , new TypeToken < ArrayList < HaModel >> ( ) { } . getType ( ) ) ; }
private void popBackStack ( FragmentManager manager ) { mDisposable . dispose ( ) ; FragmentManager . BackStackEntry first = manager . getBackStackEntryAt ( 0 ) ; manager . popBackStack ( first . getId ( ) , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public static OpenWeatherDataClouds fromString ( String value ) { Type listType = new TypeToken < OpenWeatherDataClouds > ( ) { } . getType ( ) ; return new Gson ( ) . fromJson ( value , listType ) ; }
public static String fromOpenWeatherDataCoords ( OpenWeatherDataCoords data ) { Gson gson = new Gson ( ) ; return gson . toJson ( data ) ; }
public static OpenWeatherDataWind fromString ( String value ) { Type listType = new TypeToken < OpenWeatherDataWind > ( ) { } . getType ( ) ; return new Gson ( ) . fromJson ( value , listType ) ; }
public void onJumpToPageInDocument ( final int selected_page ) { if ( selected_page >= 1 && selected_page <= mNumPages && mPage != selected_page ) { mPage = selected_page ; renderPage ( 0 ) ; showPageNumber ( ) ; invalidateOptionsMenu ( ) ; } }
public void onZoomIn ( float value ) { zoomIn ( value , false ) ; }
public void onZoomOut ( float value ) { zoomOut ( value , false ) ; }
private void documentOrientationChanged ( final int orientationDegreesOffset ) { mDocumentOrientationDegrees = ( mDocumentOrientationDegrees + orientationDegreesOffset ) % 360 ; if ( mDocumentOrientationDegrees < 0 ) { mDocumentOrientationDegrees += 360 ; } renderPage ( 0 ) ; }
private void zoomEnd ( ) { renderPage ( 1 ) ; }
public boolean onGenericMotionEvent ( MotionEvent motionEvent ) { if ( mainWrappers == null || ! mainWrappers . isInit ( ) || ! useController ) return super . onGenericMotionEvent ( motionEvent ) ; return controls . onMotionEvent ( motionEvent ) || super . onGenericMotionEvent ( motionEvent ) ; }
public void onSurfaceCreated ( EGLConfig config ) { mainWrappers . init ( ) ; controls = new GamePad ( getContext ( ) , mainWrappers . getLevelPtr ( ) ) ; }
public Flowable < List < AppItem >> getAll ( ) { return appItemDao . getAll ( new MutableSortSQLiteQuery ( this , orderTerms ) ) ; }
public void insert ( AppItem item ) { Completable . fromAction ( ( ) -> appItemDao . insert ( item ) ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( errorObserver ) ; }
public void update ( AppItem item ) { Completable . fromAction ( ( ) -> appItemDao . update ( item ) ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( errorObserver ) ; }
public void deleteAll ( ) { Completable . fromAction ( appItemDao : : deleteAll ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( errorObserver ) ; }
private static void initDirs ( String path ) { emulatorDir = path ; dataDir = emulatorDir + MIDLET_DATA_DIR ; configsDir = emulatorDir + MIDLET_CONFIGS_DIR ; profilesDir = emulatorDir + "/templates/" ; appDir = emulatorDir + "/converted/" ; }
public static SaveProfileAlert getInstance ( String parent ) { SaveProfileAlert saveProfileAlert = new SaveProfileAlert ( ) ; Bundle bundleSave = new Bundle ( ) ; bundleSave . putString ( KEY_CONFIG_PATH , parent ) ; saveProfileAlert . setArguments ( bundleSave ) ; return saveProfileAlert ; }
public void process ( ) { if ( listener != null ) { list . setOnCreateContextMenuListener ( List . this : : onCreateContextMenu ) ; } else { list . setLongClickable ( false ) ; } }
public synchronized int getSelectedIndex ( ) { return selectedIndex ; }
public void clearScreenView ( ) { list = null ; }
public CompoundItem ( String stringPart , Image imagePart ) { this . text = stringPart ; this . icon = imagePart ; }
public boolean isDirectory ( ) { throwClosed ( ) ; return file . isDirectory ( ) ; }
public Enumeration < String > list ( ) throws IOException { return this . list ( null , false ) ; }
public Enumeration < String > list ( final String filter , final boolean includeHidden ) throws IOException { throwClosed ( ) ; return listPrivileged ( filter , includeHidden ) ; }
private void throwOpenDirectory ( ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Unable to open Stream on directory" ) ; } }
public void close ( ) throws IOException { FileSystemFileConnection . this . openedInputStream = null ; super . close ( ) ; }
public void close ( ) throws IOException { FileSystemFileConnection . this . openedOutputStream = null ; super . close ( ) ; }
public void setWritable ( boolean writable ) throws IOException { throwClosed ( ) ; if ( writable ) { file . setWritable ( true ) ; } else { file . setReadOnly ( ) ; } }
public static String getShadersDir ( ) { return emulatorDir + SHADERS_DIR ; }
public int getVersion ( ) throws RecordStoreNotOpenException { if ( ! open ) { throw new RecordStoreNotOpenException ( ) ; } synchronized ( records ) { return version ; } }
public long getLastModified ( ) throws RecordStoreNotOpenException { if ( ! open ) { throw new RecordStoreNotOpenException ( ) ; } synchronized ( records ) { return lastModified ; } }
public static void deleteRecordStore ( String recordStoreName ) throws RecordStoreException { recordStoreManager . deleteRecordStore ( recordStoreName ) ; }
public static RecordStore openRecordStore ( String recordStoreName , boolean createIfNecessary ) throws RecordStoreException { return recordStoreManager . openRecordStore ( recordStoreName , createIfNecessary ) ; }
public void deleteRecord ( RecordStoreImpl recordStoreImpl , int recordId ) throws RecordStoreException { deleteFromDisk ( recordStoreImpl , recordId ) ; }
public void saveRecord ( RecordStoreImpl recordStoreImpl , int recordId ) throws RecordStoreException { saveToDisk ( recordStoreImpl , recordId ) ; }
public void onOk ( AmbilWarnaDialog dialog , int color ) { et . setText ( String . format ( "%06X" , color & 0xFFFFFF ) ) ; ColorDrawable drawable = ( ColorDrawable ) et . getCompoundDrawablesRelative ( ) [ 2 ] ; drawable . setColor ( color ) ; }
public void drawImage ( Image image , RectF dst ) { Bitmap bitmap = image . getBitmap ( ) ; bitmap . prepareToDraw ( ) ; canvas . drawBitmap ( bitmap , image . getBounds ( ) , dst , imgPaint ) ; }
public int getClipX ( ) { return clip . left ; }
public int getClipY ( ) { return clip . top ; }
public int getClipWidth ( ) { return clip . width ( ) ; }
public int getClipHeight ( ) { return clip . height ( ) ; }
public AffineTrans getAffineTrans ( ) { return this . myAffineNow ; }
public Vector3D getDirection ( ) { return getParallelLightDirection ( ) ; }
public static synchronized DeviceControl getDefaultDeviceControl ( ) { if ( instance == null ) { instance = new DeviceControl ( ) ; } return instance ; }
public void setStrokeStyle ( int stroke ) { this . stroke = stroke ; if ( stroke == DOTTED ) { drawPaint . setPathEffect ( dashPathEffect ) ; } else { drawPaint . setPathEffect ( null ) ; } }
public void drawRect ( int x , int y , int width , int height ) { if ( width < 0 || height < 0 ) return ; canvas . drawRect ( x , y , x + width , y + height , drawPaint ) ; }
public File getDir ( ) { return new File ( Config . getProfilesDir ( ) , name ) ; }
public String getPathExt ( ) { return Config . getAppDir ( ) + path ; }
public boolean renameTo ( String newName ) { File oldDir = getDir ( ) ; File newDir = new File ( Config . getProfilesDir ( ) , newName ) ; name = newName ; return oldDir . renameTo ( newDir ) ; }
public File getConfig ( ) { return new File ( Config . getProfilesDir ( ) , name + Config . MIDLET_CONFIG_FILE ) ; }
public File getKeyLayout ( ) { return new File ( Config . getProfilesDir ( ) , name + Config . MIDLET_KEY_LAYOUT_FILE ) ; }
public Profile getItem ( int position ) { return list . get ( position ) ; }
public ConnectionListener getListener ( ) { return mListener ; }
private static int readVersion ( File file ) throws IOException { int version ; try ( FileInputStream in = new FileInputStream ( file ) ) { version = in . read ( ) ; } return version ; }
public final void repaint ( int x , int y , int width , int height ) { limitFps ( ) ; Display . postEvent ( paintEvent ) ; }
public void callSerially ( Runnable r ) { postEvent ( RunnableEvent . getInstance ( r ) ) ; }
public void fireCommandAction ( Command c , Displayable d ) { if ( listener != null ) { Display . postEvent ( CommandActionEvent . getInstance ( listener , c , d ) ) ; } }
public void fireDefaultCommandAction ( ) { if ( defaultCommand != null ) { Display . postEvent ( CommandActionEvent . getInstance ( listener , defaultCommand , this ) ) ; } }
public static File getCacheDir ( ) { return getAppContext ( ) . getExternalCacheDir ( ) ; }
public static Display getDisplay ( MIDlet midlet ) { if ( instance == null && midlet != null ) { instance = new Display ( ) ; } return instance ; }
public void onBackPressed ( ) { if ( currentFragment == null || currentFragment . isBackTop ( ) ) { super . onBackPressed ( ) ; } else { currentFragment . goBack ( ) ; } }
public void drawPolygon ( int [ ] xPoints , int xOffset , int [ ] yPoints , int yOffset , int nPoints , int argbColor ) { setARGBColor ( argbColor ) ; graphics . drawPolygon ( xPoints , xOffset , yPoints , yOffset , nPoints ) ; }
public void fillPolygon ( int [ ] xPoints , int xOffset , int [ ] yPoints , int yOffset , int nPoints , int argbColor ) { setARGBColor ( argbColor ) ; graphics . fillPolygon ( xPoints , xOffset , yPoints , yOffset , nPoints ) ; }
public static void initProps ( Map < String , String > p ) { properties = p ; }
public DeviceClass ( int record ) { if ( ( record & 0xff000000 ) != 0 ) throw new IllegalArgumentException ( ) ; this . record = record ; }
public DiscoveryAgent getDiscoveryAgent ( ) { return agent ; }
public AndroidPlayer ( ) { super ( ) ; this . leftVolume = 1 . 0f ; this . rightVolume = 1 . 0f ; }
public synchronized void close ( ) { if ( state != CLOSED ) { player . release ( ) ; } source . disconnect ( ) ; state = CLOSED ; postEvent ( PlayerListener . CLOSED , null ) ; }
public void clearDisplayableView ( ) { synchronized ( paintSync ) { super . clearDisplayableView ( ) ; layout = null ; innerView = null ; } }
public void setCurrent ( Displayable displayable ) { current = displayable ; ViewHandler . postEvent ( msgSetCurrent ) ; }
public ReportSender create ( @ NonNull Context context , @ NonNull CoreConfiguration config ) { return new AppCenterSender ( ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( Cam . this , ShowOnBoarding . class ) ; startActivity ( intent ) ; finish ( ) ; }
public void onPermissionGranted ( ) { startActivity ( new Intent ( MainActivity . this , OnBoarding . class ) ) ; }
public void onClick ( KAlertDialog kAlertDialog ) { if ( WIFI_Manger . isWifiEnabled ( ) == true ) { kAlertDialog . cancel ( ) ; WIFI_Connected ( ) ; } }
public void onClick ( KAlertDialog kAlertDialog ) { Intent intent = new Intent ( Settings . ACTION_LOCATION_SOURCE_SETTINGS ) ; intent . addCategory ( Intent . CATEGORY_DEFAULT ) ; startActivity ( intent ) ; kAlertDialog . cancel ( ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; storeCorrectAnswers ( noOfQuestions ) ; }
public void setUp ( ) { MockitoAnnotations . openMocks ( this ) ; eventCreatePresenter . attachView ( eventCreateView ) ; }
public void setUp ( ) { MockitoAnnotations . openMocks ( this ) ; eventEditPresenter . attachView ( eventEditView ) ; }
public void setUp ( ) { MockitoAnnotations . openMocks ( this ) ; eventListPresenter . attachView ( eventListView ) ; loadEventsAndVerify ( ) ; }
public void setUp ( ) { MockitoAnnotations . openMocks ( this ) ; tagCreatePresenter . attachView ( tagCreateView ) ; }
public void setUp ( ) { MockitoAnnotations . openMocks ( this ) ; tagEditPresenter . attachView ( tagEditView ) ; }
public void setUp ( ) { MockitoAnnotations . openMocks ( this ) ; }
public void setUp ( ) { today = new LocalDate ( ) . withDayOfMonth ( 1 ) . withMonthOfYear ( 1 ) . withYear ( 2000 ) ; MockitoAnnotations . openMocks ( this ) ; }
public void setUp ( ) { today = new LocalDate ( 2000 , 1 , 1 ) ; now = new DateTime ( ) . withDate ( today ) . withTime ( 0 , 0 , 0 , 0 ) ; MockitoAnnotations . openMocks ( this ) ; }
public void updateSuccessfully ( EventViewModel event ) { adapter . updateItem ( event ) ; updateWidget ( ) ; showSnackbarMessage ( recyclerView , R . string . msg_event_updated ) ; }
public void dateResetSuccessfully ( EventViewModel event ) { adapter . updateItem ( event ) ; updateWidget ( ) ; }
private void createAdapter ( ) { Comparator < EventSortable > comparator = getEventSortableComparator ( ) ; adapter = new EventListAdapter ( comparator , eventPeriodFormat , eventProgressCalculator , this ) ; }
public EventBuilder setId ( @ Nullable String id ) { this . id = id ; return this ; }
public EventBuilder setName ( @ NotNull String name ) { this . name = name ; return this ; }
public EventBuilder setDescription ( @ Nullable String description ) { this . description = description ; return this ; }
public EventBuilder setDate ( @ Nullable Date date ) { this . date = date ; return this ; }
public EventBuilder setTags ( @ NotNull String [ ] tags ) { this . tags = tags ; return this ; }
public EventBuilder setReminder ( @ Nullable Integer reminder ) { this . reminder = reminder ; return this ; }
public EventBuilder setTimeLapseUnit ( @ NotNull TimeUnit timeLapseUnit ) { this . timeLapseUnit = timeLapseUnit ; return this ; }
public EventBuilder setProgressDate ( @ Nullable Date progressDate ) { this . progressDate = progressDate ; return this ; }
public Event build ( ) { return new Event ( id , name , description , date , tags , favorite , reminder , reminderUnit , timeLapse , timeLapseUnit , progressDate ) ; }
public void formatDate_WhenUseDate_ReturnFormattedDate ( ) { String result = DateUtils . formatDate ( localDate . toDate ( ) ) ; assertThat ( result ) . isEqualTo ( "Feb 15 , 2018" ) ; }
public void selectTags ( ) { selectTagsHelper . showSelectTagsDialog ( fragmentManager , message -> view . showError ( message ) ) ; }
public void selectReminder ( ) { selectPeriodHelper . showSelectReminderDialog ( fragmentManager , modifiedEvent , ( period , timeUnit ) -> { modifiedEvent . setReminder ( period ) ; modifiedEvent . setReminderUnit ( timeUnit ) ; formatAndShowReminderText ( ) ; } ) ; }
public void selectTimeLapseReset ( ) { selectPeriodHelper . showSelectTimeLapseResetDialog ( fragmentManager , modifiedEvent , ( period , timeUnit ) -> { modifiedEvent . setTimeLapse ( period ) ; modifiedEvent . setTimeLapseUnit ( timeUnit ) ; formatAndShowTimeLapseReset ( ) ; } ) ; }
private void selectTags ( ) { editEventHelper . selectTags ( ) ; }
private void selectReminder ( ) { editEventHelper . selectReminder ( ) ; }
private void selectTimeLapseReset ( ) { editEventHelper . selectTimeLapseReset ( ) ; }
public String getPhaseToNumber ( ) { return PhaseNumber . phaseToNumber ( this . phase , "" ) . getPhaseNumber ( ) ; }
public static boolean isDarkThemeForced ( Context context ) { Theme currentTheme = getCurrentTheme ( context ) ; return currentTheme == DARK ; }
public SparseArray < float [ ] [ ] [ ] > getStripImageMap ( ) { return this . stripImageMap ; }
public static boolean isTestMode ( ) { return BuildConfig . TEST_RUNNING || ( isDiagnosticMode ( ) && PreferencesUtil . getBoolean ( CaddisflyApp . getApp ( ) , R . string . testModeOnKey , false ) ) ; }
public static boolean analyticsEnabled ( ) { return ! BuildConfig . TEST_RUNNING && ! BuildConfig . DEBUG ; }
public short getValueAsShort ( ) throws ScriptingExceptions . ChameleonScriptingException { int int32Value = getValueAsInt ( ) ; return ( short ) ( int32Value & 0x0000ffff ) ; }
public byte getValueAsByte ( ) throws ScriptingExceptions . ChameleonScriptingException { int int32Value = getValueAsInt ( ) ; return ( byte ) ( int32Value & 0x000000ff ) ; }
public static ScriptVariable parseRawString ( String literalText ) throws ScriptingExceptions . ChameleonScriptingException { literalText . replace ( "\\" , "\\\\" ) ; ScriptVariable nextVar = new ScriptVariable ( ) ; nextVar . set ( literalText ) ; return nextVar ; }
public ScriptVariable set ( int nextValue ) { varValueAsInt = nextValue ; varType = VariableType . VariableTypeInteger ; varIsInit = true ; return this ; }
public ScriptVariable set ( String nextValue ) { varValueAsString = nextValue ; varType = VariableType . VariableTypeAsciiString ; varIsInit = true ; return this ; }
public ScriptVariable set ( boolean nextValue ) { varValueAsBoolean = nextValue ; varType = VariableType . VariableTypeBoolean ; varIsInit = true ; return this ; }
public boolean isBooleanType ( ) { switch ( varType ) { case VariableTypeBoolean : case VariableTypeInteger : return true ; default : return false ; } }
public boolean isBytesType ( ) { return varType == VariableType . VariableTypeBytes ; }
public boolean isStringType ( ) { switch ( varType ) { case VariableTypeHexString : case VariableTypeAsciiString : case VariableTypeStorageFilePath : return true ; default : return false ; } }
public boolean isFilePathType ( ) { switch ( varType ) { case VariableTypeRawFileFilePath : case VariableTypeStorageFilePath : return true ; default : return false ; } }
public static void displayAndroidBluetoothSettings ( ) { Intent intentOpenBluetoothSettings = new Intent ( ) ; intentOpenBluetoothSettings . setAction ( android . provider . Settings . ACTION_BLUETOOTH_SETTINGS ) ; LiveLoggerActivity . getLiveLoggerInstance ( ) . startActivity ( intentOpenBluetoothSettings ) ; }
public static int getThemeColorVariant ( int attrID ) { return LiveLoggerActivity . getLiveLoggerInstance ( ) . getTheme ( ) . obtainStyledAttributes ( new int [ ] { attrID } ) . getColor ( 0 , attrID ) ; }
public BluetoothSerialInterface ( Context appContext ) { notifyContext = appContext ; activeDevice = null ; btGattConnectorBLEDevice = new BluetoothGattConnector ( notifyContext ) ; btGattConnectorBLEDevice . setBluetoothSerialInterface ( this ) ; baudRate = ChameleonSettings . serialBaudRate ; serialConfigured = false ; receiversRegistered = false ; }
public int setSerialBaudRate ( int brate ) { baudRate = brate ; ChameleonSettings . serialBaudRate = baudRate ; return baudRate ; }
public void run ( ) { if ( ChameleonSettings . getActiveSerialIOPort ( ) == null || ! ChameleonLogUtils . CONFIG_ENABLE_LIVE_TOOLBAR_STATUS_UPDATES ) { statsUpdateHandler . removeCallbacksAndMessages ( this ) ; postingStatsInProgress = false ; } else { updateAllStatusAndPost ( true ) ; } }
public void actionButtonUploadCard ( View view ) { if ( ChameleonSettings . getActiveSerialIOPort ( ) == null ) return ; ChameleonCommands . uploadCardImageByXModem ( ) ; }
public SerialUSBInterface ( Context context ) { notifyContext = context ; serialPort = null ; baudRate = ChameleonSettings . serialBaudRate ; serialConfigured = false ; receiversRegistered = false ; }
public int setSerialBaudRate ( int brate ) { baudRate = brate ; ChameleonSettings . serialBaudRate = baudRate ; if ( serialPort != null ) { serialPort . setBaudRate ( baudRate ) ; return baudRate ; } return STATUS_OK ; }
private UsbSerialInterface . UsbReadCallback createSerialReaderCallback ( ) { return new UsbSerialInterface . UsbReadCallback ( ) { @ Override public void onReceivedData ( byte [ ] liveLogData ) { ChameleonSettings . serialIOPorts [ ChameleonSettings . USBIO_IFACE_INDEX ] . onReceivedData ( liveLogData ) ; } } ; }
public void onReceivedData ( byte [ ] liveLogData ) { ChameleonSettings . serialIOPorts [ ChameleonSettings . USBIO_IFACE_INDEX ] . onReceivedData ( liveLogData ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { ChameleonSettings . chameleonDeviceNickname = s . toString ( ) ; AndroidSettingsStorage . updateValueByKey ( ChameleonSettings . chameleonDeviceSerialNumber , AndroidSettingsStorage . PROFILE_NAME_PREFERENCE ) ; }
public static String getTimestamp ( ) { Time currentTime = new Time ( ) ; currentTime . setToNow ( ) ; return currentTime . format ( "%Y - %m - %d - %T" ) ; }
public boolean startScanningDevices ( ) { configureSerial ( ) ; btGattConnectorBLEDevice . startConnectingDevices ( ) ; return true ; }
public boolean stopScanningDevices ( ) { btGattConnectorBLEDevice . stopConnectingDevices ( ) ; return true ; }
public static boolean updateValueByKey ( String prefsKey ) { return updateValueByKey ( DEFAULT_CMLDAPP_PROFILE , prefsKey ) ; }
private LogCode ( byte lcode , int ldd , String ldesc ) { logCode = Byte . toUnsignedInt ( lcode ) ; logByteCode = lcode ; logDataDirection = ldd ; logDesc = ldesc ; }
public static LogCode lookupByLogCode ( int lcode ) { LogCode lc = LOG_CODE_MAP . get ( ( byte ) lcode ) ; if ( lc == null ) return LOG_CODE_DNE ; else return lc ; }
public static void stopPostingStats ( ) { statsUpdateHandler . removeCallbacksAndMessages ( statsUpdateRunnable ) ; postingStatsInProgress = false ; }
public String getEffectUrl ( ) { return "https : }
public void onTileRemoved ( ) { SharedPreferences pref = U . getSharedPreferences ( this ) ; pref . edit ( ) . putBoolean ( prefix + PREF_ADDED_SUFFIX , false ) . apply ( ) ; }
private void selectApp ( ) { Intent intent = U . getThemedIntent ( this , PersistentShortcutSelectAppActivity . class ) ; intent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; intent . putExtra ( PREF_QS_TILE , tileNumber ( ) ) ; startActivityAndCollapse ( intent ) ; }
private final BroadcastReceiver dashboardOrStartMenuAppearingReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { dashboardOrStartMenuAppearing = true ; finish ( ) ; } } ;
private final BroadcastReceiver finishReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { finish ( ) ; } } ;
private final BroadcastReceiver finishReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { shouldCollapse = false ; if ( contextMenuFix ) U . startFreeformHack ( DashboardActivity . this ) ; finish ( ) ; } } ;
private final BroadcastReceiver unDimScreenReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { dimScreen ( false ) ; } } ;
private final BroadcastReceiver killReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { killHomeActivity ( ) ; } } ;
private final BroadcastReceiver forceTaskbarStartReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { forceTaskbarStart = true ; } } ;
private final BroadcastReceiver freeformToggleReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( isDesktopIconsEnabled == U . isDesktopIconsEnabled ( HomeActivityDelegate . this ) ) updateWindowFlags ( ) ; else recreate ( ) ; } } ;
private final BroadcastReceiver refreshDesktopIconsReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { refreshDesktopIcons ( ) ; } } ;
private final BroadcastReceiver iconArrangeModeReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { enterIconArrangeMode ( ) ; } } ;
private final BroadcastReceiver sortDesktopIconsReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { sortDesktopIcons ( ) ; } } ;
private final BroadcastReceiver updateMarginsReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { updateMargins ( ) ; } } ;
private final BroadcastReceiver removeDesktopWallpaperReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { removeCustomWallpaper ( ) ; } } ;
private final BroadcastReceiver wallpaperChangeRequestReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { U . showImageChooser ( HomeActivityDelegate . this ) ; } } ;
private final BroadcastReceiver settingsReceivedReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { U . restartApp ( ImportSettingsActivity . this , true ) ; } } ;
private final BroadcastReceiver appearingReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { doNotHide = true ; } } ;
private final BroadcastReceiver disappearingReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { doNotHide = false ; } } ;
private final BroadcastReceiver finishReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { reallyFinish ( ) ; } } ;
private final BroadcastReceiver switchReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { updateSwitch ( ) ; } } ;
private final BroadcastReceiver requestCountReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { broadcastNotificationCount ( ) ; } } ;
private final View . OnGenericMotionListener ogml = ( view , motionEvent ) -> { if ( motionEvent . getAction ( ) == MotionEvent . ACTION_BUTTON_PRESS && motionEvent . getButtonState ( ) == MotionEvent . BUTTON_SECONDARY ) cellLongClick ( view ) ; return false ; } ;
private final BroadcastReceiver toggleReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { toggleDashboard ( ) ; } } ;
private final BroadcastReceiver addWidgetReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { fadeIn ( ) ; addWidget ( intent ) ; } } ;
private final BroadcastReceiver hideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideDashboard ( ) ; } } ;
private final BroadcastReceiver toggleReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { toggleStartMenu ( ) ; } } ;
private final BroadcastReceiver showSpaceReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { layout . findViewById ( R . id . start_menu_space ) . setVisibility ( View . VISIBLE ) ; } } ;
private final BroadcastReceiver hideSpaceReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { layout . findViewById ( R . id . start_menu_space ) . setVisibility ( View . GONE ) ; } } ;
private final BroadcastReceiver hideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideStartMenu ( true ) ; } } ;
private final BroadcastReceiver hideReceiverNoReset = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideStartMenu ( false ) ; } } ;
private final BroadcastReceiver resetReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { startMenu . setSelection ( 0 ) ; } } ;
private final BroadcastReceiver showReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { showTaskbar ( true ) ; } } ;
private final BroadcastReceiver hideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { hideTaskbar ( true ) ; } } ;
private final BroadcastReceiver tempShowReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { tempShowTaskbar ( ) ; } } ;
private final BroadcastReceiver tempHideReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { tempHideTaskbar ( false ) ; } } ;
private final BroadcastReceiver startMenuDisappearReceiver = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( startButton . getVisibility ( ) == View . GONE ) layout . setVisibility ( View . VISIBLE ) ; } } ;
private final PhoneStateListener listener = new PhoneStateListener ( ) { @ Override public void onSignalStrengthsChanged ( SignalStrength signalStrength ) { try { cellStrength = signalStrength . getLevel ( ) ; } catch ( SecurityException e ) { cellStrength = - 1 ; } } } ;
public static int getMaxNumOfEntries ( Context context ) { SharedPreferences pref = getSharedPreferences ( context ) ; return pref . getBoolean ( PREF_DISABLE_SCROLLING_LIST , false ) ? getMaxNumOfColumns ( context ) : Integer . parseInt ( pref . getString ( PREF_MAX_NUM_OF_RECENTS , "10" ) ) ; }
private void createShortcut ( String windowSize ) { int num = getIntent ( ) . getIntExtra ( PREF_QS_TILE , 0 ) ; if ( num > 0 ) createQuickSettingTileShortcut ( windowSize , num ) ; else createHomeScreenShortcut ( windowSize ) ; finish ( ) ; }
public static String getDefaultStartButtonImage ( Context context ) { SharedPreferences pref = getSharedPreferences ( context ) ; return pref . getBoolean ( PREF_APP_DRAWER_ICON , false ) ? PREF_START_BUTTON_IMAGE_APP_LOGO : PREF_START_BUTTON_IMAGE_DEFAULT ; }
public void onReceive ( Context context , Intent intent ) { if ( ! performGlobalAction ( intent . getIntExtra ( EXTRA_ACTION , - 1 ) ) ) { U . showToast ( PowerMenuService . this , R . string . tb_lock_device_not_supported ) ; } }
public boolean isOnHomeScreen ( Context context ) { return isOnHomeScreen ( context , true ) ; }
public boolean isOnSecondaryHomeScreen ( Context context ) { return isOnHomeScreen ( context , false ) ; }
public static int getStatusBarHeight ( Context context ) { return LauncherHelper . getInstance ( ) . isOnSecondaryHomeScreen ( context ) ? 0 : getSystemDimen ( context , "status_bar_height" ) ; }
public static void showHideNavigationBar ( Context context , boolean show ) { showHideNavigationBar ( context , getTaskbarDisplayID ( context ) , show , 0 ) ; }
private static int getTaskbarDisplayID ( Context context ) { LauncherHelper helper = LauncherHelper . getInstance ( ) ; if ( helper . isOnSecondaryHomeScreen ( context ) ) return helper . getSecondaryDisplayId ( ) ; else return Display . DEFAULT_DISPLAY ; }
public boolean isOnMainActivity ( ) { return onMainActivity > 0 ; }
public static GlobalHelper getInstance ( ) { if ( theInstance == null ) theInstance = new GlobalHelper ( ) ; return theInstance ; }
private void performOnResumeLogic ( ) { if ( waitingForPermission ) { waitingForPermission = false ; init ( ) ; } overridePendingTransition ( 0 , R . anim . close_anim ) ; U . sendBroadcast ( this , ACTION_TEMP_SHOW_TASKBAR ) ; }
private static Object getWindowManagerService ( ) throws Exception { allowReflection ( ) ; return Class . forName ( "android . view . WindowManagerGlobal" ) . getMethod ( "getWindowManagerService" ) . invoke ( null ) ; }
private static Integer getDefaultDensity ( int displayID ) throws Exception { allowReflection ( ) ; return ( Integer ) Class . forName ( "android . view . IWindowManager" ) . getMethod ( "getInitialDisplayDensity" , int . class ) . invoke ( getWindowManagerService ( ) , displayID ) ; }
public static boolean hasAndroidTVSettings ( Context context ) { return getInstalledPackage ( context , "com . android . tv . settings" ) != null && Build . VERSION . SDK_INT >= Build . VERSION_CODES . P ; }
public static String [ ] getImageFilenames ( ) { return new String [ ] { "custom_image" , "desktop_wallpaper" } ; }
private void updateSwitch ( ) { if ( theSwitch != null ) { SharedPreferences pref = U . getSharedPreferences ( this ) ; theSwitch . setChecked ( pref . getBoolean ( PREF_TASKBAR_ACTIVE , false ) ) ; } }
public void onReceive ( Context context , Intent intent ) { SharedPreferences pref = U . getSharedPreferences ( getActivity ( ) ) ; CheckBoxPreference checkBox = ( CheckBoxPreference ) findPreference ( PREF_LAUNCHER ) ; checkBox . setChecked ( pref . getBoolean ( PREF_LAUNCHER , false ) ) ; }
private void updateAdditionalSettings ( ) { SharedPreferences pref = U . getSharedPreferences ( getActivity ( ) ) ; updateAdditionalSettings ( pref . getBoolean ( PREF_DESKTOP_MODE , false ) ) ; }
public boolean onPreferenceClick ( final Preference p ) { if ( p . getKey ( ) . equals ( PREF_CLEAR_PINNED_APPS ) ) { Intent clearIntent = U . getThemedIntent ( getActivity ( ) , ClearDataActivity . class ) ; startActivity ( clearIntent ) ; } return true ; }
private List < AppEntry > getAppEntries ( ) { SharedPreferences pref = U . getSharedPreferences ( context ) ; if ( runningAppsOnly ) return getAppEntriesUsingActivityManager ( Integer . parseInt ( pref . getString ( PREF_MAX_NUM_OF_RECENTS , "10" ) ) ) ; else return getAppEntriesUsingUsageStats ( ) ; }
public void onBackPressed ( ) { if ( contextMenuFix ) { U . startFreeformHack ( this ) ; } U . sendBroadcast ( this , ACTION_HIDE_DASHBOARD ) ; }
public void onBackPressed ( ) { U . sendBroadcast ( this , ACTION_HIDE_START_MENU ) ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; U . registerReceiver ( getActivity ( ) , homeToggleReceiver , ACTION_LAUNCHER_PREF_CHANGED ) ; }
public void onCreate ( ) { super . onCreate ( ) ; U . registerReceiver ( this , powerMenuReceiver , ACTION_ACCESSIBILITY_ACTION ) ; }
public void onAnimationEnd ( Animator animation ) { layout . setVisibility ( View . GONE ) ; if ( sendIntent ) { U . sendBroadcast ( context , ACTION_DASHBOARD_DISAPPEARING ) ; } }
public boolean dispatchKeyEvent ( KeyEvent event ) { if ( viewHandlesBackButton && event . getKeyCode ( ) == KeyEvent . KEYCODE_BACK ) { U . sendBroadcast ( getContext ( ) , ACTION_HIDE_START_MENU ) ; return true ; } return super . dispatchKeyEvent ( event ) ; }
public static int getAccentColor ( Context context ) { SharedPreferences pref = getSharedPreferences ( context ) ; return pref . getInt ( PREF_ACCENT_COLOR , context . getResources ( ) . getInteger ( R . integer . tb_translucent_white ) ) ; }
public static boolean isExternalAccessDisabled ( Context context ) { if ( isLibrary ( context ) ) return true ; SharedPreferences pref = getSharedPreferences ( context ) ; return ! pref . getBoolean ( PREF_TASKER_ENABLED , true ) ; }
public BitmapDrawable getIcon ( Context context , LauncherActivityInfo appInfo ) { return getIcon ( context , context . getPackageManager ( ) , appInfo ) ; }
public static void startShortcut ( Context context , AppEntry entry , ShortcutInfo shortcut , View view ) { launchApp ( context , entry , null , false , false , false , shortcut , view , null ) ; }
public static void launchApp ( Context context , Runnable runnable ) { launchApp ( context , true , false , runnable ) ; }
public RelatedPageViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new RelatedPageListAdapter . RelatedPageViewHolder ( LayoutInflater . from ( ( parent . getContext ( ) ) ) . inflate ( R . layout . page_reading_navigation_table_item , parent , false ) ) ; }
public TOCHeaderViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new TOCListAdapter . TOCHeaderViewHolder ( LayoutInflater . from ( ( parent . getContext ( ) ) ) . inflate ( R . layout . page_reading_navigation_table_item , parent , false ) ) ; }
public MainActivityPagerAdapter ( FragmentManager fm ) { super ( fm , BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT ) ; }
public void listen ( OnMessageReceivedListener listener ) { if ( socket != null ) return ; SocketThread st = new SocketThread ( serverIp , serverPort , listener ) ; st . start ( ) ; }
public void linkhJOP ( View v ) { Uri uriUrl = Uri . parse ( "https : Intent launchBrowser = new Intent ( Intent . ACTION_VIEW , uriUrl ) ; startActivity ( launchBrowser ) ; }
private static double linearToDecibel ( final double value ) { return 20 . 0 * Math . log10 ( value ) ; }
private static double log2 ( double number ) { return Math . log ( number ) / Math . log ( 2 ) ; }
public boolean onPreferenceClick ( Preference preference ) { int numberAdded = PersonalDictionaryUtils . importAllFavorites ( getActivity ( ) . getContentResolver ( ) ) ; showSnackBar ( String . format ( getString ( R . string . imported_into_personal_dict ) , numberAdded ) ) ; return true ; }
public ScrollableEmoticonMaterialDialogBuilder ( @ NonNull Context context ) { super ( context ) ; mScrollView = new HorizontalScrollView ( context ) ; mTextView = new TextView ( context ) ; }
public void handle ( EntryAddedToHistoryEvent e ) { mAdapter . updateHistory ( ) ; }
public void onItemClick ( AdapterView < ? > adapterView , int section , int positionInSection , long id ) { Entry entry = mAdapter . getItem ( section , positionInSection ) ; mBus . post ( new EntryAddedToHistoryEvent ( entry ) ) ; }
public Entry getItem ( int section , int position ) { return mSource . getCategories ( ) . get ( section ) . getEntries ( ) . get ( position ) ; }
public boolean onPreferenceClick ( Preference preference ) { PreferenceFragmentPermissionsDispatcher . backupFavoritesWithPermissionCheck ( PreferenceFragment . this ) ; return true ; }
public boolean onPreferenceClick ( Preference preference ) { PreferenceFragmentPermissionsDispatcher . restoreFavoritesWithPermissionCheck ( PreferenceFragment . this ) ; return true ; }
public void onAvailable ( Network network ) { if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . M ) { ConnectivityManager . setProcessDefaultNetwork ( network ) ; } else { cm . bindProcessToNetwork ( network ) ; } }
private void gestureCancel ( MotionEvent event ) { if ( mainapp . web_msg_handler != null ) mainapp . web_msg_handler . removeCallbacks ( gestureStopped ) ; gestureInProgress = false ; }
public static void initStatics ( ) { clearHistory = false ; firstUrl = null ; webBundle = new Bundle ( ) ; }
public String getServerType ( ) { return this . serverType ; }
public void onActivityStarted ( Activity activity ) { }
public void onActivityResumed ( Activity activity ) { if ( isInBackground ) { isInBackground = false ; exitConfirmed = false ; removeNotification ( ) ; } runningActivity = activity ; }
private void closeScreen ( ) { this . finish ( ) ; connection_activity . overridePendingTransition ( this , R . anim . fade_in , R . anim . fade_out ) ; }
public void onStop ( ) { super . onStop ( ) ; Log . d ( "Engine_Driver" , "connection . onStop ( ) " ) ; mainapp . sendMsg ( mainapp . comm_msg_handler , message_type . SET_LISTENER , "" , 0 ) ; }
public boolean onLongClick ( View v ) { webView . reload ( ) ; return true ; }
public void onStartTrackingTouch ( SeekBar sb ) { gestureInProgress = false ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { location = parent . getSelectedItem ( ) . toString ( ) ; filterTurnoutView ( ) ; refreshTurnoutViewStates ( ) ; }
public boolean onKeyDown ( int key , KeyEvent event ) { if ( key == KeyEvent . KEYCODE_BACK ) { overrideThrottleName = "" ; end_this_activity ( ) ; return true ; } return ( super . onKeyDown ( key , event ) ) ; }
public static void setShowTitle ( Context context , boolean value ) { SharedPreferences sharedPref = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = sharedPref . edit ( ) ; editor . putBoolean ( SHOW_TITLE_KEY , value ) ; editor . apply ( ) ; }
public static void setDisplayNotification ( Context context , boolean value ) { SharedPreferences sharedPref = PreferenceManager . getDefaultSharedPreferences ( context ) ; SharedPreferences . Editor editor = sharedPref . edit ( ) ; editor . putBoolean ( DISPLAY_NOTIFICATION_KEY , value ) ; editor . apply ( ) ; }
private String preprocessMultiplicationOperator ( String input ) { if ( letterToBeReplacedByStar != '*' ) { input = input . replace ( String . valueOf ( letterToBeReplacedByStar ) , "*" ) ; } return input ; }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; getDelegate ( ) . onConfigurationChanged ( newConfig ) ; }
private boolean donationInstalled ( ) { PackageManager packageManager = getPackageManager ( ) ; try { packageManager . getPackageInfo ( "exa . lnx . d" , 0 ) ; return true ; } catch ( PackageManager . NameNotFoundException e ) { return false ; } }
public void ignorableWhitespace ( char [ ] ch , int start , int length ) throws SAXException { }
public FragmentAdapter ( ) { super ( getSupportFragmentManager ( ) , BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT ) ; }
private void fillStatus ( List < StatusWrapper > statuses ) { CommitStatusBox commitStatusBox = mListHeaderView . findViewById ( R . id . commit_status_box ) ; commitStatusBox . fillStatus ( statuses , mPullRequest . mergeableState ( ) ) ; }
private void doSearch ( ) { if ( mWebView == null ) { return ; } FindActionModeCallback findAction = new FindActionModeCallback ( mWebView . getContext ( ) ) ; startSupportActionMode ( findAction ) ; findAction . setWebView ( mWebView ) ; findAction . showSoftInput ( ) ; }
public static boolean isBinaryFormat ( String filename ) { String mime = getMimeTypeFor ( filename ) ; return mime != null && ! mime . startsWith ( "text/" ) && ! mime . endsWith ( "xml" ) ; }
public void onDismissed ( Snackbar snackbar , int event ) { if ( event == DISMISS_EVENT_SWIPE || event == DISMISS_EVENT_TIMEOUT ) { retryProcessor . onError ( error ) ; } }
public static Context onAttach ( final Context context ) { final String lang = getPersistedData ( context , Locale . getDefault ( ) . getLanguage ( ) ) ; return setLocale ( context , lang ) ; }
public static Context onAttach ( final Context context , final String defaultLanguage ) { final String lang = getPersistedData ( context , defaultLanguage ) ; return setLocale ( context , lang ) ; }
private static String getPersistedData ( final Context context , final String defaultLanguage ) { final SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( context ) ; return preferences . getString ( "language" , defaultLanguage ) ; }
public void setStatus ( final ScanStatus status ) { if ( status == null ) throw new NullPointerException ( "Status cannot be null ! " ) ; this . status = status ; }
public void onTick ( final long millisUntilFinished ) { }
public boolean onCreateOptionsMenu ( final Menu menu ) { final MenuInflater inflater = getMenuInflater ( ) ; inflater . inflate ( R . menu . scan_menu , menu ) ; return true ; }
public static PendingIntent createOpenCalendarPendingIntent ( InstanceSettings settings ) { return PermissionsUtil . getPermittedPendingActivityIntentMutable ( settings , createOpenCalendarAtDayIntent ( new DateTime ( settings . getTimeZone ( ) ) ) ) ; }
public Intent createViewIntent ( TaskEvent event ) { Intent intent = CalendarIntentUtil . createViewIntent ( ) ; intent . setData ( ContentUris . withAppendedId ( AstridCloneTasksContract . Tasks . VIEW_URI , event . getId ( ) ) ) ; return intent ; }
public Intent createViewIntent ( TaskEvent event ) { Intent intent = CalendarIntentUtil . createViewIntent ( ) ; intent . setData ( ContentUris . withAppendedId ( DmfsOpenTasksContract . Tasks . PROVIDER_URI , event . getId ( ) ) ) ; return intent ; }
private void createEntries ( ) { createCalendarEntries ( ) ; createTaskEntries ( ) ; createBirthdays ( ) ; }
public String toString ( ) { return "BirthdayEvent { " + "id = " + id + " , title = '" + title + '\'' + " , startDate = " + date + " , color = " + color + ' } ' ; }
private CalendarEntry ( ) { super ( 40 ) ; }
public List < EventSource > getTaskLists ( ) { List < EventSource > lists = fetchLocalTaskLists ( ) ; lists . addAll ( fetchGoogleTaskLists ( ) ) ; return lists ; }
public Cursor query ( Uri uri , String [ ] projection , String selection , String [ ] selectionArgs , String sortOrder ) { lastQueryUri = uri ; lastQuerySelection = selection ; return results . getOrDefault ( uri , defaultResults ) ; }
public String getAppPackage ( ) { return SamsungTasksContract . APP_PACKAGE ; }
public EventSource ( String id , String title , String summary , int color ) { this . id = id ; this . title = title ; this . summary = summary ; this . color = color ; }
public int hashCode ( ) { int result = id . hashCode ( ) ; result += 31 * title . hashCode ( ) ; result += 31 * summary . hashCode ( ) ; result += 31 * color ; return result ; }
public static boolean isEmpty ( CharSequence str ) { return str == null || str . length ( ) == 0 ; }
public void onResume ( ) { super . onResume ( ) ; updateState ( ) ; getPreferenceManager ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; }
private void updateState ( ) { setInstalledVisibility ( ) ; setGrantPermissionVisibility ( ) ; setTaskListState ( ) ; }
private void processIncomingMessage ( MessageCard message ) { contactsRepo . update ( message . getContactKey ( ) , message ) ; }
private void processIncomingMessage ( MessageTransition message ) { eventBus . post ( message ) ; }
public ConnectionSecurityViewModel getConnectionSecurityViewModel ( ) { return new ConnectionSecurityViewModel ( preferences , navigator , context ) ; }
public void onDetachedFromRecyclerView ( @ NonNull RecyclerView recyclerView ) { if ( this . recyclerView != null && items instanceof ObservableList ) { ( ( ObservableList < T > ) items ) . removeOnListChangedCallback ( callback ) ; } this . recyclerView = null ; }
public void attachView ( @ Nullable Bundle savedInstanceState , @ NonNull V view ) { mView = view ; if ( savedInstanceState != null ) { restoreInstanceState ( savedInstanceState ) ; } }
public void attachView ( @ Nullable Bundle savedInstanceState , @ NonNull PreferencesFragmentMvvm . View view ) { super . attachView ( savedInstanceState , view ) ; view . loadRoot ( ) ; view . setModeSummary ( preferences . getMode ( ) ) ; }
public void attachView ( @ Nullable Bundle savedInstanceState , @ NonNull ConnectionMvvm . View view ) { super . attachView ( savedInstanceState , view ) ; setModeId ( preferences . getMode ( ) ) ; }
public void onTlsCheckedChanged ( final CompoundButton ignored , boolean isChecked ) { setTls ( isChecked ) ; }
public void attachView ( @ Nullable Bundle savedInstanceState , @ NonNull LoadMvvm . View view ) { super . attachView ( savedInstanceState , view ) ; }
public void attachView ( @ Nullable Bundle savedInstanceState , @ NonNull RegionMvvm . View view ) { super . attachView ( savedInstanceState , view ) ; }
public void attachView ( @ Nullable Bundle savedInstanceState , @ NonNull StatusMvvm . View view ) { super . attachView ( savedInstanceState , view ) ; }
private OkHttpClient getHttpClient ( ) { if ( preferences . getDontReuseHttpClient ( ) ) { return createHttpClient ( ) ; } if ( mHttpClient == null ) mHttpClient = createHttpClient ( ) ; return mHttpClient ; }
public void load ( ) { this . modeResId = modeToResId ( preferences . getMode ( ) ) ; }
public void load ( ) { this . tls = preferences . getTls ( ) ; this . tlsCaCrtName = preferences . getTlsCaCrt ( ) ; this . tlsClientCrtName = preferences . getTlsClientCrt ( ) ; this . tlsClientCrtPassword = preferences . getTlsClientCrtPassword ( ) ; }
public void onEvent ( MessageTransition message ) { Timber . d ( "transition isIncoming : %s topic : %s" , message . isIncoming ( ) , message . getTopic ( ) ) ; if ( message . isIncoming ( ) ) sendEventNotification ( message ) ; }
public void onEvent ( Events . QueueChanged e ) { Timber . v ( "queue changed %s" , e . getNewLength ( ) ) ; this . queueLength = e . getNewLength ( ) ; notifyPropertyChanged ( BR . endpointQueue ) ; }
public boolean statefulCheckConnection ( ) { if ( endpoint == null ) loadOutgoingMessageProcessor ( ) ; if ( endpoint instanceof StatefulServiceMessageProcessor ) return ( ( StatefulServiceMessageProcessor ) endpoint ) . checkConnection ( ) ; else return true ; }
public void onSaveInstanceState ( @ NonNull Bundle savedInstanceState ) { if ( preferencesManager . isShakeEnabled ( ) ) { shakeDetector . stop ( ) ; } super . onSaveInstanceState ( savedInstanceState ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_bonjour_browser , menu ) ; return true ; }
public void onClick ( DialogInterface dialog , int which ) { cacheErrorSent = false ; internetCacheLoad ( view , null ) ; }
public QoSTestResult initQoSTestResult ( QosMeasurementType testType ) { QoSTestResult nnResult = new QoSTestResult ( testType , this ) ; nnResult . getResultMap ( ) . put ( PARAM_QOS_TEST_OBJECTIVE_ID , qoSTestObjectiveUid ) ; return nnResult ; }
public QosMeasurementType getTestType ( ) { return QosMeasurementType . DNS ; }
public QosMeasurementType getTestType ( ) { return QosMeasurementType . HTTP_PROXY ; }
public QosMeasurementType getTestType ( ) { return QosMeasurementType . NON_TRANSPARENT_PROXY ; }
public Map < String , Object > getParams ( ) { return params ; }
public QosMeasurementType getTestType ( ) { return QosMeasurementType . TCP ; }
public QosMeasurementType getTestType ( ) { return QosMeasurementType . UDP ; }
public void onBind ( Integer port ) throws IOException { result . getResultMap ( ) . put ( RESULT_IN_PORT , port ) ; incomingPort = port ; }
public QosMeasurementType getTestType ( ) { return QosMeasurementType . VOIP ; }
public QosMeasurementType getTestType ( ) { return QosMeasurementType . WEBSITE ; }
public QosMeasurementType getTestType ( ) { return testType ; }
public void setTestType ( QosMeasurementType testType ) { this . testType = testType ; }
public int getSuccessCounter ( QosMeasurementType key ) { if ( key != null ) { QoSResultStats stats = resultCounter . get ( key ) ; return ( stats != null ? stats . getSuccessCounter ( ) : 0 ) ; } else { return successCounter ; } }
public void setCategoryCounter ( QosMeasurementType key , int successCounter , int failureCounter ) { this . resultCounter . put ( key , new QoSResultStats ( successCounter , failureCounter ) ) ; }
public HashMap < QosMeasurementType , QoSResultStats > get ( ) { return resultCounter ; }
public HashMap < QosMeasurementType , List < QoSServerResult >> getResultMap ( ) { return resultMap ; }
public HashMap < QosMeasurementType , List < QoSServerResultDesc >> getDescMap ( ) { return descMap ; }
public HashMap < QosMeasurementType , QoSServerResultTestDesc > getTestDescMap ( ) { return testDescMap ; }
public QoSServerResultDesc ( String desc , QosMeasurementType testType , DetailType status , Set < Long > uidSet ) { this . desc = desc ; this . testType = testType ; this . status = status ; this . uidSet = uidSet ; }
public QoSServerResultTestDesc ( QosMeasurementType type , String description , String name ) { this . resultType = type ; this . description = description ; this . name = name ; }
public QosMeasurementType getResultType ( ) { return resultType ; }
public void setResultType ( QosMeasurementType resultType ) { this . resultType = resultType ; }
public void migratePreferences ( ) { migrateTestServer ( ) ; removeInvalidSelectedColumnNames ( ) ; }
public void onCreate ( Context context ) { Log . v ( TAG , "onCreate" ) ; mWifiManager = ( WifiManager ) context . getApplicationContext ( ) . getSystemService ( Context . WIFI_SERVICE ) ; }
public NetMonSignalStrength ( Context context ) { mTelephonyManager = ( TelephonyManager ) context . getSystemService ( Context . TELEPHONY_SERVICE ) ; }
private GitTransportSetter transportSetter ( ) { return preferences . createTransportSetter ( ) ; }
public boolean isFinished ( ) { return isFinished ; }
public boolean isCanceled ( ) { return isCanceled ; }
public Sign create ( ) { return new Sign ( id , name , nameLocaleDe , mnemonic , tags , starred , learningProgress ) ; }
public List < Sign > read ( String whereSignNameLocaleDeOrTagsLike ) { return readInternal ( whereSignNameLocaleDeOrTagsLike , false , false ) ; }
public static AztecCode encode ( byte [ ] data ) { return encode ( data , DEFAULT_EC_PERCENT , DEFAULT_AZTEC_LAYERS , null ) ; }
public void testShortShiftJIS1 ( ) { doTest ( new byte [ ] { ( byte ) 0x8b , ( byte ) 0xe0 , ( byte ) 0x8b , ( byte ) 0x9b , } , StringUtils . SHIFT_JIS_CHARSET , "SJIS" ) ; }
public static String highLevelDecode ( boolean [ ] correctedBits ) throws FormatException { return getEncodedData ( correctedBits ) ; }
public static String stripSpace ( String s ) { return SPACES . matcher ( s ) . replaceAll ( "" ) ; }
public BitMatrix encode ( String contents , BarcodeFormat format , int width , int height ) { return encode ( contents , format , width , height , null ) ; }
public void testEncode ( ) { doTest ( "B515 - 3/B" , "00000" + "1001001011" + "0110101001" + "0101011001" + "0110101001" + "0101001101" + "0110010101" + "01101101011" + "01001001011" + "00000" ) ; }
public void testEncode2 ( ) { doTest ( "T123T" , "00000" + "1011001001" + "0101011001" + "0101001011" + "0110010101" + "01011001001" + "00000" ) ; }
public void testAltStartEnd ( ) { assertEquals ( encode ( "T123456789 - $T" ) , encode ( "A123456789 - $A" ) ) ; }
private static void doTest ( String input , CharSequence expected ) { BitMatrix result = encode ( input ) ; assertEquals ( expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
private static BitMatrix encode ( String input ) { return new CodaBarWriter ( ) . encode ( input , BarcodeFormat . CODABAR , 0 , 0 ) ; }
private static void doTest ( String input , CharSequence expected ) { BitMatrix result = new Code39Writer ( ) . encode ( input , BarcodeFormat . CODE_39 , 0 , 0 ) ; assertEquals ( input , expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
private static void doTest ( String input , CharSequence expected ) { BitMatrix result = new Code93Writer ( ) . encode ( input , BarcodeFormat . CODE_93 , 0 , 0 ) ; assertEquals ( expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
public void testEncodeIllegalCharacters ( ) { new EAN13Writer ( ) . encode ( "5901234123abc" , BarcodeFormat . EAN_13 , 0 , 0 ) ; }
public void testEncodeIllegalCharacters ( ) { new EAN8Writer ( ) . encode ( "96385abc" , BarcodeFormat . EAN_8 , 0 , 0 ) ; }
public void testEncode ( ) { doTest ( "00123456789012" , "0000010101010111000111000101110100010101110001110111010001010001110100011" + "100010101000101011100011101011101000111000101110100010101110001110100000" ) ; }
private static void doTest ( String input , CharSequence expected ) { BitMatrix result = new ITFWriter ( ) . encode ( input , BarcodeFormat . ITF , 0 , 0 ) ; assertEquals ( expected , BitMatrixTestCase . matrixToString ( result ) ) ; }
public void testEncodeIllegalCharacters ( ) { new ITFWriter ( ) . encode ( "00123456789abc" , BarcodeFormat . ITF , 0 , 0 ) ; }
public void testEncode ( ) { doTest ( "05096893" , "0000000000010101110010100111000101101011110110111001011101010100000000000" ) ; }
public void testEncodeSystem1 ( ) { doTest ( "12345670" , "0000000000010100100110111101010001101110010000101001000101010100000000000" ) ; }
public void testAddChecksumAndEncode ( ) { doTest ( "0509689" , "0000000000010101110010100111000101101011110110111001011101010100000000000" ) ; }
public void testEncodeIllegalCharacters ( ) { new UPCEWriter ( ) . encode ( "05096abc" , BarcodeFormat . UPC_E , 0 , 0 ) ; }
public final BitMatrix encode ( String contents , BarcodeFormat format , int width , int height ) { return encode ( contents , format , width , height , null ) ; }
private AtomSet ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private PhysicalArea ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private int getTitleBarHeight ( ) { return ( activity . getWindow ( ) . getAttributes ( ) . y + activity . getSupportActionBar ( ) . getHeight ( ) ) ; }
private Atom ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private void readFromParcel ( Parcel in ) { coordinate . readFromParcel ( in ) ; velocity . readFromParcel ( in ) ; acceleration . readFromParcel ( in ) ; translated = Boolean . getBoolean ( in . readString ( ) ) ; }
private double calculateKineticEnergy ( ) { double res = 0 . 0 ; for ( Atom a : atoms ) { res += a . velocity . pow2 ( ) / 2 . 0 ; } return atomMass * Constants . EV * Constants . AK * res ; }
private double calculateAverageVelocity ( ) { double res = 0 . 0 ; for ( Atom a : atoms ) { res += a . velocity . mod ( ) / atoms . size ( ) ; } return res ; }
private Vector2D ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private static boolean isMarshMallowOrLater ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ; }
private Drawable getCustomThumb ( ) { return customThumb ; }
private void setCustomThumb ( Drawable customThumb ) { this . customThumb = customThumb ; invalidate ( ) ; }
public String convert ( String input ) { return transliterate ( input , true ) ; }
public void testMockCircumference ( ) { when ( mainViewModel . getCircumference ( ) ) . thenReturn ( dummyCircumference ) ; double circumference = mainViewModel . getCircumference ( ) ; verify ( cuboidModel ) . getCircumference ( ) ; assertEquals ( dummyCircumference , circumference , 0 . 0001 ) ; }
public void testMockSurfaceArea ( ) { when ( mainViewModel . getSurfaceArea ( ) ) . thenReturn ( dummySurfaceArea ) ; double surfaceArea = mainViewModel . getSurfaceArea ( ) ; verify ( cuboidModel ) . getSurfaceArea ( ) ; assertEquals ( dummySurfaceArea , surfaceArea , 0 . 0001 ) ; }
public void save ( double length , double width , double height ) { this . length = length ; this . width = width ; this . height = height ; }
public double getSurfaceArea ( ) { double lw = length * width ; double wh = width * height ; double lh = length * height ; return 2 * ( lw + wh + lh ) ; }
public double getCircumference ( ) { return 4 * ( length + width + height ) ; }
public void testIsCacheableFalse ( ) { Request req = new Request . Builder ( ) . url ( Service . WIKIPEDIA_URL ) . build ( ) ; assertThat ( OfflineCacheInterceptor . shouldSave ( req ) , is ( false ) ) ; }
public Result ( JSONObject result ) { mResult = result ; }
public Message ( String message ) { mMessage = message ; }
public AdaptationState ( JSONObject result ) { }
public Ingredient ( String name , double baseDensity ) { this . name = name ; this . density = Amount . valueOf ( baseDensity , Units . G_PER_CUP ) ; }
public void onStop ( ) { super . onStop ( ) ; unsubscribeClipboardManager ( ) ; unsubscribeParamsChanged ( ) ; disposables . clear ( ) ; }
public void onStart ( ) { super . onStart ( ) ; subscribeParamsChanged ( ) ; subscribeAlertDialog ( ) ; subscribeClipboardManager ( ) ; }
public boolean isNestedScrollingEnabled ( ) { return nestedScrollingChildHelper . isNestedScrollingEnabled ( ) ; }
public boolean dispatchNestedPreFling ( float velocityX , float velocityY ) { return nestedScrollingChildHelper . dispatchNestedPreFling ( velocityX , velocityY ) ; }
public void submitList ( @ Nullable List < FileManagerNode > list ) { if ( list != null ) Collections . sort ( list , directoryFirstCmp ) ; super . submitList ( list ) ; }
public long availableBytes ( @ NonNull FileDescriptor fd ) { return availableBytes ; }
private void handleSettingsChanged ( String key ) { if ( key . equals ( getString ( R . string . pref_key_cpu_do_not_sleep ) ) ) setKeepCpuAwake ( pref . cpuDoNotSleep ( ) ) ; }
public static Intent showMoreApps ( ) { Uri uri = Uri . parse ( "market : return new Intent ( Intent . ACTION_VIEW , uri ) ; }
public FigureCreator ( ) { random = new Random ( ) ; currentFigureType = null ; nextFigureType = getNewFigure ( ) ; }
public FigureType getCurrentFigureType ( ) { if ( currentFigureType == null ) { return getNewFigure ( ) ; } else { return currentFigureType ; } }
public FigureType getRotatedFigure ( ) { return FigureType . S_FIGURE ; }
public FigureType getRotatedFigure ( ) { return FigureType . Z_FIGURE ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new DiceViewModel ( diceVariant , diceCount ) ; }
public RateMyAppDialog ( FragmentActivity activity ) { this . context = activity ; }
public void onComplete ( ) { Singleton . getInstance ( ) . clearLogEntries ( ) ; shuffleInitialDataArrays ( ) ; }
private void applyKeepScreenOnIfNeeded ( ) { if ( isKeepScreenOn ) { getWindow ( ) . addFlags ( WindowManager . LayoutParams . FLAG_KEEP_SCREEN_ON ) ; } else { getWindow ( ) . clearFlags ( WindowManager . LayoutParams . FLAG_KEEP_SCREEN_ON ) ; } }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_delete , menu ) ; return true ; }
public boolean onCreateOptionsMenu ( Menu menu ) { if ( mAdapter != null && mAdapter . getItemCount ( ) > 0 ) { getMenuInflater ( ) . inflate ( R . menu . menu_delete , menu ) ; } return true ; }
public int getMovementFlags ( @ NonNull RecyclerView recyclerView , @ NonNull RecyclerView . ViewHolder viewHolder ) { final int dragFlags = ItemTouchHelper . UP | ItemTouchHelper . DOWN | ItemTouchHelper . LEFT | ItemTouchHelper . RIGHT ; return makeMovementFlags ( dragFlags , 0 ) ; }
private void showBottomSheet ( ) { DiceBottomSheetFragment bottomSheet = new DiceBottomSheetFragment ( ) ; bottomSheet . show ( getParentFragmentManager ( ) , "DiceBottomSheetFragment" ) ; bottomSheet . setOnDismissListener ( d -> updateOnDismiss ( ) ) ; }
public ArrayList < String > getListString ( String key ) { return new ArrayList <> ( Arrays . asList ( TextUtils . split ( preferences . getString ( key , "" ) , "‚‗‚" ) ) ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , longterm_vehicle . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , CC_motorcycle . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , CC_car . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , CC_taxi_upto6 . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , CC_bus . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , CC_passauto . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , pt_goodsauto_public . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , pt_goodsauto_private . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , CC_commercialvehiclepublic . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , CC_commercialvehicleprivate . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , pt_agri . class ) ; startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , terms . class ) ; inte . putExtra ( "url" , "http : startActivity ( inte ) ; }
public void onAdClosed ( ) { Intent inte = new Intent ( home_activity . this , privacy . class ) ; inte . putExtra ( "url" , "http : startActivity ( inte ) ; }
public void finish ( ) { super . finish ( ) ; overridePendingTransition ( 0 , R . anim . slide_out_from_top ) ; presentationManager . stopPresentation ( ) ; textToSpeechManager . shutdown ( ) ; }
public void onPause ( ) { super . onPause ( ) ; dataSource . saveNameListState ( listId , choosingStateListInfo , settings ) ; }
public void onAcknowledgePurchaseResponse ( BillingResult billingResult ) { if ( billingResult . getResponseCode ( ) == BillingClient . BillingResponseCode . ITEM_ALREADY_OWNED ) { preferencesManager . onPremiumAcquired ( ) ; listener . onPremiumAlreadyOwned ( ) ; } }
public void onBindViewHolder ( @ NonNull NameViewHolder holder , int position ) { holder . loadName ( position ) ; }
public void removeAllInstancesOfName ( int position ) { String name = uniqueNames . get ( position ) ; int amount = nameMap . get ( name ) . getAmount ( ) ; removeNames ( name , amount ) ; }
public void onScrollStateChanged ( @ NonNull RecyclerView recyclerView , int newState ) { super . onScrollStateChanged ( recyclerView , newState ) ; if ( newState == RecyclerView . SCROLL_STATE_DRAGGING ) { UIUtils . hideKeyboard ( requireActivity ( ) ) ; rootView . requestFocus ( ) ; } }
public void onHomeClicked ( ) { if ( currentlySelected == homeButton ) { return ; } currentlySelected . setTextColor ( itemColor ) ; currentlySelected = homeButton ; homeButton . setTextColor ( blue ) ; listener . onNavItemSelected ( R . id . home ) ; }
public void onSettingsClicked ( ) { if ( currentlySelected == settingsButton ) { return ; } currentlySelected . setTextColor ( itemColor ) ; currentlySelected = settingsButton ; settingsButton . setTextColor ( blue ) ; listener . onNavItemSelected ( R . id . settings ) ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( PREVIOUSLY_SELECTED_PAGE_ID , navigationController . getCurrentViewId ( ) ) ; }
public void shutdown ( ) { textToSpeech . shutdown ( ) ; listener = null ; }
public void importFromTextFile ( ) { hideBottomSheet ( ) ; Intent txtFileIntent = new Intent ( Intent . ACTION_OPEN_DOCUMENT ) ; txtFileIntent . addCategory ( Intent . CATEGORY_OPENABLE ) ; txtFileIntent . setType ( "text/plain" ) ; startActivityForResult ( txtFileIntent , IMPORT_TXT_REQUEST_CODE ) ; }
public void copyNamesToClipboard ( String chosenNames , int numNames ) { NameUtils . copyNamesToClipboard ( chosenNames , numNames , false , this ) ; }
public void onCreate ( SQLiteDatabase database ) { database . execSQL ( TableCreationScripts . CREATE_LISTS_TABLE_QUERY ) ; database . execSQL ( TableCreationScripts . CREATE_NAMES_TABLE_QUERY ) ; database . execSQL ( TableCreationScripts . CREATE_NAMES_IN_LIST_TABLE_QUERY ) ; }
public long getNumLists ( ) { open ( ) ; long numLists = DatabaseUtils . queryNumEntries ( database , DatabaseTables . LISTS , null , null ) ; close ( ) ; return numLists ; }
public int getItemCount ( ) { return options . size ( ) ; }
public int getItemCount ( ) { return nameLists . size ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; paymentManager . cleanUp ( ) ; }
public long getItemId ( int position ) { return names . get ( position ) . hashCode ( ) ; }
public int getItemCount ( ) { return names . size ( ) ; }
public int getNumNames ( ) { return uniqueNames . size ( ) ; }
public NameListViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . names_list_item , parent , false ) ; return new NameListViewHolder ( view ) ; }
public NameViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . choose_name_cell , parent , false ) ; return new NameViewHolder ( view ) ; }
private void changeUIStateToRetry ( ) { voiceIcon . setText ( R . string . speech_to_text_retry_mic_icon ) ; voiceIcon . setBackgroundResource ( R . drawable . red_ring_background ) ; message . setText ( R . string . did_not_catch_speech ) ; tryAgain . setVisibility ( View . VISIBLE ) ; }
public void setDefaultValueForSdk ( ) { LocationManager . CURRENT_SDK_INT = environmentSdk ; }
public void shouldNotInteractOnLocationsPermissionGrantedWithNullBaseActivityAndContent ( ) { givenPermissionChecker ( ) ; whenCheckingPermissions ( null , null ) ; thenShouldNotInteractWith ( permissionChecker ) ; }
public void shouldNotInteractOnLocationsPermissionGrantedWithBaseActivityAndNullContent ( ) { givenPermissionChecker ( ) ; whenCheckingPermissions ( baseActivity , null ) ; thenShouldNotInteractWith ( permissionChecker ) ; }
public void shouldNotInteractIfNullBaseActivityOnLocationFound ( ) { givenLatLonLocation ( ) ; whenFindingLocation ( ) ; thenShouldNotInteractWith ( baseActivity ) ; }
public void shouldNotInteractIfPermissionCheckerIsNull ( ) { givenPermissionResultParameters ( ) ; whenRequestingPermissionResult ( ) ; thenShouldNotInteractWith ( permissionChecker ) ; }
private void thenShouldDelegateDisconnect ( ) { new Verifications ( ) { { locationRetriever . disconnect ( ) ; } } ; }
private void thenShouldDelegateConnect ( ) { new Verifications ( ) { { locationRetriever . connect ( ) ; } } ; }
private void givenPermissionChecker ( ) { uut . permissionChecker = permissionChecker ; }
private void givenLatLonLocation ( ) { lat = 1d ; lon = 1d ; }
private void thenShouldNotifyOnLocationPermissionFailure ( ) { new Verifications ( ) { { locationRetriever . onLocationPermissionFailure ( ) ; } } ; }
private void thenShouldNotifyOnLocationPermissionGranted ( ) { new Verifications ( ) { { locationRetriever . onLocationPermissionsGranted ( ) ; } } ; }
private void givenPermissionGranted ( final boolean hasPermission ) { new Expectations ( ) { { permissionChecker . hasPermission ( ) ; result = hasPermission ; } } ; }
public void updateList ( @ NonNull List < WeatherInfo > weatherInfoList ) { listUpdated = true ; }
public void onError ( String error ) { onErrorCalled = true ; }
private void thenOnErrorIsCalled ( boolean expected ) { assertEquals ( expected , onErrorCalled ) ; }
private void givenUut ( ) { uut = new OpenWeatherApiCallback ( onUpdateWeatherListListener ) ; }
private void thenListUpdated ( boolean expected ) { assertEquals ( expected , listUpdated ) ; }
private void thenItemClickListenerShouldHandleItemClick ( ) { verify ( itemClickListener , times ( 1 ) ) . onItemClick ( eq ( textView ) , any ( WeatherViewModel . class ) ) ; }
private void whenRunning ( ) { itemClickListenerRunnable . run ( ) ; }
private void whenClicking ( ) { uut . onClick ( textView ) ; }
private void givenItemClickListener ( ) { itemClickListener = mock ( ModelAdapter . OnItemClickListener . class ) ; uut . setOnItemClickListener ( itemClickListener ) ; }
private void whenSettingItemsList ( ) { uut . setItems ( models ) ; }
private void thenItemCountShouldBe ( int expected ) { assertEquals ( expected , itemCount ) ; }
private void whenGettingItemCount ( ) { itemCount = uut . getItemCount ( ) ; }
private void whenPopulatingTheTemperatureViews ( WeatherInfo weatherInfo ) { uut . populateTemperatureViews ( context , modelViewHolder , weatherInfo ) ; }
private void givenSharedPreferenceForCelsius ( final boolean celsiusPreferred ) { new Expectations ( ) { { PreferenceManager . getDefaultSharedPreferences ( context ) ; sharedPreferences . getBoolean ( SettingsActivity . PREF_TEMPERATURE_UNITS , true ) ; result = celsiusPreferred ; } } ; }
private void whenBindingViewHolder ( ) { uut . onBindViewHolder ( modelViewHolder , 0 ) ; }
private void givenModel ( WeatherInfo weatherInfo ) { models . add ( weatherInfo ) ; }
private void givenViewHolder ( View view ) { givenViewsFound ( view ) ; modelViewHolder = uut . onCreateViewHolder ( mock ( ViewGroup . class ) , 0 ) ; }
private void thenModelViewHolderIsNotNull ( ) { assertNotNull ( modelViewHolder ) ; }
private void whenCreatingViewHolder ( ) { modelViewHolder = uut . onCreateViewHolder ( mock ( ViewGroup . class ) , 0 ) ; }
public void onSuccess ( OpenWeatherApiResponse apiResponse ) { isSuccess = true ; }
public void onError ( OpenWeatherApiError apiError ) { ErrorCode . valueOf ( "EMPTY" ) ; isError = true ; }
private void givenInvalidRequestReturningException ( ) throws IOException { when ( modelConverter . getForecastModel ( ) ) . thenThrow ( new IOException ( "someExec" ) ) ; }
private void givenInvalidRequestReturningEmpty ( ) throws IOException { when ( modelConverter . getForecastModel ( ) ) . thenReturn ( new ArrayList < ForecastData > ( ) ) ; }
private void thenCallbackShouldBeError ( ) { assertEquals ( true , isError ) ; }
private void givenInvalidRequestReturningNull ( ) throws IOException { when ( modelConverter . getForecastModel ( ) ) . thenReturn ( null ) ; }
private void whenExecuting ( ) { uut . execute ( testApiCallback ) ; }
private void thenCallbackShouldBeSuccess ( ) { assertEquals ( true , isSuccess ) ; }
private void givenValidRequestReturningModel ( ) throws IOException { when ( modelConverter . getForecastModel ( ) ) . thenReturn ( new ArrayList < ForecastData > ( ) { { add ( mock ( ForecastData . class ) ) ; } } ) ; }
private void notifyOnError ( ) { final OpenWeatherApiError error = new OpenWeatherApiError ( ) ; error . setMessage ( weatherLibApp . getString ( R . string . empty_result ) ) ; error . setCode ( ErrorCode . EMPTY ) ; apiCallback . onError ( error ) ; }
private void convertToModel ( OpenWeatherCurrentData openWeatherCurrentData , OpenWeatherForecastData openWeatherForecastData ) throws IOException { converter . fromWeatherPojo ( openWeatherCurrentData ) ; List < ForecastData > forecastData = converter . getWeatherModel ( ) ; convertToModel ( openWeatherForecastData , forecastData ) ; }
public ServiceConfig setApiKey ( @ NonNull String apiKey ) { this . apiKey = apiKey ; return this ; }
public ServiceConfig setWeatherProvider ( @ NonNull WeatherProvider weatherProvider ) { this . weatherProvider = weatherProvider ; return this ; }
public String getApiKey ( ) { return apiKey ; }
private WeatherProvider getWeatherProvider ( ) { return weatherProvider ; }
public void fromForecastPojo ( OpenWeatherForecastData pojo ) { openWeatherForecastData = pojo ; }
public void fromWeatherPojo ( OpenWeatherCurrentData pojo ) { openWeatherCurrentData = pojo ; }
public List < ForecastData > getForecastModel ( ) throws IOException { List < ForecastData > forecastData = new LinkedList <> ( ) ; if ( openWeatherForecastData != null ) { forecastData = populateForecastFromPojo ( forecastData ) ; } return forecastData ; }
public List < ForecastData > getWeatherModel ( ) throws IOException { List < ForecastData > forecastData = new LinkedList <> ( ) ; if ( openWeatherCurrentData != null ) { forecastData = populateWeatherFromPojo ( forecastData ) ; } return forecastData ; }
private void thenDelegateShouldTrackScreen ( ) { new Verifications ( ) { { new Analytics ( withAny ( analyticsManager ) ) . trackOnScreen ( "SettingsActivity" ) ; } } ; }
private void thenDelegateShouldInvalidateOptionsMenu ( ) { new Verifications ( ) { { appCompatDelegate . invalidateOptionsMenu ( ) ; } } ; }
private void thenDelegateShouldDestroy ( ) { new Verifications ( ) { { appCompatDelegate . onDestroy ( ) ; } } ; }
private void thenDelegateShouldStop ( ) { new Verifications ( ) { { appCompatDelegate . onStop ( ) ; } } ; }
private void thenDelegateShouldOnConfigurationChanged ( final Configuration newConfig ) { new Verifications ( ) { { appCompatDelegate . onConfigurationChanged ( newConfig ) ; } } ; }
private void thenDelegateShouldChangeTitle ( ) { new Verifications ( ) { { appCompatDelegate . setTitle ( "anyTitle" ) ; } } ; }
private void thenDelegateShouldPostResume ( ) { new Verifications ( ) { { appCompatDelegate . onPostResume ( ) ; } } ; }
private void thenDelegateShouldSetContentView ( final View view ) { new Verifications ( ) { { appCompatDelegate . setContentView ( view ) ; } } ; }
private void thenDelegateShouldSetContentView ( ) { new Verifications ( ) { { appCompatDelegate . setContentView ( R . layout . weather ) ; } } ; }
private void thenDelegateShouldInflateMenu ( ) { new Verifications ( ) { { appCompatDelegate . getMenuInflater ( ) ; } } ; }
private void thenDelegateShouldPostCreate ( ) { new Verifications ( ) { { appCompatDelegate . onPostCreate ( withAny ( new Bundle ( ) ) ) ; } } ; }
private void givenTemperatureUnitPreference ( ) { Deencapsulation . setField ( uut , "temperatureUnitsPreference" , temperatureUnitsPreference ) ; }
private void whenPreferenceClick ( ) { uut . onPreferenceClick ( usernameToDisplay ) ; }
private void whenPreferenceChange ( Object newValue ) { uut . onPreferenceChange ( temperatureUnitsPreference , newValue ) ; }
private void givenPreferences ( ) { new Expectations ( ) { { preferenceFragment . findPreference ( PREF_TEMPERATURE_UNITS ) ; result = temperatureUnitsPreference ; } } ; }
private void thenShouldDelegateOptionsItemSelected ( final MenuItem menuItem ) { new Verifications ( ) { { preferenceFragment . onOptionsItemSelected ( menuItem ) ; } } ; }
private void thenShouldStartActivity ( ) { new Verifications ( ) { { preferenceFragment . startActivity ( withAny ( new Intent ( ) ) ) ; } } ; }
private void givenPreviousValue ( ) { new Expectations ( ) { { sharedPreferences . getString ( withAny ( "key" ) , "" ) ; result = "someUserName" ; } } ; }
private void thenShouldBindPreference ( final String preferenceName ) { new Verifications ( ) { { preferenceFragment . findPreference ( preferenceName ) ; } } ; }
public void shouldTrackOnScreen ( ) { givenScreenName ( "someScreen" ) ; whenTrackingOnScreen ( ) ; thenAnalyticsManagerShouldNotifyOnScreen ( ) ; }
public void shouldTrackOnActionEvent ( ) { givenAnalyticsEvent ( ) ; whenTrackingOnActionEvent ( ) ; thenAnalyticsManagerShouldNotifyOnAction ( ) ; }
private void whenTrackingOnActionEvent ( ) { uut . trackOnActionEvent ( analyticsEvent ) ; }
private void givenAnalyticsEvent ( ) { analyticsEvent = new AnalyticsEvent ( NO_NETWORK_SEARCH , null ) ; }
private void givenScreenName ( String someScreen ) { screenName = someScreen ; }
private void whenTrackingOnScreen ( ) { uut . trackOnScreen ( screenName ) ; }
private void givenUut ( ) { uut = new AnalyticsManager ( context ) ; uut . addObserver ( mAnalyticsTestObserver ) ; }
private void thenScreenNotEmpty ( ) { assertNotNull ( screen ) ; }
private void thenOnActionNotified ( ) { assertTrue ( handlingOnScreen ) ; }
private void thenOnScreenNotified ( ) { assertTrue ( handlingOnScreen ) ; }
private void whenNotifyingOnAction ( ) { AnalyticsEvent analyticsEvent = new AnalyticsEvent ( action , null ) ; uut . notifyOnAction ( analyticsEvent ) ; }
private void givenAction ( String action ) { this . action = action ; }
private void givenAppVersion ( String appVersion ) { AnalyticsManager . BUILD_APP_VERSION = appVersion ; }
private void givenAndroidVersion ( String androidSdkVersion ) { AnalyticsManager . BUILD_ANDROID_VERSION = androidSdkVersion ; }
private void thenAnalyticsDataShouldContain ( String key , String value ) { assertNotNull ( analyticsBaseData . data ( ) . containsKey ( key ) ) ; assertEquals ( value , analyticsBaseData . data ( ) . get ( key ) ) ; }
private void givenIsMultipane ( final boolean isMultipane ) { new Expectations ( ) { { WeatherUtils . isXLargeTablet ( context ) ; result = isMultipane ; } } ; }
private void givenNetwork ( final int connectivityManagerType ) { new Expectations ( ) { { networkInfo . getType ( ) ; result = connectivityManagerType ; } } ; }
private void givenNullNetwork ( ) { new Expectations ( ) { { connectivityManager . getActiveNetworkInfo ( ) ; result = null ; } } ; }
private void thenSecondObserverNotifiedScreen ( ) { verify ( secondMockObserver , times ( 1 ) ) . onScreen ( anyString ( ) , any ( AnalyticsBaseData . class ) ) ; }
private void givenSecondObserver ( ) { secondMockObserver = mock ( AnalyticsObserver . class ) ; uut . addObserver ( secondMockObserver ) ; }
private void thenBuilderShouldSetCategory ( final HitBuilders . EventBuilder eventBuilder ) { new Verifications ( ) { { eventBuilder . setCategory ( withEqual ( mAnalyticsEvent . getName ( ) ) ) ; } } ; }
private void thenBuilderShouldSetAction ( final HitBuilders . EventBuilder eventBuilder ) { new Verifications ( ) { { eventBuilder . setAction ( withEqual ( mAnalyticsEvent . getAdditionalValue ( ) ) ) ; } } ; }
private void whenRequestingPermission ( ) { uut . requestPermission ( mPermissionListener ) ; }
public void addSelectedEntry ( VaultEntry entry ) { if ( _focusedEntry != null ) { resetFocus ( ) ; } _selectedEntries . add ( entry ) ; updateDraggableStatus ( ) ; }
public BackupFile ( DocumentFile file ) throws ParseException { _file = file ; _info = FileInfo . parseFilename ( file . getName ( ) ) ; }
public int compare ( BackupFile o1 , BackupFile o2 ) { return o1 . getInfo ( ) . getDate ( ) . compareTo ( o2 . getInfo ( ) . getDate ( ) ) ; }
public String toString ( ) { return String . format ( "%s - %s . %s" , _filename , _dateFormat . format ( _date ) , _ext ) ; }
private static void showTextInputDialog ( Context context , @ StringRes int titleId , @ StringRes int hintId , TextInputListener listener , boolean isSecret ) { showTextInputDialog ( context , titleId , 0 , hintId , listener , null , isSecret ) ; }
public static void showPasswordInputDialog ( Context context , @ StringRes int messageId , TextInputListener listener ) { showTextInputDialog ( context , R . string . set_password , messageId , R . string . password , listener , null , true ) ; }
public void removeSelectedEntry ( VaultEntry entry ) { _selectedEntries . remove ( entry ) ; updateDraggableStatus ( ) ; }
public GroupHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { View view = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card_group , parent , false ) ; return new GroupHolder ( view ) ; }
public GroupHolder ( final View view ) { super ( view ) ; _slotName = view . findViewById ( R . id . text_group_name ) ; _buttonDelete = view . findViewById ( R . id . button_delete ) ; }
private State ( DatabaseImporter . State state ) { super ( false ) ; _state = state ; }
public boolean onCreateOptionsMenu ( Menu menu ) { _menu = menu ; getMenuInflater ( ) . inflate ( R . menu . menu_scanner , menu ) ; return true ; }
public void refresh ( boolean hard ) { if ( hard ) { notifyDataSetChanged ( ) ; } else { for ( EntryHolder holder : _holders ) { holder . refresh ( ) ; } } }
public void refresh ( boolean hard ) { if ( _showProgress ) { _progressBar . restart ( ) ; } _adapter . refresh ( hard ) ; }
public void onAttachedToWindow ( ) { if ( _bioKey != null && _prefs . isPasswordReminderNeeded ( ) ) { showPasswordReminder ( ) ; } }
public void addEntries ( Collection < VaultEntry > entries ) { _adapter . addEntries ( entries ) ; updateEmptyState ( ) ; }
public SqlImporterHelper ( Context context ) { _context = context ; }
public KeyDerivationTask ( Context context , Callback cb ) { super ( context , context . getString ( R . string . encrypting_vault ) ) ; _cb = cb ; }
public Result ( MasterKey key , PasswordSlot slot , boolean repaired ) { _key = key ; _slot = slot ; _repaired = repaired ; }
public Result ( MasterKey key , PasswordSlot slot ) { this ( key , slot , false ) ; }
public boolean isPeriodUniform ( ) { return isPeriodUniform ( getMostFrequentPeriod ( ) ) ; }
public long getMillisTillNextRefresh ( ) { return TotpInfo . getMillisTillNextRotation ( _adapter . getMostFrequentPeriod ( ) ) ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { setPreferencesFromResource ( R . xml . wallpaper_settings , rootKey ) ; }
public void run ( ) { execGetRedeemableSkuDetails ( userId , skuId , requestPayload , callback ) ; }
public void run ( ) { execGetRedeemableSkus ( userId , requestPayload , callback ) ; }
private void pinSaltNotFetched ( ) { if ( null != mListener ) { mListener . invalidPin ( 0 , null , "" , mOstPinAcceptInterface ) ; } super . close ( ) ; }
public void run ( ) { uploadWebView . loadUrl ( DtubeAPI . DTUBE_PUBLISH_URL ) ; }
public void run ( ) { loadUrl ( DtubeAPI . DTUBE_PUBLISH_URL ) ; }
public void onChanged ( List < WorkInfo > workInfos ) { handleResult ( context , moreAppsDialog , workInfos , workInfo , this , listener , constraints , dataBuilder , updateSettings , instance ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . spinthechoice . garbage . android" , appContext . getPackageName ( ) ) ; }
private String [ ] formatPickupDay ( final GarbageDay day ) { return new String [ ] { Text . formatDateMedium ( this , day . getDate ( ) ) , formatPickupItem ( day ) } ; }
private void setupHolidaySelectedListener ( ) { adapter . setOnItemSelectedListener ( new OnItemSelectedListener ( ) { @ Override public boolean selected ( final String holidayId ) { setupActionMode ( holidayId ) ; return true ; } } ) ; }
public void onCheckedChanged ( final CompoundButton button , final boolean checked ) { if ( checked ) { holder . setCancelChecked ( false ) ; item . setCancel ( false ) ; } item . setPostpone ( checked ) ; invokeChangeListener ( item ) ; }
public void onCheckedChanged ( final CompoundButton button , final boolean checked ) { if ( checked ) { holder . setPostponeChecked ( false ) ; item . setPostpone ( false ) ; } item . setCancel ( checked ) ; invokeChangeListener ( item ) ; }
private RecyclerView . Adapter < ? > datesAdapter ( final List < GarbageDay > days ) { return new TwoLineListAdapter ( days . stream ( ) . map ( this : : formatPickupDay ) . collect ( toList ( ) ) ) ; }
public void setHolidays ( final List < NamedHoliday > holidays ) { this . holidays = holidays ; }
private void openFoundObject ( int position ) { ITetroidObject found = ( ITetroidObject ) mListAdapter . getItem ( position ) ; mMainView . openFoundObject ( found ) ; }
public String getTitle ( ) { if ( mContext != null ) return String . format ( getString ( R . string . search_found_mask ) , mFoundCount ) ; else return null ; }
private void init ( String name , String path , Date created , Date edited ) { this . mName = name ; this . mPath = path ; this . mCreatedDate = created ; this . mEditedDate = edited ; }
public static Stack < TetroidNode > createNodesHierarchy ( TetroidNode node ) { if ( node == null ) return null ; Stack < TetroidNode > hierarchy = new Stack <> ( ) ; createNodesHierarchy ( hierarchy , node ) ; return hierarchy ; }
private void reloadStorage ( ) { reinitStorage ( ) ; }
public static String getLastChoosedFolderPath ( Context context ) { return getString ( context , R . string . pref_key_last_folder , null ) ; }
public static List < TetroidNode > getRootNodes ( ) { return getInstance ( ) . mXml . mRootNodesList ; }
public void onResume ( ) { super . onResume ( ) ; SettingsManager . getSettings ( getContext ( ) ) . registerOnSharedPreferenceChangeListener ( this ) ; }
public void onPause ( ) { super . onPause ( ) ; SettingsManager . getSettings ( getContext ( ) ) . unregisterOnSharedPreferenceChangeListener ( this ) ; }
public static String logOperRes ( Context context , Objs obj , Opers oper , TetroidObject o , int duration ) { return logOperRes ( context , obj , oper , addIdName ( context , o ) , duration ) ; }
public static String logOperErrorMore ( Context context , Objs obj , Opers oper , int duration ) { return logOperError ( context , obj , oper , null , true , duration ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == android . R . id . home ) { onBackPressed ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public static boolean createDefault ( Context context ) { return ( NodesManager . createNode ( context , context . getString ( R . string . title_first_node ) , TetroidXml . ROOT_NODE ) != null ) ; }
public String encryptField ( TetroidObject obj , String field ) { return encryptField ( obj != null && obj . isCrypted ( ) && obj . isDecrypted ( ) , field ) ; }
public Collection < TetroidTag > getTagsValues ( ) { return mXml . mTagsMap . values ( ) ; }
public static boolean isLoaded ( ) { return ( Instance != null && Instance . mXml . mIsStorageLoaded ) ; }
public static boolean isFavoritesMode ( ) { return Instance != null && Instance . mXml . mIsFavoritesMode ; }
public static TetroidNode getNode ( String id ) { return getNodeInHierarchy ( Instance . mXml . mRootNodesList , id ) ; }
public void onApply ( ) { Instance . initCryptPass ( hash , true ) ; PINManager . askPINCode ( context , true , callback : : onApply ) ; }
public static boolean checkPass ( String pass ) throws DatabaseConfig . EmptyFieldException { String salt = Instance . mDatabaseConfig . getCryptCheckSalt ( ) ; String checkHash = Instance . mDatabaseConfig . getCryptCheckHash ( ) ; return Instance . mCrypter . checkPass ( pass , salt , checkHash ) ; }
public static boolean checkMiddlePassHash ( String passHash ) throws DatabaseConfig . EmptyFieldException { String checkData = Instance . mDatabaseConfig . getMiddleHashCheckData ( ) ; return Instance . mCrypter . checkMiddlePassHash ( passHash , checkData ) ; }
public static void clearSavedPass ( Context context ) { SettingsManager . setMiddlePassHash ( context , null ) ; Instance . mCrypter . setMiddlePassHash ( null ) ; clearPassCheckData ( context ) ; clearMiddlePassCheckData ( ) ; }
public static boolean saveMiddlePassCheckData ( String passHash ) { String checkData = Instance . mCrypter . createMiddlePassHashCheckData ( passHash ) ; return Instance . mDatabaseConfig . saveCheckData ( checkData ) ; }
public byte [ ] encryptTextBase64Bytes ( String text ) { if ( text == null ) return null ; return encryptBytesBase64Bytes ( text . getBytes ( CHARSET_UTF_8 ) ) ; }
public byte [ ] encryptTextBytes ( String text ) { if ( text == null ) return null ; byte [ ] out = encrypt ( mCryptKey , text . getBytes ( CHARSET_UTF_8 ) ) ; return out ; }
public byte [ ] encryptBytes ( byte [ ] bytes ) { return encrypt ( mCryptKey , bytes ) ; }
public String decryptText ( byte [ ] text ) { return decryptString ( mCryptKey , text ) ; }
public byte [ ] decryptBytes ( byte [ ] bytes ) { return decrypt ( mCryptKey , bytes ) ; }
public String decryptBase64 ( String line ) { return decryptBase64 ( mCryptKey , line ) ; }
public String decryptString ( int [ ] key , byte [ ] bytes ) { byte [ ] out = decrypt ( key , bytes ) ; if ( out != null ) return new String ( out ) ; return null ; }
public byte [ ] decodeBase64 ( String s ) { try { return Base64 . decode ( s . toCharArray ( ) ) ; } catch ( Exception ex ) { addLog ( ex ) ; } return null ; }
public String getMiddlePassHash ( ) { return mMiddlePassHash ; }
public int getErrorCode ( ) { return rc5 . getErrorCode ( ) ; }
public boolean encryptNodes ( Context context , List < TetroidNode > nodes , boolean isReencrypt ) { boolean res = true ; for ( TetroidNode node : nodes ) { res = res & encryptNode ( context , node , isReencrypt ) ; } return res ; }
public static void log ( Context context , String s , ILogger . Types type , int duration ) { log ( context , s , type , isWriteToFile , duration ) ; }
public static void log ( Context context , String s , ILogger . Types type ) { log ( context , s , type , isWriteToFile , DURATION_NONE ) ; }
public static void log ( Context context , String s ) { log ( context , s , ILogger . Types . INFO ) ; }
public static void log ( Context context , int sId ) { log ( context , context . getString ( sId ) , ILogger . Types . INFO ) ; }
public static void log ( Context context , String s , int duration ) { log ( context , s , ILogger . Types . INFO , duration ) ; }
public static void log ( Context context , int sId , ILogger . Types type ) { log ( context , context . getString ( sId ) , type , DURATION_NONE ) ; }
public static void log ( Context context , int sId , ILogger . Types type , int duration ) { log ( context , context . getString ( sId ) , type , duration ) ; }
public static void log ( Context context , Exception ex ) { log ( context , getExceptionInfo ( ex ) , ILogger . Types . ERROR ) ; }
public static void log ( Context context , String s , Exception ex ) { log ( context , s + " : " + getExceptionInfo ( ex ) , ILogger . Types . ERROR ) ; }
public static void log ( Context context , Exception ex , int duration ) { log ( context , getExceptionInfo ( ex ) , ILogger . Types . ERROR , duration ) ; }
public static void log ( Context context , String s , Exception ex , int duration ) { log ( context , s + " : " + getExceptionInfo ( ex ) , ILogger . Types . ERROR , duration ) ; }
private static void addLogWithoutFile ( Context context , String s , int duration ) { log ( context , s , ILogger . Types . ERROR , false , duration ) ; }
public static void emptyContextLog ( Context context ) { log ( context , "Parameter < context > is null" , ILogger . Types . WARNING ) ; }
public static void checkKeepScreenOn ( Activity activity ) { ViewUtils . setKeepScreenOn ( activity , SettingsManager . isKeepScreenOn ( activity ) ) ; }
private void checkExistenceCryptedNodes ( ) { if ( ! NodesManager . isExistCryptedNodes ( true ) ) { AskDialogs . showYesDialog ( this , ( ) -> PassManager . clearSavedPass ( this ) , R . string . ask_clear_pass_database_ini ) ; } }
public void onColorSelected ( int dialogId , int color ) { SettingsManager . addPickedColor ( this , color , WysiwygEditor . MAX_SAVED_COLORS ) ; mEditor . setPickedColor ( color ) ; }
public int [ ] getSavedColors ( ) { return SettingsManager . getPickedColors ( this ) ; }
public void removeSavedColor ( int index , int color ) { SettingsManager . removePickedColor ( this , color ) ; }
private boolean saveRecord ( ResultObj obj ) { boolean runBeforeSaving = SettingsManager . isFixEmptyParagraphs ( this ) ; if ( runBeforeSaving ) { this . mResultObj = obj ; } return saveRecord ( runBeforeSaving , obj ) || runBeforeSaving ; }
public void openRecordFolder ( ) { if ( ! RecordsManager . openRecordFolder ( this , mRecord ) ) { LogManager . log ( this , R . string . log_missing_file_manager , Toast . LENGTH_LONG ) ; } }
public static boolean clearTrashFolder ( Context context ) { File trashDir = new File ( SettingsManager . getTrashPath ( context ) ) ; TetroidClipboard . clear ( ) ; return FileUtils . clearDir ( trashDir ) ; }
public static String getStringFromTo ( Context context , String from , String to ) { return Utils . getStringFormat ( context , R . string . log_from_to_mask , from , to ) ; }
public static String getStringTo ( Context context , String to ) { return Utils . getStringFormat ( context , R . string . log_to_mask , to ) ; }
public static void load ( Context context ) { mFavorites = new FavoriteList ( ( App . isFullVersion ( ) ) ? SettingsManager . getFavorites ( context ) : null ) ; }
public static boolean add ( Context context , TetroidRecord record ) { boolean res = mFavorites . add ( record ) ; if ( res ) { record . setIsFavorite ( true ) ; saveFavorites ( context ) ; } return res ; }
public void applyPass ( String pass , TetroidNode node ) { setupPass ( context , pass ) ; }
public static boolean clearMiddlePassCheckData ( ) { return Instance . mDatabaseConfig . saveCheckData ( null ) ; }
public static String getStoragePath ( Context context ) { return getString ( context , R . string . pref_key_storage_path , null ) ; }
public static boolean isLoadLastStoragePath ( Context context ) { return getBoolean ( context , R . string . pref_key_is_load_last_storage_path , true ) ; }
public static String getTrashPath ( Context context ) { return getString ( context , R . string . pref_key_temp_path , null ) ; }
public static String getQuicklyNodeId ( Context context ) { return getString ( context , R . string . pref_key_quickly_node_id , null ) ; }
public static String getQuicklyNodeName ( Context context ) { return getString ( context , R . string . pref_key_quickly_node_name , null ) ; }
public static boolean isLoadFavoritesOnly ( Context context ) { return getBoolean ( context , R . string . pref_key_is_load_favorites , false ) ; }
public static boolean isKeepLastNode ( Context context ) { return getBoolean ( context , R . string . pref_key_is_keep_selected_node , true ) ; }
public static String getLastNodeId ( Context context ) { return getString ( context , R . string . pref_key_selected_node_id , null ) ; }
public static boolean isSaveMiddlePassHashLocal ( Context context ) { return getBoolean ( context , R . string . pref_key_is_save_pass_hash_local , true ) ; }
public static String getMiddlePassHash ( Context context ) { return getString ( context , R . string . pref_key_pass_hash , null ) ; }
public static boolean isRequestPINCode ( Context context ) { return getBoolean ( context , R . string . pref_key_request_pin_code , false ) ; }
public static int getPINCodeLength ( Context context ) { return getInt ( context , R . string . pref_key_pin_code_length , DEF_PIN_CODE_LENGTH ) ; }
public static String getPINCodeHash ( Context context ) { return getString ( context , R . string . pref_key_pin_code_hash , null ) ; }
public static String getWhenAskPass ( Context context ) { return getString ( context , R . string . pref_key_when_ask_password , context . getString ( R . string . pref_when_ask_password_on_select ) ) ; }
public static boolean isDecryptFilesInTemp ( Context context ) { return getBoolean ( context , R . string . pref_key_is_decrypt_in_temp , false ) ; }
public static String getSyncCommand ( Context context ) { return getString ( context , R . string . pref_key_sync_command , null ) ; }
public static boolean isSyncBeforeInit ( Context context ) { return getBoolean ( context , R . string . pref_key_is_sync_before_init , true ) ; }
public static boolean isCheckOutsideChanging ( Context context ) { return getBoolean ( context , R . string . pref_key_check_outside_changing , true ) ; }
public static boolean isRecordAutoSave ( Context context ) { return getBoolean ( context , R . string . pref_key_is_record_auto_save , false ) ; }
public static boolean isFixEmptyParagraphs ( Context context ) { return getBoolean ( context , R . string . pref_key_fix_empty_paragraphs , true ) ; }
public static boolean isHighlightRecordWithAttach ( Context context ) { return getBoolean ( context , R . string . pref_key_is_highlight_attach , false ) ; }
public static boolean isHighlightEncryptedNodes ( Context context ) { return getBoolean ( context , R . string . pref_key_is_highlight_crypted_nodes , false ) ; }
public static int [ ] getPickedColors ( Context context ) { String value = getString ( context , R . string . pref_key_picked_colors , null ) ; return ( value != null ) ? Utils . splitToInts ( value , " ; " ) : null ; }
public static String getSearchQuery ( Context context ) { return getString ( context , R . string . pref_key_search_query , null ) ; }
public static boolean isSearchInText ( Context context ) { return getBoolean ( context , R . string . pref_key_search_text , DEF_SEARCH_IN_RECORD_TEXT ) ; }
public static boolean isSearchInRecordsNames ( Context context ) { return getBoolean ( context , R . string . pref_key_search_records_names , DEF_SEARCH_IN_RECORDS_NAMES ) ; }
public static boolean isSearchInAuthor ( Context context ) { return getBoolean ( context , R . string . pref_key_search_author , DEF_SEARCH_IN_AUTHOR ) ; }
public static boolean isSearchInUrl ( Context context ) { return getBoolean ( context , R . string . pref_key_search_url , DEF_SEARCH_IN_URL ) ; }
public static boolean isSearchInTags ( Context context ) { return getBoolean ( context , R . string . pref_key_search_tags , DEF_SEARCH_IN_TAGS ) ; }
public static boolean isSearchInNodes ( Context context ) { return getBoolean ( context , R . string . pref_key_search_nodes , DEF_SEARCH_IN_NODES ) ; }
public static boolean isSearchInFiles ( Context context ) { return getBoolean ( context , R . string . pref_key_search_files , DEF_SEARCH_IN_FILES ) ; }
public static boolean isSearchInIds ( Context context ) { return getBoolean ( context , R . string . pref_key_search_ids , DEF_SEARCH_IN_IDS ) ; }
public static boolean isSearchSplitToWords ( Context context ) { return getBoolean ( context , R . string . pref_key_search_split_to_words , DEF_SEARCH_SPLIT_TO_WORDS ) ; }
public static boolean isSearchInWholeWords ( Context context ) { return getBoolean ( context , R . string . pref_key_search_in_whole_words , DEF_SEARCH_IN_WHOLE_WORDS ) ; }
private void copyRecord ( TetroidRecord record ) { TetroidClipboard . copy ( record ) ; TetroidLog . logOperRes ( mContext , TetroidLog . Objs . RECORD , TetroidLog . Opers . COPY ) ; }
public static void setLogPath ( Context context , String path ) { LogManager . dirPath = path ; LogManager . fullFileName = String . format ( "%s%s%s . log" , path , File . separator , context . getString ( R . string . app_name ) ) ; }
public static void showMessage ( Context context , String s , int duration ) { Message . show ( context , s , duration ) ; }
public void onApply ( ) { saveRecord ( obj ) ; }
public void startCamera ( ) { if ( ! PermissionManager . checkCameraPermission ( this , StorageManager . REQUEST_CODE_PERMISSION_CAMERA ) ) { return ; } Intent intent = ImagePicker . cameraOnly ( ) . getIntent ( this ) ; startActivityForResult ( intent , REQUEST_CODE_CAMERA ) ; }
public static String getStorageName ( ) { return Instance . mStorageName ; }
public static boolean isInited ( ) { return ( Instance != null && Instance . mIsStorageInited ) ; }
public static String getDateFormatString ( Context context ) { return getString ( context , R . string . pref_key_date_format_string , context . getString ( R . string . def_date_format_string ) ) ; }
public static boolean isRecordEditMode ( Context context ) { return getBoolean ( context , R . string . pref_key_is_record_edit_mode , false ) ; }
public void beforeSaveAsync ( boolean deleteStyleEmpty ) { if ( deleteStyleEmpty ) { deleteStyleEmpty ( ) ; } this . mIsCalledHtmlRequest = true ; mWebView . makeEditableHtmlRequest ( ) ; }
public void research ( ) { showGlobalSearchActivity ( null ) ; }
public void onApply ( ) { if ( callback != null ) { callback . run ( true ) ; } }
public static List < TetroidRecord > getFavoritesRecords ( ) { return mFavorites ; }
private void updateFavorites ( TetroidRecord record ) { if ( record == null || ! record . isFavorite ( ) ) return ; mMainView . updateFavorites ( ) ; mListAdapterRecords . notifyDataSetInvalidated ( ) ; }
public TetroidNode getNode ( ) { return mNode ; }
public String getTagsString ( ) { return ( isCrypted && isDecrypted ) ? mDecryptedTagsString : mTagsString ; }
public String getTagsString ( boolean cryptedValue ) { return ( cryptedValue ) ? mTagsString : mDecryptedTagsString ; }
public String getAuthor ( ) { return ( isCrypted && isDecrypted ) ? mDecryptedAuthor : mAuthor ; }
public String getAuthor ( boolean cryptedValue ) { return ( cryptedValue ) ? mAuthor : mDecryptedAuthor ; }
public String getUrl ( ) { return ( isCrypted && isDecrypted ) ? mDecryptedUrl : mUrl ; }
public String getUrl ( boolean cryptedValue ) { return ( cryptedValue ) ? mUrl : mDecryptedUrl ; }
public Date getCreated ( ) { return mCreated ; }
public String getCreatedString ( String format ) { return ( mCreated != null ) ? Utils . dateToString ( mCreated , format ) : "" ; }
public String getDirName ( ) { return mDirName ; }
public String getFileName ( ) { return mFileName ; }
public List < TetroidFile > getAttachedFiles ( ) { return mFiles ; }
public int getAttachedFilesCount ( ) { return mFiles . size ( ) ; }
public void setTagsString ( String tagsString ) { this . mTagsString = tagsString ; }
public void setDecryptedTagsString ( String value ) { this . mDecryptedTagsString = value ; }
public void setAuthor ( String author ) { this . mAuthor = author ; }
public void setDecryptedAuthor ( String value ) { this . mDecryptedAuthor = value ; }
public void setDecryptedUrl ( String value ) { this . mDecryptedUrl = value ; }
public void setCreated ( Date created ) { this . mCreated = created ; }
public void setDirName ( String dirName ) { this . mDirName = dirName ; }
public void setNode ( TetroidNode node ) { this . mNode = node ; }
public void addTag ( TetroidTag tag ) { mTags . add ( tag ) ; }
public void setAttachedFiles ( List < TetroidFile > files ) { this . mFiles = files ; }
public boolean isNew ( ) { return mIsNew ; }
public static boolean isWriteLogToFile ( Context context ) { return getBoolean ( context , R . string . pref_key_is_write_log , false ) ; }
public static String getLogPath ( Context context ) { return getString ( context , R . string . pref_key_log_path , null ) ; }
public static String getStringFormat ( String format , Object . . . args ) { return String . format ( Locale . getDefault ( ) , format , args ) ; }
public boolean savePass ( String passHash , String salt , boolean cryptMode ) { setValueToGeneralWithQuotes ( INI_CRYPT_CHECK_HASH , passHash ) ; setValueToGeneralWithQuotes ( INI_CRYPT_CHECK_SALT , salt ) ; setValueToGeneral ( INI_CRYPT_MODE , ( cryptMode ) ? "1" : "0" ) ; return save ( ) ; }
public boolean saveDefault ( ) { setValueToGeneral ( INI_CRYPT_CHECK_HASH , null ) ; setValueToGeneral ( INI_CRYPT_CHECK_SALT , null ) ; setValueToGeneral ( INI_CRYPT_MODE , "0" ) ; setValueToGeneral ( INI_MIDDLE_HASH_CHECK_DATA , null ) ; setValueToGeneral ( INI_VERSION , DEF_VERSION ) ; return save ( ) ; }
public static ReceivedData [ ] textIntents ( ) { return new ReceivedData [ ] { new ReceivedData ( true , false , R . string . text_intent_create_text ) , new ReceivedData ( false , false , R . string . text_intent_exist_text ) } ; }
public INIProperties ( String fileName ) { this . config = new Properties ( ) ; this . fileName = fileName ; }
public void set ( String key , String value ) { config . setProperty ( key , value ) ; }
public String get ( String key ) { return config . getProperty ( key ) ; }
public TetroidFile ( boolean isCrypted , String id , String name , String fileType , TetroidRecord record ) { super ( FoundType . TYPE_FILE , isCrypted , id , name ) ; this . mFileType = fileType ; this . mRecord = record ; }
public String getFileType ( ) { return mFileType ; }
public TetroidRecord getRecord ( ) { return mRecord ; }
public static byte [ ] calculatePBKDF2Hash ( String pass , byte [ ] salt ) throws NoSuchAlgorithmException , InvalidKeySpecException { return PBKDF2 . encrypt ( pass , salt , CRYPT_CHECK_ROUNDS , CRYPT_CHECK_HASH_LEN ) ; }
public static TetroidClipboard getInstance ( ) { if ( mInstance == null ) { mInstance = new TetroidClipboard ( ) ; } return mInstance ; }
public void onSearchClick ( ) { }
public void onGroupItemClicked ( MultiLevelListView parent , View view , Object item , ItemInfo itemInfo ) { /* TetroidNode node = ( TetroidNode ) item ; if ( ! node . isNonCryptedOrDecrypted ( ) ) { decryptStorage ( node ) ; } */ }
public void onClose ( ) { setFindButtonsVisibility ( false ) ; stopSearch ( ) ; }
public boolean onQueryTextSubmit ( String query ) { onQuerySubmit ( query ) ; return true ; }
public static Uri getStoragePathBaseUri ( ) { return Uri . parse ( "file : }
public int getCount ( ) { return mDataSet . size ( ) ; }
public Object getItem ( int position ) { return mDataSet . get ( position ) ; }
public long getItemId ( int position ) { return mDataSet . get ( position ) . getId ( ) . hashCode ( ) ; }
public List < TetroidFile > getDataSet ( ) { return mDataSet ; }
public boolean onLongClick ( View view , TetroidNode node , int pos ) { showNodePopupMenu ( view , node , pos ) ; return true ; }
public void setTitleMask ( String titleMask ) { this . mTitleMask = titleMask ; }
public void setMainView ( IMainView main ) { this . mMainView = main ; }
public void setMainView ( Bundle arguments ) { if ( arguments != null ) { this . mMainView = arguments . getParcelable ( MainPagerAdapter . KEY_MAIN_VIEW ) ; } }
public void setGestureDetector ( GestureDetectorCompat detector ) { this . mGestureDetector = detector ; }
public boolean onTouch ( View v , MotionEvent event ) { if ( mGestureDetector != null ) mGestureDetector . onTouchEvent ( event ) ; return false ; }
public boolean onBackPressed ( ) { mMainView . openMainPage ( ) ; return true ; }
public void showRecord ( TetroidRecord record ) { mMainView . openRecord ( record ) ; }
private void showRecord ( int position ) { TetroidRecord record = ( TetroidRecord ) mListAdapterRecords . getItem ( position ) ; showRecord ( record ) ; }
public void showCurRecord ( ) { showRecord ( mCurRecord ) ; }
public int getCurMainViewId ( ) { return mCurMainViewId ; }
public static boolean isLoadCryptedRecords ( ) { return ( ! BuildConfig . DEBUG || IS_LOAD_CRYPTED_RECORDS ) ; }
public static boolean isRecordsLoadedEnough ( int recordsNum ) { return ( BuildConfig . DEBUG && RECORDS_MAX_NUM > 0 && recordsNum >= RECORDS_MAX_NUM ) ; }
public DownloadActionClick ( DownloadWithUpdate download , WhatAction what , DialogUtils . ShowStuffInterface listener ) { this . download = download ; this . what = what ; this . listener = listener ; }
private UserProfile getProfile ( @ NotNull ConnectivityManager connManager , WifiManager wifiManager ) { NetworkInfo activeNet = connManager . getActiveNetworkInfo ( ) ; if ( activeNet == null ) return getDefaultProfile ( ) ; return getProfile ( activeNet . getType ( ) , wifiManager ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; DirectDownloadHelper . invalidate ( ) ; }
public static boolean canHandleIntent ( @ NotNull Context context , @ NonNull Intent intent ) { return intent . resolveActivity ( context . getPackageManager ( ) ) != null ; }
public void onDownloads ( @ NotNull List < DdDownload > downloads ) { adapter = new DirectDownloadsAdapter ( this , helper , downloads , new RestartListener ( ) ) ; rmv . loadListData ( adapter ) ; countUpdated ( ) ; }
public void onAdded ( @ NotNull DdDownload download ) { if ( adapter != null ) adapter . add ( download ) ; countUpdated ( ) ; }
public void onRemoved ( @ NotNull DdDownload download ) { if ( adapter != null ) adapter . remove ( download ) ; countUpdated ( ) ; }
private int indexOf ( @ NotNull DdDownload download ) { for ( int i = 0 ; i < downloads . size ( ) ; i ++ ) if ( downloads . get ( i ) . is ( download ) ) return i ; return - 1 ; }
public void remove ( DdDownload download ) { int index = indexOf ( download ) ; if ( index != - 1 ) { downloads . remove ( index ) ; notifyItemRemoved ( index ) ; } }
public void onResult ( @ NonNull OptionsMap result ) { try { startInternal ( createFetchRequest ( base , result , ddDir , file ) , listener ) ; } catch ( PreparationException ex ) { listener . onFailed ( ex ) ; } }
public UserProfile getProfile ( @ NotNull ProfilesManager manager ) { return getProfile ( manager . getConnectivityManager ( ) , manager . getWifiManager ( ) ) ; }
private static String parseStupidNull ( @ NonNull JSONObject obj , @ NonNull String key ) throws JSONException { String str = CommonUtils . optString ( obj , key ) ; if ( Objects . equals ( str , "null" ) ) return null ; else return str ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . main_menu_functions , menu ) ; return true ; }
public void onEncode ( View view ) { mAC . setText ( Common . bytes2Hex ( Common . acMatrixToACBytes ( mACMatrix ) ) ) ; }
public void afterTextChanged ( Editable s ) { mKeysChanged = true ; }
public void onSaveSuccessful ( ) { if ( mCloseAfterSuccessfulSave ) { finish ( ) ; } mKeysChanged = false ; }
public void onPause ( ) { super . onPause ( ) ; Common . disableNfcForegroundDispatch ( this ) ; }
public void onImportDump ( View view ) { mIsExport = false ; mIsDumpFile = true ; showDumpFileTypeChooserMenu ( ) ; }
public void onImportKeys ( View view ) { mIsExport = false ; mIsDumpFile = false ; showKeysFileTypeChooserMenu ( ) ; }
public void onSuccess ( @ NonNull BookmarkResult result ) { pendingRemoval = null ; cachedData = result ; if ( fragment != null ) { fragment . onNewData ( result ) ; } }
public void onError ( @ NonNull Throwable e ) { exportSubscription = null ; if ( isAdded ( ) ) { ToastCompat . makeText ( context , R . string . export_data_error , Toast . LENGTH_LONG ) . show ( ) ; } }
public void onNext ( @ NonNull Pair < Integer , Boolean > result ) { bookmarksCache . put ( result . first , result . second ) ; }
public void onSuccess ( @ NonNull String url ) { shareUtil . shareViaIntent ( PagerActivity . this , url , R . string . share_ayah ) ; dismissProgressDialog ( ) ; }
public void onError ( @ NonNull Throwable e ) { dismissProgressDialog ( ) ; }
public void onScrolled ( @ NonNull RecyclerView recyclerView , int dx , int dy ) { super . onScrolled ( recyclerView , dx , dy ) ; if ( selectedAyah != null && isDragging ) { updateAyahToolBarPosition ( ) ; } }
public void onLoaderReset ( @ NonNull Loader < Cursor > loader ) { if ( adapter != null ) { adapter . swapCursor ( null ) ; } }
public void onDestroyActionMode ( ActionMode mode ) { if ( mode == actionMode ) { selectionListener . clearSelection ( ) ; actionMode = null ; updateTranslationOrdersIfNecessary ( ) ; } }
public void updateSelectedItem ( ) { if ( spinner != null ) { spinner . setSelection ( currentQari , false ) ; } }
private String getTitle ( ) { if ( audioQueue == null ) { return "" ; } return quranDisplayData . getSuraAyahString ( this , audioQueue . getCurrentSura ( ) , audioQueue . getCurrentAyah ( ) ) ; }
public QuranRow build ( ) { return new QuranRow ( text , metadata , rowType , sura , ayah , page , imageResource , imageFilterColor , juzType , juzOverlayText , bookmarkId , tagId , bookmark , dateAddedInMillis ) ; }
public static void clearCache ( ) { cache . clear ( ) ; }
public static void clearCacheKeyForSheikh ( QariItem qariItem ) { cache . remove ( qariItem ) ; }
private OIDCatalog ( MibCatalogManager mibCatalogManager ) { this . mibCatalogManager = mibCatalogManager ; initData ( ) ; }
public void onAvailable ( @ NonNull Network network ) { super . onAvailable ( network ) ; Log . w ( TAG , "onAvailable ( ) " ) ; checkState ( ) ; }
public void onLost ( @ NonNull Network network ) { super . onLost ( network ) ; Log . w ( TAG , "onLost ( ) " ) ; checkState ( ) ; }
public void onCreateOptionsMenu ( @ NonNull Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . main_custom_query_options_menu , menu ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; wifiNetworkManager = WifiNetworkManager . getInstance ( ) ; Log . d ( TAG , "update network information" ) ; wifiNetworkManager . refresh ( ) ; setHasOptionsMenu ( true ) ; }
public MibCatalogArchiveManager ( @ NotNull Activity context , @ NotNull Uri locationToZip ) { this . context = context ; this . locationToZip = locationToZip ; this . archiveName = getArchiveName ( locationToZip ) ; }
private PeriodicTask ( final Runnable regularTask ) { internalWrapperRunnable = new Runnable ( ) { @ Override public void run ( ) { regularTask . run ( ) ; handler . postDelayed ( this , INTERVAL ) ; } } ; }
public synchronized void start ( ) { internalWrapperRunnable . run ( ) ; }
public synchronized void stop ( ) { handler . removeCallbacks ( internalWrapperRunnable ) ; }
public void testInvalidJsonDoesntWork ( ) throws IOException { ObjectMapper om = new ObjectMapper ( ) ; DeviceQrCode code2 ; code2 = om . readValue ( incorrectQrCodeString1 , DeviceQrCode . class ) ; Assert . assertNull ( code2 ) ; }
public CalendarDay getAccessibilityFocus ( ) { final int day = mTouchHelper . getAccessibilityFocusedVirtualViewId ( ) ; if ( day >= 0 ) { return new CalendarDay ( mYear , mMonth , day ) ; } return null ; }
public void clearFocusedVirtualView ( ) { final int focusedVirtualView = getAccessibilityFocusedVirtualViewId ( ) ; if ( focusedVirtualView != ExploreByTouchHelper . INVALID_ID ) { getAccessibilityNodeProvider ( MonthView . this ) . performAction ( focusedVirtualView , AccessibilityNodeInfoCompat . ACTION_CLEAR_ACCESSIBILITY_FOCUS , null ) ; } }
public static boolean enableAdmin ( boolean val ) { gPrefs . edit ( ) . putBoolean ( ENABLE_ADMIN , val ) . commit ( ) ; return val ; }
private void addColumns ( int id ) { ImageView view = this . findViewById ( id ) ; view . setVisibility ( View . VISIBLE ) ; view . setOnClickListener ( this ) ; }
private void hideColumns ( int id ) { ImageView view = this . findViewById ( id ) ; view . setVisibility ( View . GONE ) ; view . setOnClickListener ( this ) ; }
private void disableFirewall ( ) { Api . setEnabled ( this , false , true ) ; menuSetApplyOrSave ( mainMenu , false ) ; }
public ViewPagerAdapter ( FragmentManager fm , CharSequence [ ] mTitles , int mNumbOfTabsumb ) { super ( fm ) ; this . pageTitles = mTitles ; this . noOfTabs = mNumbOfTabsumb ; }
private CheckBox addSupport ( View convertView , boolean action , int id ) { CheckBox check = convertView . findViewById ( id ) ; check . setVisibility ( View . VISIBLE ) ; check . setOnCheckedChangeListener ( this ) ; } */ return check ; }
private CheckBox removeSupport ( View convertView , int id ) { CheckBox check = convertView . findViewById ( id ) ; check . setVisibility ( View . GONE ) ; return check ; }
public void menuActiviated ( ) { relativeLayout = findViewById ( R . id . widgetCircle ) ; relativeLayout . removeAllViews ( ) ; finish ( ) ; }
private void googleSignIn ( ) { Intent signInIntent = Auth . GoogleSignInApi . getSignInIntent ( mGoogleApiClient ) ; startActivityForResult ( signInIntent , RC_SIGN_IN ) ; }
public void onTouchEvent ( @ NonNull RecyclerView view , @ NonNull MotionEvent motionEvent ) { }
public void setUp ( ) { dateHandler = new DateHandler ( ) ; }
public void date_to_string ( ) { String sActual = dateHandler . dateToString ( context , dActual ) ; assertEquals ( sEsperado , sActual ) ; }
public void string_to_date ( ) { Date dActual = null ; try { dActual = dateHandler . stringToDate ( context , sActual ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } assertEquals ( dEsperada , dActual ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; dateHandler = new DateHandler ( ) ; viewsManager = new ViewsManager ( ) ; setRetainInstance ( true ) ; }
public void add_hours_to_date ( ) { assertEquals ( dEsperado , dateHandler . addHoursToJavaUtilDate ( dActual , dHoras ) ) ; }
public QuakeListViewModel ( @ NonNull Application application , NetworkRepository < QuakeModel > repository ) { super ( application ) ; quakeRepository = repository ; }
public LiveData < Boolean > isLoading ( ) { return quakeRepository . isLoading ( ) ; }
public String getCiudad ( ) { return ciudad ; }
public void setCiudad ( String ciudad ) { this . ciudad = ciudad ; }
public Double getMagnitud ( ) { return magnitud ; }
public void setMagnitud ( Double magnitud ) { this . magnitud = magnitud ; }
public String getEscala ( ) { return escala ; }
public void setEscala ( String escala ) { this . escala = escala ; }
public String getEstado ( ) { return estado ; }
public void setEstado ( String estado ) { this . estado = estado ; }
private long calculateDiff ( @ NonNull Date fecha_local ) { long mDiff ; Date mCurrentTime = new Date ( ) ; long mQuakeTime = fecha_local . getTime ( ) ; long mActualTime = mCurrentTime . getTime ( ) ; mDiff = mActualTime - mQuakeTime ; return mDiff ; }
public GooglePlayService ( Activity activity , @ NonNull Lifecycle lifecycle ) { this . activity = activity ; googlePlay = GoogleApiAvailability . getInstance ( ) ; lifecycle . addObserver ( this ) ; }
public NightModeService ( Activity activity , @ NonNull Lifecycle lifecycle , Window window ) { this . activity = activity ; this . window = window ; lifecycle . addObserver ( this ) ; }
private VolleySingleton ( @ NonNull Context context ) { mContext = context . getApplicationContext ( ) ; mQueue = getRequestQueue ( ) ; }
public static synchronized VolleySingleton getInstance ( @ NonNull Context context ) { if ( sVolleySingleton == null ) { sVolleySingleton = new VolleySingleton ( context ) ; } return sVolleySingleton ; }
public < T > void addToRequestQueue ( @ NonNull Request < T > req , Object tag ) { req . setTag ( tag ) ; getRequestQueue ( ) . add ( req ) ; }
public void onTabSelected ( @ NonNull TabLayout . Tab tab ) { mAppBarLayout . setExpanded ( tab . getPosition ( ) != 2 ) ; }
public boolean onQueryTextChange ( @ NonNull String s ) { String input = s . toLowerCase ( ) ; mViewModel . doSearch ( input ) ; return true ; }
public void onLowMemory ( ) { super . onLowMemory ( ) ; mapView . onLowMemory ( ) ; }
public ReportViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . card_view_reports , parent , false ) ; return new ReportViewHolder ( v ) ; }
private void switchFragment ( Fragment fragment ) { FragmentTransaction transaction = getSupportFragmentManager ( ) . beginTransaction ( ) ; transaction . replace ( R . id . main_fragment_container , fragment ) ; transaction . commit ( ) ; }
public void onFailure ( @ NonNull Exception e ) { Toast . makeText ( getContext ( ) , "Error : Profile image couldn't be uploaded" , Toast . LENGTH_SHORT ) . show ( ) ; }
public ChatModel ( String senderID , String receiverID , String message , Long timeStamp ) { this . senderID = senderID ; this . receiverID = receiverID ; this . message = message ; this . timeStamp = timeStamp ; }
public Long getTimeStamp ( ) { return timeStamp ; }
public void setTimeStamp ( Long timeStamp ) { this . timeStamp = timeStamp ; }
public void setOnPostListener ( OnPostSelectedListener postListener ) { this . listener = postListener ; }
private long getLastSuccess ( ) { return sharedPreferences . getLong ( LAST_SUCCESS , UNDEFINED ) ; }
public void scheduleNow ( ) { scheduleFor ( System . currentTimeMillis ( ) + NOW_DELAY , false ) ; }
private void deleteOnContinue ( Activity unused , boolean ok ) { if ( ok ) { PresenceBeaconManager . getInstance ( ) . removeBeacon ( getContext ( ) , beaconId ) ; } }
public void addBeacon ( PresenceBeacon beacon ) { foundBeacons . add ( beacon ) ; }
private void onSelect ( PresenceBeacon beacon ) { dialogCallback . accept ( beacon ) ; dismiss ( ) ; }
private void onScanResult ( @ Nullable PresenceBeacon beacon ) { if ( beacon == null ) { return ; } PresenceBeaconManager . getInstance ( ) . addBeacon ( getContext ( ) , beacon ) ; }
public boolean onLongClick ( View v ) { ConfirmationDialogFragment instance = getInstance ( this : : deleteOnContinue , R . string . remove_region_title , R . string . remove_region_warning_message ) ; instance . show ( fragment . getParentFragmentManager ( ) , null ) ; return true ; }
public boolean onLongClick ( View v ) { ConfirmationDialogFragment instance = getInstance ( this : : deleteOnContinue , R . string . remove_network_title , R . string . remove_network_warning_message ) ; instance . show ( fragment . getParentFragmentManager ( ) , null ) ; return true ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { return inflater . inflate ( R . layout . fragment_resto_sandwich , container , false ) ; }
public void setType ( String type ) { this . type = type ; }
public int hashCode ( ) { return Objects . hash ( abbreviation ) ; }
public String getAssociation ( ) { return association ; }
public List < Event > apply ( List < Event > events ) { return events . stream ( ) . sorted ( ) . collect ( Collectors . toList ( ) ) ; }
public JsonOkHttpRequest ( @ NonNull Context context , @ NonNull Class < D > token ) { this ( context , ( Type ) token ) ; }
public int compareTo ( @ NonNull Card card ) { return Integer . compare ( this . getPriority ( ) , card . getPriority ( ) ) ; }
public DisableAssociationCommand ( String association ) { this . association = association ; }
public String getCommentsAsString ( ) { if ( comments == null ) { return null ; } else { return comments . stream ( ) . collect ( Collectors . joining ( ) ) ; } }
public String getPhones ( ) { if ( getTelephone ( ) == null ) { return null ; } else { return getTelephone ( ) . stream ( ) . collect ( Collectors . joining ( " ; " ) ) ; } }
public String addressAsString ( ) { if ( getAddress ( ) == null ) { return "" ; } else { return getAddress ( ) . stream ( ) . collect ( Collectors . joining ( "\n" ) ) ; } }
public Request < Optional < OpeningHours >> forDay ( LocalDate date ) { return map ( openingHours -> openingHours . stream ( ) . filter ( o -> date . equals ( o . getDate ( ) ) ) . findFirst ( ) ) ; }
public List < Wrapper > getAsWrappers ( ) { return choices . stream ( ) . map ( Wrapper : : new ) . collect ( Collectors . toList ( ) ) ; }
public void equalsAndHash ( ) { Utils . defaultVerifier ( Association . class ) . withOnlyTheseFields ( "abbreviation" ) . verify ( ) ; }
public EventRequest ( Context context , DismissalDao dismissalDao ) { super ( dismissalDao ) ; this . request = RawEventRequest . create ( context , create ( context ) ) . andThen ( AssociationListRequest . create ( context ) ) ; }
public String toString ( ) { return "Filter { " + "after = " + after + " , before = " + before + " , whitelist = " + whitelist + " , term = '" + term + '\'' + ' } ' ; }
public int getPriority ( ) { Duration duration = Duration . between ( ZonedDateTime . now ( ) , event . getStart ( ) ) ; return PriorityUtils . lerp ( ( int ) duration . toHours ( ) , 0 , 744 ) ; }
public String getIdentifier ( ) { return event . getIdentifier ( ) ; }
public static boolean allowDebugReporting ( ) { return BuildConfig . DEBUG_ENABLE_REPORTING ; }
public ProgressObserver ( @ NonNull ProgressBar progressBar ) { this . progressBar = progressBar ; }
public TimePreference ( Context context , AttributeSet attrs ) { this ( context , attrs , ViewUtils . getAttr ( context , androidx . preference . R . attr . dialogPreferenceStyle , android . R . attr . dialogPreferenceStyle ) ) ; }
public void onPause ( ) { super . onPause ( ) ; Manager . syncPermissions ( getActivity ( ) ) ; }
public void testBothNull ( ) { DiffUpdate < Integer > update = new DiffUpdate <> ( null ) ; List < Integer > actualNewData = update . getNewData ( null ) ; assertNull ( actualNewData ) ; update . applyUpdatesTo ( callback ) ; verifyNoInteractions ( callback ) ; }
public void setUp ( ) { Project project = ProjectBuilder . builder ( ) . build ( ) ; dependencyTask = project . getTasks ( ) . create ( "getDependency" , DependencyTask . class ) ; }
public void testCanBeResolved_isTrue ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . isCanBeResolved ( ) ) . thenReturn ( true ) ; assertTrue ( DependencyTask . canBeResolved ( configuration ) ) ; }
public void testCanBeResolved_isFalse ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . isCanBeResolved ( ) ) . thenReturn ( false ) ; assertFalse ( DependencyTask . canBeResolved ( configuration ) ) ; }
public void testIsTest_isNotTest ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . getName ( ) ) . thenReturn ( "random" ) ; assertFalse ( DependencyTask . isTest ( configuration ) ) ; }
public void testIsTest_isTestCompile ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . getName ( ) ) . thenReturn ( "testCompile" ) ; assertTrue ( DependencyTask . isTest ( configuration ) ) ; }
public void testIsTest_isAndroidTestCompile ( ) { Configuration configuration = mock ( Configuration . class ) ; when ( configuration . getName ( ) ) . thenReturn ( "androidTestCompile" ) ; assertTrue ( DependencyTask . isTest ( configuration ) ) ; }
public void test ( ) { assertEquals ( expectedResult , LicensesTask . isGoogleServices ( inputGroup ) ) ; }
private CustomTabsSession getSession ( ) { if ( client == null ) { customTabsSession = null ; } else if ( customTabsSession == null ) { customTabsSession = client . get ( ) . newSession ( null ) ; } return customTabsSession ; }
private final OnClickListener leaveMuc = new OnClickListener ( ) { @ Override public void onClick ( View v ) { activity . xmppConnectionService . archiveConversation ( conversation ) ; } } ;
private final OnClickListener joinMuc = new OnClickListener ( ) { @ Override public void onClick ( View v ) { activity . xmppConnectionService . joinMuc ( conversation ) ; } } ;
private final OnClickListener acceptJoin = new OnClickListener ( ) { @ Override public void onClick ( View v ) { conversation . setAttribute ( "accept_non_anonymous" , true ) ; activity . xmppConnectionService . updateConversation ( conversation ) ; activity . xmppConnectionService . joinMuc ( conversation ) ; } } ;
private final OnClickListener mScrollButtonListener = new OnClickListener ( ) { @ Override public void onClick ( View v ) { stopScrolling ( ) ; setSelection ( binding . messagesView . getCount ( ) - 1 , true ) ; } } ;
public static Set < ReadByMarker > fromJsonString ( String json ) { try { return fromJson ( new JSONArray ( json ) ) ; } catch ( final JSONException | NullPointerException e ) { return new CopyOnWriteArraySet <> ( ) ; } }
public static JSONArray toJson ( final Set < ReadByMarker > readByMarkers ) { final JSONArray jsonArray = new JSONArray ( ) ; for ( final ReadByMarker marker : readByMarkers ) { jsonArray . put ( marker . toJson ( ) ) ; } return jsonArray ; }
private boolean observing ( final File path ) { for ( final SingleFileObserver observer : mObservers ) { if ( path . equals ( observer . path ) ) { return true ; } } return false ; }
public static void setMediaSize ( RecyclerView recyclerView , int mediaSize ) { final RecyclerView . Adapter adapter = recyclerView . getAdapter ( ) ; if ( adapter instanceof MediaAdapter ) { ( ( MediaAdapter ) adapter ) . setMediaSize ( mediaSize ) ; } }
public boolean isLastCorrectableMessage ( ) { Message next = next ( ) ; while ( next != null ) { if ( next . isEditable ( ) ) { return false ; } next = next . next ( ) ; } return isEditable ( ) ; }
public boolean setMicrophoneEnabled ( final boolean enabled ) { return webRTCWrapper . setMicrophoneEnabled ( enabled ) ; }
private Collection < JingleCandidate > getOurCandidates ( ) { return Collections2 . filter ( this . candidates , c -> c != null && c . isOurs ( ) ) ; }
private int getJingleStatus ( ) { return this . mJingleStatus ; }
public Set < ReadByMarker > getReadByMarkers ( ) { return ImmutableSet . copyOf ( this . readByMarkers ) ; }
private FileCopyException ( int resId ) { this . resId = resId ; }
private static boolean renderFileThumbnail ( final String mime ) { return mime . startsWith ( "video/" ) || isImage ( mime ) || ( Compatibility . runsTwentyOne ( ) && "application/pdf" . equals ( mime ) ) ; }
public int hashCode ( ) { return Objects . hashCode ( account . getUuid ( ) , with , sessionId ) ; }
public void onSaveInstanceState ( final Bundle savedInstanceState ) { if ( selectedAccount != null ) { savedInstanceState . putString ( STATE_SELECTED_ACCOUNT , selectedAccount . getJid ( ) . asBareJid ( ) . toEscapedString ( ) ) ; } super . onSaveInstanceState ( savedInstanceState ) ; }
public Jid getDomain ( ) { throw new AssertionError ( "Not implemented" ) ; }
public Jid getJid ( ) { try { return this . jid == null ? null : Jid . ofEscaped ( this . jid ) ; } catch ( IllegalArgumentException e ) { return null ; } }
public boolean isValidJid ( ) { if ( jid == null ) { return false ; } try { Jid . ofEscaped ( jid ) ; return true ; } catch ( IllegalArgumentException e ) { return false ; } }
public Bookmark ( final Account account , final Jid jid ) { super ( "conference" ) ; this . jid = jid ; this . setAttribute ( "jid" , jid ) ; this . account = account ; }
public void onAffiliationChangeFailed ( Jid jid , int resId ) { displayToast ( getString ( resId , jid . asBareJid ( ) . toEscapedString ( ) ) ) ; }
private static String getShortcutId ( Contact contact ) { return contact . getAccount ( ) . getJid ( ) . asBareJid ( ) . toEscapedString ( ) + "#" + contact . getJid ( ) . asBareJid ( ) . toEscapedString ( ) ; }
public static Jid getNullForInvalid ( Jid jid ) { if ( jid instanceof InvalidJid ) { return null ; } else { return jid ; } }
public void setInitiator ( final Jid initiator ) { Preconditions . checkArgument ( initiator . isFullJid ( ) , "initiator should be a full JID" ) ; findChild ( "jingle" , Namespace . JINGLE ) . setAttribute ( "initiator" , initiator ) ; }
public void setResponder ( Jid responder ) { Preconditions . checkArgument ( responder . isFullJid ( ) , "responder should be a full JID" ) ; findChild ( "jingle" , Namespace . JINGLE ) . setAttribute ( "responder" , responder ) ; }
public void setTo ( final Jid to ) { if ( to != null ) { setAttribute ( "to" , to ) ; } }
public void setFrom ( final Jid from ) { if ( from != null ) { setAttribute ( "from" , from ) ; } }
public void alias ( final String alias ) { if ( alias != null ) { xmppConnectionService . createAccountFromKey ( alias , this ) ; } }
private void scheduleConnected ( ) { this . currentTone = JingleConnectionManager . SCHEDULED_EXECUTOR_SERVICE . schedule ( ( ) -> { startTone ( ToneGenerator . TONE_PROP_PROMPT , 200 ) ; } , 0 , TimeUnit . SECONDS ) ; }
private void scheduleWaitingTone ( ) { this . currentTone = JingleConnectionManager . SCHEDULED_EXECUTOR_SERVICE . scheduleAtFixedRate ( ( ) -> { startTone ( ToneGenerator . TONE_CDMA_DIAL_TONE_LITE , 750 ) ; } , 0 , 3 , TimeUnit . SECONDS ) ; }
public void onSignalingChange ( PeerConnection . SignalingState signalingState ) { Log . d ( EXTENDED_LOGGING_TAG , "onSignalingChange ( " + signalingState + " ) " ) ; }
public boolean notificationsFromStrangers ( ) { return mXmppConnectionService . getBooleanPreference ( "notifications_from_strangers" , R . bool . notifications_from_strangers ) ; }
private void switchToEarpiece ( View view ) { requireRtpConnection ( ) . getAudioManager ( ) . setDefaultAudioDevice ( AppRTCAudioManager . AudioDevice . EARPIECE ) ; acquireProximityWakeLock ( ) ; }
private void switchToSpeaker ( View view ) { requireRtpConnection ( ) . getAudioManager ( ) . setDefaultAudioDevice ( AppRTCAudioManager . AudioDevice . SPEAKER_PHONE ) ; releaseProximityWakeLock ( ) ; }
private void rejectCall ( View view ) { requireRtpConnection ( ) . rejectCall ( ) ; finish ( ) ; }
private void sendSessionTerminate ( Reason reason ) { final JinglePacket packet = bootstrapPacket ( JinglePacket . Action . SESSION_TERMINATE ) ; packet . setReason ( reason , null ) ; this . sendJinglePacket ( packet ) ; }
public void cancel ( ) { this . cancelled = true ; abort ( Reason . CANCEL ) ; }
public void failed ( ) { Log . d ( Config . LOGTAG , id . account . getJid ( ) . asBareJid ( ) + " : proxy activation failed" ) ; proxyActivationFailed = true ; if ( isInitiator ( ) ) { sendFallbackToIbb ( ) ; } }
private JinglePacket bootstrapPacket ( JinglePacket . Action action ) { final JinglePacket packet = new JinglePacket ( action , this . id . sessionId ) ; packet . setTo ( id . with ) ; return packet ; }
private void sendAccept ( ) { mJingleStatus = JINGLE_STATUS_ACCEPTED ; this . mStatus = Transferable . STATUS_DOWNLOADING ; this . jingleConnectionManager . updateConversationUi ( true ) ; if ( initialTransport == S5BTransportInfo . class ) { sendAcceptSocks ( ) ; } else { sendAcceptIbb ( ) ; } }
private void sendJinglePacket ( JinglePacket packet ) { xmppConnectionService . sendIqPacket ( id . account , packet , responseListener ) ; }
private void sendJinglePacket ( JinglePacket packet , OnIqPacketReceived callback ) { xmppConnectionService . sendIqPacket ( id . account , packet , callback ) ; }
private static boolean runsTwentyFour ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . N ; }
private void onSelectCountryClick ( View view ) { final Intent intent = new Intent ( this , ChooseCountryActivity . class ) ; startActivityForResult ( intent , REQUEST_CHOOSE_COUNTRY ) ; }
public void resetChatState ( ) { synchronized ( users ) { for ( User user : users ) { user . chatState = Config . DEFAULT_CHAT_STATE ; } } }
public void onStart ( ) { super . onStart ( ) ; for ( ProfileLayer layer : Services . lasers . layers . layers ) { binding . flightProfile . addLayer ( layer ) ; } EventBus . getDefault ( ) . register ( this ) ; }
public void addLayer ( @ NonNull ProfileLayerEvent . ProfileLayerAdded event ) { Log . i ( TAG , "Adding profile layer " + event . layer ) ; binding . flightProfile . addLayer ( event . layer ) ; binding . flightProfile . invalidate ( ) ; }
public void removeLayer ( @ NonNull ProfileLayerEvent . ProfileLayerRemoved event ) { Log . i ( TAG , "Removing profile layer " + event . layer ) ; binding . flightProfile . removeLayer ( event . layer ) ; binding . flightProfile . invalidate ( ) ; }
public void updateLayer ( ProfileLayerEvent . ProfileLayerUpdated event ) { binding . flightProfile . invalidate ( ) ; }
private void clickClear ( View view ) { Analytics . logEvent ( getContext ( ) , "click_laser_edit_clear" , null ) ; binding . laserText . setText ( "" ) ; }
public void onTextChanged ( CharSequence s , int start , int before , int count ) { final String filter = binding . laserSearch . getText ( ) . toString ( ) . toLowerCase ( ) ; listAdapter . setFilter ( filter ) ; }
public void onDownloadProgress ( @ NonNull DownloadEvent . DownloadProgress event ) { if ( event . track_id . equals ( track . track_id ) ) { binding . downloadProgress . setProgress ( event . progress ) ; binding . downloadProgress . setMax ( event . total ) ; } }
public void bearings ( ) { assertEquals ( 165 . 66 , seattle . bearingTo ( la ) , 0 . 01 ) ; }
public static boolean started ( int state ) { return state == BT_STARTING || state == BT_CONNECTING || state == BT_CONNECTED ; }
public void onServicesDiscovered ( ) { sendHello ( ) ; BluetoothUtil . sleep ( 200 ) ; requestRangefinderService ( ) ; }
public void addNmeaListener ( GpsStatus . NmeaListener listener ) { listeners . add ( listener ) ; }
public void removeNmeaListener ( GpsStatus . NmeaListener listener ) { listeners . remove ( listener ) ; }
public LocationService ( @ NonNull BluetoothService bluetooth ) { this . bluetooth = bluetooth ; locationProviderNMEA = new LocationProviderNMEA ( alti ) ; locationProviderAndroid = new LocationProviderAndroid ( alti ) ; locationProviderBluetooth = new LocationProviderBluetooth ( alti , bluetooth ) ; }
public void onLaserDeleteSuccess ( @ NonNull LaserSyncEvent . DeleteSuccess event ) { getParentFragmentManager ( ) . popBackStack ( ) ; }
public void onSignIn ( @ NonNull AuthState . SignedIn event ) { listAsync ( context , true ) ; }
private void signedOut ( ) { account = null ; firebaseAnalytics . setUserId ( null ) ; setAuthState ( new AuthState . SignedOut ( ) ) ; }
private List < LaserMeasurement > testPoints ( ) { final List < LaserMeasurement > points = new ArrayList <> ( ) ; points . add ( new LaserMeasurement ( 100 , - 100 ) ) ; return points ; }
public static String pressure ( double hPa ) { if ( Double . isNaN ( hPa ) ) return "" ; else return String . format ( Locale . getDefault ( ) , "% . 2f hPa" , hPa ) ; }
public void subscribe ( ) { final PubSub < String > events = new PubSub <> ( ) ; events . subscribe ( ( msg ) -> assertEquals ( "BASE" , msg ) ) ; events . post ( "BASE" ) ; }
public void subscribeMain ( ) { final PubSub < String > events = new PubSub <> ( ) ; events . subscribeMain ( ( msg ) -> assertEquals ( "BASE" , msg ) ) ; events . post ( "BASE" ) ; }
public void onDetails ( ) { if ( enableDetails ( ) ) { DialogResultDetails d = new DialogResultDetails ( getFormulaList ( ) . getActivity ( ) , arrayResult , getFormulaList ( ) . getDocumentSettings ( ) , null ) ; d . show ( ) ; } }
public void onDetails ( ) { }
public void beforeTextChanged ( boolean isManualInput ) { }
public ContourPlotView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . prepare ( ) ; }
public ContourPlotView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . prepare ( ) ; }
private void prepare ( ) { plotParameters . twoDPlotStyle = TwoDPlotStyle . CONTOUR ; }
public SurfacePlotView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; this . prepare ( ) ; }
public SurfacePlotView ( Context context , AttributeSet attrs , int defStyle ) { super ( context , attrs , defStyle ) ; this . prepare ( ) ; }
private void prepare ( ) { setLayerType ( View . LAYER_TYPE_NONE , null ) ; plotParameters . twoDPlotStyle = TwoDPlotStyle . SURFACE ; }
private Coordinate ( Parcel in ) { super ( ) ; row = in . readInt ( ) ; col = in . readInt ( ) ; }
public void setScaleListener ( ListChangeIf listChangeIf ) { this . listChangeIf = listChangeIf ; }
public void setElevationAngle ( double angle ) { sin_elevation = FastMath . sin ( angle * DEGTORAD ) ; cos_elevation = FastMath . cos ( angle * DEGTORAD ) ; sz_cos = scale_z * cos_elevation ; sz_sin = scale_z * sin_elevation ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { if ( formulas . getXmlLoaderTask ( ) != null ) { outState . putString ( FILE_READING_OPERATION , FILE_READING_OPERATION ) ; formulas . stopXmlLoaderTask ( ) ; } else { formulas . writeToBundle ( outState ) ; } }
public void handleMessage ( @ NonNull Message msg ) { try { cmd . notifyMe ( msg ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
private void calculate ( ) { formulas . calculate ( ) ; }
private void restartActivity ( ) { Intent intent = getIntent ( ) ; finish ( ) ; startActivity ( intent ) ; }
private void reSort ( FileItem [ ] items_ ) { if ( items_ == null ) return ; ItemComparator comp = new ItemComparator ( mode & MODE_SORTING , true , ascending ) ; Arrays . sort ( items_ , comp ) ; }
private ArrayList < SAFItem > getChildren ( Uri u ) { return getChildren ( ctx , u ) ; }
private void reSort ( Item [ ] items_ ) { if ( items_ == null ) return ; ItemComparator comp = new ItemComparator ( mode & MODE_SORTING , true , ascending ) ; Arrays . sort ( items_ , comp ) ; }
private void operationFinished ( ) { if ( null != destAdapter ) { destAdapter = null ; } }
private void showMessage ( String s ) { Toast . makeText ( context , s , Toast . LENGTH_LONG ) . show ( ) ; }
private static String escapeRest ( String s ) { if ( ! str ( s ) ) return s ; return s . replaceAll ( "%" , "%25" ) . replaceAll ( "#" , "%23" ) . replaceAll ( " : " , "%3A" ) ; }
private static boolean isContentUri ( Uri uri ) { return uri != null && uri . getScheme ( ) != null && uri . getScheme ( ) . equals ( "content" ) ; }
private boolean isInOperation ( ) { return fragment . isInOperation ( ) ; }
private void clearResult ( ) { resultType = ResultType . NONE ; constantResult = null ; arrayArgument = null ; arrayResult = null ; }
private Context getContext ( ) { return formulaRoot . getFormulaList ( ) . getContext ( ) ; }
private FunctionType getFunctionType ( ) { return ( FunctionType ) termType ; }
private static String getFunctionString ( FunctionType t ) { return t . isLink ( ) ? t . getLinkObject ( ) : t . getLowerCaseName ( ) ; }
private static double toBaseType ( final double value , Type type ) { return ( type == Type . LINEAR ) ? value : FastMath . pow ( 10 . 0 , value ) ; }
private ValueType setComplexValue ( Complex c ) { real = c . getReal ( ) ; imaginary = c . getImaginary ( ) ; valueType = ( imaginary != 0 . 0 ) ? ValueType . COMPLEX : ValueType . REAL ; return valueType ; }
private int getDimNumber ( ) { return dimensions == null ? ViewUtils . INVALID_INDEX : dimensions . length ; }
private AxisProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private ColorMapProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private void readFromParcel ( Parcel in ) { colorMap = ColorMap . valueOf ( in . readString ( ) ) ; zLabelsNumber = in . readInt ( ) ; }
private ImageProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private LineProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private PlotProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private ResultProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private TextProperties ( Parcel in ) { super ( ) ; readFromParcel ( in ) ; }
private void readFromParcel ( Parcel in ) { textStyle = TextStyle . valueOf ( in . readString ( ) ) ; numbering = Boolean . parseBoolean ( in . readString ( ) ) ; }
private int getTestCaseNumber ( NumberType numberType ) { int n = 0 ; for ( TestScript ts : testScripts ) { n += ts . getTestCaseNumber ( numberType ) ; } return n ; }
private DeleteState ( Parcel in ) { super ( ) ; in . readTypedList ( entries , EntryState . CREATOR ) ; }
private FormulaState ( Parcel in ) { super ( ) ; formulaId = in . readInt ( ) ; termId = in . readInt ( ) ; data = in . readParcelable ( getClass ( ) . getClassLoader ( ) ) ; }
private InsertState ( Parcel in ) { super ( ) ; formulaId = in . readInt ( ) ; selectedId = in . readInt ( ) ; }
private ReplaceState ( Parcel in ) { super ( ) ; in . readTypedList ( entries , EntryState . CREATOR ) ; }
private static void set ( int i ) { sNextGeneratedId . set ( i + 1 ) ; }
private static Bitmap . Config getBitmapConfig ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . O ) { return Bitmap . Config . RGBA_F16 ; } return Bitmap . Config . ARGB_8888 ; }
private boolean isMenuEmpty ( ) { for ( int i = 0 ; i < Type . values ( ) . length ; i ++ ) { if ( enabled [ i ] ) { return false ; } } return true ; }
private int getMaxScrollAmountVertical ( ) { return ( int ) ( MAX_SCROLL_FACTOR * getHeight ( ) ) ; }
private int getMaxScrollAmountHorizontal ( ) { return ( int ) ( MAX_SCROLL_FACTOR * getWidth ( ) ) ; }
private void NavigateInternal ( Uri uri , String posTo ) { fileListView . Navigate ( uri , posTo ) ; okButton . setEnabled ( isFileSelected ( ) ) ; }
public static String getFileExt ( String file_name ) { if ( file_name == null ) return "" ; int dot = file_name . lastIndexOf ( " . " ) ; return dot >= 0 ? file_name . substring ( dot ) : "" ; }
public static String getHumanSize ( long sz ) { return getHumanSize ( sz , true ) ; }
public static String mbAddSl ( String path ) { if ( ! str ( path ) ) return "/" ; return path . charAt ( path . length ( ) - 1 ) == '/' ? path : path + "/" ; }
public static boolean str ( String s ) { return s != null && s . length ( ) > 0 ; }
public static String escapePath ( String s ) { if ( ! str ( s ) ) return s ; return escapeRest ( s ) . replaceAll ( " @ " , "%40" ) ; }
private GridViewItem ( final Context context , final ScrollSpeedAdapter adapter ) { super ( context , R . layout . gridview_item , R . id . grid_item_cover_image , R . id . grid_item_view_switcher , adapter ) ; mTitleView = findViewById ( R . id . grid_item_title ) ; }
private void setTitle ( final String title ) { mTitleView . setText ( title ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new PlaylistTrackViewModel ( mApplication , mPlaylistModel ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new PlaylistViewModel ( mApplication , mAddHeader , mOnlyOdysseyPlaylists ) ; }
public void play ( final Uri uri ) throws PlaybackException { play ( uri , 0 ) ; }
public void onPause ( ) { super . onPause ( ) ; ArtworkManager . getInstance ( getContext ( ) ) . unregisterOnNewAlbumImageListener ( ( AlbumsRecyclerViewAdapter ) mRecyclerAdapter ) ; ArtworkManager . getInstance ( getContext ( ) ) . unregisterOnNewArtistImageListener ( this ) ; }
public void onResume ( ) { super . onResume ( ) ; ArtworkManager . getInstance ( getContext ( ) ) . registerOnNewArtistImageListener ( ( ArtistsAdapter ) mAdapter ) ; }
public void onPause ( ) { super . onPause ( ) ; ArtworkManager . getInstance ( getContext ( ) ) . unregisterOnNewArtistImageListener ( ( ArtistsAdapter ) mAdapter ) ; }
public void onResume ( ) { super . onResume ( ) ; ArtworkManager . getInstance ( getContext ( ) ) . registerOnNewAlbumImageListener ( ( AlbumsAdapter ) mAdapter ) ; }
public void onPause ( ) { super . onPause ( ) ; ArtworkManager . getInstance ( getContext ( ) ) . unregisterOnNewAlbumImageListener ( ( AlbumsAdapter ) mAdapter ) ; }
public void openConnection ( ) { Intent serviceStartIntent = new Intent ( mApplicationContext , PlaybackService . class ) ; mApplicationContext . bindService ( serviceStartIntent , this , Context . BIND_AUTO_CREATE ) ; }
public synchronized void closeConnection ( ) { mApplicationContext . unbindService ( this ) ; mPlaybackService = null ; if ( mNotifier != null ) { mNotifier . onDisconnect ( ) ; } }
public CoverBitmapLoader ( Context context , CoverBitmapReceiver listener ) { mApplicationContext = context . getApplicationContext ( ) ; mListener = listener ; }
public void cancelAllRequests ( ) { LimitingRequestQueue . getInstance ( mApplicationContext ) . cancelAll ( request -> true ) ; }
private FanartTVProvider ( final Context context ) { mRequestQueue = LimitingRequestQueue . getInstance ( context . getApplicationContext ( ) ) ; }
private LastFMProvider ( final Context context ) { mRequestQueue = LimitingRequestQueue . getInstance ( context . getApplicationContext ( ) ) ; }
private MusicBrainzProvider ( final Context context ) { mRequestQueue = LimitingRequestQueue . getInstance ( context . getApplicationContext ( ) ) ; }
public void startCoverImageTask ( ) { if ( mLoaderTask == null && mHolder . artworkManager != null && mHolder . modelItem != null && ! mCoverDone ) { mLoaderTask = new AsyncLoader ( ) ; mLoaderTask . execute ( mHolder ) ; } }
public OdysseyFragment < ? > getRegisteredFragment ( int position ) { return mRegisteredFragments . get ( position ) ; }
private ArtistViewModel ( @ NonNull final Application application ) { super ( application ) ; }
public MyMusicPagerAdapter ( FragmentManager fm ) { super ( fm , BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT ) ; mRegisteredFragments = new SparseArray <> ( ) ; }
public RemoteCNPreference ( Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public RemoteCNPreference ( Context context ) { super ( context ) ; }
public void onResourceReady ( Bitmap resource , @ Nullable Transition < ? super Bitmap > transition ) { super . onResourceReady ( resource , transition ) ; RevealAnimationUtils . revealAnimation ( albumArt , animation -> fadeInViews ( ) ) ; onArtworkLoaded ( resource ) ; }
public void onSave ( ) { super . onSave ( ) ; if ( snakeGame != null ) { snakeGame . save ( ) ; snakeGame . interrupt ( ) ; } changeIrrelevantKeysVisibility ( View . VISIBLE ) ; }
public Organization getSavedOrganization ( ) { return _savedOrganization ; }
public void before ( ) { Context context = ApplicationProvider . getApplicationContext ( ) ; _securityService = new SecurityService ( context ) ; SecurityService . loadMinisignPublicKeys ( UNIT_TEST_PUBLIC_KEYS ) ; }
public SecurityService ( Context context ) { _context = context ; loadMinisignPublicKeys ( BuildConfig . MINISIGN_SIGNATURE_VALIDATION_PUBLIC_KEY ) ; }
public static String formatProfileName ( Context context , Instance instance , Profile profile ) { String instanceName = formatDisplayName ( instance ) ; return context . getString ( R . string . saved_profile_display_name , instanceName , profile . getDisplayName ( ) ) ; }
public static void refreshTokenOnServer ( ) { PushNotificationService . refreshTokenOnServer ( ) ; }
private void onTelephonyCallStateRinging ( ) { if ( mSimlarStatus != SimlarStatus . ONGOING_CALL ) { return ; } silenceAudioStreamRing ( ) ; mSoundEffectManager . start ( SoundEffectType . CALL_INTERRUPTION ) ; }
public void onError ( @ NonNull String t ) { messageError ( t ) ; }
public void onFailure ( Call < Account . LoginRespond > call , Throwable t ) { callback . onError ( t . getMessage ( ) ) ; }
public void onFailure ( Call < Account . EmailRespond > call , Throwable t ) { callback . onError ( t . getMessage ( ) ) ; }
private static void printHelp ( JCommander jCommander ) { jCommander . usage ( SEND . commandName ( ) ) ; jCommander . usage ( RECEIVE . commandName ( ) ) ; }
public void onClick ( View klikPåHvad ) { if ( klikPåHvad == knap ) { minModel . startBeregning ( 500 , 50 ) ; } else if ( klikPåHvad == annullerknap ) { minModel . annulleret = true ; } }
public void onClick ( View v ) { enLyd . start ( ) ; }
public void onClick ( View v ) { String tekst = udtaleTekst . getText ( ) . toString ( ) ; tts . speak ( tekst , TextToSpeech . QUEUE_ADD , null ) ; }
public void onClick ( View v ) { if ( account != null ) { googleSignInClient . signOut ( ) ; account = null ; opdaterKnap ( ) ; } else { startActivityForResult ( googleSignInClient . getSignInIntent ( ) , 1234 ) ; } }
public void onClick ( View v ) { Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( link ) ) ; startActivity ( intent ) ; }
public void onClick ( View klikPåHvad ) { System . out . println ( "Der blev klikket på " + klikPåHvad ) ; teksten = editText . getText ( ) . toString ( ) ; minGrafik . invalidate ( ) ; }
public Tegneflade ( Context a ) { super ( a ) ; tekstStregtype . setColor ( Color . GREEN ) ; tekstStregtype . setTextSize ( 48 ) ; }
private BroadcastReceiver wifiReceiver = new BroadcastReceiver ( ) { public void onReceive ( Context c , Intent i ) { Log . i ( TAG , "WiFi Scan successfully completed" ) ; handler . removeCallbacks ( stopOnTimeout ) ; getActiveAccessPoints ( ) ; getWiFiNetworks ( ) ; } } ;
public void onReceive ( Context c , Intent i ) { Log . i ( TAG , "WiFi Scan successfully completed" ) ; handler . removeCallbacks ( stopOnTimeout ) ; getActiveAccessPoints ( ) ; getWiFiNetworks ( ) ; }
public void onClick ( View v ) { TinyTimeTracker . checkAndRequestPermission ( ( AppCompatActivity ) getActivity ( ) , Manifest . permission . ACCESS_FINE_LOCATION , 1 ) ; }
private void init ( ) { setOnPreferenceClickListener ( new OnPreferenceClickListener ( ) { @ Override public boolean onPreferenceClick ( Preference preference ) { requestFile ( getContext ( ) ) ; return true ; } } ) ; }
public boolean onPreferenceClick ( Preference preference ) { requestFile ( getContext ( ) ) ; return true ; }
public void onResume ( ) { super . onResume ( ) ; ( ( BasePreferencesActivity ) getActivity ( ) ) . getSupportActionBar ( ) . setTitle ( R . string . pref_account_settings ) ; }
public void exportPersonalKey ( OutputStream out , String exportPassphrase ) throws CertificateException , PGPException , IOException , KeyStoreException , NoSuchAlgorithmException { Authenticator . exportDefaultPersonalKey ( this , out , exportPassphrase , true ) ; }
public static boolean isUserPassphrase ( Context ctx ) { AccountManager am = AccountManager . get ( ctx ) ; Account acc = getDefaultSystemAccount ( am ) ; return Boolean . parseBoolean ( am . getUserData ( acc , DATA_USER_PASSPHRASE ) ) ; }
public AccountCreatedEvent ( MyAccount account ) { this . account = account ; }
private static File getOutgoingPhotoFile ( Context context , Date date ) throws IOException { File path = new File ( context . getCacheDir ( ) , PHOTOS_ROOT ) ; createDirectories ( path ) ; return createImageFile ( path , date ) ; }
private static File getOutgoingPictureFile ( Context context , Date date ) throws IOException { File path = new File ( context . getFilesDir ( ) , PICTURES_SENT_ROOT ) ; createDirectories ( path ) ; return createImageFile ( path , date ) ; }
public static File getOutgoingPhotoFile ( Context context ) throws IOException { return getOutgoingPhotoFile ( context , new Date ( ) ) ; }
public static File getOutgoingPictureFile ( Context context ) throws IOException { return getOutgoingPictureFile ( context , new Date ( ) ) ; }
public void onRecordingSuccessful ( File file ) { if ( file != null ) sendBinaryMessage ( Uri . fromFile ( file ) , AudioRecording . MIME_TYPE , false , AudioComponent . class ) ; }
public static boolean isRoundedAvatars ( ) { return android . os . Build . VERSION . SDK_INT >= android . os . Build . VERSION_CODES . LOLLIPOP ; }
private void chooseContact ( ) { Intent i = new Intent ( this , ContactsListActivity . class ) ; i . putExtra ( ContactsListActivity . MODE_RECENTS , true ) ; startActivityForResult ( i , REQUEST_CONTACT_PICKER ) ; }
private void alert ( String message ) { new MaterialDialog . Builder ( getContext ( ) ) . content ( message ) . positiveText ( android . R . string . ok ) . show ( ) ; }
private void assertQuery ( Uri uri ) { Cursor c = mProviderRule . getResolver ( ) . query ( uri , null , null , null , null ) ; assertNotNull ( c ) ; c . close ( ) ; }
public void endConversation ( AbstractComposeFragment composer ) { getParentFragmentManager ( ) . beginTransaction ( ) . remove ( composer ) . commit ( ) ; }
public void setSelectionTracker ( SelectionTracker < Long > selectionTracker ) { mSelectionTracker = selectionTracker ; }
public CountryCodesAdapter ( Context context , int viewId , int dropdownViewId ) { this ( context , new ArrayList <> ( ) , viewId , dropdownViewId ) ; }
public void setIncoming ( Contact contact , boolean sameMessageBlock ) { if ( mBalloonView != null ) { mBalloonView . setBackgroundResource ( mIncomingDrawableId ) ; } mParentView . setGravity ( Gravity . START ) ; super . setIncoming ( contact , sameMessageBlock ) ; }
public void setOutgoing ( Contact contact , int status , boolean sameMessageBlock ) { if ( mBalloonView != null ) { mBalloonView . setBackgroundResource ( mOutgoingDrawableId ) ; } mParentView . setGravity ( Gravity . END ) ; super . setOutgoing ( contact , status , sameMessageBlock ) ; }
public static boolean isThrottling ( ) { long lastSync = Preferences . getLastSyncTimestamp ( ) ; float diff = ( System . currentTimeMillis ( ) - lastSync ) / 1000f ; return ( lastSync >= 0 && diff < MAX_SYNC_DELAY ) ; }
public void report ( String message ) { report ( new Exception ( message ) ) ; }
public static AddEditAllergyFragment newInstance ( ) { return new AddEditAllergyFragment ( ) ; }
public PatientAllergyRecyclerViewAdapter . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View itemView = LayoutInflater . from ( context ) . inflate ( R . layout . list_patient_allergy , parent , false ) ; return new ViewHolder ( itemView , longPressListener ) ; }
public void deleteProvider ( ) { providerRepository . deleteProviders ( provider . getUuid ( ) , this ) ; }
public void getProviders ( Fragment fragment ) { providerRepository . getProviders ( ) . observe ( fragment , this : : updateViews ) ; }
public void deleteProvider ( String providerUuid ) { providerRepository . deleteProviders ( providerUuid , this ) ; }
public void addProvider ( Provider provider ) { providerRepository . addProvider ( provider , this ) ; }
public void updateProvider ( Provider provider ) { providerRepository . updateProvider ( provider , this ) ; }
public long saveEncounter ( Encounter encounter , Long visitID ) { EncounterEntity encounterEntity = AppDatabaseHelper . convert ( encounter , visitID ) ; long id = encounterRoomDAO . addEncounter ( encounterEntity ) ; return id ; }
public int updateEncounter ( long encounterID , Encounter encounter , long visitID ) { EncounterEntity encounterEntity = AppDatabaseHelper . convert ( encounter , visitID ) ; encounterEntity . setId ( encounterID ) ; int id = encounterRoomDAO . updateEncounter ( encounterEntity ) ; return id ; }
public Observable < Long > saveLocation ( LocationEntity location ) { return AppDatabaseHelper . createObservableIO ( ( ) -> locationRoomDAO . addLocation ( location ) ) ; }
public Observable < Long > savePatient ( Patient patient ) { PatientEntity entity = AppDatabaseHelper . convert ( patient ) ; return AppDatabaseHelper . createObservableIO ( ( ) -> patientRoomDAO . addPatient ( entity ) ) ; }
public boolean updatePatient ( long patientID , Patient patient ) { PatientEntity entity = AppDatabaseHelper . convert ( patient ) ; entity . setId ( patientID ) ; return patientRoomDAO . updatePatient ( entity ) > 0 ; }
public Patient findPatientByUUID ( String uuid ) { try { PatientEntity patient = patientRoomDAO . findPatientByUUID ( uuid ) . blockingGet ( ) ; return AppDatabaseHelper . convert ( patient ) ; } catch ( Exception e ) { return null ; } }
public Patient findPatientByID ( String id ) { try { PatientEntity patientEntity = patientRoomDAO . findPatientByID ( id ) . blockingGet ( ) ; return AppDatabaseHelper . convert ( patientEntity ) ; } catch ( Exception e ) { return null ; } }
public Observable < Long > getVisitsIDByUUID ( final String visitUUID ) { return AppDatabaseHelper . createObservableIO ( ( ) -> visitRoomDAO . getVisitsIDByUUID ( visitUUID ) ) ; }
public Observable < Boolean > deleteVisitsByPatientId ( Long id ) { return AppDatabaseHelper . createObservableIO ( ( ) -> { visitRoomDAO . deleteVisitsByPatientId ( id ) ; return true ; } ) ; }
public void onNext ( List < LocationEntity > locations ) { for ( LocationEntity locationItem : locations ) { locationList . add ( locationItem . getName ( ) ) ; } }
public void onFailure ( @ NonNull Call < Results < ConceptEntity >> call , @ NonNull Throwable t ) { stopSelf ( ) ; }
public void onFailure ( @ NonNull Call < Results < FormResourceEntity >> call , @ NonNull Throwable t ) { ToastUtil . error ( t . getMessage ( ) ) ; }
public void getVisitIdByUuid_ShouldGetCorrectVisitId ( ) { Long id = database . visitRoomDAO ( ) . addVisit ( expectedVisitEntity ) ; Long visitId = database . visitRoomDAO ( ) . getVisitsIDByUUID ( "uuid" ) ; Assert . assertEquals ( id , visitId ) ; }
public Person getPerson ( ) { return new Person ( getNames ( ) , getGender ( ) , getBirthdate ( ) , getBirthdateEstimated ( ) , getAddresses ( ) , getAttributes ( ) , getPhoto ( ) , getCauseOfDeath ( ) , isDeceased ( ) ) ; }
public void startVisit ( ) { if ( patient . isDeceased ( ) ) { ToastUtil . error ( getString ( R . string . cannot_start_visit_for_deceased ) ) ; } else { ( ( PatientDashboardVisitsPresenter ) mPresenter ) . startVisit ( ) ; } }
public InputField getInputField ( String concept ) { for ( InputField inputField : inputFields ) { if ( concept . equals ( inputField . concept ) ) { return inputField ; } } return null ; }
public void onCreateOptionsMenu ( @ NotNull Menu menu , @ NotNull MenuInflater inflater ) { super . onCreateOptionsMenu ( menu , inflater ) ; inflater . inflate ( R . menu . submit_done_menu , menu ) ; }
public void onConfigurationChanged ( @ NotNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( isDialogAvailable ( ) ) { this . setBorderless ( ) ; this . setOnBackListener ( ) ; } }
public void onAttachFragment ( @ NotNull Fragment fragment ) { attachPresenterToFragment ( fragment ) ; super . onAttachFragment ( fragment ) ; }
public void onSaveInstanceState ( @ NotNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; }
public void onAttachFragment ( @ NotNull Fragment fragment ) { attachPresenterToFragment ( fragment ) ; }
public void onConfigurationChanged ( @ NotNull final Configuration config ) { super . onConfigurationChanged ( config ) ; TabUtil . setHasEmbeddedTabs ( getSupportActionBar ( ) , getWindowManager ( ) , TabUtil . MIN_SCREEN_WIDTH_FOR_PATIENTDASHBOARDACTIVITY ) ; }
public void onCreateOptionsMenu ( @ NotNull Menu menu , MenuInflater inflater ) { inflater . inflate ( R . menu . patient_dashboard_menu , menu ) ; }
public AddProviderPresenter ( @ NotNull AddProviderContract . View view ) { this . addProviderView = view ; this . addProviderView . setPresenter ( this ) ; }
public void onClick ( DialogInterface dialog , int which ) { switch ( which ) { case DialogInterface . BUTTON_POSITIVE : customAircraftDescriptorProvider . removeAll ( ) ; resetListAdapter ( ) ; break ; case DialogInterface . BUTTON_NEGATIVE : break ; } }
public void onClick ( DialogInterface dialog , int id ) { customAircraftDescriptorProvider . removeCustomAircraftDescriptor ( cad ) ; resetListAdapter ( ) ; }
private int getMonthViewTop ( ) { return mDelegate . getYearViewMonthPaddingTop ( ) + mDelegate . getYearViewMonthHeight ( ) + mDelegate . getYearViewMonthPaddingBottom ( ) + mDelegate . getYearViewWeekHeight ( ) ; }
public Map < String , List < Library >> getImportToLibraryTable ( ) { return importToLibraryTable ; }
public MessageTouchListener ( ) { super ( ) ; pressed = false ; console = findViewById ( R . id . console_wrapper ) ; content = findViewById ( R . id . content ) ; }
public int getVersionCode ( ) { return xml . getInt ( "android : versionCode" , context . getResources ( ) . getInteger ( R . integer . prop_version_code_default ) ) ; }
public String getPrettyVersion ( ) { return xml . getString ( "android : versionName" , context . getResources ( ) . getString ( R . string . prop_pretty_version_default ) ) ; }
public int getTargetSdk ( ) { return xml . getChild ( "uses - sdk" ) . getInt ( "android : targetSdkVersion" , context . getResources ( ) . getInteger ( R . integer . prop_target_sdk_default ) ) ; }
public int getMinSdk ( ) { return xml . getChild ( "uses - sdk" ) . getInt ( "android : minSdkVersion" , context . getResources ( ) . getInteger ( R . integer . prop_min_sdk_default ) ) ; }
public String getOrientation ( ) { return xml . getChild ( "application" ) . getChild ( "activity" ) . getString ( "android : screenOrientation" , context . getResources ( ) . getString ( R . string . prop_orientation_default ) ) ; }
public static void uninstallLibrary ( Library library , APDE context ) { deleteFile ( library . getLibraryFolder ( context . getLibrariesFolder ( ) ) , context ) ; }
public String [ ] getPackageList ( APDE context ) { return packageListFromClassPath ( getClassPath ( context . getLibrariesFolder ( ) ) , context ) ; }
public void onResume ( ) { super . onResume ( ) ; loadStats ( ) ; loadLogs ( ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; setupBtnListener ( ) ; Logger . info ( "WearAppsFragment onCreate" ) ; }
public void onProgressChanged ( SeekBar seekBar , final int progress , boolean fromUser ) { binding . activityTweakingBrightnessValue . setText ( String . valueOf ( seekBar . getProgress ( ) ) ) ; }
private void clearAdb ( ) { execCommandInternally ( ShellCommandHelper . getClearAdb ( ) ) ; snackProgressBarManager . show ( new SnackProgressBar ( SnackProgressBar . TYPE_CIRCULAR , getString ( R . string . adb_clear_command_sent ) ) , SnackProgressBarManager . LENGTH_LONG ) ; }
public void onFocusChange ( View v , boolean hasFocus ) { if ( ! hasFocus ) { Prefs . putString ( Constants . PREF_WATCHFACE_SEND_WEATHER_DATA_API , binding . watchfaceWeatherApiInput . getText ( ) . toString ( ) ) ; } }
public void onFocusChange ( View v , boolean hasFocus ) { if ( ! hasFocus ) { Prefs . putString ( Constants . PREF_WATCHFACE_SEND_WEATHER_DATA_CITY , binding . watchfaceWeatherCityInput . getText ( ) . toString ( ) ) ; } }
public void onCheckedChanged ( RadioGroup group , int checkedId ) { if ( checkedId == binding . watchfaceWeatherLocationGpsRadiobutton . getId ( ) ) Prefs . putInt ( Constants . PREF_WATCHFACE_WEATHER_DATA_LOCATION_RADIO , 0 ) ; else Prefs . putInt ( Constants . PREF_WATCHFACE_WEATHER_DATA_LOCATION_RADIO , 1 ) ; }
public void onActivityCreated ( @ Nullable Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; binding . heartrateChart . setNoDataText ( getString ( R . string . pref_heartrate_nodata ) ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; btnListener . stop ( ) ; }
public void register ( ) { sm . registerListener ( this , sm . getDefaultSensor ( Sensor . TYPE_HEART_RATE ) , SensorManager . SENSOR_DELAY_FASTEST , 3 * 1000 * 1000 ) ; }
public static boolean isTracking ( ) { return isTracking ; }
public static void addMaxData ( float max_data , float max_raw_data ) { acc_max_data . add ( max_data ) ; acc_max_raw_data . add ( max_raw_data ) ; }
public static LinkedList < Float > getMaxData ( ) { return acc_max_data ; }
public static LinkedList < Float > getMaxRawData ( ) { return acc_max_raw_data ; }
public static void resetMaxData ( ) { acc_max_data = new LinkedList <> ( ) ; acc_max_raw_data = new LinkedList <> ( ) ; }
public static long getBatchSize ( ) { return batchSize ; }
public static boolean isSuspended ( ) { return isSuspended ; }
public static void startTracking ( Context context ) { sleepStore . setTracking ( true , context ) ; }
public static void stopTracking ( Context context ) { sleepStore . setTracking ( false , context ) ; }
public void onReceive ( Context context , Intent intent ) { if ( intent . getAction ( ) . equals ( INTENT_CLOSE ) ) stop ( ) ; }
public void onAccuracyChanged ( Sensor sensor , int i ) { }
public static sleepListener getInstance ( ) { if ( instance == null ) instance = new sleepListener ( ) ; return instance ; }
public static void unregister ( ) { sleepTransporter . removeDataListener ( getInstance ( ) ) ; if ( sleepTransporter . isTransportServiceConnected ( ) ) sleepTransporter . disconnectTransportService ( ) ; sleepTransporter = null ; instance = null ; }
public void onFailure ( @ NonNull Call call , @ NonNull IOException e ) { Logger . error ( e , "checkServiceUpdate : failed to check for updates" ) ; updater . updateCheckFailed ( ) ; }
public Task < WatchStatus > then ( @ NonNull Task < TransportService > task ) { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_WATCHSTATUS , Transport . WATCH_STATUS ) ; }
public Task < BatteryStatus > then ( @ NonNull Task < TransportService > task ) { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_BATTERYSTATUS , Transport . BATTERY_STATUS ) ; }
public Task < Directory > then ( @ NonNull Task < TransportService > task ) { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_DIRECTORY , Transport . DIRECTORY , requestDirectoryData ) ; }
public Task < ResultDeleteFile > then ( @ NonNull Task < TransportService > task ) { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_DELETE_FILE , Transport . RESULT_DELETE_FILE , requestDeleteFileData ) ; }
public Object then ( @ NonNull Task < TransportService > task ) { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . INCOMING_NOTIFICATION , notificationData , taskCompletionSource ) ; return null ; }
public Object then ( @ NonNull Task < TransportService > task ) { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . SYNC_SETTINGS , settingsData , taskCompletionSource ) ; return null ; }
public Object then ( @ NonNull Task < TransportService > task ) { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . BRIGHTNESS , brightnessData , taskCompletionSource ) ; return null ; }
public Task < ResultShellCommand > then ( @ NonNull Task < TransportService > task ) { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_SHELL_COMMAND , Transport . RESULT_SHELL_COMMAND , requestShellCommandData ) ; }
public Object then ( @ NonNull Task < TransportService > task ) { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . ENABLE_LOW_POWER , null , taskCompletionSource ) ; return null ; }
public Object then ( @ NonNull Task < TransportService > task ) { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . REVOKE_ADMIN_OWNER , null , taskCompletionSource ) ; return null ; }
public Object then ( @ NonNull Task < TransportService > task ) { if ( task . getResult ( ) != null ) task . getResult ( ) . send ( Transport . WATCHFACE_DATA , watchfaceData , taskCompletionSource ) ; return null ; }
public Task < ResultWidgets > then ( @ NonNull Task < TransportService > task ) { return Objects . requireNonNull ( task . getResult ( ) ) . sendWithResult ( Transport . REQUEST_WIDGETS , Transport . REQUEST_WIDGETS , widgetsData ) ; }
public String getRoProductModel ( ) { return nullToNA ( roProductModel ) ; }
public String getRoProductName ( ) { return nullToNA ( roProductName ) ; }
public String getRoSerialno ( ) { return nullToNA ( roSerialno ) ; }
public String getRoBuildDescription ( ) { return nullToNA ( roBuildDescription ) ; }
public String getRoBuildDisplayId ( ) { return nullToNA ( roBuildDisplayId ) ; }
public String getRoBuildHuamiModel ( ) { return nullToNA ( roBuildHuamiModel ) ; }
private final ArrayMap < String , String > requiredPermissions = new ArrayMap < String , String > ( ) { { put ( Manifest . permission . READ_CALENDAR , "activity_permissions_calendar" ) ; put ( Manifest . permission . WRITE_EXTERNAL_STORAGE , "activity_permissions_write" ) ; } } ;
private int getDefaultVibration ( ) { return Integer . parseInt ( Prefs . getString ( Constants . PREF_NOTIFICATIONS_VIBRATION , Constants . PREF_DEFAULT_NOTIFICATIONS_VIBRATION ) ) ; }
public int onStartCommand ( Intent intent , int flags , int startId ) { Logger . debug ( "onStartCommand" ) ; startPersistentNotification ( ) ; return START_STICKY ; }
public boolean onSupportNavigateUp ( ) { if ( ! transferring ) { finish ( ) ; } return true ; }
public void onResume ( ) { super . onResume ( ) ; checkCalendarPermission ( ) ; checkLocationPermission ( ) ; }
public void onChange ( boolean selfChange ) { super . onChange ( selfChange ) ; Logger . debug ( "MainService registerSpringBoardMonitor onChange" ) ; if ( ! wasSpringboardSaved ) { WidgetsUtil . syncWidgets ( context ) ; } else wasSpringboardSaved = false ; }
public CharSequence onDisableRequested ( Context context , Intent intent ) { return context . getResources ( ) . getString ( R . string . admin_receiver_status_disable_warning ) ; }
public int compare ( AppInfo o1 , AppInfo o2 ) { return o1 . getAppName ( ) . compareToIgnoreCase ( o2 . getAppName ( ) ) ; }
public static void removeCustomNotification ( String key ) { sendRequestDeleteNotification ( key ) ; customNotifications . remove ( key ) ; keyMap . remove ( key ) ; }
public void onResponse ( String response ) { JSONObject weather_data = Weather_API . weather_server_data ( response , units , show_feels_like , last_known_latitude , last_known_longitude ) ; save_weather_response ( weather_data ) ; }
public Long getExpire ( ) { return expire ; }
public void setExpire ( Long data ) { this . expire = data ; }
public void create ( ) { setScreen ( new MenuScreen ( ) ) ; }
public static void main ( String [ ] arg ) { LwjglApplicationConfiguration config = new LwjglApplicationConfiguration ( ) ; config . width = 800 ; config . height = 480 ; config . title = "UI Gallery" ; new LwjglApplication ( new MenuDemo ( ) , config ) ; }
public static void main ( String [ ] arg ) { LwjglApplicationConfiguration config = new LwjglApplicationConfiguration ( ) ; config . width = 800 ; config . height = 480 ; config . title = "Tabbed Menu" ; new LwjglApplication ( new TabbedMenuDemo ( ) , config ) ; }
private void showNextPage ( ) { mIncreasePointsTask . cancel ( ) ; PageCreator creator = mPageCreators . remove ( 0 ) ; setContent ( creator . createPage ( ) ) ; }
private static int getOldPointsForRacer ( Racer racer ) { GameInfo . Entrant entrant = racer . getEntrant ( ) ; return entrant . getPoints ( ) - entrant . getLastRacePoints ( ) ; }
public void setFocused ( boolean focused ) { if ( mCurrentIndex == INVALID_INDEX ) { return ; } mFocusIndicators . get ( mCurrentIndex ) . setFocused ( focused ) ; }
private void onFinished ( ) { FinishedOverlay overlay = new FinishedOverlay ( mGame , this , mGameWorld . getRacers ( ) ) ; mHudStage . addActor ( overlay ) ; }
public void registerActorFactory ( String name , ActorFactory factory ) { mActorFactories . put ( name , factory ) ; }
public void defineVariable ( String name ) { mTraversor . defineVariable ( name ) ; }
private String getUnlockText ( Reward reward ) { if ( mUnlockedRewards . get ( ) . contains ( reward ) ) { return "" ; } else { return mRules . get ( reward ) . getUnlockText ( mGameStats ) ; } }
public boolean isInHole ( ) { return mGameWorld . getTrack ( ) . getMaterialAt ( mVehicle . getPosition ( ) ) . isHole ( ) ; }
private void onCollision ( ) { if ( mRacer . getVehicle ( ) . getSpeed ( ) > MIN_IMPACT_SPEED ) { mJustCollided = true ; } }
public ClosestRacerFinder ( float depth , float arc ) { mBodyFinder = new ArcClosestBodyFinder ( depth , arc ) ; mBodyFinder . setBodyFilter ( mFilter ) ; }
public void draw ( ShapeRenderer renderer ) { Pilot pilot = mRacer . getPilot ( ) ; if ( pilot instanceof AIPilot ) { renderAITargetPosition ( renderer , ( AIPilot ) pilot ) ; } else { renderWaypoints ( renderer ) ; } }
public void onPicked ( Racer racer ) { super . onPicked ( racer ) ; mMine = Mine . createAttachedMine ( mGameWorld , mAssets , mAudioManager , mRacer ) ; mAiKeepTime = MathUtils . random ( AI_KEEP_BONUS_MIN_TIME , AI_KEEP_BONUS_MAX_TIME ) ; }
public Renderer getBoundingBoxDrawer ( ) { return getDrawer ( null , false , false , false , false , false ) ; }
public Renderer getFaceNormalsDrawer ( ) { return getDrawer ( null , false , false , false , false , false ) ; }
public static void setThreadActivity ( Context currentActivity ) { Log . i ( "ContentUtils" , "Current activity thread : " + Thread . currentThread ( ) . getName ( ) ) ; ContentUtils . currentActivity . set ( currentActivity ) ; }
private static Context getCurrentActivity ( ) { return ContentUtils . currentActivity . get ( ) ; }
public static FloatBuffer createFloatBuffer ( int floats ) { return createNativeByteBuffer ( floats * 4 ) . asFloatBuffer ( ) ; }
public static IntBuffer createIntBuffer ( int integers ) { return createNativeByteBuffer ( integers * 4 ) . asIntBuffer ( ) ; }
public static ShortBuffer createShortBuffer ( int shorts ) { return createNativeByteBuffer ( shorts * 2 ) . asShortBuffer ( ) ; }
public void toggleAnimation ( ) { Log . i ( "ModelSurfaceView" , "Toggling animation . . . " ) ; mRenderer . toggleAnimation ( ) ; }
public int getThemeIndex ( ) { return getInt ( R . string . p_widget_theme , 3 ) ; }
public void onResume ( ) { super . onResume ( ) ; if ( ! permissionChecker . canAccessBackgroundLocation ( ) ) { dismiss ( ) ; } }
public VoiceOutputAssistant ( @ ApplicationContext Context context ) { this . context = context ; }
public LocalBroadcastManager ( @ ApplicationContext Context context , AppWidgetManager appWidgetManager ) { this . appWidgetManager = appWidgetManager ; localBroadcastManager = androidx . localbroadcastmanager . content . LocalBroadcastManager . getInstance ( context ) ; }
public CalendarProvider ( @ ApplicationContext Context context , PermissionChecker permissionChecker ) { this . permissionChecker = permissionChecker ; contentResolver = context . getContentResolver ( ) ; }
public AudioManager ( @ ApplicationContext Context context ) { audioManager = ( android . media . AudioManager ) context . getSystemService ( Context . AUDIO_SERVICE ) ; }
public TelephonyManager ( @ ApplicationContext Context context ) { telephonyManager = ( android . telephony . TelephonyManager ) context . getSystemService ( Context . TELEPHONY_SERVICE ) ; }
public Device ( @ ApplicationContext Context context , Locale locale ) { this . context = context ; this . locale = locale ; }
public AlarmManager ( @ ApplicationContext Context context ) { alarmManager = ( android . app . AlarmManager ) context . getSystemService ( Context . ALARM_SERVICE ) ; }
public Type getItemType ( ) { return Type . ACTION ; }
public int hashCode ( ) { return Objects . hash ( task , googletask , caldavTask , location , tags , children , sortGroup , primarySort , secondarySort , indent , targetIndent ) ; }
public static boolean atLeastNougatMR1 ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . N_MR1 ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equals ( calendar , ( ( CaldavFilter ) other ) . calendar ) ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equals ( criterion , ( ( CustomFilter ) other ) . criterion ) ; }
public boolean areItemsTheSame ( @ NonNull FilterListItem other ) { return other instanceof Filter && Objects . equals ( sqlQuery , ( ( Filter ) other ) . sqlQuery ) ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equals ( sqlQuery , ( ( Filter ) other ) . sqlQuery ) ; }
public boolean areContentsTheSame ( @ NonNull FilterListItem other ) { return super . areContentsTheSame ( other ) && Objects . equals ( list , ( ( GtasksFilter ) other ) . list ) ; }
public boolean areItemsTheSame ( @ NonNull TagData oldItem , @ NonNull TagData newItem ) { return Objects . equals ( oldItem . getId ( ) , newItem . getId ( ) ) ; }
private void deleteEvent ( String eventUri ) { if ( ! isNullOrEmpty ( eventUri ) ) { deleteEvent ( Uri . parse ( eventUri ) ) ; } }
public static void setTint ( Drawable drawable , int tint ) { ( drawable instanceof LayerDrawable ? ( ( LayerDrawable ) drawable ) . getDrawable ( 0 ) : drawable ) . setTint ( tint ) ; }
public void reconfigureWidget ( int appWidgetId ) { appWidgetManager . reconfigureWidgets ( appWidgetId ) ; }
public PermissionChecker ( @ ApplicationContext Context context ) { this . context = context ; }
private boolean isAfter ( long timestamp ) { return this . timestamp > timestamp ; }
public DateTime ( ) { this ( currentTimeMillis ( ) ) ; }
private static Criterion getCriterion ( CaldavCalendar caldavCalendar ) { return Criterion . and ( TaskDao . TaskCriteria . activeAndVisible ( ) , CaldavTask . DELETED . eq ( 0 ) , CaldavTask . CALENDAR . eq ( caldavCalendar . getUuid ( ) ) ) ; }
public boolean hasBeginningMenu ( ) { return getBeginningMenu ( ) != 0 ; }
public boolean isDarkTheme ( Activity activity ) { return index == 4 || index == 5 ? Configuration . UI_MODE_NIGHT_YES == ( activity . getResources ( ) . getConfiguration ( ) . uiMode & Configuration . UI_MODE_NIGHT_MASK ) : index > 0 ; }
public boolean isFree ( ) { switch ( original ) { case - 14575885 : case - 10453621 : case - 14606047 : return true ; default : return false ; } }
public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof ThemeColor ) ) { return false ; } ThemeColor that = ( ThemeColor ) o ; return original == that . original ; }
public int hashCode ( ) { return original ; }
public AlertDialogBuilder newDialog ( ) { return new AlertDialogBuilder ( activity , locale ) ; }
public @ Nullable String getLanguageOverride ( ) { return languageOverride ; }
public String getKey ( int resId ) { return context . getString ( resId ) + widgetId ; }
public String getResultBlurb ( final Bundle bundle ) { return binding . title . getText ( ) . toString ( ) . trim ( ) ; }
public void onClick ( View v ) { startActivity ( new Intent ( HoraTotalTrabalhada . this , MainActivity . class ) ) ; finish ( ) ; }
public void onClick ( View v ) { Intent configIntent = new Intent ( MainActivity . this , TabActivity . class ) ; configIntent . putExtra ( "key" , 3 ) ; startActivity ( configIntent ) ; }
public void onClick ( View view ) { Intent intent = new Intent ( TabActivity . this , MainActivity . class ) ; startActivity ( intent ) ; finish ( ) ; }
public int getItemCount ( ) { return listaFAQ . size ( ) ; }
public void onClick ( View v ) { launchSetupScreen ( ) ; }
public void onClick ( View v ) { int current = getItem ( + 1 ) ; if ( current < layouts . length ) { viewPager . setCurrentItem ( current ) ; } else { launchSetupScreen ( ) ; } }
public static String getVersion ( ) { return BuildConfig . VERSION_NAME + " - " + BuildConfig . VERSION_CODE ; }
public static void hideNotification ( Context context ) { NotificationManager notificationManager = ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ; notificationManager . cancel ( NOTIFY_ID ) ; }
private double convertPositionToRange ( int id ) { return getResources ( ) . getIntArray ( R . array . known_locations_values ) [ id ] ; }
public double getDistanceFrom ( @ NonNull Info info ) { return LocationUtil . latLngToLocation ( mLocation ) . distanceTo ( info . getFinalLocation ( ) ) ; }
public static void save ( Context context , int wigdetId ) { if ( context != null && wigdetId != 0 && wigdetId == getWidgetId ( context ) ) { AllSettings . saveFromApplicationPreferences ( context , wigdetId ) ; } }
public void onBindViewHolder ( PreferenceViewHolder viewHolder ) { thumbnail = addThumbnail ( viewHolder . itemView ) ; showColor ( ) ; super . onBindViewHolder ( viewHolder ) ; }
public void setUp ( ) throws Exception { provider = FakeCalendarContentProvider . getContentProvider ( ) ; }
public void tearDown ( ) throws Exception { FakeCalendarContentProvider . tearDown ( ) ; factory . reset ( ) ; }
public void onResume ( ) { super . onResume ( ) ; Optional . ofNullable ( getActivity ( ) ) . ifPresent ( a -> a . setTitle ( ApplicationPreferences . getWidgetInstanceName ( a ) ) ) ; setTitles ( ) ; }
public static boolean noPastEvents ( Context context ) { return context != null && ! getShowPastEventsWithDefaultColor ( context ) && getEventsEnded ( context ) == EndedSomeTimeAgo . NONE && noTaskSources ( context ) ; }
private void showStatus ( ) { showEventsEnded ( ) ; showEvenRange ( ) ; showHideBasedOnKeywords ( ) ; showAllDayEventsPlacement ( ) ; showTaskScheduling ( ) ; showTasksWithoutDates ( ) ; showFilterMode ( ) ; }
public static AstridCloneTasksProvider newTasksProvider ( EventProviderType type , Context context , int widgetId ) { return new AstridCloneTasksProvider ( type , context , widgetId , AstridCloneTaskSource . ASTRID_TASKS ) ; }
private boolean hideEventTime ( ) { return spansOneFullDay ( ) && ! ( isStartOfMultiDayEvent ( ) || isEndOfMultiDayEvent ( ) ) || allDay ; }
public DayHeader ( InstanceSettings settings , WidgetEntryPosition entryPosition , DateTime date ) { super ( settings , entryPosition , date , true , null ) ; }
public LastEntry ( InstanceSettings settings , LastEntryType type , DateTime date ) { super ( settings , LIST_FOOTER , date , true , null ) ; this . type = type ; }
public List < CalendarEntry > queryEventEntries ( ) { return toCalendarEntryList ( getCalendarEventProvider ( ) . queryEvents ( ) ) ; }
public List < TaskEntry > queryEventEntries ( ) { return toTaskEntryList ( getTaskProvider ( ) . queryEvents ( ) ) ; }
public String getEventTimeString ( ) { return hideEventTime ( ) ? "" : getTimeSpanString ( ) ; }
public List < OrderedEventSource > getActiveEventSources ( ) { return activeEventSources . isEmpty ( ) && isLiveMode ( ) ? EventProviderType . getAvailableSources ( ) : activeEventSources ; }
public LastEntryVisualizer ( Context context , int widgetId ) { super ( new EventProvider ( EventProviderType . LAST_ENTRY , context , widgetId ) ) ; }
public void onDialogClosed ( boolean positiveResult ) { if ( positiveResult ) { DateFormatValue value = getValue ( ) . toSave ( ) ; if ( preference . callChangeListener ( value ) ) { preference . setValue ( value ) ; } } }
public boolean hasPattern ( ) { return StringUtil . nonEmpty ( getPattern ( ) ) ; }
public void onDialogClosed ( boolean positiveResult ) { if ( positiveResult && mPicker != null ) { final int color = mPicker . getColor ( ) ; if ( preference . callChangeListener ( color ) ) { preference . setColor ( color ) ; } } }
public void onCreate ( ) { logEvent ( "onCreate" ) ; }
private void setSettings ( InstanceSettings settings ) { this . settings = settings ; AllSettings . addNew ( TAG , context , settings ) ; }
public void onReceive ( Context context , Intent intent ) { String action = intent . getAction ( ) ; if ( Intent . ACTION_HEADSET_PLUG . equals ( action ) ) { sendState ( context , intent . getIntExtra ( "state" , 0 ) ) ; } }
private void handleConfigurationCommand ( ) { if ( ! isRecording ( ) ) { return ; } if ( MotoScoreApp . preferences . useMediaButton ( ) ) { registerMediaButton ( ) ; } else { unregisterMediaButton ( ) ; } }
public void onCreate ( ) { super . onCreate ( ) ; db . open ( this ) ; preferences . init ( this ) ; }
public Album ( String name , String url , String artist ) { super ( name , url ) ; this . artist = artist ; }
public static Track getInfo ( String artist , String trackOrMbid , String apiKey ) { return getInfo ( artist , trackOrMbid , null , null , null , apiKey ) ; }
public static Boolean isGrblVersionString ( final String response ) { Boolean version = response . toLowerCase ( ) . startsWith ( "grbl" ) ; return version && ( getVersionDouble ( response ) != - 1 ) ; }
public Syncer ( Collection col , RemoteServer server , HostNum hostNum ) { mCol = col ; mRemoteServer = server ; mHostNum = hostNum ; }
public Payload ( @ NonNull Object [ ] data ) { this . data = data ; success = true ; }
public AbstractDeckTreeNode < ? > getNodeByDid ( long did ) { int pos = findDeckPosition ( did ) ; return getDeckList ( ) . get ( pos ) ; }
private boolean isCurrentlySelectedDeck ( AbstractDeckTreeNode < ? > node ) { return node . getDid ( ) == mCol . getDecks ( ) . current ( ) . optLong ( "id" ) ; }
private List < AbstractDeckTreeNode < ? >> getDeckList ( ) { return mCurrentDeckList ; }
public boolean isCancelled ( ) { return mCollectionTask . isCancelled ( ) ; }
public < T extends ProgressSender < Integer > & CancelListener > ArrayList < Long > genCards ( long nid , @ NonNull Model model , @ Nullable T task ) { return genCards ( " ( " + nid + " ) " , model , task ) ; }
public void setProgressCallback ( TaskManager . ProgressCallback < String > progressCallback ) { mProgress = progressCallback ; }
public int answerButtons ( @ NonNull Card card ) { DeckConfig conf = _cardConf ( card ) ; if ( card . isInDynamicDeck ( ) && ! conf . getBoolean ( "resched" ) ) { return 2 ; } return 4 ; }
private void _removeFromFiltered ( @ NonNull Card card ) { if ( card . isInDynamicDeck ( ) ) { card . setDid ( card . getODid ( ) ) ; card . setODue ( 0 ) ; card . setODid ( 0 ) ; } }
public void resetCounts ( ) { resetCounts ( null , true ) ; }
private Card _newCard ( Note note , JSONObject template , int due , long did ) { boolean flush = true ; return _newCard ( note , template , due , did , flush ) ; }
private Card _newCard ( Note note , JSONObject template , int due , boolean flush ) { long did = 0L ; return _newCard ( note , template , due , did , flush ) ; }
private Card _newCard ( Note note , JSONObject template , int due , long parameterDid , boolean flush ) { Card card = new Card ( this ) ; return getNewLinkedCard ( card , note , template , due , parameterDid , flush ) ; }
public static String getWebViewErrorMessage ( ) { Throwable error = getInstance ( ) . mWebViewError ; if ( error == null ) { Timber . w ( "getWebViewExceptionMessage called without webViewFailedToLoad check" ) ; return null ; } return ExceptionUtil . getExceptionMessage ( error ) ; }
public void clearUndo ( ) { mUndo = new LinkedBlockingDeque <> ( ) ; }
public JSONArray ( Collection < ? > copyFrom ) { this ( ) ; if ( copyFrom != null ) { for ( Object o : copyFrom ) { put ( o ) ; } } }
private void updateFieldsFromMap ( Model newModel ) { FieldChangeType type = FieldChangeType . refreshWithMap ( newModel , mModelChangeFieldMap , shouldReplaceNewlines ( ) ) ; populateEditFields ( type , true ) ; updateCards ( newModel ) ; }
public void selectAllIsNotVisibleOnceCalled ( ) { CardBrowser browser = getBrowserWithMultipleNotes ( ) ; selectMenuItem ( browser , R . id . action_select_all ) ; advanceRobolectricLooperWithSleep ( ) ; assertThat ( browser . isShowingSelectAll ( ) , is ( false ) ) ; }
public void selectNoneIsVisibleOnceSelectAllCalled ( ) { CardBrowser browser = getBrowserWithMultipleNotes ( ) ; selectMenuItem ( browser , R . id . action_select_all ) ; advanceRobolectricLooperWithSleep ( ) ; assertThat ( browser . isShowingSelectNone ( ) , is ( true ) ) ; }
public JSONObject deepClone ( ) { JSONObject clone = new JSONObject ( ) ; return deepClonedInto ( clone ) ; }
public static ArrayList < Integer > _availClozeOrds ( Model m , String [ ] sflds ) { return _availClozeOrds ( m , sflds , true ) ; }
public static String [ ] splitFields ( String fields ) { return fields . split ( FIELD_SEPARATOR , - 1 ) ; }
private Note getNoteFromUri ( Uri uri , Collection col ) { long noteId = Long . parseLong ( uri . getPathSegments ( ) . get ( 1 ) ) ; return col . getNote ( noteId ) ; }
public static JSONObject newTemplate ( String name ) { JSONObject t = new JSONObject ( defaultTemplate ) ; t . put ( "name" , name ) ; return t ; }
public boolean leechActionSuspend ( @ NonNull Card card ) { JSONObject conf = _cardConf ( card ) . getJSONObject ( "lapse" ) ; return conf . getInt ( "leechAction" ) == Consts . LEECH_SUSPEND ; }
private void removeCardFromCollection ( Long cardId ) { getCol ( ) . remCards ( Collections . singletonList ( cardId ) ) ; }
public void browserDoesNotFailWhenSelectingANonExistingCard ( ) { CardBrowser browser = getBrowserWithNotes ( 6 ) ; deleteCardAtPosition ( browser , 0 ) ; AnkiAssert . assertDoesNotThrow ( browser : : rerenderAllCards ) ; advanceRobolectricLooperWithSleep ( ) ; assertThat ( browser . cardCount ( ) , equalTo ( 5L ) ) ; }
public static SharedPreferences getSharedPrefs ( Context context ) { return android . preference . PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public void joinFieldsShouldJoinWhenListIsValid ( ) { String [ ] fieldList = { "A" , "B" , "C" } ; assertEquals ( "A" + delimiter + "B" + delimiter + "C" , Utils . joinFields ( fieldList ) ) ; }
public void startActivityWithAnimation ( Intent intent , Direction animation ) { enableIntentAnimation ( intent ) ; super . startActivity ( intent ) ; enableActivityAnimation ( animation ) ; }
public void startActivityForResultWithAnimation ( Intent intent , int requestCode , Direction animation ) { enableIntentAnimation ( intent ) ; startActivityForResult ( intent , requestCode ) ; enableActivityAnimation ( animation ) ; }
public void finishWithAnimation ( Direction animation ) { Timber . i ( "finishWithAnimation %s" , animation ) ; super . finish ( ) ; enableActivityAnimation ( animation ) ; }
public static void finishActivityWithFade ( Activity activity ) { activity . finish ( ) ; ActivityTransitionAnimation . slide ( activity , UP ) ; }
private void disableActivityAnimation ( ) { ActivityTransitionAnimation . slide ( this , NONE ) ; }
private void enableActivityAnimation ( Direction animation ) { if ( animationDisabled ( ) ) { disableActivityAnimation ( ) ; } else { ActivityTransitionAnimation . slide ( this , animation ) ; } }
private void closeWithResult ( ) { if ( mPreferenceChanged ) { setResult ( RESULT_OK ) ; } else { setResult ( RESULT_CANCELED ) ; } finish ( ) ; ActivityTransitionAnimation . slide ( this , FADE ) ; }
private void finishWithAnimation ( ) { super . finishWithAnimation ( DOWN ) ; }
public void loginToSyncServer ( ) { Intent myAccount = new Intent ( this , MyAccount . class ) ; myAccount . putExtra ( "notLoggedIn" , true ) ; startActivityForResultWithAnimation ( myAccount , LOG_IN_FOR_SYNC , FADE ) ; }
public void showProgressBar ( ) { ProgressBar progressBar = findViewById ( R . id . progress_bar ) ; if ( progressBar != null ) { progressBar . setVisibility ( View . VISIBLE ) ; } }
public void hideProgressBar ( ) { ProgressBar progressBar = findViewById ( R . id . progress_bar ) ; if ( progressBar != null ) { progressBar . setVisibility ( View . GONE ) ; } }
public void joinTagsShouldReturnEmptyStringWhenSetIsEmpty ( ) { assertEquals ( "" , Utils . joinTags ( new HashSet <> ( ) ) ) ; }
private final View . OnClickListener mToggleAnswerHandler = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { if ( mShowingAnswer ) { displayCardQuestion ( ) ; } else { displayCardAnswer ( ) ; } } } ;
public @ NonNull Counts counts ( @ NonNull Card card ) { Counts counts = counts ( ) ; Queue idx = countIdx ( card ) ; counts . changeCount ( idx , 1 ) ; return counts ; }
public int eta ( Counts counts ) { return eta ( counts , true ) ; }
public int getItemCount ( ) { return mCurrentDeckList . size ( ) ; }
private void setPreviewImage ( @ Nullable String imagePath , int maxsize ) { if ( imagePath != null && ! "" . equals ( imagePath ) ) { File f = new File ( imagePath ) ; setImagePreview ( f , maxsize ) ; } }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mDrawerToggle != null ) { mDrawerToggle . onConfigurationChanged ( newConfig ) ; } }
public DeckAdapter . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View v = mLayoutInflater . inflate ( R . layout . deck_item , parent , false ) ; return new ViewHolder ( v ) ; }
public @ NonNull String toString ( ) { return mString ; }
public void onCustomTabsServiceConnected ( @ NonNull ComponentName name , @ NonNull CustomTabsClient client ) { ServiceConnectionCallback connectionCallback = mConnectionCallback . get ( ) ; if ( connectionCallback != null ) connectionCallback . onServiceConnected ( client ) ; }
public @ NonNull MenuInflater getMenuInflater ( ) { return getDelegate ( ) . getMenuInflater ( ) ; }
private ImportReplaceListener importReplaceListener ( ) { return new ImportReplaceListener ( this ) ; }
private MediaCheckListener mediaCheckListener ( ) { return new MediaCheckListener ( this ) ; }
private SimpleProgressListener simpleProgressListener ( ) { return new SimpleProgressListener ( this ) ; }
private HandleEmptyCardListener handlerEmptyCardListener ( ) { return new HandleEmptyCardListener ( this ) ; }
public JSONObject applyChanges ( JSONObject changes ) throws UnexpectedSchemaChange { JSONObject lchg = changes ( ) ; mergeChanges ( lchg , changes ) ; return lchg ; }
private int parse_add_char ( char c ) { if ( this . field_len == field_size ) return - 1 ; this . field [ this . field_len ++ ] = c ; return 0 ; }
public boolean getBoolean ( String key , boolean defValue ) { return Boolean . parseBoolean ( this . getString ( key , Boolean . toString ( defValue ) ) ) ; }
public float getFloat ( String key , float defValue ) { return Float . parseFloat ( this . getString ( key , Float . toString ( defValue ) ) ) ; }
public int getInt ( String key , int defValue ) { return Integer . parseInt ( this . getString ( key , Integer . toString ( defValue ) ) ) ; }
public long getLong ( String key , long defValue ) { return Long . parseLong ( this . getString ( key , Long . toString ( defValue ) ) ) ; }
public void setEditingActivity ( MultimediaEditFieldActivity activity ) { mActivity = activity ; }
public void beforeUpload ( ) { boolean changed = Utils . markAsUploaded ( all ( ) ) ; if ( changed ) { save ( ) ; } }
private int _currentRevLimit ( boolean considerCurrentCard ) { Deck d = mCol . getDecks ( ) . get ( mCol . getDecks ( ) . selected ( ) , false ) ; return _deckRevLimitSingle ( d , considerCurrentCard ) ; }
private void showSyncErrorMessage ( @ Nullable String message ) { String title = getResources ( ) . getString ( R . string . sync_error ) ; showSimpleMessageDialog ( title , message , true ) ; }
public void onBackPressed ( ) { if ( isDrawerOpen ( ) ) { Timber . i ( "Back key pressed" ) ; closeDrawer ( ) ; } else { super . onBackPressed ( ) ; } }
public boolean animationDisabled ( ) { SharedPreferences preferences = AnkiDroidApp . getSharedPrefs ( this ) ; return preferences . getBoolean ( "safeDisplay" , false ) ; }
public static void sendExceptionReport ( Throwable e , String origin , @ Nullable String additionalInfo ) { sendExceptionReport ( e , origin , additionalInfo , false ) ; }
public Sched ( @ NonNull Collection col ) { super ( col ) ; }
private int _nextLapseIvl ( @ NonNull Card card , @ NonNull JSONObject conf ) { return Math . max ( conf . getInt ( "minInt" ) , ( int ) ( card . getIvl ( ) * conf . getDouble ( "mult" ) ) ) ; }
public void buryCards ( @ NonNull long [ ] cids ) { buryCards ( cids , false ) ; }
public void deferReset ( @ NonNull Card card ) { mHaveQueues = false ; mHaveCounts = false ; setCurrentCard ( card ) ; }
public @ NonNull List < DeckDueTreeNode > deckDueList ( ) { return deckDueList ( null ) ; }
public @ NonNull List < DeckDueTreeNode > deckDueTree ( ) { return deckDueTree ( null ) ; }
private void _repeatStep ( @ NonNull Card card , @ NonNull JSONObject conf ) { int delay = _delayForRepeatingGrade ( conf , card . getLeft ( ) ) ; _rescheduleLrnCard ( card , conf , delay ) ; }
private int _rescheduleLrnCard ( @ NonNull Card card , @ NonNull JSONObject conf ) { return _rescheduleLrnCard ( card , conf , null ) ; }
private void _updateEarlyRevIvl ( @ NonNull Card card , @ Consts . BUTTON_TYPE int ease ) { card . setIvl ( _earlyReviewIvl ( card , ease ) ) ; }
public @ NonNull DeckConfig _cardConf ( @ NonNull Card card ) { return mCol . getDecks ( ) . confForDid ( card . getDid ( ) ) ; }
public @ NonNull String _deckLimit ( ) { return Utils . ids2str ( mCol . getDecks ( ) . active ( ) ) ; }
private int _previewDelay ( @ NonNull Card card ) { return _cardConf ( card ) . optInt ( "previewDelay" , 10 ) * 60 ; }
public void unburyCardsForDeck ( @ NonNull UnburyType type ) { unburyCardsForDeck ( type , null ) ; }
private void _remapLearningAnswers ( @ NonNull String sql ) { mCol . getDb ( ) . execute ( "update revlog set " + sql + " and type in ( " + Consts . REVLOG_LRN + " , " + Consts . REVLOG_RELRN + " ) " ) ; }
public void setContext ( @ Nullable WeakReference < Activity > contextReference ) { mContextReference = contextReference ; }
public @ NonNull Collection getCol ( ) { return mCol ; }
public Time getTime ( ) { return mTime ; }
public @ Consts . BUTTON_TYPE int getGoodNewButton ( ) { return Consts . BUTTON_TWO ; }
public void doesNotShowErrorsWhenUsedInTime ( ) { lint ( ) . allowMissingSdk ( ) . allowCompilationErrors ( ) . files ( create ( stubGregorian ) , create ( javaFileWithTime ) ) . issues ( DirectGregorianInstantiation . ISSUE ) . run ( ) . expectClean ( ) ; }
public @ Consts . BUTTON_TYPE int getGoodNewButton ( ) { return Consts . BUTTON_THREE ; }
private Card getCardInDefaultDeck ( Sched s ) { selectDefaultDeck ( ) ; s . deferReset ( ) ; return s . getCard ( ) ; }
private void toggleWhiteboard ( ReviewerForMenuItems reviewer ) { reviewer . toggleWhiteboard ( ) ; assumeTrue ( "Whiteboard should now be enabled" , reviewer . mPrefWhiteboard ) ; advanceRobolectricLooperWithSleep ( ) ; }
public void startTimebox ( ) { mStartTime = getTime ( ) . intTime ( ) ; mStartReps = mSched . getReps ( ) ; }
public void _checkDay ( ) { if ( getTime ( ) . intTime ( ) > mDayCutoff ) { reset ( ) ; } }
public long getDayStartCutoff ( long collectionCreatedTime ) { long today = getToday ( collectionCreatedTime ) ; return ( collectionCreatedTime + ( today * SECONDS_PER_DAY ) ) * 1000 ; }
private void _moveManuallyBuried ( ) { mCol . getDb ( ) . execute ( "update cards set queue = " + Consts . QUEUE_TYPE_SIBLING_BURIED + " , mod = ? where queue = " + Consts . QUEUE_TYPE_MANUALLY_BURIED , getTime ( ) . intTime ( ) ) ; }
public ListIterator < T > listIterator ( ) { return mQueue . listIterator ( ) ; }
public ConfChangeHandler confChangeHandler ( ) { return new ConfChangeHandler ( DeckPreferenceHack . this ) ; }
public boolean hasQuestion ( ) { return mSoundPaths . containsKey ( SoundSide . QUESTION ) ; }
public void remNotes ( long [ ] ids ) { ArrayList < Long > list = mDb . queryLongList ( "SELECT id FROM cards WHERE nid IN " + Utils . ids2str ( ids ) ) ; remCards ( list ) ; }
private Model getCurrentlySelectedModel ( ) { return getCol ( ) . getModels ( ) . get ( mAllModelIds . get ( mNoteTypeSpinner . getSelectedItemPosition ( ) ) ) ; }
public TemporaryModel ( @ NonNull Model model ) { Timber . d ( "Constructor called with model" ) ; mEditedModel = model ; }
public Model getModel ( ) { return mEditedModel ; }
public Model model ( ) { return mModel ; }
private NoteEditorTestBuilder getNoteEditorAdding ( NoteType noteType ) { Model n = makeNoteForType ( noteType ) ; return new NoteEditorTestBuilder ( n ) ; }
public NoteEditorTestBuilder ( Model model ) { if ( model == null ) { throw new IllegalArgumentException ( "model was null" ) ; } this . mModel = model ; }
public void collapseBrowser ( long did ) { Deck deck = get ( did ) ; boolean collapsed = deck . optBoolean ( "browserCollapsed" , false ) ; deck . put ( "browserCollapsed" , ! collapsed ) ; save ( deck ) ; }
public @ Nullable Deck byName ( String name ) { return mNameMap . get ( name ) ; }
public String name ( long did , boolean _default ) { Deck deck = get ( did , _default ) ; if ( deck != null ) { return deck . getString ( "name" ) ; } return " [ no deck ] " ; }
public String nameOrNone ( long did ) { Deck deck = get ( did , false ) ; if ( deck != null ) { return deck . getString ( "name" ) ; } return null ; }
private void maybeAddToActive ( ) { Deck c = current ( ) ; select ( c . getLong ( "id" ) ) ; }
private boolean parseTimerValue ( DeckConfig options ) { return DeckConfig . parseTimerOpt ( options , true ) ; }
public void unburyCardsForDeck ( ) { unburyCardsForDeck ( ALL ) ; }
public void unburyCardsForDeck ( long did ) { List < Long > all = new ArrayList <> ( mCol . getDecks ( ) . children ( did ) . values ( ) ) ; all . add ( did ) ; unburyCardsForDeck ( ALL , all ) ; }
public JSONObject ( JSONObject copyFrom ) { this ( ) ; for ( String key : copyFrom ) { put ( key , copyFrom . get ( key ) ) ; } }
public GoogleAnalytics build ( ) { GoogleAnalytics analytics = super . build ( ) ; return spy ( analytics ) ; }
public void validate ( ) { validateMockitoUsage ( ) ; }
public void checkIntegrity ( ) { _recoverOrphans ( ) ; _checkDeckTree ( ) ; }
public void copyFile ( @ NonNull String source , @ NonNull String target ) throws IOException { Files . copy ( Paths . get ( source ) , Paths . get ( target ) , StandardCopyOption . REPLACE_EXISTING ) ; }
public long copyFile ( @ NonNull String source , @ NonNull OutputStream target ) throws IOException { return Files . copy ( Paths . get ( source ) , target ) ; }
public long copyFile ( @ NonNull InputStream source , @ NonNull String target ) throws IOException { return Files . copy ( source , Paths . get ( target ) , StandardCopyOption . REPLACE_EXISTING ) ; }
public boolean validCollection ( ) { return getModels ( ) . validateModel ( ) ; }
public void reset ( ) { mSched . deferReset ( ) ; }
private void cancelActivityWithAssertionFailure ( String logMessage ) { Timber . e ( logMessage ) ; UIUtils . showThemedToast ( this , getString ( R . string . mutimedia_editor_assertion_failed ) , false ) ; finishCancel ( ) ; }
public ArrayList < String > getTags ( ) { return mTags ; }
public ZipFile ( String path ) throws FileNotFoundException { mZos = new ZipArchiveOutputStream ( new BufferedOutputStream ( new FileOutputStream ( path ) ) ) ; }
public void write ( String path , String entry ) throws IOException { BufferedInputStream bis = new BufferedInputStream ( new FileInputStream ( path ) , BUFFER_SIZE ) ; ZipArchiveEntry ze = new ZipArchiveEntry ( entry ) ; writeEntry ( bis , ze ) ; }
private static ChangeUIRequest init ( @ NonNull IField field ) { return new ChangeUIRequest ( field , ACTIVITY_LOAD ) ; }
private void displayErrorSavingNote ( ) { int errorMessageId = getAddNoteErrorResource ( ) ; UIUtils . showThemedToast ( this , getResources ( ) . getString ( errorMessageId ) , false ) ; }
public void handleDbLocked ( ) { Timber . i ( "Displaying Database Locked" ) ; showDatabaseErrorDialog ( DatabaseErrorDialog . DIALOG_DB_LOCKED ) ; }
public void resetVariables ( ) { mDidDisplayMessage = false ; mDidDisplayDialogLoadFailed = false ; mDidDisplayDbLocked = false ; }
public double getSizeChangeInKb ( ) { return ( mOldSize - mNewSize ) / 1024 . 0 ; }
private void setCustomServerWithNoUrl ( ) { SharedPreferences userPreferences = AnkiDroidApp . getSharedPrefs ( AnkiDroidApp . getInstance ( ) ) ; userPreferences . edit ( ) . putBoolean ( "useCustomSyncServer" , true ) . apply ( ) ; }
public HostNum ( Integer hostNum ) { mHostNum = hostNum ; }
public Integer getHostNum ( ) { return mHostNum ; }
public void setHostNum ( Integer newHostNum ) { mHostNum = newHostNum ; }
public void getDefaultMediaUrlWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( null ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public void getDefaultMediaUrlWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( 1 ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
public void getCustomMediaUrlWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( null ) ; setCustomServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void getCustomMediaUrlWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( 1 ) ; setCustomServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void getUnformattedCustomMediaUrlWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( null ) ; setCustomServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void getUnformattedCustomMediaUrlWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( 1 ) ; setCustomServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void invalidSettingReturnsCorrectResultWithNoHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( null ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public void invalidSettingReturnsCorrectResultWithHostNum ( ) { HttpSyncer underTest = getServerWithHostNum ( 1 ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
private HttpSyncer getServerWithHostNum ( Integer hostNum ) { return new HttpSyncer ( null , null , new HostNum ( hostNum ) ) ; }
public void getDefaultMediaUrlWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( null ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public void getDefaultMediaUrlWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( 1 ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
public void getCustomMediaUrlWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( null ) ; setCustomMediaServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void getCustomMediaUrlWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( 1 ) ; setCustomMediaServer ( sCustomServerWithFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void getUnformattedCustomMediaUrlWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( null ) ; setCustomMediaServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void getUnformattedCustomMediaUrlWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( 1 ) ; setCustomMediaServer ( sCustomServerWithNoFormatting ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( "https : }
public void invalidSettingReturnsCorrectResultWithNoHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( null ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlNoHostNum ) ) ; }
public void invalidSettingReturnsCorrectResultWithHostNum ( ) { RemoteMediaServer underTest = getServerWithHostNum ( 1 ) ; setCustomServerWithNoUrl ( ) ; String syncUrl = underTest . syncURL ( ) ; assertThat ( syncUrl , is ( sDefaultUrlWithHostNum ) ) ; }
private RemoteMediaServer getServerWithHostNum ( Integer hostNum ) { return new RemoteMediaServer ( null , null , null , new HostNum ( hostNum ) ) ; }
public RemoteMediaServer ( Collection col , String hkey , Connection con , HostNum hostNum ) { super ( hkey , con , hostNum ) ; mCol = col ; }
public void browserIsNotInitiallyInMultiSelectModeWithNoCards ( ) { CardBrowser browser = getBrowserWithNoNewCards ( ) ; assertThat ( browser . isInMultiSelectMode ( ) , is ( false ) ) ; }
public void selectAllIsNotVisibleWhenNoCardsInDeck ( ) { CardBrowser browser = getBrowserWithNoNewCards ( ) ; assertThat ( browser . isShowingSelectAll ( ) , is ( false ) ) ; }
public AbstractSched getSched ( ) { return mSched ; }
public void startActivityForResultWithoutAnimation ( Intent intent , int requestCode ) { disableIntentAnimation ( intent ) ; startActivityForResult ( intent , requestCode ) ; disableActivityAnimation ( ) ; }
public int getItemCount ( ) { return character . inventario . size ( ) ; }
private void setTextColor ( int color ) { dateView . setTextColor ( color ) ; secureIndicatorView . setColorFilter ( color ) ; locationIndicatorView . setColorFilter ( color ) ; deliveryStatusView . setTint ( color ) ; }
public static void trigger ( @ NonNull ConversationItem conversationItem ) { triggerReplyIcon ( conversationItem . replyView ) ; }
public ConversationAdaptiveActionsToolbar ( @ NonNull Context context ) { this ( context , null ) ; }
public ConversationAdaptiveActionsToolbar ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { this ( context , attrs , R . attr . toolbarStyle ) ; }
public boolean hasImage ( ) { return false ; }
private void progressError ( String data2 ) { progressDialog . dismiss ( ) ; maybeShowConfigurationError ( this , data2 ) ; }
public void onImageCapture ( @ NonNull final byte [ ] imageBytes ) { setMedia ( PersistentBlobProvider . getInstance ( ) . create ( this , imageBytes , MediaUtil . IMAGE_JPEG , null ) , MediaType . IMAGE ) ; quickAttachmentDrawer . hide ( false ) ; }
public static PersistentBlobProvider getInstance ( ) { if ( instance == null ) { synchronized ( PersistentBlobProvider . class ) { if ( instance == null ) { instance = new PersistentBlobProvider ( ) ; } } } return instance ; }
private PersistentBlobProvider ( ) { }
public synchronized @ NonNull Drawable getFallbackAvatarDrawable ( Context context ) { return getFallbackContactPhoto ( ) . asDrawable ( context , getFallbackAvatarColor ( ) ) ; }
private ListenableFuture < Boolean > initializeDraft ( ) { if ( isMailToIntent ( ) ) { return initializeDraftFromIntent ( ) ; } else { return initializeDraftFromDatabase ( ) ; } }
public void setTitle ( @ NonNull GlideRequests glideRequests , @ NonNull DcChat dcChat ) { setTitle ( glideRequests , dcChat , true ) ; }
public void onNewIntent ( ) { initializeFabClickListener ( actionMode != null ) ; }
public void setEnabled ( boolean enabled ) { composeText . setEnabled ( enabled ) ; mediaKeyboard . setEnabled ( enabled ) ; quickAudioToggle . setEnabled ( enabled ) ; quickCameraToggle . setEnabled ( enabled ) ; }
private int getKeyboardPortraitHeight ( ) { int keyboardHeight = PreferenceManager . getDefaultSharedPreferences ( getContext ( ) ) . getInt ( "keyboard_height_portrait" , defaultCustomKeyboardSize ) ; return Util . clamp ( keyboardHeight , minCustomKeyboardSize , getRootView ( ) . getHeight ( ) - minCustomKeyboardTopMarginPortrait ) ; }
private boolean useSystemEmoji ( ) { return ! forceCustom && Prefs . isSystemEmojiPreferred ( getContext ( ) ) ; }
public @ NonNull String toString ( ) { return "DrawInfo { " + "page = " + page + " , index = " + index + ' } ' ; }
public @ NonNull String toString ( ) { return model . getSprite ( ) ; }
public @ NonNull Iterator < Candidate > iterator ( ) { return list . iterator ( ) ; }
public @ NonNull CropAreaRenderer [ ] newArray ( int size ) { return new CropAreaRenderer [ size ] ; }
public void setMode ( @ NonNull Mode mode ) { setMode ( mode , true ) ; }
public void onBackPressed ( ) { if ( ! imageEditorFragment . onBackPressed ( ) ) { super . onBackPressed ( ) ; } } */
public void onPause ( ) { super . onPause ( ) ; setLastSeen ( System . currentTimeMillis ( ) ) ; isPaused = true ; }
public static boolean reliableService ( Context context ) { try { return getBooleanPreference ( context , "pref_reliable_service" , false ) ; } catch ( Exception e ) { return false ; } }
public static long getLongPreference ( Context context , String key , long defaultValue ) { return PreferenceManager . getDefaultSharedPreferences ( context ) . getLong ( key , defaultValue ) ; }
public @ Nullable Uri getUri ( @ NonNull Context context ) { return isProfilePhoto ( ) ? Uri . fromFile ( AvatarHelper . getSelfAvatarFile ( context ) ) : null ; }
private void startRegistrationActivity ( ) { manualConfigure = true ; Intent intent = new Intent ( this , RegistrationActivity . class ) ; startActivity ( intent ) ; }
private void startRegistrationQrActivity ( ) { manualConfigure = false ; new IntentIntegrator ( this ) . setCaptureActivity ( RegistrationQrActivity . class ) . initiateScan ( ) ; }
public void onSuccess ( Boolean oauth2started ) { if ( ! oauth2started ) { updateProviderInfo ( ) ; onLogin ( ) ; } }
public void onFailure ( ExecutionException e ) { updateProviderInfo ( ) ; onLogin ( ) ; }
public CharSequence getPageTitle ( int position ) { switch ( position ) { case TAB_SHOW : return getString ( R . string . qrshow_title ) ; default : return getString ( R . string . qrscan_title ) ; } }
public long getNotReadNotificationsCount ( ) { return pushNotificationDataStore . getNotOpenedCountBy ( securityManager . getCurrentMemberId ( ) ) ; }
public void addMessageListener ( @ NonNull ServerMessageListener < HtspMessage > listener ) { messageListeners . add ( listener ) ; }
public void removeMessageListener ( @ NonNull ServerMessageListener < HtspMessage > listener ) { messageListeners . remove ( listener ) ; }
public ArrayList < String > getArrayList ( String key ) { Object obj = get ( key ) ; return ( ArrayList < String > ) obj ; }
public void handleResponse ( @ NotNull HtspMessage response ) { id = response . getInteger ( "id" , 0 ) ; size = response . getLong ( "size" , 0 ) ; time = response . getLong ( "mtime" , 0 ) ; notifyAll ( ) ; }
public void setGame ( G2048Game game ) { this . game = game ; }
public InputListener ( G2048View view ) { super ( ) ; this . mView = view ; }
private long getHighScore ( ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( mContext ) ; return settings . getLong ( HIGH_SCORE_PERM , - 1 ) ; }
public static synchronized DownloadedAyat getInstance ( Context context ) { if ( instance == null ) instance = new DownloadedAyat ( context ) ; return instance ; }
public synchronized void onClick ( boolean isPauseClick ) { if ( isPauseClick ) { pauseRecite ( false ) ; } else { stopPlayback ( true ) ; } }
public synchronized void executeOnCachedExecutor ( Runnable runnable ) { mCachedExecutor . execute ( runnable ) ; }
public static DocumentFile findOrCreateDir ( DocumentFile parent , @ NonNull String name , boolean createIfNotExists ) { DocumentFile file = parent . findFile ( name ) ; if ( file == null && createIfNotExists ) file = parent . createDirectory ( name ) ; return file ; }
private boolean canListenPhoneState ( ) { return getSystemService ( Context . TELEPHONY_SERVICE ) != null && ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M && ActivityCompat . checkSelfPermission ( this , Manifest . permission . READ_PHONE_STATE ) == PackageManager . PERMISSION_GRANTED ) ; }
public static int getBackgroundColor ( ) { return background [ Settings . getColorMode ( ) ] ; }
public static int getTileColor ( ) { if ( Settings . getColorMode ( ) == Constants . COLOR_MODE_DAY ) { return tilesDay [ Settings . tileColor ] ; } else { return tilesNight [ Settings . tileColor ] ; } }
public static int [ ] getTileColors ( ) { if ( Settings . getColorMode ( ) == Constants . COLOR_MODE_DAY ) { return tilesDay ; } else { return tilesNight ; } }
public static int getUnsolvedTileColor ( ) { if ( Settings . getColorMode ( ) == Constants . COLOR_MODE_DAY ) { return tilesDayUnsolved [ Settings . tileColor ] ; } else { return tilesNightUnsolved [ Settings . tileColor ] ; } }
public static int getTileTextColor ( ) { return spriteText [ Settings . getColorMode ( ) ] ; }
public static int getInfoTextColor ( ) { return textInfo [ Settings . getColorMode ( ) ] ; }
public static int getOverlayColor ( ) { return overlay [ Settings . getColorMode ( ) ] ; }
public static int getOverlayTextColor ( ) { return overlayText [ Settings . getColorMode ( ) ] ; }
public static int getHardModeButtonsColor ( ) { return Settings . getColorMode ( ) == Constants . COLOR_MODE_DAY ? 0xff373737 : 0xff787878 ; }
public boolean show ( ) { mCurrentPage = PAGE_BASIC ; return super . show ( ) ; }
public void update ( ) { mPaintTextValue . setAntiAlias ( Settings . antiAlias ) ; updateRect ( ) ; updateButtonDimensions ( ) ; }
public static void update ( int width , int height ) { update ( width , height , 1f , 1f ) ; }
public boolean contains ( float x , float y ) { return mRectShape . contains ( x , y ) ; }
public void addTile ( Tile tile ) { mData . add ( tile ) ; }
private int at ( float x , float y ) { for ( Tile t : mData ) { if ( t . contains ( x , y ) ) { return t . getIndex ( ) ; } } return - 1 ; }
public String getIdentifier ( ) { return String . format ( "%s/%x/%x/%d" , mDevice . getDeviceName ( ) , mDevice . getVendorId ( ) , mDevice . getProductId ( ) , mInterfaceIndex ) ; }
private void replaceFragment ( Fragment fragment ) { if ( fragment != null ) { getSupportFragmentManager ( ) . beginTransaction ( ) . replace ( android . R . id . content , fragment ) . commit ( ) ; } }
public void onAttach ( @ NotNull Context context ) { super . onAttach ( context ) ; if ( context instanceof OnClickSettingsListener ) { mListener = ( OnClickSettingsListener ) context ; } else throw new ClassCastException ( ) ; }
private void openFitbitAuth ( ) { if ( loginFitBit . isInvalidClientFitbit ( ) ) { Alerter . hide ( ) ; return ; } mListener . onPrefClick ( getResources ( ) . getString ( R . string . key_fitibit ) ) ; loginFitBit . doAuthorizationCode ( ) ; }
public void onResume ( ) { super . onResume ( ) ; loadDataOcariot ( true ) ; }
private void initDataSwipeRefresh ( ) { mDataSwipeRefresh . setOnRefreshListener ( ( ) -> { if ( itShouldLoadMore ) loadDataOcariot ( true ) ; } ) ; }
public void onResume ( ) { super . onResume ( ) ; userAccess = appPref . getUserAccessOcariot ( ) ; loadDataOcariot ( true ) ; }
private void initComponents ( ) { initToolbar ( ) ; initRecyclerView ( ) ; initDataSwipeRefresh ( ) ; }
public static String getCurrentDatetimeUTC ( ) { SimpleDateFormat format = new SimpleDateFormat ( DateUtils . DATE_FORMAT_DATE_TIME_UTC , Locale . getDefault ( ) ) ; format . setTimeZone ( TimeZone . getTimeZone ( "UTC" ) ) ; return format . format ( new Date ( ) ) ; }
public void onStop ( ) { super . onStop ( ) ; mContext . unregisterReceiver ( mBluetoothReceiver ) ; if ( ConnectionUtils . isBluetoothAvailable ( ) ) mScanner . stopScan ( ) ; }
public String getAge ( ) { return age ; }
public void setAge ( String age ) { this . age = age ; }
private void addNewColor ( ) { addNewColor ( Theme . getSimilarColor ( colors . get ( selectedColor ) ) , 0 ) ; }
private void updatePreview ( ) { themePreview . setTheme ( getNewTheme ( ) ) ; }
public void onClick ( View v ) { sendIt ( ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . project_detail , menu ) ; return true ; }
private void onFetchProgress ( int done , int total ) { uploadProgress . setIndeterminate ( false ) ; uploadProgress . setProgress ( done ) ; uploadProgress . setMax ( total ) ; }
public void run ( ) { ripple . set ( at . x , at . y ) ; invalidate ( ) ; }
private void cancelLongPress ( ) { cancelRipple ( ) ; if ( longPressRunnable != null ) { removeCallbacks ( longPressRunnable ) ; longPressRunnable = null ; } }
public void afterTextChanged ( Editable e ) { if ( updateAfterTextChange ) { updateAppList ( ) ; } }
private void drawTip ( Canvas canvas , String tip ) { if ( tip != null ) { canvas . drawText ( tip , viewWidth >> 1 , editorPadding + textOffset , paintText ) ; } }
public void setRadius ( int radius ) { apply ( RADIUS , radius ) ; }
public boolean onScale ( ScaleGestureDetector detector ) { if ( ! detector . isInProgress ( ) ) { return false ; } scaleRadius ( detector . getScaleFactor ( ) ) ; invalidate ( ) ; return true ; }
public void onBackPressed ( ) { if ( pieView . inEditMode ( ) ) { pieView . endEditMode ( ) ; showAllApps ( ) ; } else { hideAllApps ( ) ; } }
public synchronized void set ( int x , int y , double radius , double twist ) { centerX = x ; centerY = y ; this . radius = radius ; this . twist = twist ; }
public synchronized void setRadius ( double radius ) { this . radius = radius ; }
public synchronized void draw ( Canvas canvas ) { for ( int n = icons . size ( ) ; n -- > 0 ; ) { ( ( CanvasIcon ) icons . get ( n ) ) . draw ( canvas ) ; } }
public void onUpdate ( ) { searchInput . setText ( null ) ; updateAppList ( ) ; }
public String requestStringPrompt ( String instructions , String hint ) { String value = null ; try { value = ( String ) requestPrompt ( instructions , hint , String . class ) ; } catch ( Exception ignored ) { } return value ; }
public Boolean requestBooleanPrompt ( String instructions , String hint ) { Boolean value = null ; try { value = ( Boolean ) requestPrompt ( instructions , hint , Boolean . class ) ; } catch ( Exception ignored ) { } return value ; }
public int getScrollback ( ) { int scrollback = 140 ; try { scrollback = Integer . parseInt ( prefs . getString ( PreferenceConstants . SCROLLBACK , "140" ) ) ; } catch ( Exception ignored ) { } return scrollback ; }
private void closeBridge ( final TerminalBridge bridge ) { updateEmptyVisible ( ) ; updatePromptVisible ( ) ; if ( pager . getChildCount ( ) == 0 ) { finish ( ) ; unregisterMenuListeners ( ) ; } }
public void onGroupExpand ( int groupPosition ) { if ( groupPosition != previousItem ) expandableListView . collapseGroup ( previousItem ) ; previousItem = groupPosition ; }
public Object getChild ( int groupPosition , int childPosition ) { PhonebookEntry [ ] phoneBook = playerInfo . phonebooks [ groupPosition ] . phonebook ; return phoneBook [ childPosition ] ; }
public void onRefresh ( ) { apiHelper . getPlayerStats ( ) ; pbLoadphonebook . setVisibility ( View . VISIBLE ) ; listPhonebooks . setAdapter ( ( BaseExpandableListAdapter ) null ) ; }
public int getGroupCount ( ) { int length = 0 ; if ( this . buildingByType != null ) length = this . buildingByType . length ; return length ; }
public Object getGroup ( int groupPosition ) { return this . buildingByType [ groupPosition ] ; }
public void onStopTrackingTouch ( SeekBar seekBar ) { processVideo ( ) ; }
public void onProgressChanged ( SeekBar seekBar , int i , boolean b ) { mObscureBlurAmount = i ; }
private TerminalView getTerminalView ( ) { return mTermuxFloatView . getTerminalView ( ) ; }
public TermuxFloatAppSharedProperties getProperties ( ) { return mProperties ; }
public void getDirName ( ) throws UnknownUriException { fsResolver . existsFileNames = Collections . singletonList ( "bar" ) ; assertEquals ( "bar" , fakeFs . getDirPath ( Uri . parse ( "file fsResolver . existsFileNames = null ; }
private int calcInitBufCapacity ( int capacity ) { return ( int ) Math . floor ( capacity / 2 . 0 ) ; }
private void emitChangedEvent ( ) { exec . submit ( ( ) -> stateChangedEvent . onNext ( new State ( moving . get ( ) , saveResume . get ( ) > 0 , System . currentTimeMillis ( ) ) ) ) ; }
private void forceClearForeground ( ) { disposables . add ( Completable . fromRunnable ( ( ) -> updateForegroundNotify ( Collections . emptyList ( ) ) ) . subscribeOn ( AndroidSchedulers . mainThread ( ) ) . subscribe ( ) ) ; }
private TorrentDecodeTask ( AddTorrentViewModel viewModel ) { super ( ) ; this . viewModel = new WeakReference <> ( viewModel ) ; }
public void markAsReadFeeds ( @ NonNull List < Long > feedIdList ) { disposables . add ( Completable . fromRunnable ( ( ) -> repo . markAsReadByFeedId ( feedIdList ) ) . subscribeOn ( Schedulers . io ( ) ) . subscribe ( ) ) ; }
public void submitList ( @ Nullable List < FileManagerNode > list ) { if ( list != null ) list . sort ( directoryFirstCmp ) ; super . submitList ( list ) ; }
public void testCapacityZero ( ) { new FixedRingBuffer < Integer > ( 0 ) ; }
public void testInitCapacityNegative ( ) { new FixedRingBuffer < Integer > ( - 1 , 10 ) ; }
public void testInitCapacityGreatCapacity ( ) { new FixedRingBuffer < Integer > ( 11 , 10 ) ; }
public void addRange ( @ NonNull String first , @ NonNull String last ) { ranges . add ( Pair . create ( first , last ) ) ; }
public static boolean setStartAppAlarm ( @ NonNull Context appContext , int time ) { return setStartStopAppAlarm ( appContext , SCHEDULER_WORK_START_APP , time ) ; }
public static boolean setStopAppAlarm ( @ NonNull Context appContext , int time ) { return setStartStopAppAlarm ( appContext , SCHEDULER_WORK_STOP_APP , time ) ; }
public void onCreate ( ) { pref = RepositoryHelper . getSettingsRepository ( getApplicationContext ( ) ) ; engine = TorrentEngine . getInstance ( getApplicationContext ( ) ) ; stateProvider = TorrentInfoProvider . getInstance ( getApplicationContext ( ) ) ; initPendingIntents ( ) ; makeForegroundNotify ( ) ; }
public int compare ( TorrentInfo state1 , TorrentInfo state2 ) { return TorrentSorting . SortingColumns . fromValue ( sorting . getColumnName ( ) ) . compare ( state1 , state2 , sorting . getDirection ( ) ) ; }
private void stopEngine ( ) { shuttingDown . set ( true ) ; forceClearForeground ( ) ; engine . doStop ( ) ; }
public void onStart ( ) { super . onStart ( ) ; subscribeAlertDialog ( ) ; subscribeParamsChanged ( ) ; }
private void stopService ( ) { disposables . clear ( ) ; engine . removeListener ( engineListener ) ; setKeepCpuAwake ( false ) ; isAlreadyRunning . set ( false ) ; stopForeground ( true ) ; stopSelf ( ) ; }
public ItemDetails getItemDetails ( ) { return new ItemDetails ( selectionKey , getBindingAdapterPosition ( ) ) ; }
public List < String > getCategories ( ) { return Collections . emptyList ( ) ; }
public Uri getParentDirUri ( @ NonNull Uri filePath ) { File parent = new File ( filePath . getPath ( ) ) . getParentFile ( ) ; return ( parent != null && parent . exists ( ) ? Uri . fromFile ( parent ) : null ) ; }
public String toString ( ) { if ( time == 0 ) return mContext . getString ( R . string . prepTimeBellDescription_atFinish ) ; return mContext . getString ( R . string . prepTimeBellDescription_beforeFinish , DebatekeeperUtils . secsToTextSigned ( time ) ) ; }
public String toString ( ) { if ( time == 0 ) return mContext . getString ( R . string . prepTimeBellDescription_atStart ) ; return mContext . getString ( R . string . prepTimeBellDescription_afterStart , DebatekeeperUtils . secsToTextSigned ( time ) ) ; }
public List < String > getErrorLog ( ) { return mErrorLog ; }
public List < String > getRegions ( ) { return xu . findAllElementTexts ( mInfoElement , R . string . xml2elemName_info_region ) ; }
public List < String > getLevels ( ) { return xu . findAllElementTexts ( mInfoElement , R . string . xml2elemName_info_level ) ; }
public List < String > getUsedAts ( ) { return xu . findAllElementTexts ( mInfoElement , R . string . xml2elemName_info_usedAt ) ; }
public DebateFormatBuilderFromXmlForSchema2 ( Context context ) { super ( ) ; mContext = context ; mDocumentBuilderFactory = DocumentBuilderFactory . newInstance ( ) ; xu = new XmlUtilities ( context . getResources ( ) ) ; mPeriodInfoManager = new PeriodInfoManager ( context , xu ) ; }
public String getName ( ) { if ( mRootElement == null ) return "" ; String result = xu . findLocalElementText ( mRootElement , R . string . xml2elemName_name ) ; if ( result == null ) return "" ; else return result ; }
public String getDescription ( ) { if ( mInfoElement == null ) return " - " ; String result = xu . findLocalElementText ( mInfoElement , R . string . xml2elemName_info_desc ) ; if ( result == null ) return " - " ; else return result ; }
public LanguageChooser ( ) { mLocaleList = buildLocalePriorityList ( LocaleListCompat . getAdjustedDefault ( ) ) ; }
public boolean isSilent ( ) { return mSoundInfo . getNumberOfBells ( ) == 0 ; }
public void onCreate ( ) { super . onCreate ( ) ; mAlertManager = new AlertManager ( this ) ; createNotificationChannel ( ) ; }
private void updatePlayBellButton ( ) { if ( mServiceBinder != null ) mViewBinding . timerPlayBellButton . setVisibility ( ( mServiceBinder . getAlertManager ( ) . isBellsEnabled ( ) ) ? View . VISIBLE : View . GONE ) ; }
private boolean verifyHostMatch ( URL url ) throws MalformedURLException { URL listUrl = getListUrl ( ) ; return url . getHost ( ) . equals ( listUrl . getHost ( ) ) ; }
public void onServiceConnected ( ComponentName className , IBinder service ) { Log . d ( TAG , "service connected" ) ; mServiceBinder = ( DebatingTimerService . DebatingTimerServiceBinder ) service ; initialiseDebate ( true ) ; restoreBinder ( ) ; }
private void clearDebateLoadError ( ) { mDebateLoadErrorIsFormerAsset = false ; mDebateLoadError = null ; updateGui ( ) ; }
private String convertIndexToFilename ( int index ) { if ( index < 0 || index >= mStylesList . size ( ) ) return null ; return mStylesList . get ( index ) . getFilename ( ) ; }
private void logXmlError ( Exception e ) { logXmlError ( e . getLocalizedMessage ( ) ) ; }
public void onClick ( View v ) { DialogFragment fragment = MoreDetailsDialogFragment . newInstance ( filename ) ; fragment . show ( getChildFragmentManager ( ) , DIALOG_TAG_MORE_DETAILS + filename ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = FragmentDebateBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = FragmentFormatChooserBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = FragmentPrepTimeBellsEditBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , @ Nullable ViewGroup container , @ Nullable Bundle savedInstanceState ) { mViewBinding = FragmentSettingsBinding . inflate ( inflater , container , false ) ; return mViewBinding . getRoot ( ) ; }
public void onPageSelected ( int position ) { if ( mDebateManager != null ) { mIsChangingPages = true ; mDebateManager . setActivePhaseIndex ( position ) ; } updateControls ( ) ; }
public int getCount ( ) { if ( mDebateManager == null ) return 0 ; else return mDebateManager . getNumberOfPhases ( ) ; }
public void onClick ( View v ) { DialogFragment fragment = new DialogAddOrEditBellFragment ( ) ; fragment . show ( getChildFragmentManager ( ) , DIALOG_TAG_ADD_BELL ) ; }
public void onClick ( View v ) { DialogFragment fragment = new DialogClearBellsFragment ( ) ; fragment . show ( getChildFragmentManager ( ) , DIALOG_TAG_CLEAR_ALL_BELLS ) ; }
public void wakeUpScreenForPause ( ) { int flags = PowerManager . ACQUIRE_CAUSES_WAKEUP | PowerManager . FULL_WAKE_LOCK | PowerManager . ON_AFTER_RELEASE ; PowerManager . WakeLock temporaryWakeLock = mPowerManager . newWakeLock ( flags , "debatekeeper : pause" ) ; temporaryWakeLock . acquire ( 3000 ) ; }
private void createWakeLock ( ) { if ( mWakeLock != null ) { mWakeLock . release ( ) ; mWakeLock = null ; } mWakeLock = mPowerManager . newWakeLock ( PowerManager . PARTIAL_WAKE_LOCK , "debatekeeper : main" ) ; mWakeLock . setReferenceCounted ( false ) ; }
private void wakeUpScreenForBell ( long wakeTime ) { if ( mActivityActive ) { int flags = PowerManager . ACQUIRE_CAUSES_WAKEUP | PowerManager . FULL_WAKE_LOCK ; PowerManager . WakeLock temporaryWakeLock = mPowerManager . newWakeLock ( flags , "debatekeeper : bell" ) ; temporaryWakeLock . acquire ( wakeTime ) ; } }
public boolean onOptionsItemSelected ( MenuItem item ) { int id = item . getItemId ( ) ; if ( id == R . id . menu_log_level ) { LoggerUtils . showSetLogLevelDialog ( this ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
public void dismissBloggingRemindersAlertIfNeeded ( ) { ViewInteraction bloggingRemindersAlertTitle = onView ( withText ( R . string . set_your_blogging_reminders_title ) ) ; if ( waitForElementToBeDisplayedWithoutFailure ( bloggingRemindersAlertTitle ) ) { bloggingRemindersAlertTitle . perform ( swipeDown ( ) ) ; } }
public ContactSupportScreen setMessageText ( String text ) { populateTextField ( textInput , text ) ; sleep ( ) ; return this ; }
public void showVideoDurationLimitWarning ( @ NonNull String fileName ) { ToastUtils . showToast ( this , R . string . error_media_video_duration_exceeds_limit , ToastUtils . Duration . LONG ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { if ( item . getItemId ( ) == android . R . id . home ) { finish ( ) ; return true ; } return super . onOptionsItemSelected ( item ) ; }
private void showQuickStartSnackbar ( ) { Spannable title = mQuickStartUtilsWrapper . stylizeQuickStartPrompt ( requireContext ( ) , R . string . quick_start_dialog_enable_sharing_message_short_connections ) ; mSnackbarSequencer . enqueue ( new SnackbarItem ( new Info ( mRecycler , new UiStringText ( title ) , Snackbar . LENGTH_LONG ) ) ) ; }
private static Tag getTagFromCursor ( Cursor c ) { final String tag = c . getString ( c . getColumnIndexOrThrow ( "tag" ) ) ; long siteId = c . getLong ( c . getColumnIndexOrThrow ( "site_id" ) ) ; return new Tag ( siteId , tag ) ; }
private void toggleHtmlModeOnMenu ( ) { mHtmlModeMenuStateOn = ! mHtmlModeMenuStateOn ; trackPostSessionEditorModeSwitch ( ) ; invalidateOptionsMenu ( ) ; showEditorModeSwitchedNotice ( ) ; }
public String getSuggestion ( int position ) { Cursor cursor = ( Cursor ) getItem ( position ) ; if ( cursor != null ) { return cursor . getString ( cursor . getColumnIndexOrThrow ( ReaderSearchTable . COL_QUERY ) ) ; } else { return null ; } }
private void showEditorModeSwitchedNotice ( ) { String message = getString ( mHtmlModeMenuStateOn ? R . string . menu_html_mode_switched_notice : R . string . menu_visual_mode_switched_notice ) ; mEditorFragment . showNotice ( message ) ; }
public static void trackBlockEditorEvent ( String event , SiteModel site , Map < String , Object > properties ) { if ( event . equals ( "editor_block_inserted" ) ) { AnalyticsUtils . trackWithSiteDetails ( Stat . EDITOR_BLOCK_INSERTED , site , properties ) ; } }
public void onSendEventToHost ( String eventName , Map < String , Object > properties ) { AnalyticsUtils . trackBlockEditorEvent ( eventName , mSite , properties ) ; }
private void setupBloggingRemindersBottomSheet ( ) { if ( mBloggingRemindersPref == null || ! isAdded ( ) ) { return ; } mBloggingRemindersViewModel . onBlogSettingsItemClicked ( mSite . getId ( ) ) ; }
public void run ( ) { UploadService . sanitizeMediaUploadStateForSite ( mMediaStore , mDispatcher , site ) ; }
private void selectSite ( int localId ) { setResult ( RESULT_OK , new Intent ( ) . putExtra ( SitePickerActivity . KEY_SITE_LOCAL_ID , localId ) ) ; finish ( ) ; }
private void handleNewPostAction ( PagePostCreationSourcesDetail source ) { if ( ! mSiteStore . hasSite ( ) ) { mBottomNav . setCurrentSelectedPage ( PageType . MY_SITE ) ; return ; } ActivityLauncher . addNewPostForResult ( this , getSelectedSite ( ) , false , source ) ; }
public static int getSelectedSite ( ) { return getInt ( DeletablePrefKey . SELECTED_SITE_LOCAL_ID , SELECTED_SITE_UNAVAILABLE ) ; }
public static void showSnackbarError ( View view , String message , SnackbarSequencer sequencer ) { sequencer . enqueue ( new SnackbarItem ( new Info ( view , new UiStringText ( message ) , K_SNACKBAR_WAIT_TIME_MS , true ) , null , null , null ) ) ; }
public static void showSnackbar ( View view , int messageRes , SnackbarSequencer sequencer ) { sequencer . enqueue ( new SnackbarItem ( new Info ( view , new UiStringRes ( messageRes ) , Snackbar . LENGTH_LONG , true ) , null , null , null ) ) ; }
public static void showSnackbar ( View view , String messageText , SnackbarSequencer sequencer ) { sequencer . enqueue ( new SnackbarItem ( new Info ( view , new UiStringText ( messageText ) , Snackbar . LENGTH_LONG , true ) , null , null , null ) ) ; }
public void onViewCreated ( View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; initBloggingReminders ( ) ; }
public static boolean isAccessedViaWPComRest ( @ NonNull SiteModel site ) { return site . getOrigin ( ) == SiteModel . ORIGIN_WPCOM_REST ; }
public void loginWithEmailPassword ( ) { new LoginFlow ( ) . chooseContinueWithWpCom ( ) . enterEmailAddress ( E2E_WP_COM_USER_EMAIL ) . enterPassword ( E2E_WP_COM_USER_PASSWORD ) . confirmLogin ( false ) ; }
public void loginWithSiteAddress ( ) { new LoginFlow ( ) . chooseEnterYourSiteAddress ( ) . enterSiteAddress ( E2E_WP_COM_USER_SITE_ADDRESS ) . enterEmailAddress ( E2E_WP_COM_USER_EMAIL ) . enterPassword ( E2E_WP_COM_USER_PASSWORD ) . confirmLogin ( false ) ; }
public void loginWithSelfHostedAccount ( ) { new LoginFlow ( ) . chooseEnterYourSiteAddress ( ) . enterSiteAddress ( E2E_SELF_HOSTED_USER_SITE_ADDRESS ) . enterUsernameAndPassword ( E2E_SELF_HOSTED_USER_USERNAME , E2E_SELF_HOSTED_USER_PASSWORD ) . confirmLogin ( true ) ; }
public void onDestroy ( ) { AppLog . i ( AppLog . T . NOTIFS , "notifications action processing service > destroyed" ) ; mCommentsStoreAdapter . unregister ( this ) ; super . onDestroy ( ) ; }
public static void showMainActivityAndSiteCreationActivity ( Activity activity ) { final Intent intent = createMainActivityAndSiteCreationActivityIntent ( activity , null ) ; activity . startActivity ( intent ) ; }
private void setComment ( final long commentRemoteId , final int siteLocalId ) { final SiteModel site = mSiteStore . getSiteByLocalId ( siteLocalId ) ; setComment ( mCommentsStoreAdapter . getCommentBySiteAndRemoteId ( site , commentRemoteId ) , site ) ; }
public void onStart ( ) { super . onStart ( ) ; EventBus . getDefault ( ) . register ( this ) ; mCommentsStoreAdapter . register ( this ) ; showComment ( ) ; }
public void onStop ( ) { EventBus . getDefault ( ) . unregister ( this ) ; mCommentsStoreAdapter . unregister ( this ) ; super . onStop ( ) ; }
public void onDestroy ( ) { mCommentsStoreAdapter . unregister ( this ) ; super . onDestroy ( ) ; }
public void onStart ( ) { super . onStart ( ) ; mCommentsStoreAdapter . register ( this ) ; }
public void onStop ( ) { mCommentsStoreAdapter . unregister ( this ) ; super . onStop ( ) ; }
public static void setGutenbergBlockTypeImpressions ( Map < String , Double > newImpressions ) { String json = GSON . toJson ( newImpressions ) ; setString ( UndeletablePrefKey . GUTENBERG_BLOCK_TYPE_IMPRESSIONS , json ) ; }
public static Map < String , Double > getGutenbergBlockTypeImpressions ( ) { String jsonString = getString ( UndeletablePrefKey . GUTENBERG_BLOCK_TYPE_IMPRESSIONS , " [ ] " ) ; Map < String , Double > impressions = GSON . fromJson ( jsonString , Map . class ) ; return impressions ; }
public void onClick ( View v ) { UploadUtils . publishPost ( activity , post , site , dispatcher , onPublishingCallback ) ; }
public AztecVideoLoader ( Context context , Drawable loadingInProgressDrawable ) { ( ( WordPress ) WordPress . getContext ( ) . getApplicationContext ( ) ) . component ( ) . inject ( this ) ; mContext = context ; mLoadingInProgress = loadingInProgressDrawable ; }
public void onEventMainThread ( ProgressEvent event ) { if ( ! isFinishing ( ) ) { float progress = UploadService . getUploadProgressForMedia ( event . media ) ; onUploadProgress ( event . media , progress ) ; } }
public void updateFeaturedImage ( final long mediaId , final boolean imagePicked ) { setFeaturedImageId ( mediaId , imagePicked , true ) ; }
private void moveToStats ( ) { clickOn ( R . id . nav_sites ) ; clickOn ( R . id . quick_action_stats_button ) ; waitForElementToBeDisplayedWithoutFailure ( R . id . image_thumbnail ) ; idleFor ( 8000 ) ; }
public LoginFlow chooseContinueWithWpCom ( ) { clickOn ( R . id . continue_with_wpcom_button ) ; return this ; }
public LoginFlow enterPassword ( String password ) { populateTextField ( R . id . input , password ) ; clickOn ( R . id . bottom_button ) ; return this ; }
public LoginFlow chooseEnterYourSiteAddress ( ) { clickOn ( R . id . enter_your_site_address_button ) ; return this ; }
public LoginFlow enterSiteAddress ( String siteAddress ) { populateTextField ( R . id . input , siteAddress ) ; clickOn ( R . id . bottom_button ) ; return this ; }
public SignupFlow chooseContinueWithWpCom ( ) { clickOn ( R . id . continue_with_wpcom_button ) ; return this ; }
public FormattableContent getHeader ( int headerIndex ) { if ( mHeadersList != null && headerIndex < mHeadersList . size ( ) ) { return mHeadersList . get ( headerIndex ) ; } return null ; }
public void onAddFileClicked ( boolean allowMultipleSelection ) { mMediaPickerLauncher . showFilePicker ( this , allowMultipleSelection , getSite ( ) ) ; }
public void onAddAudioFileClicked ( boolean allowMultipleSelection ) { mMediaPickerLauncher . showAudioFilePicker ( this , allowMultipleSelection , getSite ( ) ) ; }
public void onClick ( View v ) { if ( isFinishing ( ) ) { return ; } mReaderTracker . trackUri ( AnalyticsTracker . Stat . READER_SIGN_IN_INITIATED , mInterceptedUri ) ; ActivityLauncher . loginWithoutMagicLink ( ReaderCommentListActivity . this ) ; }
private void showCommentsClosedMessage ( boolean show ) { TextView txtCommentsClosed = findViewById ( R . id . text_comments_closed ) ; if ( txtCommentsClosed != null ) { txtCommentsClosed . setVisibility ( show ? View . VISIBLE : View . GONE ) ; } }
private void showProgress ( ) { ProgressBar progress = findViewById ( R . id . progress_loading ) ; if ( progress != null ) { progress . setVisibility ( View . VISIBLE ) ; } }
private void hideProgress ( ) { ProgressBar progress = findViewById ( R . id . progress_loading ) ; if ( progress != null ) { progress . setVisibility ( View . GONE ) ; } }
public void onLoadData ( boolean forced ) { if ( forced ) { mReaderTracker . track ( AnalyticsTracker . Stat . READER_PULL_TO_REFRESH ) ; } updatePosts ( forced ) ; }
public void onEventMainThread ( ReaderEvents . DoSignIn event ) { if ( isFinishing ( ) ) { return ; } mReaderTracker . trackUri ( AnalyticsTracker . Stat . READER_SIGN_IN_INITIATED , mInterceptedUri ) ; ActivityLauncher . loginWithoutMagicLink ( this ) ; }
public void onSuccess ( Void result ) { if ( ! isFinishing ( ) ) { followBlogUrl ( blogUrl ) ; } }
private void showProgress ( ) { final ProgressBar progress = findViewById ( R . id . progress_follow ) ; progress . setVisibility ( View . VISIBLE ) ; mEditAdd . setEnabled ( false ) ; mBtnAdd . setEnabled ( false ) ; }
private void hideProgress ( ) { final ProgressBar progress = findViewById ( R . id . progress_follow ) ; progress . setVisibility ( View . GONE ) ; mEditAdd . setEnabled ( true ) ; mBtnAdd . setEnabled ( true ) ; }
public void onResponse ( String response ) { requestListener . onSuccess ( null ) ; }
private void undoPostUnbookmarked ( final ReaderPost post ) { if ( ! post . isBookmarked ) { mOnPostListItemButtonListener . onButtonClicked ( post , ReaderPostCardActionType . BOOKMARK ) ; } }
public void onResult ( ReaderBlog serverBlogInfo ) { if ( isAttachedToWindow ( ) ) { showBlogInfo ( serverBlogInfo , source ) ; } }
public void onClick ( View v ) { toggleFollowStatus ( v , source ) ; }
public static void trackRailcarRender ( String railcarJson ) { if ( TextUtils . isEmpty ( railcarJson ) ) { return ; } AnalyticsTracker . track ( AnalyticsTracker . Stat . TRAIN_TRACKS_RENDER , railcarJsonToProperties ( railcarJson ) ) ; }
public static void trackAnalyticsAccountCreated ( String username , String email , Map < String , Object > properties ) { AnalyticsUtils . refreshMetadataNewUser ( username , email ) ; AnalyticsTracker . track ( AnalyticsTracker . Stat . CREATED_ACCOUNT , properties ) ; }
public static void trackLoginProloguePages ( int page ) { Map < String , Integer > properties = new HashMap <> ( ) ; properties . put ( "page_number" , page ) ; AnalyticsTracker . track ( AnalyticsTracker . Stat . LOGIN_PROLOGUE_PAGED , properties ) ; }
public void handleSiteAddressError ( ConnectSiteInfoPayload siteInfo ) { mViewModel . onHandleSiteAddressError ( siteInfo ) ; }
private void setSettingsSwitchesChecked ( boolean isMainChecked ) { for ( String settingValue : mSettingsValues ) { final SwitchCompat toggleSwitch = mOptionsView . findViewWithTag ( settingValue ) ; if ( toggleSwitch != null ) { toggleSwitch . setChecked ( isMainChecked ) ; } } }
public static void showReaderPostDetail ( Context context , long blogId , long postId ) { showReaderPostDetail ( context , false , blogId , postId , null , 0 , false , null ) ; }
public static void showSignInForResult ( Activity activity ) { showSignInForResult ( activity , false ) ; }
public void clearFeaturedImage ( ) { if ( mEditorFragment instanceof GutenbergEditorFragment ) { ( ( GutenbergEditorFragment ) mEditorFragment ) . sendToJSFeaturedImageId ( 0 ) ; } }
public void sendToJSFeaturedImageId ( int mediaId ) { mWPAndroidGlueCode . sendToJSFeaturedImageId ( mediaId ) ; }
public void onMediaModelCreatedForFile ( String oldId , String newId , String oldUrl ) { mWPAndroidGlueCode . mediaIdChanged ( oldId , newId , oldUrl ) ; }
public int getItemViewType ( int position ) { return ( mMenuItems . get ( position ) . getType ( ) == ReaderPostCardActionType . SPACER_NO_ACTION ) ? TYPE_SPACER : TYPE_CONTENT ; }
private void manageActionButtonsEnabledState ( boolean enable ) { mGenerateLinksButton . setEnabled ( enable ) ; mShareLinksButton . setEnabled ( enable ) ; mLinksRoleTextView . setEnabled ( enable ) ; mDisableLinksButton . setEnabled ( enable ) ; }
public void onStorySaveResult ( String storyFirstMediaId , boolean success ) { if ( ! success ) { mFailedMediaIds . add ( storyFirstMediaId ) ; } mUploadingMediaProgressMax . remove ( storyFirstMediaId ) ; getGutenbergContainerFragment ( ) . onStorySaveResult ( storyFirstMediaId , success ) ; }
public boolean isAudioPicker ( ) { return this == GUTENBERG_SINGLE_FILE_PICKER || this == GUTENBERG_SINGLE_AUDIO_FILE_PICKER ; }
public boolean isGutenbergPicker ( ) { return this == GUTENBERG_IMAGE_PICKER || this == GUTENBERG_SINGLE_IMAGE_PICKER || this == GUTENBERG_VIDEO_PICKER || this == GUTENBERG_SINGLE_VIDEO_PICKER || this == GUTENBERG_SINGLE_MEDIA_PICKER || this == GUTENBERG_MEDIA_PICKER || this == GUTENBERG_SINGLE_FILE_PICKER || this == GUTENBERG_SINGLE_AUDIO_FILE_PICKER ; }
private void showInfoSnackbar ( String text ) { View bottomView = findViewById ( R . id . layout_bottom ) ; Snackbar snackbar = WPSnackbar . make ( bottomView , text , Snackbar . LENGTH_LONG ) ; snackbar . setAnchorView ( bottomView ) ; snackbar . show ( ) ; }
public ArrayList < MediaOption > onGetOtherMediaAudioFileOptions ( ) { return initOtherMediaAudioFileOptions ( ) ; }
public void onPause ( ) { super . onPause ( ) ; if ( mBookmarksSavedLocallyDialog != null ) { mBookmarksSavedLocallyDialog . dismiss ( ) ; } mWasPaused = true ; mViewModel . onFragmentPause ( mIsTopLevel , getPostListType ( ) == ReaderPostListType . SEARCH_RESULTS , isFilterableScreen ( ) ) ; }
private boolean shouldShowEmptyViewForSelfHostedCta ( ) { return isFilterableScreen ( ) && ! mAccountStore . hasAccessToken ( ) && mSubFilterViewModel . getCurrentSubfilterValue ( ) instanceof SiteAll ; }
public CharSequence convertResultToString ( Object resultValue ) { Suggestion suggestion = ( Suggestion ) resultValue ; return suggestion . getValue ( ) ; }
private void trackCommentNote ( @ NotNull Note note ) { if ( note . isCommentType ( ) ) { SiteModel site = mSiteStore . getSiteBySiteId ( note . getSiteId ( ) ) ; AnalyticsUtils . trackCommentActionWithSiteDetails ( Stat . COMMENT_VIEWED , AnalyticsCommentActionSource . NOTIFICATIONS , site ) ; } }
public void clear ( ) { mDispatcher . unregister ( this ) ; }
public LocationAv getLocation ( ) { return location ; }
public void setLocation ( LocationAv location ) { this . location = location ; }
public static List < ConditionEntity > loadDataFromDb ( Context context ) { AppDatabase db = AppDatabase . getAppDatabase ( context ) ; Log . v ( TAG , "Condition data loaded from DB" ) ; return db . conditionDao ( ) . getAll ( ) ; }
public static List < WeatherEntity > getLastData ( Context context ) { AppDatabase db = AppDatabase . getAppDatabase ( context ) ; Log . v ( TAG , "AQI data loaded from DB" ) ; return db . weatherDao ( ) . getLast ( ) ; }
public static List < WeatherEntity > loadDataFromDb ( Context context ) { AppDatabase db = AppDatabase . getAppDatabase ( context ) ; Log . v ( TAG , "AQI data loaded from DB" ) ; return db . weatherDao ( ) . getAll ( ) ; }
public void showFoundWords ( ) { synch . abort ( ) ; saveGamePersistent ( ) ; Intent scoreIntent = createScoreIntent ( ) ; scoreIntent . putExtra ( ScoreActivity . ONLY_FOUND_WORDS , true ) ; startActivity ( scoreIntent ) ; }
private void checkWordCountTap ( MotionEvent event ) { if ( event . getX ( ) >= wordCountPosXLeft && event . getX ( ) <= wordCountPosXRight && event . getY ( ) >= wordCountPosYTop ) { ( ( GameActivity ) getContext ( ) ) . showFoundWords ( ) ; } }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; currentTheme = ThemeManager . getInstance ( ) . applyTheme ( this ) ; load ( ) ; }
private void saveGamePersistent ( ) { if ( game . getStatus ( ) == Game . GameStatus . GAME_RUNNING ) { game . pause ( ) ; game . save ( new GameSaverPersistent ( this ) ) ; } }
private void saveGameTransient ( Bundle state ) { if ( game . getStatus ( ) == Game . GameStatus . GAME_RUNNING ) { game . pause ( ) ; game . save ( new GameSaverTransient ( state ) ) ; } }
private void navigateToHome ( ) { synch . abort ( ) ; saveGamePersistent ( ) ; NavUtils . navigateUpFromSameTask ( this ) ; }
public void onPause ( ) { super . onPause ( ) ; synch . abort ( ) ; saveGamePersistent ( ) ; }
public void initializeDictionary ( Context context ) { initializeDictionary ( context , language ) ; }
public void save ( GameSaver saver ) { saver . save ( board , timeRemainingInMillis , gameMode , language , wordListToString ( ) , wordCount , start , status ) ; }
public void unpause ( ) { status = GameStatus . GAME_RUNNING ; maxTimeSinceResumeInMillis = timeRemainingInMillis ; start = new Date ( ) ; }
public void endNow ( ) { timeRemainingInMillis = 0 ; }
public void bindKeyboardToInputView ( ) { if ( mainKeyboardView != null ) { Keyboard sk = keyboardSwitcher . getCurrentKeyboard ( ) ; mainKeyboardView . setKeyboard ( sk ) ; dispatchCapsStateToInputView ( ) ; } }
public boolean onRimeKey ( int [ ] event ) { updateRimeOption ( ) ; final boolean ret = Rime . onKey ( event ) ; activeEditorInstance . commitRimeText ( ) ; return ret ; }
public Config getImeConfig ( ) { return Config . get ( this ) ; }
public void selectLiquidKeyboard ( @ NonNull String name ) { if ( name . matches ( "\\d + " ) ) selectLiquidKeyboard ( Integer . parseInt ( name ) ) ; else selectLiquidKeyboard ( TabManager . getTagIndex ( name ) ) ; }
private boolean isHighlighted ( int i ) { return candidateUseCursor && i == highlightIndex ; }
public void setText ( int start ) { startNum = start ; removeHighlight ( ) ; updateCandidateWidth ( ) ; if ( updateCandidates ( ) > 0 ) { invalidate ( ) ; } }
public void setShowComment ( boolean value ) { shouldShowComment = value ; }
public void setShowHint ( final boolean value ) { mShowHint = value ; }
public void setPreviewEnabled ( final boolean previewEnabled ) { mShowPreview = previewEnabled ; }
private void setPopupParent ( final View v ) { mPopupParent = v ; }
private void setPopupOffset ( final int x , final int y ) { mMiniKeyboardOffsetX = x ; mMiniKeyboardOffsetY = y ; if ( mPreviewPopup . isShowing ( ) ) { mPreviewPopup . dismiss ( ) ; } }
public void onClick ( final View v ) { dismissPopupKeyboard ( ) ; }
public void onDraw ( final Canvas canvas ) { super . onDraw ( canvas ) ; if ( mDrawPending || mBuffer == null || mKeyboardChanged ) { onBufferDraw ( ) ; } canvas . drawBitmap ( mBuffer , 0 , 0 , null ) ; }
private void detectAndSendKey ( final int index , final int x , final int y , final long eventTime ) { detectAndSendKey ( index , x , y , eventTime , 0 ) ; }
private void showPreview ( final int keyIndex ) { showPreview ( keyIndex , 0 ) ; }
public void invalidateComposingKeys ( ) { final List < Key > keys = mKeyboard . getComposingKeys ( ) ; if ( keys != null && keys . size ( ) > 5 ) invalidateAllKeys ( ) ; else invalidateKeys ( keys ) ; }
public void onEvent ( final Event event ) { mKeyboardActionListener . onEvent ( event ) ; dismissPopupKeyboard ( ) ; }
public void onKey ( final int primaryCode , final int mask ) { mKeyboardActionListener . onKey ( primaryCode , mask ) ; dismissPopupKeyboard ( ) ; }
public void onText ( final CharSequence text ) { mKeyboardActionListener . onText ( text ) ; dismissPopupKeyboard ( ) ; }
public void onPress ( final int primaryCode ) { mKeyboardActionListener . onPress ( primaryCode ) ; }
public void onRelease ( final int primaryCode ) { mKeyboardActionListener . onRelease ( primaryCode ) ; }
private boolean repeatKey ( ) { final Key key = mKeys [ mRepeatKeyIndex ] ; detectAndSendKey ( mCurrentKey , key . getX ( ) , key . getY ( ) , mLastTapTime ) ; return true ; }
public Rime ( Context context , boolean full_check ) { init ( full_check ) ; self = this ; }
public static Rime get ( Context context , boolean full_check ) { if ( self == null ) { if ( full_check ) Config . deployOpencc ( ) ; self = new Rime ( context , full_check ) ; } return self ; }
public static Object getValue ( @ NonNull Map < ? , ? > m , String k , Object o ) { return m . containsKey ( k ) ? m . get ( k ) : o ; }
public void onCreate ( @ NonNull SQLiteDatabase db ) { Timber . i ( "create db" ) ; db . execSQL ( CREATE_STUDENT ) ; }
public static Map < String , Map < String , ? >> getPresetKeys ( ) { return presetKeys ; }
public Map < String , ? > getKeyboard ( String name ) { if ( ! presetKeyboards . containsKey ( name ) ) name = "default" ; return ( Map < String , ? > ) presetKeyboards . get ( name ) ; }
public Map < String , ? > getLiquidKeyboard ( ) { return liquidKeyboard ; }
public String [ ] getClipBoardCompare ( ) { return clipBoardCompare ; }
public String [ ] getClipBoardOutput ( ) { return clipBoardOutput ; }
public void setClipBoardCompare ( String str ) { String s = pattern . matcher ( str ) . replaceAll ( "\n" ) . trim ( ) ; clipBoardCompare = s . split ( "\n" ) ; getPrefs ( ) . getOther ( ) . setClipboardCompareRules ( s ) ; }
public void setClipBoardOutput ( String str ) { String s = pattern . matcher ( str ) . replaceAll ( "\n" ) . trim ( ) ; clipBoardOutput = s . split ( "\n" ) ; getPrefs ( ) . getOther ( ) . setClipboardOutputRules ( s ) ; }
public static String getComposingText ( ) { if ( mContext . commit_text_preview == null ) return "" ; return mContext . commit_text_preview ; }
private static boolean isEmpty ( @ NonNull String s ) { return s . contentEquals ( " . default" ) ; }
public String getPreviewText ( ) { if ( ! TextUtils . isEmpty ( preview ) ) return preview ; return getLabel ( ) ; }
public String getToggle ( ) { if ( ! TextUtils . isEmpty ( toggle ) ) return toggle ; return "ascii_mode" ; }
public void unregisterReceiver ( @ NonNull Context context ) { context . unregisterReceiver ( this ) ; }
public static void hideProgressBar ( BaseProgressIndicator pb ) { pb . setVisibility ( View . GONE ) ; pb . hide ( ) ; }
public long getItemId ( int position ) { Session_MetaSearch . MetaSearchEnginesInfo item = getItem ( position ) ; if ( item == null ) { return - 1 ; } return item . uid . hashCode ( ) ; }
public void tagListReceived ( @ NonNull List < Map < ? , ? >> changedTags ) { updateTags ( ) ; }
public RunnableWithObject ( T o ) { object = o ; }
public static void main ( String [ ] args ) throws IOException { System . setProperty ( "SKIP_SETRB" , "1" ) ; process ( "app/src/coreFlavor/res" ) ; process ( "app/src/main/res . lang" ) ; }
public void onCreate ( ) { super . onCreate ( ) ; AppSettings . Init ( this ) ; FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics . getInstance ( this ) ; }
public GanjoorDbBrowser ( Context context ) { mContext = context ; AppSettings . Init ( context ) ; String dbPath = AppSettings . getDatabasePath ( context ) ; OpenDatabase ( dbPath ) ; }
public GanjoorDbBrowser ( Context context , String dbPath ) { OpenDatabase ( dbPath ) ; }
public void onSaveInstanceState ( @ NotNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( SAVE_TITLE_FOR_BROWSER , currentTitle ) ; outState . putString ( SAVE_URL_FOR_BROWSER , currentUrl ) ; }
public void onComplete ( ) { view . makeUploadRequest ( ) ; repository . cleanup ( ) ; view . returnToMainActivity ( ) ; compositeDisposable . clear ( ) ; }
public void updateListFragment ( final List < Place > placeList ) { places = placeList ; adapter . setItems ( placeList ) ; noResultsView . setVisibility ( placeList . isEmpty ( ) ? View . VISIBLE : View . GONE ) ; }
public static String getWLMEndDate ( ) { return "30 Sep" ; }
public PageContentsCreator ( final Context context ) { this . context = context ; }
private void addPlaceSelectedButton ( ) { placeSelectedButton = findViewById ( R . id . location_chosen_button ) ; placeSelectedButton . setOnClickListener ( view -> placeSelected ( ) ) ; }
public String getThumbUrl ( ) { updateThumbUrl ( ) ; return StringUtils . defaultString ( thumbUrl ) ; }
public void makeUploadRequest ( ) { WorkManager . getInstance ( getApplicationContext ( ) ) . enqueueUniqueWork ( UploadWorker . class . getSimpleName ( ) , ExistingWorkPolicy . APPEND_OR_REPLACE , OneTimeWorkRequest . from ( UploadWorker . class ) ) ; }
private void searchForDepictions ( final String query ) { presenter . searchForDepictions ( query ) ; }
public void onButtonAddDescriptionClicked ( ) { UploadMediaDetail uploadMediaDetail = new UploadMediaDetail ( ) ; uploadMediaDetail . setManuallyAdded ( true ) ; uploadMediaDetailAdapter . addDescription ( uploadMediaDetail ) ; rvDescriptions . smoothScrollToPosition ( uploadMediaDetailAdapter . getItemCount ( ) - 1 ) ; }
private void initiateGalleryUpload ( final Activity activity , final boolean allowMultipleUploads ) { setPickerConfiguration ( activity , allowMultipleUploads ) ; FilePicker . openGallery ( activity , 0 ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; presenter . onDetachView ( ) ; }
public String getString ( final String key ) { return defaultKVStore . getString ( key ) ; }
public long getLong ( final String key ) { return defaultKVStore . getLong ( key ) ; }
public Contribution getContributionWithFileName ( final String uri ) { final List < Contribution > contributionWithUri = contributionDao . getContributionWithTitle ( uri ) ; if ( ! contributionWithUri . isEmpty ( ) ) { return contributionWithUri . get ( 0 ) ; } return null ; }
public Completable deleteContribution ( final Contribution contribution ) { return contributionDao . delete ( contribution ) ; }
public Completable updateContribution ( final Contribution contribution ) { return contributionDao . update ( contribution ) ; }
public void showUploadInfo ( ) { launchAlertWithHelpLink ( getResources ( ) . getString ( R . string . images_uploaded ) , getResources ( ) . getString ( R . string . images_uploaded_explanation ) , IMAGES_UPLOADED_URL ) ; }
public void showRevertedInfo ( ) { launchAlertWithHelpLink ( getResources ( ) . getString ( R . string . image_reverts ) , getResources ( ) . getString ( R . string . images_reverted_explanation ) , IMAGES_REVERT_URL ) ; }
public void showUsedByWikiInfo ( ) { launchAlertWithHelpLink ( getResources ( ) . getString ( R . string . images_used_by_wiki ) , getResources ( ) . getString ( R . string . images_used_explanation ) , IMAGES_USED_URL ) ; }
public void showImagesViaNearbyInfo ( ) { launchAlertWithHelpLink ( getResources ( ) . getString ( R . string . statistics_wikidata_edits ) , getResources ( ) . getString ( R . string . images_via_nearby_explanation ) , IMAGES_NEARBY_PLACES_URL ) ; }
public void showFeaturedImagesInfo ( ) { launchAlertWithHelpLink ( getResources ( ) . getString ( R . string . statistics_featured ) , getResources ( ) . getString ( R . string . images_featured_explanation ) , IMAGES_FEATURED_URL ) ; }
public void showThanksReceivedInfo ( ) { launchAlertWithHelpLink ( getResources ( ) . getString ( R . string . statistics_thanks ) , getResources ( ) . getString ( R . string . thanks_received_explanation ) , THANKS_URL ) ; }
public void showQualityImagesInfo ( ) { launchAlertWithHelpLink ( getResources ( ) . getString ( R . string . statistics_quality ) , getResources ( ) . getString ( R . string . quality_images_info ) , QUALITY_IMAGE_URL ) ; }
private void showMediaDetailPagerFragment ( ) { setupViewForMediaDetails ( ) ; showFragment ( mediaDetailPagerFragment , MEDIA_DETAIL_PAGER_FRAGMENT_TAG , contributionsListFragment ) ; }
private void initFragments ( ) { if ( null == contributionsListFragment ) { contributionsListFragment = new ContributionsListFragment ( ) ; } if ( shouldShowMediaDetailsFragment ) { showMediaDetailPagerFragment ( ) ; } else { showContributionsListFragment ( ) ; } showFragment ( contributionsListFragment , CONTRIBUTION_LIST_FRAGMENT_TAG , mediaDetailPagerFragment ) ; }
public void onExtraKeyButtonClick ( View view , ExtraKeyButton buttonInfo , MaterialButton button ) { if ( mExtraKeysViewClient != null ) mExtraKeysViewClient . onExtraKeyButtonClick ( view , buttonInfo , button ) ; }
public void stopScheduledExecutors ( ) { if ( mScheduledExecutor != null ) { mScheduledExecutor . shutdownNow ( ) ; mScheduledExecutor = null ; } if ( mSpecialButtonsLongHoldRunnable != null && mHandler != null ) { mHandler . removeCallbacks ( mSpecialButtonsLongHoldRunnable ) ; mSpecialButtonsLongHoldRunnable = null ; } }
public void dismissPopup ( ) { mPopupWindow . setContentView ( null ) ; mPopupWindow . dismiss ( ) ; mPopupWindow = null ; }
public void onResume ( ) { loadBellSoundPool ( ) ; }
public static String getFullTag ( String tag ) { if ( DEFAULT_LOG_TAG . equals ( tag ) ) return tag ; else return DEFAULT_LOG_TAG + " . " + tag ; }
private void setSettingsButtonView ( ) { ImageButton settingsButton = findViewById ( R . id . settings_button ) ; settingsButton . setOnClickListener ( v -> { ActivityUtils . startActivity ( this , new Intent ( this , SettingsActivity . class ) ) ; } ) ; }
public static void startTermuxActivity ( @ NonNull final Context context ) { ActivityUtils . startActivity ( context , newInstance ( context ) ) ; }
public static TermuxAppSharedPreferences build ( @ NonNull final Context context , final boolean exitAppOnError ) { Context termuxPackageContext = TermuxUtils . getContextForPackageOrExitApp ( context , TermuxConstants . TERMUX_PACKAGE_NAME , exitAppOnError ) ; if ( termuxPackageContext == null ) return null ; else return new TermuxAppSharedPreferences ( termuxPackageContext ) ; }
public static TermuxFloatAppSharedPreferences build ( @ NonNull final Context context , final boolean exitAppOnError ) { Context termuxFloatPackageContext = TermuxUtils . getContextForPackageOrExitApp ( context , TermuxConstants . TERMUX_FLOAT_PACKAGE_NAME , exitAppOnError ) ; if ( termuxFloatPackageContext == null ) return null ; else return new TermuxFloatAppSharedPreferences ( termuxFloatPackageContext ) ; }
public static TermuxTaskerAppSharedPreferences build ( @ NonNull final Context context , final boolean exitAppOnError ) { Context termuxTaskerPackageContext = TermuxUtils . getContextForPackageOrExitApp ( context , TermuxConstants . TERMUX_TASKER_PACKAGE_NAME , exitAppOnError ) ; if ( termuxTaskerPackageContext == null ) return null ; else return new TermuxTaskerAppSharedPreferences ( termuxTaskerPackageContext ) ; }
private void executeTermuxTaskCommand ( ExecutionCommand executionCommand ) { if ( executionCommand == null ) return ; Logger . logDebug ( LOG_TAG , "Executing background \"" + executionCommand . getCommandIdAndLabelLogString ( ) + "\" TermuxTask command" ) ; AppShell newTermuxTask = createTermuxTask ( executionCommand ) ; }
public void run ( ) { try { appShell . executeInner ( context ) ; } catch ( IllegalThreadStateException | InterruptedException e ) { } }
public static Uri getFileUri ( @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( UriScheme . SCHEME_FILE ) . path ( path ) . build ( ) ; }
public static Uri getFileUri ( @ NonNull String authority , @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( UriScheme . SCHEME_FILE ) . authority ( authority ) . path ( path ) . build ( ) ; }
public static Uri getContentUri ( @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( UriScheme . SCHEME_CONTENT ) . path ( path ) . build ( ) ; }
public static Uri getContentUri ( @ NonNull String authority , @ NonNull String path ) { return new Uri . Builder ( ) . scheme ( UriScheme . SCHEME_CONTENT ) . authority ( authority ) . path ( path ) . build ( ) ; }
public Object getInternalPropertyValueFromValue ( @ NonNull Context context , String key , String value ) { return getInternalTermuxPropertyValueFromValue ( context , key , value ) ; }
public static boolean isAppForPackageADebuggableBuild ( @ NonNull final Context context ) { return isAppForPackageADebuggableBuild ( context . getApplicationInfo ( ) ) ; }
public static boolean isAppForPackageADebuggableBuild ( @ NonNull final ApplicationInfo applicationInfo ) { return ( 0 != ( applicationInfo . flags & ApplicationInfo . FLAG_DEBUGGABLE ) ) ; }
public static boolean isAppInstalledOnExternalStorage ( @ NonNull final Context context ) { return isAppInstalledOnExternalStorage ( context . getApplicationInfo ( ) ) ; }
public static boolean isAppInstalledOnExternalStorage ( @ NonNull final ApplicationInfo applicationInfo ) { return ( 0 != ( applicationInfo . flags & ApplicationInfo . FLAG_EXTERNAL_STORAGE ) ) ; }
public static Integer getVersionCodeForPackage ( @ Nullable final PackageInfo packageInfo ) { return packageInfo != null ? packageInfo . versionCode : null ; }
public static String getVersionNameForPackage ( @ Nullable final PackageInfo packageInfo ) { return packageInfo != null ? packageInfo . versionName : null ; }
public static boolean isCurrentUserThePrimaryUser ( @ NonNull Context context ) { Long userId = getUserIdForPackage ( context ) ; return userId != null && userId == 0 ; }
private void assertUrlsAre ( String text , String . . . urls ) { LinkedHashSet < String > expected = new LinkedHashSet <> ( ) ; Collections . addAll ( expected , urls ) ; Assert . assertEquals ( expected , TermuxUrlUtils . extractUrls ( text ) ) ; }
private void finishSequenceAndLogError ( String error ) { if ( LOG_ESCAPE_SEQUENCES ) Logger . logWarn ( mClient , LOG_TAG , error ) ; finishSequence ( ) ; }
public boolean areHardwareKeyboardShortcutsDisabled ( ) { return ( boolean ) getInternalPropertyValue ( TermuxPropertyConstants . KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS , true ) ; }
private TermuxAPIAppSharedPreferences ( @ NonNull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
private TermuxBootAppSharedPreferences ( @ NonNull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
private TermuxFloatAppSharedPreferences ( @ NonNull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; setFontVariables ( context ) ; }
private TermuxStylingAppSharedPreferences ( @ NonNull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
private TermuxTaskerAppSharedPreferences ( @ NonNull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
private TermuxWidgetAppSharedPreferences ( @ NonNull Context context ) { mContext = context ; mSharedPreferences = getPrivateSharedPreferences ( mContext ) ; mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences ( mContext ) ; }
public String getCurrentSession ( ) { return SharedPreferenceUtils . getString ( mSharedPreferences , TERMUX_APP . KEY_CURRENT_SESSION , null , true ) ; }
public int getLogLevel ( boolean readFromFile ) { if ( readFromFile ) return SharedPreferenceUtils . getInt ( mMultiProcessSharedPreferences , TERMUX_TASKER_APP . KEY_LOG_LEVEL , Logger . DEFAULT_LOG_LEVEL ) ; else return SharedPreferenceUtils . getInt ( mSharedPreferences , TERMUX_TASKER_APP . KEY_LOG_LEVEL , Logger . DEFAULT_LOG_LEVEL ) ; }
public static String getExtraKeysInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNullOrEmpty ( value , TermuxPropertyConstants . DEFAULT_IVALUE_EXTRA_KEYS ) ; }
public String toString ( ) { if ( ! hasExecuted ( ) ) return getExecutionInputLogString ( this , true , true ) ; else { return getExecutionOutputLogString ( this , true , true , true ) ; } }
public static Error deleteRegularFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , false , FileType . REGULAR . getValue ( ) ) ; }
public static Error deleteDirectoryFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , false , FileType . DIRECTORY . getValue ( ) ) ; }
public static Error deleteSymlinkFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , false , FileType . SYMLINK . getValue ( ) ) ; }
public static Error deleteFile ( String label , final String filePath , final boolean ignoreNonExistentFile ) { return deleteFile ( label , filePath , ignoreNonExistentFile , false , FileTypes . FILE_TYPE_NORMAL_FLAGS ) ; }
public static String getPropertyMarkdown ( String label , Object value ) { return MarkdownUtils . getSingleLineMarkdownStringEntry ( label , value , " - " ) ; }
public static void logStackTrace ( Throwable throwable ) { logStackTraceWithMessage ( DEFAULT_LOG_TAG , null , throwable ) ; }
public static void logStackTracesWithMessage ( String tag , String message , List < Throwable > throwablesList ) { Logger . logErrorExtended ( tag , getMessageAndStackTracesString ( message , throwablesList ) ) ; }
public static String [ ] getStackTracesStringArray ( Throwable throwable ) { return getStackTracesStringArray ( Collections . singletonList ( throwable ) ) ; }
public void onDestroy ( ) { Logger . logVerbose ( LOG_TAG , "onDestroy" ) ; TermuxShellUtils . clearTermuxTMPDIR ( true ) ; actionReleaseWakeLock ( false ) ; if ( ! mWantsToStop ) killAllTermuxExecutionCommands ( ) ; runStopForeground ( ) ; }
public static int getTerminalTranscriptRowsInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNotInRange ( TermuxPropertyConstants . KEY_TERMINAL_TRANSCRIPT_ROWS , DataUtils . getIntFromString ( value , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_TRANSCRIPT_ROWS ) , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_TRANSCRIPT_ROWS , TermuxPropertyConstants . IVALUE_TERMINAL_TRANSCRIPT_ROWS_MIN , TermuxPropertyConstants . IVALUE_TERMINAL_TRANSCRIPT_ROWS_MAX , true , true , LOG_TAG ) ; }
public void onStop ( ) { setCurrentStoredSession ( ) ; releaseBellSoundPool ( ) ; }
public float getTerminalToolbarHeightScaleFactor ( ) { return ( float ) getInternalPropertyValue ( TermuxPropertyConstants . KEY_TERMINAL_TOOLBAR_HEIGHT_SCALE_FACTOR , true ) ; }
public static synchronized TermuxPreferencesDataStore getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new TermuxPreferencesDataStore ( context ) ; } return mInstance ; }
public static synchronized DebuggingPreferencesDataStore getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new DebuggingPreferencesDataStore ( context ) ; } return mInstance ; }
public static synchronized TerminalIOPreferencesDataStore getInstance ( Context context ) { if ( mInstance == null ) { mInstance = new TerminalIOPreferencesDataStore ( context ) ; } return mInstance ; }
public boolean toogleShowTerminalToolbar ( ) { boolean currentValue = shouldShowTerminalToolbar ( ) ; setShowTerminalToolbar ( ! currentValue ) ; return ! currentValue ; }
public boolean onUnbind ( Intent intent ) { Logger . logVerbose ( LOG_TAG , "onUnbind" ) ; if ( mTermuxTerminalSessionClient != null ) unsetTermuxTerminalSessionClient ( ) ; return false ; }
public boolean onItemLongClick ( AdapterView < ? > parent , View view , int position , long id ) { final TermuxSession selectedSession = getItem ( position ) ; mActivity . getTermuxTerminalSessionClient ( ) . renameSession ( selectedSession . getTerminalSession ( ) ) ; return true ; }
private void actionStopService ( ) { mWantsToStop = true ; killAllTermuxExecutionCommands ( ) ; requestStopService ( ) ; }
private void runStartForeground ( ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . O ) { setupNotificationChannel ( ) ; startForeground ( TermuxConstants . TERMUX_RUN_COMMAND_NOTIFICATION_ID , buildNotification ( ) ) ; } }
private void runStartForeground ( ) { setupNotificationChannel ( ) ; startForeground ( TermuxConstants . TERMUX_APP_NOTIFICATION_ID , buildNotification ( ) ) ; }
public String getSessionActionLogString ( ) { return Logger . getSingleLineLogStringEntry ( "Session Action" , sessionAction , " - " ) ; }
public String getCommandDescriptionLogString ( ) { return Logger . getSingleLineLogStringEntry ( "Command Description" , commandDescription , " - " ) ; }
public String getCommandHelpLogString ( ) { return Logger . getSingleLineLogStringEntry ( "Command Help" , commandHelp , " - " ) ; }
public String getPluginAPIHelpLogString ( ) { return Logger . getSingleLineLogStringEntry ( "Plugin API Help" , pluginAPIHelp , " - " ) ; }
public TermuxSessionsListViewController ( TermuxActivity activity , List < TermuxSession > sessionList ) { super ( activity . getApplicationContext ( ) , R . layout . item_terminal_sessions_list , sessionList ) ; this . mActivity = activity ; }
public TermuxAppSharedPreferences getPreferences ( ) { return mPreferences ; }
public void titleChanged ( String oldTitle , String newTitle ) { mClient . onTitleChanged ( this ) ; }
public void onBell ( ) { mClient . onBell ( this ) ; }
public void onColorsChanged ( ) { mClient . onColorsChanged ( this ) ; }
public void setTerminalViewClient ( TerminalViewClient client ) { this . mClient = client ; }
public boolean onScale ( float focusX , float focusY , float scale ) { if ( mEmulator == null || isSelectingText ( ) ) return true ; mScaleFactor * = scale ; mScaleFactor = mClient . onScale ( mScaleFactor ) ; return true ; }
public boolean onDoubleTap ( MotionEvent event ) { return false ; }
public int getCursorX ( float x ) { return ( int ) ( x / mRenderer . mFontWidth ) ; }
public int getCursorY ( float y ) { return ( int ) ( ( ( y - 40 ) / mRenderer . mFontLineSpacing ) + mTopRow ) ; }
public int getPointX ( int cx ) { if ( cx > mEmulator . mColumns ) { cx = mEmulator . mColumns ; } return Math . round ( cx * mRenderer . mFontWidth ) ; }
public int getPointY ( int cy ) { return Math . round ( ( cy - mTopRow ) * mRenderer . mFontLineSpacing ) ; }
private void showFloatingToolbar ( ) { if ( getTextSelectionActionMode ( ) != null ) { int delay = ViewConfiguration . getDoubleTapTimeout ( ) ; postDelayed ( mShowFloatingToolbar , delay ) ; } }
public Step < ? > getStepInstance ( ) { return step ; }
public Builder setup ( StepperFormListener stepperFormListener , Step < ? > . . . steps ) { return new Builder ( this , stepperFormListener , steps ) ; }
public synchronized Step < ? > getOpenStep ( ) { StepHelper openStepHelper = getOpenStepHelper ( ) ; return openStepHelper != null ? openStepHelper . getStepInstance ( ) : null ; }
private void goBackIfPossible ( ) { if ( binding . stepperForm . isAnyStepCompleted ( ) ) { showCloseConfirmationDialog ( ) ; } else { goBack ( null ) ; } }
public void onClick ( DialogInterface dialogInterface , int which ) { switch ( which ) { case DialogInterface . BUTTON_POSITIVE : goBack ( null ) ; break ; case DialogInterface . BUTTON_NEGATIVE : binding . stepperForm . cancelFormCompletionOrCancellationAttempt ( ) ; break ; } }
public static String formatLocationResultString ( Location location ) { return formatLocationResultString ( new org . odk . collect . location . Location ( location . getLatitude ( ) , location . getLongitude ( ) , location . getAltitude ( ) , location . getAccuracy ( ) ) ) ; }
public void removeForm ( String formLabel ) { forms . removeIf ( xFormItem -> xFormItem . getFormLabel ( ) . equals ( formLabel ) ) ; }
public < D extends Page < D >> D clickOnAdd ( D destination ) { return clickOnButtonInDialog ( R . string . add_repeat , destination ) ; }
public < D extends Page < D >> D clickOnDoNotAdd ( D destination ) { return clickOnButtonInDialog ( R . string . dont_add_repeat , destination ) ; }
public FormEntryPage clickOk ( ) { clickOKOnDialog ( ) ; return new FormEntryPage ( formName ) . assertOnPage ( ) ; }
public FormEntryPage assertOnPage ( ) { WaitFor . waitFor ( ( Callable < Void > ) ( ) -> { assertTextDoesNotExist ( R . string . loading_form ) ; return null ; } ) ; assertToolbarTitle ( formName ) ; return this ; }
public FormEndPage swipeToEndScreen ( ) { flingLeft ( ) ; return WaitFor . waitFor ( ( ) -> new FormEndPage ( formName ) . assertOnPage ( ) ) ; }
public FormEntryPage swipeToNextQuestionWithConstraintViolation ( String constraintText ) { flingLeft ( ) ; assertConstraintDisplayed ( constraintText ) ; return this ; }
public TextView getLabelTextView ( ) { return textLabel ; }
public ImageView getImageView ( ) { return binding . imageView ; }
public TextView getMissingImage ( ) { return binding . missingImage ; }
public Button getVideoButton ( ) { return binding . videoButton ; }
public Button getAudioButton ( ) { return binding . audioButton ; }
public void setEnabled ( boolean enabled ) { textLabel . setEnabled ( enabled ) ; binding . imageView . setEnabled ( enabled ) ; }
public boolean isEnabled ( ) { return textLabel . isEnabled ( ) && binding . imageView . isEnabled ( ) ; }
private void checkForInvalidFormHashes ( List < FormListItem > formList ) { for ( FormListItem item : formList ) { if ( item . getHash ( ) == null ) { AnalyticsUtils . logInvalidFormHash ( serverURL ) ; break ; } } }
public static void logInvalidFormHash ( String url ) { Analytics . log ( INVALID_FORM_HASH , "host" , getHostFromUrl ( url ) ) ; }
private void saveSelectedSortingOrder ( int selectedStringOrder ) { selectedSortingOrder = selectedStringOrder ; settingsProvider . getUnprotectedSettings ( ) . save ( getSortingOrderKey ( ) , selectedStringOrder ) ; }
public void onSaveChangesClicked ( ) { saveForm ( true , InstancesDaoHelper . isInstanceComplete ( false , settingsProvider . getUnprotectedSettings ( ) . getBoolean ( KEY_COMPLETED_DEFAULT ) ) , null , true ) ; }
public Locale getLocale ( ) { return new Locale ( LocaleHelper . getLocaleCode ( settingsProvider . getUnprotectedSettings ( ) ) ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new QRCodeViewModel ( qrCodeGenerator , appConfigurationGenerator , settingsProvider . getUnprotectedSettings ( ) , settingsProvider . getProtectedSettings ( ) , scheduler ) ; }
private void logServerEvent ( String projectId , String event ) { AnalyticsUtils . logServerEvent ( event , settingsProvider . getUnprotectedSettings ( projectId ) ) ; }
public void selectAccount ( String accountName ) { if ( accountName != null ) { settingsProvider . getUnprotectedSettings ( ) . save ( ProjectKeys . KEY_SELECTED_GOOGLE_ACCOUNT , accountName ) ; accountPicker . setSelectedAccountName ( accountName ) ; } }
public AdminPasswordProvider providesAdminPasswordProvider ( SettingsProvider settingsProvider ) { return new AdminPasswordProvider ( settingsProvider . getProtectedSettings ( ) ) ; }
public SettingsStore providesGeneralSettingsStore ( SettingsProvider settingsProvider ) { return new SettingsStore ( settingsProvider . getUnprotectedSettings ( ) ) ; }
public SettingsStore providesAdminSettingsStore ( SettingsProvider settingsProvider ) { return new SettingsStore ( settingsProvider . getProtectedSettings ( ) ) ; }
public SplashScreenViewModel . Factory providesSplashScreenViewModel ( SettingsProvider settingsProvider , ProjectsRepository projectsRepository ) { return new SplashScreenViewModel . Factory ( settingsProvider . getUnprotectedSettings ( ) , projectsRepository ) ; }
private boolean isBackgroundLocationEnabled ( ) { return DaggerUtils . getComponent ( Collect . getInstance ( ) ) . settingsProvider ( ) . getUnprotectedSettings ( ) . getBoolean ( KEY_BACKGROUND_LOCATION ) ; }
public static Settings getSharedPrefs ( ) { return DaggerUtils . getComponent ( Collect . getInstance ( ) ) . settingsProvider ( ) . getUnprotectedSettings ( ) ; }
public void onResume ( ) { super . onResume ( ) ; settingsProvider . getProtectedSettings ( ) . registerOnSettingChangeListener ( this ) ; }
public void onPause ( ) { super . onPause ( ) ; settingsProvider . getProtectedSettings ( ) . unregisterOnSettingChangeListener ( this ) ; }
public void onSettingChanged ( @ NotNull String key ) { settingsChangeHandler . onSettingChanged ( currentProjectProvider . getCurrentProject ( ) . getUuid ( ) , settingsProvider . getProtectedSettings ( ) . getAll ( ) . get ( key ) , key ) ; }
public void onResume ( ) { super . onResume ( ) ; settingsProvider . getUnprotectedSettings ( ) . registerOnSettingChangeListener ( this ) ; }
public void onPause ( ) { super . onPause ( ) ; settingsProvider . getUnprotectedSettings ( ) . unregisterOnSettingChangeListener ( this ) ; }
public void onSettingChanged ( @ NotNull String key ) { settingsChangeHandler . onSettingChanged ( currentProjectProvider . getCurrentProject ( ) . getUuid ( ) , settingsProvider . getUnprotectedSettings ( ) . getAll ( ) . get ( key ) , key ) ; }
private void onMovingBackwardsEnabled ( ) { settingsProvider . getProtectedSettings ( ) . save ( ALLOW_OTHER_WAYS_OF_EDITING_FORM , true ) ; findPreference ( KEY_JUMP_TO ) . setEnabled ( true ) ; findPreference ( KEY_SAVE_MID ) . setEnabled ( true ) ; }
public void setSplashPath ( String path ) { settingsProvider . getUnprotectedSettings ( ) . save ( KEY_SPLASH_PATH , path ) ; Preference splashPathPreference = findPreference ( KEY_SPLASH_PATH ) ; splashPathPreference . setSummary ( path ) ; }
private String getPrefsTheme ( ) { return settingsProvider . getUnprotectedSettings ( ) . getString ( ProjectKeys . KEY_APP_THEME ) ; }
public void setup ( ) { CollectHelpers . setupDemoProject ( ) ; adminSettings = TestSettingsProvider . getProtectedSettings ( ) ; adminSettings . clear ( ) ; adminSettings . setDefaultForAllSettingsWithoutValues ( ) ; }
public void setup ( ) { httpInterface = mock ( OpenRosaHttpInterface . class ) ; openRosaXMLFetcher = new OpenRosaXmlFetcher ( httpInterface , new WebCredentialsUtils ( TestSettingsProvider . getUnprotectedSettings ( ) ) ) ; }
public void whenFontSizeSpecified_shouldReturnSelectedValue ( ) { TestSettingsProvider . getUnprotectedSettings ( ) . save ( KEY_FONT_SIZE , "30" ) ; assertThat ( QuestionFontSizeUtils . getQuestionFontSize ( ) , is ( 30 ) ) ; }
public void whenFontSizeChanged_CustomFontSizeShouldBeUsed ( ) { settingsProvider . getUnprotectedSettings ( ) . save ( KEY_FONT_SIZE , "30" ) ; assertThat ( ( int ) getWidget ( ) . binding . launchExternalAppButton . getTextSize ( ) , is ( 29 ) ) ; }
public static List < File > getMediaFiles ( @ NonNull Form form ) { String formMediaPath = form . getFormMediaPath ( ) ; return formMediaPath == null ? new ArrayList <> ( ) : FileUtils . listFiles ( new File ( formMediaPath ) ) ; }
public void setup ( ) { activity = createThemedActivity ( WidgetTestActivity . class ) ; }
public void setup ( ) { FragmentActivity activity = CollectHelpers . createThemedActivity ( WidgetTestActivity . class ) ; fragmentManager = activity . getSupportFragmentManager ( ) ; }
public void setUp ( ) { widgetActivity = CollectHelpers . buildThemedActivity ( WidgetTestActivity . class ) . get ( ) ; widgetUtils = mock ( DateTimeWidgetUtils . class ) ; currentTimeZone = TimeZone . getDefault ( ) ; }
public ExDecimalWidget createWidget ( ) { return new ExDecimalWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) , stringRequester ) ; }
public ExIntegerWidget createWidget ( ) { return new ExIntegerWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) , stringRequester ) ; }
public ExStringWidget createWidget ( ) { return new ExStringWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) , stringRequester ) ; }
public static WidgetTestActivity widgetTestActivity ( ) { return CollectHelpers . buildThemedActivity ( WidgetTestActivity . class ) . get ( ) ; }
public void assertConstraintDisplayed ( String constraintText ) { if ( Build . VERSION . SDK_INT < 30 ) { checkIsToastWithMessageDisplayed ( constraintText ) ; } else { new OkDialog ( ) . assertOnPage ( ) . assertText ( constraintText ) . clickOK ( this ) ; } }
public ProjectsRepository providesProjectsRepository ( ) { return applicationComponent . projectsRepository ( ) ; }
public int getColorOnSurface ( ) { return getThemeAttributeValue ( context , R . attr . colorOnSurface ) ; }
public int getAccentColor ( ) { return getThemeAttributeValue ( context , R . attr . colorAccent ) ; }
public int getIconColor ( ) { return getThemeAttributeValue ( context , R . attr . colorOnSurface ) ; }
public int getColorPrimary ( ) { return getThemeAttributeValue ( context , R . attr . colorPrimary ) ; }
public int getColorOnPrimary ( ) { return getThemeAttributeValue ( context , R . attr . colorOnPrimary ) ; }
public int getColorSecondary ( ) { return getThemeAttributeValue ( context , R . attr . colorSecondary ) ; }
public int getColorError ( ) { return getThemeAttributeValue ( context , R . attr . colorError ) ; }
public int getColorPrimaryDark ( ) { return getThemeAttributeValue ( context , R . attr . colorPrimaryDark ) ; }
public void when_rotateScreenOnAboutPage_should_notCrash ( ) { rule . startAtMainMenu ( ) . openProjectSettingsDialog ( ) . clickAbout ( ) . rotateToLandscape ( new AboutPage ( ) ) . assertOnPage ( ) . scrollToOpenSourceLibrariesLicenses ( ) ; }
public void when_OpenSourcesLibrariesLicenses_should_openSourceLicensesTitleBeDisplayed ( ) { rule . startAtMainMenu ( ) . openProjectSettingsDialog ( ) . clickAbout ( ) . clickOnOpenSourceLibrariesLicenses ( ) ; }
public void typeOption_ShouldNotBeVisible ( ) { new MainMenuPage ( ) . openProjectSettingsDialog ( ) . clickSettings ( ) . clickAccessControl ( ) . openUserSettings ( ) . assertTextDoesNotExist ( "Type" ) . assertTextDoesNotExist ( "Submission transport" ) . assertText ( R . string . server_settings_title ) ; }
public MainMenuPage enableManualUpdates ( ) { return openProjectSettingsDialog ( ) . clickSettings ( ) . clickFormManagement ( ) . clickUpdateForms ( ) . clickOption ( R . string . manual ) . pressBack ( new ProjectSettingsPage ( ) ) . pressBack ( new MainMenuPage ( ) ) ; }
public MainMenuPage enableMatchExactly ( ) { return openProjectSettingsDialog ( ) . clickSettings ( ) . clickFormManagement ( ) . clickUpdateForms ( ) . clickOption ( R . string . match_exactly ) . pressBack ( new ProjectSettingsPage ( ) ) . pressBack ( new MainMenuPage ( ) ) ; }
public MainMenuPage addAndSwitchToProject ( String serverUrl ) { return openProjectSettingsDialog ( ) . clickAddProject ( ) . switchToManualMode ( ) . inputUrl ( serverUrl ) . addProject ( ) ; }
public AudioWidget createWidget ( FormEntryPrompt prompt ) { return new AudioWidget ( widgetActivity , new QuestionDetails ( prompt ) , questionMediaManager , audioPlayer , recordingRequester , audioFileRequester , recordingRequester ) ; }
public AudioWidget createWidget ( FormEntryPrompt prompt , boolean readOnlyOverride ) { return new AudioWidget ( widgetActivity , new QuestionDetails ( prompt , readOnlyOverride ) , questionMediaManager , audioPlayer , recordingRequester , audioFileRequester , recordingRequester ) ; }
public BarcodeWidget createWidget ( FormEntryPrompt prompt ) { return new BarcodeWidget ( widgetTestActivity , new QuestionDetails ( prompt ) , waitingForDataRegistry , cameraUtils ) ; }
private BearingWidget createWidget ( FormEntryPrompt prompt ) { return new BearingWidget ( widgetActivity , new QuestionDetails ( prompt ) , fakeWaitingForDataRegistry , sensorManager ) ; }
private DateTimeWidget createWidget ( FormEntryPrompt prompt ) { return new DateTimeWidget ( widgetActivity , new QuestionDetails ( prompt ) , widgetUtils ) ; }
private DateWidget createWidget ( FormEntryPrompt prompt ) { return new DateWidget ( widgetActivity , new QuestionDetails ( prompt ) , widgetUtils ) ; }
public DecimalWidget createWidget ( ) { return new DecimalWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) ) ; }
public ExPrinterWidget createWidget ( ) { return new ExPrinterWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) ) ; }
private GeoPointMapWidget createWidget ( FormEntryPrompt prompt ) { return new GeoPointMapWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) , waitingForDataRegistry , geoDataRequester ) ; }
private GeoPointWidget createWidget ( FormEntryPrompt prompt ) { return new GeoPointWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) , waitingForDataRegistry , geoDataRequester ) ; }
private GeoShapeWidget createWidget ( FormEntryPrompt prompt ) { return new GeoShapeWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) , waitingForDataRegistry , geoDataRequester ) ; }
private GeoTraceWidget createWidget ( FormEntryPrompt prompt ) { return new GeoTraceWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) , waitingForDataRegistry , mapConfigurator , geoDataRequester ) ; }
public IntegerWidget createWidget ( ) { return new IntegerWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) ) ; }
private RangeDecimalWidget createWidget ( FormEntryPrompt prompt ) { return new RangeDecimalWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) ) ; }
private RangeIntegerWidget createWidget ( FormEntryPrompt prompt ) { return new RangeIntegerWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) ) ; }
private RangePickerDecimalWidget createWidget ( FormEntryPrompt prompt ) { return new RangePickerDecimalWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) ) ; }
private RangePickerIntegerWidget createWidget ( FormEntryPrompt prompt ) { return new RangePickerIntegerWidget ( widgetActivity , new QuestionDetails ( prompt ) ) ; }
private RatingWidget createWidget ( FormEntryPrompt prompt ) { return new RatingWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) ) ; }
public StringNumberWidget createWidget ( ) { return new StringNumberWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) ) ; }
public StringWidget createWidget ( ) { return new StringWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) ) ; }
private TimeWidget createWidget ( FormEntryPrompt prompt ) { return new TimeWidget ( widgetActivity , new QuestionDetails ( prompt ) , widgetUtils ) ; }
private TriggerWidget createWidget ( FormEntryPrompt prompt ) { return new TriggerWidget ( widgetTestActivity ( ) , new QuestionDetails ( prompt ) ) ; }
private UrlWidget createWidget ( FormEntryPrompt prompt ) { return new UrlWidget ( spyActivity , new QuestionDetails ( prompt ) , externalWebPageHelper ) ; }
public LikertWidget createWidget ( ) { return new LikertWidget ( activity , new QuestionDetails ( formEntryPrompt ) ) ; }
public ListMultiWidget createWidget ( ) { return new ListMultiWidget ( activity , new QuestionDetails ( formEntryPrompt ) , true ) ; }
public ListWidget createWidget ( ) { return new ListWidget ( activity , new QuestionDetails ( formEntryPrompt ) , false , false ) ; }
public RankingWidget createWidget ( ) { return new RankingWidget ( activity , new QuestionDetails ( formEntryPrompt ) ) ; }
public SelectMultiImageMapWidget createWidget ( ) { return new SelectMultiImageMapWidget ( activity , new QuestionDetails ( formEntryPrompt ) ) ; }
public SelectMultiMinimalWidget createWidget ( ) { return new SelectMultiMinimalWidget ( activity , new QuestionDetails ( formEntryPrompt ) , new FakeWaitingForDataRegistry ( ) ) ; }
public SelectMultiWidget createWidget ( ) { SelectMultiWidget selectMultiWidget = new SelectMultiWidget ( activity , new QuestionDetails ( formEntryPrompt ) ) ; selectMultiWidget . setFocus ( activity ) ; return selectMultiWidget ; }
public SelectOneImageMapWidget createWidget ( ) { return new SelectOneImageMapWidget ( activity , new QuestionDetails ( formEntryPrompt ) , false ) ; }
public SelectOneMinimalWidget createWidget ( ) { return new SelectOneMinimalWidget ( activity , new QuestionDetails ( formEntryPrompt ) , false , new FakeWaitingForDataRegistry ( ) ) ; }
public void onClick ( DialogInterface dialog , int which ) { super . onClick ( dialog , which ) ; listView = null ; if ( getDialog ( ) != null ) { getDialog ( ) . dismiss ( ) ; } }
public void onDestroy ( ) { super . onDestroy ( ) ; listView = null ; if ( getDialog ( ) != null ) { getDialog ( ) . dismiss ( ) ; } }
public Location getLastLocation ( ) { if ( ! googleApiClient . isConnected ( ) ) { googleApiClient . blockingConnect ( ) ; } return LocationUtils . sanitizeAccuracy ( fusedLocationProviderApi . getLastLocation ( googleApiClient ) , retainMockAccuracy ) ; }
public void onLocationChanged ( Location location ) { Timber . i ( "Location changed : %s" , location . toString ( ) ) ; if ( locationListener != null ) { locationListener . onLocationChanged ( LocationUtils . sanitizeAccuracy ( location , retainMockAccuracy ) ) ; } }
public FormsDownloadResultPage clickGetSelected ( ) { onView ( withText ( getTranslatedString ( R . string . download ) ) ) . perform ( click ( ) ) ; return new FormsDownloadResultPage ( ) . assertOnPage ( ) ; }
private void copyToStorage ( String formName ) throws IOException { AdbFormLoadingUtils . copyFormToDemoProject ( formName ) ; }
public void onSavePointError ( String errorMessage ) { if ( errorMessage != null && errorMessage . trim ( ) . length ( ) > 0 ) { showLongToast ( this , getString ( R . string . save_point_error , errorMessage ) ) ; } }
public void onSaveFormIndexError ( String errorMessage ) { if ( errorMessage != null && errorMessage . trim ( ) . length ( ) > 0 ) { showLongToast ( this , getString ( R . string . save_point_error , errorMessage ) ) ; } }
private String getChoiceText ( int index ) { SelectChoice selectChoice = filteredItems . get ( index ) ; return HtmlUtils . textToHtml ( prompt . getSelectChoiceText ( selectChoice ) ) . toString ( ) ; }
private void clear ( View view ) { if ( view . getVisibility ( ) == View . VISIBLE ) { fabActions . performClick ( ) ; reset ( ) ; } }
private void close ( View view ) { if ( view . getVisibility ( ) == View . VISIBLE ) { fabActions . performClick ( ) ; saveAndClose ( ) ; } }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new FormEntryViewModel ( clock ) ; }
public void onConfigureFailed ( @ NonNull CameraCaptureSession session ) { Activity activity = getActivity ( ) ; if ( null != activity ) { ToastUtils . showShortToast ( getActivity ( ) , "Failed" ) ; } }
public void run ( ) { isRecordingVideo = true ; mediaRecorder . start ( ) ; ToastUtils . showLongToast ( getActivity ( ) , getActivity ( ) . getString ( R . string . stop_video_capture_instruction ) ) ; }
public void onConfigureFailed ( @ NonNull CameraCaptureSession cameraCaptureSession ) { Activity activity = getActivity ( ) ; if ( null != activity ) { ToastUtils . showShortToast ( getActivity ( ) , "Failed" ) ; } }
public void showUnavailableMessage ( Context context ) { ToastUtils . showLongToast ( context , context . getString ( R . string . basemap_source_unavailable , context . getString ( sourceLabelId ) ) ) ; }
private String getFormListURL ( ) { String downloadListUrl = serverURL ; while ( downloadListUrl . endsWith ( "/" ) ) { downloadListUrl = downloadListUrl . substring ( 0 , downloadListUrl . length ( ) - 1 ) ; } downloadListUrl += OpenRosaConstants . FORM_LIST ; return downloadListUrl ; }
public void clearAnswer ( ) { ToastUtils . showShortToast ( getContext ( ) , "URL is readonly" ) ; }
public InputStream fetchForm ( String formURL ) { isCancelled = true ; return new ByteArrayInputStream ( xform . getBytes ( ) ) ; }
public List < FormListItem > fetchFormList ( ) { throw new UnsupportedOperationException ( ) ; }
public ManifestFile fetchManifest ( String manifestURL ) { throw new UnsupportedOperationException ( ) ; }
public InputStream fetchMediaFile ( String mediaFileURL ) { throw new UnsupportedOperationException ( ) ; }
public InputStream fetchForm ( String formURL ) { return new ByteArrayInputStream ( xform . getBytes ( ) ) ; }
public InputStream fetchMediaFile ( String mediaFileURL ) { isCancelled = true ; return new ByteArrayInputStream ( "contents" . getBytes ( ) ) ; }
public static < T extends FragmentActivity > T createThemedActivity ( Class < T > clazz ) { return RobolectricHelpers . createThemedActivity ( clazz , R . style . Theme_MaterialComponents ) ; }
public void setup ( ) throws Exception { ReferenceManager referenceManager = setupFakeReferenceManager ( REFERENCES ) ; autoplayer = new PromptAutoplayer ( audioHelper , referenceManager ) ; }
private void saveAsPolyline ( ) { if ( map . getPolyPoints ( featureId ) . size ( ) > 1 ) { finishWithResult ( ) ; } else { ToastUtils . showShortToastInMiddle ( this , getString ( R . string . polyline_validator ) ) ; } }
public void textToHtml_nullBecomesEmptyString ( ) { CharSequence observed = HtmlUtils . textToHtml ( null ) ; assertThat ( observed , equalTo ( "" ) ) ; }
public void textToHtml_shouldBeTrimmed ( ) { CharSequence observed = HtmlUtils . textToHtml ( " < p style = \"text - align : center\" > Text < /p > " ) ; assertThat ( observed . toString ( ) , equalTo ( "Text" ) ) ; }
public void textToHtml_SupportsEscapedLt ( ) { String [ ] tests = { " < 1" , } ; for ( String testCase : tests ) { assertEquals ( testCase , HtmlUtils . textToHtml ( testCase ) . toString ( ) ) ; } }
private Uri getUriWithAnalyticsParam ( Uri uri ) { return uri . buildUpon ( ) . appendQueryParameter ( INTERNAL_QUERY_PARAM , "true" ) . build ( ) ; }
public boolean shouldEditSavedFormButtonBeVisible ( ) { return adminSettings . getBoolean ( ProtectedProjectKeys . KEY_EDIT_SAVED ) ; }
public boolean shouldSendFinalizedFormButtonBeVisible ( ) { return adminSettings . getBoolean ( ProtectedProjectKeys . KEY_SEND_FINALIZED ) ; }
public boolean shouldViewSentFormButtonBeVisible ( ) { return adminSettings . getBoolean ( ProtectedProjectKeys . KEY_VIEW_SENT ) ; }
public boolean shouldGetBlankFormButtonBeVisible ( ) { boolean buttonEnabled = adminSettings . getBoolean ( ProtectedProjectKeys . KEY_GET_BLANK ) ; return ! isMatchExactlyEnabled ( ) && buttonEnabled ; }
public boolean shouldDeleteSavedFormButtonBeVisible ( ) { return adminSettings . getBoolean ( ProtectedProjectKeys . KEY_DELETE_SAVED ) ; }
public void saveCredentialsPreferences ( String userName , String password , PropertyManager propertyManager ) { generalSettings . save ( ProjectKeys . KEY_USERNAME , userName ) ; generalSettings . save ( ProjectKeys . KEY_PASSWORD , password ) ; propertyManager . reload ( ) ; }
public String getServerUrlFromPreferences ( ) { return generalSettings . getString ( ProjectKeys . KEY_SERVER_URL ) ; }
public String getPasswordFromPreferences ( ) { return generalSettings . getString ( ProjectKeys . KEY_PASSWORD ) ; }
public String getUserNameFromPreferences ( ) { return generalSettings . getString ( ProjectKeys . KEY_USERNAME ) ; }
public void whenChangedKeyIsFormUpdateMode_schedulesUpdates ( ) { handler . onSettingChanged ( "projectId" , "anything" , ProjectKeys . KEY_FORM_UPDATE_MODE ) ; verify ( formUpdateScheduler ) . scheduleUpdates ( "projectId" ) ; }
public void whenChangedKeyIsPeriodicUpdatesCheck_schedulesUpdates ( ) { handler . onSettingChanged ( "projectId" , "anything" , ProjectKeys . KEY_PERIODIC_FORM_UPDATES_CHECK ) ; verify ( formUpdateScheduler ) . scheduleUpdates ( "projectId" ) ; }
public void whenChangedKeyIsProtocol_schedulesUpdates ( ) { handler . onSettingChanged ( "projectId" , "anything" , ProjectKeys . KEY_PROTOCOL ) ; verify ( formUpdateScheduler ) . scheduleUpdates ( "projectId" ) ; }
private void stubSavedAccount ( String accountName ) { when ( generalSettings . getString ( ProjectKeys . KEY_SELECTED_GOOGLE_ACCOUNT ) ) . thenReturn ( accountName ) ; stubAccount ( accountName ) ; }
public void onCreateOptionsMenu ( MenuInflater menuInflater , Menu menu ) { menuInflater . inflate ( R . menu . qr_code_scan_menu , menu ) ; }
public void forSelectPhoto_whenDataIsNull_doesNothing ( ) { QRCodeActivityResultDelegate delegate = new QRCodeActivityResultDelegate ( context , settingsImporter , fakeQRDecoder , project ) ; delegate . onActivityResult ( SELECT_PHOTO , Activity . RESULT_OK , null ) ; }
public void forSelectPhoto_whenResultCancelled_doesNothing ( ) { QRCodeActivityResultDelegate delegate = new QRCodeActivityResultDelegate ( context , settingsImporter , fakeQRDecoder , project ) ; delegate . onActivityResult ( SELECT_PHOTO , Activity . RESULT_CANCELED , new Intent ( ) ) ; }
public void finishSync_updatesFormsContentObserver ( ) { SyncStatusAppState syncStatusAppState = new SyncStatusAppState ( context ) ; syncStatusAppState . startSync ( "projectId" ) ; syncStatusAppState . finishSync ( "projectId" , null ) ; verify ( contentResolver ) . notifyChange ( FormsContract . getUri ( "projectId" ) , null ) ; }
private void initialize ( ) { if ( test ) { setVisibility ( View . INVISIBLE ) ; } }
public MaxAccuracyWithinTimeoutLocationClientWrapper ( LocationClient locationClient , LocationListener listener ) { this . locationClient = locationClient ; this . locationClient . setPriority ( DEFAULT_PRIORITY ) ; this . listener = listener ; this . timerHandler = new Handler ( Looper . getMainLooper ( ) ) ; }
public void onLocationChanged ( Location location ) { Timber . i ( "Location changed : %s" , location . toString ( ) ) ; if ( locationListener != null ) { locationListener . onLocationChanged ( sanitizeLocation ( location ) ) ; } }
public ProjectSettingsPage clickGeneralSettings ( ) { onView ( withText ( getTranslatedString ( R . string . project_settings ) ) ) . perform ( click ( ) ) ; return new ProjectSettingsPage ( ) . assertOnPage ( ) ; }
public ProjectSettingsPage assertOnPage ( ) { assertText ( R . string . project_settings ) ; return this ; }
public ProjectSettingsPage openFormManagement ( ) { clickOnString ( R . string . form_management_preferences ) ; return this ; }
public ProjectSettingsPage openConstraintProcessing ( ) { scrollToRecyclerViewItemAndClickText ( getTranslatedString ( R . string . constraint_behavior_title ) ) ; return this ; }
public ProjectSettingsPage openShowGuidanceForQuestions ( ) { scrollToRecyclerViewItemAndClickText ( getTranslatedString ( R . string . guidance_hint_title ) ) ; return this ; }
public ProjectSettingsPage checkIfServerOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . server_settings_title ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public ProjectSettingsPage checkIfUserInterfaceOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . client ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public ProjectSettingsPage checkIfMapsOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . maps ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public ProjectSettingsPage checkIfFormManagementOptionIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . form_management_preferences ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public ProjectSettingsPage checkIfUserAndDeviceIdentityIsDisplayed ( ) { onView ( withText ( getTranslatedString ( R . string . user_and_device_identity_title ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public ProjectSettingsPage scrollToConstraintProcessing ( ) { onView ( withId ( R . id . recycler_view ) ) . perform ( RecyclerViewActions . actionOnItem ( hasDescendant ( withText ( getTranslatedString ( R . string . constraint_behavior_title ) ) ) , scrollTo ( ) ) ) ; return this ; }
public ProjectSettingsPage checkIfConstraintProcessingIsDisabled ( ) { onView ( withText ( getTranslatedString ( R . string . constraint_behavior_title ) ) ) . check ( matches ( not ( isEnabled ( ) ) ) ) ; return this ; }
public ProjectSettingsPage clickOnAutoSend ( ) { clickOnString ( R . string . autosend_selector_title ) ; return this ; }
public ProjectSettingsPage clickOnDefaultToFinalized ( ) { scrollToRecyclerViewItemAndClickText ( getTranslatedString ( R . string . default_completed ) ) ; return this ; }
public ProjectSettingsPage checkIfServerOptionIsNotDisplayed ( ) { onView ( withText ( "Server" ) ) . check ( doesNotExist ( ) ) ; return this ; }
public ProjectSettingsPage setAdminPassword ( String password ) { scrollToRecyclerViewItemAndClickText ( R . string . set_admin_password ) ; inputText ( password ) ; clickOKOnDialog ( ) ; return this ; }
private void createPreferencesMenu ( ) { Intent i = new Intent ( this , ProjectPreferencesActivity . class ) ; startActivity ( i ) ; }
public void onAttach ( @ NotNull Context context ) { super . onAttach ( context ) ; DaggerUtils . getComponent ( context ) . inject ( this ) ; ( ( ProjectPreferencesActivity ) context ) . setOnBackPressedListener ( this ) ; }
private void continueOnBackPressed ( ) { ( ( ProjectPreferencesActivity ) getActivity ( ) ) . setOnBackPressedListener ( null ) ; getActivity ( ) . onBackPressed ( ) ; }
public ProjectDisplayPage clickProjectDisplay ( ) { scrollToRecyclerViewItemAndClickText ( R . string . project_display_title ) ; return new ProjectDisplayPage ( ) . assertOnPage ( ) ; }
public ProjectManagementPage clickProjectManagement ( ) { scrollToRecyclerViewItemAndClickText ( R . string . project_management_section_title ) ; return new ProjectManagementPage ( ) . assertOnPage ( ) ; }
public QRCodePage assertOnPage ( ) { assertText ( R . string . reconfigure_with_qr_code_settings_title ) ; return this ; }
public void onDetach ( ) { preferences = null ; instances = null ; forms = null ; layers = null ; cache = null ; super . onDetach ( ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new BlankFormsListViewModel ( application , scheduler , syncRepository , settingsProvider , analytics , formsUpdater , currentProjectProvider , formsRepositoryProvider ) ; }
private List < Form > queryForForms ( String selection , String [ ] selectionArgs ) { try ( Cursor cursor = queryAndReturnCursor ( null , null , selection , selectionArgs , null , null ) ) { return getFormsFromCursor ( cursor , formsPath , cachePath ) ; } }
public void ignoreChanges_whenFormControllerNotSet_doesNothing ( ) { FormSaveViewModel viewModel = new FormSaveViewModel ( savedStateHandle , ( ) -> CURRENT_TIME , formSaver , mediaUtils , null , scheduler , mock ( AudioRecorder . class ) , currentProjectProvider ) ; viewModel . ignoreChanges ( ) ; }
public LiveData < Boolean > isSyncing ( ) { return syncRepository . isSyncing ( getProjectId ( ) ) ; }
public LiveData < Boolean > isOutOfSync ( ) { return Transformations . map ( syncRepository . getSyncError ( getProjectId ( ) ) , Objects : : nonNull ) ; }
public void getSyncError_isNullAtFirst ( ) { SyncStatusAppState syncStatusAppState = new SyncStatusAppState ( context ) ; assertThat ( syncStatusAppState . getSyncError ( "projectId" ) . getValue ( ) , is ( nullValue ( ) ) ) ; }
public void onLoadFinished ( @ NonNull Loader < Cursor > loader , Cursor cursor ) { hideProgressBarAndAllow ( ) ; listAdapter . swapCursor ( cursor ) ; }
public void onLoadFinished ( @ NonNull Loader < Cursor > loader , Cursor cursor ) { hideProgressBarAndAllow ( ) ; listAdapter . changeCursor ( cursor ) ; checkPreviouslyCheckedItems ( ) ; toggleButtonLabel ( findViewById ( R . id . toggle_button ) , listView ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new MainMenuViewModel ( application , versionInformation , settingsProvider , instancesAppState , scheduler ) ; }
public SettingsProvider providesSettingsProvider ( Context context ) { return new SharedPreferencesSettingsProvider ( context ) ; }
public void refreshInstances ( ) { scheduler . immediate ( ( ) -> { new InstanceDiskSynchronizer ( settingsProvider ) . doInBackground ( ) ; instancesAppState . update ( ) ; return null ; } , ignored -> { } ) ; }
public boolean isBeta ( ) { return versionDescriptionProvider . getVersionDescription ( ) . contains ( "beta" ) ; }
public String generateQRCode ( Collection < String > selectedPasswordKeys , AppConfigurationGenerator appConfigurationGenerator ) { return getQRCodeFilePath ( ) ; }
public GoogleAccountPicker providesGoogleAccountPicker ( Context context ) { return new GoogleAccountCredentialGoogleAccountPicker ( GoogleAccountCredential . usingOAuth2 ( context , singletonList ( DriveScopes . DRIVE ) ) . setBackOff ( new ExponentialBackOff ( ) ) ) ; }
public void warning_whenNeitherServerOrAdminPasswordSet_isNull ( ) { QRCodeViewModel viewModel = new QRCodeViewModel ( qrCodeGenerator , appConfigurationGenerator , generalSettings , adminSettings , fakeScheduler ) ; assertThat ( viewModel . getWarning ( ) . getValue ( ) , is ( nullValue ( ) ) ) ; }
public void cancelSubmit ( String projectId ) { scheduler . cancelDeferred ( getAutoSendTag ( projectId ) ) ; }
public void cancelUpdates ( String projectId ) { scheduler . cancelDeferred ( getAutoUpdateTag ( projectId ) ) ; scheduler . cancelDeferred ( getMatchExactlyTag ( projectId ) ) ; }
public void updatesPropertyManager ( ) { handler . onSettingChanged ( "projectId" , "anything" , "blah" ) ; verify ( propertyManager ) . reload ( ) ; }
public MainMenuPage assertProjectIcon ( String projectIcon ) { onView ( allOf ( hasDescendant ( withText ( projectIcon ) ) , withId ( R . id . projects ) ) ) . check ( matches ( isDisplayed ( ) ) ) ; return this ; }
public Form getOneByPath ( String path ) { String selection = FORM_FILE_PATH + " = ?" ; String [ ] selectionArgs = { getRelativeFilePath ( formsPath , path ) } ; return queryForForm ( selection , selectionArgs ) ; }
private Long insertForm ( ContentValues values ) { SQLiteDatabase writeableDatabase = databaseConnection . getWriteableDatabase ( ) ; return writeableDatabase . insertOrThrow ( FORMS_TABLE_NAME , null , values ) ; }
private void updateForm ( Long id , ContentValues values ) { SQLiteDatabase writeableDatabase = databaseConnection . getWriteableDatabase ( ) ; writeableDatabase . update ( FORMS_TABLE_NAME , values , _ID + " = ?" , new String [ ] { String . valueOf ( id ) } ) ; }
public List < Instance > getAll ( ) { try ( Cursor cursor = query ( null , null , null , null ) ) { return getInstancesFromCursor ( cursor , instancesPath ) ; } }
public List < Instance > getAllNotDeleted ( ) { try ( Cursor cursor = query ( null , DELETED_DATE + " IS NULL " , null , null ) ) { return getInstancesFromCursor ( cursor , instancesPath ) ; } }
public List < Instance > getAllByStatus ( String . . . status ) { try ( Cursor instancesCursor = getCursorForAllByStatus ( status ) ) { return getInstancesFromCursor ( instancesCursor , instancesPath ) ; } }
public List < Instance > getAllByFormId ( String formId ) { try ( Cursor c = query ( null , JR_FORM_ID + " = ?" , new String [ ] { formId } , null ) ) { return getInstancesFromCursor ( c , instancesPath ) ; }
public void deleteAll ( ) { List < Instance > instances = getAll ( ) ; databaseConnection . getWriteableDatabase ( ) . delete ( INSTANCES_TABLE_NAME , null , null ) ; for ( Instance instance : instances ) { deleteInstanceFiles ( instance ) ; } }
private long insert ( ContentValues values ) { return databaseConnection . getWriteableDatabase ( ) . insertOrThrow ( INSTANCES_TABLE_NAME , null , values ) ; }
private void update ( Long instanceId , ContentValues values ) { databaseConnection . getWriteableDatabase ( ) . update ( INSTANCES_TABLE_NAME , values , _ID + " = ?" , new String [ ] { instanceId . toString ( ) } ) ; }
public FormUpdateScheduler providesFormUpdateManger ( Scheduler scheduler , SettingsProvider settingsProvider , Application application ) { return new FormUpdateAndInstanceSubmitScheduler ( scheduler , settingsProvider , application ) ; }
public InstanceSubmitScheduler providesFormSubmitManager ( Scheduler scheduler , SettingsProvider settingsProvider , Application application ) { return new FormUpdateAndInstanceSubmitScheduler ( scheduler , settingsProvider , application ) ; }
public FormsRepositoryProvider providesFormsRepositoryProvider ( Application application ) { return new FormsRepositoryProvider ( application ) ; }
public RuleChain copyFormChain = TestRuleChain . chain ( ) . around ( rule ) ; @ Test public void whenManualUpdatesEnabled_getBlankFormsIsAvailable ( ) { rule . startAtMainMenu ( ) . enableManualUpdates ( ) . assertText ( R . string . get_forms ) ; }
public void whenManualUpdatesEnabled_getBlankFormsIsAvailable ( ) { rule . startAtMainMenu ( ) . enableManualUpdates ( ) . assertText ( R . string . get_forms ) ; }
public void whenManualUpdatesEnabled_fillBlankFormRefreshButtonIsGone ( ) { rule . startAtMainMenu ( ) . enableManualUpdates ( ) . clickFillBlankForm ( ) ; onView ( withId ( R . id . menu_refresh ) ) . check ( doesNotExist ( ) ) ; }
public void user_ShouldBeAbleToFillTheForm ( ) { rule . startAtMainMenu ( ) . copyForm ( "metadata2 . xml" ) . clickFillBlankForm ( ) . clickOnEmptyForm ( "metadata2" ) . clickSaveAndExit ( ) . checkIsToastWithMessageDisplayed ( R . string . data_saved_ok ) ; }
public void rankingWidget_shouldDisplayItemsFromSearchFunc ( ) { new FormEntryPage ( "ranking_widget" ) . clickRankingButton ( ) . assertText ( "Mango" , "Oranges" , "Strawberries" ) ; }
public OpenSourceLicensesPage clickOnOpenSourceLibrariesLicenses ( ) { onView ( withText ( R . string . all_open_source_licenses ) ) . perform ( click ( ) ) ; return new OpenSourceLicensesPage ( ) ; }
public MainMenuPage clickSave ( ) { clickOnString ( R . string . save ) ; return new MainMenuPage ( ) . assertOnPage ( ) ; }
public DeleteSelectedDialog clickDeleteSelected ( int numberSelected ) { clickOnString ( R . string . delete_file ) ; return new DeleteSelectedDialog ( numberSelected , this ) . assertOnPage ( ) ; }
public IdentifyUserPromptPage clickOnFormWithIdentityPrompt ( String formName ) { scrollToAndClickOnForm ( formName ) ; return new IdentifyUserPromptPage ( formName ) . assertOnPage ( ) ; }
public IdentifyUserPromptPage clickOnFormWithIdentityPrompt ( String formName ) { clickOnFormButton ( formName ) ; return new IdentifyUserPromptPage ( formName ) . assertOnPage ( ) ; }
public BlankFormSearchPage searchInBar ( String query ) { onView ( withId ( R . id . search_src_text ) ) . perform ( replaceText ( query ) ) ; return new BlankFormSearchPage ( ) . assertOnPage ( ) ; }
public FormEntryPage clickOnForm ( String formName ) { clickOnFormButton ( formName ) ; return new FormEntryPage ( formName ) ; }
public FormEndPage clickOnEmptyForm ( String formName ) { clickOnFormButton ( formName ) ; return new FormEndPage ( formName ) . assertOnPage ( ) ; }
public ServerAuthDialog clickRefreshWithAuthError ( ) { onView ( withId ( R . id . menu_refresh ) ) . perform ( click ( ) ) ; return new ServerAuthDialog ( ) . assertOnPage ( ) ; }
public FormHierarchyPage clickGoToArrow ( ) { onView ( withId ( R . id . menu_goto ) ) . perform ( click ( ) ) ; return new FormHierarchyPage ( formName ) ; }
public FormEntryPage swipeToPreviousQuestion ( String questionText ) { return new FormEntryPage ( formName ) . swipeToPreviousQuestion ( questionText ) ; }
public FormEntryPage swipeToPreviousQuestion ( String questionText , boolean isRequired ) { return new FormEntryPage ( formName ) . swipeToPreviousQuestion ( questionText , isRequired ) ; }
public ErrorDialog swipeToNextQuestionWithError ( ) { flingLeft ( ) ; return new ErrorDialog ( ) . assertOnPage ( ) ; }
public FormHierarchyPage clickGoToArrow ( ) { onView ( withId ( R . id . menu_goto ) ) . perform ( click ( ) ) ; return new FormHierarchyPage ( formName ) . assertOnPage ( ) ; }
public FormEndPage clickForwardButtonToEndScreen ( ) { onView ( withText ( getTranslatedString ( R . string . form_forward ) ) ) . perform ( click ( ) ) ; return new FormEndPage ( formName ) . assertOnPage ( ) ; }
public AddNewRepeatDialog clickPlus ( String repeatName ) { onView ( withId ( R . id . menu_add_repeat ) ) . perform ( click ( ) ) ; return new AddNewRepeatDialog ( repeatName ) . assertOnPage ( ) ; }
public FormEntryPage clickGoToStart ( ) { onView ( withId ( R . id . jumpBeginningButton ) ) . perform ( click ( ) ) ; return new FormEntryPage ( formName ) . assertOnPage ( ) ; }
public FormEntryPage addGroup ( ) { onView ( withId ( R . id . menu_add_repeat ) ) . perform ( click ( ) ) ; return new FormEntryPage ( formName ) . assertOnPage ( ) ; }
public FormEndPage clickJumpEndButton ( ) { onView ( withId ( R . id . jumpEndButton ) ) . perform ( click ( ) ) ; return new FormEndPage ( formName ) . assertOnPage ( ) ; }
public ListPreferenceDialog < FormManagementPage > clickUpdateForms ( ) { clickOnString ( R . string . form_update_mode_title ) ; return new ListPreferenceDialog <> ( R . string . form_update_mode_title , this ) . assertOnPage ( ) ; }
public IdentifyUserPromptPage ( String formName ) { super ( ) ; this . formName = formName ; }
public FormEntryPage clickKeyboardEnter ( ) { onView ( withHint ( getTranslatedString ( R . string . identity ) ) ) . perform ( pressImeActionButton ( ) ) ; return new FormEntryPage ( formName ) . assertOnPage ( ) ; }
public MainMenuPage pressClose ( ) { onView ( withContentDescription ( getTranslatedString ( R . string . close ) ) ) . perform ( click ( ) ) ; return new MainMenuPage ( ) . assertOnPage ( ) ; }
public FormEntryPage startBlankForm ( String formName ) { goToBlankForm ( formName ) ; return new FormEntryPage ( formName ) . assertOnPage ( ) ; }
public AddNewRepeatDialog startBlankFormWithRepeatGroup ( String formName , String repeatName ) { goToBlankForm ( formName ) ; return new AddNewRepeatDialog ( repeatName ) . assertOnPage ( ) ; }
public ErrorDialog startBlankFormWithError ( String formName ) { goToBlankForm ( formName ) ; return new ErrorDialog ( ) . assertOnPage ( ) ; }
public OkDialog startBlankFormWithDialog ( String formName ) { goToBlankForm ( formName ) ; return new OkDialog ( ) . assertOnPage ( ) ; }
public FillBlankFormPage clickFillBlankForm ( ) { onView ( withId ( R . id . enter_data ) ) . perform ( click ( ) ) ; return new FillBlankFormPage ( ) . assertOnPage ( ) ; }
public EditSavedFormPage clickEditSavedForm ( ) { onView ( withId ( R . id . review_data ) ) . perform ( click ( ) ) ; return new EditSavedFormPage ( ) . assertOnPage ( ) ; }
public GetBlankFormPage clickGetBlankForm ( ) { onView ( withText ( getTranslatedString ( R . string . get_forms ) ) ) . perform ( scrollTo ( ) , click ( ) ) ; return new GetBlankFormPage ( ) . assertOnPage ( ) ; }
public SendFinalizedFormPage clickSendFinalizedForm ( int formCount ) { onView ( withText ( getTranslatedString ( R . string . send_data_button , formCount ) ) ) . perform ( click ( ) ) ; return new SendFinalizedFormPage ( ) ; }
public ServerAuthDialog clickGetBlankFormWithAuthenticationError ( ) { onView ( withText ( getTranslatedString ( R . string . get_forms ) ) ) . perform ( scrollTo ( ) , click ( ) ) ; return new ServerAuthDialog ( ) . assertOnPage ( ) ; }
public OkDialog clickGetBlankFormWithError ( ) { onView ( withText ( getTranslatedString ( R . string . get_forms ) ) ) . perform ( scrollTo ( ) , click ( ) ) ; return new OkDialog ( ) . assertOnPage ( ) ; }
public FormMetadataPage clickFormMetadata ( ) { clickOnString ( R . string . form_metadata ) ; return new FormMetadataPage ( ) ; }
public FormHierarchyPage clickOnForm ( String formName ) { onData ( withRowString ( DatabaseFormColumns . DISPLAY_NAME , formName ) ) . perform ( click ( ) ) ; return new FormHierarchyPage ( formName ) ; }
public void setup ( ) { CollectHelpers . overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public QRCodeDecoder providesQRCodeDecoder ( ) { return fakeQRDecoder ; } } ) ; context = Robolectric . buildActivity ( Activity . class ) . get ( ) ; }
public void setup ( ) { CollectHelpers . overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public PermissionsProvider providesPermissionsProvider ( PermissionsChecker permissionsChecker ) { return permissionsProvider ; } @ Override public DeviceDetailsProvider providesDeviceDetailsProvider ( Context context , InstallIDProvider installIDProvider ) { return deviceDetailsProvider ; } } ) ; }
public static void overrideReferenceManager ( ReferenceManager referenceManager ) { overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public ReferenceManager providesReferenceManager ( ) { return referenceManager ; } } ) ; }
private void overrideDependencyModule ( ) throws Exception { ReferenceManager referenceManager = setupFakeReferenceManager ( asList ( new Pair <> ( "jr : ) ) ; CollectHelpers . overrideAppDependencyModule ( new AppDependencyModule ( ) { @ Override public ReferenceManager providesReferenceManager ( ) { return referenceManager ; } } ) ; }
public Object createBinaryData ( @ NotNull StringData answerData ) { when ( file . exists ( ) ) . thenReturn ( true ) ; when ( file . getName ( ) ) . thenReturn ( answerData . getDisplayText ( ) ) ; return file ; }
private void clickOnFormButton ( String formName ) { assertFormExists ( formName ) ; onData ( withRowString ( DatabaseFormColumns . DISPLAY_NAME , formName ) ) . perform ( click ( ) ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new FormDownloadListViewModel ( ) ; }
private boolean isMatchExactlyEnabled ( ) { return SettingsUtils . getFormUpdateMode ( application , generalSettings ) == FormUpdateMode . MATCH_EXACTLY ; }
public void appendFileSignatureSource ( File file ) { String md5Hash = Md5 . getMd5Hash ( file ) ; appendElementSignatureSource ( file . getName ( ) + " : : " + md5Hash ) ; }
private static File getCacheFile ( File formXml ) { return new File ( new StoragePathProvider ( ) . getOdkDirPath ( StorageSubdirectory . CACHE ) + File . separator + Md5 . getMd5Hash ( formXml ) + " . formdef" ) ; }
public void whenPromptHasAnswer_answerTextViewShowsCorrectAnswer ( ) { GeoPointMapWidget widget = createWidget ( promptWithAnswer ( answer ) ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) , GeoWidgetUtils . getGeoPointAnswerToDisplay ( widget . getContext ( ) , answer . getDisplayText ( ) ) ) ; }
public void answerTextViewShouldShowCorrectAnswer ( ) { GeoPointWidget widget = createWidget ( promptWithAnswer ( answer ) ) ; assertEquals ( widget . binding . geoAnswerText . getText ( ) , GeoWidgetUtils . getGeoPointAnswerToDisplay ( widget . getContext ( ) , answer . getDisplayText ( ) ) ) ; }
public Analytics providesAnalytics ( Application application ) { return analytics ; }
public void setUp ( ) { spyActivity = spy ( widgetTestActivity ( ) ) ; externalWebPageHelper = mock ( ExternalWebPageHelper . class ) ; listener = mock ( OnLongClickListener . class ) ; }
public void getAnswerToDisplay_whenAnswerIsNull_returnsEmptyString ( ) { assertEquals ( GeoWidgetUtils . getGeoPointAnswerToDisplay ( context , null ) , "" ) ; }
public void getAnswerToDisplay_whenAnswerIsNotConvertible_returnsEmptyString ( ) { assertEquals ( GeoWidgetUtils . getGeoPointAnswerToDisplay ( context , "blah" ) , "" ) ; }
public File getAnswerFile ( String fileName ) { File result ; if ( currentFile == null ) { result = super . getAnswerFile ( fileName ) ; } else { result = fileName . equals ( DrawWidgetTest . USER_SPECIFIED_IMAGE_ANSWER ) ? currentFile : null ; } return result ; }
public CursorLoader createSavedInstancesCursorLoader ( String sortOrder ) { String selection = DatabaseInstanceColumns . DELETED_DATE + " IS NULL " ; return getInstancesCursorLoader ( selection , null , sortOrder ) ; }
public File getAnswerFile ( String fileName ) { File result ; if ( currentFile == null ) { result = super . getAnswerFile ( fileName ) ; } else { result = fileName . equals ( USER_SPECIFIED_IMAGE_ANSWER ) ? currentFile : null ; } return result ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { getPreferenceManager ( ) . setPreferenceDataStore ( adminSettingsStore ) ; }
private int getBestPipSize ( int availableWidth ) { if ( dpFromPx ( getContext ( ) , availableWidth ) >= 164 ) { return pxFromDp ( getContext ( ) , 24 ) ; } else { return pxFromDp ( getContext ( ) , 20 ) ; } }
public VolumeBar ( @ NonNull Context context ) { super ( context ) ; init ( context ) ; }
public VolumeBar ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( context ) ; }
public VolumeBar ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context ) ; }
public NonNullLiveData < Boolean > isBackgroundRecordingEnabled ( ) { return isBackgroundRecordingEnabled ; }
public NonNullLiveData < Boolean > hasBackgroundRecording ( ) { return hasBackgroundRecording ; }
public void setup ( ) { when ( formEntryViewModel . hasBackgroundRecording ( ) ) . thenReturn ( new MutableNonNullLiveData <> ( false ) ) ; provider = new AudioRecorderRecordingStatusHandler ( audioRecorder , formEntryViewModel , new FakeLifecycleOwner ( ) ) ; }
private String getQRCodeFilepath ( ) { return new StoragePathProvider ( ) . getOdkDirPath ( StorageSubdirectory . SETTINGS ) + File . separator + "collect - settings . png" ; }
private String getMd5CachePath ( ) { return new StoragePathProvider ( ) . getOdkDirPath ( StorageSubdirectory . SETTINGS ) + File . separator + SETTINGS_MD5_FILE ; }
public static File getFormIndexFile ( String instanceName ) { File tempDir = new File ( new StoragePathProvider ( ) . getOdkDirPath ( StorageSubdirectory . CACHE ) ) ; return new File ( tempDir , instanceName + " . index" ) ; }
public PermissionsProvider providesPermissionsProvider ( PermissionsChecker permissionsChecker ) { return fakePermissionsProvider ; }
public Waveform ( @ NotNull Context context ) { super ( context ) ; init ( context , null ) ; }
public Waveform ( @ NotNull Context context , @ NotNull AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; }
public Waveform ( @ NotNull Context context , @ NotNull AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; }
public boolean isNewSpreadsheet ( String spreadsheetId , String mainSheetTitle ) throws IOException { List < List < Object >> sheetCells = getSheetCells ( spreadsheetId , StringUtils . ellipsizeBeginning ( mainSheetTitle ) ) ; return sheetCells == null || sheetCells . isEmpty ( ) ; }
public LiveData < FormError > getError ( ) { return error ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) backgroundAudioViewModel ; }
public void widgetValueChanged ( QuestionWidget changedWidget ) { if ( audioRecorder . isRecording ( ) ) { formEntryViewModel . logFormEvent ( AnalyticsEvents . ANSWER_WHILE_RECORDING ) ; } if ( widgetValueChangedListener != null ) { widgetValueChangedListener . widgetValueChanged ( changedWidget ) ; } }
public void clearAnswer ( ) { binding . arbitraryFileAnswerText . setVisibility ( GONE ) ; deleteFile ( ) ; widgetValueChanged ( ) ; }
public void settingANewAnswerShouldCallDeleteMediaToRemoveTheOldFile ( ) { super . settingANewAnswerShouldRemoveTheOldAnswer ( ) ; W widget = getSpyWidget ( ) ; verify ( widget ) . deleteFile ( ) ; }
public void deleteFile ( ) { questionMediaManager . deleteAnswerFile ( getFormEntryPrompt ( ) . getIndex ( ) . toString ( ) , answerFile . getAbsolutePath ( ) ) ; answerFile = null ; hideAnswerText ( ) ; }
private QuestionWidget configureWidgetForQuestion ( FormEntryPrompt question ) { QuestionWidget qw = widgetFactory . createWidgetFromPrompt ( question , permissionsProvider ) ; qw . setOnLongClickListener ( this ) ; qw . setValueChangedListener ( this ) ; return qw ; }
private boolean appearanceDoesNotShowControls ( String appearance ) { return appearance . startsWith ( Appearances . MINIMAL ) || appearance . startsWith ( Appearances . COMPACT ) || appearance . contains ( NO_BUTTONS ) ; }
private boolean frontCameraUsed ( ) { Bundle bundle = getActivity ( ) . getIntent ( ) . getExtras ( ) ; return bundle != null && bundle . getBoolean ( Appearances . FRONT ) ; }
private void hideButtonsIfNeeded ( String appearance ) { if ( selfie || ( ( appearance != null && appearance . toLowerCase ( Locale . ENGLISH ) . contains ( Appearances . NEW ) ) ) ) { chooseButton . setVisibility ( View . GONE ) ; } }
public void setFocus ( Context context ) { if ( Appearances . isAutocomplete ( getQuestionDetails ( ) . getPrompt ( ) ) && ! questionDetails . isReadOnly ( ) ) { softKeyboardController . showSoftKeyboard ( binding . choicesSearchBox ) ; } }
private void clickChoice ( int index ) { if ( Appearances . isNoButtonsAppearance ( formEntryPrompt ) ) { clickNoButtonChoice ( index ) ; } else { clickButtonChoice ( index ) ; } }
private boolean isItemSelected ( int index ) { return Appearances . isNoButtonsAppearance ( formEntryPrompt ) ? isNoButtonItemSelected ( index ) : isButtonItemSelected ( index ) ; }
public BinaryWidgetTest ( ) { permissionsProvider = new FakePermissionsProvider ( ) ; }
private void clickChoice ( SelectOneWidget widget , int index ) { if ( Appearances . isNoButtonsAppearance ( formEntryPrompt ) ) { clickNoButtonChoice ( widget , index ) ; } else { clickButtonChoice ( widget , index ) ; } }
private boolean isQuick ( ) { return Appearances . getSanitizedAppearanceHint ( formEntryPrompt ) . contains ( "quick" ) ; }
public void onAddRepeatClicked ( ) { swipeHandler . setBeenSwiped ( false ) ; shownAlertDialogIsGroupRepeat = false ; formEntryViewModel . addRepeat ( ) ; formIndexAnimationHandler . handle ( formEntryViewModel . getCurrentIndex ( ) ) ; }
private void focusAnswer ( ) { softKeyboardController . showSoftKeyboard ( answerText ) ; }
public void setFocus ( Context context ) { softKeyboardController . hideSoftKeyboard ( this ) ; }
public void addRepeat_stepsToNextScreenEvent ( ) throws Exception { viewModel . addRepeat ( ) ; verify ( formController ) . stepToNextScreenEvent ( ) ; }
public void cancelRepeatPrompt_afterPromptForNewRepeatAndAddRepeat_doesNotJumpBack ( ) { viewModel . promptForNewRepeat ( ) ; viewModel . addRepeat ( ) ; viewModel . cancelRepeatPrompt ( ) ; verify ( formController , never ( ) ) . jumpToIndex ( startingIndex ) ; }
public void getUploadResultMessageTest ( ) { assertThat ( InstanceUploaderUtils . getUploadResultMessage ( getTestInstancesRepository ( ) , null , getTestUploadResult ( ) ) , is ( getExpectedResultMsg ( ) ) ) ; }
public Polygon getBounds ( ) { return bounds ; }
public void setBounds ( Polygon bounds ) { this . bounds = bounds ; }
private void removeGrids ( ) { removePolylines ( ) ; removeLabels ( ) ; }
public MarkerOptions [ ] getLabels ( ) { return labels ; }
public void setLabels ( MarkerOptions [ ] labels ) { this . labels = labels ; setChanged ( ) ; notifyObservers ( LABELS_PROPERTY ) ; }
public static BasemapSettingsIO getInstance ( ) { return instance ; }
public void applyBasemaps ( GoogleMap map ) { applyGoogleBasemap ( map ) ; BasemapSettings settings = BasemapSettingsIO . getInstance ( ) . loadSettings ( activity , prefs ) ; applyUserBasemap ( map , settings ) ; applyGridOverlay ( map , settings ) ; }
private void applyGoogleBasemap ( GoogleMap map ) { int mapType = prefs . getInt ( BasemapSettingsIO . MAP_TYPE_KEY , 1 ) ; map . setMapType ( mapType ) ; }
public GridType getSelectedGrid ( ) { return selectedGridType ; }
public String toString ( ) { return gridOverlayTag + selectedGridType . toString ( ) + gridOverlayTag ; }
public boolean isZoomLevelVisible ( ) { SharedPreferences settings = PreferenceManager . getDefaultSharedPreferences ( getActivity ( ) ) ; return settings . getBoolean ( SETTINGS_ZOOM_LEVEL_KEY , false ) ; }
public void hideMapIcons ( ) { ViewAnimation . rotateFadeOut ( editFeaturesButton , 200 ) ; ViewAnimation . rotateFadeOut ( settingsIcon , 200 ) ; layerFab . hide ( ) ; }
public void showMapIcons ( ) { ViewAnimation . rotateFadeIn ( editFeaturesButton , 200 ) ; ViewAnimation . rotateFadeIn ( settingsIcon , 200 ) ; layerFab . show ( ) ; }
public void setZoomLevelVisible ( boolean zoomVisible ) { if ( zoomVisible ) { zoomLevelText . setVisibility ( View . VISIBLE ) ; } else { zoomLevelText . setVisibility ( View . GONE ) ; } }
public BasemapSettingsController ( Activity activity , SharedPreferences prefs , BasemapSettings model ) { this . activity = activity ; this . prefs = prefs ; this . model = model ; }
public void update ( Observable observable , Object o ) { if ( LayersModel . SELECTED_LAYERS_PROP . equals ( o ) ) { alertDialog . dismiss ( ) ; } }
public void setServerUrl ( String serverUrl ) { this . serverUrl = serverUrl ; setChanged ( ) ; notifyObservers ( SERVER_URL_PROP ) ; }
public void setBitmaps ( HashMap < Long , Bitmap > bitmaps ) { this . bitmaps = bitmaps ; }
public SliderViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new SliderViewHolder ( LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . slider_view_item , parent , false ) , mDeleteImageListener ) ; }
private void newTileLayerWizard ( final String geopackageName ) { NewTileLayerUI newTileLayerUI = new NewTileLayerUI ( geoPackageRecycler , this , this , getActivity ( ) , getContext ( ) , this , active , geoPackageViewModel , this , geopackageName ) ; newTileLayerUI . show ( geoPackageViewModel ) ; }
public void setMinZoom ( int minZoom ) { this . minZoom = minZoom ; setChanged ( ) ; notifyObservers ( MIN_ZOOM_PROP ) ; }
public void setMaxZoom ( int maxZoom ) { this . maxZoom = maxZoom ; setChanged ( ) ; notifyObservers ( MAX_ZOOM_PROP ) ; }
public void setAddedBitmaps ( HashMap < Long , Bitmap > addedBitmaps ) { this . addedBitmaps = addedBitmaps ; }
public HashMap < Long , Bitmap > getBitmaps ( ) { return bitmaps ; }
public void onClick ( View view ) { String geoName = detailPageAdapter . getGeoPackageName ( ) ; if ( geoName != null ) { newLayerWizard ( ) ; } }
public void onClick ( View v ) { String geoName = detailPageAdapter . getGeoPackageName ( ) ; if ( geoName != null ) { newTileLayerWizard ( geoName ) ; } alertDialog . dismiss ( ) ; }
private void bindFooter ( RecyclerView . ViewHolder holder ) { if ( holder instanceof GeoPackageFooterViewHolder ) { GeoPackageFooterViewHolder viewHolder = ( GeoPackageFooterViewHolder ) holder ; } }
public void onClick ( View view ) { mListener . onClick ( view , getBindingAdapterPosition ( ) , mDatabase ) ; }
public Bitmap getImage ( ) { return image ; }
public void afterTextChanged ( Editable editable ) { inputLayoutName . setErrorEnabled ( false ) ; boolean newTextValid = validateInput ( inputLayoutName , inputName , false ) ; }
public void afterTextChanged ( Editable editable ) { inputLayoutUrl . setErrorEnabled ( false ) ; boolean newUrlValid = validateInput ( inputLayoutUrl , inputUrl , true ) ; }
public void onClick ( View view ) { mDetailActionListener . onClick ( view , DetailActionListener . ADD_FEATURE_COLUMN , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
public void setData ( Object dataObject ) { if ( dataObject instanceof FeatureColumnDetailObject ) { columnDetailObject = ( FeatureColumnDetailObject ) dataObject ; nameText . setText ( columnDetailObject . getName ( ) ) ; setTypeInfo ( columnDetailObject . getColumnType ( ) ) ; setDeleteListener ( ) ; } }
public void onClick ( View view ) { mDetailActionListener . onClick ( view , DetailActionListener . EDIT_FEATURES , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
public void onClick ( View view ) { mDetailActionListener . onClick ( view , DetailActionListener . RENAME_LAYER , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
public void onClick ( View view ) { mDetailActionListener . onClick ( view , DetailActionListener . COPY_LAYER , mLayerObject . getGeoPackageName ( ) , mLayerObject . getName ( ) ) ; }
public void noAttendance ( ) { localDB . setStudent ( this . sharedPreference . getString ( "pref_student" , null ) , preferredStudent ) ; activityAttendanceBinding . rl . setVisibility ( View . GONE ) ; activityAttendanceBinding . NA . setVisibility ( View . VISIBLE ) ; }
public boolean onPreferenceClick ( Preference preference ) { custom_tab ( "https : return true ; }
public void noResult ( ) { activityResultsBinding . recyclerViewDetailedResult . setVisibility ( View . GONE ) ; activityResultsBinding . NA . setVisibility ( View . VISIBLE ) ; }
public static boolean isValidJoinCode ( @ NonNull String joinCode ) { if ( IP_ADDRESS_PATTERN . matcher ( joinCode ) . matches ( ) ) { return true ; } else { return JOIN_CODE_PATTERN . matcher ( joinCode ) . matches ( ) ; } }
public void onClick ( View v ) { mPrefSwitch . toggle ( ) ; }
public String getTitle ( ) { return mPrefTitle . getText ( ) . toString ( ) ; }
public boolean isPrefEnabled ( ) { return mPrefSwitch . isChecked ( ) ; }
private void setTitle ( @ NonNull String title ) { ZephyrExecutors . getMainThreadExecutor ( ) . execute ( ( ) -> { mPrefTitle . setText ( title ) ; } ) ; }
public String getTitle ( ) { return mCardTitle . getText ( ) . toString ( ) ; }
public void setTitle ( @ StringRes int title ) { mCardTitle . setText ( title ) ; }
public String getBody ( ) { return mCardBody . getText ( ) . toString ( ) ; }
public void setBody ( @ StringRes int body ) { mCardBody . setText ( body ) ; }
public APS ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public APS_GBA ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public APS_N64 ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public DPS ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public EBP ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public IPS ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public PPF ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public Patcher ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { patchFile = patch ; romFile = rom ; outputFile = output ; this . resourceProvider = resourceProvider ; this . fileUtils = fileUtils ; }
public UPS ( File patch , File rom , File output , ResourceProvider resourceProvider , FileUtils fileUtils ) { super ( patch , rom , output , resourceProvider , fileUtils ) ; }
public void setUp ( ) throws Exception { when ( resourceProvider . getString ( R . string . notify_error_patch_corrupted ) ) . thenReturn ( PATCH_CORRUPTED ) ; fileUtils = new FileUtils ( context , resourceProvider ) ; }
public void setUp ( ) throws Exception { when ( resourceProvider . getString ( R . string . notify_error_not_ips_patch ) ) . thenReturn ( NOT_IPS_PATCH ) ; fileUtils = new FileUtils ( context , resourceProvider ) ; }
public void onSuccess ( Void unused ) { log . d ( "We successfully requested a connection" ) ; }
public void onFailure ( @ NonNull Exception e ) { log . d ( "Failed to request the connection . " ) ; }
public void onEndpointLost ( String endpointId ) { log . d ( "A previously discovered endpoint has gone away" ) ; }
public void onDisconnected ( String endpointId ) { log . d ( "We've been disconnected from this endpoint : " + endpointId ) ; connectedEndpoints . remove ( endpointId ) ; }
public void onSuccess ( Void unused ) { log . d ( "We're discovering ! " ) ; }
public void onSuccess ( Void unused ) { log . d ( "We successfully requested a connection . " ) ; }
public void onProductPurchased ( String productId , PurchaseInfo details ) { * Called when requested PRODUCT ID was successfully purchased */ if ( productId . equals ( getString ( R . string . in_app_pro_version ) ) ) { upgrade ( ) ; } }
public void onSingleClick ( View v ) { Intent i = new Intent ( MainActivity . this , SettingsActivity . class ) ; startActivity ( i ) ; if ( mAsyncGetSubreddit != null ) mAsyncGetSubreddit . cancel ( true ) ; drawerLayout . closeDrawers ( ) ; }
public void onSharedPreferenceChanged ( SharedPreferences sharedPreferences , String key ) { SettingsActivity . changed = true ; }
public void onSingleClick ( View v ) { ProUtil . proUpgradeMsg ( SettingsActivity . this , R . string . settings_support_slide ) . setNegativeButton ( R . string . btn_no_thanks , ( dialog , whichButton ) -> dialog . dismiss ( ) ) . show ( ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsGeneral . class ) ; startActivityForResult ( i , RESTART_SETTINGS_RESULT ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsHistory . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsAbout . class ) ; startActivity ( i ) ; }
public void onClick ( View view ) { Intent i = new Intent ( SettingsActivity . this , ManageOfflineContent . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsData . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsSubreddit . class ) ; startActivityForResult ( i , RESTART_SETTINGS_RESULT ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsFilter . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsSynccit . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsTheme . class ) ; startActivityForResult ( i , RESTART_SETTINGS_RESULT ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsHandling . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , EditCardsLayout . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsBackup . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsFont . class ) ; startActivity ( i ) ; }
public void onSingleClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsReddit . class ) ; startActivity ( i ) ; }
public void onClick ( View v ) { Intent i = new Intent ( SettingsActivity . this , SettingsModeration . class ) ; startActivity ( i ) ; }
public void onClick ( View v ) { OpenRedditLink . openUrl ( mContext , comment . getSubmissionId ( ) , comment . getSubredditName ( ) , comment . getId ( ) ) ; }
public void onClick ( View v ) { OpenRedditLink . openUrl ( SettingsAbout . this , "https : }
public void stop ( ) { player . stop ( ) ; player . release ( ) ; audioFocusHelper . loseFocus ( ) ; }
public void onDismiss ( @ NonNull DialogInterface dialog ) { super . onDismiss ( dialog ) ; if ( callback != null ) { callback . onFolderChooserDismissed ( this ) ; } }
private void checkIfCanGoUp ( ) { try { canGoUp = parentFolder . getPath ( ) . split ( "/" ) . length > 1 ; } catch ( final IndexOutOfBoundsException e ) { canGoUp = false ; } }
public void show ( final FragmentActivity fragmentActivity ) { show ( fragmentActivity . getSupportFragmentManager ( ) ) ; }
public FolderChooserDialogCreate build ( ) { final FolderChooserDialogCreate dialog = new FolderChooserDialogCreate ( ) ; final Bundle args = new Bundle ( ) ; args . putSerializable ( "builder" , this ) ; dialog . setArguments ( args ) ; return dialog ; }
public FolderChooserDialogCreate show ( FragmentManager fragmentManager ) { final FolderChooserDialogCreate dialog = build ( ) ; dialog . show ( fragmentManager ) ; return dialog ; }
public Builder chooseButton ( @ StringRes int text ) { chooseButton = text ; return this ; }
public Builder isSaveToLocation ( boolean isSaveToLocation ) { this . isSaveToLocation = isSaveToLocation ; return this ; }
public static void loadPhotos ( final Context c , final List < Submission > submissions ) { for ( final Submission submission : submissions ) { loadPhoto ( c , submission ) ; } }
public void onClick ( @ NonNull MaterialDialog dialog , @ NonNull DialogAction which ) { new AsyncGetSubreddit ( ) . execute ( input ) ; }
private static void setCanUseNightModeAuto ( ) { UiModeManager uiModeManager = getAppContext ( ) . getSystemService ( UiModeManager . class ) ; canUseNightModeAuto = uiModeManager != null ; }
public void onClick ( View v ) { if ( ! currentlySubbed ) { doSubscribe ( ) ; } else { doUnsubscribe ( ) ; } MiscUtil . doSubscribeButtonText ( currentlySubbed , subscribe ) ; }
public CharSequence getPageTitle ( int position ) { if ( usedArray != null ) { return StringUtil . abbreviate ( usedArray . get ( position ) , 25 ) ; } else { return "" ; } }
public CharSequence getPageTitle ( int position ) { if ( usedArray != null && position != toOpenComments ) { return StringUtil . abbreviate ( usedArray . get ( position ) , 25 ) ; } else { return "" ; } }
private static boolean isValidUsername ( String user ) { /* https : return user . matches ( "^ [ a - zA - Z0 - 9_ - ] { 3 , 20 } $" ) ; }
public void undoSetError ( ) { listView . setAdapter ( this ) ; isError = false ; listView . setLayoutManager ( SubmissionsView . createLayoutManager ( LayoutUtils . getNumColumns ( context . getResources ( ) . getConfiguration ( ) . orientation , context ) ) ) ; }
public void run ( ) { sizeText . setText ( FileUtil . readableFileSize ( size ) ) ; }
public void run ( ) { if ( totalSize > 0 ) sizeText . setText ( "≤ " + FileUtil . readableFileSize ( totalSize ) ) ; }
public static void cacheModOf ( ) { subscriptions . edit ( ) . putString ( Authentication . name + "mod" , StringUtil . arrayToString ( modOf ) ) . apply ( ) ; }
public static void setSubscriptions ( CaseInsensitiveArrayList subs ) { subscriptions . edit ( ) . putString ( Authentication . name , StringUtil . arrayToString ( subs ) ) . apply ( ) ; }
public static void setPinned ( CaseInsensitiveArrayList subs ) { pinned . edit ( ) . putString ( Authentication . name , StringUtil . arrayToString ( subs ) ) . apply ( ) ; pins = null ; }
public SpacerViewHolder ( View itemView ) { super ( itemView ) ; itemView . findViewById ( R . id . height ) . setLayoutParams ( new LinearLayout . LayoutParams ( ViewGroup . LayoutParams . MATCH_PARENT , DisplayUtil . dpToPxVertical ( 88 ) ) ) ; }
public void run ( ) { GifUtils . cacheSaveGif ( Uri . parse ( GifUtils . AsyncLoadGif . formatUrl ( s . getUrl ( ) ) ) , ( Activity ) context , s . getSubredditName ( ) , null , false ) ; }
public void onClick ( View v ) { cacheSaveGif ( uri , c , subreddit , submissionTitle , true ) ; }
public void run ( ) { cacheSaveGif ( uri , c , subreddit , submissionTitle , true ) ; }
public LoadIntoRecycler ( @ NonNull String url , @ NonNull Activity baseActivity ) { super ( url , baseActivity ) ; this . url = url ; }
public LoadIntoPager ( @ NonNull String url , @ NonNull Activity baseActivity ) { super ( url , baseActivity ) ; this . url = url ; }
public void setPrimaryItem ( @ NonNull ViewGroup container , int position , @ NonNull Object object ) { if ( mCurrentFragment != object ) { mCurrentFragment = ( Fragment ) object ; } super . setPrimaryItem ( container , position , object ) ; }
public LoadTwitter ( @ NonNull WebView view , @ NonNull String url ) { this . view = view ; this . url = url ; client = Reddit . client ; gson = new Gson ( ) ; }
public int getItemPosition ( @ NonNull Object object ) { if ( object != storedFragment ) return POSITION_NONE ; return POSITION_UNCHANGED ; }
private void reloadSubs ( ) { int current = pager . getCurrentItem ( ) ; adapter = new MultiredditOverviewPagerAdapter ( getSupportFragmentManager ( ) ) ; pager . setAdapter ( adapter ) ; pager . setCurrentItem ( current ) ; }
public void setPrimaryItem ( @ NonNull ViewGroup container , int position , @ NonNull Object object ) { super . setPrimaryItem ( container , position , object ) ; doSetPrimary ( object , position ) ; }
public void computeScroll ( ) { mScrimOpacity = 1 - mScrollPercent ; if ( mDragHelper . continueSettling ( true ) ) { this . postInvalidateOnAnimation ( ) ; } }
public void setBackgroundColor ( int color ) { setBackgroundDrawable ( new ColorDrawable ( color ) ) ; }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; logTheConfiguration ( newConfig ) ; }
public Notifier setAlarm ( boolean _soundAlarm ) { this . soundAlarm = _soundAlarm ; return this ; }
private Uri getSoundUri ( @ RawRes int soundId ) { return Uri . parse ( "android . resource : }
public void setMainActivityIsVisible ( boolean _mainActivityIsVisible ) { this . mainActivityIsVisible = _mainActivityIsVisible ; }
public void setEnableReminders ( boolean _enableReminders ) { this . enableReminders = _enableReminders ; }
private static String makeLvString ( int lv ) { return format ( "Lv %d" , lv ) ; }
private static String makeExpString ( int exp ) { return format ( "next : %d" , exp ) ; }
private static String makeCondString ( int cond ) { return format ( "%d" , cond ) ; }
public SavedState [ ] newArray ( int size ) { return new SavedState [ size ] ; }
public int getQuestCategoryColor ( int category ) { return ContextCompat . getColor ( application_context , KcaUtils . getIdWithFallback ( KcaUtils . format ( "colorQuestCategory%d" , category ) , "colorQuestCategory10" , R . color . class ) ) ; }
public void gotData ( long l , float [ ] f ) { if ( epFragment != null ) { epFragment . hasSample ( f [ AttysComm . INDEX_Analogue_channel_1 ] ) ; } }
public void run ( ) { if ( sweepNoText != null ) { sweepNoText . setText ( String . format ( Locale . US , "%04d sweeps" , nSweeps ) ) ; } }
static synchronized public void stim ( ) { try { sound . pause ( ) ; sound . flush ( ) ; sound . reloadStaticData ( ) ; sound . play ( ) ; } catch ( IllegalStateException ignored ) { } }
private ParseQuery < ParseObject > getQuery ( ) { ParseQuery < ParseObject > query = new ParseQuery <> ( className ) ; query . whereEqualTo ( "objectId" , objectId ) ; return query ; }
public String getName ( ) { if ( mDevice != null ) { return mDevice . getName ( ) ; } return null ; }
public String getMac ( ) { if ( mDevice != null ) { return mDevice . getAddress ( ) ; } return null ; }
public String getKey ( ) { if ( mDevice != null ) { return mDevice . getName ( ) + mDevice . getAddress ( ) ; } return "" ; }
public String getRemainingUphill ( ) { if ( mError != null ) { return mError . toString ( ) ; } return Integer . toString ( mRemainingUphill ) ; }
public String getRemainingDownhill ( ) { if ( mError != null ) { return mError . toString ( ) ; } return Integer . toString ( mRemainingDownhill ) ; }
public AndroidDeviceVerifier ( @ NonNull String apiKey , @ NonNull String signatureToVerify ) { this . apiKey = apiKey ; this . signatureToVerify = signatureToVerify ; }
private void onMute ( String accountId , String accountUsername ) { MuteAccountDialog . showMuteAccountDialog ( this . getActivity ( ) , accountUsername , ( notifications , duration ) -> { timelineCases . mute ( accountId , notifications , duration ) ; return Unit . INSTANCE ; } ) ; }
private void onNextStep ( ) { getSActivity ( ) . mStarNameAccount = mAccountInput . getText ( ) . toString ( ) . trim ( ) ; getSActivity ( ) . mStarNameDomain = mSelectedDomain ; getSActivity ( ) . onNextStep ( ) ; }
public PoolOuterClass . Pool getPoolwithID ( long id ) { for ( PoolOuterClass . Pool pool : mTempPoolList ) { if ( pool . getId ( ) == id ) { return pool ; } } return null ; }
public void onFailure ( Call < ResBnbTxInfo > call , Throwable t ) { WLog . w ( "onFetchSendTx BNB onFailure" ) ; if ( BuildConfig . DEBUG ) t . printStackTrace ( ) ; }
public void onFailure ( Call < ResTxInfo > call , Throwable t ) { WLog . w ( "onFetchSendTx KAVA onFailure" ) ; if ( BuildConfig . DEBUG ) t . printStackTrace ( ) ; }
public void onFailure ( Call < ResBnbTxInfo > call , Throwable t ) { WLog . w ( "onFetchClaimTx BNB onFailure" ) ; if ( BuildConfig . DEBUG ) t . printStackTrace ( ) ; onUpdateView ( ) ; }
public void onFailure ( Call < ResTxInfo > call , Throwable t ) { WLog . w ( "onFetchClaimTx KAVA onFailure" ) ; if ( BuildConfig . DEBUG ) t . printStackTrace ( ) ; onUpdateView ( ) ; }
public void onFailure ( Call < ResVersionCheck > call , Throwable t ) { if ( BuildConfig . DEBUG ) { WLog . w ( "onCheckAppVersion onFailure " + t . getMessage ( ) ) ; } onNetworkDialog ( ) ; }
public void onFailure ( Call < ResBnbTxInfo > call , Throwable t ) { WLog . w ( "BNB onFailure" ) ; if ( BuildConfig . DEBUG ) t . printStackTrace ( ) ; if ( isFinishing ( ) ) return ; }
public void onFailure ( Call < ResTxInfo > call , Throwable t ) { if ( BuildConfig . DEBUG ) t . printStackTrace ( ) ; if ( isFinishing ( ) ) return ; }
public void onNewToken ( String token ) { if ( BuildConfig . DEBUG ) { WLog . w ( "Refreshed token : " + token ) ; } ; ( ( BaseApplication ) getApplication ( ) ) . getBaseDao ( ) . setFCMToken ( token ) ; }
public static void e ( String msg ) { if ( BuildConfig . DEBUG ) { Log . e ( BaseConstant . LOG_TAG , msg + "\n" ) ; } }
public static void w ( String msg ) { if ( BuildConfig . DEBUG ) { Log . w ( BaseConstant . LOG_TAG , msg + "\n" ) ; } }
public void onRizonStatus ( ) { new RizonSwapStatusTask ( getBaseApplication ( ) , this , mBaseChain , mAccount ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void onFetchPoolInfo ( ) { mTaskCount = 1 ; new GravityDexPoolInfoGrpcTask ( getBaseApplication ( ) , this , getSActivity ( ) . mBaseChain , getSActivity ( ) . mGDexPoolId ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public RecyclerViewHeader ( Context context , boolean sticky , @ NonNull SectionCallback sectionCallback ) { this . sticky = sticky ; this . sectionCallback = sectionCallback ; topPadding = dpToPx ( context , 30 ) ; }
public void onBindOsmoMyPool ( Context context , BaseActivity activity , BaseData baseData , PoolOuterClass . Pool mypool ) { }
public void onBindKavaMyPool ( Context context , BaseActivity activity , BaseData baseData , SwapPool myPool , SwapDeposit myDeposit ) { }
private void onBindIncentiveHard ( RecyclerView . ViewHolder viewHolder , int position ) { final TxHardPoolIncentive holder = ( TxHardPoolIncentive ) viewHolder ; holder . onBind ( getBaseContext ( ) , mBaseChain , mResTxInfo , mResTxInfo . getMsg ( position - 1 ) , position - 1 ) ; }
private ClaimIncentiveActivity getSActivity ( ) { return ( ClaimIncentiveActivity ) getBaseActivity ( ) ; }
public AmountHolder ( View v ) { super ( v ) ; itemTotal = itemView . findViewById ( R . id . total_amount ) ; itemAvailable = itemView . findViewById ( R . id . available_amount ) ; }
public void onClick ( View v ) { Intent intent = new Intent ( getMainActivity ( ) , BridgeTokenGrpcActivity . class ) ; intent . putExtra ( "denom" , coin . denom ) ; startActivity ( intent ) ; }
public void onFetchPoolInfo ( ) { mTaskCount = 1 ; new OsmosisPoolInfoGrpcTask ( getBaseApplication ( ) , this , getSActivity ( ) . mBaseChain , getSActivity ( ) . mOsmosisPoolId ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void onCheckRizonEventHorizon ( ) { onStartEventHorizon ( ) ; }
public void onBeforeStep ( ) { if ( mViewPager . getCurrentItem ( ) > 0 ) { onHideKeyboard ( ) ; mViewPager . setCurrentItem ( mViewPager . getCurrentItem ( ) - 1 , true ) ; } else { onBackPressed ( ) ; } }
private String onHdacAddress ( BaseChain baseChain ) { HdacUtil hdacUtil = new HdacUtil ( mWords ) ; String mAddress = hdacUtil . getAddress ( baseChain ) ; return mAddress ; }
public void onClick ( View v ) { mainActivity . onClickEventHorizon ( ) ; }
private void onGenAccount ( int path ) { onShowWaitDialog ( ) ; new GenerateAccountTask ( getBaseApplication ( ) , mChain , this , mIsNewBip44 , mCustomPath ) . execute ( "" + path , mEntropy , "" + mWordSize ) ; }
private void onOverrideAccount ( Account account , int path ) { new OverrideAccountTask ( getBaseApplication ( ) , mChain , account , this , mIsNewBip44 , mCustomPath ) . execute ( "" + path , mEntropy , "" + mWordSize ) ; }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingCustomPath ( 0 ) ; getDialog ( ) . dismiss ( ) ; }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingCustomPath ( 1 ) ; getDialog ( ) . dismiss ( ) ; }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingCustomPath ( 2 ) ; getDialog ( ) . dismiss ( ) ; }
public void onClick ( View v ) { ( ( RestoreActivity ) getActivity ( ) ) . onUsingCustomPath ( 3 ) ; getDialog ( ) . dismiss ( ) ; }
public static IbcToken getIbcToken ( String denom ) { String ibcHash = denom . replace ( "ibc/" , "" ) ; for ( IbcToken ibcToken : mIbcTokens ) { if ( ibcToken . hash . equals ( ibcHash ) ) { return ibcToken ; } } return null ; }
public String getSpotMarketId ( String denom ) { for ( HardMoneyMarket market : money_markets ) { if ( market . denom . equals ( denom ) ) { return market . spot_market_id ; } } return null ; }
public int getItemCount ( ) { if ( mAccounts_gRPC . size ( ) == 0 ) { return 1 ; } else { return mAccounts_gRPC . size ( ) ; } }
public int getItemViewType ( int position ) { if ( mAccounts_gRPC . size ( ) == 0 ) { return TYPE_PROMOTION ; } else { return TYPE_MY_ACCOUNT ; } }
public void onClick ( View v ) { Intent intent = new Intent ( getSActivity ( ) , StarNameDomainDetailActivity . class ) ; intent . putExtra ( "domain" , domain . getName ( ) ) ; startActivity ( intent ) ; }
public int getItemCount ( ) { if ( mDomains_gRPC . size ( ) == 0 ) { return 1 ; } else { return mDomains_gRPC . size ( ) ; } }
public int getItemViewType ( int position ) { if ( mDomains_gRPC . size ( ) == 0 ) { return TYPE_PROMOTION ; } else { return TYPE_MY_DOMAIN ; } }
public void onFailure ( Call < ResLcdKavaAccountInfo > call , Throwable t ) { }
public void onClick ( View v ) { Intent intent = new Intent ( getMainActivity ( ) , NativeTokenDetailActivity . class ) ; intent . putExtra ( "denom" , denom ) ; startActivity ( intent ) ; }
public void onClick ( View v ) { onStartSendMainDenom ( ) ; }
public void onClick ( View v ) { ( ( BaseActivity ) getActivity ( ) ) . onChoiceNet ( CRYPTO_MAIN ) ; getDialog ( ) . dismiss ( ) ; }
public void onFailure ( Call < ResLcdAccountInfo > call , Throwable t ) { }
public void run ( ) { getBaseDao ( ) . setLastUser ( account . id ) ; onAccountSwitched ( ) ; }
public void onFailure ( Call < ResKavaBep3Param > call , Throwable t ) { Toast . makeText ( getContext ( ) , R . string . error_network_error , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onFailure ( Call < ResKavaSwapSupply > call , Throwable t ) { Toast . makeText ( getContext ( ) , R . string . error_network_error , Toast . LENGTH_SHORT ) . show ( ) ; }
public BondingStateTask ( BaseApplication app , TaskListener listener , Account account ) { super ( app , listener ) ; this . mAccount = account ; this . mResult . taskType = TASK_FETCH_BONDING_STATE ; }
public UnBondingStateTask ( BaseApplication app , TaskListener listener , Account account ) { super ( app , listener ) ; this . mAccount = account ; this . mResult . taskType = TASK_FETCH_UNBONDING_STATE ; }
public void onClick ( View v ) { ( ( BaseActivity ) getActivity ( ) ) . onChoiceNet ( BaseChain . CERTIK_MAIN ) ; getDialog ( ) . dismiss ( ) ; }
public void onClick ( View v ) { ( ( BaseActivity ) getActivity ( ) ) . onChoiceNet ( AKASH_MAIN ) ; getDialog ( ) . dismiss ( ) ; }
public void onResponse ( Call < ResNodeInfo > call , Response < ResNodeInfo > response ) { if ( response . isSuccessful ( ) && response . body ( ) != null ) { mResBnbNodeInfo = response . body ( ) ; } onUpdateView ( ) ; }
public void onFailure ( Call < ResNodeInfo > call , Throwable t ) { WLog . w ( "onFetchBnbNodeInfo " + t . getMessage ( ) ) ; onUpdateView ( ) ; }
private CdpParam getCdpParam ( ) { return getSActivity ( ) . mCdpParam ; }
private CollateralParam getCParam ( ) { return getSActivity ( ) . mCollateralParam ; }
private MarketPrice getPrice ( ) { return getSActivity ( ) . mKavaTokenPrice ; }
private BorrowCdpActivity getSActivity ( ) { return ( BorrowCdpActivity ) getBaseActivity ( ) ; }
public CdpParam getCDPParam ( ) { return getSActivity ( ) . mCdpParam ; }
public BigDecimal getSelfDeposit ( String address ) { for ( CdpDeposit deposit : result ) { if ( deposit . depositor . equals ( address ) ) { return new BigDecimal ( deposit . amount . amount ) ; } } return BigDecimal . ZERO ; }
public void onClick ( View v ) { onListener . onWaitMore ( ) ; getDialog ( ) . dismiss ( ) ; }
public void onFetchCdpInfo ( ) { mMyCdps . clear ( ) ; mOtherCdps . clear ( ) ; mTaskCount = 1 ; new KavaCdpByOwnerTask ( getBaseApplication ( ) , this , mBaseChain , mAccount . address ) . executeOnExecutor ( AsyncTask . THREAD_POOL_EXECUTOR ) ; }
public void onBindMyHardStatus ( Context context , BaseData baseData , ArrayList < HardMyDeposit > myDeposit , ArrayList < HardMyBorrow > myBorrow ) { }
public com . google . protobuf2 . Any getPubKey ( ) { if ( pubKeyBuilder_ == null ) { return pubKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : pubKey_ ; } else { return pubKeyBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getPubKeyBuilder ( ) { onChanged ( ) ; return getPubKeyFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getPubKeyOrBuilder ( ) { if ( pubKeyBuilder_ != null ) { return pubKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return pubKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : pubKey_ ; } }
private void ensureAccountsIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { accounts_ = new java . util . ArrayList < com . google . protobuf2 . Any > ( accounts_ ) ; bitField0_ | = 0x00000001 ; } }
public java . util . List < com . google . protobuf2 . Any > getAccountsList ( ) { if ( accountsBuilder_ == null ) { return java . util . Collections . unmodifiableList ( accounts_ ) ; } else { return accountsBuilder_ . getMessageList ( ) ; } }
public com . google . protobuf2 . Any getAccounts ( int index ) { if ( accountsBuilder_ == null ) { return accounts_ . get ( index ) ; } else { return accountsBuilder_ . getMessage ( index ) ; } }
public com . google . protobuf2 . Any . Builder addAccountsBuilder ( ) { return getAccountsFieldBuilder ( ) . addBuilder ( com . google . protobuf2 . Any . getDefaultInstance ( ) ) ; }
public com . google . protobuf2 . Any getAccount ( ) { if ( accountBuilder_ == null ) { return account_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : account_ ; } else { return accountBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getAccountBuilder ( ) { onChanged ( ) ; return getAccountFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getAccountOrBuilder ( ) { if ( accountBuilder_ != null ) { return accountBuilder_ . getMessageOrBuilder ( ) ; } else { return account_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : account_ ; } }
public com . google . protobuf2 . Any getTx ( ) { if ( txBuilder_ == null ) { return tx_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : tx_ ; } else { return txBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getTxBuilder ( ) { onChanged ( ) ; return getTxFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getTxOrBuilder ( ) { if ( txBuilder_ != null ) { return txBuilder_ . getMessageOrBuilder ( ) ; } else { return tx_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : tx_ ; } }
private void ensurePublicKeysIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { publicKeys_ = new java . util . ArrayList < com . google . protobuf2 . Any > ( publicKeys_ ) ; bitField0_ | = 0x00000001 ; } }
public java . util . List < com . google . protobuf2 . Any > getPublicKeysList ( ) { if ( publicKeysBuilder_ == null ) { return java . util . Collections . unmodifiableList ( publicKeys_ ) ; } else { return publicKeysBuilder_ . getMessageList ( ) ; } }
public com . google . protobuf2 . Any getPublicKeys ( int index ) { if ( publicKeysBuilder_ == null ) { return publicKeys_ . get ( index ) ; } else { return publicKeysBuilder_ . getMessage ( index ) ; } }
public com . google . protobuf2 . Any . Builder addPublicKeysBuilder ( ) { return getPublicKeysFieldBuilder ( ) . addBuilder ( com . google . protobuf2 . Any . getDefaultInstance ( ) ) ; }
private void ensureEvidenceIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { evidence_ = new java . util . ArrayList < com . google . protobuf2 . Any > ( evidence_ ) ; bitField0_ | = 0x00000001 ; } }
public java . util . List < com . google . protobuf2 . Any > getEvidenceList ( ) { if ( evidenceBuilder_ == null ) { return java . util . Collections . unmodifiableList ( evidence_ ) ; } else { return evidenceBuilder_ . getMessageList ( ) ; } }
public com . google . protobuf2 . Any getEvidence ( int index ) { if ( evidenceBuilder_ == null ) { return evidence_ . get ( index ) ; } else { return evidenceBuilder_ . getMessage ( index ) ; } }
public com . google . protobuf2 . Any . Builder addEvidenceBuilder ( ) { return getEvidenceFieldBuilder ( ) . addBuilder ( com . google . protobuf2 . Any . getDefaultInstance ( ) ) ; }
public com . google . protobuf2 . Any getEvidence ( ) { if ( evidenceBuilder_ == null ) { return evidence_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : evidence_ ; } else { return evidenceBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getEvidenceBuilder ( ) { onChanged ( ) ; return getEvidenceFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getEvidenceOrBuilder ( ) { if ( evidenceBuilder_ != null ) { return evidenceBuilder_ . getMessageOrBuilder ( ) ; } else { return evidence_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : evidence_ ; } }
public com . google . protobuf2 . Any getContent ( ) { if ( contentBuilder_ == null ) { return content_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : content_ ; } else { return contentBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getContentBuilder ( ) { onChanged ( ) ; return getContentFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getContentOrBuilder ( ) { if ( contentBuilder_ != null ) { return contentBuilder_ . getMessageOrBuilder ( ) ; } else { return content_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : content_ ; } }
public com . google . protobuf2 . Any getConsensusPubkey ( ) { if ( consensusPubkeyBuilder_ == null ) { return consensusPubkey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : consensusPubkey_ ; } else { return consensusPubkeyBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getConsensusPubkeyBuilder ( ) { onChanged ( ) ; return getConsensusPubkeyFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getConsensusPubkeyOrBuilder ( ) { if ( consensusPubkeyBuilder_ != null ) { return consensusPubkeyBuilder_ . getMessageOrBuilder ( ) ; } else { return consensusPubkey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : consensusPubkey_ ; } }
public com . google . protobuf2 . Any getPubkey ( ) { if ( pubkeyBuilder_ == null ) { return pubkey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : pubkey_ ; } else { return pubkeyBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getPubkeyBuilder ( ) { onChanged ( ) ; return getPubkeyFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getPubkeyOrBuilder ( ) { if ( pubkeyBuilder_ != null ) { return pubkeyBuilder_ . getMessageOrBuilder ( ) ; } else { return pubkey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : pubkey_ ; } }
public com . google . protobuf2 . Any getPublicKey ( ) { if ( publicKeyBuilder_ == null ) { return publicKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : publicKey_ ; } else { return publicKeyBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getPublicKeyBuilder ( ) { onChanged ( ) ; return getPublicKeyFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getPublicKeyOrBuilder ( ) { if ( publicKeyBuilder_ != null ) { return publicKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return publicKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : publicKey_ ; } }
private void ensureMessagesIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { messages_ = new java . util . ArrayList < com . google . protobuf2 . Any > ( messages_ ) ; bitField0_ | = 0x00000001 ; } }
public java . util . List < com . google . protobuf2 . Any > getMessagesList ( ) { if ( messagesBuilder_ == null ) { return java . util . Collections . unmodifiableList ( messages_ ) ; } else { return messagesBuilder_ . getMessageList ( ) ; } }
public com . google . protobuf2 . Any getMessages ( int index ) { if ( messagesBuilder_ == null ) { return messages_ . get ( index ) ; } else { return messagesBuilder_ . getMessage ( index ) ; } }
public com . google . protobuf2 . Any . Builder addMessagesBuilder ( ) { return getMessagesFieldBuilder ( ) . addBuilder ( com . google . protobuf2 . Any . getDefaultInstance ( ) ) ; }
private void ensureExtensionOptionsIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000002 ) != 0 ) ) { extensionOptions_ = new java . util . ArrayList < com . google . protobuf2 . Any > ( extensionOptions_ ) ; bitField0_ | = 0x00000002 ; } }
public java . util . List < com . google . protobuf2 . Any > getExtensionOptionsList ( ) { if ( extensionOptionsBuilder_ == null ) { return java . util . Collections . unmodifiableList ( extensionOptions_ ) ; } else { return extensionOptionsBuilder_ . getMessageList ( ) ; } }
public com . google . protobuf2 . Any getExtensionOptions ( int index ) { if ( extensionOptionsBuilder_ == null ) { return extensionOptions_ . get ( index ) ; } else { return extensionOptionsBuilder_ . getMessage ( index ) ; } }
public com . google . protobuf2 . Any . Builder addExtensionOptionsBuilder ( ) { return getExtensionOptionsFieldBuilder ( ) . addBuilder ( com . google . protobuf2 . Any . getDefaultInstance ( ) ) ; }
private void ensureNonCriticalExtensionOptionsIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000004 ) != 0 ) ) { nonCriticalExtensionOptions_ = new java . util . ArrayList < com . google . protobuf2 . Any > ( nonCriticalExtensionOptions_ ) ; bitField0_ | = 0x00000004 ; } }
public java . util . List < com . google . protobuf2 . Any > getNonCriticalExtensionOptionsList ( ) { if ( nonCriticalExtensionOptionsBuilder_ == null ) { return java . util . Collections . unmodifiableList ( nonCriticalExtensionOptions_ ) ; } else { return nonCriticalExtensionOptionsBuilder_ . getMessageList ( ) ; } }
public com . google . protobuf2 . Any getNonCriticalExtensionOptions ( int index ) { if ( nonCriticalExtensionOptionsBuilder_ == null ) { return nonCriticalExtensionOptions_ . get ( index ) ; } else { return nonCriticalExtensionOptionsBuilder_ . getMessage ( index ) ; } }
public com . google . protobuf2 . Any . Builder addNonCriticalExtensionOptionsBuilder ( ) { return getNonCriticalExtensionOptionsFieldBuilder ( ) . addBuilder ( com . google . protobuf2 . Any . getDefaultInstance ( ) ) ; }
public com . google . protobuf2 . Any getUpgradedConsensusState ( ) { if ( upgradedConsensusStateBuilder_ == null ) { return upgradedConsensusState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : upgradedConsensusState_ ; } else { return upgradedConsensusStateBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getUpgradedConsensusStateBuilder ( ) { onChanged ( ) ; return getUpgradedConsensusStateFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getUpgradedConsensusStateOrBuilder ( ) { if ( upgradedConsensusStateBuilder_ != null ) { return upgradedConsensusStateBuilder_ . getMessageOrBuilder ( ) ; } else { return upgradedConsensusState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : upgradedConsensusState_ ; } }
public com . google . protobuf2 . Any getUpgradedClientState ( ) { if ( upgradedClientStateBuilder_ == null ) { return upgradedClientState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : upgradedClientState_ ; } else { return upgradedClientStateBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getUpgradedClientStateBuilder ( ) { onChanged ( ) ; return getUpgradedClientStateFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getUpgradedClientStateOrBuilder ( ) { if ( upgradedClientStateBuilder_ != null ) { return upgradedClientStateBuilder_ . getMessageOrBuilder ( ) ; } else { return upgradedClientState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : upgradedClientState_ ; } }
public com . google . protobuf2 . Any getConsensusState ( ) { if ( consensusStateBuilder_ == null ) { return consensusState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : consensusState_ ; } else { return consensusStateBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getConsensusStateBuilder ( ) { onChanged ( ) ; return getConsensusStateFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getConsensusStateOrBuilder ( ) { if ( consensusStateBuilder_ != null ) { return consensusStateBuilder_ . getMessageOrBuilder ( ) ; } else { return consensusState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : consensusState_ ; } }
public com . google . protobuf2 . Any getClientState ( ) { if ( clientStateBuilder_ == null ) { return clientState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : clientState_ ; } else { return clientStateBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getClientStateBuilder ( ) { onChanged ( ) ; return getClientStateFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getClientStateOrBuilder ( ) { if ( clientStateBuilder_ != null ) { return clientStateBuilder_ . getMessageOrBuilder ( ) ; } else { return clientState_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : clientState_ ; } }
public com . google . protobuf2 . Any getHeader ( ) { if ( headerBuilder_ == null ) { return header_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : header_ ; } else { return headerBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getHeaderBuilder ( ) { onChanged ( ) ; return getHeaderFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getHeaderOrBuilder ( ) { if ( headerBuilder_ != null ) { return headerBuilder_ . getMessageOrBuilder ( ) ; } else { return header_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : header_ ; } }
public com . google . protobuf2 . Any getMisbehaviour ( ) { if ( misbehaviourBuilder_ == null ) { return misbehaviour_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : misbehaviour_ ; } else { return misbehaviourBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getMisbehaviourBuilder ( ) { onChanged ( ) ; return getMisbehaviourFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getMisbehaviourOrBuilder ( ) { if ( misbehaviourBuilder_ != null ) { return misbehaviourBuilder_ . getMessageOrBuilder ( ) ; } else { return misbehaviour_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : misbehaviour_ ; } }
public com . google . protobuf2 . Any getNewPublicKey ( ) { if ( newPublicKeyBuilder_ == null ) { return newPublicKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : newPublicKey_ ; } else { return newPublicKeyBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getNewPublicKeyBuilder ( ) { onChanged ( ) ; return getNewPublicKeyFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getNewPublicKeyOrBuilder ( ) { if ( newPublicKeyBuilder_ != null ) { return newPublicKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return newPublicKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : newPublicKey_ ; } }
public com . google . protobuf2 . Any getNewPubKey ( ) { if ( newPubKeyBuilder_ == null ) { return newPubKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : newPubKey_ ; } else { return newPubKeyBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getNewPubKeyBuilder ( ) { onChanged ( ) ; return getNewPubKeyFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getNewPubKeyOrBuilder ( ) { if ( newPubKeyBuilder_ != null ) { return newPubKeyBuilder_ . getMessageOrBuilder ( ) ; } else { return newPubKey_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : newPubKey_ ; } }
public com . google . protobuf2 . Any getToken ( ) { if ( tokenBuilder_ == null ) { return token_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : token_ ; } else { return tokenBuilder_ . getMessage ( ) ; } }
public com . google . protobuf2 . Any . Builder getTokenBuilder ( ) { onChanged ( ) ; return getTokenFieldBuilder ( ) . getBuilder ( ) ; }
public com . google . protobuf2 . AnyOrBuilder getTokenOrBuilder ( ) { if ( tokenBuilder_ != null ) { return tokenBuilder_ . getMessageOrBuilder ( ) ; } else { return token_ == null ? com . google . protobuf2 . Any . getDefaultInstance ( ) : token_ ; } }
private void ensureTokensIsMutable ( ) { if ( ! ( ( bitField0_ & 0x00000001 ) != 0 ) ) { tokens_ = new java . util . ArrayList < com . google . protobuf2 . Any > ( tokens_ ) ; bitField0_ | = 0x00000001 ; } }
public java . util . List < com . google . protobuf2 . Any > getTokensList ( ) { if ( tokensBuilder_ == null ) { return java . util . Collections . unmodifiableList ( tokens_ ) ; } else { return tokensBuilder_ . getMessageList ( ) ; } }
public com . google . protobuf2 . Any getTokens ( int index ) { if ( tokensBuilder_ == null ) { return tokens_ . get ( index ) ; } else { return tokensBuilder_ . getMessage ( index ) ; } }
public com . google . protobuf2 . Any . Builder addTokensBuilder ( ) { return getTokensFieldBuilder ( ) . addBuilder ( com . google . protobuf2 . Any . getDefaultInstance ( ) ) ; }
public void onClick ( View v ) { getMainActivity ( ) . onStartValidatorDetailV1 ( validator . getOperatorAddress ( ) ) ; }
public int getItemCount ( ) { return getBaseDao ( ) . mAllValidators . size ( ) ; }
public void onSortValidator ( ) { WUtil . onSortByOKValidatorPower ( getBaseDao ( ) . mMyValidators ) ; }
public int getItemCount ( ) { return getBaseDao ( ) . mOtherValidators . size ( ) ; }
public void onSortValidator ( ) { WUtil . onSortByOKValidatorPower ( getBaseDao ( ) . mOtherValidators ) ; }
public int getItemCount ( ) { return getBaseDao ( ) . mTopValidators . size ( ) ; }
public void onSortValidator ( ) { WUtil . onSortByOKValidatorPower ( getBaseDao ( ) . mTopValidators ) ; }
public void onFinishMapManagement ( ) { mMap . layers ( ) . remove ( mMapCoverageLayer ) ; mMapCoverageLayer . onDetach ( ) ; mNativeMapIndex . clearSelections ( ) ; mMapCoverageLayer = null ; mMap . updateMap ( true ) ; }
public void uncaughtException ( @ NonNull final Thread thread , @ NonNull final Throwable ex ) { caughtException ( thread , ex ) ; defaultHandler . uncaughtException ( thread , ex ) ; }
public Engine onCreateEngine ( ) { engine = new ShaderWallpaperEngine ( ) ; return engine ; }
public void onCreate ( SurfaceHolder holder ) { super . onCreate ( holder ) ; view = new ShaderWallpaperView ( ) ; setShader ( ) ; }
private OpenHelper ( Context context ) { super ( context , FILE_NAME , null , 5 ) ; this . context = context ; }
public LiveData < String > getBirthdayDay ( ) { return birthdayDay ; }
public LiveData < String > getBirthdayMonth ( ) { return birthdayMonth ; }
public LiveData < String > getBirthdayYear ( ) { return birthdayYear ; }
public void setBirthdayDay ( String birthdayDay ) { this . birthdayDay . setValue ( birthdayDay ) ; }
public void setBirthdayMonth ( String birthdayMonth ) { this . birthdayMonth . setValue ( birthdayMonth ) ; }
public void setBirthdayYear ( String birthdayYear ) { this . birthdayYear . setValue ( birthdayYear ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_settings , menu ) ; return true ; }
public RemoteViewsFactory onGetViewFactory ( Intent intent ) { return new WidgetFactory ( repository , getApplicationContext ( ) ) ; }
private Cursor getAllYearInfosCursorWith ( String query , String [ ] queryArgs , String orderBy ) { final SQLiteDatabase DB = this . getReadableDatabase ( ) ; return DB . query ( TABLE_YEARS , null , query , queryArgs , null , null , orderBy ) ; }
public void backup ( ) { try { this . saveTo ( this . getBackupDir ( ) ) ; } catch ( IOException exc ) { Log . e ( LOG_TAG , "unable to create backup . " ) ; } }
public void onResume ( ) { super . onResume ( ) ; this . update ( ) ; }
public void onBackPressed ( ) { if ( ! this . working ) { new SettingsStorage ( this . getApplicationContext ( ) , settings ) . store ( ) ; super . onBackPressed ( ) ; this . finish ( ) ; } return ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { StatsActivity . this . update ( ) ; }
public void onClick ( View v ) { historyActivity = ACTIVITY ; selectedSession = SESSION ; ACTIVITY . onEntryOpsMenu ( ) ; }
public void onSettingsChange_RestartApp ( ) { mPresenter . onSettingsChange ( 0 , 0 , true , true , true ) ; verify ( mView ) . showDialog ( ) ; }
public void onItemLongClick ( int position , View view ) { pinRecent ( position , requireContext ( ) ) ; }
private void checkLocalAccess ( ) { if ( app . seedHash != null && LocalBackupHelper . INSTANCE . hasLocalAccess ( getApplicationContext ( ) ) ) { applyLocalAccessGranted ( ) ; } else { applyLocalAccessDenied ( ) ; } }
public Engine onCreateEngine ( ) { Context mContext = this ; mContextWrapper = this ; preferences = PreferenceManager . getDefaultSharedPreferences ( mContextWrapper ) ; dp = getResources ( ) . getDisplayMetrics ( ) . density ; return new OcquariumWallpaperEngine ( ) ; }
public boolean onSupportNavigateUp ( ) { if ( activityBinding . searchToolbar . getVisibility ( ) == VISIBLE ) { updateToolbars ( false ) ; return true ; } else { return super . onSupportNavigateUp ( ) ; } }
public static BaseNoteFragment newInstanceWithNewNote ( Note newNote ) { final var fragment = new NoteEditFragment ( ) ; final var args = new Bundle ( ) ; args . putSerializable ( PARAM_NEWNOTE , newNote ) ; fragment . setArguments ( args ) ; return fragment ; }
public static BaseNoteFragment newInstance ( String content ) { final var fragment = new NoteReadonlyFragment ( ) ; final var args = new Bundle ( ) ; args . putString ( PARAM_CONTENT , content ) ; fragment . setArguments ( args ) ; return fragment ; }
public static DialogFragment newInstance ( String title ) { final var fragment = new EditTitleDialogFragment ( ) ; final var args = new Bundle ( ) ; args . putString ( PARAM_OLD_TITLE , title ) ; fragment . setArguments ( args ) ; return fragment ; }
public static DialogFragment newInstance ( ArrayList < Throwable > exceptions ) { final var args = new Bundle ( ) ; args . putSerializable ( KEY_THROWABLES , exceptions ) ; final var fragment = new ExceptionDialogFragment ( ) ; fragment . setArguments ( args ) ; return fragment ; }
public int getPosition ( @ NonNull Long key ) { final var viewHolder = recyclerView . findViewHolderForItemId ( key ) ; return viewHolder == null ? NO_POSITION : viewHolder . getLayoutPosition ( ) ; }
public void onStartListening ( ) { final var tile = getQsTile ( ) ; tile . setState ( Tile . STATE_ACTIVE ) ; tile . updateTile ( ) ; }
private static int extractNumber ( String containsNumbers ) { final var matcher = NUMBER_EXTRACTION_PATTERN . matcher ( containsNumbers ) ; if ( matcher . find ( ) ) { return Integer . parseInt ( matcher . group ( ) ) ; } return 0 ; }
public static CategorySortingMethod findById ( int id ) { for ( final var csm : values ( ) ) { if ( csm . getId ( ) == id ) { return csm ; } } return SORT_MODIFIED_DESC ; }
public boolean equals ( Object o ) { final var colorPair = ( ColorPair ) o ; if ( first != colorPair . first ) return false ; return second == colorPair . second ; }
public Call < NotesSettings > getServerSettings ( @ NonNull SingleSignOnAccount ssoAccount , @ Nullable ApiVersion preferredApiVersion ) { return ApiProvider . getInstance ( ) . getNotesAPI ( context , ssoAccount , preferredApiVersion ) . getSettings ( ) ; }
public Call < NotesSettings > putServerSettings ( @ NonNull SingleSignOnAccount ssoAccount , @ NonNull NotesSettings settings , @ Nullable ApiVersion preferredApiVersion ) { return ApiProvider . getInstance ( ) . getNotesAPI ( context , ssoAccount , preferredApiVersion ) . putSettings ( settings ) ; }
private Account setupSecondAccount ( ) { db . getAccountDao ( ) . insert ( new Account ( "https : return db . getAccountDao ( ) . getAccountByName ( "test @ example . org" ) ; }
public int compareTo ( @ NonNull ApiVersion compare ) { if ( compare . getMajor ( ) > getMajor ( ) ) { return - 1 ; } else if ( compare . getMajor ( ) < getMajor ( ) ) { return 1 ; } return 0 ; }
public void onCloseNote ( ) { if ( ! titleModified && originalNote == null && getContent ( ) . isEmpty ( ) ) { repo . deleteNoteAndSync ( localAccount , note . getId ( ) ) ; } }
public void onCategoryChosen ( String category ) { repo . setCategory ( localAccount , note . getId ( ) , category ) ; note . setCategory ( category ) ; listener . onNoteUpdated ( note ) ; }
public CategoryViewModel ( @ NonNull Application application ) { super ( application ) ; repo = NotesRepository . getInstance ( application ) ; }
public MainViewModel ( @ NonNull Application application , @ NonNull SavedStateHandle savedStateHandle ) { super ( application ) ; this . repo = NotesRepository . getInstance ( application ) ; this . state = savedStateHandle ; }
public LiveData < Pair < NavigationCategory , CategorySortingMethod >> getCategorySortingMethodOfSelectedCategory ( ) { return switchMap ( getSelectedCategory ( ) , selectedCategory -> map ( repo . getCategoryOrder ( selectedCategory ) , sortingMethod -> new Pair <> ( selectedCategory , sortingMethod ) ) ) ; }
public ManageAccountsViewModel ( @ NonNull Application application ) { super ( application ) ; this . repo = NotesRepository . getInstance ( application ) ; }
public NoteListViewModel ( @ NonNull Application application ) { super ( application ) ; this . repo = NotesRepository . getInstance ( application ) ; }
public void onSuccess ( Void v ) { Log . d ( TAG , "Successfully synchronized notes for " + nextAccount . getAccountName ( ) ) ; }
public void onSuccess ( Void v ) { Log . d ( TAG , "Successfully synchronized capabilities and notes for " + currentAccount . getAccountName ( ) ) ; }
public void onSuccess ( Void v ) { Log . i ( TAG , " [ synchronizeCapabilitiesAndNotes ] Synchronize notes for " + localAccount . getAccountName ( ) ) ; synchronizeNotes ( localAccount , callback ) ; }
public AccountSwitcherAdapter ( @ NonNull Consumer < Account > onAccountClick ) { this . onAccountClick = onAccountClick ; setHasStableIds ( true ) ; }
public void setLocalAccounts ( @ NonNull List < Account > localAccounts ) { this . localAccounts . clear ( ) ; this . localAccounts . addAll ( localAccounts ) ; notifyDataSetChanged ( ) ; }
public void onAccountPicked ( @ NonNull Account account ) { fragment . moveNote ( account ) ; }
public void setHighlightSearchQuery ( CharSequence searchQuery ) { this . searchQuery = searchQuery ; notifyDataSetChanged ( ) ; }
public void setCurrentLocalAccount ( @ Nullable Account currentLocalAccount ) { this . currentLocalAccount = currentLocalAccount ; notifyDataSetChanged ( ) ; }
public AccountChooserAdapter ( @ NonNull List < Account > localAccounts , @ NonNull Consumer < Account > targetAccountConsumer ) { super ( ) ; this . localAccounts = localAccounts ; this . targetAccountConsumer = targetAccountConsumer ; }
public void onIconClick ( NavigationItem item ) { onItemClick ( item ) ; }
public LiveData < Note > getFullNote$ ( long id ) { return map ( getFullNotesWithCategory ( Collections . singleton ( id ) ) , input -> input . get ( 0 ) ) ; }
public int getCount ( ) { return dbNotes . size ( ) + 1 ; }
public static boolean isEmptyLine ( @ Nullable String line ) { return removeMarkdown ( line ) . trim ( ) . length ( ) == 0 ; }
public static String generateNoteTitle ( @ NonNull String content ) { return getLineWithoutMarkdown ( content , 0 ) ; }
public static boolean isDarkThemeActive ( Context context ) { final int uiMode = context . getResources ( ) . getConfiguration ( ) . uiMode ; return ( uiMode & Configuration . UI_MODE_NIGHT_MASK ) == Configuration . UI_MODE_NIGHT_YES ; }
public boolean shouldOverrideUrlLoading ( WebView view , String url ) { UIUtils . handleUri ( getContext ( ) , Uri . parse ( url ) ) ; return true ; }
public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { UIUtils . handleUri ( getContext ( ) , request . getUrl ( ) ) ; return true ; }
public static void setupToolbar ( AppCompatActivity activity , String imageUrl , String title , boolean showHomeEnabled ) { ImageView iconView = setupCustomToolbar ( activity , title , showHomeEnabled ) ; FeedUtils . iconLoader . displayImage ( imageUrl , iconView ) ; }
public boolean performClick ( ) { super . performClick ( ) ; return true ; }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; drawerToggle . onConfigurationChanged ( newConfig ) ; switchOrientation ( newConfig . orientation ) ; }
public void updateReceivedVersion ( SessionObject sessionObject , String ver ) { prefs . edit ( ) . putString ( createKey ( sessionObject ) , ver ) . apply ( ) ; }
public int getValue ( ) { return value ; }
public void onClick ( View v ) { getRecyclerView ( ) . smoothScrollToPosition ( 0 ) ; }
public void onResume ( ) { Log . v ( TAG , "Resume view" ) ; super . onResume ( ) ; Log . v ( TAG , "Resumed view" ) ; MessageNotification . cancelSummaryNotification ( getContext ( ) ) ; }
private final CursorViewAdapter adapter = new CursorViewAdapter ( this , null , selectionHandler ) { @ Override protected void onContentChanged ( ) { loadData ( ) ; } } ;
private final BroadcastReceiver avatarUpdatedListener = new BroadcastReceiver ( ) { @ Override public void onReceive ( Context context , Intent intent ) { if ( intent . getStringExtra ( "jid" ) . equals ( jid . toString ( ) ) ) { fillAvatar ( ) ; } } } ;
public BaseSearchSuggestionCursor ( ) { super ( new String [ ] { BaseColumns . _ID , SearchManager . SUGGEST_COLUMN_TEXT_1 , SearchManager . SUGGEST_COLUMN_TEXT_2 , SearchManager . SUGGEST_COLUMN_INTENT_ACTION , SearchManager . SUGGEST_COLUMN_QUERY , SearchManager . SUGGEST_COLUMN_ICON_1 } ) ; }
public GeocacheSuggestionsAdapter ( final Context context ) { super ( context , new GeocacheSearchSuggestionCursor ( ) , 0 ) ; }
private void collectSearchdataCallback ( final ArrayList < BasePreferenceFragment . PrefSearchDescriptor > data ) { synchronized ( searchIndex ) { searchIndex . addAll ( data ) ; } }
public boolean isFilled ( ) { return latitudePattern != EMPTY_FORMULA || longitudePattern != EMPTY_FORMULA ; }
public void setItems ( final List < T > list ) { this . originalItemList . clear ( ) ; this . originalItemList . addAll ( list ) ; initializeFromOriginalList ( ) ; }
public void sortItems ( final Comparator < T > comparator ) { Collections . sort ( this . originalItemList , comparator ) ; initializeFromOriginalList ( ) ; }
public List < Image > getImages ( ) { return imageList . getItems ( ) ; }
public void onSaveInstanceState ( @ NonNull final Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelableArrayList ( SAVED_STATE_IMAGELIST , new ArrayList <> ( imageList . getItems ( ) ) ) ; outState . putBundle ( SAVED_STATE_IMAGEHELPER , imageHelper . getState ( ) ) ; }
private void fillViewHolder ( final VariableViewHolder holder , final VariableMap . VariableState data ) { if ( holder == null ) { return ; } textListeningActive = false ; holder . setData ( data ) ; textListeningActive = true ; }
public String getDatabaseFolder ( ) { return DATABASE_FOLDER ; }
private void resetHistoryAdapter ( ) { arvHistoryItems . setAdapter ( new HistoryItemsAdapter ( flHistory ) ) ; }
private void load ( ) { if ( ! historyPortion . isLoaded ( ) ) { pbHistory . setVisibility ( View . VISIBLE ) ; arvHistoryItems . setVisibility ( View . GONE ) ; new HistoryItemsLoaderTask ( this ) . execute ( ) ; } }
public void postLoad ( @ NonNull List < HistoryItem > items ) { pbHistory . setVisibility ( View . GONE ) ; arvHistoryItems . setVisibility ( View . VISIBLE ) ; ( ( HistoryItemsAdapter ) arvHistoryItems . getAdapter ( ) ) . addHistoryItems ( items ) ; }
public HistoryPortion dataPortion ( ) { return historyPortion ; }
public void run ( ) { mvf . setArguments ( b ) ; messageTxt . setText ( "" ) ; if ( buffer != null && buffer . getDraft ( ) != null ) messageTxt . append ( buffer . getDraft ( ) ) ; }
public void parse ( IRCCloudJSONObject object , boolean backlog ) { if ( ! backlog ) notifyHandlers ( type , object ) ; }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { if ( userInfo != null ) userInfo . num_invites = object . getInt ( "num_invites" ) ; }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { Log . d ( "IRCCloud" , "OOB was skipped" ) ; ready = true ; }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { mEvents . deleteEventsBeforeEid ( object . bid ( ) , object . eid ( ) ) ; }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { mEvents . addEvent ( object ) ; if ( ! backlog ) { notifyHandlers ( EVENT_LINKCHANNEL , object ) ; } }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { mChannels . updateURL ( object . bid ( ) , object . getString ( "url" ) ) ; }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { if ( ! backlog ) { mChannels . updateTimestamp ( object . bid ( ) , object . getLong ( "timestamp" ) ) ; notifyHandlers ( EVENT_CHANNELTIMESTAMP , object ) ; } }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { mEvents . addEvent ( object ) ; if ( ! backlog ) { mBuffers . dirty = true ; notifyHandlers ( EVENT_QUIT , object ) ; } }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { pendingEdits . add ( object ) ; process_pending_edits ( backlog ) ; }
public void parse ( IRCCloudJSONObject object , boolean backlog ) throws JSONException { Event e = mEvents . addEvent ( object ) ; if ( ! backlog ) { notifyHandlers ( EVENT_ALERT , object ) ; notifyHandlers ( EVENT_BUFFERMSG , e ) ; } }
public static String irc_to_html ( String msg ) { return irc_to_html ( msg , null , 0 , null , 0 , false ) ; }
public void onClick ( @ NotNull Book book , int position ) { updateItem ( book , position ) ; }
public void setList ( List < Library > categories ) { mLibraries = categories ; alignCache ( ) ; }
public List < Library > getList ( ) { return mLibraries ; }
public CharSequence getPageTitle ( int position ) { return mLibraries . get ( position ) . getTitle ( ) ; }
public int getCount ( ) { return mLibraries != null ? mLibraries . size ( ) : 0 ; }
private SongPreviewController ( ) { mPreviewPlayer = new PreviewPlayer ( ) ; mPreviewPlayer . setSongPreviewListener ( this ) ; }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; if ( mCardLayerController != null ) { mCardLayerController . onConfigurationChanged ( newConfig ) ; } }
public void cleanup ( ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( Exception ignore ) { } } }
public boolean start ( ) { try { mCurrentMediaPlayer . start ( ) ; return true ; } catch ( Exception e ) { return false ; } }
public boolean pause ( ) { try { mCurrentMediaPlayer . pause ( ) ; return true ; } catch ( Exception e ) { return false ; } }
public int duration ( ) { if ( ! mIsInitialized ) { return - 1 ; } try { return mCurrentMediaPlayer . getDuration ( ) ; } catch ( Exception e ) { return - 1 ; } }
public int position ( ) { if ( ! mIsInitialized ) { return - 1 ; } try { return mCurrentMediaPlayer . getCurrentPosition ( ) ; } catch ( Exception e ) { return - 1 ; } }
public int seek ( final int whereto ) { try { mCurrentMediaPlayer . seekTo ( whereto ) ; return whereto ; } catch ( Exception e ) { return - 1 ; } }
public boolean setVolume ( final float l , final float r ) { try { mCurrentMediaPlayer . setVolume ( l , r ) ; mLeftVolume = l ; mRightVolume = r ; return true ; } catch ( Exception e ) { return false ; } }
public boolean setAudioSessionId ( final int sessionId ) { try { mCurrentMediaPlayer . setAudioSessionId ( sessionId ) ; return true ; } catch ( @ NonNull Exception e ) { return false ; } }
public void setInstrumentName ( String name ) { this . instrumentName = name ; }
public static InputStream loadAsset ( String assetName ) throws IOException { Context context = ClientModel . getClientModel ( ) . getContext ( ) ; return context . getAssets ( ) . open ( assetName ) ; }
public static long getAssetLength ( String assetName ) throws IOException { Context context = ClientModel . getClientModel ( ) . getContext ( ) ; return context . getAssets ( ) . openFd ( assetName ) . getLength ( ) ; }
public void setContext ( Context context ) { this . context = context ; }
public Context getContext ( ) { return context ; }
public void updatePlayCount ( ) { playCount = playCount + 1 ; savePreferences ( ) ; }
public void onBillingSetupFinished ( BillingResult arg0 ) { billingClientConnected = true ; querySkuDetails ( activity ) ; }
public void onDismiss ( DialogInterface dialog ) { if ( mdialog . getButtonPressed ( ) == 0 ) { clientModel . buyFullVersion ( MainActivity . this ) ; } }
public void onItemSelected ( AdapterView av , View v , int arg2 , long arg3 ) { int keysSelection = keysSpinner . getSelectedItemPosition ( ) ; activity . setKeyboardSize ( keysSelection ) ; clientModel . setKeyboardSize ( keysSelection ) ; clientModel . savePreferences ( ) ; }
public void onItemSelected ( AdapterView av , View v , int arg2 , long arg3 ) { int midiChannel = midiChannelSpinner . getSelectedItemPosition ( ) ; activity . setMidiChannel ( midiChannel ) ; clientModel . setMidiChannel ( midiChannel ) ; clientModel . savePreferences ( ) ; }
public void onChanged ( NumberPicker picker , int oldVal , int newVal ) { activity . setTuningCents ( tuningCents . getCurrent ( ) ) ; clientModel . setTuningCents ( tuningCents . getCurrent ( ) ) ; clientModel . savePreferences ( ) ; }
public void onItemSelected ( AdapterView av , View v , int arg2 , long arg3 ) { int controlsSelection = controlsSpinner . getSelectedItemPosition ( ) ; activity . setControlSide ( controlsSelection ) ; clientModel . setControlSide ( controlsSelection ) ; clientModel . savePreferences ( ) ; }
public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( isChecked ) { clientModel . setColorIcons ( 1 ) ; } else { clientModel . setColorIcons ( 0 ) ; } activity . setColorIcons ( isChecked ) ; clientModel . savePreferences ( ) ; }
public void run ( ) { ClientModel . getClientModel ( ) . updatePlayCount ( ) ; showMainMenu ( ) ; }
public MainActivityPagerAdapter ( Context context , FragmentManager fm ) { super ( fm , BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT ) ; this . context = context ; }
public DefaultDateHeaderViewHolder ( View itemView ) { super ( itemView ) ; text = itemView . findViewById ( R . id . messageText ) ; }
private void init ( View itemView ) { time = itemView . findViewById ( R . id . messageTime ) ; }
public float convertRawXCoordinateToScaledCanvasCoordinate ( float rawX , MapScaleInfo scaleInfo ) { return ( rawX - scaleInfo . getPivotX ( ) ) / scaleInfo . getScaleFactor ( ) + scaleInfo . getPivotX ( ) ; }
public float convertRawYCoordinateToScaledCanvasCoordinate ( float rawY , MapScaleInfo scaleInfo ) { return ( rawY - scaleInfo . getPivotY ( ) ) / scaleInfo . getScaleFactor ( ) + scaleInfo . getPivotY ( ) ; }
public void startDocument ( ) { }
public void endDocument ( ) { }
public void characters ( char [ ] ch , int start , int length ) { }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; if ( compulsoryDataIsNotAvailable ( ) ) { reloadAllAndReturnToMainActivity ( ) ; return ; } orientation = getResources ( ) . getConfiguration ( ) . orientation ; }
public void onViewCreated ( @ NonNull View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; RoboGuice . getInjector ( MainApplication . getContext ( ) ) . injectViewMembers ( this ) ; }
public CachedAdMobAdManager ( ) { Logger . debug ( "CachedAdMobAdManager instantiated" ) ; }
public void drawUserLocation ( Canvas canvas , Rect bounds ) { MapLocationXY userLocation = userLocationService . getUserLocationXY ( ) ; if ( userLocation != null ) { drawPoint ( userLocation , canvas , bounds , null ) ; } }
public void addTestbedMapImage ( TestbedMapImage image ) { if ( testbedMapImages == null ) { testbedMapImages = new ArrayList <> ( ) ; } testbedMapImages . add ( image ) ; }
public void onLocationChanged ( Location location ) { if ( location != null ) { userLocation = new MapLocationGPS ( location . getLatitude ( ) , location . getLongitude ( ) ) ; userLocationXY = coordinateService . convertLocationToXyPos ( userLocation ) ; } }
public void setUp ( ) { activity = Robolectric . setupActivity ( MainActivity_ . class ) ; rainAndTemperatureButton = activity . findViewById ( R . id . button_rain_temperature ) ; }
public void shouldReturnCorrectName ( ) { String appName = activity . getResources ( ) . getString ( R . string . app_name ) ; assertThat ( appName , equalTo ( "Helsinki Testbed Viewer 2 . 0" ) ) ; }
public void setUp ( ) { activity = Robolectric . setupActivity ( ParsingActivity_ . class ) ; }
public void testErrorValues ( ) { MapLocationXY nullPos = coordinateService . convertLocationToXyPos ( null ) ; assertNull ( nullPos ) ; MapLocationGPS point = new MapLocationGPS ( 0 , 0 ) ; MapLocationXY emptyPos = coordinateService . convertLocationToXyPos ( point ) ; assertNotNull ( emptyPos ) ; }
public void onPreferencesMenuItemSelected ( ) { startActivity ( new Intent ( this , TestbedPreferenceActivity_ . class ) ) ; }
public void setInitialPoint ( float x , float y ) { if ( initialPoint == null ) { initialPoint = new PointF ( ) ; } initialPoint . set ( x , y ) ; }
public void addListener ( Animator . AnimatorListener listener ) { listeners . add ( listener ) ; }
public void removeListener ( Animator . AnimatorListener listener ) { listeners . remove ( listener ) ; }
public BlurMaskFilter getBlurMaskFilter ( float radius ) { if ( blurMaskFilterRadius == radius ) { return blurMaskFilter ; } blurMaskFilter = new BlurMaskFilter ( radius / 2f , BlurMaskFilter . Blur . NORMAL ) ; blurMaskFilterRadius = radius ; return blurMaskFilter ; }
public File getCacheDir ( ) { return new File ( appContext . getCacheDir ( ) , "lottie_network_cache" ) ; }
public String getText ( String input ) { return input ; }
public void onMapReady ( @ NonNull GoogleMap googleMap ) { mMap = googleMap ; mMapDrawer = new MapDrawer ( mMap ) ; mMap . setOnCameraIdleListener ( mOnCameraIdleListener ) ; mMapReadyDelegate . evaluate ( ) ; updateSubTitle ( ) ; initMyLocationActivation ( ) ; }
private HRRecorder ( String filename ) throws IOException { fullpath = new File ( getBaseContext ( ) . getExternalFilesDir ( null ) , filename ) ; textdataFileStream = new PrintWriter ( new FileOutputStream ( fullpath , true ) ) ; }
public synchronized void stopAddSamples ( ) { if ( holder != null ) { if ( canvas != null ) { try { holder . unlockCanvasAndPost ( canvas ) ; } catch ( Exception ignored ) { } canvas = null ; } } }
public StoredFileUriProvider ( ISelectedBrowserLibraryProvider selectedBrowserLibraryProvider , AccessStoredFiles storedFileAccess , IStorageReadPermissionArbitratorForOs externalStorageReadPermissionsArbitrator ) { this . selectedBrowserLibraryProvider = selectedBrowserLibraryProvider ; this . externalStorageReadPermissionsArbitrator = externalStorageReadPermissionsArbitrator ; this . storedFileAccess = storedFileAccess ; }
public FakeNotificationCompatBuilder ( Notification returnNotification ) { super ( null , returnNotification ) ; this . returnNotification = returnNotification ; }
public IActivePlayer startPlayback ( PreparedPlayableFileQueue preparedPlaybackQueue , final Duration filePosition ) { close ( ) ; playlistPlayer = new PlaylistPlayer ( preparedPlaybackQueue , filePosition ) ; activePlayer = new ActivePlayer ( playlistPlayer , volumeManagement ) ; return activePlayer ; }
public void close ( ) { if ( activePlayer != null ) activePlayer . close ( ) ; if ( playlistPlayer != null ) playlistPlayer . close ( ) ; }
public void thenTheQueueStartsAtTheCorrectPosition ( ) { queue . promiseNextPreparedPlaybackFile ( Duration . ZERO ) . then ( new VoidResponse <> ( positionedPlaybackFile -> Assert . assertEquals ( startPosition , positionedPlaybackFile . getPlaylistPosition ( ) ) ) ) ; }
public void onConfigurationChanged ( @ NonNull Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; tagsToggle . onConfigurationChanged ( newConfig ) ; }
public void onStop ( @ NonNull LifecycleOwner owner ) { if ( MainActivity . this . settings . getRelockOnBackground ( ) ) MainActivity . this . requireAuthentication = true ; }
public boolean onSupportNavigateUp ( ) { if ( canGoBack ) finishWithResult ( ) ; return true ; }
public static void show ( final MainActivity callingActivity , Settings settings , final EntriesCardAdapter adapter ) { show ( callingActivity , settings , adapter , null , null ) ; }
public boolean getBoolean ( int keyId , boolean defaultValue ) { return settings . getBoolean ( getResString ( keyId ) , defaultValue ) ; }
public void setBoolean ( int keyId , boolean value ) { settings . edit ( ) . putBoolean ( getResString ( keyId ) , value ) . apply ( ) ; }
public int getIterations ( ) { return getIntValue ( R . string . settings_key_auth_iterations , Constants . PBKDF2_MIN_AUTH_ITERATIONS ) ; }
public Set < String > getPanicResponse ( ) { return settings . getStringSet ( getResString ( R . string . settings_key_panic ) , Collections . emptySet ( ) ) ; }
public Set < String > getBackupBroadcasts ( ) { return settings . getStringSet ( getResString ( R . string . settings_key_backup_broadcasts ) , Collections . emptySet ( ) ) ; }
public int getTokenSplitGroupSize ( ) { return Integer . parseInt ( getString ( R . string . settings_key_split_group_size , R . string . settings_default_split_group_size ) ) ; }
public static boolean saveFile ( Context context , Uri file , String data ) { return saveFile ( context , file , data . getBytes ( StandardCharsets . UTF_8 ) ) ; }
public ArrayList < Entry > getEntries ( ) { return entries . getEntries ( ) ; }
public void onCounterClicked ( int position ) { updateEntry ( displayedEntries . get ( position ) , entries . getEntry ( getRealIndex ( position ) ) , position ) ; }
public void setSortMode ( SortMode mode ) { this . sortMode = mode ; entriesChanged ( RecyclerView . NO_POSITION ) ; }
public void execute ( ) { executor . execute ( this : : runTask ) ; }
public void cancel ( ) { isCanceled = true ; }
public int hashCode ( ) { return Objects . hash ( type , period , counter , digits , algorithm , secret , label , issuer ) ; }
public void setLocale ( String locale ) { setString ( R . string . settings_key_lang , locale ) ; }
public static File getImageFile ( Context context , @ NonNull Config config , @ NonNull String url ) throws Exception { return getImageStackBlurFile ( config . getStackBlur ( ) , getImageFile ( context , url ) , url ) ; }
private void postDelayed ( ) { if ( mCheckHandlerHelper == null ) { return ; } mCheckHandlerHelper . postDelayed ( mCheckRunnable , Constants . DEF_LIVE_WALLPAPER_CHECK_PERIODIC ) ; }
public void enable ( ) { if ( mCheckHandlerHelper == null ) { return ; } disable ( ) ; mCheckHandlerHelper . postDelayed ( this : : timing , 300 ) ; }
private void disable ( ) { if ( mCheckHandlerHelper == null ) { return ; } mCheckHandlerHelper . removeCallbacks ( mCheckRunnable ) ; }
public Wallpaper copy ( String imageUrl ) { Wallpaper wallpaper = new Wallpaper ( dateTime , url , baseUrl , title , webUrl , desc , copyrightInfo ) ; wallpaper . setImageUrl ( imageUrl ) ; return wallpaper ; }
private void showSuccessNotification ( Wallpaper image , boolean isShow ) { NotificationUtils . clearFailureNotification ( mContext ) ; if ( isShow ) { NotificationUtils . showSuccessNotification ( mContext , image . getTitle ( ) ) ; } }
private void setImage ( Wallpaper image ) { if ( isDestroyed ( ) ) { return ; } setTitle ( image . getTitle ( ) ) ; mNavigationHeaderCoverStoryTitleView . setText ( image . getTitle ( ) ) ; loadMenuImage ( ) ; }
public void onSuccess ( File file ) { saveWallpaper ( context , tag , imageUrl , file ) ; }
private void drawWallpaper ( ) { drawWallpaper ( mLastFile ) ; }
private void setBingWallpaperError ( Throwable throwable ) { dismissProgressDialog ( ) ; String error = CrashReportHandle . loadFailed ( this , TAG , throwable ) ; mViewBinding . bingWallpaperError . setText ( getString ( R . string . pull_refresh ) + error ) ; }
private String getUrl ( ) { return getUrl ( BingWallpaperUtils . getResolution ( this , true ) ) ; }
private void showSwipeRefreshLayout ( ) { mViewBinding . bingWallpaperError . setText ( "" ) ; showProgressDialog ( ) ; }
public void onAllow ( ) { mViewBinding . bingWallpaperSetMenu . close ( true ) ; mDownloadHelper . saveWallpaper ( getActivity ( ) , getSaveUrl ( ) ) ; }
public void onSuccess ( Object o ) { UIUtils . showToast ( requireContext ( ) , R . string . pref_clear_cache_success ) ; }
private void initWorkerView ( ) { mDailyUpdateIntervalPreference . setEnabled ( true ) ; mDailyUpdateIntervalPreference . setSummary ( getString ( R . string . pref_auto_update_check_time , Settings . getAutomaticUpdateInterval ( requireContext ( ) ) ) ) ; mDailyUpdateTimePreference . setEnabled ( false ) ; }
public void onDestroy ( ) { if ( mReceiver != null ) { LocalBroadcastManager . getInstance ( requireContext ( ) ) . unregisterReceiver ( mReceiver ) ; } super . onDestroy ( ) ; }
public void onProgressChanged ( SeekBar seekBar , int progress , boolean fromUser ) { binding . seekbarValue . setText ( String . valueOf ( progress ) ) ; }
public void setResolutionImageUrl ( Context context ) { this . imageUrl = BingWallpaperUtils . getResolutionImageUrl ( context , baseUrl ) ; }
public static void disabled ( Context context ) { WorkManager . getInstance ( context ) . cancelUniqueWork ( WORKER_TAG ) ; }
private final View . OnClickListener onClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { onFabItemClickedListener . onFabItemClick ( v . getId ( ) ) ; } } ;
private void initSharedPreferences ( ) { new Prefs . Builder ( ) . setContext ( this ) . setMode ( MODE_PRIVATE ) . setPrefsName ( PACKAGE ) . setUseDefaultSharedPreference ( true ) . build ( ) ; }
private void toggleChecklist2 ( ) { boolean keepChecked = Prefs . getBoolean ( PREF_KEEP_CHECKED , true ) ; boolean showChecks = Prefs . getBoolean ( PREF_KEEP_CHECKMARKS , true ) ; toggleChecklist2 ( keepChecked , showChecks ) ; }
public boolean onQueryTextSubmit ( String arg0 ) { return Prefs . getBoolean ( "settings_instant_search" , false ) ; }
private void filterReminders ( boolean filter ) { Prefs . edit ( ) . putBoolean ( PREF_FILTER_PAST_REMINDERS , filter ) . apply ( ) ; initNotesList ( mainActivity . getIntent ( ) ) ; mainActivity . supportInvalidateOptionsMenu ( ) ; }
public void onConfigurationChanged ( Configuration newConfig ) { super . onConfigurationChanged ( newConfig ) ; String language = Prefs . getString ( PREF_LANG , "" ) ; LanguageHelper . updateLanguage ( this , language ) ; }
private void postpone ( Long alarm , String recurrenceRule ) { ReminderPickers reminderPicker = new ReminderPickers ( this , this ) ; reminderPicker . pick ( alarm , recurrenceRule ) ; }
public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mFragment = this ; setHasOptionsMenu ( true ) ; setRetainInstance ( true ) ; EventBus . getDefault ( ) . register ( this , 1 ) ; }
public void resumeCurrentPage ( ) { applyWebSettings ( ) ; binding . webview . onResume ( ) ; binding . webview . resumeTimers ( ) ; }
public int getVersionNumber ( ) { return 9 ; }
public Long readKey ( Cursor cursor , int offset ) { return cursor . getLong ( offset + 0 ) ; }
public void readEntity ( Cursor cursor , CurrentRssItemView entity , int offset ) { entity . setId ( cursor . getLong ( offset + 0 ) ) ; entity . setRssItemId ( cursor . getLong ( offset + 1 ) ) ; }
public void readEntity ( Cursor cursor , Folder entity , int offset ) { entity . setId ( cursor . getLong ( offset + 0 ) ) ; entity . setLabel ( cursor . getString ( offset + 1 ) ) ; }
public void destroyItem ( @ NonNull ViewGroup container , int position , @ NonNull Object object ) { items . remove ( position ) ; super . destroyItem ( container , position , object ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; ( ( NewsReaderApplication ) requireActivity ( ) . getApplication ( ) ) . getAppComponent ( ) . injectFragment ( this ) ; setRetainInstance ( true ) ; }
private void unregisterImageDownloadReceiver ( ) { if ( downloadCompleteReceiver != null ) { requireActivity ( ) . unregisterReceiver ( downloadCompleteReceiver ) ; downloadCompleteReceiver = null ; } }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; this . mActivity = ( PodcastFragmentActivity ) context ; }
public void onNext ( @ NonNull List < RssItem > rssItems ) { loadRssItemsIntoView ( rssItems ) ; }
public void onScrolled ( @ NonNull RecyclerView recyclerView , int dx , int dy ) { if ( dy > 0 ) { if ( mMarkAsReadWhileScrollingEnabled ) { handleMarkAsReadScrollEvent ( ) ; } } }
public boolean onInterceptTouchEvent ( @ NonNull RecyclerView rv , @ NonNull MotionEvent e ) { detector . onTouchEvent ( e ) ; return false ; }
public void onTouchEvent ( @ NonNull RecyclerView rv , @ NonNull MotionEvent e ) { }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( LAYOUT_MANAGER_STATE , getLayoutManager ( ) . onSaveInstanceState ( ) ) ; }
public float getSwipeThreshold ( @ NonNull RecyclerView . ViewHolder viewHolder ) { return 0 . 25f ; }
public FastMarkReadMotionListener ( View fabMarkAllAsRead ) { this . fabMarkAllAsRead = fabMarkAllAsRead ; this . targetView = fabMarkAllAsRead . findViewById ( R . id . target_done_all ) ; }
public void onCreate ( Bundle savedInstance ) { super . onCreate ( savedInstance ) ; ( ( NewsReaderApplication ) requireActivity ( ) . getApplication ( ) ) . getAppComponent ( ) . injectFragment ( this ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; if ( ! ( context instanceof Callbacks ) ) { throw new IllegalStateException ( "Activity must implement fragment's callbacks . " ) ; } mCallbacks = ( Callbacks ) context ; }
public void onActivityStarted ( @ NonNull Activity activity ) { numStarted ++ ; }
public void onActivityResumed ( @ NonNull Activity activity ) { }
public void onActivityPaused ( @ NonNull Activity activity ) { }
public void onActivityStopped ( @ NonNull Activity activity ) { numStarted -- ; }
public void onActivitySaveInstanceState ( @ NonNull Activity activity , @ NonNull Bundle outState ) { }
public void onActivityDestroyed ( @ NonNull Activity activity ) { }
public void onEvent ( RegisterVideoOutput videoOutput ) { if ( mPlaybackService != null && mPlaybackService instanceof MediaPlayerPlaybackService ) { ( ( MediaPlayerPlaybackService ) mPlaybackService ) . setVideoView ( videoOutput . surfaceView ) ; } }
public void onCancel ( @ NonNull DialogInterface dialog ) { sendDecision ( MTMDecision . DECISION_ABORT ) ; }
public Socket createSocket ( String s , int i ) { return null ; }
public Socket createSocket ( String s , int i , InetAddress inetAddress , int i2 ) { return null ; }
public Socket createSocket ( InetAddress inetAddress , int i ) { return null ; }
public Socket createSocket ( InetAddress inetAddress , int i , InetAddress inetAddress2 , int i2 ) { return null ; }
private void openDrawer ( ) { if ( mActivity . binding . drawerLayout != null ) { mActivity . binding . drawerLayout . openDrawer ( GravityCompat . START , true ) ; } }
private void closeDrawer ( ) { if ( mActivity . binding . drawerLayout != null ) { mActivity . binding . drawerLayout . closeDrawer ( GravityCompat . START , true ) ; } }
public OwnCloudSyncAdapter ( Context context , boolean autoInitialize ) { super ( context , autoInitialize ) ; ( ( NewsReaderApplication ) context ) . getAppComponent ( ) . injectService ( this ) ; }
public static int getResourceIdForRightDefaultFeedIcon ( ) { if ( ThemeChooser . getSelectedTheme ( ) . equals ( ThemeChooser . THEME . LIGHT ) ) { return R . drawable . default_feed_icon_dark ; } else { return R . drawable . default_feed_icon_light ; } }
public void onDrawerOpened ( View drawerView ) { super . onDrawerOpened ( drawerView ) ; reloadCountNumbersOfSlidingPaneAdapter ( ) ; syncState ( ) ; }
public void manualLogin ( ) { binding . oldLoginWrapper . setVisibility ( View . VISIBLE ) ; }
public void afterTextChanged ( Editable s ) { if ( s . toString ( ) . isEmpty ( ) ) { binding . imgViewShowPassword . setVisibility ( View . VISIBLE ) ; } }
public void btnAddFeedClick ( ) { InputMethodManager imm = ( InputMethodManager ) getSystemService ( Context . INPUT_METHOD_SERVICE ) ; imm . hideSoftInputFromWindow ( binding . etFeedUrl . getWindowToken ( ) , 0 ) ; attemptAddNewFeed ( ) ; }
public void onAnimationEnd ( Animator animation ) { binding . newFeedForm . setVisibility ( show ? View . GONE : View . VISIBLE ) ; }
public void onAnimationEnd ( Animator animation ) { binding . newFeedProgress . setVisibility ( show ? View . VISIBLE : View . GONE ) ; }
public void onResume ( ) { super . onResume ( ) ; resumeCurrentPage ( ) ; registerForContextMenu ( binding . webview ) ; }
private boolean isLastPageRssItem ( ) { WebBackForwardList list = binding . webview . copyBackForwardList ( ) ; WebHistoryItem lastItem = list . getItemAtIndex ( list . getCurrentIndex ( ) - 1 ) ; return lastItem != null && lastItem . getUrl ( ) . equals ( RSS_ITEM_PAGE_URL ) ; }
public void onError ( Throwable e ) { binding . pbLoading . setVisibility ( View . GONE ) ; Toast . makeText ( mActivity , e . getLocalizedMessage ( ) , Toast . LENGTH_LONG ) . show ( ) ; }
public RecyclerView getRecyclerView ( ) { return binding . list ; }
public int getFirstVisibleScrollPosition ( ) { LinearLayoutManager layoutManager = ( ( LinearLayoutManager ) binding . list . getLayoutManager ( ) ) ; return layoutManager . findFirstVisibleItemPosition ( ) ; }
public void onTopItemClicked ( long idFeed , boolean isFolder , Long optional_folder_id ) { if ( binding . drawerLayout != null ) binding . drawerLayout . closeDrawer ( GravityCompat . START ) ; updateDetailFragment ( idFeed , isFolder , optional_folder_id , true ) ; }
public void onChildItemClicked ( long idFeed , Long optional_folder_id ) { if ( binding . drawerLayout != null ) binding . drawerLayout . closeDrawer ( GravityCompat . START ) ; updateDetailFragment ( idFeed , false , optional_folder_id , true ) ; }
public void onPanelExpanded ( View view ) { if ( sliding_layout != null ) sliding_layout . setDragView ( binding . viewSwitcherProgress ) ; binding . viewSwitcherProgress . setDisplayedChild ( 1 ) ; }
public PodcastSlidingUpPanelLayout getSlidingLayout ( ) { return getPodcastSlidingUpPanelLayout ( ) ; }
private void collapsePodcastView ( ) { getPodcastSlidingUpPanelLayout ( ) . setPanelHeight ( 0 ) ; }
private void expandPodcastView ( ) { getPodcastSlidingUpPanelLayout ( ) . setPanelHeight ( ( int ) dipToPx ( 68 ) ) ; }
public void onEvent ( PodcastCompletedEvent podcastCompletedEvent ) { collapsePodcastView ( ) ; getPodcastSlidingUpPanelLayout ( ) . setPanelState ( SlidingUpPanelLayout . PanelState . COLLAPSED ) ; }
public void toggleReadStateOfItem ( RssItemViewHolder viewHolder ) { RssItem rssItem = viewHolder . getRssItem ( ) ; boolean isRead = ! rssItem . getRead_temp ( ) ; changeReadStateOfItem ( viewHolder , isRead ) ; }
public ProgressViewHolder ( View v ) { super ( v ) ; progressBar = v . findViewById ( R . id . progressBar ) ; }
public void onLoadingComplete ( String imageUri , View view , Bitmap loadedImage ) { DownloadFinished ( feed . getId ( ) , loadedImage , context ) ; }
public static SORT_DIRECTION getSortDirection ( SharedPreferences prefs ) { return DatabaseUtils . getSortDirectionFromSettings ( prefs ) ; }
public int icon ( ) { return BuffIndicator . MOONGRACE ; }
public Moongrace ( ) { imageIndex = 8 ; }
public void onPlus ( Selector s ) { Gizmo . isometricModeShift += 1 ; s . setText ( Utils . format ( "Shift : %d" , Gizmo . isometricModeShift ) ) ; }
public void onMinus ( Selector s ) { Gizmo . isometricModeShift -= 1 ; s . setText ( Utils . format ( "Shift : %d" , Gizmo . isometricModeShift ) ) ; }
public void onDefault ( Selector s ) { Gizmo . isometricModeShift = 0 ; s . setText ( Utils . format ( "Shift : %d" , Gizmo . isometricModeShift ) ) ; }
public static int isometricShift ( ) { if ( Dungeon . isIsometricMode ( ) ) { return isometricModeShift ; } return 0 ; }
public void setIsometricShift ( boolean isometricShift ) { if ( Dungeon . isIsometricMode ( ) ) { this . isometricShift = isometricShift ; } }
public void reactivate ( String kind , int uses ) { this . kind = kind ; this . uses = uses ; lo_sprite . ifPresent ( sprite -> sprite . reset ( image ( ) ) ) ; }
public void deactivate ( ) { uses = 0 ; lo_sprite . ifPresent ( sprite -> sprite . reset ( usedImage ( ) ) ) ; }
static public int getDecoTileForTerrain ( Level level , int cell , int terrain ) { return getTilemap ( TILES_X_DEFAULT_JSON ) . getDecoTileForTerrain ( cell , terrain ) ; }
public int image ( ) { return script . runOptional ( "image" , super . image ( ) , level ( ) ) ; }
public void onResume ( ) { super . onResume ( ) ; instance = this ; view . onResume ( ) ; gameLoop . onResume ( ) ; }
public static Resources getResources ( ) { return RemixedDungeonApp . getContext ( ) . getResources ( ) ; }
public void submitScores ( int level , int scores ) { if ( isConnected ( ) ) { Games . getLeaderboardsClient ( Game . instance ( ) , signedInAccount ) . submitScore ( StringsManager . getVar ( boards [ level ] ) , scores ) ; } }
public String status ( Char me ) { return Utils . format ( StringsManager . getVar ( R . string . Mob_StaControlledStatus ) , me . name ( ) ) ; }
public String status ( Char me ) { return Utils . format ( StringsManager . getVar ( R . string . Mob_StaWanderingStatus ) , me . getName ( ) ) ; }
public String status ( Char me ) { return Utils . format ( StringsManager . getVar ( R . string . Mob_StaPassiveStatus ) , me . getName ( ) ) ; }
public String status ( Char me ) { return Utils . format ( StringsManager . getVar ( R . string . Mob_StaAmokStatus ) , me . getName ( ) ) ; }
public String status ( Char me ) { return Utils . format ( StringsManager . getVar ( R . string . Mob_StaSleepingStatus ) , me . getName ( ) ) ; }
public String desc ( ) { return getClassParam ( "Info" , StringsManager . getVar ( R . string . Item_Info ) ) ; }
public String name ( ) { return getClassParam ( "Name" , StringsManager . getVar ( R . string . Item_Name ) ) ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . ChaosCrystal_Prompt ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . ChaosStaff_Name ) ; }
public String info ( ) { return StringsManager . getVar ( R . string . ChaosStaff_Info ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . RatKingCrownBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . RatKingCrownBuff_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfShadowbolt_Info ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . DarkVeilBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . DarkVeilBuff_Info ) ; }
public PseudoAmulet ( ) { image = ItemSpriteSheet . AMULET ; name = StringsManager . getVar ( R . string . Amulet_Name ) ; info = StringsManager . getVar ( R . string . Amulet_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfIcebolt_Info ) ; }
public String info ( ) { if ( activated ) { return StringsManager . getVar ( R . string . BlackSkull_Info_Awakened ) ; } else { return StringsManager . getVar ( R . string . BlackSkull_Info ) ; } }
public String name ( ) { if ( activated ) { return StringsManager . getVar ( R . string . BlackSkull_Name_Awakened ) ; } else { return StringsManager . getVar ( R . string . BlackSkull_Name ) ; } }
public String tileName ( int tile ) { switch ( tile ) { case Terrain . WATER : return StringsManager . getVar ( R . string . Prison_TileWater ) ; default : return super . tileName ( tile ) ; } }
public String desc ( ) { if ( ModdingMode . isHalloweenEvent ( ) ) { return StringsManager . getVar ( R . string . Barrel_Pumpkin_Desc ) ; } else { return StringsManager . getVar ( R . string . Barrel_Desc ) ; } }
public String name ( ) { if ( ModdingMode . isHalloweenEvent ( ) ) { return StringsManager . getVar ( R . string . Barrel_Pumpkin_Name ) ; } else { return StringsManager . getVar ( R . string . Barrel_Name ) ; } }
public String desc ( ) { return String . format ( StringsManager . getVar ( R . string . ConcreteBlock_Description ) , requiredStr ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . ConcreteBlock_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . LibraryBook_Description ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . LibraryBook_Name ) ; }
public String desc ( ) { if ( activated ) { return StringsManager . getVar ( R . string . PortalGate_Desc_Activated ) ; } return super . desc ( ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . CorpseDustBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . CorpseDustBuff_Info ) ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . Spell_SelectACell ) ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . Spell_SelectAChar ) ; }
public static String getMasteryTitleByAffinity ( String affinity ) { return Utils . getClassParam ( "Abilities" , affinity , StringsManager . getVar ( R . string . Abilities_Default ) , false ) ; }
private String getLimitWarning ( int limit ) { return Utils . format ( StringsManager . getVar ( R . string . Spells_SummonLimitReached ) , this . name ( ) , limit ) ; }
public String prompt ( ) { return Utils . capitalize ( Utils . format ( StringsManager . getVar ( R . string . Mob_ReadyForOrder ) , target . getName ( ) ) ) ; }
public String getDescription ( ) { return Utils . format ( StringsManager . getVar ( R . string . GoldenStatue_Desc ) , getItem ( ) . name ( ) ) ; }
public String defenseVerb ( ) { return StringsManager . getVar ( R . string . Ghost_Defense ) ; }
private void reportError ( ) { GameLoop . addToScene ( new WndError ( StringsManager . getVar ( R . string . SociologistNPC_DownloadError ) ) ) ; }
public String tileName ( int tile ) { switch ( tile ) { case Terrain . UNLOCKED_EXIT : case Terrain . LOCKED_EXIT : return StringsManager . getVar ( R . string . PortalGate_Name ) ; default : return super . tileName ( tile ) ; } }
public void hide ( ) { if ( ! consentChoosen ) { Game . toast ( StringsManager . getVar ( R . string . gdpr_choose ) ) ; } else { super . hide ( ) ; } }
private String moveTimeoutText ( ) { return String . format ( StringsManager . getVar ( R . string . WndSettings_moveTimeout ) , Double . toString ( GamePreferences . getMoveTimeout ( ) /1000 ) ) ; }
public void showBuyWnd ( ) { GameScene . show ( new WndBag ( shopkeeper . getBelongings ( ) , backpack , new BuyItemSelector ( shopkeeper ) , WndBag . Mode . FOR_BUY , StringsManager . getVar ( R . string . Shopkeeper_Buy ) ) ) ; }
private String orientationText ( ) { return RemixedDungeon . landscape ( ) ? StringsManager . getVar ( R . string . WndSettings_SwitchPort ) : StringsManager . getVar ( R . string . WndSettings_SwitchLand ) ; }
public void text ( int id ) { text ( StringsManager . getVar ( id ) ) ; }
public static void add ( int featureResourceId ) { add ( StringsManager . getVar ( featureResourceId ) ) ; }
public static void remove ( int featureResourceId ) { remove ( StringsManager . getVar ( featureResourceId ) ) ; }
public static String getDescription ( Reason reason ) { if ( ! descriptionsMap . containsKey ( reason ) ) { reason = Reason . UNKNOWN ; } return StringsManager . getVar ( descriptionsMap . get ( reason ) ) ; }
public void yell ( String str ) { GLog . n ( StringsManager . getVar ( R . string . Mob_Yell ) , getName ( ) , StringsManager . maybeId ( str ) ) ; }
public String defenseVerb ( ) { if ( defenceVerb != null ) { return defenceVerb ; } return StringsManager . getVars ( R . array . Char_StaDodged ) [ gender ] ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . ConfusionGas_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . Darkness_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . Fire_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . Foliage_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . ParalyticGas_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . ToxicGas_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . WaterOfAwareness_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . WaterOfHealth_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . WaterOfTransmutation_Info ) ; }
public String tileDesc ( ) { return StringsManager . getVar ( R . string . Web_Info ) ; }
public String actionText ( Item srcItem ) { return Utils . format ( StringsManager . getVar ( R . string . Burning_Burns ) , srcItem . toString ( ) ) ; }
public String actionText ( Item srcItem ) { if ( srcItem instanceof Potion ) { return Utils . format ( StringsManager . getVar ( R . string . Frost_Shatter ) , srcItem . toString ( ) ) ; } return null ; }
public String name ( ) { if ( hungerLevel < STARVING ) { return StringsManager . getVar ( R . string . HungerBuff_Name1 ) ; } else { return StringsManager . getVar ( R . string . HungerBuff_Name2 ) ; } }
public String desc ( ) { if ( hungerLevel < STARVING ) { return StringsManager . getVar ( R . string . HungerBuff_Info1 ) ; } else { return StringsManager . getVar ( R . string . HungerBuff_Info2 ) ; } }
public void rest ( boolean tillHealthy ) { spendAndNext ( TIME_TO_REST ) ; if ( ! tillHealthy ) { getSprite ( ) . showStatus ( CharSprite . DEFAULT , StringsManager . getVar ( R . string . Hero_Wait ) ) ; } restoreHealth = tillHealthy ; }
public void onAttackComplete ( ) { super . onAttackComplete ( ) ; AttackIndicator . target ( getEnemy ( ) ) ; setEnemy ( CharsList . DUMMY ) ; }
public static String getHeroYouNowHave ( ) { return StringsManager . getVar ( R . string . Hero_YouNowHave ) ; }
public String title ( ) { return StringsManager . getVar ( titleId ) ; }
public String desc ( ) { return StringsManager . getVar ( descId ) ; }
public void notice ( ) { super . notice ( ) ; yell ( StringsManager . getVar ( R . string . DM300_Info3 ) ) ; }
public void notice ( ) { super . notice ( ) ; yell ( StringsManager . getVar ( R . string . Goo_Info3 ) ) ; }
public void notice ( ) { super . notice ( ) ; yell ( StringsManager . getVar ( R . string . King_Info3 ) ) ; }
public void notice ( ) { super . notice ( ) ; yell ( StringsManager . getVar ( R . string . Yog_Info2 ) ) ; }
public String getDescription ( ) { return StringsManager . getVar ( R . string . Yog_Desc ) ; }
public String defenseVerb ( ) { return StringsManager . getVar ( R . string . Imp_Defense ) ; }
public void flee ( ) { say ( Utils . format ( StringsManager . getVar ( R . string . Imp_Cya ) , Dungeon . hero . className ( ) ) ) ; destroy ( ) ; getSprite ( ) . die ( ) ; }
public void sayRandomPhrase ( int . . . phrases ) { int index = Random . Int ( 0 , phrases . length ) ; say ( StringsManager . getVar ( phrases [ index ] ) ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . WandMaker_RotberryName ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandMaker_RotberryDesc ) ; }
public void equippedCursed ( ) { GLog . n ( StringsManager . getVar ( R . string . KindOfWeapon_EquipCursed ) , name ( ) ) ; }
public void doDrop ( @ NotNull Char chr ) { chr . spend ( TIME_TO_DROP ) ; int pos = chr . getPos ( ) ; chr . level ( ) . animatedDrop ( detachAll ( chr . getBelongings ( ) . backpack ) , pos ) ; }
public LloydsBeacon ( ) { image = ItemSpriteSheet . BEACON ; returnTo . cellId = - 1 ; name = StringsManager . getVar ( R . string . LloidsBeacon_Name ) ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . Item_DirThrow ) ; }
public String toString ( ) { return isLevelKnown ( ) ? Utils . format ( StringsManager . getVar ( R . string . Armor_ToString ) , super . toString ( ) , requiredSTR ( ) ) : super . toString ( ) ; }
public void equippedCursed ( ) { GLog . n ( StringsManager . getVar ( R . string . Armor_EquipCursed ) , name ( ) ) ; }
public String name ( ) { return name ( StringsManager . getVar ( R . string . Armor_Glyph ) ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . ClothArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . ElfArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . GnollArmor_Info ) ; }
public void call ( ) { user . attack ( targets . get ( this ) ) ; targets . remove ( this ) ; if ( targets . isEmpty ( ) ) { user . spend ( user . attackDelay ( ) ) ; } }
public String desc ( ) { return StringsManager . getVar ( R . string . HuntressArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . LeatherArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . MageArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . MailArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PlateArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . RogueArmor_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . ScaleArmor_Desc ) ; }
public ScoutArmor ( ) { name = StringsManager . getVar ( R . string . ElfArmor_Name ) ; image = 18 ; hasHelmet = false ; }
public ShamanArmor ( ) { name = StringsManager . getVar ( R . string . ElfArmor_Name ) ; image = 19 ; hasHelmet = true ; coverHair = true ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . RogueArmor_Prompt ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WarriorArmor_Desc ) ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . WarriorArmor_Prompt ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Affection_Txt ) , weaponName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . AntiEntropy_Txt ) , weaponName ) ; }
public String name ( String armorName ) { return Utils . format ( StringsManager . getVar ( R . string . Bounce_Txt ) , armorName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Displacement_Txt ) , weaponName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Entanglement_Txt ) , weaponName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Metabolism_Txt ) , weaponName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Multiplicity_Txt ) , weaponName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Potential_Txt ) , weaponName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Stench_Txt ) , weaponName ) ; }
public String name ( String weaponName ) { return Utils . format ( StringsManager . getVar ( R . string . Viscosity_Txt ) , weaponName ) ; }
public String toString ( ) { return Utils . format ( StringsManager . getVar ( R . string . IronKey_FromDepth ) , getDepth ( ) ) ; }
public void shatter ( int cell ) { GLog . i ( Utils . format ( StringsManager . getVar ( R . string . Potion_Shatter ) , color ( ) ) ) ; Sample . INSTANCE . play ( Assets . SND_SHATTER ) ; splash ( cell ) ; }
public String name ( ) { return isKnown ( ) ? name : Utils . format ( StringsManager . getVar ( R . string . Potion_Name ) , color ) ; }
public String info ( ) { return isKnown ( ) ? desc ( ) : Utils . format ( StringsManager . getVar ( R . string . Potion_Info ) , color ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfExperience_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfFrost_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfHealing_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfInvisibility_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfLevitation_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfLiquidFlame_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . ManaPotion_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfMight_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfMindVision_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfParalyticGas_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfPurity_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfStrength_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . PotionOfToxicGas_Info ) ; }
public String info ( ) { return super . info ( ) + "\n\n" + StringsManager . getVar ( R . string . CorpseDust_Info2 ) ; }
public String info ( ) { return super . info ( ) + "\n\n" + StringsManager . getVar ( R . string . DriedRose_Info2 ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . DriedRoseBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . DriedRoseBuff_Info ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . DriedRoseCursedBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . DriedRoseCursedBuff_Info ) ; }
public String info ( ) { return StringsManager . getVar ( R . string . Pickaxe_Info ) ; }
public String info ( ) { return super . info ( ) + "\n\n" + StringsManager . getVar ( R . string . RatSkull_Info2 ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . RatSkullBuff_Name ) ; }
public void equippedCursed ( ) { GLog . n ( Utils . format ( StringsManager . getVar ( R . string . Ring_Info2 ) , name ( ) ) ) ; }
public void syncGem ( ) { image = handler . index ( this ) ; gem = StringsManager . getVars ( R . array . Ring_Gems ) [ ItemStatusHandler . indexByImage ( image , images ) ] ; }
public String name ( ) { return isKnown ( ) ? name : Utils . format ( StringsManager . getVar ( R . string . Ring_Name ) , gem ) ; }
public String desc ( ) { return Utils . format ( StringsManager . getVar ( R . string . Ring_Info ) , gem ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfAccuracy_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfDetection_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfElements_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfEvasion_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfHaggler_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfHaste_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfHerbalism_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfMending_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfPower_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfSatiety_Info ) : super . desc ( ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfShadows_Info ) : super . desc ( ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . StoneBloodBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . StoneBloodBuff_Info ) ; }
public String desc ( ) { return isKnown ( ) ? StringsManager . getVar ( R . string . RingOfThorns_Info ) : super . desc ( ) ; }
public String name ( ) { return isKnown ( ) ? name : Utils . format ( StringsManager . getVar ( R . string . Scroll_Name ) , rune ) ; }
public String info ( ) { return isKnown ( ) ? desc ( ) : Utils . format ( StringsManager . getVar ( R . string . Scroll_Info ) , rune ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . ScrollOfTerror_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfAmok_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfAvalanche_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfBlink_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfDisintegration_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfFirebolt_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfFlock_Info ) ; }
public boolean interact ( final Char hero ) { say ( Random . element ( StringsManager . getVars ( R . array . WandOfFlock_SheepBaa ) ) ) ; return false ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfLightning_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfMagicMissile_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfPoison_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfRegrowth_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfSlowness_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfTelekinesis_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WandOfTeleportation_Info ) ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . Wand_Prompt ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . BattleAxe_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Glaive_Info ) ; }
public String info ( ) { return StringsManager . getVar ( R . string . Bow_Info1 ) + desc ( ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Knuckles_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Longsword_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Quarterstaff_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . ShortSword_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Spear_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Sword_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . WarHammer_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Javelin_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Shuriken_Info ) ; }
public String tileDesc ( int tile ) { switch ( tile ) { case Terrain . EMPTY_DECO : return StringsManager . getVar ( R . string . Prison_TileDescDeco ) ; default : return super . tileDesc ( tile ) ; } }
public String tileName ( int tile ) { switch ( tile ) { case Terrain . WATER : return StringsManager . getVar ( R . string . Sewer_TileWater ) ; default : return super . tileName ( tile ) ; } }
public String tileDesc ( int tile ) { switch ( tile ) { case Terrain . EMPTY_DECO : return StringsManager . getVar ( R . string . Sewer_TileDescDeco ) ; default : return super . tileDesc ( tile ) ; } }
public String desc ( ) { return StringsManager . getVar ( R . string . Dreamweed_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Earthroot_Desc ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . EarthrootBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . EarthrootBuff_Info ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Fadeleaf_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Firebloom_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Icecap_Desc ) ; }
public String info ( ) { return Utils . format ( StringsManager . getVar ( R . string . Plant_Info ) , Utils . indefinite ( plantName ) , desc ( ) ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Sorrowmoss_Desc ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . Sungrass_Desc ) ; }
public String name ( ) { return StringsManager . getVar ( R . string . SungrassBuff_Name ) ; }
public String desc ( ) { return StringsManager . getVar ( R . string . SungrassBuff_Info ) ; }
private static String getTRN ( ) { return StringsManager . getVar ( R . string . AboutScene_Translation ) + "\n\t" + StringsManager . getVar ( R . string . AboutScene_Translation_Names ) ; }
public void kill ( ) { removeAllStates ( ) ; super . kill ( ) ; }
public String prompt ( ) { return StringsManager . getVar ( R . string . Toolbar_Info2 ) ; }
public RedButton ( int labelStringId ) { this ( StringsManager . getVar ( labelStringId ) ) ; }
public WndError ( String message ) { super ( Icons . WARNING . get ( ) , StringsManager . getVar ( R . string . WndError_Title ) , message ) ; }
public WndQuest ( Char questgiver , int . . . phrases ) { this ( questgiver , StringsManager . getVar ( phrases [ Random . Int ( 0 , phrases . length ) ] ) ) ; }
private void reportError ( ) { hide ( ) ; GameLoop . addToScene ( new WndError ( StringsManager . getVar ( R . string . WndRanking_Error ) + "\n" + error ) ) ; }
public WndSaveSlotSelect ( final boolean _saving ) { this ( _saving , StringsManager . getVar ( R . string . WndSaveSlotSelect_SelectSlot ) ) ; }
private static String windowText ( ) { if ( GamePreferences . donated ( ) == 0 && RemixedDungeon . canDonate ( ) ) { return StringsManager . getVar ( R . string . WndSaveSlotSelect_dontLike ) ; } return Utils . EMPTY_STRING ; }
public void doOperate ( float time , int cell ) { spend ( time ) ; getSprite ( ) . operate ( cell ) ; if ( Dungeon . realtime ( ) ) { onOperateComplete ( ) ; } }
public void say ( String str ) { GLog . i ( StringsManager . getVar ( R . string . Mob_Yell ) , getName ( ) , StringsManager . maybeId ( str ) ) ; }
public void yell ( String str , int index ) { GLog . n ( StringsManager . getVar ( R . string . Mob_Yell ) , getName ( ) , StringsManager . maybeId ( str , index ) ) ; }
public boolean haveIt ( ) { return GamePreferences . donated ( ) == 4 || Preferences . INSTANCE . getString ( prefProperty ( ) , Utils . EMPTY_STRING ) . equals ( getClass ( ) . getSimpleName ( ) ) ; }
public int defenseProc ( Char enemy , int damage ) { CharUtils . spawnOnNextCell ( this , "Larva" , ( int ) ( 10 * GameLoop . getDifficultyFactor ( ) ) ) ; return super . defenseProc ( enemy , damage ) ; }
static public void titleScene ( ) { GameLoop . switchScene ( TitleScene . class ) ; }
private void update ( Selector s ) { GamePreferences . moveTimeout ( selectedTimeout ) ; s . setText ( moveTimeoutText ( ) ) ; }
public void onPlus ( Selector s ) { selectedTimeout = GamePreferences . limitTimeoutIndex ( selectedTimeout + 1 ) ; update ( s ) ; }
public void onMinus ( Selector s ) { selectedTimeout = GamePreferences . limitTimeoutIndex ( selectedTimeout - 1 ) ; update ( s ) ; }
public void onPlus ( Selector s ) { GamePreferences . quickSlots ( Math . abs ( GamePreferences . quickSlots ( ) ) + 1 ) ; }
public void onMinus ( Selector s ) { GamePreferences . quickSlots ( Math . max ( Math . abs ( GamePreferences . quickSlots ( ) ) - 1 , 0 ) ) ; }
public void onDefault ( Selector s ) { GamePreferences . quickSlots ( - 1 ) ; }
public void onPlus ( Selector s ) { GamePreferences . fontScale ( GamePreferences . fontScale ( ) + 1 ) ; s . regen ( ) ; }
public void onMinus ( Selector s ) { GamePreferences . fontScale ( GamePreferences . fontScale ( ) - 1 ) ; s . regen ( ) ; }
public void onDefault ( Selector s ) { GamePreferences . fontScale ( 0 ) ; s . regen ( ) ; }
public void update ( ) { super . update ( ) ; if ( ( left -= GameLoop . elapsed ) <= 0 ) { kill ( ) ; } }
public void update ( ) { elapsed += GameLoop . elapsed ; if ( elapsed >= interval ) { updateValues ( 1 ) ; onComplete ( ) ; kill ( ) ; } else { updateValues ( elapsed / interval ) ; } }
static public String buildSlotFromTag ( String tag ) { return ModdingMode . activeMod ( ) + "_" + tag + "_" + GameLoop . getDifficulty ( ) ; }
private int maxArmySize ( ) { return ( int ) ( 1 + MAX_ARMY_SIZE * ( ht ( ) - hp ( ) ) / ht ( ) * GameLoop . getDifficultyFactor ( ) ) ; }
public void update ( ) { super . update ( ) ; left -= GameLoop . elapsed ; if ( left <= 0 ) { kill ( ) ; } else { float p = 1 - left / lifespan ; updateByEvolutionType ( p ) ; } }
private void showAmuletScene ( boolean showText ) { Dungeon . save ( false ) ; AmuletScene . noText = ! showText ; GameLoop . switchScene ( AmuletScene . class ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; GameLoop . switchScene ( TitleScene . class ) ; }
public void update ( ) { super . update ( ) ; if ( brightness < 1 . 0f && brightness > MIN_BRIGHTNESS ) { if ( ( brightness -= GameLoop . elapsed ) <= MIN_BRIGHTNESS ) { brightness = MIN_BRIGHTNESS ; } updateBrightness ( ) ; } }
public void update ( ) { if ( needUpdate ) { needUpdate = false ; text2 . text ( GamePreferences . activeMod ( ) ) ; } super . update ( ) ; }
private void updateSlotBySelection ( ) { selectItem ( objectForSlot , index ) ; objectForSlot = null ; GameLoop . scene ( ) . remove ( prompt ) ; }
public void hide ( ) { super . hide ( ) ; GamePreferences . activeMod ( prevMod ) ; }
public void onBackPressed ( ) { hide ( ) ; GameLoop . addToScene ( new WndModSelect ( ) ) ; }
public void onBackPressed ( ) { hide ( ) ; GameLoop . resetScene ( ) ; }
public void onBackPressed ( ) { super . onBackPressed ( ) ; GameLoop . resetScene ( ) ; }
public static void showCustomStory ( @ NotNull String text ) { GameLoop . addToScene ( new WndStory ( text ) ) ; }
public Tool ( int index , Chrome . Type chrome ) { this ( Size . valueOf ( GamePreferences . toolStyle ( ) ) , index , chrome ) ; }
public static float speed ( float speed , float acc ) { return speed + acc * GameLoop . elapsed ; }
public void deactivate ( @ NotNull Char ch ) { script . run ( "deactivate" , ch ) ; super . deactivate ( ch ) ; }
public void deactivate ( @ NotNull Char ch ) { equipedTo = Belongings . Slot . NONE ; Buff . detachAllBySource ( ch , this ) ; }
public Glowing glowing ( ) { return ( type == Type . HEAP ) && items . size ( ) > 0 ? items . peek ( ) . glowing ( ) : null ; }
public Glowing glowing ( ) { return new Glowing ( 0x00FFFF ) ; }
public Glowing glowing ( ) { return null ; }
public Glowing glowing ( ) { return glyph != null ? glyph . glowing ( ) : null ; }
public Glowing glowing ( ) { return Glowing . WHITE ; }
public Glowing glowing ( ) { return getEnchantment ( ) != null ? getEnchantment ( ) . glowing ( ) : null ; }
public boolean attachTo ( @ NotNull Char target ) { if ( target . immunities ( ) . contains ( getEntityKind ( ) ) ) { return false ; } this . target = target ; return target . add ( this ) ; }
public Item quickSlotContent ( ) { if ( ! stackable ) { return this ; } if ( quantity ( ) > 0 ) { return this ; } return ItemFactory . virtual ( this ) ; }
public int defenseSkill ( Char enemy ) { float skillFactor = 1 ; if ( getDifficulty ( ) == 0 ) { skillFactor * = 1 . 2f ; } return ( int ) ( super . defenseSkill ( enemy ) * skillFactor ) ; }
public void act ( @ NotNull Mob me ) { script . run ( "act" , me ) ; }
public void onDie ( @ NotNull Mob me ) { }
public void act ( @ NotNull Mob me ) { if ( ! me . doStepTo ( me . getTarget ( ) ) ) { me . setState ( getStateByClass ( Hunting . class ) ) ; } }
public void detach ( ) { deactivateActor ( ) ; target . remove ( this ) ; }
public String textureLarge ( ) { return Assets . BUFFS_LARGE ; }
public static void unequip ( ) { Preferences . INSTANCE . put ( Accessory . class . getSimpleName ( ) , Utils . EMPTY_STRING ) ; Dungeon . hero . updateSprite ( ) ; }
public ConcreteBlock ( int pos ) { super ( pos ) ; imageIndex = 0 ; }
public void burn ( ) { remove ( ) ; level ( ) . set ( getPos ( ) , Terrain . EMBERS ) ; GameScene . discoverTile ( getPos ( ) ) ; }
public String desc ( ) { return level ( ) . tileDesc ( Terrain . SIGN ) ; }
public String name ( ) { return level ( ) . tileName ( Terrain . SIGN ) ; }
public int image ( ) { return 16 ; }
public int spellCost ( ) { if ( spellCost == 0 ) { ModError . doReport ( "Spell cost for " + getEntityKind ( ) + "must be > 1" , new Exception ( "spell cost is 0" ) ) ; spellCost = 1 ; } return spellCost ; }
public float getCooldownFactor ( Char chr ) { float chrCooldown = chr . spellCooldown ( getEntityKind ( ) ) ; if ( chrCooldown > cooldown ) { return 1 ; } return chrCooldown/cooldown ; }
public static boolean hasSpellForName ( String name ) { if ( getSpellsList ( ) . get ( name ) != null ) { return true ; } return script . run ( "haveSpell" , name ) . checkboolean ( ) ; }
public void doAttack ( Char enemy ) { if ( timeToJump ) { jump ( ) ; } super . doAttack ( enemy ) ; }
public static @ NotNull Position descend ( Position current ) { return descendOrAscend ( current , true ) ; }
private float childsWidth ( ) { float childsWidth = 0 ; for ( Gizmo g : members ) { if ( g instanceof IPlaceable ) { childsWidth += ( ( IPlaceable ) g ) . width ( ) + gap ; } } return childsWidth ; }
static public boolean unzip ( String zipFile , String tgtDir , @ Nullable UnzipStateListener listener ) { try { return unzipStream ( new FileInputStream ( zipFile ) , tgtDir , listener ) ; } catch ( FileNotFoundException e ) { return false ; } }
public boolean shoot ( Char enemy , MissileWeapon wep ) { rangedWeapon = wep ; boolean result = attack ( enemy ) ; rangedWeapon = ItemsList . DUMMY ; return result ; }
public boolean bowEquipped ( ) { return getItemFromSlot ( Belongings . Slot . WEAPON ) instanceof KindOfBow ; }
public int dr ( ) { return getItemFromSlot ( Belongings . Slot . ARMOR ) . effectiveDr ( ) ; }
public EquipableItem getActiveWeapon ( ) { if ( rangedWeapon . valid ( ) ) { return rangedWeapon ; } return getItemFromSlot ( Belongings . Slot . WEAPON ) ; }
public EquipableItem getSecondaryWeapon ( ) { EquipableItem leftItem = getItemFromSlot ( Belongings . Slot . LEFT_HAND ) ; if ( leftItem . goodForMelee ( ) ) { return leftItem ; } return ItemsList . DUMMY ; }
public String name ( ) { return getName ( ) ; }
public int dr ( ) { return Math . max ( getItemFromSlot ( Belongings . Slot . ARMOR ) . effectiveDr ( ) , 0 ) ; }
public boolean getFurther ( int target ) { if ( level ( ) . distance ( getPos ( ) , target ) > 2 ) { setState ( MobAi . getStateByClass ( Hunting . class ) ) ; } return super . getFurther ( target ) ; }
public String getVisualName ( ) { return getEntityKind ( ) ; }
public boolean usableByHero ( ) { return quantity ( ) >= 1 && ( Dungeon . hero . getItem ( getEntityKind ( ) ) . valid ( ) || isEquipped ( Dungeon . hero ) ) ; }
public boolean grab ( @ NotNull Item item ) { return getOwner ( ) . useBags ( ) && item . bag ( ) . equals ( getEntityKind ( ) ) ; }
public void attackProc ( Char attacker , Char defender , int damage ) { Buff . prolong ( defender , Paralysis . class , DURATION ) ; super . attackProc ( attacker , defender , damage ) ; }
public static final Item CHEST = new PseudoItem ( ) { public int image ( ) { return ItemSpriteSheet . CHEST ; } } ;
public static final Item LOCKED_CHEST = new PseudoItem ( ) { public int image ( ) { return ItemSpriteSheet . LOCKED_CHEST ; } } ;
public static final Item TOMB = new PseudoItem ( ) { public int image ( ) { return ItemSpriteSheet . TOMB ; } } ;
public static final Item SKELETON = new PseudoItem ( ) { public int image ( ) { return ItemSpriteSheet . BONES ; } } ;
public void onAdDismissedFullScreenContent ( ) { mInterstitialAd = null ; requestNewInterstitial ( ) ; ret . returnToWork ( true ) ; }
public Lightning ( int from , int to , Callback callback ) { int [ ] cells = new int [ 2 ] ; cells [ 0 ] = from ; cells [ 1 ] = to ; init ( cells , callback ) ; }
public BuyItemSelector ( Char shopkeeper ) { this . shopkeeper = shopkeeper ; }
public SellItemSelector ( Char shopkeeper ) { this . shopkeeper = shopkeeper ; }
public void destroy ( ) { super . destroy ( ) ; slots . clear ( ) ; lastItem = null ; lastTarget = CharsList . DUMMY ; }
public void onSortSelected ( final PostSort order ) { controller . setSort ( order ) ; requestRefresh ( RefreshableFragment . POSTS , false ) ; invalidateOptionsMenu ( ) ; }
public void onSortSelected ( final PostCommentSort order ) { controller . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public void onSortSelected ( final UserCommentSort order ) { controller . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public void onSortSelected ( final PostCommentSort order ) { commentListingController . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public void onSortSelected ( final UserCommentSort order ) { commentListingController . setSort ( order ) ; requestRefresh ( RefreshableFragment . COMMENTS , false ) ; }
public void onSortSelected ( final PostCommentSort order ) { }
public void onSortSelected ( final UserCommentSort order ) { }
private PostCommentSort defaultOrder ( ) { return PrefsUtility . pref_behaviour_commentsort ( ) ; }
private UserCommentSort defaultUserOrder ( ) { return PrefsUtility . pref_behaviour_user_commentsort ( ) ; }
public void setSort ( final PostCommentSort s ) { if ( mUrl . pathType ( ) == RedditURLParser . POST_COMMENT_LISTING_URL ) { mUrl = mUrl . asPostCommentListURL ( ) . order ( s ) ; } }
public void setSort ( final UserCommentSort s ) { if ( mUrl . pathType ( ) == RedditURLParser . USER_COMMENT_LISTING_URL ) { mUrl = mUrl . asUserCommentListURL ( ) . order ( s ) ; } }
public PostCommentListingURL order ( final PostCommentSort order ) { return new PostCommentListingURL ( after , postId , commentId , context , limit , order ) ; }
public UserCommentListingURL order ( final UserCommentSort newOrder ) { return new UserCommentListingURL ( user , newOrder , limit , after ) ; }
public void run ( ) { RedditChangeDataIO . getInstance ( RedReader . this ) . runInitialReadInThisThread ( ) ; RedditChangeDataManager . pruneAllUsersDefaultMaxAge ( ) ; }
public void run ( ) { RedditChangeDataManager . pruneAllUsersDefaultMaxAge ( ) ; CacheManager . getInstance ( context ) . pruneCache ( ) ; }
public static void pruneAllUsersDefaultMaxAge ( ) { pruneAllUsersWhereOlderThan ( PrefsUtility . pref_cache_maxage_entry ( ) ) ; }
public static String formatDateTimeFilenameSafe ( final long utcMs ) { final DateTime dateTime = new DateTime ( utcMs ) ; final DateTime localDateTime = dateTime . withZone ( DateTimeZone . getDefault ( ) ) ; return dtFormatterFilename . print ( localDateTime ) ; }
public boolean isMinScale ( ) { return mCoordinateHelper . getScale ( ) - 0 . 000_001f <= mMinScale ; }
public boolean isAnonymous ( ) { return username . isEmpty ( ) ; }
public void stopPlaying ( ) { playing = false ; interrupt ( ) ; try { is . close ( ) ; } catch ( final Throwable t ) { Log . e ( TAG , "Exception while stopping" , t ) ; } }
public SubredditCanonicalId getKey ( ) { try { return getCanonicalId ( ) ; } catch ( final InvalidSubredditNameException e ) { throw new RuntimeException ( String . format ( Locale . US , "Cannot save subreddit '%s'" , url ) , e ) ; } }
public < E extends JsonDeserializable > E asObject ( final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { final E obj = clazz . getConstructor ( ) . newInstance ( ) ; populateObject ( obj ) ; return obj ; }
public < E extends JsonObject . JsonDeserializable > E asObject ( final Class < E > clazz ) throws InstantiationException , IllegalAccessException , NoSuchMethodException , InvocationTargetException { return null ; }
public RRError asError ( final Context context ) { return General . getGeneralErrorForFailure ( context , requestFailureType , t , statusLine , url , body ) ; }
private void updateUploadButtonVisibility ( ) { mUploadButton . setVisibility ( mImageData != null ? View . VISIBLE : View . GONE ) ; }
public static synchronized void handleGlobalError ( final Context context , final String text ) { handleGlobalError ( context , new RRError ( text , null , true , new RuntimeException ( ) ) ) ; }
public boolean onOptionsItemSelected ( @ NonNull final MenuItem item ) { if ( mFragment != null ) { if ( mFragment . onOptionsItemSelected ( item ) ) { return true ; } } return super . onOptionsItemSelected ( item ) ; }
public boolean onOptionsItemSelected ( @ NonNull final MenuItem item ) { if ( mFragment != null && mFragment . onOptionsItemSelected ( item ) ) { return true ; } return super . onOptionsItemSelected ( item ) ; }
public VH onCreateViewHolder ( @ NonNull final ViewGroup parent , final int viewType ) { switch ( viewType ) { case TYPE_HEADER : return onCreateHeaderItemViewHolder ( parent ) ; case TYPE_CONTENT : return onCreateContentItemViewHolder ( parent ) ; default : throw new IllegalStateException ( ) ; } }
public void onBindViewHolder ( @ NonNull final VH holder , final int position ) { if ( position == 0 ) { onBindHeaderItemViewHolder ( holder , position ) ; } else { onBindContentItemViewHolder ( holder , position - HEADER_SIZE ) ; } }
public static void handleFirstInstall ( @ NonNull final SharedPrefsWrapper sharedPrefs ) { for ( final FeatureFlag flag : FeatureFlag . values ( ) ) { setFeatureFlag ( sharedPrefs , flag ) ; } }
public void handleMessage ( @ NonNull final Message msg ) { if ( playing && view != null ) { view . setImageBitmap ( ( Bitmap ) msg . obj ) ; } }
public static String stripUserPrefix ( final String name ) { final Matcher matcher = USER_PATTERN . matcher ( name ) ; if ( matcher . matches ( ) ) { return matcher . group ( 2 ) ; } else { return null ; } }
public void handleInboxLongClick ( final BaseActivity activity ) { handleInboxClick ( activity ) ; }
public void onDownloadCompleted ( ) { if ( downloadCallback != null ) { downloadCallback . onCourseContentDownloaded ( ) ; } }
public String getSelection ( ) { return mSelectedItem != null ? mSelectedItem . getLabel ( ) : null ; }
public Nomenclature getSelectedItem ( ) { return mSelectedItem != null ? mSelectedItem . getNomenclature ( ) : null ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createBirds ( data ) ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createCbm ( data ) ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createCiconia ( data ) ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createHerptile ( data ) ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createInvertebrates ( data ) ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createMammal ( data ) ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createPlants ( data ) ; }
public Call < UploadFormResponse > upload ( SmartBirdsApi api , JsonObject data ) { return api . createThreats ( data ) ; }
private void playMusicByPosition ( int position ) { playMusicByPosition ( position , 0 , true , false ) ; }
public boolean shouldOverrideUrlLoading ( WebView view , String url ) { ContextHelper . launchWebUrl ( view . getContext ( ) , url ) ; return true ; }
public boolean shouldOverrideUrlLoading ( WebView view , WebResourceRequest request ) { ContextHelper . launchWebUrl ( view . getContext ( ) , request . getUrl ( ) . toString ( ) ) ; return true ; }
public void updateHighlights ( ) { if ( ssReadHighlights != null ) { ssReadViewBridge . setHighlights ( ssReadHighlights . getHighlights ( ) ) ; } }
public void updateComments ( ) { if ( ssReadComments != null ) { ssReadViewBridge . setComments ( ssReadComments . getComments ( ) ) ; } }
public ActionMode startActionMode ( ActionMode . Callback callback ) { contextMenuCallback . onSelectionStarted ( lastTouchX , lastTouchY ) ; contextMenuShown = true ; return this . emptyActionMode ( ) ; }
public void onLongPress ( MotionEvent event ) { if ( contextMenuShown ) contextMenuCallback . onSelectionStarted ( lastTouchX , lastTouchY ) ; }
public void onPageFinished ( WebView view , String url ) { super . onPageFinished ( view , url ) ; updateHighlights ( ) ; updateComments ( ) ; }
public void setViewRoot ( @ Nullable View viewRoot ) { mViewRoot = viewRoot ; }
public void setViewRoot ( @ Nullable View viewRoot ) { mAlert . setViewRoot ( viewRoot ) ; }
public @ NonNull DynamicDialogFragment setButtonColor ( @ ColorInt int buttonColor ) { this . mButtonColor = buttonColor ; return this ; }
public @ NonNull DynamicDialogFragment setIsCancelable ( boolean cancelable ) { this . mIsCancelable = cancelable ; setCancelable ( cancelable ) ; return this ; }
public @ NonNull DynamicDialogFragment setAutoDismiss ( boolean autoDismiss ) { this . mAutoDismiss = autoDismiss ; return this ; }
public void setCustomTitle ( @ Nullable View customTitleView ) { mAlert . setCustomTitle ( customTitleView ) ; }
public void setView ( @ Nullable View view ) { mAlert . setView ( view ) ; }
public Builder setPositiveButtonIcon ( @ Nullable Drawable icon ) { P . mPositiveButtonIcon = icon ; return this ; }
public Builder setNegativeButtonIcon ( @ Nullable Drawable icon ) { P . mNegativeButtonIcon = icon ; return this ; }
public Builder setNeutralButtonIcon ( @ Nullable Drawable icon ) { P . mNeutralButtonIcon = icon ; return this ; }
public Builder setOnCancelListener ( @ Nullable OnCancelListener onCancelListener ) { P . mOnCancelListener = onCancelListener ; return this ; }
public Builder setOnDismissListener ( @ Nullable OnDismissListener onDismissListener ) { P . mOnDismissListener = onDismissListener ; return this ; }
public Builder setOnKeyListener ( @ Nullable OnKeyListener onKeyListener ) { P . mOnKeyListener = onKeyListener ; return this ; }
public Builder setItems ( @ ArrayRes int itemsId , @ Nullable final OnClickListener listener ) { P . mItems = P . mContext . getResources ( ) . getTextArray ( itemsId ) ; P . mOnClickListener = listener ; return this ; }
public Builder setView ( @ LayoutRes int layoutResId ) { P . mView = null ; P . mViewLayoutResId = layoutResId ; P . mViewSpacingSpecified = false ; return this ; }
public Builder setView ( @ Nullable View view ) { P . mView = view ; P . mViewLayoutResId = 0 ; P . mViewSpacingSpecified = false ; return this ; }
public Builder setViewRoot ( @ IdRes int viewRootId ) { P . mViewRoot = null ; P . mViewRootId = viewRootId ; return this ; }
public Builder setViewRoot ( @ Nullable View viewRoot ) { P . mViewRoot = viewRoot ; P . mViewRootId = 0 ; return this ; }
private TrackerBlocklist ( Context c ) { if ( c != null ) loadSettings ( c ) ; }
public static InternetBlocklist getInstance ( Context c ) { if ( instance == null ) instance = new InternetBlocklist ( c ) ; return instance ; }
public static TrackerBlocklist getInstance ( Context c ) { if ( instance == null ) instance = new TrackerBlocklist ( c ) ; return instance ; }
public void onViewDetachedFromWindow ( RecyclerView . ViewHolder holder ) { try { ( ( MessageListHolder_file_incoming_state_cancel ) holder ) . DetachedFromWindow ( ) ; } catch ( Exception e ) { } */ }
public static void set_message_queueing_from_id ( long message_mid , boolean ft_outgoing_queued ) { try { orma . updateMessage ( ) . idEq ( message_mid ) . ft_outgoing_queued ( ft_outgoing_queued ) . execute ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public void handleMessage ( android . os . Message msg ) { super . handleMessage ( msg ) ; int id = msg . what ; }
public IconicList ( ) { super ( IOBrowser . this , R . layout . iobrowser_row , item ) ; }
public void run ( ) { try { clearCache ( context_s ) ; } catch ( Exception e ) { } }
static void android_tox_callback_friend_request_cb_method ( String friend_public_key , String friend_request_message , long length ) { String friend_public_key__ = friend_public_key . substring ( 0 , TOX_PUBLIC_KEY_SIZE * 2 ) ; HelperFriend . add_friend_to_system ( friend_public_key__ . toUpperCase ( ) , false , null ) ; }
public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; Log . i ( TAG , "onActivityCreated" ) ; MainActivity . friend_list_fragment = this ; }
public void onViewCreated ( View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; Log . i ( TAG , "onViewCreated" ) ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; Log . i ( TAG , "onAttach ( Context ) " ) ; in_update_data = false ; }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; Log . i ( TAG , "onAttach ( Activity ) " ) ; }
public void onStart ( ) { super . onStart ( ) ; Log . i ( TAG , "onStart" ) ; }
public static PendingIntent getAlarmIntent ( Context context ) { Intent intent = new Intent ( context , AlarmReceiver . class ) ; return PendingIntent . getBroadcast ( context , 0 , intent , IntentUtils . FLAG_IMMUTABLE ) ; }
public static String getAccountCreationUrl ( ) { return getUnauthBaseUrl ( ) + ACCOUNT_CREATION_URL ; }
public static String getVideoUrl ( String videoId ) { return getUnauthBaseUrl ( ) + "/iframe/training/" + videoId ; }
public static void setSessionCookie ( String session ) { CookieManager . getInstance ( ) . removeSessionCookie ( ) ; CookieManager . getInstance ( ) . setCookie ( URLProvider . getUnauthBaseUrl ( ) , session ) ; }
public void getNews ( ) { HttpGet ( URLProvider . NEWS_RSS_URL , "application/rss + xml" , null ) ; }
public void getVideos ( ) { HttpGet ( URLProvider . VIDEOS_RSS_URL , "application/rss + xml" , null ) ; }
public void fetch ( @ NonNull Listener listener ) { mListener = listener ; mAsyncTask = new AsyncGetTask ( mAccount ) ; mAsyncTask . execute ( ) ; }
public static void loadAll ( ) { loadSessionId ( ) ; loadNewsRss ( ) ; loadVideosXml ( ) ; loadAccount ( ) ; }
private void setSongToRemove ( @ NonNull IndexedSong song ) { songToRemove = song ; }
private IndexedSong getSongToRemove ( ) { return songToRemove ; }
public void playPreviousSong ( boolean force ) { playSongAt ( playingQueue . getPreviousPosition ( force ) ) ; }
private void updateCurrentSong ( ) { impl . updateCurrentSong ( MusicPlayerRemote . getCurrentIndexedSong ( ) ) ; recyclerView . getAdapter ( ) . notifyDataSetChanged ( ) ; }
public void updateCurrentSong ( IndexedSong song ) { fragment . toolbar . setTitle ( song . title ) ; fragment . toolbar . setSubtitle ( MusicUtil . getSongInfoString ( song ) ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { getMenuInflater ( ) . inflate ( R . menu . menu_album_detail , menu ) ; MenuHelper . decorateDestructiveItems ( menu , this ) ; return super . onCreateOptionsMenu ( menu ) ; }
public long getItemId ( int position ) { return MusicPlayerRemote . getIndexedSongAt ( position ) . getUniqueId ( ) ; }
public StaticPlayingQueue ( ) { songs = new ArrayList <> ( ) ; queue = new ArrayList <> ( ) ; originalQueue = new ArrayList <> ( ) ; shuffleMode = SHUFFLE_MODE_NONE ; currentPosition = INVALID_POSITION ; songsIsStale = false ; restoreUniqueId ( ) ; }
public void clear ( ) { songs . clear ( ) ; queue . clear ( ) ; originalQueue . clear ( ) ; restoreUniqueId ( ) ; }
public long getQueueDurationMillis ( int position ) { long duration = 0 ; for ( int i = position + 1 ; i < queue . size ( ) ; i ++ ) duration += queue . get ( i ) . duration ; return duration ; }
private void revert ( ) { queue = new ArrayList <> ( originalQueue ) ; songsIsStale = true ; }
public ArrayList < IndexedSong > getOriginalPlayingQueue ( ) { return originalQueue ; }
public void toggleShuffle ( ) { playingQueue . toggleShuffle ( ) ; propagateShuffleChange ( ) ; }
public void setShuffleMode ( final int shuffleMode ) { playingQueue . setShuffle ( shuffleMode ) ; propagateShuffleChange ( ) ; }
public ArrayList < Song > getPlayingQueueSongOnly ( ) { if ( songsIsStale ) resetSongs ( ) ; return songs ; }
public void addSongBackTo ( int position , IndexedSong song ) { playingQueue . addSongBackTo ( position , song ) ; notifyChange ( QUEUE_CHANGED ) ; }
public int getShuffleMode ( ) { return playingQueue . getShuffleMode ( ) ; }
public void openQueue ( @ Nullable final ArrayList < Song > playingQueue , final int startPosition , final boolean startPlaying ) { openQueue ( playingQueue , startPosition , startPlaying , this . playingQueue . getShuffleMode ( ) ) ; }
public void addSong ( Song song ) { playingQueue . add ( song ) ; notifyChange ( QUEUE_CHANGED ) ; }
public void addSongs ( List < Song > songs ) { playingQueue . addAll ( songs ) ; notifyChange ( QUEUE_CHANGED ) ; }
public TouchInterceptFrameLayout getTouchInterceptFrameLayoutByTag ( ) { return getRootView ( ) . findViewWithTag ( TouchInterceptFrameLayout . TAG ) ; }
public ItemDraggableRange onGetItemDraggableRange ( AbsOffsetSongAdapter . ViewHolder holder , int position ) { return new ItemDraggableRange ( 1 , dataSet . size ( ) ) ; }
public static List < String > split ( @ Nullable final String names ) { return MultiValuesTagUtil . splitImpl ( names , SINGLE_LINE_SEPARATOR ) ; }
public static List < String > tagEditorSplit ( @ Nullable final String names ) { return MultiValuesTagUtil . splitIfNeeded ( MultiValuesTagUtil . splitImpl ( names , MULTI_LINE_SEPARATOR ) ) ; }
private void updatePlayingQueue ( ) { viewPager . setAdapter ( new AlbumCoverPagerAdapter ( getParentFragmentManager ( ) , MusicPlayerRemote . getPlayingQueue ( ) ) ) ; viewPager . setCurrentItem ( MusicPlayerRemote . getPosition ( ) ) ; onPageSelected ( MusicPlayerRemote . getPosition ( ) ) ; }
private final AlbumCoverPagerAdapter . AlbumCoverFragment . ColorReceiver colorReceiver = new AlbumCoverPagerAdapter . AlbumCoverFragment . ColorReceiver ( ) { @ Override public void onColorReady ( int color , int requestCode ) { if ( currentPosition == requestCode ) { notifyColorChange ( color ) ; } } } ;
public void deliverResult ( D data ) { if ( ! isReset ( ) ) { this . mData = data ; super . deliverResult ( data ) ; } }
public String getInfoString ( @ NonNull Context context ) { String cutoff = PreferenceUtil . getInstance ( ) . getNotRecentlyPlayedCutoffText ( context ) ; return MusicUtil . buildInfoString ( cutoff , super . getInfoString ( context ) ) ; }
public void onFailure ( @ NonNull Call < LastFmAlbum > call , @ NonNull Throwable t ) { toastLoadingFailed ( ) ; }
private PreferenceUtil ( ) { mPreferences = PreferenceManager . getDefaultSharedPreferences ( App . getStaticContext ( ) ) ; migratePreferencesIfNeeded ( ) ; }
public void setIntroShown ( ) { mPreferences . edit ( ) . putBoolean ( INTRO_SHOWN , true ) . apply ( ) ; }
public byte getReplayGainSourceMode ( ) { byte sourceMode = RG_SOURCE_MODE_NONE ; switch ( mPreferences . getString ( RG_SOURCE_MODE_V2 , "none" ) ) { case "track" : sourceMode = RG_SOURCE_MODE_TRACK ; break ; case "album" : sourceMode = RG_SOURCE_MODE_ALBUM ; break ; } return sourceMode ; }
private boolean openCurrent ( ) { synchronized ( this ) { try { return playback . setDataSource ( getTrackUri ( getCurrentSong ( ) ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return false ; } } }
public View getSnackBarContainer ( ) { return findViewById ( R . id . fragment_container ) ; }
public Object instantiateItem ( @ NonNull ViewGroup container , int position ) { Object o = super . instantiateItem ( container , position ) ; if ( currentColorReceiver != null && currentColorReceiverPosition == position ) { receiveColor ( currentColorReceiver , currentColorReceiverPosition ) ; } return o ; }
public void onAttachedToRecyclerView ( @ NonNull RecyclerView rV ) { super . onAttachedToRecyclerView ( rV ) ; recyclerView = rV ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( "current_path" , parentFolder . getAbsolutePath ( ) ) ; }
public void onDismiss ( @ NonNull DialogInterface dialog ) { super . onDismiss ( dialog ) ; timerUpdater . cancel ( ) ; }
public void startUpdate ( @ NonNull ViewGroup container ) { }
public void finishUpdate ( @ NonNull ViewGroup container ) { if ( mCurTransaction != null ) { mCurTransaction . commitAllowingStateLoss ( ) ; mCurTransaction = null ; mFragmentManager . executePendingTransactions ( ) ; } }
public boolean isViewFromObject ( @ NonNull View view , @ NonNull Object object ) { return ( ( Fragment ) object ) . getView ( ) == view ; }
public void onDismiss ( @ NonNull DialogInterface dialog ) { super . onDismiss ( dialog ) ; if ( whichButtonClicked == DialogAction . POSITIVE ) { PreferenceUtil . getInstance ( ) . setNowPlayingScreen ( NowPlayingScreen . values ( ) [ viewPagerPosition ] ) ; } }
public void onLoadFinished ( @ NonNull Loader < Artist > loader , Artist data ) { setArtist ( data ) ; }
public void onLoaderReset ( @ NonNull Loader < Artist > loader ) { this . artist = Artist . EMPTY ; songAdapter . swapDataSet ( artist . getSongs ( ) ) ; albumAdapter . swapDataSet ( artist . albums ) ; }
public void onLoadFinished ( @ NonNull Loader < List < Object >> loader , List < Object > data ) { adapter . swapDataSet ( data ) ; }
public void onLoaderReset ( @ NonNull Loader < List < Object >> loader ) { adapter . swapDataSet ( Collections . emptyList ( ) ) ; }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; activity . addMusicServiceEventListener ( this ) ; }
public void onPrepareOptionsMenu ( @ NonNull Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; Activity activity = getActivity ( ) ; if ( activity == null ) return ; ToolbarContentTintHelper . handleOnPrepareOptionsMenu ( activity , toolbar ) ; }
public void onViewCreated ( @ NonNull View view , Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ) ; applyRecyclerViewPaddingForLayoutRes ( getRecyclerView ( ) , currentLayoutRes ) ; }
public int getMovementFlags ( @ NonNull RecyclerView recyclerView , @ NonNull RecyclerView . ViewHolder viewHolder ) { int dragFlags = ItemTouchHelper . UP | ItemTouchHelper . DOWN ; return makeMovementFlags ( dragFlags , 0 ) ; }
public boolean onMove ( @ NonNull RecyclerView recyclerView , RecyclerView . ViewHolder viewHolder , RecyclerView . ViewHolder target ) { contract . onViewMoved ( viewHolder . getAdapterPosition ( ) , target . getAdapterPosition ( ) ) ; return true ; }
public void onSwiped ( @ NonNull RecyclerView . ViewHolder viewHolder , int direction ) { }
public Void call ( ) { blurIteration ( _src , _w , _h , _radius , _totalCores , _coreIndex , _round ) ; return null ; }
private void updateQueuePosition ( ) { playingQueueAdapter . setCurrent ( MusicPlayerRemote . getPosition ( ) ) ; playerQueueSubHeader . setText ( MusicPlayerRemote . getQueueInfoString ( ) ) ; if ( slidingUpPanelLayout . getPanelState ( ) == SlidingUpPanelLayout . PanelState . COLLAPSED ) { resetToCurrentPosition ( ) ; } }
private void notifyDiscographyChanged ( ) { if ( mainActivityTaskQueue != null ) { final long COALESCENCE_DELAY = 50 ; for ( Runnable listener : changedListeners ) { mainActivityTaskQueue . removeCallbacks ( listener ) ; mainActivityTaskQueue . postDelayed ( listener , COALESCENCE_DELAY ) ; } } }
public ArrayList < Artist > getAllArtists ( ) { synchronized ( cache ) { return new ArrayList <> ( cache . artistsById . values ( ) ) ; } }
public ArrayList < Genre > getAllGenres ( ) { synchronized ( cache ) { return new ArrayList <> ( cache . genresByName . values ( ) ) ; } }
public ArrayList < Song > getAllSongs ( ) { synchronized ( cache ) { return new ArrayList <> ( cache . songsById . values ( ) ) ; } }
public Discography ( ) { database = new DB ( ) ; cache = new MemCache ( ) ; fetchAllSongs ( ) ; }
public void onMediaStoreChanged ( ) { triggerSyncWithMediaStore ( false ) ; }
public long getArtistId ( ) { return getArtist ( ) . id ; }
public Album loadInBackground ( ) { return AlbumLoader . getAlbum ( albumId ) ; }
public Artist loadInBackground ( ) { return ArtistLoader . getArtist ( artistId ) ; }
public void failed ( String message ) { Toast . makeText ( EditProfileActivity . this , getString ( R . string . message_remove_banner_failed , message ) , Toast . LENGTH_SHORT ) . show ( ) ; }
public void failed ( String message ) { Toast . makeText ( EditProfileActivity . this , getString ( R . string . message_remove_avatar_failed , message ) , Toast . LENGTH_SHORT ) . show ( ) ; }
private void loadSubredditIcon ( ) { LoadSubredditIcon . loadSubredditIcon ( mExecutor , new Handler ( ) , mRedditDataRoomDatabase , subredditName , mAccessToken , mOauthRetrofit , mRetrofit , iconImageUrl -> { iconUrl = iconImageUrl ; displaySubredditIcon ( ) ; loadSubredditIconSuccessful = true ; } ) ; }
public boolean wantsToPlay ( ) { return canPlayVideo && ToroUtil . visibleAreaOffset ( this , itemView . getParent ( ) ) >= mStartAutoplayVisibleAreaOffset ; }
public boolean wantsToPlay ( ) { return canPlayVideo && mediaUri != null && ToroUtil . visibleAreaOffset ( this , itemView . getParent ( ) ) >= mStartAutoplayVisibleAreaOffset ; }
public String processMarkdown ( @ NonNull String markdown ) { return Utils . fixSuperScript ( markdown ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; imageView . cancel ( ) ; isFallback = false ; SubsamplingScaleImageView subsamplingScaleImageView = imageView . getSSIV ( ) ; if ( subsamplingScaleImageView != null ) { subsamplingScaleImageView . recycle ( ) ; } }
public void onGlobalLayout ( ) { appBarLayout . getViewTreeObserver ( ) . removeOnGlobalLayoutListener ( this ) ; collapsingToolbarLayout . setScrimVisibleHeightTrigger ( toolbar . getHeight ( ) + tabLayout . getHeight ( ) + getStatusBarHeight ( ) * 2 ) ; }
public boolean onLoadFailed ( @ Nullable GlideException e , Object model , Target < Drawable > target , boolean isFirstResource ) { progressBar . setVisibility ( View . GONE ) ; errorTextView . setVisibility ( View . VISIBLE ) ; return false ; }
public boolean onResourceReady ( Drawable resource , Object model , Target < Drawable > target , DataSource dataSource , boolean isFirstResource ) { errorTextView . setVisibility ( View . GONE ) ; progressBar . setVisibility ( View . GONE ) ; return false ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; activity = ( Activity ) context ; }
public void success ( ArrayList < MultiReddit > multiReddits ) { InsertMultireddit . insertMultireddits ( mExecutor , new Handler ( ) , mRedditDataRoomDatabase , multiReddits , mAccountName , ( ) -> { mInsertMultiredditSuccess = true ; sectionsPagerAdapter . stopMultiRedditRefreshProgressbar ( ) ; } ) ; }
public boolean onQueryTextSubmit ( @ NonNull String query ) { search ( query ) ; return true ; }
private void renderPage ( final int zoom ) { binding . webview . evaluateJavascript ( "onRenderPage ( " + zoom + " ) " , null ) ; }
public int getNeighbors ( ) { return neighborMinesCoords . size ( ) ; }
public void addMediaEventListener ( MediaEventListener l ) { if ( ! listeners . contains ( l ) ) { listeners . add ( l ) ; } }
private final SimpleEvent msgSetString = new SimpleEvent ( ) { @ Override public void process ( ) { alertDialog . setMessage ( text ) ; } } ;
private final SimpleEvent msgSetImage = new SimpleEvent ( ) { @ Override public void process ( ) { BitmapDrawable bitmapDrawable = new BitmapDrawable ( image . getBitmap ( ) ) ; alertDialog . setIcon ( bitmapDrawable ) ; } } ;
private final SimpleEvent msgSetSelection = new SimpleEvent ( ) { @ Override public void process ( ) { spinner . setSelection ( selectedIndex ) ; } } ;
public void clearItemContentView ( ) { imageView = null ; }
public View getItemContentView ( ) { if ( view == null ) { view = new Space ( getOwnerForm ( ) . getParentActivity ( ) ) ; view . setMinimumWidth ( width ) ; view . setMinimumHeight ( height ) ; } return view ; }
private final SimpleEvent msgSetText = new SimpleEvent ( ) { @ Override public void process ( ) { textview . setText ( text ) ; } } ;
public static AppsListFragment newInstance ( Uri data ) { AppsListFragment fragment = new AppsListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putParcelable ( KEY_APP_URI , data ) ; fragment . setArguments ( args ) ; return fragment ; }
public int getNativePixelFormat ( ) { return PIXEL_FORMAT ; }
public void onPause ( ) { visible = false ; hideSoftInput ( ) ; MidletThread . pauseApp ( ) ; super . onPause ( ) ; }
public void start ( ) throws MediaException { midiDriver . write ( midiSequence ) ; }
public Socket createSocket ( String host , int port ) throws IOException { return enableTLSOnSocket ( internalSSLSocketFactory . createSocket ( host , port ) ) ; }
public Socket createSocket ( String host , int port , InetAddress localHost , int localPort ) throws IOException { return enableTLSOnSocket ( internalSSLSocketFactory . createSocket ( host , port , localHost , localPort ) ) ; }
public void callShowNotify ( ) { visible = true ; showNotify ( ) ; }
public void callHideNotify ( ) { hideNotify ( ) ; visible = false ; }
public Image ( Bitmap bitmap ) { if ( bitmap == null ) { throw new NullPointerException ( ) ; } this . bitmap = bitmap ; bounds = new Rect ( 0 , 0 , bitmap . getWidth ( ) , bitmap . getHeight ( ) ) ; }
public final void notifyDestroyed ( ) { MidletThread . notifyDestroyed ( ) ; }
private void injectGetPropertyEncoding ( ) { mv . visitLdcInsn ( "microedition . encoding" ) ; mv . visitMethodInsn ( INVOKESTATIC , "java/lang/System" , "getProperty" , " ( Ljava/lang/String ; ) Ljava/lang/String ; " , false ) ; }
public boolean isPhone ( ) { return layoutVariant == TYPE_PHONE || layoutVariant == TYPE_PHONE_ARROWS ; }
public void run ( ) { visible = false ; overlayView . postInvalidate ( ) ; }
private void vibrate ( ) { if ( settings . vkFeedback ) ContextHolder . vibrateKey ( FEEDBACK_DURATION ) ; }
public void onPause ( ) { if ( needShow && configDir != null ) { saveParams ( ) ; } super . onPause ( ) ; }
public static MediaProcessor createMediaProcessor ( String contentType ) throws MediaException { return null ; }
public String getKeyName ( int keyCode ) { String res = KeyMapper . getKeyName ( keyCode ) ; if ( res != null ) { return res ; } else { throw new IllegalArgumentException ( "unknown keycode " + keyCode ) ; } }
public void postKeyPressed ( int keyCode ) { Display . postEvent ( CanvasEvent . getInstance ( this , CanvasEvent . KEY_PRESSED , KeyMapper . convertKeyCode ( keyCode ) ) ) ; }
public void postKeyReleased ( int keyCode ) { Display . postEvent ( CanvasEvent . getInstance ( this , CanvasEvent . KEY_RELEASED , KeyMapper . convertKeyCode ( keyCode ) ) ) ; }
public void postKeyRepeated ( int keyCode ) { Display . postEvent ( CanvasEvent . getInstance ( this , CanvasEvent . KEY_REPEATED , KeyMapper . convertKeyCode ( keyCode ) ) ) ; }
public int getKeyStates ( ) { return keyState ; }
public int getNumRecords ( ) throws RecordStoreNotOpenException { if ( ! open ) { throw new RecordStoreNotOpenException ( ) ; } return records . size ( ) ; }
private void directionLeftDelete ( int position ) { deleteItemConfirmationDialog ( position ) ; }
private void directionRightReturn ( int position ) { String codeId = parcelItems . get ( position ) . getParcelId ( ) ; databaseHelper . updateArchived ( codeId , false ) ; readItems ( null ) ; }
private void directionRightArchive ( int position ) { String codeId = parcelItems . get ( position ) . getParcelId ( ) ; databaseHelper . updateArchived ( codeId , true ) ; readItems ( ) ; }
public String backupProviderName ( ) { return _backupProvider ; }
public void onPhotoTaken ( ) { nextPage ( ) ; }
public String getImageFileName ( ) { return currentPhotoPath ; }
public CameraOperationsManager ( String name ) { if ( AppPreferences . isTestMode ( ) ) { bytes = ImageUtil . loadImageBytes ( name ) ; } }
public void saveCapturedImage ( ) { ImageUtil . saveYuvImage ( decodeImageByteArray , testInfo . getName ( ) ) ; }
public static String getStackTraceAsText ( Throwable ex ) { return getStackTraceAsText ( ex , false ) ; }
public boolean writeConsoleOutput ( String consoleOutputLine ) { if ( consoleOutput != null ) { Log . i ( TAG , " CONSOLE APPENDED >>> " + consoleOutputLine ) ; consoleOutput . append ( consoleOutputLine ) ; return true ; } return false ; }
public void onRequestPermissionResult ( int requestCode , int grantResult ) { boolean isGranted = grantResult == PackageManager . PERMISSION_GRANTED ; if ( isGranted ) { grantWriteSecureSettingsPermission ( ) ; } else { isUsingShizuku = false ; proceedWithOnCreate ( ) ; } }
public static boolean enableFreeformModeShortcut ( Context context ) { return canEnableFreeform ( context ) && ! isOverridingFreeformHack ( context , false ) && ! isChromeOs ( context ) ; }
public ActivityTestRule < MainActivity > mActivityTestRule = new MainActivityFirstrunTestRule ( true , false ) { @ Override protected void beforeActivityLaunched ( ) { super . beforeActivityLaunched ( ) ; } } ;
public void onDownloadAudioClicked ( ) { audioToDownload = 0 ; audioIndexesToDownload = quranRepository . getAyahNumberNotAudioDownloaded ( ) ; downState ( ) ; downlaodAudioData ( ) ; }
public void onDownloadAudioClicked ( ) { if ( ! isPermissionAllowed ) { acquirePermission ( ) ; } else { audioToDownload = 0 ; audioIndexesToDownload = quranRepository . getAyahNumberNotAudioDownloaded ( ) ; downState ( ) ; downlaodAudioData ( ) ; } }
public Holder onCreateViewHolder ( @ NonNull ViewGroup viewGroup , int i ) { View view = LayoutInflater . from ( viewGroup . getContext ( ) ) . inflate ( R . layout . item_sura , viewGroup , false ) ; return new Holder ( view ) ; }
public void addFilteredSample ( float [ ] sample ) { System . arraycopy ( sample , 0 , ringBuffer [ inPtr ] , 0 , sample . length ) ; inPtr ++ ; if ( inPtr == RINGBUFFERSIZE ) { inPtr = 0 ; } }
public void run ( ) { if ( bpmText != null ) { bpmText . setText ( String . format ( Locale . US , "%03d BPM" , ( int ) v ) ) ; } }
public void onEventMainThread ( LokAddEvent event ) { super . onEventMainThread ( event ) ; Intent intent = ( new Intent ( this , TrainHandler . class ) ) ; intent . putExtra ( "train_addr" , event . getAddr ( ) ) ; startActivity ( intent ) ; }
public void onStopTrackingTouch ( SeekBar sb ) { limitedJump [ whichThrottle ] = false ; setAutoIncrementDecrement ( whichThrottle , AUTO_INCREMENT_DECREMENT_OFF ) ; kidsTimerActions ( threaded_application . KIDS_TIMER_STARTED , 0 ) ; }
public void onResume ( ) { Log . d ( "Engine_Driver" , "Settings : SettingsFragment onResume ( ) " ) ; super . onResume ( ) ; getPreferenceScreen ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( this ) ; setPreferencesUI ( ) ; }
public Consist ( ) { con = Collections . synchronizedMap ( new LinkedHashMap < String , ConLoco > ( ) ) ; leadAddr = "" ; trailAddr = "" ; waitingOnID = false ; }
public Consist ( Loco l ) { this ( ) ; this . add ( l ) ; leadAddr = l . getAddress ( ) ; trailAddr = l . getAddress ( ) ; waitingOnID = false ; }
public Consist ( Consist c ) { this ( ) ; for ( ConLoco l : c . con . values ( ) ) { this . add ( l ) ; } leadAddr = c . leadAddr ; trailAddr = c . leadAddr ; waitingOnID = false ; }
public void release ( ) { con . clear ( ) ; leadAddr = "" ; trailAddr = "" ; waitingOnID = false ; }
public boolean onItemLongClick ( AdapterView < ? > av , View v , int pos , long id ) { return onLongRecentListItemClick ( pos ) ; }
public boolean onItemLongClick ( AdapterView < ? > av , View v , int pos , long id ) { return onLongRecentConsistsListItemClick ( pos ) ; }
public void setServerType ( String serverType ) { this . serverType = serverType ; if ( serverType . equals ( "MRC" ) ) { web_server_port = 80 ; } else if ( serverType . equals ( "Digitrax" ) ) { WiThrottle_Msg_Interval = 200 ; } }
private void startTimer ( ) { delayHandler . postDelayed ( timerRunnable , 2 * ( prefs . getTrackingInterval ( ) * 1000L ) ) ; }
public void extractGoogleRedirectUrl ( ) throws Exception { assertEquals ( Uri . parse ( "https : new IntentParser ( ) . resolveRedirect ( Uri . parse ( "https : }
private Uri uriOrNull ( @ Nullable final String url ) { if ( url != null ) { return Uri . parse ( url ) ; } return null ; }
public static void openFoodHistory ( final Context context , final Food food ) { startSelectableDateActivity ( context , createFoodIntent ( context , HistoryActivity . class , food ) ) ; }
public static void openTweakHistory ( final Context context , final Tweak tweak ) { startSelectableDateActivity ( context , createTweakIntent ( context , HistoryActivity . class , tweak ) ) ; }
public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( FoodTypeItemBinding . inflate ( LayoutInflater . from ( parent . getContext ( ) ) , parent , false ) ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { binding = FragmentDailyDozenBinding . inflate ( inflater , container , false ) ; return binding . getRoot ( ) ; }
public View onCreateView ( @ NonNull LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { binding = FragmentTweaksBinding . inflate ( inflater , container , false ) ; return binding . getRoot ( ) ; }
public static List < String > getFoodVideosLink ( final String foodName ) { return foodVideos . containsKey ( foodName ) ? foodVideos . get ( foodName ) : new ArrayList <> ( ) ; }
public void setDataAfterLoading ( LoadHistoryCompleteEvent event ) { progressListener . hideProgressBar ( ) ; Bus . loadHistoryCompleteEvent ( event ) ; }
public void run ( ) { try { final R result = callable . call ( ) ; handler . post ( new RunnableTaskForHandler <> ( callable , result ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
private void onTweakServingsChanged ( ) { new TaskRunner ( ) . executeAsync ( new CalculateStreakTask ( new StreakTaskInput ( day , rda ) ) ) ; }
private void initImage ( String foodName ) { Common . loadImage ( this , binding . foodInfoImage , FoodInfo . getFoodImage ( foodName ) ) ; }
private void initChangeUnitsButton ( ) { binding . changeUnitsButton . setText ( Prefs . getInstance ( this ) . getUnitTypePref ( ) == Units . IMPERIAL ? R . string . imperial : R . string . metric ) ; }
private void initImage ( String tweakName ) { Common . loadImage ( this , binding . tweakInfoImage , FoodInfo . getTweakImage ( tweakName ) ) ; }
private void initTweakShort ( String tweakName ) { binding . tweakShort . setText ( FoodInfo . getTweakShort ( tweakName ) ) ; }
private void initTweakText ( String tweakName ) { binding . tweakText . setText ( FoodInfo . getTweakText ( tweakName ) ) ; }
private void initBackToTodayButton ( ) { binding . backToToday . setVisibility ( Day . isToday ( day ) ? View . GONE : View . VISIBLE ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int position , long id ) { Bus . timeScaleSelected ( binding . timeScaleSpinner . getSelectedItemPosition ( ) ) ; }
private void setTitle ( final String title ) { binding . header . setText ( title ) ; }
private boolean initFoodIcon ( ) { return Common . loadImage ( getContext ( ) , binding . foodIcon , FoodInfo . getFoodIcon ( food . getName ( ) ) ) ; }
private void initFoodName ( ) { binding . foodName . setText ( String . format ( "%s %s" , food . getName ( ) , getContext ( ) . getString ( R . string . icon_info ) ) ) ; }
private boolean initTweakIcon ( ) { return Common . loadImage ( getContext ( ) , binding . tweakIcon , FoodInfo . getTweakIcon ( tweak . getName ( ) ) ) ; }
private void initTweakName ( ) { binding . tweakName . setText ( String . format ( "%s %s" , tweak . getName ( ) , getContext ( ) . getString ( R . string . icon_info ) ) ) ; }
public void run ( ) { showLogcatMessages ( ) ; showCurrentLoggingStatusCheckbox ( ) ; timerHandler . postDelayed ( this , 1500 ) ; }
public boolean isAvailable ( ) { return validSettings ( preferenceHelper . getOwnCloudBaseUrl ( ) , preferenceHelper . getOwnCloudUsername ( ) , preferenceHelper . getOwnCloudPassword ( ) , preferenceHelper . getOwnCloudDirectory ( ) ) ; }
public void onCancelled ( CancelResult cancelResult ) { jobManager . addJobInBackground ( new OwnCloudJob ( preferenceHelper . getOwnCloudBaseUrl ( ) , preferenceHelper . getOwnCloudUsername ( ) , preferenceHelper . getOwnCloudPassword ( ) , preferenceHelper . getOwnCloudDirectory ( ) , f , f . getName ( ) ) ) ; }
public String getOpenGTSServerPort ( ) { return prefs . getString ( PreferenceNames . OPENGTS_PORT , "443" ) ; }
public String getOpenGTSServerCommunicationMethod ( ) { return prefs . getString ( PreferenceNames . OPENGTS_PROTOCOL , "HTTPS" ) ; }
private void removeFragmentsAndActionBar ( ) { FragmentTransaction transaction = getSupportFragmentManager ( ) . beginTransaction ( ) ; transaction . remove ( getCurrentFragment ( ) ) ; transaction . commit ( ) ; getSupportActionBar ( ) . hide ( ) ; }
private GenericViewFragment getCurrentFragment ( ) { Fragment currentFragment = getSupportFragmentManager ( ) . findFragmentById ( R . id . container ) ; if ( currentFragment instanceof GenericViewFragment ) { return ( ( GenericViewFragment ) currentFragment ) ; } return null ; }
public void run ( ) { Dialogs . hideProgress ( ) ; Dialogs . showError ( getString ( R . string . error ) , e . getMessage ( ) , e . getMessage ( ) , e , ProfileLinkReceiverActivity . this ) ; }
public void run ( ) { onWorkflowFinished ( activity , null , true ) ; }
public void run ( ) { onWorkflowFinished ( activity , e , false ) ; }
public void run ( ) { onWorkflowFinished ( activity , null , false ) ; }
public static void hideProgress ( ) { if ( simpleProgress != null ) { simpleProgress . dismiss ( ) ; } }
public MockLocations withTime ( long date ) { lenient ( ) . when ( loc . getTime ( ) ) . thenReturn ( date ) ; return this ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new LeaderBoardViewModel ( mGameId , mCategoryId ) ; }
public static void handle ( @ NonNull View v , @ Nullable CharSequence s ) { v . setVisibility ( TextUtils . isEmpty ( s ) ? View . GONE : View . VISIBLE ) ; }
private void setTextColor ( @ NonNull AppCompatTextView tv , @ ColorInt int color ) { if ( color != 0 ) tv . setTextColor ( color ) ; }
private void setBitmap ( @ NonNull AppCompatImageView iv , @ Nullable Bitmap bitmap ) { if ( bitmap == null ) { iv . setVisibility ( GONE ) ; } else { iv . setImageBitmap ( bitmap ) ; } }
public AboutBuilder setName ( @ Nullable CharSequence text ) { this . name = text ; return this ; }
public AboutBuilder setSubTitle ( @ Nullable CharSequence text ) { this . subTitle = text ; return this ; }
public AboutBuilder setBrief ( @ Nullable CharSequence text ) { this . brief = text ; return this ; }
public AboutBuilder setAppName ( @ Nullable CharSequence text ) { this . appName = text ; return this ; }
public AboutBuilder setAppTitle ( @ Nullable CharSequence text ) { this . appTitle = text ; return this ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ Nullable View . OnClickListener onClickListener ) { links . add ( new Item ( icon , label , onClickListener ) ) ; return this ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ Nullable Intent intent ) { return addLink ( icon , label , util . clickIntent ( intent ) ) ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ NonNull Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addLink ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ NonNull String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable CharSequence label , @ Nullable View . OnClickListener onClickListener ) { return addLink ( IconUtil . getBitmap ( context , icon ) , label , onClickListener ) ; }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable CharSequence label , @ Nullable Intent intent ) { return addLink ( icon , label , util . clickIntent ( intent ) ) ; }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable CharSequence label , @ NonNull Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addLink ( @ DrawableRes int icon , @ Nullable CharSequence label , @ NonNull String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ Nullable CharSequence label , @ Nullable View . OnClickListener onClickListener ) { return addLink ( IconUtil . getBitmap ( icon ) , label , onClickListener ) ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ Nullable CharSequence label , @ Nullable Intent intent ) { return addLink ( icon , label , util . clickIntent ( intent ) ) ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ Nullable CharSequence label , @ NonNull Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ Nullable View . OnClickListener onClickListener ) { actions . add ( new Item ( icon , label , onClickListener ) ) ; return this ; }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ Nullable Intent intent ) { return addAction ( icon , label , util . clickIntent ( intent ) ) ; }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ NonNull Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addAction ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ NonNull String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable CharSequence label , @ Nullable View . OnClickListener onClickListener ) { return addAction ( IconUtil . getBitmap ( context , icon ) , label , onClickListener ) ; }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable CharSequence label , @ Nullable Intent intent ) { return addAction ( icon , label , util . clickIntent ( intent ) ) ; }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable CharSequence label , @ NonNull Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addAction ( @ DrawableRes int icon , @ Nullable CharSequence label , @ NonNull String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable CharSequence label , @ Nullable View . OnClickListener onClickListener ) { return addAction ( IconUtil . getBitmap ( icon ) , label , onClickListener ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable CharSequence label , @ Nullable Intent intent ) { return addAction ( icon , label , util . clickIntent ( intent ) ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable CharSequence label , @ NonNull Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ Nullable CharSequence label , @ NonNull String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
public CharSequence getSubTitle ( ) { return subTitle ; }
public CharSequence getBrief ( ) { return brief ; }
public CharSequence getAppName ( ) { return appName ; }
public CharSequence getAppTitle ( ) { return appTitle ; }
public void setLabel ( @ Nullable CharSequence label ) { this . label = label ; }
public Item ( @ Nullable Bitmap icon , @ Nullable CharSequence label , @ Nullable View . OnClickListener onClick ) { this . id = ViewIdGenerator . generateViewId ( ) ; this . label = label ; this . icon = icon ; this . onClick = onClick ; }
public AboutBuilder addFeedbackAction ( @ StringRes int email , @ Nullable String subject ) { return addFeedbackAction ( context . getString ( email ) , subject , null ) ; }
private SampleHelper ( @ NonNull Activity activity ) { this . activity = activity ; }
public AboutBuilder setName ( @ StringRes int text ) { return setName ( context . getString ( text ) ) ; }
public AboutBuilder setSubTitle ( @ StringRes int text ) { return setSubTitle ( context . getString ( text ) ) ; }
public AboutBuilder setBrief ( @ StringRes int text ) { return setBrief ( context . getString ( text ) ) ; }
public AboutBuilder setAppName ( @ StringRes int text ) { return setAppName ( context . getString ( text ) ) ; }
public AboutBuilder setAppTitle ( @ StringRes int text ) { return setAppTitle ( context . getString ( text ) ) ; }
public AboutBuilder setPhoto ( @ Nullable Bitmap photo ) { this . photo = photo ; return this ; }
public AboutBuilder setPhoto ( @ DrawableRes int photo ) { return setPhoto ( IconUtil . getBitmap ( context , photo ) ) ; }
public AboutBuilder setPhoto ( @ Nullable BitmapDrawable photo ) { return setPhoto ( IconUtil . getBitmap ( photo ) ) ; }
public AboutBuilder setCover ( @ Nullable Bitmap cover ) { this . cover = cover ; return this ; }
public AboutBuilder setCover ( @ DrawableRes int cover ) { return setCover ( IconUtil . getBitmap ( context , cover ) ) ; }
public AboutBuilder setCover ( @ Nullable BitmapDrawable cover ) { return setCover ( IconUtil . getBitmap ( cover ) ) ; }
public AboutBuilder setAppIcon ( @ Nullable Bitmap icon ) { this . appIcon = icon ; return this ; }
public AboutBuilder setAppIcon ( @ DrawableRes int icon ) { return setAppIcon ( IconUtil . getBitmap ( context , icon ) ) ; }
public AboutBuilder setAppIcon ( @ Nullable BitmapDrawable icon ) { return setAppIcon ( IconUtil . getBitmap ( icon ) ) ; }
public AboutBuilder setNameColor ( @ ColorRes int color ) { this . nameColor = ColorUtil . get ( context , color ) ; return this ; }
public AboutBuilder setSubTitleColor ( @ ColorRes int color ) { this . subTitleColor = ColorUtil . get ( context , color ) ; return this ; }
public AboutBuilder setBriefColor ( @ ColorRes int color ) { this . briefColor = ColorUtil . get ( context , color ) ; return this ; }
public AboutBuilder setDividerColor ( @ ColorRes int color ) { this . dividerColor = ColorUtil . get ( context , color ) ; return this ; }
public AboutBuilder setIconColor ( @ ColorRes int color ) { this . iconColor = ColorUtil . get ( context , color ) ; return this ; }
public AboutBuilder setBackgroundColor ( @ ColorRes int color ) { this . backgroundColor = ColorUtil . get ( context , color ) ; return this ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ StringRes int label , @ NonNull Uri uri ) { return addLink ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ StringRes int label , @ NonNull String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public AboutBuilder addLink ( @ Nullable BitmapDrawable icon , @ Nullable String label , @ NonNull String url ) { return addLink ( icon , label , Uri . parse ( url ) ) ; }
public AboutBuilder addGitHubLink ( @ StringRes int user ) { return addGitHubLink ( context . getString ( user ) ) ; }
public AboutBuilder addGitHubLink ( @ NonNull String user ) { return addLink ( R . mipmap . github , R . string . github , util . uri ( R . string . url_github , user ) ) ; }
public AboutBuilder addBitbucketLink ( @ StringRes int user ) { return addBitbucketLink ( context . getString ( user ) ) ; }
public AboutBuilder addBitbucketLink ( @ NonNull String user ) { return addLink ( R . mipmap . bitbucket , R . string . bitbucket , util . uri ( R . string . url_bitbucket , user ) ) ; }
public AboutBuilder addFacebookLink ( @ StringRes int user ) { return addFacebookLink ( context . getString ( user ) ) ; }
public AboutBuilder addFacebookLink ( @ NonNull String user ) { return addLink ( R . mipmap . facebook , R . string . facebook , util . openFacebook ( user ) ) ; }
public AboutBuilder addInstagramLink ( @ StringRes int user ) { return addInstagramLink ( context . getString ( user ) ) ; }
public AboutBuilder addInstagramLink ( @ NonNull String user ) { return addLink ( R . mipmap . instagram , R . string . instagram , util . openInstagram ( user ) ) ; }
public AboutBuilder addTwitterLink ( @ StringRes int user ) { return addTwitterLink ( context . getString ( user ) ) ; }
public AboutBuilder addTwitterLink ( @ NonNull String user ) { return addLink ( R . mipmap . twitter , R . string . twitter , util . openTwitter ( user ) ) ; }
public AboutBuilder addGoogleLink ( @ StringRes int url ) { return addGoogleLink ( context . getString ( url ) ) ; }
public AboutBuilder addGoogleLink ( @ Nullable String url ) { return addLink ( R . mipmap . google , R . string . google , url ) ; }
public AboutBuilder addGooglePlayStoreLink ( @ StringRes int user ) { return addGooglePlayStoreLink ( context . getString ( user ) ) ; }
public AboutBuilder addGooglePlayStoreLink ( @ NonNull String user ) { return addLink ( R . mipmap . google_play_store , R . string . google_play_store , util . openGooglePlayDev ( user ) ) ; }
public AboutBuilder addGoogleGamesLink ( @ StringRes int url ) { return addGoogleGamesLink ( context . getString ( url ) ) ; }
public AboutBuilder addGoogleGamesLink ( @ Nullable String url ) { return addLink ( R . mipmap . google_play_games , R . string . google_play_games , url ) ; }
public AboutBuilder addYoutubeChannelLink ( @ StringRes int user ) { return addYoutubeChannelLink ( context . getString ( user ) ) ; }
public AboutBuilder addYoutubeChannelLink ( @ NonNull String user ) { return addLink ( R . mipmap . youtube , R . string . youtube , util . openYoutubeChannel ( user ) ) ; }
public AboutBuilder addYoutubeUserLink ( @ StringRes int user ) { return addYoutubeUserLink ( context . getString ( user ) ) ; }
public AboutBuilder addYoutubeUserLink ( @ NonNull String user ) { return addLink ( R . mipmap . youtube , R . string . youtube , util . openYoutubeUser ( user ) ) ; }
public AboutBuilder addLinkedInLink ( @ StringRes int user ) { return addLinkedInLink ( context . getString ( user ) ) ; }
public AboutBuilder addLinkedInLink ( @ NonNull String user ) { return addLink ( R . mipmap . linkedin , R . string . linkedin , util . openLinkedIn ( user ) ) ; }
public AboutBuilder addSkypeLink ( @ StringRes int phone ) { return addSkypeLink ( context . getString ( phone ) ) ; }
public AboutBuilder addSkypeLink ( @ NonNull String phone ) { return addLink ( R . mipmap . skype , R . string . skype , util . openSkype ( phone ) ) ; }
public AboutBuilder addWhatsappLink ( @ StringRes int name , @ StringRes int phone ) { return addWhatsappLink ( context . getString ( name ) , context . getString ( phone ) ) ; }
public AboutBuilder addWhatsappLink ( @ NonNull String name , @ NonNull String phone ) { return addLink ( R . mipmap . whatsapp , R . string . whastapp , util . openAddContact ( name , phone ) ) ; }
public AboutBuilder addWhatsAppDirectChat ( @ StringRes int phone ) { return addWhatsAppDirectChat ( context . getString ( phone ) ) ; }
public AboutBuilder addWhatsAppDirectChat ( @ StringRes int phone , @ StringRes int message ) { return addWhatsAppDirectChat ( context . getString ( phone ) , context . getString ( message ) ) ; }
public AboutBuilder addAndroidLink ( @ StringRes int url ) { return addAndroidLink ( context . getString ( url ) ) ; }
public AboutBuilder addAndroidLink ( @ NonNull String url ) { return addLink ( R . mipmap . android , R . string . android , url ) ; }
public AboutBuilder addDribbbleLink ( @ StringRes int url ) { return addDribbbleLink ( context . getString ( url ) ) ; }
public AboutBuilder addDribbbleLink ( @ NonNull String url ) { return addLink ( R . mipmap . dribbble , R . string . dribbble , url ) ; }
public AboutBuilder addWebsiteLink ( @ StringRes int url ) { return addWebsiteLink ( context . getString ( url ) ) ; }
public AboutBuilder addWebsiteLink ( @ NonNull String url ) { return addLink ( R . mipmap . website , R . string . website , url ) ; }
public AboutBuilder addEmailLink ( @ StringRes int email , @ Nullable String subject ) { return addEmailLink ( context . getString ( email ) , subject , null ) ; }
public AboutBuilder addEmailLink ( @ StringRes int email , @ StringRes int subject ) { return addEmailLink ( context . getString ( email ) , context . getString ( subject ) , null ) ; }
public AboutBuilder addEmailLink ( @ StringRes int email ) { return addEmailLink ( context . getString ( email ) ) ; }
public AboutBuilder addEmailLink ( @ Nullable String email ) { return addLink ( R . mipmap . email , R . string . email , util . sendEmail ( email , null , null ) ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ StringRes int label , @ NonNull Uri uri ) { return addAction ( icon , label , util . clickUri ( uri ) ) ; }
public AboutBuilder addAction ( @ Nullable BitmapDrawable icon , @ StringRes int label , @ NonNull String url ) { return addAction ( icon , label , Uri . parse ( url ) ) ; }
public AboutBuilder addFiveStarsAction ( @ StringRes int appId ) { return addFiveStarsAction ( context . getString ( appId ) ) ; }
public AboutBuilder addFiveStarsAction ( @ NonNull String appId ) { return addAction ( R . mipmap . star , R . string . rate_five_stars , util . openPlayStoreAppPage ( appId ) ) ; }
public AboutBuilder addUpdateAction ( @ StringRes int appId ) { return addUpdateAction ( context . getString ( appId ) ) ; }
public AboutBuilder addUpdateAction ( @ NonNull String appId ) { return addAction ( R . mipmap . update , R . string . update_app , util . openPlayStoreAppPage ( appId ) ) ; }
public AboutBuilder addMoreFromMeAction ( @ StringRes int userName ) { return addMoreFromMeAction ( context . getString ( userName ) ) ; }
public AboutBuilder addMoreFromMeAction ( @ NonNull String userName ) { return addAction ( R . mipmap . google_play_store , R . string . more_apps , util . openPlayStoreAppsList ( userName ) ) ; }
public AboutBuilder addShareAction ( @ StringRes int subject , @ StringRes int message ) { return addShareAction ( context . getString ( subject ) , context . getString ( message ) ) ; }
public AboutBuilder addShareAction ( @ NonNull String subject , @ NonNull String message ) { return addAction ( share , R . string . share_app , util . shareThisApp ( subject , message ) ) ; }
public AboutBuilder addShareAction ( @ NonNull String subject ) { return addShareAction ( subject , context . getString ( R . string . uri_play_store_app_website , context . getPackageName ( ) ) ) ; }
public AboutBuilder addShareAction ( @ StringRes int subject ) { return addShareAction ( context . getString ( subject ) ) ; }
public AboutBuilder addFeedbackAction ( @ StringRes int email , @ StringRes int subject ) { return addFeedbackAction ( context . getString ( email ) , context . getString ( subject ) ) ; }
public AboutBuilder addFeedbackAction ( @ NonNull String email , @ Nullable String subject ) { return addFeedbackAction ( email , subject , null ) ; }
public AboutBuilder addFeedbackAction ( @ StringRes int email ) { return addFeedbackAction ( context . getString ( email ) ) ; }
public AboutBuilder addFeedbackAction ( @ NonNull String email ) { return addFeedbackAction ( email , null ) ; }
public AboutBuilder addIntroduceAction ( @ NonNull View . OnClickListener onClickListener ) { return addAction ( R . mipmap . intrduce , R . string . introduce_app , onClickListener ) ; }
public AboutBuilder addIntroduceAction ( @ NonNull Intent intent ) { return addIntroduceAction ( util . clickIntent ( intent ) ) ; }
public AboutBuilder addHelpAction ( @ NonNull View . OnClickListener onClickListener ) { return addAction ( R . mipmap . help , R . string . help , onClickListener ) ; }
public AboutBuilder addHelpAction ( @ NonNull Intent intent ) { return addHelpAction ( util . clickIntent ( intent ) ) ; }
public AboutBuilder addLicenseAction ( @ NonNull View . OnClickListener onClickListener ) { return addAction ( R . mipmap . license , R . string . license , onClickListener ) ; }
public AboutBuilder addLicenseAction ( @ NonNull Intent intent ) { return addLicenseAction ( util . clickIntent ( intent ) ) ; }
public AboutBuilder addChangeLogAction ( @ NonNull View . OnClickListener onClickListener ) { return addAction ( R . mipmap . changelog , R . string . changelog , onClickListener ) ; }
public AboutBuilder addChangeLogAction ( @ NonNull Intent intent ) { return addChangeLogAction ( util . clickIntent ( intent ) ) ; }
public AboutBuilder addRemoveAdsAction ( @ NonNull View . OnClickListener onClickListener ) { return addAction ( R . mipmap . ads , R . string . remove_ads , onClickListener ) ; }
public AboutBuilder addRemoveAdsAction ( @ NonNull Intent intent ) { return addRemoveAdsAction ( util . clickIntent ( intent ) ) ; }
public AboutBuilder addDonateAction ( @ NonNull View . OnClickListener onClickListener ) { return addAction ( R . mipmap . donate , R . string . donate , onClickListener ) ; }
public AboutBuilder addDonateAction ( @ NonNull Intent intent ) { return addDonateAction ( util . clickIntent ( intent ) ) ; }
public AboutBuilder addPrivacyPolicyAction ( @ NonNull String url ) { return addAction ( R . mipmap . privacy , R . string . privacy , util . intent ( url ) ) ; }
public AboutBuilder addPrivacyPolicyAction ( @ NonNull View . OnClickListener onClickListener ) { return addAction ( R . mipmap . privacy , R . string . privacy , onClickListener ) ; }
public AboutBuilder addPrivacyPolicyAction ( @ NonNull Intent intent ) { return addAction ( R . mipmap . privacy , R . string . privacy , util . clickIntent ( intent ) ) ; }
public void setIcon ( @ Nullable Bitmap icon ) { this . icon = icon ; }
public void setOnClick ( @ Nullable View . OnClickListener onClick ) { this . onClick = onClick ; }
public static int get ( @ NonNull Context context , @ ColorRes int res ) { try { return ContextCompat . getColor ( context , res ) ; } catch ( Resources . NotFoundException e ) { return res ; } }
public IntentUtil ( @ NonNull Context context ) { this . context = context ; }
public Uri uri ( @ NonNull String url ) { return Uri . parse ( url ) ; }
public void open ( @ Nullable Intent intent ) { try { context . startActivity ( intent ) ; } catch ( Throwable e ) { e . printStackTrace ( ) ; } }
public void open ( @ Nullable Uri uri ) { open ( intent ( uri ) ) ; }
private void tryPackage ( @ StringRes int res ) throws PackageManager . NameNotFoundException { context . getPackageManager ( ) . getPackageInfo ( context . getString ( res ) , 0 ) ; }
public static void backgroundRipple ( @ NonNull View v , @ ColorInt int color ) { RippleUtil . background ( v , getAdaptiveRippleDrawable ( color ) ) ; }
private void setupTextColors ( @ NonNull AboutBuilder bundle ) { setTextColor ( tvName , bundle . getNameColor ( ) ) ; setTextColor ( tvSubTitle , bundle . getSubTitleColor ( ) ) ; setTextColor ( tvBrief , bundle . getBriefColor ( ) ) ; }
private void setupBitmaps ( @ NonNull AboutBuilder bundle ) { setBitmap ( ivCover , bundle . getCover ( ) ) ; setBitmap ( ivPhoto , bundle . getPhoto ( ) ) ; setBitmap ( ivAppIcon , bundle . getAppIcon ( ) ) ; }
private void loadActions ( @ NonNull AboutBuilder bundle ) { for ( Item item : bundle . getActions ( ) ) { addItem ( vActions , R . layout . xab_each_action , item ) ; } }
public AutoFitGridLayout ( @ NonNull Context context ) { super ( context ) ; }
public AutoFitGridLayout ( @ NonNull Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public AutoFitGridLayout ( @ NonNull Context context , AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; }
public void setColorFilter ( @ Nullable ColorFilter cf ) { if ( mColorFilter != cf ) { mColorFilter = cf ; mHasColorFilter = true ; mColorMod = true ; applyColorMod ( ) ; invalidate ( ) ; } }
private static boolean any ( @ NonNull boolean [ ] booleans ) { for ( boolean b : booleans ) { if ( b ) { return true ; } } return false ; }
private static boolean all ( @ NonNull boolean [ ] booleans ) { for ( boolean b : booleans ) { if ( b ) { return false ; } } return true ; }
public TimelineComment ( @ NonNull GitHubCommentBase comment ) { this . comment = comment ; this . file = null ; }
public void onItemClick ( ReleaseAsset item ) { DownloadUtils . enqueueDownloadWithPermissionCheck ( this , item ) ; }
public void onDestroyView ( ) { super . onDestroyView ( ) ; mContentContainer = null ; mProgress = null ; }
public void setCompletionCallback ( Runnable callback ) { mCompletionCallback = callback ; }
public void blogLink_withBlogInPath__opensBrowser ( ) { assertRedirectsToBrowser ( parseLink ( "https : assertRedirectsToBrowser ( parseLink ( "https : }
public void organizationLink_withoutName__opensBrowser ( ) { assertRedirectsToBrowser ( parseLink ( "https : }
public void issueLink_withIncorrectNumber__opensBrowser ( ) { LinkParser . ParseResult result = parseLink ( "https : assertRedirectsToBrowser ( result ) ; }
public void pullRequestLink_withInvalidId__opensBrowser ( ) { assertRedirectsToBrowser ( parseLink ( "https : assertRedirectsToBrowser ( parseLink ( "https : assertRedirectsToBrowser ( parseLink ( "https : }
public void commitLink_withoutCommitSha__opensBrowser ( ) { assertRedirectsToBrowser ( parseLink ( "https : }
public void blobLink_withoutBranchAndPath__opensBrowser ( ) { assertRedirectsToBrowser ( parseLink ( "https : }
public void compareLink_withIncompleteRefs__opensBrowser ( ) { assertRedirectsToBrowser ( parseLink ( "https : }
public void unknownRepositoryLink__opensBrowser ( ) { assertRedirectsToBrowser ( parseLink ( "https : }
private int getEventIconResId ( Review review ) { switch ( review . state ( ) ) { case Approved : return R . drawable . timeline_event_approved ; case ChangesRequested : return R . drawable . timeline_event_requested_changes ; default : return R . drawable . timeline_event_review ; } }
public void onCommentsUpdated ( ) { if ( mConversationFragment != null ) { mConversationFragment . reloadEvents ( true ) ; } }
public static < T > Single < T > doInBackground ( Single < T > upstream ) { return upstream . subscribeOn ( Schedulers . io ( ) ) . observeOn ( AndroidSchedulers . mainThread ( ) ) ; }
public void onClick ( View view ) { VH holder = ( VH ) view . getTag ( ) ; int position = holder . getBindingAdapterPosition ( ) ; if ( position != RecyclerView . NO_POSITION ) { mItemClickListener . onItemClick ( getItemFromAdapterPosition ( position ) ) ; } }
public void TestSignatureVerifies ( ) throws NoSuchAlgorithmException , IOException , InvalidKeySpecException , InvalidKeyException , SignatureException { super . TestSignatureVerifies ( updateSig , updatePkg , tempDir1 , "modules/packaging/res/env/lxc_updates . pub" ) ; }
public void downloadFailedFileMissing ( ) { gui . showError ( "At least one file could not be downloaded because it is no longer offered . " , "" ) ; }
public void downloadFailedFileOk ( String problemFilePath ) { gui . showError ( "Download error , unable to create/write file : \n\"" + problemFilePath + "\"\nPossible reasons include missing write permissions and insufficient free space . " , "" ) ; }
public void downloadFile ( LXCFile file , File targetDir ) { if ( ! network . connectAndDownload ( file , targetDir ) ) { gui . showError ( "Download failed , host unreachable . " , "" ) ; } }
private int getEventColor ( Cursor cursor ) { return cursor . getInt ( cursor . getColumnIndexOrThrow ( Instances . DISPLAY_COLOR ) ) ; }
public void requestPermission ( PermissionRequester permissionRequester ) { }
private PendingIntent getGeofencePendingIntent ( ) { Intent geofenceIntent = new Intent ( this , BackgroundService . class ) ; geofenceIntent . setAction ( INTENT_ACTION_SEND_EVENT_CIRCULAR ) ; return PendingIntent . getBroadcast ( this , INTENT_REQUEST_CODE_GEOFENCE , geofenceIntent , updateCurrentIntentFlags ) ; }
public void onDestroy ( ) { disconnect ( ) ; scheduler . cancelMqttTasks ( ) ; }
public String toJson ( @ NonNull MessageBase message ) throws IOException { return encryptString ( toUnencryptedJson ( message ) ) ; }
public byte [ ] toJsonBytes ( @ NonNull MessageBase message ) throws IOException { return encryptBytes ( toUnencryptedJsonBytes ( message ) ) ; }
private void setToolbarTitle ( CharSequence text ) { binding . appbar . toolbar . setTitle ( text ) ; }
private final Constraints anyNetworkConstraint = new Constraints . Builder ( ) . setRequiredNetworkType ( NetworkType . CONNECTED ) . build ( ) ; @ Inject Preferences preferences ; @ Inject public Scheduler ( @ ApplicationContext Context context ) { this . context = context ; }
public Scheduler ( @ ApplicationContext Context context ) { this . context = context ; }
private Activity getActivity ( ) { return activity ; }
private void startActivity ( @ NonNull Class < ? extends Activity > activityClass ) { Context activity = getActivity ( ) ; Intent intent = new Intent ( activity , activityClass ) ; activity . startActivity ( intent ) ; }
public StatusViewModel ( @ ApplicationContext Context context ) { this . context = context ; }
private void removeGeofences ( ) { geofencingClient . removeGeofences ( getGeofencePendingIntent ( ) ) ; }
public void onFailure ( Call call , IOException e ) { configurationImportFailed ( new Exception ( "Failure fetching config from remote URL" , e ) ) ; }
public void onBtnBackClick ( ) { int current = mViewPager . getCurrentItem ( ) - 1 ; if ( current >= 0 ) { mViewPager . setCurrentItem ( current ) ; if ( current == 0 ) { mBackButton . setVisibility ( View . GONE ) ; } } }
public void onPageSelected ( int position ) { setActiveBottomDot ( position ) ; mNextButton . setText ( getString ( ( position == slides . length - 1 ) ? R . string . finish : R . string . cont ) ) ; }
public int getCount ( ) { return slides . length ; }
private void requestLocationPermission ( ) { ActivityCompat . requestPermissions ( this , PermissionUtil . getLocationPermissions ( ) , Constants . PermissionRequestType . LOCATION . ordinal ( ) ) ; }
public void barcodeResult ( BarcodeResult result ) { String code = result . getText ( ) ; Intent intent = new Intent ( ) ; intent . putExtra ( QR_RESULT_ARG , code ) ; setResult ( Activity . RESULT_OK , intent ) ; finishScanning ( ) ; }
public void run ( ) { if ( ! keyboardVisible ( ) && ! editActive && ( scrollTop <= 0 ) ) { swipeRefresher . setEnabled ( true ) ; } else { swipeRefresher . setEnabled ( false ) ; swipeRefresher . setRefreshing ( false ) ; } }
public void onDeleted ( Context context , int [ ] appWidgetIds ) { for ( int appWidgetId : appWidgetIds ) { NoteWidgetConfigureActivity . deleteNotePref ( context , appWidgetId ) ; } }
public CellInfo2G ( Integer locationId , Integer areaCode , Integer primaryScramblingCode , Integer channelNumber ) { setLac ( areaCode ) ; setCid ( locationId ) ; setBsic ( primaryScramblingCode ) ; setArfcn ( channelNumber ) ; }
public CellInfo3G ( Integer locationId , Integer areaCode , Integer primaryScramblingCode , Integer channelNumber ) { setLac ( areaCode ) ; setCid ( locationId ) ; setPsc ( primaryScramblingCode ) ; setUarfcn ( channelNumber ) ; }
public CellInfo4G ( Integer locationId , Integer areaCode , Integer primaryScramblingCode , Integer channelNumber ) { setTac ( areaCode ) ; setCi ( locationId ) ; setPci ( primaryScramblingCode ) ; setEarfcn ( channelNumber ) ; }
public Long getLocationId ( ) { return locationId ; }
public void setLocationId ( Long locationId ) { this . locationId = locationId ; }
public Integer getDownloadKbit ( ) { return downloadKbit ; }
public void setDownloadKbit ( Integer downloadKbit ) { this . downloadKbit = downloadKbit ; }
public Integer getUploadKbit ( ) { return uploadKbit ; }
public void setUploadKbit ( Integer uploadKbit ) { this . uploadKbit = uploadKbit ; }
public Integer getKgNr ( ) { return kgNr ; }
public void setKgNr ( Integer kgNr ) { this . kgNr = kgNr ; }
public Integer getGkz ( ) { return gkz ; }
public void setGkz ( Integer gkz ) { this . gkz = gkz ; }
public Integer getGkzSa ( ) { return gkzSa ; }
public void setGkzSa ( Integer gkzSa ) { this . gkzSa = gkzSa ; }
public Integer getLandCover ( ) { return landCover ; }
public void setLandCover ( Integer landCover ) { this . landCover = landCover ; }
public Integer getLteRsrq ( ) { return lteRsrq ; }
public void setLteRsrq ( Integer lteRsrq ) { this . lteRsrq = lteRsrq ; }
public Integer getTestDuration ( ) { return testDuration ; }
public void setTestDuration ( Integer testDuration ) { this . testDuration = testDuration ; }
public Integer getNumThreadsRequested ( ) { return numThreadsRequested ; }
public void setNumThreadsRequested ( Integer numThreadsRequested ) { this . numThreadsRequested = numThreadsRequested ; }
public Integer getNumThreads ( ) { return numThreads ; }
public void setNumThreads ( Integer numThreads ) { this . numThreads = numThreads ; }
public Integer getNumThreadsUl ( ) { return numThreadsUl ; }
public void setNumThreadsUl ( Integer numThreadsUl ) { this . numThreadsUl = numThreadsUl ; }
public Integer getRoamingType ( ) { return roamingType ; }
public void setRoamingType ( Integer roamingType ) { this . roamingType = roamingType ; }
public Integer getChannelNumber ( ) { return channelNumber ; }
public void setChannelNumber ( Integer channelNumber ) { this . channelNumber = channelNumber ; }
public Integer getRadioBand ( ) { return radioBand ; }
public void setRadioBand ( Integer radioBand ) { this . radioBand = radioBand ; }
public Integer getWifiLinkSpeed ( ) { return wifiLinkSpeed ; }
public void setWifiLinkSpeed ( Integer wifiLinkSpeed ) { this . wifiLinkSpeed = wifiLinkSpeed ; }
public Integer getLinkId ( ) { return linkId ; }
public void setLinkId ( Integer linki_id ) { this . linkId = linki_id ; }
public boolean containsDLChannel ( double channel ) { return channel > ( uplink_channel_lower_bound - channel_offset ) && channel <= ( uplink_channel_upper_bound - channel_offset ) ; }
public boolean containsULChannel ( double channel ) { return channel > uplink_channel_lower_bound && channel <= uplink_channel_upper_bound ; }
private int getSize ( Version version ) { int result = 0 ; for ( ResultNode resultNode : list ) { result += resultNode . getSize ( version ) ; } return result ; }
public void testMinimalEncoder1 ( ) throws Exception { verifyMinimalEncoding ( "A" , "ALPHANUMERIC ( A ) " , null , false ) ; }
public void testMinimalEncoder2 ( ) throws Exception { verifyMinimalEncoding ( "AB" , "ALPHANUMERIC ( AB ) " , null , false ) ; }
public void testMinimalEncoder3 ( ) throws Exception { verifyMinimalEncoding ( "ABC" , "ALPHANUMERIC ( ABC ) " , null , false ) ; }
public void testMinimalEncoder4 ( ) throws Exception { verifyMinimalEncoding ( "ABCD" , "ALPHANUMERIC ( ABCD ) " , null , false ) ; }
public void testMinimalEncoder5 ( ) throws Exception { verifyMinimalEncoding ( "ABCDE" , "ALPHANUMERIC ( ABCDE ) " , null , false ) ; }
public void testMinimalEncoder6 ( ) throws Exception { verifyMinimalEncoding ( "ABCDEF" , "ALPHANUMERIC ( ABCDEF ) " , null , false ) ; }
public void testMinimalEncoder8 ( ) throws Exception { verifyMinimalEncoding ( "1" , "NUMERIC ( 1 ) " , null , false ) ; }
public void testMinimalEncoder9 ( ) throws Exception { verifyMinimalEncoding ( "12" , "NUMERIC ( 12 ) " , null , false ) ; }
public void testMinimalEncoder10 ( ) throws Exception { verifyMinimalEncoding ( "123" , "NUMERIC ( 123 ) " , null , false ) ; }
public void testMinimalEncoder11 ( ) throws Exception { verifyMinimalEncoding ( "1234" , "NUMERIC ( 1234 ) " , null , false ) ; }
public void testMinimalEncoder12 ( ) throws Exception { verifyMinimalEncoding ( "12345" , "NUMERIC ( 12345 ) " , null , false ) ; }
public void testMinimalEncoder13 ( ) throws Exception { verifyMinimalEncoding ( "123456" , "NUMERIC ( 123456 ) " , null , false ) ; }
public void testMinimalEncoder14 ( ) throws Exception { verifyMinimalEncoding ( "123A" , "ALPHANUMERIC ( 123A ) " , null , false ) ; }
public void testMinimalEncoder15 ( ) throws Exception { verifyMinimalEncoding ( "A1" , "ALPHANUMERIC ( A1 ) " , null , false ) ; }
public void testMinimalEncoder16 ( ) throws Exception { verifyMinimalEncoding ( "A12" , "ALPHANUMERIC ( A12 ) " , null , false ) ; }
public void testMinimalEncoder17 ( ) throws Exception { verifyMinimalEncoding ( "A123" , "ALPHANUMERIC ( A123 ) " , null , false ) ; }
public void testMinimalEncoder18 ( ) throws Exception { verifyMinimalEncoding ( "A1234" , "ALPHANUMERIC ( A1234 ) " , null , false ) ; }
public void testMinimalEncoder19 ( ) throws Exception { verifyMinimalEncoding ( "A12345" , "ALPHANUMERIC ( A12345 ) " , null , false ) ; }
public void testMinimalEncoder20 ( ) throws Exception { verifyMinimalEncoding ( "A123456" , "ALPHANUMERIC ( A123456 ) " , null , false ) ; }
public void testMinimalEncoder21 ( ) throws Exception { verifyMinimalEncoding ( "A1234567" , "ALPHANUMERIC ( A1234567 ) " , null , false ) ; }
public void testMinimalEncoder22 ( ) throws Exception { verifyMinimalEncoding ( "A12345678" , "BYTE ( A ) , NUMERIC ( 12345678 ) " , null , false ) ; }
public void testMinimalEncoder23 ( ) throws Exception { verifyMinimalEncoding ( "A123456789" , "BYTE ( A ) , NUMERIC ( 123456789 ) " , null , false ) ; }
public void testMinimalEncoder24 ( ) throws Exception { verifyMinimalEncoding ( "A1234567890" , "ALPHANUMERIC ( A1 ) , NUMERIC ( 234567890 ) " , null , false ) ; }
public void testMinimalEncoder25 ( ) throws Exception { verifyMinimalEncoding ( "AB1" , "ALPHANUMERIC ( AB1 ) " , null , false ) ; }
public void testMinimalEncoder26 ( ) throws Exception { verifyMinimalEncoding ( "AB12" , "ALPHANUMERIC ( AB12 ) " , null , false ) ; }
public void testMinimalEncoder27 ( ) throws Exception { verifyMinimalEncoding ( "AB123" , "ALPHANUMERIC ( AB123 ) " , null , false ) ; }
public void testMinimalEncoder28 ( ) throws Exception { verifyMinimalEncoding ( "AB1234" , "ALPHANUMERIC ( AB1234 ) " , null , false ) ; }
public void testMinimalEncoder29 ( ) throws Exception { verifyMinimalEncoding ( "ABC1" , "ALPHANUMERIC ( ABC1 ) " , null , false ) ; }
public void testMinimalEncoder30 ( ) throws Exception { verifyMinimalEncoding ( "ABC12" , "ALPHANUMERIC ( ABC12 ) " , null , false ) ; }
public void testMinimalEncoder33 ( ) throws Exception { verifyMinimalEncoding ( "HTTP : " ) " , null , false ) ; }
public void testMinimalEncoder35 ( ) throws Exception { verifyMinimalEncoding ( "\u0150" , "ECI ( ISO - 8859 - 2 ) , BYTE ( . ) " , null , false ) ; }
public void testMinimalEncoder36 ( ) throws Exception { verifyMinimalEncoding ( "\u015C" , "ECI ( ISO - 8859 - 3 ) , BYTE ( . ) " , null , false ) ; }
public void testMinimalEncoder37 ( ) throws Exception { verifyMinimalEncoding ( "\u0150\u015C" , "ECI ( UTF - 8 ) , BYTE ( . . ) " , null , false ) ; }
public void testMinimalEncoder39 ( ) throws Exception { verifyMinimalEncoding ( "abcdef\u0150ghij" , "ECI ( ISO - 8859 - 2 ) , BYTE ( abcde" + "f . ghij ) " , null , false ) ; }
public void testMinimalEncoder41 ( ) throws Exception { verifyMinimalEncoding ( "1001114670010%01201220%107211220%140045003267781" , "FNC1_FIRST_POSITION ( ) , NUMERIC ( 100111" + "4670010 ) , ALPHANUMERIC ( %01201220%107211220% ) , NUMERIC ( 140045003267781 ) " , null , true ) ; }
private boolean isValid ( int x , int y ) { return x >= 0 && x < image . getWidth ( ) && y >= 0 && y < image . getHeight ( ) ; }
public Maxicode1TestCase ( ) { super ( "src/test/resources/blackbox/maxicode - 1" , new MultiFormatReader ( ) , BarcodeFormat . MAXICODE ) ; addTest ( 6 , 6 , 0 . 0f ) ; }
public void onBillingServiceDisconnected ( ) { alert ( getString ( R . string . error ) , getString ( R . string . failed_to_connect_to_gplay ) ) ; updatePurchaseButtonTexts ( ) ; }
public void onStop ( ) { stopProgressDialog ( ) ; mHandler . removeCallbacks ( runnableConfiguring ) ; super . onStop ( ) ; }
public String getBluetoothICFirmwareName ( ) { return mBluetoothConnector . mBluetoothIcDevice . getBluetoothIcName ( ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; clearOperationSelect ( ) ; operationReadTemperature = true ; textViewTemperatureValue . setText ( "" ) ; readWriteOperation ( ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; clearOperationSelect ( ) ; operationReadBattery = true ; textViewBatteryValue . setText ( "" ) ; readWriteOperation ( ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; clearOperationSelect ( ) ; operationSetLogging = true ; textViewLoggingValue . setText ( "" ) ; readWriteOperation ( ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; clearOperationSelect ( ) ; operationGetLogging = true ; textViewLoggingValue1 . setText ( "" ) ; readWriteOperation ( ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; clearOperationSelect ( ) ; operationRead = true ; readWriteOperation ( ) ; }
public void onClick ( View v ) { if ( isOperationRunning ( ) ) return ; clearOperationSelect ( ) ; operationRead = false ; readWriteOperation ( ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , true ) ; return inflater . inflate ( R . layout . home_layout , container , false ) ; }
public void set_fdWrite ( int addr , long value ) { macWrite ( 0x118 , addr ) ; macWrite ( 0x119 , value ) ; }
public void set_fdReadMem ( int addr , long len ) { macWrite ( 0x11c , addr ) ; macWrite ( 0x11d , len ) ; }
public void set_fdWriteMem ( int addr , int len , long value ) { set_fdReadMem ( addr , len ) ; macWrite ( 0x11e , value ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , true ) ; return inflater . inflate ( R . layout . fragment_about , container , false ) ; }
public View onCreateView ( LayoutInflater inflater , ViewGroup container , Bundle savedInstanceState ) { super . onCreateView ( inflater , container , savedInstanceState , true ) ; return inflater . inflate ( R . layout . fragment_select_axzon , container , false ) ; }
public boolean starAuthOperation ( ) { mRfidDevice . mRfidReaderChip . setPwrManagementMode ( false ) ; return mRfidDevice . mRfidReaderChip . sendHostRegRequestHST_CMD ( HostCommands . CMD_AUTHENTICATE ) ; }
public boolean getInvMatchEnable ( ) { return mRfidDevice . mRfidReaderChip . mRx000Setting . getInvMatchEnable ( ) > 0 ? true : false ; }
public boolean getInvMatchType ( ) { return mRfidDevice . mRfidReaderChip . mRx000Setting . getInvMatchType ( ) > 0 ? true : false ; }
public int getInvMatchOffset ( ) { return mRfidDevice . mRfidReaderChip . mRx000Setting . getInvMatchOffset ( ) ; }
public String getBluetoothICFirmwareVersion ( ) { return mBluetoothConnector . mBluetoothIcDevice . getBluetoothIcVersion ( ) ; }
public boolean setBluetoothICFirmwareName ( String name ) { return mBluetoothConnector . mBluetoothIcDevice . setBluetoothIcName ( name ) ; }
public boolean forceBTdisconnect ( ) { return mBluetoothConnector . mBluetoothIcDevice . forceBTdisconnect ( ) ; }
public void onAccessibilityEvent ( AccessibilityEvent event ) { if ( serviceActive && event . getEventType ( ) == AccessibilityEvent . TYPE_VIEW_SCROLLED && transliterated ) { removeTransliteration ( ) ; } }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getTargetContext ( ) ; assertEquals ( "com . frogdevelopment . nihongo . dico" , appContext . getPackageName ( ) ) ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . mytestingapp" , appContext . getPackageName ( ) ) ; }
public void useAppContext ( ) throws Exception { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . dicoding . picodiploma . mytestingapp" , appContext . getPackageName ( ) ) ; }
private void persistCookies ( ) { Prefs . INSTANCE . setCookies ( cookieJar ) ; }
public void testRequestResponseApiError ( ) throws Throwable { enqueueFromFile ( "api_error . json" ) ; new CsrfTokenClient ( getWikiSite ( ) , 1 , getApiService ( ) ) . getToken ( ) . test ( ) . await ( ) . assertError ( Exception . class ) ; }
public void testRequestResponseFailure ( ) throws Throwable { enqueue404 ( ) ; new CsrfTokenClient ( getWikiSite ( ) , 1 , getApiService ( ) ) . getToken ( ) . test ( ) . await ( ) . assertError ( Exception . class ) ; }
public String getAppInstallID ( ) { String id = Prefs . INSTANCE . getAppInstallId ( ) ; if ( id == null ) { id = UUID . randomUUID ( ) . toString ( ) ; Prefs . INSTANCE . setAppInstallId ( id ) ; } return id ; }
public void setCurrentTheme ( @ NonNull Theme theme ) { if ( theme != currentTheme ) { currentTheme = theme ; Prefs . INSTANCE . setCurrentThemeId ( currentTheme . getMarshallingId ( ) ) ; bus . post ( new ThemeFontChangeEvent ( ) ) ; } }
public void setFontFamily ( @ NonNull String fontFamily ) { if ( ! fontFamily . equals ( Prefs . INSTANCE . getFontFamily ( ) ) ) { Prefs . INSTANCE . setFontFamily ( fontFamily ) ; bus . post ( new ThemeFontChangeEvent ( ) ) ; } }
public void commitTabState ( ) { if ( tabList . isEmpty ( ) ) { Prefs . INSTANCE . clearTabs ( ) ; initTabs ( ) ; } else { Prefs . INSTANCE . setTabs ( tabList ) ; } }
public void testValidateInputInvalidPassword ( ) { assertThat ( validateInput ( "user" , "foo" , "password" , "" ) , is ( ValidateResult . PASSWORD_TOO_SHORT ) ) ; }
public void logCrashManually ( @ NonNull Throwable throwable ) { L . e ( throwable ) ; }
public synchronized void resetWikiSite ( ) { wiki = null ; }
private void cancelOrDestroy ( ) { mBtnType = "Y" ; if ( mRecognizer != null ) { mRecognizer . destroy ( ) ; mRecognizer = null ; } }
public boolean exists ( @ NonNull Uri filePath ) { FsModule fsModule = fsResolver . resolveFsByUri ( filePath ) ; return fsModule . exists ( filePath ) ; }
public boolean exists ( @ NonNull Uri filePath ) { SafFileSystem fs = SafFileSystem . getInstance ( appContext ) ; return fs . exists ( filePath ) ; }
private void showCopyToClipboardDialog ( String url ) { if ( url == null ) return ; Intent i = new Intent ( this , SendTextToClipboard . class ) ; i . putExtra ( Intent . EXTRA_TEXT , url ) ; startActivityForResult ( i , 0 ) ; }
public void onError ( @ NonNull Throwable e ) { Timber . e ( e , "create counter" ) ; }
public void onSubscribe ( @ NonNull Disposable d ) { }
public void onError ( @ NonNull Throwable e ) { Timber . e ( e , "modifyCount counter" ) ; }
public void onError ( @ NonNull Throwable e ) { Timber . e ( e , "modifyName counter" ) ; }
public void onError ( @ NonNull Throwable e ) { Timber . e ( e ) ; }
public void onError ( @ NonNull Throwable e ) { Timber . e ( e , "remove all" ) ; }
public void onError ( @ NonNull Throwable e ) { Timber . e ( e , "resetAll" ) ; }
public int getItemViewType ( int position ) { if ( getItemCount ( ) < 6 ) { return TYPE_FULL ; } else { return TYPE_COMPACT ; } }
public void show ( NameDO name ) { currentName = name ; dialog . getInputEditText ( ) . setText ( "" ) ; dialog . show ( ) ; maybeRunShowKeyboardHack ( ) ; }
private void goIntoRenamingDialogFromAmountChoice ( ) { renamingDialog . setActionButton ( DialogAction . NEUTRAL , R . string . back ) ; showRenamingDialog ( ) ; }
public void show ( ) { adderDialog . getInputEditText ( ) . setText ( "" ) ; adderDialog . show ( ) ; maybeRunShowKeyboardHack ( ) ; }
public void show ( String currentName ) { dialog . getInputEditText ( ) . setText ( currentName ) ; dialog . show ( ) ; maybeRunShowKeyboardHack ( ) ; }
public Builder setFabType ( @ FabType String fabType ) { mFabType = fabType ; return this ; }
public Task < Void > deleteAccount ( ) { return Tasks . call ( executorService , ( Callable < Void > ) ( ) -> { makePostRequest ( "User/Delete" , null ) ; return null ; } ) . addOnCompleteListener ( res -> logout ( ) ) ; }
public static PyxServersApi get ( ) { if ( instance == null ) instance = new PyxServersApi ( ) ; return instance ; }
private CustomDecksDatabase ( @ Nullable Context context ) { super ( context , "custom_decks . db" , null , 15 ) ; }
public @ Nullable < T > T read ( @ NonNull String key ) { return read ( key , null ) ; }
public boolean contains ( @ NonNull String key ) { return mStorage . exists ( key ) ; }
public boolean exist ( @ NonNull String key ) { return mStorage . exists ( key ) ; }
public long lastModified ( @ NonNull String key ) { return mStorage . lastModified ( key ) ; }
public void delete ( @ NonNull String key ) { mStorage . deleteIfExists ( key ) ; }
public @ NonNull List < String > getAllKeys ( ) { return mStorage . getAllKeys ( ) ; }
public @ NonNull String getPath ( ) { return mStorage . getRootFolderPath ( ) ; }
public @ NonNull String getPath ( @ NonNull String key ) { return mStorage . getOriginalFilePath ( key ) ; }
public static void init ( @ NonNull Context context ) { mContext = context . getApplicationContext ( ) ; }
public static @ NonNull Book book ( @ NonNull String name ) { if ( name . equals ( DEFAULT_DB_NAME ) ) throw new PaperDbException ( DEFAULT_DB_NAME + " name is reserved for default library name" ) ; return getBook ( null , name ) ; }
public static @ NonNull Book book ( ) { return getBook ( null , DEFAULT_DB_NAME ) ; }
public static @ NonNull Book bookOn ( @ NonNull String location ) { return bookOn ( location , DEFAULT_DB_NAME ) ; }
public static @ Nullable < T > T get ( @ NonNull String key ) { return book ( ) . read ( key ) ; }
public static boolean exist ( @ NonNull String key ) { return book ( ) . contains ( key ) ; }
public static void delete ( @ NonNull String key ) { book ( ) . delete ( key ) ; }
public static void clear ( @ NonNull Context context ) { init ( context ) ; book ( ) . destroy ( ) ; }
public static < T > void addSerializer ( @ NonNull Class < T > clazz , @ NonNull Serializer < T > serializer ) { if ( ! mCustomSerializers . containsKey ( clazz ) ) mCustomSerializers . put ( clazz , serializer ) ; }
public DecryptedState ( List < JSONObject > entries ) { super ( false ) ; _entries = entries ; }
public void onRefresh ( ) { if ( ! _hidden && ! _paused ) { refreshCode ( ) ; } }
public void refreshCode ( ) { if ( ! _hidden && ! _paused ) { updateCode ( ) ; } }
public static byte [ ] decode ( String s ) throws EncodingException { try { return BaseEncoding . base32 ( ) . decode ( s . toUpperCase ( Locale . ROOT ) ) ; } catch ( IllegalArgumentException e ) { throw new EncodingException ( e ) ; } }
public static byte [ ] decode ( String s ) throws EncodingException { try { return BaseEncoding . base16 ( ) . decode ( s . toUpperCase ( Locale . ROOT ) ) ; } catch ( IllegalArgumentException e ) { throw new EncodingException ( e ) ; } }
public String getType ( ) { return getTypeId ( ) . toUpperCase ( Locale . ROOT ) ; }
public String getType ( ) { String id = getTypeId ( ) ; return id . substring ( 0 , 1 ) . toUpperCase ( Locale . ROOT ) + id . substring ( 1 ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { _menu = menu ; getMenuInflater ( ) . inflate ( R . menu . menu_import_entries , _menu ) ; return true ; }
public HotpInfo ( byte [ ] secret ) throws OtpInfoException { this ( secret , DEFAULT_COUNTER ) ; }
public OtpInfo ( byte [ ] secret ) throws OtpInfoException { this ( secret , DEFAULT_ALGORITHM , DEFAULT_DIGITS ) ; }
public TotpInfo ( byte [ ] secret ) throws OtpInfoException { super ( secret ) ; setPeriod ( DEFAULT_PERIOD ) ; }
public void onViewRecycled ( @ NonNull ImportEntryHolder holder ) { holder . getData ( ) . setOnCheckedChangedListener ( null ) ; }
public String getTypeId ( ) { return ID ; }
private int parsePeriod ( ) throws ParseException { try { return Integer . parseInt ( _textPeriodCounter . getText ( ) . toString ( ) ) ; } catch ( NumberFormatException e ) { throw new ParseException ( "Period is not an integer . " ) ; } }
public static MasterKey decryptPasswordSlot ( PasswordSlot slot , SecretKey key ) throws SlotException , SlotIntegrityException { Cipher cipher = slot . createDecryptCipher ( key ) ; return slot . getKey ( cipher ) ; }
public static Export parseExportUri ( String s ) throws GoogleAuthInfoException { Uri uri = Uri . parse ( s ) ; if ( uri == null ) { throw new GoogleAuthInfoException ( uri , "Bad URI format" ) ; } return GoogleAuthInfo . parseExportUri ( uri ) ; }
public static Peer moveFrom ( Peer other ) { return new Peer ( libtremotesfJNI . moveFrom__SWIG_2 ( Peer . getCPtr ( other ) , other ) , true ) ; }
public void setUpCredentials ( ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( getApplicationContext ( ) ) ; preferences . edit ( ) . putString ( "user_id" , BuildConfig . TEST_USER_ID ) . putString ( "user_key" , BuildConfig . TEST_USER_KEY_READONLY ) . commit ( ) ; }
public void clearCredentials ( ) { SharedPreferences preferences = PreferenceManager . getDefaultSharedPreferences ( getApplicationContext ( ) ) ; preferences . edit ( ) . clear ( ) . commit ( ) ; }
public void clearDatabase ( ) { Database database = new Database ( getApplicationContext ( ) ) ; database . resetAllData ( ) ; }
private void reinitStorage ( ) { closeFoundFragment ( ) ; getMainPage ( ) . clearView ( ) ; StorageManager . startInitStorage ( this , this , true ) ; }
private void searchInMainPage ( String query , boolean isSaveQuery ) { if ( isSaveQuery ) { TetroidSuggestionProvider . saveRecentQuery ( this , query ) ; } searchInMainPage ( query , getMainPage ( ) . getCurMainViewId ( ) ) ; }
public TetroidEditor ( Context context ) { super ( context ) ; init ( ) ; }
public TetroidEditor ( Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( ) ; }
public static Map < String , TetroidTag > getTags ( ) { return getInstance ( ) . mXml . mTagsMap ; }
public static boolean isShowNodesInsteadExit ( Context context ) { return getBoolean ( context , R . string . pref_key_show_nodes_instead_exit , true ) ; }
public static String getSyncAppName ( Context context ) { return getString ( context , R . string . pref_key_app_for_sync , context . getString ( R . string . title_app_mgit ) ) ; }
public static boolean isConfirmAppExit ( Context context ) { return getBoolean ( context , R . string . pref_key_is_confirm_app_exit , true ) ; }
public void onClick ( View v ) { StorageManager . loadAllNodes ( MainActivity . this , false ) ; }
public void onApply ( ) { initCryptPass ( passHash , true ) ; PINManager . askPINCode ( context , isNodeOpening , ( ) -> { loadStorage ( context , node , true , isOnlyFavorites , isHandleReceivedIntent ) ; } ) ; }
public void onCancel ( ) { if ( ! isNodeOpening ) { loadStorage ( context , node , false , isOnlyFavorites , isHandleReceivedIntent ) ; } }
public void onClick ( TetroidNode node , int pos ) { onSelectNode ( node ) ; }
public static boolean isAskBeforeSyncOnInit ( Context context ) { return getBoolean ( context , R . string . pref_key_is_ask_before_sync , true ) ; }
public static void showSnackMoreInLogs ( Context context , View view ) { showSnack ( view , R . string . title_more_in_logs , Snackbar . LENGTH_LONG , R . string . title_open , v -> LogsActivity . startLogsActivity ( context ) ) ; }
public static void info ( AppCompatActivity activity , String tag , String message ) { info ( activity . getSupportFragmentManager ( ) , tag , message ) ; }
private void showError ( String message ) { Dialog . info ( this , "favorite_error" , message ) ; }
public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; Bundle args = getArguments ( ) ; if ( args != null ) { retrieveFragmentArgs ( args ) ; } }
private void updateSelectionOverlay ( ReferenceItem item ) { if ( selectionMode && isSelected ( item ) ) { binding . selectionOverlay . setVisibility ( View . VISIBLE ) ; } else { binding . selectionOverlay . setVisibility ( View . GONE ) ; } }
public void refresh ( ) { executorProvider . getBackgroundExecutor ( ) . execute ( this : : loadListInBackground ) ; }
public static MessageDialogFragment newInstance ( String message ) { MessageDialogFragment fragment = new MessageDialogFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( "message" , message ) ; fragment . setArguments ( args ) ; return fragment ; }
public static ReferenceListFragment newListChildrenInstance ( @ Nullable String parentId ) { ReferenceListFragment fragment = new ReferenceListFragment ( ) ; Bundle args = new Bundle ( ) ; args . putString ( "parentId" , parentId ) ; fragment . setArguments ( args ) ; return fragment ; }
public static AboutFragment newInstance ( ) { Bundle args = new Bundle ( ) ; AboutFragment fragment = new AboutFragment ( ) ; fragment . setArguments ( args ) ; return fragment ; }
private void showMainFragment ( ) { setTitle ( getString ( R . string . app_name ) ) ; getSupportFragmentManager ( ) . popBackStack ( "main" , 0 ) ; binding . navigationView . setCheckedItem ( R . id . nav_all ) ; }
public static FavoriteListFragment newInstance ( ) { Bundle args = new Bundle ( ) ; FavoriteListFragment fragment = new FavoriteListFragment ( ) ; fragment . setArguments ( args ) ; return fragment ; }
private void setListShown ( boolean shown ) { binding . switcher . setDisplayedChild ( shown ? 0 : 1 ) ; }
public void onMultiSelectionStart ( ) { ( ( AppCompatActivity ) requireActivity ( ) ) . startSupportActionMode ( new SelectorCallback ( ) ) ; adapter . startSelectionMode ( ) ; }
public boolean onCreateActionMode ( ActionMode actionMode , Menu menu ) { requireActivity ( ) . getMenuInflater ( ) . inflate ( R . menu . fragment_reference_select , menu ) ; selectionActionMode = actionMode ; return true ; }
public void onComplete ( ) { refreshBookmarksMenu ( ) ; }
public QuranTranslationPageLayout ( Context context ) { super ( context ) ; isFullWidth = true ; initialize ( ) ; }
public Observable < Boolean > tagsObservable ( ) { return tagPublishSubject . hide ( ) ; }
private void onAudioPlaybackAyahChanged ( @ Nullable SuraAyah suraAyah ) { if ( suraAyah != null ) { ensurePage ( suraAyah . sura , suraAyah . ayah ) ; } }
private SuraAyah getSelectionStart ( ) { final AyahSelection currentSelection = readingEventPresenter . currentAyahSelection ( ) ; return AyahSelectionKt . startSuraAyah ( currentSelection ) ; }
private SuraAyah getSelectionEnd ( ) { final AyahSelection currentSelection = readingEventPresenter . currentAyahSelection ( ) ; return AyahSelectionKt . endSuraAyah ( currentSelection ) ; }
public void bind ( @ NonNull TagBookmarkDialog dialog ) { this . dialog = dialog ; if ( tags != null ) { this . dialog . setData ( tags , checkedTags ) ; } }
public boolean handleTouchEvent ( MotionEvent event , AyahSelectedListener . EventType eventType , int page ) { return isVisible ( ) && ayahTrackerPresenter . handleTouchEvent ( getActivity ( ) , event , eventType , page , ayahCoordinatesError ) ; }
public ReadGaplessDataTask ( String database ) { databasePath = database ; }
public void setUp ( ) { MockitoAnnotations . openMocks ( BookmarkImportExportModelTest . this ) ; bookmarkImportExportModel = new BookmarkImportExportModel ( context , new BookmarkJsonModel ( ) , bookmarkModel ) ; }
public void setupTest ( ) { MockitoAnnotations . openMocks ( BookmarkModelTest . this ) ; model = new BookmarkModel ( bookmarksAdapter , recentPageModel ) ; }
public void setupTest ( ) { MockitoAnnotations . openMocks ( RecentPageModelTest . this ) ; }
private final View . OnClickListener mOnUndoClickListener = new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { bookmarkPresenter . cancelDeletion ( ) ; bookmarkPresenter . requestData ( true ) ; } } ;
public String [ ] getTranslationNames ( ) { return translationNames ; }
public Set < String > getActiveTranslationsFilesNames ( ) { return activeTranslationsFilesNames ; }
public void onSuccess ( @ NonNull ResultHolder result ) { if ( getTranslationScreen ( ) != null ) { getTranslationScreen ( ) . setVerses ( result . getTranslations ( ) , result . getAyahInformation ( ) ) ; } }
public static Fraction toFraction ( Float value ) { return Fraction . fromFloat ( value ) ; }
private int getMaxAnswerWeight ( Collection < String > list ) { return ( int ) Math . floor ( Math . log ( ( double ) Integer . MAX_VALUE / ( list . size ( ) - 1 ) ) / Math . log ( 2 ) ) ; }
public void setQuestions ( Question [ ] questions ) { this . questions = questions ; buildTextBox ( ) ; }
public RootCommand clone ( ) { RootCommand rootCommand = null ; try { rootCommand = ( RootCommand ) super . clone ( ) ; rootCommand . isv6 = true ; } catch ( CloneNotSupportedException e ) { e . printStackTrace ( ) ; } return rootCommand ; } */
public static String ip_path ( ) { return gPrefs . getString ( IPTABLES_PATH , "system" ) ; }
public ViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { mView = LayoutInflater . from ( parent . getContext ( ) ) . inflate ( R . layout . log_recycle_item , parent , false ) ; return new ViewHolder ( mView ) ; }
public static boolean activeNotification ( boolean val ) { gPrefs . edit ( ) . putBoolean ( ACTIVE_NOTIFICATION , val ) . commit ( ) ; return val ; }
public static boolean showLogToasts ( boolean val ) { gPrefs . edit ( ) . putBoolean ( SHOW_LOG_TOAST , val ) . commit ( ) ; return val ; } */
public static String logTarget ( ) { return gPrefs . getString ( LOG_TARGET , "" ) . trim ( ) ; }
public static String logDmsg ( String val ) { gPrefs . edit ( ) . putString ( LOG_DMESG , val ) . commit ( ) ; return val ; } */
private static int [ ] zzUnpackcmap_blocks ( ) { int [ ] result = new int [ 31232 ] ; int offset = 0 ; offset = zzUnpackcmap_blocks ( ZZ_CMAP_BLOCKS_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackAction ( ) { int [ ] result = new int [ 780 ] ; int offset = 0 ; offset = zzUnpackAction ( ZZ_ACTION_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackRowMap ( ) { int [ ] result = new int [ 780 ] ; int offset = 0 ; offset = zzUnpackRowMap ( ZZ_ROWMAP_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackAttribute ( ) { int [ ] result = new int [ 780 ] ; int offset = 0 ; offset = zzUnpackAttribute ( ZZ_ATTRIBUTE_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackcmap_blocks ( ) { int [ ] result = new int [ 30208 ] ; int offset = 0 ; offset = zzUnpackcmap_blocks ( ZZ_CMAP_BLOCKS_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackAction ( ) { int [ ] result = new int [ 310 ] ; int offset = 0 ; offset = zzUnpackAction ( ZZ_ACTION_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackRowMap ( ) { int [ ] result = new int [ 310 ] ; int offset = 0 ; offset = zzUnpackRowMap ( ZZ_ROWMAP_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackTrans ( ) { int [ ] result = new int [ 19694 ] ; int offset = 0 ; offset = zzUnpackTrans ( ZZ_TRANS_PACKED_0 , offset , result ) ; return result ; }
private static int [ ] zzUnpackAttribute ( ) { int [ ] result = new int [ 310 ] ; int offset = 0 ; offset = zzUnpackAttribute ( ZZ_ATTRIBUTE_PACKED_0 , offset , result ) ; return result ; }
public void showInstructions ( View view ) { setContentView ( R . layout . instructions ) ; findViewById ( R . id . back_button ) . setOnClickListener ( ( View v ) -> showMain ( ) ) ; }
public String getSensible ( ) { return sensible ; }
public void setSensible ( String sensible ) { this . sensible = sensible ; }
public void useAppContext ( ) { Context appContext = InstrumentationRegistry . getInstrumentation ( ) . getTargetContext ( ) ; assertEquals ( "com . niesens . morsetrainer" , appContext . getPackageName ( ) ) ; }
private void onChangedConnectionProperty ( String key ) { DatabaseLogger . i ( TAG , "Changed parameter " + key ) ; new Scheduler ( this ) . scheduleNow ( ) ; }
public void v ( String tag , String message , Object . . . args ) { DatabaseLogger . v ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public void v ( Throwable t , String tag , String message , Object . . . args ) { DatabaseLogger . v ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public void d ( String tag , String message , Object . . . args ) { DatabaseLogger . d ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public void d ( Throwable t , String tag , String message , Object . . . args ) { DatabaseLogger . d ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public void i ( String tag , String message , Object . . . args ) { DatabaseLogger . i ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public void i ( Throwable t , String tag , String message , Object . . . args ) { DatabaseLogger . i ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public void w ( String tag , String message , Object . . . args ) { DatabaseLogger . w ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public void w ( Throwable t , String tag , String message , Object . . . args ) { DatabaseLogger . w ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
public void e ( String tag , String message , Object . . . args ) { DatabaseLogger . e ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) ) ; }
public void e ( Throwable t , String tag , String message , Object . . . args ) { DatabaseLogger . e ( BEACON_TAG_PREFIX + tag , formatString ( message , args ) , t ) ; }
private static Intent getBatteryStatusIntent ( Context context ) { DatabaseLogger . i ( TAG , "Retrieving battery value" ) ; IntentFilter filter = new IntentFilter ( Intent . ACTION_BATTERY_CHANGED ) ; return context . registerReceiver ( null , filter ) ; }
public Boolean parseResult ( int resultCode , @ Nullable Intent intent ) { DatabaseLogger . d ( TAG , "Received result code " + resultCode + " for action " + action ) ; return resultCode == Activity . RESULT_OK ; }
private void handleResult ( O result ) { if ( inProgress . get ( ) ) { doHandleResult ( result ) ; } else { DatabaseLogger . w ( TAG , "Skipping result because initialization not in progress for " + getName ( ) ) ; } }
public void onBindViewHolder ( final ViewHolder holder , int position ) { LogItem item = getItem ( position ) ; holder . contentView . setText ( item . getLine ( ) ) ; }
public void onCreate ( ) { super . onCreate ( ) ; initLogger ( ) ; initBeaconManager ( ) ; NotificationFactory . createNotificationChannel ( this ) ; migrateOldSettings ( ) ; }
public void onCreatePreferences ( Bundle savedInstanceState , String rootKey ) { getPreferenceManager ( ) . getSharedPreferences ( ) . registerOnSharedPreferenceChangeListener ( ownListener ) ; }
public void onInterrupt ( ) { Timber . d ( "onInterrupt" ) ; }
public void callUSSDInvoke ( String ussdPhoneNumber , HashMap < String , HashSet < String >> map , CallbackInvoke callbackInvoke ) { callUSSDInvoke ( ussdPhoneNumber , 0 , map , callbackInvoke ) ; }
public void callUSSDOverlayInvoke ( String ussdPhoneNumber , HashMap < String , HashSet < String >> map , CallbackInvoke callbackInvoke ) { callUSSDOverlayInvoke ( ussdPhoneNumber , 0 , map , callbackInvoke ) ; }
public void onCreateOptionsMenu ( @ NonNull Menu menu , @ NonNull MenuInflater inflater ) { inflater . inflate ( R . menu . menu_resto , menu ) ; requireBaseActivity ( this ) . tintToolbarIcons ( menu , R . id . action_history ) ; }
public void fillArguments ( @ NonNull Intent activityIntent , Bundle bundle ) { if ( activityIntent . hasExtra ( ARG_DATE ) ) { bundle . putSerializable ( ARG_DATE , activityIntent . getSerializableExtra ( ARG_DATE ) ) ; } }
public String getIdentifier ( ) { return newsItem . getId ( ) ; }
public NewsArticle getNewsItem ( ) { return newsItem ; }
public RtpContentMap ( Group group , Map < String , DescriptionTransport > contents ) { this . group = group ; this . contents = contents ; }
public IceUdpTransportInfo ( ) { super ( "transport" , Namespace . JINGLE_TRANSPORT_ICE_UDP ) ; }
public void cancelIncomingCallNotification ( ) { stopSoundAndVibration ( ) ; cancel ( INCOMING_CALL_NOTIFICATION_ID ) ; }
public void sendMessagePacket ( Account account , MessagePacket packet ) { final XmppConnection connection = account . getXmppConnection ( ) ; if ( connection != null ) { connection . sendMessagePacket ( packet ) ; } }
public RtpEndUserState toEndUserState ( ) { switch ( this ) { case SEARCHING : case SEARCHING_ACKNOWLEDGED : return RtpEndUserState . FINDING_DEVICE ; case DISCOVERED : return RtpEndUserState . RINGING ; default : return RtpEndUserState . CONNECTIVITY_ERROR ; } }
public void onRequestPermissionsResult ( int requestCode , @ NonNull String [ ] permissions , @ NonNull int [ ] grantResults ) { ScanActivity . onRequestPermissionResult ( this , requestCode , grantResults ) ; }
private final DialogInterface . OnClickListener removeFromRoster = new DialogInterface . OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { xmppConnectionService . deleteContactOnServer ( contact ) ; } } ;
public void onRequestPermissionsResult ( int requestCode , String [ ] permissions , int [ ] grantResults ) { ScanActivity . onRequestPermissionResult ( this , requestCode , grantResults ) ; }
private int getStartOfSequence ( DataInputStream in , byte [ ] sequence ) throws IOException { int end = getEndOfSequence ( in , sequence ) ; return ( end < 0 ) ? ( - 1 ) : ( end - sequence . length ) ; }
public void setSource ( @ NonNull MjpegInputStream stream ) { mMjpegView . setSource ( stream ) ; }
public void setDisplayMode ( @ NonNull DisplayMode mode ) { mMjpegView . setDisplayMode ( mode ) ; }
public void setOnFrameCapturedListener ( @ NonNull OnFrameCapturedListener onFrameCapturedListener ) { mMjpegView . setOnFrameCapturedListener ( onFrameCapturedListener ) ; }
public void onSurfaceCreated ( @ NonNull SurfaceHolder holder ) { _surfaceCreated ( ) ; }
public void onSurfaceChanged ( @ NonNull SurfaceHolder holder , int format , int width , int height ) { _surfaceChanged ( width , height ) ; }
public void onSurfaceDestroyed ( @ NonNull SurfaceHolder holder ) { _surfaceDestroyed ( ) ; }
public void setSource ( @ NonNull MjpegInputStream stream ) { if ( ! ( stream instanceof MjpegInputStreamDefault ) ) { throw new IllegalArgumentException ( "stream must be an instance of MjpegInputStreamDefault" ) ; } _setSource ( ( MjpegInputStreamDefault ) stream ) ; }
public void setDisplayMode ( DisplayMode mode ) { setDisplayMode ( mode . getValue ( ) ) ; }
public void setOnFrameCapturedListener ( @ NonNull OnFrameCapturedListener onFrameCapturedListener ) { this . onFrameCapturedListener = onFrameCapturedListener ; }
public void setSource ( @ NonNull MjpegInputStream stream ) { if ( ! ( stream instanceof MjpegInputStreamNative ) ) { throw new IllegalArgumentException ( "stream must be an instance of MjpegInputStreamNative" ) ; } _setSource ( ( MjpegInputStreamNative ) stream ) ; }
public void setOnFrameCapturedListener ( @ NonNull OnFrameCapturedListener onFrameCapturedListener ) { throw new UnsupportedOperationException ( "Not implemented yet ! " ) ; }
public void onMapClick ( @ NonNull LatLng latLng ) { for ( MapLayer layer : layers ) { layer . onMapClick ( latLng ) ; } }
public AuthException ( String message ) { super ( "authorization error - auth : " + message ) ; }
public static boolean isArrayTerm ( final String code ) { return ArrayFunctions . FunctionType . MATRIX . lowerCaseName . equals ( code ) ; }
public PaletteButton . Category getPaletteCategory ( ) { return this == MATRIX || this == READ ? PaletteButton . Category . TOP_LEVEL_TERM : PaletteButton . Category . CONVERSION ; }
public FunctionType getFunctionType ( ) { return ( FunctionType ) termType ; }
public boolean isArray ( ) { return isMatrix ( ) || isFile ( ) ; }
public long getItemId ( int position ) { return getItem ( position ) . getAlbumId ( ) ; }
public ArtistModel ( String name , long artistId ) { if ( name != null ) { mArtistName = name ; } else { mArtistName = "" ; } mArtistID = artistId ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeString ( mArtistName ) ; dest . writeLong ( mArtistID ) ; dest . writeString ( mMBId ) ; dest . writeByte ( ( byte ) ( mImageFetching ? 1 : 0 ) ) ; }
public PlaylistModel ( String playlistName , long playlistId , PLAYLIST_TYPES playlistType ) { this ( playlistName , playlistId , - 1 , null , playlistType ) ; }
public PlaylistModel ( String playlistName , long playlistId , int mPlaylistTracks , PLAYLIST_TYPES playlistType ) { this ( playlistName , playlistId , mPlaylistTracks , null , playlistType ) ; }
public TrackModel ( ) { this ( null , null , - 1 , null , - 1 , 0 , 0 , null , - 1 ) ; }
private AlbumViewModelFactory ( final Application application , final long artistId , final boolean loadRecent ) { mApplication = application ; mArtistID = artistId ; mLoadRecent = loadRecent ; }
public AlbumViewModelFactory ( final Application application , final long artistId ) { this ( application , artistId , false ) ; }
public TrackViewModelFactory ( final Application application ) { this ( application , - 1 ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return ( T ) new TrackViewModel ( mApplication , mAlbumId ) ; }
private LimitingRequestQueue ( Cache cache , Network network ) { super ( cache , network , 1 ) ; mLimitingRequestQueue = new LinkedBlockingQueue <> ( ) ; mLimiterTimer = null ; addRequestEventListener ( this ) ; }
public boolean onQueryTextSubmit ( String query ) { applyFilter ( query ) ; return true ; }
public void setDN ( String dn ) { mDn = dn ; notifyChanged ( ) ; }
public void setAuthType ( int x509authtype ) { mDNType = x509authtype ; notifyChanged ( ) ; }
public RemoteCNPreference ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; }
public synchronized static void setConnectedVPNProfile ( String uuid ) { mLastConnectedVPNUUID = uuid ; for ( StateListener sl : stateListener ) sl . setConnectedVPN ( uuid ) ; }
public static void logException ( Throwable e ) { logException ( LogLevel . ERROR , null , e ) ; }
public static void logException ( String context , Throwable e ) { logException ( LogLevel . ERROR , context , e ) ; }
public static void setTemporaryProfile ( Context c , VpnProfile tmp ) { tmp . mTemporaryProfile = true ; ProfileManager . tmpprofile = tmp ; saveProfile ( c , tmp ) ; }
public static void updateLRU ( Context c , VpnProfile profile ) { profile . mLastUsed = System . currentTimeMillis ( ) ; if ( profile != tmpprofile ) saveProfile ( c , profile ) ; }
public void testSignData ( ) throws Exception { SimpleSigner . signData ( new byte [ ] { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } , false ) ; }
private void onTelephonyCallStateOffHook ( ) { restoreAudioStreamRing ( ) ; if ( mSimlarStatus != SimlarStatus . ONGOING_CALL ) { return ; } if ( mLinphoneManager == null ) { return ; } mSoundEffectManager . stop ( SoundEffectType . CALL_INTERRUPTION ) ; mLinphoneManager . pauseAllCalls ( ) ; }
private void onTelephonyCallStateIdle ( ) { restoreAudioStreamRing ( ) ; if ( mSimlarStatus != SimlarStatus . ONGOING_CALL ) { return ; } if ( mLinphoneManager == null ) { return ; } mSoundEffectManager . stop ( SoundEffectType . CALL_INTERRUPTION ) ; mLinphoneManager . resumeCall ( ) ; }
private void call ( final String simlarId ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . call ( simlarId ) ; }
public void pickUp ( ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . pickUp ( ) ; }
private Volumes getVolumes ( ) { if ( mLinphoneManager == null ) { return new Volumes ( ) ; } return mLinphoneManager . getVolumes ( ) ; }
private void setVolumes ( final Volumes volumes ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . setVolumes ( volumes ) ; }
public void requestVideoUpdate ( final boolean enable ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . requestVideoUpdate ( enable ) ; }
public void acceptVideoUpdate ( final boolean accept ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . acceptVideoUpdate ( accept ) ; }
public void setVideoWindows ( final TextureView videoView , final TextureView captureView ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . setVideoWindows ( videoView , captureView ) ; }
public void destroyVideoWindows ( ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . destroyVideoWindows ( ) ; }
public void toggleCamera ( ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . toggleCamera ( ) ; }
public void onEcCalibrationResult ( @ NonNull final Core core , final EcCalibratorStatus ecCalibratorStatus , final int i ) { Lg . w ( "onEcCalibrationResult : ecCalibratorStatus = " , ecCalibratorStatus , " i = " , i ) ; }
public void onGlobalStateChanged ( @ NonNull final Core lc , final GlobalState state , @ NonNull final String message ) { Lg . i ( "onGlobalStateChanged state = " , state , " message = " , message ) ; }
public void onNotifyPresenceReceived ( @ NonNull final Core lc , @ NonNull final Friend lf ) { Lg . w ( "presence received : username = " , new FriendLogger ( lf ) ) ; }
public void onDtmfReceived ( @ NonNull final Core lc , @ NonNull final Call call , final int dtmf ) { Lg . w ( "onDtmfReceived number = " , new CallLogger ( call ) , " dtmf = " , dtmf ) ; }
public void onChatRoomEphemeralMessageDeleted ( @ NonNull final Core lc , @ NonNull final ChatRoom chatRoom ) { Lg . w ( "onChatRoomEphemeralMessageDeleted chatRoom = " , chatRoom ) ; }
public void onTransferStateChanged ( @ NonNull final Core lc , @ NonNull final Call call , final Call . State state ) { Lg . w ( "onTransferStateChanged number = " , new CallLogger ( call ) , " State = " , state ) ; }
public void onChatRoomRead ( @ NonNull final Core core , @ NonNull final ChatRoom chatRoom ) { Lg . w ( "onChatRoomRead chatRoom = " , chatRoom ) ; }
public void onSubscriptionStateChanged ( @ NonNull final Core lc , final Event ev , final SubscriptionState state ) { Lg . w ( "onSubscriptionStateChanged ev = " , ev . getName ( ) , " SubscriptionState = " , state ) ; }
public void onIsComposingReceived ( @ NonNull final Core lc , final ChatRoom cr ) { Lg . w ( "onIsComposingReceived PeerAddress = " , cr . getPeerAddress ( ) ) ; }
public void onCallCreated ( @ NonNull final Core core , @ NonNull final Call call ) { Lg . i ( "onCallCreated ; call = " , new CallLogger ( call ) ) ; }
public void onPublishStateChanged ( @ NonNull final Core core , @ NonNull final Event event , final PublishState publishState ) { Lg . w ( "onPublishStateChanged : event = " , event , " publishState = " , publishState ) ; }
public void onLogCollectionUploadProgressIndication ( @ NonNull final Core lc , final int offset , final int total ) { Lg . w ( "onLogCollectionUploadProgressIndication : offset = " , offset , " total = " , total ) ; }
public void onChatRoomSubjectChanged ( @ NonNull final Core core , @ NonNull final ChatRoom chatRoom ) { Lg . w ( "onChatRoomSubjectChanged chatRoom = " , chatRoom ) ; }
public void onLogCollectionUploadStateChanged ( @ NonNull final Core lc , final LogCollectionUploadState state , @ NonNull final String info ) { Lg . w ( "onLogCollectionUploadStateChanged : state = " , state , " info = " , info ) ; }
public void onFriendListCreated ( @ NonNull final Core lc , @ NonNull final FriendList linphoneFriendList ) { Lg . w ( "onFriendListCreated : linphoneFriendList = " , linphoneFriendList ) ; }
public void onFriendListRemoved ( @ NonNull final Core lc , @ NonNull final FriendList linphoneFriendList ) { Lg . w ( "onFriendListRemoved : linphoneFriendList = " , linphoneFriendList ) ; }
public void onQrcodeFound ( @ NonNull final Core core , final String s ) { Lg . w ( "onQrcodeFound : " , s ) ; }
public void onChatRoomStateChanged ( @ NonNull final Core core , @ NonNull final ChatRoom chatRoom , final ChatRoom . State state ) { Lg . w ( "onChatRoomStateChanged : chatRoom" , chatRoom , " state = " , state ) ; }
public void onBuddyInfoUpdated ( @ NonNull final Core core , @ NonNull final Friend friend ) { Lg . w ( "onBuddyInfoUpdated ; " , new FriendLogger ( friend ) ) ; }
private void reloadContacts ( ) { Lg . i ( "reloadContacts" ) ; if ( ContactsProvider . clearCache ( ) ) { mAdapter . clear ( ) ; loadContacts ( ) ; } }
public void setCurrentAudioOutputType ( final AudioOutputType type ) { if ( mLinphoneManager == null ) { return ; } mLinphoneManager . setCurrentAudioOutputType ( type ) ; }
public void onEcCalibrationAudioInit ( @ NonNull final Core core ) { Lg . w ( "onEcCalibrationAudioInit" ) ; }
public void onEcCalibrationAudioUninit ( @ NonNull final Core core ) { Lg . w ( "onEcCalibrationAudioUninit" ) ; }
public void onReferReceived ( @ NonNull final Core core , @ NonNull final String s ) { Lg . w ( "onReferReceived : " , s ) ; }
public void onNetworkReachable ( @ NonNull final Core linphoneCore , final boolean b ) { Lg . i ( "onNetworkReachable reachable = " , Boolean . toString ( b ) ) ; }
public final String toString ( ) { if ( mFriend == null || mFriend . getAddress ( ) == null ) { return "" ; } return mFriend . getAddress ( ) . asString ( ) ; }
public FileReceiver ( ) { this ( null ) ; }
private void initializePanes ( Pane panesContainer ) throws IOException { Region sendPane = regionLoader . load ( sendPaneResource ) ; Region receivePane = regionLoader . load ( receivePaneResource ) ; panesContainer . getChildren ( ) . addAll ( receivePane , sendPane ) ; }
public Optional < InetAddress > getIp ( ) { return Optional . ofNullable ( ip != null ? ip : PeerUtils . getPrivateNetworkIpAddressOrNull ( ) ) ; }
public Fragment getItem ( int position ) { return HelpFragment . newInstance ( position ) ; }
public void afterTextChanged ( Editable s ) { if ( peerKeyLayout . getError ( ) != null && Fandem . isCorrectPeerKey ( s . toString ( ) ) ) { peerKeyLayout . setError ( null ) ; } }
public void close ( ) { greeterService . stop ( ) ; }
public void onResume ( ) { super . onResume ( ) ; startRemoteControl ( ) ; }
public LocationArrayAdapter ( Context context , List < String > objects ) { super ( context , R . layout . spinner_item , objects ) ; setDropDownViewResource ( android . R . layout . simple_spinner_dropdown_item ) ; }
public static < S > S createService ( Class < S > serviceClass ) { String username = OpenmrsAndroid . getUsername ( ) ; String password = OpenmrsAndroid . getPassword ( ) ; return createService ( serviceClass , username , password ) ; }
public void onFailure ( @ NotNull Call < Results < Allergy >> call , @ NotNull Throwable t ) { ToastUtil . error ( OpenmrsAndroid . getInstance ( ) . getString ( R . string . unable_to_fetch_allergies ) ) ; }
public void onFailure ( Call < ResponseBody > call , Throwable t ) { callback . onErrorResponse ( OpenmrsAndroid . getInstance ( ) . getString ( R . string . delete_allergy_failure ) ) ; }
private void setLogin ( boolean isLogin , String serverUrl ) { OpenmrsAndroid . setUserLoggedOnline ( isLogin ) ; OpenmrsAndroid . setLastLoginServerUrl ( serverUrl ) ; }
public boolean isUserLoggedIn ( ) { return ! ApplicationConstants . EMPTY_STRING . equals ( OpenmrsAndroid . getSessionToken ( ) ) ; }
public void setUp ( ) { mockStaticMethods ( ) ; patientAndMatchingPatientsQueue = createMatchingPatientsList ( ) ; PatientRepository patientRepository = new PatientRepository ( openMRSLogger , patientDAO , restApi , locationRepository ) ; presenter = new MatchingPatientsPresenter ( view , patientAndMatchingPatientsQueue , restApi , patientDAO , patientRepository ) ; }
public void refreshUI ( ) { providerManagementRecyclerView . setVisibility ( View . GONE ) ; progressBar . setVisibility ( View . VISIBLE ) ; mPresenter . getProviders ( this ) ; }
public boolean onQueryTextChange ( String query ) { presenter . setQuery ( query ) ; presenter . updateLocalPatientsList ( ) ; return true ; }
private void enableAddPatient ( boolean enabled ) { int resId = enabled ? R . drawable . ic_add : R . drawable . ic_add_disabled ; addPatientMenuItem . setEnabled ( enabled ) ; addPatientMenuItem . setIcon ( resId ) ; }
private void refreshUI ( ) { progressBar . setVisibility ( View . VISIBLE ) ; syncedPatientRecyclerView . setVisibility ( View . GONE ) ; mPresenter . updateLocalPatientsList ( ) ; }
public void updateAdapter ( List < Patient > patientList ) { SyncedPatientsRecyclerViewAdapter adapter = new SyncedPatientsRecyclerViewAdapter ( this , patientList ) ; adapter . notifyDataSetChanged ( ) ; syncedPatientRecyclerView . setAdapter ( adapter ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; this . menu = menu ; presenter . checkIfVisitActive ( ) ; return true ; }
public void setEmptyListVisibility ( boolean visibility ) { if ( visibility ) { emptyListView . setVisibility ( View . VISIBLE ) ; } else { emptyListView . setVisibility ( View . GONE ) ; } }
public boolean onQueryTextSubmit ( String query ) { presenter . findPatients ( query ) ; return true ; }
public boolean onQueryTextChange ( String query ) { presenter . updateLastViewedList ( query ) ; return true ; }
public void onViewDetachedFromWindow ( View view ) { ( ( LastViewedPatientsPresenter ) presenter ) . setLastQueryEmpty ( ) ; }
public void enableSwipeRefresh ( boolean enabled ) { swipeRefreshLayout . setEnabled ( enabled ) ; }
public void setEmptyListVisibility ( boolean visibility ) { emptyList . setVisibility ( visibility ? View . VISIBLE : View . GONE ) ; }
public void setListVisibility ( boolean visibility ) { patientsRecyclerView . setVisibility ( visibility ? View . VISIBLE : View . GONE ) ; }
public void setEmptyListText ( String text ) { emptyList . setText ( text ) ; }
public void updateList ( List < Patient > patientList ) { mAdapter = new LastViewedPatientRecyclerViewAdapter ( this . getActivity ( ) , patientList , this ) ; patientsRecyclerView . setAdapter ( mAdapter ) ; }
public boolean isRefreshing ( ) { return swipeRefreshLayout . isRefreshing ( ) ; }
public void stopRefreshing ( ) { swipeRefreshLayout . setRefreshing ( false ) ; }
public void onResume ( ) { super . onResume ( ) ; presenter . subscribe ( ) ; }
public void onPause ( ) { super . onPause ( ) ; presenter . unsubscribe ( ) ; }
public void setPresenter ( FormDisplayContract . Presenter . MainPresenter presenter ) { this . presenter = presenter ; }
public void enableSubmitButton ( boolean enabled ) { finishButton . setEnabled ( enabled ) ; }
public void attachSectionToView ( LinearLayout linearLayout ) { parent . addView ( linearLayout ) ; }
private void setMatchingPatients ( Patient patient , List < Patient > matchingPatients ) { recyclerView . setLayoutManager ( new LinearLayoutManager ( getContext ( ) ) ) ; recyclerView . setAdapter ( new MergePatientsRecycleViewAdapter ( ( getActivity ( ) ) , mPresenter , matchingPatients , patient ) ) ; }
public void setDiagnosesToDisplay ( List < String > encounters ) { ArrayAdapter < String > adapter = new ArrayAdapter <> ( getActivity ( ) , android . R . layout . simple_list_item_1 , encounters ) ; diagnosisList . setAdapter ( adapter ) ; }
public void onAttach ( @ NotNull Context context ) { super . onAttach ( context ) ; patientDashboardActivity = ( PatientDashboardActivity ) context ; }
public void showDialog ( int resId ) { patientDashboardActivity . showProgressDialog ( resId ) ; }
public void dismissDialog ( ) { patientDashboardActivity . dismissCustomFragmentDialog ( ) ; }
public void showToast ( int stringRes , boolean error ) { ToastUtil . ToastType toastType = error ? ToastUtil . ToastType . ERROR : ToastUtil . ToastType . SUCCESS ; ToastUtil . showShortToast ( patientDashboardActivity , toastType , stringRes ) ; }
public void setMenuTitle ( String nameString , String identifier ) { patientDashboardActivity . getSupportActionBar ( ) . setTitle ( nameString ) ; patientDashboardActivity . getSupportActionBar ( ) . setSubtitle ( "#" + identifier ) ; }
public void setUserVisibleHint ( boolean isVisibleToUser ) { super . setUserVisibleHint ( isVisibleToUser ) ; if ( isVisibleToUser ) { try { patientDashboardActivity . hideFABs ( false ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
public void run ( ) { getGlobalState ( ) . getTaskManager ( ) . launchTask ( "recopyAndroidJarTask" , false , null , false , new ExtractStaticBuildResources ( ) ) ; }
public void onClick ( DialogInterface dialog , int selected ) { }
public void delete ( int refID ) { dbMain . delete ( tableNameMain , MainDatabaseHelper . COLUMN_CC_ID + " = " + refID , null ) ; }
public void delete ( int refID ) { dbMain . delete ( tableNameMain , MainDatabaseHelper . COLUMN_LP_ID + " = " + refID , null ) ; }
public void delete ( int userID ) { dbMain . delete ( tableNameMain , MainDatabaseHelper . COLUMN_U_ID + " = " + userID , null ) ; }
public static Array < GameInputHandlerFactory > getAvailableFactories ( ) { init ( ) ; return sFactories ; }
public void loadConfig ( Preferences preferences , String prefix , int playerIdx ) { }
public void onBackPressed ( ) { saveConfig ( ) ; mGame . popScreen ( ) ; }
public void loadConfig ( Preferences preferences , String prefix , int playerIdx ) { loadButtonFromPreferences ( preferences , prefix , VirtualKey . TRIGGER , 1 ) ; loadButtonFromPreferences ( preferences , prefix , VirtualKey . BACK , 2 ) ; }
public void clicked ( InputEvent event , float x , float y ) { PlatformUtils . openURI ( supportInfo . url ) ; }
public ArrayList < Float > getDefaultTrackRecords ( TrackStats . ResultType resultType ) { return resultType == TrackStats . ResultType . LAP ? mDefaultLapRecords : mDefaultTotalRecords ; }
public boolean isEndIndicator ( ) { return mIsEndIndicator ; }
public void draw ( Batch batch , ZLevel zLevel , Rectangle viewBounds ) { }
public void play ( Sound sound , float volume ) { if ( mSoundFxMuted ) { return ; } mSoundThreadManager . playAndForget ( sound , volume ) ; }
public SoundPlayer createSoundPlayer ( Sound sound ) { DefaultSoundPlayer player = new DefaultSoundPlayer ( mSoundThreadManager , sound ) ; player . setMuted ( mSoundFxMuted ) ; mSoundPlayers . add ( new WeakReference <> ( player ) ) ; return player ; }
public void stop ( ) { if ( mId == - 1 ) { return ; } mSoundThreadManager . stop ( mId ) ; mId = - 1 ; mLooping = false ; }
public void setPitch ( float pitch ) { mPitch = pitch ; if ( mId != - 1 ) { mSoundThreadManager . setPitch ( mId , mPitch ) ; } }
private void updateVolume ( ) { if ( mId != - 1 ) { mSoundThreadManager . setVolume ( mId , mMuted ? 0 : mVolume ) ; } }
public SoundPlayer createSoundPlayer ( Sound sound ) { return new DefaultSoundPlayer ( mSoundThreadManager , sound ) ; }
public void show ( ) { super . show ( ) ; Gdx . input . setInputProcessor ( mInputMultiplexer ) ; }
public void setWidth ( float width ) { mWidth = width ; mGroup . setWidth ( width ) ; updateHeight ( ) ; }
public static String formatRankInTable ( int rank ) { return format ( "%d . " , rank ) ; }
public static void setImplementation ( Implementation impl ) { if ( impl == null ) { sImplementation = DefaultImplementation . instance ; } else { sImplementation = impl ; } }
public String getUnlockText ( GameStats gameStats ) { return StringUtils . format ( tr ( "Rank 3 or better at %s championship" ) , previous . getName ( ) ) ; }
public String getName ( ) { return tr ( "Gamepad" ) ; }
public String getName ( ) { return tr ( "Keyboard" ) ; }
public String getName ( ) { return tr ( "Pie buttons" ) ; }
public String getName ( ) { return tr ( "Side buttons" ) ; }
public Track addTrack ( String trackId , String trackName ) { Track track = new Track ( this , trackId , trackName ) ; mTracks . add ( track ) ; return track ; }
public Track ( Championship championship , String id , String name ) { mChampionship = new WeakReference <> ( championship ) ; mId = id ; mMapName = name ; }
public void onGamepadConnected ( ) { EnoughGamepadsChecker . this . onGamepadConnected ( ) ; }
public void onGamepadDisconnected ( ) { EnoughGamepadsChecker . this . onGamepadDisconnected ( ) ; }
public void onBackPressed ( ) { stopEnoughGamepadChecker ( ) ; getGame ( ) . popScreen ( ) ; }
public void onQuitPressed ( ) { stopEnoughGamepadChecker ( ) ; getGame ( ) . showMainMenu ( ) ; }
public void onNextTrackPressed ( ) { stopEnoughGamepadChecker ( ) ; showUnlockedRewardScreen ( ( ) -> getGame ( ) . showMainMenu ( ) ) ; }
public void triggered ( ) { mMaestro . stopEnoughGamepadChecker ( ) ; mGame . showMainMenu ( ) ; }
public boolean onButtonPressed ( int buttonCode , boolean pressed ) { mInputMapper . setButtonCodeForVirtualKey ( mVirtualKey , buttonCode ) ; stopEditing ( ) ; return true ; }
public static boolean hasMultitouch ( ) { return Gdx . input . isPeripheralAvailable ( Input . Peripheral . MultitouchScreen ) || Debug . instance . alwaysShowTouchInput ; }
public int getTotalLapCount ( ) { return GamePlay . instance . oneLapOnly ? 1 : 3 ; }
public void testRecordIntEvent ( ) { GameStatsImpl stats = new GameStatsImpl ( mStatsIO ) ; stats . recordIntEvent ( GameStats . Event . LEAVING_ROAD , 30 ) ; verify ( mStatsIO ) . save ( stats ) ; }
public GameStatsImpl ( IO io ) { setIO ( io ) ; mIO . load ( this ) ; }
public void save ( ) { if ( mListener != null ) { mListener . onChanged ( ) ; } mIO . save ( this ) ; }
public void currentChanged ( Track track , int index ) { updateTrackDetails ( track ) ; updateNextButton ( ) ; }
public void currentChanged ( Championship championship , int index ) { updateChampionshipDetails ( championship ) ; updateNextButton ( ) ; }
public void currentChanged ( VehicleDef vehicle , int index ) { updateVehicleDetails ( vehicle ) ; updateNextButton ( ) ; }
public void onNextPressed ( ) { showUnlockedRewardScreen ( ( ) -> getGame ( ) . showMainMenu ( ) ) ; }
public String getUnlockText ( Track track ) { Championship championship = track . getChampionship ( ) ; return getUnlockText ( Reward . get ( championship ) ) ; }
private void unmuteIfNecessary ( ) { mGame . getAudioManager ( ) . setSoundFxMuted ( ! mGame . getConfig ( ) . playSoundFx ) ; }
public void fadeOutMusic ( ) { if ( mMusic == null || mMusicMuted ) { return ; } mMusicFader . fadeOut ( mMusic ) ; mMusic = null ; mMusicId = "" ; }
private void hideBottomNavigationView ( ) { isBottomNavigationHidden = true ; viewBinding . bottomNavigation . animate ( ) . translationY ( viewBinding . bottomNavigation . getHeight ( ) ) . setDuration ( 100 ) ; }
public void hideProgressBar ( ) { viewBinding . progressBar . setVisibility ( View . GONE ) ; }
private void setupActionBar ( ) { ActionBar actionBar = getSupportActionBar ( ) ; if ( actionBar != null ) actionBar . setDisplayHomeAsUpEnabled ( true ) ; }
public net . fortuna . ical4j . model . Date toDate ( ) { return timestamp == 0 ? null : new net . fortuna . ical4j . model . Date ( timestamp + getOffset ( ) ) ; }
public void onSaveInstanceState ( Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putString ( EXTRA_RRULE , rrule . toString ( ) ) ; }
public DateTime minusMillis ( long millis ) { return new DateTime ( timestamp - millis , timeZone ) ; }
public DateTime ( long timestamp , TimeZone timeZone ) { this . timestamp = timestamp ; this . timeZone = timeZone ; }
public void onCancel ( DialogInterface d ) { if ( d != null ) { d . cancel ( ) ; } invalidateData ( ) ; }
public static OkHttpClient . Builder prepareHttpClient ( OkHttpClient . Builder builder ) { return builder . addNetworkInterceptor ( new FlipperOkhttpInterceptor ( networkPlugin ) ) ; }
public int getSupportFlags ( ) { return OpacApi . SUPPORT_FLAG_ACCOUNT_PROLONG_MULTIPLE ; }
private static void bindPreferenceSummaryToValue ( @ NonNull Preference preference ) { preference . setOnPreferenceChangeListener ( mSummaryUpdater ) ; mSummaryUpdater . onPreferenceChange ( preference , PreferenceManager . getDefaultSharedPreferences ( preference . getContext ( ) ) . getString ( preference . getKey ( ) , "" ) ) ; }
public Result doWork ( ) { Intent i = new Intent ( getApplicationContext ( ) , AlarmWorker . class ) ; i . setAction ( STOCK_ALARM_NETWORK_BACK ) ; AlarmWorker . enqueueWork ( getApplicationContext ( ) , i ) ; return ListenableWorker . Result . success ( ) ; }
public void nearbyGraticuleClicked ( Info info ) { requestStock ( info . getGraticule ( ) , info . getCalendar ( ) , StockWorker . FLAG_USER_INITIATED | ( needsNearbyPoints ( ) ? StockWorker . FLAG_INCLUDE_NEARBY_POINTS : 0 ) ) ; }
public void handleLookupFailure ( int reqFlags , int responseCode ) { if ( ( reqFlags & StockWorker . FLAG_FIND_CLOSEST ) == StockWorker . FLAG_FIND_CLOSEST ) { clearFindClosest ( ) ; } }
public void updateGraticule ( @ Nullable Graticule g ) { outlineGraticule ( g ) ; removeDestinationPoint ( ) ; requestStock ( g , mCalendar , StockWorker . FLAG_USER_INITIATED | StockWorker . FLAG_SELECT_A_GRATICULE ) ; }
private final LocationCallback mLocationCallback = new LocationCallback ( ) { @ Override public void onLocationResult ( LocationResult locationResult ) { mLastKnownLocation = locationResult . getLastLocation ( ) ; if ( mCurrentMode != null ) mCurrentMode . onLocationChanged ( mLastKnownLocation ) ; } } ;
private final LocationCallback mLocationCallback = new LocationCallback ( ) { @ Override public void onLocationResult ( LocationResult locationResult ) { mFrag . onLocationChanged ( locationResult . getLastLocation ( ) ) ; } } ;
public boolean onMarkerClick ( @ NonNull Marker marker ) { return false ; }
private void resumeWikiQueue ( ) { Intent i = new Intent ( getActivity ( ) , WikiService . class ) ; i . putExtra ( QueueService . COMMAND_EXTRA , QueueService . COMMAND_RESUME ) ; requireActivity ( ) . startService ( i ) ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( INFO , mInfo ) ; outState . putBoolean ( PERMISSIONS_DENIED , mPermissionsDenied ) ; }
public void onLocationChanged ( @ NonNull Location location ) { mLastLocation = location ; updateDisplay ( ) ; }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putParcelable ( PICTURE_URI , mPictureUri ) ; }
private PendingIntent getBasicCommandIntent ( int command ) { return PendingIntent . getService ( this , command , new Intent ( this , WikiService . class ) . putExtra ( QueueService . COMMAND_EXTRA , command ) , PendingIntent . FLAG_IMMUTABLE ) ; }
private void clearExtraFragment ( ) { FragmentManager manager = mCentralMap . getSupportFragmentManager ( ) ; try { manager . popBackStack ( EXTRA_FRAGMENT_BACK_STACK , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; } catch ( IllegalStateException ise ) { } }
public void onMapClick ( @ NonNull LatLng latLng ) { Graticule g = new Graticule ( latLng ) ; removeDestinationPoint ( ) ; mPicker . setNewGraticule ( g ) ; }
public void onLocationChanged ( @ NonNull Location location ) { if ( mWaitingOnFindClosest ) { mWaitingOnFindClosest = false ; if ( ! isCleanedUp ( ) ) { mCentralMap . getErrorBanner ( ) . animateBanner ( false ) ; applyFoundGraticule ( location ) ; } } }
public WikiException ( @ StringRes int textId ) { super ( ) ; mTextId = textId ; }
public void setListener ( ZoomButtonListener listener ) { mListener = listener ; }
private final SharedPreferences . OnSharedPreferenceChangeListener mPrefListener = ( sharedPreferences , key ) -> { if ( key . equals ( GHDConstants . PREF_WIKI_USER ) || key . equals ( GHDConstants . PREF_WIKI_PASS ) ) { checkAnonStatus ( ) ; } } ;
public void onLocationChanged ( @ NonNull Location location ) { mLastLocation = location ; updateLocation ( ) ; }
public void onLocationChanged ( @ NonNull Location location ) { mLastLocation = location ; updateBox ( ) ; }
public void useAppContext ( ) { Context appContext = ApplicationProvider . getApplicationContext ( ) ; assertEquals ( "net . exclaimindustries . geohashdroid" , appContext . getPackageName ( ) ) ; }
private void startStop ( ) { if ( service == null ) { return ; } if ( service . isRecording ( ) ) { service . stop ( ) ; } else { startService ( new Intent ( this , MotoScoreService . class ) ) ; } }
private void cancelRide ( ) { MotoScoreApp . db . removeRide ( rideId ) ; rideId = 0 ; Toast . makeText ( getApplicationContext ( ) , R . string . error_insufficient_permissions , Toast . LENGTH_LONG ) . show ( ) ; }
public void onLocationChanged ( @ NonNull Location location ) { record ( location ) ; }
public void onProviderEnabled ( @ NonNull String provider ) { }
public void onProviderDisabled ( @ NonNull String provider ) { }
public void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { GPSApplication . getInstance ( ) . setTrackViewer ( evList . get ( position ) ) ; openTrack ( ) ; dialog . dismiss ( ) ; }
public void onEvent ( Short msg ) { if ( msg == EventBusMSG . UPDATE_FIX ) { update ( ) ; } }
public void onEvent ( Short msg ) { if ( msg == EventBusMSG . UPDATE_TRACK ) { update ( ) ; } }
public float getDistance ( ) { return distance ; }
public float getDistanceInProgress ( ) { return distanceInProgress ; }
public long getDistanceLastAltitude ( ) { return distanceLastAltitude ; }
public float getSpeedMax ( ) { return speedMax ; }
public float getSpeedAverage ( ) { return speedAverage ; }
public float getSpeedAverageMoving ( ) { return speedAverageMoving ; }
public long getNumberOfLocations ( ) { return numberOfLocations ; }
public long getNumberOfPlacemarks ( ) { return numberOfPlacemarks ; }
public int getValidMap ( ) { return validMap ; }
public boolean isSelected ( ) { return isSelected ; }
public void setSelected ( boolean selected ) { isSelected = selected ; }
public boolean isValidAltitude ( ) { return altitudeFilter . isValid ( ) ; }
public void setNumberOfSatellites ( int numberOfSatellites ) { this . numberOfSatellites = numberOfSatellites ; }
public int getNumberOfSatellites ( ) { return numberOfSatellites ; }
public void setNumberOfSatellitesUsedInFix ( int numberOfSatellites ) { numberOfSatellitesUsedInFix = numberOfSatellites ; }
public int getNumberOfSatellitesUsedInFix ( ) { return numberOfSatellitesUsedInFix ; }
public void run ( ) { isStopButtonFlag = false ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_TRACK ) ; }
public String getViewInApp ( ) { return viewInApp ; }
public Drawable getViewInAppIcon ( ) { return viewInAppIcon ; }
public boolean isLocationPermissionChecked ( ) { return isLocationPermissionChecked ; }
public void setLocationPermissionChecked ( boolean locationPermissionChecked ) { isLocationPermissionChecked = locationPermissionChecked ; }
public int getGPSStatus ( ) { return gpsStatus ; }
public LocationExtended getCurrentLocationExtended ( ) { return currentLocationExtended ; }
public void setPlacemarkDescription ( String Description ) { this . placemarkDescription = Description ; }
public Track getCurrentTrack ( ) { return currentTrack ; }
public List < Track > getTrackList ( ) { return arrayListTracks ; }
public void setTrackViewer ( ExternalViewer trackViewer ) { this . trackViewer = trackViewer ; }
public int getNumberOfSelectedTracks ( ) { int nsel = 0 ; synchronized ( arrayListTracks ) { for ( Track T : arrayListTracks ) { if ( T . isSelected ( ) ) nsel ++ ; } } return nsel ; }
public void onClick ( View v ) { if ( ! isAWarningClicked ) { GPSActivity gpsActivity = ( GPSActivity ) getActivity ( ) ; gpsActivity . checkLocationPermission ( ) ; } }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putInt ( KEY_SELTRACKTYPE , selectedTrackType ) ; outState . putInt ( KEY_TITLE , title ) ; outState . putBoolean ( KEY_ISFINALIZATION , finalizeTrackWithOk ) ; }
public void onEvent ( EventBusMSGNormal msg ) { switch ( msg . eventBusMSG ) { case EventBusMSG . TRACKLIST_SELECT : case EventBusMSG . TRACKLIST_DESELECT : activateActionModeIfNeeded ( ) ; } }
public int compare ( ExternalViewer o1 , ExternalViewer o2 ) { return o1 . label . compareTo ( o2 . label ) ; }
public int size ( ) { return externalViewerList . size ( ) ; }
public boolean isEmpty ( ) { return ( externalViewerList . isEmpty ( ) ) ; }
public void run ( ) { tvTracklistEmpty . setVisibility ( data . isEmpty ( ) ? View . VISIBLE : View . GONE ) ; adapter . notifyDataSetChanged ( ) ; }
public long getNumberOfPoints_Total ( ) { return numberOfPoints_Total ; }
public void setNumberOfPoints_Total ( long numberOfPoints_Total ) { this . numberOfPoints_Total = numberOfPoints_Total ; }
public long getNumberOfPoints_Processed ( ) { return numberOfPoints_Processed ; }
public void setNumberOfPoints_Processed ( long numberOfPoints_Processed ) { this . numberOfPoints_Processed = numberOfPoints_Processed ; }
public short getStatus ( ) { return status ; }
public void setStatus ( short status ) { this . status = status ; }
public void onEvent ( EventBusMSGNormal msg ) { switch ( msg . eventBusMSG ) { case EventBusMSG . TRACKLIST_SELECT : case EventBusMSG . TRACKLIST_DESELECT : EvaluateVisibility ( ) ; } }
public void showMediaCheckDialog ( int id , List < ? extends List < String >> checkList ) { showAsyncDialogFragment ( MediaCheckDialog . newInstance ( id , checkList ) ) ; }
private fun onRecordingInitialized ( ) { if ( mOnRecordingInitialized != null ) { mOnRecordingInitialized !! . run ( ) } }
public SearchCards ( String query , SortOrder order , int numCardsToRender , int column1Index , int column2Index ) { this . mQuery = query ; this . mOrder = order ; this . mNumCardsToRender = numCardsToRender ; this . mColumn1Index = column1Index ; this . mColumn2Index = column2Index ; }
public List < Long > findCards ( String query , SortOrder _order ) { return findCards ( query , _order , null ) ; }
public List < Long > findCards ( String query , SortOrder _order , CollectionTask . PartialSearch task ) { return _findCards ( query , _order , task , task == null ? null : task . getProgressSender ( ) ) ; }
public static String escapeImages ( String string ) { return escapeImages ( string , false ) ; }
private void markNextCardAsGood ( Sched sched ) { Card toAnswer = sched . getCard ( ) ; assertThat ( toAnswer , notNullValue ( ) ) ; sched . answerCard ( toAnswer , BUTTON_TWO ) ; }
private Card createBuriedCardInDefaultDeck ( ) { Note n = addNoteUsingBasicModel ( "Hello" , "World" ) ; Card c = n . firstCard ( ) ; c . setQueue ( QUEUE_TYPE_SIBLING_BURIED ) ; c . flush ( ) ; return c ; }
private void selectDefaultDeck ( ) { getCol ( ) . getDecks ( ) . select ( DEFAULT_DECK_ID ) ; }
private ActionModeCallback ( FieldEditText textBox , Field field ) { super ( ) ; mTextBox = textBox ; }
public BackendEmulatingOpenConflict ( BackendFactory backend ) { super ( backend ) ; }
public long intTimeMS ( ) { long time = this . mTime ; this . mTime += mStep ; return time ; }
public Boolean get_config ( @ NonNull String key , @ Nullable Boolean defaultValue ) { if ( mConf . isNull ( key ) ) { return defaultValue ; } return mConf . getBoolean ( key ) ; }
public Long get_config ( @ NonNull String key , @ Nullable Long defaultValue ) { if ( mConf . isNull ( key ) ) { return defaultValue ; } return mConf . getLong ( key ) ; }
public Integer get_config ( @ NonNull String key , @ Nullable Integer defaultValue ) { if ( mConf . isNull ( key ) ) { return defaultValue ; } return mConf . getInt ( key ) ; }
public Double get_config ( @ NonNull String key , @ Nullable Double defaultValue ) { if ( mConf . isNull ( key ) ) { return defaultValue ; } return mConf . getDouble ( key ) ; }
public String get_config ( @ NonNull String key , @ Nullable String defaultValue ) { if ( mConf . isNull ( key ) ) { return defaultValue ; } return mConf . getString ( key ) ; }
public long id ( @ NonNull String name ) throws DeckRenameException { return id ( name , DEFAULT_DECK ) ; }
public long newDyn ( String name ) throws DeckRenameException { long did = id ( name , defaultDynamicDeck ) ; select ( did ) ; return did ; }
public void failedResultWithNoDataWillDisplayFailedDialog ( ) { Pair < Boolean , Collection . CheckDatabaseResult > result = failedResultNoData ( ) ; execute ( result ) ; assertThat ( "Load Failed dialog should be shown if no data is supplied" , mImpl . didDisplayDialogLoadFailed ( ) ) ; }
private void execute ( Pair < Boolean , CheckDatabaseResult > result ) { DeckPicker . CheckDatabaseListener listener = getInstance ( mImpl ) ; listener . onPostExecute ( result ) ; }
private Class < ? > getAsyncDialogFragmentClass ( ) { if ( mDialogFragment == null ) { fail ( "No async fragment shown" ) ; } return mDialogFragment . getClass ( ) ; }
public void showAsyncDialogFragment ( AsyncDialogFragment newFragment ) { this . mDialogFragment = newFragment ; super . showAsyncDialogFragment ( newFragment ) ; }
private void extendNew ( long did ) { mDecks . select ( did ) ; mSched . extendLimits ( 1 , 0 ) ; }
public void missingKeySetsPreference ( ) { getForMissingKey ( ) ; Mockito . verify ( mMockEditor ) . putString ( MISSING_KEY , LAMBDA_RETURN ) ; Mockito . verify ( mMockEditor ) . apply ( ) ; }
public TimePreferenceTest ( String parsableHour , int expectedHour ) { this . mParsableHour = parsableHour ; this . mExpectedHour = expectedHour ; }
public void shouldParseHours ( ) { int actualHour = TimePreference . parseHours ( this . mParsableHour ) ; assertEquals ( mExpectedHour , actualHour ) ; }
public void arrayToArrayList ( ) { List < Integer > list = new ArrayList <> ( ) ; Collections . addAll ( list , mSampleItems ) ; assertThat ( ArrayUtil . toArrayList ( mSampleItems ) , is ( list ) ) ; }
public void testGetLastListElement ( ) { assertThat ( CollectionUtils . getLastListElement ( mTestList ) , is ( 3 ) ) ; }
public void testAddAll ( ) { List < Integer > toTest = new ArrayList <> ( ) ; CollectionUtils . addAll ( toTest , mTestList ) ; assertEqualsArrayList ( new Integer [ ] { 1 , 2 , 3 } , toTest ) ; }
public void setUp ( ) { mDeckNameComparator = new DeckNameComparator ( ) ; }
public void getKeyByValueIsEqualTest ( ) { assertThat ( getKeyByValue ( mMap , "AnkiDroid" ) , is ( 20 ) ) ; }
public void getKeyByValueIsNotEqualTest ( ) { assertThat ( getKeyByValue ( mMap , "AnkiDesktop" ) , not ( 5 ) ) ; }
public void before ( ) { mFunction = mock ( Runnable . class ) ; }
public void testFromCollection ( ) { UniqueArrayList < String > uniqueArrayList = UniqueArrayList . from ( mDupData ) ; assertEquals ( mNoDupData , uniqueArrayList ) ; uniqueArrayList = new UniqueArrayList <> ( ) ; assertTrue ( uniqueArrayList . isEmpty ( ) ) ; }
public boolean matches ( Float actualValue ) { return Math . abs ( ( ( double ) actualValue ) - mExpected ) <= mPrecision ; }
public void tearDown ( ) { mColorMockedStatic . close ( ) ; }
public void constructorShouldThrowIfSizesMismatch ( ) { new PieChart ( mPlot , new double [ ] { 1 , 1 } , new ColorWrap [ ] { ColorWrap . RED } ) ; }
public void paintShouldNotDrawAnythingIfValuesAreZero ( ) { mPieChart = new PieChart ( mPlot , new double [ ] { 0 , 0 } , new ColorWrap [ ] { ColorWrap . RED , ColorWrap . GREEN } ) ;
public void paintShouldDrawFullRedCircleIfOneValue ( ) { mPieChart = new PieChart ( mPlot , new double [ ] { 1 . } , new ColorWrap [ ] { ColorWrap . RED } ) ;
public void paintShouldDrawTwoSectorsWithGivenColors ( ) { mPieChart = new PieChart ( mPlot , new double [ ] { 1 , 1 } , new ColorWrap [ ] { ColorWrap . RED , ColorWrap . GREEN } ) ;
public List < DeckConfig > allConf ( ) { return new ArrayList <> ( mDconf . values ( ) ) ; }
public JSONObject getConf ( ) { return mConf . getJson ( ) ; }
public LinkedList < Long > active ( ) { JSONArray activeDecks = mCol . get_config_array ( ACTIVE_DECKS ) ; LinkedList < Long > result = new LinkedList <> ( ) ; addAll ( result , activeDecks . longIterable ( ) ) ; return result ; }
public long selected ( ) { return mCol . get_config_long ( CURRENT_DECK ) ; }
public DeckManager getDecks ( ) { return mDecks ; }
public void save ( ) { save ( ( JSONObject ) null ) ; }
private String usable_name ( @ NonNull String name ) { name = strip ( name ) ; name = name . replace ( "\"" , "" ) ; name = Normalizer . normalize ( name , Normalizer . Form . NFC ) ; return name ; }
public List < Long > nids ( Model m ) { return mCol . getDb ( ) . queryLongList ( "SELECT id FROM notes WHERE mid = ?" , m . getLong ( "id" ) ) ; }
private int getChunk ( ) { if ( sChunk != 0 ) { return sChunk ; } final int WINDOW_SIZE_KB = 2048 ; int cursorWindowSize = WINDOW_SIZE_KB * 1024 ; sChunk = ( int ) ( cursorWindowSize * 15 . / 16 . ) ; return sChunk ; }
public static FileObj open ( @ NonNull String file ) { return new FileObj ( new File ( file ) ) ; }
public NegatedConditional ( String key , ParsedNode child ) { this . mKey = key ; this . mChild = child ; }
public Text ( String text ) { this . mText = text ; }
private void err ( ) { throw new UnknownDelimiterException ( ) ; }
public long getTimeLimit ( ) { return get_config_long ( "timeLim" ) ; }
public int schedVer ( ) { int ver = get_config ( "schedVer" , fDefaultSchedulerVersion ) ; if ( fSupportedSchedulerVersions . contains ( ver ) ) { return ver ; } else { throw new RuntimeException ( "Unsupported scheduler version" ) ; } }
public void setTimeLimit ( long seconds ) { set_config ( "timeLim" , seconds ) ; }
public static boolean isModelNew ( @ NonNull Model m ) { return m . getLong ( "id" ) == 0 ; }
private Model _new ( ModelManager mm ) { String name = getDefaultName ( ) ; return _new ( mm , name ) ; }
private Model _new ( ModelManager mm , String name ) { return mFun . create ( mm , name ) ; }
public Model add ( Collection col , String name ) { ModelManager mm = col . getModels ( ) ; Model model = _new ( mm , name ) ; mm . add ( model ) ; return model ; }
public Model add ( Collection col ) { ModelManager mm = col . getModels ( ) ; Model model = _new ( mm ) ; mm . add ( model ) ; return model ; }
public TagManager getTags ( ) { return mTags ; }
public void load ( @ NonNull String json ) { JSONObject tags = new JSONObject ( json ) ; for ( String t : tags ) { mTags . put ( t , tags . getInt ( t ) ) ; } mChanged = false ; }
public void add ( @ NonNull String key , @ Nullable Integer value ) { mTags . put ( key , value ) ; }
public void testJoinWithNull ( ) { JSONArray array = new JSONArray ( Arrays . asList ( 5 , 6 ) ) ; assertEquals ( "5null6" , array . join ( null ) ) ; }
public void testJoinWithSpecialCharacters ( ) { JSONArray array = new JSONArray ( Arrays . asList ( 5 , 6 ) ) ; assertEquals ( "5\"6" , array . join ( "\"" ) ) ; }
public void testToStringWithUnsupportedNumbers ( ) { JSONArray array = new JSONArray ( Arrays . asList ( 5 . 5 , Double . NaN ) ) ; assertNull ( array . toString ( ) ) ; }
public void testTokenerConstructor ( ) { JSONArray object = new JSONArray ( new JSONTokener ( " [ false ] " ) ) ; assertEquals ( 1 , object . length ( ) ) ; assertEquals ( false , object . get ( 0 ) ) ; }
public void testTokenerConstructorWrongType ( ) { try { new JSONArray ( new JSONTokener ( " { \"foo\" : false } " ) ) ; fail ( ) ; } catch ( JSONException e ) { } }
public void testTokenerConstructorNull ( ) { try { new JSONArray ( ( JSONTokener ) null ) ; fail ( ) ; } catch ( NullPointerException e ) { } }
public void testStringConstructor ( ) { JSONArray object = new JSONArray ( " [ false ] " ) ; assertEquals ( 1 , object . length ( ) ) ; assertEquals ( false , object . get ( 0 ) ) ; }
public void testStringConstructorWrongType ( ) { try { new JSONArray ( " { \"foo\" : false } " ) ; fail ( ) ; } catch ( JSONException e ) { } }
public void testStringConstructorNull ( ) { try { new JSONArray ( ( String ) null ) ; fail ( ) ; } catch ( NullPointerException e ) { } }
private void throwSecurityException ( String methodName , Uri uri ) { String msg = String . format ( "Permission not granted for : %s" , getLogMessage ( methodName , uri ) ) ; Timber . e ( "%s" , msg ) ; throw new SecurityException ( msg ) ; }
public static @ NonNull UndoAction revertNoteToProvidedState ( @ StringRes @ UNDO_NAME_ID int undoNameId , Card card ) { return revertToProvidedState ( undoNameId , card , card . note ( ) . cards ( ) ) ; }
public static @ NonNull UndoAction revertCardToProvidedState ( @ StringRes @ UNDO_NAME_ID int undoNameId , Card card ) { return revertToProvidedState ( undoNameId , card , Arrays . asList ( card . clone ( ) ) ) ; }
public static java . util . Collection < String > initParameters ( ) { return Arrays . asList ( "normal" , "xlarge" ) ; }
public boolean executeCommand ( @ NonNull ViewerCommand which ) { return false ; }
private String getOrSetString ( String key , Supplier < String > supplier ) { return PreferenceExtensions . getOrSetString ( mMockPreferences , key , supplier ) ; }
public @ NonNull List < List < String >> check ( ) { return check ( null ) ; }
public MockTaskManager ( @ Nullable TaskListener < ? super Progress , ? > listener ) { mTaskListener = listener ; }
public void doProgress ( @ Nullable Progress value ) { mTaskListener . onProgressUpdate ( value ) ; }
public Token ( TokenKind kind , String text ) { mKind = kind ; mText = text ; }
public UElementHandler createUastHandler ( @ NonNull JavaContext context ) { return new UElementHandler ( ) { @ Override public void visitImportStatement ( @ NonNull UImportStatement node ) { ImportStatementDetector . this . visitImportStatement ( context , node ) ; } } ; }
public void visitImportStatement ( @ NonNull UImportStatement node ) { ImportStatementDetector . this . visitImportStatement ( context , node ) ; }
public JSONArray getJSONArray ( String name ) { try { return JSONArray . arrayToArray ( super . getJSONArray ( name ) ) ; } catch ( org . json . JSONException e ) { throw new JSONException ( e ) ; } }
public JSONObject getJSONObject ( String name ) { try { return objectToObject ( super . getJSONObject ( name ) ) ; } catch ( org . json . JSONException e ) { throw new JSONException ( e ) ; } }
public static String numberToString ( Number number ) { try { return org . json . JSONObject . numberToString ( number ) ; } catch ( org . json . JSONException e ) { throw new JSONException ( e ) ; } }
public void repairCollection ( ) { Timber . i ( "Repairing the Collection" ) ; TaskManager . launchCollectionTask ( new CollectionTask . RepairCollection ( ) , repairCollectionTask ( ) ) ; }
public @ NonNull Note newNote ( ) { return newNote ( true ) ; }
public @ NonNull Note newNote ( boolean forDeck ) { return newNote ( getModels ( ) . current ( forDeck ) ) ; }
public @ NonNull Note newNote ( Model m ) { return new Note ( this , m ) ; }
public int addNote ( @ NonNull Note note ) { return addNote ( note , Models . AllowEmpty . ONLY_CLOZE ) ; }
public String undoName ( Resources res ) { UndoAction type = undoType ( ) ; if ( type != null ) { return type . name ( res ) ; } return "" ; }
public @ Nullable Card undo ( ) { UndoAction lastUndo = mUndo . removeLast ( ) ; Timber . d ( "undo ( ) of type %s" , lastUndo . getClass ( ) ) ; return lastUndo . undo ( this ) ; }
private ChangeUIRequest ( IField field , int state ) { this . mNewField = field ; this . mState = state ; }
private IField getField ( ) { return mNewField ; }
private int getState ( ) { return mState ; }
public String getDest ( ) { return this . mDest ; }
public void setDest ( String dest ) { this . mDest = dest ; }
public String getFrom ( ) { return this . mFrom ; }
public void setFrom ( String from ) { this . mFrom = from ; }
public String getPhrase ( ) { return this . mPhrase ; }
public void setPhrase ( String phrase ) { this . mPhrase = phrase ; }
public String getResult ( ) { return this . mResult ; }
public void setResult ( String result ) { this . mResult = result ; }
public List < Tuc > getTuc ( ) { return this . mTuc ; }
public void setTuc ( List < Tuc > tuc ) { this . mTuc = tuc ; }
public List < Number > getAuthors ( ) { return this . mAuthors ; }
public void setAuthors ( List < Number > authors ) { this . mAuthors = authors ; }
public Number getMeaningId ( ) { return this . mMeaningId ; }
public void setMeaningId ( Number meaningId ) { this . mMeaningId = meaningId ; }
public List < Meaning > getMeanings ( ) { return this . mMeanings ; }
public void setMeanings ( List < Meaning > meanings ) { this . mMeanings = meanings ; }
public Phrase getPhrase ( ) { return this . mPhrase ; }
public void setPhrase ( Phrase phrase ) { this . mPhrase = phrase ; }
public Resources getResources ( ) { return mRes ; }
public void publishProgress ( Progress value ) { if ( mTask != null ) { mTask . doProgress ( value ) ; } }
public TransformFieldDelete ( int _idx ) { mIdx = _idx ; }
public TransformFieldMove ( int _idx , int _oldidx ) { mIdx = _idx ; mOldidx = _oldidx ; }
public SingleSoundCompletionListener ( @ Nullable OnCompletionListener userCallback ) { this . mUserCallback = userCallback ; }
public void onCompletion ( MediaPlayer mp ) { Timber . d ( "Single Sound completed" ) ; if ( mUserCallback != null ) { mUserCallback . onCompletion ( mp ) ; } else { releaseSound ( ) ; } }
public StdModels ( CreateStdModels fun , @ StringRes int defaultName ) { this . mFun = fun ; this . mDefaultName = defaultName ; }
public String getDefaultName ( ) { return AnkiDroidApp . getAppResources ( ) . getString ( mDefaultName ) ; }
private Tls12SocketFactory ( SSLSocketFactory base ) { this . mDelegate = base ; }
public String [ ] getDefaultCipherSuites ( ) { return mDelegate . getDefaultCipherSuites ( ) ; }
public String [ ] getSupportedCipherSuites ( ) { return mDelegate . getSupportedCipherSuites ( ) ; }
public Socket createSocket ( Socket s , String host , int port , boolean autoClose ) throws IOException { return patch ( mDelegate . createSocket ( s , host , port , autoClose ) ) ; }
public Socket createSocket ( String host , int port ) throws IOException { return patch ( mDelegate . createSocket ( host , port ) ) ; }
public Socket createSocket ( String host , int port , InetAddress localHost , int localPort ) throws IOException { return patch ( mDelegate . createSocket ( host , port , localHost , localPort ) ) ; }
public Socket createSocket ( InetAddress host , int port ) throws IOException { return patch ( mDelegate . createSocket ( host , port ) ) ; }
public Socket createSocket ( InetAddress address , int port , InetAddress localAddress , int localPort ) throws IOException { return patch ( mDelegate . createSocket ( address , port , localAddress , localPort ) ) ; }
public CoreConfigurationBuilder getAcraCoreConfigBuilder ( ) { return mAcraCoreConfigBuilder ; }
public void registerOnSharedPreferenceChangeListener ( OnSharedPreferenceChangeListener listener ) { mListeners . add ( listener ) ; }
public void unregisterOnSharedPreferenceChangeListener ( OnSharedPreferenceChangeListener listener ) { mListeners . remove ( listener ) ; }
public void onCancelled ( ) { showSyncLogMessage ( R . string . sync_cancelled , "" ) ; if ( ! mDialogDisplayFailure ) { mProgressDialog . dismiss ( ) ; updateDeckList ( ) ; } mDialogDisplayFailure = false ; }
public DeleteDeckListener ( long did , DeckPicker deckPicker ) { super ( deckPicker ) ; this . mDid = did ; }
public String getLanguage ( ) { return this . mLanguage ; }
public void setLanguage ( String language ) { this . mLanguage = language ; }
public String getText ( ) { return this . mText ; }
public void setLanguage ( String l ) { this . mLanguage = l ; }
public static Connection login ( TaskListener listener , Payload data ) { data . mTaskType = LOGIN ; return launchConnectionTask ( listener , data ) ; }
public static Connection sync ( TaskListener listener , Payload data ) { data . mTaskType = SYNC ; return launchConnectionTask ( listener , data ) ; }
private Payload doOneInBackground ( Payload data ) { switch ( data . mTaskType ) { case LOGIN : return doInBackgroundLogin ( data ) ; case SYNC : return doInBackgroundSync ( data ) ; default : return null ; } }
public boolean hasNext ( ) { return mIndex < length ( ) ; }
public JSONArray next ( ) { JSONArray array = getJSONArray ( mIndex ) ; mIndex ++ ; return array ; }
public JSONObject next ( ) { JSONObject object = getJSONObject ( mIndex ) ; mIndex ++ ; return object ; }
public String next ( ) { String string = getString ( mIndex ) ; mIndex ++ ; return string ; }
public Long next ( ) { Long long_ = getLong ( mIndex ) ; mIndex ++ ; return long_ ; }
public void close ( ) { try { mZos . close ( ) ; } catch ( IOException e ) { Timber . w ( e ) ; } }
public long getItemId ( int position ) { return mBaseId + position ; }
public boolean containsItem ( long id ) { return ( id - mBaseId < getItemCount ( ) && id - mBaseId >= 0 ) ; }
public void ordinalShift ( ) { mBaseId += getItemCount ( ) + 1 ; }
public boolean isFromReviewer ( ) { return mFromReviewer ; }
public SaveCollection ( boolean syncIgnoresDatabaseModification ) { this . mSyncIgnoresDatabaseModification = syncIgnoresDatabaseModification ; }
public UndoDeleteNoteMulti ( Note [ ] notesArr , List < Card > allCards ) { super ( R . string . card_browser_delete_card ) ; this . mNotesArr = notesArr ; this . mAllCards = allCards ; }
public UndoChangeDeckMulti ( Card [ ] cards , long [ ] originalDids ) { super ( R . string . undo_action_change_deck_multi ) ; this . mCards = cards ; this . mOriginalDids = originalDids ; }
public @ Nullable Card undo ( @ NonNull Collection col ) { Timber . i ( "Undo : Mark notes" ) ; CardUtils . markAll ( mOriginalMarked , true ) ; CardUtils . markAll ( mOriginalUnmarked , false ) ; return null ; }
public UpdateValuesFromDeck ( boolean reset ) { this . mReset = reset ; }
public DeleteDeck ( long did ) { this . mDid = did ; }
public ImportAdd ( String path ) { this . mPath = path ; }
public ImportReplace ( String path ) { this . mPath = path ; }
public Reorder ( DeckConfig conf ) { this . mConf = conf ; }
public ConfChange ( Deck deck , DeckConfig conf ) { this . mDeck = deck ; this . mConf = conf ; }
public ConfReset ( DeckConfig conf ) { this . mConf = conf ; }
public ConfRemove ( DeckConfig conf ) { this . mConf = conf ; }
public ConfSetSubdecks ( Deck deck , DeckConfig conf ) { this . mDeck = deck ; this . mConf = conf ; }
public DeleteMedia ( List < String > unused ) { this . mUnused = unused ; }
public SaveModel ( Model model , ArrayList < Object [ ] > templateChanges ) { this . mModel = model ; this . mTemplateChanges = templateChanges ; }
public DeleteModel ( long modID ) { this . mModID = modID ; }
public DeleteField ( Model model , JSONObject field ) { this . mModel = model ; this . mField = field ; }
public AddField ( Model model , String fieldName ) { this . mModel = model ; this . mFieldName = fieldName ; }
public ChangeSortField ( Model model , int idx ) { this . mModel = model ; this . mIdx = idx ; }
public ButtonItemAdapter ( ArrayList < String > items ) { this . mItems = items ; }
public void remove ( String searchName ) { mItems . remove ( searchName ) ; }
public void setCallbacks ( ItemCallback itemCallback , ButtonCallback buttonCallback ) { this . mItemCallback = itemCallback ; this . mButtonCallback = buttonCallback ; }
public void notifyAdapterDataSetChanged ( ) { Collections . sort ( mItems , String : : compareToIgnoreCase ) ; super . notifyDataSetChanged ( ) ; }
public void addNote ( ) { Intent intent = new Intent ( DeckPicker . this , NoteEditor . class ) ; intent . putExtra ( NoteEditor . EXTRA_CALLER , NoteEditor . CALLER_DECKPICKER ) ; startActivityForResultWithAnimation ( intent , ADD_NOTE , START ) ; }
private void openReviewer ( ) { Intent reviewer = new Intent ( this , Reviewer . class ) ; startActivityForResultWithAnimation ( reviewer , REQUEST_REVIEW , START ) ; }
public int getIvl ( ) { return mIvl ; }
public void setIvl ( int ivl ) { this . mIvl = ivl ; }
public double getFactor ( ) { return mFactor ; }
public void setFactor ( double factor ) { this . mFactor = factor ; }
public int getDue ( ) { return mDue ; }
public void setDue ( int due ) { this . mDue = due ; }
public int getType ( ) { if ( mIvl == 0 ) { return CARD_TYPE_NEW ; } else if ( mIvl >= 21 ) { return CARD_TYPE_MATURE ; } else { return CARD_TYPE_YOUNG ; } }
public int getCorrect ( ) { return mCorrect ; }
public void setCorrect ( int correct ) { this . mCorrect = correct ; }
public int getLastReview ( ) { return mLastReview ; }
public void setLastReview ( int lastReview ) { this . mLastReview = lastReview ; }
public long getDid ( ) { return mDid ; }
public int getNewPerDay ( ) { return mNewPerDay ; }
public int getRevPerDay ( ) { return mRevPerDay ; }
public int getInitialFactor ( ) { return mInitialFactor ; }
public boolean moveToNext ( ) { return mCur . moveToNext ( ) ; }
private int draw ( double [ ] p ) { return searchsorted ( p , mRandom . nextDouble ( ) ) ; }
public int getNLearned ( long did ) { if ( mNLearnedPerDeckId . containsKey ( did ) ) { return mNLearnedPerDeckId . get ( did ) ; } else { return 0 ; } }
public void reset ( int nAddedToday ) { this . mNAddedToday = nAddedToday ; this . mTAdd = 0 ; }
public int getComputeNDays ( ) { return mComputeNDays ; }
public double getComputeMaxError ( ) { return mComputeMaxError ; }
public int getSimulateNIterations ( ) { return mSimulateNIterations ; }
public int nReviewsDoneToday ( int tElapsed ) { return ( int ) ( mNReviewsPerDay [ REVIEW_TYPE_YOUNG ] [ tElapsed ] + mNReviewsPerDay [ REVIEW_TYPE_MATURE ] [ tElapsed ] ) ; }
public PlottableSimulationResult ( ArrayList < int [ ] > nReviews , double [ ] [ ] nInState ) { this . mNReviews = nReviews ; this . mNInState = nInState ; }
public ArrayList < int [ ] > getNReviews ( ) { return mNReviews ; }
public double [ ] [ ] getNInState ( ) { return mNInState ; }
public ReviewOutcome ( Card card , double prob ) { this . mCard = card ; this . mProb = prob ; }
public void setAll ( Card card , double prob ) { this . mCard = card ; this . mProb = prob ; }
public Card getCard ( ) { return mCard ; }
public double getProb ( ) { return mProb ; }
public @ NonNull String toString ( ) { return "ReviewOutcome { " + "card = " + mCard + " , prob = " + mProb + ' } ' ; }
public int getT ( ) { return mTElapsed ; }
public String strip ( String txt ) { for ( Pattern p : REGEXPS ) { txt = p . matcher ( txt ) . replaceAll ( "" ) ; } return txt ; }
public boolean ensureNotEmpty ( ) { if ( mModels . isEmpty ( ) ) { StdModels . BASIC_MODEL . add ( mCol ) ; return true ; } else { return false ; } }
public int compare ( JSONObject lhs , JSONObject rhs ) { return DeckNameComparator . INSTANCE . compare ( lhs . getString ( "name" ) , rhs . getString ( "name" ) ) ; }
public void waitToFinishConcrete ( ) { }
public void cancelCurrentlyExecutingTaskConcrete ( ) { }
public void cancelAllTasksConcrete ( Class taskType ) { }
public boolean waitForAllToFinishConcrete ( Integer timeoutSeconds ) { return true ; }
public static < T > void assertEqualsArrayList ( T [ ] expected , List < T > actual ) { assertListEquals ( Arrays . asList ( expected ) , actual ) ; }
public static boolean isInitialized ( ) { return sInstance != null ; }
public void resetCounts ( @ NonNull CancelListener cancelListener ) { resetCounts ( cancelListener , true ) ; }
public void actualOnPreExecute ( @ NonNull DeckPicker deckPicker ) { deckPicker . mProgressDialog = StyledProgressDialog . show ( deckPicker , null , deckPicker . getResources ( ) . getString ( R . string . backup_repair_deck_progress ) , false ) ; }
public void actualOnPreExecute ( @ NonNull DeckPicker deckPicker ) { deckPicker . mProgressDialog = StyledProgressDialog . show ( deckPicker , null , deckPicker . getResources ( ) . getString ( R . string . check_media_message ) , false ) ; }
public void actualOnPreExecute ( @ NonNull DeckPicker deckPicker ) { deckPicker . mProgressDialog = StyledProgressDialog . show ( deckPicker , null , deckPicker . getResources ( ) . getString ( R . string . delete_media_message ) , false ) ; }
public void actualOnPreExecute ( @ NonNull NoteEditor noteEditor ) { Resources res = noteEditor . getResources ( ) ; noteEditor . mProgressDialog = StyledProgressDialog . show ( noteEditor , null , res . getString ( R . string . saving_facts ) , false ) ; }
public Exporter ( @ NonNull Collection col ) { mCol = col ; mDid = null ; }
public Exporter ( @ NonNull Collection col , @ NonNull Long did ) { mCol = col ; mDid = did ; }
private void saveImageForRevert ( ) { if ( ! mViewModel . isPreExistingImage ) { deletePreviousImage ( ) ; } mPreviousImagePath = mViewModel . mImagePath ; mPreviousImageUri = mViewModel . mImageUri ; }
public static < T extends Reviewer > T startReviewer ( RobolectricTest testClass , Class < T > clazz ) { T reviewer = startActivityNormallyOpenCollectionWithIntent ( testClass , clazz , new Intent ( ) ) ; waitForAsyncTasksToComplete ( ) ; return reviewer ; }
private boolean _resched ( @ NonNull Card card ) { DeckConfig conf = _cardConf ( card ) ; if ( conf . getInt ( "dyn" ) == DECK_STD ) { return true ; } return conf . getBoolean ( "resched" ) ; }
public MeleeWeapon ( Parcel source ) { this . name = source . readString ( ) ; this . damage = source . readString ( ) ; }
public int hashCode ( ) { return Objects . hashCode ( id , media , reconnecting ) ; }
public void onSuccess ( final RtpContentMap outgoingContentMap ) { sendSessionAccept ( outgoingContentMap ) ; }
public static GeoPoint getGeoPoint ( final Context context ) { return getGeoPoint ( context , getUserCountry ( context ) ) ; }
public static boolean isPositionQuoteStart ( CharSequence body , int pos ) { return ( isPositionQuoteCharacter ( body , pos ) && isPositionPrecededByPreQuote ( body , pos ) && ( UIHelper . isPositionFollowedByQuoteableCharacter ( body , pos ) || isPositionFollowedByQuoteChar ( body , pos ) ) ) ; }
private boolean handleUri ( final Uri uri ) { return handleUri ( uri , false ) ; }
public void onSaveInstanceState ( @ NotNull Bundle savedInstanceState ) { if ( this . region != null ) { savedInstanceState . putString ( "region" , this . region ) ; } savedInstanceState . putBoolean ( "requesting_verification" , this . requestingVerification ) ; super . onSaveInstanceState ( savedInstanceState ) ; }
public void unmuteConversation ( final Conversation conversation ) { conversation . setMutedTill ( 0 ) ; this . activity . xmppConnectionService . updateConversation ( conversation ) ; this . activity . onConversationsListItemUpdated ( ) ; refresh ( ) ; requireActivity ( ) . invalidateOptionsMenu ( ) ; }
public void restartFileObserver ( ) { Log . d ( Config . LOGTAG , "restarting file observer" ) ; FILE_OBSERVER_EXECUTOR . execute ( this . fileObserver : : restartWatching ) ; FILE_OBSERVER_EXECUTOR . execute ( this : : checkForDeletedFiles ) ; }
public Long getFileSize ( ) { return null ; }
public Long getFileSize ( ) { if ( this . file != null ) { return this . file . getExpectedSize ( ) ; } else { return null ; } }
public Long getFileSize ( ) { return file == null ? null : file . getExpectedSize ( ) ; }
private boolean playServicesAvailable ( ) { return GoogleApiAvailabilityLight . getInstance ( ) . isGooglePlayServicesAvailable ( mXmppConnectionService ) == ConnectionResult . SUCCESS ; }
private FileCopyException ( @ StringRes int resId ) { this . resId = resId ; }
public HttpUrl getRedirectionUrl ( ) { return this . redirectionUrl ; }
public static void launchManageAccount ( final XmppActivity xmppActivity ) { final Account account = getFirst ( xmppActivity . xmppConnectionService ) ; xmppActivity . switchToAccount ( account ) ; }
private static Class < ? > getManageAccountActivityClass ( ) { try { return Class . forName ( "eu . siacs . conversations . ui . ManageAccountActivity" ) ; } catch ( final ClassNotFoundException e ) { return null ; } }
public void onScanPerformed ( IntentResult scanResult ) { if ( scanResult == null || scanResult . getFormatName ( ) == null ) { return ; } handleQrData ( scanResult . getContents ( ) ) ; }
public Recipient ( @ NonNull Context context , @ NonNull DcChat dcChat ) { this ( context , dcChat , null , null ) ; }
public Recipient ( @ NonNull Context context , @ NonNull DcContact dcContact ) { this ( context , null , dcContact , null ) ; }
public AccountSelectionListAdapter . ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new AccountViewHolder ( li . inflate ( R . layout . account_selection_list_item , parent , false ) , clickListener ) ; }
public void createGroup ( ) { activityRule . getScenario ( ) . onActivity ( a -> createdGroupId = DcHelper . getContext ( a ) . createGroupChat ( false , "group" ) ) ; }
private boolean isContactProfile ( ) { return contactId != 0 && ( chatId == 0 || ! chatIsMultiUser ) ; }
public static ApplicationContext getInstance ( @ NonNull Context context ) { return ( ApplicationContext ) context . getApplicationContext ( ) ; }
public void handleEvent ( @ NonNull DcEvent event ) { if ( event . getId ( ) == DcContext . DC_EVENT_CONNECTIVITY_CHANGED ) { this . findPreference ( PREFERENCE_CATEGORY_CONNECTIVITY ) . setSummary ( DcHelper . getConnectivitySummary ( getActivity ( ) , R . string . connectivity_connected ) ) ; } }
public void handleEvent ( @ NonNull DcEvent event ) { if ( event . getId ( ) == DcContext . DC_EVENT_CONTACTS_CHANGED ) { restartLoader ( ) ; } }
public void handleEvent ( @ NonNull DcEvent event ) { refresh ( ) ; }
public void handleEvent ( @ NonNull DcEvent event ) { if ( event . getId ( ) == DcContext . DC_EVENT_CONTACTS_CHANGED ) { getLoaderManager ( ) . restartLoader ( 0 , null , ContactSelectionListFragment . this ) ; } }
public void handleEvent ( @ NonNull DcEvent event ) { int eventId = event . getId ( ) ; if ( eventId == DcContext . DC_EVENT_CHAT_MODIFIED || eventId == DcContext . DC_EVENT_CONTACTS_CHANGED ) { initializeExistingGroup ( ) ; } }
public void handleEvent ( @ NonNull DcEvent event ) { updateToolbar ( ) ; }
public void handleEvent ( @ NonNull DcEvent event ) { getLoaderManager ( ) . restartLoader ( 0 , null , this ) ; }
public void handleEvent ( @ NonNull DcEvent event ) { update ( ) ; }
public DcEventCenter ( @ NonNull Context context ) { this . context = ApplicationContext . getInstance ( context ) ; }
public void onReceive ( Context context , Intent intent ) { DcHelper . setStockTranslations ( context ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; DcHelper . getEventCenter ( getActivity ( ) ) . removeObservers ( this ) ; }
private void unblockContact ( int contactId ) { DcContext dcContext = DcHelper . getContext ( getContext ( ) ) ; dcContext . blockContact ( contactId , 0 ) ; restartLoader ( ) ; }
public void onDestroy ( ) { super . onDestroy ( ) ; DcHelper . getEventCenter ( this ) . removeObservers ( this ) ; }
public void onDestroy ( ) { DcHelper . getEventCenter ( getActivity ( ) ) . removeObservers ( this ) ; super . onDestroy ( ) ; }
private void share ( ) { MediaItem mediaItem = getCurrentMediaItem ( ) ; if ( mediaItem != null ) { DcHelper . openForViewOrShare ( this , mediaItem . msgId , Intent . ACTION_SEND ) ; } }
public static DcContext getContext ( @ NonNull Context context ) { return ApplicationContext . getInstance ( context ) . dcContext ; }
public void join ( Activity activity , int msgId ) { DcContext dcContext = DcHelper . getContext ( activity ) ; DcMsg dcMsg = dcContext . getMsg ( msgId ) ; String videochatUrl = dcMsg . getVideochatUrl ( ) ; IntentUtils . showBrowserIntent ( activity , videochatUrl ) ; }
public < T extends ViewModel > T create ( @ NonNull Class < T > modelClass ) { return modelClass . cast ( new SearchViewModel ( context ) ) ; }
public ConversationUpdateItem ( Context context ) { this ( context , null ) ; }
private void onNotifyOnOff ( ) { if ( dcContext . getChat ( chatId ) . isMuted ( ) ) { setMuted ( 0 ) ; } else { MuteDialog . show ( this , duration -> setMuted ( duration ) ) ; } }
private void setMuted ( final long duration ) { if ( chatId != 0 ) { dcContext . setChatMuteDuration ( chatId , duration ) ; } }
public void onRecordCanceled ( ) { onRecordHideEvent ( ) ; if ( listener != null ) listener . onRecorderCanceled ( ) ; }
private void updateSources ( ) { new DataCollectionTask ( dcContext , chatId , getContactIds ( chatId ) , contactMapSources , featureCollections , lastPositions , boundingBuilder , emojiProvider , this ) . execute ( ) ; }
public void updateSource ( int contactId ) { new DataCollectionTask ( dcContext , chatId , new int [ ] { contactId } , contactMapSources , featureCollections , lastPositions , boundingBuilder , emojiProvider , this ) . execute ( ) ; }
public FieldView ( RectF rect ) { mData = new ArrayList <> ( ) ; mRectField = rect ; mPaintField = new Paint ( ) ; mPaintField . setAntiAlias ( Settings . antiAlias ) ; mPaintField . setColor ( Colors . backgroundField ) ; mShow = true ; }
public Map < StatisticsKey , List < StatisticsEntry >> getAll ( ) { return Collections . unmodifiableMap ( records ) ; }
public boolean onClick ( float x , float y ) { if ( mRectGameType . contains ( x , y ) ) { if ( mCallbacks != null ) { mCallbacks . onGameTypeClick ( ) ; } return true ; } return false ; }
public boolean show ( ) { statistics = statisticsManager . get ( Settings . gameWidth , Settings . gameHeight , Settings . gameType , Settings . hardmode ) ; return super . show ( ) ; }
private GattOperation ( BluetoothGatt gatt , Operation operation , UUID uuid ) { mGatt = gatt ; mOp = operation ; mUuid = uuid ; }
private GattOperation ( BluetoothGatt gatt , Operation operation , UUID uuid , byte [ ] value ) { mGatt = gatt ; mOp = operation ; mUuid = uuid ; mValue = value ; }
private void enableNotification ( UUID chrUuid ) { GattOperation op = GattOperation . enableNotification ( mGatt , chrUuid ) ; queueGattOperation ( op ) ; }
public void writeCharacteristic ( UUID uuid , byte [ ] value ) { GattOperation op = GattOperation . writeCharacteristic ( mGatt , uuid , value ) ; queueGattOperation ( op ) ; }
public void readCharacteristic ( UUID uuid ) { GattOperation op = GattOperation . readCharacteristic ( mGatt , uuid ) ; queueGattOperation ( op ) ; }
public static View getContentView ( ) { return mLayout ; }
public boolean clipboardHasText ( ) { return mClipMgr . hasPrimaryClip ( ) ; }
public void indexAppsAsync ( Context context ) { indexAppsAsync ( context , null , null ) ; }
public void run ( ) { performHapticFeedback ( HapticFeedbackConstants . LONG_PRESS ) ; addIconInteractively ( appIcon ) ; longPressRunnable = null ; }
public void showList ( ) { mode = MODE_LIST ; cancelRipple ( ) ; scrollList ( lastScrollY , false ) ; setVerticalScrollBarEnabled ( true ) ; hidePieMenu ( ) ; resetFadeOutPieMenu ( ) ; invalidate ( ) ; }
public void hideList ( ) { mode = MODE_PIE ; resetScrollWithoutAnimation ( ) ; setVerticalScrollBarEnabled ( false ) ; hidePieMenu ( ) ; resetFadeOutPieMenu ( ) ; invalidate ( ) ; }
private void resetFadeOutPieMenu ( ) { fadeOutFrom = 0 ; }
private void addTouch ( MotionEvent event ) { int index = event . getActionIndex ( ) ; primaryId = event . getPointerId ( index ) ; addTouchReference ( event , primaryId , index ) ; }
public void onCreate ( ) { super . onCreate ( ) ; TermuxCrashUtils . setCrashHandler ( this ) ; setLogConfig ( getApplicationContext ( ) , true ) ; Logger . logDebug ( "Starting Application" ) ; }
public void onCreate ( ) { runStartForeground ( ) ; TermuxFloatApplication . setLogConfig ( this , false ) ; Logger . logVerbose ( LOG_TAG , "onCreate" ) ; }
private void processSessionAction ( String sessionActionString ) { processIntFieldValue ( mSessionActionLayout , sessionActionString , TERMUX_SERVICE . MIN_VALUE_EXTRA_SESSION_ACTION , TERMUX_SERVICE . MAX_VALUE_EXTRA_SESSION_ACTION ) ; }
private void processBackgroundCustomLogLevel ( String backgroundCustomLogLevelString ) { processIntFieldValue ( mBackgroundCustomLogLevelLayout , backgroundCustomLogLevelString , Logger . LOG_LEVEL_OFF , Logger . MAX_LOG_LEVEL ) ; }
public boolean onCreateOptionsMenu ( Menu menu ) { super . onCreateOptionsMenu ( menu ) ; getMenuInflater ( ) . inflate ( R . menu . activity_edit_configuration , menu ) ; return true ; }
public void loginWithPasswordlessAccount ( ) { new LoginFlow ( ) . chooseContinueWithWpCom ( ) . enterEmailAddress ( E2E_WP_COM_PASSWORDLESS_USER_EMAIL ) . openMagicLink ( ) . confirmLogin ( false ) ; }
public void loginWithMagicLink ( ) { new LoginFlow ( ) . chooseContinueWithWpCom ( ) . enterEmailAddress ( E2E_WP_COM_USER_EMAIL ) . chooseMagicLink ( ) . openMagicLink ( ) . confirmLogin ( false ) ; }
public void navigateThroughPosts ( ) { new ReaderPage ( ) . tapFollowingTab ( ) . openPost ( mCoachingPostTitle ) . verifyPostDisplayed ( mCoachingPostTitle ) . slideToPreviousPost ( ) . verifyPostDisplayed ( mCompetitionPostTitle ) . slideToNextPost ( ) . verifyPostDisplayed ( mCoachingPostTitle ) . goBackToReader ( ) ; }
public void likePost ( ) { new ReaderPage ( ) . tapFollowingTab ( ) . openPost ( mCoachingPostTitle ) . likePost ( ) . verifyPostLiked ( ) . unlikePost ( ) . verifyPostNotLiked ( ) . goBackToReader ( ) ; }
public void signUpWithMagicLink ( ) { new SignupFlow ( ) . chooseContinueWithWpCom ( ) . enterEmail ( E2E_SIGNUP_EMAIL ) . openMagicLink ( ) . checkEpilogue ( E2E_SIGNUP_DISPLAY_NAME , E2E_SIGNUP_USERNAME ) . enterPassword ( E2E_SIGNUP_PASSWORD ) . dismissInterstitial ( ) . confirmSignup ( ) ; }
private void showSignInForResultBasedOnIsJetpackAppBuildConfig ( Activity activity ) { if ( BuildConfig . IS_JETPACK_APP ) { ActivityLauncher . showSignInForResultJetpackOnly ( activity ) ; } else { ActivityLauncher . showSignInForResult ( activity ) ; } }
public static boolean isEmailClientAvailable ( Context context ) { if ( context == null ) { return false ; } return ! queryEmailApps ( context , false ) . isEmpty ( ) ; }
private boolean isNewLoginEpilogueScreenEnabled ( ) { return mBuildConfigWrapper . isSiteCreationEnabled ( ) && ! mShowAndReturn ; }
public View configureView ( View view ) { mNoteBlockHolder = ( CommentUserNoteBlockHolder ) view . getTag ( ) ; setUserName ( ) ; setUserCommentAgo ( ) ; setUserCommentSite ( ) ; setUserAvatar ( ) ; setUserComment ( ) ; setCommentStatus ( view ) ; return view ; }
private PrimaryEditorAction getPrimaryAction ( ) { return mEditorActionsProvider . getPrimaryAction ( mEditPostRepository . getStatus ( ) , UploadUtils . userCanPublish ( mSite ) , mIsLandingEditor ) ; }
public Boolean get ( ) { return isElementDisplayed ( element ) ; }
public void onScrollStateChanged ( @ NonNull RecyclerView view , int scrollState ) { }
public void onClick ( View arg0 ) { getPagamentiIscritto ( posizione , iscritto , palestra ) ; finish ( ) ; }
public ArrayList < Iscritto > caricaDatabase ( ) { QueryIscritto database = QueryIscritto . getInstance ( this ) ; return database . caricaIscritti ( palestra ) ; }
public void onClick ( DialogInterface dialog , int which ) { database . elimina ( iscritto ) ; confermaeli ( ) ; getGestioneIscritti ( palestra ) ; finish ( ) ; dialog . dismiss ( ) ; }
public static String getNumberOfConnectFromPage ( String pageSource ) { Matcher numberOfConnectedMatcher = numberOfConnectedPattern . matcher ( pageSource ) ; if ( numberOfConnectedMatcher . find ( ) ) { return numberOfConnectedMatcher . group ( 1 ) . trim ( ) ; } else { return "" ; } }
public void onDestroyView ( ) { super . onDestroyView ( ) ; media = null ; presenter . onDetachView ( ) ; subscribe . dispose ( ) ; }
private NearbyFilterState ( ) { existsSelected = true ; needPhotoSelected = true ; wlmSelected = true ; checkBoxTriState = - 1 ; selectedLabels = new ArrayList <> ( ) ; }
public void onFetchCompletion ( final OkHttpNetworkFetchState fetchState , final int byteSize ) { fetchState . fetchCompleteTime = SystemClock . elapsedRealtime ( ) ; }
public void onFailure ( final Call call , final IOException e ) { handleException ( call , e , callback ) ; }
public Flowable < List < DepictedItem >> searchAllEntities ( String query ) { return depictModel . searchAllEntities ( query , this ) ; }
public static int getTerminalMarginHorizontalInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNotInRange ( TermuxPropertyConstants . KEY_TERMINAL_MARGIN_HORIZONTAL , DataUtils . getIntFromString ( value , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_MARGIN_HORIZONTAL ) , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_MARGIN_HORIZONTAL , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_HORIZONTAL_MIN , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_HORIZONTAL_MAX , true , true , LOG_TAG ) ; }
public static int getTerminalMarginVerticalInternalPropertyValueFromValue ( String value ) { return SharedProperties . getDefaultIfNotInRange ( TermuxPropertyConstants . KEY_TERMINAL_MARGIN_VERTICAL , DataUtils . getIntFromString ( value , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_MARGIN_VERTICAL ) , TermuxPropertyConstants . DEFAULT_IVALUE_TERMINAL_MARGIN_VERTICAL , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_VERTICAL_MIN , TermuxPropertyConstants . IVALUE_TERMINAL_MARGIN_VERTICAL_MAX , true , true , LOG_TAG ) ; }
public static boolean isLegacyExternalStoragePossible ( @ NonNull Context context ) { return ! ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . R && PackageUtils . getTargetSDKForPackage ( context ) >= Build . VERSION_CODES . R ) ; }
public void onReloadActivityStyling ( ) { checkForFontAndColors ( ) ; }
public void onCreate ( ) { onReloadProperties ( ) ; mActivity . getTerminalView ( ) . setTextSize ( mActivity . getPreferences ( ) . getFontSize ( ) ) ; mActivity . getTerminalView ( ) . setKeepScreenOn ( mActivity . getPreferences ( ) . shouldKeepScreenOn ( ) ) ; }
public void onReloadActivityStyling ( ) { setSoftKeyboardState ( false , true ) ; setTerminalCursorBlinkerState ( true ) ; }
public boolean isOnResumeAfterOnCreate ( ) { return mIsOnResumeAfterOnCreate ; }
public void onTextChanged ( @ NonNull TerminalSession changedSession ) { if ( ! mActivity . isVisible ( ) ) return ; if ( mActivity . getCurrentSession ( ) == changedSession ) mActivity . getTerminalView ( ) . onScreenUpdated ( ) ; }
public void onTitleChanged ( @ NonNull TerminalSession updatedSession ) { if ( ! mActivity . isVisible ( ) ) return ; if ( updatedSession != mActivity . getCurrentSession ( ) ) { mActivity . showToast ( toToastTitle ( updatedSession ) , true ) ; } termuxSessionListNotifyUpdated ( ) ; }
public void onColorsChanged ( @ NonNull TerminalSession changedSession ) { if ( mActivity . getCurrentSession ( ) == changedSession ) updateBackgroundColor ( ) ; }
public void onTextChanged ( @ NonNull TerminalSession changedSession ) { }
public void onTitleChanged ( @ NonNull TerminalSession updatedSession ) { }
public void onSessionFinished ( @ NonNull TerminalSession finishedSession ) { }
public void onCopyTextToClipboard ( @ NonNull TerminalSession session , String text ) { }
public void onPasteTextFromClipboard ( @ Nullable TerminalSession session ) { }
public void onBell ( @ NonNull TerminalSession session ) { }
public void onColorsChanged ( @ NonNull TerminalSession changedSession ) { }
public boolean performExtraKeyButtonHapticFeedback ( View view , ExtraKeyButton buttonInfo , MaterialButton button ) { return false ; }
public Integer getStepData ( ) { return 0 ; }
public void restoreStepData ( Integer data ) { }
public OkDialog clickOnFormWithDialog ( String instanceName ) { scrollToAndClickOnForm ( instanceName ) ; return new OkDialog ( ) . assertOnPage ( ) ; }
public FormHierarchyPage clickOnForm ( String formName , String instanceName ) { scrollToAndClickOnForm ( instanceName ) ; return new FormHierarchyPage ( formName ) . assertOnPage ( ) ; }
public RuleChain copyFormChain = TestRuleChain . chain ( ) . around ( rule ) ; @ Test public void subtext_ShouldDisplayAdditionalInformation ( ) { rule . startAtMainMenu ( ) . copyForm ( "all - widgets . xml" ) . clickFillBlankForm ( ) . checkIsFormSubtextDisplayed ( ) ; }
public void subtext_ShouldDisplayAdditionalInformation ( ) { rule . startAtMainMenu ( ) . copyForm ( "all - widgets . xml" ) . clickFillBlankForm ( ) . checkIsFormSubtextDisplayed ( ) ; }
public FormEntryPage clickFillBlankFormButton ( String formName ) { clickOnId ( R . id . new_item ) ; return new FormEntryPage ( formName ) . assertOnPage ( ) ; }
private void ensureNumberOfColumnsIsValid ( int numberOfColumns ) throws FormUploadException { if ( numberOfColumns == 0 ) { throw new FormUploadException ( getLocalizedString ( Collect . getInstance ( ) , R . string . no_columns_to_upload ) ) ; } }
public FormMapPage clickSaveAndExitBackToMap ( ) { return clickSaveAndExit ( new FormMapPage ( formName ) ) ; }
public FormMapPage selectForm ( FakeClickableMapFragment mapFragment , int index ) { mapFragment . clickOnFeature ( index ) ; waitForText ( getTranslatedString ( R . string . review_data ) ) ; return this ; }
public MapFragmentFactory providesMapFragmentFactory ( ) { return applicationComponent . mapFragmentFactory ( ) ; }
public MapPoint getCenter ( ) { return zoomPoint ; }
public Matcher < View > getConstraints ( ) { return allOf ( withEffectiveVisibility ( Visibility . VISIBLE ) , isDescendantOfA ( anyOf ( isAssignableFrom ( ScrollView . class ) , isAssignableFrom ( HorizontalScrollView . class ) , isAssignableFrom ( NestedScrollView . class ) ) ) ) ; }
public void mapFragmentRetainMockAccuracy_isFalse ( ) { launcherRule . launch ( GeoPointMapActivity . class ) ; assertThat ( mapFragment . isRetainMockAccuracy ( ) , is ( false ) ) ; }
public void testLocationTrackerLifecycle ( ) { ActivityScenario < GeoPolyActivity > scenario = launcherRule . launch ( GeoPolyActivity . class ) ; scenario . moveToState ( Lifecycle . State . DESTROYED ) ; verify ( locationTracker ) . stop ( ) ; }
public void isNotCancellable ( ) { FragmentScenario < BackgroundAudioPermissionDialogFragment > scenario = launcherRule . launchDialogFragment ( BackgroundAudioPermissionDialogFragment . class ) ; scenario . onFragment ( f -> { assertThat ( f . isCancelable ( ) , is ( false ) ) ; } ) ; }
public void dialogIsNotCancellable ( ) { FragmentScenario < FormLoadingDialogFragment > fragmentScenario = launcherRule . launchDialogFragment ( FormLoadingDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( false ) ) ; } ) ; }
public void dialogIsCancellable ( ) { FragmentScenario < QuitFormDialogFragment > fragmentScenario = launcherRule . launchDialogFragment ( QuitFormDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( true ) ) ; } ) ; }
public void dialogIsNotCancellable ( ) { FragmentScenario < RefreshFormListDialogFragment > fragmentScenario = launcherRule . launchDialogFragment ( RefreshFormListDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( false ) ) ; } ) ; }
public void dialogIsNotCancellable ( ) { FragmentScenario < SaveFormProgressDialogFragment > fragmentScenario = launcherRule . launchDialogFragment ( SaveFormProgressDialogFragment . class ) ; fragmentScenario . onFragment ( fragment -> { assertThat ( fragment . isCancelable ( ) , equalTo ( false ) ) ; } ) ; }
public void recreating_whenPermissionsGrantedPreviously_doesNotShowPermissionDependantPreferences ( ) { FragmentScenario < FormMetadataPreferencesFragment > scenario = launcherRule . launch ( FormMetadataPreferencesFragment . class ) ; permissionsProvider . deny ( ) ; scenario . recreate ( ) ; verifyNoInteractions ( deviceDetailsProvider ) ; }
public FormEntryPage swipeToNextQuestion ( String questionText , boolean isRequired ) { flingLeft ( ) ; if ( isRequired ) { assertQuestionText ( "* " + questionText ) ; } else { assertQuestionText ( questionText ) ; } return this ; }
public ODKAppSettingsMigrator providesPreferenceMigrator ( SettingsProvider settingsProvider ) { return new ODKAppSettingsMigrator ( settingsProvider . getMetaSettings ( ) ) ; }
public ExistingSettingsMigrator providesExistingSettingsMigrator ( ProjectsRepository projectsRepository , SettingsProvider settingsProvider , ODKAppSettingsMigrator settingsMigrator ) { return new ExistingSettingsMigrator ( projectsRepository , settingsProvider , settingsMigrator ) ; }
private void displayImage ( ) { imageLoader . loadImage ( binding . imageView , answerFile , ImageView . ScaleType . FIT_CENTER , null ) ; binding . imageView . setVisibility ( VISIBLE ) ; }
public void whenOldKeyMissing_doesNothing ( ) { initSettings ( prefs ) ; extractNewKey ( "newKey" ) . fromKey ( "oldKey" ) . fromValue ( "oldBlah" ) . toValue ( "newBlah" ) . apply ( prefs ) ; assertSettings ( prefs ) ; }
public void renamesKeyAndTranslatesValues ( ) { initSettings ( prefs , "colour" , "red" ) ; translateKey ( "colour" ) . toKey ( "couleur" ) . fromValue ( "red" ) . toValue ( "rouge" ) . apply ( prefs ) ; assertSettings ( prefs , "couleur" , "rouge" ) ; }
public void whenKeyHasUnknownValue_doesNotDoAnything ( ) { initSettings ( prefs , "colour" , "blue" ) ; translateKey ( "color" ) . toKey ( "coleur" ) . fromValue ( "red" ) . toValue ( "rouge" ) . apply ( prefs ) ; assertSettings ( prefs , "colour" , "blue" ) ; }
private void runMigrations ( ) { new ODKAppSettingsMigrator ( metaSettings ) . migrate ( generalSettings , adminSettings ) ; }
public void renamesKeys ( ) { initSettings ( prefs , "colour" , "red" ) ; renameKey ( "colour" ) . toKey ( "couleur" ) . apply ( prefs ) ; assertSettings ( prefs , "couleur" , "red" ) ; }
public void whenNewKeyExists_doesNotDoAnything ( ) { initSettings ( prefs , "colour" , "red" , "couleur" , "blue" ) ; renameKey ( "colour" ) . toKey ( "couleur" ) . apply ( prefs ) ; assertSettings ( prefs , "colour" , "red" , "couleur" , "blue" ) ; }
public void translatesValueForKey ( ) { initSettings ( prefs , "key" , "value" ) ; translateValue ( "value" ) . toValue ( "newValue" ) . forKey ( "key" ) . apply ( prefs ) ; assertSettings ( prefs , "key" , "newValue" ) ; }
public void doesNotTranslateOtherValues ( ) { initSettings ( prefs , "key" , "otherValue" ) ; translateValue ( "value" ) . toValue ( "newValue" ) . forKey ( "key" ) . apply ( prefs ) ; assertSettings ( prefs , "key" , "otherValue" ) ; }
public void whenKeyNotInPrefs_doesNothing ( ) { initSettings ( prefs , "otherKey" , "value" ) ; translateValue ( "value" ) . toValue ( "newValue" ) . forKey ( "key" ) . apply ( prefs ) ; assertSettings ( prefs , "otherKey" , "value" ) ; }
private static String localizeDefaultAggregateSuccessfulText ( String text ) { if ( text != null && text . equals ( DEFAULT_SUCCESSFUL_TEXT ) ) { text = getLocalizedString ( Collect . getInstance ( ) , R . string . success ) ; } return text ; }
public void openHierarchy ( ) { formController . getAuditEventLogger ( ) . logEvent ( AuditEvent . AuditEventType . HIERARCHY , true , clock . get ( ) ) ; }
public void setup ( ) { clock = mock ( Supplier . class ) ; Settings generalSettings = TestSettingsProvider . getUnprotectedSettings ( ) ; generalSettings . clear ( ) ; viewModel = new BackgroundAudioViewModel ( audioRecorder , generalSettings , recordAudioActionRegistry , permissionsChecker , clock ) ; }
public void setTitle ( String title ) { setArgument ( TITLE , title ) ; AlertDialog dialog = ( AlertDialog ) getDialog ( ) ; if ( dialog != null ) { setupView ( dialog ) ; } }
public void setMessage ( String message ) { setArgument ( MESSAGE , message ) ; AlertDialog dialog = ( AlertDialog ) getDialog ( ) ; if ( dialog != null ) { setupView ( dialog ) ; } }
private void setArgument ( String key , Serializable value ) { if ( getArguments ( ) == null ) { setArguments ( new Bundle ( ) ) ; } getArguments ( ) . putSerializable ( key , value ) ; }
private void onImageClick ( ) { if ( bigImageFile != null ) { } else { selectItem ( ) ; } }
public ArbitraryFileWidget createWidget ( ) { return new ArbitraryFileWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) ) ; }
public ExArbitraryFileWidget createWidget ( ) { return new ExArbitraryFileWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) , fileRequester ) ; }
public ExAudioWidget createWidget ( ) { return new ExAudioWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , audioPlayer , new FakeWaitingForDataRegistry ( ) , fileRequester ) ; }
public ExImageWidget createWidget ( ) { return new ExImageWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) , fileRequester ) ; }
public ExVideoWidget createWidget ( ) { return new ExVideoWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeQuestionMediaManager ( ) , new FakeWaitingForDataRegistry ( ) , fileRequester ) ; }
public VideoWidget createWidget ( ) { return new VideoWidget ( activity , new QuestionDetails ( formEntryPrompt , readOnlyOverride ) , new FakeWaitingForDataRegistry ( ) , new FakeQuestionMediaManager ( ) , new CameraUtils ( ) ) ; }
public T clickOption ( int option ) { clickOnString ( option ) ; return page . assertOnPage ( ) ; }
public LocationClient providesLocationClient ( ) { return applicationComponent . locationClient ( ) ; }
public void whenPermissionIsNotGranted_requestGeoPoint_doesNotLaunchAnyIntent ( ) { permissionsProvider . setPermissionGranted ( false ) ; activityGeoDataRequester . requestGeoPoint ( prompt , "" , waitingForDataRegistry ) ; assertNull ( shadowActivity . getNextStartedActivity ( ) ) ; assertTrue ( waitingForDataRegistry . waiting . isEmpty ( ) ) ; }
public void whenPermissionIsNotGranted_requestGeoShape_doesNotLaunchAnyIntent ( ) { permissionsProvider . setPermissionGranted ( false ) ; activityGeoDataRequester . requestGeoShape ( prompt , "" , waitingForDataRegistry ) ; assertNull ( shadowActivity . getNextStartedActivity ( ) ) ; assertTrue ( waitingForDataRegistry . waiting . isEmpty ( ) ) ; }
public void whenPermissionIsNotGranted_requestGeoTrace_doesNotLaunchAnyIntent ( ) { permissionsProvider . setPermissionGranted ( false ) ; activityGeoDataRequester . requestGeoTrace ( prompt , "" , waitingForDataRegistry ) ; assertNull ( shadowActivity . getNextStartedActivity ( ) ) ; assertTrue ( waitingForDataRegistry . waiting . isEmpty ( ) ) ; }
public void whenPermissionIGranted_requestGeoPoint_setsFormIndexWaitingForData ( ) { activityGeoDataRequester . requestGeoPoint ( prompt , "" , waitingForDataRegistry ) ; assertTrue ( waitingForDataRegistry . waiting . contains ( formIndex ) ) ; }
public void whenPermissionIGranted_requestGeoShape_setsFormIndexWaitingForData ( ) { activityGeoDataRequester . requestGeoShape ( prompt , "" , waitingForDataRegistry ) ; assertTrue ( waitingForDataRegistry . waiting . contains ( formIndex ) ) ; }
public void whenPermissionIGranted_requestGeoTrace_setsFormIndexWaitingForData ( ) { activityGeoDataRequester . requestGeoTrace ( prompt , "" , waitingForDataRegistry ) ; assertTrue ( waitingForDataRegistry . waiting . contains ( formIndex ) ) ; }
public static String createProject ( Project project ) { Project . Saved savedProject = DaggerUtils . getComponent ( ApplicationProvider . < Application > getApplicationContext ( ) ) . projectsRepository ( ) . save ( project ) ; return savedProject . getUuid ( ) ; }
public void buttonsShouldNotLaunchIntentsWhenPermissionsDenied ( ) { stubAllRuntimePermissionsGranted ( false ) ; assertNull ( getIntentLaunchedByClick ( R . id . capture_image ) ) ; }
public void buttonsShouldNotLaunchIntentsWhenPermissionsDenied ( ) { stubAllRuntimePermissionsGranted ( false ) ; assertNull ( getIntentLaunchedByClick ( R . id . capture_video ) ) ; }
public void onClickPauseResume ( View v ) { defocusTextField ( alarmPeriod ) ; timer . toggleRunPause ( ) ; updateHandler . beginScheduledUpdate ( ) ; updateUI ( ) ; if ( timer . isRunning ( ) ) { informIfNotificationAlarmsMuted ( ) ; } }
public void onClickReset ( View v ) { boolean wasStopped = timer . isStopped ( ) ; defocusTextField ( alarmPeriod ) ; timer . reset ( ) ; updateHandler . beginScheduledUpdate ( ) ; updateUI ( ) ; if ( wasStopped ) { informIfNotificationAlarmsMuted ( ) ; } }
public void onClickStop ( View v ) { defocusTextField ( alarmPeriod ) ; timer . stop ( ) ; updateHandler . endScheduledUpdates ( ) ; updateUI ( ) ; }
public void onClickTimerText ( View v ) { defocusTextField ( alarmPeriod ) ; timer . cycle ( ) ; updateHandler . beginScheduledUpdate ( ) ; updateUI ( ) ; if ( timer . isRunning ( ) ) { informIfNotificationAlarmsMuted ( ) ; } }
public void onClickEnableRemindersToggle ( View v ) { defocusTextField ( alarmPeriod ) ; state . setEnableReminders ( enableReminders . isChecked ( ) ) ; state . save ( this ) ; updateUI ( ) ; if ( state . isEnableReminders ( ) ) { informIfNotificationAlarmsMuted ( ) ; } }
public void onClickBackground ( View view ) { View focussed = getCurrentFocus ( ) ; if ( focussed == alarmPeriod ) { processAlarmPeriodInput ( ) ; } view . clearFocus ( ) ; }
public boolean onEditAction ( TextView view , int actionId , KeyEvent event ) { if ( view == alarmPeriod ) { processAlarmPeriodInput ( ) ; return true ; } return false ; }
private static void hideTheCountdown ( @ NonNull RemoteViews rv ) { rv . setViewVisibility ( R . id . countdownFlipper , View . GONE ) ; rv . setChronometer ( R . id . countdownChronometer , 0 , null , false ) ; }
private void setContentWarningButtonText ( boolean expanded ) { if ( expanded ) { contentWarningButton . setText ( R . string . post_content_warning_show_less ) ; } else { contentWarningButton . setText ( R . string . post_content_warning_show_more ) ; } }
public AccountResult ( TimelineAccount account ) { this . account = account ; }
public TimelineAccount getAccount ( ) { return account ; }
public void migrate ( @ NonNull SupportSQLiteDatabase database ) { database . execSQL ( "ALTER TABLE `ConversationEntity` ADD COLUMN `s_tags` TEXT" ) ; database . execSQL ( "ALTER TABLE `TimelineStatusEntity` ADD COLUMN `tags` TEXT" ) ; }
private void showOpenAsDialog ( String statusUrl , CharSequence dialogTitle ) { BaseActivity activity = ( BaseActivity ) getActivity ( ) ; activity . showAccountChooserDialog ( dialogTitle , false , account -> activity . openAsAccount ( statusUrl , account ) ) ; }
public Index getMapIndex ( ) throws IOException { if ( mIndex == null ) mIndex = new Index ( this , getDetailedMapDatabase ( ) , getHillshadeDatabase ( ) ) ; return mIndex ; }
public void onAttach ( Context context ) { super . onAttach ( context ) ; try { mFragmentHolder = ( FragmentHolder ) context ; } catch ( ClassCastException e ) { throw new ClassCastException ( context + " must implement FragmentHolder" ) ; } }
public BlurViewFacade setBlurAutoUpdate ( final boolean enabled ) { rootView . getViewTreeObserver ( ) . removeOnPreDrawListener ( drawListener ) ; if ( enabled ) { rootView . getViewTreeObserver ( ) . addOnPreDrawListener ( drawListener ) ; } return this ; }
public boolean onCreateOptionsMenu ( Menu menu ) { MenuInflater myMenuInflater = getMenuInflater ( ) ; myMenuInflater . inflate ( R . menu . menu_home , menu ) ; return super . onCreateOptionsMenu ( menu ) ; }
public long startArchive ( String name , boolean updating ) { return S_OK ; }
public long scanProgress ( long numFolders , long numFiles , String path ) { totalFiles = numFiles ; return S_OK ; }
public long setNumFiles ( long numFiles ) { totalFiles = numFiles ; return S_OK ; }
public long setTotal ( long total ) { totalBytes = total ; curBytes = 0 ; return S_OK ; }
public long setCompleted ( long completeValue ) { curBytes = completeValue ; publishProgress ( " - P" , "" ) ; return S_OK ; }
public long setRatioInfo ( long inSize , long outSize ) { this . inSize = inSize ; this . outSize = outSize ; publishProgress ( " - R" , "" ) ; return S_OK ; }
public long getStream ( String name , boolean isAnti ) { Log . i ( TAG , "Current File : " + name ) ; publishProgress ( name ) ; return S_OK ; }
public long setOperationResult ( long operationResult ) { curFiles = operationResult ; return S_OK ; }
public long openSetCompleted ( long numFiles , long numBytes ) { return S_OK ; }
public static void checkWidgetUpdateAlarm ( Context context ) { boolean hasActiveUpdates = PendingIntentUtils . getImmutableBroadcast ( context , RC_WIDGET_UPDATE , getUpdateIntent ( context ) , PendingIntent . FLAG_NO_CREATE ) != null ; if ( ! hasActiveUpdates ) { enableWidgetUpdate ( context ) ; } }
private void onClickAddButton ( ) { Intent i = new Intent ( this , FeedSearchActivity . class ) ; startActivity ( i ) ; }
public Cursor getSavedSearchCursor ( CancellationSignal cancellationSignal ) { return query ( false , DatabaseConstants . SAVED_SEARCH_TABLE , null , null , null , null , null , null , null , cancellationSignal ) ; }
private void selectImageFromCamera ( ) { imageActivityHelper . getImageFromCamera ( this . geocode , false , null ) ; }
private void selectImageFromStorage ( ) { imageActivityHelper . getImageFromStorage ( this . geocode , false , null ) ; }
private void init ( ) { if ( initialized ) { return ; } initialized = true ; checkRestore ( ) ; DataStore . cleanIfNeeded ( this ) ; updateCacheCounter ( ) ; prepareQuickLaunchItems ( ) ; }
public void notifyDataSetChanged ( ) { synchronized ( mutextContentIsUpToDate ) { contentIsUpToDate = false ; setContent ( ) ; contentIsUpToDate = true ; } }
public void copyDetours ( final OsmTrack source ) { detourMap = source . detourMap == null ? null : new FrozenLongMap <> ( source . detourMap ) ; }
private void matchWaypointsToNodes ( final List < MatchedWaypoint > unmatchedWaypoints ) { resetCache ( false ) ; nodesCache . matchWaypointsToNodes ( unmatchedWaypoints , routingContext . waypointCatchingRange , islandNodePairs ) ; }
public void addBadWay ( final MessageData badWay ) { if ( badWay == null ) { return ; } if ( badWays == null ) { badWays = new ArrayList <> ( ) ; } badWays . add ( badWay ) ; }
public void addAlias ( final String alias ) { if ( aliases == null ) { aliases = new ArrayList <> ( ) ; } aliases . add ( alias ) ; }
public static List < Smiley > getSmileys ( ) { return SMILEYS ; }
public boolean onPrepareOptionsMenu ( final Menu menu ) { menu . findItem ( R . id . menu_smileys ) . setVisible ( ! getSmileys ( ) . isEmpty ( ) ) ; return true ; }
public void setType ( final CalculatedCoordinateType type ) { this . type = type == null ? PLAIN : type ; }
public void setLatitudePattern ( final String latitudePattern ) { this . latitudePattern = latitudePattern == null ? EMPTY_FORMULA : DegreeFormula . compile ( latitudePattern , false ) ; }
public void setLongitudePattern ( final String longitudePattern ) { this . longitudePattern = longitudePattern == null ? EMPTY_FORMULA : DegreeFormula . compile ( longitudePattern , true ) ; }
public Image build ( ) { return new Image ( uri , title , description , targetScale , category ) ; }
public boolean isUserModified ( ) { return isUserDefined ( ) || ( isOriginalCoordsEmpty ( ) && ( getCoords ( ) != null || getCalcStateConfig ( ) != null ) ) || StringUtils . isNotBlank ( getUserNote ( ) ) ; }
private void failIntent ( final IntentContextData intentContextData ) { failIntent ( intentContextData . requestCode , intentContextData . callOnFailure , intentContextData . userKey ) ; }
public static Folder newestBackupFolder ( ) { final ArrayList < ContentStorage . FileInformation > dirs = getExistingBackupFoldersSorted ( false ) ; return dirs == null ? null : dirs . get ( dirs . size ( ) - 1 ) . dirLocation ; }
public boolean eof ( ) { return ch == END_CHAR ; }
public boolean eat ( final int charToEat ) { skipWhitespaces ( ) ; if ( ch == charToEat ) { next ( ) ; return true ; } return false ; }
public Set < String > getNeededVars ( ) { return this . neededVarsReadOnly ; }
public static Formula compile ( final String expression ) throws FormulaException { return compile ( expression , 0 , null ) ; }
private static FormulaNode createSingleValueNode ( final String nodeId , final Object value ) { return new FormulaNode ( nodeId , null , ( objs , vars , ri ) -> value instanceof Value ? ( Value ) value : Value . of ( value ) , null ) ; }
public void testToLocusWaypointCount ( ) { assertEquals ( 9 , WaypointType . values ( ) . length ) ; }
private static WaypointParser createParser ( final String prefix ) { return new WaypointParser ( null , prefix , true ) ; }
public void updateIndividualRoute ( final Route route ) { super . updateRoute ( KEY , route ) ; this . distance = route . getDistance ( ) ; if ( postRealRouteDistance != null ) { postRealRouteDistance . postRealDistance ( distance ) ; } }
public void onCreatePreferences ( final Bundle savedInstanceState , final String rootKey ) { setPreferencesFromResource ( R . xml . preferences_logging , rootKey ) ; logTemplatesCategory = findPreference ( getString ( R . string . preference_category_logging_logtemplates ) ) ; }
public void splitUntil ( ) { final TextParser tp = new TextParser ( "this|is||a\\|test\\\\\\ } - } a" ) ;
public void mark ( ) { this . setBackgroundResource ( R . drawable . calculatecoordinateguide_button_active ) ; }
public Alarm ( Context context ) { mId = 0 ; mTitle = "" ; mDate = System . currentTimeMillis ( ) ; mEnabled = true ; mOccurence = ONCE ; mDays = EVERY_DAY ; update ( ) ; }
public void onArtistItemClick ( Artist artist ) { NavigationFragment sf = ViewArtistFragment . newInstance ( artist ) ; Fragment parentFragment = getParentFragment ( ) ; if ( parentFragment instanceof NavigationFragment ) ( ( NavigationFragment ) parentFragment ) . getNavigationController ( ) . presentFragment ( sf ) ; }
private Bitmap getImagePlaylist ( int position , Playlist playlist ) { List < Song > l = getPlaylistWithListId ( position , playlist . id ) ; return PlaylistArtworkGenerator . getBitmap ( mContext , l , true , false ) ; }
public ViewPlaylistViewModel . State getData ( ) { return mState ; }
public void setData ( ViewPlaylistViewModel . State state ) { mState = state ; notifyItemChanged ( 0 ) ; }
public void setEventListener ( EventListener < ViewPlaylistViewModel . State > eventListener ) { mEventListener = eventListener ; }
public EventListener < ViewPlaylistViewModel . State > getEventListener ( ) { return mEventListener ; }
public void onConfigurationChanged ( Configuration newConfig ) { if ( activity != null ) { Log . d ( TAG , "onConfigurationChanged : " + screenSize [ 0 ] + " , " + screenSize [ 1 ] ) ; } }
private float convertPixelToScaleX ( float marginInPx ) { return 1 - marginInPx * 2 / screenSize [ 0 ] ; }
public void shuffle ( ) { final Handler handler = new Handler ( ) ; handler . postDelayed ( ( ) -> { MusicPlayerRemote . openQueue ( mData , 0 , true ) ; randomize ( ) ; } , 100 ) ; }
public void setData ( ArrayList < Song > songs ) { mBackUp . clear ( ) ; if ( songs != null ) mBackUp . addAll ( songs ) ; randomize ( ) ; }
public void onClick ( View v ) { final Handler handler = new Handler ( ) ; handler . postDelayed ( ( ) -> { MusicPlayerRemote . openQueue ( mData , getBindingAdapterPosition ( ) , true ) ; randomize ( ) ; } , 100 ) ; }
public LoadData < InputStream > buildLoadData ( @ NonNull AudioFileCover audioFileCover , int width , int height , @ NonNull Options options ) { return new LoadData <> ( new ObjectKey ( audioFileCover . filePath ) , new AudioFileCoverFetcher ( audioFileCover ) ) ; }
public void start ( ) { Callback callback = getCallback ( ) ; if ( callback instanceof View && ( ( View ) callback ) . isInEditMode ( ) ) { return ; } playAnimation ( ) ; }
public void playAnimation ( ) { userActionsTaken . add ( UserActionTaken . PLAY_OPTION ) ; lottieDrawable . playAnimation ( ) ; }
public void resumeAnimation ( ) { userActionsTaken . add ( UserActionTaken . PLAY_OPTION ) ; lottieDrawable . resumeAnimation ( ) ; }
public void cancelAnimation ( ) { userActionsTaken . add ( UserActionTaken . PLAY_OPTION ) ; lottieDrawable . cancelAnimation ( ) ; }
public void pauseAnimation ( ) { autoPlay = false ; lottieDrawable . pauseAnimation ( ) ; }
private void setLottieDrawable ( ) { boolean wasAnimating = isAnimating ( ) ; setImageDrawable ( null ) ; setImageDrawable ( lottieDrawable ) ; if ( wasAnimating ) { lottieDrawable . resumeAnimation ( ) ; } }
private void migrateZonesRemoval ( ) { List < String > zoneNames = Arrays . asList ( "bochum" , "balingen" , "erfurt" ) ; migrateZonesRemoval ( zoneNames ) ; }
public void surfaceCreated ( SurfaceHolder holder ) { }
public void surfaceDestroyed ( SurfaceHolder holder ) { }
private void generate2022BonusInsights ( JsonObject quals , JsonObject elims ) { mEventStats . add ( new EventTypeHeader ( mResources . getString ( R . string . breakdown2017_bonus_stats ) ) ) ; addQualVsElimInsightsWithPercentage ( quals , elims , BONUS_INSIGHT_TITLES , BONUS_INSIGHT_KEYS ) ; }
public Cache provideOkCache ( @ ApplicationContext Context context ) { return new Cache ( context . getCacheDir ( ) , CACHE_SIZE ) ; }
public SharedPreferences provideSharedPrefs ( @ ApplicationContext Context context ) { return PreferenceManager . getDefaultSharedPreferences ( context ) ; }
public Tracker provideAndroidTracker ( @ ApplicationContext Context context ) { return Analytics . getTracker ( Analytics . GAnalyticsTracker . ANDROID_TRACKER , context ) ; }
public NotificationManager provideNotificationManager ( @ ApplicationContext Context context ) { return ( NotificationManager ) context . getSystemService ( Context . NOTIFICATION_SERVICE ) ; }
public AccountManager provideAccountManager ( @ ApplicationContext Context context ) { return AccountManager . get ( context ) ; }
public LocalProperties provideLocalProperties ( @ ApplicationContext Context context ) { return new LocalProperties ( context ) ; }
public TeamInfoSubscriber provideTeamInfoSubscriber ( @ ActivityContext Context context , AppConfig config ) { return new TeamInfoSubscriber ( context . getApplicationContext ( ) , config ) ; }
public EventListSubscriber provideEventListRecyclerSubscriber ( @ ActivityContext Context context ) { return new EventListSubscriber ( context ) ; }
public TeamListRecyclerSubscriber ( @ ApplicationContext Context context ) { super ( ) ; mContext = context ; mDataToBind = new ArrayList <> ( ) ; mComparator = new TeamSortByNumberComparator ( ) ; mRenderMode = Team . RENDER_BASIC ; }
public AwardListWriter awardListWriter ( ) { return Mockito . mock ( AwardListWriter . class ) ; }
public AwardWriter awardWriter ( ) { return Mockito . mock ( AwardWriter . class ) ; }
public DistrictListWriter districtListWriter ( ) { return Mockito . mock ( DistrictListWriter . class ) ; }
public DistrictTeamListWriter districtTeamListWriter ( ) { return Mockito . mock ( DistrictTeamListWriter . class ) ; }
public DistrictTeamWriter districtTeamWriter ( ) { return Mockito . mock ( DistrictTeamWriter . class ) ; }
public DistrictWriter districtWriter ( ) { return Mockito . mock ( DistrictWriter . class ) ; }
public EventListWriter eventListWriter ( ) { return Mockito . mock ( EventListWriter . class ) ; }
public EventTeamListWriter eventTeamListWriter ( ) { return Mockito . mock ( EventTeamListWriter . class ) ; }
public EventTeamWriter eventTeamWriter ( ) { return Mockito . mock ( EventTeamWriter . class ) ; }
public EventWriter eventWriter ( ) { return Mockito . mock ( EventWriter . class ) ; }
public MatchListWriter matchListWriter ( ) { return Mockito . mock ( MatchListWriter . class ) ; }
public MatchWriter matchWriter ( ) { return Mockito . mock ( MatchWriter . class ) ; }
public MediaListWriter mediaListWriter ( ) { return Mockito . mock ( MediaListWriter . class ) ; }
public MediaWriter mediaWriter ( ) { return Mockito . mock ( MediaWriter . class ) ; }
public TeamListWriter teamListWriter ( ) { return Mockito . mock ( TeamListWriter . class ) ; }
public TeamWriter teamWriter ( ) { return Mockito . mock ( TeamWriter . class ) ; }
public APICache provideApiCache ( ) { return Mockito . mock ( APICache . class ) ; }
public EventRenderer provideEventRenderer ( ) { return Mockito . mock ( EventRenderer . class ) ; }
public AwardRenderer provideAwardRenderer ( ) { return Mockito . mock ( AwardRenderer . class ) ; }
public TeamRenderer provideTeamRenderer ( ) { return Mockito . mock ( TeamRenderer . class ) ; }
public MatchRenderer provideMatchRenderer ( ) { return Mockito . mock ( MatchRenderer . class ) ; }
public DistrictRenderer provideDistrictRenderer ( ) { return Mockito . mock ( DistrictRenderer . class ) ; }
public EventListSubscriber providesEventListRecyclerSubscriber ( ) { return Mockito . mock ( EventListSubscriber . class ) ; }
public TeamListSubscriber provideTeamListSubscriber ( ) { return Mockito . mock ( TeamListSubscriber . class ) ; }
public AllianceListSubscriber provideAllianceListSubscriber ( ) { return Mockito . mock ( AllianceListSubscriber . class ) ; }
public TeamAtEventSummarySubscriber provideTeamAtEventSummarySubscriber ( ) { return Mockito . mock ( TeamAtEventSummarySubscriber . class ) ; }
public DistrictRankingsSubscriber provideDistrictRankingsSubscriber ( ) { return Mockito . mock ( DistrictRankingsSubscriber . class ) ; }
public WebcastListSubscriber provideWebcastListSubscriber ( ) { return Mockito . mock ( WebcastListSubscriber . class ) ; }
public RecentNotificationsSubscriber provideRecentNotificationsSubscriber ( ) { return Mockito . mock ( RecentNotificationsSubscriber . class ) ; }
public SubscriptionListSubscriber provideSubscriptionListSubscriber ( ) { return Mockito . mock ( SubscriptionListSubscriber . class ) ; }
public FavoriteListSubscriber provideFavoriteListSubscriber ( ) { return Mockito . mock ( FavoriteListSubscriber . class ) ; }
public Tracker provideAndroidTracker ( ) { return Mockito . mock ( Tracker . class ) ; }
public StoredItemsChecker ( AccessStoredItems storedItemAccess , CheckForAnyStoredFiles checkForAnyStoredFiles ) { this . storedItemAccess = storedItemAccess ; this . checkForAnyStoredFiles = checkForAnyStoredFiles ; }
private Note buildNote ( ) { long now = Calendar . getInstance ( ) . getTimeInMillis ( ) ; Note note = new Note ( ) ; note . setCreation ( now ) ; note . setAlarm ( now + 1000 ) ; return note ; }
public void testDecryptUnencrypted ( ) { String result = Security . decrypt ( LOREM , PASS ) ; assertNotEquals ( 0 , result . length ( ) ) ; }
public static void setChallenges ( int challenges ) { EventCollector . setSessionData ( CHALLENGES , String . valueOf ( challenges ) ) ; Dungeon . challenges = challenges ; }
public boolean onTouch ( View view , MotionEvent event ) { gameLoop . motionEvents . add ( new PointerEvent ( MotionEvent . obtain ( event ) ) ) ; return true ; }
public void onSurfaceChanged ( GL10 gl , int width , int height ) { GLES20 . glViewport ( 0 , 0 , width , height ) ; GameLoop . width ( width ) ; GameLoop . height ( height ) ; GameLoop . setNeedSceneRestart ( ) ; }
public static boolean landscape ( ) { return GameLoop . width ( ) > GameLoop . height ( ) ; }
public void bitmap ( BitmapData bitmap ) { bind ( ) ; GLUtils . texImage2D ( GLES20 . GL_TEXTURE_2D , 0 , bitmap . bmp , 0 ) ; }
public static Texture create ( BitmapData bmp ) { Texture tex = new Texture ( ) ; tex . bitmap ( bmp ) ; return tex ; }
public void onPageFinished ( WebView view , String url ) { AdsUtils . updateBanner ( adView ) ; }
public void onAdLoaded ( ) { AdsUtils . updateBanner ( adView ) ; loaded = true ; }
public void onBannerLoaded ( int i , boolean b ) { AdsUtils . updateBanner ( adView ) ; }
public GoogleRewardVideoAds ( ) { Game . runOnMainThread ( this : : loadNextVideo ) ; }
public void onAdDismissedFullScreenContent ( ) { mCinemaRewardAd = null ; GLog . debug ( "reward state " + rewardEarned ) ; Game . runOnMainThread ( GoogleRewardVideoAds . this : : loadNextVideo ) ; returnTo . returnToWork ( rewardEarned ) ; rewardEarned = false ; }
private Executor getExecutor ( ) { return GameLoop . instance ( ) . serviceExecutor ; }
static public void logScene ( final String scene ) { if ( ! mDisabled ) { Game . runOnMainThread ( ( ) -> mFirebaseAnalytics . setCurrentScreen ( Game . instance ( ) , scene , null ) ) ; } }
public static void immerse ( boolean value ) { Preferences . INSTANCE . put ( Preferences . KEY_IMMERSIVE , value ) ; Game . runOnMainThread ( ( ) -> { RemixedDungeon . updateImmersiveMode ( ) ; GameLoop . setNeedSceneRestart ( ) ; } ) ; }
public static int limitTimeoutIndex ( int value ) { return Math . max ( Math . min ( value , GameLoop . MOVE_TIMEOUTS . length - 1 ) , 0 ) ; }
public static double getMoveTimeout ( ) { return GameLoop . MOVE_TIMEOUTS [ limitTimeoutIndex ( moveTimeout ( ) ) ] ; }
private static boolean isSmallScreen ( ) { return ( GameLoop . width ( ) < 400 || GameLoop . height ( ) < 400 ) ; }
static private void tryNextBanner ( ) { IBannerProvider chosenProvider = choseLessFailedFrom ( AdsUtils . bannerFails , Integer . MAX_VALUE ) ; if ( chosenProvider != null ) { Game . runOnMainThread ( chosenProvider : : displayBanner ) ; } }
public boolean isCompatible ( ) { return rpdVersion <= ( GameLoop . versionCode % 2000 ) ; }
public static int regularFontSize ( ) { if ( GameLoop . smallResScreen ( ) ) { return 8 ; } else { return 7 ; } }
public static int smallFontSize ( ) { if ( GameLoop . smallResScreen ( ) ) { return 8 ; } else { return 6 ; } }
public static int activeModVersion ( ) { if ( mActiveMod . equals ( ModdingMode . REMIXED ) ) { return GameLoop . versionCode ; } JSONObject version = JsonHelper . tryReadJsonFromAssets ( "version . json" ) ; return version . optInt ( "version" ) ; }
public static boolean isDebug ( ) { return BuildConfig . DEBUG || GameLoop . isDev ( ) ; }
public SmartTexture ( @ NotNull BitmapData bitmap ) { this ( bitmap , NEAREST , CLAMP ) ; }
public SmartTexture ( @ NotNull BitmapData bitmap , int filtering , int wrapping ) { super ( ) ; bitmap ( bitmap ) ; filter ( filtering , filtering ) ; wrap ( wrapping , wrapping ) ; }
public SystemTextLine ( BitmapData bitmap ) { this ( ) ; texture = new SmartTexture ( bitmap , Texture . LINEAR , Texture . CLAMP ) ; frame ( new RectF ( 0 , 0 , 1 , 1 ) ) ; }
public synchronized void pause ( ) { if ( ! GameLoop . softPaused ) { final Hero hero = Dungeon . hero ; if ( hero != null && hero . isAlive ( ) ) { Dungeon . save ( false ) ; } } }
public static Font chooseFont ( float size ) { scale = size / 14 . f ; scale / = 1 . 8 ; if ( GameLoop . smallResScreen ( ) ) { scale / = 2 ; } font = font25x ; return font ; }
public boolean doingSomething ( ) { return ( curAnim != null && curAnim != idle && curAnim != run && curAnim != die ) || isMoving ; }
public DeathStroke ( ) { super ( Effects . get ( Effects . Type . DEATHSTROKE ) ) ; setOrigin ( width / 2 , height / 2 ) ; }
public Devour ( ) { super ( Effects . get ( Effects . Type . DEVOUR ) ) ; setOrigin ( width / 2 , height / 2 ) ; }
public GutsLevel ( ) { color1 = 0x534f3e ; color2 = 0xb9d661 ; _objectsKind = 5 ; viewDistance = 6 ; }
public NecroLevel ( ) { color1 = 0x534f3e ; color2 = 0xb9d661 ; viewDistance = 6 ; _objectsKind = 7 ; }
public ShadowLordLevel ( ) { color1 = 0x801500 ; color2 = 0xa68521 ; viewDistance = 3 ; _objectsKind = 4 ; }
public int charGotDamage ( int damage , NamedEntityKind src ) { return script . runOptional ( "damage" , super . charGotDamage ( damage , src ) , damage , src ) ; }
public boolean act ( ) { super . act ( ) ; MobSpawner . spawnRandomMob ( level ( ) , getPos ( ) , 20 ) ; postpone ( 20 ) ; return true ; }
public SpiderLevel ( ) { color1 = 0x48763c ; color2 = 0x59994a ; _objectsKind = 6 ; }
static public JSONObject readJsonFromAsset ( String fileName ) { try { return readJsonFromStream ( ModdingMode . getInputStream ( fileName ) , fileName ) ; } catch ( JSONException e ) { throw ModdingMode . modException ( e ) ; } }
public static JSONObject readJsonFromString ( final String in ) throws JSONException { return readJsonFromStream ( new ByteArrayInputStream ( in . getBytes ( ) ) , "String" ) ; }
public Animation ( float fps , boolean looped ) { this . delay = 1f / fps ; this . looped = looped ; }
public int lines ( ) { return ( int ) ( height /font . lineHeight ) ; }
public void size ( float width , float height ) { setScale ( width , height ) ; }
public float bottom ( ) { return getY ( ) + height ( ) ; }
public void size ( float w , float h ) { setScale ( w , h ) ; }
public void size ( float value ) { setScale ( value ) ; }
public PixelParticle ( ) { super ( ) ; setOrigin ( + 0 . 5f ) ; }
public ScaleTweener ( Visual visual , PointF scale , float time ) { super ( visual , time ) ; this . visual = visual ; start = visual . scale ; end = scale ; }
public int charGotDamage ( int damage , NamedEntityKind src ) { return damage ; }
public int charGotDamage ( int damage , NamedEntityKind src ) { detach ( ) ; return super . charGotDamage ( damage , src ) ; }
public boolean act ( ) { if ( target . hp ( ) > target . ht ( ) * LEVEL ) { detach ( ) ; } spend ( TICK * 10 ) ; return true ; }
public void update ( ) { if ( ( alpha -= GameLoop . elapsed ) > 0 ) { alpha ( alpha ) ; setScale ( DungeonTilemap . SIZE * alpha ) ; } else { killAndErase ( ) ; } }
public CircleMask ( ) { ensureTexture ( ) ; texture ( CACHE_KEY ) ; setOrigin ( RADIUS ) ; }
public void radius ( float value ) { setScale ( ( this . radius = value ) / RADIUS ) ; }
public FloatingText ( ) { super ( PixelScene . chooseFont ( 9 ) ) ; setScale ( PixelScene . scale ) ; speed . y = - DISTANCE / LIFESPAN ; }
public Speck ( ) { texture ( Assets . SPECKS ) ; if ( film == null ) { film = new TextureFilm ( texture , SIZE , SIZE ) ; } setOrigin ( SIZE / 2f ) ; }
public void reset ( int index ) { frame ( film . get ( index ) ) ; setOrigin ( width / 2 , height / 2 ) ; phase = Phase . FADE_IN ; duration = FADE_IN_TIME ; passed = 0 ; }
public Wound ( ) { super ( Effects . get ( Effects . Type . WOUND ) ) ; setOrigin ( width / 2 , height / 2 ) ; }
public WindParticle ( ) { lifespan = Random . Float ( 1 , 2 ) ; setScale ( size = Random . Float ( 3 ) ) ; }
public void drop ( ) { setScale ( 1 ) ; am = 1 ; }
public void update ( ) { super . update ( ) ; setScale ( scale . x * 0 . 9f ) ; if ( ( am -= GameLoop . elapsed ) <= 0 ) { remove ( ) ; } }
public BusyIndicator ( ) { super ( ) ; copy ( Icons . BUSY . get ( ) ) ; setOrigin ( width / 2 , height / 2 ) ; angularSpeed = 720 ; }
public void setOrigin ( float x , float y ) { this . origin . set ( x , y ) ; dirtyMatrix = true ; }
public void onResume ( ) { super . onResume ( ) ; Scene . setMode ( Scene . LEVELS_TEST ) ; }
static public @ NotNull File getInternalStorageFile ( String fileName ) { File storageDir = getContext ( ) . getFilesDir ( ) ; return new File ( storageDir , fileName ) ; }
public boolean isReady ( ) { return loaded ; }
public PortalGate ( int pos ) { super ( pos ) ; layer = 2 ; }
public boolean stepOn ( Char chr ) { interact ( chr ) ; if ( uses > 0 && chr instanceof Hero ) { Hero hero = ( Hero ) chr ; hero . interrupt ( ) ; } return true ; }
public void die ( @ NotNull NamedEntityKind cause ) { Badges . validateBossSlain ( Badges . Badge . SPIDER_QUEEN_SLAIN ) ; super . die ( cause ) ; }
public static void setMode ( String mode ) { sceneMode = mode ; script . run ( "setMode" , mode ) ; }
public static boolean isLoading ( ) { return hero == null || level == null || GameLoop . loadingOrSaving . get ( ) > 0 ; }
public DungeonTilemap ( @ NotNull Level level , String tiles ) { super ( tiles , new TextureFilm ( tiles , SIZE , SIZE ) ) ; DungeonTilemap . level = level ; map ( level . map , level . getWidth ( ) ) ; }
public void die ( @ NotNull NamedEntityKind src ) { if ( level ( ) . pit [ getPos ( ) ] ) { getSprite ( ) . fall ( ) ; } else { getSprite ( ) . die ( ) ; } destroy ( ) ; }
public boolean adjacent ( @ NotNull HasPositionOnLevel chr ) { return level ( ) . adjacent ( getPos ( ) , chr . getPos ( ) ) ; }
public void attachVisual ( ) { target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaAmok ) ) ; }
public void attachVisual ( ) { target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaBleeding ) ) ; }
public void carrierFx ( ) { Effects . burnFX ( target . getPos ( ) ) ; }
public void attachVisual ( ) { target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaCrippled ) ) ; }
public void attachVisual ( ) { super . attachVisual ( ) ; target . showStatus ( CharSprite . POSITIVE , StringsManager . getVar ( R . string . Char_StaInvisible ) ) ; }
public void attachVisual ( ) { target . getSprite ( ) . add ( CharSprite . State . PARALYSED ) ; target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaParalysed ) ) ; }
public void attachVisual ( ) { target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaRooted ) ) ; }
public void attachVisual ( ) { target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaSlowed ) ) ; }
public void attachVisual ( ) { target . getSprite ( ) . add ( CharSprite . State . PARALYSED ) ; target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaStunned ) ) ; }
public void attachVisual ( ) { target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaFrightened ) ) ; }
public void attachVisual ( ) { target . showStatus ( CharSprite . NEGATIVE , StringsManager . getVar ( R . string . Char_StaDizzy ) ) ; }
public void STR ( int sTR ) { baseStr = Scrambler . scramble ( sTR ) ; }
public int STR ( ) { return Scrambler . descramble ( baseStr ) ; }
public void setDifficulty ( int difficulty ) { this . difficulty = difficulty ; GameLoop . setDifficulty ( difficulty ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { GameScene . playLevelMusic ( ) ; GameScene . bossSlain ( ) ; level ( ) . unseal ( ) ; super . die ( cause ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { Ghost . Quest . process ( getPos ( ) ) ; super . die ( cause ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { super . die ( cause ) ; Badges . validateBossSlain ( Badges . Badge . BOSS_SLAIN_3 ) ; yell ( StringsManager . getVar ( R . string . DM300_Info2 ) ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { ScarecrowNPC . Quest . process ( getPos ( ) ) ; Ghost . Quest . process ( getPos ( ) ) ; super . die ( cause ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { Imp . Quest . process ( this ) ; super . die ( cause ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { super . die ( cause ) ; Badges . validateBossSlain ( Badges . Badge . BOSS_SLAIN_1 ) ; yell ( StringsManager . getVar ( R . string . Goo_Info2 ) ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { super . die ( cause ) ; if ( CharUtils . isVisible ( this ) ) { Sample . INSTANCE . play ( Assets . SND_BONES ) ; } }
public void die ( @ NotNull NamedEntityKind cause ) { super . die ( cause ) ; Statistics . piranhasKilled ++ ; Badges . validatePiranhasKilled ( ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { super . die ( cause ) ; Badges . validateBossSlain ( Badge . BOSS_SLAIN_2 ) ; say ( StringsManager . getVar ( R . string . Tengu_Info1 ) ) ; }
public void die ( @ NotNull NamedEntityKind cause ) { say ( StringsManager . getVar ( R . string . RatKing_Died ) ) ; super . die ( cause ) ; }
public boolean nonPassable ( Char ch ) { return false ; }
public static String format ( int StringFormatId , Object . . . args ) { return String . format ( Locale . ROOT , StringsManager . getVar ( StringFormatId ) , args ) ; }
public static String format ( String format , Object . . . args ) { return String . format ( Locale . ROOT , format , args ) ; }
public void eraseColor ( int color ) { bitmap . clear ( color ( color ) ) ; }
public void setPixel ( int x , int y , int color ) { bitmap . setPixel ( x , y , color ( color ) ) ; }
public int lines ( ) { return 0 ; }
public static boolean landscape ( ) { return false ; }
public void enable ( ) { Gdx . gl20 . glEnableVertexAttribArray ( location ) ; }
public void disable ( ) { Gdx . gl20 . glDisableVertexAttribArray ( location ) ; }
public Program ( ) { handle = Gdx . gl20 . glCreateProgram ( ) ; }
public void attach ( Shader shader ) { Gdx . gl20 . glAttachShader ( handle , shader . handle ( ) ) ; }
public Attribute attribute ( String name ) { return new Attribute ( Gdx . gl20 . glGetAttribLocation ( handle , name ) ) ; }
public Uniform uniform ( String name ) { return new Uniform ( Gdx . gl20 . glGetUniformLocation ( handle , name ) ) ; }
public void use ( ) { Gdx . gl20 . glUseProgram ( handle ) ; }
public void delete ( ) { Gdx . gl20 . glDeleteProgram ( handle ) ; }
public Shader ( int type ) { handle = Gdx . gl20 . glCreateShader ( type ) ; if ( handle == 0 ) { throw new AssertionError ( ) ; } }
public void delete ( ) { Gdx . gl20 . glDeleteShader ( handle ) ; }
public void value ( int value ) { Gdx . gl20 . glUniform1i ( location , value ) ; }
public void value1f ( float value ) { Gdx . gl20 . glUniform1f ( location , value ) ; }
public void value2f ( float v1 , float v2 ) { Gdx . gl20 . glUniform2f ( location , v1 , v2 ) ; }
public void value4f ( float v1 , float v2 , float v3 , float v4 ) { Gdx . gl20 . glUniform4f ( location , v1 , v2 , v3 , v4 ) ; }
public void valueM3 ( float [ ] value ) { Gdx . gl20 . glUniformMatrix3fv ( location , 1 , false , value , 0 ) ; }
public void valueM4 ( float [ ] value ) { Gdx . gl20 . glUniformMatrix4fv ( location , 1 , false , value , 0 ) ; }
public static BitmapData decodeStream ( InputStream inputStream ) { return new BitmapData ( inputStream ) ; }
public static void blendSrcAlphaOne ( ) { GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE ) ; }
public static void blendSrcAlphaOneMinusAlpha ( ) { GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE_MINUS_SRC_ALPHA ) ; }
static public void slog ( String tag , String txt ) { Log . i ( tag , txt ) ; }
public void resume ( ) { instance = this ; gameLoop . onResume ( ) ; if ( gameLoop . scene != null ) { gameLoop . scene . resume ( ) ; } paused = false ; }
public boolean nonPassable ( Char ch ) { return true ; }
public void updateFow ( @ NotNull FogOfWar fog ) { fog . updateVisibility ( Dungeon . visible , level . visited , level . mapped , false ) ; }
public void addComments ( final Collection < RedditCommentListItem > comments ) { final Collection < GroupedRecyclerViewAdapter . Item < ? >> filteredComments = filter ( comments ) ; addItems ( filteredComments ) ; mCommentCount += filteredComments . size ( ) ; }
public Item < ? > getItemAtPosition ( final int position ) { return getItemInternal ( position ) ; }
public void notifyItemChanged ( final int groupId , final Item < ? > item ) { final int position = getItemPositionInternal ( groupId , item ) ; notifyItemChanged ( position ) ; }
public void addItems ( final Collection < GroupedRecyclerViewAdapter . Item < ? >> items ) { General . checkThisIsUIThread ( ) ; mAdapter . appendToGroup ( GROUP_ITEMS , items ) ; doWorkaround ( ) ; }
public void onPlayerError ( @ NonNull final PlaybackException error ) { Log . e ( TAG , "ExoPlayer error" , error ) ; mListener . onError ( ) ; }
public void onChanged ( ) { if ( mPopup == null ) return ; if ( mLastSelected != null ) return ; if ( mSelectedItem == null ) return ; mPopup . getListView ( ) . setItemChecked ( mAdapter . getPosition ( mSelectedItem ) , true ) ; }
public static void del_own_avatar ( ) { delete_vfs_file ( VFS_PREFIX + VFS_OWN_AVATAR_DIR + "/" , VFS_OWN_AVATAR_DIR_FILENAME_WITH_EXTENSION ) ; }
private String getTimeStamp ( ) { return " [ " + new SimpleDateFormat ( "HH : mm : ss" , Locale . ENGLISH ) . format ( new Date ( ) ) + " ] " ; }
public static SongDetailDialog create ( @ NonNull Song song ) { SongDetailDialog dialog = new SongDetailDialog ( ) ; Bundle args = new Bundle ( ) ; args . putParcelable ( "song" , song ) ; dialog . setArguments ( args ) ; return dialog ; }
private PendingIntent makeTimerPendingIntent ( int flag ) { return PendingIntentCompat . getService ( getActivity ( ) , 0 , makeTimerIntent ( ) , flag ) ; }
private PendingIntent buildPendingIntent ( Context context , final String action , final ComponentName serviceName ) { Intent intent = new Intent ( action ) ; intent . setComponent ( serviceName ) ; return PendingIntentCompat . getService ( context , 0 , intent , 0 ) ; }
public void lockSwipeRightToGoBack ( ) { if ( mSlidrInterface != null ) { mSlidrInterface . lock ( ) ; } }
public void unlockSwipeRightToGoBack ( ) { if ( mSlidrInterface != null ) { mSlidrInterface . unlock ( ) ; } }
public static SpoilerParserPlugin create ( int textColor , int backgroundColor ) { return new SpoilerParserPlugin ( textColor , backgroundColor ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; activity = ( ViewSubredditDetailActivity ) context ; }
public boolean onCreateOptionsMenu ( Menu menu ) { if ( getIntent ( ) . getBooleanExtra ( EXTRA_SUBMIT_POST , false ) ) { getMenuInflater ( ) . inflate ( R . menu . full_markdown_activity , menu ) ; applyMenuItemTheme ( menu ) ; } return true ; }
public int getItemCount ( ) { return collapsePreferencesSection ? 1 : PREFERENCES_SECTION_ITEMS + 1 ; }
public int getItemCount ( ) { return collapseRedditSection ? 1 : REDDIT_SECTION_ITEMS + 1 ; }
public int getCommentVerticalBarColor1 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_1 , getDefaultColor ( "#0336FF" , "#0336FF" , "#0336FF" ) ) ; }
public int getCommentVerticalBarColor2 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_2 , getDefaultColor ( "#EE02BE" , "#C300B3" , "#C300B3" ) ) ; }
public int getCommentVerticalBarColor3 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_3 , getDefaultColor ( "#02DFEE" , "#00B8DA" , "#00B8DA" ) ) ; }
public int getCommentVerticalBarColor4 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_4 , getDefaultColor ( "#EED502" , "#EDCA00" , "#EDCA00" ) ) ; }
public int getCommentVerticalBarColor5 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_5 , getDefaultColor ( "#EE0220" , "#EE0219" , "#EE0219" ) ) ; }
public int getCommentVerticalBarColor6 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_6 , getDefaultColor ( "#02EE6E" , "#00B925" , "#00B925" ) ) ; }
public int getCommentVerticalBarColor7 ( ) { return getThemeSharedPreferences ( ) . getInt ( CustomThemeSharedPreferencesUtils . COMMENT_VERTICAL_BAR_COLOR_7 , getDefaultColor ( "#EE4602" , "#EE4602" , "#EE4602" ) ) ; }
public void writeToParcel ( Parcel out , int flags ) { super . writeToParcel ( out , flags ) ; out . writeList ( startXs ) ; out . writeIntArray ( colors ) ; }
public void addChild ( Comment comment ) { addChild ( comment , 0 ) ; childCount ++ ; }
public void refresh ( ) { mFetchPostInfoLinearLayout . setVisibility ( View . GONE ) ; hasPost = false ; if ( isInLazyMode ) { stopLazyMode ( ) ; } saveCache ( ) ; mAdapter . refresh ( ) ; goBackToTop ( ) ; }
public void onActivityPreCreated ( @ NonNull Activity activity , @ Nullable Bundle savedInstanceState ) { if ( activity instanceof CustomFontReceiver ) { ( ( CustomFontReceiver ) activity ) . setCustomFont ( typeface , titleTypeface , contentTypeface ) ; } }
public CustomThemeListingRecyclerViewAdapter ( BaseActivity activity , ArrayList < CustomTheme > predefinedCustomThemes ) { this . activity = activity ; this . predefinedCustomThemes = predefinedCustomThemes ; userCustomThemes = new ArrayList <> ( ) ; }
public void onSubredditSubscriptionSuccess ( ) { ( ( DataViewHolder ) holder ) . subscribeButton . setVisibility ( View . GONE ) ; Toast . makeText ( activity , R . string . subscribed , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onSubredditSubscriptionFail ( ) { Toast . makeText ( activity , R . string . subscribe_failed , Toast . LENGTH_SHORT ) . show ( ) ; }
public TranslationFragmentRecyclerViewAdapter ( BaseActivity activity , CustomThemeWrapper customThemeWrapper ) { this . activity = activity ; primaryTextColor = customThemeWrapper . getPrimaryTextColor ( ) ; secondaryTextColor = customThemeWrapper . getSecondaryTextColor ( ) ; translationContributors = Translation . getTranslationContributors ( ) ; }
public void onUserFollowingSuccess ( ) { ( ( DataViewHolder ) holder ) . subscribeButton . setVisibility ( View . GONE ) ; Toast . makeText ( activity , R . string . followed , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onUserFollowingFail ( ) { Toast . makeText ( activity , R . string . follow_failed , Toast . LENGTH_SHORT ) . show ( ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; activity = ( BaseActivity ) context ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; mActivity = ( BaseActivity ) context ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; this . activity = ( BaseActivity ) context ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; this . mActivity = ( BaseActivity ) context ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; mActivity = ( RPANActivity ) context ; }
public void onLoadFinished ( @ NonNull Loader < List < CharSequence >> loader , List < CharSequence > data ) { mDocumentProperties = data ; LoaderManager . getInstance ( this ) . destroyLoader ( DocumentPropertiesLoader . ID ) ; }
public void onLoaderReset ( @ NonNull Loader < List < CharSequence >> loader ) { mDocumentProperties = null ; }
public void setUpWebServer ( ) throws IOException { webServer = new MockWebServer ( ) ; webServer . enqueue ( new MockResponse ( ) . setBody ( TestHelper . readTestAsset ( "genericPage . html" ) ) ) ; }
public static Collection < String > getPackagedLocaleTags ( ) { return LocaleList . BUNDLED_LOCALES ; }
public void onServiceDisconnected ( ComponentName className ) { if ( attysService != null ) { attysService . stopAttysComm ( ) ; } attysService = null ; }
public void onClick ( DialogInterface dialog , int whichButton ) { Intent i = new Intent ( android . provider . Settings . ACTION_BLUETOOTH_SETTINGS ) ; startActivity ( i ) ; finish ( ) ; }
private void saveDownloadStatus ( @ NonNull DownloadStatus status ) { reportQueue . add ( status ) ; DBWriter . addDownloadStatus ( status ) ; }
public void onEventMainThread ( PlaybackPositionEvent event ) { updateChapterSelection ( getCurrentChapter ( media ) , false ) ; adapter . notifyTimeChanged ( event . getPosition ( ) ) ; }
public void onReceive ( Context context , Intent intent ) { Log . d ( TAG , "onReceive" ) ; super . onReceive ( context , intent ) ; WidgetUpdaterWorker . enqueueWork ( context ) ; }
public void onEnabled ( Context context ) { super . onEnabled ( context ) ; Log . d ( TAG , "Widget enabled" ) ; setEnabled ( context , true ) ; WidgetUpdaterWorker . enqueueWork ( context ) ; }
public void loadCountersBeforeRefresh ( ) { PodDBAdapter adapter = PodDBAdapter . getInstance ( ) ; adapter . open ( ) ; countersBefore = adapter . getFeedCounters ( FeedCounter . SHOW_NEW ) ; adapter . close ( ) ; }
public WidgetUpdater . WidgetState requestWidgetState ( ) { return new WidgetUpdater . WidgetState ( getPlayable ( ) , getStatus ( ) , getCurrentPosition ( ) , getDuration ( ) , getCurrentPlaybackSpeed ( ) ) ; }
public QueryTask ( ) { }
public static String formatForAccessibility ( final Date date ) { if ( date == null ) { return "" ; } return DateFormat . getDateInstance ( DateFormat . LONG ) . format ( date ) ; }
public WidgetState ( PlayerStatus status ) { this ( null , status , Playable . INVALID_TIME , Playable . INVALID_TIME , 1 . 0f ) ; }
public static FeedItemEvent updated ( List < FeedItem > items ) { return new FeedItemEvent ( items ) ; }
public static FeedItemEvent updated ( FeedItem . . . items ) { return new FeedItemEvent ( Arrays . asList ( items ) ) ; }
public int getItemCount ( ) { return yearlyAggregate . size ( ) + 1 ; }
public void onPrepareOptionsMenu ( @ NonNull Menu menu ) { super . onPrepareOptionsMenu ( menu ) ; menu . findItem ( R . id . statistics_reset ) . setVisible ( true ) ; menu . findItem ( R . id . statistics_filter ) . setVisible ( false ) ; }
private boolean shouldNotDownload ( @ NonNull FeedMedia media ) { boolean isDownloading = DownloadService . isDownloadingFile ( media . getDownload_url ( ) ) ; return isDownloading || media . isDownloaded ( ) ; }
private void postDownloaders ( ) { new PostDownloaderTask ( downloads ) . run ( ) ; if ( downloadPostFuture == null ) { downloadPostFuture = notificationUpdateExecutor . scheduleAtFixedRate ( new PostDownloaderTask ( downloads ) , 1 , 1 , TimeUnit . SECONDS ) ; } }
public synchronized void cancelAllTasks ( ) { cancelPositionSaver ( ) ; cancelWidgetUpdater ( ) ; disableSleepTimer ( ) ; if ( chapterLoaderFuture != null ) { chapterLoaderFuture . dispose ( ) ; chapterLoaderFuture = null ; } }
public boolean onItemLongClick ( AdapterView < ? > av , View v , int pos , long id ) { return onLongRosterListItemClick ( pos ) ; }
public void onClick ( View v ) { navigateAway ( false ) ; mainapp . buttonVibration ( ) ; }
public void onClick ( DialogInterface dialog , int id ) { exitConfirmed = true ; sendMsg ( comm_msg_handler , message_type . DISCONNECT , "" ) ; buttonVibration ( ) ; }
public void applyTheme ( Activity activity , boolean isPreferences ) { int selectedTheme = getSelectedTheme ( isPreferences ) ; activity . setTheme ( selectedTheme ) ; Log . d ( "Engine_Driver" , "t_a : applyTheme : " + selectedTheme ) ; theme = activity . getTheme ( ) ; }
public void onRefresh ( ) { if ( searchFragment && isSearchEventSet ( searchEvent ) ) { handleSearchEvent ( searchEvent ) ; mRefreshListLayout . setRefreshing ( false ) ; } else { searchFragment = false ; super . onRefresh ( ) ; } }
public void onScan ( ) { if ( PermissionUtil . checkSelfPermission ( this , Manifest . permission . CAMERA ) ) { startQRScanner ( ) ; } else { PermissionUtil . requestCameraPermission ( this , PERMISSIONS_CAMERA ) ; } }
public static boolean themingEnabled ( Context context ) { return CapabilityUtils . getCapability ( context ) . getServerColor ( ) != null && ! CapabilityUtils . getCapability ( context ) . getServerColor ( ) . isEmpty ( ) ; }
private void updateUploadButtonActive ( ) { final boolean anySelected = mFileListFragment . getCheckedFilesCount ( ) > 0 ; uploadButton . setEnabled ( anySelected || mLocalFolderPickerMode ) ; }
public static Location getLocationAdjustedForGPSWeekRollover ( Location loc ) { long recordedTime = loc . getTime ( ) ; if ( recordedTime < 1554595199000L ) { recordedTime += 619315200000L ; loc . setTime ( recordedTime ) ; } return loc ; }
public void unLink ( ) { preferenceHelper . setDropboxLongLivedAccessKey ( null ) ; preferenceHelper . setDropboxRefreshToken ( null ) ; }
public static StorageChooser directoryChooser ( Activity activity ) { return storageChooser ( StorageChooser . DIRECTORY_CHOOSER , false , null , ( FragmentActivity ) activity ) ; }
public static StorageChooser filePicker ( FragmentActivity activity ) { return storageChooser ( StorageChooser . FILE_PICKER , false , null , ( FragmentActivity ) activity ) ; }
public void Unlink_WhenCalled_KeyCleared ( ) { PreferenceHelper pm = mock ( PreferenceHelper . class ) ; DropBoxManager dropBoxManager = new DropBoxManager ( pm ) ; dropBoxManager . unLink ( ) ; verify ( pm ) . setDropboxRefreshToken ( null ) ; }
public static int getThemeStyleRes ( ) { switch ( getTheme ( ) ) { case THEME_GREEN : return R . style . ThemeOverlay_Green ; case THEME_PINK : return R . style . ThemeOverlay_Pink ; case THEME_DEFAULT : default : return R . style . ThemeOverlay ; } }
public static String getTheme ( ) { return WadbApplication . getDefaultSharedPreferences ( ) . getString ( KEY_LIGHT_THEME , THEME_DEFAULT ) ; }
private void refresh ( ) { IntentUtils . removeCompressedExtra ( getIntent ( ) , "comments" ) ; setResult ( RESULT_OK ) ; mWrappedComments . clear ( ) ; loadComments ( false , true ) ; setContentShown ( false ) ; }
public void onConfirmed ( String tag , Parcelable data ) { long id = ( ( Bundle ) data ) . getLong ( "id" ) ; deleteComment ( id ) ; }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; if ( context instanceof CommitSelectionCallback ) { mCommitCallback = ( CommitSelectionCallback ) context ; } else { throw new ClassCastException ( "No callback provided" ) ; } }
public void onSaveInstanceState ( @ NonNull Bundle outState ) { super . onSaveInstanceState ( outState ) ; outState . putStringArrayList ( STATE_KEY_DIR_STACK , new ArrayList <> ( mDirStack ) ) ; outState . putStringArrayList ( STATE_KEY_INITIAL_PATH , mInitialPathToLoad ) ; mStateSaved = true ; }
public static Intent makeCreateIntent ( Context context , String repoOwner , String repoName ) { return new Intent ( context , IssueEditActivity . class ) . putExtra ( EXTRA_KEY_OWNER , repoOwner ) . putExtra ( EXTRA_KEY_REPO , repoName ) ; }
private boolean isEditingExistingIssue ( ) { return getIntent ( ) . hasExtra ( EXTRA_KEY_ISSUE ) ; }
public void onLocationAvailability ( @ NotNull LocationAvailability locationAvailability ) { Timber . d ( "location availability %s" , locationAvailability ) ; }
public void onLocationResult ( @ NotNull LocationResult locationResult ) { Timber . d ( "location result received : %s" , locationResult ) ; onLocationChanged ( locationResult . getLastLocation ( ) , MessageLocation . REPORT_TYPE_DEFAULT ) ; }
public void onLocationChanged ( @ NonNull Location l , @ Nullable String reportType ) { locationRepo . setCurrentPublishedLocation ( l ) ; publishLocationMessage ( reportType ) ; }
public boolean onDown ( MotionEvent event ) { return true ; }
public void onResume ( ) { super . onResume ( ) ; notifyDataSetChanged ( ) ; }
private static boolean isLocked ( ) { KeyguardManager keyguardManager = ( KeyguardManager ) appContext . getSystemService ( Context . KEYGUARD_SERVICE ) ; return keyguardManager . isKeyguardLocked ( ) ; }
public void testECIEnglishHiragana ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u3040' } , new float [ ] { 20f , 1f , 10f } , 105825 , 110914 ) ; }
public void testECIEnglishKatakana ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u30a0' } , new float [ ] { 20f , 1f , 10f } , 109177 , 110914 ) ; }
public void testECIEnglishHalfWidthKatakana ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\uff80' } , new float [ ] { 20f , 1f , 10f } , 80617 , 110914 ) ; }
public void testECIEnglishChinese ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u4e00' } , new float [ ] { 20f , 1f , 10f } , 95797 , 110914 ) ; }
public void testECIGermanCyrillic ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u00c4' , '\u042f' } , new float [ ] { 20f , 1f , 1f , 10f } , 80755 , 96007 ) ; }
public void testECIEnglishCzechCyrillic1 ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u010c' , '\u042f' } , new float [ ] { 10f , 1f , 10f , 10f } , 102824 , 124525 ) ; }
public void testECIEnglishCzechCyrillic2 ( ) throws Exception { performECITest ( new char [ ] { 'a' , '1' , '\u010c' , '\u042f' } , new float [ ] { 40f , 1f , 10f , 10f } , 81321 , 88236 ) ; }
public void testEncodeAuto ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "ABCD" , Compaction . AUTO , StandardCharsets . UTF_8 , false ) ; assertEquals ( "\u039f\u001A\u0385ABCD" , encoded ) ; }
public void testEncodeAutoWithSpecialChars ( ) throws Exception { PDF417HighLevelEncoder . encodeHighLevel ( "1%§s ?aG$" , Compaction . AUTO , StandardCharsets . UTF_8 , false ) ; }
public void testEncodeIso88591WithSpecialChars ( ) throws Exception { PDF417HighLevelEncoder . encodeHighLevel ( "asdfg§asd" , Compaction . AUTO , StandardCharsets . ISO_8859_1 , false ) ; }
public void testEncodeText ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "ABCD" , Compaction . TEXT , StandardCharsets . UTF_8 , false ) ; assertEquals ( "Ο\u001A\u0001?" , encoded ) ; }
public void testEncodeNumeric ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "1234" , Compaction . NUMERIC , StandardCharsets . UTF_8 , false ) ; assertEquals ( "\u039f\u001A\u0386\f\u01b2" , encoded ) ; }
public void testEncodeByte ( ) throws Exception { String encoded = PDF417HighLevelEncoder . encodeHighLevel ( "abcd" , Compaction . BYTE , StandardCharsets . UTF_8 , false ) ; assertEquals ( "\u039f\u001A\u0385abcd" , encoded ) ; }
private MinimalEncoder ( ) { }
private static boolean isInC40Shift1Set ( char ch ) { return ch <= 31 ; }
public void testLongCompact ( ) throws Exception { String toEncode = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" ; encode ( toEncode , true , toEncode ) ; }
public static String encodeHighLevel ( String msg ) { return encodeHighLevel ( msg , SymbolShapeHint . FORCE_NONE , null , null , false ) ; }
public void setReaderDefault ( ) { appendToLog ( "PowerLevel" ) ; setPowerLevel ( 300 ) ; setTagGroup ( 0 , 0 , 2 ) ; setPopulation ( 60 ) ; setInvAlgoNoSave ( true ) ; setCurrentLinkProfile ( 1 ) ; }
public void init ( ) { super . init ( ) ; dir = Uri . parse ( "file : fsResolver = new FakeFsModuleResolver ( ) ; fakeFs = new FileSystemFacadeImpl ( new FakeSysCall ( ) , fsResolver , context ) ; }
public void testGetHttpFileName ( ) { String actual = DownloadUtils . getHttpFileName ( fs , "http : assertEquals ( "file . txt" , actual ) ; actual = DownloadUtils . getHttpFileName ( fs , "http : assertEquals ( "file . txt" , actual ) ; }
public void testGetHttpFileName_withDisposition ( ) { String actual = DownloadUtils . getHttpFileName ( fs , "http : "attachment ; filename = \"subdir/real . pdf\"" , null , null ) ; assertEquals ( "real . pdf" , actual ) ; }
public void testGetHttpFileName_withLocation ( ) { String actual = DownloadUtils . getHttpFileName ( fs , "http : null , "Content - Location : subdir/real . pdf" , null ) ; assertEquals ( "real . pdf" , actual ) ; }
public void testGetHttpFileName_withDispositionAndLocation ( ) { String actual = DownloadUtils . getHttpFileName ( fs , "http : "attachment ; filename = \"subdir/real . pdf\"" , "Content - Location : subdir/file . pdf" , null ) ; assertEquals ( "real . pdf" , actual ) ; }
public void testGetHttpFileName_dispositionWithEncoding ( ) { String actual = DownloadUtils . getHttpFileName ( fs , "http : "attachment ; filename = \"foo . txt\" ; filename* = UTF - 8''foo . txt" , null , null ) ; assertEquals ( "foo . txt" , actual ) ; }
public synchronized static FileSystemFacade getFileSystemFacade ( @ NonNull Context appContext ) { if ( fileSystemFacade == null ) fileSystemFacade = new FileSystemFacadeImpl ( new SysCallImpl ( ) , new FsModuleResolverImpl ( appContext ) , appContext ) ; return fileSystemFacade ; }
private final Preference . OnPreferenceClickListener prefClickListener = ( preference ) -> { openPreference ( preference . getKey ( ) ) ; return true ; } ;
public Boolean contains ( MessageToWatch message ) { return messageQueue . contains ( message ) ; }
public MessageToWatch next ( ) { if ( messageQueue . size ( ) > 0 ) { return messageQueue . get ( 0 ) ; } return null ; }
public void remove ( MessageToWatch message ) { messageQueue . remove ( message ) ; }
public void onInitializeError ( ConnectIQ . IQSdkErrorStatus errStatus ) { Logger . logSevere ( TAG + " " + errStatus . toString ( ) ) ; connectIqReady = false ; ServiceRecoveryManager . getInstance ( ) . stopSelfAndScheduleRecovery ( "onInitializeError" ) ; }
public void updateUserAmounts ( User sender , User receiver , int amount ) { sender . amount -= amount ; receiver . amount += amount ; }
public boolean isTransactionFeasible ( User user , int amount ) { return amount > 0 && amount <= user . amount ; }
public void onDataChange ( @ NonNull DataSnapshot snapshot ) { User user = snapshot . getValue ( User . class ) ; loadData . onDataLoaded ( user ) ; }
public SliderIntroAdapter . SliderVH onCreateViewHolder ( ViewGroup parent ) { View inflate = LayoutInflater . from ( context ) . inflate ( R . layout . slider_image , parent , false ) ; return new SliderVH ( inflate ) ; }
public WinAuthImporter . State read ( InputStream stream , boolean isInternal ) throws DatabaseImporterException { GoogleAuthUriImporter importer = new GoogleAuthUriImporter ( requireContext ( ) ) ; DatabaseImporter . State state = importer . read ( stream ) ; return new State ( state ) ; }
public void setResult ( Intent result ) { _result = result ; requireActivity ( ) . setResult ( Activity . RESULT_OK , _result ) ; }
public void onException ( Exception e ) { e . printStackTrace ( ) ; updateEncryptionPreferences ( ) ; Dialogs . showErrorDialog ( requireContext ( ) , R . string . encryption_set_password_error , e ) ; }
public void onSlotInitializationFailed ( int errorCode , @ NonNull CharSequence errString ) { if ( ! BiometricsHelper . isCanceled ( errorCode ) ) { Dialogs . showErrorDialog ( requireContext ( ) , R . string . encryption_enable_biometrics_error , errString ) ; } }
public void onException ( Exception e ) { e . printStackTrace ( ) ; Dialogs . showErrorDialog ( requireContext ( ) , R . string . encryption_set_password_error , e ) ; }
public void onNotFinishedError ( ) { Toast . makeText ( requireContext ( ) , R . string . snackbar_authentication_method , Toast . LENGTH_SHORT ) . show ( ) ; }
private VerticalSpaceItemDecoration ( float dp ) { _height = MetricsHelper . convertDpToPixels ( requireContext ( ) , dp ) ; }
private File getVaultBackupFile ( ) { return new File ( new File ( getFilesDir ( ) , "backup" ) , VaultRepository . FILENAME ) ; }
private void resetUsageCount ( ) { _prefs . resetUsageCount ( _origEntry . getUUID ( ) ) ; _textUsageCount . setText ( "0" ) ; }
private void updateSortCategoryMenu ( ) { SortCategory category = _prefs . getCurrentSortCategory ( ) ; _menu . findItem ( category . getMenuItem ( ) ) . setChecked ( true ) ; }
public void onLongEntryClick ( VaultEntry entry ) { if ( ! _selectedEntries . isEmpty ( ) ) { return ; } _selectedEntries . add ( entry ) ; _entryListView . setActionModeState ( true , entry ) ; _actionMode = startSupportActionMode ( _actionModeCallbacks ) ; }
public void onEntryDrop ( VaultEntry entry ) { saveVault ( ) ; }
public void onEntryChange ( VaultEntry entry ) { saveAndBackupVault ( ) ; }
public void onSaveGroupFilter ( List < String > groupFilter ) { _prefs . setGroupFilter ( groupFilter ) ; }
public void testYandexSecretValidation ( ) { assertThrows ( OtpInfoException . class , ( ) -> YandexInfo . validateSecret ( getBase32Vector ( 2 ) ) ) ; assertThrows ( OtpInfoException . class , ( ) -> YandexInfo . validateSecret ( getBase32Vector ( 3 ) ) ) ; }
public void onBackPressed ( ) { if ( getSelectionStart ( ) != null ) { endAyahMode ( ) ; } else if ( showingTranslation ) { switchToQuran ( ) ; } else { onSessionEnd ( ) ; super . onBackPressed ( ) ; } }
public void onAttach ( @ NonNull Context context ) { super . onAttach ( context ) ; ( ( QuranApplication ) context . getApplicationContext ( ) ) . getApplicationComponent ( ) . inject ( this ) ; setHasOptionsMenu ( true ) ; }
public void handleLongPress ( @ NonNull SuraAyah suraAyah ) { if ( isVisible ( ) ) { ayahTrackerPresenter . onLongPress ( suraAyah ) ; } }
public void handleLongPress ( @ NonNull SuraAyah suraAyah ) { if ( isVisible ( ) ) { readingEventPresenter . onAyahSelection ( new AyahSelection . Ayah ( suraAyah , translationView . getToolbarPosition ( suraAyah . sura , suraAyah . ayah ) ) ) ; } }
public void updateView ( ) { if ( isAdded ( ) ) { quranPageLayout . updateView ( quranSettings ) ; if ( ! quranSettings . highlightBookmarks ( ) ) { imageView . unHighlight ( HighlightTypes . BOOKMARK ) ; } quranPagePresenter . refresh ( ) ; } }
public Fraction getCorrectAnswers ( ) { return correctAnswers ; }
public boolean setDate ( CharSequence date ) { if ( date == null ) return false ; else { setDate ( LocalDate . parse ( date ) ) ; return true ; } }
public void setCorrectAnswers ( Fraction correctAnswers ) { this . correctAnswers = correctAnswers ; updateAnswers ( ) ; }
public DailyRecord ( ) { date = LocalDate . now ( ) ; correctAnswers = Fraction . ZERO ; totalAnswers = 0 ; }
public static void initialize ( Application context ) { if ( DAO == null ) DAO = Room . databaseBuilder ( context , LogDatabase . class , "user - logs" ) . addMigrations ( MIGRATION_1_2 , MIGRATION_2_3 , MIGRATION_3_4 ) . build ( ) . logDao ( ) ; }
public static boolean addDelay ( ) { return gPrefs . getBoolean ( ADD_DELAY , false ) ; }
public void run ( ) { hasRoot [ 0 ] = Shell . rootAccess ( ) ; }
public void moveToDate ( LocalDate date ) { moveToDateTime ( CalendarHelper . convertDateToDateTime ( date ) ) ; }
public void setSelectedDate ( LocalDate date ) { if ( date == null ) { return ; } DateTime dateTime = CalendarHelper . convertDateToDateTime ( date ) ; selectedDates . add ( dateTime ) ; }
public void setMinDate ( LocalDate minDate ) { if ( minDate == null ) { minDateTime = null ; } else { minDateTime = CalendarHelper . convertDateToDateTime ( minDate ) ; } }
public void onLongClickDate ( LocalDate date , View view ) { }
public void onCreate ( ) { super . onCreate ( ) ; setTheme ( R . style . Hydra_Material ) ; }
private void updateScrollPositions ( ) { updateButtonCta ( ) ; updateButtonBackPosition ( ) ; updateButtonNextPosition ( ) ; updatePagerIndicatorPosition ( ) ; updateParallax ( ) ; updateFullscreen ( ) ; updateBackgroundFade ( ) ; }
private void updateButtonBackDrawable ( ) { if ( buttonBackFunction == BUTTON_BACK_FUNCTION_SKIP ) { miButtonBack . setIconResource ( R . drawable . mi_ic_skip ) ; } else { miButtonBack . setIconResource ( R . drawable . mi_ic_previous ) ; } }
public void onPageSelected ( int position ) { IntroActivity . this . position = position ; lockSwipeIfNeeded ( ) ; }
public long getSlideId ( ) { return requireArguments ( ) . getLong ( ARGUMENT_ID ) ; }
private FragmentSlideFragment ( ) { }
public void onViewCreated ( @ NonNull View view , @ Nullable Bundle savedInstanceState ) { parallaxableChildren . addAll ( ParallaxUtil . findParallaxableChildren ( view ) ) ; }
public int hashCode ( ) { return Objects . hash ( restoMenu , feedRestoKind ) ; }
public void onResume ( ) { super . onResume ( ) ; Reporting . getTracker ( getContext ( ) ) . log ( new MenuEvent ( data ) ) ; }
public Duration getCacheDuration ( ) { return Duration . ofMinutes ( 10 ) ; }
public void onSaveInstanceState ( @ NonNull Bundle savedInstanceState ) { requireArguments ( ) . remove ( ARG_BITMAP ) ; super . onSaveInstanceState ( savedInstanceState ) ; }
public void newAlbumImage ( AlbumModel album ) { if ( album . equals ( mAlbum ) ) { if ( ! mHideArtwork ) { int width = requireView ( ) . getMeasuredWidth ( ) ; mBitmapLoader . getAlbumImage ( mAlbum , width , width ) ; } } }
public void newArtistImage ( ArtistModel artist ) { if ( artist . equals ( mArtist ) ) { if ( ! mHideArtwork ) { int width = requireView ( ) . getWidth ( ) ; mBitmapLoader . getArtistImage ( mArtist , width , width ) ; } } }
public void onCreatePreferences ( Bundle bundle , String s ) { addPreferencesFromResource ( R . xml . odyssey_artwork_settings ) ; PreferenceManager . setDefaultValues ( requireActivity ( ) , R . xml . odyssey_artwork_settings , false ) ; }
private void playCurrentFolderAndSubFolders ( ) { try { ( ( GenericActivity ) requireActivity ( ) ) . getPlaybackService ( ) . playDirectoryAndSubDirectories ( mCurrentDirectory . getPath ( ) , mSearchString ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
private void enqueueCurrentFolderAndSubFolders ( ) { try { ( ( GenericActivity ) requireActivity ( ) ) . getPlaybackService ( ) . enqueueDirectoryAndSubDirectories ( mCurrentDirectory . getPath ( ) , mSearchString ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public void onDetach ( ) { super . onDetach ( ) ; requireActivity ( ) . getApplicationContext ( ) . unregisterComponentCallbacks ( mComponentCallback ) ; }
private void enqueuePlaylist ( ) { try { ( ( GenericActivity ) requireActivity ( ) ) . getPlaybackService ( ) . enqueuePlaylist ( mPlaylistModel ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
private void playPlaylist ( int position ) { try { ( ( GenericActivity ) requireActivity ( ) ) . getPlaybackService ( ) . playPlaylist ( mPlaylistModel , position ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
private void enqueueAllAlbums ( ) { try { ( ( GenericActivity ) requireActivity ( ) ) . getPlaybackService ( ) . enqueueRecentAlbums ( ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
private void playAllAlbums ( ) { try { ( ( GenericActivity ) requireActivity ( ) ) . getPlaybackService ( ) . playRecentAlbums ( ) ; } catch ( RemoteException e ) { e . printStackTrace ( ) ; } }
public void onCreatePreferences ( Bundle bundle , String s ) { addPreferencesFromResource ( R . xml . odyssey_main_settings ) ; PreferenceManager . setDefaultValues ( requireActivity ( ) , R . xml . odyssey_main_settings , false ) ; }
public void onTransferStarted ( String fileName , long fileSize ) { }
public Consumer < List < File >> sendTaskLauncher ( AppController appController ) { return appController : : sendTask ; }
public void transferTest ( ) throws Exception { test ( ( ) -> Main . main ( String . format ( "receive - d = %s - peer = %s : 8081" , OUTPUT_DIRECTORY , IP_ADDRESS ) . split ( " " ) ) ) ; }
public void transferTestHexString ( ) throws Exception { test ( ( ) -> Main . main ( String . format ( "receive - d = %s - peer = %s" , OUTPUT_DIRECTORY , IP_ADDRESS_HEX_STRING ) . split ( " " ) ) ) ; }
public void render ( float delta ) { super . render ( delta ) ; act ( ) ; updateCamera ( ) ; drawMap ( ) ; drawSections ( ) ; }
private void setupVehicleReward ( UiBuilder builder , VehicleDef vehicleDef ) { VehicleActor vehicle = builder . getActor ( "vehicle" ) ; vehicle . setVehicleDef ( vehicleDef ) ; setupRewardDetails ( builder , tr ( "New vehicle unlocked ! " ) , vehicleDef . name ) ; }
private void loadModelFromRepository ( URL url ) { if ( AndroidUtils . checkPermission ( this , Manifest . permission . INTERNET , REQUEST_INTERNET_ACCESS ) ) { new LoadRepoIndexTask ( ) . execute ( url ) ; } }
public Notification toNotification ( ) { Notification notification = new Notification ( ) ; notification . setTaskId ( taskId ) ; notification . setType ( type ) ; notification . setTimestamp ( currentTimeMillis ( ) ) ; return notification ; }
public void setCollapsed ( Iterable < Long > collapsed ) { setString ( R . string . p_widget_collapsed , Joiner . on ( " , " ) . join ( collapsed ) ) ; }
public EventStatus getStatus ( ) { return event . getStatus ( ) ; }
private final Runnable enableLocationUpdatesRunnable = new Runnable ( ) { @ Override public void run ( ) { setGPSLocationUpdates ( false ) ; setGPSLocationUpdates ( true ) ; } } ;
public void run ( ) { setGPSLocationUpdates ( false ) ; setGPSLocationUpdates ( true ) ; }
public void run ( ) { if ( ( gpsStatus == GPS_OK ) || ( gpsStatus == GPS_STABILIZING ) ) { gpsStatus = GPS_TEMPORARYUNAVAILABLE ; stabilizer = numberOfStabilizationSamples ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_FIX ) ; } }
public void onSatelliteStatusChanged ( @ NonNull GnssStatus status ) { super . onSatelliteStatusChanged ( status ) ; updateGNSSStatus ( status ) ; }
public void onProviderDisabled ( @ NonNull String provider ) { gpsStatus = GPS_DISABLED ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_FIX ) ; }
public void onProviderEnabled ( @ NonNull String provider ) { gpsStatus = GPS_SEARCHING ; EventBus . getDefault ( ) . post ( EventBusMSG . UPDATE_FIX ) ; }
public TextImporter ( Collection col , @ NonNull String file ) { super ( col , file ) ; mFileObj = null ; mDelimiter = '\0' ; mTagsToAdd = new String [ 0 ] ; }
private ForeignNote noteFromFields ( List < String > fields ) { ForeignNote note = new ForeignNote ( ) ; note . mFields . addAll ( fields ) ; note . mTags . addAll ( Arrays . asList ( mTagsToAdd ) ) ; return note ; }
private void cacheFile ( ) { if ( mFileObj == null ) { openFile ( ) ; } }
public UndoTaskListener ( boolean isReview , DeckPicker deckPicker ) { super ( deckPicker ) ; this . mIsReview = isReview ; }
public void testMp3 ( ) { @ Language ( "HTML" ) String html = " < td >< a href = \"/speak - de/0/7/52qA5FttGIU . mp3\" > Mit Ihrem" ; String mp3 = BeolingusParser . getMp3AddressFromPronunciation ( html ) ; assertEquals ( "https : }
public void dismissAllDialogFragments ( ) { getSupportFragmentManager ( ) . popBackStack ( DIALOG_FRAGMENT_TAG , FragmentManager . POP_BACK_STACK_INCLUSIVE ) ; }
public void localeTwoLetterCodeResolves ( ) { assertThat ( "A locale with a 3 - letter code resolves correctly" , getLocale ( "af" ) . getDisplayLanguage ( ) , is ( "Afrikaans" ) ) ; }
public void localeThreeLetterCodeResolves ( ) { assertThat ( "A locale with a 3 - letter code resolves correctly" , getLocale ( "fil" ) . getDisplayLanguage ( ) , is ( "Filipino" ) ) ; }
public static boolean waitToFinish ( @ Nullable Integer timeoutSeconds ) { return sTaskManager . waitToFinishConcrete ( timeoutSeconds ) ; } ;
public boolean waitToFinishConcrete ( @ Nullable Integer timeoutSeconds ) { return true ; }
public boolean appliesTo ( ResourceFolderType directoryType ) { return directoryType == ResourceFolderType . VALUES ; }
public boolean appliesTo ( ResourceFolderType directoryType ) { return directoryType == ResourceFolderType . XML ; }
private void setGestureSetting ( boolean value ) { Editor settings = AnkiDroidApp . getSharedPrefs ( getTargetContext ( ) ) . edit ( ) ; settings . putBoolean ( GestureProcessor . PREF_KEY , value ) ; settings . apply ( ) ; }
public boolean matchesSafely ( View view ) { return matcher . matches ( view ) && mCurrentIndex ++ == index ; }
public void onCorruption ( SupportSQLiteDatabase db ) { mDatabaseIsCorrupt = true ; super . onCorruption ( db ) ; }
public void setUp ( ) throws IOException { mTestCol = getEmptyCol ( ) ; }
public void tearDown ( ) { mTestCol . close ( ) ; }
private void setMaxTries ( int i ) { if ( i < 1 ) { throw new IllegalArgumentException ( "iterations < 1 : " + i ) ; } this . mMaxTries = i ; }
public void rebuildFiltered ( long did ) { getCol ( ) . getDecks ( ) . select ( did ) ; TaskManager . launchCollectionTask ( new CollectionTask . RebuildCram ( ) , simpleProgressListener ( ) ) ; }
public void emptyFiltered ( long did ) { getCol ( ) . getDecks ( ) . select ( did ) ; TaskManager . launchCollectionTask ( new CollectionTask . EmptyCram ( ) , simpleProgressListener ( ) ) ; }
public void testProductionConfigurationUserAsk ( ) throws Exception { setReportConfig ( FEEDBACK_REPORT_ASK ) ; setAcraConfig ( "Production" ) ; verifyACRANotDisabled ( ) ; assertToastMessage ( R . string . feedback_for_manual_toast_text ) ; assertToastIsEnabled ( ) ; assertDialogEnabledStatus ( "Dialog should be enabled" , true ) ; }
public void testToastTextWhenMovingFromAskToAlways ( ) throws Exception { setReportConfig ( FEEDBACK_REPORT_ASK ) ; setAcraConfig ( "Production" ) ; verifyACRANotDisabled ( ) ; assertToastMessage ( R . string . feedback_for_manual_toast_text ) ; setAcraReportingMode ( FEEDBACK_REPORT_ALWAYS ) ; assertToastMessage ( R . string . feedback_auto_toast_text ) ; }
public static @ NonNull String getCollectionPath ( Context context ) { return new File ( getCurrentAnkiDroidDirectory ( context ) , COLLECTION_FILENAME ) . getAbsolutePath ( ) ; }
public ExportApkg ( @ NonNull String apkgPath , Long did , Boolean includeSched , Boolean includeMedia ) { this . mApkgPath = apkgPath ; this . mDid = did ; this . mIncludeSched = includeSched ; this . mIncludeMedia = includeMedia ; }
public DB ( @ NonNull String ankiFilename ) { this ( ankiFilename , null ) ; }
public static Collection Collection ( Context context , @ NonNull String path ) { return Collection ( context , path , false , false ) ; }
public static Collection Collection ( Context context , @ NonNull String path , boolean server , boolean log ) { return Collection ( context , path , server , log , new SystemTime ( ) ) ; }
public DB openCollectionDatabase ( @ NonNull String path ) { return new DB ( path ) ; }
public Anki2Importer ( Collection col , @ NonNull String file ) { super ( col , file ) ; mNeedMapper = false ; mDeckPrefix = null ; mAllowUpdate = true ; mDupeOnSchemaChange = false ; }
public Importer ( Collection col , @ NonNull String file ) { mFile = file ; mLog = new ArrayList <> ( ) ; mCol = col ; mTotal = 0 ; mContext = col . getContext ( ) ; }
public DB openCollectionDatabase ( @ NonNull String path ) { Backend . BackendError error = mock ( Backend . BackendError . class ) ; throw new BackendException . BackendDbException . BackendDbLockedException ( error ) ; }
public void onClick ( DialogInterface dialog , int which ) { state . edit ( ) . putString ( "lastchangelog" , "2 . 1" ) . apply ( ) ; dialog . dismiss ( ) ; }
private List < String > getPoshFingerprints ( final String domain ) { final List < String > cached = getPoshFingerprintsFromCache ( domain ) ; if ( cached == null ) { return getPoshFingerprintsFromServer ( domain ) ; } else { return cached ; } }
private DownloadableFile getFileForPath ( final String path , final String mime ) { if ( path . startsWith ( "/" ) ) { return new DownloadableFile ( path ) ; } else { return getLegacyFileForFilename ( path , mime ) ; } }
public String getStatusUpdates ( int lastKnownSerial ) { Log . i ( TAG , "getStatusUpdates" ) ; return WebxdcActivity . this . dcContext . getWebxdcStatusUpdates ( WebxdcActivity . this . dcAppMsg . getId ( ) , lastKnownSerial ) ; }
public Loader < BucketedThreadMediaLoader . BucketedThreadMedia > onCreateLoader ( int i , Bundle bundle ) { return new BucketedThreadMediaLoader ( getContext ( ) , chatId , DcMsg . DC_MSG_FILE , DcMsg . DC_MSG_AUDIO , DcMsg . DC_MSG_WEBXDC ) ; }
